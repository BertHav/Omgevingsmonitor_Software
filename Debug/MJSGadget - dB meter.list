
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023c20  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003480  08023ce0  08023ce0  00024ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027160  08027160  00029424  2**0
                  CONTENTS
  4 .ARM          00000008  08027160  08027160  00028160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027168  08027168  00029424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027168  08027168  00028168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802716c  0802716c  0002816c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  08027170  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030d8  20000424  08027594  00029424  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200034fc  08027594  000294fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00029424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034507  00000000  00000000  0002944c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000940c  00000000  00000000  0005d953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002af0  00000000  00000000  00066d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fdd  00000000  00000000  00069850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d87  00000000  00000000  0006b82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041e2d  00000000  00000000  0008e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a130b  00000000  00000000  000d03e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001716ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af2c  00000000  00000000  001717a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017c6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017c739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017ecb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023cc8 	.word	0x08023cc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	08023cc8 	.word	0x08023cc8

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08026340 	.word	0x08026340
 8000e0c:	08026380 	.word	0x08026380
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	080263bc 	.word	0x080263bc
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000618 	.word	0x20000618

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00c f914 	bl	800f898 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000614 	.word	0x20000614

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f003 fa8a 	bl	8006ba4 <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f003 fae7 	bl	8006c68 <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	2000056c 	.word	0x2000056c
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000570 	.word	0x20000570

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f004 fa67 	bl	8007bb0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000658 	.word	0x20000658
 8003730:	0808000c 	.word	0x0808000c
 8003734:	20000664 	.word	0x20000664
 8003738:	20000668 	.word	0x20000668

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f004 fa31 	bl	8007bb0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	2000066c 	.word	0x2000066c
 800379c:	08080090 	.word	0x08080090
 80037a0:	2000068c 	.word	0x2000068c
 80037a4:	20000690 	.word	0x20000690

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000624 	.word	0x20000624

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000624 	.word	0x20000624

08003800 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <setMic+0x28>)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <setMic+0x28>)
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <setMic+0x28>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000624 	.word	0x20000624

0800382c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	0002      	movs	r2, r0
 8003834:	1dbb      	adds	r3, r7, #6
 8003836:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd fec7 	bl	80015d0 <__aeabi_i2f>
 8003842:	1c03      	adds	r3, r0, #0
 8003844:	490d      	ldr	r1, [pc, #52]	@ (800387c <setPM2p5+0x50>)
 8003846:	1c18      	adds	r0, r3, #0
 8003848:	f7fd f9c4 	bl	8000bd4 <__aeabi_fdiv>
 800384c:	1c03      	adds	r3, r0, #0
 800384e:	1c1a      	adds	r2, r3, #0
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <setPM2p5+0x54>)
 8003852:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <setPM2p5+0x54>)
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <setPM2p5+0x54>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	1c19      	adds	r1, r3, #0
 800385e:	1c10      	adds	r0, r2, #0
 8003860:	f7fc fe7a 	bl	8000558 <__aeabi_fcmpgt>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d100      	bne.n	800386a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8003868:	e003      	b.n	8003872 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <setPM2p5+0x54>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <setPM2p5+0x54>)
 8003870:	60da      	str	r2, [r3, #12]
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	41200000 	.word	0x41200000
 8003880:	20000624 	.word	0x20000624

08003884 <setPM10>:

void setPM10(uint16_t PM10) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	0002      	movs	r2, r0
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe9b 	bl	80015d0 <__aeabi_i2f>
 800389a:	1c03      	adds	r3, r0, #0
 800389c:	490d      	ldr	r1, [pc, #52]	@ (80038d4 <setPM10+0x50>)
 800389e:	1c18      	adds	r0, r3, #0
 80038a0:	f7fd f998 	bl	8000bd4 <__aeabi_fdiv>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	1c1a      	adds	r2, r3, #0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <setPM10+0x54>)
 80038aa:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <setPM10+0x54>)
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <setPM10+0x54>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	1c19      	adds	r1, r3, #0
 80038b6:	1c10      	adds	r0, r2, #0
 80038b8:	f7fc fe4e 	bl	8000558 <__aeabi_fcmpgt>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d100      	bne.n	80038c2 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038c0:	e003      	b.n	80038ca <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <setPM10+0x54>)
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <setPM10+0x54>)
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	41200000 	.word	0x41200000
 80038d8:	20000624 	.word	0x20000624

080038dc <setNOx>:

void setNOx(uint16_t nox) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <setNOx+0x30>)
 80038ea:	1dba      	adds	r2, r7, #6
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setNOx+0x30>)
 80038f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d903      	bls.n	8003904 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <setNOx+0x30>)
 80038fe:	1dba      	adds	r2, r7, #6
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000624 	.word	0x20000624

08003910 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003914:	f006 f8b4 	bl	8009a80 <sen5x_Get_sen5x_enable_state>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d008      	beq.n	800392e <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800392a:	2200      	movs	r2, #0
 800392c:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.VOCIndexmax = 0;
 800392e:	4b03      	ldr	r3, [pc, #12]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003930:	2200      	movs	r2, #0
 8003932:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000624 	.word	0x20000624

08003940 <SetConfigMode>:

void SetConfigMode(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <SetConfigMode+0x30>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4053      	eors	r3, r2
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <SetConfigMode+0x34>)
 8003954:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <SetConfigMode+0x38>)
 8003956:	0019      	movs	r1, r3
 8003958:	2003      	movs	r0, #3
 800395a:	f00b fb59 	bl	800f010 <CreateLine>
  }
  ReconfigSet = true;
 800395e:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SetConfigMode+0x30>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <SetConfigMode+0x3c>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000054b 	.word	0x2000054b
 8003974:	08023ce0 	.word	0x08023ce0
 8003978:	08023d00 	.word	0x08023d00
 800397c:	200001f3 	.word	0x200001f3

08003980 <GetReconfigMode>:

bool GetReconfigMode() {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <GetReconfigMode+0x10>)
 8003986:	781b      	ldrb	r3, [r3, #0]
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	2000054b 	.word	0x2000054b

08003994 <ESP_GetUID>:

void ESP_GetUID(){
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003998:	f00b ffc8 	bl	800f92c <HAL_GetUIDw0>
 800399c:	0002      	movs	r2, r0
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <ESP_GetUID+0x28>)
 80039a0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039a2:	f00b ffcd 	bl	800f940 <HAL_GetUIDw1>
 80039a6:	0002      	movs	r2, r0
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <ESP_GetUID+0x28>)
 80039aa:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ac:	f00b ffd2 	bl	800f954 <HAL_GetUIDw2>
 80039b0:	0002      	movs	r2, r0
 80039b2:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <ESP_GetUID+0x28>)
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000554 	.word	0x20000554

080039c0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039c8:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <ESP_Init+0x2c>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <ESP_Init+0x30>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80039d4:	f7ff ffde 	bl	8003994 <ESP_GetUID>
  beurs = checkEEprom();
 80039d8:	f7ff fe7a 	bl	80036d0 <checkEEprom>
 80039dc:	0003      	movs	r3, r0
 80039de:	001a      	movs	r2, r3
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ESP_Init+0x34>)
 80039e2:	701a      	strb	r2, [r3, #0]
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000440 	.word	0x20000440
 80039f0:	2000002c 	.word	0x2000002c
 80039f4:	2000054e 	.word	0x2000054e

080039f8 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	000a      	movs	r2, r1
 8003a02:	1cbb      	adds	r3, r7, #2
 8003a04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <ESP_Send+0x54>)
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	250f      	movs	r5, #15
 8003a0c:	197c      	adds	r4, r7, r5
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0019      	movs	r1, r3
 8003a16:	f014 fa69 	bl	8017eec <HAL_UART_Transmit_DMA>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <ESP_Send+0x58>)
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <ESP_Send+0x5c>)
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f00b faef 	bl	800f010 <CreateLine>
    return false;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e006      	b.n	8003a44 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <ESP_Send+0x60>)
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f01c ffcf 	bl	80209e0 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	20000440 	.word	0x20000440
 8003a50:	08023d04 	.word	0x08023d04
 8003a54:	08023d24 	.word	0x08023d24
 8003a58:	08023d28 	.word	0x08023d28

08003a5c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	000a      	movs	r2, r1
 8003a66:	1cbb      	adds	r3, r7, #2
 8003a68:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003a6a:	4b52      	ldr	r3, [pc, #328]	@ (8003bb4 <ESP_Receive+0x158>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003a70:	260f      	movs	r6, #15
 8003a72:	19bb      	adds	r3, r7, r6
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a78:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb8 <ESP_Receive+0x15c>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	250e      	movs	r5, #14
 8003a7e:	197c      	adds	r4, r7, r5
 8003a80:	1cbb      	adds	r3, r7, #2
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0019      	movs	r1, r3
 8003a88:	f014 fac0 	bl	801800c <HAL_UART_Receive_DMA>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a90:	002c      	movs	r4, r5
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d100      	bne.n	8003a9c <ESP_Receive+0x40>
 8003a9a:	e085      	b.n	8003ba8 <ESP_Receive+0x14c>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a9c:	4b46      	ldr	r3, [pc, #280]	@ (8003bb8 <ESP_Receive+0x15c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2284      	movs	r2, #132	@ 0x84
 8003aa2:	589b      	ldr	r3, [r3, r2]
 8003aa4:	4a45      	ldr	r2, [pc, #276]	@ (8003bbc <ESP_Receive+0x160>)
 8003aa6:	4946      	ldr	r1, [pc, #280]	@ (8003bc0 <ESP_Receive+0x164>)
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f00b fab1 	bl	800f010 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d008      	beq.n	8003aca <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003ab8:	4a42      	ldr	r2, [pc, #264]	@ (8003bc4 <ESP_Receive+0x168>)
 8003aba:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <ESP_Receive+0x164>)
 8003abc:	0019      	movs	r1, r3
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f00b faa6 	bl	800f010 <CreateLine>
      reset = true;
 8003ac4:	19bb      	adds	r3, r7, r6
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003aca:	230e      	movs	r3, #14
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d005      	beq.n	8003ae2 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003ad6:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc8 <ESP_Receive+0x16c>)
 8003ad8:	4b39      	ldr	r3, [pc, #228]	@ (8003bc0 <ESP_Receive+0x164>)
 8003ada:	0019      	movs	r1, r3
 8003adc:	2001      	movs	r0, #1
 8003ade:	f00b fa97 	bl	800f010 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003ae2:	230e      	movs	r3, #14
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	4013      	ands	r3, r2
 8003aec:	d005      	beq.n	8003afa <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003aee:	4a37      	ldr	r2, [pc, #220]	@ (8003bcc <ESP_Receive+0x170>)
 8003af0:	4b33      	ldr	r3, [pc, #204]	@ (8003bc0 <ESP_Receive+0x164>)
 8003af2:	0019      	movs	r1, r3
 8003af4:	2001      	movs	r0, #1
 8003af6:	f00b fa8b 	bl	800f010 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003afa:	230e      	movs	r3, #14
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2208      	movs	r2, #8
 8003b02:	4013      	ands	r3, r2
 8003b04:	d005      	beq.n	8003b12 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b06:	4a32      	ldr	r2, [pc, #200]	@ (8003bd0 <ESP_Receive+0x174>)
 8003b08:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc0 <ESP_Receive+0x164>)
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f00b fa7f 	bl	800f010 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b12:	230e      	movs	r3, #14
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d005      	beq.n	8003b2a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd4 <ESP_Receive+0x178>)
 8003b20:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <ESP_Receive+0x164>)
 8003b22:	0019      	movs	r1, r3
 8003b24:	2001      	movs	r0, #1
 8003b26:	f00b fa73 	bl	800f010 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b2a:	230e      	movs	r3, #14
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2220      	movs	r2, #32
 8003b32:	4013      	ands	r3, r2
 8003b34:	d005      	beq.n	8003b42 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b36:	4a28      	ldr	r2, [pc, #160]	@ (8003bd8 <ESP_Receive+0x17c>)
 8003b38:	4b21      	ldr	r3, [pc, #132]	@ (8003bc0 <ESP_Receive+0x164>)
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f00b fa67 	bl	800f010 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b42:	230e      	movs	r3, #14
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2240      	movs	r2, #64	@ 0x40
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d005      	beq.n	8003b5a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b4e:	4a23      	ldr	r2, [pc, #140]	@ (8003bdc <ESP_Receive+0x180>)
 8003b50:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc0 <ESP_Receive+0x164>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	2001      	movs	r0, #1
 8003b56:	f00b fa5b 	bl	800f010 <CreateLine>
    }
#endif
    if (reset) {
 8003b5a:	230f      	movs	r3, #15
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01c      	beq.n	8003b9e <ESP_Receive+0x142>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003b64:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <ESP_Receive+0x184>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	2101      	movs	r1, #1
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f00d f925 	bl	8010dba <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003b70:	2001      	movs	r0, #1
 8003b72:	f00b fe9b 	bl	800f8ac <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	481a      	ldr	r0, [pc, #104]	@ (8003be4 <ESP_Receive+0x188>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	0019      	movs	r1, r3
 8003b80:	f00d f91b 	bl	8010dba <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003b84:	2001      	movs	r0, #1
 8003b86:	f00b fe91 	bl	800f8ac <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <ESP_Receive+0x184>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2102      	movs	r1, #2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f00d f912 	bl	8010dba <HAL_GPIO_WritePin>
      SetAllREDLED();
 8003b96:	f00a f9ad 	bl	800def4 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003b9a:	f00c fb46 	bl	801022a <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003b9e:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <ESP_Receive+0x158>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
    return false;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <ESP_Receive+0x14e>
  }
  return true;
 8003ba8:	2301      	movs	r3, #1
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b005      	add	sp, #20
 8003bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	20000444 	.word	0x20000444
 8003bb8:	20000440 	.word	0x20000440
 8003bbc:	08023d38 	.word	0x08023d38
 8003bc0:	08023d24 	.word	0x08023d24
 8003bc4:	08023d68 	.word	0x08023d68
 8003bc8:	08023d8c 	.word	0x08023d8c
 8003bcc:	08023db0 	.word	0x08023db0
 8003bd0:	08023dd4 	.word	0x08023dd4
 8003bd4:	08023df8 	.word	0x08023df8
 8003bd8:	08023e24 	.word	0x08023e24
 8003bdc:	08023e54 	.word	0x08023e54
 8003be0:	50001c00 	.word	0x50001c00
 8003be4:	50000800 	.word	0x50000800

08003be8 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_UART_ErrorCallback+0xf0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d16b      	bne.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2284      	movs	r2, #132	@ 0x84
 8003bfe:	589b      	ldr	r3, [r3, r2]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d065      	beq.n	8003cd0 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2284      	movs	r2, #132	@ 0x84
 8003c08:	589b      	ldr	r3, [r3, r2]
 8003c0a:	4a34      	ldr	r2, [pc, #208]	@ (8003cdc <HAL_UART_ErrorCallback+0xf4>)
 8003c0c:	4934      	ldr	r1, [pc, #208]	@ (8003ce0 <HAL_UART_ErrorCallback+0xf8>)
 8003c0e:	2003      	movs	r0, #3
 8003c10:	f00b f9fe 	bl	800f010 <CreateLine>
    switch (huart->ErrorCode) {
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2284      	movs	r2, #132	@ 0x84
 8003c18:	589b      	ldr	r3, [r3, r2]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d851      	bhi.n	8003cc2 <HAL_UART_ErrorCallback+0xda>
 8003c1e:	009a      	lsls	r2, r3, #2
 8003c20:	4b30      	ldr	r3, [pc, #192]	@ (8003ce4 <HAL_UART_ErrorCallback+0xfc>)
 8003c22:	18d3      	adds	r3, r2, r3
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003c28:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce8 <HAL_UART_ErrorCallback+0x100>)
 8003c2a:	4b30      	ldr	r3, [pc, #192]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f00b f9ee 	bl	800f010 <CreateLine>
        break;
 8003c34:	e04d      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003c36:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf0 <HAL_UART_ErrorCallback+0x108>)
 8003c38:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f00b f9e7 	bl	800f010 <CreateLine>
        break;
 8003c42:	e046      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c44:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf4 <HAL_UART_ErrorCallback+0x10c>)
 8003c46:	4b29      	ldr	r3, [pc, #164]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c48:	0019      	movs	r1, r3
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f00b f9e0 	bl	800f010 <CreateLine>
        break;
 8003c50:	e03f      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c52:	4a29      	ldr	r2, [pc, #164]	@ (8003cf8 <HAL_UART_ErrorCallback+0x110>)
 8003c54:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c56:	0019      	movs	r1, r3
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f00b f9d9 	bl	800f010 <CreateLine>
        break;
 8003c5e:	e038      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c60:	4a26      	ldr	r2, [pc, #152]	@ (8003cfc <HAL_UART_ErrorCallback+0x114>)
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c64:	0019      	movs	r1, r3
 8003c66:	2001      	movs	r0, #1
 8003c68:	f00b f9d2 	bl	800f010 <CreateLine>
        break;
 8003c6c:	e031      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003c6e:	4a24      	ldr	r2, [pc, #144]	@ (8003d00 <HAL_UART_ErrorCallback+0x118>)
 8003c70:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c72:	0019      	movs	r1, r3
 8003c74:	2001      	movs	r0, #1
 8003c76:	f00b f9cb 	bl	800f010 <CreateLine>
        break;
 8003c7a:	e02a      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003c7c:	4a21      	ldr	r2, [pc, #132]	@ (8003d04 <HAL_UART_ErrorCallback+0x11c>)
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	2001      	movs	r0, #1
 8003c84:	f00b f9c4 	bl	800f010 <CreateLine>
        break;
 8003c88:	e023      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d08 <HAL_UART_ErrorCallback+0x120>)
 8003c8c:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00b f9bd 	bl	800f010 <CreateLine>
        break;
 8003c96:	e01c      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003c98:	4a1c      	ldr	r2, [pc, #112]	@ (8003d0c <HAL_UART_ErrorCallback+0x124>)
 8003c9a:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f00b f9b6 	bl	800f010 <CreateLine>
        break;
 8003ca4:	e015      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d10 <HAL_UART_ErrorCallback+0x128>)
 8003ca8:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003caa:	0019      	movs	r1, r3
 8003cac:	2001      	movs	r0, #1
 8003cae:	f00b f9af 	bl	800f010 <CreateLine>
        break;
 8003cb2:	e00e      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003cb4:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <HAL_UART_ErrorCallback+0x12c>)
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003cb8:	0019      	movs	r1, r3
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f00b f9a8 	bl	800f010 <CreateLine>
        break;
 8003cc0:	e007      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003cc2:	4a15      	ldr	r2, [pc, #84]	@ (8003d18 <HAL_UART_ErrorCallback+0x130>)
 8003cc4:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <HAL_UART_ErrorCallback+0x104>)
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f00b f9a1 	bl	800f010 <CreateLine>
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_ErrorCallback+0xea>
      return;
 8003cd0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000440 	.word	0x20000440
 8003cdc:	08023e84 	.word	0x08023e84
 8003ce0:	08023d00 	.word	0x08023d00
 8003ce4:	08026488 	.word	0x08026488
 8003ce8:	08023eb4 	.word	0x08023eb4
 8003cec:	08023d24 	.word	0x08023d24
 8003cf0:	08023ee8 	.word	0x08023ee8
 8003cf4:	08023f14 	.word	0x08023f14
 8003cf8:	08023f48 	.word	0x08023f48
 8003cfc:	08023f74 	.word	0x08023f74
 8003d00:	08023f9c 	.word	0x08023f9c
 8003d04:	08023fcc 	.word	0x08023fcc
 8003d08:	08024004 	.word	0x08024004
 8003d0c:	0802403c 	.word	0x0802403c
 8003d10:	08024064 	.word	0x08024064
 8003d14:	0802408c 	.word	0x0802408c
 8003d18:	080240b8 	.word	0x080240b8

08003d1c <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e010      	b.n	8003d4e <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	001a      	movs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1898      	adds	r0, r3, r2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	18d3      	adds	r3, r2, r3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	001a      	movs	r2, r3
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <uint8ArrayToString+0x44>)
 8003d42:	0019      	movs	r1, r3
 8003d44:	f01c febc 	bl	8020ac0 <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b0b      	cmp	r3, #11
 8003d52:	ddeb      	ble.n	8003d2c <uint8ArrayToString+0x10>
  }
}
 8003d54:	46c0      	nop			@ (mov r8, r8)
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	080240dc 	.word	0x080240dc

08003d64 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	b089      	sub	sp, #36	@ 0x24
 8003d68:	af04      	add	r7, sp, #16
 8003d6a:	6039      	str	r1, [r7, #0]
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	1c02      	adds	r2, r0, #0
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	1dbb      	adds	r3, r7, #6
 8003d76:	1c0a      	adds	r2, r1, #0
 8003d78:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d7a:	4b20      	ldr	r3, [pc, #128]	@ (8003dfc <CreateMessage+0x98>)
 8003d7c:	4820      	ldr	r0, [pc, #128]	@ (8003e00 <CreateMessage+0x9c>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	0019      	movs	r1, r3
 8003d82:	f003 ff15 	bl	8007bb0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d86:	4b1f      	ldr	r3, [pc, #124]	@ (8003e04 <CreateMessage+0xa0>)
 8003d88:	481f      	ldr	r0, [pc, #124]	@ (8003e08 <CreateMessage+0xa4>)
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	f003 ff0f 	bl	8007bb0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <CreateMessage+0xa8>)
 8003d94:	481e      	ldr	r0, [pc, #120]	@ (8003e10 <CreateMessage+0xac>)
 8003d96:	220c      	movs	r2, #12
 8003d98:	0019      	movs	r1, r3
 8003d9a:	f003 ff09 	bl	8007bb0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e14 <CreateMessage+0xb0>)
 8003da0:	481d      	ldr	r0, [pc, #116]	@ (8003e18 <CreateMessage+0xb4>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	0019      	movs	r1, r3
 8003da6:	f003 ff03 	bl	8007bb0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003daa:	4b1c      	ldr	r3, [pc, #112]	@ (8003e1c <CreateMessage+0xb8>)
 8003dac:	481c      	ldr	r0, [pc, #112]	@ (8003e20 <CreateMessage+0xbc>)
 8003dae:	220c      	movs	r2, #12
 8003db0:	0019      	movs	r1, r3
 8003db2:	f003 fefd 	bl	8007bb0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003db6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <CreateMessage+0xc0>)
 8003db8:	481b      	ldr	r0, [pc, #108]	@ (8003e28 <CreateMessage+0xc4>)
 8003dba:	220c      	movs	r2, #12
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	f003 fef7 	bl	8007bb0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e2c <CreateMessage+0xc8>)
 8003dc4:	481a      	ldr	r0, [pc, #104]	@ (8003e30 <CreateMessage+0xcc>)
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	0019      	movs	r1, r3
 8003dca:	f003 fef1 	bl	8007bb0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003dce:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <CreateMessage+0xd0>)
 8003dd0:	4819      	ldr	r0, [pc, #100]	@ (8003e38 <CreateMessage+0xd4>)
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	f003 feeb 	bl	8007bb0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003dda:	4b18      	ldr	r3, [pc, #96]	@ (8003e3c <CreateMessage+0xd8>)
 8003ddc:	4818      	ldr	r0, [pc, #96]	@ (8003e40 <CreateMessage+0xdc>)
 8003dde:	220c      	movs	r2, #12
 8003de0:	0019      	movs	r1, r3
 8003de2:	f003 fee5 	bl	8007bb0 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003de6:	f7ff fca9 	bl	800373c <checkName>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d02e      	beq.n	8003e4c <CreateMessage+0xe8>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <CreateMessage+0xe0>)
 8003df0:	4815      	ldr	r0, [pc, #84]	@ (8003e48 <CreateMessage+0xe4>)
 8003df2:	2220      	movs	r2, #32
 8003df4:	0019      	movs	r1, r3
 8003df6:	f003 fedb 	bl	8007bb0 <ReadUint8ArrayEEprom>
 8003dfa:	e02d      	b.n	8003e58 <CreateMessage+0xf4>
 8003dfc:	20000694 	.word	0x20000694
 8003e00:	0808000c 	.word	0x0808000c
 8003e04:	200006a0 	.word	0x200006a0
 8003e08:	08080018 	.word	0x08080018
 8003e0c:	200006ac 	.word	0x200006ac
 8003e10:	08080048 	.word	0x08080048
 8003e14:	200006b8 	.word	0x200006b8
 8003e18:	08080030 	.word	0x08080030
 8003e1c:	200006c4 	.word	0x200006c4
 8003e20:	0808006c 	.word	0x0808006c
 8003e24:	200006d0 	.word	0x200006d0
 8003e28:	08080078 	.word	0x08080078
 8003e2c:	200006dc 	.word	0x200006dc
 8003e30:	08080024 	.word	0x08080024
 8003e34:	200006e8 	.word	0x200006e8
 8003e38:	08080054 	.word	0x08080054
 8003e3c:	200006f4 	.word	0x200006f4
 8003e40:	08080060 	.word	0x08080060
 8003e44:	20000700 	.word	0x20000700
 8003e48:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e4c:	4bed      	ldr	r3, [pc, #948]	@ (8004204 <CreateMessage+0x4a0>)
 8003e4e:	4aee      	ldr	r2, [pc, #952]	@ (8004208 <CreateMessage+0x4a4>)
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	6019      	str	r1, [r3, #0]
 8003e54:	7912      	ldrb	r2, [r2, #4]
 8003e56:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e58:	f7ff fc16 	bl	8003688 <setCharges>
  uint16_t index = 0;
 8003e5c:	260e      	movs	r6, #14
 8003e5e:	19bb      	adds	r3, r7, r6
 8003e60:	2200      	movs	r2, #0
 8003e62:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e64:	19bb      	adds	r3, r7, r6
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	4be8      	ldr	r3, [pc, #928]	@ (800420c <CreateMessage+0x4a8>)
 8003e6a:	18d3      	adds	r3, r2, r3
 8003e6c:	4ae8      	ldr	r2, [pc, #928]	@ (8004210 <CreateMessage+0x4ac>)
 8003e6e:	0011      	movs	r1, r2
 8003e70:	0018      	movs	r0, r3
 8003e72:	f01c fe25 	bl	8020ac0 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8003e76:	4ae7      	ldr	r2, [pc, #924]	@ (8004214 <CreateMessage+0x4b0>)
 8003e78:	4be7      	ldr	r3, [pc, #924]	@ (8004218 <CreateMessage+0x4b4>)
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff ff4d 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e82:	4be6      	ldr	r3, [pc, #920]	@ (800421c <CreateMessage+0x4b8>)
 8003e84:	689c      	ldr	r4, [r3, #8]
 8003e86:	4be6      	ldr	r3, [pc, #920]	@ (8004220 <CreateMessage+0x4bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1c18      	adds	r0, r3, #0
 8003e8c:	f7ff faea 	bl	8003464 <__aeabi_f2d>
 8003e90:	0002      	movs	r2, r0
 8003e92:	000b      	movs	r3, r1
 8003e94:	4ddb      	ldr	r5, [pc, #876]	@ (8004204 <CreateMessage+0x4a0>)
 8003e96:	49e3      	ldr	r1, [pc, #908]	@ (8004224 <CreateMessage+0x4c0>)
 8003e98:	48e3      	ldr	r0, [pc, #908]	@ (8004228 <CreateMessage+0x4c4>)
 8003e9a:	9202      	str	r2, [sp, #8]
 8003e9c:	9303      	str	r3, [sp, #12]
 8003e9e:	4bde      	ldr	r3, [pc, #888]	@ (8004218 <CreateMessage+0x4b4>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	002b      	movs	r3, r5
 8003ea4:	0022      	movs	r2, r4
 8003ea6:	f01c fe0b 	bl	8020ac0 <siprintf>
#endif
index = strlen(message);
 8003eaa:	4bd8      	ldr	r3, [pc, #864]	@ (800420c <CreateMessage+0x4a8>)
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fc f95d 	bl	800016c <strlen>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	19bb      	adds	r3, r7, r6
 8003eb6:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003eb8:	1dbb      	adds	r3, r7, #6
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d019      	beq.n	8003ef4 <CreateMessage+0x190>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003ec0:	4bd2      	ldr	r3, [pc, #840]	@ (800420c <CreateMessage+0x4a8>)
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fc f952 	bl	800016c <strlen>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	4bcf      	ldr	r3, [pc, #828]	@ (800420c <CreateMessage+0x4a8>)
 8003ece:	0011      	movs	r1, r2
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7ff fd91 	bl	80039f8 <ESP_Send>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	001a      	movs	r2, r3
 8003eda:	4bd4      	ldr	r3, [pc, #848]	@ (800422c <CreateMessage+0x4c8>)
 8003edc:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003ede:	4bd4      	ldr	r3, [pc, #848]	@ (8004230 <CreateMessage+0x4cc>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	4bd1      	ldr	r3, [pc, #836]	@ (800422c <CreateMessage+0x4c8>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	4193      	sbcs	r3, r2
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	4bcf      	ldr	r3, [pc, #828]	@ (8004230 <CreateMessage+0x4cc>)
 8003ef2:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003ef4:	4acf      	ldr	r2, [pc, #828]	@ (8004234 <CreateMessage+0x4d0>)
 8003ef6:	4bc8      	ldr	r3, [pc, #800]	@ (8004218 <CreateMessage+0x4b4>)
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff ff0e 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003f00:	4bc6      	ldr	r3, [pc, #792]	@ (800421c <CreateMessage+0x4b8>)
 8003f02:	689c      	ldr	r4, [r3, #8]
 8003f04:	4bc6      	ldr	r3, [pc, #792]	@ (8004220 <CreateMessage+0x4bc>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	1c18      	adds	r0, r3, #0
 8003f0a:	f7ff faab 	bl	8003464 <__aeabi_f2d>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	000b      	movs	r3, r1
 8003f12:	4dbc      	ldr	r5, [pc, #752]	@ (8004204 <CreateMessage+0x4a0>)
 8003f14:	49c8      	ldr	r1, [pc, #800]	@ (8004238 <CreateMessage+0x4d4>)
 8003f16:	48bd      	ldr	r0, [pc, #756]	@ (800420c <CreateMessage+0x4a8>)
 8003f18:	9202      	str	r2, [sp, #8]
 8003f1a:	9303      	str	r3, [sp, #12]
 8003f1c:	4bbe      	ldr	r3, [pc, #760]	@ (8004218 <CreateMessage+0x4b4>)
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	002b      	movs	r3, r5
 8003f22:	0022      	movs	r2, r4
 8003f24:	f01c fdcc 	bl	8020ac0 <siprintf>
#endif
  index += strlen(message);
 8003f28:	4bb8      	ldr	r3, [pc, #736]	@ (800420c <CreateMessage+0x4a8>)
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7fc f91e 	bl	800016c <strlen>
 8003f30:	0003      	movs	r3, r0
 8003f32:	b299      	uxth	r1, r3
 8003f34:	220e      	movs	r2, #14
 8003f36:	18bb      	adds	r3, r7, r2
 8003f38:	18ba      	adds	r2, r7, r2
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	188a      	adds	r2, r1, r2
 8003f3e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f40:	1dbb      	adds	r3, r7, #6
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d019      	beq.n	8003f7c <CreateMessage+0x218>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f48:	4bb0      	ldr	r3, [pc, #704]	@ (800420c <CreateMessage+0x4a8>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7fc f90e 	bl	800016c <strlen>
 8003f50:	0003      	movs	r3, r0
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	4bad      	ldr	r3, [pc, #692]	@ (800420c <CreateMessage+0x4a8>)
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fd4d 	bl	80039f8 <ESP_Send>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	001a      	movs	r2, r3
 8003f62:	4bb2      	ldr	r3, [pc, #712]	@ (800422c <CreateMessage+0x4c8>)
 8003f64:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f66:	4bb2      	ldr	r3, [pc, #712]	@ (8004230 <CreateMessage+0x4cc>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	4baf      	ldr	r3, [pc, #700]	@ (800422c <CreateMessage+0x4c8>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	4013      	ands	r3, r2
 8003f72:	1e5a      	subs	r2, r3, #1
 8003f74:	4193      	sbcs	r3, r2
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4bad      	ldr	r3, [pc, #692]	@ (8004230 <CreateMessage+0x4cc>)
 8003f7a:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003f7c:	4aaf      	ldr	r2, [pc, #700]	@ (800423c <CreateMessage+0x4d8>)
 8003f7e:	4ba6      	ldr	r3, [pc, #664]	@ (8004218 <CreateMessage+0x4b4>)
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f7ff feca 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003f88:	4ba4      	ldr	r3, [pc, #656]	@ (800421c <CreateMessage+0x4b8>)
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	4ba4      	ldr	r3, [pc, #656]	@ (8004220 <CreateMessage+0x4bc>)
 8003f8e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f90:	4c9c      	ldr	r4, [pc, #624]	@ (8004204 <CreateMessage+0x4a0>)
 8003f92:	49ab      	ldr	r1, [pc, #684]	@ (8004240 <CreateMessage+0x4dc>)
 8003f94:	489d      	ldr	r0, [pc, #628]	@ (800420c <CreateMessage+0x4a8>)
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	4b9f      	ldr	r3, [pc, #636]	@ (8004218 <CreateMessage+0x4b4>)
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	0023      	movs	r3, r4
 8003f9e:	f01c fd8f 	bl	8020ac0 <siprintf>
#endif
  index += strlen(message);
 8003fa2:	4b9a      	ldr	r3, [pc, #616]	@ (800420c <CreateMessage+0x4a8>)
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7fc f8e1 	bl	800016c <strlen>
 8003faa:	0003      	movs	r3, r0
 8003fac:	b299      	uxth	r1, r3
 8003fae:	220e      	movs	r2, #14
 8003fb0:	18bb      	adds	r3, r7, r2
 8003fb2:	18ba      	adds	r2, r7, r2
 8003fb4:	8812      	ldrh	r2, [r2, #0]
 8003fb6:	188a      	adds	r2, r1, r2
 8003fb8:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003fba:	1dbb      	adds	r3, r7, #6
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d019      	beq.n	8003ff6 <CreateMessage+0x292>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003fc2:	4b92      	ldr	r3, [pc, #584]	@ (800420c <CreateMessage+0x4a8>)
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fc f8d1 	bl	800016c <strlen>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	4b8f      	ldr	r3, [pc, #572]	@ (800420c <CreateMessage+0x4a8>)
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7ff fd10 	bl	80039f8 <ESP_Send>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	001a      	movs	r2, r3
 8003fdc:	4b93      	ldr	r3, [pc, #588]	@ (800422c <CreateMessage+0x4c8>)
 8003fde:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fe0:	4b93      	ldr	r3, [pc, #588]	@ (8004230 <CreateMessage+0x4cc>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	4b91      	ldr	r3, [pc, #580]	@ (800422c <CreateMessage+0x4c8>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4013      	ands	r3, r2
 8003fec:	1e5a      	subs	r2, r3, #1
 8003fee:	4193      	sbcs	r3, r2
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b8f      	ldr	r3, [pc, #572]	@ (8004230 <CreateMessage+0x4cc>)
 8003ff4:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, soundConfig);
 8003ff6:	4a93      	ldr	r2, [pc, #588]	@ (8004244 <CreateMessage+0x4e0>)
 8003ff8:	4b87      	ldr	r3, [pc, #540]	@ (8004218 <CreateMessage+0x4b4>)
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7ff fe8d 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8004002:	4b86      	ldr	r3, [pc, #536]	@ (800421c <CreateMessage+0x4b8>)
 8004004:	689c      	ldr	r4, [r3, #8]
 8004006:	4b86      	ldr	r3, [pc, #536]	@ (8004220 <CreateMessage+0x4bc>)
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	1c18      	adds	r0, r3, #0
 800400c:	f7ff fa2a 	bl	8003464 <__aeabi_f2d>
 8004010:	0002      	movs	r2, r0
 8004012:	000b      	movs	r3, r1
 8004014:	4d7b      	ldr	r5, [pc, #492]	@ (8004204 <CreateMessage+0x4a0>)
 8004016:	498c      	ldr	r1, [pc, #560]	@ (8004248 <CreateMessage+0x4e4>)
 8004018:	487c      	ldr	r0, [pc, #496]	@ (800420c <CreateMessage+0x4a8>)
 800401a:	9202      	str	r2, [sp, #8]
 800401c:	9303      	str	r3, [sp, #12]
 800401e:	4b7e      	ldr	r3, [pc, #504]	@ (8004218 <CreateMessage+0x4b4>)
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	002b      	movs	r3, r5
 8004024:	0022      	movs	r2, r4
 8004026:	f01c fd4b 	bl	8020ac0 <siprintf>
#endif
  index += strlen(message);
 800402a:	4b78      	ldr	r3, [pc, #480]	@ (800420c <CreateMessage+0x4a8>)
 800402c:	0018      	movs	r0, r3
 800402e:	f7fc f89d 	bl	800016c <strlen>
 8004032:	0003      	movs	r3, r0
 8004034:	b299      	uxth	r1, r3
 8004036:	220e      	movs	r2, #14
 8004038:	18bb      	adds	r3, r7, r2
 800403a:	18ba      	adds	r2, r7, r2
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	188a      	adds	r2, r1, r2
 8004040:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004042:	1dbb      	adds	r3, r7, #6
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d019      	beq.n	800407e <CreateMessage+0x31a>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800404a:	4b70      	ldr	r3, [pc, #448]	@ (800420c <CreateMessage+0x4a8>)
 800404c:	0018      	movs	r0, r3
 800404e:	f7fc f88d 	bl	800016c <strlen>
 8004052:	0003      	movs	r3, r0
 8004054:	b29a      	uxth	r2, r3
 8004056:	4b6d      	ldr	r3, [pc, #436]	@ (800420c <CreateMessage+0x4a8>)
 8004058:	0011      	movs	r1, r2
 800405a:	0018      	movs	r0, r3
 800405c:	f7ff fccc 	bl	80039f8 <ESP_Send>
 8004060:	0003      	movs	r3, r0
 8004062:	001a      	movs	r2, r3
 8004064:	4b71      	ldr	r3, [pc, #452]	@ (800422c <CreateMessage+0x4c8>)
 8004066:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004068:	4b71      	ldr	r3, [pc, #452]	@ (8004230 <CreateMessage+0x4cc>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	001a      	movs	r2, r3
 800406e:	4b6f      	ldr	r3, [pc, #444]	@ (800422c <CreateMessage+0x4c8>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	4013      	ands	r3, r2
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	4193      	sbcs	r3, r2
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b6d      	ldr	r3, [pc, #436]	@ (8004230 <CreateMessage+0x4cc>)
 800407c:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 800407e:	1dfb      	adds	r3, r7, #7
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	4053      	eors	r3, r2
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d100      	bne.n	800408e <CreateMessage+0x32a>
 800408c:	e14a      	b.n	8004324 <CreateMessage+0x5c0>
    uint8ArrayToString(Buffer, solarConfig);
 800408e:	4a6f      	ldr	r2, [pc, #444]	@ (800424c <CreateMessage+0x4e8>)
 8004090:	4b61      	ldr	r3, [pc, #388]	@ (8004218 <CreateMessage+0x4b4>)
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff fe41 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 800409a:	4b60      	ldr	r3, [pc, #384]	@ (800421c <CreateMessage+0x4b8>)
 800409c:	689c      	ldr	r4, [r3, #8]
 800409e:	4b6c      	ldr	r3, [pc, #432]	@ (8004250 <CreateMessage+0x4ec>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c18      	adds	r0, r3, #0
 80040a4:	f7ff f9de 	bl	8003464 <__aeabi_f2d>
 80040a8:	0002      	movs	r2, r0
 80040aa:	000b      	movs	r3, r1
 80040ac:	4d55      	ldr	r5, [pc, #340]	@ (8004204 <CreateMessage+0x4a0>)
 80040ae:	4969      	ldr	r1, [pc, #420]	@ (8004254 <CreateMessage+0x4f0>)
 80040b0:	4856      	ldr	r0, [pc, #344]	@ (800420c <CreateMessage+0x4a8>)
 80040b2:	9202      	str	r2, [sp, #8]
 80040b4:	9303      	str	r3, [sp, #12]
 80040b6:	4b58      	ldr	r3, [pc, #352]	@ (8004218 <CreateMessage+0x4b4>)
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	002b      	movs	r3, r5
 80040bc:	0022      	movs	r2, r4
 80040be:	f01c fcff 	bl	8020ac0 <siprintf>
#endif
    index += strlen(message);
 80040c2:	4b52      	ldr	r3, [pc, #328]	@ (800420c <CreateMessage+0x4a8>)
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7fc f851 	bl	800016c <strlen>
 80040ca:	0003      	movs	r3, r0
 80040cc:	b299      	uxth	r1, r3
 80040ce:	220e      	movs	r2, #14
 80040d0:	18bb      	adds	r3, r7, r2
 80040d2:	18ba      	adds	r2, r7, r2
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	188a      	adds	r2, r1, r2
 80040d8:	801a      	strh	r2, [r3, #0]
    if (send) {
 80040da:	1dbb      	adds	r3, r7, #6
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d019      	beq.n	8004116 <CreateMessage+0x3b2>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80040e2:	4b4a      	ldr	r3, [pc, #296]	@ (800420c <CreateMessage+0x4a8>)
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fc f841 	bl	800016c <strlen>
 80040ea:	0003      	movs	r3, r0
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	4b47      	ldr	r3, [pc, #284]	@ (800420c <CreateMessage+0x4a8>)
 80040f0:	0011      	movs	r1, r2
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7ff fc80 	bl	80039f8 <ESP_Send>
 80040f8:	0003      	movs	r3, r0
 80040fa:	001a      	movs	r2, r3
 80040fc:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <CreateMessage+0x4c8>)
 80040fe:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004100:	4b4b      	ldr	r3, [pc, #300]	@ (8004230 <CreateMessage+0x4cc>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	001a      	movs	r2, r3
 8004106:	4b49      	ldr	r3, [pc, #292]	@ (800422c <CreateMessage+0x4c8>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4013      	ands	r3, r2
 800410c:	1e5a      	subs	r2, r3, #1
 800410e:	4193      	sbcs	r3, r2
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4b47      	ldr	r3, [pc, #284]	@ (8004230 <CreateMessage+0x4cc>)
 8004114:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8004116:	4b50      	ldr	r3, [pc, #320]	@ (8004258 <CreateMessage+0x4f4>)
 8004118:	791b      	ldrb	r3, [r3, #4]
 800411a:	2b35      	cmp	r3, #53	@ 0x35
 800411c:	d140      	bne.n	80041a0 <CreateMessage+0x43c>
 800411e:	f002 fdf7 	bl	8006d10 <Check_USB_PowerOn>
 8004122:	1e03      	subs	r3, r0, #0
 8004124:	d03c      	beq.n	80041a0 <CreateMessage+0x43c>
      uint8ArrayToString(Buffer, noxConfig);
 8004126:	4a4d      	ldr	r2, [pc, #308]	@ (800425c <CreateMessage+0x4f8>)
 8004128:	4b3b      	ldr	r3, [pc, #236]	@ (8004218 <CreateMessage+0x4b4>)
 800412a:	0011      	movs	r1, r2
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fdf5 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004132:	4b3a      	ldr	r3, [pc, #232]	@ (800421c <CreateMessage+0x4b8>)
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	4b3a      	ldr	r3, [pc, #232]	@ (8004220 <CreateMessage+0x4bc>)
 8004138:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800413a:	4c32      	ldr	r4, [pc, #200]	@ (8004204 <CreateMessage+0x4a0>)
 800413c:	4948      	ldr	r1, [pc, #288]	@ (8004260 <CreateMessage+0x4fc>)
 800413e:	4833      	ldr	r0, [pc, #204]	@ (800420c <CreateMessage+0x4a8>)
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	4b35      	ldr	r3, [pc, #212]	@ (8004218 <CreateMessage+0x4b4>)
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	0023      	movs	r3, r4
 8004148:	f01c fcba 	bl	8020ac0 <siprintf>
#endif
      index += strlen(message);
 800414c:	4b2f      	ldr	r3, [pc, #188]	@ (800420c <CreateMessage+0x4a8>)
 800414e:	0018      	movs	r0, r3
 8004150:	f7fc f80c 	bl	800016c <strlen>
 8004154:	0003      	movs	r3, r0
 8004156:	b299      	uxth	r1, r3
 8004158:	220e      	movs	r2, #14
 800415a:	18bb      	adds	r3, r7, r2
 800415c:	18ba      	adds	r2, r7, r2
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	188a      	adds	r2, r1, r2
 8004162:	801a      	strh	r2, [r3, #0]
      if (send) {
 8004164:	1dbb      	adds	r3, r7, #6
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d019      	beq.n	80041a0 <CreateMessage+0x43c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800416c:	4b27      	ldr	r3, [pc, #156]	@ (800420c <CreateMessage+0x4a8>)
 800416e:	0018      	movs	r0, r3
 8004170:	f7fb fffc 	bl	800016c <strlen>
 8004174:	0003      	movs	r3, r0
 8004176:	b29a      	uxth	r2, r3
 8004178:	4b24      	ldr	r3, [pc, #144]	@ (800420c <CreateMessage+0x4a8>)
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff fc3b 	bl	80039f8 <ESP_Send>
 8004182:	0003      	movs	r3, r0
 8004184:	001a      	movs	r2, r3
 8004186:	4b29      	ldr	r3, [pc, #164]	@ (800422c <CreateMessage+0x4c8>)
 8004188:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800418a:	4b29      	ldr	r3, [pc, #164]	@ (8004230 <CreateMessage+0x4cc>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	001a      	movs	r2, r3
 8004190:	4b26      	ldr	r3, [pc, #152]	@ (800422c <CreateMessage+0x4c8>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4013      	ands	r3, r2
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	4193      	sbcs	r3, r2
 800419a:	b2da      	uxtb	r2, r3
 800419c:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <CreateMessage+0x4cc>)
 800419e:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 80041a0:	f005 fc6e 	bl	8009a80 <sen5x_Get_sen5x_enable_state>
 80041a4:	1e03      	subs	r3, r0, #0
 80041a6:	d100      	bne.n	80041aa <CreateMessage+0x446>
 80041a8:	e0bc      	b.n	8004324 <CreateMessage+0x5c0>
      uint8ArrayToString(Buffer, PM2Config);
 80041aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004264 <CreateMessage+0x500>)
 80041ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <CreateMessage+0x4b4>)
 80041ae:	0011      	movs	r1, r2
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7ff fdb3 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 80041b6:	4b19      	ldr	r3, [pc, #100]	@ (800421c <CreateMessage+0x4b8>)
 80041b8:	689c      	ldr	r4, [r3, #8]
 80041ba:	4b19      	ldr	r3, [pc, #100]	@ (8004220 <CreateMessage+0x4bc>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	1c18      	adds	r0, r3, #0
 80041c0:	f7ff f950 	bl	8003464 <__aeabi_f2d>
 80041c4:	0002      	movs	r2, r0
 80041c6:	000b      	movs	r3, r1
 80041c8:	4d0e      	ldr	r5, [pc, #56]	@ (8004204 <CreateMessage+0x4a0>)
 80041ca:	4927      	ldr	r1, [pc, #156]	@ (8004268 <CreateMessage+0x504>)
 80041cc:	480f      	ldr	r0, [pc, #60]	@ (800420c <CreateMessage+0x4a8>)
 80041ce:	9202      	str	r2, [sp, #8]
 80041d0:	9303      	str	r3, [sp, #12]
 80041d2:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <CreateMessage+0x4b4>)
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	002b      	movs	r3, r5
 80041d8:	0022      	movs	r2, r4
 80041da:	f01c fc71 	bl	8020ac0 <siprintf>
#endif
      index += strlen(message);
 80041de:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <CreateMessage+0x4a8>)
 80041e0:	0018      	movs	r0, r3
 80041e2:	f7fb ffc3 	bl	800016c <strlen>
 80041e6:	0003      	movs	r3, r0
 80041e8:	b299      	uxth	r1, r3
 80041ea:	220e      	movs	r2, #14
 80041ec:	18bb      	adds	r3, r7, r2
 80041ee:	18ba      	adds	r2, r7, r2
 80041f0:	8812      	ldrh	r2, [r2, #0]
 80041f2:	188a      	adds	r2, r1, r2
 80041f4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80041f6:	1dbb      	adds	r3, r7, #6
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04e      	beq.n	800429c <CreateMessage+0x538>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80041fe:	4b03      	ldr	r3, [pc, #12]	@ (800420c <CreateMessage+0x4a8>)
 8004200:	0018      	movs	r0, r3
 8004202:	e033      	b.n	800426c <CreateMessage+0x508>
 8004204:	20000700 	.word	0x20000700
 8004208:	0802641c 	.word	0x0802641c
 800420c:	20000574 	.word	0x20000574
 8004210:	080240e4 	.word	0x080240e4
 8004214:	20000694 	.word	0x20000694
 8004218:	20000720 	.word	0x20000720
 800421c:	20000554 	.word	0x20000554
 8004220:	20000624 	.word	0x20000624
 8004224:	080240e8 	.word	0x080240e8
 8004228:	20000575 	.word	0x20000575
 800422c:	20000739 	.word	0x20000739
 8004230:	2000002d 	.word	0x2000002d
 8004234:	200006a0 	.word	0x200006a0
 8004238:	0802413c 	.word	0x0802413c
 800423c:	200006b8 	.word	0x200006b8
 8004240:	08024194 	.word	0x08024194
 8004244:	200006ac 	.word	0x200006ac
 8004248:	080241e8 	.word	0x080241e8
 800424c:	200006d0 	.word	0x200006d0
 8004250:	20000570 	.word	0x20000570
 8004254:	08024244 	.word	0x08024244
 8004258:	20000dac 	.word	0x20000dac
 800425c:	200006dc 	.word	0x200006dc
 8004260:	080242a4 	.word	0x080242a4
 8004264:	200006e8 	.word	0x200006e8
 8004268:	080242f8 	.word	0x080242f8
 800426c:	f7fb ff7e 	bl	800016c <strlen>
 8004270:	0003      	movs	r3, r0
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b59      	ldr	r3, [pc, #356]	@ (80043dc <CreateMessage+0x678>)
 8004276:	0011      	movs	r1, r2
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff fbbd 	bl	80039f8 <ESP_Send>
 800427e:	0003      	movs	r3, r0
 8004280:	001a      	movs	r2, r3
 8004282:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <CreateMessage+0x67c>)
 8004284:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8004286:	4b57      	ldr	r3, [pc, #348]	@ (80043e4 <CreateMessage+0x680>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	001a      	movs	r2, r3
 800428c:	4b54      	ldr	r3, [pc, #336]	@ (80043e0 <CreateMessage+0x67c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	4013      	ands	r3, r2
 8004292:	1e5a      	subs	r2, r3, #1
 8004294:	4193      	sbcs	r3, r2
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4b52      	ldr	r3, [pc, #328]	@ (80043e4 <CreateMessage+0x680>)
 800429a:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 800429c:	4a52      	ldr	r2, [pc, #328]	@ (80043e8 <CreateMessage+0x684>)
 800429e:	4b53      	ldr	r3, [pc, #332]	@ (80043ec <CreateMessage+0x688>)
 80042a0:	0011      	movs	r1, r2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7ff fd3a 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 80042a8:	4b51      	ldr	r3, [pc, #324]	@ (80043f0 <CreateMessage+0x68c>)
 80042aa:	689c      	ldr	r4, [r3, #8]
 80042ac:	4b51      	ldr	r3, [pc, #324]	@ (80043f4 <CreateMessage+0x690>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	1c18      	adds	r0, r3, #0
 80042b2:	f7ff f8d7 	bl	8003464 <__aeabi_f2d>
 80042b6:	0002      	movs	r2, r0
 80042b8:	000b      	movs	r3, r1
 80042ba:	4d4f      	ldr	r5, [pc, #316]	@ (80043f8 <CreateMessage+0x694>)
 80042bc:	494f      	ldr	r1, [pc, #316]	@ (80043fc <CreateMessage+0x698>)
 80042be:	4847      	ldr	r0, [pc, #284]	@ (80043dc <CreateMessage+0x678>)
 80042c0:	9202      	str	r2, [sp, #8]
 80042c2:	9303      	str	r3, [sp, #12]
 80042c4:	4b49      	ldr	r3, [pc, #292]	@ (80043ec <CreateMessage+0x688>)
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	002b      	movs	r3, r5
 80042ca:	0022      	movs	r2, r4
 80042cc:	f01c fbf8 	bl	8020ac0 <siprintf>
#endif
      index += strlen(message);
 80042d0:	4b42      	ldr	r3, [pc, #264]	@ (80043dc <CreateMessage+0x678>)
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7fb ff4a 	bl	800016c <strlen>
 80042d8:	0003      	movs	r3, r0
 80042da:	b299      	uxth	r1, r3
 80042dc:	220e      	movs	r2, #14
 80042de:	18bb      	adds	r3, r7, r2
 80042e0:	18ba      	adds	r2, r7, r2
 80042e2:	8812      	ldrh	r2, [r2, #0]
 80042e4:	188a      	adds	r2, r1, r2
 80042e6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80042e8:	1dbb      	adds	r3, r7, #6
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d019      	beq.n	8004324 <CreateMessage+0x5c0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80042f0:	4b3a      	ldr	r3, [pc, #232]	@ (80043dc <CreateMessage+0x678>)
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7fb ff3a 	bl	800016c <strlen>
 80042f8:	0003      	movs	r3, r0
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	4b37      	ldr	r3, [pc, #220]	@ (80043dc <CreateMessage+0x678>)
 80042fe:	0011      	movs	r1, r2
 8004300:	0018      	movs	r0, r3
 8004302:	f7ff fb79 	bl	80039f8 <ESP_Send>
 8004306:	0003      	movs	r3, r0
 8004308:	001a      	movs	r2, r3
 800430a:	4b35      	ldr	r3, [pc, #212]	@ (80043e0 <CreateMessage+0x67c>)
 800430c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800430e:	4b35      	ldr	r3, [pc, #212]	@ (80043e4 <CreateMessage+0x680>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	001a      	movs	r2, r3
 8004314:	4b32      	ldr	r3, [pc, #200]	@ (80043e0 <CreateMessage+0x67c>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	4013      	ands	r3, r2
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	4193      	sbcs	r3, r2
 800431e:	b2da      	uxtb	r2, r3
 8004320:	4b30      	ldr	r3, [pc, #192]	@ (80043e4 <CreateMessage+0x680>)
 8004322:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 8004324:	4a36      	ldr	r2, [pc, #216]	@ (8004400 <CreateMessage+0x69c>)
 8004326:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <CreateMessage+0x688>)
 8004328:	0011      	movs	r1, r2
 800432a:	0018      	movs	r0, r3
 800432c:	f7ff fcf6 	bl	8003d1c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8004330:	4b2f      	ldr	r3, [pc, #188]	@ (80043f0 <CreateMessage+0x68c>)
 8004332:	689c      	ldr	r4, [r3, #8]
 8004334:	4b33      	ldr	r3, [pc, #204]	@ (8004404 <CreateMessage+0x6a0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1c18      	adds	r0, r3, #0
 800433a:	f7ff f893 	bl	8003464 <__aeabi_f2d>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	4d2d      	ldr	r5, [pc, #180]	@ (80043f8 <CreateMessage+0x694>)
 8004344:	4930      	ldr	r1, [pc, #192]	@ (8004408 <CreateMessage+0x6a4>)
 8004346:	4825      	ldr	r0, [pc, #148]	@ (80043dc <CreateMessage+0x678>)
 8004348:	9202      	str	r2, [sp, #8]
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <CreateMessage+0x688>)
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	002b      	movs	r3, r5
 8004352:	0022      	movs	r2, r4
 8004354:	f01c fbb4 	bl	8020ac0 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8004358:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <CreateMessage+0x678>)
 800435a:	0018      	movs	r0, r3
 800435c:	f7fb ff06 	bl	800016c <strlen>
 8004360:	0002      	movs	r2, r0
 8004362:	4b1e      	ldr	r3, [pc, #120]	@ (80043dc <CreateMessage+0x678>)
 8004364:	18d3      	adds	r3, r2, r3
 8004366:	4a29      	ldr	r2, [pc, #164]	@ (800440c <CreateMessage+0x6a8>)
 8004368:	0011      	movs	r1, r2
 800436a:	0018      	movs	r0, r3
 800436c:	f01c fba8 	bl	8020ac0 <siprintf>
  index += strlen(message);
 8004370:	4b1a      	ldr	r3, [pc, #104]	@ (80043dc <CreateMessage+0x678>)
 8004372:	0018      	movs	r0, r3
 8004374:	f7fb fefa 	bl	800016c <strlen>
 8004378:	0003      	movs	r3, r0
 800437a:	b299      	uxth	r1, r3
 800437c:	220e      	movs	r2, #14
 800437e:	18bb      	adds	r3, r7, r2
 8004380:	18ba      	adds	r2, r7, r2
 8004382:	8812      	ldrh	r2, [r2, #0]
 8004384:	188a      	adds	r2, r1, r2
 8004386:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004388:	1dbb      	adds	r3, r7, #6
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d019      	beq.n	80043c4 <CreateMessage+0x660>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004390:	4b12      	ldr	r3, [pc, #72]	@ (80043dc <CreateMessage+0x678>)
 8004392:	0018      	movs	r0, r3
 8004394:	f7fb feea 	bl	800016c <strlen>
 8004398:	0003      	movs	r3, r0
 800439a:	b29a      	uxth	r2, r3
 800439c:	4b0f      	ldr	r3, [pc, #60]	@ (80043dc <CreateMessage+0x678>)
 800439e:	0011      	movs	r1, r2
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7ff fb29 	bl	80039f8 <ESP_Send>
 80043a6:	0003      	movs	r3, r0
 80043a8:	001a      	movs	r2, r3
 80043aa:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <CreateMessage+0x67c>)
 80043ac:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <CreateMessage+0x680>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	001a      	movs	r2, r3
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <CreateMessage+0x67c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	4013      	ands	r3, r2
 80043ba:	1e5a      	subs	r2, r3, #1
 80043bc:	4193      	sbcs	r3, r2
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <CreateMessage+0x680>)
 80043c2:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80043c4:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <CreateMessage+0x680>)
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	701a      	strb	r2, [r3, #0]
  return index;
 80043cc:	230e      	movs	r3, #14
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	881b      	ldrh	r3, [r3, #0]
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b005      	add	sp, #20
 80043d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	20000574 	.word	0x20000574
 80043e0:	20000739 	.word	0x20000739
 80043e4:	2000002d 	.word	0x2000002d
 80043e8:	200006f4 	.word	0x200006f4
 80043ec:	20000720 	.word	0x20000720
 80043f0:	20000554 	.word	0x20000554
 80043f4:	20000624 	.word	0x20000624
 80043f8:	20000700 	.word	0x20000700
 80043fc:	08024354 	.word	0x08024354
 8004400:	200006c4 	.word	0x200006c4
 8004404:	2000056c 	.word	0x2000056c
 8004408:	080243b0 	.word	0x080243b0
 800440c:	08024408 	.word	0x08024408

08004410 <StartProg>:

void StartProg(){
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8004414:	2064      	movs	r0, #100	@ 0x64
 8004416:	f00b fa49 	bl	800f8ac <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <StartProg+0x60>)
 800441c:	2200      	movs	r2, #0
 800441e:	2101      	movs	r1, #1
 8004420:	0018      	movs	r0, r3
 8004422:	f00c fcca 	bl	8010dba <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004426:	2064      	movs	r0, #100	@ 0x64
 8004428:	f00b fa40 	bl	800f8ac <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800442c:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <StartProg+0x60>)
 800442e:	2200      	movs	r2, #0
 8004430:	2102      	movs	r1, #2
 8004432:	0018      	movs	r0, r3
 8004434:	f00c fcc1 	bl	8010dba <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004438:	23fa      	movs	r3, #250	@ 0xfa
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	0018      	movs	r0, r3
 800443e:	f00b fa35 	bl	800f8ac <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004442:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <StartProg+0x60>)
 8004444:	2201      	movs	r2, #1
 8004446:	2101      	movs	r1, #1
 8004448:	0018      	movs	r0, r3
 800444a:	f00c fcb6 	bl	8010dba <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800444e:	23fa      	movs	r3, #250	@ 0xfa
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	0018      	movs	r0, r3
 8004454:	f00b fa2a 	bl	800f8ac <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <StartProg+0x60>)
 800445a:	2201      	movs	r2, #1
 800445c:	2102      	movs	r1, #2
 800445e:	0018      	movs	r0, r3
 8004460:	f00c fcab 	bl	8010dba <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004464:	2028      	movs	r0, #40	@ 0x28
 8004466:	f00b fa21 	bl	800f8ac <HAL_Delay>
}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	50001c00 	.word	0x50001c00

08004474 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004476:	b0d9      	sub	sp, #356	@ 0x164
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	0008      	movs	r0, r1
 800447e:	0011      	movs	r1, r2
 8004480:	4ba4      	ldr	r3, [pc, #656]	@ (8004714 <ParseBuffer+0x2a0>)
 8004482:	24b0      	movs	r4, #176	@ 0xb0
 8004484:	0064      	lsls	r4, r4, #1
 8004486:	191b      	adds	r3, r3, r4
 8004488:	19db      	adds	r3, r3, r7
 800448a:	1c02      	adds	r2, r0, #0
 800448c:	801a      	strh	r2, [r3, #0]
 800448e:	4ba2      	ldr	r3, [pc, #648]	@ (8004718 <ParseBuffer+0x2a4>)
 8004490:	191b      	adds	r3, r3, r4
 8004492:	19db      	adds	r3, r3, r7
 8004494:	1c0a      	adds	r2, r1, #0
 8004496:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	005a      	lsls	r2, r3, #1
 800449c:	2348      	movs	r3, #72	@ 0x48
 800449e:	18fb      	adds	r3, r7, r3
 80044a0:	2100      	movs	r1, #0
 80044a2:	0018      	movs	r0, r3
 80044a4:	f01c fc72 	bl	8020d8c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80044a8:	2360      	movs	r3, #96	@ 0x60
 80044aa:	33ff      	adds	r3, #255	@ 0xff
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	2203      	movs	r2, #3
 80044b0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80044b2:	23ae      	movs	r3, #174	@ 0xae
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	2200      	movs	r2, #0
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e013      	b.n	80044e6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80044be:	20ae      	movs	r0, #174	@ 0xae
 80044c0:	0040      	lsls	r0, r0, #1
 80044c2:	183b      	adds	r3, r7, r0
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	18d2      	adds	r2, r2, r3
 80044ca:	183b      	adds	r3, r7, r0
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	7811      	ldrb	r1, [r2, #0]
 80044d0:	4a92      	ldr	r2, [pc, #584]	@ (800471c <ParseBuffer+0x2a8>)
 80044d2:	24b0      	movs	r4, #176	@ 0xb0
 80044d4:	0064      	lsls	r4, r4, #1
 80044d6:	1912      	adds	r2, r2, r4
 80044d8:	19d2      	adds	r2, r2, r7
 80044da:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80044dc:	183b      	adds	r3, r7, r0
 80044de:	881a      	ldrh	r2, [r3, #0]
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	3201      	adds	r2, #1
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	23ae      	movs	r3, #174	@ 0xae
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	18fa      	adds	r2, r7, r3
 80044ec:	4b89      	ldr	r3, [pc, #548]	@ (8004714 <ParseBuffer+0x2a0>)
 80044ee:	21b0      	movs	r1, #176	@ 0xb0
 80044f0:	0049      	lsls	r1, r1, #1
 80044f2:	185b      	adds	r3, r3, r1
 80044f4:	19db      	adds	r3, r3, r7
 80044f6:	8812      	ldrh	r2, [r2, #0]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3df      	bcc.n	80044be <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80044fe:	4b85      	ldr	r3, [pc, #532]	@ (8004714 <ParseBuffer+0x2a0>)
 8004500:	185b      	adds	r3, r3, r1
 8004502:	19db      	adds	r3, r3, r7
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	4a85      	ldr	r2, [pc, #532]	@ (800471c <ParseBuffer+0x2a8>)
 8004508:	1852      	adds	r2, r2, r1
 800450a:	19d2      	adds	r2, r2, r7
 800450c:	2100      	movs	r1, #0
 800450e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8004510:	f00a fdf8 	bl	800f104 <GetVerboseLevel>
 8004514:	0003      	movs	r3, r0
 8004516:	2b03      	cmp	r3, #3
 8004518:	d106      	bne.n	8004528 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 800451a:	2348      	movs	r3, #72	@ 0x48
 800451c:	18fa      	adds	r2, r7, r3
 800451e:	4b80      	ldr	r3, [pc, #512]	@ (8004720 <ParseBuffer+0x2ac>)
 8004520:	0011      	movs	r1, r2
 8004522:	0018      	movs	r0, r3
 8004524:	f01c fa5c 	bl	80209e0 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	26ac      	movs	r6, #172	@ 0xac
 800452c:	0076      	lsls	r6, r6, #1
 800452e:	19ba      	adds	r2, r7, r6
 8004530:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004532:	4b7c      	ldr	r3, [pc, #496]	@ (8004724 <ParseBuffer+0x2b0>)
 8004534:	25b0      	movs	r5, #176	@ 0xb0
 8004536:	006d      	lsls	r5, r5, #1
 8004538:	195b      	adds	r3, r3, r5
 800453a:	19db      	adds	r3, r3, r7
 800453c:	4a7a      	ldr	r2, [pc, #488]	@ (8004728 <ParseBuffer+0x2b4>)
 800453e:	8811      	ldrh	r1, [r2, #0]
 8004540:	8019      	strh	r1, [r3, #0]
 8004542:	7892      	ldrb	r2, [r2, #2]
 8004544:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004546:	4b79      	ldr	r3, [pc, #484]	@ (800472c <ParseBuffer+0x2b8>)
 8004548:	195b      	adds	r3, r3, r5
 800454a:	19db      	adds	r3, r3, r7
 800454c:	4a78      	ldr	r2, [pc, #480]	@ (8004730 <ParseBuffer+0x2bc>)
 800454e:	6811      	ldr	r1, [r2, #0]
 8004550:	6019      	str	r1, [r3, #0]
 8004552:	8892      	ldrh	r2, [r2, #4]
 8004554:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004556:	4b77      	ldr	r3, [pc, #476]	@ (8004734 <ParseBuffer+0x2c0>)
 8004558:	195b      	adds	r3, r3, r5
 800455a:	19db      	adds	r3, r3, r7
 800455c:	4a76      	ldr	r2, [pc, #472]	@ (8004738 <ParseBuffer+0x2c4>)
 800455e:	6811      	ldr	r1, [r2, #0]
 8004560:	6019      	str	r1, [r3, #0]
 8004562:	7912      	ldrb	r2, [r2, #4]
 8004564:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004566:	4b75      	ldr	r3, [pc, #468]	@ (800473c <ParseBuffer+0x2c8>)
 8004568:	195b      	adds	r3, r3, r5
 800456a:	19db      	adds	r3, r3, r7
 800456c:	4a74      	ldr	r2, [pc, #464]	@ (8004740 <ParseBuffer+0x2cc>)
 800456e:	6811      	ldr	r1, [r2, #0]
 8004570:	6019      	str	r1, [r3, #0]
 8004572:	8892      	ldrh	r2, [r2, #4]
 8004574:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004576:	4b73      	ldr	r3, [pc, #460]	@ (8004744 <ParseBuffer+0x2d0>)
 8004578:	195b      	adds	r3, r3, r5
 800457a:	19db      	adds	r3, r3, r7
 800457c:	223e      	movs	r2, #62	@ 0x3e
 800457e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004580:	4b71      	ldr	r3, [pc, #452]	@ (8004748 <ParseBuffer+0x2d4>)
 8004582:	195b      	adds	r3, r3, r5
 8004584:	19db      	adds	r3, r3, r7
 8004586:	4a71      	ldr	r2, [pc, #452]	@ (800474c <ParseBuffer+0x2d8>)
 8004588:	ca13      	ldmia	r2!, {r0, r1, r4}
 800458a:	c313      	stmia	r3!, {r0, r1, r4}
 800458c:	8811      	ldrh	r1, [r2, #0]
 800458e:	8019      	strh	r1, [r3, #0]
 8004590:	7892      	ldrb	r2, [r2, #2]
 8004592:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004594:	4b6e      	ldr	r3, [pc, #440]	@ (8004750 <ParseBuffer+0x2dc>)
 8004596:	195b      	adds	r3, r3, r5
 8004598:	19db      	adds	r3, r3, r7
 800459a:	4a6e      	ldr	r2, [pc, #440]	@ (8004754 <ParseBuffer+0x2e0>)
 800459c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800459e:	c313      	stmia	r3!, {r0, r1, r4}
 80045a0:	8812      	ldrh	r2, [r2, #0]
 80045a2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80045a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004718 <ParseBuffer+0x2a4>)
 80045a6:	195b      	adds	r3, r3, r5
 80045a8:	19db      	adds	r3, r3, r7
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80045b0:	2344      	movs	r3, #68	@ 0x44
 80045b2:	18fa      	adds	r2, r7, r3
 80045b4:	2348      	movs	r3, #72	@ 0x48
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f01c fc21 	bl	8020e02 <strstr>
 80045c0:	0003      	movs	r3, r0
 80045c2:	19ba      	adds	r2, r7, r6
 80045c4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80045c6:	4b54      	ldr	r3, [pc, #336]	@ (8004718 <ParseBuffer+0x2a4>)
 80045c8:	22b0      	movs	r2, #176	@ 0xb0
 80045ca:	0052      	lsls	r2, r2, #1
 80045cc:	189b      	adds	r3, r3, r2
 80045ce:	19db      	adds	r3, r3, r7
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10c      	bne.n	80045f0 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80045d6:	232c      	movs	r3, #44	@ 0x2c
 80045d8:	18fa      	adds	r2, r7, r3
 80045da:	2348      	movs	r3, #72	@ 0x48
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	0011      	movs	r1, r2
 80045e0:	0018      	movs	r0, r3
 80045e2:	f01c fc0e 	bl	8020e02 <strstr>
 80045e6:	0003      	movs	r3, r0
 80045e8:	22ac      	movs	r2, #172	@ 0xac
 80045ea:	0052      	lsls	r2, r2, #1
 80045ec:	18ba      	adds	r2, r7, r2
 80045ee:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80045f0:	4b49      	ldr	r3, [pc, #292]	@ (8004718 <ParseBuffer+0x2a4>)
 80045f2:	22b0      	movs	r2, #176	@ 0xb0
 80045f4:	0052      	lsls	r2, r2, #1
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	19db      	adds	r3, r3, r7
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d10c      	bne.n	800461a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004600:	2328      	movs	r3, #40	@ 0x28
 8004602:	18fa      	adds	r2, r7, r3
 8004604:	2348      	movs	r3, #72	@ 0x48
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	0011      	movs	r1, r2
 800460a:	0018      	movs	r0, r3
 800460c:	f01c fbf9 	bl	8020e02 <strstr>
 8004610:	0003      	movs	r3, r0
 8004612:	22ac      	movs	r2, #172	@ 0xac
 8004614:	0052      	lsls	r2, r2, #1
 8004616:	18ba      	adds	r2, r7, r2
 8004618:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800461a:	4b3f      	ldr	r3, [pc, #252]	@ (8004718 <ParseBuffer+0x2a4>)
 800461c:	22b0      	movs	r2, #176	@ 0xb0
 800461e:	0052      	lsls	r2, r2, #1
 8004620:	189b      	adds	r3, r3, r2
 8004622:	19db      	adds	r3, r3, r7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d10c      	bne.n	8004644 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800462a:	2308      	movs	r3, #8
 800462c:	18fa      	adds	r2, r7, r3
 800462e:	2348      	movs	r3, #72	@ 0x48
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	0011      	movs	r1, r2
 8004634:	0018      	movs	r0, r3
 8004636:	f01c fbe4 	bl	8020e02 <strstr>
 800463a:	0003      	movs	r3, r0
 800463c:	22ac      	movs	r2, #172	@ 0xac
 800463e:	0052      	lsls	r2, r2, #1
 8004640:	18ba      	adds	r2, r7, r2
 8004642:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004644:	233c      	movs	r3, #60	@ 0x3c
 8004646:	18fa      	adds	r2, r7, r3
 8004648:	2448      	movs	r4, #72	@ 0x48
 800464a:	193b      	adds	r3, r7, r4
 800464c:	0011      	movs	r1, r2
 800464e:	0018      	movs	r0, r3
 8004650:	f01c fbd7 	bl	8020e02 <strstr>
 8004654:	0003      	movs	r3, r0
 8004656:	22aa      	movs	r2, #170	@ 0xaa
 8004658:	0052      	lsls	r2, r2, #1
 800465a:	18ba      	adds	r2, r7, r2
 800465c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800465e:	2318      	movs	r3, #24
 8004660:	18fa      	adds	r2, r7, r3
 8004662:	193b      	adds	r3, r7, r4
 8004664:	0011      	movs	r1, r2
 8004666:	0018      	movs	r0, r3
 8004668:	f01c fbcb 	bl	8020e02 <strstr>
 800466c:	0003      	movs	r3, r0
 800466e:	22a8      	movs	r2, #168	@ 0xa8
 8004670:	0052      	lsls	r2, r2, #1
 8004672:	18ba      	adds	r2, r7, r2
 8004674:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004676:	4a38      	ldr	r2, [pc, #224]	@ (8004758 <ParseBuffer+0x2e4>)
 8004678:	193b      	adds	r3, r7, r4
 800467a:	0011      	movs	r1, r2
 800467c:	0018      	movs	r0, r3
 800467e:	f01c fbc0 	bl	8020e02 <strstr>
 8004682:	0003      	movs	r3, r0
 8004684:	22a6      	movs	r2, #166	@ 0xa6
 8004686:	0052      	lsls	r2, r2, #1
 8004688:	18ba      	adds	r2, r7, r2
 800468a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800468c:	2334      	movs	r3, #52	@ 0x34
 800468e:	18fa      	adds	r2, r7, r3
 8004690:	193b      	adds	r3, r7, r4
 8004692:	0011      	movs	r1, r2
 8004694:	0018      	movs	r0, r3
 8004696:	f01c fbb4 	bl	8020e02 <strstr>
 800469a:	0003      	movs	r3, r0
 800469c:	22a4      	movs	r2, #164	@ 0xa4
 800469e:	0052      	lsls	r2, r2, #1
 80046a0:	18ba      	adds	r2, r7, r2
 80046a2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80046a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <ParseBuffer+0x2a0>)
 80046a6:	21b0      	movs	r1, #176	@ 0xb0
 80046a8:	0049      	lsls	r1, r1, #1
 80046aa:	185b      	adds	r3, r3, r1
 80046ac:	19db      	adds	r3, r3, r7
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d800      	bhi.n	80046b6 <ParseBuffer+0x242>
 80046b4:	e0bf      	b.n	8004836 <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80046b6:	22ac      	movs	r2, #172	@ 0xac
 80046b8:	0052      	lsls	r2, r2, #1
 80046ba:	18bb      	adds	r3, r7, r2
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d052      	beq.n	8004768 <ParseBuffer+0x2f4>
 80046c2:	18bb      	adds	r3, r7, r2
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80046ca:	d14d      	bne.n	8004768 <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80046cc:	2360      	movs	r3, #96	@ 0x60
 80046ce:	33ff      	adds	r3, #255	@ 0xff
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80046d6:	4b21      	ldr	r3, [pc, #132]	@ (800475c <ParseBuffer+0x2e8>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b12      	cmp	r3, #18
 80046dc:	d144      	bne.n	8004768 <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80046de:	4b0d      	ldr	r3, [pc, #52]	@ (8004714 <ParseBuffer+0x2a0>)
 80046e0:	185b      	adds	r3, r3, r1
 80046e2:	19db      	adds	r3, r3, r7
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80046e8:	d10b      	bne.n	8004702 <ParseBuffer+0x28e>
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <ParseBuffer+0x2a8>)
 80046ec:	185b      	adds	r3, r3, r1
 80046ee:	19db      	adds	r3, r3, r7
 80046f0:	2221      	movs	r2, #33	@ 0x21
 80046f2:	5c9b      	ldrb	r3, [r3, r2]
 80046f4:	2b32      	cmp	r3, #50	@ 0x32
 80046f6:	d104      	bne.n	8004702 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80046f8:	193b      	adds	r3, r7, r4
 80046fa:	0018      	movs	r0, r3
 80046fc:	f002 fc74 	bl	8006fe8 <ParseTime>
 8004700:	e032      	b.n	8004768 <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 8004702:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <ParseBuffer+0x2ec>)
 8004704:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <ParseBuffer+0x2f0>)
 8004706:	0019      	movs	r1, r3
 8004708:	2001      	movs	r0, #1
 800470a:	f00a fc81 	bl	800f010 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800470e:	2306      	movs	r3, #6
 8004710:	e095      	b.n	800483e <ParseBuffer+0x3ca>
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	fffffea2 	.word	0xfffffea2
 8004718:	fffffea1 	.word	0xfffffea1
 800471c:	fffffee8 	.word	0xfffffee8
 8004720:	0802440c 	.word	0x0802440c
 8004724:	fffffee4 	.word	0xfffffee4
 8004728:	08024438 	.word	0x08024438
 800472c:	fffffedc 	.word	0xfffffedc
 8004730:	0802443c 	.word	0x0802443c
 8004734:	fffffed4 	.word	0xfffffed4
 8004738:	08024444 	.word	0x08024444
 800473c:	fffffecc 	.word	0xfffffecc
 8004740:	0802444c 	.word	0x0802444c
 8004744:	fffffec8 	.word	0xfffffec8
 8004748:	fffffeb8 	.word	0xfffffeb8
 800474c:	08024454 	.word	0x08024454
 8004750:	fffffea8 	.word	0xfffffea8
 8004754:	08024464 	.word	0x08024464
 8004758:	080263fc 	.word	0x080263fc
 800475c:	2000061e 	.word	0x2000061e
 8004760:	08024424 	.word	0x08024424
 8004764:	08023d24 	.word	0x08023d24
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004768:	22ac      	movs	r2, #172	@ 0xac
 800476a:	0052      	lsls	r2, r2, #1
 800476c:	18bb      	adds	r3, r7, r2
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <ParseBuffer+0x314>
 8004774:	18bb      	adds	r3, r7, r2
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b72      	cmp	r3, #114	@ 0x72
 800477c:	d104      	bne.n	8004788 <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 800477e:	2360      	movs	r3, #96	@ 0x60
 8004780:	33ff      	adds	r3, #255	@ 0xff
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	2202      	movs	r2, #2
 8004786:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004788:	22ac      	movs	r2, #172	@ 0xac
 800478a:	0052      	lsls	r2, r2, #1
 800478c:	18bb      	adds	r3, r7, r2
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <ParseBuffer+0x334>
 8004794:	18bb      	adds	r3, r7, r2
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b3e      	cmp	r3, #62	@ 0x3e
 800479c:	d104      	bne.n	80047a8 <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 800479e:	2360      	movs	r3, #96	@ 0x60
 80047a0:	33ff      	adds	r3, #255	@ 0xff
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2205      	movs	r2, #5
 80047a6:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80047a8:	22ac      	movs	r2, #172	@ 0xac
 80047aa:	0052      	lsls	r2, r2, #1
 80047ac:	18bb      	adds	r3, r7, r2
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <ParseBuffer+0x354>
 80047b4:	18bb      	adds	r3, r7, r2
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80047bc:	d104      	bne.n	80047c8 <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 80047be:	2360      	movs	r3, #96	@ 0x60
 80047c0:	33ff      	adds	r3, #255	@ 0xff
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	220b      	movs	r2, #11
 80047c6:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80047c8:	22aa      	movs	r2, #170	@ 0xaa
 80047ca:	0052      	lsls	r2, r2, #1
 80047cc:	18bb      	adds	r3, r7, r2
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <ParseBuffer+0x36a>
 80047d4:	18bb      	adds	r3, r7, r2
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b45      	cmp	r3, #69	@ 0x45
 80047dc:	d00a      	beq.n	80047f4 <ParseBuffer+0x380>
 80047de:	22a4      	movs	r2, #164	@ 0xa4
 80047e0:	0052      	lsls	r2, r2, #1
 80047e2:	18bb      	adds	r3, r7, r2
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <ParseBuffer+0x38a>
 80047ea:	18bb      	adds	r3, r7, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b46      	cmp	r3, #70	@ 0x46
 80047f2:	d104      	bne.n	80047fe <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80047f4:	2360      	movs	r3, #96	@ 0x60
 80047f6:	33ff      	adds	r3, #255	@ 0xff
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80047fe:	22a8      	movs	r2, #168	@ 0xa8
 8004800:	0052      	lsls	r2, r2, #1
 8004802:	18bb      	adds	r3, r7, r2
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <ParseBuffer+0x3a6>
 800480a:	18bb      	adds	r3, r7, r2
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b57      	cmp	r3, #87	@ 0x57
 8004812:	d102      	bne.n	800481a <ParseBuffer+0x3a6>
      ConnectionMade = true;
 8004814:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <ParseBuffer+0x3d4>)
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800481a:	22a6      	movs	r2, #166	@ 0xa6
 800481c:	0052      	lsls	r2, r2, #1
 800481e:	18bb      	adds	r3, r7, r2
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <ParseBuffer+0x3c2>
 8004826:	18bb      	adds	r3, r7, r2
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b32      	cmp	r3, #50	@ 0x32
 800482e:	d102      	bne.n	8004836 <ParseBuffer+0x3c2>
      beurs = true;
 8004830:	4b06      	ldr	r3, [pc, #24]	@ (800484c <ParseBuffer+0x3d8>)
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004836:	2360      	movs	r3, #96	@ 0x60
 8004838:	33ff      	adds	r3, #255	@ 0xff
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	781b      	ldrb	r3, [r3, #0]

}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b059      	add	sp, #356	@ 0x164
 8004844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	2000054c 	.word	0x2000054c
 800484c:	2000054e 	.word	0x2000054e

08004850 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <PollAwake+0x34>)
 8004858:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f7fb fc85 	bl	800016c <strlen>
 8004862:	0003      	movs	r3, r0
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0011      	movs	r1, r2
 800486a:	0018      	movs	r0, r3
 800486c:	f7ff f8c4 	bl	80039f8 <ESP_Send>
 8004870:	1e03      	subs	r3, r0, #0
 8004872:	d001      	beq.n	8004878 <PollAwake+0x28>
    return true;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <PollAwake+0x2a>
  }
  else{
    return false;
 8004878:	2300      	movs	r3, #0
  }
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b002      	add	sp, #8
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	08024474 	.word	0x08024474

08004888 <RFPower>:

bool RFPower(){
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800488e:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <RFPower+0x34>)
 8004890:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f7fb fc69 	bl	800016c <strlen>
 800489a:	0003      	movs	r3, r0
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0011      	movs	r1, r2
 80048a2:	0018      	movs	r0, r3
 80048a4:	f7ff f8a8 	bl	80039f8 <ESP_Send>
 80048a8:	1e03      	subs	r3, r0, #0
 80048aa:	d001      	beq.n	80048b0 <RFPower+0x28>
    return true;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <RFPower+0x2a>
  }
  else{
    return false;
 80048b0:	2300      	movs	r3, #0
  }
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	0802447c 	.word	0x0802447c

080048c0 <CheckRFPower>:

bool CheckRFPower(){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <CheckRFPower+0x34>)
 80048c8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7fb fc4d 	bl	800016c <strlen>
 80048d2:	0003      	movs	r3, r0
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0011      	movs	r1, r2
 80048da:	0018      	movs	r0, r3
 80048dc:	f7ff f88c 	bl	80039f8 <ESP_Send>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d001      	beq.n	80048e8 <CheckRFPower+0x28>
    return true;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <CheckRFPower+0x2a>
  }
  else{
    return false;
 80048e8:	2300      	movs	r3, #0
  }
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b002      	add	sp, #8
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	0802448c 	.word	0x0802448c

080048f8 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80048fe:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <ATRestore+0x34>)
 8004900:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f7fb fc31 	bl	800016c <strlen>
 800490a:	0003      	movs	r3, r0
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0011      	movs	r1, r2
 8004912:	0018      	movs	r0, r3
 8004914:	f7ff f870 	bl	80039f8 <ESP_Send>
 8004918:	1e03      	subs	r3, r0, #0
 800491a:	d001      	beq.n	8004920 <ATRestore+0x28>
    return true;
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <ATRestore+0x2a>
  }
  else{
    return false;
 8004920:	2300      	movs	r3, #0
  }
}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b002      	add	sp, #8
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	0802449c 	.word	0x0802449c

08004930 <CWINIT>:

bool CWINIT(){
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004936:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <CWINIT+0x34>)
 8004938:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f7fb fc15 	bl	800016c <strlen>
 8004942:	0003      	movs	r3, r0
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0011      	movs	r1, r2
 800494a:	0018      	movs	r0, r3
 800494c:	f7ff f854 	bl	80039f8 <ESP_Send>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d001      	beq.n	8004958 <CWINIT+0x28>
    return true;
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <CWINIT+0x2a>
  }
  else{
    return false;
 8004958:	2300      	movs	r3, #0
  }
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	080244ac 	.word	0x080244ac

08004968 <CWMODE1>:

bool CWMODE1(){
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800496e:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <CWMODE1+0x34>)
 8004970:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f7fb fbf9 	bl	800016c <strlen>
 800497a:	0003      	movs	r3, r0
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0011      	movs	r1, r2
 8004982:	0018      	movs	r0, r3
 8004984:	f7ff f838 	bl	80039f8 <ESP_Send>
 8004988:	1e03      	subs	r3, r0, #0
 800498a:	d001      	beq.n	8004990 <CWMODE1+0x28>
    return true;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004990:	2300      	movs	r3, #0
  }
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	080244bc 	.word	0x080244bc

080049a0 <CWMODE2>:

bool CWMODE2(){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80049a6:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <CWMODE2+0x34>)
 80049a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fb fbdd 	bl	800016c <strlen>
 80049b2:	0003      	movs	r3, r0
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff f81c 	bl	80039f8 <ESP_Send>
 80049c0:	1e03      	subs	r3, r0, #0
 80049c2:	d001      	beq.n	80049c8 <CWMODE2+0x28>
    return true;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <CWMODE2+0x2a>
  }
  else{
    return false;
 80049c8:	2300      	movs	r3, #0
  }
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b002      	add	sp, #8
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	080244cc 	.word	0x080244cc

080049d8 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80049de:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <CWAUTOCONN+0x34>)
 80049e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fb fbc1 	bl	800016c <strlen>
 80049ea:	0003      	movs	r3, r0
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7ff f800 	bl	80039f8 <ESP_Send>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d001      	beq.n	8004a00 <CWAUTOCONN+0x28>
    return true;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004a00:	2300      	movs	r3, #0
  }
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b002      	add	sp, #8
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	080244dc 	.word	0x080244dc

08004a10 <CWJAP>:

bool CWJAP(){
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	46c6      	mov	lr, r8
 8004a14:	b500      	push	{lr}
 8004a16:	b0a2      	sub	sp, #136	@ 0x88
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	466b      	mov	r3, sp
 8004a1c:	4698      	mov	r8, r3
  beursTest = true;
 8004a1e:	4b39      	ldr	r3, [pc, #228]	@ (8004b04 <CWJAP+0xf4>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004a24:	2618      	movs	r6, #24
 8004a26:	19bb      	adds	r3, r7, r6
 8004a28:	2264      	movs	r2, #100	@ 0x64
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f01c f9ad 	bl	8020d8c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004a32:	4b35      	ldr	r3, [pc, #212]	@ (8004b08 <CWJAP+0xf8>)
 8004a34:	4a35      	ldr	r2, [pc, #212]	@ (8004b0c <CWJAP+0xfc>)
 8004a36:	4936      	ldr	r1, [pc, #216]	@ (8004b10 <CWJAP+0x100>)
 8004a38:	19b8      	adds	r0, r7, r6
 8004a3a:	f01c f841 	bl	8020ac0 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004a3e:	19bb      	adds	r3, r7, r6
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7fb fb93 	bl	800016c <strlen>
 8004a46:	0002      	movs	r2, r0
 8004a48:	216f      	movs	r1, #111	@ 0x6f
 8004a4a:	0030      	movs	r0, r6
 8004a4c:	180b      	adds	r3, r1, r0
 8004a4e:	19db      	adds	r3, r3, r7
 8004a50:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004a52:	180b      	adds	r3, r1, r0
 8004a54:	19db      	adds	r3, r3, r7
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	2180      	movs	r1, #128	@ 0x80
 8004a5e:	1879      	adds	r1, r7, r1
 8004a60:	600a      	str	r2, [r1, #0]
 8004a62:	001a      	movs	r2, r3
 8004a64:	60ba      	str	r2, [r7, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	60fa      	str	r2, [r7, #12]
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	68f9      	ldr	r1, [r7, #12]
 8004a6e:	0002      	movs	r2, r0
 8004a70:	0f52      	lsrs	r2, r2, #29
 8004a72:	000e      	movs	r6, r1
 8004a74:	00f6      	lsls	r6, r6, #3
 8004a76:	617e      	str	r6, [r7, #20]
 8004a78:	697e      	ldr	r6, [r7, #20]
 8004a7a:	4316      	orrs	r6, r2
 8004a7c:	617e      	str	r6, [r7, #20]
 8004a7e:	0002      	movs	r2, r0
 8004a80:	00d2      	lsls	r2, r2, #3
 8004a82:	613a      	str	r2, [r7, #16]
 8004a84:	001a      	movs	r2, r3
 8004a86:	603a      	str	r2, [r7, #0]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	6838      	ldr	r0, [r7, #0]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	0002      	movs	r2, r0
 8004a92:	0f52      	lsrs	r2, r2, #29
 8004a94:	000e      	movs	r6, r1
 8004a96:	00f5      	lsls	r5, r6, #3
 8004a98:	4315      	orrs	r5, r2
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	00d4      	lsls	r4, r2, #3
 8004a9e:	3307      	adds	r3, #7
 8004aa0:	08db      	lsrs	r3, r3, #3
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	466a      	mov	r2, sp
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	469d      	mov	sp, r3
 8004aaa:	466b      	mov	r3, sp
 8004aac:	3300      	adds	r3, #0
 8004aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004ab0:	246f      	movs	r4, #111	@ 0x6f
 8004ab2:	2518      	movs	r5, #24
 8004ab4:	1963      	adds	r3, r4, r5
 8004ab6:	19db      	adds	r3, r3, r7
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	001a      	movs	r2, r3
 8004abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f01c f962 	bl	8020d8c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004ac8:	1963      	adds	r3, r4, r5
 8004aca:	19db      	adds	r3, r3, r7
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	1979      	adds	r1, r7, r5
 8004ad0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f01c f981 	bl	8020dda <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004ad8:	1963      	adds	r3, r4, r5
 8004ada:	19db      	adds	r3, r3, r7
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ae2:	0011      	movs	r1, r2
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fe ff87 	bl	80039f8 <ESP_Send>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d001      	beq.n	8004af2 <CWJAP+0xe2>
    return true;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <CWJAP+0xe4>
  }
  else{
    return false;
 8004af2:	2300      	movs	r3, #0
 8004af4:	46c5      	mov	sp, r8
  }
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b022      	add	sp, #136	@ 0x88
 8004afc:	bc80      	pop	{r7}
 8004afe:	46b8      	mov	r8, r7
 8004b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	2000054d 	.word	0x2000054d
 8004b08:	08026408 	.word	0x08026408
 8004b0c:	080263fc 	.word	0x080263fc
 8004b10:	080244f0 	.word	0x080244f0

08004b14 <CWMODE3>:

bool CWMODE3(){
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <CWMODE3+0x34>)
 8004b1c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fb fb23 	bl	800016c <strlen>
 8004b26:	0003      	movs	r3, r0
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0011      	movs	r1, r2
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7fe ff62 	bl	80039f8 <ESP_Send>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d001      	beq.n	8004b3c <CWMODE3+0x28>
    return true;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <CWMODE3+0x2a>
  }
  else{
    return false;
 8004b3c:	2300      	movs	r3, #0
  }
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	08024508 	.word	0x08024508

08004b4c <CWSTATE>:

bool CWSTATE(){
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <CWSTATE+0x34>)
 8004b54:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7fb fb07 	bl	800016c <strlen>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7fe ff46 	bl	80039f8 <ESP_Send>
 8004b6c:	1e03      	subs	r3, r0, #0
 8004b6e:	d001      	beq.n	8004b74 <CWSTATE+0x28>
    return true;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004b74:	2300      	movs	r3, #0
  }
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b002      	add	sp, #8
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	08024518 	.word	0x08024518

08004b84 <CWSAP>:

bool CWSAP(){
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <CWSAP+0x34>)
 8004b8c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fb faeb 	bl	800016c <strlen>
 8004b96:	0003      	movs	r3, r0
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0011      	movs	r1, r2
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fe ff2a 	bl	80039f8 <ESP_Send>
 8004ba4:	1e03      	subs	r3, r0, #0
 8004ba6:	d001      	beq.n	8004bac <CWSAP+0x28>
    return true;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <CWSAP+0x2a>
  }
  else{
    return false;
 8004bac:	2300      	movs	r3, #0
  }
}
 8004bae:	0018      	movs	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	08024528 	.word	0x08024528

08004bbc <CIPMUX>:

bool CIPMUX(){
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <CIPMUX+0x34>)
 8004bc4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fb facf 	bl	800016c <strlen>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0011      	movs	r1, r2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f7fe ff0e 	bl	80039f8 <ESP_Send>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d001      	beq.n	8004be4 <CIPMUX+0x28>
    return true;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004be4:	2300      	movs	r3, #0
  }
}
 8004be6:	0018      	movs	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b002      	add	sp, #8
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	0802454c 	.word	0x0802454c

08004bf4 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <WEBSERVER+0x34>)
 8004bfc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7fb fab3 	bl	800016c <strlen>
 8004c06:	0003      	movs	r3, r0
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0011      	movs	r1, r2
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fe fef2 	bl	80039f8 <ESP_Send>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d001      	beq.n	8004c1c <WEBSERVER+0x28>
    return true;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004c1c:	2300      	movs	r3, #0
  }
}
 8004c1e:	0018      	movs	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b002      	add	sp, #8
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	0802455c 	.word	0x0802455c

08004c2c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004c32:	1cfb      	adds	r3, r7, #3
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004c38:	4b26      	ldr	r3, [pc, #152]	@ (8004cd4 <HTTPCPOST+0xa8>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	1dbc      	adds	r4, r7, #6
 8004c3e:	1cf9      	adds	r1, r7, #3
 8004c40:	2200      	movs	r2, #0
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7ff f88e 	bl	8003d64 <CreateMessage>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004c4c:	4b21      	ldr	r3, [pc, #132]	@ (8004cd4 <HTTPCPOST+0xa8>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004c54:	1dbb      	adds	r3, r7, #6
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd8 <HTTPCPOST+0xac>)
 8004c5a:	4920      	ldr	r1, [pc, #128]	@ (8004cdc <HTTPCPOST+0xb0>)
 8004c5c:	4820      	ldr	r0, [pc, #128]	@ (8004ce0 <HTTPCPOST+0xb4>)
 8004c5e:	f01b ff2f 	bl	8020ac0 <siprintf>
 8004c62:	e015      	b.n	8004c90 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004c64:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce4 <HTTPCPOST+0xb8>)
 8004c66:	4820      	ldr	r0, [pc, #128]	@ (8004ce8 <HTTPCPOST+0xbc>)
 8004c68:	220c      	movs	r2, #12
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	f002 ffa0 	bl	8007bb0 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004c70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce4 <HTTPCPOST+0xb8>)
 8004c72:	4b1e      	ldr	r3, [pc, #120]	@ (8004cec <HTTPCPOST+0xc0>)
 8004c74:	0011      	movs	r1, r2
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7ff f850 	bl	8003d1c <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004c7c:	1dbb      	adds	r3, r7, #6
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	4c1a      	ldr	r4, [pc, #104]	@ (8004cec <HTTPCPOST+0xc0>)
 8004c82:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf0 <HTTPCPOST+0xc4>)
 8004c84:	491b      	ldr	r1, [pc, #108]	@ (8004cf4 <HTTPCPOST+0xc8>)
 8004c86:	4816      	ldr	r0, [pc, #88]	@ (8004ce0 <HTTPCPOST+0xb4>)
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	0023      	movs	r3, r4
 8004c8c:	f01b ff18 	bl	8020ac0 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004c90:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <HTTPCPOST+0xb4>)
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7fb fa6a 	bl	800016c <strlen>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	8818      	ldrh	r0, [r3, #0]
 8004ca2:	1cfb      	adds	r3, r7, #3
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <HTTPCPOST+0xcc>)
 8004ca8:	4914      	ldr	r1, [pc, #80]	@ (8004cfc <HTTPCPOST+0xd0>)
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	0003      	movs	r3, r0
 8004cae:	2003      	movs	r0, #3
 8004cb0:	f00a f9ae 	bl	800f010 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ce0 <HTTPCPOST+0xb4>)
 8004cba:	0011      	movs	r1, r2
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fe fe9b 	bl	80039f8 <ESP_Send>
 8004cc2:	1e03      	subs	r3, r0, #0
 8004cc4:	d001      	beq.n	8004cca <HTTPCPOST+0x9e>
    return true;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004cca:	2300      	movs	r3, #0
  }
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b003      	add	sp, #12
 8004cd2:	bd90      	pop	{r4, r7, pc}
 8004cd4:	2000054e 	.word	0x2000054e
 8004cd8:	08026424 	.word	0x08026424
 8004cdc:	08024574 	.word	0x08024574
 8004ce0:	20000574 	.word	0x20000574
 8004ce4:	2000073c 	.word	0x2000073c
 8004ce8:	08080000 	.word	0x08080000
 8004cec:	20000748 	.word	0x20000748
 8004cf0:	08026460 	.word	0x08026460
 8004cf4:	080245ac 	.word	0x080245ac
 8004cf8:	080245ec 	.word	0x080245ec
 8004cfc:	08023d00 	.word	0x08023d00

08004d00 <SENDDATA>:

bool SENDDATA(){
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af02      	add	r7, sp, #8
  bool result = false;
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <SENDDATA+0x48>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	1df9      	adds	r1, r7, #7
 8004d12:	2201      	movs	r2, #1
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff f825 	bl	8003d64 <CreateMessage>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	001a      	movs	r2, r3
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <SENDDATA+0x4c>)
 8004d20:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004d22:	1dfb      	adds	r3, r7, #7
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	0018      	movs	r0, r3
 8004d28:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <SENDDATA+0x4c>)
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	4a08      	ldr	r2, [pc, #32]	@ (8004d50 <SENDDATA+0x50>)
 8004d2e:	4909      	ldr	r1, [pc, #36]	@ (8004d54 <SENDDATA+0x54>)
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	0003      	movs	r3, r0
 8004d34:	2003      	movs	r0, #3
 8004d36:	f00a f96b 	bl	800f010 <CreateLine>
  return result;
 8004d3a:	1dfb      	adds	r3, r7, #7
 8004d3c:	781b      	ldrb	r3, [r3, #0]
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b002      	add	sp, #8
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	2000054e 	.word	0x2000054e
 8004d4c:	20000568 	.word	0x20000568
 8004d50:	08024648 	.word	0x08024648
 8004d54:	08023d00 	.word	0x08023d00

08004d58 <SLEEP>:

bool SLEEP(){
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <SLEEP+0x34>)
 8004d60:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7fb fa01 	bl	800016c <strlen>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0011      	movs	r1, r2
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7fe fe40 	bl	80039f8 <ESP_Send>
 8004d78:	1e03      	subs	r3, r0, #0
 8004d7a:	d001      	beq.n	8004d80 <SLEEP+0x28>
    return true;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <SLEEP+0x2a>
  }
  else{
    return false;
 8004d80:	2300      	movs	r3, #0
  }
}
 8004d82:	0018      	movs	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	08024684 	.word	0x08024684

08004d90 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004d96:	4b0d      	ldr	r3, [pc, #52]	@ (8004dcc <CIPSNTPCFG+0x3c>)
 8004d98:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fb f9e5 	bl	800016c <strlen>
 8004da2:	0003      	movs	r3, r0
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0011      	movs	r1, r2
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7fe fe24 	bl	80039f8 <ESP_Send>
 8004db0:	1e03      	subs	r3, r0, #0
 8004db2:	d006      	beq.n	8004dc2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004db4:	23fa      	movs	r3, #250	@ 0xfa
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	0018      	movs	r0, r3
 8004dba:	f00a fd77 	bl	800f8ac <HAL_Delay>
    return true;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004dc2:	2300      	movs	r3, #0
  }
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	08024694 	.word	0x08024694

08004dd0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <CIPSNTPTIME+0x34>)
 8004dd8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7fb f9c5 	bl	800016c <strlen>
 8004de2:	0003      	movs	r3, r0
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0011      	movs	r1, r2
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7fe fe04 	bl	80039f8 <ESP_Send>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d001      	beq.n	8004df8 <CIPSNTPTIME+0x28>
    return true;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004df8:	2300      	movs	r3, #0
  }
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b002      	add	sp, #8
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	080246e4 	.word	0x080246e4

08004e08 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <CIPSNTPINTV+0x34>)
 8004e10:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fb f9a9 	bl	800016c <strlen>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0011      	movs	r1, r2
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7fe fde8 	bl	80039f8 <ESP_Send>
 8004e28:	1e03      	subs	r3, r0, #0
 8004e2a:	d001      	beq.n	8004e30 <CIPSNTPINTV+0x28>
    return true;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004e30:	2300      	movs	r3, #0
  }
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b002      	add	sp, #8
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	080246f8 	.word	0x080246f8

08004e40 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	0002      	movs	r2, r0
 8004e48:	1dfb      	adds	r3, r7, #7
 8004e4a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8005000 <DMA_ProcessBuffer+0x1c0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	200e      	movs	r0, #14
 8004e56:	183b      	adds	r3, r7, r0
 8004e58:	2180      	movs	r1, #128	@ 0x80
 8004e5a:	0049      	lsls	r1, r1, #1
 8004e5c:	1a8a      	subs	r2, r1, r2
 8004e5e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004e60:	230d      	movs	r3, #13
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2203      	movs	r2, #3
 8004e66:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	881a      	ldrh	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	@ 0x80
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004e74:	183b      	adds	r3, r7, r0
 8004e76:	2280      	movs	r2, #128	@ 0x80
 8004e78:	0052      	lsls	r2, r2, #1
 8004e7a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004e7c:	4b61      	ldr	r3, [pc, #388]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	001a      	movs	r2, r3
 8004e84:	230e      	movs	r3, #14
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d131      	bne.n	8004ef2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b14      	cmp	r3, #20
 8004e94:	d91b      	bls.n	8004ece <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004e96:	4b5c      	ldr	r3, [pc, #368]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800500c <DMA_ProcessBuffer+0x1cc>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d107      	bne.n	8004eb4 <DMA_ProcessBuffer+0x74>
 8004ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8005010 <DMA_ProcessBuffer+0x1d0>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004eac:	230d      	movs	r3, #13
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004eb4:	4b55      	ldr	r3, [pc, #340]	@ (800500c <DMA_ProcessBuffer+0x1cc>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d103      	bne.n	8004ec4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004ebc:	4b55      	ldr	r3, [pc, #340]	@ (8005014 <DMA_ProcessBuffer+0x1d4>)
 8004ebe:	220b      	movs	r2, #11
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e016      	b.n	8004ef2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004ec4:	230d      	movs	r3, #13
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	2206      	movs	r2, #6
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	e011      	b.n	8004ef2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004ece:	4b4e      	ldr	r3, [pc, #312]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004ed8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004eda:	f00a fcdd 	bl	800f898 <HAL_GetTick>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	33f5      	adds	r3, #245	@ 0xf5
 8004ee2:	33ff      	adds	r3, #255	@ 0xff
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8005018 <DMA_ProcessBuffer+0x1d8>)
 8004ee8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004eea:	230d      	movs	r3, #13
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	2204      	movs	r2, #4
 8004ef0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004ef2:	4b44      	ldr	r3, [pc, #272]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	001a      	movs	r2, r3
 8004efa:	210e      	movs	r1, #14
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d100      	bne.n	8004f06 <DMA_ProcessBuffer+0xc6>
 8004f04:	e075      	b.n	8004ff2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004f06:	4b40      	ldr	r3, [pc, #256]	@ (8005008 <DMA_ProcessBuffer+0x1c8>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004f0c:	4b43      	ldr	r3, [pc, #268]	@ (800501c <DMA_ProcessBuffer+0x1dc>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4b3c      	ldr	r3, [pc, #240]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d109      	bne.n	8004f30 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4b3e      	ldr	r3, [pc, #248]	@ (800501c <DMA_ProcessBuffer+0x1dc>)
 8004f24:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004f26:	230d      	movs	r3, #13
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	220a      	movs	r2, #10
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e060      	b.n	8004ff2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004f30:	4b3a      	ldr	r3, [pc, #232]	@ (800501c <DMA_ProcessBuffer+0x1dc>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	001a      	movs	r2, r3
 8004f38:	210e      	movs	r1, #14
 8004f3a:	187b      	adds	r3, r7, r1
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004f42:	187b      	adds	r3, r7, r1
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	4b34      	ldr	r3, [pc, #208]	@ (800501c <DMA_ProcessBuffer+0x1dc>)
 8004f4a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004f4c:	230d      	movs	r3, #13
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	220a      	movs	r2, #10
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	e04d      	b.n	8004ff2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004f56:	4b2b      	ldr	r3, [pc, #172]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	210e      	movs	r1, #14
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d917      	bls.n	8004f98 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004f68:	4b26      	ldr	r3, [pc, #152]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	001a      	movs	r2, r3
 8004f70:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <DMA_ProcessBuffer+0x1e0>)
 8004f72:	18d0      	adds	r0, r2, r3
 8004f74:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	001a      	movs	r2, r3
 8004f7c:	187b      	adds	r3, r7, r1
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	b299      	uxth	r1, r3
 8004f84:	230d      	movs	r3, #13
 8004f86:	18fc      	adds	r4, r7, r3
 8004f88:	1dfb      	adds	r3, r7, #7
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	001a      	movs	r2, r3
 8004f8e:	f7ff fa71 	bl	8004474 <ParseBuffer>
 8004f92:	0003      	movs	r3, r0
 8004f94:	7023      	strb	r3, [r4, #0]
 8004f96:	e026      	b.n	8004fe6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004f98:	4b1a      	ldr	r3, [pc, #104]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8005020 <DMA_ProcessBuffer+0x1e0>)
 8004fa2:	18d0      	adds	r0, r2, r3
 8004fa4:	4b17      	ldr	r3, [pc, #92]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	001a      	movs	r2, r3
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	b299      	uxth	r1, r3
 8004fb4:	250d      	movs	r5, #13
 8004fb6:	197c      	adds	r4, r7, r5
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	f7ff fa59 	bl	8004474 <ParseBuffer>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004fc6:	210e      	movs	r1, #14
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004fd0:	197c      	adds	r4, r7, r5
 8004fd2:	1dfb      	adds	r3, r7, #7
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	187b      	adds	r3, r7, r1
 8004fd8:	8819      	ldrh	r1, [r3, #0]
 8004fda:	4b11      	ldr	r3, [pc, #68]	@ (8005020 <DMA_ProcessBuffer+0x1e0>)
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7ff fa49 	bl	8004474 <ParseBuffer>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004fe6:	230e      	movs	r3, #14
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <DMA_ProcessBuffer+0x1c4>)
 8004ff0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004ff2:	230d      	movs	r3, #13
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	781b      	ldrb	r3, [r3, #0]
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b004      	add	sp, #16
 8004ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8005000:	20002040 	.word	0x20002040
 8005004:	20000761 	.word	0x20000761
 8005008:	2000061c 	.word	0x2000061c
 800500c:	2000061e 	.word	0x2000061e
 8005010:	20000000 	.word	0x20000000
 8005014:	2000002c 	.word	0x2000002c
 8005018:	20000614 	.word	0x20000614
 800501c:	20000762 	.word	0x20000762
 8005020:	20000448 	.word	0x20000448

08005024 <clearDMABuffer>:

void clearDMABuffer(){
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8005028:	2380      	movs	r3, #128	@ 0x80
 800502a:	005a      	lsls	r2, r3, #1
 800502c:	4b03      	ldr	r3, [pc, #12]	@ (800503c <clearDMABuffer+0x18>)
 800502e:	2100      	movs	r1, #0
 8005030:	0018      	movs	r0, r3
 8005032:	f01b feab 	bl	8020d8c <memset>
}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000448 	.word	0x20000448

08005040 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	0002      	movs	r2, r0
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	1dbb      	adds	r3, r7, #6
 800504e:	1c0a      	adds	r2, r1, #0
 8005050:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005052:	210f      	movs	r1, #15
 8005054:	187b      	adds	r3, r7, r1
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800505a:	1dbb      	adds	r3, r7, #6
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005062:	187b      	adds	r3, r7, r1
 8005064:	1dfa      	adds	r2, r7, #7
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	4251      	negs	r1, r2
 800506a:	414a      	adcs	r2, r1
 800506c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800506e:	1dbb      	adds	r3, r7, #6
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d107      	bne.n	8005086 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8005076:	230f      	movs	r3, #15
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	1dfa      	adds	r2, r7, #7
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	3a02      	subs	r2, #2
 8005080:	4251      	negs	r1, r2
 8005082:	414a      	adcs	r2, r1
 8005084:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8005086:	1dbb      	adds	r3, r7, #6
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d107      	bne.n	800509e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800508e:	230f      	movs	r3, #15
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	1dfa      	adds	r2, r7, #7
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	3a05      	subs	r2, #5
 8005098:	4251      	negs	r1, r2
 800509a:	414a      	adcs	r2, r1
 800509c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 800509e:	1dbb      	adds	r3, r7, #6
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d107      	bne.n	80050b6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80050a6:	230f      	movs	r3, #15
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	1dfa      	adds	r2, r7, #7
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	3a0b      	subs	r2, #11
 80050b0:	4251      	negs	r1, r2
 80050b2:	414a      	adcs	r2, r1
 80050b4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80050b6:	230f      	movs	r3, #15
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	781b      	ldrb	r3, [r3, #0]
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b004      	add	sp, #16
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <AT_Send>:

bool AT_Send(AT_Commands state){
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	0002      	movs	r2, r0
 80050cc:	1dfb      	adds	r3, r7, #7
 80050ce:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80050d0:	230f      	movs	r3, #15
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
  switch (state){
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b14      	cmp	r3, #20
 80050de:	d900      	bls.n	80050e2 <AT_Send+0x1e>
 80050e0:	e19e      	b.n	8005420 <AT_Send+0x35c>
 80050e2:	009a      	lsls	r2, r3, #2
 80050e4:	4bd2      	ldr	r3, [pc, #840]	@ (8005430 <AT_Send+0x36c>)
 80050e6:	18d3      	adds	r3, r2, r3
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80050ec:	4bd1      	ldr	r3, [pc, #836]	@ (8005434 <AT_Send+0x370>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f009 ff37 	bl	800ef64 <TimestampIsReached>
 80050f6:	1e03      	subs	r3, r0, #0
 80050f8:	d100      	bne.n	80050fc <AT_Send+0x38>
 80050fa:	e190      	b.n	800541e <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80050fc:	4ace      	ldr	r2, [pc, #824]	@ (8005438 <AT_Send+0x374>)
 80050fe:	4bcf      	ldr	r3, [pc, #828]	@ (800543c <AT_Send+0x378>)
 8005100:	0019      	movs	r1, r3
 8005102:	2003      	movs	r0, #3
 8005104:	f009 ff84 	bl	800f010 <CreateLine>
    ATCommandSend = PollAwake();
 8005108:	230f      	movs	r3, #15
 800510a:	18fc      	adds	r4, r7, r3
 800510c:	f7ff fba0 	bl	8004850 <PollAwake>
 8005110:	0003      	movs	r3, r0
 8005112:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005114:	f00a fbc0 	bl	800f898 <HAL_GetTick>
 8005118:	0003      	movs	r3, r0
 800511a:	3332      	adds	r3, #50	@ 0x32
 800511c:	001a      	movs	r2, r3
 800511e:	4bc5      	ldr	r3, [pc, #788]	@ (8005434 <AT_Send+0x370>)
 8005120:	601a      	str	r2, [r3, #0]
  }
  break;
 8005122:	e17c      	b.n	800541e <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005124:	4ac6      	ldr	r2, [pc, #792]	@ (8005440 <AT_Send+0x37c>)
 8005126:	4bc5      	ldr	r3, [pc, #788]	@ (800543c <AT_Send+0x378>)
 8005128:	0019      	movs	r1, r3
 800512a:	2003      	movs	r0, #3
 800512c:	f009 ff70 	bl	800f010 <CreateLine>
    ATCommandSend = RFPower();
 8005130:	230f      	movs	r3, #15
 8005132:	18fc      	adds	r4, r7, r3
 8005134:	f7ff fba8 	bl	8004888 <RFPower>
 8005138:	0003      	movs	r3, r0
 800513a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800513c:	f00a fbac 	bl	800f898 <HAL_GetTick>
 8005140:	0003      	movs	r3, r0
 8005142:	330a      	adds	r3, #10
 8005144:	001a      	movs	r2, r3
 8005146:	4bbb      	ldr	r3, [pc, #748]	@ (8005434 <AT_Send+0x370>)
 8005148:	601a      	str	r2, [r3, #0]
    break;
 800514a:	e169      	b.n	8005420 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800514c:	4abd      	ldr	r2, [pc, #756]	@ (8005444 <AT_Send+0x380>)
 800514e:	4bbb      	ldr	r3, [pc, #748]	@ (800543c <AT_Send+0x378>)
 8005150:	0019      	movs	r1, r3
 8005152:	2003      	movs	r0, #3
 8005154:	f009 ff5c 	bl	800f010 <CreateLine>
    ATCommandSend = CheckRFPower();
 8005158:	230f      	movs	r3, #15
 800515a:	18fc      	adds	r4, r7, r3
 800515c:	f7ff fbb0 	bl	80048c0 <CheckRFPower>
 8005160:	0003      	movs	r3, r0
 8005162:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005164:	f00a fb98 	bl	800f898 <HAL_GetTick>
 8005168:	0003      	movs	r3, r0
 800516a:	330a      	adds	r3, #10
 800516c:	001a      	movs	r2, r3
 800516e:	4bb1      	ldr	r3, [pc, #708]	@ (8005434 <AT_Send+0x370>)
 8005170:	601a      	str	r2, [r3, #0]
    break;
 8005172:	e155      	b.n	8005420 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005174:	4ab4      	ldr	r2, [pc, #720]	@ (8005448 <AT_Send+0x384>)
 8005176:	4bb1      	ldr	r3, [pc, #708]	@ (800543c <AT_Send+0x378>)
 8005178:	0019      	movs	r1, r3
 800517a:	2003      	movs	r0, #3
 800517c:	f009 ff48 	bl	800f010 <CreateLine>
    ATCommandSend = ATRestore();
 8005180:	230f      	movs	r3, #15
 8005182:	18fc      	adds	r4, r7, r3
 8005184:	f7ff fbb8 	bl	80048f8 <ATRestore>
 8005188:	0003      	movs	r3, r0
 800518a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800518c:	f00a fb84 	bl	800f898 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	3332      	adds	r3, #50	@ 0x32
 8005194:	001a      	movs	r2, r3
 8005196:	4ba7      	ldr	r3, [pc, #668]	@ (8005434 <AT_Send+0x370>)
 8005198:	601a      	str	r2, [r3, #0]
    break;
 800519a:	e141      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800519c:	4aab      	ldr	r2, [pc, #684]	@ (800544c <AT_Send+0x388>)
 800519e:	4ba7      	ldr	r3, [pc, #668]	@ (800543c <AT_Send+0x378>)
 80051a0:	0019      	movs	r1, r3
 80051a2:	2003      	movs	r0, #3
 80051a4:	f009 ff34 	bl	800f010 <CreateLine>
    ATCommandSend = CWINIT();
 80051a8:	230f      	movs	r3, #15
 80051aa:	18fc      	adds	r4, r7, r3
 80051ac:	f7ff fbc0 	bl	8004930 <CWINIT>
 80051b0:	0003      	movs	r3, r0
 80051b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051b4:	f00a fb70 	bl	800f898 <HAL_GetTick>
 80051b8:	0003      	movs	r3, r0
 80051ba:	33f5      	adds	r3, #245	@ 0xf5
 80051bc:	33ff      	adds	r3, #255	@ 0xff
 80051be:	001a      	movs	r2, r3
 80051c0:	4b9c      	ldr	r3, [pc, #624]	@ (8005434 <AT_Send+0x370>)
 80051c2:	601a      	str	r2, [r3, #0]
    break;
 80051c4:	e12c      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 80051c6:	4aa2      	ldr	r2, [pc, #648]	@ (8005450 <AT_Send+0x38c>)
 80051c8:	4b9c      	ldr	r3, [pc, #624]	@ (800543c <AT_Send+0x378>)
 80051ca:	0019      	movs	r1, r3
 80051cc:	2003      	movs	r0, #3
 80051ce:	f009 ff1f 	bl	800f010 <CreateLine>
    ATCommandSend = CWSTATE();
 80051d2:	230f      	movs	r3, #15
 80051d4:	18fc      	adds	r4, r7, r3
 80051d6:	f7ff fcb9 	bl	8004b4c <CWSTATE>
 80051da:	0003      	movs	r3, r0
 80051dc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051de:	f00a fb5b 	bl	800f898 <HAL_GetTick>
 80051e2:	0003      	movs	r3, r0
 80051e4:	33f5      	adds	r3, #245	@ 0xf5
 80051e6:	33ff      	adds	r3, #255	@ 0xff
 80051e8:	001a      	movs	r2, r3
 80051ea:	4b92      	ldr	r3, [pc, #584]	@ (8005434 <AT_Send+0x370>)
 80051ec:	601a      	str	r2, [r3, #0]
    break;
 80051ee:	e117      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80051f0:	4a98      	ldr	r2, [pc, #608]	@ (8005454 <AT_Send+0x390>)
 80051f2:	4b92      	ldr	r3, [pc, #584]	@ (800543c <AT_Send+0x378>)
 80051f4:	0019      	movs	r1, r3
 80051f6:	2003      	movs	r0, #3
 80051f8:	f009 ff0a 	bl	800f010 <CreateLine>
    ATCommandSend = CWMODE1();
 80051fc:	230f      	movs	r3, #15
 80051fe:	18fc      	adds	r4, r7, r3
 8005200:	f7ff fbb2 	bl	8004968 <CWMODE1>
 8005204:	0003      	movs	r3, r0
 8005206:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005208:	f00a fb46 	bl	800f898 <HAL_GetTick>
 800520c:	0003      	movs	r3, r0
 800520e:	330a      	adds	r3, #10
 8005210:	001a      	movs	r2, r3
 8005212:	4b88      	ldr	r3, [pc, #544]	@ (8005434 <AT_Send+0x370>)
 8005214:	601a      	str	r2, [r3, #0]
    break;
 8005216:	e103      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8005218:	4a8e      	ldr	r2, [pc, #568]	@ (8005454 <AT_Send+0x390>)
 800521a:	4b88      	ldr	r3, [pc, #544]	@ (800543c <AT_Send+0x378>)
 800521c:	0019      	movs	r1, r3
 800521e:	2003      	movs	r0, #3
 8005220:	f009 fef6 	bl	800f010 <CreateLine>
    ATCommandSend = CWMODE2();
 8005224:	230f      	movs	r3, #15
 8005226:	18fc      	adds	r4, r7, r3
 8005228:	f7ff fbba 	bl	80049a0 <CWMODE2>
 800522c:	0003      	movs	r3, r0
 800522e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005230:	f00a fb32 	bl	800f898 <HAL_GetTick>
 8005234:	0003      	movs	r3, r0
 8005236:	330a      	adds	r3, #10
 8005238:	001a      	movs	r2, r3
 800523a:	4b7e      	ldr	r3, [pc, #504]	@ (8005434 <AT_Send+0x370>)
 800523c:	601a      	str	r2, [r3, #0]
    break;
 800523e:	e0ef      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005240:	4a85      	ldr	r2, [pc, #532]	@ (8005458 <AT_Send+0x394>)
 8005242:	4b7e      	ldr	r3, [pc, #504]	@ (800543c <AT_Send+0x378>)
 8005244:	0019      	movs	r1, r3
 8005246:	2003      	movs	r0, #3
 8005248:	f009 fee2 	bl	800f010 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800524c:	230f      	movs	r3, #15
 800524e:	18fc      	adds	r4, r7, r3
 8005250:	f7ff fbc2 	bl	80049d8 <CWAUTOCONN>
 8005254:	0003      	movs	r3, r0
 8005256:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005258:	f00a fb1e 	bl	800f898 <HAL_GetTick>
 800525c:	0003      	movs	r3, r0
 800525e:	330a      	adds	r3, #10
 8005260:	001a      	movs	r2, r3
 8005262:	4b74      	ldr	r3, [pc, #464]	@ (8005434 <AT_Send+0x370>)
 8005264:	601a      	str	r2, [r3, #0]
    break;
 8005266:	e0db      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005268:	4a7c      	ldr	r2, [pc, #496]	@ (800545c <AT_Send+0x398>)
 800526a:	4b74      	ldr	r3, [pc, #464]	@ (800543c <AT_Send+0x378>)
 800526c:	0019      	movs	r1, r3
 800526e:	2003      	movs	r0, #3
 8005270:	f009 fece 	bl	800f010 <CreateLine>
    ATCommandSend = CWJAP();
 8005274:	230f      	movs	r3, #15
 8005276:	18fc      	adds	r4, r7, r3
 8005278:	f7ff fbca 	bl	8004a10 <CWJAP>
 800527c:	0003      	movs	r3, r0
 800527e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005280:	f00a fb0a 	bl	800f898 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	3332      	adds	r3, #50	@ 0x32
 8005288:	001a      	movs	r2, r3
 800528a:	4b6a      	ldr	r3, [pc, #424]	@ (8005434 <AT_Send+0x370>)
 800528c:	601a      	str	r2, [r3, #0]
    break;
 800528e:	e0c7      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005290:	4a73      	ldr	r2, [pc, #460]	@ (8005460 <AT_Send+0x39c>)
 8005292:	4b6a      	ldr	r3, [pc, #424]	@ (800543c <AT_Send+0x378>)
 8005294:	0019      	movs	r1, r3
 8005296:	2003      	movs	r0, #3
 8005298:	f009 feba 	bl	800f010 <CreateLine>
    ATCommandSend = CWMODE3();
 800529c:	230f      	movs	r3, #15
 800529e:	18fc      	adds	r4, r7, r3
 80052a0:	f7ff fc38 	bl	8004b14 <CWMODE3>
 80052a4:	0003      	movs	r3, r0
 80052a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052a8:	f00a faf6 	bl	800f898 <HAL_GetTick>
 80052ac:	0003      	movs	r3, r0
 80052ae:	330a      	adds	r3, #10
 80052b0:	001a      	movs	r2, r3
 80052b2:	4b60      	ldr	r3, [pc, #384]	@ (8005434 <AT_Send+0x370>)
 80052b4:	601a      	str	r2, [r3, #0]
    break;
 80052b6:	e0b3      	b.n	8005420 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80052b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005464 <AT_Send+0x3a0>)
 80052ba:	4b60      	ldr	r3, [pc, #384]	@ (800543c <AT_Send+0x378>)
 80052bc:	0019      	movs	r1, r3
 80052be:	2003      	movs	r0, #3
 80052c0:	f009 fea6 	bl	800f010 <CreateLine>
    ATCommandSend = CWSAP();
 80052c4:	230f      	movs	r3, #15
 80052c6:	18fc      	adds	r4, r7, r3
 80052c8:	f7ff fc5c 	bl	8004b84 <CWSAP>
 80052cc:	0003      	movs	r3, r0
 80052ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052d0:	f00a fae2 	bl	800f898 <HAL_GetTick>
 80052d4:	0003      	movs	r3, r0
 80052d6:	330a      	adds	r3, #10
 80052d8:	001a      	movs	r2, r3
 80052da:	4b56      	ldr	r3, [pc, #344]	@ (8005434 <AT_Send+0x370>)
 80052dc:	601a      	str	r2, [r3, #0]
    break;
 80052de:	e09f      	b.n	8005420 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80052e0:	4a61      	ldr	r2, [pc, #388]	@ (8005468 <AT_Send+0x3a4>)
 80052e2:	4b56      	ldr	r3, [pc, #344]	@ (800543c <AT_Send+0x378>)
 80052e4:	0019      	movs	r1, r3
 80052e6:	2003      	movs	r0, #3
 80052e8:	f009 fe92 	bl	800f010 <CreateLine>
    ATCommandSend = CIPMUX();
 80052ec:	230f      	movs	r3, #15
 80052ee:	18fc      	adds	r4, r7, r3
 80052f0:	f7ff fc64 	bl	8004bbc <CIPMUX>
 80052f4:	0003      	movs	r3, r0
 80052f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052f8:	f00a face 	bl	800f898 <HAL_GetTick>
 80052fc:	0003      	movs	r3, r0
 80052fe:	330a      	adds	r3, #10
 8005300:	001a      	movs	r2, r3
 8005302:	4b4c      	ldr	r3, [pc, #304]	@ (8005434 <AT_Send+0x370>)
 8005304:	601a      	str	r2, [r3, #0]
    break;
 8005306:	e08b      	b.n	8005420 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8005308:	4a58      	ldr	r2, [pc, #352]	@ (800546c <AT_Send+0x3a8>)
 800530a:	4b4c      	ldr	r3, [pc, #304]	@ (800543c <AT_Send+0x378>)
 800530c:	0019      	movs	r1, r3
 800530e:	2003      	movs	r0, #3
 8005310:	f009 fe7e 	bl	800f010 <CreateLine>
    ATCommandSend = WEBSERVER();
 8005314:	230f      	movs	r3, #15
 8005316:	18fc      	adds	r4, r7, r3
 8005318:	f7ff fc6c 	bl	8004bf4 <WEBSERVER>
 800531c:	0003      	movs	r3, r0
 800531e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005320:	f00a faba 	bl	800f898 <HAL_GetTick>
 8005324:	0003      	movs	r3, r0
 8005326:	330a      	adds	r3, #10
 8005328:	001a      	movs	r2, r3
 800532a:	4b42      	ldr	r3, [pc, #264]	@ (8005434 <AT_Send+0x370>)
 800532c:	601a      	str	r2, [r3, #0]
    break;
 800532e:	e077      	b.n	8005420 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005330:	230f      	movs	r3, #15
 8005332:	18fc      	adds	r4, r7, r3
 8005334:	f7ff fc7a 	bl	8004c2c <HTTPCPOST>
 8005338:	0003      	movs	r3, r0
 800533a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800533c:	f00a faac 	bl	800f898 <HAL_GetTick>
 8005340:	0003      	movs	r3, r0
 8005342:	33f5      	adds	r3, #245	@ 0xf5
 8005344:	33ff      	adds	r3, #255	@ 0xff
 8005346:	001a      	movs	r2, r3
 8005348:	4b3a      	ldr	r3, [pc, #232]	@ (8005434 <AT_Send+0x370>)
 800534a:	601a      	str	r2, [r3, #0]
    break;
 800534c:	e068      	b.n	8005420 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800534e:	4a48      	ldr	r2, [pc, #288]	@ (8005470 <AT_Send+0x3ac>)
 8005350:	4b3a      	ldr	r3, [pc, #232]	@ (800543c <AT_Send+0x378>)
 8005352:	0019      	movs	r1, r3
 8005354:	2003      	movs	r0, #3
 8005356:	f009 fe5b 	bl	800f010 <CreateLine>
    ATCommandSend = SENDDATA();
 800535a:	230f      	movs	r3, #15
 800535c:	18fc      	adds	r4, r7, r3
 800535e:	f7ff fccf 	bl	8004d00 <SENDDATA>
 8005362:	0003      	movs	r3, r0
 8005364:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005366:	f00a fa97 	bl	800f898 <HAL_GetTick>
 800536a:	0003      	movs	r3, r0
 800536c:	33f5      	adds	r3, #245	@ 0xf5
 800536e:	33ff      	adds	r3, #255	@ 0xff
 8005370:	001a      	movs	r2, r3
 8005372:	4b30      	ldr	r3, [pc, #192]	@ (8005434 <AT_Send+0x370>)
 8005374:	601a      	str	r2, [r3, #0]
    break;
 8005376:	e053      	b.n	8005420 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005378:	4a3e      	ldr	r2, [pc, #248]	@ (8005474 <AT_Send+0x3b0>)
 800537a:	4b30      	ldr	r3, [pc, #192]	@ (800543c <AT_Send+0x378>)
 800537c:	0019      	movs	r1, r3
 800537e:	2003      	movs	r0, #3
 8005380:	f009 fe46 	bl	800f010 <CreateLine>
    ATCommandSend = SLEEP();
 8005384:	230f      	movs	r3, #15
 8005386:	18fc      	adds	r4, r7, r3
 8005388:	f7ff fce6 	bl	8004d58 <SLEEP>
 800538c:	0003      	movs	r3, r0
 800538e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005390:	f00a fa82 	bl	800f898 <HAL_GetTick>
 8005394:	0003      	movs	r3, r0
 8005396:	330a      	adds	r3, #10
 8005398:	001a      	movs	r2, r3
 800539a:	4b26      	ldr	r3, [pc, #152]	@ (8005434 <AT_Send+0x370>)
 800539c:	601a      	str	r2, [r3, #0]
    break;
 800539e:	e03f      	b.n	8005420 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80053a0:	4a35      	ldr	r2, [pc, #212]	@ (8005478 <AT_Send+0x3b4>)
 80053a2:	4b26      	ldr	r3, [pc, #152]	@ (800543c <AT_Send+0x378>)
 80053a4:	0019      	movs	r1, r3
 80053a6:	2003      	movs	r0, #3
 80053a8:	f009 fe32 	bl	800f010 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80053ac:	230f      	movs	r3, #15
 80053ae:	18fc      	adds	r4, r7, r3
 80053b0:	f7ff fcee 	bl	8004d90 <CIPSNTPCFG>
 80053b4:	0003      	movs	r3, r0
 80053b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053b8:	f00a fa6e 	bl	800f898 <HAL_GetTick>
 80053bc:	0003      	movs	r3, r0
 80053be:	330a      	adds	r3, #10
 80053c0:	001a      	movs	r2, r3
 80053c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005434 <AT_Send+0x370>)
 80053c4:	601a      	str	r2, [r3, #0]
    break;
 80053c6:	e02b      	b.n	8005420 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80053c8:	4a2c      	ldr	r2, [pc, #176]	@ (800547c <AT_Send+0x3b8>)
 80053ca:	4b1c      	ldr	r3, [pc, #112]	@ (800543c <AT_Send+0x378>)
 80053cc:	0019      	movs	r1, r3
 80053ce:	2003      	movs	r0, #3
 80053d0:	f009 fe1e 	bl	800f010 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80053d4:	230f      	movs	r3, #15
 80053d6:	18fc      	adds	r4, r7, r3
 80053d8:	f7ff fcfa 	bl	8004dd0 <CIPSNTPTIME>
 80053dc:	0003      	movs	r3, r0
 80053de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80053e0:	f00a fa5a 	bl	800f898 <HAL_GetTick>
 80053e4:	0003      	movs	r3, r0
 80053e6:	33f5      	adds	r3, #245	@ 0xf5
 80053e8:	33ff      	adds	r3, #255	@ 0xff
 80053ea:	001a      	movs	r2, r3
 80053ec:	4b11      	ldr	r3, [pc, #68]	@ (8005434 <AT_Send+0x370>)
 80053ee:	601a      	str	r2, [r3, #0]
    break;
 80053f0:	e016      	b.n	8005420 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80053f2:	4a23      	ldr	r2, [pc, #140]	@ (8005480 <AT_Send+0x3bc>)
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <AT_Send+0x378>)
 80053f6:	0019      	movs	r1, r3
 80053f8:	2003      	movs	r0, #3
 80053fa:	f009 fe09 	bl	800f010 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80053fe:	230f      	movs	r3, #15
 8005400:	18fc      	adds	r4, r7, r3
 8005402:	f7ff fd01 	bl	8004e08 <CIPSNTPINTV>
 8005406:	0003      	movs	r3, r0
 8005408:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800540a:	f00a fa45 	bl	800f898 <HAL_GetTick>
 800540e:	0003      	movs	r3, r0
 8005410:	330a      	adds	r3, #10
 8005412:	001a      	movs	r2, r3
 8005414:	4b07      	ldr	r3, [pc, #28]	@ (8005434 <AT_Send+0x370>)
 8005416:	601a      	str	r2, [r3, #0]
    break;
 8005418:	e002      	b.n	8005420 <AT_Send+0x35c>

  case AT_END:
    break;
 800541a:	46c0      	nop			@ (mov r8, r8)
 800541c:	e000      	b.n	8005420 <AT_Send+0x35c>
  break;
 800541e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005420:	230f      	movs	r3, #15
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	781b      	ldrb	r3, [r3, #0]
}
 8005426:	0018      	movs	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	b005      	add	sp, #20
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	080264bc 	.word	0x080264bc
 8005434:	20000614 	.word	0x20000614
 8005438:	08024710 	.word	0x08024710
 800543c:	08023d00 	.word	0x08023d00
 8005440:	0802471c 	.word	0x0802471c
 8005444:	08024730 	.word	0x08024730
 8005448:	08024744 	.word	0x08024744
 800544c:	08024754 	.word	0x08024754
 8005450:	08024768 	.word	0x08024768
 8005454:	08024780 	.word	0x08024780
 8005458:	08024798 	.word	0x08024798
 800545c:	080247b0 	.word	0x080247b0
 8005460:	080247c4 	.word	0x080247c4
 8005464:	080247e0 	.word	0x080247e0
 8005468:	080247fc 	.word	0x080247fc
 800546c:	08024818 	.word	0x08024818
 8005470:	08024834 	.word	0x08024834
 8005474:	08024844 	.word	0x08024844
 8005478:	08024868 	.word	0x08024868
 800547c:	0802487c 	.word	0x0802487c
 8005480:	08024894 	.word	0x08024894

08005484 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005490:	4b7d      	ldr	r3, [pc, #500]	@ (8005688 <ESP_WakeTest+0x204>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b05      	cmp	r3, #5
 8005496:	d900      	bls.n	800549a <ESP_WakeTest+0x16>
 8005498:	e0d9      	b.n	800564e <ESP_WakeTest+0x1ca>
 800549a:	009a      	lsls	r2, r3, #2
 800549c:	4b7b      	ldr	r3, [pc, #492]	@ (800568c <ESP_WakeTest+0x208>)
 800549e:	18d3      	adds	r3, r2, r3
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80054a4:	4b7a      	ldr	r3, [pc, #488]	@ (8005690 <ESP_WakeTest+0x20c>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2201      	movs	r2, #1
 80054aa:	4053      	eors	r3, r2
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d036      	beq.n	8005520 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80054b2:	2380      	movs	r3, #128	@ 0x80
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	4877      	ldr	r0, [pc, #476]	@ (8005694 <ESP_WakeTest+0x210>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	0019      	movs	r1, r3
 80054bc:	f00b fc7d 	bl	8010dba <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80054c0:	2032      	movs	r0, #50	@ 0x32
 80054c2:	f00a f9f3 	bl	800f8ac <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80054c6:	2380      	movs	r3, #128	@ 0x80
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4872      	ldr	r0, [pc, #456]	@ (8005694 <ESP_WakeTest+0x210>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	0019      	movs	r1, r3
 80054d0:	f00b fc73 	bl	8010dba <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054d4:	200a      	movs	r0, #10
 80054d6:	f00a f9e9 	bl	800f8ac <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80054da:	4b6f      	ldr	r3, [pc, #444]	@ (8005698 <ESP_WakeTest+0x214>)
 80054dc:	2200      	movs	r2, #0
 80054de:	2101      	movs	r1, #1
 80054e0:	0018      	movs	r0, r3
 80054e2:	f00b fc6a 	bl	8010dba <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054e6:	200a      	movs	r0, #10
 80054e8:	f00a f9e0 	bl	800f8ac <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80054ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005698 <ESP_WakeTest+0x214>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	2102      	movs	r1, #2
 80054f2:	0018      	movs	r0, r3
 80054f4:	f00b fc61 	bl	8010dba <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054f8:	200a      	movs	r0, #10
 80054fa:	f00a f9d7 	bl	800f8ac <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80054fe:	4b66      	ldr	r3, [pc, #408]	@ (8005698 <ESP_WakeTest+0x214>)
 8005500:	2201      	movs	r2, #1
 8005502:	2101      	movs	r1, #1
 8005504:	0018      	movs	r0, r3
 8005506:	f00b fc58 	bl	8010dba <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800550a:	f00a f9c5 	bl	800f898 <HAL_GetTick>
 800550e:	0003      	movs	r3, r0
 8005510:	22af      	movs	r2, #175	@ 0xaf
 8005512:	0092      	lsls	r2, r2, #2
 8005514:	189a      	adds	r2, r3, r2
 8005516:	4b61      	ldr	r3, [pc, #388]	@ (800569c <ESP_WakeTest+0x218>)
 8005518:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800551a:	4b5d      	ldr	r3, [pc, #372]	@ (8005690 <ESP_WakeTest+0x20c>)
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005520:	2380      	movs	r3, #128	@ 0x80
 8005522:	005a      	lsls	r2, r3, #1
 8005524:	4b5e      	ldr	r3, [pc, #376]	@ (80056a0 <ESP_WakeTest+0x21c>)
 8005526:	0011      	movs	r1, r2
 8005528:	0018      	movs	r0, r3
 800552a:	f7fe fa97 	bl	8003a5c <ESP_Receive>
 800552e:	1e03      	subs	r3, r0, #0
 8005530:	d100      	bne.n	8005534 <ESP_WakeTest+0xb0>
 8005532:	e09f      	b.n	8005674 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005534:	4b54      	ldr	r3, [pc, #336]	@ (8005688 <ESP_WakeTest+0x204>)
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
      }
      break;
 800553a:	e09b      	b.n	8005674 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800553c:	4b57      	ldr	r3, [pc, #348]	@ (800569c <ESP_WakeTest+0x218>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	0018      	movs	r0, r3
 8005542:	f009 fd0f 	bl	800ef64 <TimestampIsReached>
 8005546:	1e03      	subs	r3, r0, #0
 8005548:	d100      	bne.n	800554c <ESP_WakeTest+0xc8>
 800554a:	e095      	b.n	8005678 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800554c:	4b55      	ldr	r3, [pc, #340]	@ (80056a4 <ESP_WakeTest+0x220>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	1dfc      	adds	r4, r7, #7
 8005552:	0018      	movs	r0, r3
 8005554:	f7ff fdb6 	bl	80050c4 <AT_Send>
 8005558:	0003      	movs	r3, r0
 800555a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800555c:	1dfb      	adds	r3, r7, #7
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d100      	bne.n	8005566 <ESP_WakeTest+0xe2>
 8005564:	e088      	b.n	8005678 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005566:	4b48      	ldr	r3, [pc, #288]	@ (8005688 <ESP_WakeTest+0x204>)
 8005568:	2202      	movs	r2, #2
 800556a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800556c:	e084      	b.n	8005678 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800556e:	4b4b      	ldr	r3, [pc, #300]	@ (800569c <ESP_WakeTest+0x218>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	0018      	movs	r0, r3
 8005574:	f009 fcf6 	bl	800ef64 <TimestampIsReached>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d100      	bne.n	800557e <ESP_WakeTest+0xfa>
 800557c:	e07e      	b.n	800567c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800557e:	4b4a      	ldr	r3, [pc, #296]	@ (80056a8 <ESP_WakeTest+0x224>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	0018      	movs	r0, r3
 8005584:	f7ff fc5c 	bl	8004e40 <DMA_ProcessBuffer>
 8005588:	0003      	movs	r3, r0
 800558a:	001a      	movs	r2, r3
 800558c:	4b47      	ldr	r3, [pc, #284]	@ (80056ac <ESP_WakeTest+0x228>)
 800558e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005590:	4b46      	ldr	r3, [pc, #280]	@ (80056ac <ESP_WakeTest+0x228>)
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	4b44      	ldr	r3, [pc, #272]	@ (80056a8 <ESP_WakeTest+0x224>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	1dbc      	adds	r4, r7, #6
 800559a:	0019      	movs	r1, r3
 800559c:	0010      	movs	r0, r2
 800559e:	f7ff fd4f 	bl	8005040 <ATCompare>
 80055a2:	0003      	movs	r3, r0
 80055a4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80055a6:	4b41      	ldr	r3, [pc, #260]	@ (80056ac <ESP_WakeTest+0x228>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d102      	bne.n	80055b4 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80055ae:	4b36      	ldr	r3, [pc, #216]	@ (8005688 <ESP_WakeTest+0x204>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80055b4:	4b3d      	ldr	r3, [pc, #244]	@ (80056ac <ESP_WakeTest+0x228>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b07      	cmp	r3, #7
 80055ba:	d104      	bne.n	80055c6 <ESP_WakeTest+0x142>
          StartProg();
 80055bc:	f7fe ff28 	bl	8004410 <StartProg>
          TestState = ESP_TEST_BOOT;
 80055c0:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <ESP_WakeTest+0x204>)
 80055c2:	2205      	movs	r2, #5
 80055c4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80055c6:	4b39      	ldr	r3, [pc, #228]	@ (80056ac <ESP_WakeTest+0x228>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d109      	bne.n	80055e2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80055ce:	f00a f963 	bl	800f898 <HAL_GetTick>
 80055d2:	0003      	movs	r3, r0
 80055d4:	3332      	adds	r3, #50	@ 0x32
 80055d6:	001a      	movs	r2, r3
 80055d8:	4b30      	ldr	r3, [pc, #192]	@ (800569c <ESP_WakeTest+0x218>)
 80055da:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80055dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005688 <ESP_WakeTest+0x204>)
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80055e2:	1dbb      	adds	r3, r7, #6
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d048      	beq.n	800567c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80055ea:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <ESP_WakeTest+0x204>)
 80055ec:	2203      	movs	r2, #3
 80055ee:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80055f0:	e044      	b.n	800567c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80055f2:	4b2f      	ldr	r3, [pc, #188]	@ (80056b0 <ESP_WakeTest+0x22c>)
 80055f4:	22fa      	movs	r2, #250	@ 0xfa
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80055fa:	f008 fa59 	bl	800dab0 <Calculate_LED_ON>
 80055fe:	0003      	movs	r3, r0
 8005600:	001a      	movs	r2, r3
 8005602:	4b2b      	ldr	r3, [pc, #172]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005604:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005606:	4b2a      	ldr	r3, [pc, #168]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005608:	22fa      	movs	r2, #250	@ 0xfa
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800560e:	4b1e      	ldr	r3, [pc, #120]	@ (8005688 <ESP_WakeTest+0x204>)
 8005610:	2204      	movs	r2, #4
 8005612:	701a      	strb	r2, [r3, #0]

      break;
 8005614:	e033      	b.n	800567e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005616:	4b27      	ldr	r3, [pc, #156]	@ (80056b4 <ESP_WakeTest+0x230>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800561c:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <ESP_WakeTest+0x20c>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005622:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <ESP_WakeTest+0x214>)
 8005624:	2200      	movs	r2, #0
 8005626:	2101      	movs	r1, #1
 8005628:	0018      	movs	r0, r3
 800562a:	f00b fbc6 	bl	8010dba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800562e:	2380      	movs	r3, #128	@ 0x80
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	4818      	ldr	r0, [pc, #96]	@ (8005694 <ESP_WakeTest+0x210>)
 8005634:	2200      	movs	r2, #0
 8005636:	0019      	movs	r1, r3
 8005638:	f00b fbbf 	bl	8010dba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800563c:	4b16      	ldr	r3, [pc, #88]	@ (8005698 <ESP_WakeTest+0x214>)
 800563e:	2200      	movs	r2, #0
 8005640:	2102      	movs	r1, #2
 8005642:	0018      	movs	r0, r3
 8005644:	f00b fbb9 	bl	8010dba <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005648:	f003 fc34 	bl	8008eb4 <SetESPMeasurementDone>
      break;
 800564c:	e017      	b.n	800567e <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800564e:	4b0e      	ldr	r3, [pc, #56]	@ (8005688 <ESP_WakeTest+0x204>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
      break;
 8005654:	e013      	b.n	800567e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005656:	4b16      	ldr	r3, [pc, #88]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005658:	22fa      	movs	r2, #250	@ 0xfa
 800565a:	0112      	lsls	r2, r2, #4
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800565e:	4b14      	ldr	r3, [pc, #80]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005660:	22fa      	movs	r2, #250	@ 0xfa
 8005662:	0112      	lsls	r2, r2, #4
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005666:	f008 fa23 	bl	800dab0 <Calculate_LED_ON>
 800566a:	0003      	movs	r3, r0
 800566c:	001a      	movs	r2, r3
 800566e:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <ESP_WakeTest+0x22c>)
 8005670:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005672:	e004      	b.n	800567e <ESP_WakeTest+0x1fa>
      break;
 8005674:	46c0      	nop			@ (mov r8, r8)
 8005676:	e002      	b.n	800567e <ESP_WakeTest+0x1fa>
      break;
 8005678:	46c0      	nop			@ (mov r8, r8)
 800567a:	e000      	b.n	800567e <ESP_WakeTest+0x1fa>
      break;
 800567c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	46bd      	mov	sp, r7
 8005682:	b003      	add	sp, #12
 8005684:	bd90      	pop	{r4, r7, pc}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	20000620 	.word	0x20000620
 800568c:	08026510 	.word	0x08026510
 8005690:	20000548 	.word	0x20000548
 8005694:	50000800 	.word	0x50000800
 8005698:	50001c00 	.word	0x50001c00
 800569c:	20000614 	.word	0x20000614
 80056a0:	20000448 	.word	0x20000448
 80056a4:	2000061e 	.word	0x2000061e
 80056a8:	2000061d 	.word	0x2000061d
 80056ac:	2000002e 	.word	0x2000002e
 80056b0:	40000400 	.word	0x40000400
 80056b4:	20000000 	.word	0x20000000

080056b8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80056b8:	b5b0      	push	{r4, r5, r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80056be:	1dfb      	adds	r3, r7, #7
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80056c4:	4be2      	ldr	r3, [pc, #904]	@ (8005a50 <ESP_Upkeep+0x398>)
 80056c6:	781a      	ldrb	r2, [r3, #0]
 80056c8:	4be2      	ldr	r3, [pc, #904]	@ (8005a54 <ESP_Upkeep+0x39c>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d024      	beq.n	800571a <ESP_Upkeep+0x62>
 80056d0:	f009 fd18 	bl	800f104 <GetVerboseLevel>
 80056d4:	0003      	movs	r3, r0
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d11f      	bne.n	800571a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80056da:	4bdd      	ldr	r3, [pc, #884]	@ (8005a50 <ESP_Upkeep+0x398>)
 80056dc:	781a      	ldrb	r2, [r3, #0]
 80056de:	4bdd      	ldr	r3, [pc, #884]	@ (8005a54 <ESP_Upkeep+0x39c>)
 80056e0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80056e2:	4bdc      	ldr	r3, [pc, #880]	@ (8005a54 <ESP_Upkeep+0x39c>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d103      	bne.n	80056f2 <ESP_Upkeep+0x3a>
 80056ea:	4bdb      	ldr	r3, [pc, #876]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b0e      	cmp	r3, #14
 80056f0:	d013      	beq.n	800571a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80056f2:	4bd8      	ldr	r3, [pc, #864]	@ (8005a54 <ESP_Upkeep+0x39c>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	001d      	movs	r5, r3
 80056f8:	4bd7      	ldr	r3, [pc, #860]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	0018      	movs	r0, r3
 80056fe:	4bd7      	ldr	r3, [pc, #860]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	001c      	movs	r4, r3
 8005704:	4bd6      	ldr	r3, [pc, #856]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4ad6      	ldr	r2, [pc, #856]	@ (8005a64 <ESP_Upkeep+0x3ac>)
 800570a:	49d7      	ldr	r1, [pc, #860]	@ (8005a68 <ESP_Upkeep+0x3b0>)
 800570c:	9302      	str	r3, [sp, #8]
 800570e:	9401      	str	r4, [sp, #4]
 8005710:	9000      	str	r0, [sp, #0]
 8005712:	002b      	movs	r3, r5
 8005714:	2003      	movs	r0, #3
 8005716:	f009 fc7b 	bl	800f010 <CreateLine>
    }
  }
  switch (EspState) {
 800571a:	4bcd      	ldr	r3, [pc, #820]	@ (8005a50 <ESP_Upkeep+0x398>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	d901      	bls.n	8005726 <ESP_Upkeep+0x6e>
 8005722:	f000 fc32 	bl	8005f8a <ESP_Upkeep+0x8d2>
 8005726:	009a      	lsls	r2, r3, #2
 8005728:	4bd0      	ldr	r3, [pc, #832]	@ (8005a6c <ESP_Upkeep+0x3b4>)
 800572a:	18d3      	adds	r3, r2, r3
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005730:	4bc7      	ldr	r3, [pc, #796]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
      break;
 8005736:	f000 fc41 	bl	8005fbc <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800573a:	f003 fe1b 	bl	8009374 <DisableConnectedDevices>
      SetESPIndicator();
 800573e:	f008 fb49 	bl	800ddd4 <SetESPIndicator>
      if(!EspTurnedOn){
 8005742:	4bcb      	ldr	r3, [pc, #812]	@ (8005a70 <ESP_Upkeep+0x3b8>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	4053      	eors	r3, r2
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d036      	beq.n	80057be <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	48c7      	ldr	r0, [pc, #796]	@ (8005a74 <ESP_Upkeep+0x3bc>)
 8005756:	2200      	movs	r2, #0
 8005758:	0019      	movs	r1, r3
 800575a:	f00b fb2e 	bl	8010dba <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800575e:	2001      	movs	r0, #1
 8005760:	f00a f8a4 	bl	800f8ac <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005764:	2380      	movs	r3, #128	@ 0x80
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	48c2      	ldr	r0, [pc, #776]	@ (8005a74 <ESP_Upkeep+0x3bc>)
 800576a:	2201      	movs	r2, #1
 800576c:	0019      	movs	r1, r3
 800576e:	f00b fb24 	bl	8010dba <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005772:	2001      	movs	r0, #1
 8005774:	f00a f89a 	bl	800f8ac <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005778:	4bbf      	ldr	r3, [pc, #764]	@ (8005a78 <ESP_Upkeep+0x3c0>)
 800577a:	2200      	movs	r2, #0
 800577c:	2101      	movs	r1, #1
 800577e:	0018      	movs	r0, r3
 8005780:	f00b fb1b 	bl	8010dba <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005784:	2001      	movs	r0, #1
 8005786:	f00a f891 	bl	800f8ac <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800578a:	4bbb      	ldr	r3, [pc, #748]	@ (8005a78 <ESP_Upkeep+0x3c0>)
 800578c:	2201      	movs	r2, #1
 800578e:	2102      	movs	r1, #2
 8005790:	0018      	movs	r0, r3
 8005792:	f00b fb12 	bl	8010dba <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005796:	2001      	movs	r0, #1
 8005798:	f00a f888 	bl	800f8ac <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800579c:	4bb6      	ldr	r3, [pc, #728]	@ (8005a78 <ESP_Upkeep+0x3c0>)
 800579e:	2201      	movs	r2, #1
 80057a0:	2101      	movs	r1, #1
 80057a2:	0018      	movs	r0, r3
 80057a4:	f00b fb09 	bl	8010dba <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80057a8:	f00a f876 	bl	800f898 <HAL_GetTick>
 80057ac:	0003      	movs	r3, r0
 80057ae:	22af      	movs	r2, #175	@ 0xaf
 80057b0:	0092      	lsls	r2, r2, #2
 80057b2:	189a      	adds	r2, r3, r2
 80057b4:	4bb1      	ldr	r3, [pc, #708]	@ (8005a7c <ESP_Upkeep+0x3c4>)
 80057b6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80057b8:	4bad      	ldr	r3, [pc, #692]	@ (8005a70 <ESP_Upkeep+0x3b8>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80057be:	2380      	movs	r3, #128	@ 0x80
 80057c0:	005a      	lsls	r2, r3, #1
 80057c2:	4baf      	ldr	r3, [pc, #700]	@ (8005a80 <ESP_Upkeep+0x3c8>)
 80057c4:	0011      	movs	r1, r2
 80057c6:	0018      	movs	r0, r3
 80057c8:	f7fe f948 	bl	8003a5c <ESP_Receive>
 80057cc:	1e03      	subs	r3, r0, #0
 80057ce:	d101      	bne.n	80057d4 <ESP_Upkeep+0x11c>
 80057d0:	f000 fbe7 	bl	8005fa2 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80057d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005a50 <ESP_Upkeep+0x398>)
 80057d6:	220f      	movs	r2, #15
 80057d8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80057da:	f00a f85d 	bl	800f898 <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	22fa      	movs	r2, #250	@ 0xfa
 80057e2:	00d2      	lsls	r2, r2, #3
 80057e4:	189a      	adds	r2, r3, r2
 80057e6:	4ba7      	ldr	r3, [pc, #668]	@ (8005a84 <ESP_Upkeep+0x3cc>)
 80057e8:	601a      	str	r2, [r3, #0]
      }
      break;
 80057ea:	f000 fbda 	bl	8005fa2 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7ff fb26 	bl	8004e40 <DMA_ProcessBuffer>
 80057f4:	0003      	movs	r3, r0
 80057f6:	001a      	movs	r2, r3
 80057f8:	4ba3      	ldr	r3, [pc, #652]	@ (8005a88 <ESP_Upkeep+0x3d0>)
 80057fa:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80057fc:	4ba2      	ldr	r3, [pc, #648]	@ (8005a88 <ESP_Upkeep+0x3d0>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	1dbc      	adds	r4, r7, #6
 8005802:	2101      	movs	r1, #1
 8005804:	0018      	movs	r0, r3
 8005806:	f7ff fc1b 	bl	8005040 <ATCompare>
 800580a:	0003      	movs	r3, r0
 800580c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800580e:	1dbb      	adds	r3, r7, #6
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d108      	bne.n	8005828 <ESP_Upkeep+0x170>
 8005816:	4b9b      	ldr	r3, [pc, #620]	@ (8005a84 <ESP_Upkeep+0x3cc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	0018      	movs	r0, r3
 800581c:	f009 fba2 	bl	800ef64 <TimestampIsReached>
 8005820:	1e03      	subs	r3, r0, #0
 8005822:	d101      	bne.n	8005828 <ESP_Upkeep+0x170>
 8005824:	f000 fbbf 	bl	8005fa6 <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 8005828:	4b89      	ldr	r3, [pc, #548]	@ (8005a50 <ESP_Upkeep+0x398>)
 800582a:	220b      	movs	r2, #11
 800582c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800582e:	f000 fbba 	bl	8005fa6 <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005832:	4b96      	ldr	r3, [pc, #600]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005834:	2209      	movs	r2, #9
 8005836:	2114      	movs	r1, #20
 8005838:	0018      	movs	r0, r3
 800583a:	f01b faa7 	bl	8020d8c <memset>
      if(!InitIsDone || WifiReset){
 800583e:	4b94      	ldr	r3, [pc, #592]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2201      	movs	r2, #1
 8005844:	4053      	eors	r3, r2
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <ESP_Upkeep+0x19c>
 800584c:	4b91      	ldr	r3, [pc, #580]	@ (8005a94 <ESP_Upkeep+0x3dc>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005854:	4b8d      	ldr	r3, [pc, #564]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005856:	4a90      	ldr	r2, [pc, #576]	@ (8005a98 <ESP_Upkeep+0x3e0>)
 8005858:	6811      	ldr	r1, [r2, #0]
 800585a:	6019      	str	r1, [r3, #0]
 800585c:	8891      	ldrh	r1, [r2, #4]
 800585e:	8099      	strh	r1, [r3, #4]
 8005860:	7992      	ldrb	r2, [r2, #6]
 8005862:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005864:	4b7a      	ldr	r3, [pc, #488]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005866:	2204      	movs	r2, #4
 8005868:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800586a:	4b8c      	ldr	r3, [pc, #560]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005870:	4b7a      	ldr	r3, [pc, #488]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005876:	4b89      	ldr	r3, [pc, #548]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	001a      	movs	r2, r3
 800587c:	4b83      	ldr	r3, [pc, #524]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 800587e:	5c9a      	ldrb	r2, [r3, r2]
 8005880:	4b75      	ldr	r3, [pc, #468]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005882:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005884:	4b76      	ldr	r3, [pc, #472]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800588a:	4b81      	ldr	r3, [pc, #516]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01f      	beq.n	80058d2 <ESP_Upkeep+0x21a>
 8005892:	4b83      	ldr	r3, [pc, #524]	@ (8005aa0 <ESP_Upkeep+0x3e8>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2201      	movs	r2, #1
 8005898:	4053      	eors	r3, r2
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d018      	beq.n	80058d2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80058a0:	4b7a      	ldr	r3, [pc, #488]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80058a2:	4a80      	ldr	r2, [pc, #512]	@ (8005aa4 <ESP_Upkeep+0x3ec>)
 80058a4:	6811      	ldr	r1, [r2, #0]
 80058a6:	6019      	str	r1, [r3, #0]
 80058a8:	8892      	ldrh	r2, [r2, #4]
 80058aa:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80058ac:	4b68      	ldr	r3, [pc, #416]	@ (8005a50 <ESP_Upkeep+0x398>)
 80058ae:	2204      	movs	r2, #4
 80058b0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80058b2:	4b7a      	ldr	r3, [pc, #488]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80058b8:	4b68      	ldr	r3, [pc, #416]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80058be:	4b77      	ldr	r3, [pc, #476]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	001a      	movs	r2, r3
 80058c4:	4b71      	ldr	r3, [pc, #452]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80058c6:	5c9a      	ldrb	r2, [r3, r2]
 80058c8:	4b63      	ldr	r3, [pc, #396]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 80058ca:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058cc:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80058d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d021      	beq.n	800591e <ESP_Upkeep+0x266>
 80058da:	4b71      	ldr	r3, [pc, #452]	@ (8005aa0 <ESP_Upkeep+0x3e8>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d01d      	beq.n	800591e <ESP_Upkeep+0x266>
 80058e2:	4b71      	ldr	r3, [pc, #452]	@ (8005aa8 <ESP_Upkeep+0x3f0>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2201      	movs	r2, #1
 80058e8:	4053      	eors	r3, r2
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d016      	beq.n	800591e <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80058f0:	4b6e      	ldr	r3, [pc, #440]	@ (8005aac <ESP_Upkeep+0x3f4>)
 80058f2:	881a      	ldrh	r2, [r3, #0]
 80058f4:	4b65      	ldr	r3, [pc, #404]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80058f6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80058f8:	4b55      	ldr	r3, [pc, #340]	@ (8005a50 <ESP_Upkeep+0x398>)
 80058fa:	2204      	movs	r2, #4
 80058fc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80058fe:	4b67      	ldr	r3, [pc, #412]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005904:	4b55      	ldr	r3, [pc, #340]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 8005906:	2204      	movs	r2, #4
 8005908:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800590a:	4b64      	ldr	r3, [pc, #400]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	001a      	movs	r2, r3
 8005910:	4b5e      	ldr	r3, [pc, #376]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005912:	5c9a      	ldrb	r2, [r3, r2]
 8005914:	4b50      	ldr	r3, [pc, #320]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005916:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005918:	4b51      	ldr	r3, [pc, #324]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800591e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02c      	beq.n	8005980 <ESP_Upkeep+0x2c8>
 8005926:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa0 <ESP_Upkeep+0x3e8>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d028      	beq.n	8005980 <ESP_Upkeep+0x2c8>
 800592e:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa8 <ESP_Upkeep+0x3f0>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d024      	beq.n	8005980 <ESP_Upkeep+0x2c8>
 8005936:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab0 <ESP_Upkeep+0x3f8>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	4053      	eors	r3, r2
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01d      	beq.n	8005980 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005944:	4b51      	ldr	r3, [pc, #324]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005946:	4a5b      	ldr	r2, [pc, #364]	@ (8005ab4 <ESP_Upkeep+0x3fc>)
 8005948:	8811      	ldrh	r1, [r2, #0]
 800594a:	8019      	strh	r1, [r3, #0]
 800594c:	7892      	ldrb	r2, [r2, #2]
 800594e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005950:	4b3f      	ldr	r3, [pc, #252]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005952:	2204      	movs	r2, #4
 8005954:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005956:	4b51      	ldr	r3, [pc, #324]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800595c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005962:	f009 ff99 	bl	800f898 <HAL_GetTick>
 8005966:	0002      	movs	r2, r0
 8005968:	4b53      	ldr	r3, [pc, #332]	@ (8005ab8 <ESP_Upkeep+0x400>)
 800596a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800596c:	4b4b      	ldr	r3, [pc, #300]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	001a      	movs	r2, r3
 8005972:	4b46      	ldr	r3, [pc, #280]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005974:	5c9a      	ldrb	r2, [r3, r2]
 8005976:	4b38      	ldr	r3, [pc, #224]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005978:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800597a:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005980:	4b43      	ldr	r3, [pc, #268]	@ (8005a90 <ESP_Upkeep+0x3d8>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d027      	beq.n	80059d8 <ESP_Upkeep+0x320>
 8005988:	4b45      	ldr	r3, [pc, #276]	@ (8005aa0 <ESP_Upkeep+0x3e8>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d023      	beq.n	80059d8 <ESP_Upkeep+0x320>
 8005990:	4b45      	ldr	r3, [pc, #276]	@ (8005aa8 <ESP_Upkeep+0x3f0>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01f      	beq.n	80059d8 <ESP_Upkeep+0x320>
 8005998:	4b45      	ldr	r3, [pc, #276]	@ (8005ab0 <ESP_Upkeep+0x3f8>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01b      	beq.n	80059d8 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80059a0:	4b46      	ldr	r3, [pc, #280]	@ (8005abc <ESP_Upkeep+0x404>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	4b39      	ldr	r3, [pc, #228]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80059a6:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059a8:	4b29      	ldr	r3, [pc, #164]	@ (8005a50 <ESP_Upkeep+0x398>)
 80059aa:	2204      	movs	r2, #4
 80059ac:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059ae:	4b3b      	ldr	r3, [pc, #236]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80059b4:	4b29      	ldr	r3, [pc, #164]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 80059b6:	2205      	movs	r2, #5
 80059b8:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80059ba:	f009 ff6d 	bl	800f898 <HAL_GetTick>
 80059be:	0002      	movs	r2, r0
 80059c0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab8 <ESP_Upkeep+0x400>)
 80059c2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059c4:	4b35      	ldr	r3, [pc, #212]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	001a      	movs	r2, r3
 80059ca:	4b30      	ldr	r3, [pc, #192]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80059cc:	5c9a      	ldrb	r2, [r3, r2]
 80059ce:	4b22      	ldr	r3, [pc, #136]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 80059d0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059d2:	4b23      	ldr	r3, [pc, #140]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80059d8:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <ESP_Upkeep+0x408>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d100      	bne.n	80059e2 <ESP_Upkeep+0x32a>
 80059e0:	e2e3      	b.n	8005faa <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80059e2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 80059e4:	4a37      	ldr	r2, [pc, #220]	@ (8005ac4 <ESP_Upkeep+0x40c>)
 80059e6:	6811      	ldr	r1, [r2, #0]
 80059e8:	6019      	str	r1, [r3, #0]
 80059ea:	7912      	ldrb	r2, [r2, #4]
 80059ec:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80059ee:	4a36      	ldr	r2, [pc, #216]	@ (8005ac8 <ESP_Upkeep+0x410>)
 80059f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a68 <ESP_Upkeep+0x3b0>)
 80059f2:	0019      	movs	r1, r3
 80059f4:	2003      	movs	r0, #3
 80059f6:	f009 fb0b 	bl	800f010 <CreateLine>
        DisableConnectedDevices();
 80059fa:	f003 fcbb 	bl	8009374 <DisableConnectedDevices>
        usblog = false;
 80059fe:	4b33      	ldr	r3, [pc, #204]	@ (8005acc <ESP_Upkeep+0x414>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005a04:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005a06:	2204      	movs	r2, #4
 8005a08:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a0a:	4b24      	ldr	r3, [pc, #144]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005a10:	4b12      	ldr	r3, [pc, #72]	@ (8005a5c <ESP_Upkeep+0x3a4>)
 8005a12:	2203      	movs	r2, #3
 8005a14:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005a16:	4b21      	ldr	r3, [pc, #132]	@ (8005a9c <ESP_Upkeep+0x3e4>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a8c <ESP_Upkeep+0x3d4>)
 8005a1e:	5c9a      	ldrb	r2, [r3, r2]
 8005a20:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005a22:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a24:	4b0e      	ldr	r3, [pc, #56]	@ (8005a60 <ESP_Upkeep+0x3a8>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005a2a:	e2be      	b.n	8005faa <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <ESP_Upkeep+0x3a0>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	1dfc      	adds	r4, r7, #7
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7ff fb46 	bl	80050c4 <AT_Send>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005a3c:	1dfb      	adds	r3, r7, #7
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d100      	bne.n	8005a46 <ESP_Upkeep+0x38e>
 8005a44:	e2b3      	b.n	8005fae <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005a46:	4b02      	ldr	r3, [pc, #8]	@ (8005a50 <ESP_Upkeep+0x398>)
 8005a48:	2203      	movs	r2, #3
 8005a4a:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005a4c:	e2af      	b.n	8005fae <ESP_Upkeep+0x8f6>
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	2000002c 	.word	0x2000002c
 8005a54:	20000002 	.word	0x20000002
 8005a58:	2000061e 	.word	0x2000061e
 8005a5c:	2000061f 	.word	0x2000061f
 8005a60:	2000061d 	.word	0x2000061d
 8005a64:	080248b4 	.word	0x080248b4
 8005a68:	08023d00 	.word	0x08023d00
 8005a6c:	08026528 	.word	0x08026528
 8005a70:	20000548 	.word	0x20000548
 8005a74:	50000800 	.word	0x50000800
 8005a78:	50001c00 	.word	0x50001c00
 8005a7c:	20000614 	.word	0x20000614
 8005a80:	20000448 	.word	0x20000448
 8005a84:	20000764 	.word	0x20000764
 8005a88:	2000002f 	.word	0x2000002f
 8005a8c:	20000604 	.word	0x20000604
 8005a90:	20000549 	.word	0x20000549
 8005a94:	2000054a 	.word	0x2000054a
 8005a98:	20000004 	.word	0x20000004
 8005a9c:	2000060e 	.word	0x2000060e
 8005aa0:	2000054c 	.word	0x2000054c
 8005aa4:	20000014 	.word	0x20000014
 8005aa8:	2000054d 	.word	0x2000054d
 8005aac:	20000010 	.word	0x20000010
 8005ab0:	20000001 	.word	0x20000001
 8005ab4:	2000000c 	.word	0x2000000c
 8005ab8:	20000560 	.word	0x20000560
 8005abc:	20000024 	.word	0x20000024
 8005ac0:	2000054b 	.word	0x2000054b
 8005ac4:	2000001c 	.word	0x2000001c
 8005ac8:	080248e0 	.word	0x080248e0
 8005acc:	200001f3 	.word	0x200001f3

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ad0:	4bc9      	ldr	r3, [pc, #804]	@ (8005df8 <ESP_Upkeep+0x740>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <ESP_Upkeep+0x430>
 8005ad8:	4bc8      	ldr	r3, [pc, #800]	@ (8005dfc <ESP_Upkeep+0x744>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d003      	beq.n	8005ae8 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005ae0:	4bc7      	ldr	r3, [pc, #796]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005ae2:	220b      	movs	r2, #11
 8005ae4:	701a      	strb	r2, [r3, #0]
        break;
 8005ae6:	e269      	b.n	8005fbc <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005ae8:	4bc6      	ldr	r3, [pc, #792]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f009 fa39 	bl	800ef64 <TimestampIsReached>
 8005af2:	1e03      	subs	r3, r0, #0
 8005af4:	d100      	bne.n	8005af8 <ESP_Upkeep+0x440>
 8005af6:	e25c      	b.n	8005fb2 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005af8:	4bc3      	ldr	r3, [pc, #780]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7ff f99f 	bl	8004e40 <DMA_ProcessBuffer>
 8005b02:	0003      	movs	r3, r0
 8005b04:	001a      	movs	r2, r3
 8005b06:	4bc1      	ldr	r3, [pc, #772]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005b08:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005b0a:	4bc0      	ldr	r3, [pc, #768]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	4bbe      	ldr	r3, [pc, #760]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	1d7c      	adds	r4, r7, #5
 8005b14:	0019      	movs	r1, r3
 8005b16:	0010      	movs	r0, r2
 8005b18:	f7ff fa92 	bl	8005040 <ATCompare>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005b20:	4bba      	ldr	r3, [pc, #744]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d138      	bne.n	8005b9a <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005b28:	4bb9      	ldr	r3, [pc, #740]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b0f      	cmp	r3, #15
 8005b2e:	d108      	bne.n	8005b42 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005b30:	4bb7      	ldr	r3, [pc, #732]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005b32:	220e      	movs	r2, #14
 8005b34:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005b36:	4bb4      	ldr	r3, [pc, #720]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005b38:	2202      	movs	r2, #2
 8005b3a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005b3c:	4bb5      	ldr	r3, [pc, #724]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005b42:	4baf      	ldr	r3, [pc, #700]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005b44:	2204      	movs	r2, #4
 8005b46:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005b48:	4bb3      	ldr	r3, [pc, #716]	@ (8005e18 <ESP_Upkeep+0x760>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4bb1      	ldr	r3, [pc, #708]	@ (8005e18 <ESP_Upkeep+0x760>)
 8005b52:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005b54:	4bb0      	ldr	r3, [pc, #704]	@ (8005e18 <ESP_Upkeep+0x760>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d91e      	bls.n	8005b9a <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005b5c:	f009 fe9c 	bl	800f898 <HAL_GetTick>
 8005b60:	0003      	movs	r3, r0
 8005b62:	4aae      	ldr	r2, [pc, #696]	@ (8005e1c <ESP_Upkeep+0x764>)
 8005b64:	189a      	adds	r2, r3, r2
 8005b66:	4ba7      	ldr	r3, [pc, #668]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005b68:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005b6a:	4bad      	ldr	r3, [pc, #692]	@ (8005e20 <ESP_Upkeep+0x768>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005b70:	f7ff fa58 	bl	8005024 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b74:	f009 fe90 	bl	800f898 <HAL_GetTick>
 8005b78:	0002      	movs	r2, r0
 8005b7a:	4baa      	ldr	r3, [pc, #680]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005b7c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005b7e:	4ba9      	ldr	r3, [pc, #676]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4ba9      	ldr	r3, [pc, #676]	@ (8005e28 <ESP_Upkeep+0x770>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	4aa8      	ldr	r2, [pc, #672]	@ (8005e2c <ESP_Upkeep+0x774>)
 8005b8a:	49a9      	ldr	r1, [pc, #676]	@ (8005e30 <ESP_Upkeep+0x778>)
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f009 fa3f 	bl	800f010 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b92:	4b9b      	ldr	r3, [pc, #620]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005b94:	220d      	movs	r2, #13
 8005b96:	701a      	strb	r2, [r3, #0]
            break;
 8005b98:	e210      	b.n	8005fbc <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d106      	bne.n	8005bb0 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005ba2:	f009 fe79 	bl	800f898 <HAL_GetTick>
 8005ba6:	0003      	movs	r3, r0
 8005ba8:	330a      	adds	r3, #10
 8005baa:	001a      	movs	r2, r3
 8005bac:	4b95      	ldr	r3, [pc, #596]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005bae:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005bb0:	4b96      	ldr	r3, [pc, #600]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b0a      	cmp	r3, #10
 8005bb6:	d106      	bne.n	8005bc6 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005bb8:	f009 fe6e 	bl	800f898 <HAL_GetTick>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	330a      	adds	r3, #10
 8005bc0:	001a      	movs	r2, r3
 8005bc2:	4b90      	ldr	r3, [pc, #576]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005bc4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005bc6:	4b91      	ldr	r3, [pc, #580]	@ (8005e0c <ESP_Upkeep+0x754>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d14b      	bne.n	8005c66 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005bce:	4b99      	ldr	r3, [pc, #612]	@ (8005e34 <ESP_Upkeep+0x77c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	4b97      	ldr	r3, [pc, #604]	@ (8005e34 <ESP_Upkeep+0x77c>)
 8005bd8:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005bda:	4a97      	ldr	r2, [pc, #604]	@ (8005e38 <ESP_Upkeep+0x780>)
 8005bdc:	4b94      	ldr	r3, [pc, #592]	@ (8005e30 <ESP_Upkeep+0x778>)
 8005bde:	0019      	movs	r1, r3
 8005be0:	2001      	movs	r0, #1
 8005be2:	f009 fa15 	bl	800f010 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005be6:	4b93      	ldr	r3, [pc, #588]	@ (8005e34 <ESP_Upkeep+0x77c>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d924      	bls.n	8005c38 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005bee:	f009 fe53 	bl	800f898 <HAL_GetTick>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	4a91      	ldr	r2, [pc, #580]	@ (8005e3c <ESP_Upkeep+0x784>)
 8005bf6:	189a      	adds	r2, r3, r2
 8005bf8:	4b82      	ldr	r3, [pc, #520]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005bfa:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005bfc:	4b88      	ldr	r3, [pc, #544]	@ (8005e20 <ESP_Upkeep+0x768>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005c02:	f7ff fa0f 	bl	8005024 <clearDMABuffer>
            stop = HAL_GetTick();
 8005c06:	f009 fe47 	bl	800f898 <HAL_GetTick>
 8005c0a:	0002      	movs	r2, r0
 8005c0c:	4b85      	ldr	r3, [pc, #532]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005c0e:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005c10:	4b84      	ldr	r3, [pc, #528]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4b84      	ldr	r3, [pc, #528]	@ (8005e28 <ESP_Upkeep+0x770>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	4a89      	ldr	r2, [pc, #548]	@ (8005e40 <ESP_Upkeep+0x788>)
 8005c1c:	4984      	ldr	r1, [pc, #528]	@ (8005e30 <ESP_Upkeep+0x778>)
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f009 f9f6 	bl	800f010 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005c24:	4b76      	ldr	r3, [pc, #472]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005c26:	220d      	movs	r2, #13
 8005c28:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005c2a:	4b79      	ldr	r3, [pc, #484]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c2c:	2214      	movs	r2, #20
 8005c2e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005c30:	4b75      	ldr	r3, [pc, #468]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
            break;
 8005c36:	e1c1      	b.n	8005fbc <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005c38:	4b75      	ldr	r3, [pc, #468]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b0f      	cmp	r3, #15
 8005c3e:	d003      	beq.n	8005c48 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005c40:	4b6f      	ldr	r3, [pc, #444]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005c42:	2204      	movs	r2, #4
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e00e      	b.n	8005c66 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005c48:	4b71      	ldr	r3, [pc, #452]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c4a:	220e      	movs	r2, #14
 8005c4c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005c4e:	4b71      	ldr	r3, [pc, #452]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	4b6f      	ldr	r3, [pc, #444]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c58:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c5a:	4b6b      	ldr	r3, [pc, #428]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005c60:	4b67      	ldr	r3, [pc, #412]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005c62:	2204      	movs	r2, #4
 8005c64:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005c66:	1d7b      	adds	r3, r7, #5
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d100      	bne.n	8005c70 <ESP_Upkeep+0x5b8>
 8005c6e:	e1a0      	b.n	8005fb2 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005c70:	4b63      	ldr	r3, [pc, #396]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005c72:	2205      	movs	r2, #5
 8005c74:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005c76:	e19c      	b.n	8005fb2 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005c78:	4b66      	ldr	r3, [pc, #408]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	4b64      	ldr	r3, [pc, #400]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c82:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005c84:	4b63      	ldr	r3, [pc, #396]	@ (8005e14 <ESP_Upkeep+0x75c>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	001a      	movs	r2, r3
 8005c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e44 <ESP_Upkeep+0x78c>)
 8005c8c:	5c9a      	ldrb	r2, [r3, r2]
 8005c8e:	4b60      	ldr	r3, [pc, #384]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c90:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005c92:	4b5f      	ldr	r3, [pc, #380]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d102      	bne.n	8005ca0 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b0e      	cmp	r3, #14
 8005ca6:	d102      	bne.n	8005cae <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005ca8:	4b57      	ldr	r3, [pc, #348]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005caa:	2202      	movs	r2, #2
 8005cac:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005cae:	4b58      	ldr	r3, [pc, #352]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b0e      	cmp	r3, #14
 8005cb4:	d006      	beq.n	8005cc4 <ESP_Upkeep+0x60c>
 8005cb6:	4b56      	ldr	r3, [pc, #344]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d002      	beq.n	8005cc4 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005cbe:	4b52      	ldr	r3, [pc, #328]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005cc4:	4b52      	ldr	r3, [pc, #328]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b11      	cmp	r3, #17
 8005cca:	d102      	bne.n	8005cd2 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e08 <ESP_Upkeep+0x750>)
 8005cce:	2205      	movs	r2, #5
 8005cd0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8005e10 <ESP_Upkeep+0x758>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b14      	cmp	r3, #20
 8005cde:	d000      	beq.n	8005ce2 <ESP_Upkeep+0x62a>
 8005ce0:	e169      	b.n	8005fb6 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005ce2:	4b46      	ldr	r3, [pc, #280]	@ (8005dfc <ESP_Upkeep+0x744>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d124      	bne.n	8005d34 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005cea:	f009 fdd5 	bl	800f898 <HAL_GetTick>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8005e1c <ESP_Upkeep+0x764>)
 8005cf2:	189a      	adds	r2, r3, r2
 8005cf4:	4b43      	ldr	r3, [pc, #268]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005cf6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005cf8:	f7ff f994 	bl	8005024 <clearDMABuffer>
          stop = HAL_GetTick();
 8005cfc:	f009 fdcc 	bl	800f898 <HAL_GetTick>
 8005d00:	0002      	movs	r2, r0
 8005d02:	4b48      	ldr	r3, [pc, #288]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005d04:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005d06:	4b47      	ldr	r3, [pc, #284]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b47      	ldr	r3, [pc, #284]	@ (8005e28 <ESP_Upkeep+0x770>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	4a4d      	ldr	r2, [pc, #308]	@ (8005e48 <ESP_Upkeep+0x790>)
 8005d12:	494e      	ldr	r1, [pc, #312]	@ (8005e4c <ESP_Upkeep+0x794>)
 8005d14:	2002      	movs	r0, #2
 8005d16:	f009 f97b 	bl	800f010 <CreateLine>
          ResetdBAmax();
 8005d1a:	f003 fb49 	bl	80093b0 <ResetdBAmax>
          resetMaxMeasurementValues();
 8005d1e:	f7fd fdf7 	bl	8003910 <resetMaxMeasurementValues>
          showTime();
 8005d22:	f001 f825 	bl	8006d70 <showTime>
          ESPTransmitDone = true;
 8005d26:	4b3e      	ldr	r3, [pc, #248]	@ (8005e20 <ESP_Upkeep+0x768>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005d2c:	4b34      	ldr	r3, [pc, #208]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005d2e:	220d      	movs	r2, #13
 8005d30:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005d32:	e140      	b.n	8005fb6 <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005d34:	4b31      	ldr	r3, [pc, #196]	@ (8005dfc <ESP_Upkeep+0x744>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d12c      	bne.n	8005d96 <ESP_Upkeep+0x6de>
            setTime = false;
 8005d3c:	4b44      	ldr	r3, [pc, #272]	@ (8005e50 <ESP_Upkeep+0x798>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005d42:	f009 fda9 	bl	800f898 <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	4a42      	ldr	r2, [pc, #264]	@ (8005e54 <ESP_Upkeep+0x79c>)
 8005d4a:	189a      	adds	r2, r3, r2
 8005d4c:	4b42      	ldr	r3, [pc, #264]	@ (8005e58 <ESP_Upkeep+0x7a0>)
 8005d4e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005d50:	4b41      	ldr	r3, [pc, #260]	@ (8005e58 <ESP_Upkeep+0x7a0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a41      	ldr	r2, [pc, #260]	@ (8005e5c <ESP_Upkeep+0x7a4>)
 8005d56:	493d      	ldr	r1, [pc, #244]	@ (8005e4c <ESP_Upkeep+0x794>)
 8005d58:	2002      	movs	r0, #2
 8005d5a:	f009 f959 	bl	800f010 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005d5e:	4b40      	ldr	r3, [pc, #256]	@ (8005e60 <ESP_Upkeep+0x7a8>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b28      	ldr	r3, [pc, #160]	@ (8005e04 <ESP_Upkeep+0x74c>)
 8005d64:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005d66:	f7ff f95d 	bl	8005024 <clearDMABuffer>
            stop = HAL_GetTick();
 8005d6a:	f009 fd95 	bl	800f898 <HAL_GetTick>
 8005d6e:	0002      	movs	r2, r0
 8005d70:	4b2c      	ldr	r3, [pc, #176]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005d72:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005d74:	4b2b      	ldr	r3, [pc, #172]	@ (8005e24 <ESP_Upkeep+0x76c>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4b2b      	ldr	r3, [pc, #172]	@ (8005e28 <ESP_Upkeep+0x770>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	4a39      	ldr	r2, [pc, #228]	@ (8005e64 <ESP_Upkeep+0x7ac>)
 8005d80:	4932      	ldr	r1, [pc, #200]	@ (8005e4c <ESP_Upkeep+0x794>)
 8005d82:	2002      	movs	r0, #2
 8005d84:	f009 f944 	bl	800f010 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d88:	4b1d      	ldr	r3, [pc, #116]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005d8a:	220d      	movs	r2, #13
 8005d8c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dfc <ESP_Upkeep+0x744>)
 8005d90:	2202      	movs	r2, #2
 8005d92:	701a      	strb	r2, [r3, #0]
    break;
 8005d94:	e10f      	b.n	8005fb6 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005d96:	4b1a      	ldr	r3, [pc, #104]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005d98:	2209      	movs	r2, #9
 8005d9a:	701a      	strb	r2, [r3, #0]
    break;
 8005d9c:	e10b      	b.n	8005fb6 <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005d9e:	4b32      	ldr	r3, [pc, #200]	@ (8005e68 <ESP_Upkeep+0x7b0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005da4:	4b31      	ldr	r3, [pc, #196]	@ (8005e6c <ESP_Upkeep+0x7b4>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	2101      	movs	r1, #1
 8005daa:	0018      	movs	r0, r3
 8005dac:	f00b f805 	bl	8010dba <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005db0:	2001      	movs	r0, #1
 8005db2:	f009 fd7b 	bl	800f8ac <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005db6:	2380      	movs	r3, #128	@ 0x80
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	482d      	ldr	r0, [pc, #180]	@ (8005e70 <ESP_Upkeep+0x7b8>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	f00a fffb 	bl	8010dba <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	f009 fd71 	bl	800f8ac <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005dca:	4b28      	ldr	r3, [pc, #160]	@ (8005e6c <ESP_Upkeep+0x7b4>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2102      	movs	r1, #2
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f00a fff2 	bl	8010dba <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <ESP_Upkeep+0x748>)
 8005dd8:	2209      	movs	r2, #9
 8005dda:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005ddc:	f003 faa0 	bl	8009320 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005de0:	2001      	movs	r0, #1
 8005de2:	f009 fd63 	bl	800f8ac <HAL_Delay>
      ResetESPIndicator();
 8005de6:	f008 f80d 	bl	800de04 <ResetESPIndicator>
      errorcntr = 0;
 8005dea:	4b0b      	ldr	r3, [pc, #44]	@ (8005e18 <ESP_Upkeep+0x760>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005df0:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <ESP_Upkeep+0x77c>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
      break;
 8005df6:	e0e1      	b.n	8005fbc <ESP_Upkeep+0x904>
 8005df8:	2000054b 	.word	0x2000054b
 8005dfc:	2000061f 	.word	0x2000061f
 8005e00:	2000002c 	.word	0x2000002c
 8005e04:	20000614 	.word	0x20000614
 8005e08:	2000061d 	.word	0x2000061d
 8005e0c:	2000002f 	.word	0x2000002f
 8005e10:	2000061e 	.word	0x2000061e
 8005e14:	2000060e 	.word	0x2000060e
 8005e18:	2000060f 	.word	0x2000060f
 8005e1c:	0003a980 	.word	0x0003a980
 8005e20:	20000550 	.word	0x20000550
 8005e24:	20000564 	.word	0x20000564
 8005e28:	20000560 	.word	0x20000560
 8005e2c:	08024910 	.word	0x08024910
 8005e30:	08023d24 	.word	0x08023d24
 8005e34:	20000610 	.word	0x20000610
 8005e38:	08024944 	.word	0x08024944
 8005e3c:	0000c350 	.word	0x0000c350
 8005e40:	08024980 	.word	0x08024980
 8005e44:	20000604 	.word	0x20000604
 8005e48:	080249b0 	.word	0x080249b0
 8005e4c:	080249c8 	.word	0x080249c8
 8005e50:	20000001 	.word	0x20000001
 8005e54:	047e7c4f 	.word	0x047e7c4f
 8005e58:	20000618 	.word	0x20000618
 8005e5c:	080249cc 	.word	0x080249cc
 8005e60:	20000028 	.word	0x20000028
 8005e64:	08024a10 	.word	0x08024a10
 8005e68:	20000548 	.word	0x20000548
 8005e6c:	50001c00 	.word	0x50001c00
 8005e70:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005e74:	4b54      	ldr	r3, [pc, #336]	@ (8005fc8 <ESP_Upkeep+0x910>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f009 f873 	bl	800ef64 <TimestampIsReached>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d103      	bne.n	8005e8a <ESP_Upkeep+0x7d2>
 8005e82:	4b52      	ldr	r3, [pc, #328]	@ (8005fcc <ESP_Upkeep+0x914>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d043      	beq.n	8005f12 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005e8a:	4b51      	ldr	r3, [pc, #324]	@ (8005fd0 <ESP_Upkeep+0x918>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005e90:	4b50      	ldr	r3, [pc, #320]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005e98:	4b4f      	ldr	r3, [pc, #316]	@ (8005fd8 <ESP_Upkeep+0x920>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005ea0:	220b      	movs	r2, #11
 8005ea2:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d108      	bne.n	8005ebe <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005eac:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe0 <ESP_Upkeep+0x928>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe4 <ESP_Upkeep+0x92c>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005eb8:	4b48      	ldr	r3, [pc, #288]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005eba:	220b      	movs	r2, #11
 8005ebc:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005ebe:	4b45      	ldr	r3, [pc, #276]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d102      	bne.n	8005ecc <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005ec6:	4b45      	ldr	r3, [pc, #276]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005ec8:	2202      	movs	r2, #2
 8005eca:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005ecc:	4b41      	ldr	r3, [pc, #260]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d108      	bne.n	8005ee6 <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005ed4:	4b41      	ldr	r3, [pc, #260]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005ed6:	220e      	movs	r2, #14
 8005ed8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005eda:	4a43      	ldr	r2, [pc, #268]	@ (8005fe8 <ESP_Upkeep+0x930>)
 8005edc:	4b43      	ldr	r3, [pc, #268]	@ (8005fec <ESP_Upkeep+0x934>)
 8005ede:	0019      	movs	r1, r3
 8005ee0:	2002      	movs	r0, #2
 8005ee2:	f009 f895 	bl	800f010 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d105      	bne.n	8005efa <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005eee:	4b3b      	ldr	r3, [pc, #236]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005ef0:	220b      	movs	r2, #11
 8005ef2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff0 <ESP_Upkeep+0x938>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005efa:	4b34      	ldr	r3, [pc, #208]	@ (8005fcc <ESP_Upkeep+0x914>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <ESP_Upkeep+0x88c>
 8005f02:	4b34      	ldr	r3, [pc, #208]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d01c      	beq.n	8005f44 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005f0a:	4b34      	ldr	r3, [pc, #208]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f10:	e018      	b.n	8005f44 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005f12:	4b38      	ldr	r3, [pc, #224]	@ (8005ff4 <ESP_Upkeep+0x93c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	0018      	movs	r0, r3
 8005f18:	f009 f824 	bl	800ef64 <TimestampIsReached>
 8005f1c:	1e03      	subs	r3, r0, #0
 8005f1e:	d04c      	beq.n	8005fba <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005f20:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d148      	bne.n	8005fba <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005f28:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd4 <ESP_Upkeep+0x91c>)
 8005f2a:	2205      	movs	r2, #5
 8005f2c:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005f30:	2202      	movs	r2, #2
 8005f32:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005f34:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <ESP_Upkeep+0x910>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff8 <ESP_Upkeep+0x940>)
 8005f3a:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ffc <ESP_Upkeep+0x944>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005f42:	e03a      	b.n	8005fba <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f44:	46c0      	nop			@ (mov r8, r8)
      break;
 8005f46:	e038      	b.n	8005fba <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005f48:	4b2d      	ldr	r3, [pc, #180]	@ (8006000 <ESP_Upkeep+0x948>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	4053      	eors	r3, r2
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005f56:	4a24      	ldr	r2, [pc, #144]	@ (8005fe8 <ESP_Upkeep+0x930>)
 8005f58:	4b24      	ldr	r3, [pc, #144]	@ (8005fec <ESP_Upkeep+0x934>)
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	f009 f857 	bl	800f010 <CreateLine>
        msgdone = true;
 8005f62:	4b27      	ldr	r3, [pc, #156]	@ (8006000 <ESP_Upkeep+0x948>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005f68:	f017 fcd6 	bl	801d918 <GetUsbRxPointer>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 f8c0 	bl	80060f4 <Process_PC_Config>
      break;
 8005f74:	e022      	b.n	8005fbc <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005f76:	4a23      	ldr	r2, [pc, #140]	@ (8006004 <ESP_Upkeep+0x94c>)
 8005f78:	4b23      	ldr	r3, [pc, #140]	@ (8006008 <ESP_Upkeep+0x950>)
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	f009 f847 	bl	800f010 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005f82:	4b16      	ldr	r3, [pc, #88]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005f84:	2202      	movs	r2, #2
 8005f86:	701a      	strb	r2, [r3, #0]
      break;
 8005f88:	e018      	b.n	8005fbc <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005f8a:	4a20      	ldr	r2, [pc, #128]	@ (800600c <ESP_Upkeep+0x954>)
 8005f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8006008 <ESP_Upkeep+0x950>)
 8005f8e:	0019      	movs	r1, r3
 8005f90:	2001      	movs	r0, #1
 8005f92:	f009 f83d 	bl	800f010 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005f96:	4b11      	ldr	r3, [pc, #68]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005f98:	2207      	movs	r2, #7
 8005f9a:	701a      	strb	r2, [r3, #0]
      break;
 8005f9c:	e00e      	b.n	8005fbc <ESP_Upkeep+0x904>
      break;
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	e00c      	b.n	8005fbc <ESP_Upkeep+0x904>
      break;
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	e00a      	b.n	8005fbc <ESP_Upkeep+0x904>
        break;
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	e008      	b.n	8005fbc <ESP_Upkeep+0x904>
    break;
 8005faa:	46c0      	nop			@ (mov r8, r8)
 8005fac:	e006      	b.n	8005fbc <ESP_Upkeep+0x904>
    break;
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	e004      	b.n	8005fbc <ESP_Upkeep+0x904>
      break;
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	e002      	b.n	8005fbc <ESP_Upkeep+0x904>
    break;
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	e000      	b.n	8005fbc <ESP_Upkeep+0x904>
      break;
 8005fba:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005fbc:	4b07      	ldr	r3, [pc, #28]	@ (8005fdc <ESP_Upkeep+0x924>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b002      	add	sp, #8
 8005fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc8:	20000614 	.word	0x20000614
 8005fcc:	2000054b 	.word	0x2000054b
 8005fd0:	20000550 	.word	0x20000550
 8005fd4:	2000061f 	.word	0x2000061f
 8005fd8:	20000549 	.word	0x20000549
 8005fdc:	2000002c 	.word	0x2000002c
 8005fe0:	2000054c 	.word	0x2000054c
 8005fe4:	2000054e 	.word	0x2000054e
 8005fe8:	08024a30 	.word	0x08024a30
 8005fec:	080249c8 	.word	0x080249c8
 8005ff0:	2000054d 	.word	0x2000054d
 8005ff4:	20000618 	.word	0x20000618
 8005ff8:	20000028 	.word	0x20000028
 8005ffc:	20000001 	.word	0x20000001
 8006000:	2000054f 	.word	0x2000054f
 8006004:	08024a48 	.word	0x08024a48
 8006008:	08023d24 	.word	0x08023d24
 800600c:	08024a5c 	.word	0x08024a5c

08006010 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8006018:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <I2CSensors_Init+0x30>)
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 800601e:	4a09      	ldr	r2, [pc, #36]	@ (8006044 <I2CSensors_Init+0x34>)
 8006020:	4b09      	ldr	r3, [pc, #36]	@ (8006048 <I2CSensors_Init+0x38>)
 8006022:	0011      	movs	r1, r2
 8006024:	0018      	movs	r0, r3
 8006026:	f009 f957 	bl	800f2d8 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 800602a:	4a06      	ldr	r2, [pc, #24]	@ (8006044 <I2CSensors_Init+0x34>)
 800602c:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <I2CSensors_Init+0x38>)
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f006 f8d5 	bl	800c1e0 <SGP_Init>
}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	46bd      	mov	sp, r7
 800603a:	b002      	add	sp, #8
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			@ (mov r8, r8)
 8006040:	20000768 	.word	0x20000768
 8006044:	080060a1 	.word	0x080060a1
 8006048:	0800604d 	.word	0x0800604d

0800604c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800604c:	b5b0      	push	{r4, r5, r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6039      	str	r1, [r7, #0]
 8006054:	0011      	movs	r1, r2
 8006056:	1dfb      	adds	r3, r7, #7
 8006058:	1c02      	adds	r2, r0, #0
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	1dbb      	adds	r3, r7, #6
 800605e:	1c0a      	adds	r2, r1, #0
 8006060:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006062:	4b0e      	ldr	r3, [pc, #56]	@ (800609c <ReadI2C+0x50>)
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	1dfb      	adds	r3, r7, #7
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	18db      	adds	r3, r3, r3
 800606e:	b299      	uxth	r1, r3
 8006070:	1dbb      	adds	r3, r7, #6
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	250f      	movs	r5, #15
 8006078:	197c      	adds	r4, r7, r5
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	f00b fa82 	bl	8011584 <HAL_I2C_Master_Receive_DMA>
 8006080:	0003      	movs	r3, r0
 8006082:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006084:	197b      	adds	r3, r7, r5
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <ReadI2C+0x44>
        return false;
 800608c:	2300      	movs	r3, #0
 800608e:	e000      	b.n	8006092 <ReadI2C+0x46>
    }
    return true;
 8006090:	2301      	movs	r3, #1
}
 8006092:	0018      	movs	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	b004      	add	sp, #16
 8006098:	bdb0      	pop	{r4, r5, r7, pc}
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	20000768 	.word	0x20000768

080060a0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80060a0:	b5b0      	push	{r4, r5, r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6039      	str	r1, [r7, #0]
 80060a8:	0011      	movs	r1, r2
 80060aa:	1dfb      	adds	r3, r7, #7
 80060ac:	1c02      	adds	r2, r0, #0
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	1dbb      	adds	r3, r7, #6
 80060b2:	1c0a      	adds	r2, r1, #0
 80060b4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80060b6:	4b0e      	ldr	r3, [pc, #56]	@ (80060f0 <WriteI2C+0x50>)
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	1dfb      	adds	r3, r7, #7
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	18db      	adds	r3, r3, r3
 80060c2:	b299      	uxth	r1, r3
 80060c4:	1dbb      	adds	r3, r7, #6
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	250f      	movs	r5, #15
 80060cc:	197c      	adds	r4, r7, r5
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	f00b f952 	bl	8011378 <HAL_I2C_Master_Transmit_DMA>
 80060d4:	0003      	movs	r3, r0
 80060d6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80060d8:	197b      	adds	r3, r7, r5
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <WriteI2C+0x44>
        return false;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e000      	b.n	80060e6 <WriteI2C+0x46>
    }
    return true;
 80060e4:	2301      	movs	r3, #1
}
 80060e6:	0018      	movs	r0, r3
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b004      	add	sp, #16
 80060ec:	bdb0      	pop	{r4, r5, r7, pc}
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	20000768 	.word	0x20000768

080060f4 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80060f4:	b590      	push	{r4, r7, lr}
 80060f6:	b0c3      	sub	sp, #268	@ 0x10c
 80060f8:	af3e      	add	r7, sp, #248	@ 0xf8
 80060fa:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80060fc:	f017 fc2c 	bl	801d958 <GetUsbRxDataSize>
 8006100:	0003      	movs	r3, r0
 8006102:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b05      	cmp	r3, #5
 8006108:	d971      	bls.n	80061ee <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2123      	movs	r1, #35	@ 0x23
 800610e:	0018      	movs	r0, r3
 8006110:	f01a fe44 	bl	8020d9c <strchr>
 8006114:	0003      	movs	r3, r0
 8006116:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d065      	beq.n	80061ea <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	785a      	ldrb	r2, [r3, #1]
 8006122:	4b34      	ldr	r3, [pc, #208]	@ (80061f4 <Process_PC_Config+0x100>)
 8006124:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	789a      	ldrb	r2, [r3, #2]
 800612a:	4b32      	ldr	r3, [pc, #200]	@ (80061f4 <Process_PC_Config+0x100>)
 800612c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800612e:	4b31      	ldr	r3, [pc, #196]	@ (80061f4 <Process_PC_Config+0x100>)
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	3305      	adds	r3, #5
 8006134:	001a      	movs	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4293      	cmp	r3, r2
 800613a:	d351      	bcc.n	80061e0 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	1cd9      	adds	r1, r3, #3
 8006140:	4b2c      	ldr	r3, [pc, #176]	@ (80061f4 <Process_PC_Config+0x100>)
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	001a      	movs	r2, r3
 8006146:	4b2c      	ldr	r3, [pc, #176]	@ (80061f8 <Process_PC_Config+0x104>)
 8006148:	0018      	movs	r0, r3
 800614a:	f01a fefb 	bl	8020f44 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800614e:	4b29      	ldr	r3, [pc, #164]	@ (80061f4 <Process_PC_Config+0x100>)
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	3303      	adds	r3, #3
 8006154:	001a      	movs	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	189b      	adds	r3, r3, r2
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	b21a      	sxth	r2, r3
 8006160:	4b24      	ldr	r3, [pc, #144]	@ (80061f4 <Process_PC_Config+0x100>)
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	3304      	adds	r3, #4
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	18cb      	adds	r3, r1, r3
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b21b      	sxth	r3, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	b21b      	sxth	r3, r3
 8006172:	b299      	uxth	r1, r3
 8006174:	4a1f      	ldr	r2, [pc, #124]	@ (80061f4 <Process_PC_Config+0x100>)
 8006176:	2381      	movs	r3, #129	@ 0x81
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 800617c:	4a1d      	ldr	r2, [pc, #116]	@ (80061f4 <Process_PC_Config+0x100>)
 800617e:	2381      	movs	r3, #129	@ 0x81
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	5ad4      	ldrh	r4, [r2, r3]
 8006184:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <Process_PC_Config+0x100>)
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	3303      	adds	r3, #3
 800618a:	b29a      	uxth	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	0011      	movs	r1, r2
 8006190:	0018      	movs	r0, r3
 8006192:	f000 f975 	bl	8006480 <CRC16_ARC>
 8006196:	0003      	movs	r3, r0
 8006198:	429c      	cmp	r4, r3
 800619a:	d007      	beq.n	80061ac <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 800619c:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <Process_PC_Config+0x100>)
 800619e:	785a      	ldrb	r2, [r3, #1]
 80061a0:	4b15      	ldr	r3, [pc, #84]	@ (80061f8 <Process_PC_Config+0x104>)
 80061a2:	0019      	movs	r1, r3
 80061a4:	2001      	movs	r0, #1
 80061a6:	f000 f919 	bl	80063dc <Create_Message>
 80061aa:	e016      	b.n	80061da <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80061ac:	4c11      	ldr	r4, [pc, #68]	@ (80061f4 <Process_PC_Config+0x100>)
 80061ae:	466b      	mov	r3, sp
 80061b0:	0018      	movs	r0, r3
 80061b2:	0023      	movs	r3, r4
 80061b4:	3310      	adds	r3, #16
 80061b6:	22f4      	movs	r2, #244	@ 0xf4
 80061b8:	0019      	movs	r1, r3
 80061ba:	f01a fec3 	bl	8020f44 <memcpy>
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	6861      	ldr	r1, [r4, #4]
 80061c2:	68a2      	ldr	r2, [r4, #8]
 80061c4:	68e3      	ldr	r3, [r4, #12]
 80061c6:	f000 f819 	bl	80061fc <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80061ca:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <Process_PC_Config+0x100>)
 80061cc:	7818      	ldrb	r0, [r3, #0]
 80061ce:	4b09      	ldr	r3, [pc, #36]	@ (80061f4 <Process_PC_Config+0x100>)
 80061d0:	785a      	ldrb	r2, [r3, #1]
 80061d2:	4b09      	ldr	r3, [pc, #36]	@ (80061f8 <Process_PC_Config+0x104>)
 80061d4:	0019      	movs	r1, r3
 80061d6:	f000 f901 	bl	80063dc <Create_Message>
                }
                ResetUsbRxDataSize();
 80061da:	f017 fba5 	bl	801d928 <ResetUsbRxDataSize>
                return;
 80061de:	e006      	b.n	80061ee <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	0018      	movs	r0, r3
 80061e4:	f017 fbc2 	bl	801d96c <GetUsbRxNextChunk>
 80061e8:	e001      	b.n	80061ee <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80061ea:	f017 fb9d 	bl	801d928 <ResetUsbRxDataSize>
        }
    }
}
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b005      	add	sp, #20
 80061f2:	bd90      	pop	{r4, r7, pc}
 80061f4:	2000076c 	.word	0x2000076c
 80061f8:	2000076e 	.word	0x2000076e

080061fc <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80061fc:	b084      	sub	sp, #16
 80061fe:	b5b0      	push	{r4, r5, r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	2518      	movs	r5, #24
 8006206:	197c      	adds	r4, r7, r5
 8006208:	6020      	str	r0, [r4, #0]
 800620a:	6061      	str	r1, [r4, #4]
 800620c:	60a2      	str	r2, [r4, #8]
 800620e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006210:	197b      	adds	r3, r7, r5
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2bfe      	cmp	r3, #254	@ 0xfe
 8006216:	d100      	bne.n	800621a <ProcessCmd+0x1e>
 8006218:	e09c      	b.n	8006354 <ProcessCmd+0x158>
 800621a:	dd00      	ble.n	800621e <ProcessCmd+0x22>
 800621c:	e0bc      	b.n	8006398 <ProcessCmd+0x19c>
 800621e:	2b0c      	cmp	r3, #12
 8006220:	dc0a      	bgt.n	8006238 <ProcessCmd+0x3c>
 8006222:	2b00      	cmp	r3, #0
 8006224:	da00      	bge.n	8006228 <ProcessCmd+0x2c>
 8006226:	e0b7      	b.n	8006398 <ProcessCmd+0x19c>
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d900      	bls.n	800622e <ProcessCmd+0x32>
 800622c:	e0b4      	b.n	8006398 <ProcessCmd+0x19c>
 800622e:	009a      	lsls	r2, r3, #2
 8006230:	4b5d      	ldr	r3, [pc, #372]	@ (80063a8 <ProcessCmd+0x1ac>)
 8006232:	18d3      	adds	r3, r2, r3
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	469f      	mov	pc, r3
 8006238:	2bfd      	cmp	r3, #253	@ 0xfd
 800623a:	d100      	bne.n	800623e <ProcessCmd+0x42>
 800623c:	e084      	b.n	8006348 <ProcessCmd+0x14c>
            }
            break;
        }
    }

}
 800623e:	e0ab      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006240:	2118      	movs	r1, #24
 8006242:	187b      	adds	r3, r7, r1
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	001a      	movs	r2, r3
 8006248:	187b      	adds	r3, r7, r1
 800624a:	1c99      	adds	r1, r3, #2
 800624c:	4857      	ldr	r0, [pc, #348]	@ (80063ac <ProcessCmd+0x1b0>)
 800624e:	230c      	movs	r3, #12
 8006250:	f001 fc92 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 8006254:	e0a0      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006256:	2118      	movs	r1, #24
 8006258:	187b      	adds	r3, r7, r1
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	001a      	movs	r2, r3
 800625e:	187b      	adds	r3, r7, r1
 8006260:	1c99      	adds	r1, r3, #2
 8006262:	4853      	ldr	r0, [pc, #332]	@ (80063b0 <ProcessCmd+0x1b4>)
 8006264:	230c      	movs	r3, #12
 8006266:	f001 fc87 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 800626a:	e095      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800626c:	2118      	movs	r1, #24
 800626e:	187b      	adds	r3, r7, r1
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	001a      	movs	r2, r3
 8006274:	187b      	adds	r3, r7, r1
 8006276:	1c99      	adds	r1, r3, #2
 8006278:	484e      	ldr	r0, [pc, #312]	@ (80063b4 <ProcessCmd+0x1b8>)
 800627a:	230c      	movs	r3, #12
 800627c:	f001 fc7c 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 8006280:	e08a      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006282:	2118      	movs	r1, #24
 8006284:	187b      	adds	r3, r7, r1
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	001a      	movs	r2, r3
 800628a:	187b      	adds	r3, r7, r1
 800628c:	1c99      	adds	r1, r3, #2
 800628e:	484a      	ldr	r0, [pc, #296]	@ (80063b8 <ProcessCmd+0x1bc>)
 8006290:	230c      	movs	r3, #12
 8006292:	f001 fc71 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 8006296:	e07f      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006298:	2118      	movs	r1, #24
 800629a:	187b      	adds	r3, r7, r1
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	001a      	movs	r2, r3
 80062a0:	187b      	adds	r3, r7, r1
 80062a2:	1c99      	adds	r1, r3, #2
 80062a4:	4845      	ldr	r0, [pc, #276]	@ (80063bc <ProcessCmd+0x1c0>)
 80062a6:	230c      	movs	r3, #12
 80062a8:	f001 fc66 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 80062ac:	e074      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062ae:	2118      	movs	r1, #24
 80062b0:	187b      	adds	r3, r7, r1
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	001a      	movs	r2, r3
 80062b6:	187b      	adds	r3, r7, r1
 80062b8:	1c99      	adds	r1, r3, #2
 80062ba:	4841      	ldr	r0, [pc, #260]	@ (80063c0 <ProcessCmd+0x1c4>)
 80062bc:	230c      	movs	r3, #12
 80062be:	f001 fc5b 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 80062c2:	e069      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062c4:	2118      	movs	r1, #24
 80062c6:	187b      	adds	r3, r7, r1
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	001a      	movs	r2, r3
 80062cc:	187b      	adds	r3, r7, r1
 80062ce:	1c99      	adds	r1, r3, #2
 80062d0:	483c      	ldr	r0, [pc, #240]	@ (80063c4 <ProcessCmd+0x1c8>)
 80062d2:	230c      	movs	r3, #12
 80062d4:	f001 fc50 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 80062d8:	e05e      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80062da:	2118      	movs	r1, #24
 80062dc:	187b      	adds	r3, r7, r1
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	001a      	movs	r2, r3
 80062e2:	187b      	adds	r3, r7, r1
 80062e4:	1c99      	adds	r1, r3, #2
 80062e6:	4838      	ldr	r0, [pc, #224]	@ (80063c8 <ProcessCmd+0x1cc>)
 80062e8:	2320      	movs	r3, #32
 80062ea:	f001 fc45 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 80062ee:	e053      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062f0:	2118      	movs	r1, #24
 80062f2:	187b      	adds	r3, r7, r1
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	001a      	movs	r2, r3
 80062f8:	187b      	adds	r3, r7, r1
 80062fa:	1c99      	adds	r1, r3, #2
 80062fc:	4833      	ldr	r0, [pc, #204]	@ (80063cc <ProcessCmd+0x1d0>)
 80062fe:	230c      	movs	r3, #12
 8006300:	f001 fc3a 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 8006304:	e048      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006306:	2118      	movs	r1, #24
 8006308:	187b      	adds	r3, r7, r1
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	001a      	movs	r2, r3
 800630e:	187b      	adds	r3, r7, r1
 8006310:	1c99      	adds	r1, r3, #2
 8006312:	482f      	ldr	r0, [pc, #188]	@ (80063d0 <ProcessCmd+0x1d4>)
 8006314:	230c      	movs	r3, #12
 8006316:	f001 fc2f 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 800631a:	e03d      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800631c:	2118      	movs	r1, #24
 800631e:	187b      	adds	r3, r7, r1
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	001a      	movs	r2, r3
 8006324:	187b      	adds	r3, r7, r1
 8006326:	1c99      	adds	r1, r3, #2
 8006328:	482a      	ldr	r0, [pc, #168]	@ (80063d4 <ProcessCmd+0x1d8>)
 800632a:	230c      	movs	r3, #12
 800632c:	f001 fc24 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 8006330:	e032      	b.n	8006398 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006332:	2118      	movs	r1, #24
 8006334:	187b      	adds	r3, r7, r1
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	001a      	movs	r2, r3
 800633a:	187b      	adds	r3, r7, r1
 800633c:	1c99      	adds	r1, r3, #2
 800633e:	4826      	ldr	r0, [pc, #152]	@ (80063d8 <ProcessCmd+0x1dc>)
 8006340:	230c      	movs	r3, #12
 8006342:	f001 fc19 	bl	8007b78 <WriteUint8ArrayEepromSafe>
        break;
 8006346:	e027      	b.n	8006398 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006348:	4b18      	ldr	r3, [pc, #96]	@ (80063ac <ProcessCmd+0x1b0>)
 800634a:	21f8      	movs	r1, #248	@ 0xf8
 800634c:	0018      	movs	r0, r3
 800634e:	f001 fc58 	bl	8007c02 <ClearEEprom>
        break;
 8006352:	e021      	b.n	8006398 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006354:	2118      	movs	r1, #24
 8006356:	187b      	adds	r3, r7, r1
 8006358:	789b      	ldrb	r3, [r3, #2]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	b21a      	sxth	r2, r3
 800635e:	187b      	adds	r3, r7, r1
 8006360:	78db      	ldrb	r3, [r3, #3]
 8006362:	b21b      	sxth	r3, r3
 8006364:	4313      	orrs	r3, r2
 8006366:	b21a      	sxth	r2, r3
 8006368:	1dbb      	adds	r3, r7, #6
 800636a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800636c:	1dbb      	adds	r3, r7, #6
 800636e:	881a      	ldrh	r2, [r3, #0]
 8006370:	23c0      	movs	r3, #192	@ 0xc0
 8006372:	015b      	lsls	r3, r3, #5
 8006374:	429a      	cmp	r2, r3
 8006376:	d207      	bcs.n	8006388 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006378:	1dbb      	adds	r3, r7, #6
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	4a0b      	ldr	r2, [pc, #44]	@ (80063ac <ProcessCmd+0x1b0>)
 800637e:	0019      	movs	r1, r3
 8006380:	0010      	movs	r0, r2
 8006382:	f001 fc3e 	bl	8007c02 <ClearEEprom>
            break;
 8006386:	e006      	b.n	8006396 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006388:	23c0      	movs	r3, #192	@ 0xc0
 800638a:	015b      	lsls	r3, r3, #5
 800638c:	4a07      	ldr	r2, [pc, #28]	@ (80063ac <ProcessCmd+0x1b0>)
 800638e:	0019      	movs	r1, r3
 8006390:	0010      	movs	r0, r2
 8006392:	f001 fc36 	bl	8007c02 <ClearEEprom>
            break;
 8006396:	46c0      	nop			@ (mov r8, r8)
}
 8006398:	46c0      	nop			@ (mov r8, r8)
 800639a:	46bd      	mov	sp, r7
 800639c:	b002      	add	sp, #8
 800639e:	bcb0      	pop	{r4, r5, r7}
 80063a0:	bc08      	pop	{r3}
 80063a2:	b004      	add	sp, #16
 80063a4:	4718      	bx	r3
 80063a6:	46c0      	nop			@ (mov r8, r8)
 80063a8:	08026568 	.word	0x08026568
 80063ac:	08080000 	.word	0x08080000
 80063b0:	0808000c 	.word	0x0808000c
 80063b4:	08080018 	.word	0x08080018
 80063b8:	08080024 	.word	0x08080024
 80063bc:	08080030 	.word	0x08080030
 80063c0:	0808003c 	.word	0x0808003c
 80063c4:	08080048 	.word	0x08080048
 80063c8:	08080090 	.word	0x08080090
 80063cc:	08080078 	.word	0x08080078
 80063d0:	0808006c 	.word	0x0808006c
 80063d4:	08080060 	.word	0x08080060
 80063d8:	08080054 	.word	0x08080054

080063dc <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80063dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6039      	str	r1, [r7, #0]
 80063e4:	0011      	movs	r1, r2
 80063e6:	1dfb      	adds	r3, r7, #7
 80063e8:	1c02      	adds	r2, r0, #0
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	1dbb      	adds	r3, r7, #6
 80063ee:	1c0a      	adds	r2, r1, #0
 80063f0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80063f2:	2223      	movs	r2, #35	@ 0x23
 80063f4:	4b20      	ldr	r3, [pc, #128]	@ (8006478 <Create_Message+0x9c>)
 80063f6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80063f8:	4b1f      	ldr	r3, [pc, #124]	@ (8006478 <Create_Message+0x9c>)
 80063fa:	1dfa      	adds	r2, r7, #7
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8006400:	4b1d      	ldr	r3, [pc, #116]	@ (8006478 <Create_Message+0x9c>)
 8006402:	1dba      	adds	r2, r7, #6
 8006404:	7812      	ldrb	r2, [r2, #0]
 8006406:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8006408:	1dbb      	adds	r3, r7, #6
 800640a:	781a      	ldrb	r2, [r3, #0]
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	4b1b      	ldr	r3, [pc, #108]	@ (800647c <Create_Message+0xa0>)
 8006410:	0018      	movs	r0, r3
 8006412:	f01a fd97 	bl	8020f44 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8006416:	1dbb      	adds	r3, r7, #6
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	b29a      	uxth	r2, r3
 800641c:	250e      	movs	r5, #14
 800641e:	197b      	adds	r3, r7, r5
 8006420:	3203      	adds	r2, #3
 8006422:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006424:	260c      	movs	r6, #12
 8006426:	19bc      	adds	r4, r7, r6
 8006428:	197b      	adds	r3, r7, r5
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	4b12      	ldr	r3, [pc, #72]	@ (8006478 <Create_Message+0x9c>)
 800642e:	0011      	movs	r1, r2
 8006430:	0018      	movs	r0, r3
 8006432:	f000 f825 	bl	8006480 <CRC16_ARC>
 8006436:	0003      	movs	r3, r0
 8006438:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800643a:	0030      	movs	r0, r6
 800643c:	183b      	adds	r3, r7, r0
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	0a1b      	lsrs	r3, r3, #8
 8006442:	b29a      	uxth	r2, r3
 8006444:	197b      	adds	r3, r7, r5
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b2d1      	uxtb	r1, r2
 800644a:	4a0b      	ldr	r2, [pc, #44]	@ (8006478 <Create_Message+0x9c>)
 800644c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800644e:	197b      	adds	r3, r7, r5
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	3301      	adds	r3, #1
 8006454:	183a      	adds	r2, r7, r0
 8006456:	8812      	ldrh	r2, [r2, #0]
 8006458:	b2d1      	uxtb	r1, r2
 800645a:	4a07      	ldr	r2, [pc, #28]	@ (8006478 <Create_Message+0x9c>)
 800645c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800645e:	197b      	adds	r3, r7, r5
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	3302      	adds	r3, #2
 8006464:	b29a      	uxth	r2, r3
 8006466:	4b04      	ldr	r3, [pc, #16]	@ (8006478 <Create_Message+0x9c>)
 8006468:	0011      	movs	r1, r2
 800646a:	0018      	movs	r0, r3
 800646c:	f017 fa1a 	bl	801d8a4 <CDC_Transmit_FS>
}
 8006470:	46c0      	nop			@ (mov r8, r8)
 8006472:	46bd      	mov	sp, r7
 8006474:	b005      	add	sp, #20
 8006476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006478:	20000878 	.word	0x20000878
 800647c:	2000087b 	.word	0x2000087b

08006480 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	000a      	movs	r2, r1
 800648a:	1cbb      	adds	r3, r7, #2
 800648c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800648e:	2316      	movs	r3, #22
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	2200      	movs	r2, #0
 8006494:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	e02e      	b.n	80064fa <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	18d3      	adds	r3, r2, r3
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	0019      	movs	r1, r3
 80064a6:	2216      	movs	r2, #22
 80064a8:	18bb      	adds	r3, r7, r2
 80064aa:	18ba      	adds	r2, r7, r2
 80064ac:	8812      	ldrh	r2, [r2, #0]
 80064ae:	404a      	eors	r2, r1
 80064b0:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	e01a      	b.n	80064ee <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80064b8:	2116      	movs	r1, #22
 80064ba:	187b      	adds	r3, r7, r1
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	2201      	movs	r2, #1
 80064c0:	4013      	ands	r3, r2
 80064c2:	d00b      	beq.n	80064dc <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80064c4:	187b      	adds	r3, r7, r1
 80064c6:	187a      	adds	r2, r7, r1
 80064c8:	8812      	ldrh	r2, [r2, #0]
 80064ca:	0852      	lsrs	r2, r2, #1
 80064cc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80064ce:	187b      	adds	r3, r7, r1
 80064d0:	187a      	adds	r2, r7, r1
 80064d2:	8812      	ldrh	r2, [r2, #0]
 80064d4:	490f      	ldr	r1, [pc, #60]	@ (8006514 <CRC16_ARC+0x94>)
 80064d6:	404a      	eors	r2, r1
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	e005      	b.n	80064e8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80064dc:	2216      	movs	r2, #22
 80064de:	18bb      	adds	r3, r7, r2
 80064e0:	18ba      	adds	r2, r7, r2
 80064e2:	8812      	ldrh	r2, [r2, #0]
 80064e4:	0852      	lsrs	r2, r2, #1
 80064e6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b07      	cmp	r3, #7
 80064f2:	dde1      	ble.n	80064b8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	3301      	adds	r3, #1
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	1cbb      	adds	r3, r7, #2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	429a      	cmp	r2, r3
 8006502:	dbcb      	blt.n	800649c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8006504:	2316      	movs	r3, #22
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	881b      	ldrh	r3, [r3, #0]
}
 800650a:	0018      	movs	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	b006      	add	sp, #24
 8006510:	bd80      	pop	{r7, pc}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	ffffa001 	.word	0xffffa001

08006518 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8006518:	b40f      	push	{r0, r1, r2, r3}
 800651a:	b590      	push	{r4, r7, lr}
 800651c:	b0a9      	sub	sp, #164	@ 0xa4
 800651e:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8006520:	23ac      	movs	r3, #172	@ 0xac
 8006522:	2108      	movs	r1, #8
 8006524:	185b      	adds	r3, r3, r1
 8006526:	19db      	adds	r3, r3, r7
 8006528:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	23a8      	movs	r3, #168	@ 0xa8
 800652e:	185b      	adds	r3, r3, r1
 8006530:	19db      	adds	r3, r3, r7
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	2408      	movs	r4, #8
 8006536:	193b      	adds	r3, r7, r4
 8006538:	0018      	movs	r0, r3
 800653a:	f01a fb7b 	bl	8020c34 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 800653e:	193b      	adds	r3, r7, r4
 8006540:	0018      	movs	r0, r3
 8006542:	f7f9 fe13 	bl	800016c <strlen>
 8006546:	0003      	movs	r3, r0
 8006548:	b29a      	uxth	r2, r3
 800654a:	193b      	adds	r3, r7, r4
 800654c:	0011      	movs	r1, r2
 800654e:	0018      	movs	r0, r3
 8006550:	f017 f9a8 	bl	801d8a4 <CDC_Transmit_FS>
}
 8006554:	46c0      	nop			@ (mov r8, r8)
 8006556:	46bd      	mov	sp, r7
 8006558:	b029      	add	sp, #164	@ 0xa4
 800655a:	bc90      	pop	{r4, r7}
 800655c:	bc08      	pop	{r3}
 800655e:	b004      	add	sp, #16
 8006560:	4718      	bx	r3

08006562 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	000a      	movs	r2, r1
 800656c:	1cfb      	adds	r3, r7, #3
 800656e:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8006570:	1cfb      	adds	r3, r7, #3
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <PC_selectout+0x20>
    printf_USB(msg);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0018      	movs	r0, r3
 800657c:	f7ff ffcc 	bl	8006518 <printf_USB>
 8006580:	e003      	b.n	800658a <PC_selectout+0x28>
  }
  else {
    printf(msg);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0018      	movs	r0, r3
 8006586:	f01a fa2b 	bl	80209e0 <iprintf>
  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 800658a:	200a      	movs	r0, #10
 800658c:	f009 f98e 	bl	800f8ac <HAL_Delay>
}
 8006590:	46c0      	nop			@ (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}

08006598 <PC_show_Keys>:

void PC_show_Keys() {
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  static char msg[64];
  if(Check_USB_PowerOn()){
 800659c:	f000 fbb8 	bl	8006d10 <Check_USB_PowerOn>
 80065a0:	1e03      	subs	r3, r0, #0
 80065a2:	d003      	beq.n	80065ac <PC_show_Keys+0x14>
    usb_out = true;
 80065a4:	4bbb      	ldr	r3, [pc, #748]	@ (8006894 <PC_show_Keys+0x2fc>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <PC_show_Keys+0x1a>
  }
  else {
    usb_out = false;
 80065ac:	4bb9      	ldr	r3, [pc, #740]	@ (8006894 <PC_show_Keys+0x2fc>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80065b2:	4ab9      	ldr	r2, [pc, #740]	@ (8006898 <PC_show_Keys+0x300>)
 80065b4:	4bb9      	ldr	r3, [pc, #740]	@ (800689c <PC_show_Keys+0x304>)
 80065b6:	0011      	movs	r1, r2
 80065b8:	0018      	movs	r0, r3
 80065ba:	f01a fa81 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80065be:	4bb5      	ldr	r3, [pc, #724]	@ (8006894 <PC_show_Keys+0x2fc>)
 80065c0:	781a      	ldrb	r2, [r3, #0]
 80065c2:	4bb6      	ldr	r3, [pc, #728]	@ (800689c <PC_show_Keys+0x304>)
 80065c4:	0011      	movs	r1, r2
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7ff ffcb 	bl	8006562 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80065cc:	4bb4      	ldr	r3, [pc, #720]	@ (80068a0 <PC_show_Keys+0x308>)
 80065ce:	48b5      	ldr	r0, [pc, #724]	@ (80068a4 <PC_show_Keys+0x30c>)
 80065d0:	220c      	movs	r2, #12
 80065d2:	0019      	movs	r1, r3
 80065d4:	f001 faec 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80065d8:	4ab1      	ldr	r2, [pc, #708]	@ (80068a0 <PC_show_Keys+0x308>)
 80065da:	4bb3      	ldr	r3, [pc, #716]	@ (80068a8 <PC_show_Keys+0x310>)
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f7fd fb9c 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "Box id ----------------------: %s\r\n", Buffer);
 80065e4:	4ab0      	ldr	r2, [pc, #704]	@ (80068a8 <PC_show_Keys+0x310>)
 80065e6:	49b1      	ldr	r1, [pc, #708]	@ (80068ac <PC_show_Keys+0x314>)
 80065e8:	4bac      	ldr	r3, [pc, #688]	@ (800689c <PC_show_Keys+0x304>)
 80065ea:	0018      	movs	r0, r3
 80065ec:	f01a fa68 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80065f0:	4ba8      	ldr	r3, [pc, #672]	@ (8006894 <PC_show_Keys+0x2fc>)
 80065f2:	781a      	ldrb	r2, [r3, #0]
 80065f4:	4ba9      	ldr	r3, [pc, #676]	@ (800689c <PC_show_Keys+0x304>)
 80065f6:	0011      	movs	r1, r2
 80065f8:	0018      	movs	r0, r3
 80065fa:	f7ff ffb2 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80065fe:	4bac      	ldr	r3, [pc, #688]	@ (80068b0 <PC_show_Keys+0x318>)
 8006600:	48ac      	ldr	r0, [pc, #688]	@ (80068b4 <PC_show_Keys+0x31c>)
 8006602:	220c      	movs	r2, #12
 8006604:	0019      	movs	r1, r3
 8006606:	f001 fad3 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 800660a:	4aa9      	ldr	r2, [pc, #676]	@ (80068b0 <PC_show_Keys+0x318>)
 800660c:	4ba6      	ldr	r3, [pc, #664]	@ (80068a8 <PC_show_Keys+0x310>)
 800660e:	0011      	movs	r1, r2
 8006610:	0018      	movs	r0, r3
 8006612:	f7fd fb83 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "1 - Temperature sensor id: --: %s\r\n", Buffer);
 8006616:	4aa4      	ldr	r2, [pc, #656]	@ (80068a8 <PC_show_Keys+0x310>)
 8006618:	49a7      	ldr	r1, [pc, #668]	@ (80068b8 <PC_show_Keys+0x320>)
 800661a:	4ba0      	ldr	r3, [pc, #640]	@ (800689c <PC_show_Keys+0x304>)
 800661c:	0018      	movs	r0, r3
 800661e:	f01a fa4f 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006622:	4b9c      	ldr	r3, [pc, #624]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	4b9d      	ldr	r3, [pc, #628]	@ (800689c <PC_show_Keys+0x304>)
 8006628:	0011      	movs	r1, r2
 800662a:	0018      	movs	r0, r3
 800662c:	f7ff ff99 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8006630:	4ba2      	ldr	r3, [pc, #648]	@ (80068bc <PC_show_Keys+0x324>)
 8006632:	48a3      	ldr	r0, [pc, #652]	@ (80068c0 <PC_show_Keys+0x328>)
 8006634:	220c      	movs	r2, #12
 8006636:	0019      	movs	r1, r3
 8006638:	f001 faba 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 800663c:	4a9f      	ldr	r2, [pc, #636]	@ (80068bc <PC_show_Keys+0x324>)
 800663e:	4b9a      	ldr	r3, [pc, #616]	@ (80068a8 <PC_show_Keys+0x310>)
 8006640:	0011      	movs	r1, r2
 8006642:	0018      	movs	r0, r3
 8006644:	f7fd fb6a 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "2 - Humidity sensor id ------: %s\r\n", Buffer);
 8006648:	4a97      	ldr	r2, [pc, #604]	@ (80068a8 <PC_show_Keys+0x310>)
 800664a:	499e      	ldr	r1, [pc, #632]	@ (80068c4 <PC_show_Keys+0x32c>)
 800664c:	4b93      	ldr	r3, [pc, #588]	@ (800689c <PC_show_Keys+0x304>)
 800664e:	0018      	movs	r0, r3
 8006650:	f01a fa36 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006654:	4b8f      	ldr	r3, [pc, #572]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006656:	781a      	ldrb	r2, [r3, #0]
 8006658:	4b90      	ldr	r3, [pc, #576]	@ (800689c <PC_show_Keys+0x304>)
 800665a:	0011      	movs	r1, r2
 800665c:	0018      	movs	r0, r3
 800665e:	f7ff ff80 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8006662:	4b99      	ldr	r3, [pc, #612]	@ (80068c8 <PC_show_Keys+0x330>)
 8006664:	4899      	ldr	r0, [pc, #612]	@ (80068cc <PC_show_Keys+0x334>)
 8006666:	220c      	movs	r2, #12
 8006668:	0019      	movs	r1, r3
 800666a:	f001 faa1 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 800666e:	4a96      	ldr	r2, [pc, #600]	@ (80068c8 <PC_show_Keys+0x330>)
 8006670:	4b8d      	ldr	r3, [pc, #564]	@ (80068a8 <PC_show_Keys+0x310>)
 8006672:	0011      	movs	r1, r2
 8006674:	0018      	movs	r0, r3
 8006676:	f7fd fb51 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "3 - NOx sensor id -----------: %s\r\n", Buffer);
 800667a:	4a8b      	ldr	r2, [pc, #556]	@ (80068a8 <PC_show_Keys+0x310>)
 800667c:	4994      	ldr	r1, [pc, #592]	@ (80068d0 <PC_show_Keys+0x338>)
 800667e:	4b87      	ldr	r3, [pc, #540]	@ (800689c <PC_show_Keys+0x304>)
 8006680:	0018      	movs	r0, r3
 8006682:	f01a fa1d 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006686:	4b83      	ldr	r3, [pc, #524]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006688:	781a      	ldrb	r2, [r3, #0]
 800668a:	4b84      	ldr	r3, [pc, #528]	@ (800689c <PC_show_Keys+0x304>)
 800668c:	0011      	movs	r1, r2
 800668e:	0018      	movs	r0, r3
 8006690:	f7ff ff67 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8006694:	4b8f      	ldr	r3, [pc, #572]	@ (80068d4 <PC_show_Keys+0x33c>)
 8006696:	4890      	ldr	r0, [pc, #576]	@ (80068d8 <PC_show_Keys+0x340>)
 8006698:	220c      	movs	r2, #12
 800669a:	0019      	movs	r1, r3
 800669c:	f001 fa88 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 80066a0:	4a8c      	ldr	r2, [pc, #560]	@ (80068d4 <PC_show_Keys+0x33c>)
 80066a2:	4b81      	ldr	r3, [pc, #516]	@ (80068a8 <PC_show_Keys+0x310>)
 80066a4:	0011      	movs	r1, r2
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7fd fb38 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "4 - VOC sensor id -----------: %s\r\n", Buffer);
 80066ac:	4a7e      	ldr	r2, [pc, #504]	@ (80068a8 <PC_show_Keys+0x310>)
 80066ae:	498b      	ldr	r1, [pc, #556]	@ (80068dc <PC_show_Keys+0x344>)
 80066b0:	4b7a      	ldr	r3, [pc, #488]	@ (800689c <PC_show_Keys+0x304>)
 80066b2:	0018      	movs	r0, r3
 80066b4:	f01a fa04 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80066b8:	4b76      	ldr	r3, [pc, #472]	@ (8006894 <PC_show_Keys+0x2fc>)
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	4b77      	ldr	r3, [pc, #476]	@ (800689c <PC_show_Keys+0x304>)
 80066be:	0011      	movs	r1, r2
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7ff ff4e 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(dBaConfigAddr, soundConfig, IdSize);
 80066c6:	4b86      	ldr	r3, [pc, #536]	@ (80068e0 <PC_show_Keys+0x348>)
 80066c8:	4886      	ldr	r0, [pc, #536]	@ (80068e4 <PC_show_Keys+0x34c>)
 80066ca:	220c      	movs	r2, #12
 80066cc:	0019      	movs	r1, r3
 80066ce:	f001 fa6f 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80066d2:	4a83      	ldr	r2, [pc, #524]	@ (80068e0 <PC_show_Keys+0x348>)
 80066d4:	4b74      	ldr	r3, [pc, #464]	@ (80068a8 <PC_show_Keys+0x310>)
 80066d6:	0011      	movs	r1, r2
 80066d8:	0018      	movs	r0, r3
 80066da:	f7fd fb1f 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "5 is former dBa unused\r\n");
 80066de:	4a82      	ldr	r2, [pc, #520]	@ (80068e8 <PC_show_Keys+0x350>)
 80066e0:	4b6e      	ldr	r3, [pc, #440]	@ (800689c <PC_show_Keys+0x304>)
 80066e2:	0011      	movs	r1, r2
 80066e4:	0018      	movs	r0, r3
 80066e6:	f01a f9eb 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80066ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006894 <PC_show_Keys+0x2fc>)
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	4b6b      	ldr	r3, [pc, #428]	@ (800689c <PC_show_Keys+0x304>)
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7ff ff35 	bl	8006562 <PC_selectout>
  sprintf(msg, "5 - Air pressure sensor id --: %s\r\n", Buffer);
 80066f8:	4a6b      	ldr	r2, [pc, #428]	@ (80068a8 <PC_show_Keys+0x310>)
 80066fa:	497c      	ldr	r1, [pc, #496]	@ (80068ec <PC_show_Keys+0x354>)
 80066fc:	4b67      	ldr	r3, [pc, #412]	@ (800689c <PC_show_Keys+0x304>)
 80066fe:	0018      	movs	r0, r3
 8006700:	f01a f9de 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006704:	4b63      	ldr	r3, [pc, #396]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	4b64      	ldr	r3, [pc, #400]	@ (800689c <PC_show_Keys+0x304>)
 800670a:	0011      	movs	r1, r2
 800670c:	0018      	movs	r0, r3
 800670e:	f7ff ff28 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8006712:	4b73      	ldr	r3, [pc, #460]	@ (80068e0 <PC_show_Keys+0x348>)
 8006714:	4876      	ldr	r0, [pc, #472]	@ (80068f0 <PC_show_Keys+0x358>)
 8006716:	220c      	movs	r2, #12
 8006718:	0019      	movs	r1, r3
 800671a:	f001 fa49 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 800671e:	4a70      	ldr	r2, [pc, #448]	@ (80068e0 <PC_show_Keys+0x348>)
 8006720:	4b61      	ldr	r3, [pc, #388]	@ (80068a8 <PC_show_Keys+0x310>)
 8006722:	0011      	movs	r1, r2
 8006724:	0018      	movs	r0, r3
 8006726:	f7fd faf9 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "6 is former dBc\r\n");
 800672a:	4a72      	ldr	r2, [pc, #456]	@ (80068f4 <PC_show_Keys+0x35c>)
 800672c:	4b5b      	ldr	r3, [pc, #364]	@ (800689c <PC_show_Keys+0x304>)
 800672e:	0011      	movs	r1, r2
 8006730:	0018      	movs	r0, r3
 8006732:	f01a f9c5 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006736:	4b57      	ldr	r3, [pc, #348]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	4b58      	ldr	r3, [pc, #352]	@ (800689c <PC_show_Keys+0x304>)
 800673c:	0011      	movs	r1, r2
 800673e:	0018      	movs	r0, r3
 8006740:	f7ff ff0f 	bl	8006562 <PC_selectout>
  sprintf(msg, "6 - Sound dBA sensor id -----: %s\r\n", Buffer);
 8006744:	4a58      	ldr	r2, [pc, #352]	@ (80068a8 <PC_show_Keys+0x310>)
 8006746:	496c      	ldr	r1, [pc, #432]	@ (80068f8 <PC_show_Keys+0x360>)
 8006748:	4b54      	ldr	r3, [pc, #336]	@ (800689c <PC_show_Keys+0x304>)
 800674a:	0018      	movs	r0, r3
 800674c:	f01a f9b8 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006750:	4b50      	ldr	r3, [pc, #320]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006752:	781a      	ldrb	r2, [r3, #0]
 8006754:	4b51      	ldr	r3, [pc, #324]	@ (800689c <PC_show_Keys+0x304>)
 8006756:	0011      	movs	r1, r2
 8006758:	0018      	movs	r0, r3
 800675a:	f7ff ff02 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800675e:	4b67      	ldr	r3, [pc, #412]	@ (80068fc <PC_show_Keys+0x364>)
 8006760:	4867      	ldr	r0, [pc, #412]	@ (8006900 <PC_show_Keys+0x368>)
 8006762:	2220      	movs	r2, #32
 8006764:	0019      	movs	r1, r3
 8006766:	f001 fa23 	bl	8007bb0 <ReadUint8ArrayEEprom>
  sprintf(msg, "7 - Stored name -------------: ");
 800676a:	4a66      	ldr	r2, [pc, #408]	@ (8006904 <PC_show_Keys+0x36c>)
 800676c:	4b4b      	ldr	r3, [pc, #300]	@ (800689c <PC_show_Keys+0x304>)
 800676e:	0011      	movs	r1, r2
 8006770:	0018      	movs	r0, r3
 8006772:	f01a f9a5 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006776:	4b47      	ldr	r3, [pc, #284]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006778:	781a      	ldrb	r2, [r3, #0]
 800677a:	4b48      	ldr	r3, [pc, #288]	@ (800689c <PC_show_Keys+0x304>)
 800677c:	0011      	movs	r1, r2
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff feef 	bl	8006562 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);
 8006784:	4a5d      	ldr	r2, [pc, #372]	@ (80068fc <PC_show_Keys+0x364>)
 8006786:	4960      	ldr	r1, [pc, #384]	@ (8006908 <PC_show_Keys+0x370>)
 8006788:	4b44      	ldr	r3, [pc, #272]	@ (800689c <PC_show_Keys+0x304>)
 800678a:	0018      	movs	r0, r3
 800678c:	f01a f998 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006790:	4b40      	ldr	r3, [pc, #256]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006792:	781a      	ldrb	r2, [r3, #0]
 8006794:	4b41      	ldr	r3, [pc, #260]	@ (800689c <PC_show_Keys+0x304>)
 8006796:	0011      	movs	r1, r2
 8006798:	0018      	movs	r0, r3
 800679a:	f7ff fee2 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 800679e:	4b5b      	ldr	r3, [pc, #364]	@ (800690c <PC_show_Keys+0x374>)
 80067a0:	485b      	ldr	r0, [pc, #364]	@ (8006910 <PC_show_Keys+0x378>)
 80067a2:	220c      	movs	r2, #12
 80067a4:	0019      	movs	r1, r3
 80067a6:	f001 fa03 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80067aa:	4a58      	ldr	r2, [pc, #352]	@ (800690c <PC_show_Keys+0x374>)
 80067ac:	4b3e      	ldr	r3, [pc, #248]	@ (80068a8 <PC_show_Keys+0x310>)
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fd fab3 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "8 - Solar voltage sensor id -: %s\r\n", Buffer);
 80067b6:	4a3c      	ldr	r2, [pc, #240]	@ (80068a8 <PC_show_Keys+0x310>)
 80067b8:	4956      	ldr	r1, [pc, #344]	@ (8006914 <PC_show_Keys+0x37c>)
 80067ba:	4b38      	ldr	r3, [pc, #224]	@ (800689c <PC_show_Keys+0x304>)
 80067bc:	0018      	movs	r0, r3
 80067be:	f01a f97f 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067c2:	4b34      	ldr	r3, [pc, #208]	@ (8006894 <PC_show_Keys+0x2fc>)
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	4b35      	ldr	r3, [pc, #212]	@ (800689c <PC_show_Keys+0x304>)
 80067c8:	0011      	movs	r1, r2
 80067ca:	0018      	movs	r0, r3
 80067cc:	f7ff fec9 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80067d0:	4b51      	ldr	r3, [pc, #324]	@ (8006918 <PC_show_Keys+0x380>)
 80067d2:	4852      	ldr	r0, [pc, #328]	@ (800691c <PC_show_Keys+0x384>)
 80067d4:	220c      	movs	r2, #12
 80067d6:	0019      	movs	r1, r3
 80067d8:	f001 f9ea 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80067dc:	4a4e      	ldr	r2, [pc, #312]	@ (8006918 <PC_show_Keys+0x380>)
 80067de:	4b32      	ldr	r3, [pc, #200]	@ (80068a8 <PC_show_Keys+0x310>)
 80067e0:	0011      	movs	r1, r2
 80067e2:	0018      	movs	r0, r3
 80067e4:	f7fd fa9a 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "9 - Battery voltage sensor id: %s\r\n", Buffer);
 80067e8:	4a2f      	ldr	r2, [pc, #188]	@ (80068a8 <PC_show_Keys+0x310>)
 80067ea:	494d      	ldr	r1, [pc, #308]	@ (8006920 <PC_show_Keys+0x388>)
 80067ec:	4b2b      	ldr	r3, [pc, #172]	@ (800689c <PC_show_Keys+0x304>)
 80067ee:	0018      	movs	r0, r3
 80067f0:	f01a f966 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067f4:	4b27      	ldr	r3, [pc, #156]	@ (8006894 <PC_show_Keys+0x2fc>)
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	4b28      	ldr	r3, [pc, #160]	@ (800689c <PC_show_Keys+0x304>)
 80067fa:	0011      	movs	r1, r2
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff feb0 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8006802:	4b48      	ldr	r3, [pc, #288]	@ (8006924 <PC_show_Keys+0x38c>)
 8006804:	4848      	ldr	r0, [pc, #288]	@ (8006928 <PC_show_Keys+0x390>)
 8006806:	220c      	movs	r2, #12
 8006808:	0019      	movs	r1, r3
 800680a:	f001 f9d1 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 800680e:	4a45      	ldr	r2, [pc, #276]	@ (8006924 <PC_show_Keys+0x38c>)
 8006810:	4b25      	ldr	r3, [pc, #148]	@ (80068a8 <PC_show_Keys+0x310>)
 8006812:	0011      	movs	r1, r2
 8006814:	0018      	movs	r0, r3
 8006816:	f7fd fa81 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, ": - PM10 sensor id ----------: %s\r\n", Buffer);
 800681a:	4a23      	ldr	r2, [pc, #140]	@ (80068a8 <PC_show_Keys+0x310>)
 800681c:	4943      	ldr	r1, [pc, #268]	@ (800692c <PC_show_Keys+0x394>)
 800681e:	4b1f      	ldr	r3, [pc, #124]	@ (800689c <PC_show_Keys+0x304>)
 8006820:	0018      	movs	r0, r3
 8006822:	f01a f94d 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006826:	4b1b      	ldr	r3, [pc, #108]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	4b1c      	ldr	r3, [pc, #112]	@ (800689c <PC_show_Keys+0x304>)
 800682c:	0011      	movs	r1, r2
 800682e:	0018      	movs	r0, r3
 8006830:	f7ff fe97 	bl	8006562 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8006834:	4b3e      	ldr	r3, [pc, #248]	@ (8006930 <PC_show_Keys+0x398>)
 8006836:	483f      	ldr	r0, [pc, #252]	@ (8006934 <PC_show_Keys+0x39c>)
 8006838:	220c      	movs	r2, #12
 800683a:	0019      	movs	r1, r3
 800683c:	f001 f9b8 	bl	8007bb0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8006840:	4a3b      	ldr	r2, [pc, #236]	@ (8006930 <PC_show_Keys+0x398>)
 8006842:	4b19      	ldr	r3, [pc, #100]	@ (80068a8 <PC_show_Keys+0x310>)
 8006844:	0011      	movs	r1, r2
 8006846:	0018      	movs	r0, r3
 8006848:	f7fd fa68 	bl	8003d1c <uint8ArrayToString>
  sprintf(msg, "; - PM2p5 sensor id ---------: %s\r\n", Buffer);
 800684c:	4a16      	ldr	r2, [pc, #88]	@ (80068a8 <PC_show_Keys+0x310>)
 800684e:	493a      	ldr	r1, [pc, #232]	@ (8006938 <PC_show_Keys+0x3a0>)
 8006850:	4b12      	ldr	r3, [pc, #72]	@ (800689c <PC_show_Keys+0x304>)
 8006852:	0018      	movs	r0, r3
 8006854:	f01a f934 	bl	8020ac0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006858:	4b0e      	ldr	r3, [pc, #56]	@ (8006894 <PC_show_Keys+0x2fc>)
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	4b0f      	ldr	r3, [pc, #60]	@ (800689c <PC_show_Keys+0x304>)
 800685e:	0011      	movs	r1, r2
 8006860:	0018      	movs	r0, r3
 8006862:	f7ff fe7e 	bl	8006562 <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 8006866:	4b35      	ldr	r3, [pc, #212]	@ (800693c <PC_show_Keys+0x3a4>)
 8006868:	0018      	movs	r0, r3
 800686a:	f7ff fe55 	bl	8006518 <printf_USB>

  printf_USB("Command example for air pressure => #5,6a\r\n");
 800686e:	4b34      	ldr	r3, [pc, #208]	@ (8006940 <PC_show_Keys+0x3a8>)
 8006870:	0018      	movs	r0, r3
 8006872:	f7ff fe51 	bl	8006518 <printf_USB>

  if (!usb_out) {
 8006876:	4b07      	ldr	r3, [pc, #28]	@ (8006894 <PC_show_Keys+0x2fc>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2201      	movs	r2, #1
 800687c:	4053      	eors	r3, r2
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <PC_show_Keys+0x2f4>
    printf("A key can only be changed via USB input.\r\n");
 8006884:	4b2f      	ldr	r3, [pc, #188]	@ (8006944 <PC_show_Keys+0x3ac>)
 8006886:	0018      	movs	r0, r3
 8006888:	f01a f910 	bl	8020aac <puts>
  }
}
 800688c:	46c0      	nop			@ (mov r8, r8)
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	2000097d 	.word	0x2000097d
 8006898:	08024a8c 	.word	0x08024a8c
 800689c:	20000980 	.word	0x20000980
 80068a0:	200009c0 	.word	0x200009c0
 80068a4:	08080000 	.word	0x08080000
 80068a8:	200009cc 	.word	0x200009cc
 80068ac:	08024aa8 	.word	0x08024aa8
 80068b0:	200009e8 	.word	0x200009e8
 80068b4:	0808000c 	.word	0x0808000c
 80068b8:	08024acc 	.word	0x08024acc
 80068bc:	200009f4 	.word	0x200009f4
 80068c0:	08080018 	.word	0x08080018
 80068c4:	08024af0 	.word	0x08024af0
 80068c8:	20000a00 	.word	0x20000a00
 80068cc:	08080024 	.word	0x08080024
 80068d0:	08024b14 	.word	0x08024b14
 80068d4:	20000a0c 	.word	0x20000a0c
 80068d8:	08080030 	.word	0x08080030
 80068dc:	08024b38 	.word	0x08024b38
 80068e0:	20000a18 	.word	0x20000a18
 80068e4:	0808003c 	.word	0x0808003c
 80068e8:	08024b5c 	.word	0x08024b5c
 80068ec:	08024b78 	.word	0x08024b78
 80068f0:	08080048 	.word	0x08080048
 80068f4:	08024b9c 	.word	0x08024b9c
 80068f8:	08024bb0 	.word	0x08024bb0
 80068fc:	20000a24 	.word	0x20000a24
 8006900:	08080090 	.word	0x08080090
 8006904:	08024bd4 	.word	0x08024bd4
 8006908:	08024bf4 	.word	0x08024bf4
 800690c:	20000a44 	.word	0x20000a44
 8006910:	08080078 	.word	0x08080078
 8006914:	08024bfc 	.word	0x08024bfc
 8006918:	20000a50 	.word	0x20000a50
 800691c:	0808006c 	.word	0x0808006c
 8006920:	08024c20 	.word	0x08024c20
 8006924:	20000a5c 	.word	0x20000a5c
 8006928:	08080060 	.word	0x08080060
 800692c:	08024c44 	.word	0x08024c44
 8006930:	20000a68 	.word	0x20000a68
 8006934:	08080054 	.word	0x08080054
 8006938:	08024c68 	.word	0x08024c68
 800693c:	08024c8c 	.word	0x08024c8c
 8006940:	08024cbc 	.word	0x08024cbc
 8006944:	08024ce8 	.word	0x08024ce8

08006948 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b0c5      	sub	sp, #276	@ 0x114
 800694c:	af3e      	add	r7, sp, #248	@ 0xf8
 800694e:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  uint32_t length = GetUsbRxDataSize();
 8006950:	f017 f802 	bl	801d958 <GetUsbRxDataSize>
 8006954:	0003      	movs	r3, r0
 8006956:	613b      	str	r3, [r7, #16]
  static char Buffer[25];
  if (length > 5) {  //#2,34
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b05      	cmp	r3, #5
 800695c:	d800      	bhi.n	8006960 <Process_USB_input+0x18>
 800695e:	e0f1      	b.n	8006b44 <Process_USB_input+0x1fc>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4b84      	ldr	r3, [pc, #528]	@ (8006b74 <Process_USB_input+0x22c>)
 8006964:	0011      	movs	r1, r2
 8006966:	0018      	movs	r0, r3
 8006968:	f7ff fdd6 	bl	8006518 <printf_USB>
    uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);  // zoek op #
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2123      	movs	r1, #35	@ 0x23
 8006970:	0018      	movs	r0, r3
 8006972:	f01a fa13 	bl	8020d9c <strchr>
 8006976:	0003      	movs	r3, r0
 8006978:	60fb      	str	r3, [r7, #12]
    if(message != NULL) {
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d100      	bne.n	8006982 <Process_USB_input+0x3a>
 8006980:	e0c6      	b.n	8006b10 <Process_USB_input+0x1c8>
      received.Command = (message[1] & 0x0F);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	220f      	movs	r2, #15
 800698a:	4013      	ands	r3, r2
 800698c:	b2da      	uxtb	r2, r3
 800698e:	4b7a      	ldr	r3, [pc, #488]	@ (8006b78 <Process_USB_input+0x230>)
 8006990:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3302      	adds	r3, #2
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b2c      	cmp	r3, #44	@ 0x2c
 800699a:	d000      	beq.n	800699e <Process_USB_input+0x56>
 800699c:	e0b1      	b.n	8006b02 <Process_USB_input+0x1ba>
        for (uint8_t i=3; i < 5; i++) {
 800699e:	2317      	movs	r3, #23
 80069a0:	18fb      	adds	r3, r7, r3
 80069a2:	2203      	movs	r2, #3
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	e061      	b.n	8006a6c <Process_USB_input+0x124>
          if (isxdigit(message[i])) {
 80069a8:	2117      	movs	r1, #23
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	18d3      	adds	r3, r2, r3
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	4b71      	ldr	r3, [pc, #452]	@ (8006b7c <Process_USB_input+0x234>)
 80069b8:	18d3      	adds	r3, r2, r3
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	001a      	movs	r2, r3
 80069be:	2344      	movs	r3, #68	@ 0x44
 80069c0:	4013      	ands	r3, r2
 80069c2:	d03f      	beq.n	8006a44 <Process_USB_input+0xfc>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 80069c4:	4b6e      	ldr	r3, [pc, #440]	@ (8006b80 <Process_USB_input+0x238>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	b25a      	sxtb	r2, r3
 80069cc:	0008      	movs	r0, r1
 80069ce:	187b      	adds	r3, r7, r1
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	18cb      	adds	r3, r1, r3
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	1c59      	adds	r1, r3, #1
 80069da:	4b68      	ldr	r3, [pc, #416]	@ (8006b7c <Process_USB_input+0x234>)
 80069dc:	18cb      	adds	r3, r1, r3
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	0019      	movs	r1, r3
 80069e2:	2304      	movs	r3, #4
 80069e4:	400b      	ands	r3, r1
 80069e6:	d008      	beq.n	80069fa <Process_USB_input+0xb2>
 80069e8:	183b      	adds	r3, r7, r0
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	68f9      	ldr	r1, [r7, #12]
 80069ee:	18cb      	adds	r3, r1, r3
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	3b30      	subs	r3, #48	@ 0x30
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	b25b      	sxtb	r3, r3
 80069f8:	e01e      	b.n	8006a38 <Process_USB_input+0xf0>
 80069fa:	2317      	movs	r3, #23
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	68f9      	ldr	r1, [r7, #12]
 8006a02:	18c9      	adds	r1, r1, r3
 8006a04:	200b      	movs	r0, #11
 8006a06:	183b      	adds	r3, r7, r0
 8006a08:	7809      	ldrb	r1, [r1, #0]
 8006a0a:	7019      	strb	r1, [r3, #0]
 8006a0c:	183b      	adds	r3, r7, r0
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	1c59      	adds	r1, r3, #1
 8006a12:	4b5a      	ldr	r3, [pc, #360]	@ (8006b7c <Process_USB_input+0x234>)
 8006a14:	18cb      	adds	r3, r1, r3
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	0019      	movs	r1, r3
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d103      	bne.n	8006a2a <Process_USB_input+0xe2>
 8006a22:	183b      	adds	r3, r7, r0
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	3b20      	subs	r3, #32
 8006a28:	e002      	b.n	8006a30 <Process_USB_input+0xe8>
 8006a2a:	230b      	movs	r3, #11
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	3b37      	subs	r3, #55	@ 0x37
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	b25b      	sxtb	r3, r3
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	b25b      	sxtb	r3, r3
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	4b50      	ldr	r3, [pc, #320]	@ (8006b80 <Process_USB_input+0x238>)
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e00d      	b.n	8006a60 <Process_USB_input+0x118>
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c'\r\n", message[i]);
 8006a44:	2317      	movs	r3, #23
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	18d3      	adds	r3, r2, r3
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	001a      	movs	r2, r3
 8006a52:	4b4c      	ldr	r3, [pc, #304]	@ (8006b84 <Process_USB_input+0x23c>)
 8006a54:	0011      	movs	r1, r2
 8006a56:	0018      	movs	r0, r3
 8006a58:	f7ff fd5e 	bl	8006518 <printf_USB>
            return false; // Of een andere foutwaarde
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e084      	b.n	8006b6a <Process_USB_input+0x222>
        for (uint8_t i=3; i < 5; i++) {
 8006a60:	2117      	movs	r1, #23
 8006a62:	187b      	adds	r3, r7, r1
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	187b      	adds	r3, r7, r1
 8006a68:	3201      	adds	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	2317      	movs	r3, #23
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d998      	bls.n	80069a8 <Process_USB_input+0x60>
          }
        }
        ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006a76:	4b44      	ldr	r3, [pc, #272]	@ (8006b88 <Process_USB_input+0x240>)
 8006a78:	4844      	ldr	r0, [pc, #272]	@ (8006b8c <Process_USB_input+0x244>)
 8006a7a:	220c      	movs	r2, #12
 8006a7c:	0019      	movs	r1, r3
 8006a7e:	f001 f897 	bl	8007bb0 <ReadUint8ArrayEEprom>
        boxConfig[11] = result; //overwrite the last byte
 8006a82:	4b3f      	ldr	r3, [pc, #252]	@ (8006b80 <Process_USB_input+0x238>)
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	4b40      	ldr	r3, [pc, #256]	@ (8006b88 <Process_USB_input+0x240>)
 8006a88:	72da      	strb	r2, [r3, #11]
        memcpy(received.Payload, boxConfig, IdSize);
 8006a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8006b78 <Process_USB_input+0x230>)
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	493e      	ldr	r1, [pc, #248]	@ (8006b88 <Process_USB_input+0x240>)
 8006a90:	189b      	adds	r3, r3, r2
 8006a92:	220c      	movs	r2, #12
 8006a94:	0018      	movs	r0, r3
 8006a96:	f01a fa55 	bl	8020f44 <memcpy>
        received.PayloadLength = IdSize;
 8006a9a:	4b37      	ldr	r3, [pc, #220]	@ (8006b78 <Process_USB_input+0x230>)
 8006a9c:	220c      	movs	r2, #12
 8006a9e:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8006aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8006b90 <Process_USB_input+0x248>)
 8006aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8006b94 <Process_USB_input+0x24c>)
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f7fd f938 	bl	8003d1c <uint8ArrayToString>
        ProcessCmd(received);
 8006aac:	4c32      	ldr	r4, [pc, #200]	@ (8006b78 <Process_USB_input+0x230>)
 8006aae:	466b      	mov	r3, sp
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	0023      	movs	r3, r4
 8006ab4:	3310      	adds	r3, #16
 8006ab6:	22f4      	movs	r2, #244	@ 0xf4
 8006ab8:	0019      	movs	r1, r3
 8006aba:	f01a fa43 	bl	8020f44 <memcpy>
 8006abe:	6820      	ldr	r0, [r4, #0]
 8006ac0:	6861      	ldr	r1, [r4, #4]
 8006ac2:	68a2      	ldr	r2, [r4, #8]
 8006ac4:	68e3      	ldr	r3, [r4, #12]
 8006ac6:	f7ff fb99 	bl	80061fc <ProcessCmd>
        ResetUsbRxDataSize();
 8006aca:	f016 ff2d 	bl	801d928 <ResetUsbRxDataSize>
        PC_show_Keys();
 8006ace:	f7ff fd63 	bl	8006598 <PC_show_Keys>
        for (uint8_t i=0; i < 8; i++) {
 8006ad2:	2316      	movs	r3, #22
 8006ad4:	18fb      	adds	r3, r7, r3
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e00b      	b.n	8006af4 <Process_USB_input+0x1ac>
          data[i] = '\0';
 8006adc:	2116      	movs	r1, #22
 8006ade:	187b      	adds	r3, r7, r1
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	18d3      	adds	r3, r2, r3
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 8; i++) {
 8006aea:	187b      	adds	r3, r7, r1
 8006aec:	781a      	ldrb	r2, [r3, #0]
 8006aee:	187b      	adds	r3, r7, r1
 8006af0:	3201      	adds	r2, #1
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	2316      	movs	r3, #22
 8006af6:	18fb      	adds	r3, r7, r3
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b07      	cmp	r3, #7
 8006afc:	d9ee      	bls.n	8006adc <Process_USB_input+0x194>
        }
        return true;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e033      	b.n	8006b6a <Process_USB_input+0x222>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8006b02:	4b25      	ldr	r3, [pc, #148]	@ (8006b98 <Process_USB_input+0x250>)
 8006b04:	0018      	movs	r0, r3
 8006b06:	f7ff fd07 	bl	8006518 <printf_USB>
        ResetUsbRxDataSize();
 8006b0a:	f016 ff0d 	bl	801d928 <ResetUsbRxDataSize>
 8006b0e:	e003      	b.n	8006b18 <Process_USB_input+0x1d0>
      }
    }
    else {
      PC_show_Keys();
 8006b10:	f7ff fd42 	bl	8006598 <PC_show_Keys>
      ResetUsbRxDataSize();
 8006b14:	f016 ff08 	bl	801d928 <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 8; i++) {
 8006b18:	2315      	movs	r3, #21
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e00b      	b.n	8006b3a <Process_USB_input+0x1f2>
      data[i] = '\0';
 8006b22:	2115      	movs	r1, #21
 8006b24:	187b      	adds	r3, r7, r1
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	18d3      	adds	r3, r2, r3
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 8; i++) {
 8006b30:	187b      	adds	r3, r7, r1
 8006b32:	781a      	ldrb	r2, [r3, #0]
 8006b34:	187b      	adds	r3, r7, r1
 8006b36:	3201      	adds	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	2315      	movs	r3, #21
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b07      	cmp	r3, #7
 8006b42:	d9ee      	bls.n	8006b22 <Process_USB_input+0x1da>
    }

  }
  if (formerlength != length) {
 8006b44:	4b15      	ldr	r3, [pc, #84]	@ (8006b9c <Process_USB_input+0x254>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d008      	beq.n	8006b60 <Process_USB_input+0x218>
    printf_USB("USB input: %s\r", (const char*)data);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4b13      	ldr	r3, [pc, #76]	@ (8006ba0 <Process_USB_input+0x258>)
 8006b52:	0011      	movs	r1, r2
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7ff fcdf 	bl	8006518 <printf_USB>
    formerlength = length;
 8006b5a:	4b10      	ldr	r3, [pc, #64]	@ (8006b9c <Process_USB_input+0x254>)
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	0018      	movs	r0, r3
 8006b64:	f016 ff02 	bl	801d96c <GetUsbRxNextChunk>

  return false;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	b007      	add	sp, #28
 8006b70:	bd90      	pop	{r4, r7, pc}
 8006b72:	46c0      	nop			@ (mov r8, r8)
 8006b74:	08024d14 	.word	0x08024d14
 8006b78:	2000076c 	.word	0x2000076c
 8006b7c:	08026d78 	.word	0x08026d78
 8006b80:	20000870 	.word	0x20000870
 8006b84:	08024d24 	.word	0x08024d24
 8006b88:	20000a74 	.word	0x20000a74
 8006b8c:	08080000 	.word	0x08080000
 8006b90:	2000076e 	.word	0x2000076e
 8006b94:	20000a80 	.word	0x20000a80
 8006b98:	08024d4c 	.word	0x08024d4c
 8006b9c:	20000874 	.word	0x20000874
 8006ba0:	08024d78 	.word	0x08024d78

08006ba4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006ba8:	4b26      	ldr	r3, [pc, #152]	@ (8006c44 <ReadBatteryVoltage+0xa0>)
 8006baa:	4a27      	ldr	r2, [pc, #156]	@ (8006c48 <ReadBatteryVoltage+0xa4>)
 8006bac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006bae:	4b25      	ldr	r3, [pc, #148]	@ (8006c44 <ReadBatteryVoltage+0xa0>)
 8006bb0:	2280      	movs	r2, #128	@ 0x80
 8006bb2:	0152      	lsls	r2, r2, #5
 8006bb4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006bb6:	4a23      	ldr	r2, [pc, #140]	@ (8006c44 <ReadBatteryVoltage+0xa0>)
 8006bb8:	4b24      	ldr	r3, [pc, #144]	@ (8006c4c <ReadBatteryVoltage+0xa8>)
 8006bba:	0011      	movs	r1, r2
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f009 f943 	bl	800fe48 <HAL_ADC_ConfigChannel>
 8006bc2:	1e03      	subs	r3, r0, #0
 8006bc4:	d001      	beq.n	8006bca <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006bc6:	f002 f8bd 	bl	8008d44 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006bca:	4b20      	ldr	r3, [pc, #128]	@ (8006c4c <ReadBatteryVoltage+0xa8>)
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f009 f83f 	bl	800fc50 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c4c <ReadBatteryVoltage+0xa8>)
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f009 f88e 	bl	800fcf8 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8006c4c <ReadBatteryVoltage+0xa8>)
 8006bde:	0018      	movs	r0, r3
 8006be0:	f009 f926 	bl	800fe30 <HAL_ADC_GetValue>
 8006be4:	0002      	movs	r2, r0
 8006be6:	4b1a      	ldr	r3, [pc, #104]	@ (8006c50 <ReadBatteryVoltage+0xac>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4353      	muls	r3, r2
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4919      	ldr	r1, [pc, #100]	@ (8006c54 <ReadBatteryVoltage+0xb0>)
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7f9 fad7 	bl	80001a4 <__udivsi3>
 8006bf6:	0003      	movs	r3, r0
 8006bf8:	001a      	movs	r2, r3
 8006bfa:	4b17      	ldr	r3, [pc, #92]	@ (8006c58 <ReadBatteryVoltage+0xb4>)
 8006bfc:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006bfe:	4b16      	ldr	r3, [pc, #88]	@ (8006c58 <ReadBatteryVoltage+0xb4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	0018      	movs	r0, r3
 8006c04:	f7fa fd30 	bl	8001668 <__aeabi_ui2f>
 8006c08:	1c03      	adds	r3, r0, #0
 8006c0a:	4914      	ldr	r1, [pc, #80]	@ (8006c5c <ReadBatteryVoltage+0xb8>)
 8006c0c:	1c18      	adds	r0, r3, #0
 8006c0e:	f7f9 ffe1 	bl	8000bd4 <__aeabi_fdiv>
 8006c12:	1c03      	adds	r3, r0, #0
 8006c14:	1c1a      	adds	r2, r3, #0
 8006c16:	4b12      	ldr	r3, [pc, #72]	@ (8006c60 <ReadBatteryVoltage+0xbc>)
 8006c18:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c44 <ReadBatteryVoltage+0xa0>)
 8006c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c48 <ReadBatteryVoltage+0xa4>)
 8006c1e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006c20:	4b08      	ldr	r3, [pc, #32]	@ (8006c44 <ReadBatteryVoltage+0xa0>)
 8006c22:	4a10      	ldr	r2, [pc, #64]	@ (8006c64 <ReadBatteryVoltage+0xc0>)
 8006c24:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006c26:	4a07      	ldr	r2, [pc, #28]	@ (8006c44 <ReadBatteryVoltage+0xa0>)
 8006c28:	4b08      	ldr	r3, [pc, #32]	@ (8006c4c <ReadBatteryVoltage+0xa8>)
 8006c2a:	0011      	movs	r1, r2
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f009 f90b 	bl	800fe48 <HAL_ADC_ConfigChannel>
 8006c32:	1e03      	subs	r3, r0, #0
 8006c34:	d001      	beq.n	8006c3a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006c36:	f002 f885 	bl	8008d44 <Error_Handler>
  }
  return trueValue;
 8006c3a:	4b09      	ldr	r3, [pc, #36]	@ (8006c60 <ReadBatteryVoltage+0xbc>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 }
 8006c3e:	1c18      	adds	r0, r3, #0
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000a9c 	.word	0x20000a9c
 8006c48:	38004000 	.word	0x38004000
 8006c4c:	20000ad8 	.word	0x20000ad8
 8006c50:	20000030 	.word	0x20000030
 8006c54:	00000fff 	.word	0x00000fff
 8006c58:	20000aa4 	.word	0x20000aa4
 8006c5c:	447a0000 	.word	0x447a0000
 8006c60:	20000aa8 	.word	0x20000aa8
 8006c64:	00001001 	.word	0x00001001

08006c68 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006c6c:	4b21      	ldr	r3, [pc, #132]	@ (8006cf4 <ReadSolarVoltage+0x8c>)
 8006c6e:	4a22      	ldr	r2, [pc, #136]	@ (8006cf8 <ReadSolarVoltage+0x90>)
 8006c70:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006c72:	4b20      	ldr	r3, [pc, #128]	@ (8006cf4 <ReadSolarVoltage+0x8c>)
 8006c74:	2280      	movs	r2, #128	@ 0x80
 8006c76:	0152      	lsls	r2, r2, #5
 8006c78:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf4 <ReadSolarVoltage+0x8c>)
 8006c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cfc <ReadSolarVoltage+0x94>)
 8006c7e:	0011      	movs	r1, r2
 8006c80:	0018      	movs	r0, r3
 8006c82:	f009 f8e1 	bl	800fe48 <HAL_ADC_ConfigChannel>
 8006c86:	1e03      	subs	r3, r0, #0
 8006c88:	d001      	beq.n	8006c8e <ReadSolarVoltage+0x26>
    Error_Handler();
 8006c8a:	f002 f85b 	bl	8008d44 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cfc <ReadSolarVoltage+0x94>)
 8006c90:	0018      	movs	r0, r3
 8006c92:	f008 ffdd 	bl	800fc50 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006c96:	4b19      	ldr	r3, [pc, #100]	@ (8006cfc <ReadSolarVoltage+0x94>)
 8006c98:	2101      	movs	r1, #1
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f009 f82c 	bl	800fcf8 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006ca0:	4b16      	ldr	r3, [pc, #88]	@ (8006cfc <ReadSolarVoltage+0x94>)
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f009 f8c4 	bl	800fe30 <HAL_ADC_GetValue>
 8006ca8:	0002      	movs	r2, r0
 8006caa:	4b15      	ldr	r3, [pc, #84]	@ (8006d00 <ReadSolarVoltage+0x98>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	435a      	muls	r2, r3
 8006cb0:	0013      	movs	r3, r2
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	189b      	adds	r3, r3, r2
 8006cb6:	4913      	ldr	r1, [pc, #76]	@ (8006d04 <ReadSolarVoltage+0x9c>)
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f7f9 fa73 	bl	80001a4 <__udivsi3>
 8006cbe:	0003      	movs	r3, r0
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <ReadSolarVoltage+0xa0>)
 8006cc4:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf4 <ReadSolarVoltage+0x8c>)
 8006cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf8 <ReadSolarVoltage+0x90>)
 8006cca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006ccc:	4b09      	ldr	r3, [pc, #36]	@ (8006cf4 <ReadSolarVoltage+0x8c>)
 8006cce:	4a0f      	ldr	r2, [pc, #60]	@ (8006d0c <ReadSolarVoltage+0xa4>)
 8006cd0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006cd2:	4a08      	ldr	r2, [pc, #32]	@ (8006cf4 <ReadSolarVoltage+0x8c>)
 8006cd4:	4b09      	ldr	r3, [pc, #36]	@ (8006cfc <ReadSolarVoltage+0x94>)
 8006cd6:	0011      	movs	r1, r2
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f009 f8b5 	bl	800fe48 <HAL_ADC_ConfigChannel>
 8006cde:	1e03      	subs	r3, r0, #0
 8006ce0:	d001      	beq.n	8006ce6 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006ce2:	f002 f82f 	bl	8008d44 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006ce6:	4b08      	ldr	r3, [pc, #32]	@ (8006d08 <ReadSolarVoltage+0xa0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 }
 8006cec:	0018      	movs	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	46c0      	nop			@ (mov r8, r8)
 8006cf4:	20000a9c 	.word	0x20000a9c
 8006cf8:	3c008000 	.word	0x3c008000
 8006cfc:	20000ad8 	.word	0x20000ad8
 8006d00:	20000030 	.word	0x20000030
 8006d04:	00000fff 	.word	0x00000fff
 8006d08:	20000aac 	.word	0x20000aac
 8006d0c:	00001001 	.word	0x00001001

08006d10 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006d14:	23a0      	movs	r3, #160	@ 0xa0
 8006d16:	05db      	lsls	r3, r3, #23
 8006d18:	2180      	movs	r1, #128	@ 0x80
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f00a f830 	bl	8010d80 <HAL_GPIO_ReadPin>
 8006d20:	0003      	movs	r3, r0
 8006d22:	1e5a      	subs	r2, r3, #1
 8006d24:	4193      	sbcs	r3, r2
 8006d26:	b2db      	uxtb	r3, r3
}
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006d32:	2380      	movs	r3, #128	@ 0x80
 8006d34:	021a      	lsls	r2, r3, #8
 8006d36:	23a0      	movs	r3, #160	@ 0xa0
 8006d38:	05db      	lsls	r3, r3, #23
 8006d3a:	0011      	movs	r1, r2
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f00a f81f 	bl	8010d80 <HAL_GPIO_ReadPin>
 8006d42:	0003      	movs	r3, r0
 8006d44:	1e5a      	subs	r2, r3, #1
 8006d46:	4193      	sbcs	r3, r2
 8006d48:	b2db      	uxtb	r3, r3
}
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006d54:	4b05      	ldr	r3, [pc, #20]	@ (8006d6c <UserButton_Pressed+0x1c>)
 8006d56:	2104      	movs	r1, #4
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f00a f811 	bl	8010d80 <HAL_GPIO_ReadPin>
 8006d5e:	0003      	movs	r3, r0
 8006d60:	425a      	negs	r2, r3
 8006d62:	4153      	adcs	r3, r2
 8006d64:	b2db      	uxtb	r3, r3
}
 8006d66:	0018      	movs	r0, r3
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	50000c00 	.word	0x50000c00

08006d70 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8006d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d72:	46d6      	mov	lr, sl
 8006d74:	464f      	mov	r7, r9
 8006d76:	4646      	mov	r6, r8
 8006d78:	b5c0      	push	{r6, r7, lr}
 8006d7a:	b08e      	sub	sp, #56	@ 0x38
 8006d7c:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8006d7e:	4b21      	ldr	r3, [pc, #132]	@ (8006e04 <showTime+0x94>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d036      	beq.n	8006df4 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006d86:	003a      	movs	r2, r7
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	0011      	movs	r1, r2
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 fa2b 	bl	80071e8 <RTC_GetTime>
  UpdateSystemUptime();
 8006d92:	f000 f83f 	bl	8006e14 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006d96:	003b      	movs	r3, r7
 8006d98:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006d9a:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006d9c:	003b      	movs	r3, r7
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006da2:	4b19      	ldr	r3, [pc, #100]	@ (8006e08 <showTime+0x98>)
 8006da4:	0092      	lsls	r2, r2, #2
 8006da6:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006da8:	003b      	movs	r3, r7
 8006daa:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006dac:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006db2:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006db4:	1d3b      	adds	r3, r7, #4
 8006db6:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006db8:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006dba:	1d3b      	adds	r3, r7, #4
 8006dbc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006dbe:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006dc0:	4b12      	ldr	r3, [pc, #72]	@ (8006e0c <showTime+0x9c>)
 8006dc2:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006dc4:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006dc6:	4b11      	ldr	r3, [pc, #68]	@ (8006e0c <showTime+0x9c>)
 8006dc8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006dca:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8006e0c <showTime+0x9c>)
 8006dce:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006dd0:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8006e0c <showTime+0x9c>)
 8006dd4:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006dd6:	480e      	ldr	r0, [pc, #56]	@ (8006e10 <showTime+0xa0>)
 8006dd8:	9306      	str	r3, [sp, #24]
 8006dda:	4643      	mov	r3, r8
 8006ddc:	9305      	str	r3, [sp, #20]
 8006dde:	4663      	mov	r3, ip
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	9603      	str	r6, [sp, #12]
 8006de4:	9502      	str	r5, [sp, #8]
 8006de6:	9401      	str	r4, [sp, #4]
 8006de8:	9100      	str	r1, [sp, #0]
 8006dea:	4653      	mov	r3, sl
 8006dec:	4649      	mov	r1, r9
 8006dee:	f019 fdf7 	bl	80209e0 <iprintf>
 8006df2:	e000      	b.n	8006df6 <showTime+0x86>
    return;
 8006df4:	46c0      	nop			@ (mov r8, r8)
}
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b006      	add	sp, #24
 8006dfa:	bce0      	pop	{r5, r6, r7}
 8006dfc:	46ba      	mov	sl, r7
 8006dfe:	46b1      	mov	r9, r6
 8006e00:	46a8      	mov	r8, r5
 8006e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e04:	20000abc 	.word	0x20000abc
 8006e08:	20000050 	.word	0x20000050
 8006e0c:	20000ab0 	.word	0x20000ab0
 8006e10:	08024dd4 	.word	0x08024dd4

08006e14 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006e1a:	003a      	movs	r2, r7
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	0011      	movs	r1, r2
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 f9e1 	bl	80071e8 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006e26:	1d3a      	adds	r2, r7, #4
 8006e28:	003b      	movs	r3, r7
 8006e2a:	0011      	movs	r1, r2
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f000 fba7 	bl	8007580 <makeTime>
 8006e32:	0002      	movs	r2, r0
 8006e34:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb0 <UpdateSystemUptime+0x9c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	213c      	movs	r1, #60	@ 0x3c
 8006e44:	0018      	movs	r0, r3
 8006e46:	f7f9 fa33 	bl	80002b0 <__aeabi_uidivmod>
 8006e4a:	000b      	movs	r3, r1
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	4b19      	ldr	r3, [pc, #100]	@ (8006eb4 <UpdateSystemUptime+0xa0>)
 8006e50:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	213c      	movs	r1, #60	@ 0x3c
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7f9 f9a4 	bl	80001a4 <__udivsi3>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	213c      	movs	r1, #60	@ 0x3c
 8006e64:	0018      	movs	r0, r3
 8006e66:	f7f9 fa23 	bl	80002b0 <__aeabi_uidivmod>
 8006e6a:	000b      	movs	r3, r1
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	4b11      	ldr	r3, [pc, #68]	@ (8006eb4 <UpdateSystemUptime+0xa0>)
 8006e70:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	213c      	movs	r1, #60	@ 0x3c
 8006e76:	0018      	movs	r0, r3
 8006e78:	f7f9 f994 	bl	80001a4 <__udivsi3>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2118      	movs	r1, #24
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7f9 fa13 	bl	80002b0 <__aeabi_uidivmod>
 8006e8a:	000b      	movs	r3, r1
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <UpdateSystemUptime+0xa0>)
 8006e90:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2118      	movs	r1, #24
 8006e96:	0018      	movs	r0, r3
 8006e98:	f7f9 f984 	bl	80001a4 <__udivsi3>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	4b03      	ldr	r3, [pc, #12]	@ (8006eb4 <UpdateSystemUptime+0xa0>)
 8006ea6:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006ea8:	46c0      	nop			@ (mov r8, r8)
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b008      	add	sp, #32
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000abc 	.word	0x20000abc
 8006eb4:	20000ab0 	.word	0x20000ab0

08006eb8 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006eb8:	b590      	push	{r4, r7, lr}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	0008      	movs	r0, r1
 8006ec2:	0011      	movs	r1, r2
 8006ec4:	1cfb      	adds	r3, r7, #3
 8006ec6:	1c02      	adds	r2, r0, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	1cbb      	adds	r3, r7, #2
 8006ecc:	1c0a      	adds	r2, r1, #0
 8006ece:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006ed0:	230e      	movs	r3, #14
 8006ed2:	18fb      	adds	r3, r7, r3
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006ed8:	230f      	movs	r3, #15
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	1cfa      	adds	r2, r7, #3
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e015      	b.n	8006f10 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006ee4:	200f      	movs	r0, #15
 8006ee6:	183b      	adds	r3, r7, r0
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	18d2      	adds	r2, r2, r3
 8006eee:	240e      	movs	r4, #14
 8006ef0:	193b      	adds	r3, r7, r4
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	7811      	ldrb	r1, [r2, #0]
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	18ba      	adds	r2, r7, r2
 8006efa:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006efc:	193b      	adds	r3, r7, r4
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	193b      	adds	r3, r7, r4
 8006f02:	3201      	adds	r2, #1
 8006f04:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006f06:	183b      	adds	r3, r7, r0
 8006f08:	781a      	ldrb	r2, [r3, #0]
 8006f0a:	183b      	adds	r3, r7, r0
 8006f0c:	3201      	adds	r2, #1
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	200f      	movs	r0, #15
 8006f12:	183a      	adds	r2, r7, r0
 8006f14:	1cbb      	adds	r3, r7, #2
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d9e2      	bls.n	8006ee4 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006f1e:	230e      	movs	r3, #14
 8006f20:	18fb      	adds	r3, r7, r3
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2208      	movs	r2, #8
 8006f26:	18ba      	adds	r2, r7, r2
 8006f28:	2100      	movs	r1, #0
 8006f2a:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006f2c:	1cfb      	adds	r3, r7, #3
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b13      	cmp	r3, #19
 8006f32:	d849      	bhi.n	8006fc8 <aBuff2int+0x110>
    if (start == 17) { //month
 8006f34:	1cfb      	adds	r3, r7, #3
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b11      	cmp	r3, #17
 8006f3a:	d122      	bne.n	8006f82 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006f3c:	183b      	adds	r3, r7, r0
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	e018      	b.n	8006f76 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006f44:	240f      	movs	r4, #15
 8006f46:	193b      	adds	r3, r7, r4
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	4b25      	ldr	r3, [pc, #148]	@ (8006fe0 <aBuff2int+0x128>)
 8006f4c:	0092      	lsls	r2, r2, #2
 8006f4e:	58d2      	ldr	r2, [r2, r3]
 8006f50:	2308      	movs	r3, #8
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	0011      	movs	r1, r2
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7f9 f8fe 	bl	8000158 <strcmp>
 8006f5c:	1e03      	subs	r3, r0, #0
 8006f5e:	d104      	bne.n	8006f6a <aBuff2int+0xb2>
          return i+1;
 8006f60:	193b      	adds	r3, r7, r4
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	3301      	adds	r3, #1
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	e035      	b.n	8006fd6 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8006f6a:	210f      	movs	r1, #15
 8006f6c:	187b      	adds	r3, r7, r1
 8006f6e:	781a      	ldrb	r2, [r3, #0]
 8006f70:	187b      	adds	r3, r7, r1
 8006f72:	3201      	adds	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	230f      	movs	r3, #15
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b0b      	cmp	r3, #11
 8006f7e:	d9e1      	bls.n	8006f44 <aBuff2int+0x8c>
 8006f80:	e022      	b.n	8006fc8 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006f82:	230f      	movs	r3, #15
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	e018      	b.n	8006fbe <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006f8c:	240f      	movs	r4, #15
 8006f8e:	193b      	adds	r3, r7, r4
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <aBuff2int+0x12c>)
 8006f94:	0092      	lsls	r2, r2, #2
 8006f96:	58d2      	ldr	r2, [r2, r3]
 8006f98:	2308      	movs	r3, #8
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	0011      	movs	r1, r2
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f7f9 f8da 	bl	8000158 <strcmp>
 8006fa4:	1e03      	subs	r3, r0, #0
 8006fa6:	d104      	bne.n	8006fb2 <aBuff2int+0xfa>
          return i+1;
 8006fa8:	193b      	adds	r3, r7, r4
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	e011      	b.n	8006fd6 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006fb2:	210f      	movs	r1, #15
 8006fb4:	187b      	adds	r3, r7, r1
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	187b      	adds	r3, r7, r1
 8006fba:	3201      	adds	r2, #1
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	230f      	movs	r3, #15
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b06      	cmp	r3, #6
 8006fc6:	d9e1      	bls.n	8006f8c <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006fc8:	2308      	movs	r3, #8
 8006fca:	18fb      	adds	r3, r7, r3
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f018 f92c 	bl	801f22a <atoi>
 8006fd2:	0003      	movs	r3, r0
 8006fd4:	b2db      	uxtb	r3, r3
}
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b005      	add	sp, #20
 8006fdc:	bd90      	pop	{r4, r7, pc}
 8006fde:	46c0      	nop			@ (mov r8, r8)
 8006fe0:	20000050 	.word	0x20000050
 8006fe4:	20000034 	.word	0x20000034

08006fe8 <ParseTime>:

void ParseTime(char* buffer) {
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fea:	b08b      	sub	sp, #44	@ 0x2c
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006ff0:	2408      	movs	r4, #8
 8006ff2:	193a      	adds	r2, r7, r4
 8006ff4:	260c      	movs	r6, #12
 8006ff6:	19bb      	adds	r3, r7, r6
 8006ff8:	0011      	movs	r1, r2
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 f8f4 	bl	80071e8 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2219      	movs	r2, #25
 8007004:	2118      	movs	r1, #24
 8007006:	0018      	movs	r0, r3
 8007008:	f7ff ff56 	bl	8006eb8 <aBuff2int>
 800700c:	0003      	movs	r3, r0
 800700e:	001a      	movs	r2, r3
 8007010:	19bb      	adds	r3, r7, r6
 8007012:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	221c      	movs	r2, #28
 8007018:	211b      	movs	r1, #27
 800701a:	0018      	movs	r0, r3
 800701c:	f7ff ff4c 	bl	8006eb8 <aBuff2int>
 8007020:	0003      	movs	r3, r0
 8007022:	001a      	movs	r2, r3
 8007024:	19bb      	adds	r3, r7, r6
 8007026:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	221f      	movs	r2, #31
 800702c:	211e      	movs	r1, #30
 800702e:	0018      	movs	r0, r3
 8007030:	f7ff ff42 	bl	8006eb8 <aBuff2int>
 8007034:	0003      	movs	r3, r0
 8007036:	001a      	movs	r2, r3
 8007038:	19bb      	adds	r3, r7, r6
 800703a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2224      	movs	r2, #36	@ 0x24
 8007040:	2123      	movs	r1, #35	@ 0x23
 8007042:	0018      	movs	r0, r3
 8007044:	f7ff ff38 	bl	8006eb8 <aBuff2int>
 8007048:	0003      	movs	r3, r0
 800704a:	001a      	movs	r2, r3
 800704c:	0025      	movs	r5, r4
 800704e:	197b      	adds	r3, r7, r5
 8007050:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2213      	movs	r2, #19
 8007056:	2111      	movs	r1, #17
 8007058:	0018      	movs	r0, r3
 800705a:	f7ff ff2d 	bl	8006eb8 <aBuff2int>
 800705e:	0003      	movs	r3, r0
 8007060:	001a      	movs	r2, r3
 8007062:	197b      	adds	r3, r7, r5
 8007064:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2216      	movs	r2, #22
 800706a:	2115      	movs	r1, #21
 800706c:	0018      	movs	r0, r3
 800706e:	f7ff ff23 	bl	8006eb8 <aBuff2int>
 8007072:	0003      	movs	r3, r0
 8007074:	001a      	movs	r2, r3
 8007076:	197b      	adds	r3, r7, r5
 8007078:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	220f      	movs	r2, #15
 800707e:	210d      	movs	r1, #13
 8007080:	0018      	movs	r0, r3
 8007082:	f7ff ff19 	bl	8006eb8 <aBuff2int>
 8007086:	0003      	movs	r3, r0
 8007088:	001a      	movs	r2, r3
 800708a:	197b      	adds	r3, r7, r5
 800708c:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800708e:	19bb      	adds	r3, r7, r6
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	001c      	movs	r4, r3
 8007094:	19bb      	adds	r3, r7, r6
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	0018      	movs	r0, r3
 800709a:	19bb      	adds	r3, r7, r6
 800709c:	789b      	ldrb	r3, [r3, #2]
 800709e:	4a1c      	ldr	r2, [pc, #112]	@ (8007110 <ParseTime+0x128>)
 80070a0:	491c      	ldr	r1, [pc, #112]	@ (8007114 <ParseTime+0x12c>)
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	9000      	str	r0, [sp, #0]
 80070a6:	0023      	movs	r3, r4
 80070a8:	2003      	movs	r0, #3
 80070aa:	f007 ffb1 	bl	800f010 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80070ae:	197b      	adds	r3, r7, r5
 80070b0:	789b      	ldrb	r3, [r3, #2]
 80070b2:	001c      	movs	r4, r3
 80070b4:	197b      	adds	r3, r7, r5
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	0018      	movs	r0, r3
 80070ba:	197b      	adds	r3, r7, r5
 80070bc:	78db      	ldrb	r3, [r3, #3]
 80070be:	4a16      	ldr	r2, [pc, #88]	@ (8007118 <ParseTime+0x130>)
 80070c0:	4914      	ldr	r1, [pc, #80]	@ (8007114 <ParseTime+0x12c>)
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	9000      	str	r0, [sp, #0]
 80070c6:	0023      	movs	r3, r4
 80070c8:	2003      	movs	r0, #3
 80070ca:	f007 ffa1 	bl	800f010 <CreateLine>
  RTC_SetTime(&currentTime);
 80070ce:	19bb      	adds	r3, r7, r6
 80070d0:	0018      	movs	r0, r3
 80070d2:	f000 f825 	bl	8007120 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80070d6:	197b      	adds	r3, r7, r5
 80070d8:	0018      	movs	r0, r3
 80070da:	f000 f847 	bl	800716c <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80070de:	197b      	adds	r3, r7, r5
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d101      	bne.n	80070ea <ParseTime+0x102>
    reset_fanCleaningDone();
 80070e6:	f002 fdbf 	bl	8009c68 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80070ea:	4b0c      	ldr	r3, [pc, #48]	@ (800711c <ParseTime+0x134>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 80070f2:	230c      	movs	r3, #12
 80070f4:	18fa      	adds	r2, r7, r3
 80070f6:	2308      	movs	r3, #8
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	0011      	movs	r1, r2
 80070fc:	0018      	movs	r0, r3
 80070fe:	f000 fa3f 	bl	8007580 <makeTime>
 8007102:	0002      	movs	r2, r0
 8007104:	4b05      	ldr	r3, [pc, #20]	@ (800711c <ParseTime+0x134>)
 8007106:	601a      	str	r2, [r3, #0]
  }
}
 8007108:	46c0      	nop			@ (mov r8, r8)
 800710a:	46bd      	mov	sp, r7
 800710c:	b009      	add	sp, #36	@ 0x24
 800710e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007110:	08024e2c 	.word	0x08024e2c
 8007114:	08024e64 	.word	0x08024e64
 8007118:	08024e68 	.word	0x08024e68
 800711c:	20000abc 	.word	0x20000abc

08007120 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800713a:	4b09      	ldr	r3, [pc, #36]	@ (8007160 <RTC_SetTime+0x40>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	0018      	movs	r0, r3
 8007144:	f00f fcc8 	bl	8016ad8 <HAL_RTC_SetTime>
 8007148:	1e03      	subs	r3, r0, #0
 800714a:	d005      	beq.n	8007158 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800714c:	4a05      	ldr	r2, [pc, #20]	@ (8007164 <RTC_SetTime+0x44>)
 800714e:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <RTC_SetTime+0x48>)
 8007150:	0019      	movs	r1, r3
 8007152:	2001      	movs	r0, #1
 8007154:	f007 ff5c 	bl	800f010 <CreateLine>
    }
}
 8007158:	46c0      	nop			@ (mov r8, r8)
 800715a:	46bd      	mov	sp, r7
 800715c:	b002      	add	sp, #8
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000ab8 	.word	0x20000ab8
 8007164:	08024e9c 	.word	0x08024e9c
 8007168:	08024eb8 	.word	0x08024eb8

0800716c <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007174:	4b16      	ldr	r3, [pc, #88]	@ (80071d0 <RTC_SetDate+0x64>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	0018      	movs	r0, r3
 800717e:	f00f fdb3 	bl	8016ce8 <HAL_RTC_SetDate>
 8007182:	1e03      	subs	r3, r0, #0
 8007184:	d005      	beq.n	8007192 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8007186:	4a13      	ldr	r2, [pc, #76]	@ (80071d4 <RTC_SetDate+0x68>)
 8007188:	4b13      	ldr	r3, [pc, #76]	@ (80071d8 <RTC_SetDate+0x6c>)
 800718a:	0019      	movs	r1, r3
 800718c:	2001      	movs	r0, #1
 800718e:	f007 ff3f 	bl	800f010 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8007192:	4b0f      	ldr	r3, [pc, #60]	@ (80071d0 <RTC_SetDate+0x64>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2101      	movs	r1, #1
 8007198:	0018      	movs	r0, r3
 800719a:	f010 f8eb 	bl	8017374 <HAL_RTCEx_BKUPRead>
 800719e:	0003      	movs	r3, r0
 80071a0:	4a0e      	ldr	r2, [pc, #56]	@ (80071dc <RTC_SetDate+0x70>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d010      	beq.n	80071c8 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80071a6:	4a0e      	ldr	r2, [pc, #56]	@ (80071e0 <RTC_SetDate+0x74>)
 80071a8:	4b0e      	ldr	r3, [pc, #56]	@ (80071e4 <RTC_SetDate+0x78>)
 80071aa:	0019      	movs	r1, r3
 80071ac:	2003      	movs	r0, #3
 80071ae:	f007 ff2f 	bl	800f010 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80071b2:	f00e fc11 	bl	80159d8 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80071b6:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <RTC_SetDate+0x64>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a08      	ldr	r2, [pc, #32]	@ (80071dc <RTC_SetDate+0x70>)
 80071bc:	2101      	movs	r1, #1
 80071be:	0018      	movs	r0, r3
 80071c0:	f010 f8c0 	bl	8017344 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80071c4:	f00e fc16 	bl	80159f4 <HAL_PWR_DisableBkUpAccess>
    }
}
 80071c8:	46c0      	nop			@ (mov r8, r8)
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b002      	add	sp, #8
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000ab8 	.word	0x20000ab8
 80071d4:	08024ebc 	.word	0x08024ebc
 80071d8:	08024eb8 	.word	0x08024eb8
 80071dc:	0000bebe 	.word	0x0000bebe
 80071e0:	08024ed8 	.word	0x08024ed8
 80071e4:	08024e64 	.word	0x08024e64

080071e8 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80071e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 80071f2:	250f      	movs	r5, #15
 80071f4:	197b      	adds	r3, r7, r5
 80071f6:	2201      	movs	r2, #1
 80071f8:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 80071fa:	230e      	movs	r3, #14
 80071fc:	18fb      	adds	r3, r7, r3
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8007202:	260c      	movs	r6, #12
 8007204:	19bc      	adds	r4, r7, r6
 8007206:	f006 ff95 	bl	800e134 <powerCheck>
 800720a:	0003      	movs	r3, r0
 800720c:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800720e:	19bb      	adds	r3, r7, r6
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d104      	bne.n	8007220 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8007216:	197b      	adds	r3, r7, r5
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	197b      	adds	r3, r7, r5
 800721c:	3201      	adds	r2, #1
 800721e:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8007220:	230d      	movs	r3, #13
 8007222:	18fb      	adds	r3, r7, r3
 8007224:	2200      	movs	r2, #0
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	e039      	b.n	800729e <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800722a:	4b23      	ldr	r3, [pc, #140]	@ (80072b8 <RTC_GetTime+0xd0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	0018      	movs	r0, r3
 8007234:	f00f fcfa 	bl	8016c2c <HAL_RTC_GetTime>
 8007238:	1e03      	subs	r3, r0, #0
 800723a:	d005      	beq.n	8007248 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 800723c:	4a1f      	ldr	r2, [pc, #124]	@ (80072bc <RTC_GetTime+0xd4>)
 800723e:	4b20      	ldr	r3, [pc, #128]	@ (80072c0 <RTC_GetTime+0xd8>)
 8007240:	0019      	movs	r1, r3
 8007242:	2001      	movs	r0, #1
 8007244:	f007 fee4 	bl	800f010 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007248:	4b1b      	ldr	r3, [pc, #108]	@ (80072b8 <RTC_GetTime+0xd0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	2200      	movs	r2, #0
 8007250:	0018      	movs	r0, r3
 8007252:	f00f fddd 	bl	8016e10 <HAL_RTC_GetDate>
 8007256:	1e03      	subs	r3, r0, #0
 8007258:	d005      	beq.n	8007266 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800725a:	4a1a      	ldr	r2, [pc, #104]	@ (80072c4 <RTC_GetTime+0xdc>)
 800725c:	4b18      	ldr	r3, [pc, #96]	@ (80072c0 <RTC_GetTime+0xd8>)
 800725e:	0019      	movs	r1, r3
 8007260:	2001      	movs	r0, #1
 8007262:	f007 fed5 	bl	800f010 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8007266:	230c      	movs	r3, #12
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d110      	bne.n	8007292 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	210e      	movs	r1, #14
 8007276:	187a      	adds	r2, r7, r1
 8007278:	7812      	ldrb	r2, [r2, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d018      	beq.n	80072b0 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 800727e:	187b      	adds	r3, r7, r1
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	7812      	ldrb	r2, [r2, #0]
 8007284:	701a      	strb	r2, [r3, #0]
        t++;
 8007286:	210f      	movs	r1, #15
 8007288:	187b      	adds	r3, r7, r1
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	187b      	adds	r3, r7, r1
 800728e:	3201      	adds	r2, #1
 8007290:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8007292:	210d      	movs	r1, #13
 8007294:	187b      	adds	r3, r7, r1
 8007296:	781a      	ldrb	r2, [r3, #0]
 8007298:	187b      	adds	r3, r7, r1
 800729a:	3201      	adds	r2, #1
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	230d      	movs	r3, #13
 80072a0:	18fa      	adds	r2, r7, r3
 80072a2:	230f      	movs	r3, #15
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d3bd      	bcc.n	800722a <RTC_GetTime+0x42>
 80072ae:	e000      	b.n	80072b2 <RTC_GetTime+0xca>
      }
      else {
        return;
 80072b0:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b005      	add	sp, #20
 80072b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b8:	20000ab8 	.word	0x20000ab8
 80072bc:	08024ef0 	.word	0x08024ef0
 80072c0:	08024eb8 	.word	0x08024eb8
 80072c4:	08024f0c 	.word	0x08024f0c

080072c8 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80072ce:	003a      	movs	r2, r7
 80072d0:	1d3b      	adds	r3, r7, #4
 80072d2:	0011      	movs	r1, r2
 80072d4:	0018      	movs	r0, r3
 80072d6:	f7ff ff87 	bl	80071e8 <RTC_GetTime>
  return currentDate.WeekDay;
 80072da:	003b      	movs	r3, r7
 80072dc:	781b      	ldrb	r3, [r3, #0]
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b006      	add	sp, #24
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <getPosixTime>:

uint32_t getPosixTime(void) {
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80072ec:	003a      	movs	r2, r7
 80072ee:	1d3b      	adds	r3, r7, #4
 80072f0:	0011      	movs	r1, r2
 80072f2:	0018      	movs	r0, r3
 80072f4:	f7ff ff78 	bl	80071e8 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 80072f8:	1d3a      	adds	r2, r7, #4
 80072fa:	003b      	movs	r3, r7
 80072fc:	0011      	movs	r1, r2
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 f93e 	bl	8007580 <makeTime>
 8007304:	0003      	movs	r3, r0
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b006      	add	sp, #24
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8007310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007312:	b08d      	sub	sp, #52	@ 0x34
 8007314:	af04      	add	r7, sp, #16
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800731a:	240c      	movs	r4, #12
 800731c:	193a      	adds	r2, r7, r4
 800731e:	2508      	movs	r5, #8
 8007320:	1979      	adds	r1, r7, r5
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	0018      	movs	r0, r3
 8007326:	f000 f9f5 	bl	8007714 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800732a:	002a      	movs	r2, r5
 800732c:	18bb      	adds	r3, r7, r2
 800732e:	789b      	ldrb	r3, [r3, #2]
 8007330:	001e      	movs	r6, r3
 8007332:	18bb      	adds	r3, r7, r2
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	469c      	mov	ip, r3
 8007338:	18bb      	adds	r3, r7, r2
 800733a:	78db      	ldrb	r3, [r3, #3]
 800733c:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800733e:	0021      	movs	r1, r4
 8007340:	187b      	adds	r3, r7, r1
 8007342:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007344:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007346:	187b      	adds	r3, r7, r1
 8007348:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800734a:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800734c:	187b      	adds	r3, r7, r1
 800734e:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007350:	4906      	ldr	r1, [pc, #24]	@ (800736c <getUTCfromPosixTime+0x5c>)
 8007352:	6838      	ldr	r0, [r7, #0]
 8007354:	9303      	str	r3, [sp, #12]
 8007356:	9502      	str	r5, [sp, #8]
 8007358:	9401      	str	r4, [sp, #4]
 800735a:	9200      	str	r2, [sp, #0]
 800735c:	4663      	mov	r3, ip
 800735e:	0032      	movs	r2, r6
 8007360:	f019 fbae 	bl	8020ac0 <siprintf>
}
 8007364:	46c0      	nop			@ (mov r8, r8)
 8007366:	46bd      	mov	sp, r7
 8007368:	b009      	add	sp, #36	@ 0x24
 800736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736c:	08024f28 	.word	0x08024f28

08007370 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8007378:	4b10      	ldr	r3, [pc, #64]	@ (80073bc <RTC_SetWakeUpTimer+0x4c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	0018      	movs	r0, r3
 800737e:	f00f ff45 	bl	801720c <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8007382:	4b0e      	ldr	r3, [pc, #56]	@ (80073bc <RTC_SetWakeUpTimer+0x4c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	22ff      	movs	r2, #255	@ 0xff
 800738c:	401a      	ands	r2, r3
 800738e:	4b0b      	ldr	r3, [pc, #44]	@ (80073bc <RTC_SetWakeUpTimer+0x4c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	490a      	ldr	r1, [pc, #40]	@ (80073c0 <RTC_SetWakeUpTimer+0x50>)
 8007396:	430a      	orrs	r2, r1
 8007398:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800739a:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <RTC_SetWakeUpTimer+0x54>)
 800739c:	2280      	movs	r2, #128	@ 0x80
 800739e:	0352      	lsls	r2, r2, #13
 80073a0:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80073a2:	4b06      	ldr	r3, [pc, #24]	@ (80073bc <RTC_SetWakeUpTimer+0x4c>)
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	2204      	movs	r2, #4
 80073ac:	0019      	movs	r1, r3
 80073ae:	f00f fe55 	bl	801705c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80073b2:	46c0      	nop			@ (mov r8, r8)
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b002      	add	sp, #8
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			@ (mov r8, r8)
 80073bc:	20000ab8 	.word	0x20000ab8
 80073c0:	fffffb7f 	.word	0xfffffb7f
 80073c4:	40010400 	.word	0x40010400

080073c8 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80073cc:	4a0b      	ldr	r2, [pc, #44]	@ (80073fc <Enter_Standby_Mode+0x34>)
 80073ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007400 <Enter_Standby_Mode+0x38>)
 80073d0:	0019      	movs	r1, r3
 80073d2:	2003      	movs	r0, #3
 80073d4:	f007 fe1c 	bl	800f010 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 80073d8:	2064      	movs	r0, #100	@ 0x64
 80073da:	f008 fa67 	bl	800f8ac <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80073de:	4b09      	ldr	r3, [pc, #36]	@ (8007404 <Enter_Standby_Mode+0x3c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	0018      	movs	r0, r3
 80073e4:	f00f ff12 	bl	801720c <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80073e8:	f000 febc 	bl	8008164 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 80073ec:	f008 fa82 	bl	800f8f4 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 80073f0:	f00e fb6c 	bl	8015acc <HAL_PWR_EnterSTANDBYMode>
}
 80073f4:	46c0      	nop			@ (mov r8, r8)
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	08024f7c 	.word	0x08024f7c
 8007400:	08024e64 	.word	0x08024e64
 8007404:	20000ab8 	.word	0x20000ab8

08007408 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af02      	add	r7, sp, #8
 800740e:	0002      	movs	r2, r0
 8007410:	1dbb      	adds	r3, r7, #6
 8007412:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8007414:	4b47      	ldr	r3, [pc, #284]	@ (8007534 <Enter_Stop_Mode+0x12c>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800741c:	f002 fbf8 	bl	8009c10 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007420:	f7ff fbc0 	bl	8006ba4 <ReadBatteryVoltage>
 8007424:	1c03      	adds	r3, r0, #0
 8007426:	1c18      	adds	r0, r3, #0
 8007428:	f7fc f81c 	bl	8003464 <__aeabi_f2d>
 800742c:	0002      	movs	r2, r0
 800742e:	000b      	movs	r3, r1
 8007430:	4841      	ldr	r0, [pc, #260]	@ (8007538 <Enter_Stop_Mode+0x130>)
 8007432:	4942      	ldr	r1, [pc, #264]	@ (800753c <Enter_Stop_Mode+0x134>)
 8007434:	9200      	str	r2, [sp, #0]
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	0002      	movs	r2, r0
 800743a:	2002      	movs	r0, #2
 800743c:	f007 fde8 	bl	800f010 <CreateLine>
  powerDisplay(powerCheck());
 8007440:	f006 fe78 	bl	800e134 <powerCheck>
 8007444:	0003      	movs	r3, r0
 8007446:	0018      	movs	r0, r3
 8007448:	f006 fe90 	bl	800e16c <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800744c:	1dbb      	adds	r3, r7, #6
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	4a3b      	ldr	r2, [pc, #236]	@ (8007540 <Enter_Stop_Mode+0x138>)
 8007452:	493c      	ldr	r1, [pc, #240]	@ (8007544 <Enter_Stop_Mode+0x13c>)
 8007454:	2003      	movs	r0, #3
 8007456:	f007 fddb 	bl	800f010 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800745a:	f7ff ff44 	bl	80072e6 <getPosixTime>
 800745e:	0002      	movs	r2, r0
 8007460:	1dbb      	adds	r3, r7, #6
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	18d3      	adds	r3, r2, r3
 8007466:	4a38      	ldr	r2, [pc, #224]	@ (8007548 <Enter_Stop_Mode+0x140>)
 8007468:	0011      	movs	r1, r2
 800746a:	0018      	movs	r0, r3
 800746c:	f7ff ff50 	bl	8007310 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8007470:	4b35      	ldr	r3, [pc, #212]	@ (8007548 <Enter_Stop_Mode+0x140>)
 8007472:	4a36      	ldr	r2, [pc, #216]	@ (800754c <Enter_Stop_Mode+0x144>)
 8007474:	4931      	ldr	r1, [pc, #196]	@ (800753c <Enter_Stop_Mode+0x134>)
 8007476:	2002      	movs	r0, #2
 8007478:	f007 fdca 	bl	800f010 <CreateLine>
  HAL_Delay(100);
 800747c:	2064      	movs	r0, #100	@ 0x64
 800747e:	f008 fa15 	bl	800f8ac <HAL_Delay>
  HAL_SuspendTick();
 8007482:	f008 fa37 	bl	800f8f4 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8007486:	1dbb      	adds	r3, r7, #6
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	0018      	movs	r0, r3
 800748c:	f7ff ff70 	bl	8007370 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8007490:	2101      	movs	r1, #1
 8007492:	2001      	movs	r0, #1
 8007494:	f00e fabe 	bl	8015a14 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8007498:	f001 fb04 	bl	8008aa4 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800749c:	f008 fa38 	bl	800f910 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 80074a0:	1dbb      	adds	r3, r7, #6
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f002 fb27 	bl	8009af8 <sen5x_enable>
 80074aa:	1e03      	subs	r3, r0, #0
 80074ac:	d01e      	beq.n	80074ec <Enter_Stop_Mode+0xe4>
    showTime();
 80074ae:	f7ff fc5f 	bl	8006d70 <showTime>
    set_light_on_state();
 80074b2:	f003 f82f 	bl	800a514 <set_light_on_state>
    if (!userToggle) {
 80074b6:	4b26      	ldr	r3, [pc, #152]	@ (8007550 <Enter_Stop_Mode+0x148>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2201      	movs	r2, #1
 80074bc:	4053      	eors	r3, r2
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d013      	beq.n	80074ec <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 80074c4:	201c      	movs	r0, #28
 80074c6:	f7ff ff53 	bl	8007370 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80074ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007540 <Enter_Stop_Mode+0x138>)
 80074cc:	491d      	ldr	r1, [pc, #116]	@ (8007544 <Enter_Stop_Mode+0x13c>)
 80074ce:	231c      	movs	r3, #28
 80074d0:	2003      	movs	r0, #3
 80074d2:	f007 fd9d 	bl	800f010 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80074d6:	2101      	movs	r1, #1
 80074d8:	2001      	movs	r0, #1
 80074da:	f00e fa9b 	bl	8015a14 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 80074de:	f001 fae1 	bl	8008aa4 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 80074e2:	f008 fa15 	bl	800f910 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 80074e6:	2000      	movs	r0, #0
 80074e8:	f002 fae4 	bl	8009ab4 <setsen5xReadTimer>
    }
  }
  showTime();
 80074ec:	f7ff fc40 	bl	8006d70 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 80074f0:	f001 ff7a 	bl	80093e8 <ResetDBACalculator>
  ResetSGP40samplecounter();
 80074f4:	f004 fe6a 	bl	800c1cc <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 80074f8:	2000      	movs	r0, #0
 80074fa:	f002 faed 	bl	8009ad8 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 80074fe:	4b15      	ldr	r3, [pc, #84]	@ (8007554 <Enter_Stop_Mode+0x14c>)
 8007500:	0018      	movs	r0, r3
 8007502:	f7fc f8af 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8007506:	2000      	movs	r0, #0
 8007508:	f004 fe4e 	bl	800c1a8 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 800750c:	2000      	movs	r0, #0
 800750e:	f007 ff43 	bl	800f398 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8007512:	2000      	movs	r0, #0
 8007514:	f001 ff56 	bl	80093c4 <setMICTimeStamp>
  ESPTransmitDone = false;
 8007518:	4b0f      	ldr	r3, [pc, #60]	@ (8007558 <Enter_Stop_Mode+0x150>)
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800751e:	f008 f9bb 	bl	800f898 <HAL_GetTick>
 8007522:	0003      	movs	r3, r0
 8007524:	4a0d      	ldr	r2, [pc, #52]	@ (800755c <Enter_Stop_Mode+0x154>)
 8007526:	189a      	adds	r2, r3, r2
 8007528:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <Enter_Stop_Mode+0x158>)
 800752a:	601a      	str	r2, [r3, #0]
}
 800752c:	46c0      	nop			@ (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	b002      	add	sp, #8
 8007532:	bd80      	pop	{r7, pc}
 8007534:	20000da9 	.word	0x20000da9
 8007538:	08024fa0 	.word	0x08024fa0
 800753c:	08024fb8 	.word	0x08024fb8
 8007540:	08024fbc 	.word	0x08024fbc
 8007544:	08024e64 	.word	0x08024e64
 8007548:	20000ac0 	.word	0x20000ac0
 800754c:	08024fe0 	.word	0x08024fe0
 8007550:	20001d3a 	.word	0x20001d3a
 8007554:	00001194 	.word	0x00001194
 8007558:	20000550 	.word	0x20000550
 800755c:	00000bb8 	.word	0x00000bb8
 8007560:	20000d0c 	.word	0x20000d0c

08007564 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800756c:	4b03      	ldr	r3, [pc, #12]	@ (800757c <InitClock+0x18>)
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
}
 8007572:	46c0      	nop			@ (mov r8, r8)
 8007574:	46bd      	mov	sp, r7
 8007576:	b002      	add	sp, #8
 8007578:	bd80      	pop	{r7, pc}
 800757a:	46c0      	nop			@ (mov r8, r8)
 800757c:	20000ab8 	.word	0x20000ab8

08007580 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	78db      	ldrb	r3, [r3, #3]
 800758e:	001a      	movs	r2, r3
 8007590:	0013      	movs	r3, r2
 8007592:	025b      	lsls	r3, r3, #9
 8007594:	189b      	adds	r3, r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	189b      	adds	r3, r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	189b      	adds	r3, r3, r2
 800759e:	011a      	lsls	r2, r3, #4
 80075a0:	1ad2      	subs	r2, r2, r3
 80075a2:	01d3      	lsls	r3, r2, #7
 80075a4:	001a      	movs	r2, r3
 80075a6:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e028      	b.n	8007600 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4a53      	ldr	r2, [pc, #332]	@ (8007700 <makeTime+0x180>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	db21      	blt.n	80075fa <makeTime+0x7a>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4a52      	ldr	r2, [pc, #328]	@ (8007704 <makeTime+0x184>)
 80075ba:	4694      	mov	ip, r2
 80075bc:	4463      	add	r3, ip
 80075be:	001a      	movs	r2, r3
 80075c0:	2303      	movs	r3, #3
 80075c2:	4013      	ands	r3, r2
 80075c4:	d119      	bne.n	80075fa <makeTime+0x7a>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a4e      	ldr	r2, [pc, #312]	@ (8007704 <makeTime+0x184>)
 80075ca:	4694      	mov	ip, r2
 80075cc:	4463      	add	r3, ip
 80075ce:	2164      	movs	r1, #100	@ 0x64
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7f8 ff57 	bl	8000484 <__aeabi_idivmod>
 80075d6:	1e0b      	subs	r3, r1, #0
 80075d8:	d10a      	bne.n	80075f0 <makeTime+0x70>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a49      	ldr	r2, [pc, #292]	@ (8007704 <makeTime+0x184>)
 80075de:	4694      	mov	ip, r2
 80075e0:	4463      	add	r3, ip
 80075e2:	22c8      	movs	r2, #200	@ 0xc8
 80075e4:	0051      	lsls	r1, r2, #1
 80075e6:	0018      	movs	r0, r3
 80075e8:	f7f8 ff4c 	bl	8000484 <__aeabi_idivmod>
 80075ec:	1e0b      	subs	r3, r1, #0
 80075ee:	d104      	bne.n	80075fa <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	4a45      	ldr	r2, [pc, #276]	@ (8007708 <makeTime+0x188>)
 80075f4:	4694      	mov	ip, r2
 80075f6:	4463      	add	r3, ip
 80075f8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3301      	adds	r3, #1
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	78db      	ldrb	r3, [r3, #3]
 8007604:	001a      	movs	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4293      	cmp	r3, r2
 800760a:	dbd0      	blt.n	80075ae <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800760c:	2301      	movs	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e03c      	b.n	800768c <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d125      	bne.n	8007664 <makeTime+0xe4>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	78db      	ldrb	r3, [r3, #3]
 800761c:	4a39      	ldr	r2, [pc, #228]	@ (8007704 <makeTime+0x184>)
 800761e:	4694      	mov	ip, r2
 8007620:	4463      	add	r3, ip
 8007622:	001a      	movs	r2, r3
 8007624:	2303      	movs	r3, #3
 8007626:	4013      	ands	r3, r2
 8007628:	d11c      	bne.n	8007664 <makeTime+0xe4>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	78db      	ldrb	r3, [r3, #3]
 800762e:	4a35      	ldr	r2, [pc, #212]	@ (8007704 <makeTime+0x184>)
 8007630:	4694      	mov	ip, r2
 8007632:	4463      	add	r3, ip
 8007634:	2164      	movs	r1, #100	@ 0x64
 8007636:	0018      	movs	r0, r3
 8007638:	f7f8 ff24 	bl	8000484 <__aeabi_idivmod>
 800763c:	1e0b      	subs	r3, r1, #0
 800763e:	d10b      	bne.n	8007658 <makeTime+0xd8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	78db      	ldrb	r3, [r3, #3]
 8007644:	4a2f      	ldr	r2, [pc, #188]	@ (8007704 <makeTime+0x184>)
 8007646:	4694      	mov	ip, r2
 8007648:	4463      	add	r3, ip
 800764a:	22c8      	movs	r2, #200	@ 0xc8
 800764c:	0051      	lsls	r1, r2, #1
 800764e:	0018      	movs	r0, r3
 8007650:	f7f8 ff18 	bl	8000484 <__aeabi_idivmod>
 8007654:	1e0b      	subs	r3, r1, #0
 8007656:	d105      	bne.n	8007664 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4a2c      	ldr	r2, [pc, #176]	@ (800770c <makeTime+0x18c>)
 800765c:	4694      	mov	ip, r2
 800765e:	4463      	add	r3, ip
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	e010      	b.n	8007686 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3b01      	subs	r3, #1
 8007668:	4a29      	ldr	r2, [pc, #164]	@ (8007710 <makeTime+0x190>)
 800766a:	5cd3      	ldrb	r3, [r2, r3]
 800766c:	001a      	movs	r2, r3
 800766e:	0013      	movs	r3, r2
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	189b      	adds	r3, r3, r2
 8007674:	011a      	lsls	r2, r3, #4
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	0113      	lsls	r3, r2, #4
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	01db      	lsls	r3, r3, #7
 800767e:	001a      	movs	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	189b      	adds	r3, r3, r2
 8007684:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	001a      	movs	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4293      	cmp	r3, r2
 8007696:	dbbc      	blt.n	8007612 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	789b      	ldrb	r3, [r3, #2]
 800769c:	3b01      	subs	r3, #1
 800769e:	001a      	movs	r2, r3
 80076a0:	0013      	movs	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	189b      	adds	r3, r3, r2
 80076a6:	011a      	lsls	r2, r3, #4
 80076a8:	1ad2      	subs	r2, r2, r3
 80076aa:	0113      	lsls	r3, r2, #4
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	01db      	lsls	r3, r3, #7
 80076b0:	001a      	movs	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	189b      	adds	r3, r3, r2
 80076b6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	001a      	movs	r2, r3
 80076be:	0013      	movs	r3, r2
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	011a      	lsls	r2, r3, #4
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	0113      	lsls	r3, r2, #4
 80076ca:	001a      	movs	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	189b      	adds	r3, r3, r2
 80076d0:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	001a      	movs	r2, r3
 80076d8:	0013      	movs	r3, r2
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	1a9b      	subs	r3, r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	001a      	movs	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	189b      	adds	r3, r3, r2
 80076e6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	789b      	ldrb	r3, [r3, #2]
 80076ec:	001a      	movs	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]
  return seconds;
 80076f4:	68bb      	ldr	r3, [r7, #8]
}
 80076f6:	0018      	movs	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	b004      	add	sp, #16
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	46c0      	nop			@ (mov r8, r8)
 8007700:	fffff84f 	.word	0xfffff84f
 8007704:	000007b2 	.word	0x000007b2
 8007708:	00015180 	.word	0x00015180
 800770c:	00263b80 	.word	0x00263b80
 8007710:	0802659c 	.word	0x0802659c

08007714 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b089      	sub	sp, #36	@ 0x24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	213c      	movs	r1, #60	@ 0x3c
 8007728:	0018      	movs	r0, r3
 800772a:	f7f8 fdc1 	bl	80002b0 <__aeabi_uidivmod>
 800772e:	000b      	movs	r3, r1
 8007730:	b2da      	uxtb	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	213c      	movs	r1, #60	@ 0x3c
 800773a:	0018      	movs	r0, r3
 800773c:	f7f8 fd32 	bl	80001a4 <__udivsi3>
 8007740:	0003      	movs	r3, r0
 8007742:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	213c      	movs	r1, #60	@ 0x3c
 8007748:	0018      	movs	r0, r3
 800774a:	f7f8 fdb1 	bl	80002b0 <__aeabi_uidivmod>
 800774e:	000b      	movs	r3, r1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	213c      	movs	r1, #60	@ 0x3c
 800775a:	0018      	movs	r0, r3
 800775c:	f7f8 fd22 	bl	80001a4 <__udivsi3>
 8007760:	0003      	movs	r3, r0
 8007762:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	2118      	movs	r1, #24
 8007768:	0018      	movs	r0, r3
 800776a:	f7f8 fda1 	bl	80002b0 <__aeabi_uidivmod>
 800776e:	000b      	movs	r3, r1
 8007770:	b2da      	uxtb	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2118      	movs	r1, #24
 800777a:	0018      	movs	r0, r3
 800777c:	f7f8 fd12 	bl	80001a4 <__udivsi3>
 8007780:	0003      	movs	r3, r0
 8007782:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	3b01      	subs	r3, #1
 8007788:	2107      	movs	r1, #7
 800778a:	0018      	movs	r0, r3
 800778c:	f7f8 fd90 	bl	80002b0 <__aeabi_uidivmod>
 8007790:	000b      	movs	r3, r1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	3301      	adds	r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	701a      	strb	r2, [r3, #0]
  year = 0;
 800779c:	231f      	movs	r3, #31
 800779e:	18fb      	adds	r3, r7, r3
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
  days = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80077a8:	e005      	b.n	80077b6 <breakPosixTime+0xa2>
    year++;
 80077aa:	211f      	movs	r1, #31
 80077ac:	187b      	adds	r3, r7, r1
 80077ae:	781a      	ldrb	r2, [r3, #0]
 80077b0:	187b      	adds	r3, r7, r1
 80077b2:	3201      	adds	r2, #1
 80077b4:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80077b6:	241f      	movs	r4, #31
 80077b8:	193b      	adds	r3, r7, r4
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	4a64      	ldr	r2, [pc, #400]	@ (8007950 <breakPosixTime+0x23c>)
 80077be:	4694      	mov	ip, r2
 80077c0:	4463      	add	r3, ip
 80077c2:	001a      	movs	r2, r3
 80077c4:	2303      	movs	r3, #3
 80077c6:	4013      	ands	r3, r2
 80077c8:	d119      	bne.n	80077fe <breakPosixTime+0xea>
 80077ca:	193b      	adds	r3, r7, r4
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	4a60      	ldr	r2, [pc, #384]	@ (8007950 <breakPosixTime+0x23c>)
 80077d0:	4694      	mov	ip, r2
 80077d2:	4463      	add	r3, ip
 80077d4:	2164      	movs	r1, #100	@ 0x64
 80077d6:	0018      	movs	r0, r3
 80077d8:	f7f8 fe54 	bl	8000484 <__aeabi_idivmod>
 80077dc:	1e0b      	subs	r3, r1, #0
 80077de:	d10b      	bne.n	80077f8 <breakPosixTime+0xe4>
 80077e0:	193b      	adds	r3, r7, r4
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	4a5a      	ldr	r2, [pc, #360]	@ (8007950 <breakPosixTime+0x23c>)
 80077e6:	4694      	mov	ip, r2
 80077e8:	4463      	add	r3, ip
 80077ea:	22c8      	movs	r2, #200	@ 0xc8
 80077ec:	0051      	lsls	r1, r2, #1
 80077ee:	0018      	movs	r0, r3
 80077f0:	f7f8 fe48 	bl	8000484 <__aeabi_idivmod>
 80077f4:	1e0b      	subs	r3, r1, #0
 80077f6:	d102      	bne.n	80077fe <breakPosixTime+0xea>
 80077f8:	23b7      	movs	r3, #183	@ 0xb7
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	e001      	b.n	8007802 <breakPosixTime+0xee>
 80077fe:	236e      	movs	r3, #110	@ 0x6e
 8007800:	33ff      	adds	r3, #255	@ 0xff
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	18d3      	adds	r3, r2, r3
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	429a      	cmp	r2, r3
 800780e:	d9cc      	bls.n	80077aa <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	241f      	movs	r4, #31
 8007814:	193a      	adds	r2, r7, r4
 8007816:	7812      	ldrb	r2, [r2, #0]
 8007818:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800781a:	193b      	adds	r3, r7, r4
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	4a4c      	ldr	r2, [pc, #304]	@ (8007950 <breakPosixTime+0x23c>)
 8007820:	4694      	mov	ip, r2
 8007822:	4463      	add	r3, ip
 8007824:	001a      	movs	r2, r3
 8007826:	2303      	movs	r3, #3
 8007828:	4013      	ands	r3, r2
 800782a:	d119      	bne.n	8007860 <breakPosixTime+0x14c>
 800782c:	193b      	adds	r3, r7, r4
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	4a47      	ldr	r2, [pc, #284]	@ (8007950 <breakPosixTime+0x23c>)
 8007832:	4694      	mov	ip, r2
 8007834:	4463      	add	r3, ip
 8007836:	2164      	movs	r1, #100	@ 0x64
 8007838:	0018      	movs	r0, r3
 800783a:	f7f8 fe23 	bl	8000484 <__aeabi_idivmod>
 800783e:	1e0b      	subs	r3, r1, #0
 8007840:	d10b      	bne.n	800785a <breakPosixTime+0x146>
 8007842:	193b      	adds	r3, r7, r4
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	4a42      	ldr	r2, [pc, #264]	@ (8007950 <breakPosixTime+0x23c>)
 8007848:	4694      	mov	ip, r2
 800784a:	4463      	add	r3, ip
 800784c:	22c8      	movs	r2, #200	@ 0xc8
 800784e:	0051      	lsls	r1, r2, #1
 8007850:	0018      	movs	r0, r3
 8007852:	f7f8 fe17 	bl	8000484 <__aeabi_idivmod>
 8007856:	1e0b      	subs	r3, r1, #0
 8007858:	d102      	bne.n	8007860 <breakPosixTime+0x14c>
 800785a:	23b7      	movs	r3, #183	@ 0xb7
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	e001      	b.n	8007864 <breakPosixTime+0x150>
 8007860:	236e      	movs	r3, #110	@ 0x6e
 8007862:	33ff      	adds	r3, #255	@ 0xff
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	61bb      	str	r3, [r7, #24]

  days=0;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
  month=0;
 8007876:	211e      	movs	r1, #30
 8007878:	187b      	adds	r3, r7, r1
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800787e:	231d      	movs	r3, #29
 8007880:	18fb      	adds	r3, r7, r3
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8007886:	187b      	adds	r3, r7, r1
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	e048      	b.n	8007920 <breakPosixTime+0x20c>
    if (month==1) { // february
 800788e:	231e      	movs	r3, #30
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d12a      	bne.n	80078ee <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8007898:	241f      	movs	r4, #31
 800789a:	193b      	adds	r3, r7, r4
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4a2c      	ldr	r2, [pc, #176]	@ (8007950 <breakPosixTime+0x23c>)
 80078a0:	4694      	mov	ip, r2
 80078a2:	4463      	add	r3, ip
 80078a4:	001a      	movs	r2, r3
 80078a6:	2303      	movs	r3, #3
 80078a8:	4013      	ands	r3, r2
 80078aa:	d11b      	bne.n	80078e4 <breakPosixTime+0x1d0>
 80078ac:	193b      	adds	r3, r7, r4
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	4a27      	ldr	r2, [pc, #156]	@ (8007950 <breakPosixTime+0x23c>)
 80078b2:	4694      	mov	ip, r2
 80078b4:	4463      	add	r3, ip
 80078b6:	2164      	movs	r1, #100	@ 0x64
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7f8 fde3 	bl	8000484 <__aeabi_idivmod>
 80078be:	1e0b      	subs	r3, r1, #0
 80078c0:	d10b      	bne.n	80078da <breakPosixTime+0x1c6>
 80078c2:	193b      	adds	r3, r7, r4
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	4a22      	ldr	r2, [pc, #136]	@ (8007950 <breakPosixTime+0x23c>)
 80078c8:	4694      	mov	ip, r2
 80078ca:	4463      	add	r3, ip
 80078cc:	22c8      	movs	r2, #200	@ 0xc8
 80078ce:	0051      	lsls	r1, r2, #1
 80078d0:	0018      	movs	r0, r3
 80078d2:	f7f8 fdd7 	bl	8000484 <__aeabi_idivmod>
 80078d6:	1e0b      	subs	r3, r1, #0
 80078d8:	d104      	bne.n	80078e4 <breakPosixTime+0x1d0>
        monthLength=29;
 80078da:	231d      	movs	r3, #29
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	221d      	movs	r2, #29
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	e00c      	b.n	80078fe <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 80078e4:	231d      	movs	r3, #29
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	221c      	movs	r2, #28
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e007      	b.n	80078fe <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 80078ee:	231e      	movs	r3, #30
 80078f0:	18fb      	adds	r3, r7, r3
 80078f2:	781a      	ldrb	r2, [r3, #0]
 80078f4:	231d      	movs	r3, #29
 80078f6:	18fb      	adds	r3, r7, r3
 80078f8:	4916      	ldr	r1, [pc, #88]	@ (8007954 <breakPosixTime+0x240>)
 80078fa:	5c8a      	ldrb	r2, [r1, r2]
 80078fc:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 80078fe:	211d      	movs	r1, #29
 8007900:	187b      	adds	r3, r7, r1
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	429a      	cmp	r2, r3
 8007908:	d310      	bcc.n	800792c <breakPosixTime+0x218>
      time -= monthLength;
 800790a:	187b      	adds	r3, r7, r1
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007914:	211e      	movs	r1, #30
 8007916:	187b      	adds	r3, r7, r1
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	187b      	adds	r3, r7, r1
 800791c:	3201      	adds	r2, #1
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	231e      	movs	r3, #30
 8007922:	18fb      	adds	r3, r7, r3
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b0b      	cmp	r3, #11
 8007928:	d9b1      	bls.n	800788e <breakPosixTime+0x17a>
 800792a:	e000      	b.n	800792e <breakPosixTime+0x21a>
    } else {
        break;
 800792c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800792e:	231e      	movs	r3, #30
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	b2da      	uxtb	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	3301      	adds	r3, #1
 8007942:	b2da      	uxtb	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	709a      	strb	r2, [r3, #2]
}
 8007948:	46c0      	nop			@ (mov r8, r8)
 800794a:	46bd      	mov	sp, r7
 800794c:	b009      	add	sp, #36	@ 0x24
 800794e:	bd90      	pop	{r4, r7, pc}
 8007950:	000007b2 	.word	0x000007b2
 8007954:	0802659c 	.word	0x0802659c

08007958 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800795e:	003b      	movs	r3, r7
 8007960:	0018      	movs	r0, r3
 8007962:	2308      	movs	r3, #8
 8007964:	001a      	movs	r2, r3
 8007966:	2100      	movs	r1, #0
 8007968:	f019 fa10 	bl	8020d8c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800796c:	4b30      	ldr	r3, [pc, #192]	@ (8007a30 <MX_ADC_Init+0xd8>)
 800796e:	4a31      	ldr	r2, [pc, #196]	@ (8007a34 <MX_ADC_Init+0xdc>)
 8007970:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8007972:	4b2f      	ldr	r3, [pc, #188]	@ (8007a30 <MX_ADC_Init+0xd8>)
 8007974:	2200      	movs	r2, #0
 8007976:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007978:	4b2d      	ldr	r3, [pc, #180]	@ (8007a30 <MX_ADC_Init+0xd8>)
 800797a:	22c0      	movs	r2, #192	@ 0xc0
 800797c:	0612      	lsls	r2, r2, #24
 800797e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007980:	4b2b      	ldr	r3, [pc, #172]	@ (8007a30 <MX_ADC_Init+0xd8>)
 8007982:	2200      	movs	r2, #0
 8007984:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007986:	4b2a      	ldr	r3, [pc, #168]	@ (8007a30 <MX_ADC_Init+0xd8>)
 8007988:	2200      	movs	r2, #0
 800798a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800798c:	4b28      	ldr	r3, [pc, #160]	@ (8007a30 <MX_ADC_Init+0xd8>)
 800798e:	2201      	movs	r2, #1
 8007990:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007992:	4b27      	ldr	r3, [pc, #156]	@ (8007a30 <MX_ADC_Init+0xd8>)
 8007994:	2200      	movs	r2, #0
 8007996:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8007998:	4b25      	ldr	r3, [pc, #148]	@ (8007a30 <MX_ADC_Init+0xd8>)
 800799a:	2220      	movs	r2, #32
 800799c:	2100      	movs	r1, #0
 800799e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80079a0:	4b23      	ldr	r3, [pc, #140]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079a2:	2221      	movs	r2, #33	@ 0x21
 80079a4:	2101      	movs	r1, #1
 80079a6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80079a8:	4b21      	ldr	r3, [pc, #132]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80079ae:	4b20      	ldr	r3, [pc, #128]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079b0:	22c2      	movs	r2, #194	@ 0xc2
 80079b2:	32ff      	adds	r2, #255	@ 0xff
 80079b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80079b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079b8:	222c      	movs	r2, #44	@ 0x2c
 80079ba:	2100      	movs	r1, #0
 80079bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80079be:	4b1c      	ldr	r3, [pc, #112]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079c0:	2204      	movs	r2, #4
 80079c2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80079c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80079ca:	4b19      	ldr	r3, [pc, #100]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80079d0:	4b17      	ldr	r3, [pc, #92]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80079d6:	4b16      	ldr	r3, [pc, #88]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079d8:	2200      	movs	r2, #0
 80079da:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80079dc:	4b14      	ldr	r3, [pc, #80]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079de:	0018      	movs	r0, r3
 80079e0:	f007 ffc2 	bl	800f968 <HAL_ADC_Init>
 80079e4:	1e03      	subs	r3, r0, #0
 80079e6:	d001      	beq.n	80079ec <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80079e8:	f001 f9ac 	bl	8008d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80079ec:	003b      	movs	r3, r7
 80079ee:	4a12      	ldr	r2, [pc, #72]	@ (8007a38 <MX_ADC_Init+0xe0>)
 80079f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80079f2:	003b      	movs	r3, r7
 80079f4:	2280      	movs	r2, #128	@ 0x80
 80079f6:	0152      	lsls	r2, r2, #5
 80079f8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80079fa:	003a      	movs	r2, r7
 80079fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007a30 <MX_ADC_Init+0xd8>)
 80079fe:	0011      	movs	r1, r2
 8007a00:	0018      	movs	r0, r3
 8007a02:	f008 fa21 	bl	800fe48 <HAL_ADC_ConfigChannel>
 8007a06:	1e03      	subs	r3, r0, #0
 8007a08:	d001      	beq.n	8007a0e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007a0a:	f001 f99b 	bl	8008d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007a0e:	003b      	movs	r3, r7
 8007a10:	4a0a      	ldr	r2, [pc, #40]	@ (8007a3c <MX_ADC_Init+0xe4>)
 8007a12:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007a14:	003a      	movs	r2, r7
 8007a16:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <MX_ADC_Init+0xd8>)
 8007a18:	0011      	movs	r1, r2
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f008 fa14 	bl	800fe48 <HAL_ADC_ConfigChannel>
 8007a20:	1e03      	subs	r3, r0, #0
 8007a22:	d001      	beq.n	8007a28 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007a24:	f001 f98e 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007a28:	46c0      	nop			@ (mov r8, r8)
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	b002      	add	sp, #8
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000ad8 	.word	0x20000ad8
 8007a34:	40012400 	.word	0x40012400
 8007a38:	38004000 	.word	0x38004000
 8007a3c:	3c008000 	.word	0x3c008000

08007a40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007a40:	b590      	push	{r4, r7, lr}
 8007a42:	b089      	sub	sp, #36	@ 0x24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a48:	240c      	movs	r4, #12
 8007a4a:	193b      	adds	r3, r7, r4
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	2314      	movs	r3, #20
 8007a50:	001a      	movs	r2, r3
 8007a52:	2100      	movs	r1, #0
 8007a54:	f019 f99a 	bl	8020d8c <memset>
  if(adcHandle->Instance==ADC1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a14      	ldr	r2, [pc, #80]	@ (8007ab0 <HAL_ADC_MspInit+0x70>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d121      	bne.n	8007aa6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007a62:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <HAL_ADC_MspInit+0x74>)
 8007a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a66:	4b13      	ldr	r3, [pc, #76]	@ (8007ab4 <HAL_ADC_MspInit+0x74>)
 8007a68:	2180      	movs	r1, #128	@ 0x80
 8007a6a:	0089      	lsls	r1, r1, #2
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a70:	4b10      	ldr	r3, [pc, #64]	@ (8007ab4 <HAL_ADC_MspInit+0x74>)
 8007a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a74:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab4 <HAL_ADC_MspInit+0x74>)
 8007a76:	2104      	movs	r1, #4
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <HAL_ADC_MspInit+0x74>)
 8007a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a80:	2204      	movs	r2, #4
 8007a82:	4013      	ands	r3, r2
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007a88:	193b      	adds	r3, r7, r4
 8007a8a:	2230      	movs	r2, #48	@ 0x30
 8007a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007a8e:	193b      	adds	r3, r7, r4
 8007a90:	2203      	movs	r2, #3
 8007a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a94:	193b      	adds	r3, r7, r4
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a9a:	193b      	adds	r3, r7, r4
 8007a9c:	4a06      	ldr	r2, [pc, #24]	@ (8007ab8 <HAL_ADC_MspInit+0x78>)
 8007a9e:	0019      	movs	r1, r3
 8007aa0:	0010      	movs	r0, r2
 8007aa2:	f008 ffef 	bl	8010a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007aa6:	46c0      	nop			@ (mov r8, r8)
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	b009      	add	sp, #36	@ 0x24
 8007aac:	bd90      	pop	{r4, r7, pc}
 8007aae:	46c0      	nop			@ (mov r8, r8)
 8007ab0:	40012400 	.word	0x40012400
 8007ab4:	40021000 	.word	0x40021000
 8007ab8:	50000800 	.word	0x50000800

08007abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007ac2:	4b10      	ldr	r3, [pc, #64]	@ (8007b04 <MX_DMA_Init+0x48>)
 8007ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b04 <MX_DMA_Init+0x48>)
 8007ac8:	2101      	movs	r1, #1
 8007aca:	430a      	orrs	r2, r1
 8007acc:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ace:	4b0d      	ldr	r3, [pc, #52]	@ (8007b04 <MX_DMA_Init+0x48>)
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	607b      	str	r3, [r7, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007ada:	2200      	movs	r2, #0
 8007adc:	2100      	movs	r1, #0
 8007ade:	200a      	movs	r0, #10
 8007ae0:	f008 fb7e 	bl	80101e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007ae4:	200a      	movs	r0, #10
 8007ae6:	f008 fb90 	bl	801020a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8007aea:	2200      	movs	r2, #0
 8007aec:	2103      	movs	r1, #3
 8007aee:	200b      	movs	r0, #11
 8007af0:	f008 fb76 	bl	80101e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007af4:	200b      	movs	r0, #11
 8007af6:	f008 fb88 	bl	801020a <HAL_NVIC_EnableIRQ>

}
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	46bd      	mov	sp, r7
 8007afe:	b002      	add	sp, #8
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	46c0      	nop			@ (mov r8, r8)
 8007b04:	40021000 	.word	0x40021000

08007b08 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8007b08:	b590      	push	{r4, r7, lr}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	1dbb      	adds	r3, r7, #6
 8007b14:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 8007b16:	4b17      	ldr	r3, [pc, #92]	@ (8007b74 <WriteUint8ArrayEeprom+0x6c>)
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8007b1c:	f008 fef2 	bl	8010904 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8007b20:	2316      	movs	r3, #22
 8007b22:	18fb      	adds	r3, r7, r3
 8007b24:	2200      	movs	r2, #0
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	e015      	b.n	8007b56 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8007b2a:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <WriteUint8ArrayEeprom+0x6c>)
 8007b2c:	6819      	ldr	r1, [r3, #0]
 8007b2e:	2416      	movs	r4, #22
 8007b30:	193b      	adds	r3, r7, r4
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	18d3      	adds	r3, r2, r3
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	001a      	movs	r2, r3
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f008 ff49 	bl	80109d4 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <WriteUint8ArrayEeprom+0x6c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	4b0a      	ldr	r3, [pc, #40]	@ (8007b74 <WriteUint8ArrayEeprom+0x6c>)
 8007b4a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007b4c:	193b      	adds	r3, r7, r4
 8007b4e:	881a      	ldrh	r2, [r3, #0]
 8007b50:	193b      	adds	r3, r7, r4
 8007b52:	3201      	adds	r2, #1
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	2316      	movs	r3, #22
 8007b58:	18fa      	adds	r2, r7, r3
 8007b5a:	1dbb      	adds	r3, r7, #6
 8007b5c:	8812      	ldrh	r2, [r2, #0]
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d3e2      	bcc.n	8007b2a <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8007b64:	f008 fefc 	bl	8010960 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 8007b68:	4b02      	ldr	r3, [pc, #8]	@ (8007b74 <WriteUint8ArrayEeprom+0x6c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
}
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b007      	add	sp, #28
 8007b72:	bd90      	pop	{r4, r7, pc}
 8007b74:	20000b34 	.word	0x20000b34

08007b78 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	0019      	movs	r1, r3
 8007b84:	1dbb      	adds	r3, r7, #6
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	1d3b      	adds	r3, r7, #4
 8007b8a:	1c0a      	adds	r2, r1, #0
 8007b8c:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 8007b8e:	1dba      	adds	r2, r7, #6
 8007b90:	1d3b      	adds	r3, r7, #4
 8007b92:	8812      	ldrh	r2, [r2, #0]
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d806      	bhi.n	8007ba8 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 8007b9a:	1dbb      	adds	r3, r7, #6
 8007b9c:	881a      	ldrh	r2, [r3, #0]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f7ff ffb0 	bl	8007b08 <WriteUint8ArrayEeprom>
    }
}
 8007ba8:	46c0      	nop			@ (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b004      	add	sp, #16
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	1dbb      	adds	r3, r7, #6
 8007bbc:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007bbe:	2316      	movs	r3, #22
 8007bc0:	18fb      	adds	r3, r7, r3
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	801a      	strh	r2, [r3, #0]
 8007bc6:	e010      	b.n	8007bea <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8007bc8:	2016      	movs	r0, #22
 8007bca:	183b      	adds	r3, r7, r0
 8007bcc:	881a      	ldrh	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	18d3      	adds	r3, r2, r3
 8007bd2:	0019      	movs	r1, r3
 8007bd4:	183b      	adds	r3, r7, r0
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	18d3      	adds	r3, r2, r3
 8007bdc:	780a      	ldrb	r2, [r1, #0]
 8007bde:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007be0:	183b      	adds	r3, r7, r0
 8007be2:	881a      	ldrh	r2, [r3, #0]
 8007be4:	183b      	adds	r3, r7, r0
 8007be6:	3201      	adds	r2, #1
 8007be8:	801a      	strh	r2, [r3, #0]
 8007bea:	2316      	movs	r3, #22
 8007bec:	18fa      	adds	r2, r7, r3
 8007bee:	1dbb      	adds	r3, r7, #6
 8007bf0:	8812      	ldrh	r2, [r2, #0]
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d3e7      	bcc.n	8007bc8 <ReadUint8ArrayEEprom+0x18>
    }
}
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	46c0      	nop			@ (mov r8, r8)
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b006      	add	sp, #24
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8007c02:	b590      	push	{r4, r7, lr}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	000a      	movs	r2, r1
 8007c0c:	1cbb      	adds	r3, r7, #2
 8007c0e:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8007c10:	f008 fe78 	bl	8010904 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8007c14:	230e      	movs	r3, #14
 8007c16:	18fb      	adds	r3, r7, r3
 8007c18:	2200      	movs	r2, #0
 8007c1a:	801a      	strh	r2, [r3, #0]
 8007c1c:	e00c      	b.n	8007c38 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8007c1e:	240e      	movs	r4, #14
 8007c20:	193b      	adds	r3, r7, r4
 8007c22:	881a      	ldrh	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	18d3      	adds	r3, r2, r3
 8007c28:	0018      	movs	r0, r3
 8007c2a:	f008 fea7 	bl	801097c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8007c2e:	193b      	adds	r3, r7, r4
 8007c30:	193a      	adds	r2, r7, r4
 8007c32:	8812      	ldrh	r2, [r2, #0]
 8007c34:	3204      	adds	r2, #4
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	230e      	movs	r3, #14
 8007c3a:	18fa      	adds	r2, r7, r3
 8007c3c:	1cbb      	adds	r3, r7, #2
 8007c3e:	8812      	ldrh	r2, [r2, #0]
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d3eb      	bcc.n	8007c1e <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8007c46:	f008 fe8b 	bl	8010960 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8007c4a:	46c0      	nop			@ (mov r8, r8)
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b005      	add	sp, #20
 8007c50:	bd90      	pop	{r4, r7, pc}
	...

08007c54 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c64:	d901      	bls.n	8007c6a <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8007c66:	237f      	movs	r3, #127	@ 0x7f
 8007c68:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8007c6a:	2017      	movs	r0, #23
 8007c6c:	183b      	adds	r3, r7, r0
 8007c6e:	490d      	ldr	r1, [pc, #52]	@ (8007ca4 <accessLUT10log10+0x50>)
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	188a      	adds	r2, r1, r2
 8007c74:	7812      	ldrb	r2, [r2, #0]
 8007c76:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007c78:	0001      	movs	r1, r0
 8007c7a:	187b      	adds	r3, r7, r1
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2206      	movs	r2, #6
 8007c80:	4113      	asrs	r3, r2
 8007c82:	001a      	movs	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007c88:	187b      	adds	r3, r7, r1
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2106      	movs	r1, #6
 8007c92:	408b      	lsls	r3, r1
 8007c94:	1ad2      	subs	r2, r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
}
 8007c9a:	46c0      	nop			@ (mov r8, r8)
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b006      	add	sp, #24
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	46c0      	nop			@ (mov r8, r8)
 8007ca4:	080265a8 	.word	0x080265a8

08007ca8 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8007ca8:	b5b0      	push	{r4, r5, r7, lr}
 8007caa:	b090      	sub	sp, #64	@ 0x40
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6138      	str	r0, [r7, #16]
 8007cb0:	6179      	str	r1, [r7, #20]
 8007cb2:	60fa      	str	r2, [r7, #12]
 8007cb4:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	001a      	movs	r2, r3
 8007cba:	3a20      	subs	r2, #32
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	db03      	blt.n	8007cc8 <efficient10log10+0x20>
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4091      	lsls	r1, r2
 8007cc4:	000d      	movs	r5, r1
 8007cc6:	e008      	b.n	8007cda <efficient10log10+0x32>
 8007cc8:	2220      	movs	r2, #32
 8007cca:	1ad2      	subs	r2, r2, r3
 8007ccc:	2101      	movs	r1, #1
 8007cce:	40d1      	lsrs	r1, r2
 8007cd0:	000a      	movs	r2, r1
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	4099      	lsls	r1, r3
 8007cd6:	000d      	movs	r5, r1
 8007cd8:	4315      	orrs	r5, r2
 8007cda:	2201      	movs	r2, #1
 8007cdc:	409a      	lsls	r2, r3
 8007cde:	0014      	movs	r4, r2
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4252      	negs	r2, r2
 8007ce4:	17d3      	asrs	r3, r2, #31
 8007ce6:	1912      	adds	r2, r2, r4
 8007ce8:	416b      	adcs	r3, r5
 8007cea:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cec:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8007cee:	2336      	movs	r3, #54	@ 0x36
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	19db      	adds	r3, r3, r7
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007cfa:	e017      	b.n	8007d2c <efficient10log10+0x84>
    {
        P = P >> 1;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	07db      	lsls	r3, r3, #31
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	0852      	lsrs	r2, r2, #1
 8007d04:	603a      	str	r2, [r7, #0]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	603a      	str	r2, [r7, #0]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	607b      	str	r3, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	687c      	ldr	r4, [r7, #4]
 8007d16:	613b      	str	r3, [r7, #16]
 8007d18:	617c      	str	r4, [r7, #20]
        bShift++;
 8007d1a:	2136      	movs	r1, #54	@ 0x36
 8007d1c:	2008      	movs	r0, #8
 8007d1e:	180b      	adds	r3, r1, r0
 8007d20:	19db      	adds	r3, r3, r7
 8007d22:	881a      	ldrh	r2, [r3, #0]
 8007d24:	180b      	adds	r3, r1, r0
 8007d26:	19db      	adds	r3, r3, r7
 8007d28:	3201      	adds	r2, #1
 8007d2a:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d8e3      	bhi.n	8007cfc <efficient10log10+0x54>
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d103      	bne.n	8007d44 <efficient10log10+0x9c>
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d8db      	bhi.n	8007cfc <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	2308      	movs	r3, #8
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4099      	lsls	r1, r3
 8007d4e:	000b      	movs	r3, r1
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007d5c:	231c      	movs	r3, #28
 8007d5e:	2408      	movs	r4, #8
 8007d60:	191b      	adds	r3, r3, r4
 8007d62:	19da      	adds	r2, r3, r7
 8007d64:	2320      	movs	r3, #32
 8007d66:	191b      	adds	r3, r3, r4
 8007d68:	19d9      	adds	r1, r3, r7
 8007d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f7ff ff71 	bl	8007c54 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007d72:	2215      	movs	r2, #21
 8007d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d76:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007d78:	2036      	movs	r0, #54	@ 0x36
 8007d7a:	1902      	adds	r2, r0, r4
 8007d7c:	19d2      	adds	r2, r2, r7
 8007d7e:	8812      	ldrh	r2, [r2, #0]
 8007d80:	2103      	movs	r1, #3
 8007d82:	434a      	muls	r2, r1
 8007d84:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007d86:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007d88:	0021      	movs	r1, r4
 8007d8a:	1843      	adds	r3, r0, r1
 8007d8c:	19db      	adds	r3, r3, r7
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	2201      	movs	r2, #1
 8007d92:	4353      	muls	r3, r2
 8007d94:	2203      	movs	r2, #3
 8007d96:	4113      	asrs	r3, r2
 8007d98:	001a      	movs	r2, r3
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007d9e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007da0:	2314      	movs	r3, #20
 8007da2:	185b      	adds	r3, r3, r1
 8007da4:	19da      	adds	r2, r3, r7
 8007da6:	2318      	movs	r3, #24
 8007da8:	185b      	adds	r3, r3, r1
 8007daa:	19db      	adds	r3, r3, r7
 8007dac:	0011      	movs	r1, r2
 8007dae:	0018      	movs	r0, r3
 8007db0:	f000 f80a 	bl	8007dc8 <correctIntFracNumber>
    integerPart[0] = intPart;
 8007db4:	6a3a      	ldr	r2, [r7, #32]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	601a      	str	r2, [r3, #0]
}
 8007dc0:	46c0      	nop			@ (mov r8, r8)
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b010      	add	sp, #64	@ 0x40
 8007dc6:	bdb0      	pop	{r4, r5, r7, pc}

08007dc8 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8007dd2:	e00a      	b.n	8007dea <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3b0a      	subs	r3, #10
 8007de4:	001a      	movs	r2, r3
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	dcf0      	bgt.n	8007dd4 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8007df2:	e00a      	b.n	8007e0a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	1e5a      	subs	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	330a      	adds	r3, #10
 8007e04:	001a      	movs	r2, r3
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3309      	adds	r3, #9
 8007e10:	dbf0      	blt.n	8007df4 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da0f      	bge.n	8007e3a <correctIntFracNumber+0x72>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dd0b      	ble.n	8007e3a <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3b0a      	subs	r3, #10
 8007e32:	001a      	movs	r2, r3
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007e38:	e012      	b.n	8007e60 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	dd0e      	ble.n	8007e60 <correctIntFracNumber+0x98>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	da0a      	bge.n	8007e60 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	1e5a      	subs	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	330a      	adds	r3, #10
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	601a      	str	r2, [r3, #0]
}
 8007e60:	46c0      	nop			@ (mov r8, r8)
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b002      	add	sp, #8
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b08b      	sub	sp, #44	@ 0x2c
 8007e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e6e:	2414      	movs	r4, #20
 8007e70:	193b      	adds	r3, r7, r4
 8007e72:	0018      	movs	r0, r3
 8007e74:	2314      	movs	r3, #20
 8007e76:	001a      	movs	r2, r3
 8007e78:	2100      	movs	r1, #0
 8007e7a:	f018 ff87 	bl	8020d8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e7e:	4b8a      	ldr	r3, [pc, #552]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e82:	4b89      	ldr	r3, [pc, #548]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007e84:	2104      	movs	r1, #4
 8007e86:	430a      	orrs	r2, r1
 8007e88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007e8a:	4b87      	ldr	r3, [pc, #540]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8e:	2204      	movs	r2, #4
 8007e90:	4013      	ands	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007e96:	4b84      	ldr	r3, [pc, #528]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e9a:	4b83      	ldr	r3, [pc, #524]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007e9c:	2180      	movs	r1, #128	@ 0x80
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ea2:	4b81      	ldr	r3, [pc, #516]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea6:	2280      	movs	r2, #128	@ 0x80
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eae:	4b7e      	ldr	r3, [pc, #504]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb2:	4b7d      	ldr	r3, [pc, #500]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007eba:	4b7b      	ldr	r3, [pc, #492]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	60bb      	str	r3, [r7, #8]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ec6:	4b78      	ldr	r3, [pc, #480]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eca:	4b77      	ldr	r3, [pc, #476]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007ecc:	2102      	movs	r1, #2
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ed2:	4b75      	ldr	r3, [pc, #468]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	4013      	ands	r3, r2
 8007eda:	607b      	str	r3, [r7, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ede:	4b72      	ldr	r3, [pc, #456]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee2:	4b71      	ldr	r3, [pc, #452]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007eea:	4b6f      	ldr	r3, [pc, #444]	@ (80080a8 <MX_GPIO_Init+0x240>)
 8007eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eee:	2208      	movs	r2, #8
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80080ac <MX_GPIO_Init+0x244>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	2101      	movs	r1, #1
 8007efc:	0018      	movs	r0, r3
 8007efe:	f008 ff5c 	bl	8010dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8007f02:	4b6a      	ldr	r3, [pc, #424]	@ (80080ac <MX_GPIO_Init+0x244>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	2102      	movs	r1, #2
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f008 ff56 	bl	8010dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007f0e:	4968      	ldr	r1, [pc, #416]	@ (80080b0 <MX_GPIO_Init+0x248>)
 8007f10:	4b68      	ldr	r3, [pc, #416]	@ (80080b4 <MX_GPIO_Init+0x24c>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	0018      	movs	r0, r3
 8007f16:	f008 ff50 	bl	8010dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007f1a:	2380      	movs	r3, #128	@ 0x80
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	4866      	ldr	r0, [pc, #408]	@ (80080b8 <MX_GPIO_Init+0x250>)
 8007f20:	2201      	movs	r2, #1
 8007f22:	0019      	movs	r1, r3
 8007f24:	f008 ff49 	bl	8010dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007f28:	2380      	movs	r3, #128	@ 0x80
 8007f2a:	015b      	lsls	r3, r3, #5
 8007f2c:	4862      	ldr	r0, [pc, #392]	@ (80080b8 <MX_GPIO_Init+0x250>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	0019      	movs	r1, r3
 8007f32:	f008 ff42 	bl	8010dba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007f36:	193b      	adds	r3, r7, r4
 8007f38:	4a60      	ldr	r2, [pc, #384]	@ (80080bc <MX_GPIO_Init+0x254>)
 8007f3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f3c:	193b      	adds	r3, r7, r4
 8007f3e:	2203      	movs	r2, #3
 8007f40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f42:	193b      	adds	r3, r7, r4
 8007f44:	2200      	movs	r2, #0
 8007f46:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f48:	193b      	adds	r3, r7, r4
 8007f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80080b8 <MX_GPIO_Init+0x250>)
 8007f4c:	0019      	movs	r1, r3
 8007f4e:	0010      	movs	r0, r2
 8007f50:	f008 fd98 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007f54:	193b      	adds	r3, r7, r4
 8007f56:	2203      	movs	r2, #3
 8007f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f5a:	193b      	adds	r3, r7, r4
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f60:	193b      	adds	r3, r7, r4
 8007f62:	2200      	movs	r2, #0
 8007f64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f66:	193b      	adds	r3, r7, r4
 8007f68:	2200      	movs	r2, #0
 8007f6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007f6c:	193b      	adds	r3, r7, r4
 8007f6e:	4a4f      	ldr	r2, [pc, #316]	@ (80080ac <MX_GPIO_Init+0x244>)
 8007f70:	0019      	movs	r1, r3
 8007f72:	0010      	movs	r0, r2
 8007f74:	f008 fd86 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007f78:	193b      	adds	r3, r7, r4
 8007f7a:	2270      	movs	r2, #112	@ 0x70
 8007f7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f7e:	193b      	adds	r3, r7, r4
 8007f80:	2203      	movs	r2, #3
 8007f82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f84:	193b      	adds	r3, r7, r4
 8007f86:	2200      	movs	r2, #0
 8007f88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f8a:	193a      	adds	r2, r7, r4
 8007f8c:	23a0      	movs	r3, #160	@ 0xa0
 8007f8e:	05db      	lsls	r3, r3, #23
 8007f90:	0011      	movs	r1, r2
 8007f92:	0018      	movs	r0, r3
 8007f94:	f008 fd76 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007f98:	193b      	adds	r3, r7, r4
 8007f9a:	22c0      	movs	r2, #192	@ 0xc0
 8007f9c:	0052      	lsls	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fa0:	193b      	adds	r3, r7, r4
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fa6:	193b      	adds	r3, r7, r4
 8007fa8:	2200      	movs	r2, #0
 8007faa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fac:	193a      	adds	r2, r7, r4
 8007fae:	23a0      	movs	r3, #160	@ 0xa0
 8007fb0:	05db      	lsls	r3, r3, #23
 8007fb2:	0011      	movs	r1, r2
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	f008 fd65 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8007fba:	193b      	adds	r3, r7, r4
 8007fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80080b0 <MX_GPIO_Init+0x248>)
 8007fbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007fc0:	193b      	adds	r3, r7, r4
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc6:	193b      	adds	r3, r7, r4
 8007fc8:	2200      	movs	r2, #0
 8007fca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fcc:	193b      	adds	r3, r7, r4
 8007fce:	2200      	movs	r2, #0
 8007fd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fd2:	193b      	adds	r3, r7, r4
 8007fd4:	4a37      	ldr	r2, [pc, #220]	@ (80080b4 <MX_GPIO_Init+0x24c>)
 8007fd6:	0019      	movs	r1, r3
 8007fd8:	0010      	movs	r0, r2
 8007fda:	f008 fd53 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8007fde:	193b      	adds	r3, r7, r4
 8007fe0:	4a37      	ldr	r2, [pc, #220]	@ (80080c0 <MX_GPIO_Init+0x258>)
 8007fe2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fe4:	193b      	adds	r3, r7, r4
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fea:	193b      	adds	r3, r7, r4
 8007fec:	2200      	movs	r2, #0
 8007fee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ff0:	193b      	adds	r3, r7, r4
 8007ff2:	4a30      	ldr	r2, [pc, #192]	@ (80080b4 <MX_GPIO_Init+0x24c>)
 8007ff4:	0019      	movs	r1, r3
 8007ff6:	0010      	movs	r0, r2
 8007ff8:	f008 fd44 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007ffc:	0021      	movs	r1, r4
 8007ffe:	187b      	adds	r3, r7, r1
 8008000:	2280      	movs	r2, #128	@ 0x80
 8008002:	0092      	lsls	r2, r2, #2
 8008004:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008006:	000c      	movs	r4, r1
 8008008:	193b      	adds	r3, r7, r4
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800800e:	193b      	adds	r3, r7, r4
 8008010:	2200      	movs	r2, #0
 8008012:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8008014:	193b      	adds	r3, r7, r4
 8008016:	4a28      	ldr	r2, [pc, #160]	@ (80080b8 <MX_GPIO_Init+0x250>)
 8008018:	0019      	movs	r1, r3
 800801a:	0010      	movs	r0, r2
 800801c:	f008 fd32 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8008020:	193b      	adds	r3, r7, r4
 8008022:	2280      	movs	r2, #128	@ 0x80
 8008024:	0212      	lsls	r2, r2, #8
 8008026:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008028:	193b      	adds	r3, r7, r4
 800802a:	2288      	movs	r2, #136	@ 0x88
 800802c:	0352      	lsls	r2, r2, #13
 800802e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008030:	193b      	adds	r3, r7, r4
 8008032:	2200      	movs	r2, #0
 8008034:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8008036:	193a      	adds	r2, r7, r4
 8008038:	23a0      	movs	r3, #160	@ 0xa0
 800803a:	05db      	lsls	r3, r3, #23
 800803c:	0011      	movs	r1, r2
 800803e:	0018      	movs	r0, r3
 8008040:	f008 fd20 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8008044:	0021      	movs	r1, r4
 8008046:	187b      	adds	r3, r7, r1
 8008048:	22c0      	movs	r2, #192	@ 0xc0
 800804a:	0152      	lsls	r2, r2, #5
 800804c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800804e:	000c      	movs	r4, r1
 8008050:	193b      	adds	r3, r7, r4
 8008052:	2201      	movs	r2, #1
 8008054:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008056:	193b      	adds	r3, r7, r4
 8008058:	2200      	movs	r2, #0
 800805a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800805c:	193b      	adds	r3, r7, r4
 800805e:	2200      	movs	r2, #0
 8008060:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008062:	193b      	adds	r3, r7, r4
 8008064:	4a14      	ldr	r2, [pc, #80]	@ (80080b8 <MX_GPIO_Init+0x250>)
 8008066:	0019      	movs	r1, r3
 8008068:	0010      	movs	r0, r2
 800806a:	f008 fd0b 	bl	8010a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800806e:	0021      	movs	r1, r4
 8008070:	187b      	adds	r3, r7, r1
 8008072:	2204      	movs	r2, #4
 8008074:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008076:	187b      	adds	r3, r7, r1
 8008078:	2200      	movs	r2, #0
 800807a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800807c:	187b      	adds	r3, r7, r1
 800807e:	2201      	movs	r2, #1
 8008080:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8008082:	187b      	adds	r3, r7, r1
 8008084:	4a0f      	ldr	r2, [pc, #60]	@ (80080c4 <MX_GPIO_Init+0x25c>)
 8008086:	0019      	movs	r1, r3
 8008088:	0010      	movs	r0, r2
 800808a:	f008 fcfb 	bl	8010a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800808e:	2200      	movs	r2, #0
 8008090:	2100      	movs	r1, #0
 8008092:	2007      	movs	r0, #7
 8008094:	f008 f8a4 	bl	80101e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008098:	2007      	movs	r0, #7
 800809a:	f008 f8b6 	bl	801020a <HAL_NVIC_EnableIRQ>

}
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b00b      	add	sp, #44	@ 0x2c
 80080a4:	bd90      	pop	{r4, r7, pc}
 80080a6:	46c0      	nop			@ (mov r8, r8)
 80080a8:	40021000 	.word	0x40021000
 80080ac:	50001c00 	.word	0x50001c00
 80080b0:	00000301 	.word	0x00000301
 80080b4:	50000400 	.word	0x50000400
 80080b8:	50000800 	.word	0x50000800
 80080bc:	0000200c 	.word	0x0000200c
 80080c0:	0000403e 	.word	0x0000403e
 80080c4:	50000c00 	.word	0x50000c00

080080c8 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2100      	movs	r1, #0
 80080d6:	0018      	movs	r0, r3
 80080d8:	f00f fa4a 	bl	8017570 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2108      	movs	r1, #8
 80080e0:	0018      	movs	r0, r3
 80080e2:	f00f fa45 	bl	8017570 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	210c      	movs	r1, #12
 80080ea:	0018      	movs	r0, r3
 80080ec:	f00f fa40 	bl	8017570 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80080f0:	2380      	movs	r3, #128	@ 0x80
 80080f2:	05db      	lsls	r3, r3, #23
 80080f4:	22fa      	movs	r2, #250	@ 0xfa
 80080f6:	0112      	lsls	r2, r2, #4
 80080f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80080fa:	2380      	movs	r3, #128	@ 0x80
 80080fc:	05db      	lsls	r3, r3, #23
 80080fe:	22fa      	movs	r2, #250	@ 0xfa
 8008100:	0112      	lsls	r2, r2, #4
 8008102:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8008104:	2380      	movs	r3, #128	@ 0x80
 8008106:	05db      	lsls	r3, r3, #23
 8008108:	22fa      	movs	r2, #250	@ 0xfa
 800810a:	0112      	lsls	r2, r2, #4
 800810c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800810e:	2380      	movs	r3, #128	@ 0x80
 8008110:	05db      	lsls	r3, r3, #23
 8008112:	22fa      	movs	r2, #250	@ 0xfa
 8008114:	0112      	lsls	r2, r2, #4
 8008116:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2100      	movs	r1, #0
 800811c:	0018      	movs	r0, r3
 800811e:	f00f fa27 	bl	8017570 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2104      	movs	r1, #4
 8008126:	0018      	movs	r0, r3
 8008128:	f00f fa22 	bl	8017570 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2108      	movs	r1, #8
 8008130:	0018      	movs	r0, r3
 8008132:	f00f fa1d 	bl	8017570 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8008136:	4b0a      	ldr	r3, [pc, #40]	@ (8008160 <GPIO_InitPWMLEDs+0x98>)
 8008138:	22fa      	movs	r2, #250	@ 0xfa
 800813a:	0112      	lsls	r2, r2, #4
 800813c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800813e:	4b08      	ldr	r3, [pc, #32]	@ (8008160 <GPIO_InitPWMLEDs+0x98>)
 8008140:	22fa      	movs	r2, #250	@ 0xfa
 8008142:	0112      	lsls	r2, r2, #4
 8008144:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8008146:	4b06      	ldr	r3, [pc, #24]	@ (8008160 <GPIO_InitPWMLEDs+0x98>)
 8008148:	22fa      	movs	r2, #250	@ 0xfa
 800814a:	0112      	lsls	r2, r2, #4
 800814c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800814e:	4b04      	ldr	r3, [pc, #16]	@ (8008160 <GPIO_InitPWMLEDs+0x98>)
 8008150:	22fa      	movs	r2, #250	@ 0xfa
 8008152:	0112      	lsls	r2, r2, #4
 8008154:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008156:	46c0      	nop			@ (mov r8, r8)
 8008158:	46bd      	mov	sp, r7
 800815a:	b002      	add	sp, #8
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			@ (mov r8, r8)
 8008160:	40000400 	.word	0x40000400

08008164 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	0018      	movs	r0, r3
 800816e:	2314      	movs	r3, #20
 8008170:	001a      	movs	r2, r3
 8008172:	2100      	movs	r1, #0
 8008174:	f018 fe0a 	bl	8020d8c <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8008178:	1d3b      	adds	r3, r7, #4
 800817a:	2205      	movs	r2, #5
 800817c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800817e:	1d3b      	adds	r3, r7, #4
 8008180:	2203      	movs	r2, #3
 8008182:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008184:	1d3b      	adds	r3, r7, #4
 8008186:	2200      	movs	r2, #0
 8008188:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800818a:	1d3a      	adds	r2, r7, #4
 800818c:	23a0      	movs	r3, #160	@ 0xa0
 800818e:	05db      	lsls	r3, r3, #23
 8008190:	0011      	movs	r1, r2
 8008192:	0018      	movs	r0, r3
 8008194:	f008 fc76 	bl	8010a84 <HAL_GPIO_Init>
}
 8008198:	46c0      	nop			@ (mov r8, r8)
 800819a:	46bd      	mov	sp, r7
 800819c:	b006      	add	sp, #24
 800819e:	bd80      	pop	{r7, pc}

080081a0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80081a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008218 <MX_I2C1_Init+0x78>)
 80081a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80081aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081ac:	4a1b      	ldr	r2, [pc, #108]	@ (800821c <MX_I2C1_Init+0x7c>)
 80081ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80081b0:	4b18      	ldr	r3, [pc, #96]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80081b6:	4b17      	ldr	r3, [pc, #92]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081b8:	2201      	movs	r2, #1
 80081ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80081bc:	4b15      	ldr	r3, [pc, #84]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081be:	2200      	movs	r2, #0
 80081c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80081c2:	4b14      	ldr	r3, [pc, #80]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80081c8:	4b12      	ldr	r3, [pc, #72]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80081ce:	4b11      	ldr	r3, [pc, #68]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80081d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80081da:	4b0e      	ldr	r3, [pc, #56]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081dc:	0018      	movs	r0, r3
 80081de:	f008 fe25 	bl	8010e2c <HAL_I2C_Init>
 80081e2:	1e03      	subs	r3, r0, #0
 80081e4:	d001      	beq.n	80081ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80081e6:	f000 fdad 	bl	8008d44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80081ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081ec:	2100      	movs	r1, #0
 80081ee:	0018      	movs	r0, r3
 80081f0:	f00b f9f6 	bl	80135e0 <HAL_I2CEx_ConfigAnalogFilter>
 80081f4:	1e03      	subs	r3, r0, #0
 80081f6:	d001      	beq.n	80081fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80081f8:	f000 fda4 	bl	8008d44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80081fc:	4b05      	ldr	r3, [pc, #20]	@ (8008214 <MX_I2C1_Init+0x74>)
 80081fe:	2100      	movs	r1, #0
 8008200:	0018      	movs	r0, r3
 8008202:	f00b fa39 	bl	8013678 <HAL_I2CEx_ConfigDigitalFilter>
 8008206:	1e03      	subs	r3, r0, #0
 8008208:	d001      	beq.n	800820e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800820a:	f000 fd9b 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800820e:	46c0      	nop			@ (mov r8, r8)
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20000b38 	.word	0x20000b38
 8008218:	40005400 	.word	0x40005400
 800821c:	00503d58 	.word	0x00503d58

08008220 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008224:	4b1b      	ldr	r3, [pc, #108]	@ (8008294 <MX_I2C2_Init+0x74>)
 8008226:	4a1c      	ldr	r2, [pc, #112]	@ (8008298 <MX_I2C2_Init+0x78>)
 8008228:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800822a:	4b1a      	ldr	r3, [pc, #104]	@ (8008294 <MX_I2C2_Init+0x74>)
 800822c:	4a1b      	ldr	r2, [pc, #108]	@ (800829c <MX_I2C2_Init+0x7c>)
 800822e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008230:	4b18      	ldr	r3, [pc, #96]	@ (8008294 <MX_I2C2_Init+0x74>)
 8008232:	2200      	movs	r2, #0
 8008234:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008236:	4b17      	ldr	r3, [pc, #92]	@ (8008294 <MX_I2C2_Init+0x74>)
 8008238:	2201      	movs	r2, #1
 800823a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800823c:	4b15      	ldr	r3, [pc, #84]	@ (8008294 <MX_I2C2_Init+0x74>)
 800823e:	2200      	movs	r2, #0
 8008240:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008242:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <MX_I2C2_Init+0x74>)
 8008244:	2200      	movs	r2, #0
 8008246:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008248:	4b12      	ldr	r3, [pc, #72]	@ (8008294 <MX_I2C2_Init+0x74>)
 800824a:	2200      	movs	r2, #0
 800824c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800824e:	4b11      	ldr	r3, [pc, #68]	@ (8008294 <MX_I2C2_Init+0x74>)
 8008250:	2200      	movs	r2, #0
 8008252:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008254:	4b0f      	ldr	r3, [pc, #60]	@ (8008294 <MX_I2C2_Init+0x74>)
 8008256:	2200      	movs	r2, #0
 8008258:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800825a:	4b0e      	ldr	r3, [pc, #56]	@ (8008294 <MX_I2C2_Init+0x74>)
 800825c:	0018      	movs	r0, r3
 800825e:	f008 fde5 	bl	8010e2c <HAL_I2C_Init>
 8008262:	1e03      	subs	r3, r0, #0
 8008264:	d001      	beq.n	800826a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008266:	f000 fd6d 	bl	8008d44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800826a:	4b0a      	ldr	r3, [pc, #40]	@ (8008294 <MX_I2C2_Init+0x74>)
 800826c:	2100      	movs	r1, #0
 800826e:	0018      	movs	r0, r3
 8008270:	f00b f9b6 	bl	80135e0 <HAL_I2CEx_ConfigAnalogFilter>
 8008274:	1e03      	subs	r3, r0, #0
 8008276:	d001      	beq.n	800827c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008278:	f000 fd64 	bl	8008d44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <MX_I2C2_Init+0x74>)
 800827e:	2100      	movs	r1, #0
 8008280:	0018      	movs	r0, r3
 8008282:	f00b f9f9 	bl	8013678 <HAL_I2CEx_ConfigDigitalFilter>
 8008286:	1e03      	subs	r3, r0, #0
 8008288:	d001      	beq.n	800828e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800828a:	f000 fd5b 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800828e:	46c0      	nop			@ (mov r8, r8)
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000b8c 	.word	0x20000b8c
 8008298:	40005800 	.word	0x40005800
 800829c:	00503d58 	.word	0x00503d58

080082a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80082a0:	b590      	push	{r4, r7, lr}
 80082a2:	b08b      	sub	sp, #44	@ 0x2c
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a8:	2414      	movs	r4, #20
 80082aa:	193b      	adds	r3, r7, r4
 80082ac:	0018      	movs	r0, r3
 80082ae:	2314      	movs	r3, #20
 80082b0:	001a      	movs	r2, r3
 80082b2:	2100      	movs	r1, #0
 80082b4:	f018 fd6a 	bl	8020d8c <memset>
  if(i2cHandle->Instance==I2C1)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a5d      	ldr	r2, [pc, #372]	@ (8008434 <HAL_I2C_MspInit+0x194>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d000      	beq.n	80082c4 <HAL_I2C_MspInit+0x24>
 80082c2:	e083      	b.n	80083cc <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082c4:	4b5c      	ldr	r3, [pc, #368]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 80082c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c8:	4b5b      	ldr	r3, [pc, #364]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 80082ca:	2102      	movs	r1, #2
 80082cc:	430a      	orrs	r2, r1
 80082ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80082d0:	4b59      	ldr	r3, [pc, #356]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	2202      	movs	r2, #2
 80082d6:	4013      	ands	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
 80082da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80082dc:	0021      	movs	r1, r4
 80082de:	187b      	adds	r3, r7, r1
 80082e0:	22c0      	movs	r2, #192	@ 0xc0
 80082e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80082e4:	187b      	adds	r3, r7, r1
 80082e6:	2212      	movs	r2, #18
 80082e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ea:	187b      	adds	r3, r7, r1
 80082ec:	2200      	movs	r2, #0
 80082ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082f0:	187b      	adds	r3, r7, r1
 80082f2:	2203      	movs	r2, #3
 80082f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80082f6:	187b      	adds	r3, r7, r1
 80082f8:	2201      	movs	r2, #1
 80082fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082fc:	187b      	adds	r3, r7, r1
 80082fe:	4a4f      	ldr	r2, [pc, #316]	@ (800843c <HAL_I2C_MspInit+0x19c>)
 8008300:	0019      	movs	r1, r3
 8008302:	0010      	movs	r0, r2
 8008304:	f008 fbbe 	bl	8010a84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008308:	4b4b      	ldr	r3, [pc, #300]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 800830a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800830c:	4b4a      	ldr	r3, [pc, #296]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 800830e:	2180      	movs	r1, #128	@ 0x80
 8008310:	0389      	lsls	r1, r1, #14
 8008312:	430a      	orrs	r2, r1
 8008314:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8008316:	4b4a      	ldr	r3, [pc, #296]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 8008318:	4a4a      	ldr	r2, [pc, #296]	@ (8008444 <HAL_I2C_MspInit+0x1a4>)
 800831a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800831c:	4b48      	ldr	r3, [pc, #288]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 800831e:	2206      	movs	r2, #6
 8008320:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008322:	4b47      	ldr	r3, [pc, #284]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 8008324:	2200      	movs	r2, #0
 8008326:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008328:	4b45      	ldr	r3, [pc, #276]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 800832a:	2200      	movs	r2, #0
 800832c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800832e:	4b44      	ldr	r3, [pc, #272]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 8008330:	2280      	movs	r2, #128	@ 0x80
 8008332:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008334:	4b42      	ldr	r3, [pc, #264]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 8008336:	2200      	movs	r2, #0
 8008338:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800833a:	4b41      	ldr	r3, [pc, #260]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 800833c:	2200      	movs	r2, #0
 800833e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8008340:	4b3f      	ldr	r3, [pc, #252]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 8008342:	2200      	movs	r2, #0
 8008344:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008346:	4b3e      	ldr	r3, [pc, #248]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 8008348:	2200      	movs	r2, #0
 800834a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800834c:	4b3c      	ldr	r3, [pc, #240]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 800834e:	0018      	movs	r0, r3
 8008350:	f007 ff7c 	bl	801024c <HAL_DMA_Init>
 8008354:	1e03      	subs	r3, r0, #0
 8008356:	d001      	beq.n	800835c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8008358:	f000 fcf4 	bl	8008d44 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a38      	ldr	r2, [pc, #224]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 8008360:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008362:	4b37      	ldr	r3, [pc, #220]	@ (8008440 <HAL_I2C_MspInit+0x1a0>)
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8008368:	4b37      	ldr	r3, [pc, #220]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 800836a:	4a38      	ldr	r2, [pc, #224]	@ (800844c <HAL_I2C_MspInit+0x1ac>)
 800836c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800836e:	4b36      	ldr	r3, [pc, #216]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 8008370:	2206      	movs	r2, #6
 8008372:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008374:	4b34      	ldr	r3, [pc, #208]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 8008376:	2210      	movs	r2, #16
 8008378:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800837a:	4b33      	ldr	r3, [pc, #204]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 800837c:	2200      	movs	r2, #0
 800837e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008380:	4b31      	ldr	r3, [pc, #196]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 8008382:	2280      	movs	r2, #128	@ 0x80
 8008384:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008386:	4b30      	ldr	r3, [pc, #192]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 8008388:	2200      	movs	r2, #0
 800838a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800838c:	4b2e      	ldr	r3, [pc, #184]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 800838e:	2200      	movs	r2, #0
 8008390:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008392:	4b2d      	ldr	r3, [pc, #180]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 8008394:	2200      	movs	r2, #0
 8008396:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008398:	4b2b      	ldr	r3, [pc, #172]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 800839a:	2200      	movs	r2, #0
 800839c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800839e:	4b2a      	ldr	r3, [pc, #168]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 80083a0:	0018      	movs	r0, r3
 80083a2:	f007 ff53 	bl	801024c <HAL_DMA_Init>
 80083a6:	1e03      	subs	r3, r0, #0
 80083a8:	d001      	beq.n	80083ae <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80083aa:	f000 fccb 	bl	8008d44 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a25      	ldr	r2, [pc, #148]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 80083b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80083b4:	4b24      	ldr	r3, [pc, #144]	@ (8008448 <HAL_I2C_MspInit+0x1a8>)
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	2017      	movs	r0, #23
 80083c0:	f007 ff0e 	bl	80101e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80083c4:	2017      	movs	r0, #23
 80083c6:	f007 ff20 	bl	801020a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80083ca:	e02e      	b.n	800842a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008450 <HAL_I2C_MspInit+0x1b0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d129      	bne.n	800842a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083d6:	4b18      	ldr	r3, [pc, #96]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 80083d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083da:	4b17      	ldr	r3, [pc, #92]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 80083dc:	2102      	movs	r1, #2
 80083de:	430a      	orrs	r2, r1
 80083e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80083e2:	4b15      	ldr	r3, [pc, #84]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e6:	2202      	movs	r2, #2
 80083e8:	4013      	ands	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80083ee:	2114      	movs	r1, #20
 80083f0:	187b      	adds	r3, r7, r1
 80083f2:	22c0      	movs	r2, #192	@ 0xc0
 80083f4:	0112      	lsls	r2, r2, #4
 80083f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80083f8:	187b      	adds	r3, r7, r1
 80083fa:	2212      	movs	r2, #18
 80083fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083fe:	187b      	adds	r3, r7, r1
 8008400:	2200      	movs	r2, #0
 8008402:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008404:	187b      	adds	r3, r7, r1
 8008406:	2203      	movs	r2, #3
 8008408:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800840a:	187b      	adds	r3, r7, r1
 800840c:	2206      	movs	r2, #6
 800840e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008410:	187b      	adds	r3, r7, r1
 8008412:	4a0a      	ldr	r2, [pc, #40]	@ (800843c <HAL_I2C_MspInit+0x19c>)
 8008414:	0019      	movs	r1, r3
 8008416:	0010      	movs	r0, r2
 8008418:	f008 fb34 	bl	8010a84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800841c:	4b06      	ldr	r3, [pc, #24]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 800841e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008420:	4b05      	ldr	r3, [pc, #20]	@ (8008438 <HAL_I2C_MspInit+0x198>)
 8008422:	2180      	movs	r1, #128	@ 0x80
 8008424:	03c9      	lsls	r1, r1, #15
 8008426:	430a      	orrs	r2, r1
 8008428:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800842a:	46c0      	nop			@ (mov r8, r8)
 800842c:	46bd      	mov	sp, r7
 800842e:	b00b      	add	sp, #44	@ 0x2c
 8008430:	bd90      	pop	{r4, r7, pc}
 8008432:	46c0      	nop			@ (mov r8, r8)
 8008434:	40005400 	.word	0x40005400
 8008438:	40021000 	.word	0x40021000
 800843c:	50000400 	.word	0x50000400
 8008440:	20000be0 	.word	0x20000be0
 8008444:	40020030 	.word	0x40020030
 8008448:	20000c28 	.word	0x20000c28
 800844c:	4002001c 	.word	0x4002001c
 8008450:	40005800 	.word	0x40005800

08008454 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8008458:	4b10      	ldr	r3, [pc, #64]	@ (800849c <MX_I2S2_Init+0x48>)
 800845a:	4a11      	ldr	r2, [pc, #68]	@ (80084a0 <MX_I2S2_Init+0x4c>)
 800845c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800845e:	4b0f      	ldr	r3, [pc, #60]	@ (800849c <MX_I2S2_Init+0x48>)
 8008460:	22c0      	movs	r2, #192	@ 0xc0
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8008466:	4b0d      	ldr	r3, [pc, #52]	@ (800849c <MX_I2S2_Init+0x48>)
 8008468:	2200      	movs	r2, #0
 800846a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800846c:	4b0b      	ldr	r3, [pc, #44]	@ (800849c <MX_I2S2_Init+0x48>)
 800846e:	2203      	movs	r2, #3
 8008470:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8008472:	4b0a      	ldr	r3, [pc, #40]	@ (800849c <MX_I2S2_Init+0x48>)
 8008474:	2200      	movs	r2, #0
 8008476:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8008478:	4b08      	ldr	r3, [pc, #32]	@ (800849c <MX_I2S2_Init+0x48>)
 800847a:	22fa      	movs	r2, #250	@ 0xfa
 800847c:	0192      	lsls	r2, r2, #6
 800847e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8008480:	4b06      	ldr	r3, [pc, #24]	@ (800849c <MX_I2S2_Init+0x48>)
 8008482:	2200      	movs	r2, #0
 8008484:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8008486:	4b05      	ldr	r3, [pc, #20]	@ (800849c <MX_I2S2_Init+0x48>)
 8008488:	0018      	movs	r0, r3
 800848a:	f00b f941 	bl	8013710 <HAL_I2S_Init>
 800848e:	1e03      	subs	r3, r0, #0
 8008490:	d001      	beq.n	8008496 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8008492:	f000 fc57 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8008496:	46c0      	nop			@ (mov r8, r8)
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20000c70 	.word	0x20000c70
 80084a0:	40003800 	.word	0x40003800

080084a4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b089      	sub	sp, #36	@ 0x24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ac:	240c      	movs	r4, #12
 80084ae:	193b      	adds	r3, r7, r4
 80084b0:	0018      	movs	r0, r3
 80084b2:	2314      	movs	r3, #20
 80084b4:	001a      	movs	r2, r3
 80084b6:	2100      	movs	r1, #0
 80084b8:	f018 fc68 	bl	8020d8c <memset>
  if(i2sHandle->Instance==SPI2)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008578 <HAL_I2S_MspInit+0xd4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d154      	bne.n	8008570 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80084c6:	4b2d      	ldr	r3, [pc, #180]	@ (800857c <HAL_I2S_MspInit+0xd8>)
 80084c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ca:	4b2c      	ldr	r3, [pc, #176]	@ (800857c <HAL_I2S_MspInit+0xd8>)
 80084cc:	2180      	movs	r1, #128	@ 0x80
 80084ce:	01c9      	lsls	r1, r1, #7
 80084d0:	430a      	orrs	r2, r1
 80084d2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084d4:	4b29      	ldr	r3, [pc, #164]	@ (800857c <HAL_I2S_MspInit+0xd8>)
 80084d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d8:	4b28      	ldr	r3, [pc, #160]	@ (800857c <HAL_I2S_MspInit+0xd8>)
 80084da:	2102      	movs	r1, #2
 80084dc:	430a      	orrs	r2, r1
 80084de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80084e0:	4b26      	ldr	r3, [pc, #152]	@ (800857c <HAL_I2S_MspInit+0xd8>)
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	2202      	movs	r2, #2
 80084e6:	4013      	ands	r3, r2
 80084e8:	60bb      	str	r3, [r7, #8]
 80084ea:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80084ec:	193b      	adds	r3, r7, r4
 80084ee:	22b0      	movs	r2, #176	@ 0xb0
 80084f0:	0212      	lsls	r2, r2, #8
 80084f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084f4:	0021      	movs	r1, r4
 80084f6:	187b      	adds	r3, r7, r1
 80084f8:	2202      	movs	r2, #2
 80084fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fc:	187b      	adds	r3, r7, r1
 80084fe:	2200      	movs	r2, #0
 8008500:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008502:	187b      	adds	r3, r7, r1
 8008504:	2200      	movs	r2, #0
 8008506:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8008508:	187b      	adds	r3, r7, r1
 800850a:	2200      	movs	r2, #0
 800850c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800850e:	187b      	adds	r3, r7, r1
 8008510:	4a1b      	ldr	r2, [pc, #108]	@ (8008580 <HAL_I2S_MspInit+0xdc>)
 8008512:	0019      	movs	r1, r3
 8008514:	0010      	movs	r0, r2
 8008516:	f008 fab5 	bl	8010a84 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800851a:	4b1a      	ldr	r3, [pc, #104]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 800851c:	4a1a      	ldr	r2, [pc, #104]	@ (8008588 <HAL_I2S_MspInit+0xe4>)
 800851e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8008520:	4b18      	ldr	r3, [pc, #96]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 8008522:	2202      	movs	r2, #2
 8008524:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008526:	4b17      	ldr	r3, [pc, #92]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 8008528:	2200      	movs	r2, #0
 800852a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800852c:	4b15      	ldr	r3, [pc, #84]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 800852e:	2200      	movs	r2, #0
 8008530:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008532:	4b14      	ldr	r3, [pc, #80]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 8008534:	2280      	movs	r2, #128	@ 0x80
 8008536:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008538:	4b12      	ldr	r3, [pc, #72]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 800853a:	2280      	movs	r2, #128	@ 0x80
 800853c:	0052      	lsls	r2, r2, #1
 800853e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008540:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 8008542:	2280      	movs	r2, #128	@ 0x80
 8008544:	00d2      	lsls	r2, r2, #3
 8008546:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8008548:	4b0e      	ldr	r3, [pc, #56]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 800854a:	2220      	movs	r2, #32
 800854c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800854e:	4b0d      	ldr	r3, [pc, #52]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 8008550:	2200      	movs	r2, #0
 8008552:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8008554:	4b0b      	ldr	r3, [pc, #44]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 8008556:	0018      	movs	r0, r3
 8008558:	f007 fe78 	bl	801024c <HAL_DMA_Init>
 800855c:	1e03      	subs	r3, r0, #0
 800855e:	d001      	beq.n	8008564 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8008560:	f000 fbf0 	bl	8008d44 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a07      	ldr	r2, [pc, #28]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 8008568:	631a      	str	r2, [r3, #48]	@ 0x30
 800856a:	4b06      	ldr	r3, [pc, #24]	@ (8008584 <HAL_I2S_MspInit+0xe0>)
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008570:	46c0      	nop			@ (mov r8, r8)
 8008572:	46bd      	mov	sp, r7
 8008574:	b009      	add	sp, #36	@ 0x24
 8008576:	bd90      	pop	{r4, r7, pc}
 8008578:	40003800 	.word	0x40003800
 800857c:	40021000 	.word	0x40021000
 8008580:	50000400 	.word	0x50000400
 8008584:	20000cac 	.word	0x20000cac
 8008588:	40020044 	.word	0x40020044

0800858c <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
  testDone = true;
 8008590:	4b14      	ldr	r3, [pc, #80]	@ (80085e4 <SetTestDone+0x58>)
 8008592:	2201      	movs	r2, #1
 8008594:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8008596:	23fa      	movs	r3, #250	@ 0xfa
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	0018      	movs	r0, r3
 800859c:	f007 f986 	bl	800f8ac <HAL_Delay>
  SetDBLED(false, false, true);
 80085a0:	2201      	movs	r2, #1
 80085a2:	2100      	movs	r1, #0
 80085a4:	2000      	movs	r0, #0
 80085a6:	f005 faff 	bl	800dba8 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 80085aa:	4a0f      	ldr	r2, [pc, #60]	@ (80085e8 <SetTestDone+0x5c>)
 80085ac:	23fa      	movs	r3, #250	@ 0xfa
 80085ae:	0119      	lsls	r1, r3, #4
 80085b0:	23fa      	movs	r3, #250	@ 0xfa
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	0018      	movs	r0, r3
 80085b6:	f005 fac3 	bl	800db40 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 80085ba:	4a0b      	ldr	r2, [pc, #44]	@ (80085e8 <SetTestDone+0x5c>)
 80085bc:	23fa      	movs	r3, #250	@ 0xfa
 80085be:	0119      	lsls	r1, r3, #4
 80085c0:	23fa      	movs	r3, #250	@ 0xfa
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	0018      	movs	r0, r3
 80085c6:	f005 fb39 	bl	800dc3c <SetVocLED>
  HAL_Delay(500);
 80085ca:	23fa      	movs	r3, #250	@ 0xfa
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	0018      	movs	r0, r3
 80085d0:	f007 f96c 	bl	800f8ac <HAL_Delay>
  SetLEDsOff();
 80085d4:	f005 fc72 	bl	800debc <SetLEDsOff>
  InitDone();
 80085d8:	f005 fa06 	bl	800d9e8 <InitDone>
}
 80085dc:	46c0      	nop			@ (mov r8, r8)
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	46c0      	nop			@ (mov r8, r8)
 80085e4:	20000cf4 	.word	0x20000cf4
 80085e8:	00000bb8 	.word	0x00000bb8

080085ec <FlashLEDs>:

void FlashLEDs(){
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 80085f2:	1dfb      	adds	r3, r7, #7
 80085f4:	2200      	movs	r2, #0
 80085f6:	701a      	strb	r2, [r3, #0]
 80085f8:	e021      	b.n	800863e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 80085fa:	2201      	movs	r2, #1
 80085fc:	2101      	movs	r1, #1
 80085fe:	2001      	movs	r0, #1
 8008600:	f005 fad2 	bl	800dba8 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 8008604:	4a12      	ldr	r2, [pc, #72]	@ (8008650 <FlashLEDs+0x64>)
 8008606:	23fa      	movs	r3, #250	@ 0xfa
 8008608:	0119      	lsls	r1, r3, #4
 800860a:	23fa      	movs	r3, #250	@ 0xfa
 800860c:	011b      	lsls	r3, r3, #4
 800860e:	0018      	movs	r0, r3
 8008610:	f005 fa96 	bl	800db40 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 8008614:	4a0e      	ldr	r2, [pc, #56]	@ (8008650 <FlashLEDs+0x64>)
 8008616:	23fa      	movs	r3, #250	@ 0xfa
 8008618:	0119      	lsls	r1, r3, #4
 800861a:	23fa      	movs	r3, #250	@ 0xfa
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	0018      	movs	r0, r3
 8008620:	f005 fb0c 	bl	800dc3c <SetVocLED>
    HAL_Delay(250);
 8008624:	20fa      	movs	r0, #250	@ 0xfa
 8008626:	f007 f941 	bl	800f8ac <HAL_Delay>
    SetLEDsOff();
 800862a:	f005 fc47 	bl	800debc <SetLEDsOff>
    HAL_Delay(250);
 800862e:	20fa      	movs	r0, #250	@ 0xfa
 8008630:	f007 f93c 	bl	800f8ac <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8008634:	1dfb      	adds	r3, r7, #7
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	1dfb      	adds	r3, r7, #7
 800863a:	3201      	adds	r2, #1
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	1dfb      	adds	r3, r7, #7
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b04      	cmp	r3, #4
 8008644:	d9d9      	bls.n	80085fa <FlashLEDs+0xe>
  }
}
 8008646:	46c0      	nop			@ (mov r8, r8)
 8008648:	46c0      	nop			@ (mov r8, r8)
 800864a:	46bd      	mov	sp, r7
 800864c:	b002      	add	sp, #8
 800864e:	bd80      	pop	{r7, pc}
 8008650:	00000bb8 	.word	0x00000bb8

08008654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800865a:	f007 f8b7 	bl	800f7cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800865e:	f000 fa21 	bl	8008aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008662:	f7ff fc01 	bl	8007e68 <MX_GPIO_Init>
  MX_DMA_Init();
 8008666:	f7ff fa29 	bl	8007abc <MX_DMA_Init>
  MX_I2C1_Init();
 800866a:	f7ff fd99 	bl	80081a0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800866e:	f7ff fef1 	bl	8008454 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8008672:	f006 fadf 	bl	800ec34 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8008676:	f7ff fdd3 	bl	8008220 <MX_I2C2_Init>
  MX_TIM2_Init();
 800867a:	f006 f8d3 	bl	800e824 <MX_TIM2_Init>
  MX_TIM3_Init();
 800867e:	f006 f945 	bl	800e90c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8008682:	f006 fb07 	bl	800ec94 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8008686:	f7ff f967 	bl	8007958 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800868a:	f015 f86b 	bl	801d764 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800868e:	f001 f969 	bl	8009964 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8008692:	f006 fa99 	bl	800ebc8 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8008696:	f006 f9b7 	bl	800ea08 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800869a:	4ac9      	ldr	r2, [pc, #804]	@ (80089c0 <main+0x36c>)
 800869c:	4bc9      	ldr	r3, [pc, #804]	@ (80089c4 <main+0x370>)
 800869e:	0011      	movs	r1, r2
 80086a0:	0018      	movs	r0, r3
 80086a2:	f7ff fd11 	bl	80080c8 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 80086a6:	f006 fd37 	bl	800f118 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 80086aa:	f005 ff43 	bl	800e534 <Battery_Upkeep>
 80086ae:	0003      	movs	r3, r0
 80086b0:	001a      	movs	r2, r3
 80086b2:	4bc5      	ldr	r3, [pc, #788]	@ (80089c8 <main+0x374>)
 80086b4:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 80086b6:	4bc4      	ldr	r3, [pc, #784]	@ (80089c8 <main+0x374>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d113      	bne.n	80086e6 <main+0x92>
    SetAllREDLED();
 80086be:	f005 fc19 	bl	800def4 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 80086c2:	f7fe fa6f 	bl	8006ba4 <ReadBatteryVoltage>
 80086c6:	1c03      	adds	r3, r0, #0
 80086c8:	1c18      	adds	r0, r3, #0
 80086ca:	f7fa fecb 	bl	8003464 <__aeabi_f2d>
 80086ce:	0002      	movs	r2, r0
 80086d0:	000b      	movs	r3, r1
 80086d2:	48be      	ldr	r0, [pc, #760]	@ (80089cc <main+0x378>)
 80086d4:	49be      	ldr	r1, [pc, #760]	@ (80089d0 <main+0x37c>)
 80086d6:	9200      	str	r2, [sp, #0]
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	0002      	movs	r2, r0
 80086dc:	2002      	movs	r0, #2
 80086de:	f006 fc97 	bl	800f010 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 80086e2:	f7fe fe71 	bl	80073c8 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 80086e6:	f7fe fb33 	bl	8006d50 <UserButton_Pressed>
 80086ea:	1e03      	subs	r3, r0, #0
 80086ec:	d004      	beq.n	80086f8 <main+0xa4>
    EnableESPProg();
 80086ee:	f015 f909 	bl	801d904 <EnableESPProg>
    ESP_Programming = true;
 80086f2:	4bb8      	ldr	r3, [pc, #736]	@ (80089d4 <main+0x380>)
 80086f4:	2201      	movs	r2, #1
 80086f6:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 80086f8:	2003      	movs	r0, #3
 80086fa:	f006 fcf3 	bl	800f0e4 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80086fe:	49b6      	ldr	r1, [pc, #728]	@ (80089d8 <main+0x384>)
 8008700:	4bb6      	ldr	r3, [pc, #728]	@ (80089dc <main+0x388>)
 8008702:	2201      	movs	r2, #1
 8008704:	0018      	movs	r0, r3
 8008706:	f00f fb93 	bl	8017e30 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800870a:	4bb5      	ldr	r3, [pc, #724]	@ (80089e0 <main+0x38c>)
 800870c:	0018      	movs	r0, r3
 800870e:	f7fe ff29 	bl	8007564 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8008712:	4ab4      	ldr	r2, [pc, #720]	@ (80089e4 <main+0x390>)
 8008714:	49b4      	ldr	r1, [pc, #720]	@ (80089e8 <main+0x394>)
 8008716:	48b5      	ldr	r0, [pc, #724]	@ (80089ec <main+0x398>)
 8008718:	230b      	movs	r3, #11
 800871a:	f004 fadb 	bl	800ccd4 <soundInit>
 800871e:	0003      	movs	r3, r0
 8008720:	001a      	movs	r2, r3
 8008722:	2301      	movs	r3, #1
 8008724:	4053      	eors	r3, r2
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800872c:	4ab0      	ldr	r2, [pc, #704]	@ (80089f0 <main+0x39c>)
 800872e:	4bb1      	ldr	r3, [pc, #708]	@ (80089f4 <main+0x3a0>)
 8008730:	21f9      	movs	r1, #249	@ 0xf9
 8008732:	0018      	movs	r0, r3
 8008734:	f006 fd24 	bl	800f180 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8008738:	4baf      	ldr	r3, [pc, #700]	@ (80089f8 <main+0x3a4>)
 800873a:	4ab0      	ldr	r2, [pc, #704]	@ (80089fc <main+0x3a8>)
 800873c:	49aa      	ldr	r1, [pc, #680]	@ (80089e8 <main+0x394>)
 800873e:	48b0      	ldr	r0, [pc, #704]	@ (8008a00 <main+0x3ac>)
 8008740:	f000 fbc2 	bl	8008ec8 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 8008744:	f007 f8a8 	bl	800f898 <HAL_GetTick>
 8008748:	0003      	movs	r3, r0
 800874a:	4aae      	ldr	r2, [pc, #696]	@ (8008a04 <main+0x3b0>)
 800874c:	189a      	adds	r2, r3, r2
 800874e:	4bae      	ldr	r3, [pc, #696]	@ (8008a08 <main+0x3b4>)
 8008750:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8008752:	f7fe fadd 	bl	8006d10 <Check_USB_PowerOn>
 8008756:	0003      	movs	r3, r0
 8008758:	1e5a      	subs	r2, r3, #1
 800875a:	4193      	sbcs	r3, r2
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2201      	movs	r2, #1
 8008760:	4053      	eors	r3, r2
 8008762:	b2db      	uxtb	r3, r3
 8008764:	1c1a      	adds	r2, r3, #0
 8008766:	2301      	movs	r3, #1
 8008768:	4013      	ands	r3, r2
 800876a:	b2da      	uxtb	r2, r3
 800876c:	4ba7      	ldr	r3, [pc, #668]	@ (8008a0c <main+0x3b8>)
 800876e:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 8008770:	f7fe face 	bl	8006d10 <Check_USB_PowerOn>
 8008774:	1e03      	subs	r3, r0, #0
 8008776:	d003      	beq.n	8008780 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 8008778:	4ba5      	ldr	r3, [pc, #660]	@ (8008a10 <main+0x3bc>)
 800877a:	0018      	movs	r0, r3
 800877c:	f7fd fecc 	bl	8006518 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8008780:	4ba4      	ldr	r3, [pc, #656]	@ (8008a14 <main+0x3c0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	0018      	movs	r0, r3
 8008786:	f006 fbed 	bl	800ef64 <TimestampIsReached>
 800878a:	1e03      	subs	r3, r0, #0
 800878c:	d00e      	beq.n	80087ac <main+0x158>
      charge = Battery_Upkeep();
 800878e:	f005 fed1 	bl	800e534 <Battery_Upkeep>
 8008792:	0003      	movs	r3, r0
 8008794:	001a      	movs	r2, r3
 8008796:	4b8c      	ldr	r3, [pc, #560]	@ (80089c8 <main+0x374>)
 8008798:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800879a:	f007 f87d 	bl	800f898 <HAL_GetTick>
 800879e:	0003      	movs	r3, r0
 80087a0:	4a9d      	ldr	r2, [pc, #628]	@ (8008a18 <main+0x3c4>)
 80087a2:	189a      	adds	r2, r3, r2
 80087a4:	4b9b      	ldr	r3, [pc, #620]	@ (8008a14 <main+0x3c0>)
 80087a6:	601a      	str	r2, [r3, #0]
      showTime();
 80087a8:	f7fe fae2 	bl	8006d70 <showTime>

    }
    configCheck();
 80087ac:	f005 fd26 	bl	800e1fc <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 80087b0:	4b9a      	ldr	r3, [pc, #616]	@ (8008a1c <main+0x3c8>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 80087b6:	4b84      	ldr	r3, [pc, #528]	@ (80089c8 <main+0x374>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d003      	beq.n	80087c6 <main+0x172>
 80087be:	4b82      	ldr	r3, [pc, #520]	@ (80089c8 <main+0x374>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <main+0x17c>
          FlashLEDs();
 80087c6:	f7ff ff11 	bl	80085ec <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 80087ca:	4b95      	ldr	r3, [pc, #596]	@ (8008a20 <main+0x3cc>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 80087d0:	4b7d      	ldr	r3, [pc, #500]	@ (80089c8 <main+0x374>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <main+0x198>
 80087d8:	4b92      	ldr	r3, [pc, #584]	@ (8008a24 <main+0x3d0>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d105      	bne.n	80087ec <main+0x198>
          batteryEmpty = true;
 80087e0:	4b91      	ldr	r3, [pc, #580]	@ (8008a28 <main+0x3d4>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 80087e6:	f7fe fdef 	bl	80073c8 <Enter_Standby_Mode>
 80087ea:	e002      	b.n	80087f2 <main+0x19e>
        }
        else{
          batteryEmpty = false;
 80087ec:	4b8e      	ldr	r3, [pc, #568]	@ (8008a28 <main+0x3d4>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 80087f2:	4b8e      	ldr	r3, [pc, #568]	@ (8008a2c <main+0x3d8>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d100      	bne.n	80087fc <main+0x1a8>
 80087fa:	e0aa      	b.n	8008952 <main+0x2fe>
 80087fc:	4b75      	ldr	r3, [pc, #468]	@ (80089d4 <main+0x380>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2201      	movs	r2, #1
 8008802:	4053      	eors	r3, r2
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d100      	bne.n	800880c <main+0x1b8>
 800880a:	e0a2      	b.n	8008952 <main+0x2fe>
 800880c:	4b86      	ldr	r3, [pc, #536]	@ (8008a28 <main+0x3d4>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2201      	movs	r2, #1
 8008812:	4053      	eors	r3, r2
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d100      	bne.n	800881c <main+0x1c8>
 800881a:	e09a      	b.n	8008952 <main+0x2fe>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800881c:	4b7b      	ldr	r3, [pc, #492]	@ (8008a0c <main+0x3b8>)
 800881e:	781a      	ldrb	r2, [r3, #0]
 8008820:	4b83      	ldr	r3, [pc, #524]	@ (8008a30 <main+0x3dc>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d020      	beq.n	800886a <main+0x216>
        if (IsSGPPresent() && !usbPluggedIn) {
 8008828:	f000 fae0 	bl	8008dec <IsSGPPresent>
 800882c:	1e03      	subs	r3, r0, #0
 800882e:	d009      	beq.n	8008844 <main+0x1f0>
 8008830:	4b7f      	ldr	r3, [pc, #508]	@ (8008a30 <main+0x3dc>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	2201      	movs	r2, #1
 8008836:	4053      	eors	r3, r2
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800883e:	2001      	movs	r0, #1
 8008840:	f000 fade 	bl	8008e00 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8008844:	4b7b      	ldr	r3, [pc, #492]	@ (8008a34 <main+0x3e0>)
 8008846:	791b      	ldrb	r3, [r3, #4]
 8008848:	2b34      	cmp	r3, #52	@ 0x34
 800884a:	d003      	beq.n	8008854 <main+0x200>
 800884c:	4b79      	ldr	r3, [pc, #484]	@ (8008a34 <main+0x3e0>)
 800884e:	791b      	ldrb	r3, [r3, #4]
 8008850:	2b35      	cmp	r3, #53	@ 0x35
 8008852:	d106      	bne.n	8008862 <main+0x20e>
 8008854:	4b76      	ldr	r3, [pc, #472]	@ (8008a30 <main+0x3dc>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800885c:	2000      	movs	r0, #0
 800885e:	f000 facf 	bl	8008e00 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8008862:	4b73      	ldr	r3, [pc, #460]	@ (8008a30 <main+0x3dc>)
 8008864:	781a      	ldrb	r2, [r3, #0]
 8008866:	4b69      	ldr	r3, [pc, #420]	@ (8008a0c <main+0x3b8>)
 8008868:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 800886a:	4b73      	ldr	r3, [pc, #460]	@ (8008a38 <main+0x3e4>)
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d00d      	beq.n	800888e <main+0x23a>
 8008872:	4b71      	ldr	r3, [pc, #452]	@ (8008a38 <main+0x3e4>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d009      	beq.n	800888e <main+0x23a>
 800887a:	4b69      	ldr	r3, [pc, #420]	@ (8008a20 <main+0x3cc>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <main+0x23a>
        HIDSstate = HIDS_Upkeep();
 8008882:	f006 fee9 	bl	800f658 <HIDS_Upkeep>
 8008886:	0003      	movs	r3, r0
 8008888:	001a      	movs	r2, r3
 800888a:	4b6c      	ldr	r3, [pc, #432]	@ (8008a3c <main+0x3e8>)
 800888c:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 800888e:	4b6b      	ldr	r3, [pc, #428]	@ (8008a3c <main+0x3e8>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d00d      	beq.n	80088b2 <main+0x25e>
 8008896:	4b69      	ldr	r3, [pc, #420]	@ (8008a3c <main+0x3e8>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d009      	beq.n	80088b2 <main+0x25e>
 800889e:	4b60      	ldr	r3, [pc, #384]	@ (8008a20 <main+0x3cc>)
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d005      	beq.n	80088b2 <main+0x25e>
        SGPstate = SGP_Upkeep();
 80088a6:	f004 f87b 	bl	800c9a0 <SGP_Upkeep>
 80088aa:	0003      	movs	r3, r0
 80088ac:	001a      	movs	r2, r3
 80088ae:	4b62      	ldr	r3, [pc, #392]	@ (8008a38 <main+0x3e4>)
 80088b0:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 80088b2:	4b5b      	ldr	r3, [pc, #364]	@ (8008a20 <main+0x3cc>)
 80088b4:	78db      	ldrb	r3, [r3, #3]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <main+0x272>
        MICstate = Mic_Upkeep();
 80088ba:	f000 ff3f 	bl	800973c <Mic_Upkeep>
 80088be:	0003      	movs	r3, r0
 80088c0:	001a      	movs	r2, r3
 80088c2:	4b5f      	ldr	r3, [pc, #380]	@ (8008a40 <main+0x3ec>)
 80088c4:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 80088c6:	4b40      	ldr	r3, [pc, #256]	@ (80089c8 <main+0x374>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d803      	bhi.n	80088d6 <main+0x282>
 80088ce:	4b53      	ldr	r3, [pc, #332]	@ (8008a1c <main+0x3c8>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d016      	beq.n	8008904 <main+0x2b0>
 80088d6:	4b52      	ldr	r3, [pc, #328]	@ (8008a20 <main+0x3cc>)
 80088d8:	789b      	ldrb	r3, [r3, #2]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d012      	beq.n	8008904 <main+0x2b0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 80088de:	f001 f8cf 	bl	8009a80 <sen5x_Get_sen5x_enable_state>
 80088e2:	0003      	movs	r3, r0
 80088e4:	001a      	movs	r2, r3
 80088e6:	2301      	movs	r3, #1
 80088e8:	4053      	eors	r3, r2
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <main+0x2aa>
 80088f0:	4b4f      	ldr	r3, [pc, #316]	@ (8008a30 <main+0x3dc>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <main+0x2aa>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 80088f8:	2000      	movs	r0, #0
 80088fa:	f001 f8fd 	bl	8009af8 <sen5x_enable>
        }
        sen5x_statemachine();
 80088fe:	f001 fe47 	bl	800a590 <sen5x_statemachine>
 8008902:	e020      	b.n	8008946 <main+0x2f2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8008904:	4b30      	ldr	r3, [pc, #192]	@ (80089c8 <main+0x374>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d81c      	bhi.n	8008946 <main+0x2f2>
 800890c:	4b43      	ldr	r3, [pc, #268]	@ (8008a1c <main+0x3c8>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2201      	movs	r2, #1
 8008912:	4053      	eors	r3, r2
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d015      	beq.n	8008946 <main+0x2f2>
 800891a:	4b41      	ldr	r3, [pc, #260]	@ (8008a20 <main+0x3cc>)
 800891c:	789b      	ldrb	r3, [r3, #2]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d011      	beq.n	8008946 <main+0x2f2>
        Info("Battery level insufficient for sen5x operation");
 8008922:	4a48      	ldr	r2, [pc, #288]	@ (8008a44 <main+0x3f0>)
 8008924:	4b2a      	ldr	r3, [pc, #168]	@ (80089d0 <main+0x37c>)
 8008926:	0019      	movs	r1, r3
 8008928:	2002      	movs	r0, #2
 800892a:	f006 fb71 	bl	800f010 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800892e:	4b3c      	ldr	r3, [pc, #240]	@ (8008a20 <main+0x3cc>)
 8008930:	2200      	movs	r2, #0
 8008932:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8008934:	4b44      	ldr	r3, [pc, #272]	@ (8008a48 <main+0x3f4>)
 8008936:	2200      	movs	r2, #0
 8008938:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800893a:	4b44      	ldr	r3, [pc, #272]	@ (8008a4c <main+0x3f8>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <main+0x2f2>
          sen5x_Power_Off();
 8008942:	f001 f965 	bl	8009c10 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8008946:	f7fc feb7 	bl	80056b8 <ESP_Upkeep>
 800894a:	0003      	movs	r3, r0
 800894c:	001a      	movs	r2, r3
 800894e:	4b35      	ldr	r3, [pc, #212]	@ (8008a24 <main+0x3d0>)
 8008950:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8008952:	4b36      	ldr	r3, [pc, #216]	@ (8008a2c <main+0x3d8>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2201      	movs	r2, #1
 8008958:	4053      	eors	r3, r2
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00f      	beq.n	8008980 <main+0x32c>
 8008960:	4b1c      	ldr	r3, [pc, #112]	@ (80089d4 <main+0x380>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2201      	movs	r2, #1
 8008966:	4053      	eors	r3, r2
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d008      	beq.n	8008980 <main+0x32c>
 800896e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a28 <main+0x3d4>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2201      	movs	r2, #1
 8008974:	4053      	eors	r3, r2
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <main+0x32c>
      Device_Test();  // for device with startup time
 800897c:	f000 fbea 	bl	8009154 <Device_Test>
    }
    if (!usbPluggedIn) {
 8008980:	4b2b      	ldr	r3, [pc, #172]	@ (8008a30 <main+0x3dc>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2201      	movs	r2, #1
 8008986:	4053      	eors	r3, r2
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d06b      	beq.n	8008a66 <main+0x412>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800898e:	4b30      	ldr	r3, [pc, #192]	@ (8008a50 <main+0x3fc>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	4053      	eors	r3, r2
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d064      	beq.n	8008a66 <main+0x412>
 800899c:	f000 fc58 	bl	8009250 <AllDevicesReady>
 80089a0:	1e03      	subs	r3, r0, #0
 80089a2:	d060      	beq.n	8008a66 <main+0x412>
 80089a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008a54 <main+0x400>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d05c      	beq.n	8008a66 <main+0x412>
        EnabledConnectedDevices();
 80089ac:	f000 fcb8 	bl	8009320 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 80089b0:	4b29      	ldr	r3, [pc, #164]	@ (8008a58 <main+0x404>)
 80089b2:	789b      	ldrb	r3, [r3, #2]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d051      	beq.n	8008a5c <main+0x408>
 80089b8:	23d7      	movs	r3, #215	@ 0xd7
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	e050      	b.n	8008a60 <main+0x40c>
 80089be:	46c0      	nop			@ (mov r8, r8)
 80089c0:	20001d98 	.word	0x20001d98
 80089c4:	20001d58 	.word	0x20001d58
 80089c8:	20000d10 	.word	0x20000d10
 80089cc:	08025000 	.word	0x08025000
 80089d0:	08025024 	.word	0x08025024
 80089d4:	20000cf5 	.word	0x20000cf5
 80089d8:	20000cfc 	.word	0x20000cfc
 80089dc:	20001ed0 	.word	0x20001ed0
 80089e0:	20000d84 	.word	0x20000d84
 80089e4:	20001dd8 	.word	0x20001dd8
 80089e8:	20000c70 	.word	0x20000c70
 80089ec:	20000cac 	.word	0x20000cac
 80089f0:	08025028 	.word	0x08025028
 80089f4:	08026678 	.word	0x08026678
 80089f8:	20001f88 	.word	0x20001f88
 80089fc:	20000ad8 	.word	0x20000ad8
 8008a00:	20000b38 	.word	0x20000b38
 8008a04:	000061a8 	.word	0x000061a8
 8008a08:	20000d0c 	.word	0x20000d0c
 8008a0c:	20000cf7 	.word	0x20000cf7
 8008a10:	0802503c 	.word	0x0802503c
 8008a14:	20000084 	.word	0x20000084
 8008a18:	0000c350 	.word	0x0000c350
 8008a1c:	20000080 	.word	0x20000080
 8008a20:	20000d14 	.word	0x20000d14
 8008a24:	20000cfb 	.word	0x20000cfb
 8008a28:	20000cf6 	.word	0x20000cf6
 8008a2c:	20000cf4 	.word	0x20000cf4
 8008a30:	20001d39 	.word	0x20001d39
 8008a34:	20000dac 	.word	0x20000dac
 8008a38:	20000cf8 	.word	0x20000cf8
 8008a3c:	20000cf9 	.word	0x20000cf9
 8008a40:	20000cfa 	.word	0x20000cfa
 8008a44:	08025070 	.word	0x08025070
 8008a48:	20000daa 	.word	0x20000daa
 8008a4c:	20000da9 	.word	0x20000da9
 8008a50:	20001d3a 	.word	0x20001d3a
 8008a54:	20000550 	.word	0x20000550
 8008a58:	20000d18 	.word	0x20000d18
 8008a5c:	23dc      	movs	r3, #220	@ 0xdc
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	0018      	movs	r0, r3
 8008a62:	f7fe fcd1 	bl	8007408 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#else
    if (u1_rx_buff[0] != '\0') {
 8008a66:	4b0d      	ldr	r3, [pc, #52]	@ (8008a9c <main+0x448>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <main+0x41e>
      check_cli_command();
 8008a6e:	f000 f8a3 	bl	8008bb8 <check_cli_command>
    }
#endif
    if (Check_USB_PowerOn() && !ReconfigSet) {
 8008a72:	f7fe f94d 	bl	8006d10 <Check_USB_PowerOn>
 8008a76:	1e03      	subs	r3, r0, #0
 8008a78:	d100      	bne.n	8008a7c <main+0x428>
 8008a7a:	e681      	b.n	8008780 <main+0x12c>
 8008a7c:	4b08      	ldr	r3, [pc, #32]	@ (8008aa0 <main+0x44c>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2201      	movs	r2, #1
 8008a82:	4053      	eors	r3, r2
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d100      	bne.n	8008a8c <main+0x438>
 8008a8a:	e679      	b.n	8008780 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 8008a8c:	f014 ff44 	bl	801d918 <GetUsbRxPointer>
 8008a90:	0003      	movs	r3, r0
 8008a92:	0018      	movs	r0, r3
 8008a94:	f7fd ff58 	bl	8006948 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 8008a98:	e672      	b.n	8008780 <main+0x12c>
 8008a9a:	46c0      	nop			@ (mov r8, r8)
 8008a9c:	20000cfc 	.word	0x20000cfc
 8008aa0:	2000054b 	.word	0x2000054b

08008aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b09d      	sub	sp, #116	@ 0x74
 8008aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008aaa:	2438      	movs	r4, #56	@ 0x38
 8008aac:	193b      	adds	r3, r7, r4
 8008aae:	0018      	movs	r0, r3
 8008ab0:	2338      	movs	r3, #56	@ 0x38
 8008ab2:	001a      	movs	r2, r3
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	f018 f969 	bl	8020d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008aba:	2324      	movs	r3, #36	@ 0x24
 8008abc:	18fb      	adds	r3, r7, r3
 8008abe:	0018      	movs	r0, r3
 8008ac0:	2314      	movs	r3, #20
 8008ac2:	001a      	movs	r2, r3
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	f018 f961 	bl	8020d8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008aca:	003b      	movs	r3, r7
 8008acc:	0018      	movs	r0, r3
 8008ace:	2324      	movs	r3, #36	@ 0x24
 8008ad0:	001a      	movs	r2, r3
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	f018 f95a 	bl	8020d8c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ad8:	4b34      	ldr	r3, [pc, #208]	@ (8008bac <SystemClock_Config+0x108>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a34      	ldr	r2, [pc, #208]	@ (8008bb0 <SystemClock_Config+0x10c>)
 8008ade:	401a      	ands	r2, r3
 8008ae0:	4b32      	ldr	r3, [pc, #200]	@ (8008bac <SystemClock_Config+0x108>)
 8008ae2:	2180      	movs	r1, #128	@ 0x80
 8008ae4:	0109      	lsls	r1, r1, #4
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008aea:	f00c ff75 	bl	80159d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8008aee:	4b31      	ldr	r3, [pc, #196]	@ (8008bb4 <SystemClock_Config+0x110>)
 8008af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af2:	4a2f      	ldr	r2, [pc, #188]	@ (8008bb0 <SystemClock_Config+0x10c>)
 8008af4:	401a      	ands	r2, r3
 8008af6:	4b2f      	ldr	r3, [pc, #188]	@ (8008bb4 <SystemClock_Config+0x110>)
 8008af8:	2180      	movs	r1, #128	@ 0x80
 8008afa:	0149      	lsls	r1, r1, #5
 8008afc:	430a      	orrs	r2, r1
 8008afe:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008b00:	193b      	adds	r3, r7, r4
 8008b02:	2226      	movs	r2, #38	@ 0x26
 8008b04:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008b06:	193b      	adds	r3, r7, r4
 8008b08:	2280      	movs	r2, #128	@ 0x80
 8008b0a:	0052      	lsls	r2, r2, #1
 8008b0c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b0e:	0021      	movs	r1, r4
 8008b10:	187b      	adds	r3, r7, r1
 8008b12:	2201      	movs	r2, #1
 8008b14:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008b16:	187b      	adds	r3, r7, r1
 8008b18:	2210      	movs	r2, #16
 8008b1a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008b1c:	187b      	adds	r3, r7, r1
 8008b1e:	2201      	movs	r2, #1
 8008b20:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008b22:	187b      	adds	r3, r7, r1
 8008b24:	2200      	movs	r2, #0
 8008b26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b28:	187b      	adds	r3, r7, r1
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f00c ffe4 	bl	8015af8 <HAL_RCC_OscConfig>
 8008b30:	1e03      	subs	r3, r0, #0
 8008b32:	d001      	beq.n	8008b38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008b34:	f000 f906 	bl	8008d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b38:	2124      	movs	r1, #36	@ 0x24
 8008b3a:	187b      	adds	r3, r7, r1
 8008b3c:	220f      	movs	r2, #15
 8008b3e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008b40:	187b      	adds	r3, r7, r1
 8008b42:	2201      	movs	r2, #1
 8008b44:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b46:	187b      	adds	r3, r7, r1
 8008b48:	2200      	movs	r2, #0
 8008b4a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008b4c:	187b      	adds	r3, r7, r1
 8008b4e:	2200      	movs	r2, #0
 8008b50:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008b52:	187b      	adds	r3, r7, r1
 8008b54:	2200      	movs	r2, #0
 8008b56:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008b58:	187b      	adds	r3, r7, r1
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	f00d fb9f 	bl	80162a0 <HAL_RCC_ClockConfig>
 8008b62:	1e03      	subs	r3, r0, #0
 8008b64:	d001      	beq.n	8008b6a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008b66:	f000 f8ed 	bl	8008d44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8008b6a:	003b      	movs	r3, r7
 8008b6c:	226d      	movs	r2, #109	@ 0x6d
 8008b6e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008b70:	003b      	movs	r3, r7
 8008b72:	2200      	movs	r2, #0
 8008b74:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008b76:	003b      	movs	r3, r7
 8008b78:	2200      	movs	r2, #0
 8008b7a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008b7c:	003b      	movs	r3, r7
 8008b7e:	2200      	movs	r2, #0
 8008b80:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008b82:	003b      	movs	r3, r7
 8008b84:	2280      	movs	r2, #128	@ 0x80
 8008b86:	0252      	lsls	r2, r2, #9
 8008b88:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008b8a:	003b      	movs	r3, r7
 8008b8c:	2280      	movs	r2, #128	@ 0x80
 8008b8e:	04d2      	lsls	r2, r2, #19
 8008b90:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b92:	003b      	movs	r3, r7
 8008b94:	0018      	movs	r0, r3
 8008b96:	f00d fda7 	bl	80166e8 <HAL_RCCEx_PeriphCLKConfig>
 8008b9a:	1e03      	subs	r3, r0, #0
 8008b9c:	d001      	beq.n	8008ba2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8008b9e:	f000 f8d1 	bl	8008d44 <Error_Handler>
  }
}
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	b01d      	add	sp, #116	@ 0x74
 8008ba8:	bd90      	pop	{r4, r7, pc}
 8008baa:	46c0      	nop			@ (mov r8, r8)
 8008bac:	40007000 	.word	0x40007000
 8008bb0:	ffffe7ff 	.word	0xffffe7ff
 8008bb4:	40021000 	.word	0x40021000

08008bb8 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 8008bbc:	4b34      	ldr	r3, [pc, #208]	@ (8008c90 <check_cli_command+0xd8>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	3b61      	subs	r3, #97	@ 0x61
 8008bc2:	2b13      	cmp	r3, #19
 8008bc4:	d833      	bhi.n	8008c2e <check_cli_command+0x76>
 8008bc6:	009a      	lsls	r2, r3, #2
 8008bc8:	4b32      	ldr	r3, [pc, #200]	@ (8008c94 <check_cli_command+0xdc>)
 8008bca:	18d3      	adds	r3, r2, r3
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008bd0:	4b31      	ldr	r3, [pc, #196]	@ (8008c98 <check_cli_command+0xe0>)
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f017 ff6a 	bl	8020aac <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8008bd8:	2003      	movs	r0, #3
 8008bda:	f006 fa83 	bl	800f0e4 <SetVerboseLevel>
      break;
 8008bde:	e051      	b.n	8008c84 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 8008be0:	f7fd fcda 	bl	8006598 <PC_show_Keys>
    break;
 8008be4:	e04e      	b.n	8008c84 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008be6:	f7fa fd33 	bl	8003650 <forceNTPupdate>
    break;
 8008bea:	e04b      	b.n	8008c84 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8008bec:	4b2b      	ldr	r3, [pc, #172]	@ (8008c9c <check_cli_command+0xe4>)
 8008bee:	0018      	movs	r0, r3
 8008bf0:	f017 ff5c 	bl	8020aac <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008bf4:	2002      	movs	r0, #2
 8008bf6:	f006 fa75 	bl	800f0e4 <SetVerboseLevel>
      break;
 8008bfa:	e043      	b.n	8008c84 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8008bfc:	4b28      	ldr	r3, [pc, #160]	@ (8008ca0 <check_cli_command+0xe8>)
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f017 ff54 	bl	8020aac <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008c04:	2001      	movs	r0, #1
 8008c06:	f006 fa6d 	bl	800f0e4 <SetVerboseLevel>
      break;
 8008c0a:	e03b      	b.n	8008c84 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8008c0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ca4 <check_cli_command+0xec>)
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f017 ff4c 	bl	8020aac <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8008c14:	2000      	movs	r0, #0
 8008c16:	f006 fa65 	bl	800f0e4 <SetVerboseLevel>
      break;
 8008c1a:	e033      	b.n	8008c84 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8008c1c:	f006 fe3c 	bl	800f898 <HAL_GetTick>
 8008c20:	0002      	movs	r2, r0
 8008c22:	4b21      	ldr	r3, [pc, #132]	@ (8008ca8 <check_cli_command+0xf0>)
 8008c24:	601a      	str	r2, [r3, #0]
      break;
 8008c26:	e02d      	b.n	8008c84 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8008c28:	f7fe f8a2 	bl	8006d70 <showTime>
      break;
 8008c2c:	e02a      	b.n	8008c84 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8008c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008cac <check_cli_command+0xf4>)
 8008c30:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb0 <check_cli_command+0xf8>)
 8008c32:	0019      	movs	r1, r3
 8008c34:	2001      	movs	r0, #1
 8008c36:	f006 f9eb 	bl	800f010 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb4 <check_cli_command+0xfc>)
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	f017 ff35 	bl	8020aac <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008c42:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb8 <check_cli_command+0x100>)
 8008c44:	0018      	movs	r0, r3
 8008c46:	f017 ff31 	bl	8020aac <puts>
      printf("e - show EEPROM\r\n");
 8008c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008cbc <check_cli_command+0x104>)
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f017 ff2d 	bl	8020aac <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008c52:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <check_cli_command+0x108>)
 8008c54:	0018      	movs	r0, r3
 8008c56:	f017 ff29 	bl	8020aac <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc4 <check_cli_command+0x10c>)
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f017 ff25 	bl	8020aac <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008c62:	4b19      	ldr	r3, [pc, #100]	@ (8008cc8 <check_cli_command+0x110>)
 8008c64:	0018      	movs	r0, r3
 8008c66:	f017 ff21 	bl	8020aac <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008c6a:	4b18      	ldr	r3, [pc, #96]	@ (8008ccc <check_cli_command+0x114>)
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f017 ff1d 	bl	8020aac <puts>
      printf("s - Start particle measurement\r\n");
 8008c72:	4b17      	ldr	r3, [pc, #92]	@ (8008cd0 <check_cli_command+0x118>)
 8008c74:	0018      	movs	r0, r3
 8008c76:	f017 ff19 	bl	8020aac <puts>
      printf("t - Show actual systemtime\r\n");
 8008c7a:	4b16      	ldr	r3, [pc, #88]	@ (8008cd4 <check_cli_command+0x11c>)
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f017 ff15 	bl	8020aac <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8008c82:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 8008c84:	4b02      	ldr	r3, [pc, #8]	@ (8008c90 <check_cli_command+0xd8>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
}
 8008c8a:	46c0      	nop			@ (mov r8, r8)
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20000cfc 	.word	0x20000cfc
 8008c94:	08026628 	.word	0x08026628
 8008c98:	080250a0 	.word	0x080250a0
 8008c9c:	080250bc 	.word	0x080250bc
 8008ca0:	080250d8 	.word	0x080250d8
 8008ca4:	080250f8 	.word	0x080250f8
 8008ca8:	20000db8 	.word	0x20000db8
 8008cac:	08025114 	.word	0x08025114
 8008cb0:	08025144 	.word	0x08025144
 8008cb4:	08025148 	.word	0x08025148
 8008cb8:	08025160 	.word	0x08025160
 8008cbc:	08025180 	.word	0x08025180
 8008cc0:	08025194 	.word	0x08025194
 8008cc4:	080251b8 	.word	0x080251b8
 8008cc8:	080251d8 	.word	0x080251d8
 8008ccc:	080251fc 	.word	0x080251fc
 8008cd0:	0802521c 	.word	0x0802521c
 8008cd4:	0802523c 	.word	0x0802523c

08008cd8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008ce0:	4907      	ldr	r1, [pc, #28]	@ (8008d00 <HAL_UART_RxCpltCallback+0x28>)
 8008ce2:	4b08      	ldr	r3, [pc, #32]	@ (8008d04 <HAL_UART_RxCpltCallback+0x2c>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f00f f8a2 	bl	8017e30 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8008cec:	4904      	ldr	r1, [pc, #16]	@ (8008d00 <HAL_UART_RxCpltCallback+0x28>)
 8008cee:	4b05      	ldr	r3, [pc, #20]	@ (8008d04 <HAL_UART_RxCpltCallback+0x2c>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f00f f89c 	bl	8017e30 <HAL_UART_Receive_IT>
}
 8008cf8:	46c0      	nop			@ (mov r8, r8)
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	b002      	add	sp, #8
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20000cfc 	.word	0x20000cfc
 8008d04:	20001ed0 	.word	0x20001ed0

08008d08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	0002      	movs	r2, r0
 8008d10:	1dbb      	adds	r3, r7, #6
 8008d12:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008d14:	1dbb      	adds	r3, r7, #6
 8008d16:	881a      	ldrh	r2, [r3, #0]
 8008d18:	2380      	movs	r3, #128	@ 0x80
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d10b      	bne.n	8008d38 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008d20:	f005 fc1c 	bl	800e55c <setuserToggle>
    if (GetPMSensorPresence()) {
 8008d24:	f000 f84e 	bl	8008dc4 <GetPMSensorPresence>
 8008d28:	1e03      	subs	r3, r0, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008d2c:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <HAL_GPIO_EXTI_Callback+0x38>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 8008d32:	2000      	movs	r0, #0
 8008d34:	f000 feae 	bl	8009a94 <sen5x_Set_sen5x_state>
    }
  }
}
 8008d38:	46c0      	nop			@ (mov r8, r8)
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	b002      	add	sp, #8
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20000d14 	.word	0x20000d14

08008d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 8008d48:	f005 f8d4 	bl	800def4 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008d4c:	b672      	cpsid	i
}
 8008d4e:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008d50:	4a05      	ldr	r2, [pc, #20]	@ (8008d68 <Error_Handler+0x24>)
 8008d52:	4b06      	ldr	r3, [pc, #24]	@ (8008d6c <Error_Handler+0x28>)
 8008d54:	0019      	movs	r1, r3
 8008d56:	2001      	movs	r0, #1
 8008d58:	f006 f95a 	bl	800f010 <CreateLine>

    HAL_Delay(2500);
 8008d5c:	4b04      	ldr	r3, [pc, #16]	@ (8008d70 <Error_Handler+0x2c>)
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f006 fda4 	bl	800f8ac <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008d64:	46c0      	nop			@ (mov r8, r8)
 8008d66:	e7f3      	b.n	8008d50 <Error_Handler+0xc>
 8008d68:	08025258 	.word	0x08025258
 8008d6c:	08025144 	.word	0x08025144
 8008d70:	000009c4 	.word	0x000009c4

08008d74 <testInit>:
#include "display.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008d78:	4b10      	ldr	r3, [pc, #64]	@ (8008dbc <testInit+0x48>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008dbc <testInit+0x48>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008d84:	4b0d      	ldr	r3, [pc, #52]	@ (8008dbc <testInit+0x48>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8008d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008dbc <testInit+0x48>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008d90:	4b0a      	ldr	r3, [pc, #40]	@ (8008dbc <testInit+0x48>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 8008d96:	4b09      	ldr	r3, [pc, #36]	@ (8008dbc <testInit+0x48>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 8008d9c:	4b08      	ldr	r3, [pc, #32]	@ (8008dc0 <testInit+0x4c>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 8008da2:	4b07      	ldr	r3, [pc, #28]	@ (8008dc0 <testInit+0x4c>)
 8008da4:	2201      	movs	r2, #1
 8008da6:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 8008da8:	4b05      	ldr	r3, [pc, #20]	@ (8008dc0 <testInit+0x4c>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 8008dae:	4b04      	ldr	r3, [pc, #16]	@ (8008dc0 <testInit+0x4c>)
 8008db0:	2201      	movs	r2, #1
 8008db2:	70da      	strb	r2, [r3, #3]
}
 8008db4:	46c0      	nop			@ (mov r8, r8)
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	20000d18 	.word	0x20000d18
 8008dc0:	20000d14 	.word	0x20000d14

08008dc4 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8008dc8:	4b02      	ldr	r3, [pc, #8]	@ (8008dd4 <GetPMSensorPresence+0x10>)
 8008dca:	789b      	ldrb	r3, [r3, #2]
}
 8008dcc:	0018      	movs	r0, r3
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	46c0      	nop			@ (mov r8, r8)
 8008dd4:	20000d18 	.word	0x20000d18

08008dd8 <DisablePMSensor>:

void DisablePMSensor() {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 8008ddc:	4b02      	ldr	r3, [pc, #8]	@ (8008de8 <DisablePMSensor+0x10>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	709a      	strb	r2, [r3, #2]
}
 8008de2:	46c0      	nop			@ (mov r8, r8)
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000d18 	.word	0x20000d18

08008dec <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 8008df0:	4b02      	ldr	r3, [pc, #8]	@ (8008dfc <IsSGPPresent+0x10>)
 8008df2:	785b      	ldrb	r3, [r3, #1]
}
 8008df4:	0018      	movs	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	46c0      	nop			@ (mov r8, r8)
 8008dfc:	20000d18 	.word	0x20000d18

08008e00 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	0002      	movs	r2, r0
 8008e08:	1dfb      	adds	r3, r7, #7
 8008e0a:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 8008e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e3c <SetVOCSensorDIS_ENA+0x3c>)
 8008e0e:	1dfa      	adds	r2, r7, #7
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 8008e14:	4b0a      	ldr	r3, [pc, #40]	@ (8008e40 <SetVOCSensorDIS_ENA+0x40>)
 8008e16:	1dfa      	adds	r2, r7, #7
 8008e18:	7812      	ldrb	r2, [r2, #0]
 8008e1a:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 8008e1c:	1dfb      	adds	r3, r7, #7
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <SetVOCSensorDIS_ENA+0x28>
 8008e24:	4b07      	ldr	r3, [pc, #28]	@ (8008e44 <SetVOCSensorDIS_ENA+0x44>)
 8008e26:	e000      	b.n	8008e2a <SetVOCSensorDIS_ENA+0x2a>
 8008e28:	4b07      	ldr	r3, [pc, #28]	@ (8008e48 <SetVOCSensorDIS_ENA+0x48>)
 8008e2a:	4a08      	ldr	r2, [pc, #32]	@ (8008e4c <SetVOCSensorDIS_ENA+0x4c>)
 8008e2c:	4908      	ldr	r1, [pc, #32]	@ (8008e50 <SetVOCSensorDIS_ENA+0x50>)
 8008e2e:	2003      	movs	r0, #3
 8008e30:	f006 f8ee 	bl	800f010 <CreateLine>
}
 8008e34:	46c0      	nop			@ (mov r8, r8)
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b002      	add	sp, #8
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000d18 	.word	0x20000d18
 8008e40:	20000d14 	.word	0x20000d14
 8008e44:	08025284 	.word	0x08025284
 8008e48:	0802528c 	.word	0x0802528c
 8008e4c:	08025298 	.word	0x08025298
 8008e50:	080252ac 	.word	0x080252ac

08008e54 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008e58:	4b02      	ldr	r3, [pc, #8]	@ (8008e64 <IsPMSensorEnabled+0x10>)
 8008e5a:	789b      	ldrb	r3, [r3, #2]
}
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	46c0      	nop			@ (mov r8, r8)
 8008e64:	20000d14 	.word	0x20000d14

08008e68 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	0002      	movs	r2, r0
 8008e70:	1dfb      	adds	r3, r7, #7
 8008e72:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 8008e74:	4b05      	ldr	r3, [pc, #20]	@ (8008e8c <SetVOCSensorStatus+0x24>)
 8008e76:	795b      	ldrb	r3, [r3, #5]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 8008e7c:	4b04      	ldr	r3, [pc, #16]	@ (8008e90 <SetVOCSensorStatus+0x28>)
 8008e7e:	1dfa      	adds	r2, r7, #7
 8008e80:	7812      	ldrb	r2, [r2, #0]
 8008e82:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 8008e84:	46c0      	nop			@ (mov r8, r8)
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b002      	add	sp, #8
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20000d18 	.word	0x20000d18
 8008e90:	20000d14 	.word	0x20000d14

08008e94 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	0002      	movs	r2, r0
 8008e9c:	1dfb      	adds	r3, r7, #7
 8008e9e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008ea0:	4b03      	ldr	r3, [pc, #12]	@ (8008eb0 <SetPMSensorStatus+0x1c>)
 8008ea2:	1dfa      	adds	r2, r7, #7
 8008ea4:	7812      	ldrb	r2, [r2, #0]
 8008ea6:	709a      	strb	r2, [r3, #2]
}
 8008ea8:	46c0      	nop			@ (mov r8, r8)
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	b002      	add	sp, #8
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20000d14 	.word	0x20000d14

08008eb4 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	@ (8008ec4 <SetESPMeasurementDone+0x10>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	711a      	strb	r2, [r3, #4]
}
 8008ebe:	46c0      	nop			@ (mov r8, r8)
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000d18 	.word	0x20000d18

08008ec8 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  testInit();
 8008ed6:	f7ff ff4d 	bl	8008d74 <testInit>
  I2CSensors_Init(sensorI2C);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	0018      	movs	r0, r3
 8008ede:	f7fd f897 	bl	8006010 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 8008ee2:	f006 fac7 	bl	800f474 <HIDS_DeviceConnected>
 8008ee6:	0003      	movs	r3, r0
 8008ee8:	001a      	movs	r2, r3
 8008eea:	2301      	movs	r3, #1
 8008eec:	4053      	eors	r3, r2
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00c      	beq.n	8008f0e <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8008ef4:	4a7f      	ldr	r2, [pc, #508]	@ (80090f4 <Device_Init+0x22c>)
 8008ef6:	4b80      	ldr	r3, [pc, #512]	@ (80090f8 <Device_Init+0x230>)
 8008ef8:	0019      	movs	r1, r3
 8008efa:	2001      	movs	r0, #1
 8008efc:	f006 f888 	bl	800f010 <CreateLine>
     SensorProbe.HT_Present = false;
 8008f00:	4b7e      	ldr	r3, [pc, #504]	@ (80090fc <Device_Init+0x234>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8008f06:	4b7e      	ldr	r3, [pc, #504]	@ (8009100 <Device_Init+0x238>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	e008      	b.n	8008f20 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8008f0e:	4b7b      	ldr	r3, [pc, #492]	@ (80090fc <Device_Init+0x234>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008f14:	4a7b      	ldr	r2, [pc, #492]	@ (8009104 <Device_Init+0x23c>)
 8008f16:	4b7c      	ldr	r3, [pc, #496]	@ (8009108 <Device_Init+0x240>)
 8008f18:	0019      	movs	r1, r3
 8008f1a:	2003      	movs	r0, #3
 8008f1c:	f006 f878 	bl	800f010 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008f20:	f003 fb34 	bl	800c58c <SGP_DeviceConnected>
 8008f24:	0003      	movs	r3, r0
 8008f26:	001a      	movs	r2, r3
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4053      	eors	r3, r2
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00c      	beq.n	8008f4c <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8008f32:	4b72      	ldr	r3, [pc, #456]	@ (80090fc <Device_Init+0x234>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008f38:	4a74      	ldr	r2, [pc, #464]	@ (800910c <Device_Init+0x244>)
 8008f3a:	4b6f      	ldr	r3, [pc, #444]	@ (80090f8 <Device_Init+0x230>)
 8008f3c:	0019      	movs	r1, r3
 8008f3e:	2001      	movs	r0, #1
 8008f40:	f006 f866 	bl	800f010 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008f44:	4b6e      	ldr	r3, [pc, #440]	@ (8009100 <Device_Init+0x238>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	705a      	strb	r2, [r3, #1]
 8008f4a:	e00b      	b.n	8008f64 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008f4c:	4b6b      	ldr	r3, [pc, #428]	@ (80090fc <Device_Init+0x234>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 8008f52:	4b6a      	ldr	r3, [pc, #424]	@ (80090fc <Device_Init+0x234>)
 8008f54:	2201      	movs	r2, #1
 8008f56:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008f58:	4a6d      	ldr	r2, [pc, #436]	@ (8009110 <Device_Init+0x248>)
 8008f5a:	4b6b      	ldr	r3, [pc, #428]	@ (8009108 <Device_Init+0x240>)
 8008f5c:	0019      	movs	r1, r3
 8008f5e:	2003      	movs	r0, #3
 8008f60:	f006 f856 	bl	800f010 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8008f64:	4b65      	ldr	r3, [pc, #404]	@ (80090fc <Device_Init+0x234>)
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d009      	beq.n	8008f80 <Device_Init+0xb8>
 8008f6c:	4b63      	ldr	r3, [pc, #396]	@ (80090fc <Device_Init+0x234>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d005      	beq.n	8008f80 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 8008f74:	2200      	movs	r2, #0
 8008f76:	2101      	movs	r1, #1
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f004 fe15 	bl	800dba8 <SetDBLED>
 8008f7e:	e018      	b.n	8008fb2 <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008f80:	2200      	movs	r2, #0
 8008f82:	2100      	movs	r1, #0
 8008f84:	2001      	movs	r0, #1
 8008f86:	f004 fe0f 	bl	800dba8 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008f8a:	4b62      	ldr	r3, [pc, #392]	@ (8009114 <Device_Init+0x24c>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2101      	movs	r1, #1
 8008f90:	0018      	movs	r0, r3
 8008f92:	f007 ff12 	bl	8010dba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8008f96:	2380      	movs	r3, #128	@ 0x80
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	485e      	ldr	r0, [pc, #376]	@ (8009114 <Device_Init+0x24c>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	0019      	movs	r1, r3
 8008fa0:	f007 ff0b 	bl	8010dba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8008fa4:	2380      	movs	r3, #128	@ 0x80
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	485a      	ldr	r0, [pc, #360]	@ (8009114 <Device_Init+0x24c>)
 8008faa:	2201      	movs	r2, #1
 8008fac:	0019      	movs	r1, r3
 8008fae:	f007 ff04 	bl	8010dba <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 8008fb2:	4b53      	ldr	r3, [pc, #332]	@ (8009100 <Device_Init+0x238>)
 8008fb4:	78db      	ldrb	r3, [r3, #3]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d028      	beq.n	800900c <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 8008fba:	4a57      	ldr	r2, [pc, #348]	@ (8009118 <Device_Init+0x250>)
 8008fbc:	4b57      	ldr	r3, [pc, #348]	@ (800911c <Device_Init+0x254>)
 8008fbe:	0019      	movs	r1, r3
 8008fc0:	2002      	movs	r0, #2
 8008fc2:	f006 f825 	bl	800f010 <CreateLine>
    if (!enableMicrophone(true)) {
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	f003 feec 	bl	800cda4 <enableMicrophone>
 8008fcc:	0003      	movs	r3, r0
 8008fce:	001a      	movs	r2, r3
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	4053      	eors	r3, r2
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00c      	beq.n	8008ff4 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 8008fda:	4a51      	ldr	r2, [pc, #324]	@ (8009120 <Device_Init+0x258>)
 8008fdc:	4b46      	ldr	r3, [pc, #280]	@ (80090f8 <Device_Init+0x230>)
 8008fde:	0019      	movs	r1, r3
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	f006 f815 	bl	800f010 <CreateLine>
      SensorProbe.MIC_Present = false;
 8008fe6:	4b45      	ldr	r3, [pc, #276]	@ (80090fc <Device_Init+0x234>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8008fec:	4b44      	ldr	r3, [pc, #272]	@ (8009100 <Device_Init+0x238>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	70da      	strb	r2, [r3, #3]
 8008ff2:	e00b      	b.n	800900c <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 8008ff4:	4b41      	ldr	r3, [pc, #260]	@ (80090fc <Device_Init+0x234>)
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008ffa:	4b41      	ldr	r3, [pc, #260]	@ (8009100 <Device_Init+0x238>)
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8009000:	4a48      	ldr	r2, [pc, #288]	@ (8009124 <Device_Init+0x25c>)
 8009002:	4b41      	ldr	r3, [pc, #260]	@ (8009108 <Device_Init+0x240>)
 8009004:	0019      	movs	r1, r3
 8009006:	2003      	movs	r0, #3
 8009008:	f006 f802 	bl	800f010 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800900c:	f000 fe36 	bl	8009c7c <probe_sen5x>
 8009010:	1e03      	subs	r3, r0, #0
 8009012:	d122      	bne.n	800905a <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8009014:	4a44      	ldr	r2, [pc, #272]	@ (8009128 <Device_Init+0x260>)
 8009016:	4b3c      	ldr	r3, [pc, #240]	@ (8009108 <Device_Init+0x240>)
 8009018:	0019      	movs	r1, r3
 800901a:	2003      	movs	r0, #3
 800901c:	f005 fff8 	bl	800f010 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8009020:	4b36      	ldr	r3, [pc, #216]	@ (80090fc <Device_Init+0x234>)
 8009022:	2201      	movs	r2, #1
 8009024:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8009026:	4b36      	ldr	r3, [pc, #216]	@ (8009100 <Device_Init+0x238>)
 8009028:	2201      	movs	r2, #1
 800902a:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800902c:	4b3f      	ldr	r3, [pc, #252]	@ (800912c <Device_Init+0x264>)
 800902e:	791b      	ldrb	r3, [r3, #4]
 8009030:	2b34      	cmp	r3, #52	@ 0x34
 8009032:	d003      	beq.n	800903c <Device_Init+0x174>
 8009034:	4b3d      	ldr	r3, [pc, #244]	@ (800912c <Device_Init+0x264>)
 8009036:	791b      	ldrb	r3, [r3, #4]
 8009038:	2b35      	cmp	r3, #53	@ 0x35
 800903a:	d11c      	bne.n	8009076 <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800903c:	4a3c      	ldr	r2, [pc, #240]	@ (8009130 <Device_Init+0x268>)
 800903e:	4b37      	ldr	r3, [pc, #220]	@ (800911c <Device_Init+0x254>)
 8009040:	0019      	movs	r1, r3
 8009042:	2002      	movs	r0, #2
 8009044:	f005 ffe4 	bl	800f010 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8009048:	4b2d      	ldr	r3, [pc, #180]	@ (8009100 <Device_Init+0x238>)
 800904a:	2200      	movs	r2, #0
 800904c:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800904e:	4b2b      	ldr	r3, [pc, #172]	@ (80090fc <Device_Init+0x234>)
 8009050:	2200      	movs	r2, #0
 8009052:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 8009054:	f003 fc7e 	bl	800c954 <SGP_SoftReset>
 8009058:	e00d      	b.n	8009076 <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800905a:	f000 fdd9 	bl	8009c10 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800905e:	4a35      	ldr	r2, [pc, #212]	@ (8009134 <Device_Init+0x26c>)
 8009060:	4b29      	ldr	r3, [pc, #164]	@ (8009108 <Device_Init+0x240>)
 8009062:	0019      	movs	r1, r3
 8009064:	2003      	movs	r0, #3
 8009066:	f005 ffd3 	bl	800f010 <CreateLine>
    SensorProbe.PM_Present = false;
 800906a:	4b24      	ldr	r3, [pc, #144]	@ (80090fc <Device_Init+0x234>)
 800906c:	2200      	movs	r2, #0
 800906e:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8009070:	4b23      	ldr	r3, [pc, #140]	@ (8009100 <Device_Init+0x238>)
 8009072:	2200      	movs	r2, #0
 8009074:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8009076:	4b21      	ldr	r3, [pc, #132]	@ (80090fc <Device_Init+0x234>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <Device_Init+0x1ba>
 800907e:	4b2e      	ldr	r3, [pc, #184]	@ (8009138 <Device_Init+0x270>)
 8009080:	e000      	b.n	8009084 <Device_Init+0x1bc>
 8009082:	4b2e      	ldr	r3, [pc, #184]	@ (800913c <Device_Init+0x274>)
 8009084:	4a2e      	ldr	r2, [pc, #184]	@ (8009140 <Device_Init+0x278>)
 8009086:	4925      	ldr	r1, [pc, #148]	@ (800911c <Device_Init+0x254>)
 8009088:	2002      	movs	r0, #2
 800908a:	f005 ffc1 	bl	800f010 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800908e:	4b1b      	ldr	r3, [pc, #108]	@ (80090fc <Device_Init+0x234>)
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <Device_Init+0x1d2>
 8009096:	4b28      	ldr	r3, [pc, #160]	@ (8009138 <Device_Init+0x270>)
 8009098:	e000      	b.n	800909c <Device_Init+0x1d4>
 800909a:	4b28      	ldr	r3, [pc, #160]	@ (800913c <Device_Init+0x274>)
 800909c:	4a29      	ldr	r2, [pc, #164]	@ (8009144 <Device_Init+0x27c>)
 800909e:	491f      	ldr	r1, [pc, #124]	@ (800911c <Device_Init+0x254>)
 80090a0:	2002      	movs	r0, #2
 80090a2:	f005 ffb5 	bl	800f010 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80090a6:	4b15      	ldr	r3, [pc, #84]	@ (80090fc <Device_Init+0x234>)
 80090a8:	789b      	ldrb	r3, [r3, #2]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <Device_Init+0x1ea>
 80090ae:	4b22      	ldr	r3, [pc, #136]	@ (8009138 <Device_Init+0x270>)
 80090b0:	e000      	b.n	80090b4 <Device_Init+0x1ec>
 80090b2:	4b22      	ldr	r3, [pc, #136]	@ (800913c <Device_Init+0x274>)
 80090b4:	4a24      	ldr	r2, [pc, #144]	@ (8009148 <Device_Init+0x280>)
 80090b6:	4919      	ldr	r1, [pc, #100]	@ (800911c <Device_Init+0x254>)
 80090b8:	2002      	movs	r0, #2
 80090ba:	f005 ffa9 	bl	800f010 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80090be:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <Device_Init+0x234>)
 80090c0:	78db      	ldrb	r3, [r3, #3]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <Device_Init+0x202>
 80090c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009138 <Device_Init+0x270>)
 80090c8:	e000      	b.n	80090cc <Device_Init+0x204>
 80090ca:	4b1c      	ldr	r3, [pc, #112]	@ (800913c <Device_Init+0x274>)
 80090cc:	4a1f      	ldr	r2, [pc, #124]	@ (800914c <Device_Init+0x284>)
 80090ce:	4913      	ldr	r1, [pc, #76]	@ (800911c <Device_Init+0x254>)
 80090d0:	2002      	movs	r0, #2
 80090d2:	f005 ff9d 	bl	800f010 <CreateLine>
  ESP_Init(espUart);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	0018      	movs	r0, r3
 80090da:	f7fa fc71 	bl	80039c0 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 80090de:	4a1c      	ldr	r2, [pc, #112]	@ (8009150 <Device_Init+0x288>)
 80090e0:	4b09      	ldr	r3, [pc, #36]	@ (8009108 <Device_Init+0x240>)
 80090e2:	0019      	movs	r1, r3
 80090e4:	2003      	movs	r0, #3
 80090e6:	f005 ff93 	bl	800f010 <CreateLine>
}
 80090ea:	46c0      	nop			@ (mov r8, r8)
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b004      	add	sp, #16
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	46c0      	nop			@ (mov r8, r8)
 80090f4:	080252b0 	.word	0x080252b0
 80090f8:	080252e0 	.word	0x080252e0
 80090fc:	20000d18 	.word	0x20000d18
 8009100:	20000d14 	.word	0x20000d14
 8009104:	080252e4 	.word	0x080252e4
 8009108:	080252ac 	.word	0x080252ac
 800910c:	08025310 	.word	0x08025310
 8009110:	0802532c 	.word	0x0802532c
 8009114:	50000400 	.word	0x50000400
 8009118:	08025344 	.word	0x08025344
 800911c:	08025368 	.word	0x08025368
 8009120:	0802536c 	.word	0x0802536c
 8009124:	08025398 	.word	0x08025398
 8009128:	080253c4 	.word	0x080253c4
 800912c:	20000dac 	.word	0x20000dac
 8009130:	080253dc 	.word	0x080253dc
 8009134:	0802542c 	.word	0x0802542c
 8009138:	08025450 	.word	0x08025450
 800913c:	08025454 	.word	0x08025454
 8009140:	08025458 	.word	0x08025458
 8009144:	08025474 	.word	0x08025474
 8009148:	08025490 	.word	0x08025490
 800914c:	080254ac 	.word	0x080254ac
 8009150:	080254c8 	.word	0x080254c8

08009154 <Device_Test>:

void Device_Test(){
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8009158:	4b34      	ldr	r3, [pc, #208]	@ (800922c <Device_Test+0xd8>)
 800915a:	78db      	ldrb	r3, [r3, #3]
 800915c:	2201      	movs	r2, #1
 800915e:	4053      	eors	r3, r2
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d027      	beq.n	80091b6 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 8009166:	f000 fab9 	bl	80096dc <MIC_TestMeasurementDone>
 800916a:	1e03      	subs	r3, r0, #0
 800916c:	d011      	beq.n	8009192 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800916e:	4b2f      	ldr	r3, [pc, #188]	@ (800922c <Device_Test+0xd8>)
 8009170:	2201      	movs	r2, #1
 8009172:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8009174:	4b2e      	ldr	r3, [pc, #184]	@ (8009230 <Device_Test+0xdc>)
 8009176:	2201      	movs	r2, #1
 8009178:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800917a:	f004 fc99 	bl	800dab0 <Calculate_LED_ON>
 800917e:	0003      	movs	r3, r0
 8009180:	0019      	movs	r1, r3
 8009182:	23fa      	movs	r3, #250	@ 0xfa
 8009184:	011a      	lsls	r2, r3, #4
 8009186:	23fa      	movs	r3, #250	@ 0xfa
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	0018      	movs	r0, r3
 800918c:	f004 fcd8 	bl	800db40 <SetStatusLED>
 8009190:	e011      	b.n	80091b6 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 8009192:	f003 fde3 	bl	800cd5c <micSettlingComplete>
 8009196:	1e03      	subs	r3, r0, #0
 8009198:	d00d      	beq.n	80091b6 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800919a:	4b25      	ldr	r3, [pc, #148]	@ (8009230 <Device_Test+0xdc>)
 800919c:	2201      	movs	r2, #1
 800919e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 80091a0:	f004 fc86 	bl	800dab0 <Calculate_LED_ON>
 80091a4:	0003      	movs	r3, r0
 80091a6:	0018      	movs	r0, r3
 80091a8:	23fa      	movs	r3, #250	@ 0xfa
 80091aa:	011a      	lsls	r2, r3, #4
 80091ac:	23fa      	movs	r3, #250	@ 0xfa
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	0019      	movs	r1, r3
 80091b2:	f004 fcc5 	bl	800db40 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 80091b6:	4b1d      	ldr	r3, [pc, #116]	@ (800922c <Device_Test+0xd8>)
 80091b8:	791b      	ldrb	r3, [r3, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	4053      	eors	r3, r2
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80091c4:	f7fc f95e 	bl	8005484 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80091c8:	4b18      	ldr	r3, [pc, #96]	@ (800922c <Device_Test+0xd8>)
 80091ca:	791b      	ldrb	r3, [r3, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d003      	beq.n	80091d8 <Device_Test+0x84>
 80091d0:	4b16      	ldr	r3, [pc, #88]	@ (800922c <Device_Test+0xd8>)
 80091d2:	78db      	ldrb	r3, [r3, #3]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d106      	bne.n	80091e6 <Device_Test+0x92>
 80091d8:	4b16      	ldr	r3, [pc, #88]	@ (8009234 <Device_Test+0xe0>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	0018      	movs	r0, r3
 80091de:	f005 fec1 	bl	800ef64 <TimestampIsReached>
 80091e2:	1e03      	subs	r3, r0, #0
 80091e4:	d01f      	beq.n	8009226 <Device_Test+0xd2>
    Info("Test completed");
 80091e6:	4a14      	ldr	r2, [pc, #80]	@ (8009238 <Device_Test+0xe4>)
 80091e8:	4b14      	ldr	r3, [pc, #80]	@ (800923c <Device_Test+0xe8>)
 80091ea:	0019      	movs	r1, r3
 80091ec:	2002      	movs	r0, #2
 80091ee:	f005 ff0f 	bl	800f010 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 80091f2:	4b0e      	ldr	r3, [pc, #56]	@ (800922c <Device_Test+0xd8>)
 80091f4:	791b      	ldrb	r3, [r3, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <Device_Test+0xaa>
 80091fa:	4b11      	ldr	r3, [pc, #68]	@ (8009240 <Device_Test+0xec>)
 80091fc:	e000      	b.n	8009200 <Device_Test+0xac>
 80091fe:	4b11      	ldr	r3, [pc, #68]	@ (8009244 <Device_Test+0xf0>)
 8009200:	4a11      	ldr	r2, [pc, #68]	@ (8009248 <Device_Test+0xf4>)
 8009202:	490e      	ldr	r1, [pc, #56]	@ (800923c <Device_Test+0xe8>)
 8009204:	2002      	movs	r0, #2
 8009206:	f005 ff03 	bl	800f010 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800920a:	4b08      	ldr	r3, [pc, #32]	@ (800922c <Device_Test+0xd8>)
 800920c:	78db      	ldrb	r3, [r3, #3]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <Device_Test+0xc2>
 8009212:	4b0b      	ldr	r3, [pc, #44]	@ (8009240 <Device_Test+0xec>)
 8009214:	e000      	b.n	8009218 <Device_Test+0xc4>
 8009216:	4b0b      	ldr	r3, [pc, #44]	@ (8009244 <Device_Test+0xf0>)
 8009218:	4a0c      	ldr	r2, [pc, #48]	@ (800924c <Device_Test+0xf8>)
 800921a:	4908      	ldr	r1, [pc, #32]	@ (800923c <Device_Test+0xe8>)
 800921c:	2002      	movs	r0, #2
 800921e:	f005 fef7 	bl	800f010 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 8009222:	f7ff f9b3 	bl	800858c <SetTestDone>
  }
}
 8009226:	46c0      	nop			@ (mov r8, r8)
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20000d18 	.word	0x20000d18
 8009230:	20000d14 	.word	0x20000d14
 8009234:	20000d0c 	.word	0x20000d0c
 8009238:	080254ec 	.word	0x080254ec
 800923c:	08025368 	.word	0x08025368
 8009240:	080254fc 	.word	0x080254fc
 8009244:	08025504 	.word	0x08025504
 8009248:	0802550c 	.word	0x0802550c
 800924c:	08025520 	.word	0x08025520

08009250 <AllDevicesReady>:

bool AllDevicesReady() {
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8009254:	4b2a      	ldr	r3, [pc, #168]	@ (8009300 <AllDevicesReady+0xb0>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	0018      	movs	r0, r3
 800925a:	f005 fe83 	bl	800ef64 <TimestampIsReached>
 800925e:	1e03      	subs	r3, r0, #0
 8009260:	d04a      	beq.n	80092f8 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8009262:	4b28      	ldr	r3, [pc, #160]	@ (8009304 <AllDevicesReady+0xb4>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b06      	cmp	r3, #6
 8009268:	d102      	bne.n	8009270 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800926a:	4b27      	ldr	r3, [pc, #156]	@ (8009308 <AllDevicesReady+0xb8>)
 800926c:	2200      	movs	r2, #0
 800926e:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8009270:	4b26      	ldr	r3, [pc, #152]	@ (800930c <AllDevicesReady+0xbc>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b07      	cmp	r3, #7
 8009276:	d006      	beq.n	8009286 <AllDevicesReady+0x36>
 8009278:	4b25      	ldr	r3, [pc, #148]	@ (8009310 <AllDevicesReady+0xc0>)
 800927a:	795b      	ldrb	r3, [r3, #5]
 800927c:	2201      	movs	r2, #1
 800927e:	4053      	eors	r3, r2
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 8009286:	4b20      	ldr	r3, [pc, #128]	@ (8009308 <AllDevicesReady+0xb8>)
 8009288:	2200      	movs	r2, #0
 800928a:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800928c:	4b21      	ldr	r3, [pc, #132]	@ (8009314 <AllDevicesReady+0xc4>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d102      	bne.n	800929a <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 8009294:	4b1c      	ldr	r3, [pc, #112]	@ (8009308 <AllDevicesReady+0xb8>)
 8009296:	2200      	movs	r2, #0
 8009298:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800929a:	4b1f      	ldr	r3, [pc, #124]	@ (8009318 <AllDevicesReady+0xc8>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d102      	bne.n	80092a8 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 80092a2:	4b19      	ldr	r3, [pc, #100]	@ (8009308 <AllDevicesReady+0xb8>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 80092a8:	4b1c      	ldr	r3, [pc, #112]	@ (800931c <AllDevicesReady+0xcc>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	d123      	bne.n	80092f8 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80092b0:	4b15      	ldr	r3, [pc, #84]	@ (8009308 <AllDevicesReady+0xb8>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2201      	movs	r2, #1
 80092b6:	4053      	eors	r3, r2
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d016      	beq.n	80092ec <AllDevicesReady+0x9c>
 80092be:	4b12      	ldr	r3, [pc, #72]	@ (8009308 <AllDevicesReady+0xb8>)
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	2201      	movs	r2, #1
 80092c4:	4053      	eors	r3, r2
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00f      	beq.n	80092ec <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80092cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009308 <AllDevicesReady+0xb8>)
 80092ce:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80092d0:	2201      	movs	r2, #1
 80092d2:	4053      	eors	r3, r2
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d008      	beq.n	80092ec <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80092da:	4b0b      	ldr	r3, [pc, #44]	@ (8009308 <AllDevicesReady+0xb8>)
 80092dc:	78db      	ldrb	r3, [r3, #3]
 80092de:	2201      	movs	r2, #1
 80092e0:	4053      	eors	r3, r2
 80092e2:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <AllDevicesReady+0x9c>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <AllDevicesReady+0x9e>
 80092ec:	2300      	movs	r3, #0
 80092ee:	1c1a      	adds	r2, r3, #0
 80092f0:	2301      	movs	r3, #1
 80092f2:	4013      	ands	r3, r2
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	e000      	b.n	80092fa <AllDevicesReady+0xaa>
    }
  }
  return false;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	0018      	movs	r0, r3
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	20000d0c 	.word	0x20000d0c
 8009304:	20000cf9 	.word	0x20000cf9
 8009308:	20000d14 	.word	0x20000d14
 800930c:	20000cf8 	.word	0x20000cf8
 8009310:	20000d18 	.word	0x20000d18
 8009314:	20000089 	.word	0x20000089
 8009318:	20000cfa 	.word	0x20000cfa
 800931c:	20000cfb 	.word	0x20000cfb

08009320 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8009324:	4b11      	ldr	r3, [pc, #68]	@ (800936c <EnabledConnectedDevices+0x4c>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800932c:	4b10      	ldr	r3, [pc, #64]	@ (8009370 <EnabledConnectedDevices+0x50>)
 800932e:	2201      	movs	r2, #1
 8009330:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 8009332:	4b0e      	ldr	r3, [pc, #56]	@ (800936c <EnabledConnectedDevices+0x4c>)
 8009334:	785b      	ldrb	r3, [r3, #1]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d006      	beq.n	8009348 <EnabledConnectedDevices+0x28>
 800933a:	4b0c      	ldr	r3, [pc, #48]	@ (800936c <EnabledConnectedDevices+0x4c>)
 800933c:	795b      	ldrb	r3, [r3, #5]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 8009342:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <EnabledConnectedDevices+0x50>)
 8009344:	2201      	movs	r2, #1
 8009346:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8009348:	4b08      	ldr	r3, [pc, #32]	@ (800936c <EnabledConnectedDevices+0x4c>)
 800934a:	789b      	ldrb	r3, [r3, #2]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8009350:	4b07      	ldr	r3, [pc, #28]	@ (8009370 <EnabledConnectedDevices+0x50>)
 8009352:	2201      	movs	r2, #1
 8009354:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8009356:	4b05      	ldr	r3, [pc, #20]	@ (800936c <EnabledConnectedDevices+0x4c>)
 8009358:	78db      	ldrb	r3, [r3, #3]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 800935e:	4b04      	ldr	r3, [pc, #16]	@ (8009370 <EnabledConnectedDevices+0x50>)
 8009360:	2201      	movs	r2, #1
 8009362:	70da      	strb	r2, [r3, #3]
  }
}
 8009364:	46c0      	nop			@ (mov r8, r8)
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	20000d18 	.word	0x20000d18
 8009370:	20000d14 	.word	0x20000d14

08009374 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8009378:	4a0a      	ldr	r2, [pc, #40]	@ (80093a4 <DisableConnectedDevices+0x30>)
 800937a:	4b0b      	ldr	r3, [pc, #44]	@ (80093a8 <DisableConnectedDevices+0x34>)
 800937c:	0019      	movs	r1, r3
 800937e:	2003      	movs	r0, #3
 8009380:	f005 fe46 	bl	800f010 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 8009384:	4b09      	ldr	r3, [pc, #36]	@ (80093ac <DisableConnectedDevices+0x38>)
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800938a:	4b08      	ldr	r3, [pc, #32]	@ (80093ac <DisableConnectedDevices+0x38>)
 800938c:	2200      	movs	r2, #0
 800938e:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <DisableConnectedDevices+0x38>)
 8009392:	2200      	movs	r2, #0
 8009394:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 8009396:	4b05      	ldr	r3, [pc, #20]	@ (80093ac <DisableConnectedDevices+0x38>)
 8009398:	2200      	movs	r2, #0
 800939a:	70da      	strb	r2, [r3, #3]
}
 800939c:	46c0      	nop			@ (mov r8, r8)
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	46c0      	nop			@ (mov r8, r8)
 80093a4:	08025534 	.word	0x08025534
 80093a8:	080252ac 	.word	0x080252ac
 80093ac:	20000d14 	.word	0x20000d14

080093b0 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 80093b4:	4b02      	ldr	r3, [pc, #8]	@ (80093c0 <ResetdBAmax+0x10>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
}
 80093ba:	46c0      	nop			@ (mov r8, r8)
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	20000d64 	.word	0x20000d64

080093c4 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80093cc:	f006 fa64 	bl	800f898 <HAL_GetTick>
 80093d0:	0002      	movs	r2, r0
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	18d2      	adds	r2, r2, r3
 80093d6:	4b03      	ldr	r3, [pc, #12]	@ (80093e4 <setMICTimeStamp+0x20>)
 80093d8:	601a      	str	r2, [r3, #0]
}
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	46bd      	mov	sp, r7
 80093de:	b002      	add	sp, #8
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	46c0      	nop			@ (mov r8, r8)
 80093e4:	20000d6c 	.word	0x20000d6c

080093e8 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  counter = 0;
 80093ec:	4b05      	ldr	r3, [pc, #20]	@ (8009404 <ResetDBACalculator+0x1c>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80093f2:	4b05      	ldr	r3, [pc, #20]	@ (8009408 <ResetDBACalculator+0x20>)
 80093f4:	2201      	movs	r2, #1
 80093f6:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80093f8:	4b04      	ldr	r3, [pc, #16]	@ (800940c <ResetDBACalculator+0x24>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]
}
 80093fe:	46c0      	nop			@ (mov r8, r8)
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20000d68 	.word	0x20000d68
 8009408:	20000088 	.word	0x20000088
 800940c:	20000d69 	.word	0x20000d69

08009410 <MIC_Print>:

void MIC_Print(void) {
 8009410:	b5b0      	push	{r4, r5, r7, lr}
 8009412:	b08a      	sub	sp, #40	@ 0x28
 8009414:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8009416:	4b9f      	ldr	r3, [pc, #636]	@ (8009694 <MIC_Print+0x284>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	4b9f      	ldr	r3, [pc, #636]	@ (8009698 <MIC_Print+0x288>)
 800941c:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800941e:	4b9f      	ldr	r3, [pc, #636]	@ (800969c <MIC_Print+0x28c>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	001a      	movs	r2, r3
 8009424:	4b9c      	ldr	r3, [pc, #624]	@ (8009698 <MIC_Print+0x288>)
 8009426:	6819      	ldr	r1, [r3, #0]
 8009428:	4b9d      	ldr	r3, [pc, #628]	@ (80096a0 <MIC_Print+0x290>)
 800942a:	0092      	lsls	r2, r2, #2
 800942c:	50d1      	str	r1, [r2, r3]
  counter++;
 800942e:	4b9b      	ldr	r3, [pc, #620]	@ (800969c <MIC_Print+0x28c>)
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	3301      	adds	r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	4b99      	ldr	r3, [pc, #612]	@ (800969c <MIC_Print+0x28c>)
 8009438:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800943a:	4b98      	ldr	r3, [pc, #608]	@ (800969c <MIC_Print+0x28c>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b09      	cmp	r3, #9
 8009440:	d80b      	bhi.n	800945a <MIC_Print+0x4a>
 8009442:	4b98      	ldr	r3, [pc, #608]	@ (80096a4 <MIC_Print+0x294>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2201      	movs	r2, #1
 8009448:	4053      	eors	r3, r2
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d004      	beq.n	800945a <MIC_Print+0x4a>
    denominator = counter;
 8009450:	4b92      	ldr	r3, [pc, #584]	@ (800969c <MIC_Print+0x28c>)
 8009452:	781a      	ldrb	r2, [r3, #0]
 8009454:	4b94      	ldr	r3, [pc, #592]	@ (80096a8 <MIC_Print+0x298>)
 8009456:	701a      	strb	r2, [r3, #0]
 8009458:	e005      	b.n	8009466 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800945a:	4b93      	ldr	r3, [pc, #588]	@ (80096a8 <MIC_Print+0x298>)
 800945c:	220a      	movs	r2, #10
 800945e:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8009460:	4b90      	ldr	r3, [pc, #576]	@ (80096a4 <MIC_Print+0x294>)
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8009466:	4b91      	ldr	r3, [pc, #580]	@ (80096ac <MIC_Print+0x29c>)
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800946c:	230f      	movs	r3, #15
 800946e:	18fb      	adds	r3, r7, r3
 8009470:	2200      	movs	r2, #0
 8009472:	701a      	strb	r2, [r3, #0]
 8009474:	e042      	b.n	80094fc <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 8009476:	240f      	movs	r4, #15
 8009478:	193b      	adds	r3, r7, r4
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	4b88      	ldr	r3, [pc, #544]	@ (80096a0 <MIC_Print+0x290>)
 800947e:	0092      	lsls	r2, r2, #2
 8009480:	58d2      	ldr	r2, [r2, r3]
 8009482:	4b8a      	ldr	r3, [pc, #552]	@ (80096ac <MIC_Print+0x29c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	1c19      	adds	r1, r3, #0
 8009488:	1c10      	adds	r0, r2, #0
 800948a:	f7f7 fa19 	bl	80008c0 <__aeabi_fadd>
 800948e:	1c03      	adds	r3, r0, #0
 8009490:	1c1a      	adds	r2, r3, #0
 8009492:	4b86      	ldr	r3, [pc, #536]	@ (80096ac <MIC_Print+0x29c>)
 8009494:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8009496:	193b      	adds	r3, r7, r4
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	4b81      	ldr	r3, [pc, #516]	@ (80096a0 <MIC_Print+0x290>)
 800949c:	0092      	lsls	r2, r2, #2
 800949e:	58d2      	ldr	r2, [r2, r3]
 80094a0:	4b83      	ldr	r3, [pc, #524]	@ (80096b0 <MIC_Print+0x2a0>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	1c19      	adds	r1, r3, #0
 80094a6:	1c10      	adds	r0, r2, #0
 80094a8:	f7f7 f856 	bl	8000558 <__aeabi_fcmpgt>
 80094ac:	1e03      	subs	r3, r0, #0
 80094ae:	d006      	beq.n	80094be <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 80094b0:	193b      	adds	r3, r7, r4
 80094b2:	781a      	ldrb	r2, [r3, #0]
 80094b4:	4b7a      	ldr	r3, [pc, #488]	@ (80096a0 <MIC_Print+0x290>)
 80094b6:	0092      	lsls	r2, r2, #2
 80094b8:	58d2      	ldr	r2, [r2, r3]
 80094ba:	4b7d      	ldr	r3, [pc, #500]	@ (80096b0 <MIC_Print+0x2a0>)
 80094bc:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80094be:	4b7b      	ldr	r3, [pc, #492]	@ (80096ac <MIC_Print+0x29c>)
 80094c0:	681c      	ldr	r4, [r3, #0]
 80094c2:	4b79      	ldr	r3, [pc, #484]	@ (80096a8 <MIC_Print+0x298>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	0018      	movs	r0, r3
 80094c8:	f7f8 f8ce 	bl	8001668 <__aeabi_ui2f>
 80094cc:	1c03      	adds	r3, r0, #0
 80094ce:	1c19      	adds	r1, r3, #0
 80094d0:	1c20      	adds	r0, r4, #0
 80094d2:	f7f7 fb7f 	bl	8000bd4 <__aeabi_fdiv>
 80094d6:	1c03      	adds	r3, r0, #0
 80094d8:	1c1a      	adds	r2, r3, #0
 80094da:	4b76      	ldr	r3, [pc, #472]	@ (80096b4 <MIC_Print+0x2a4>)
 80094dc:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 80094de:	4b6e      	ldr	r3, [pc, #440]	@ (8009698 <MIC_Print+0x288>)
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	4b73      	ldr	r3, [pc, #460]	@ (80096b0 <MIC_Print+0x2a0>)
 80094e4:	6819      	ldr	r1, [r3, #0]
 80094e6:	4b73      	ldr	r3, [pc, #460]	@ (80096b4 <MIC_Print+0x2a4>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	1c1a      	adds	r2, r3, #0
 80094ec:	f7fa f988 	bl	8003800 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 80094f0:	210f      	movs	r1, #15
 80094f2:	187b      	adds	r3, r7, r1
 80094f4:	781a      	ldrb	r2, [r3, #0]
 80094f6:	187b      	adds	r3, r7, r1
 80094f8:	3201      	adds	r2, #1
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	4b6a      	ldr	r3, [pc, #424]	@ (80096a8 <MIC_Print+0x298>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	220f      	movs	r2, #15
 8009502:	18ba      	adds	r2, r7, r2
 8009504:	7812      	ldrb	r2, [r2, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d3b5      	bcc.n	8009476 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800950a:	4b63      	ldr	r3, [pc, #396]	@ (8009698 <MIC_Print+0x288>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	1c18      	adds	r0, r3, #0
 8009510:	f7f9 ffa8 	bl	8003464 <__aeabi_f2d>
 8009514:	6038      	str	r0, [r7, #0]
 8009516:	6079      	str	r1, [r7, #4]
 8009518:	4b65      	ldr	r3, [pc, #404]	@ (80096b0 <MIC_Print+0x2a0>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	1c18      	adds	r0, r3, #0
 800951e:	f7f9 ffa1 	bl	8003464 <__aeabi_f2d>
 8009522:	0004      	movs	r4, r0
 8009524:	000d      	movs	r5, r1
 8009526:	4b63      	ldr	r3, [pc, #396]	@ (80096b4 <MIC_Print+0x2a4>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	1c18      	adds	r0, r3, #0
 800952c:	f7f9 ff9a 	bl	8003464 <__aeabi_f2d>
 8009530:	0002      	movs	r2, r0
 8009532:	000b      	movs	r3, r1
 8009534:	4960      	ldr	r1, [pc, #384]	@ (80096b8 <MIC_Print+0x2a8>)
 8009536:	9204      	str	r2, [sp, #16]
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	9402      	str	r4, [sp, #8]
 800953c:	9503      	str	r5, [sp, #12]
 800953e:	4b5f      	ldr	r3, [pc, #380]	@ (80096bc <MIC_Print+0x2ac>)
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	0008      	movs	r0, r1
 8009548:	f017 fa4a 	bl	80209e0 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800954c:	4b53      	ldr	r3, [pc, #332]	@ (800969c <MIC_Print+0x28c>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b0a      	cmp	r3, #10
 8009552:	d902      	bls.n	800955a <MIC_Print+0x14a>
    counter = 0;
 8009554:	4b51      	ldr	r3, [pc, #324]	@ (800969c <MIC_Print+0x28c>)
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800955a:	4b4f      	ldr	r3, [pc, #316]	@ (8009698 <MIC_Print+0x288>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4958      	ldr	r1, [pc, #352]	@ (80096c0 <MIC_Print+0x2b0>)
 8009560:	1c18      	adds	r0, r3, #0
 8009562:	f7f7 f803 	bl	800056c <__aeabi_fcmpge>
 8009566:	1e03      	subs	r3, r0, #0
 8009568:	d004      	beq.n	8009574 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800956a:	2201      	movs	r2, #1
 800956c:	2101      	movs	r1, #1
 800956e:	2001      	movs	r0, #1
 8009570:	f004 fb1a 	bl	800dba8 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8009574:	4b48      	ldr	r3, [pc, #288]	@ (8009698 <MIC_Print+0x288>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4952      	ldr	r1, [pc, #328]	@ (80096c4 <MIC_Print+0x2b4>)
 800957a:	1c18      	adds	r0, r3, #0
 800957c:	f7f6 fff6 	bl	800056c <__aeabi_fcmpge>
 8009580:	1e03      	subs	r3, r0, #0
 8009582:	d00c      	beq.n	800959e <MIC_Print+0x18e>
 8009584:	4b44      	ldr	r3, [pc, #272]	@ (8009698 <MIC_Print+0x288>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	494d      	ldr	r1, [pc, #308]	@ (80096c0 <MIC_Print+0x2b0>)
 800958a:	1c18      	adds	r0, r3, #0
 800958c:	f7f6 ffd0 	bl	8000530 <__aeabi_fcmplt>
 8009590:	1e03      	subs	r3, r0, #0
 8009592:	d004      	beq.n	800959e <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 8009594:	2200      	movs	r2, #0
 8009596:	2100      	movs	r1, #0
 8009598:	2001      	movs	r0, #1
 800959a:	f004 fb05 	bl	800dba8 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800959e:	4b3e      	ldr	r3, [pc, #248]	@ (8009698 <MIC_Print+0x288>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4949      	ldr	r1, [pc, #292]	@ (80096c8 <MIC_Print+0x2b8>)
 80095a4:	1c18      	adds	r0, r3, #0
 80095a6:	f7f6 ffe1 	bl	800056c <__aeabi_fcmpge>
 80095aa:	1e03      	subs	r3, r0, #0
 80095ac:	d00c      	beq.n	80095c8 <MIC_Print+0x1b8>
 80095ae:	4b3a      	ldr	r3, [pc, #232]	@ (8009698 <MIC_Print+0x288>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4944      	ldr	r1, [pc, #272]	@ (80096c4 <MIC_Print+0x2b4>)
 80095b4:	1c18      	adds	r0, r3, #0
 80095b6:	f7f6 ffbb 	bl	8000530 <__aeabi_fcmplt>
 80095ba:	1e03      	subs	r3, r0, #0
 80095bc:	d004      	beq.n	80095c8 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 80095be:	2200      	movs	r2, #0
 80095c0:	2101      	movs	r1, #1
 80095c2:	2001      	movs	r0, #1
 80095c4:	f004 faf0 	bl	800dba8 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 80095c8:	4b33      	ldr	r3, [pc, #204]	@ (8009698 <MIC_Print+0x288>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	493f      	ldr	r1, [pc, #252]	@ (80096cc <MIC_Print+0x2bc>)
 80095ce:	1c18      	adds	r0, r3, #0
 80095d0:	f7f6 ffcc 	bl	800056c <__aeabi_fcmpge>
 80095d4:	1e03      	subs	r3, r0, #0
 80095d6:	d00c      	beq.n	80095f2 <MIC_Print+0x1e2>
 80095d8:	4b2f      	ldr	r3, [pc, #188]	@ (8009698 <MIC_Print+0x288>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	493a      	ldr	r1, [pc, #232]	@ (80096c8 <MIC_Print+0x2b8>)
 80095de:	1c18      	adds	r0, r3, #0
 80095e0:	f7f6 ffa6 	bl	8000530 <__aeabi_fcmplt>
 80095e4:	1e03      	subs	r3, r0, #0
 80095e6:	d004      	beq.n	80095f2 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 80095e8:	2200      	movs	r2, #0
 80095ea:	2101      	movs	r1, #1
 80095ec:	2000      	movs	r0, #0
 80095ee:	f004 fadb 	bl	800dba8 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 80095f2:	4b29      	ldr	r3, [pc, #164]	@ (8009698 <MIC_Print+0x288>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4936      	ldr	r1, [pc, #216]	@ (80096d0 <MIC_Print+0x2c0>)
 80095f8:	1c18      	adds	r0, r3, #0
 80095fa:	f7f6 ffb7 	bl	800056c <__aeabi_fcmpge>
 80095fe:	1e03      	subs	r3, r0, #0
 8009600:	d00c      	beq.n	800961c <MIC_Print+0x20c>
 8009602:	4b25      	ldr	r3, [pc, #148]	@ (8009698 <MIC_Print+0x288>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4931      	ldr	r1, [pc, #196]	@ (80096cc <MIC_Print+0x2bc>)
 8009608:	1c18      	adds	r0, r3, #0
 800960a:	f7f6 ff91 	bl	8000530 <__aeabi_fcmplt>
 800960e:	1e03      	subs	r3, r0, #0
 8009610:	d004      	beq.n	800961c <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 8009612:	2201      	movs	r2, #1
 8009614:	2101      	movs	r1, #1
 8009616:	2000      	movs	r0, #0
 8009618:	f004 fac6 	bl	800dba8 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800961c:	4b1e      	ldr	r3, [pc, #120]	@ (8009698 <MIC_Print+0x288>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	492c      	ldr	r1, [pc, #176]	@ (80096d4 <MIC_Print+0x2c4>)
 8009622:	1c18      	adds	r0, r3, #0
 8009624:	f7f6 ffa2 	bl	800056c <__aeabi_fcmpge>
 8009628:	1e03      	subs	r3, r0, #0
 800962a:	d00c      	beq.n	8009646 <MIC_Print+0x236>
 800962c:	4b1a      	ldr	r3, [pc, #104]	@ (8009698 <MIC_Print+0x288>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4927      	ldr	r1, [pc, #156]	@ (80096d0 <MIC_Print+0x2c0>)
 8009632:	1c18      	adds	r0, r3, #0
 8009634:	f7f6 ff7c 	bl	8000530 <__aeabi_fcmplt>
 8009638:	1e03      	subs	r3, r0, #0
 800963a:	d004      	beq.n	8009646 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800963c:	2201      	movs	r2, #1
 800963e:	2100      	movs	r1, #0
 8009640:	2000      	movs	r0, #0
 8009642:	f004 fab1 	bl	800dba8 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8009646:	4b14      	ldr	r3, [pc, #80]	@ (8009698 <MIC_Print+0x288>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4923      	ldr	r1, [pc, #140]	@ (80096d8 <MIC_Print+0x2c8>)
 800964c:	1c18      	adds	r0, r3, #0
 800964e:	f7f6 ff8d 	bl	800056c <__aeabi_fcmpge>
 8009652:	1e03      	subs	r3, r0, #0
 8009654:	d00c      	beq.n	8009670 <MIC_Print+0x260>
 8009656:	4b10      	ldr	r3, [pc, #64]	@ (8009698 <MIC_Print+0x288>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	491e      	ldr	r1, [pc, #120]	@ (80096d4 <MIC_Print+0x2c4>)
 800965c:	1c18      	adds	r0, r3, #0
 800965e:	f7f6 ff67 	bl	8000530 <__aeabi_fcmplt>
 8009662:	1e03      	subs	r3, r0, #0
 8009664:	d004      	beq.n	8009670 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 8009666:	2201      	movs	r2, #1
 8009668:	2100      	movs	r1, #0
 800966a:	2001      	movs	r0, #1
 800966c:	f004 fa9c 	bl	800dba8 <SetDBLED>
  }
  if(dBA < 35){//off
 8009670:	4b09      	ldr	r3, [pc, #36]	@ (8009698 <MIC_Print+0x288>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4918      	ldr	r1, [pc, #96]	@ (80096d8 <MIC_Print+0x2c8>)
 8009676:	1c18      	adds	r0, r3, #0
 8009678:	f7f6 ff5a 	bl	8000530 <__aeabi_fcmplt>
 800967c:	1e03      	subs	r3, r0, #0
 800967e:	d100      	bne.n	8009682 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 8009680:	e004      	b.n	800968c <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 8009682:	2200      	movs	r2, #0
 8009684:	2100      	movs	r1, #0
 8009686:	2000      	movs	r0, #0
 8009688:	f004 fa8e 	bl	800dba8 <SetDBLED>
}
 800968c:	46c0      	nop			@ (mov r8, r8)
 800968e:	46bd      	mov	sp, r7
 8009690:	b004      	add	sp, #16
 8009692:	bdb0      	pop	{r4, r5, r7, pc}
 8009694:	20000d60 	.word	0x20000d60
 8009698:	20000d2c 	.word	0x20000d2c
 800969c:	20000d68 	.word	0x20000d68
 80096a0:	20000d30 	.word	0x20000d30
 80096a4:	20000d69 	.word	0x20000d69
 80096a8:	20000088 	.word	0x20000088
 80096ac:	20000d5c 	.word	0x20000d5c
 80096b0:	20000d64 	.word	0x20000d64
 80096b4:	20000d58 	.word	0x20000d58
 80096b8:	08025548 	.word	0x08025548
 80096bc:	20000d20 	.word	0x20000d20
 80096c0:	42b40000 	.word	0x42b40000
 80096c4:	42a00000 	.word	0x42a00000
 80096c8:	428c0000 	.word	0x428c0000
 80096cc:	42700000 	.word	0x42700000
 80096d0:	42480000 	.word	0x42480000
 80096d4:	42200000 	.word	0x42200000
 80096d8:	420c0000 	.word	0x420c0000

080096dc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80096e2:	4b11      	ldr	r3, [pc, #68]	@ (8009728 <MIC_TestMeasurementDone+0x4c>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	4a10      	ldr	r2, [pc, #64]	@ (800972c <MIC_TestMeasurementDone+0x50>)
 80096ea:	4911      	ldr	r1, [pc, #68]	@ (8009730 <MIC_TestMeasurementDone+0x54>)
 80096ec:	2002      	movs	r0, #2
 80096ee:	f005 fc8f 	bl	800f010 <CreateLine>
  if(DataReady) {
 80096f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009728 <MIC_TestMeasurementDone+0x4c>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d010      	beq.n	800971e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 80096fc:	1dfb      	adds	r3, r7, #7
 80096fe:	4a0d      	ldr	r2, [pc, #52]	@ (8009734 <MIC_TestMeasurementDone+0x58>)
 8009700:	7812      	ldrb	r2, [r2, #0]
 8009702:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8009704:	4b0b      	ldr	r3, [pc, #44]	@ (8009734 <MIC_TestMeasurementDone+0x58>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	4a0b      	ldr	r2, [pc, #44]	@ (8009738 <MIC_TestMeasurementDone+0x5c>)
 800970c:	4908      	ldr	r1, [pc, #32]	@ (8009730 <MIC_TestMeasurementDone+0x54>)
 800970e:	2002      	movs	r0, #2
 8009710:	f005 fc7e 	bl	800f010 <CreateLine>
    ResetMICIndicator();
 8009714:	f004 fb36 	bl	800dd84 <ResetMICIndicator>
    return Check;
 8009718:	1dfb      	adds	r3, r7, #7
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	e000      	b.n	8009720 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800971e:	2300      	movs	r3, #0
}
 8009720:	0018      	movs	r0, r3
 8009722:	46bd      	mov	sp, r7
 8009724:	b002      	add	sp, #8
 8009726:	bd80      	pop	{r7, pc}
 8009728:	20000e9d 	.word	0x20000e9d
 800972c:	08025590 	.word	0x08025590
 8009730:	080255bc 	.word	0x080255bc
 8009734:	20000e9e 	.word	0x20000e9e
 8009738:	080255c0 	.word	0x080255c0

0800973c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8009742:	4b78      	ldr	r3, [pc, #480]	@ (8009924 <Mic_Upkeep+0x1e8>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b03      	cmp	r3, #3
 8009748:	d100      	bne.n	800974c <Mic_Upkeep+0x10>
 800974a:	e0b8      	b.n	80098be <Mic_Upkeep+0x182>
 800974c:	dd00      	ble.n	8009750 <Mic_Upkeep+0x14>
 800974e:	e0d3      	b.n	80098f8 <Mic_Upkeep+0x1bc>
 8009750:	2b02      	cmp	r3, #2
 8009752:	d037      	beq.n	80097c4 <Mic_Upkeep+0x88>
 8009754:	dd00      	ble.n	8009758 <Mic_Upkeep+0x1c>
 8009756:	e0cf      	b.n	80098f8 <Mic_Upkeep+0x1bc>
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <Mic_Upkeep+0x26>
 800975c:	2b01      	cmp	r3, #1
 800975e:	d014      	beq.n	800978a <Mic_Upkeep+0x4e>
 8009760:	e0ca      	b.n	80098f8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8009762:	2001      	movs	r0, #1
 8009764:	f003 fb1e 	bl	800cda4 <enableMicrophone>
 8009768:	0003      	movs	r3, r0
 800976a:	001a      	movs	r2, r3
 800976c:	2301      	movs	r3, #1
 800976e:	4053      	eors	r3, r2
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d005      	beq.n	8009782 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8009776:	4a6c      	ldr	r2, [pc, #432]	@ (8009928 <Mic_Upkeep+0x1ec>)
 8009778:	4b6c      	ldr	r3, [pc, #432]	@ (800992c <Mic_Upkeep+0x1f0>)
 800977a:	217f      	movs	r1, #127	@ 0x7f
 800977c:	0018      	movs	r0, r3
 800977e:	f005 fcff 	bl	800f180 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8009782:	4b68      	ldr	r3, [pc, #416]	@ (8009924 <Mic_Upkeep+0x1e8>)
 8009784:	2201      	movs	r2, #1
 8009786:	701a      	strb	r2, [r3, #0]
    break;
 8009788:	e0c5      	b.n	8009916 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800978a:	f003 fae7 	bl	800cd5c <micSettlingComplete>
 800978e:	1e03      	subs	r3, r0, #0
 8009790:	d105      	bne.n	800979e <Mic_Upkeep+0x62>
 8009792:	4b67      	ldr	r3, [pc, #412]	@ (8009930 <Mic_Upkeep+0x1f4>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d100      	bne.n	800979e <Mic_Upkeep+0x62>
 800979c:	e0b6      	b.n	800990c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800979e:	f003 fb6b 	bl	800ce78 <startSPLcalculation>
 80097a2:	0003      	movs	r3, r0
 80097a4:	001a      	movs	r2, r3
 80097a6:	2301      	movs	r3, #1
 80097a8:	4053      	eors	r3, r2
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80097b0:	4a5d      	ldr	r2, [pc, #372]	@ (8009928 <Mic_Upkeep+0x1ec>)
 80097b2:	4b5e      	ldr	r3, [pc, #376]	@ (800992c <Mic_Upkeep+0x1f0>)
 80097b4:	2188      	movs	r1, #136	@ 0x88
 80097b6:	0018      	movs	r0, r3
 80097b8:	f005 fce2 	bl	800f180 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80097bc:	4b59      	ldr	r3, [pc, #356]	@ (8009924 <Mic_Upkeep+0x1e8>)
 80097be:	2202      	movs	r2, #2
 80097c0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80097c2:	e0a3      	b.n	800990c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80097c4:	4b5b      	ldr	r3, [pc, #364]	@ (8009934 <Mic_Upkeep+0x1f8>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	2101      	movs	r1, #1
 80097ca:	0018      	movs	r0, r3
 80097cc:	f003 f9a8 	bl	800cb20 <getSoundData>
 80097d0:	1e03      	subs	r3, r0, #0
 80097d2:	d100      	bne.n	80097d6 <Mic_Upkeep+0x9a>
 80097d4:	e09c      	b.n	8009910 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80097d6:	f003 faa1 	bl	800cd1c <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80097da:	4b56      	ldr	r3, [pc, #344]	@ (8009934 <Mic_Upkeep+0x1f8>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	001a      	movs	r2, r3
 80097e0:	4b54      	ldr	r3, [pc, #336]	@ (8009934 <Mic_Upkeep+0x1f8>)
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	4954      	ldr	r1, [pc, #336]	@ (8009938 <Mic_Upkeep+0x1fc>)
 80097e6:	0038      	movs	r0, r7
 80097e8:	f017 f96a 	bl	8020ac0 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80097ec:	4b51      	ldr	r3, [pc, #324]	@ (8009934 <Mic_Upkeep+0x1f8>)
 80097ee:	89db      	ldrh	r3, [r3, #14]
 80097f0:	001a      	movs	r2, r3
 80097f2:	4b50      	ldr	r3, [pc, #320]	@ (8009934 <Mic_Upkeep+0x1f8>)
 80097f4:	7c1b      	ldrb	r3, [r3, #16]
 80097f6:	4951      	ldr	r1, [pc, #324]	@ (800993c <Mic_Upkeep+0x200>)
 80097f8:	4851      	ldr	r0, [pc, #324]	@ (8009940 <Mic_Upkeep+0x204>)
 80097fa:	f017 f961 	bl	8020ac0 <siprintf>
      dBValue = atof(dBbuffer);
 80097fe:	003b      	movs	r3, r7
 8009800:	0018      	movs	r0, r3
 8009802:	f015 fd0d 	bl	801f220 <atof>
 8009806:	0002      	movs	r2, r0
 8009808:	000b      	movs	r3, r1
 800980a:	0010      	movs	r0, r2
 800980c:	0019      	movs	r1, r3
 800980e:	f7f9 fe71 	bl	80034f4 <__aeabi_d2f>
 8009812:	1c02      	adds	r2, r0, #0
 8009814:	4b4b      	ldr	r3, [pc, #300]	@ (8009944 <Mic_Upkeep+0x208>)
 8009816:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8009818:	4b4a      	ldr	r3, [pc, #296]	@ (8009944 <Mic_Upkeep+0x208>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	494a      	ldr	r1, [pc, #296]	@ (8009948 <Mic_Upkeep+0x20c>)
 800981e:	1c18      	adds	r0, r3, #0
 8009820:	f7f7 fbbe 	bl	8000fa0 <__aeabi_fmul>
 8009824:	1c03      	adds	r3, r0, #0
 8009826:	1c18      	adds	r0, r3, #0
 8009828:	f7f9 fe1c 	bl	8003464 <__aeabi_f2d>
 800982c:	2200      	movs	r2, #0
 800982e:	4b47      	ldr	r3, [pc, #284]	@ (800994c <Mic_Upkeep+0x210>)
 8009830:	f7f7 ff5c 	bl	80016ec <__aeabi_dadd>
 8009834:	0002      	movs	r2, r0
 8009836:	000b      	movs	r3, r1
 8009838:	0010      	movs	r0, r2
 800983a:	0019      	movs	r1, r3
 800983c:	f7f9 fd84 	bl	8003348 <__aeabi_d2iz>
 8009840:	0003      	movs	r3, r0
 8009842:	0018      	movs	r0, r3
 8009844:	f7f9 fdbc 	bl	80033c0 <__aeabi_i2d>
 8009848:	2200      	movs	r2, #0
 800984a:	4b41      	ldr	r3, [pc, #260]	@ (8009950 <Mic_Upkeep+0x214>)
 800984c:	f7f8 fab2 	bl	8001db4 <__aeabi_ddiv>
 8009850:	0002      	movs	r2, r0
 8009852:	000b      	movs	r3, r1
 8009854:	0010      	movs	r0, r2
 8009856:	0019      	movs	r1, r3
 8009858:	f7f9 fe4c 	bl	80034f4 <__aeabi_d2f>
 800985c:	1c02      	adds	r2, r0, #0
 800985e:	4b39      	ldr	r3, [pc, #228]	@ (8009944 <Mic_Upkeep+0x208>)
 8009860:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8009862:	f7ff fdd5 	bl	8009410 <MIC_Print>
      if (!startSPLcalculation()) {
 8009866:	f003 fb07 	bl	800ce78 <startSPLcalculation>
 800986a:	0003      	movs	r3, r0
 800986c:	001a      	movs	r2, r3
 800986e:	2301      	movs	r3, #1
 8009870:	4053      	eors	r3, r2
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8009878:	4a2b      	ldr	r2, [pc, #172]	@ (8009928 <Mic_Upkeep+0x1ec>)
 800987a:	4b2c      	ldr	r3, [pc, #176]	@ (800992c <Mic_Upkeep+0x1f0>)
 800987c:	2198      	movs	r1, #152	@ 0x98
 800987e:	0018      	movs	r0, r3
 8009880:	f005 fc7e 	bl	800f180 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8009884:	2000      	movs	r0, #0
 8009886:	f003 fa8d 	bl	800cda4 <enableMicrophone>
 800988a:	0003      	movs	r3, r0
 800988c:	001a      	movs	r2, r3
 800988e:	2301      	movs	r3, #1
 8009890:	4053      	eors	r3, r2
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	d005      	beq.n	80098a4 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8009898:	4a23      	ldr	r2, [pc, #140]	@ (8009928 <Mic_Upkeep+0x1ec>)
 800989a:	4b24      	ldr	r3, [pc, #144]	@ (800992c <Mic_Upkeep+0x1f0>)
 800989c:	219b      	movs	r1, #155	@ 0x9b
 800989e:	0018      	movs	r0, r3
 80098a0:	f005 fc6e 	bl	800f180 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 80098a4:	f005 fff8 	bl	800f898 <HAL_GetTick>
 80098a8:	0003      	movs	r3, r0
 80098aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009954 <Mic_Upkeep+0x218>)
 80098ac:	189a      	adds	r2, r3, r2
 80098ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009958 <Mic_Upkeep+0x21c>)
 80098b0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80098b2:	4b1c      	ldr	r3, [pc, #112]	@ (8009924 <Mic_Upkeep+0x1e8>)
 80098b4:	2203      	movs	r2, #3
 80098b6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80098b8:	f004 fa64 	bl	800dd84 <ResetMICIndicator>
    }
    break;
 80098bc:	e028      	b.n	8009910 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 80098be:	4b26      	ldr	r3, [pc, #152]	@ (8009958 <Mic_Upkeep+0x21c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	0018      	movs	r0, r3
 80098c4:	f005 fb4e 	bl	800ef64 <TimestampIsReached>
 80098c8:	1e03      	subs	r3, r0, #0
 80098ca:	d023      	beq.n	8009914 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 80098cc:	2001      	movs	r0, #1
 80098ce:	f003 fa69 	bl	800cda4 <enableMicrophone>
 80098d2:	0003      	movs	r3, r0
 80098d4:	001a      	movs	r2, r3
 80098d6:	2301      	movs	r3, #1
 80098d8:	4053      	eors	r3, r2
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d005      	beq.n	80098ec <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 80098e0:	4a11      	ldr	r2, [pc, #68]	@ (8009928 <Mic_Upkeep+0x1ec>)
 80098e2:	4b12      	ldr	r3, [pc, #72]	@ (800992c <Mic_Upkeep+0x1f0>)
 80098e4:	21a6      	movs	r1, #166	@ 0xa6
 80098e6:	0018      	movs	r0, r3
 80098e8:	f005 fc4a 	bl	800f180 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 80098ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009924 <Mic_Upkeep+0x1e8>)
 80098ee:	2201      	movs	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80098f2:	f004 fa05 	bl	800dd00 <SetMICIndicator>
    }
    break;
 80098f6:	e00d      	b.n	8009914 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 80098f8:	4a18      	ldr	r2, [pc, #96]	@ (800995c <Mic_Upkeep+0x220>)
 80098fa:	4b19      	ldr	r3, [pc, #100]	@ (8009960 <Mic_Upkeep+0x224>)
 80098fc:	0019      	movs	r1, r3
 80098fe:	2003      	movs	r0, #3
 8009900:	f005 fb86 	bl	800f010 <CreateLine>
    MicState = MIC_STATE_INIT;
 8009904:	4b07      	ldr	r3, [pc, #28]	@ (8009924 <Mic_Upkeep+0x1e8>)
 8009906:	2200      	movs	r2, #0
 8009908:	701a      	strb	r2, [r3, #0]
    break;
 800990a:	e004      	b.n	8009916 <Mic_Upkeep+0x1da>
    break;
 800990c:	46c0      	nop			@ (mov r8, r8)
 800990e:	e002      	b.n	8009916 <Mic_Upkeep+0x1da>
    break;
 8009910:	46c0      	nop			@ (mov r8, r8)
 8009912:	e000      	b.n	8009916 <Mic_Upkeep+0x1da>
    break;
 8009914:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8009916:	4b03      	ldr	r3, [pc, #12]	@ (8009924 <Mic_Upkeep+0x1e8>)
 8009918:	781b      	ldrb	r3, [r3, #0]
}
 800991a:	0018      	movs	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	b002      	add	sp, #8
 8009920:	bd80      	pop	{r7, pc}
 8009922:	46c0      	nop			@ (mov r8, r8)
 8009924:	20000d82 	.word	0x20000d82
 8009928:	080255d8 	.word	0x080255d8
 800992c:	08026680 	.word	0x08026680
 8009930:	20000e9d 	.word	0x20000e9d
 8009934:	20000d70 	.word	0x20000d70
 8009938:	080255f4 	.word	0x080255f4
 800993c:	080255fc 	.word	0x080255fc
 8009940:	20000d20 	.word	0x20000d20
 8009944:	20000d60 	.word	0x20000d60
 8009948:	42c80000 	.word	0x42c80000
 800994c:	3fe00000 	.word	0x3fe00000
 8009950:	40590000 	.word	0x40590000
 8009954:	000002f3 	.word	0x000002f3
 8009958:	20000d6c 	.word	0x20000d6c
 800995c:	08025604 	.word	0x08025604
 8009960:	08025624 	.word	0x08025624

08009964 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	0018      	movs	r0, r3
 800996e:	2314      	movs	r3, #20
 8009970:	001a      	movs	r2, r3
 8009972:	2100      	movs	r1, #0
 8009974:	f017 fa0a 	bl	8020d8c <memset>
  RTC_DateTypeDef sDate = {0};
 8009978:	003b      	movs	r3, r7
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800997e:	4b2e      	ldr	r3, [pc, #184]	@ (8009a38 <MX_RTC_Init+0xd4>)
 8009980:	4a2e      	ldr	r2, [pc, #184]	@ (8009a3c <MX_RTC_Init+0xd8>)
 8009982:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009984:	4b2c      	ldr	r3, [pc, #176]	@ (8009a38 <MX_RTC_Init+0xd4>)
 8009986:	2200      	movs	r2, #0
 8009988:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800998a:	4b2b      	ldr	r3, [pc, #172]	@ (8009a38 <MX_RTC_Init+0xd4>)
 800998c:	227f      	movs	r2, #127	@ 0x7f
 800998e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009990:	4b29      	ldr	r3, [pc, #164]	@ (8009a38 <MX_RTC_Init+0xd4>)
 8009992:	22ff      	movs	r2, #255	@ 0xff
 8009994:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009996:	4b28      	ldr	r3, [pc, #160]	@ (8009a38 <MX_RTC_Init+0xd4>)
 8009998:	2200      	movs	r2, #0
 800999a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800999c:	4b26      	ldr	r3, [pc, #152]	@ (8009a38 <MX_RTC_Init+0xd4>)
 800999e:	2200      	movs	r2, #0
 80099a0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80099a2:	4b25      	ldr	r3, [pc, #148]	@ (8009a38 <MX_RTC_Init+0xd4>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80099a8:	4b23      	ldr	r3, [pc, #140]	@ (8009a38 <MX_RTC_Init+0xd4>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80099ae:	4b22      	ldr	r3, [pc, #136]	@ (8009a38 <MX_RTC_Init+0xd4>)
 80099b0:	0018      	movs	r0, r3
 80099b2:	f00c fff5 	bl	80169a0 <HAL_RTC_Init>
 80099b6:	1e03      	subs	r3, r0, #0
 80099b8:	d001      	beq.n	80099be <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80099ba:	f7ff f9c3 	bl	8008d44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80099be:	1d3b      	adds	r3, r7, #4
 80099c0:	220d      	movs	r2, #13
 80099c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80099c4:	1d3b      	adds	r3, r7, #4
 80099c6:	2200      	movs	r2, #0
 80099c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80099ca:	1d3b      	adds	r3, r7, #4
 80099cc:	2200      	movs	r2, #0
 80099ce:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80099d0:	1d3b      	adds	r3, r7, #4
 80099d2:	2200      	movs	r2, #0
 80099d4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80099d6:	1d3b      	adds	r3, r7, #4
 80099d8:	2200      	movs	r2, #0
 80099da:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80099dc:	1d39      	adds	r1, r7, #4
 80099de:	4b16      	ldr	r3, [pc, #88]	@ (8009a38 <MX_RTC_Init+0xd4>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	0018      	movs	r0, r3
 80099e4:	f00d f878 	bl	8016ad8 <HAL_RTC_SetTime>
 80099e8:	1e03      	subs	r3, r0, #0
 80099ea:	d001      	beq.n	80099f0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80099ec:	f7ff f9aa 	bl	8008d44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80099f0:	003b      	movs	r3, r7
 80099f2:	2206      	movs	r2, #6
 80099f4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80099f6:	003b      	movs	r3, r7
 80099f8:	2211      	movs	r2, #17
 80099fa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 80099fc:	003b      	movs	r3, r7
 80099fe:	2217      	movs	r2, #23
 8009a00:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8009a02:	003b      	movs	r3, r7
 8009a04:	2218      	movs	r2, #24
 8009a06:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8009a08:	0039      	movs	r1, r7
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a38 <MX_RTC_Init+0xd4>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	0018      	movs	r0, r3
 8009a10:	f00d f96a 	bl	8016ce8 <HAL_RTC_SetDate>
 8009a14:	1e03      	subs	r3, r0, #0
 8009a16:	d001      	beq.n	8009a1c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8009a18:	f7ff f994 	bl	8008d44 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8009a1c:	4b06      	ldr	r3, [pc, #24]	@ (8009a38 <MX_RTC_Init+0xd4>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	0018      	movs	r0, r3
 8009a24:	f00d fb1a 	bl	801705c <HAL_RTCEx_SetWakeUpTimer_IT>
 8009a28:	1e03      	subs	r3, r0, #0
 8009a2a:	d001      	beq.n	8009a30 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8009a2c:	f7ff f98a 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009a30:	46c0      	nop			@ (mov r8, r8)
 8009a32:	46bd      	mov	sp, r7
 8009a34:	b006      	add	sp, #24
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	20000d84 	.word	0x20000d84
 8009a3c:	40002800 	.word	0x40002800

08009a40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a78 <HAL_RTC_MspInit+0x38>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d10e      	bne.n	8009a70 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <HAL_RTC_MspInit+0x3c>)
 8009a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a56:	4b09      	ldr	r3, [pc, #36]	@ (8009a7c <HAL_RTC_MspInit+0x3c>)
 8009a58:	2180      	movs	r1, #128	@ 0x80
 8009a5a:	02c9      	lsls	r1, r1, #11
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009a60:	2200      	movs	r2, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	2002      	movs	r0, #2
 8009a66:	f006 fbbb 	bl	80101e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8009a6a:	2002      	movs	r0, #2
 8009a6c:	f006 fbcd 	bl	801020a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009a70:	46c0      	nop			@ (mov r8, r8)
 8009a72:	46bd      	mov	sp, r7
 8009a74:	b002      	add	sp, #8
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	40002800 	.word	0x40002800
 8009a7c:	40021000 	.word	0x40021000

08009a80 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8009a84:	4b02      	ldr	r3, [pc, #8]	@ (8009a90 <sen5x_Get_sen5x_enable_state+0x10>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
}
 8009a88:	0018      	movs	r0, r3
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	46c0      	nop			@ (mov r8, r8)
 8009a90:	20000dab 	.word	0x20000dab

08009a94 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	0002      	movs	r2, r0
 8009a9c:	1dfb      	adds	r3, r7, #7
 8009a9e:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 8009aa0:	4b03      	ldr	r3, [pc, #12]	@ (8009ab0 <sen5x_Set_sen5x_state+0x1c>)
 8009aa2:	1dfa      	adds	r2, r7, #7
 8009aa4:	7812      	ldrb	r2, [r2, #0]
 8009aa6:	701a      	strb	r2, [r3, #0]
}
 8009aa8:	46c0      	nop			@ (mov r8, r8)
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	b002      	add	sp, #8
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	20000dab 	.word	0x20000dab

08009ab4 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8009abc:	f005 feec 	bl	800f898 <HAL_GetTick>
 8009ac0:	0002      	movs	r2, r0
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	18d2      	adds	r2, r2, r3
 8009ac6:	4b03      	ldr	r3, [pc, #12]	@ (8009ad4 <setsen5xReadTimer+0x20>)
 8009ac8:	601a      	str	r2, [r3, #0]
}
 8009aca:	46c0      	nop			@ (mov r8, r8)
 8009acc:	46bd      	mov	sp, r7
 8009ace:	b002      	add	sp, #8
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	46c0      	nop			@ (mov r8, r8)
 8009ad4:	20000db8 	.word	0x20000db8

08009ad8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	0002      	movs	r2, r0
 8009ae0:	1dfb      	adds	r3, r7, #7
 8009ae2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8009ae4:	4b03      	ldr	r3, [pc, #12]	@ (8009af4 <setsen5xSamplecounter+0x1c>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	701a      	strb	r2, [r3, #0]
}
 8009aea:	46c0      	nop			@ (mov r8, r8)
 8009aec:	46bd      	mov	sp, r7
 8009aee:	b002      	add	sp, #8
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	46c0      	nop			@ (mov r8, r8)
 8009af4:	20000db4 	.word	0x20000db4

08009af8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8009b00:	f7ff f9a8 	bl	8008e54 <IsPMSensorEnabled>
 8009b04:	1e03      	subs	r3, r0, #0
 8009b06:	d035      	beq.n	8009b74 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 8009b08:	f003 ff78 	bl	800d9fc <batteryChargeCheck>
 8009b0c:	0003      	movs	r3, r0
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d103      	bne.n	8009b1a <sen5x_enable+0x22>
      sen5x_Enable = true;
 8009b12:	4b20      	ldr	r3, [pc, #128]	@ (8009b94 <sen5x_enable+0x9c>)
 8009b14:	2201      	movs	r2, #1
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	e00d      	b.n	8009b36 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 8009b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009b94 <sen5x_enable+0x9c>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	1e5a      	subs	r2, r3, #1
 8009b20:	4193      	sbcs	r3, r2
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2201      	movs	r2, #1
 8009b26:	4053      	eors	r3, r2
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	1c1a      	adds	r2, r3, #0
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4013      	ands	r3, r2
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	4b18      	ldr	r3, [pc, #96]	@ (8009b94 <sen5x_enable+0x9c>)
 8009b34:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 8009b36:	4b17      	ldr	r3, [pc, #92]	@ (8009b94 <sen5x_enable+0x9c>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 8009b3e:	2000      	movs	r0, #0
 8009b40:	f7ff ffb8 	bl	8009ab4 <setsen5xReadTimer>
 8009b44:	e009      	b.n	8009b5a <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009b46:	f005 fea7 	bl	800f898 <HAL_GetTick>
 8009b4a:	0002      	movs	r2, r0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2164      	movs	r1, #100	@ 0x64
 8009b50:	434b      	muls	r3, r1
 8009b52:	18d3      	adds	r3, r2, r3
 8009b54:	0018      	movs	r0, r3
 8009b56:	f7ff ffad 	bl	8009ab4 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 8009b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b94 <sen5x_enable+0x9c>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <sen5x_enable+0x6e>
 8009b62:	4b0d      	ldr	r3, [pc, #52]	@ (8009b98 <sen5x_enable+0xa0>)
 8009b64:	e000      	b.n	8009b68 <sen5x_enable+0x70>
 8009b66:	4b0d      	ldr	r3, [pc, #52]	@ (8009b9c <sen5x_enable+0xa4>)
 8009b68:	4a0d      	ldr	r2, [pc, #52]	@ (8009ba0 <sen5x_enable+0xa8>)
 8009b6a:	490e      	ldr	r1, [pc, #56]	@ (8009ba4 <sen5x_enable+0xac>)
 8009b6c:	2002      	movs	r0, #2
 8009b6e:	f005 fa4f 	bl	800f010 <CreateLine>
 8009b72:	e005      	b.n	8009b80 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 8009b74:	4a0c      	ldr	r2, [pc, #48]	@ (8009ba8 <sen5x_enable+0xb0>)
 8009b76:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba4 <sen5x_enable+0xac>)
 8009b78:	0019      	movs	r1, r3
 8009b7a:	2002      	movs	r0, #2
 8009b7c:	f005 fa48 	bl	800f010 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8009b80:	4b0a      	ldr	r3, [pc, #40]	@ (8009bac <sen5x_enable+0xb4>)
 8009b82:	2201      	movs	r2, #1
 8009b84:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009b86:	4b03      	ldr	r3, [pc, #12]	@ (8009b94 <sen5x_enable+0x9c>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
}
 8009b8a:	0018      	movs	r0, r3
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	b002      	add	sp, #8
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	46c0      	nop			@ (mov r8, r8)
 8009b94:	20000dab 	.word	0x20000dab
 8009b98:	08025628 	.word	0x08025628
 8009b9c:	08025630 	.word	0x08025630
 8009ba0:	0802563c 	.word	0x0802563c
 8009ba4:	08025658 	.word	0x08025658
 8009ba8:	0802565c 	.word	0x0802565c
 8009bac:	20000089 	.word	0x20000089

08009bb0 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8009bb4:	2380      	movs	r3, #128	@ 0x80
 8009bb6:	015b      	lsls	r3, r3, #5
 8009bb8:	480f      	ldr	r0, [pc, #60]	@ (8009bf8 <sen5x_Power_On+0x48>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	0019      	movs	r1, r3
 8009bbe:	f007 f8fc 	bl	8010dba <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 8009bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8009bfc <sen5x_Power_On+0x4c>)
 8009bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009c00 <sen5x_Power_On+0x50>)
 8009bc6:	0019      	movs	r1, r3
 8009bc8:	2003      	movs	r0, #3
 8009bca:	f005 fa21 	bl	800f010 <CreateLine>
  HAL_Delay(150);
 8009bce:	2096      	movs	r0, #150	@ 0x96
 8009bd0:	f005 fe6c 	bl	800f8ac <HAL_Delay>
  if (sen5x_device_reset()) {
 8009bd4:	f001 f98c 	bl	800aef0 <sen5x_device_reset>
 8009bd8:	1e03      	subs	r3, r0, #0
 8009bda:	d006      	beq.n	8009bea <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 8009bdc:	4a09      	ldr	r2, [pc, #36]	@ (8009c04 <sen5x_Power_On+0x54>)
 8009bde:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <sen5x_Power_On+0x58>)
 8009be0:	0019      	movs	r1, r3
 8009be2:	2001      	movs	r0, #1
 8009be4:	f005 fa14 	bl	800f010 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 8009be8:	e002      	b.n	8009bf0 <sen5x_Power_On+0x40>
    sen5x_On = true;
 8009bea:	4b08      	ldr	r3, [pc, #32]	@ (8009c0c <sen5x_Power_On+0x5c>)
 8009bec:	2201      	movs	r2, #1
 8009bee:	701a      	strb	r2, [r3, #0]
}
 8009bf0:	46c0      	nop			@ (mov r8, r8)
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	46c0      	nop			@ (mov r8, r8)
 8009bf8:	50000800 	.word	0x50000800
 8009bfc:	0802567c 	.word	0x0802567c
 8009c00:	08025698 	.word	0x08025698
 8009c04:	0802569c 	.word	0x0802569c
 8009c08:	080256c4 	.word	0x080256c4
 8009c0c:	20000da9 	.word	0x20000da9

08009c10 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009c14:	4b0e      	ldr	r3, [pc, #56]	@ (8009c50 <sen5x_Power_Off+0x40>)
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d006      	beq.n	8009c2a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 8009c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8009c54 <sen5x_Power_Off+0x44>)
 8009c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c58 <sen5x_Power_Off+0x48>)
 8009c20:	0019      	movs	r1, r3
 8009c22:	2003      	movs	r0, #3
 8009c24:	f005 f9f4 	bl	800f010 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 8009c28:	e00f      	b.n	8009c4a <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 8009c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8009c5c <sen5x_Power_Off+0x4c>)
 8009c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c58 <sen5x_Power_Off+0x48>)
 8009c2e:	0019      	movs	r1, r3
 8009c30:	2003      	movs	r0, #3
 8009c32:	f005 f9ed 	bl	800f010 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8009c36:	2380      	movs	r3, #128	@ 0x80
 8009c38:	015b      	lsls	r3, r3, #5
 8009c3a:	4809      	ldr	r0, [pc, #36]	@ (8009c60 <sen5x_Power_Off+0x50>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	0019      	movs	r1, r3
 8009c40:	f007 f8bb 	bl	8010dba <HAL_GPIO_WritePin>
      sen5x_On = false;
 8009c44:	4b07      	ldr	r3, [pc, #28]	@ (8009c64 <sen5x_Power_Off+0x54>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
}
 8009c4a:	46c0      	nop			@ (mov r8, r8)
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20000daa 	.word	0x20000daa
 8009c54:	080256c8 	.word	0x080256c8
 8009c58:	08025698 	.word	0x08025698
 8009c5c:	080256f8 	.word	0x080256f8
 8009c60:	50000800 	.word	0x50000800
 8009c64:	20000da9 	.word	0x20000da9

08009c68 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8009c6c:	4b02      	ldr	r3, [pc, #8]	@ (8009c78 <reset_fanCleaningDone+0x10>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	701a      	strb	r2, [r3, #0]
}
 8009c72:	46c0      	nop			@ (mov r8, r8)
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000da8 	.word	0x20000da8

08009c7c <probe_sen5x>:

int16_t probe_sen5x(void) {
 8009c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c7e:	b093      	sub	sp, #76	@ 0x4c
 8009c80:	af04      	add	r7, sp, #16
  int16_t error = 0;
 8009c82:	2436      	movs	r4, #54	@ 0x36
 8009c84:	193b      	adds	r3, r7, r4
 8009c86:	2200      	movs	r2, #0
 8009c88:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8009c8a:	2335      	movs	r3, #53	@ 0x35
 8009c8c:	18fb      	adds	r3, r7, r3
 8009c8e:	2220      	movs	r2, #32
 8009c90:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8009c92:	2334      	movs	r3, #52	@ 0x34
 8009c94:	18fb      	adds	r3, r7, r3
 8009c96:	2220      	movs	r2, #32
 8009c98:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8009c9a:	f7ff ff89 	bl	8009bb0 <sen5x_Power_On>
  error = sen5x_device_reset();
 8009c9e:	0025      	movs	r5, r4
 8009ca0:	193c      	adds	r4, r7, r4
 8009ca2:	f001 f925 	bl	800aef0 <sen5x_device_reset>
 8009ca6:	0003      	movs	r3, r0
 8009ca8:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009caa:	002c      	movs	r4, r5
 8009cac:	193b      	adds	r3, r7, r4
 8009cae:	2200      	movs	r2, #0
 8009cb0:	5e9b      	ldrsh	r3, [r3, r2]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8009cb6:	193b      	adds	r3, r7, r4
 8009cb8:	2200      	movs	r2, #0
 8009cba:	5e9b      	ldrsh	r3, [r3, r2]
 8009cbc:	4a75      	ldr	r2, [pc, #468]	@ (8009e94 <probe_sen5x+0x218>)
 8009cbe:	4976      	ldr	r1, [pc, #472]	@ (8009e98 <probe_sen5x+0x21c>)
 8009cc0:	2001      	movs	r0, #1
 8009cc2:	f005 f9a5 	bl	800f010 <CreateLine>
      return error;
 8009cc6:	193b      	adds	r3, r7, r4
 8009cc8:	2200      	movs	r2, #0
 8009cca:	5e9b      	ldrsh	r3, [r3, r2]
 8009ccc:	e0de      	b.n	8009e8c <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8009cce:	2536      	movs	r5, #54	@ 0x36
 8009cd0:	197c      	adds	r4, r7, r5
 8009cd2:	2335      	movs	r3, #53	@ 0x35
 8009cd4:	18fb      	adds	r3, r7, r3
 8009cd6:	781a      	ldrb	r2, [r3, #0]
 8009cd8:	230c      	movs	r3, #12
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	0011      	movs	r1, r2
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f000 fff2 	bl	800acc8 <sen5x_get_serial_number>
 8009ce4:	0003      	movs	r3, r0
 8009ce6:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009ce8:	197b      	adds	r3, r7, r5
 8009cea:	2200      	movs	r2, #0
 8009cec:	5e9b      	ldrsh	r3, [r3, r2]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00b      	beq.n	8009d0a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8009cf2:	197b      	adds	r3, r7, r5
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	5e9a      	ldrsh	r2, [r3, r2]
 8009cf8:	4b68      	ldr	r3, [pc, #416]	@ (8009e9c <probe_sen5x+0x220>)
 8009cfa:	0011      	movs	r1, r2
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	f016 fe6f 	bl	80209e0 <iprintf>
      return error;
 8009d02:	197b      	adds	r3, r7, r5
 8009d04:	2200      	movs	r2, #0
 8009d06:	5e9b      	ldrsh	r3, [r3, r2]
 8009d08:	e0c0      	b.n	8009e8c <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8009d0a:	230c      	movs	r3, #12
 8009d0c:	18fa      	adds	r2, r7, r3
 8009d0e:	4b64      	ldr	r3, [pc, #400]	@ (8009ea0 <probe_sen5x+0x224>)
 8009d10:	0011      	movs	r1, r2
 8009d12:	0018      	movs	r0, r3
 8009d14:	f016 fe64 	bl	80209e0 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009d18:	2536      	movs	r5, #54	@ 0x36
 8009d1a:	197c      	adds	r4, r7, r5
 8009d1c:	2334      	movs	r3, #52	@ 0x34
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	781a      	ldrb	r2, [r3, #0]
 8009d22:	4b60      	ldr	r3, [pc, #384]	@ (8009ea4 <probe_sen5x+0x228>)
 8009d24:	0011      	movs	r1, r2
 8009d26:	0018      	movs	r0, r3
 8009d28:	f000 ff78 	bl	800ac1c <sen5x_get_product_name>
 8009d2c:	0003      	movs	r3, r0
 8009d2e:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009d30:	197b      	adds	r3, r7, r5
 8009d32:	2200      	movs	r2, #0
 8009d34:	5e9b      	ldrsh	r3, [r3, r2]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8009d3a:	197b      	adds	r3, r7, r5
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	5e9a      	ldrsh	r2, [r3, r2]
 8009d40:	4b59      	ldr	r3, [pc, #356]	@ (8009ea8 <probe_sen5x+0x22c>)
 8009d42:	0011      	movs	r1, r2
 8009d44:	0018      	movs	r0, r3
 8009d46:	f016 fe4b 	bl	80209e0 <iprintf>
      return error;
 8009d4a:	197b      	adds	r3, r7, r5
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	5e9b      	ldrsh	r3, [r3, r2]
 8009d50:	e09c      	b.n	8009e8c <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 8009d52:	4a54      	ldr	r2, [pc, #336]	@ (8009ea4 <probe_sen5x+0x228>)
 8009d54:	4b55      	ldr	r3, [pc, #340]	@ (8009eac <probe_sen5x+0x230>)
 8009d56:	0011      	movs	r1, r2
 8009d58:	0018      	movs	r0, r3
 8009d5a:	f016 fe41 	bl	80209e0 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8009d5e:	2636      	movs	r6, #54	@ 0x36
 8009d60:	19bc      	adds	r4, r7, r6
 8009d62:	2308      	movs	r3, #8
 8009d64:	18fd      	adds	r5, r7, r3
 8009d66:	2309      	movs	r3, #9
 8009d68:	18fa      	adds	r2, r7, r3
 8009d6a:	230a      	movs	r3, #10
 8009d6c:	18f9      	adds	r1, r7, r3
 8009d6e:	230b      	movs	r3, #11
 8009d70:	18f8      	adds	r0, r7, r3
 8009d72:	1d7b      	adds	r3, r7, #5
 8009d74:	9302      	str	r3, [sp, #8]
 8009d76:	1dbb      	adds	r3, r7, #6
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	1dfb      	adds	r3, r7, #7
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	002b      	movs	r3, r5
 8009d80:	f000 fff8 	bl	800ad74 <sen5x_get_version>
 8009d84:	0003      	movs	r3, r0
 8009d86:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8009d88:	19bb      	adds	r3, r7, r6
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	5e9b      	ldrsh	r3, [r3, r2]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00b      	beq.n	8009daa <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009d92:	19bb      	adds	r3, r7, r6
 8009d94:	2200      	movs	r2, #0
 8009d96:	5e9a      	ldrsh	r2, [r3, r2]
 8009d98:	4b45      	ldr	r3, [pc, #276]	@ (8009eb0 <probe_sen5x+0x234>)
 8009d9a:	0011      	movs	r1, r2
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	f016 fe1f 	bl	80209e0 <iprintf>
      return error;
 8009da2:	19bb      	adds	r3, r7, r6
 8009da4:	2200      	movs	r2, #0
 8009da6:	5e9b      	ldrsh	r3, [r3, r2]
 8009da8:	e070      	b.n	8009e8c <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8009daa:	230b      	movs	r3, #11
 8009dac:	18fb      	adds	r3, r7, r3
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	0019      	movs	r1, r3
 8009db2:	230a      	movs	r3, #10
 8009db4:	18fb      	adds	r3, r7, r3
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	001a      	movs	r2, r3
 8009dba:	2308      	movs	r3, #8
 8009dbc:	18fb      	adds	r3, r7, r3
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	001c      	movs	r4, r3
 8009dc2:	1dfb      	adds	r3, r7, #7
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	483b      	ldr	r0, [pc, #236]	@ (8009eb4 <probe_sen5x+0x238>)
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	0023      	movs	r3, r4
 8009dcc:	f016 fe08 	bl	80209e0 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 8009dd4:	262e      	movs	r6, #46	@ 0x2e
 8009dd6:	19bb      	adds	r3, r7, r6
 8009dd8:	2200      	movs	r2, #0
 8009dda:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8009ddc:	232c      	movs	r3, #44	@ 0x2c
 8009dde:	18fb      	adds	r3, r7, r3
 8009de0:	2200      	movs	r2, #0
 8009de2:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8009de4:	4934      	ldr	r1, [pc, #208]	@ (8009eb8 <probe_sen5x+0x23c>)
 8009de6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009de8:	f7f7 f8da 	bl	8000fa0 <__aeabi_fmul>
 8009dec:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8009dee:	1c18      	adds	r0, r3, #0
 8009df0:	f7f7 fbce 	bl	8001590 <__aeabi_f2iz>
 8009df4:	0003      	movs	r3, r0
 8009df6:	b218      	sxth	r0, r3
 8009df8:	2536      	movs	r5, #54	@ 0x36
 8009dfa:	197c      	adds	r4, r7, r5
 8009dfc:	232c      	movs	r3, #44	@ 0x2c
 8009dfe:	18fb      	adds	r3, r7, r3
 8009e00:	881a      	ldrh	r2, [r3, #0]
 8009e02:	19bb      	adds	r3, r7, r6
 8009e04:	2100      	movs	r1, #0
 8009e06:	5e5b      	ldrsh	r3, [r3, r1]
 8009e08:	0019      	movs	r1, r3
 8009e0a:	f000 fea3 	bl	800ab54 <sen5x_set_temperature_offset_parameters>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009e12:	197b      	adds	r3, r7, r5
 8009e14:	2200      	movs	r2, #0
 8009e16:	5e9b      	ldrsh	r3, [r3, r2]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8009e1c:	197b      	adds	r3, r7, r5
 8009e1e:	2200      	movs	r2, #0
 8009e20:	5e9b      	ldrsh	r3, [r3, r2]
 8009e22:	4a26      	ldr	r2, [pc, #152]	@ (8009ebc <probe_sen5x+0x240>)
 8009e24:	491c      	ldr	r1, [pc, #112]	@ (8009e98 <probe_sen5x+0x21c>)
 8009e26:	2001      	movs	r0, #1
 8009e28:	f005 f8f2 	bl	800f010 <CreateLine>
      return error;
 8009e2c:	197b      	adds	r3, r7, r5
 8009e2e:	2200      	movs	r2, #0
 8009e30:	5e9b      	ldrsh	r3, [r3, r2]
 8009e32:	e02b      	b.n	8009e8c <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e36:	f7f9 fb15 	bl	8003464 <__aeabi_f2d>
 8009e3a:	0002      	movs	r2, r0
 8009e3c:	000b      	movs	r3, r1
 8009e3e:	4820      	ldr	r0, [pc, #128]	@ (8009ec0 <probe_sen5x+0x244>)
 8009e40:	4920      	ldr	r1, [pc, #128]	@ (8009ec4 <probe_sen5x+0x248>)
 8009e42:	9200      	str	r2, [sp, #0]
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	0002      	movs	r2, r0
 8009e48:	2002      	movs	r0, #2
 8009e4a:	f005 f8e1 	bl	800f010 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 8009e4e:	f7fc ff5f 	bl	8006d10 <Check_USB_PowerOn>
 8009e52:	0003      	movs	r3, r0
 8009e54:	001a      	movs	r2, r3
 8009e56:	2301      	movs	r3, #1
 8009e58:	4053      	eors	r3, r2
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00a      	beq.n	8009e76 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 8009e60:	f7ff fed6 	bl	8009c10 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 8009e64:	f005 fd18 	bl	800f898 <HAL_GetTick>
 8009e68:	0003      	movs	r3, r0
 8009e6a:	22fa      	movs	r2, #250	@ 0xfa
 8009e6c:	00d2      	lsls	r2, r2, #3
 8009e6e:	189a      	adds	r2, r3, r2
 8009e70:	4b15      	ldr	r3, [pc, #84]	@ (8009ec8 <probe_sen5x+0x24c>)
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	e006      	b.n	8009e84 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 8009e76:	f005 fd0f 	bl	800f898 <HAL_GetTick>
 8009e7a:	0003      	movs	r3, r0
 8009e7c:	4a13      	ldr	r2, [pc, #76]	@ (8009ecc <probe_sen5x+0x250>)
 8009e7e:	189a      	adds	r2, r3, r2
 8009e80:	4b11      	ldr	r3, [pc, #68]	@ (8009ec8 <probe_sen5x+0x24c>)
 8009e82:	601a      	str	r2, [r3, #0]
  }
  return error;
 8009e84:	2336      	movs	r3, #54	@ 0x36
 8009e86:	18fb      	adds	r3, r7, r3
 8009e88:	2200      	movs	r2, #0
 8009e8a:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	b00f      	add	sp, #60	@ 0x3c
 8009e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e94:	08025714 	.word	0x08025714
 8009e98:	080256c4 	.word	0x080256c4
 8009e9c:	08025740 	.word	0x08025740
 8009ea0:	08025770 	.word	0x08025770
 8009ea4:	20000dac 	.word	0x20000dac
 8009ea8:	08025784 	.word	0x08025784
 8009eac:	080257b4 	.word	0x080257b4
 8009eb0:	080257c8 	.word	0x080257c8
 8009eb4:	080257f4 	.word	0x080257f4
 8009eb8:	43480000 	.word	0x43480000
 8009ebc:	08025818 	.word	0x08025818
 8009ec0:	08025858 	.word	0x08025858
 8009ec4:	08025658 	.word	0x08025658
 8009ec8:	20000db8 	.word	0x20000db8
 8009ecc:	00006d60 	.word	0x00006d60

08009ed0 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8009ed0:	b590      	push	{r4, r7, lr}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8009ed6:	1dbb      	adds	r3, r7, #6
 8009ed8:	2200      	movs	r2, #0
 8009eda:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 8009edc:	4b1b      	ldr	r3, [pc, #108]	@ (8009f4c <sen5x_lightup_measurement+0x7c>)
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00b      	beq.n	8009efc <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 8009ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8009f50 <sen5x_lightup_measurement+0x80>)
 8009ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8009f54 <sen5x_lightup_measurement+0x84>)
 8009ee8:	0019      	movs	r1, r3
 8009eea:	2002      	movs	r0, #2
 8009eec:	f005 f890 	bl	800f010 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009ef0:	1dbc      	adds	r4, r7, #6
 8009ef2:	f000 fcbb 	bl	800a86c <sen5x_start_measurement_without_pm>
 8009ef6:	0003      	movs	r3, r0
 8009ef8:	8023      	strh	r3, [r4, #0]
 8009efa:	e00a      	b.n	8009f12 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 8009efc:	4a16      	ldr	r2, [pc, #88]	@ (8009f58 <sen5x_lightup_measurement+0x88>)
 8009efe:	4b15      	ldr	r3, [pc, #84]	@ (8009f54 <sen5x_lightup_measurement+0x84>)
 8009f00:	0019      	movs	r1, r3
 8009f02:	2002      	movs	r0, #2
 8009f04:	f005 f884 	bl	800f010 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 8009f08:	1dbc      	adds	r4, r7, #6
 8009f0a:	f000 fc81 	bl	800a810 <sen5x_start_measurement>
 8009f0e:	0003      	movs	r3, r0
 8009f10:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 8009f12:	1dbb      	adds	r3, r7, #6
 8009f14:	2200      	movs	r2, #0
 8009f16:	5e9b      	ldrsh	r3, [r3, r2]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d008      	beq.n	8009f2e <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009f1c:	1dbb      	adds	r3, r7, #6
 8009f1e:	2200      	movs	r2, #0
 8009f20:	5e9b      	ldrsh	r3, [r3, r2]
 8009f22:	4a0e      	ldr	r2, [pc, #56]	@ (8009f5c <sen5x_lightup_measurement+0x8c>)
 8009f24:	490e      	ldr	r1, [pc, #56]	@ (8009f60 <sen5x_lightup_measurement+0x90>)
 8009f26:	2001      	movs	r0, #1
 8009f28:	f005 f872 	bl	800f010 <CreateLine>
 8009f2c:	e007      	b.n	8009f3e <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 8009f2e:	f7fc ff1f 	bl	8006d70 <showTime>
    Info("sen5x_start_measurement executed");
 8009f32:	4a0c      	ldr	r2, [pc, #48]	@ (8009f64 <sen5x_lightup_measurement+0x94>)
 8009f34:	4b07      	ldr	r3, [pc, #28]	@ (8009f54 <sen5x_lightup_measurement+0x84>)
 8009f36:	0019      	movs	r1, r3
 8009f38:	2002      	movs	r0, #2
 8009f3a:	f005 f869 	bl	800f010 <CreateLine>
  }
  return error;
 8009f3e:	1dbb      	adds	r3, r7, #6
 8009f40:	2200      	movs	r2, #0
 8009f42:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009f44:	0018      	movs	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b003      	add	sp, #12
 8009f4a:	bd90      	pop	{r4, r7, pc}
 8009f4c:	20000daa 	.word	0x20000daa
 8009f50:	08025890 	.word	0x08025890
 8009f54:	08025658 	.word	0x08025658
 8009f58:	080258bc 	.word	0x080258bc
 8009f5c:	080258dc 	.word	0x080258dc
 8009f60:	080256c4 	.word	0x080256c4
 8009f64:	0802590c 	.word	0x0802590c

08009f68 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009f68:	b590      	push	{r4, r7, lr}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 8009f6e:	1dbb      	adds	r3, r7, #6
 8009f70:	2200      	movs	r2, #0
 8009f72:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009f74:	4b21      	ldr	r3, [pc, #132]	@ (8009ffc <sen5x_extinguish_measurement+0x94>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d01e      	beq.n	8009fba <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 8009f7c:	4a20      	ldr	r2, [pc, #128]	@ (800a000 <sen5x_extinguish_measurement+0x98>)
 8009f7e:	4b21      	ldr	r3, [pc, #132]	@ (800a004 <sen5x_extinguish_measurement+0x9c>)
 8009f80:	0019      	movs	r1, r3
 8009f82:	2002      	movs	r0, #2
 8009f84:	f005 f844 	bl	800f010 <CreateLine>
    Info("PM measurement is disabled");
 8009f88:	4a1f      	ldr	r2, [pc, #124]	@ (800a008 <sen5x_extinguish_measurement+0xa0>)
 8009f8a:	4b1e      	ldr	r3, [pc, #120]	@ (800a004 <sen5x_extinguish_measurement+0x9c>)
 8009f8c:	0019      	movs	r1, r3
 8009f8e:	2002      	movs	r0, #2
 8009f90:	f005 f83e 	bl	800f010 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009f94:	1dbc      	adds	r4, r7, #6
 8009f96:	f000 fc69 	bl	800a86c <sen5x_start_measurement_without_pm>
 8009f9a:	0003      	movs	r3, r0
 8009f9c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f9e:	1dbb      	adds	r3, r7, #6
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	5e9b      	ldrsh	r3, [r3, r2]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d022      	beq.n	8009fee <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 8009fa8:	1dbb      	adds	r3, r7, #6
 8009faa:	2200      	movs	r2, #0
 8009fac:	5e9b      	ldrsh	r3, [r3, r2]
 8009fae:	4a17      	ldr	r2, [pc, #92]	@ (800a00c <sen5x_extinguish_measurement+0xa4>)
 8009fb0:	4917      	ldr	r1, [pc, #92]	@ (800a010 <sen5x_extinguish_measurement+0xa8>)
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	f005 f82c 	bl	800f010 <CreateLine>
 8009fb8:	e019      	b.n	8009fee <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 8009fba:	1dbc      	adds	r4, r7, #6
 8009fbc:	f000 fc84 	bl	800a8c8 <sen5x_stop_measurement>
 8009fc0:	0003      	movs	r3, r0
 8009fc2:	8023      	strh	r3, [r4, #0]
    showTime();
 8009fc4:	f7fc fed4 	bl	8006d70 <showTime>
    Info("sen5x_stop_measurement executed");
 8009fc8:	4a12      	ldr	r2, [pc, #72]	@ (800a014 <sen5x_extinguish_measurement+0xac>)
 8009fca:	4b0e      	ldr	r3, [pc, #56]	@ (800a004 <sen5x_extinguish_measurement+0x9c>)
 8009fcc:	0019      	movs	r1, r3
 8009fce:	2002      	movs	r0, #2
 8009fd0:	f005 f81e 	bl	800f010 <CreateLine>
    if (error) {
 8009fd4:	1dbb      	adds	r3, r7, #6
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	5e9b      	ldrsh	r3, [r3, r2]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d007      	beq.n	8009fee <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 8009fde:	1dbb      	adds	r3, r7, #6
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	5e9b      	ldrsh	r3, [r3, r2]
 8009fe4:	4a0c      	ldr	r2, [pc, #48]	@ (800a018 <sen5x_extinguish_measurement+0xb0>)
 8009fe6:	490a      	ldr	r1, [pc, #40]	@ (800a010 <sen5x_extinguish_measurement+0xa8>)
 8009fe8:	2001      	movs	r0, #1
 8009fea:	f005 f811 	bl	800f010 <CreateLine>
    }
  }
  return error;
 8009fee:	1dbb      	adds	r3, r7, #6
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	b003      	add	sp, #12
 8009ffa:	bd90      	pop	{r4, r7, pc}
 8009ffc:	20000daa 	.word	0x20000daa
 800a000:	08025930 	.word	0x08025930
 800a004:	08025658 	.word	0x08025658
 800a008:	08025968 	.word	0x08025968
 800a00c:	08025984 	.word	0x08025984
 800a010:	080256c4 	.word	0x080256c4
 800a014:	080259c4 	.word	0x080259c4
 800a018:	080259e4 	.word	0x080259e4

0800a01c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800a01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a01e:	b08d      	sub	sp, #52	@ 0x34
 800a020:	af04      	add	r7, sp, #16
 800a022:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800a024:	261e      	movs	r6, #30
 800a026:	19bb      	adds	r3, r7, r6
 800a028:	2200      	movs	r2, #0
 800a02a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800a02c:	19bc      	adds	r4, r7, r6
 800a02e:	2316      	movs	r3, #22
 800a030:	18fd      	adds	r5, r7, r3
 800a032:	2318      	movs	r3, #24
 800a034:	18fa      	adds	r2, r7, r3
 800a036:	231a      	movs	r3, #26
 800a038:	18f9      	adds	r1, r7, r3
 800a03a:	231c      	movs	r3, #28
 800a03c:	18f8      	adds	r0, r7, r3
 800a03e:	230e      	movs	r3, #14
 800a040:	18fb      	adds	r3, r7, r3
 800a042:	9303      	str	r3, [sp, #12]
 800a044:	2310      	movs	r3, #16
 800a046:	18fb      	adds	r3, r7, r3
 800a048:	9302      	str	r3, [sp, #8]
 800a04a:	2312      	movs	r3, #18
 800a04c:	18fb      	adds	r3, r7, r3
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	2314      	movs	r3, #20
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	002b      	movs	r3, r5
 800a058:	f000 fcb8 	bl	800a9cc <sen5x_read_measured_values>
 800a05c:	0003      	movs	r3, r0
 800a05e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800a060:	19bb      	adds	r3, r7, r6
 800a062:	2200      	movs	r2, #0
 800a064:	5e9b      	ldrsh	r3, [r3, r2]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <sen5x_read_measurement+0x56>
    return error;
 800a06a:	19bb      	adds	r3, r7, r6
 800a06c:	2200      	movs	r2, #0
 800a06e:	5e9b      	ldrsh	r3, [r3, r2]
 800a070:	e02c      	b.n	800a0cc <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800a072:	231c      	movs	r3, #28
 800a074:	18fb      	adds	r3, r7, r3
 800a076:	881a      	ldrh	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800a07c:	231a      	movs	r3, #26
 800a07e:	18fb      	adds	r3, r7, r3
 800a080:	881a      	ldrh	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800a086:	2318      	movs	r3, #24
 800a088:	18fb      	adds	r3, r7, r3
 800a08a:	881a      	ldrh	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800a090:	2316      	movs	r3, #22
 800a092:	18fb      	adds	r3, r7, r3
 800a094:	881a      	ldrh	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800a09a:	2314      	movs	r3, #20
 800a09c:	18fb      	adds	r3, r7, r3
 800a09e:	2200      	movs	r2, #0
 800a0a0:	5e9a      	ldrsh	r2, [r3, r2]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800a0a6:	2312      	movs	r3, #18
 800a0a8:	18fb      	adds	r3, r7, r3
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	5e9a      	ldrsh	r2, [r3, r2]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800a0b2:	2310      	movs	r3, #16
 800a0b4:	18fb      	adds	r3, r7, r3
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	5e9a      	ldrsh	r2, [r3, r2]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800a0be:	230e      	movs	r3, #14
 800a0c0:	18fb      	adds	r3, r7, r3
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	5e9a      	ldrsh	r2, [r3, r2]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	81da      	strh	r2, [r3, #14]
  return 0;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	b009      	add	sp, #36	@ 0x24
 800a0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0d4 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800a0d8:	4b63      	ldr	r3, [pc, #396]	@ (800a268 <sen5x_printvalues+0x194>)
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	4a63      	ldr	r2, [pc, #396]	@ (800a26c <sen5x_printvalues+0x198>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d013      	beq.n	800a10a <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800a0e2:	4b61      	ldr	r3, [pc, #388]	@ (800a268 <sen5x_printvalues+0x194>)
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	f7f7 fa72 	bl	80015d0 <__aeabi_i2f>
 800a0ec:	1c03      	adds	r3, r0, #0
 800a0ee:	4960      	ldr	r1, [pc, #384]	@ (800a270 <sen5x_printvalues+0x19c>)
 800a0f0:	1c18      	adds	r0, r3, #0
 800a0f2:	f7f6 fd6f 	bl	8000bd4 <__aeabi_fdiv>
 800a0f6:	1c03      	adds	r3, r0, #0
 800a0f8:	1c18      	adds	r0, r3, #0
 800a0fa:	f7f9 f9b3 	bl	8003464 <__aeabi_f2d>
 800a0fe:	0002      	movs	r2, r0
 800a100:	000b      	movs	r3, r1
 800a102:	495c      	ldr	r1, [pc, #368]	@ (800a274 <sen5x_printvalues+0x1a0>)
 800a104:	0008      	movs	r0, r1
 800a106:	f016 fc6b 	bl	80209e0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800a10a:	4b57      	ldr	r3, [pc, #348]	@ (800a268 <sen5x_printvalues+0x194>)
 800a10c:	885b      	ldrh	r3, [r3, #2]
 800a10e:	4a57      	ldr	r2, [pc, #348]	@ (800a26c <sen5x_printvalues+0x198>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d013      	beq.n	800a13c <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800a114:	4b54      	ldr	r3, [pc, #336]	@ (800a268 <sen5x_printvalues+0x194>)
 800a116:	885b      	ldrh	r3, [r3, #2]
 800a118:	0018      	movs	r0, r3
 800a11a:	f7f7 fa59 	bl	80015d0 <__aeabi_i2f>
 800a11e:	1c03      	adds	r3, r0, #0
 800a120:	4953      	ldr	r1, [pc, #332]	@ (800a270 <sen5x_printvalues+0x19c>)
 800a122:	1c18      	adds	r0, r3, #0
 800a124:	f7f6 fd56 	bl	8000bd4 <__aeabi_fdiv>
 800a128:	1c03      	adds	r3, r0, #0
 800a12a:	1c18      	adds	r0, r3, #0
 800a12c:	f7f9 f99a 	bl	8003464 <__aeabi_f2d>
 800a130:	0002      	movs	r2, r0
 800a132:	000b      	movs	r3, r1
 800a134:	4950      	ldr	r1, [pc, #320]	@ (800a278 <sen5x_printvalues+0x1a4>)
 800a136:	0008      	movs	r0, r1
 800a138:	f016 fc52 	bl	80209e0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800a13c:	4b4a      	ldr	r3, [pc, #296]	@ (800a268 <sen5x_printvalues+0x194>)
 800a13e:	889b      	ldrh	r3, [r3, #4]
 800a140:	4a4a      	ldr	r2, [pc, #296]	@ (800a26c <sen5x_printvalues+0x198>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d013      	beq.n	800a16e <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800a146:	4b48      	ldr	r3, [pc, #288]	@ (800a268 <sen5x_printvalues+0x194>)
 800a148:	889b      	ldrh	r3, [r3, #4]
 800a14a:	0018      	movs	r0, r3
 800a14c:	f7f7 fa40 	bl	80015d0 <__aeabi_i2f>
 800a150:	1c03      	adds	r3, r0, #0
 800a152:	4947      	ldr	r1, [pc, #284]	@ (800a270 <sen5x_printvalues+0x19c>)
 800a154:	1c18      	adds	r0, r3, #0
 800a156:	f7f6 fd3d 	bl	8000bd4 <__aeabi_fdiv>
 800a15a:	1c03      	adds	r3, r0, #0
 800a15c:	1c18      	adds	r0, r3, #0
 800a15e:	f7f9 f981 	bl	8003464 <__aeabi_f2d>
 800a162:	0002      	movs	r2, r0
 800a164:	000b      	movs	r3, r1
 800a166:	4945      	ldr	r1, [pc, #276]	@ (800a27c <sen5x_printvalues+0x1a8>)
 800a168:	0008      	movs	r0, r1
 800a16a:	f016 fc39 	bl	80209e0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800a16e:	4b3e      	ldr	r3, [pc, #248]	@ (800a268 <sen5x_printvalues+0x194>)
 800a170:	88db      	ldrh	r3, [r3, #6]
 800a172:	4a3e      	ldr	r2, [pc, #248]	@ (800a26c <sen5x_printvalues+0x198>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d013      	beq.n	800a1a0 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800a178:	4b3b      	ldr	r3, [pc, #236]	@ (800a268 <sen5x_printvalues+0x194>)
 800a17a:	88db      	ldrh	r3, [r3, #6]
 800a17c:	0018      	movs	r0, r3
 800a17e:	f7f7 fa27 	bl	80015d0 <__aeabi_i2f>
 800a182:	1c03      	adds	r3, r0, #0
 800a184:	493a      	ldr	r1, [pc, #232]	@ (800a270 <sen5x_printvalues+0x19c>)
 800a186:	1c18      	adds	r0, r3, #0
 800a188:	f7f6 fd24 	bl	8000bd4 <__aeabi_fdiv>
 800a18c:	1c03      	adds	r3, r0, #0
 800a18e:	1c18      	adds	r0, r3, #0
 800a190:	f7f9 f968 	bl	8003464 <__aeabi_f2d>
 800a194:	0002      	movs	r2, r0
 800a196:	000b      	movs	r3, r1
 800a198:	4939      	ldr	r1, [pc, #228]	@ (800a280 <sen5x_printvalues+0x1ac>)
 800a19a:	0008      	movs	r0, r1
 800a19c:	f016 fc20 	bl	80209e0 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800a1a0:	4b31      	ldr	r3, [pc, #196]	@ (800a268 <sen5x_printvalues+0x194>)
 800a1a2:	2208      	movs	r2, #8
 800a1a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a1a6:	4a37      	ldr	r2, [pc, #220]	@ (800a284 <sen5x_printvalues+0x1b0>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d014      	beq.n	800a1d6 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800a1ac:	4b2e      	ldr	r3, [pc, #184]	@ (800a268 <sen5x_printvalues+0x194>)
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	5e9b      	ldrsh	r3, [r3, r2]
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f7f7 fa0c 	bl	80015d0 <__aeabi_i2f>
 800a1b8:	1c03      	adds	r3, r0, #0
 800a1ba:	4933      	ldr	r1, [pc, #204]	@ (800a288 <sen5x_printvalues+0x1b4>)
 800a1bc:	1c18      	adds	r0, r3, #0
 800a1be:	f7f6 fd09 	bl	8000bd4 <__aeabi_fdiv>
 800a1c2:	1c03      	adds	r3, r0, #0
 800a1c4:	1c18      	adds	r0, r3, #0
 800a1c6:	f7f9 f94d 	bl	8003464 <__aeabi_f2d>
 800a1ca:	0002      	movs	r2, r0
 800a1cc:	000b      	movs	r3, r1
 800a1ce:	492f      	ldr	r1, [pc, #188]	@ (800a28c <sen5x_printvalues+0x1b8>)
 800a1d0:	0008      	movs	r0, r1
 800a1d2:	f016 fc05 	bl	80209e0 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800a1d6:	4b24      	ldr	r3, [pc, #144]	@ (800a268 <sen5x_printvalues+0x194>)
 800a1d8:	220a      	movs	r2, #10
 800a1da:	5e9b      	ldrsh	r3, [r3, r2]
 800a1dc:	4a29      	ldr	r2, [pc, #164]	@ (800a284 <sen5x_printvalues+0x1b0>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d014      	beq.n	800a20c <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800a1e2:	4b21      	ldr	r3, [pc, #132]	@ (800a268 <sen5x_printvalues+0x194>)
 800a1e4:	220a      	movs	r2, #10
 800a1e6:	5e9b      	ldrsh	r3, [r3, r2]
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f7f7 f9f1 	bl	80015d0 <__aeabi_i2f>
 800a1ee:	1c03      	adds	r3, r0, #0
 800a1f0:	4927      	ldr	r1, [pc, #156]	@ (800a290 <sen5x_printvalues+0x1bc>)
 800a1f2:	1c18      	adds	r0, r3, #0
 800a1f4:	f7f6 fcee 	bl	8000bd4 <__aeabi_fdiv>
 800a1f8:	1c03      	adds	r3, r0, #0
 800a1fa:	1c18      	adds	r0, r3, #0
 800a1fc:	f7f9 f932 	bl	8003464 <__aeabi_f2d>
 800a200:	0002      	movs	r2, r0
 800a202:	000b      	movs	r3, r1
 800a204:	4923      	ldr	r1, [pc, #140]	@ (800a294 <sen5x_printvalues+0x1c0>)
 800a206:	0008      	movs	r0, r1
 800a208:	f016 fbea 	bl	80209e0 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800a20c:	4b16      	ldr	r3, [pc, #88]	@ (800a268 <sen5x_printvalues+0x194>)
 800a20e:	220c      	movs	r2, #12
 800a210:	5e9b      	ldrsh	r3, [r3, r2]
 800a212:	4a1c      	ldr	r2, [pc, #112]	@ (800a284 <sen5x_printvalues+0x1b0>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d00e      	beq.n	800a236 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800a218:	4b13      	ldr	r3, [pc, #76]	@ (800a268 <sen5x_printvalues+0x194>)
 800a21a:	220c      	movs	r2, #12
 800a21c:	5e9b      	ldrsh	r3, [r3, r2]
 800a21e:	210a      	movs	r1, #10
 800a220:	0018      	movs	r0, r3
 800a222:	f7f6 f849 	bl	80002b8 <__divsi3>
 800a226:	0003      	movs	r3, r0
 800a228:	b21b      	sxth	r3, r3
 800a22a:	001a      	movs	r2, r3
 800a22c:	4b1a      	ldr	r3, [pc, #104]	@ (800a298 <sen5x_printvalues+0x1c4>)
 800a22e:	0011      	movs	r1, r2
 800a230:	0018      	movs	r0, r3
 800a232:	f016 fbd5 	bl	80209e0 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800a236:	4b0c      	ldr	r3, [pc, #48]	@ (800a268 <sen5x_printvalues+0x194>)
 800a238:	220e      	movs	r2, #14
 800a23a:	5e9b      	ldrsh	r3, [r3, r2]
 800a23c:	4a11      	ldr	r2, [pc, #68]	@ (800a284 <sen5x_printvalues+0x1b0>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00e      	beq.n	800a260 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800a242:	4b09      	ldr	r3, [pc, #36]	@ (800a268 <sen5x_printvalues+0x194>)
 800a244:	220e      	movs	r2, #14
 800a246:	5e9b      	ldrsh	r3, [r3, r2]
 800a248:	210a      	movs	r1, #10
 800a24a:	0018      	movs	r0, r3
 800a24c:	f7f6 f834 	bl	80002b8 <__divsi3>
 800a250:	0003      	movs	r3, r0
 800a252:	b21b      	sxth	r3, r3
 800a254:	001a      	movs	r2, r3
 800a256:	4b11      	ldr	r3, [pc, #68]	@ (800a29c <sen5x_printvalues+0x1c8>)
 800a258:	0011      	movs	r1, r2
 800a25a:	0018      	movs	r0, r3
 800a25c:	f016 fbc0 	bl	80209e0 <iprintf>
  }
}
 800a260:	46c0      	nop			@ (mov r8, r8)
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	46c0      	nop			@ (mov r8, r8)
 800a268:	20000dbc 	.word	0x20000dbc
 800a26c:	0000ffff 	.word	0x0000ffff
 800a270:	41200000 	.word	0x41200000
 800a274:	08025a14 	.word	0x08025a14
 800a278:	08025a40 	.word	0x08025a40
 800a27c:	08025a6c 	.word	0x08025a6c
 800a280:	08025a98 	.word	0x08025a98
 800a284:	00007fff 	.word	0x00007fff
 800a288:	42c80000 	.word	0x42c80000
 800a28c:	08025ac4 	.word	0x08025ac4
 800a290:	43480000 	.word	0x43480000
 800a294:	08025ae8 	.word	0x08025ae8
 800a298:	08025b10 	.word	0x08025b10
 800a29c:	08025b28 	.word	0x08025b28

0800a2a0 <sen5xStore>:

void sen5xStore() {
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800a2a4:	4b2e      	ldr	r3, [pc, #184]	@ (800a360 <sen5xStore+0xc0>)
 800a2a6:	885b      	ldrh	r3, [r3, #2]
 800a2a8:	4a2e      	ldr	r2, [pc, #184]	@ (800a364 <sen5xStore+0xc4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d004      	beq.n	800a2b8 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800a2ae:	4b2c      	ldr	r3, [pc, #176]	@ (800a360 <sen5xStore+0xc0>)
 800a2b0:	885b      	ldrh	r3, [r3, #2]
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	f7f9 faba 	bl	800382c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800a2b8:	4b29      	ldr	r3, [pc, #164]	@ (800a360 <sen5xStore+0xc0>)
 800a2ba:	88db      	ldrh	r3, [r3, #6]
 800a2bc:	4a29      	ldr	r2, [pc, #164]	@ (800a364 <sen5xStore+0xc4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d004      	beq.n	800a2cc <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800a2c2:	4b27      	ldr	r3, [pc, #156]	@ (800a360 <sen5xStore+0xc0>)
 800a2c4:	88db      	ldrh	r3, [r3, #6]
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	f7f9 fadc 	bl	8003884 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800a2cc:	4b26      	ldr	r3, [pc, #152]	@ (800a368 <sen5xStore+0xc8>)
 800a2ce:	791b      	ldrb	r3, [r3, #4]
 800a2d0:	2b34      	cmp	r3, #52	@ 0x34
 800a2d2:	d003      	beq.n	800a2dc <sen5xStore+0x3c>
 800a2d4:	4b24      	ldr	r3, [pc, #144]	@ (800a368 <sen5xStore+0xc8>)
 800a2d6:	791b      	ldrb	r3, [r3, #4]
 800a2d8:	2b35      	cmp	r3, #53	@ 0x35
 800a2da:	d13d      	bne.n	800a358 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800a2dc:	4b23      	ldr	r3, [pc, #140]	@ (800a36c <sen5xStore+0xcc>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	4053      	eors	r3, r2
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d103      	bne.n	800a2f2 <sen5xStore+0x52>
 800a2ea:	4b21      	ldr	r3, [pc, #132]	@ (800a370 <sen5xStore+0xd0>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d032      	beq.n	800a358 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800a2f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a360 <sen5xStore+0xc0>)
 800a2f4:	220c      	movs	r2, #12
 800a2f6:	5e9b      	ldrsh	r3, [r3, r2]
 800a2f8:	4a1e      	ldr	r2, [pc, #120]	@ (800a374 <sen5xStore+0xd4>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d019      	beq.n	800a332 <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800a2fe:	4b18      	ldr	r3, [pc, #96]	@ (800a360 <sen5xStore+0xc0>)
 800a300:	220c      	movs	r2, #12
 800a302:	5e9b      	ldrsh	r3, [r3, r2]
 800a304:	210a      	movs	r1, #10
 800a306:	0018      	movs	r0, r3
 800a308:	f7f5 ffd6 	bl	80002b8 <__divsi3>
 800a30c:	0003      	movs	r3, r0
 800a30e:	b21b      	sxth	r3, r3
 800a310:	b29b      	uxth	r3, r3
 800a312:	0018      	movs	r0, r3
 800a314:	f003 fe2c 	bl	800df70 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800a318:	4b11      	ldr	r3, [pc, #68]	@ (800a360 <sen5xStore+0xc0>)
 800a31a:	220c      	movs	r2, #12
 800a31c:	5e9b      	ldrsh	r3, [r3, r2]
 800a31e:	210a      	movs	r1, #10
 800a320:	0018      	movs	r0, r3
 800a322:	f7f5 ffc9 	bl	80002b8 <__divsi3>
 800a326:	0003      	movs	r3, r0
 800a328:	b21b      	sxth	r3, r3
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	0018      	movs	r0, r3
 800a32e:	f7f9 fa4d 	bl	80037cc <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800a332:	4b0b      	ldr	r3, [pc, #44]	@ (800a360 <sen5xStore+0xc0>)
 800a334:	220e      	movs	r2, #14
 800a336:	5e9b      	ldrsh	r3, [r3, r2]
 800a338:	4a0e      	ldr	r2, [pc, #56]	@ (800a374 <sen5xStore+0xd4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d00c      	beq.n	800a358 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800a33e:	4b08      	ldr	r3, [pc, #32]	@ (800a360 <sen5xStore+0xc0>)
 800a340:	220e      	movs	r2, #14
 800a342:	5e9b      	ldrsh	r3, [r3, r2]
 800a344:	210a      	movs	r1, #10
 800a346:	0018      	movs	r0, r3
 800a348:	f7f5 ffb6 	bl	80002b8 <__divsi3>
 800a34c:	0003      	movs	r3, r0
 800a34e:	b21b      	sxth	r3, r3
 800a350:	b29b      	uxth	r3, r3
 800a352:	0018      	movs	r0, r3
 800a354:	f7f9 fac2 	bl	80038dc <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800a358:	46c0      	nop			@ (mov r8, r8)
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	46c0      	nop			@ (mov r8, r8)
 800a360:	20000dbc 	.word	0x20000dbc
 800a364:	0000ffff 	.word	0x0000ffff
 800a368:	20000dac 	.word	0x20000dac
 800a36c:	20000daa 	.word	0x20000daa
 800a370:	20001d39 	.word	0x20001d39
 800a374:	00007fff 	.word	0x00007fff

0800a378 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af02      	add	r7, sp, #8
 800a37e:	6039      	str	r1, [r7, #0]
 800a380:	0011      	movs	r1, r2
 800a382:	1dfb      	adds	r3, r7, #7
 800a384:	1c02      	adds	r2, r0, #0
 800a386:	701a      	strb	r2, [r3, #0]
 800a388:	1d3b      	adds	r3, r7, #4
 800a38a:	1c0a      	adds	r2, r1, #0
 800a38c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800a38e:	1dfb      	adds	r3, r7, #7
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	b29b      	uxth	r3, r3
 800a394:	18db      	adds	r3, r3, r3
 800a396:	b299      	uxth	r1, r3
 800a398:	1d3b      	adds	r3, r7, #4
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	4805      	ldr	r0, [pc, #20]	@ (800a3b4 <sensirion_i2c_hal_read+0x3c>)
 800a3a0:	2464      	movs	r4, #100	@ 0x64
 800a3a2:	9400      	str	r4, [sp, #0]
 800a3a4:	f006 fee0 	bl	8011168 <HAL_I2C_Master_Receive>
 800a3a8:	0003      	movs	r3, r0
 800a3aa:	b25b      	sxtb	r3, r3
}
 800a3ac:	0018      	movs	r0, r3
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	b003      	add	sp, #12
 800a3b2:	bd90      	pop	{r4, r7, pc}
 800a3b4:	20000b8c 	.word	0x20000b8c

0800a3b8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800a3b8:	b590      	push	{r4, r7, lr}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	6039      	str	r1, [r7, #0]
 800a3c0:	0011      	movs	r1, r2
 800a3c2:	1dfb      	adds	r3, r7, #7
 800a3c4:	1c02      	adds	r2, r0, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	1d3b      	adds	r3, r7, #4
 800a3ca:	1c0a      	adds	r2, r1, #0
 800a3cc:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800a3ce:	1dfb      	adds	r3, r7, #7
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	18db      	adds	r3, r3, r3
 800a3d6:	b299      	uxth	r1, r3
 800a3d8:	1d3b      	adds	r3, r7, #4
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	4805      	ldr	r0, [pc, #20]	@ (800a3f4 <sensirion_i2c_hal_write+0x3c>)
 800a3e0:	2464      	movs	r4, #100	@ 0x64
 800a3e2:	9400      	str	r4, [sp, #0]
 800a3e4:	f006 fdb8 	bl	8010f58 <HAL_I2C_Master_Transmit>
 800a3e8:	0003      	movs	r3, r0
 800a3ea:	b25b      	sxtb	r3, r3
}
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	b003      	add	sp, #12
 800a3f2:	bd90      	pop	{r4, r7, pc}
 800a3f4:	20000b8c 	.word	0x20000b8c

0800a3f8 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	22fa      	movs	r2, #250	@ 0xfa
 800a404:	0091      	lsls	r1, r2, #2
 800a406:	0018      	movs	r0, r3
 800a408:	f7f5 fecc 	bl	80001a4 <__udivsi3>
 800a40c:	0003      	movs	r3, r0
 800a40e:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	22fa      	movs	r2, #250	@ 0xfa
 800a414:	0091      	lsls	r1, r2, #2
 800a416:	0018      	movs	r0, r3
 800a418:	f7f5 ff4a 	bl	80002b0 <__aeabi_uidivmod>
 800a41c:	1e0b      	subs	r3, r1, #0
 800a41e:	d002      	beq.n	800a426 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3301      	adds	r3, #1
 800a424:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	0018      	movs	r0, r3
 800a42a:	f005 fa3f 	bl	800f8ac <HAL_Delay>
}
 800a42e:	46c0      	nop			@ (mov r8, r8)
 800a430:	46bd      	mov	sp, r7
 800a432:	b004      	add	sp, #16
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800a442:	1d3b      	adds	r3, r7, #4
 800a444:	0018      	movs	r0, r3
 800a446:	f000 fd01 	bl	800ae4c <sen5x_read_device_status>
 800a44a:	1e03      	subs	r3, r0, #0
 800a44c:	d007      	beq.n	800a45e <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800a44e:	4a28      	ldr	r2, [pc, #160]	@ (800a4f0 <sen5x_check_for_errors+0xb8>)
 800a450:	4b28      	ldr	r3, [pc, #160]	@ (800a4f4 <sen5x_check_for_errors+0xbc>)
 800a452:	0019      	movs	r1, r3
 800a454:	2001      	movs	r0, #1
 800a456:	f004 fddb 	bl	800f010 <CreateLine>
    return true;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e043      	b.n	800a4e6 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <sen5x_check_for_errors+0x30>
    return false;
 800a464:	2300      	movs	r3, #0
 800a466:	e03e      	b.n	800a4e6 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	2380      	movs	r3, #128	@ 0x80
 800a46c:	039b      	lsls	r3, r3, #14
 800a46e:	4013      	ands	r3, r2
 800a470:	d005      	beq.n	800a47e <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800a472:	4a21      	ldr	r2, [pc, #132]	@ (800a4f8 <sen5x_check_for_errors+0xc0>)
 800a474:	4b21      	ldr	r3, [pc, #132]	@ (800a4fc <sen5x_check_for_errors+0xc4>)
 800a476:	0019      	movs	r1, r3
 800a478:	2003      	movs	r0, #3
 800a47a:	f004 fdc9 	bl	800f010 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	2380      	movs	r3, #128	@ 0x80
 800a482:	031b      	lsls	r3, r3, #12
 800a484:	4013      	ands	r3, r2
 800a486:	d005      	beq.n	800a494 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800a488:	4a1d      	ldr	r2, [pc, #116]	@ (800a500 <sen5x_check_for_errors+0xc8>)
 800a48a:	4b1c      	ldr	r3, [pc, #112]	@ (800a4fc <sen5x_check_for_errors+0xc4>)
 800a48c:	0019      	movs	r1, r3
 800a48e:	2003      	movs	r0, #3
 800a490:	f004 fdbe 	bl	800f010 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2280      	movs	r2, #128	@ 0x80
 800a498:	4013      	ands	r3, r2
 800a49a:	d005      	beq.n	800a4a8 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800a49c:	4a19      	ldr	r2, [pc, #100]	@ (800a504 <sen5x_check_for_errors+0xcc>)
 800a49e:	4b17      	ldr	r3, [pc, #92]	@ (800a4fc <sen5x_check_for_errors+0xc4>)
 800a4a0:	0019      	movs	r1, r3
 800a4a2:	2003      	movs	r0, #3
 800a4a4:	f004 fdb4 	bl	800f010 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2240      	movs	r2, #64	@ 0x40
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	d005      	beq.n	800a4bc <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800a4b0:	4a15      	ldr	r2, [pc, #84]	@ (800a508 <sen5x_check_for_errors+0xd0>)
 800a4b2:	4b12      	ldr	r3, [pc, #72]	@ (800a4fc <sen5x_check_for_errors+0xc4>)
 800a4b4:	0019      	movs	r1, r3
 800a4b6:	2003      	movs	r0, #3
 800a4b8:	f004 fdaa 	bl	800f010 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	d005      	beq.n	800a4d0 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800a4c4:	4a11      	ldr	r2, [pc, #68]	@ (800a50c <sen5x_check_for_errors+0xd4>)
 800a4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a4fc <sen5x_check_for_errors+0xc4>)
 800a4c8:	0019      	movs	r1, r3
 800a4ca:	2003      	movs	r0, #3
 800a4cc:	f004 fda0 	bl	800f010 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2210      	movs	r2, #16
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	d005      	beq.n	800a4e4 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800a4d8:	4a0d      	ldr	r2, [pc, #52]	@ (800a510 <sen5x_check_for_errors+0xd8>)
 800a4da:	4b08      	ldr	r3, [pc, #32]	@ (800a4fc <sen5x_check_for_errors+0xc4>)
 800a4dc:	0019      	movs	r1, r3
 800a4de:	2003      	movs	r0, #3
 800a4e0:	f004 fd96 	bl	800f010 <CreateLine>
  }
  return 1;
 800a4e4:	2301      	movs	r3, #1
}
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	b002      	add	sp, #8
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	46c0      	nop			@ (mov r8, r8)
 800a4f0:	08025b40 	.word	0x08025b40
 800a4f4:	080256c4 	.word	0x080256c4
 800a4f8:	08025b6c 	.word	0x08025b6c
 800a4fc:	08025698 	.word	0x08025698
 800a500:	08025b8c 	.word	0x08025b8c
 800a504:	08025ba8 	.word	0x08025ba8
 800a508:	08025bcc 	.word	0x08025bcc
 800a50c:	08025bec 	.word	0x08025bec
 800a510:	08025c00 	.word	0x08025c00

0800a514 <set_light_on_state>:

void set_light_on_state(void) {
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800a518:	4b15      	ldr	r3, [pc, #84]	@ (800a570 <set_light_on_state+0x5c>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2201      	movs	r2, #1
 800a51e:	4053      	eors	r3, r2
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d008      	beq.n	800a538 <set_light_on_state+0x24>
    sen5x_Power_On();
 800a526:	f7ff fb43 	bl	8009bb0 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800a52a:	4a12      	ldr	r2, [pc, #72]	@ (800a574 <set_light_on_state+0x60>)
 800a52c:	4b12      	ldr	r3, [pc, #72]	@ (800a578 <set_light_on_state+0x64>)
 800a52e:	0019      	movs	r1, r3
 800a530:	2003      	movs	r0, #3
 800a532:	f004 fd6d 	bl	800f010 <CreateLine>
 800a536:	e00a      	b.n	800a54e <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800a538:	f005 f9ae 	bl	800f898 <HAL_GetTick>
 800a53c:	0002      	movs	r2, r0
 800a53e:	4b0f      	ldr	r3, [pc, #60]	@ (800a57c <set_light_on_state+0x68>)
 800a540:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800a542:	4a0f      	ldr	r2, [pc, #60]	@ (800a580 <set_light_on_state+0x6c>)
 800a544:	4b0c      	ldr	r3, [pc, #48]	@ (800a578 <set_light_on_state+0x64>)
 800a546:	0019      	movs	r1, r3
 800a548:	2003      	movs	r0, #3
 800a54a:	f004 fd61 	bl	800f010 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800a54e:	f7ff fcbf 	bl	8009ed0 <sen5x_lightup_measurement>
 800a552:	1e03      	subs	r3, r0, #0
 800a554:	d005      	beq.n	800a562 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800a556:	4a0b      	ldr	r2, [pc, #44]	@ (800a584 <set_light_on_state+0x70>)
 800a558:	4b0b      	ldr	r3, [pc, #44]	@ (800a588 <set_light_on_state+0x74>)
 800a55a:	0019      	movs	r1, r3
 800a55c:	2001      	movs	r0, #1
 800a55e:	f004 fd57 	bl	800f010 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800a562:	4b0a      	ldr	r3, [pc, #40]	@ (800a58c <set_light_on_state+0x78>)
 800a564:	2203      	movs	r2, #3
 800a566:	701a      	strb	r2, [r3, #0]
}
 800a568:	46c0      	nop			@ (mov r8, r8)
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	46c0      	nop			@ (mov r8, r8)
 800a570:	20000da9 	.word	0x20000da9
 800a574:	08025c3c 	.word	0x08025c3c
 800a578:	08025698 	.word	0x08025698
 800a57c:	20000db8 	.word	0x20000db8
 800a580:	08025c68 	.word	0x08025c68
 800a584:	08025c80 	.word	0x08025c80
 800a588:	080256c4 	.word	0x080256c4
 800a58c:	20000089 	.word	0x20000089

0800a590 <sen5x_statemachine>:

void sen5x_statemachine() {
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800a596:	1dfb      	adds	r3, r7, #7
 800a598:	2200      	movs	r2, #0
 800a59a:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800a59c:	4b86      	ldr	r3, [pc, #536]	@ (800a7b8 <sen5x_statemachine+0x228>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	f004 fcdf 	bl	800ef64 <TimestampIsReached>
 800a5a6:	1e03      	subs	r3, r0, #0
 800a5a8:	d100      	bne.n	800a5ac <sen5x_statemachine+0x1c>
 800a5aa:	e100      	b.n	800a7ae <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800a5ac:	4b83      	ldr	r3, [pc, #524]	@ (800a7bc <sen5x_statemachine+0x22c>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	d900      	bls.n	800a5b6 <sen5x_statemachine+0x26>
 800a5b4:	e0fb      	b.n	800a7ae <sen5x_statemachine+0x21e>
 800a5b6:	009a      	lsls	r2, r3, #2
 800a5b8:	4b81      	ldr	r3, [pc, #516]	@ (800a7c0 <sen5x_statemachine+0x230>)
 800a5ba:	18d3      	adds	r3, r2, r3
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800a5c0:	4a80      	ldr	r2, [pc, #512]	@ (800a7c4 <sen5x_statemachine+0x234>)
 800a5c2:	4b81      	ldr	r3, [pc, #516]	@ (800a7c8 <sen5x_statemachine+0x238>)
 800a5c4:	0019      	movs	r1, r3
 800a5c6:	2001      	movs	r0, #1
 800a5c8:	f004 fd22 	bl	800f010 <CreateLine>
      SetPMSensorStatus(false);
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	f7fe fc61 	bl	8008e94 <SetPMSensorStatus>
      DisablePMSensor();
 800a5d2:	f7fe fc01 	bl	8008dd8 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800a5d6:	f005 f95f 	bl	800f898 <HAL_GetTick>
 800a5da:	0003      	movs	r3, r0
 800a5dc:	4a7b      	ldr	r2, [pc, #492]	@ (800a7cc <sen5x_statemachine+0x23c>)
 800a5de:	189a      	adds	r2, r3, r2
 800a5e0:	4b75      	ldr	r3, [pc, #468]	@ (800a7b8 <sen5x_statemachine+0x228>)
 800a5e2:	601a      	str	r2, [r3, #0]
      break;
 800a5e4:	e0e3      	b.n	800a7ae <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800a5e6:	f005 f957 	bl	800f898 <HAL_GetTick>
 800a5ea:	0003      	movs	r3, r0
 800a5ec:	4a78      	ldr	r2, [pc, #480]	@ (800a7d0 <sen5x_statemachine+0x240>)
 800a5ee:	189a      	adds	r2, r3, r2
 800a5f0:	4b71      	ldr	r3, [pc, #452]	@ (800a7b8 <sen5x_statemachine+0x228>)
 800a5f2:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800a5f4:	f7ff ff8e 	bl	800a514 <set_light_on_state>
      break;
 800a5f8:	e0d9      	b.n	800a7ae <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800a5fa:	4b70      	ldr	r3, [pc, #448]	@ (800a7bc <sen5x_statemachine+0x22c>)
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800a600:	4b74      	ldr	r3, [pc, #464]	@ (800a7d4 <sen5x_statemachine+0x244>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b05      	cmp	r3, #5
 800a606:	d905      	bls.n	800a614 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800a608:	4b6c      	ldr	r3, [pc, #432]	@ (800a7bc <sen5x_statemachine+0x22c>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800a60e:	f7ff faff 	bl	8009c10 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800a612:	e0c9      	b.n	800a7a8 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800a614:	f7ff ff10 	bl	800a438 <sen5x_check_for_errors>
 800a618:	1e03      	subs	r3, r0, #0
 800a61a:	d01f      	beq.n	800a65c <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800a61c:	f000 fc68 	bl	800aef0 <sen5x_device_reset>
 800a620:	1e03      	subs	r3, r0, #0
 800a622:	d00f      	beq.n	800a644 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800a624:	4a6c      	ldr	r2, [pc, #432]	@ (800a7d8 <sen5x_statemachine+0x248>)
 800a626:	4b68      	ldr	r3, [pc, #416]	@ (800a7c8 <sen5x_statemachine+0x238>)
 800a628:	0019      	movs	r1, r3
 800a62a:	2001      	movs	r0, #1
 800a62c:	f004 fcf0 	bl	800f010 <CreateLine>
            sen5xErrors++;
 800a630:	4b68      	ldr	r3, [pc, #416]	@ (800a7d4 <sen5x_statemachine+0x244>)
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	3301      	adds	r3, #1
 800a636:	b2da      	uxtb	r2, r3
 800a638:	4b66      	ldr	r3, [pc, #408]	@ (800a7d4 <sen5x_statemachine+0x244>)
 800a63a:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800a63c:	4b5f      	ldr	r3, [pc, #380]	@ (800a7bc <sen5x_statemachine+0x22c>)
 800a63e:	2203      	movs	r2, #3
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	e005      	b.n	800a650 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800a644:	4a65      	ldr	r2, [pc, #404]	@ (800a7dc <sen5x_statemachine+0x24c>)
 800a646:	4b66      	ldr	r3, [pc, #408]	@ (800a7e0 <sen5x_statemachine+0x250>)
 800a648:	0019      	movs	r1, r3
 800a64a:	2002      	movs	r0, #2
 800a64c:	f004 fce0 	bl	800f010 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800a650:	f005 f922 	bl	800f898 <HAL_GetTick>
 800a654:	0002      	movs	r2, r0
 800a656:	4b58      	ldr	r3, [pc, #352]	@ (800a7b8 <sen5x_statemachine+0x228>)
 800a658:	601a      	str	r2, [r3, #0]
      break;
 800a65a:	e0a5      	b.n	800a7a8 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800a65c:	4b5d      	ldr	r3, [pc, #372]	@ (800a7d4 <sen5x_statemachine+0x244>)
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d100      	bne.n	800a666 <sen5x_statemachine+0xd6>
 800a664:	e0a0      	b.n	800a7a8 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800a666:	4b5b      	ldr	r3, [pc, #364]	@ (800a7d4 <sen5x_statemachine+0x244>)
 800a668:	2200      	movs	r2, #0
 800a66a:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800a66c:	4a5d      	ldr	r2, [pc, #372]	@ (800a7e4 <sen5x_statemachine+0x254>)
 800a66e:	4b5e      	ldr	r3, [pc, #376]	@ (800a7e8 <sen5x_statemachine+0x258>)
 800a670:	0019      	movs	r1, r3
 800a672:	2003      	movs	r0, #3
 800a674:	f004 fccc 	bl	800f010 <CreateLine>
      break;
 800a678:	e096      	b.n	800a7a8 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800a67a:	1dfb      	adds	r3, r7, #7
 800a67c:	0018      	movs	r0, r3
 800a67e:	f000 f953 	bl	800a928 <sen5x_read_data_ready>
      if (data_ready) {
 800a682:	1dfb      	adds	r3, r7, #7
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d02c      	beq.n	800a6e4 <sen5x_statemachine+0x154>
        SetPMIndicator();
 800a68a:	f003 fbd1 	bl	800de30 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800a68e:	4b57      	ldr	r3, [pc, #348]	@ (800a7ec <sen5x_statemachine+0x25c>)
 800a690:	0018      	movs	r0, r3
 800a692:	f7ff fcc3 	bl	800a01c <sen5x_read_measurement>
 800a696:	1e03      	subs	r3, r0, #0
 800a698:	d00b      	beq.n	800a6b2 <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800a69a:	4a55      	ldr	r2, [pc, #340]	@ (800a7f0 <sen5x_statemachine+0x260>)
 800a69c:	4b4a      	ldr	r3, [pc, #296]	@ (800a7c8 <sen5x_statemachine+0x238>)
 800a69e:	0019      	movs	r1, r3
 800a6a0:	2001      	movs	r0, #1
 800a6a2:	f004 fcb5 	bl	800f010 <CreateLine>
          sen5xErrors++;
 800a6a6:	4b4b      	ldr	r3, [pc, #300]	@ (800a7d4 <sen5x_statemachine+0x244>)
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	4b49      	ldr	r3, [pc, #292]	@ (800a7d4 <sen5x_statemachine+0x244>)
 800a6b0:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800a6b2:	4b50      	ldr	r3, [pc, #320]	@ (800a7f4 <sen5x_statemachine+0x264>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	4b4e      	ldr	r3, [pc, #312]	@ (800a7f4 <sen5x_statemachine+0x264>)
 800a6bc:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800a6be:	4b4d      	ldr	r3, [pc, #308]	@ (800a7f4 <sen5x_statemachine+0x264>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	2b1f      	cmp	r3, #31
 800a6c4:	d102      	bne.n	800a6cc <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800a6c6:	4b4b      	ldr	r3, [pc, #300]	@ (800a7f4 <sen5x_statemachine+0x264>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800a6cc:	4b49      	ldr	r3, [pc, #292]	@ (800a7f4 <sen5x_statemachine+0x264>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d901      	bls.n	800a6d8 <sen5x_statemachine+0x148>
          sen5xStore();
 800a6d4:	f7ff fde4 	bl	800a2a0 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800a6d8:	4b46      	ldr	r3, [pc, #280]	@ (800a7f4 <sen5x_statemachine+0x264>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d101      	bne.n	800a6e4 <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800a6e0:	f7ff fcf8 	bl	800a0d4 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800a6e4:	4b44      	ldr	r3, [pc, #272]	@ (800a7f8 <sen5x_statemachine+0x268>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d103      	bne.n	800a6f4 <sen5x_statemachine+0x164>
 800a6ec:	4b41      	ldr	r3, [pc, #260]	@ (800a7f4 <sen5x_statemachine+0x264>)
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d95b      	bls.n	800a7ac <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800a6f4:	4b31      	ldr	r3, [pc, #196]	@ (800a7bc <sen5x_statemachine+0x22c>)
 800a6f6:	2204      	movs	r2, #4
 800a6f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a6fa:	e057      	b.n	800a7ac <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800a6fc:	f7fc fde4 	bl	80072c8 <RTC_GetWeekday>
 800a700:	0003      	movs	r3, r0
 800a702:	2b01      	cmp	r3, #1
 800a704:	d11a      	bne.n	800a73c <sen5x_statemachine+0x1ac>
 800a706:	4b3d      	ldr	r3, [pc, #244]	@ (800a7fc <sen5x_statemachine+0x26c>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	2201      	movs	r2, #1
 800a70c:	4053      	eors	r3, r2
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d013      	beq.n	800a73c <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800a714:	f000 f9ee 	bl	800aaf4 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800a718:	4a39      	ldr	r2, [pc, #228]	@ (800a800 <sen5x_statemachine+0x270>)
 800a71a:	4b31      	ldr	r3, [pc, #196]	@ (800a7e0 <sen5x_statemachine+0x250>)
 800a71c:	0019      	movs	r1, r3
 800a71e:	2002      	movs	r0, #2
 800a720:	f004 fc76 	bl	800f010 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800a724:	f005 f8b8 	bl	800f898 <HAL_GetTick>
 800a728:	0003      	movs	r3, r0
 800a72a:	4a36      	ldr	r2, [pc, #216]	@ (800a804 <sen5x_statemachine+0x274>)
 800a72c:	189a      	adds	r2, r3, r2
 800a72e:	4b22      	ldr	r3, [pc, #136]	@ (800a7b8 <sen5x_statemachine+0x228>)
 800a730:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800a732:	4b32      	ldr	r3, [pc, #200]	@ (800a7fc <sen5x_statemachine+0x26c>)
 800a734:	2201      	movs	r2, #1
 800a736:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800a738:	f7ff fbca 	bl	8009ed0 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800a73c:	4b1f      	ldr	r3, [pc, #124]	@ (800a7bc <sen5x_statemachine+0x22c>)
 800a73e:	2205      	movs	r2, #5
 800a740:	701a      	strb	r2, [r3, #0]
      break;
 800a742:	e034      	b.n	800a7ae <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800a744:	4b2c      	ldr	r3, [pc, #176]	@ (800a7f8 <sen5x_statemachine+0x268>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2201      	movs	r2, #1
 800a74a:	4053      	eors	r3, r2
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d01c      	beq.n	800a78c <sen5x_statemachine+0x1fc>
 800a752:	4b2d      	ldr	r3, [pc, #180]	@ (800a808 <sen5x_statemachine+0x278>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2201      	movs	r2, #1
 800a758:	4053      	eors	r3, r2
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d015      	beq.n	800a78c <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800a760:	f7ff fc02 	bl	8009f68 <sen5x_extinguish_measurement>
 800a764:	1e03      	subs	r3, r0, #0
 800a766:	d005      	beq.n	800a774 <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800a768:	4a28      	ldr	r2, [pc, #160]	@ (800a80c <sen5x_statemachine+0x27c>)
 800a76a:	4b17      	ldr	r3, [pc, #92]	@ (800a7c8 <sen5x_statemachine+0x238>)
 800a76c:	0019      	movs	r1, r3
 800a76e:	2001      	movs	r0, #1
 800a770:	f004 fc4e 	bl	800f010 <CreateLine>
        }
        sen5xSamples = 0;
 800a774:	4b1f      	ldr	r3, [pc, #124]	@ (800a7f4 <sen5x_statemachine+0x264>)
 800a776:	2200      	movs	r2, #0
 800a778:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800a77a:	f7ff fa49 	bl	8009c10 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800a77e:	2000      	movs	r0, #0
 800a780:	f7fe fb88 	bl	8008e94 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800a784:	4b0d      	ldr	r3, [pc, #52]	@ (800a7bc <sen5x_statemachine+0x22c>)
 800a786:	2201      	movs	r2, #1
 800a788:	701a      	strb	r2, [r3, #0]
 800a78a:	e002      	b.n	800a792 <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800a78c:	4b0b      	ldr	r3, [pc, #44]	@ (800a7bc <sen5x_statemachine+0x22c>)
 800a78e:	2203      	movs	r2, #3
 800a790:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800a792:	f003 fb73 	bl	800de7c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800a796:	f005 f87f 	bl	800f898 <HAL_GetTick>
 800a79a:	0003      	movs	r3, r0
 800a79c:	22fa      	movs	r2, #250	@ 0xfa
 800a79e:	0092      	lsls	r2, r2, #2
 800a7a0:	189a      	adds	r2, r3, r2
 800a7a2:	4b05      	ldr	r3, [pc, #20]	@ (800a7b8 <sen5x_statemachine+0x228>)
 800a7a4:	601a      	str	r2, [r3, #0]
    }
  }
}
 800a7a6:	e002      	b.n	800a7ae <sen5x_statemachine+0x21e>
      break;
 800a7a8:	46c0      	nop			@ (mov r8, r8)
 800a7aa:	e000      	b.n	800a7ae <sen5x_statemachine+0x21e>
      break;
 800a7ac:	46c0      	nop			@ (mov r8, r8)
}
 800a7ae:	46c0      	nop			@ (mov r8, r8)
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b002      	add	sp, #8
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	46c0      	nop			@ (mov r8, r8)
 800a7b8:	20000db8 	.word	0x20000db8
 800a7bc:	20000089 	.word	0x20000089
 800a7c0:	0802668c 	.word	0x0802668c
 800a7c4:	08025cac 	.word	0x08025cac
 800a7c8:	080256c4 	.word	0x080256c4
 800a7cc:	002fefd8 	.word	0x002fefd8
 800a7d0:	00005910 	.word	0x00005910
 800a7d4:	20000db5 	.word	0x20000db5
 800a7d8:	08025cdc 	.word	0x08025cdc
 800a7dc:	08025cf4 	.word	0x08025cf4
 800a7e0:	08025658 	.word	0x08025658
 800a7e4:	08025d0c 	.word	0x08025d0c
 800a7e8:	08025698 	.word	0x08025698
 800a7ec:	20000dbc 	.word	0x20000dbc
 800a7f0:	08025d20 	.word	0x08025d20
 800a7f4:	20000db4 	.word	0x20000db4
 800a7f8:	20001d39 	.word	0x20001d39
 800a7fc:	20000da8 	.word	0x20000da8
 800a800:	08025d50 	.word	0x08025d50
 800a804:	00002710 	.word	0x00002710
 800a808:	20001d3a 	.word	0x20001d3a
 800a80c:	08025d68 	.word	0x08025d68

0800a810 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800a810:	b590      	push	{r4, r7, lr}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a816:	1dbb      	adds	r3, r7, #6
 800a818:	2200      	movs	r2, #0
 800a81a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800a81c:	1dbc      	adds	r4, r7, #6
 800a81e:	1dbb      	adds	r3, r7, #6
 800a820:	8819      	ldrh	r1, [r3, #0]
 800a822:	003b      	movs	r3, r7
 800a824:	2221      	movs	r2, #33	@ 0x21
 800a826:	0018      	movs	r0, r3
 800a828:	f001 fb56 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800a82c:	0003      	movs	r3, r0
 800a82e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a830:	1d3c      	adds	r4, r7, #4
 800a832:	1dbb      	adds	r3, r7, #6
 800a834:	881a      	ldrh	r2, [r3, #0]
 800a836:	003b      	movs	r3, r7
 800a838:	0019      	movs	r1, r3
 800a83a:	2069      	movs	r0, #105	@ 0x69
 800a83c:	f001 fbd0 	bl	800bfe0 <sensirion_i2c_write_data>
 800a840:	0003      	movs	r3, r0
 800a842:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a844:	1d3b      	adds	r3, r7, #4
 800a846:	2200      	movs	r2, #0
 800a848:	5e9b      	ldrsh	r3, [r3, r2]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <sen5x_start_measurement+0x46>
        return error;
 800a84e:	1d3b      	adds	r3, r7, #4
 800a850:	2200      	movs	r2, #0
 800a852:	5e9b      	ldrsh	r3, [r3, r2]
 800a854:	e004      	b.n	800a860 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a856:	4b04      	ldr	r3, [pc, #16]	@ (800a868 <sen5x_start_measurement+0x58>)
 800a858:	0018      	movs	r0, r3
 800a85a:	f7ff fdcd 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	0018      	movs	r0, r3
 800a862:	46bd      	mov	sp, r7
 800a864:	b003      	add	sp, #12
 800a866:	bd90      	pop	{r4, r7, pc}
 800a868:	0000c350 	.word	0x0000c350

0800a86c <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800a86c:	b590      	push	{r4, r7, lr}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a872:	1dbb      	adds	r3, r7, #6
 800a874:	2200      	movs	r2, #0
 800a876:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800a878:	1dbc      	adds	r4, r7, #6
 800a87a:	1dbb      	adds	r3, r7, #6
 800a87c:	8819      	ldrh	r1, [r3, #0]
 800a87e:	003b      	movs	r3, r7
 800a880:	2237      	movs	r2, #55	@ 0x37
 800a882:	0018      	movs	r0, r3
 800a884:	f001 fb28 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800a888:	0003      	movs	r3, r0
 800a88a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a88c:	1d3c      	adds	r4, r7, #4
 800a88e:	1dbb      	adds	r3, r7, #6
 800a890:	881a      	ldrh	r2, [r3, #0]
 800a892:	003b      	movs	r3, r7
 800a894:	0019      	movs	r1, r3
 800a896:	2069      	movs	r0, #105	@ 0x69
 800a898:	f001 fba2 	bl	800bfe0 <sensirion_i2c_write_data>
 800a89c:	0003      	movs	r3, r0
 800a89e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a8a0:	1d3b      	adds	r3, r7, #4
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800a8aa:	1d3b      	adds	r3, r7, #4
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	5e9b      	ldrsh	r3, [r3, r2]
 800a8b0:	e004      	b.n	800a8bc <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a8b2:	4b04      	ldr	r3, [pc, #16]	@ (800a8c4 <sen5x_start_measurement_without_pm+0x58>)
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	f7ff fd9f 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	0018      	movs	r0, r3
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	b003      	add	sp, #12
 800a8c2:	bd90      	pop	{r4, r7, pc}
 800a8c4:	0000c350 	.word	0x0000c350

0800a8c8 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800a8c8:	b590      	push	{r4, r7, lr}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a8ce:	1dbb      	adds	r3, r7, #6
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800a8d4:	1dbc      	adds	r4, r7, #6
 800a8d6:	2382      	movs	r3, #130	@ 0x82
 800a8d8:	005a      	lsls	r2, r3, #1
 800a8da:	1dbb      	adds	r3, r7, #6
 800a8dc:	8819      	ldrh	r1, [r3, #0]
 800a8de:	003b      	movs	r3, r7
 800a8e0:	0018      	movs	r0, r3
 800a8e2:	f001 faf9 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800a8e6:	0003      	movs	r3, r0
 800a8e8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a8ea:	1d3c      	adds	r4, r7, #4
 800a8ec:	1dbb      	adds	r3, r7, #6
 800a8ee:	881a      	ldrh	r2, [r3, #0]
 800a8f0:	003b      	movs	r3, r7
 800a8f2:	0019      	movs	r1, r3
 800a8f4:	2069      	movs	r0, #105	@ 0x69
 800a8f6:	f001 fb73 	bl	800bfe0 <sensirion_i2c_write_data>
 800a8fa:	0003      	movs	r3, r0
 800a8fc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a8fe:	1d3b      	adds	r3, r7, #4
 800a900:	2200      	movs	r2, #0
 800a902:	5e9b      	ldrsh	r3, [r3, r2]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <sen5x_stop_measurement+0x48>
        return error;
 800a908:	1d3b      	adds	r3, r7, #4
 800a90a:	2200      	movs	r2, #0
 800a90c:	5e9b      	ldrsh	r3, [r3, r2]
 800a90e:	e004      	b.n	800a91a <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a910:	4b04      	ldr	r3, [pc, #16]	@ (800a924 <sen5x_stop_measurement+0x5c>)
 800a912:	0018      	movs	r0, r3
 800a914:	f7ff fd70 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	0018      	movs	r0, r3
 800a91c:	46bd      	mov	sp, r7
 800a91e:	b003      	add	sp, #12
 800a920:	bd90      	pop	{r4, r7, pc}
 800a922:	46c0      	nop			@ (mov r8, r8)
 800a924:	00030d40 	.word	0x00030d40

0800a928 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800a928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800a930:	250e      	movs	r5, #14
 800a932:	197b      	adds	r3, r7, r5
 800a934:	2200      	movs	r2, #0
 800a936:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800a938:	197c      	adds	r4, r7, r5
 800a93a:	4a22      	ldr	r2, [pc, #136]	@ (800a9c4 <sen5x_read_data_ready+0x9c>)
 800a93c:	197b      	adds	r3, r7, r5
 800a93e:	8819      	ldrh	r1, [r3, #0]
 800a940:	2308      	movs	r3, #8
 800a942:	18fb      	adds	r3, r7, r3
 800a944:	0018      	movs	r0, r3
 800a946:	f001 fac7 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800a94a:	0003      	movs	r3, r0
 800a94c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a94e:	260c      	movs	r6, #12
 800a950:	19bc      	adds	r4, r7, r6
 800a952:	197b      	adds	r3, r7, r5
 800a954:	881a      	ldrh	r2, [r3, #0]
 800a956:	2308      	movs	r3, #8
 800a958:	18fb      	adds	r3, r7, r3
 800a95a:	0019      	movs	r1, r3
 800a95c:	2069      	movs	r0, #105	@ 0x69
 800a95e:	f001 fb3f 	bl	800bfe0 <sensirion_i2c_write_data>
 800a962:	0003      	movs	r3, r0
 800a964:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a966:	19bb      	adds	r3, r7, r6
 800a968:	2200      	movs	r2, #0
 800a96a:	5e9b      	ldrsh	r3, [r3, r2]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <sen5x_read_data_ready+0x50>
        return error;
 800a970:	19bb      	adds	r3, r7, r6
 800a972:	2200      	movs	r2, #0
 800a974:	5e9b      	ldrsh	r3, [r3, r2]
 800a976:	e020      	b.n	800a9ba <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a978:	4b13      	ldr	r3, [pc, #76]	@ (800a9c8 <sen5x_read_data_ready+0xa0>)
 800a97a:	0018      	movs	r0, r3
 800a97c:	f7ff fd3c 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800a980:	250c      	movs	r5, #12
 800a982:	197c      	adds	r4, r7, r5
 800a984:	2308      	movs	r3, #8
 800a986:	18fb      	adds	r3, r7, r3
 800a988:	2202      	movs	r2, #2
 800a98a:	0019      	movs	r1, r3
 800a98c:	2069      	movs	r0, #105	@ 0x69
 800a98e:	f001 fb3f 	bl	800c010 <sensirion_i2c_read_data_inplace>
 800a992:	0003      	movs	r3, r0
 800a994:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a996:	197b      	adds	r3, r7, r5
 800a998:	2200      	movs	r2, #0
 800a99a:	5e9b      	ldrsh	r3, [r3, r2]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <sen5x_read_data_ready+0x80>
        return error;
 800a9a0:	197b      	adds	r3, r7, r5
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a9a6:	e008      	b.n	800a9ba <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	18fb      	adds	r3, r7, r3
 800a9ac:	785b      	ldrb	r3, [r3, #1]
 800a9ae:	1e5a      	subs	r2, r3, #1
 800a9b0:	4193      	sbcs	r3, r2
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	b005      	add	sp, #20
 800a9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c2:	46c0      	nop			@ (mov r8, r8)
 800a9c4:	00000202 	.word	0x00000202
 800a9c8:	00004e20 	.word	0x00004e20

0800a9cc <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800a9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ce:	b08d      	sub	sp, #52	@ 0x34
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800a9da:	252e      	movs	r5, #46	@ 0x2e
 800a9dc:	197b      	adds	r3, r7, r5
 800a9de:	2200      	movs	r2, #0
 800a9e0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800a9e2:	197c      	adds	r4, r7, r5
 800a9e4:	23f1      	movs	r3, #241	@ 0xf1
 800a9e6:	009a      	lsls	r2, r3, #2
 800a9e8:	197b      	adds	r3, r7, r5
 800a9ea:	8819      	ldrh	r1, [r3, #0]
 800a9ec:	2314      	movs	r3, #20
 800a9ee:	18fb      	adds	r3, r7, r3
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	f001 fa71 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800a9f6:	0003      	movs	r3, r0
 800a9f8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a9fa:	262c      	movs	r6, #44	@ 0x2c
 800a9fc:	19bc      	adds	r4, r7, r6
 800a9fe:	197b      	adds	r3, r7, r5
 800aa00:	881a      	ldrh	r2, [r3, #0]
 800aa02:	2314      	movs	r3, #20
 800aa04:	18fb      	adds	r3, r7, r3
 800aa06:	0019      	movs	r1, r3
 800aa08:	2069      	movs	r0, #105	@ 0x69
 800aa0a:	f001 fae9 	bl	800bfe0 <sensirion_i2c_write_data>
 800aa0e:	0003      	movs	r3, r0
 800aa10:	8023      	strh	r3, [r4, #0]
    if (error) {
 800aa12:	19bb      	adds	r3, r7, r6
 800aa14:	2200      	movs	r2, #0
 800aa16:	5e9b      	ldrsh	r3, [r3, r2]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <sen5x_read_measured_values+0x58>
        return error;
 800aa1c:	19bb      	adds	r3, r7, r6
 800aa1e:	2200      	movs	r2, #0
 800aa20:	5e9b      	ldrsh	r3, [r3, r2]
 800aa22:	e060      	b.n	800aae6 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800aa24:	4b32      	ldr	r3, [pc, #200]	@ (800aaf0 <sen5x_read_measured_values+0x124>)
 800aa26:	0018      	movs	r0, r3
 800aa28:	f7ff fce6 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800aa2c:	252c      	movs	r5, #44	@ 0x2c
 800aa2e:	197c      	adds	r4, r7, r5
 800aa30:	2314      	movs	r3, #20
 800aa32:	18fb      	adds	r3, r7, r3
 800aa34:	2210      	movs	r2, #16
 800aa36:	0019      	movs	r1, r3
 800aa38:	2069      	movs	r0, #105	@ 0x69
 800aa3a:	f001 fae9 	bl	800c010 <sensirion_i2c_read_data_inplace>
 800aa3e:	0003      	movs	r3, r0
 800aa40:	8023      	strh	r3, [r4, #0]
    if (error) {
 800aa42:	197b      	adds	r3, r7, r5
 800aa44:	2200      	movs	r2, #0
 800aa46:	5e9b      	ldrsh	r3, [r3, r2]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <sen5x_read_measured_values+0x88>
        return error;
 800aa4c:	197b      	adds	r3, r7, r5
 800aa4e:	2200      	movs	r2, #0
 800aa50:	5e9b      	ldrsh	r3, [r3, r2]
 800aa52:	e048      	b.n	800aae6 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800aa54:	2414      	movs	r4, #20
 800aa56:	193b      	adds	r3, r7, r4
 800aa58:	0018      	movs	r0, r3
 800aa5a:	f000 fa79 	bl	800af50 <sensirion_common_bytes_to_uint16_t>
 800aa5e:	0003      	movs	r3, r0
 800aa60:	001a      	movs	r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800aa66:	193b      	adds	r3, r7, r4
 800aa68:	3302      	adds	r3, #2
 800aa6a:	0018      	movs	r0, r3
 800aa6c:	f000 fa70 	bl	800af50 <sensirion_common_bytes_to_uint16_t>
 800aa70:	0003      	movs	r3, r0
 800aa72:	001a      	movs	r2, r3
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800aa78:	193b      	adds	r3, r7, r4
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	0018      	movs	r0, r3
 800aa7e:	f000 fa67 	bl	800af50 <sensirion_common_bytes_to_uint16_t>
 800aa82:	0003      	movs	r3, r0
 800aa84:	001a      	movs	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800aa8a:	193b      	adds	r3, r7, r4
 800aa8c:	3306      	adds	r3, #6
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f000 fa5e 	bl	800af50 <sensirion_common_bytes_to_uint16_t>
 800aa94:	0003      	movs	r3, r0
 800aa96:	001a      	movs	r2, r3
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800aa9c:	193b      	adds	r3, r7, r4
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	f000 fa81 	bl	800afa8 <sensirion_common_bytes_to_int16_t>
 800aaa6:	0003      	movs	r3, r0
 800aaa8:	001a      	movs	r2, r3
 800aaaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaac:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800aaae:	193b      	adds	r3, r7, r4
 800aab0:	330a      	adds	r3, #10
 800aab2:	0018      	movs	r0, r3
 800aab4:	f000 fa78 	bl	800afa8 <sensirion_common_bytes_to_int16_t>
 800aab8:	0003      	movs	r3, r0
 800aaba:	001a      	movs	r2, r3
 800aabc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aabe:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800aac0:	193b      	adds	r3, r7, r4
 800aac2:	330c      	adds	r3, #12
 800aac4:	0018      	movs	r0, r3
 800aac6:	f000 fa6f 	bl	800afa8 <sensirion_common_bytes_to_int16_t>
 800aaca:	0003      	movs	r3, r0
 800aacc:	001a      	movs	r2, r3
 800aace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aad0:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800aad2:	193b      	adds	r3, r7, r4
 800aad4:	330e      	adds	r3, #14
 800aad6:	0018      	movs	r0, r3
 800aad8:	f000 fa66 	bl	800afa8 <sensirion_common_bytes_to_int16_t>
 800aadc:	0003      	movs	r3, r0
 800aade:	001a      	movs	r2, r3
 800aae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aae2:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	0018      	movs	r0, r3
 800aae8:	46bd      	mov	sp, r7
 800aaea:	b00d      	add	sp, #52	@ 0x34
 800aaec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaee:	46c0      	nop			@ (mov r8, r8)
 800aaf0:	00004e20 	.word	0x00004e20

0800aaf4 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800aaf4:	b590      	push	{r4, r7, lr}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800aafa:	1dbb      	adds	r3, r7, #6
 800aafc:	2200      	movs	r2, #0
 800aafe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800ab00:	1dbc      	adds	r4, r7, #6
 800ab02:	4a12      	ldr	r2, [pc, #72]	@ (800ab4c <sen5x_start_fan_cleaning+0x58>)
 800ab04:	1dbb      	adds	r3, r7, #6
 800ab06:	8819      	ldrh	r1, [r3, #0]
 800ab08:	003b      	movs	r3, r7
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f001 f9e4 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800ab10:	0003      	movs	r3, r0
 800ab12:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ab14:	1d3c      	adds	r4, r7, #4
 800ab16:	1dbb      	adds	r3, r7, #6
 800ab18:	881a      	ldrh	r2, [r3, #0]
 800ab1a:	003b      	movs	r3, r7
 800ab1c:	0019      	movs	r1, r3
 800ab1e:	2069      	movs	r0, #105	@ 0x69
 800ab20:	f001 fa5e 	bl	800bfe0 <sensirion_i2c_write_data>
 800ab24:	0003      	movs	r3, r0
 800ab26:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ab28:	1d3b      	adds	r3, r7, #4
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	5e9b      	ldrsh	r3, [r3, r2]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <sen5x_start_fan_cleaning+0x46>
        return error;
 800ab32:	1d3b      	adds	r3, r7, #4
 800ab34:	2200      	movs	r2, #0
 800ab36:	5e9b      	ldrsh	r3, [r3, r2]
 800ab38:	e004      	b.n	800ab44 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800ab3a:	4b05      	ldr	r3, [pc, #20]	@ (800ab50 <sen5x_start_fan_cleaning+0x5c>)
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	f7ff fc5b 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	0018      	movs	r0, r3
 800ab46:	46bd      	mov	sp, r7
 800ab48:	b003      	add	sp, #12
 800ab4a:	bd90      	pop	{r4, r7, pc}
 800ab4c:	00005607 	.word	0x00005607
 800ab50:	00004e20 	.word	0x00004e20

0800ab54 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800ab54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	0004      	movs	r4, r0
 800ab5c:	0008      	movs	r0, r1
 800ab5e:	0011      	movs	r1, r2
 800ab60:	1dbb      	adds	r3, r7, #6
 800ab62:	1c22      	adds	r2, r4, #0
 800ab64:	801a      	strh	r2, [r3, #0]
 800ab66:	1d3b      	adds	r3, r7, #4
 800ab68:	1c02      	adds	r2, r0, #0
 800ab6a:	801a      	strh	r2, [r3, #0]
 800ab6c:	1cbb      	adds	r3, r7, #2
 800ab6e:	1c0a      	adds	r2, r1, #0
 800ab70:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800ab72:	2516      	movs	r5, #22
 800ab74:	197b      	adds	r3, r7, r5
 800ab76:	2200      	movs	r2, #0
 800ab78:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800ab7a:	197c      	adds	r4, r7, r5
 800ab7c:	4a25      	ldr	r2, [pc, #148]	@ (800ac14 <sen5x_set_temperature_offset_parameters+0xc0>)
 800ab7e:	197b      	adds	r3, r7, r5
 800ab80:	8819      	ldrh	r1, [r3, #0]
 800ab82:	2608      	movs	r6, #8
 800ab84:	19bb      	adds	r3, r7, r6
 800ab86:	0018      	movs	r0, r3
 800ab88:	f001 f9a6 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800ab8c:	0003      	movs	r3, r0
 800ab8e:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800ab90:	197c      	adds	r4, r7, r5
 800ab92:	1dbb      	adds	r3, r7, #6
 800ab94:	2200      	movs	r2, #0
 800ab96:	5e9a      	ldrsh	r2, [r3, r2]
 800ab98:	197b      	adds	r3, r7, r5
 800ab9a:	8819      	ldrh	r1, [r3, #0]
 800ab9c:	19bb      	adds	r3, r7, r6
 800ab9e:	0018      	movs	r0, r3
 800aba0:	f001 fa05 	bl	800bfae <sensirion_i2c_add_int16_t_to_buffer>
 800aba4:	0003      	movs	r3, r0
 800aba6:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800aba8:	197c      	adds	r4, r7, r5
 800abaa:	1d3b      	adds	r3, r7, #4
 800abac:	2200      	movs	r2, #0
 800abae:	5e9a      	ldrsh	r2, [r3, r2]
 800abb0:	197b      	adds	r3, r7, r5
 800abb2:	8819      	ldrh	r1, [r3, #0]
 800abb4:	19bb      	adds	r3, r7, r6
 800abb6:	0018      	movs	r0, r3
 800abb8:	f001 f9f9 	bl	800bfae <sensirion_i2c_add_int16_t_to_buffer>
 800abbc:	0003      	movs	r3, r0
 800abbe:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800abc0:	197c      	adds	r4, r7, r5
 800abc2:	1cbb      	adds	r3, r7, #2
 800abc4:	881a      	ldrh	r2, [r3, #0]
 800abc6:	197b      	adds	r3, r7, r5
 800abc8:	8819      	ldrh	r1, [r3, #0]
 800abca:	19bb      	adds	r3, r7, r6
 800abcc:	0018      	movs	r0, r3
 800abce:	f001 f9af 	bl	800bf30 <sensirion_i2c_add_uint16_t_to_buffer>
 800abd2:	0003      	movs	r3, r0
 800abd4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800abd6:	2214      	movs	r2, #20
 800abd8:	18bc      	adds	r4, r7, r2
 800abda:	197b      	adds	r3, r7, r5
 800abdc:	881a      	ldrh	r2, [r3, #0]
 800abde:	19bb      	adds	r3, r7, r6
 800abe0:	0019      	movs	r1, r3
 800abe2:	2069      	movs	r0, #105	@ 0x69
 800abe4:	f001 f9fc 	bl	800bfe0 <sensirion_i2c_write_data>
 800abe8:	0003      	movs	r3, r0
 800abea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800abec:	2214      	movs	r2, #20
 800abee:	18bb      	adds	r3, r7, r2
 800abf0:	2100      	movs	r1, #0
 800abf2:	5e5b      	ldrsh	r3, [r3, r1]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d003      	beq.n	800ac00 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800abf8:	18bb      	adds	r3, r7, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	5e9b      	ldrsh	r3, [r3, r2]
 800abfe:	e004      	b.n	800ac0a <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800ac00:	4b05      	ldr	r3, [pc, #20]	@ (800ac18 <sen5x_set_temperature_offset_parameters+0xc4>)
 800ac02:	0018      	movs	r0, r3
 800ac04:	f7ff fbf8 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	b007      	add	sp, #28
 800ac10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac12:	46c0      	nop			@ (mov r8, r8)
 800ac14:	000060b2 	.word	0x000060b2
 800ac18:	00004e20 	.word	0x00004e20

0800ac1c <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800ac1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac1e:	b091      	sub	sp, #68	@ 0x44
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	000a      	movs	r2, r1
 800ac26:	1cfb      	adds	r3, r7, #3
 800ac28:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ac2a:	253e      	movs	r5, #62	@ 0x3e
 800ac2c:	197b      	adds	r3, r7, r5
 800ac2e:	2200      	movs	r2, #0
 800ac30:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800ac32:	197c      	adds	r4, r7, r5
 800ac34:	4a22      	ldr	r2, [pc, #136]	@ (800acc0 <sen5x_get_product_name+0xa4>)
 800ac36:	197b      	adds	r3, r7, r5
 800ac38:	8819      	ldrh	r1, [r3, #0]
 800ac3a:	230c      	movs	r3, #12
 800ac3c:	18fb      	adds	r3, r7, r3
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f001 f94a 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800ac44:	0003      	movs	r3, r0
 800ac46:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ac48:	263c      	movs	r6, #60	@ 0x3c
 800ac4a:	19bc      	adds	r4, r7, r6
 800ac4c:	197b      	adds	r3, r7, r5
 800ac4e:	881a      	ldrh	r2, [r3, #0]
 800ac50:	230c      	movs	r3, #12
 800ac52:	18fb      	adds	r3, r7, r3
 800ac54:	0019      	movs	r1, r3
 800ac56:	2069      	movs	r0, #105	@ 0x69
 800ac58:	f001 f9c2 	bl	800bfe0 <sensirion_i2c_write_data>
 800ac5c:	0003      	movs	r3, r0
 800ac5e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ac60:	19bb      	adds	r3, r7, r6
 800ac62:	2200      	movs	r2, #0
 800ac64:	5e9b      	ldrsh	r3, [r3, r2]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <sen5x_get_product_name+0x56>
        return error;
 800ac6a:	19bb      	adds	r3, r7, r6
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	5e9b      	ldrsh	r3, [r3, r2]
 800ac70:	e021      	b.n	800acb6 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ac72:	4b14      	ldr	r3, [pc, #80]	@ (800acc4 <sen5x_get_product_name+0xa8>)
 800ac74:	0018      	movs	r0, r3
 800ac76:	f7ff fbbf 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ac7a:	253c      	movs	r5, #60	@ 0x3c
 800ac7c:	197c      	adds	r4, r7, r5
 800ac7e:	230c      	movs	r3, #12
 800ac80:	18fb      	adds	r3, r7, r3
 800ac82:	2220      	movs	r2, #32
 800ac84:	0019      	movs	r1, r3
 800ac86:	2069      	movs	r0, #105	@ 0x69
 800ac88:	f001 f9c2 	bl	800c010 <sensirion_i2c_read_data_inplace>
 800ac8c:	0003      	movs	r3, r0
 800ac8e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ac90:	197b      	adds	r3, r7, r5
 800ac92:	2200      	movs	r2, #0
 800ac94:	5e9b      	ldrsh	r3, [r3, r2]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <sen5x_get_product_name+0x86>
        return error;
 800ac9a:	197b      	adds	r3, r7, r5
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	5e9b      	ldrsh	r3, [r3, r2]
 800aca0:	e009      	b.n	800acb6 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800aca2:	1cfb      	adds	r3, r7, #3
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	230c      	movs	r3, #12
 800acac:	18fb      	adds	r3, r7, r3
 800acae:	0018      	movs	r0, r3
 800acb0:	f000 f988 	bl	800afc4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	0018      	movs	r0, r3
 800acb8:	46bd      	mov	sp, r7
 800acba:	b011      	add	sp, #68	@ 0x44
 800acbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbe:	46c0      	nop			@ (mov r8, r8)
 800acc0:	0000d014 	.word	0x0000d014
 800acc4:	0000c350 	.word	0x0000c350

0800acc8 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acca:	b091      	sub	sp, #68	@ 0x44
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	000a      	movs	r2, r1
 800acd2:	1cfb      	adds	r3, r7, #3
 800acd4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800acd6:	253e      	movs	r5, #62	@ 0x3e
 800acd8:	197b      	adds	r3, r7, r5
 800acda:	2200      	movs	r2, #0
 800acdc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800acde:	197c      	adds	r4, r7, r5
 800ace0:	4a22      	ldr	r2, [pc, #136]	@ (800ad6c <sen5x_get_serial_number+0xa4>)
 800ace2:	197b      	adds	r3, r7, r5
 800ace4:	8819      	ldrh	r1, [r3, #0]
 800ace6:	230c      	movs	r3, #12
 800ace8:	18fb      	adds	r3, r7, r3
 800acea:	0018      	movs	r0, r3
 800acec:	f001 f8f4 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800acf0:	0003      	movs	r3, r0
 800acf2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800acf4:	263c      	movs	r6, #60	@ 0x3c
 800acf6:	19bc      	adds	r4, r7, r6
 800acf8:	197b      	adds	r3, r7, r5
 800acfa:	881a      	ldrh	r2, [r3, #0]
 800acfc:	230c      	movs	r3, #12
 800acfe:	18fb      	adds	r3, r7, r3
 800ad00:	0019      	movs	r1, r3
 800ad02:	2069      	movs	r0, #105	@ 0x69
 800ad04:	f001 f96c 	bl	800bfe0 <sensirion_i2c_write_data>
 800ad08:	0003      	movs	r3, r0
 800ad0a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ad0c:	19bb      	adds	r3, r7, r6
 800ad0e:	2200      	movs	r2, #0
 800ad10:	5e9b      	ldrsh	r3, [r3, r2]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <sen5x_get_serial_number+0x56>
        return error;
 800ad16:	19bb      	adds	r3, r7, r6
 800ad18:	2200      	movs	r2, #0
 800ad1a:	5e9b      	ldrsh	r3, [r3, r2]
 800ad1c:	e021      	b.n	800ad62 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ad1e:	4b14      	ldr	r3, [pc, #80]	@ (800ad70 <sen5x_get_serial_number+0xa8>)
 800ad20:	0018      	movs	r0, r3
 800ad22:	f7ff fb69 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ad26:	253c      	movs	r5, #60	@ 0x3c
 800ad28:	197c      	adds	r4, r7, r5
 800ad2a:	230c      	movs	r3, #12
 800ad2c:	18fb      	adds	r3, r7, r3
 800ad2e:	2220      	movs	r2, #32
 800ad30:	0019      	movs	r1, r3
 800ad32:	2069      	movs	r0, #105	@ 0x69
 800ad34:	f001 f96c 	bl	800c010 <sensirion_i2c_read_data_inplace>
 800ad38:	0003      	movs	r3, r0
 800ad3a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ad3c:	197b      	adds	r3, r7, r5
 800ad3e:	2200      	movs	r2, #0
 800ad40:	5e9b      	ldrsh	r3, [r3, r2]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d003      	beq.n	800ad4e <sen5x_get_serial_number+0x86>
        return error;
 800ad46:	197b      	adds	r3, r7, r5
 800ad48:	2200      	movs	r2, #0
 800ad4a:	5e9b      	ldrsh	r3, [r3, r2]
 800ad4c:	e009      	b.n	800ad62 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800ad4e:	1cfb      	adds	r3, r7, #3
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	230c      	movs	r3, #12
 800ad58:	18fb      	adds	r3, r7, r3
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f000 f932 	bl	800afc4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	0018      	movs	r0, r3
 800ad64:	46bd      	mov	sp, r7
 800ad66:	b011      	add	sp, #68	@ 0x44
 800ad68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad6a:	46c0      	nop			@ (mov r8, r8)
 800ad6c:	0000d033 	.word	0x0000d033
 800ad70:	0000c350 	.word	0x0000c350

0800ad74 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800ad74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad76:	b089      	sub	sp, #36	@ 0x24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800ad82:	251e      	movs	r5, #30
 800ad84:	197b      	adds	r3, r7, r5
 800ad86:	2200      	movs	r2, #0
 800ad88:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800ad8a:	197c      	adds	r4, r7, r5
 800ad8c:	23d1      	movs	r3, #209	@ 0xd1
 800ad8e:	021a      	lsls	r2, r3, #8
 800ad90:	197b      	adds	r3, r7, r5
 800ad92:	8819      	ldrh	r1, [r3, #0]
 800ad94:	2310      	movs	r3, #16
 800ad96:	18fb      	adds	r3, r7, r3
 800ad98:	0018      	movs	r0, r3
 800ad9a:	f001 f89d 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800ad9e:	0003      	movs	r3, r0
 800ada0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ada2:	261c      	movs	r6, #28
 800ada4:	19bc      	adds	r4, r7, r6
 800ada6:	197b      	adds	r3, r7, r5
 800ada8:	881a      	ldrh	r2, [r3, #0]
 800adaa:	2310      	movs	r3, #16
 800adac:	18fb      	adds	r3, r7, r3
 800adae:	0019      	movs	r1, r3
 800adb0:	2069      	movs	r0, #105	@ 0x69
 800adb2:	f001 f915 	bl	800bfe0 <sensirion_i2c_write_data>
 800adb6:	0003      	movs	r3, r0
 800adb8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800adba:	19bb      	adds	r3, r7, r6
 800adbc:	2200      	movs	r2, #0
 800adbe:	5e9b      	ldrsh	r3, [r3, r2]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <sen5x_get_version+0x58>
        return error;
 800adc4:	19bb      	adds	r3, r7, r6
 800adc6:	2200      	movs	r2, #0
 800adc8:	5e9b      	ldrsh	r3, [r3, r2]
 800adca:	e038      	b.n	800ae3e <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800adcc:	4b1e      	ldr	r3, [pc, #120]	@ (800ae48 <sen5x_get_version+0xd4>)
 800adce:	0018      	movs	r0, r3
 800add0:	f7ff fb12 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800add4:	251c      	movs	r5, #28
 800add6:	197c      	adds	r4, r7, r5
 800add8:	2310      	movs	r3, #16
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	2208      	movs	r2, #8
 800adde:	0019      	movs	r1, r3
 800ade0:	2069      	movs	r0, #105	@ 0x69
 800ade2:	f001 f915 	bl	800c010 <sensirion_i2c_read_data_inplace>
 800ade6:	0003      	movs	r3, r0
 800ade8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800adea:	197b      	adds	r3, r7, r5
 800adec:	2200      	movs	r2, #0
 800adee:	5e9b      	ldrsh	r3, [r3, r2]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <sen5x_get_version+0x88>
        return error;
 800adf4:	197b      	adds	r3, r7, r5
 800adf6:	2200      	movs	r2, #0
 800adf8:	5e9b      	ldrsh	r3, [r3, r2]
 800adfa:	e020      	b.n	800ae3e <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800adfc:	2110      	movs	r1, #16
 800adfe:	187b      	adds	r3, r7, r1
 800ae00:	781a      	ldrb	r2, [r3, #0]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800ae06:	187b      	adds	r3, r7, r1
 800ae08:	785a      	ldrb	r2, [r3, #1]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800ae0e:	187b      	adds	r3, r7, r1
 800ae10:	789b      	ldrb	r3, [r3, #2]
 800ae12:	1e5a      	subs	r2, r3, #1
 800ae14:	4193      	sbcs	r3, r2
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800ae1c:	187b      	adds	r3, r7, r1
 800ae1e:	78da      	ldrb	r2, [r3, #3]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800ae24:	187b      	adds	r3, r7, r1
 800ae26:	791a      	ldrb	r2, [r3, #4]
 800ae28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2a:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800ae2c:	187b      	adds	r3, r7, r1
 800ae2e:	795a      	ldrb	r2, [r3, #5]
 800ae30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae32:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800ae34:	187b      	adds	r3, r7, r1
 800ae36:	799a      	ldrb	r2, [r3, #6]
 800ae38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae3a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	0018      	movs	r0, r3
 800ae40:	46bd      	mov	sp, r7
 800ae42:	b009      	add	sp, #36	@ 0x24
 800ae44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae46:	46c0      	nop			@ (mov r8, r8)
 800ae48:	00004e20 	.word	0x00004e20

0800ae4c <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800ae4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800ae54:	2516      	movs	r5, #22
 800ae56:	197b      	adds	r3, r7, r5
 800ae58:	2200      	movs	r2, #0
 800ae5a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800ae5c:	197c      	adds	r4, r7, r5
 800ae5e:	4a22      	ldr	r2, [pc, #136]	@ (800aee8 <sen5x_read_device_status+0x9c>)
 800ae60:	197b      	adds	r3, r7, r5
 800ae62:	8819      	ldrh	r1, [r3, #0]
 800ae64:	230c      	movs	r3, #12
 800ae66:	18fb      	adds	r3, r7, r3
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f001 f835 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800ae6e:	0003      	movs	r3, r0
 800ae70:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ae72:	2614      	movs	r6, #20
 800ae74:	19bc      	adds	r4, r7, r6
 800ae76:	197b      	adds	r3, r7, r5
 800ae78:	881a      	ldrh	r2, [r3, #0]
 800ae7a:	230c      	movs	r3, #12
 800ae7c:	18fb      	adds	r3, r7, r3
 800ae7e:	0019      	movs	r1, r3
 800ae80:	2069      	movs	r0, #105	@ 0x69
 800ae82:	f001 f8ad 	bl	800bfe0 <sensirion_i2c_write_data>
 800ae86:	0003      	movs	r3, r0
 800ae88:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ae8a:	19bb      	adds	r3, r7, r6
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	5e9b      	ldrsh	r3, [r3, r2]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <sen5x_read_device_status+0x50>
        return error;
 800ae94:	19bb      	adds	r3, r7, r6
 800ae96:	2200      	movs	r2, #0
 800ae98:	5e9b      	ldrsh	r3, [r3, r2]
 800ae9a:	e020      	b.n	800aede <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ae9c:	4b13      	ldr	r3, [pc, #76]	@ (800aeec <sen5x_read_device_status+0xa0>)
 800ae9e:	0018      	movs	r0, r3
 800aea0:	f7ff faaa 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800aea4:	2514      	movs	r5, #20
 800aea6:	197c      	adds	r4, r7, r5
 800aea8:	230c      	movs	r3, #12
 800aeaa:	18fb      	adds	r3, r7, r3
 800aeac:	2204      	movs	r2, #4
 800aeae:	0019      	movs	r1, r3
 800aeb0:	2069      	movs	r0, #105	@ 0x69
 800aeb2:	f001 f8ad 	bl	800c010 <sensirion_i2c_read_data_inplace>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800aeba:	197b      	adds	r3, r7, r5
 800aebc:	2200      	movs	r2, #0
 800aebe:	5e9b      	ldrsh	r3, [r3, r2]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d003      	beq.n	800aecc <sen5x_read_device_status+0x80>
        return error;
 800aec4:	197b      	adds	r3, r7, r5
 800aec6:	2200      	movs	r2, #0
 800aec8:	5e9b      	ldrsh	r3, [r3, r2]
 800aeca:	e008      	b.n	800aede <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800aecc:	230c      	movs	r3, #12
 800aece:	18fb      	adds	r3, r7, r3
 800aed0:	0018      	movs	r0, r3
 800aed2:	f000 f850 	bl	800af76 <sensirion_common_bytes_to_uint32_t>
 800aed6:	0002      	movs	r2, r0
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	0018      	movs	r0, r3
 800aee0:	46bd      	mov	sp, r7
 800aee2:	b007      	add	sp, #28
 800aee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee6:	46c0      	nop			@ (mov r8, r8)
 800aee8:	0000d206 	.word	0x0000d206
 800aeec:	00004e20 	.word	0x00004e20

0800aef0 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800aef0:	b590      	push	{r4, r7, lr}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800aef6:	1dbb      	adds	r3, r7, #6
 800aef8:	2200      	movs	r2, #0
 800aefa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800aefc:	1dbc      	adds	r4, r7, #6
 800aefe:	4a12      	ldr	r2, [pc, #72]	@ (800af48 <sen5x_device_reset+0x58>)
 800af00:	1dbb      	adds	r3, r7, #6
 800af02:	8819      	ldrh	r1, [r3, #0]
 800af04:	003b      	movs	r3, r7
 800af06:	0018      	movs	r0, r3
 800af08:	f000 ffe6 	bl	800bed8 <sensirion_i2c_add_command_to_buffer>
 800af0c:	0003      	movs	r3, r0
 800af0e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800af10:	1d3c      	adds	r4, r7, #4
 800af12:	1dbb      	adds	r3, r7, #6
 800af14:	881a      	ldrh	r2, [r3, #0]
 800af16:	003b      	movs	r3, r7
 800af18:	0019      	movs	r1, r3
 800af1a:	2069      	movs	r0, #105	@ 0x69
 800af1c:	f001 f860 	bl	800bfe0 <sensirion_i2c_write_data>
 800af20:	0003      	movs	r3, r0
 800af22:	8023      	strh	r3, [r4, #0]
    if (error) {
 800af24:	1d3b      	adds	r3, r7, #4
 800af26:	2200      	movs	r2, #0
 800af28:	5e9b      	ldrsh	r3, [r3, r2]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <sen5x_device_reset+0x46>
        return error;
 800af2e:	1d3b      	adds	r3, r7, #4
 800af30:	2200      	movs	r2, #0
 800af32:	5e9b      	ldrsh	r3, [r3, r2]
 800af34:	e004      	b.n	800af40 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800af36:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <sen5x_device_reset+0x5c>)
 800af38:	0018      	movs	r0, r3
 800af3a:	f7ff fa5d 	bl	800a3f8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	0018      	movs	r0, r3
 800af42:	46bd      	mov	sp, r7
 800af44:	b003      	add	sp, #12
 800af46:	bd90      	pop	{r4, r7, pc}
 800af48:	0000d304 	.word	0x0000d304
 800af4c:	00030d40 	.word	0x00030d40

0800af50 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	b21a      	sxth	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3301      	adds	r3, #1
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	b21b      	sxth	r3, r3
 800af68:	4313      	orrs	r3, r2
 800af6a:	b21b      	sxth	r3, r3
 800af6c:	b29b      	uxth	r3, r3
}
 800af6e:	0018      	movs	r0, r3
 800af70:	46bd      	mov	sp, r7
 800af72:	b002      	add	sp, #8
 800af74:	bd80      	pop	{r7, pc}

0800af76 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800af76:	b580      	push	{r7, lr}
 800af78:	b082      	sub	sp, #8
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	061a      	lsls	r2, r3, #24
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3301      	adds	r3, #1
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	041b      	lsls	r3, r3, #16
 800af8c:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3302      	adds	r3, #2
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800af96:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	3203      	adds	r2, #3
 800af9c:	7812      	ldrb	r2, [r2, #0]
 800af9e:	4313      	orrs	r3, r2
}
 800afa0:	0018      	movs	r0, r3
 800afa2:	46bd      	mov	sp, r7
 800afa4:	b002      	add	sp, #8
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	0018      	movs	r0, r3
 800afb4:	f7ff ffcc 	bl	800af50 <sensirion_common_bytes_to_uint16_t>
 800afb8:	0003      	movs	r3, r0
 800afba:	b21b      	sxth	r3, r3
}
 800afbc:	0018      	movs	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b002      	add	sp, #8
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	1dbb      	adds	r3, r7, #6
 800afd0:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800afd2:	2316      	movs	r3, #22
 800afd4:	18fb      	adds	r3, r7, r3
 800afd6:	2200      	movs	r2, #0
 800afd8:	801a      	strh	r2, [r3, #0]
 800afda:	e00f      	b.n	800affc <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800afdc:	2016      	movs	r0, #22
 800afde:	183b      	adds	r3, r7, r0
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	18d2      	adds	r2, r2, r3
 800afe6:	183b      	adds	r3, r7, r0
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	18cb      	adds	r3, r1, r3
 800afee:	7812      	ldrb	r2, [r2, #0]
 800aff0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800aff2:	183b      	adds	r3, r7, r0
 800aff4:	881a      	ldrh	r2, [r3, #0]
 800aff6:	183b      	adds	r3, r7, r0
 800aff8:	3201      	adds	r2, #1
 800affa:	801a      	strh	r2, [r3, #0]
 800affc:	2316      	movs	r3, #22
 800affe:	18fa      	adds	r2, r7, r3
 800b000:	1dbb      	adds	r3, r7, #6
 800b002:	8812      	ldrh	r2, [r2, #0]
 800b004:	881b      	ldrh	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d3e8      	bcc.n	800afdc <sensirion_common_copy_bytes+0x18>
    }
}
 800b00a:	46c0      	nop			@ (mov r8, r8)
 800b00c:	46c0      	nop			@ (mov r8, r8)
 800b00e:	46bd      	mov	sp, r7
 800b010:	b006      	add	sp, #24
 800b012:	bd80      	pop	{r7, pc}

0800b014 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d113      	bne.n	800b05a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	22fe      	movs	r2, #254	@ 0xfe
 800b036:	0592      	lsls	r2, r2, #22
 800b038:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	4a1a      	ldr	r2, [pc, #104]	@ (800b0a8 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800b03e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4a1a      	ldr	r2, [pc, #104]	@ (800b0ac <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800b044:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4a19      	ldr	r2, [pc, #100]	@ (800b0b0 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800b04a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	4a19      	ldr	r2, [pc, #100]	@ (800b0b4 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800b050:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	4a18      	ldr	r2, [pc, #96]	@ (800b0b8 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800b056:	61da      	str	r2, [r3, #28]
 800b058:	e011      	b.n	800b07e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	4a17      	ldr	r2, [pc, #92]	@ (800b0bc <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800b05e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4a17      	ldr	r2, [pc, #92]	@ (800b0c0 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800b064:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	4a16      	ldr	r2, [pc, #88]	@ (800b0c4 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800b06a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4a16      	ldr	r2, [pc, #88]	@ (800b0c8 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800b070:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	4a15      	ldr	r2, [pc, #84]	@ (800b0cc <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800b076:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	4a15      	ldr	r2, [pc, #84]	@ (800b0d0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800b07c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4a14      	ldr	r2, [pc, #80]	@ (800b0d4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800b082:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	4a14      	ldr	r2, [pc, #80]	@ (800b0d8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800b088:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	4a12      	ldr	r2, [pc, #72]	@ (800b0d8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800b08e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4a12      	ldr	r2, [pc, #72]	@ (800b0dc <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800b094:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	0018      	movs	r0, r3
 800b09a:	f000 f833 	bl	800b104 <GasIndexAlgorithm_reset>
}
 800b09e:	46c0      	nop			@ (mov r8, r8)
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	b004      	add	sp, #16
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	46c0      	nop			@ (mov r8, r8)
 800b0a8:	00002710 	.word	0x00002710
 800b0ac:	44340000 	.word	0x44340000
 800b0b0:	46859800 	.word	0x46859800
 800b0b4:	46a05000 	.word	0x46a05000
 800b0b8:	41f00000 	.word	0x41f00000
 800b0bc:	42c80000 	.word	0x42c80000
 800b0c0:	00004e20 	.word	0x00004e20
 800b0c4:	43340000 	.word	0x43340000
 800b0c8:	4528c000 	.word	0x4528c000
 800b0cc:	45a32000 	.word	0x45a32000
 800b0d0:	43aa0000 	.word	0x43aa0000
 800b0d4:	43660000 	.word	0x43660000
 800b0d8:	41400000 	.word	0x41400000
 800b0dc:	42480000 	.word	0x42480000

0800b0e0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800b0ea:	4a05      	ldr	r2, [pc, #20]	@ (800b100 <GasIndexAlgorithm_init+0x20>)
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	f7ff ff8f 	bl	800b014 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800b0f6:	46c0      	nop			@ (mov r8, r8)
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	b002      	add	sp, #8
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	46c0      	nop			@ (mov r8, r8)
 800b100:	44610000 	.word	0x44610000

0800b104 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	0018      	movs	r0, r3
 800b122:	f000 f805 	bl	800b130 <GasIndexAlgorithm__init_instances>
}
 800b126:	46c0      	nop			@ (mov r8, r8)
 800b128:	46bd      	mov	sp, r7
 800b12a:	b002      	add	sp, #8
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800b130:	b590      	push	{r4, r7, lr}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	0018      	movs	r0, r3
 800b13c:	f000 f8e8 	bl	800b310 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	0018      	movs	r0, r3
 800b144:	f000 f9a6 	bl	800b494 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800b148:	1c04      	adds	r4, r0, #0
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	0018      	movs	r0, r3
 800b14e:	f000 f9ab 	bl	800b4a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800b152:	1c02      	adds	r2, r0, #0
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	1c21      	adds	r1, r4, #0
 800b158:	0018      	movs	r0, r3
 800b15a:	f000 fc3b 	bl	800b9d4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d107      	bne.n	800b176 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800b166:	23fe      	movs	r3, #254	@ 0xfe
 800b168:	059b      	lsls	r3, r3, #22
 800b16a:	4a0a      	ldr	r2, [pc, #40]	@ (800b194 <GasIndexAlgorithm__init_instances+0x64>)
 800b16c:	490a      	ldr	r1, [pc, #40]	@ (800b198 <GasIndexAlgorithm__init_instances+0x68>)
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fc86 	bl	800ba80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800b174:	e005      	b.n	800b182 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800b176:	4b09      	ldr	r3, [pc, #36]	@ (800b19c <GasIndexAlgorithm__init_instances+0x6c>)
 800b178:	4a09      	ldr	r2, [pc, #36]	@ (800b1a0 <GasIndexAlgorithm__init_instances+0x70>)
 800b17a:	490a      	ldr	r1, [pc, #40]	@ (800b1a4 <GasIndexAlgorithm__init_instances+0x74>)
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fc7f 	bl	800ba80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	0018      	movs	r0, r3
 800b186:	f000 fd35 	bl	800bbf4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800b18a:	46c0      	nop			@ (mov r8, r8)
 800b18c:	46bd      	mov	sp, r7
 800b18e:	b003      	add	sp, #12
 800b190:	bd90      	pop	{r4, r7, pc}
 800b192:	46c0      	nop			@ (mov r8, r8)
 800b194:	bc257a78 	.word	0xbc257a78
 800b198:	44198000 	.word	0x44198000
 800b19c:	42c80000 	.word	0x42c80000
 800b1a0:	bbd4fdf4 	.word	0xbbd4fdf4
 800b1a4:	43550000 	.word	0x43550000

0800b1a8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800b1a8:	b590      	push	{r4, r7, lr}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1b8:	4952      	ldr	r1, [pc, #328]	@ (800b304 <GasIndexAlgorithm_process+0x15c>)
 800b1ba:	1c18      	adds	r0, r3, #0
 800b1bc:	f7f5 f9c2 	bl	8000544 <__aeabi_fcmple>
 800b1c0:	1e03      	subs	r3, r0, #0
 800b1c2:	d00c      	beq.n	800b1de <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	1c19      	adds	r1, r3, #0
 800b1ce:	1c10      	adds	r0, r2, #0
 800b1d0:	f7f5 fb76 	bl	80008c0 <__aeabi_fadd>
 800b1d4:	1c03      	adds	r3, r0, #0
 800b1d6:	1c1a      	adds	r2, r3, #0
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1dc:	e080      	b.n	800b2e0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	dd25      	ble.n	800b230 <GasIndexAlgorithm_process+0x88>
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	4a48      	ldr	r2, [pc, #288]	@ (800b308 <GasIndexAlgorithm_process+0x160>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	dc21      	bgt.n	800b230 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	dc04      	bgt.n	800b200 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	60bb      	str	r3, [r7, #8]
 800b1fe:	e00d      	b.n	800b21c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	4a41      	ldr	r2, [pc, #260]	@ (800b30c <GasIndexAlgorithm_process+0x164>)
 800b206:	4694      	mov	ip, r2
 800b208:	4463      	add	r3, ip
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	dd05      	ble.n	800b21c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	4a3d      	ldr	r2, [pc, #244]	@ (800b30c <GasIndexAlgorithm_process+0x164>)
 800b216:	4694      	mov	ip, r2
 800b218:	4463      	add	r3, ip
 800b21a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	0018      	movs	r0, r3
 800b226:	f7f6 f9d3 	bl	80015d0 <__aeabi_i2f>
 800b22a:	1c02      	adds	r2, r0, #0
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d005      	beq.n	800b244 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	0018      	movs	r0, r3
 800b23c:	f000 f945 	bl	800b4ca <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800b240:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800b242:	d014      	beq.n	800b26e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	1c11      	adds	r1, r2, #0
 800b24c:	0018      	movs	r0, r3
 800b24e:	f000 fbd1 	bl	800b9f4 <GasIndexAlgorithm__mox_model__process>
 800b252:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	1c11      	adds	r1, r2, #0
 800b260:	0018      	movs	r0, r3
 800b262:	f000 fc25 	bl	800bab0 <GasIndexAlgorithm__sigmoid_scaled__process>
 800b266:	1c02      	adds	r2, r0, #0
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b26c:	e003      	b.n	800b276 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	689a      	ldr	r2, [r3, #8]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	1c11      	adds	r1, r2, #0
 800b27e:	0018      	movs	r0, r3
 800b280:	f000 fcec 	bl	800bc5c <GasIndexAlgorithm__adaptive_lowpass__process>
 800b284:	1c02      	adds	r2, r0, #0
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28e:	21fc      	movs	r1, #252	@ 0xfc
 800b290:	0589      	lsls	r1, r1, #22
 800b292:	1c18      	adds	r0, r3, #0
 800b294:	f7f5 f94c 	bl	8000530 <__aeabi_fcmplt>
 800b298:	1e03      	subs	r3, r0, #0
 800b29a:	d003      	beq.n	800b2a4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	22fc      	movs	r2, #252	@ 0xfc
 800b2a0:	0592      	lsls	r2, r2, #22
 800b2a2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	1c18      	adds	r0, r3, #0
 800b2ac:	f7f5 f954 	bl	8000558 <__aeabi_fcmpgt>
 800b2b0:	1e03      	subs	r3, r0, #0
 800b2b2:	d015      	beq.n	800b2e0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	1c11      	adds	r1, r2, #0
 800b2bc:	0018      	movs	r0, r3
 800b2be:	f000 fa4f 	bl	800b760 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	0018      	movs	r0, r3
 800b2c6:	f000 f8e5 	bl	800b494 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800b2ca:	1c04      	adds	r4, r0, #0
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	0018      	movs	r0, r3
 800b2d0:	f000 f8ea 	bl	800b4a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800b2d4:	1c02      	adds	r2, r0, #0
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	1c21      	adds	r1, r4, #0
 800b2da:	0018      	movs	r0, r3
 800b2dc:	f000 fb7a 	bl	800b9d4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e4:	21fc      	movs	r1, #252	@ 0xfc
 800b2e6:	0589      	lsls	r1, r1, #22
 800b2e8:	1c18      	adds	r0, r3, #0
 800b2ea:	f7f5 fae9 	bl	80008c0 <__aeabi_fadd>
 800b2ee:	1c03      	adds	r3, r0, #0
 800b2f0:	1c18      	adds	r0, r3, #0
 800b2f2:	f7f6 f94d 	bl	8001590 <__aeabi_f2iz>
 800b2f6:	0002      	movs	r2, r0
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	601a      	str	r2, [r3, #0]
    return;
 800b2fc:	46c0      	nop			@ (mov r8, r8)
}
 800b2fe:	46bd      	mov	sp, r7
 800b300:	b005      	add	sp, #20
 800b302:	bd90      	pop	{r4, r7, pc}
 800b304:	42340000 	.word	0x42340000
 800b308:	0000fde7 	.word	0x0000fde7
 800b30c:	00007fff 	.word	0x00007fff

0800b310 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b310:	b5b0      	push	{r4, r5, r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	223c      	movs	r2, #60	@ 0x3c
 800b31c:	2100      	movs	r1, #0
 800b31e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	4952      	ldr	r1, [pc, #328]	@ (800b484 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800b33a:	1c18      	adds	r0, r3, #0
 800b33c:	f7f5 fc4a 	bl	8000bd4 <__aeabi_fdiv>
 800b340:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800b342:	2188      	movs	r1, #136	@ 0x88
 800b344:	05c9      	lsls	r1, r1, #23
 800b346:	1c18      	adds	r0, r3, #0
 800b348:	f7f5 fe2a 	bl	8000fa0 <__aeabi_fmul>
 800b34c:	1c03      	adds	r3, r0, #0
 800b34e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	494a      	ldr	r1, [pc, #296]	@ (800b484 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800b35a:	1c18      	adds	r0, r3, #0
 800b35c:	f7f5 fc3a 	bl	8000bd4 <__aeabi_fdiv>
 800b360:	1c03      	adds	r3, r0, #0
 800b362:	1c19      	adds	r1, r3, #0
 800b364:	1c20      	adds	r0, r4, #0
 800b366:	f7f5 faab 	bl	80008c0 <__aeabi_fadd>
 800b36a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800b36c:	1c19      	adds	r1, r3, #0
 800b36e:	1c28      	adds	r0, r5, #0
 800b370:	f7f5 fc30 	bl	8000bd4 <__aeabi_fdiv>
 800b374:	1c03      	adds	r3, r0, #0
 800b376:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	4940      	ldr	r1, [pc, #256]	@ (800b484 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800b382:	1c18      	adds	r0, r3, #0
 800b384:	f7f5 fc26 	bl	8000bd4 <__aeabi_fdiv>
 800b388:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b38a:	2185      	movs	r1, #133	@ 0x85
 800b38c:	05c9      	lsls	r1, r1, #23
 800b38e:	1c18      	adds	r0, r3, #0
 800b390:	f7f5 fe06 	bl	8000fa0 <__aeabi_fmul>
 800b394:	1c03      	adds	r3, r0, #0
 800b396:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	4938      	ldr	r1, [pc, #224]	@ (800b484 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800b3a2:	1c18      	adds	r0, r3, #0
 800b3a4:	f7f5 fc16 	bl	8000bd4 <__aeabi_fdiv>
 800b3a8:	1c03      	adds	r3, r0, #0
 800b3aa:	1c19      	adds	r1, r3, #0
 800b3ac:	1c20      	adds	r0, r4, #0
 800b3ae:	f7f5 fa87 	bl	80008c0 <__aeabi_fadd>
 800b3b2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800b3b4:	1c19      	adds	r1, r3, #0
 800b3b6:	1c28      	adds	r0, r5, #0
 800b3b8:	f7f5 fc0c 	bl	8000bd4 <__aeabi_fdiv>
 800b3bc:	1c03      	adds	r3, r0, #0
 800b3be:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d118      	bne.n	800b3fe <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800b3d0:	2188      	movs	r1, #136	@ 0x88
 800b3d2:	05c9      	lsls	r1, r1, #23
 800b3d4:	1c18      	adds	r0, r3, #0
 800b3d6:	f7f5 fde3 	bl	8000fa0 <__aeabi_fmul>
 800b3da:	1c03      	adds	r3, r0, #0
 800b3dc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800b3e2:	4929      	ldr	r1, [pc, #164]	@ (800b488 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800b3e4:	1c18      	adds	r0, r3, #0
 800b3e6:	f7f5 fa6b 	bl	80008c0 <__aeabi_fadd>
 800b3ea:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800b3ec:	1c19      	adds	r1, r3, #0
 800b3ee:	1c20      	adds	r0, r4, #0
 800b3f0:	f7f5 fbf0 	bl	8000bd4 <__aeabi_fdiv>
 800b3f4:	1c03      	adds	r3, r0, #0
 800b3f6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	655a      	str	r2, [r3, #84]	@ 0x54
 800b3fc:	e017      	b.n	800b42e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800b402:	2188      	movs	r1, #136	@ 0x88
 800b404:	05c9      	lsls	r1, r1, #23
 800b406:	1c18      	adds	r0, r3, #0
 800b408:	f7f5 fdca 	bl	8000fa0 <__aeabi_fmul>
 800b40c:	1c03      	adds	r3, r0, #0
 800b40e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800b414:	491d      	ldr	r1, [pc, #116]	@ (800b48c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800b416:	1c18      	adds	r0, r3, #0
 800b418:	f7f5 fa52 	bl	80008c0 <__aeabi_fadd>
 800b41c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800b41e:	1c19      	adds	r1, r3, #0
 800b420:	1c20      	adds	r0, r4, #0
 800b422:	f7f5 fbd7 	bl	8000bd4 <__aeabi_fdiv>
 800b426:	1c03      	adds	r3, r0, #0
 800b428:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b432:	2185      	movs	r1, #133	@ 0x85
 800b434:	05c9      	lsls	r1, r1, #23
 800b436:	1c18      	adds	r0, r3, #0
 800b438:	f7f5 fdb2 	bl	8000fa0 <__aeabi_fmul>
 800b43c:	1c03      	adds	r3, r0, #0
 800b43e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	4912      	ldr	r1, [pc, #72]	@ (800b490 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800b446:	1c18      	adds	r0, r3, #0
 800b448:	f7f5 fa3a 	bl	80008c0 <__aeabi_fadd>
 800b44c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800b44e:	1c19      	adds	r1, r3, #0
 800b450:	1c20      	adds	r0, r4, #0
 800b452:	f7f5 fbbf 	bl	8000bd4 <__aeabi_fdiv>
 800b456:	1c03      	adds	r3, r0, #0
 800b458:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800b47c:	46c0      	nop			@ (mov r8, r8)
 800b47e:	46bd      	mov	sp, r7
 800b480:	b002      	add	sp, #8
 800b482:	bdb0      	pop	{r4, r5, r7, pc}
 800b484:	45610000 	.word	0x45610000
 800b488:	44960000 	.word	0x44960000
 800b48c:	41a00000 	.word	0x41a00000
 800b490:	451c4000 	.word	0x451c4000

0800b494 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800b4a0:	1c18      	adds	r0, r3, #0
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	b002      	add	sp, #8
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800b4b8:	1c19      	adds	r1, r3, #0
 800b4ba:	1c10      	adds	r0, r2, #0
 800b4bc:	f7f5 fa00 	bl	80008c0 <__aeabi_fadd>
 800b4c0:	1c03      	adds	r3, r0, #0
}
 800b4c2:	1c18      	adds	r0, r3, #0
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	b002      	add	sp, #8
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	223c      	movs	r2, #60	@ 0x3c
 800b4d6:	5c9b      	ldrb	r3, [r3, r2]
}
 800b4d8:	0018      	movs	r0, r3
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	b002      	add	sp, #8
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800b4e0:	b5b0      	push	{r4, r5, r7, lr}
 800b4e2:	b08c      	sub	sp, #48	@ 0x30
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800b4ec:	1c19      	adds	r1, r3, #0
 800b4ee:	4895      	ldr	r0, [pc, #596]	@ (800b744 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800b4f0:	f7f5 fe94 	bl	800121c <__aeabi_fsub>
 800b4f4:	1c03      	adds	r3, r0, #0
 800b4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4fc:	1c19      	adds	r1, r3, #0
 800b4fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b500:	f7f5 f82a 	bl	8000558 <__aeabi_fcmpgt>
 800b504:	1e03      	subs	r3, r0, #0
 800b506:	d00b      	beq.n	800b520 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800b510:	1c19      	adds	r1, r3, #0
 800b512:	1c10      	adds	r0, r2, #0
 800b514:	f7f5 f9d4 	bl	80008c0 <__aeabi_fadd>
 800b518:	1c03      	adds	r3, r0, #0
 800b51a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b524:	1c19      	adds	r1, r3, #0
 800b526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b528:	f7f5 f816 	bl	8000558 <__aeabi_fcmpgt>
 800b52c:	1e03      	subs	r3, r0, #0
 800b52e:	d00b      	beq.n	800b548 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800b538:	1c19      	adds	r1, r3, #0
 800b53a:	1c10      	adds	r0, r2, #0
 800b53c:	f7f5 f9c0 	bl	80008c0 <__aeabi_fadd>
 800b540:	1c03      	adds	r3, r0, #0
 800b542:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6959      	ldr	r1, [r3, #20]
 800b54c:	4a7e      	ldr	r2, [pc, #504]	@ (800b748 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	0018      	movs	r0, r3
 800b552:	f000 f9f1 	bl	800b938 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	1c11      	adds	r1, r2, #0
 800b55e:	0018      	movs	r0, r3
 800b560:	f000 f9fa 	bl	800b958 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b564:	1c03      	adds	r3, r0, #0
 800b566:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800b574:	1c19      	adds	r1, r3, #0
 800b576:	1c10      	adds	r0, r2, #0
 800b578:	f7f5 fe50 	bl	800121c <__aeabi_fsub>
 800b57c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800b57e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b580:	1c18      	adds	r0, r3, #0
 800b582:	f7f5 fd0d 	bl	8000fa0 <__aeabi_fmul>
 800b586:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800b588:	1c19      	adds	r1, r3, #0
 800b58a:	1c20      	adds	r0, r4, #0
 800b58c:	f7f5 f998 	bl	80008c0 <__aeabi_fadd>
 800b590:	1c03      	adds	r3, r0, #0
 800b592:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800b59c:	1c19      	adds	r1, r3, #0
 800b59e:	486b      	ldr	r0, [pc, #428]	@ (800b74c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800b5a0:	f7f5 fe3c 	bl	800121c <__aeabi_fsub>
 800b5a4:	1c03      	adds	r3, r0, #0
 800b5a6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	1c11      	adds	r1, r2, #0
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	f000 f9d1 	bl	800b958 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b5b6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800b5b8:	1c19      	adds	r1, r3, #0
 800b5ba:	1c28      	adds	r0, r5, #0
 800b5bc:	f7f5 fcf0 	bl	8000fa0 <__aeabi_fmul>
 800b5c0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800b5c2:	1c19      	adds	r1, r3, #0
 800b5c4:	1c20      	adds	r0, r4, #0
 800b5c6:	f7f5 f97b 	bl	80008c0 <__aeabi_fadd>
 800b5ca:	1c03      	adds	r3, r0, #0
 800b5cc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b5ce:	4a60      	ldr	r2, [pc, #384]	@ (800b750 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800b5d0:	6a39      	ldr	r1, [r7, #32]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0018      	movs	r0, r3
 800b5d6:	f000 f9af 	bl	800b938 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	1c11      	adds	r1, r2, #0
 800b5e2:	0018      	movs	r0, r3
 800b5e4:	f000 f9b8 	bl	800b958 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b5e8:	1c03      	adds	r3, r0, #0
 800b5ea:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800b5ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b5ee:	69f8      	ldr	r0, [r7, #28]
 800b5f0:	f7f5 fcd6 	bl	8000fa0 <__aeabi_fmul>
 800b5f4:	1c03      	adds	r3, r0, #0
 800b5f6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6999      	ldr	r1, [r3, #24]
 800b600:	4a51      	ldr	r2, [pc, #324]	@ (800b748 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	0018      	movs	r0, r3
 800b606:	f000 f997 	bl	800b938 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	1c11      	adds	r1, r2, #0
 800b612:	0018      	movs	r0, r3
 800b614:	f000 f9a0 	bl	800b958 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b618:	1c03      	adds	r3, r0, #0
 800b61a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800b628:	1c19      	adds	r1, r3, #0
 800b62a:	1c10      	adds	r0, r2, #0
 800b62c:	f7f5 fdf6 	bl	800121c <__aeabi_fsub>
 800b630:	1c03      	adds	r3, r0, #0
 800b632:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800b634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b636:	69b8      	ldr	r0, [r7, #24]
 800b638:	f7f5 fdf0 	bl	800121c <__aeabi_fsub>
 800b63c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800b63e:	1c19      	adds	r1, r3, #0
 800b640:	1c28      	adds	r0, r5, #0
 800b642:	f7f5 fcad 	bl	8000fa0 <__aeabi_fmul>
 800b646:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800b648:	1c19      	adds	r1, r3, #0
 800b64a:	1c20      	adds	r0, r4, #0
 800b64c:	f7f5 f938 	bl	80008c0 <__aeabi_fadd>
 800b650:	1c03      	adds	r3, r0, #0
 800b652:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800b65c:	1c19      	adds	r1, r3, #0
 800b65e:	483b      	ldr	r0, [pc, #236]	@ (800b74c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800b660:	f7f5 fddc 	bl	800121c <__aeabi_fsub>
 800b664:	1c03      	adds	r3, r0, #0
 800b666:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	1c11      	adds	r1, r2, #0
 800b670:	0018      	movs	r0, r3
 800b672:	f000 f971 	bl	800b958 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b676:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800b678:	1c19      	adds	r1, r3, #0
 800b67a:	1c28      	adds	r0, r5, #0
 800b67c:	f7f5 fc90 	bl	8000fa0 <__aeabi_fmul>
 800b680:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800b682:	1c19      	adds	r1, r3, #0
 800b684:	1c20      	adds	r0, r4, #0
 800b686:	f7f5 f91b 	bl	80008c0 <__aeabi_fadd>
 800b68a:	1c03      	adds	r3, r0, #0
 800b68c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b68e:	4a30      	ldr	r2, [pc, #192]	@ (800b750 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800b690:	6939      	ldr	r1, [r7, #16]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	0018      	movs	r0, r3
 800b696:	f000 f94f 	bl	800b938 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	1c11      	adds	r1, r2, #0
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f000 f958 	bl	800b958 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b6a8:	1c03      	adds	r3, r0, #0
 800b6aa:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800b6ac:	6979      	ldr	r1, [r7, #20]
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7f5 fc76 	bl	8000fa0 <__aeabi_fmul>
 800b6b4:	1c03      	adds	r3, r0, #0
 800b6b6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	4923      	ldr	r1, [pc, #140]	@ (800b754 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800b6c6:	1c18      	adds	r0, r3, #0
 800b6c8:	f7f5 fa84 	bl	8000bd4 <__aeabi_fdiv>
 800b6cc:	1c03      	adds	r3, r0, #0
 800b6ce:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800b6d0:	69f9      	ldr	r1, [r7, #28]
 800b6d2:	20fe      	movs	r0, #254	@ 0xfe
 800b6d4:	0580      	lsls	r0, r0, #22
 800b6d6:	f7f5 fda1 	bl	800121c <__aeabi_fsub>
 800b6da:	1c03      	adds	r3, r0, #0
 800b6dc:	491e      	ldr	r1, [pc, #120]	@ (800b758 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800b6de:	1c18      	adds	r0, r3, #0
 800b6e0:	f7f5 fc5e 	bl	8000fa0 <__aeabi_fmul>
 800b6e4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800b6e6:	491d      	ldr	r1, [pc, #116]	@ (800b75c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800b6e8:	1c18      	adds	r0, r3, #0
 800b6ea:	f7f5 fd97 	bl	800121c <__aeabi_fsub>
 800b6ee:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800b6f0:	1c19      	adds	r1, r3, #0
 800b6f2:	1c28      	adds	r0, r5, #0
 800b6f4:	f7f5 fc54 	bl	8000fa0 <__aeabi_fmul>
 800b6f8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b6fa:	1c19      	adds	r1, r3, #0
 800b6fc:	1c20      	adds	r0, r4, #0
 800b6fe:	f7f5 f8df 	bl	80008c0 <__aeabi_fadd>
 800b702:	1c03      	adds	r3, r0, #0
 800b704:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b70e:	2100      	movs	r1, #0
 800b710:	1c18      	adds	r0, r3, #0
 800b712:	f7f4 ff0d 	bl	8000530 <__aeabi_fcmplt>
 800b716:	1e03      	subs	r3, r0, #0
 800b718:	d002      	beq.n	800b720 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b728:	1c19      	adds	r1, r3, #0
 800b72a:	1c10      	adds	r0, r2, #0
 800b72c:	f7f4 ff14 	bl	8000558 <__aeabi_fcmpgt>
 800b730:	1e03      	subs	r3, r0, #0
 800b732:	d100      	bne.n	800b736 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800b734:	e002      	b.n	800b73c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b73c:	46c0      	nop			@ (mov r8, r8)
 800b73e:	46bd      	mov	sp, r7
 800b740:	b00c      	add	sp, #48	@ 0x30
 800b742:	bdb0      	pop	{r4, r5, r7, pc}
 800b744:	46fffe00 	.word	0x46fffe00
 800b748:	3c23d70a 	.word	0x3c23d70a
 800b74c:	43ff0000 	.word	0x43ff0000
 800b750:	3db851ec 	.word	0x3db851ec
 800b754:	42700000 	.word	0x42700000
 800b758:	3fa66666 	.word	0x3fa66666
 800b75c:	3e99999a 	.word	0x3e99999a

0800b760 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800b760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	223c      	movs	r2, #60	@ 0x3c
 800b76e:	5c9b      	ldrb	r3, [r3, r2]
 800b770:	2201      	movs	r2, #1
 800b772:	4053      	eors	r3, r2
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	223c      	movs	r2, #60	@ 0x3c
 800b77e:	2101      	movs	r1, #1
 800b780:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800b78e:	e0c8      	b.n	800b922 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b794:	4965      	ldr	r1, [pc, #404]	@ (800b92c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800b796:	1c18      	adds	r0, r3, #0
 800b798:	f7f4 fee8 	bl	800056c <__aeabi_fcmpge>
 800b79c:	1e03      	subs	r3, r0, #0
 800b79e:	d107      	bne.n	800b7b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b7a4:	4962      	ldr	r1, [pc, #392]	@ (800b930 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800b7a6:	1c18      	adds	r0, r3, #0
 800b7a8:	f7f4 fecc 	bl	8000544 <__aeabi_fcmple>
 800b7ac:	1e03      	subs	r3, r0, #0
 800b7ae:	d00e      	beq.n	800b7ce <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b7b8:	1c19      	adds	r1, r3, #0
 800b7ba:	1c10      	adds	r0, r2, #0
 800b7bc:	f7f5 f880 	bl	80008c0 <__aeabi_fadd>
 800b7c0:	1c03      	adds	r3, r0, #0
 800b7c2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7d2:	1c19      	adds	r1, r3, #0
 800b7d4:	6838      	ldr	r0, [r7, #0]
 800b7d6:	f7f5 fd21 	bl	800121c <__aeabi_fsub>
 800b7da:	1c03      	adds	r3, r0, #0
 800b7dc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f7ff fe7d 	bl	800b4e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ea:	1c19      	adds	r1, r3, #0
 800b7ec:	6838      	ldr	r0, [r7, #0]
 800b7ee:	f7f5 fd15 	bl	800121c <__aeabi_fsub>
 800b7f2:	1c03      	adds	r3, r0, #0
 800b7f4:	2185      	movs	r1, #133	@ 0x85
 800b7f6:	05c9      	lsls	r1, r1, #23
 800b7f8:	1c18      	adds	r0, r3, #0
 800b7fa:	f7f5 f9eb 	bl	8000bd4 <__aeabi_fdiv>
 800b7fe:	1c03      	adds	r3, r0, #0
 800b800:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800b802:	2100      	movs	r1, #0
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f7f4 fe93 	bl	8000530 <__aeabi_fcmplt>
 800b80a:	1e03      	subs	r3, r0, #0
 800b80c:	d008      	beq.n	800b820 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b812:	68f9      	ldr	r1, [r7, #12]
 800b814:	1c18      	adds	r0, r3, #0
 800b816:	f7f5 fd01 	bl	800121c <__aeabi_fsub>
 800b81a:	1c03      	adds	r3, r0, #0
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	e007      	b.n	800b830 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b824:	1c19      	adds	r1, r3, #0
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7f5 f84a 	bl	80008c0 <__aeabi_fadd>
 800b82c:	1c03      	adds	r3, r0, #0
 800b82e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800b830:	23fe      	movs	r3, #254	@ 0xfe
 800b832:	059b      	lsls	r3, r3, #22
 800b834:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800b836:	493f      	ldr	r1, [pc, #252]	@ (800b934 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b838:	6978      	ldr	r0, [r7, #20]
 800b83a:	f7f4 fe8d 	bl	8000558 <__aeabi_fcmpgt>
 800b83e:	1e03      	subs	r3, r0, #0
 800b840:	d010      	beq.n	800b864 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800b842:	493c      	ldr	r1, [pc, #240]	@ (800b934 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b844:	6978      	ldr	r0, [r7, #20]
 800b846:	f7f5 f9c5 	bl	8000bd4 <__aeabi_fdiv>
 800b84a:	1c03      	adds	r3, r0, #0
 800b84c:	1c1c      	adds	r4, r3, #0
 800b84e:	4939      	ldr	r1, [pc, #228]	@ (800b934 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b850:	6978      	ldr	r0, [r7, #20]
 800b852:	f7f5 f9bf 	bl	8000bd4 <__aeabi_fdiv>
 800b856:	1c03      	adds	r3, r0, #0
 800b858:	1c19      	adds	r1, r3, #0
 800b85a:	1c20      	adds	r0, r4, #0
 800b85c:	f7f5 fba0 	bl	8000fa0 <__aeabi_fmul>
 800b860:	1c03      	adds	r3, r0, #0
 800b862:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800b868:	1c19      	adds	r1, r3, #0
 800b86a:	2085      	movs	r0, #133	@ 0x85
 800b86c:	05c0      	lsls	r0, r0, #23
 800b86e:	f7f5 fcd5 	bl	800121c <__aeabi_fsub>
 800b872:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800b874:	6939      	ldr	r1, [r7, #16]
 800b876:	1c18      	adds	r0, r3, #0
 800b878:	f7f5 fb92 	bl	8000fa0 <__aeabi_fmul>
 800b87c:	1c03      	adds	r3, r0, #0
 800b87e:	1c18      	adds	r0, r3, #0
 800b880:	f018 f84e 	bl	8023920 <sqrtf>
 800b884:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b88e:	2185      	movs	r1, #133	@ 0x85
 800b890:	05c9      	lsls	r1, r1, #23
 800b892:	6938      	ldr	r0, [r7, #16]
 800b894:	f7f5 fb84 	bl	8000fa0 <__aeabi_fmul>
 800b898:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800b89a:	1c19      	adds	r1, r3, #0
 800b89c:	1c28      	adds	r0, r5, #0
 800b89e:	f7f5 f999 	bl	8000bd4 <__aeabi_fdiv>
 800b8a2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b8a4:	1c19      	adds	r1, r3, #0
 800b8a6:	1c20      	adds	r0, r4, #0
 800b8a8:	f7f5 fb7a 	bl	8000fa0 <__aeabi_fmul>
 800b8ac:	1c03      	adds	r3, r0, #0
 800b8ae:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8b4:	68f9      	ldr	r1, [r7, #12]
 800b8b6:	1c18      	adds	r0, r3, #0
 800b8b8:	f7f5 fb72 	bl	8000fa0 <__aeabi_fmul>
 800b8bc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800b8be:	6939      	ldr	r1, [r7, #16]
 800b8c0:	1c18      	adds	r0, r3, #0
 800b8c2:	f7f5 f987 	bl	8000bd4 <__aeabi_fdiv>
 800b8c6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800b8c8:	68f9      	ldr	r1, [r7, #12]
 800b8ca:	1c18      	adds	r0, r3, #0
 800b8cc:	f7f5 fb68 	bl	8000fa0 <__aeabi_fmul>
 800b8d0:	1c03      	adds	r3, r0, #0
             sqrtf(
 800b8d2:	1c19      	adds	r1, r3, #0
 800b8d4:	1c20      	adds	r0, r4, #0
 800b8d6:	f7f4 fff3 	bl	80008c0 <__aeabi_fadd>
 800b8da:	1c03      	adds	r3, r0, #0
 800b8dc:	1c18      	adds	r0, r3, #0
 800b8de:	f018 f81f 	bl	8023920 <sqrtf>
 800b8e2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b8e4:	1c19      	adds	r1, r3, #0
 800b8e6:	1c30      	adds	r0, r6, #0
 800b8e8:	f7f5 fb5a 	bl	8000fa0 <__aeabi_fmul>
 800b8ec:	1c03      	adds	r3, r0, #0
 800b8ee:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8fc:	68f9      	ldr	r1, [r7, #12]
 800b8fe:	1c18      	adds	r0, r3, #0
 800b900:	f7f5 fb4e 	bl	8000fa0 <__aeabi_fmul>
 800b904:	1c03      	adds	r3, r0, #0
 800b906:	2182      	movs	r1, #130	@ 0x82
 800b908:	05c9      	lsls	r1, r1, #23
 800b90a:	1c18      	adds	r0, r3, #0
 800b90c:	f7f5 f962 	bl	8000bd4 <__aeabi_fdiv>
 800b910:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800b912:	1c19      	adds	r1, r3, #0
 800b914:	1c20      	adds	r0, r4, #0
 800b916:	f7f4 ffd3 	bl	80008c0 <__aeabi_fadd>
 800b91a:	1c03      	adds	r3, r0, #0
 800b91c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b922:	46c0      	nop			@ (mov r8, r8)
 800b924:	46bd      	mov	sp, r7
 800b926:	b007      	add	sp, #28
 800b928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92a:	46c0      	nop			@ (mov r8, r8)
 800b92c:	42c80000 	.word	0x42c80000
 800b930:	c2c80000 	.word	0xc2c80000
 800b934:	44b40000 	.word	0x44b40000

0800b938 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b950:	46c0      	nop			@ (mov r8, r8)
 800b952:	46bd      	mov	sp, r7
 800b954:	b004      	add	sp, #16
 800b956:	bd80      	pop	{r7, pc}

0800b958 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800b958:	b590      	push	{r4, r7, lr}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b96a:	1c19      	adds	r1, r3, #0
 800b96c:	6838      	ldr	r0, [r7, #0]
 800b96e:	f7f5 fc55 	bl	800121c <__aeabi_fsub>
 800b972:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b974:	1c19      	adds	r1, r3, #0
 800b976:	1c20      	adds	r0, r4, #0
 800b978:	f7f5 fb12 	bl	8000fa0 <__aeabi_fmul>
 800b97c:	1c03      	adds	r3, r0, #0
 800b97e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800b980:	4912      	ldr	r1, [pc, #72]	@ (800b9cc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7f4 fdd4 	bl	8000530 <__aeabi_fcmplt>
 800b988:	1e03      	subs	r3, r0, #0
 800b98a:	d002      	beq.n	800b992 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800b98c:	23fe      	movs	r3, #254	@ 0xfe
 800b98e:	059b      	lsls	r3, r3, #22
 800b990:	e018      	b.n	800b9c4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800b992:	490f      	ldr	r1, [pc, #60]	@ (800b9d0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f7f4 fddf 	bl	8000558 <__aeabi_fcmpgt>
 800b99a:	1e03      	subs	r3, r0, #0
 800b99c:	d001      	beq.n	800b9a2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e010      	b.n	800b9c4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	1c18      	adds	r0, r3, #0
 800b9a6:	f017 ff93 	bl	80238d0 <expf>
 800b9aa:	1c03      	adds	r3, r0, #0
 800b9ac:	21fe      	movs	r1, #254	@ 0xfe
 800b9ae:	0589      	lsls	r1, r1, #22
 800b9b0:	1c18      	adds	r0, r3, #0
 800b9b2:	f7f4 ff85 	bl	80008c0 <__aeabi_fadd>
 800b9b6:	1c03      	adds	r3, r0, #0
 800b9b8:	1c19      	adds	r1, r3, #0
 800b9ba:	20fe      	movs	r0, #254	@ 0xfe
 800b9bc:	0580      	lsls	r0, r0, #22
 800b9be:	f7f5 f909 	bl	8000bd4 <__aeabi_fdiv>
 800b9c2:	1c03      	adds	r3, r0, #0
    }
}
 800b9c4:	1c18      	adds	r0, r3, #0
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	b005      	add	sp, #20
 800b9ca:	bd90      	pop	{r4, r7, pc}
 800b9cc:	c2480000 	.word	0xc2480000
 800b9d0:	42480000 	.word	0x42480000

0800b9d4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b9ec:	46c0      	nop			@ (mov r8, r8)
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	b004      	add	sp, #16
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800b9f4:	b590      	push	{r4, r7, lr}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d114      	bne.n	800ba30 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba0a:	1c19      	adds	r1, r3, #0
 800ba0c:	6838      	ldr	r0, [r7, #0]
 800ba0e:	f7f5 fc05 	bl	800121c <__aeabi_fsub>
 800ba12:	1c03      	adds	r3, r0, #0
 800ba14:	4918      	ldr	r1, [pc, #96]	@ (800ba78 <GasIndexAlgorithm__mox_model__process+0x84>)
 800ba16:	1c18      	adds	r0, r3, #0
 800ba18:	f7f5 f8dc 	bl	8000bd4 <__aeabi_fdiv>
 800ba1c:	1c03      	adds	r3, r0, #0
 800ba1e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800ba24:	1c19      	adds	r1, r3, #0
 800ba26:	1c10      	adds	r0, r2, #0
 800ba28:	f7f5 faba 	bl	8000fa0 <__aeabi_fmul>
 800ba2c:	1c03      	adds	r3, r0, #0
 800ba2e:	e01f      	b.n	800ba70 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba34:	1c19      	adds	r1, r3, #0
 800ba36:	6838      	ldr	r0, [r7, #0]
 800ba38:	f7f5 fbf0 	bl	800121c <__aeabi_fsub>
 800ba3c:	1c03      	adds	r3, r0, #0
 800ba3e:	1c1a      	adds	r2, r3, #0
 800ba40:	2380      	movs	r3, #128	@ 0x80
 800ba42:	061b      	lsls	r3, r3, #24
 800ba44:	4053      	eors	r3, r2
 800ba46:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba4c:	490b      	ldr	r1, [pc, #44]	@ (800ba7c <GasIndexAlgorithm__mox_model__process+0x88>)
 800ba4e:	1c18      	adds	r0, r3, #0
 800ba50:	f7f4 ff36 	bl	80008c0 <__aeabi_fadd>
 800ba54:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800ba56:	1c19      	adds	r1, r3, #0
 800ba58:	1c20      	adds	r0, r4, #0
 800ba5a:	f7f5 f8bb 	bl	8000bd4 <__aeabi_fdiv>
 800ba5e:	1c03      	adds	r3, r0, #0
 800ba60:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800ba66:	1c19      	adds	r1, r3, #0
 800ba68:	1c10      	adds	r0, r2, #0
 800ba6a:	f7f5 fa99 	bl	8000fa0 <__aeabi_fmul>
 800ba6e:	1c03      	adds	r3, r0, #0
    }
}
 800ba70:	1c18      	adds	r0, r3, #0
 800ba72:	46bd      	mov	sp, r7
 800ba74:	b003      	add	sp, #12
 800ba76:	bd90      	pop	{r4, r7, pc}
 800ba78:	44fa0000 	.word	0x44fa0000
 800ba7c:	435c0000 	.word	0x435c0000

0800ba80 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
 800ba8c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2180      	movs	r1, #128	@ 0x80
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2184      	movs	r1, #132	@ 0x84
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2188      	movs	r1, #136	@ 0x88
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	505a      	str	r2, [r3, r1]
}
 800baa6:	46c0      	nop			@ (mov r8, r8)
 800baa8:	46bd      	mov	sp, r7
 800baaa:	b004      	add	sp, #16
 800baac:	bd80      	pop	{r7, pc}
	...

0800bab0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800bab0:	b590      	push	{r4, r7, lr}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2280      	movs	r2, #128	@ 0x80
 800babe:	589c      	ldr	r4, [r3, r2]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2284      	movs	r2, #132	@ 0x84
 800bac4:	589b      	ldr	r3, [r3, r2]
 800bac6:	1c19      	adds	r1, r3, #0
 800bac8:	6838      	ldr	r0, [r7, #0]
 800baca:	f7f5 fba7 	bl	800121c <__aeabi_fsub>
 800bace:	1c03      	adds	r3, r0, #0
 800bad0:	1c19      	adds	r1, r3, #0
 800bad2:	1c20      	adds	r0, r4, #0
 800bad4:	f7f5 fa64 	bl	8000fa0 <__aeabi_fmul>
 800bad8:	1c03      	adds	r3, r0, #0
 800bada:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800badc:	4940      	ldr	r1, [pc, #256]	@ (800bbe0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800bade:	68b8      	ldr	r0, [r7, #8]
 800bae0:	f7f4 fd26 	bl	8000530 <__aeabi_fcmplt>
 800bae4:	1e03      	subs	r3, r0, #0
 800bae6:	d001      	beq.n	800baec <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800bae8:	4b3e      	ldr	r3, [pc, #248]	@ (800bbe4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800baea:	e075      	b.n	800bbd8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800baec:	493e      	ldr	r1, [pc, #248]	@ (800bbe8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800baee:	68b8      	ldr	r0, [r7, #8]
 800baf0:	f7f4 fd32 	bl	8000558 <__aeabi_fcmpgt>
 800baf4:	1e03      	subs	r3, r0, #0
 800baf6:	d001      	beq.n	800bafc <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800baf8:	2300      	movs	r3, #0
 800bafa:	e06d      	b.n	800bbd8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800bafc:	2100      	movs	r1, #0
 800bafe:	6838      	ldr	r0, [r7, #0]
 800bb00:	f7f4 fd34 	bl	800056c <__aeabi_fcmpge>
 800bb04:	1e03      	subs	r3, r0, #0
 800bb06:	d047      	beq.n	800bb98 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2288      	movs	r2, #136	@ 0x88
 800bb0c:	589b      	ldr	r3, [r3, r2]
 800bb0e:	21fe      	movs	r1, #254	@ 0xfe
 800bb10:	0589      	lsls	r1, r1, #22
 800bb12:	1c18      	adds	r0, r3, #0
 800bb14:	f7f4 fd06 	bl	8000524 <__aeabi_fcmpeq>
 800bb18:	1e03      	subs	r3, r0, #0
 800bb1a:	d00e      	beq.n	800bb3a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	1c19      	adds	r1, r3, #0
 800bb22:	20fe      	movs	r0, #254	@ 0xfe
 800bb24:	0580      	lsls	r0, r0, #22
 800bb26:	f7f5 fb79 	bl	800121c <__aeabi_fsub>
 800bb2a:	1c03      	adds	r3, r0, #0
 800bb2c:	492f      	ldr	r1, [pc, #188]	@ (800bbec <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800bb2e:	1c18      	adds	r0, r3, #0
 800bb30:	f7f5 fa36 	bl	8000fa0 <__aeabi_fmul>
 800bb34:	1c03      	adds	r3, r0, #0
 800bb36:	60fb      	str	r3, [r7, #12]
 800bb38:	e012      	b.n	800bb60 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	492c      	ldr	r1, [pc, #176]	@ (800bbf0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800bb40:	1c18      	adds	r0, r3, #0
 800bb42:	f7f5 fa2d 	bl	8000fa0 <__aeabi_fmul>
 800bb46:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800bb48:	1c19      	adds	r1, r3, #0
 800bb4a:	4826      	ldr	r0, [pc, #152]	@ (800bbe4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800bb4c:	f7f5 fb66 	bl	800121c <__aeabi_fsub>
 800bb50:	1c03      	adds	r3, r0, #0
 800bb52:	2181      	movs	r1, #129	@ 0x81
 800bb54:	05c9      	lsls	r1, r1, #23
 800bb56:	1c18      	adds	r0, r3, #0
 800bb58:	f7f5 f83c 	bl	8000bd4 <__aeabi_fdiv>
 800bb5c:	1c03      	adds	r3, r0, #0
 800bb5e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800bb60:	4920      	ldr	r1, [pc, #128]	@ (800bbe4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7f4 feac 	bl	80008c0 <__aeabi_fadd>
 800bb68:	1c03      	adds	r3, r0, #0
 800bb6a:	1c1c      	adds	r4, r3, #0
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	1c18      	adds	r0, r3, #0
 800bb70:	f017 feae 	bl	80238d0 <expf>
 800bb74:	1c03      	adds	r3, r0, #0
 800bb76:	21fe      	movs	r1, #254	@ 0xfe
 800bb78:	0589      	lsls	r1, r1, #22
 800bb7a:	1c18      	adds	r0, r3, #0
 800bb7c:	f7f4 fea0 	bl	80008c0 <__aeabi_fadd>
 800bb80:	1c03      	adds	r3, r0, #0
 800bb82:	1c19      	adds	r1, r3, #0
 800bb84:	1c20      	adds	r0, r4, #0
 800bb86:	f7f5 f825 	bl	8000bd4 <__aeabi_fdiv>
 800bb8a:	1c03      	adds	r3, r0, #0
 800bb8c:	68f9      	ldr	r1, [r7, #12]
 800bb8e:	1c18      	adds	r0, r3, #0
 800bb90:	f7f5 fb44 	bl	800121c <__aeabi_fsub>
 800bb94:	1c03      	adds	r3, r0, #0
 800bb96:	e01f      	b.n	800bbd8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2188      	movs	r1, #136	@ 0x88
 800bba0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800bba2:	1c19      	adds	r1, r3, #0
 800bba4:	1c10      	adds	r0, r2, #0
 800bba6:	f7f5 f815 	bl	8000bd4 <__aeabi_fdiv>
 800bbaa:	1c03      	adds	r3, r0, #0
 800bbac:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	1c18      	adds	r0, r3, #0
 800bbb2:	f017 fe8d 	bl	80238d0 <expf>
 800bbb6:	1c03      	adds	r3, r0, #0
 800bbb8:	21fe      	movs	r1, #254	@ 0xfe
 800bbba:	0589      	lsls	r1, r1, #22
 800bbbc:	1c18      	adds	r0, r3, #0
 800bbbe:	f7f4 fe7f 	bl	80008c0 <__aeabi_fadd>
 800bbc2:	1c03      	adds	r3, r0, #0
 800bbc4:	1c19      	adds	r1, r3, #0
 800bbc6:	4807      	ldr	r0, [pc, #28]	@ (800bbe4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800bbc8:	f7f5 f804 	bl	8000bd4 <__aeabi_fdiv>
 800bbcc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800bbce:	1c19      	adds	r1, r3, #0
 800bbd0:	1c20      	adds	r0, r4, #0
 800bbd2:	f7f5 f9e5 	bl	8000fa0 <__aeabi_fmul>
 800bbd6:	1c03      	adds	r3, r0, #0
        }
    }
}
 800bbd8:	1c18      	adds	r0, r3, #0
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	b005      	add	sp, #20
 800bbde:	bd90      	pop	{r4, r7, pc}
 800bbe0:	c2480000 	.word	0xc2480000
 800bbe4:	43fa0000 	.word	0x43fa0000
 800bbe8:	42480000 	.word	0x42480000
 800bbec:	3f8041ab 	.word	0x3f8041ab
 800bbf0:	40a00000 	.word	0x40a00000

0800bbf4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800bbf4:	b590      	push	{r4, r7, lr}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	4913      	ldr	r1, [pc, #76]	@ (800bc54 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800bc06:	1c18      	adds	r0, r3, #0
 800bc08:	f7f4 fe5a 	bl	80008c0 <__aeabi_fadd>
 800bc0c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800bc0e:	1c19      	adds	r1, r3, #0
 800bc10:	1c20      	adds	r0, r4, #0
 800bc12:	f7f4 ffdf 	bl	8000bd4 <__aeabi_fdiv>
 800bc16:	1c03      	adds	r3, r0, #0
 800bc18:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	228c      	movs	r2, #140	@ 0x8c
 800bc1e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	490b      	ldr	r1, [pc, #44]	@ (800bc58 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800bc2a:	1c18      	adds	r0, r3, #0
 800bc2c:	f7f4 fe48 	bl	80008c0 <__aeabi_fadd>
 800bc30:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800bc32:	1c19      	adds	r1, r3, #0
 800bc34:	1c20      	adds	r0, r4, #0
 800bc36:	f7f4 ffcd 	bl	8000bd4 <__aeabi_fdiv>
 800bc3a:	1c03      	adds	r3, r0, #0
 800bc3c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2290      	movs	r2, #144	@ 0x90
 800bc42:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2294      	movs	r2, #148	@ 0x94
 800bc48:	2100      	movs	r1, #0
 800bc4a:	5499      	strb	r1, [r3, r2]
}
 800bc4c:	46c0      	nop			@ (mov r8, r8)
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	b003      	add	sp, #12
 800bc52:	bd90      	pop	{r4, r7, pc}
 800bc54:	41a00000 	.word	0x41a00000
 800bc58:	43fa0000 	.word	0x43fa0000

0800bc5c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2294      	movs	r2, #148	@ 0x94
 800bc6a:	5c9b      	ldrb	r3, [r3, r2]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	4053      	eors	r3, r2
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00f      	beq.n	800bc96 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2198      	movs	r1, #152	@ 0x98
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	219c      	movs	r1, #156	@ 0x9c
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	21a0      	movs	r1, #160	@ 0xa0
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2294      	movs	r2, #148	@ 0x94
 800bc92:	2101      	movs	r1, #1
 800bc94:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	228c      	movs	r2, #140	@ 0x8c
 800bc9a:	589b      	ldr	r3, [r3, r2]
 800bc9c:	1c19      	adds	r1, r3, #0
 800bc9e:	20fe      	movs	r0, #254	@ 0xfe
 800bca0:	0580      	lsls	r0, r0, #22
 800bca2:	f7f5 fabb 	bl	800121c <__aeabi_fsub>
 800bca6:	1c03      	adds	r3, r0, #0
 800bca8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2298      	movs	r2, #152	@ 0x98
 800bcae:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800bcb0:	1c19      	adds	r1, r3, #0
 800bcb2:	f7f5 f975 	bl	8000fa0 <__aeabi_fmul>
 800bcb6:	1c03      	adds	r3, r0, #0
 800bcb8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	228c      	movs	r2, #140	@ 0x8c
 800bcbe:	589b      	ldr	r3, [r3, r2]
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	1c18      	adds	r0, r3, #0
 800bcc4:	f7f5 f96c 	bl	8000fa0 <__aeabi_fmul>
 800bcc8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800bcca:	1c19      	adds	r1, r3, #0
 800bccc:	1c20      	adds	r0, r4, #0
 800bcce:	f7f4 fdf7 	bl	80008c0 <__aeabi_fadd>
 800bcd2:	1c03      	adds	r3, r0, #0
 800bcd4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2298      	movs	r2, #152	@ 0x98
 800bcda:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2290      	movs	r2, #144	@ 0x90
 800bce0:	589b      	ldr	r3, [r3, r2]
 800bce2:	1c19      	adds	r1, r3, #0
 800bce4:	20fe      	movs	r0, #254	@ 0xfe
 800bce6:	0580      	lsls	r0, r0, #22
 800bce8:	f7f5 fa98 	bl	800121c <__aeabi_fsub>
 800bcec:	1c03      	adds	r3, r0, #0
 800bcee:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	229c      	movs	r2, #156	@ 0x9c
 800bcf4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800bcf6:	1c19      	adds	r1, r3, #0
 800bcf8:	f7f5 f952 	bl	8000fa0 <__aeabi_fmul>
 800bcfc:	1c03      	adds	r3, r0, #0
 800bcfe:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2290      	movs	r2, #144	@ 0x90
 800bd04:	589b      	ldr	r3, [r3, r2]
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	1c18      	adds	r0, r3, #0
 800bd0a:	f7f5 f949 	bl	8000fa0 <__aeabi_fmul>
 800bd0e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800bd10:	1c19      	adds	r1, r3, #0
 800bd12:	1c20      	adds	r0, r4, #0
 800bd14:	f7f4 fdd4 	bl	80008c0 <__aeabi_fadd>
 800bd18:	1c03      	adds	r3, r0, #0
 800bd1a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	229c      	movs	r2, #156	@ 0x9c
 800bd20:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2298      	movs	r2, #152	@ 0x98
 800bd26:	589a      	ldr	r2, [r3, r2]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	219c      	movs	r1, #156	@ 0x9c
 800bd2c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800bd2e:	1c19      	adds	r1, r3, #0
 800bd30:	1c10      	adds	r0, r2, #0
 800bd32:	f7f5 fa73 	bl	800121c <__aeabi_fsub>
 800bd36:	1c03      	adds	r3, r0, #0
 800bd38:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	6978      	ldr	r0, [r7, #20]
 800bd3e:	f7f4 fbf7 	bl	8000530 <__aeabi_fcmplt>
 800bd42:	1e03      	subs	r3, r0, #0
 800bd44:	d004      	beq.n	800bd50 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2280      	movs	r2, #128	@ 0x80
 800bd4a:	0612      	lsls	r2, r2, #24
 800bd4c:	4053      	eors	r3, r2
 800bd4e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800bd50:	4923      	ldr	r1, [pc, #140]	@ (800bde0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800bd52:	6978      	ldr	r0, [r7, #20]
 800bd54:	f7f5 f924 	bl	8000fa0 <__aeabi_fmul>
 800bd58:	1c03      	adds	r3, r0, #0
 800bd5a:	1c18      	adds	r0, r3, #0
 800bd5c:	f017 fdb8 	bl	80238d0 <expf>
 800bd60:	1c03      	adds	r3, r0, #0
 800bd62:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800bd64:	491f      	ldr	r1, [pc, #124]	@ (800bde4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800bd66:	6938      	ldr	r0, [r7, #16]
 800bd68:	f7f5 f91a 	bl	8000fa0 <__aeabi_fmul>
 800bd6c:	1c03      	adds	r3, r0, #0
 800bd6e:	491e      	ldr	r1, [pc, #120]	@ (800bde8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800bd70:	1c18      	adds	r0, r3, #0
 800bd72:	f7f4 fda5 	bl	80008c0 <__aeabi_fadd>
 800bd76:	1c03      	adds	r3, r0, #0
 800bd78:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685c      	ldr	r4, [r3, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	1c18      	adds	r0, r3, #0
 800bd86:	f7f4 fd9b 	bl	80008c0 <__aeabi_fadd>
 800bd8a:	1c03      	adds	r3, r0, #0
 800bd8c:	1c19      	adds	r1, r3, #0
 800bd8e:	1c20      	adds	r0, r4, #0
 800bd90:	f7f4 ff20 	bl	8000bd4 <__aeabi_fdiv>
 800bd94:	1c03      	adds	r3, r0, #0
 800bd96:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800bd98:	68b9      	ldr	r1, [r7, #8]
 800bd9a:	20fe      	movs	r0, #254	@ 0xfe
 800bd9c:	0580      	lsls	r0, r0, #22
 800bd9e:	f7f5 fa3d 	bl	800121c <__aeabi_fsub>
 800bda2:	1c03      	adds	r3, r0, #0
 800bda4:	1c18      	adds	r0, r3, #0
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	22a0      	movs	r2, #160	@ 0xa0
 800bdaa:	589b      	ldr	r3, [r3, r2]
 800bdac:	1c19      	adds	r1, r3, #0
 800bdae:	f7f5 f8f7 	bl	8000fa0 <__aeabi_fmul>
 800bdb2:	1c03      	adds	r3, r0, #0
 800bdb4:	1c1c      	adds	r4, r3, #0
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	68b8      	ldr	r0, [r7, #8]
 800bdba:	f7f5 f8f1 	bl	8000fa0 <__aeabi_fmul>
 800bdbe:	1c03      	adds	r3, r0, #0
 800bdc0:	1c19      	adds	r1, r3, #0
 800bdc2:	1c20      	adds	r0, r4, #0
 800bdc4:	f7f4 fd7c 	bl	80008c0 <__aeabi_fadd>
 800bdc8:	1c03      	adds	r3, r0, #0
 800bdca:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	22a0      	movs	r2, #160	@ 0xa0
 800bdd0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	22a0      	movs	r2, #160	@ 0xa0
 800bdd6:	589b      	ldr	r3, [r3, r2]
}
 800bdd8:	1c18      	adds	r0, r3, #0
 800bdda:	46bd      	mov	sp, r7
 800bddc:	b007      	add	sp, #28
 800bdde:	bd90      	pop	{r4, r7, pc}
 800bde0:	be4ccccd 	.word	0xbe4ccccd
 800bde4:	43f00000 	.word	0x43f00000
 800bde8:	41a00000 	.word	0x41a00000

0800bdec <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	000a      	movs	r2, r1
 800bdf6:	1cbb      	adds	r3, r7, #2
 800bdf8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800bdfa:	230d      	movs	r3, #13
 800bdfc:	18fb      	adds	r3, r7, r3
 800bdfe:	22ff      	movs	r2, #255	@ 0xff
 800be00:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800be02:	230e      	movs	r3, #14
 800be04:	18fb      	adds	r3, r7, r3
 800be06:	2200      	movs	r2, #0
 800be08:	801a      	strh	r2, [r3, #0]
 800be0a:	e037      	b.n	800be7c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800be0c:	230e      	movs	r3, #14
 800be0e:	18fb      	adds	r3, r7, r3
 800be10:	881b      	ldrh	r3, [r3, #0]
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	18d3      	adds	r3, r2, r3
 800be16:	7819      	ldrb	r1, [r3, #0]
 800be18:	220d      	movs	r2, #13
 800be1a:	18bb      	adds	r3, r7, r2
 800be1c:	18ba      	adds	r2, r7, r2
 800be1e:	7812      	ldrb	r2, [r2, #0]
 800be20:	404a      	eors	r2, r1
 800be22:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800be24:	230c      	movs	r3, #12
 800be26:	18fb      	adds	r3, r7, r3
 800be28:	2208      	movs	r2, #8
 800be2a:	701a      	strb	r2, [r3, #0]
 800be2c:	e01b      	b.n	800be66 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800be2e:	210d      	movs	r1, #13
 800be30:	187b      	adds	r3, r7, r1
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	b25b      	sxtb	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	da09      	bge.n	800be4e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800be3a:	187b      	adds	r3, r7, r1
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	b25b      	sxtb	r3, r3
 800be42:	2231      	movs	r2, #49	@ 0x31
 800be44:	4053      	eors	r3, r2
 800be46:	b25a      	sxtb	r2, r3
 800be48:	187b      	adds	r3, r7, r1
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	e005      	b.n	800be5a <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800be4e:	230d      	movs	r3, #13
 800be50:	18fa      	adds	r2, r7, r3
 800be52:	18fb      	adds	r3, r7, r3
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	18db      	adds	r3, r3, r3
 800be58:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800be5a:	220c      	movs	r2, #12
 800be5c:	18bb      	adds	r3, r7, r2
 800be5e:	18ba      	adds	r2, r7, r2
 800be60:	7812      	ldrb	r2, [r2, #0]
 800be62:	3a01      	subs	r2, #1
 800be64:	701a      	strb	r2, [r3, #0]
 800be66:	230c      	movs	r3, #12
 800be68:	18fb      	adds	r3, r7, r3
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1de      	bne.n	800be2e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800be70:	220e      	movs	r2, #14
 800be72:	18bb      	adds	r3, r7, r2
 800be74:	18ba      	adds	r2, r7, r2
 800be76:	8812      	ldrh	r2, [r2, #0]
 800be78:	3201      	adds	r2, #1
 800be7a:	801a      	strh	r2, [r3, #0]
 800be7c:	230e      	movs	r3, #14
 800be7e:	18fa      	adds	r2, r7, r3
 800be80:	1cbb      	adds	r3, r7, #2
 800be82:	8812      	ldrh	r2, [r2, #0]
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	429a      	cmp	r2, r3
 800be88:	d3c0      	bcc.n	800be0c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800be8a:	230d      	movs	r3, #13
 800be8c:	18fb      	adds	r3, r7, r3
 800be8e:	781b      	ldrb	r3, [r3, #0]
}
 800be90:	0018      	movs	r0, r3
 800be92:	46bd      	mov	sp, r7
 800be94:	b004      	add	sp, #16
 800be96:	bd80      	pop	{r7, pc}

0800be98 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	0008      	movs	r0, r1
 800bea2:	0011      	movs	r1, r2
 800bea4:	1cbb      	adds	r3, r7, #2
 800bea6:	1c02      	adds	r2, r0, #0
 800bea8:	801a      	strh	r2, [r3, #0]
 800beaa:	1c7b      	adds	r3, r7, #1
 800beac:	1c0a      	adds	r2, r1, #0
 800beae:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800beb0:	1cbb      	adds	r3, r7, #2
 800beb2:	881a      	ldrh	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	0011      	movs	r1, r2
 800beb8:	0018      	movs	r0, r3
 800beba:	f7ff ff97 	bl	800bdec <sensirion_i2c_generate_crc>
 800bebe:	0003      	movs	r3, r0
 800bec0:	001a      	movs	r2, r3
 800bec2:	1c7b      	adds	r3, r7, #1
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d001      	beq.n	800bece <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e000      	b.n	800bed0 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	0018      	movs	r0, r3
 800bed2:	46bd      	mov	sp, r7
 800bed4:	b002      	add	sp, #8
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	0008      	movs	r0, r1
 800bee2:	0011      	movs	r1, r2
 800bee4:	1cbb      	adds	r3, r7, #2
 800bee6:	1c02      	adds	r2, r0, #0
 800bee8:	801a      	strh	r2, [r3, #0]
 800beea:	003b      	movs	r3, r7
 800beec:	1c0a      	adds	r2, r1, #0
 800beee:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800bef0:	003b      	movs	r3, r7
 800bef2:	881b      	ldrh	r3, [r3, #0]
 800bef4:	0a1b      	lsrs	r3, r3, #8
 800bef6:	b299      	uxth	r1, r3
 800bef8:	1cbb      	adds	r3, r7, #2
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	1cba      	adds	r2, r7, #2
 800befe:	1c58      	adds	r0, r3, #1
 800bf00:	8010      	strh	r0, [r2, #0]
 800bf02:	001a      	movs	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	189b      	adds	r3, r3, r2
 800bf08:	b2ca      	uxtb	r2, r1
 800bf0a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800bf0c:	1cbb      	adds	r3, r7, #2
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	1cba      	adds	r2, r7, #2
 800bf12:	1c59      	adds	r1, r3, #1
 800bf14:	8011      	strh	r1, [r2, #0]
 800bf16:	001a      	movs	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	189b      	adds	r3, r3, r2
 800bf1c:	003a      	movs	r2, r7
 800bf1e:	8812      	ldrh	r2, [r2, #0]
 800bf20:	b2d2      	uxtb	r2, r2
 800bf22:	701a      	strb	r2, [r3, #0]
    return offset;
 800bf24:	1cbb      	adds	r3, r7, #2
 800bf26:	881b      	ldrh	r3, [r3, #0]
}
 800bf28:	0018      	movs	r0, r3
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	b002      	add	sp, #8
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800bf30:	b590      	push	{r4, r7, lr}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	0008      	movs	r0, r1
 800bf3a:	0011      	movs	r1, r2
 800bf3c:	1cbb      	adds	r3, r7, #2
 800bf3e:	1c02      	adds	r2, r0, #0
 800bf40:	801a      	strh	r2, [r3, #0]
 800bf42:	003b      	movs	r3, r7
 800bf44:	1c0a      	adds	r2, r1, #0
 800bf46:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800bf48:	003b      	movs	r3, r7
 800bf4a:	881b      	ldrh	r3, [r3, #0]
 800bf4c:	0a1b      	lsrs	r3, r3, #8
 800bf4e:	b299      	uxth	r1, r3
 800bf50:	1cbb      	adds	r3, r7, #2
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	1cba      	adds	r2, r7, #2
 800bf56:	1c58      	adds	r0, r3, #1
 800bf58:	8010      	strh	r0, [r2, #0]
 800bf5a:	001a      	movs	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	189b      	adds	r3, r3, r2
 800bf60:	b2ca      	uxtb	r2, r1
 800bf62:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800bf64:	1cbb      	adds	r3, r7, #2
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	1cba      	adds	r2, r7, #2
 800bf6a:	1c59      	adds	r1, r3, #1
 800bf6c:	8011      	strh	r1, [r2, #0]
 800bf6e:	001a      	movs	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	189b      	adds	r3, r3, r2
 800bf74:	003a      	movs	r2, r7
 800bf76:	8812      	ldrh	r2, [r2, #0]
 800bf78:	b2d2      	uxtb	r2, r2
 800bf7a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800bf7c:	1cbb      	adds	r3, r7, #2
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	3b02      	subs	r3, #2
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800bf86:	1cbb      	adds	r3, r7, #2
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	18d4      	adds	r4, r2, r3
 800bf8e:	2102      	movs	r1, #2
 800bf90:	f7ff ff2c 	bl	800bdec <sensirion_i2c_generate_crc>
 800bf94:	0003      	movs	r3, r0
 800bf96:	7023      	strb	r3, [r4, #0]
    offset++;
 800bf98:	1cbb      	adds	r3, r7, #2
 800bf9a:	881a      	ldrh	r2, [r3, #0]
 800bf9c:	1cbb      	adds	r3, r7, #2
 800bf9e:	3201      	adds	r2, #1
 800bfa0:	801a      	strh	r2, [r3, #0]

    return offset;
 800bfa2:	1cbb      	adds	r3, r7, #2
 800bfa4:	881b      	ldrh	r3, [r3, #0]
}
 800bfa6:	0018      	movs	r0, r3
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	b003      	add	sp, #12
 800bfac:	bd90      	pop	{r4, r7, pc}

0800bfae <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	0008      	movs	r0, r1
 800bfb8:	0011      	movs	r1, r2
 800bfba:	1cbb      	adds	r3, r7, #2
 800bfbc:	1c02      	adds	r2, r0, #0
 800bfbe:	801a      	strh	r2, [r3, #0]
 800bfc0:	003b      	movs	r3, r7
 800bfc2:	1c0a      	adds	r2, r1, #0
 800bfc4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800bfc6:	003b      	movs	r3, r7
 800bfc8:	881a      	ldrh	r2, [r3, #0]
 800bfca:	1cbb      	adds	r3, r7, #2
 800bfcc:	8819      	ldrh	r1, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	f7ff ffad 	bl	800bf30 <sensirion_i2c_add_uint16_t_to_buffer>
 800bfd6:	0003      	movs	r3, r0
}
 800bfd8:	0018      	movs	r0, r3
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	b002      	add	sp, #8
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6039      	str	r1, [r7, #0]
 800bfe8:	0011      	movs	r1, r2
 800bfea:	1dfb      	adds	r3, r7, #7
 800bfec:	1c02      	adds	r2, r0, #0
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	1d3b      	adds	r3, r7, #4
 800bff2:	1c0a      	adds	r2, r1, #0
 800bff4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800bff6:	1d3b      	adds	r3, r7, #4
 800bff8:	881a      	ldrh	r2, [r3, #0]
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	1dfb      	adds	r3, r7, #7
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	0018      	movs	r0, r3
 800c002:	f7fe f9d9 	bl	800a3b8 <sensirion_i2c_hal_write>
 800c006:	0003      	movs	r3, r0
}
 800c008:	0018      	movs	r0, r3
 800c00a:	46bd      	mov	sp, r7
 800c00c:	b002      	add	sp, #8
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800c010:	b5b0      	push	{r4, r5, r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6039      	str	r1, [r7, #0]
 800c018:	0011      	movs	r1, r2
 800c01a:	1dfb      	adds	r3, r7, #7
 800c01c:	1c02      	adds	r2, r0, #0
 800c01e:	701a      	strb	r2, [r3, #0]
 800c020:	1d3b      	adds	r3, r7, #4
 800c022:	1c0a      	adds	r2, r1, #0
 800c024:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800c026:	1d3b      	adds	r3, r7, #4
 800c028:	881b      	ldrh	r3, [r3, #0]
 800c02a:	085b      	lsrs	r3, r3, #1
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	220a      	movs	r2, #10
 800c030:	18ba      	adds	r2, r7, r2
 800c032:	1c19      	adds	r1, r3, #0
 800c034:	1c0b      	adds	r3, r1, #0
 800c036:	18db      	adds	r3, r3, r3
 800c038:	185b      	adds	r3, r3, r1
 800c03a:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800c03c:	1d3b      	adds	r3, r7, #4
 800c03e:	881b      	ldrh	r3, [r3, #0]
 800c040:	2201      	movs	r2, #1
 800c042:	4013      	ands	r3, r2
 800c044:	b29b      	uxth	r3, r3
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800c04a:	2304      	movs	r3, #4
 800c04c:	e06b      	b.n	800c126 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800c04e:	230a      	movs	r3, #10
 800c050:	18fb      	adds	r3, r7, r3
 800c052:	881a      	ldrh	r2, [r3, #0]
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	1dfb      	adds	r3, r7, #7
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	0018      	movs	r0, r3
 800c05c:	f7fe f98c 	bl	800a378 <sensirion_i2c_hal_read>
 800c060:	0003      	movs	r3, r0
 800c062:	001a      	movs	r2, r3
 800c064:	2108      	movs	r1, #8
 800c066:	187b      	adds	r3, r7, r1
 800c068:	801a      	strh	r2, [r3, #0]
    if (error) {
 800c06a:	000a      	movs	r2, r1
 800c06c:	18bb      	adds	r3, r7, r2
 800c06e:	2100      	movs	r1, #0
 800c070:	5e5b      	ldrsh	r3, [r3, r1]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d003      	beq.n	800c07e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800c076:	18bb      	adds	r3, r7, r2
 800c078:	2200      	movs	r2, #0
 800c07a:	5e9b      	ldrsh	r3, [r3, r2]
 800c07c:	e053      	b.n	800c126 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800c07e:	230e      	movs	r3, #14
 800c080:	18fb      	adds	r3, r7, r3
 800c082:	2200      	movs	r2, #0
 800c084:	801a      	strh	r2, [r3, #0]
 800c086:	230c      	movs	r3, #12
 800c088:	18fb      	adds	r3, r7, r3
 800c08a:	2200      	movs	r2, #0
 800c08c:	801a      	strh	r2, [r3, #0]
 800c08e:	e041      	b.n	800c114 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800c090:	210e      	movs	r1, #14
 800c092:	187b      	adds	r3, r7, r1
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800c09a:	187b      	adds	r3, r7, r1
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	3302      	adds	r3, #2
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	001a      	movs	r2, r3
 800c0a8:	2102      	movs	r1, #2
 800c0aa:	f7ff fef5 	bl	800be98 <sensirion_i2c_check_crc>
 800c0ae:	0003      	movs	r3, r0
 800c0b0:	001a      	movs	r2, r3
 800c0b2:	2108      	movs	r1, #8
 800c0b4:	187b      	adds	r3, r7, r1
 800c0b6:	801a      	strh	r2, [r3, #0]
        if (error) {
 800c0b8:	000a      	movs	r2, r1
 800c0ba:	18bb      	adds	r3, r7, r2
 800c0bc:	2100      	movs	r1, #0
 800c0be:	5e5b      	ldrsh	r3, [r3, r1]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800c0c4:	18bb      	adds	r3, r7, r2
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	5e9b      	ldrsh	r3, [r3, r2]
 800c0ca:	e02c      	b.n	800c126 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800c0cc:	240e      	movs	r4, #14
 800c0ce:	193b      	adds	r3, r7, r4
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	18d2      	adds	r2, r2, r3
 800c0d6:	250c      	movs	r5, #12
 800c0d8:	197b      	adds	r3, r7, r5
 800c0da:	881b      	ldrh	r3, [r3, #0]
 800c0dc:	1979      	adds	r1, r7, r5
 800c0de:	1c58      	adds	r0, r3, #1
 800c0e0:	8008      	strh	r0, [r1, #0]
 800c0e2:	0019      	movs	r1, r3
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	185b      	adds	r3, r3, r1
 800c0e8:	7812      	ldrb	r2, [r2, #0]
 800c0ea:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800c0ec:	193b      	adds	r3, r7, r4
 800c0ee:	881b      	ldrh	r3, [r3, #0]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	18d2      	adds	r2, r2, r3
 800c0f6:	197b      	adds	r3, r7, r5
 800c0f8:	881b      	ldrh	r3, [r3, #0]
 800c0fa:	1979      	adds	r1, r7, r5
 800c0fc:	1c58      	adds	r0, r3, #1
 800c0fe:	8008      	strh	r0, [r1, #0]
 800c100:	0019      	movs	r1, r3
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	185b      	adds	r3, r3, r1
 800c106:	7812      	ldrb	r2, [r2, #0]
 800c108:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800c10a:	193b      	adds	r3, r7, r4
 800c10c:	193a      	adds	r2, r7, r4
 800c10e:	8812      	ldrh	r2, [r2, #0]
 800c110:	3203      	adds	r2, #3
 800c112:	801a      	strh	r2, [r3, #0]
 800c114:	230e      	movs	r3, #14
 800c116:	18fa      	adds	r2, r7, r3
 800c118:	230a      	movs	r3, #10
 800c11a:	18fb      	adds	r3, r7, r3
 800c11c:	8812      	ldrh	r2, [r2, #0]
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	429a      	cmp	r2, r3
 800c122:	d3b5      	bcc.n	800c090 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800c124:	2300      	movs	r3, #0
}
 800c126:	0018      	movs	r0, r3
 800c128:	46bd      	mov	sp, r7
 800c12a:	b004      	add	sp, #16
 800c12c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c130 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800c130:	b590      	push	{r4, r7, lr}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6039      	str	r1, [r7, #0]
 800c138:	0011      	movs	r1, r2
 800c13a:	1dfb      	adds	r3, r7, #7
 800c13c:	1c02      	adds	r2, r0, #0
 800c13e:	701a      	strb	r2, [r3, #0]
 800c140:	1dbb      	adds	r3, r7, #6
 800c142:	1c0a      	adds	r2, r1, #0
 800c144:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800c146:	4b08      	ldr	r3, [pc, #32]	@ (800c168 <ReadRegister+0x38>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d008      	beq.n	800c160 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800c14e:	4b06      	ldr	r3, [pc, #24]	@ (800c168 <ReadRegister+0x38>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	1dba      	adds	r2, r7, #6
 800c154:	7814      	ldrb	r4, [r2, #0]
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	1dfa      	adds	r2, r7, #7
 800c15a:	7810      	ldrb	r0, [r2, #0]
 800c15c:	0022      	movs	r2, r4
 800c15e:	4798      	blx	r3
  }
}
 800c160:	46c0      	nop			@ (mov r8, r8)
 800c162:	46bd      	mov	sp, r7
 800c164:	b003      	add	sp, #12
 800c166:	bd90      	pop	{r4, r7, pc}
 800c168:	20000dd0 	.word	0x20000dd0

0800c16c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800c16c:	b590      	push	{r4, r7, lr}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6039      	str	r1, [r7, #0]
 800c174:	0011      	movs	r1, r2
 800c176:	1dfb      	adds	r3, r7, #7
 800c178:	1c02      	adds	r2, r0, #0
 800c17a:	701a      	strb	r2, [r3, #0]
 800c17c:	1dbb      	adds	r3, r7, #6
 800c17e:	1c0a      	adds	r2, r1, #0
 800c180:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800c182:	4b08      	ldr	r3, [pc, #32]	@ (800c1a4 <WriteRegister+0x38>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d008      	beq.n	800c19c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800c18a:	4b06      	ldr	r3, [pc, #24]	@ (800c1a4 <WriteRegister+0x38>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	1dba      	adds	r2, r7, #6
 800c190:	7814      	ldrb	r4, [r2, #0]
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	1dfa      	adds	r2, r7, #7
 800c196:	7810      	ldrb	r0, [r2, #0]
 800c198:	0022      	movs	r2, r4
 800c19a:	4798      	blx	r3
  }
}
 800c19c:	46c0      	nop			@ (mov r8, r8)
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	b003      	add	sp, #12
 800c1a2:	bd90      	pop	{r4, r7, pc}
 800c1a4:	20000dd4 	.word	0x20000dd4

0800c1a8 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800c1b0:	f003 fb72 	bl	800f898 <HAL_GetTick>
 800c1b4:	0002      	movs	r2, r0
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	18d2      	adds	r2, r2, r3
 800c1ba:	4b03      	ldr	r3, [pc, #12]	@ (800c1c8 <setSGP40TimeStamp+0x20>)
 800c1bc:	601a      	str	r2, [r3, #0]
}
 800c1be:	46c0      	nop			@ (mov r8, r8)
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	b002      	add	sp, #8
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	46c0      	nop			@ (mov r8, r8)
 800c1c8:	20000de4 	.word	0x20000de4

0800c1cc <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800c1d0:	4b02      	ldr	r3, [pc, #8]	@ (800c1dc <ResetSGP40samplecounter+0x10>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	701a      	strb	r2, [r3, #0]
}
 800c1d6:	46c0      	nop			@ (mov r8, r8)
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	20000de2 	.word	0x20000de2

0800c1e0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800c1ea:	4b07      	ldr	r3, [pc, #28]	@ (800c208 <SGP_Init+0x28>)
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800c1f0:	4b06      	ldr	r3, [pc, #24]	@ (800c20c <SGP_Init+0x2c>)
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800c1f6:	4b06      	ldr	r3, [pc, #24]	@ (800c210 <SGP_Init+0x30>)
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	0018      	movs	r0, r3
 800c1fc:	f7fe ff70 	bl	800b0e0 <GasIndexAlgorithm_init>
}
 800c200:	46c0      	nop			@ (mov r8, r8)
 800c202:	46bd      	mov	sp, r7
 800c204:	b002      	add	sp, #8
 800c206:	bd80      	pop	{r7, pc}
 800c208:	20000dd0 	.word	0x20000dd0
 800c20c:	20000dd4 	.word	0x20000dd4
 800c210:	20000dec 	.word	0x20000dec

0800c214 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800c218:	4b07      	ldr	r3, [pc, #28]	@ (800c238 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d004      	beq.n	800c22a <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800c220:	4b06      	ldr	r3, [pc, #24]	@ (800c23c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800c222:	22fe      	movs	r2, #254	@ 0xfe
 800c224:	0592      	lsls	r2, r2, #22
 800c226:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800c228:	e002      	b.n	800c230 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800c22a:	4b04      	ldr	r3, [pc, #16]	@ (800c23c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800c22c:	4a04      	ldr	r2, [pc, #16]	@ (800c240 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800c22e:	605a      	str	r2, [r3, #4]
}
 800c230:	46c0      	nop			@ (mov r8, r8)
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	46c0      	nop			@ (mov r8, r8)
 800c238:	20001d39 	.word	0x20001d39
 800c23c:	20000dec 	.word	0x20000dec
 800c240:	44610000 	.word	0x44610000

0800c244 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800c248:	4b13      	ldr	r3, [pc, #76]	@ (800c298 <SGP_StartMeasurement+0x54>)
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00d      	beq.n	800c26c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800c250:	4b12      	ldr	r3, [pc, #72]	@ (800c29c <SGP_StartMeasurement+0x58>)
 800c252:	2208      	movs	r2, #8
 800c254:	0019      	movs	r1, r3
 800c256:	2059      	movs	r0, #89	@ 0x59
 800c258:	f7ff ff88 	bl	800c16c <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800c25c:	f003 fb1c 	bl	800f898 <HAL_GetTick>
 800c260:	0003      	movs	r3, r0
 800c262:	331e      	adds	r3, #30
 800c264:	001a      	movs	r2, r3
 800c266:	4b0e      	ldr	r3, [pc, #56]	@ (800c2a0 <SGP_StartMeasurement+0x5c>)
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	e00c      	b.n	800c286 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800c26c:	4b0d      	ldr	r3, [pc, #52]	@ (800c2a4 <SGP_StartMeasurement+0x60>)
 800c26e:	2208      	movs	r2, #8
 800c270:	0019      	movs	r1, r3
 800c272:	2059      	movs	r0, #89	@ 0x59
 800c274:	f7ff ff7a 	bl	800c16c <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800c278:	f003 fb0e 	bl	800f898 <HAL_GetTick>
 800c27c:	0003      	movs	r3, r0
 800c27e:	33aa      	adds	r3, #170	@ 0xaa
 800c280:	001a      	movs	r2, r3
 800c282:	4b09      	ldr	r3, [pc, #36]	@ (800c2a8 <SGP_StartMeasurement+0x64>)
 800c284:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800c286:	4b09      	ldr	r3, [pc, #36]	@ (800c2ac <SGP_StartMeasurement+0x68>)
 800c288:	2200      	movs	r2, #0
 800c28a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800c28c:	4b08      	ldr	r3, [pc, #32]	@ (800c2b0 <SGP_StartMeasurement+0x6c>)
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
}
 800c292:	46c0      	nop			@ (mov r8, r8)
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	20000e94 	.word	0x20000e94
 800c29c:	2000009c 	.word	0x2000009c
 800c2a0:	200000b0 	.word	0x200000b0
 800c2a4:	20000094 	.word	0x20000094
 800c2a8:	200000a8 	.word	0x200000a8
 800c2ac:	20000de8 	.word	0x20000de8
 800c2b0:	20000de9 	.word	0x20000de9

0800c2b4 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800c2b8:	4b04      	ldr	r3, [pc, #16]	@ (800c2cc <SGP_HeatedUp+0x18>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	0018      	movs	r0, r3
 800c2be:	f002 fe51 	bl	800ef64 <TimestampIsReached>
 800c2c2:	0003      	movs	r3, r0
}
 800c2c4:	0018      	movs	r0, r3
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	46c0      	nop			@ (mov r8, r8)
 800c2cc:	200000a8 	.word	0x200000a8

0800c2d0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800c2d4:	4b04      	ldr	r3, [pc, #16]	@ (800c2e8 <SGP_MeasurementReady+0x18>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	0018      	movs	r0, r3
 800c2da:	f002 fe43 	bl	800ef64 <TimestampIsReached>
 800c2de:	0003      	movs	r3, r0
}
 800c2e0:	0018      	movs	r0, r3
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	46c0      	nop			@ (mov r8, r8)
 800c2e8:	200000b0 	.word	0x200000b0

0800c2ec <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800c2f0:	4b04      	ldr	r3, [pc, #16]	@ (800c304 <SGP_MeasurementDone+0x18>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	0018      	movs	r0, r3
 800c2f6:	f002 fe35 	bl	800ef64 <TimestampIsReached>
 800c2fa:	0003      	movs	r3, r0
}
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	46c0      	nop			@ (mov r8, r8)
 800c304:	200000ac 	.word	0x200000ac

0800c308 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800c308:	b580      	push	{r7, lr}
 800c30a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c30c:	4b04      	ldr	r3, [pc, #16]	@ (800c320 <SGP_TurnHeaterOff+0x18>)
 800c30e:	2202      	movs	r2, #2
 800c310:	0019      	movs	r1, r3
 800c312:	2059      	movs	r0, #89	@ 0x59
 800c314:	f7ff ff2a 	bl	800c16c <WriteRegister>
}
 800c318:	46c0      	nop			@ (mov r8, r8)
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	46c0      	nop			@ (mov r8, r8)
 800c320:	2000008c 	.word	0x2000008c

0800c324 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800c324:	b590      	push	{r4, r7, lr}
 800c326:	b087      	sub	sp, #28
 800c328:	af02      	add	r7, sp, #8
 800c32a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800c32c:	f7ff ffc2 	bl	800c2b4 <SGP_HeatedUp>
 800c330:	1e03      	subs	r3, r0, #0
 800c332:	d032      	beq.n	800c39a <SGP_GetMeasurementValues+0x76>
 800c334:	4b7f      	ldr	r3, [pc, #508]	@ (800c534 <SGP_GetMeasurementValues+0x210>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	2201      	movs	r2, #1
 800c33a:	4053      	eors	r3, r2
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d02b      	beq.n	800c39a <SGP_GetMeasurementValues+0x76>
 800c342:	4b7d      	ldr	r3, [pc, #500]	@ (800c538 <SGP_GetMeasurementValues+0x214>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2201      	movs	r2, #1
 800c348:	4053      	eors	r3, r2
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d024      	beq.n	800c39a <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800c350:	4b78      	ldr	r3, [pc, #480]	@ (800c534 <SGP_GetMeasurementValues+0x210>)
 800c352:	2201      	movs	r2, #1
 800c354:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800c356:	4b79      	ldr	r3, [pc, #484]	@ (800c53c <SGP_GetMeasurementValues+0x218>)
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00d      	beq.n	800c37a <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800c35e:	4b78      	ldr	r3, [pc, #480]	@ (800c540 <SGP_GetMeasurementValues+0x21c>)
 800c360:	2208      	movs	r2, #8
 800c362:	0019      	movs	r1, r3
 800c364:	2059      	movs	r0, #89	@ 0x59
 800c366:	f7ff ff01 	bl	800c16c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800c36a:	f003 fa95 	bl	800f898 <HAL_GetTick>
 800c36e:	0003      	movs	r3, r0
 800c370:	331e      	adds	r3, #30
 800c372:	001a      	movs	r2, r3
 800c374:	4b73      	ldr	r3, [pc, #460]	@ (800c544 <SGP_GetMeasurementValues+0x220>)
 800c376:	601a      	str	r2, [r3, #0]
 800c378:	e00c      	b.n	800c394 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800c37a:	4b73      	ldr	r3, [pc, #460]	@ (800c548 <SGP_GetMeasurementValues+0x224>)
 800c37c:	2208      	movs	r2, #8
 800c37e:	0019      	movs	r1, r3
 800c380:	2059      	movs	r0, #89	@ 0x59
 800c382:	f7ff fef3 	bl	800c16c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800c386:	f003 fa87 	bl	800f898 <HAL_GetTick>
 800c38a:	0003      	movs	r3, r0
 800c38c:	331e      	adds	r3, #30
 800c38e:	001a      	movs	r2, r3
 800c390:	4b6c      	ldr	r3, [pc, #432]	@ (800c544 <SGP_GetMeasurementValues+0x220>)
 800c392:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800c394:	4b68      	ldr	r3, [pc, #416]	@ (800c538 <SGP_GetMeasurementValues+0x214>)
 800c396:	2201      	movs	r2, #1
 800c398:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800c39a:	4b66      	ldr	r3, [pc, #408]	@ (800c534 <SGP_GetMeasurementValues+0x210>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d100      	bne.n	800c3a4 <SGP_GetMeasurementValues+0x80>
 800c3a2:	e0ab      	b.n	800c4fc <SGP_GetMeasurementValues+0x1d8>
 800c3a4:	f7ff ff94 	bl	800c2d0 <SGP_MeasurementReady>
 800c3a8:	1e03      	subs	r3, r0, #0
 800c3aa:	d100      	bne.n	800c3ae <SGP_GetMeasurementValues+0x8a>
 800c3ac:	e0a6      	b.n	800c4fc <SGP_GetMeasurementValues+0x1d8>
 800c3ae:	4b67      	ldr	r3, [pc, #412]	@ (800c54c <SGP_GetMeasurementValues+0x228>)
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	4053      	eors	r3, r2
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d100      	bne.n	800c3be <SGP_GetMeasurementValues+0x9a>
 800c3bc:	e09e      	b.n	800c4fc <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800c3be:	4b63      	ldr	r3, [pc, #396]	@ (800c54c <SGP_GetMeasurementValues+0x228>)
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800c3c4:	4b62      	ldr	r3, [pc, #392]	@ (800c550 <SGP_GetMeasurementValues+0x22c>)
 800c3c6:	2203      	movs	r2, #3
 800c3c8:	0019      	movs	r1, r3
 800c3ca:	2059      	movs	r0, #89	@ 0x59
 800c3cc:	f7ff feb0 	bl	800c130 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800c3d0:	4b5f      	ldr	r3, [pc, #380]	@ (800c550 <SGP_GetMeasurementValues+0x22c>)
 800c3d2:	2203      	movs	r2, #3
 800c3d4:	2103      	movs	r1, #3
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	f000 f918 	bl	800c60c <CheckCRC>
 800c3dc:	0003      	movs	r3, r0
 800c3de:	001a      	movs	r2, r3
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	4053      	eors	r3, r2
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d02a      	beq.n	800c440 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800c3ea:	4a5a      	ldr	r2, [pc, #360]	@ (800c554 <SGP_GetMeasurementValues+0x230>)
 800c3ec:	4b5a      	ldr	r3, [pc, #360]	@ (800c558 <SGP_GetMeasurementValues+0x234>)
 800c3ee:	0019      	movs	r1, r3
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	f002 fe0d 	bl	800f010 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800c3f6:	4a59      	ldr	r2, [pc, #356]	@ (800c55c <SGP_GetMeasurementValues+0x238>)
 800c3f8:	4b59      	ldr	r3, [pc, #356]	@ (800c560 <SGP_GetMeasurementValues+0x23c>)
 800c3fa:	0019      	movs	r1, r3
 800c3fc:	2002      	movs	r0, #2
 800c3fe:	f002 fe07 	bl	800f010 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800c402:	230f      	movs	r3, #15
 800c404:	18fb      	adds	r3, r7, r3
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	e012      	b.n	800c432 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800c40c:	240f      	movs	r4, #15
 800c40e:	193b      	adds	r3, r7, r4
 800c410:	7818      	ldrb	r0, [r3, #0]
 800c412:	193b      	adds	r3, r7, r4
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	4a4e      	ldr	r2, [pc, #312]	@ (800c550 <SGP_GetMeasurementValues+0x22c>)
 800c418:	5cd3      	ldrb	r3, [r2, r3]
 800c41a:	4a52      	ldr	r2, [pc, #328]	@ (800c564 <SGP_GetMeasurementValues+0x240>)
 800c41c:	4952      	ldr	r1, [pc, #328]	@ (800c568 <SGP_GetMeasurementValues+0x244>)
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	0003      	movs	r3, r0
 800c422:	2003      	movs	r0, #3
 800c424:	f002 fdf4 	bl	800f010 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800c428:	193b      	adds	r3, r7, r4
 800c42a:	781a      	ldrb	r2, [r3, #0]
 800c42c:	193b      	adds	r3, r7, r4
 800c42e:	3201      	adds	r2, #1
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	230f      	movs	r3, #15
 800c434:	18fb      	adds	r3, r7, r3
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d9e7      	bls.n	800c40c <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e075      	b.n	800c52c <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800c440:	f003 fa2a 	bl	800f898 <HAL_GetTick>
 800c444:	0003      	movs	r3, r0
 800c446:	22fa      	movs	r2, #250	@ 0xfa
 800c448:	0092      	lsls	r2, r2, #2
 800c44a:	189a      	adds	r2, r3, r2
 800c44c:	4b47      	ldr	r3, [pc, #284]	@ (800c56c <SGP_GetMeasurementValues+0x248>)
 800c44e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800c450:	f7ff ff5a 	bl	800c308 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800c454:	4b46      	ldr	r3, [pc, #280]	@ (800c570 <SGP_GetMeasurementValues+0x24c>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	3301      	adds	r3, #1
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	4b44      	ldr	r3, [pc, #272]	@ (800c570 <SGP_GetMeasurementValues+0x24c>)
 800c45e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800c460:	4b43      	ldr	r3, [pc, #268]	@ (800c570 <SGP_GetMeasurementValues+0x24c>)
 800c462:	781a      	ldrb	r2, [r3, #0]
 800c464:	4b43      	ldr	r3, [pc, #268]	@ (800c574 <SGP_GetMeasurementValues+0x250>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d347      	bcc.n	800c4fc <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800c46c:	4b38      	ldr	r3, [pc, #224]	@ (800c550 <SGP_GetMeasurementValues+0x22c>)
 800c46e:	785b      	ldrb	r3, [r3, #1]
 800c470:	021b      	lsls	r3, r3, #8
 800c472:	b21a      	sxth	r2, r3
 800c474:	4b36      	ldr	r3, [pc, #216]	@ (800c550 <SGP_GetMeasurementValues+0x22c>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	b21b      	sxth	r3, r3
 800c47a:	4313      	orrs	r3, r2
 800c47c:	b21a      	sxth	r2, r3
 800c47e:	240c      	movs	r4, #12
 800c480:	193b      	adds	r3, r7, r4
 800c482:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800c488:	193b      	adds	r3, r7, r4
 800c48a:	8819      	ldrh	r1, [r3, #0]
 800c48c:	2308      	movs	r3, #8
 800c48e:	18fa      	adds	r2, r7, r3
 800c490:	4b39      	ldr	r3, [pc, #228]	@ (800c578 <SGP_GetMeasurementValues+0x254>)
 800c492:	0018      	movs	r0, r3
 800c494:	f7fe fe88 	bl	800b1a8 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800c49e:	4b37      	ldr	r3, [pc, #220]	@ (800c57c <SGP_GetMeasurementValues+0x258>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	4b35      	ldr	r3, [pc, #212]	@ (800c57c <SGP_GetMeasurementValues+0x258>)
 800c4a8:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800c4aa:	4b34      	ldr	r3, [pc, #208]	@ (800c57c <SGP_GetMeasurementValues+0x258>)
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d10d      	bne.n	800c4ce <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800c4b2:	193b      	adds	r3, r7, r4
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	4a32      	ldr	r2, [pc, #200]	@ (800c580 <SGP_GetMeasurementValues+0x25c>)
 800c4b8:	492b      	ldr	r1, [pc, #172]	@ (800c568 <SGP_GetMeasurementValues+0x244>)
 800c4ba:	2003      	movs	r0, #3
 800c4bc:	f002 fda8 	bl	800f010 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	4a30      	ldr	r2, [pc, #192]	@ (800c584 <SGP_GetMeasurementValues+0x260>)
 800c4c4:	4928      	ldr	r1, [pc, #160]	@ (800c568 <SGP_GetMeasurementValues+0x244>)
 800c4c6:	2003      	movs	r0, #3
 800c4c8:	f002 fda2 	bl	800f010 <CreateLine>
 800c4cc:	e006      	b.n	800c4dc <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800c4ce:	4b2b      	ldr	r3, [pc, #172]	@ (800c57c <SGP_GetMeasurementValues+0x258>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	2b0b      	cmp	r3, #11
 800c4d4:	d102      	bne.n	800c4dc <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800c4d6:	4b29      	ldr	r3, [pc, #164]	@ (800c57c <SGP_GetMeasurementValues+0x258>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	0018      	movs	r0, r3
 800c4e2:	f001 fd45 	bl	800df70 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800c4e6:	4b22      	ldr	r3, [pc, #136]	@ (800c570 <SGP_GetMeasurementValues+0x24c>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800c4ec:	4b13      	ldr	r3, [pc, #76]	@ (800c53c <SGP_GetMeasurementValues+0x218>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800c4f2:	4b11      	ldr	r3, [pc, #68]	@ (800c538 <SGP_GetMeasurementValues+0x214>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	701a      	strb	r2, [r3, #0]
      return true;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e017      	b.n	800c52c <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800c4fc:	f7ff fef6 	bl	800c2ec <SGP_MeasurementDone>
 800c500:	1e03      	subs	r3, r0, #0
 800c502:	d012      	beq.n	800c52a <SGP_GetMeasurementValues+0x206>
 800c504:	4b0b      	ldr	r3, [pc, #44]	@ (800c534 <SGP_GetMeasurementValues+0x210>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00e      	beq.n	800c52a <SGP_GetMeasurementValues+0x206>
 800c50c:	4b0f      	ldr	r3, [pc, #60]	@ (800c54c <SGP_GetMeasurementValues+0x228>)
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00a      	beq.n	800c52a <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800c514:	4a1c      	ldr	r2, [pc, #112]	@ (800c588 <SGP_GetMeasurementValues+0x264>)
 800c516:	4b14      	ldr	r3, [pc, #80]	@ (800c568 <SGP_GetMeasurementValues+0x244>)
 800c518:	0019      	movs	r1, r3
 800c51a:	2003      	movs	r0, #3
 800c51c:	f002 fd78 	bl	800f010 <CreateLine>
    SGP_StartMeasurement();
 800c520:	f7ff fe90 	bl	800c244 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800c524:	4b04      	ldr	r3, [pc, #16]	@ (800c538 <SGP_GetMeasurementValues+0x214>)
 800c526:	2200      	movs	r2, #0
 800c528:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	0018      	movs	r0, r3
 800c52e:	46bd      	mov	sp, r7
 800c530:	b005      	add	sp, #20
 800c532:	bd90      	pop	{r4, r7, pc}
 800c534:	20000de8 	.word	0x20000de8
 800c538:	20000e95 	.word	0x20000e95
 800c53c:	20000e94 	.word	0x20000e94
 800c540:	2000009c 	.word	0x2000009c
 800c544:	200000b0 	.word	0x200000b0
 800c548:	20000094 	.word	0x20000094
 800c54c:	20000de9 	.word	0x20000de9
 800c550:	20000dd8 	.word	0x20000dd8
 800c554:	08025d98 	.word	0x08025d98
 800c558:	08025dc0 	.word	0x08025dc0
 800c55c:	08025dc4 	.word	0x08025dc4
 800c560:	08025de4 	.word	0x08025de4
 800c564:	08025de8 	.word	0x08025de8
 800c568:	08025e08 	.word	0x08025e08
 800c56c:	200000ac 	.word	0x200000ac
 800c570:	20000de1 	.word	0x20000de1
 800c574:	200000a6 	.word	0x200000a6
 800c578:	20000dec 	.word	0x20000dec
 800c57c:	20000de2 	.word	0x20000de2
 800c580:	08025e0c 	.word	0x08025e0c
 800c584:	08025e28 	.word	0x08025e28
 800c588:	08025e44 	.word	0x08025e44

0800c58c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c592:	4b1a      	ldr	r3, [pc, #104]	@ (800c5fc <SGP_DeviceConnected+0x70>)
 800c594:	2202      	movs	r2, #2
 800c596:	0019      	movs	r1, r3
 800c598:	2059      	movs	r0, #89	@ 0x59
 800c59a:	f7ff fde7 	bl	800c16c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800c59e:	2001      	movs	r0, #1
 800c5a0:	f003 f984 	bl	800f8ac <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800c5a4:	4b16      	ldr	r3, [pc, #88]	@ (800c600 <SGP_DeviceConnected+0x74>)
 800c5a6:	2209      	movs	r2, #9
 800c5a8:	0019      	movs	r1, r3
 800c5aa:	2059      	movs	r0, #89	@ 0x59
 800c5ac:	f7ff fdc0 	bl	800c130 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800c5b0:	1dfb      	adds	r3, r7, #7
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	701a      	strb	r2, [r3, #0]
 800c5b6:	e011      	b.n	800c5dc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800c5b8:	1dfb      	adds	r3, r7, #7
 800c5ba:	7818      	ldrb	r0, [r3, #0]
 800c5bc:	1dfb      	adds	r3, r7, #7
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	4a0f      	ldr	r2, [pc, #60]	@ (800c600 <SGP_DeviceConnected+0x74>)
 800c5c2:	5cd3      	ldrb	r3, [r2, r3]
 800c5c4:	4a0f      	ldr	r2, [pc, #60]	@ (800c604 <SGP_DeviceConnected+0x78>)
 800c5c6:	4910      	ldr	r1, [pc, #64]	@ (800c608 <SGP_DeviceConnected+0x7c>)
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	0003      	movs	r3, r0
 800c5cc:	2002      	movs	r0, #2
 800c5ce:	f002 fd1f 	bl	800f010 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800c5d2:	1dfb      	adds	r3, r7, #7
 800c5d4:	781a      	ldrb	r2, [r3, #0]
 800c5d6:	1dfb      	adds	r3, r7, #7
 800c5d8:	3201      	adds	r2, #1
 800c5da:	701a      	strb	r2, [r3, #0]
 800c5dc:	1dfb      	adds	r3, r7, #7
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b08      	cmp	r3, #8
 800c5e2:	d9e9      	bls.n	800c5b8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800c5e4:	4b06      	ldr	r3, [pc, #24]	@ (800c600 <SGP_DeviceConnected+0x74>)
 800c5e6:	2203      	movs	r2, #3
 800c5e8:	2109      	movs	r1, #9
 800c5ea:	0018      	movs	r0, r3
 800c5ec:	f000 f80e 	bl	800c60c <CheckCRC>
 800c5f0:	0003      	movs	r3, r0
}
 800c5f2:	0018      	movs	r0, r3
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	b002      	add	sp, #8
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	46c0      	nop			@ (mov r8, r8)
 800c5fc:	20000090 	.word	0x20000090
 800c600:	20000dd8 	.word	0x20000dd8
 800c604:	08025e64 	.word	0x08025e64
 800c608:	08025de4 	.word	0x08025de4

0800c60c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c60e:	b08f      	sub	sp, #60	@ 0x3c
 800c610:	af00      	add	r7, sp, #0
 800c612:	6278      	str	r0, [r7, #36]	@ 0x24
 800c614:	0008      	movs	r0, r1
 800c616:	0011      	movs	r1, r2
 800c618:	2323      	movs	r3, #35	@ 0x23
 800c61a:	18fb      	adds	r3, r7, r3
 800c61c:	1c02      	adds	r2, r0, #0
 800c61e:	701a      	strb	r2, [r3, #0]
 800c620:	2322      	movs	r3, #34	@ 0x22
 800c622:	18fb      	adds	r3, r7, r3
 800c624:	1c0a      	adds	r2, r1, #0
 800c626:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800c628:	2317      	movs	r3, #23
 800c62a:	2220      	movs	r2, #32
 800c62c:	189b      	adds	r3, r3, r2
 800c62e:	19db      	adds	r3, r3, r7
 800c630:	2200      	movs	r2, #0
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	e09f      	b.n	800c776 <CheckCRC+0x16a>
 800c636:	466b      	mov	r3, sp
 800c638:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800c63a:	2322      	movs	r3, #34	@ 0x22
 800c63c:	18fb      	adds	r3, r7, r3
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	001a      	movs	r2, r3
 800c642:	3a01      	subs	r2, #1
 800c644:	633a      	str	r2, [r7, #48]	@ 0x30
 800c646:	60bb      	str	r3, [r7, #8]
 800c648:	2200      	movs	r2, #0
 800c64a:	60fa      	str	r2, [r7, #12]
 800c64c:	68b8      	ldr	r0, [r7, #8]
 800c64e:	68f9      	ldr	r1, [r7, #12]
 800c650:	0002      	movs	r2, r0
 800c652:	0f52      	lsrs	r2, r2, #29
 800c654:	000c      	movs	r4, r1
 800c656:	00e4      	lsls	r4, r4, #3
 800c658:	61fc      	str	r4, [r7, #28]
 800c65a:	69fc      	ldr	r4, [r7, #28]
 800c65c:	4314      	orrs	r4, r2
 800c65e:	61fc      	str	r4, [r7, #28]
 800c660:	0002      	movs	r2, r0
 800c662:	00d2      	lsls	r2, r2, #3
 800c664:	61ba      	str	r2, [r7, #24]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	2200      	movs	r2, #0
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	6838      	ldr	r0, [r7, #0]
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	0002      	movs	r2, r0
 800c672:	0f52      	lsrs	r2, r2, #29
 800c674:	000c      	movs	r4, r1
 800c676:	00e4      	lsls	r4, r4, #3
 800c678:	617c      	str	r4, [r7, #20]
 800c67a:	697c      	ldr	r4, [r7, #20]
 800c67c:	4314      	orrs	r4, r2
 800c67e:	617c      	str	r4, [r7, #20]
 800c680:	0002      	movs	r2, r0
 800c682:	00d2      	lsls	r2, r2, #3
 800c684:	613a      	str	r2, [r7, #16]
 800c686:	3307      	adds	r3, #7
 800c688:	08db      	lsrs	r3, r3, #3
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	466a      	mov	r2, sp
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	469d      	mov	sp, r3
 800c692:	466b      	mov	r3, sp
 800c694:	3300      	adds	r3, #0
 800c696:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800c698:	2316      	movs	r3, #22
 800c69a:	2220      	movs	r2, #32
 800c69c:	189b      	adds	r3, r3, r2
 800c69e:	19db      	adds	r3, r3, r7
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	e01e      	b.n	800c6e4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800c6a6:	2317      	movs	r3, #23
 800c6a8:	2220      	movs	r2, #32
 800c6aa:	189b      	adds	r3, r3, r2
 800c6ac:	19db      	adds	r3, r3, r7
 800c6ae:	781a      	ldrb	r2, [r3, #0]
 800c6b0:	2116      	movs	r1, #22
 800c6b2:	2320      	movs	r3, #32
 800c6b4:	18cb      	adds	r3, r1, r3
 800c6b6:	19db      	adds	r3, r3, r7
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	18d3      	adds	r3, r2, r3
 800c6bc:	001a      	movs	r2, r3
 800c6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c0:	189a      	adds	r2, r3, r2
 800c6c2:	0008      	movs	r0, r1
 800c6c4:	2320      	movs	r3, #32
 800c6c6:	18cb      	adds	r3, r1, r3
 800c6c8:	19db      	adds	r3, r3, r7
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	7811      	ldrb	r1, [r2, #0]
 800c6ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6d0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800c6d2:	2320      	movs	r3, #32
 800c6d4:	18c3      	adds	r3, r0, r3
 800c6d6:	19db      	adds	r3, r3, r7
 800c6d8:	781a      	ldrb	r2, [r3, #0]
 800c6da:	2320      	movs	r3, #32
 800c6dc:	18c3      	adds	r3, r0, r3
 800c6de:	19db      	adds	r3, r3, r7
 800c6e0:	3201      	adds	r2, #1
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	2316      	movs	r3, #22
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	189b      	adds	r3, r3, r2
 800c6ea:	19da      	adds	r2, r3, r7
 800c6ec:	2322      	movs	r3, #34	@ 0x22
 800c6ee:	18fb      	adds	r3, r7, r3
 800c6f0:	7812      	ldrb	r2, [r2, #0]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d3d6      	bcc.n	800c6a6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800c6f8:	2417      	movs	r4, #23
 800c6fa:	2320      	movs	r3, #32
 800c6fc:	18e3      	adds	r3, r4, r3
 800c6fe:	19db      	adds	r3, r3, r7
 800c700:	781a      	ldrb	r2, [r3, #0]
 800c702:	2322      	movs	r3, #34	@ 0x22
 800c704:	18fb      	adds	r3, r7, r3
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	18d3      	adds	r3, r2, r3
 800c70a:	3b01      	subs	r3, #1
 800c70c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c70e:	18d2      	adds	r2, r2, r3
 800c710:	250b      	movs	r5, #11
 800c712:	2320      	movs	r3, #32
 800c714:	18eb      	adds	r3, r5, r3
 800c716:	19db      	adds	r3, r3, r7
 800c718:	7812      	ldrb	r2, [r2, #0]
 800c71a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800c71c:	2322      	movs	r3, #34	@ 0x22
 800c71e:	18fb      	adds	r3, r7, r3
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	3b01      	subs	r3, #1
 800c724:	b2da      	uxtb	r2, r3
 800c726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c728:	0011      	movs	r1, r2
 800c72a:	0018      	movs	r0, r3
 800c72c:	f000 f838 	bl	800c7a0 <CalculateCRC>
 800c730:	0003      	movs	r3, r0
 800c732:	001a      	movs	r2, r3
 800c734:	2320      	movs	r3, #32
 800c736:	18eb      	adds	r3, r5, r3
 800c738:	19db      	adds	r3, r3, r7
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d00c      	beq.n	800c75a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800c740:	2320      	movs	r3, #32
 800c742:	18e3      	adds	r3, r4, r3
 800c744:	19db      	adds	r3, r3, r7
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	4a13      	ldr	r2, [pc, #76]	@ (800c798 <CheckCRC+0x18c>)
 800c74c:	4913      	ldr	r1, [pc, #76]	@ (800c79c <CheckCRC+0x190>)
 800c74e:	2001      	movs	r0, #1
 800c750:	f002 fc5e 	bl	800f010 <CreateLine>
      return false;
 800c754:	2300      	movs	r3, #0
 800c756:	46b5      	mov	sp, r6
 800c758:	e019      	b.n	800c78e <CheckCRC+0x182>
 800c75a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800c75c:	2217      	movs	r2, #23
 800c75e:	2320      	movs	r3, #32
 800c760:	18d3      	adds	r3, r2, r3
 800c762:	19db      	adds	r3, r3, r7
 800c764:	2120      	movs	r1, #32
 800c766:	1852      	adds	r2, r2, r1
 800c768:	19d1      	adds	r1, r2, r7
 800c76a:	2222      	movs	r2, #34	@ 0x22
 800c76c:	18ba      	adds	r2, r7, r2
 800c76e:	7809      	ldrb	r1, [r1, #0]
 800c770:	7812      	ldrb	r2, [r2, #0]
 800c772:	188a      	adds	r2, r1, r2
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	2317      	movs	r3, #23
 800c778:	2220      	movs	r2, #32
 800c77a:	189b      	adds	r3, r3, r2
 800c77c:	19da      	adds	r2, r3, r7
 800c77e:	2323      	movs	r3, #35	@ 0x23
 800c780:	18fb      	adds	r3, r7, r3
 800c782:	7812      	ldrb	r2, [r2, #0]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	429a      	cmp	r2, r3
 800c788:	d200      	bcs.n	800c78c <CheckCRC+0x180>
 800c78a:	e754      	b.n	800c636 <CheckCRC+0x2a>
    }
  }
  return true;
 800c78c:	2301      	movs	r3, #1
}
 800c78e:	0018      	movs	r0, r3
 800c790:	46bd      	mov	sp, r7
 800c792:	b00f      	add	sp, #60	@ 0x3c
 800c794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c796:	46c0      	nop			@ (mov r8, r8)
 800c798:	08025e84 	.word	0x08025e84
 800c79c:	08025dc0 	.word	0x08025dc0

0800c7a0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	000a      	movs	r2, r1
 800c7aa:	1cfb      	adds	r3, r7, #3
 800c7ac:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800c7ae:	230f      	movs	r3, #15
 800c7b0:	18fb      	adds	r3, r7, r3
 800c7b2:	22ff      	movs	r2, #255	@ 0xff
 800c7b4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800c7b6:	230e      	movs	r3, #14
 800c7b8:	18fb      	adds	r3, r7, r3
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	701a      	strb	r2, [r3, #0]
 800c7be:	e037      	b.n	800c830 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800c7c0:	230e      	movs	r3, #14
 800c7c2:	18fb      	adds	r3, r7, r3
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	18d3      	adds	r3, r2, r3
 800c7ca:	7819      	ldrb	r1, [r3, #0]
 800c7cc:	220f      	movs	r2, #15
 800c7ce:	18bb      	adds	r3, r7, r2
 800c7d0:	18ba      	adds	r2, r7, r2
 800c7d2:	7812      	ldrb	r2, [r2, #0]
 800c7d4:	404a      	eors	r2, r1
 800c7d6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800c7d8:	230d      	movs	r3, #13
 800c7da:	18fb      	adds	r3, r7, r3
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	e01b      	b.n	800c81a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800c7e2:	210f      	movs	r1, #15
 800c7e4:	187b      	adds	r3, r7, r1
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	b25b      	sxtb	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	da09      	bge.n	800c802 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800c7ee:	187b      	adds	r3, r7, r1
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	b25b      	sxtb	r3, r3
 800c7f6:	2231      	movs	r2, #49	@ 0x31
 800c7f8:	4053      	eors	r3, r2
 800c7fa:	b25a      	sxtb	r2, r3
 800c7fc:	187b      	adds	r3, r7, r1
 800c7fe:	701a      	strb	r2, [r3, #0]
 800c800:	e005      	b.n	800c80e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800c802:	230f      	movs	r3, #15
 800c804:	18fa      	adds	r2, r7, r3
 800c806:	18fb      	adds	r3, r7, r3
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	18db      	adds	r3, r3, r3
 800c80c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800c80e:	210d      	movs	r1, #13
 800c810:	187b      	adds	r3, r7, r1
 800c812:	781a      	ldrb	r2, [r3, #0]
 800c814:	187b      	adds	r3, r7, r1
 800c816:	3201      	adds	r2, #1
 800c818:	701a      	strb	r2, [r3, #0]
 800c81a:	230d      	movs	r3, #13
 800c81c:	18fb      	adds	r3, r7, r3
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b07      	cmp	r3, #7
 800c822:	d9de      	bls.n	800c7e2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800c824:	210e      	movs	r1, #14
 800c826:	187b      	adds	r3, r7, r1
 800c828:	781a      	ldrb	r2, [r3, #0]
 800c82a:	187b      	adds	r3, r7, r1
 800c82c:	3201      	adds	r2, #1
 800c82e:	701a      	strb	r2, [r3, #0]
 800c830:	230e      	movs	r3, #14
 800c832:	18fa      	adds	r2, r7, r3
 800c834:	1cfb      	adds	r3, r7, #3
 800c836:	7812      	ldrb	r2, [r2, #0]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d3c0      	bcc.n	800c7c0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800c83e:	230f      	movs	r3, #15
 800c840:	18fb      	adds	r3, r7, r3
 800c842:	781b      	ldrb	r3, [r3, #0]
}
 800c844:	0018      	movs	r0, r3
 800c846:	46bd      	mov	sp, r7
 800c848:	b004      	add	sp, #16
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4936      	ldr	r1, [pc, #216]	@ (800c934 <SGP_SetHT+0xe8>)
 800c85c:	1c18      	adds	r0, r3, #0
 800c85e:	f7f4 f82f 	bl	80008c0 <__aeabi_fadd>
 800c862:	1c03      	adds	r3, r0, #0
 800c864:	4934      	ldr	r1, [pc, #208]	@ (800c938 <SGP_SetHT+0xec>)
 800c866:	1c18      	adds	r0, r3, #0
 800c868:	f7f4 f9b4 	bl	8000bd4 <__aeabi_fdiv>
 800c86c:	1c03      	adds	r3, r0, #0
 800c86e:	4933      	ldr	r1, [pc, #204]	@ (800c93c <SGP_SetHT+0xf0>)
 800c870:	1c18      	adds	r0, r3, #0
 800c872:	f7f4 fb95 	bl	8000fa0 <__aeabi_fmul>
 800c876:	1c03      	adds	r3, r0, #0
 800c878:	1c18      	adds	r0, r3, #0
 800c87a:	f7f3 fecf 	bl	800061c <__aeabi_f2uiz>
 800c87e:	0003      	movs	r3, r0
 800c880:	b29a      	uxth	r2, r3
 800c882:	4b2f      	ldr	r3, [pc, #188]	@ (800c940 <SGP_SetHT+0xf4>)
 800c884:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	492e      	ldr	r1, [pc, #184]	@ (800c944 <SGP_SetHT+0xf8>)
 800c88c:	1c18      	adds	r0, r3, #0
 800c88e:	f7f4 f9a1 	bl	8000bd4 <__aeabi_fdiv>
 800c892:	1c03      	adds	r3, r0, #0
 800c894:	4929      	ldr	r1, [pc, #164]	@ (800c93c <SGP_SetHT+0xf0>)
 800c896:	1c18      	adds	r0, r3, #0
 800c898:	f7f4 fb82 	bl	8000fa0 <__aeabi_fmul>
 800c89c:	1c03      	adds	r3, r0, #0
 800c89e:	1c18      	adds	r0, r3, #0
 800c8a0:	f7f3 febc 	bl	800061c <__aeabi_f2uiz>
 800c8a4:	0003      	movs	r3, r0
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	4b27      	ldr	r3, [pc, #156]	@ (800c948 <SGP_SetHT+0xfc>)
 800c8aa:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800c8ac:	4b26      	ldr	r3, [pc, #152]	@ (800c948 <SGP_SetHT+0xfc>)
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	0a1b      	lsrs	r3, r3, #8
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	4b25      	ldr	r3, [pc, #148]	@ (800c94c <SGP_SetHT+0x100>)
 800c8b8:	709a      	strb	r2, [r3, #2]
 800c8ba:	4b24      	ldr	r3, [pc, #144]	@ (800c94c <SGP_SetHT+0x100>)
 800c8bc:	789a      	ldrb	r2, [r3, #2]
 800c8be:	210c      	movs	r1, #12
 800c8c0:	187b      	adds	r3, r7, r1
 800c8c2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800c8c4:	4b20      	ldr	r3, [pc, #128]	@ (800c948 <SGP_SetHT+0xfc>)
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	4b20      	ldr	r3, [pc, #128]	@ (800c94c <SGP_SetHT+0x100>)
 800c8cc:	70da      	strb	r2, [r3, #3]
 800c8ce:	4b1f      	ldr	r3, [pc, #124]	@ (800c94c <SGP_SetHT+0x100>)
 800c8d0:	78da      	ldrb	r2, [r3, #3]
 800c8d2:	187b      	adds	r3, r7, r1
 800c8d4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800c8d6:	187b      	adds	r3, r7, r1
 800c8d8:	2102      	movs	r1, #2
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f7ff ff60 	bl	800c7a0 <CalculateCRC>
 800c8e0:	0003      	movs	r3, r0
 800c8e2:	001a      	movs	r2, r3
 800c8e4:	4b19      	ldr	r3, [pc, #100]	@ (800c94c <SGP_SetHT+0x100>)
 800c8e6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800c8e8:	4b15      	ldr	r3, [pc, #84]	@ (800c940 <SGP_SetHT+0xf4>)
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	0a1b      	lsrs	r3, r3, #8
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	4b16      	ldr	r3, [pc, #88]	@ (800c94c <SGP_SetHT+0x100>)
 800c8f4:	715a      	strb	r2, [r3, #5]
 800c8f6:	4b15      	ldr	r3, [pc, #84]	@ (800c94c <SGP_SetHT+0x100>)
 800c8f8:	795a      	ldrb	r2, [r3, #5]
 800c8fa:	2108      	movs	r1, #8
 800c8fc:	187b      	adds	r3, r7, r1
 800c8fe:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800c900:	4b0f      	ldr	r3, [pc, #60]	@ (800c940 <SGP_SetHT+0xf4>)
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	b2da      	uxtb	r2, r3
 800c906:	4b11      	ldr	r3, [pc, #68]	@ (800c94c <SGP_SetHT+0x100>)
 800c908:	719a      	strb	r2, [r3, #6]
 800c90a:	4b10      	ldr	r3, [pc, #64]	@ (800c94c <SGP_SetHT+0x100>)
 800c90c:	799a      	ldrb	r2, [r3, #6]
 800c90e:	187b      	adds	r3, r7, r1
 800c910:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800c912:	187b      	adds	r3, r7, r1
 800c914:	2102      	movs	r1, #2
 800c916:	0018      	movs	r0, r3
 800c918:	f7ff ff42 	bl	800c7a0 <CalculateCRC>
 800c91c:	0003      	movs	r3, r0
 800c91e:	001a      	movs	r2, r3
 800c920:	4b0a      	ldr	r3, [pc, #40]	@ (800c94c <SGP_SetHT+0x100>)
 800c922:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800c924:	4b0a      	ldr	r3, [pc, #40]	@ (800c950 <SGP_SetHT+0x104>)
 800c926:	2201      	movs	r2, #1
 800c928:	701a      	strb	r2, [r3, #0]
}
 800c92a:	46c0      	nop			@ (mov r8, r8)
 800c92c:	46bd      	mov	sp, r7
 800c92e:	b004      	add	sp, #16
 800c930:	bd80      	pop	{r7, pc}
 800c932:	46c0      	nop			@ (mov r8, r8)
 800c934:	42340000 	.word	0x42340000
 800c938:	432f0000 	.word	0x432f0000
 800c93c:	477fff00 	.word	0x477fff00
 800c940:	20000e92 	.word	0x20000e92
 800c944:	42c80000 	.word	0x42c80000
 800c948:	20000e90 	.word	0x20000e90
 800c94c:	2000009c 	.word	0x2000009c
 800c950:	20000e94 	.word	0x20000e94

0800c954 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800c954:	b580      	push	{r7, lr}
 800c956:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800c958:	4a09      	ldr	r2, [pc, #36]	@ (800c980 <SGP_SoftReset+0x2c>)
 800c95a:	4b0a      	ldr	r3, [pc, #40]	@ (800c984 <SGP_SoftReset+0x30>)
 800c95c:	0019      	movs	r1, r3
 800c95e:	2003      	movs	r0, #3
 800c960:	f002 fb56 	bl	800f010 <CreateLine>
  SGP_TurnHeaterOff();
 800c964:	f7ff fcd0 	bl	800c308 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800c968:	200a      	movs	r0, #10
 800c96a:	f002 ff9f 	bl	800f8ac <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c96e:	4b06      	ldr	r3, [pc, #24]	@ (800c988 <SGP_SoftReset+0x34>)
 800c970:	2202      	movs	r2, #2
 800c972:	0019      	movs	r1, r3
 800c974:	2059      	movs	r0, #89	@ 0x59
 800c976:	f7ff fbf9 	bl	800c16c <WriteRegister>
}
 800c97a:	46c0      	nop			@ (mov r8, r8)
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	08025f2c 	.word	0x08025f2c
 800c984:	08025e08 	.word	0x08025e08
 800c988:	200000a4 	.word	0x200000a4

0800c98c <ResetVOCresult>:

void ResetVOCresult(void) {
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c990:	4b02      	ldr	r3, [pc, #8]	@ (800c99c <ResetVOCresult+0x10>)
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
}
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	20000e98 	.word	0x20000e98

0800c9a0 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c9a4:	4b37      	ldr	r3, [pc, #220]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b07      	cmp	r3, #7
 800c9aa:	d85f      	bhi.n	800ca6c <SGP_Upkeep+0xcc>
 800c9ac:	009a      	lsls	r2, r3, #2
 800c9ae:	4b36      	ldr	r3, [pc, #216]	@ (800ca88 <SGP_Upkeep+0xe8>)
 800c9b0:	18d3      	adds	r3, r2, r3
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c9b6:	4a35      	ldr	r2, [pc, #212]	@ (800ca8c <SGP_Upkeep+0xec>)
 800c9b8:	4b35      	ldr	r3, [pc, #212]	@ (800ca90 <SGP_Upkeep+0xf0>)
 800c9ba:	0019      	movs	r1, r3
 800c9bc:	2003      	movs	r0, #3
 800c9be:	f002 fb27 	bl	800f010 <CreateLine>
    break;
 800c9c2:	e05a      	b.n	800ca7a <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c9c4:	f7ff ffe2 	bl	800c98c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c9c8:	4b2e      	ldr	r3, [pc, #184]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	701a      	strb	r2, [r3, #0]
    break;
 800c9ce:	e054      	b.n	800ca7a <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c9d0:	f7ff fc38 	bl	800c244 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c9d4:	f001 f966 	bl	800dca4 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c9d8:	4b2a      	ldr	r3, [pc, #168]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800c9da:	2202      	movs	r2, #2
 800c9dc:	701a      	strb	r2, [r3, #0]
    break;
 800c9de:	e04c      	b.n	800ca7a <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c9e0:	4b2c      	ldr	r3, [pc, #176]	@ (800ca94 <SGP_Upkeep+0xf4>)
 800c9e2:	0018      	movs	r0, r3
 800c9e4:	f7ff fc9e 	bl	800c324 <SGP_GetMeasurementValues>
 800c9e8:	1e03      	subs	r3, r0, #0
 800c9ea:	d043      	beq.n	800ca74 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c9ec:	4b25      	ldr	r3, [pc, #148]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800c9ee:	2203      	movs	r2, #3
 800c9f0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c9f2:	e03f      	b.n	800ca74 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c9f4:	4b27      	ldr	r3, [pc, #156]	@ (800ca94 <SGP_Upkeep+0xf4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	0018      	movs	r0, r3
 800c9fc:	f7f6 fee6 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800ca00:	4b20      	ldr	r3, [pc, #128]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800ca02:	2206      	movs	r2, #6
 800ca04:	701a      	strb	r2, [r3, #0]
    break;
 800ca06:	e038      	b.n	800ca7a <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800ca08:	4b1e      	ldr	r3, [pc, #120]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800ca0a:	2207      	movs	r2, #7
 800ca0c:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800ca0e:	4b22      	ldr	r3, [pc, #136]	@ (800ca98 <SGP_Upkeep+0xf8>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d112      	bne.n	800ca3c <SGP_Upkeep+0x9c>
 800ca16:	4b21      	ldr	r3, [pc, #132]	@ (800ca9c <SGP_Upkeep+0xfc>)
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	4053      	eors	r3, r2
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d00b      	beq.n	800ca3c <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800ca24:	4b1e      	ldr	r3, [pc, #120]	@ (800caa0 <SGP_Upkeep+0x100>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d004      	beq.n	800ca36 <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800ca2c:	f7ff ff92 	bl	800c954 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800ca30:	2000      	movs	r0, #0
 800ca32:	f7fc fa19 	bl	8008e68 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800ca36:	4b1a      	ldr	r3, [pc, #104]	@ (800caa0 <SGP_Upkeep+0x100>)
 800ca38:	2201      	movs	r2, #1
 800ca3a:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800ca3c:	f002 ff2c 	bl	800f898 <HAL_GetTick>
 800ca40:	0003      	movs	r3, r0
 800ca42:	22c8      	movs	r2, #200	@ 0xc8
 800ca44:	0092      	lsls	r2, r2, #2
 800ca46:	189a      	adds	r2, r3, r2
 800ca48:	4b16      	ldr	r3, [pc, #88]	@ (800caa4 <SGP_Upkeep+0x104>)
 800ca4a:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800ca4c:	f001 f942 	bl	800dcd4 <ResetMeasurementIndicator>
  break;
 800ca50:	e013      	b.n	800ca7a <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800ca52:	4b14      	ldr	r3, [pc, #80]	@ (800caa4 <SGP_Upkeep+0x104>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	0018      	movs	r0, r3
 800ca58:	f002 fa84 	bl	800ef64 <TimestampIsReached>
 800ca5c:	1e03      	subs	r3, r0, #0
 800ca5e:	d00b      	beq.n	800ca78 <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800ca60:	f7ff fbd8 	bl	800c214 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800ca64:	4b07      	ldr	r3, [pc, #28]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ca6a:	e005      	b.n	800ca78 <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800ca6c:	4b05      	ldr	r3, [pc, #20]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]
    break;
 800ca72:	e002      	b.n	800ca7a <SGP_Upkeep+0xda>
    break;
 800ca74:	46c0      	nop			@ (mov r8, r8)
 800ca76:	e000      	b.n	800ca7a <SGP_Upkeep+0xda>
    break;
 800ca78:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800ca7a:	4b02      	ldr	r3, [pc, #8]	@ (800ca84 <SGP_Upkeep+0xe4>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
}
 800ca7e:	0018      	movs	r0, r3
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20000e9c 	.word	0x20000e9c
 800ca88:	080266a4 	.word	0x080266a4
 800ca8c:	08025f44 	.word	0x08025f44
 800ca90:	08025e08 	.word	0x08025e08
 800ca94:	20000e98 	.word	0x20000e98
 800ca98:	20000de2 	.word	0x20000de2
 800ca9c:	20001d39 	.word	0x20001d39
 800caa0:	20000dcc 	.word	0x20000dcc
 800caa4:	20000de4 	.word	0x20000de4

0800caa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	0002      	movs	r2, r0
 800cab0:	1dfb      	adds	r3, r7, #7
 800cab2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800cab4:	1dfb      	adds	r3, r7, #7
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	2b7f      	cmp	r3, #127	@ 0x7f
 800caba:	d809      	bhi.n	800cad0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cabc:	1dfb      	adds	r3, r7, #7
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	001a      	movs	r2, r3
 800cac2:	231f      	movs	r3, #31
 800cac4:	401a      	ands	r2, r3
 800cac6:	4b04      	ldr	r3, [pc, #16]	@ (800cad8 <__NVIC_EnableIRQ+0x30>)
 800cac8:	2101      	movs	r1, #1
 800caca:	4091      	lsls	r1, r2
 800cacc:	000a      	movs	r2, r1
 800cace:	601a      	str	r2, [r3, #0]
  }
}
 800cad0:	46c0      	nop			@ (mov r8, r8)
 800cad2:	46bd      	mov	sp, r7
 800cad4:	b002      	add	sp, #8
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	e000e100 	.word	0xe000e100

0800cadc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	0002      	movs	r2, r0
 800cae4:	1dfb      	adds	r3, r7, #7
 800cae6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800cae8:	1dfb      	adds	r3, r7, #7
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b7f      	cmp	r3, #127	@ 0x7f
 800caee:	d810      	bhi.n	800cb12 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800caf0:	1dfb      	adds	r3, r7, #7
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	001a      	movs	r2, r3
 800caf6:	231f      	movs	r3, #31
 800caf8:	4013      	ands	r3, r2
 800cafa:	4908      	ldr	r1, [pc, #32]	@ (800cb1c <__NVIC_DisableIRQ+0x40>)
 800cafc:	2201      	movs	r2, #1
 800cafe:	409a      	lsls	r2, r3
 800cb00:	0013      	movs	r3, r2
 800cb02:	2280      	movs	r2, #128	@ 0x80
 800cb04:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cb06:	f3bf 8f4f 	dsb	sy
}
 800cb0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800cb0c:	f3bf 8f6f 	isb	sy
}
 800cb10:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800cb12:	46c0      	nop			@ (mov r8, r8)
 800cb14:	46bd      	mov	sp, r7
 800cb16:	b002      	add	sp, #8
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	46c0      	nop			@ (mov r8, r8)
 800cb1c:	e000e100 	.word	0xe000e100

0800cb20 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800cb20:	b5b0      	push	{r4, r5, r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af02      	add	r7, sp, #8
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	0008      	movs	r0, r1
 800cb2a:	0011      	movs	r1, r2
 800cb2c:	1cfb      	adds	r3, r7, #3
 800cb2e:	1c02      	adds	r2, r0, #0
 800cb30:	701a      	strb	r2, [r3, #0]
 800cb32:	1cbb      	adds	r3, r7, #2
 800cb34:	1c0a      	adds	r2, r1, #0
 800cb36:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800cb38:	4b5b      	ldr	r3, [pc, #364]	@ (800cca8 <getSoundData+0x188>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	2201      	movs	r2, #1
 800cb40:	4053      	eors	r3, r2
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d107      	bne.n	800cb58 <getSoundData+0x38>
 800cb48:	4b58      	ldr	r3, [pc, #352]	@ (800ccac <getSoundData+0x18c>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2201      	movs	r2, #1
 800cb50:	4053      	eors	r3, r2
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <getSoundData+0x3c>
    {
        return false;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e0a0      	b.n	800cc9e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800cb5c:	4b54      	ldr	r3, [pc, #336]	@ (800ccb0 <getSoundData+0x190>)
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d005      	beq.n	800cb72 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800cb66:	4b53      	ldr	r3, [pc, #332]	@ (800ccb4 <getSoundData+0x194>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	b25b      	sxtb	r3, r3
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	f7ff ffb5 	bl	800cadc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800cb72:	f3bf 8f4f 	dsb	sy
}
 800cb76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800cb78:	f3bf 8f6f 	isb	sy
}
 800cb7c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800cb7e:	1cfb      	adds	r3, r7, #3
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d04c      	beq.n	800cc20 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800cb86:	4b4c      	ldr	r3, [pc, #304]	@ (800ccb8 <getSoundData+0x198>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d11b      	bne.n	800cbc6 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e00e      	b.n	800cbbe <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	18d3      	adds	r3, r2, r3
 800cba6:	3302      	adds	r3, #2
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	18d3      	adds	r3, r2, r3
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	617b      	str	r3, [r7, #20]
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	2b05      	cmp	r3, #5
 800cbc2:	d9ed      	bls.n	800cba0 <getSoundData+0x80>
 800cbc4:	e02c      	b.n	800cc20 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	1c59      	adds	r1, r3, #1
 800cbcc:	4b3b      	ldr	r3, [pc, #236]	@ (800ccbc <getSoundData+0x19c>)
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	4b3b      	ldr	r3, [pc, #236]	@ (800ccc0 <getSoundData+0x1a0>)
 800cbd2:	681c      	ldr	r4, [r3, #0]
 800cbd4:	4b38      	ldr	r3, [pc, #224]	@ (800ccb8 <getSoundData+0x198>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	0023      	movs	r3, r4
 800cbdc:	f000 fde8 	bl	800d7b0 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	613b      	str	r3, [r7, #16]
 800cbe4:	e019      	b.n	800cc1a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	18d3      	adds	r3, r2, r3
 800cbec:	1c98      	adds	r0, r3, #2
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800cbf6:	4b33      	ldr	r3, [pc, #204]	@ (800ccc4 <getSoundData+0x1a4>)
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	0092      	lsls	r2, r2, #2
 800cbfc:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800cbfe:	4b32      	ldr	r3, [pc, #200]	@ (800ccc8 <getSoundData+0x1a8>)
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	0092      	lsls	r2, r2, #2
 800cc04:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800cc06:	4b2c      	ldr	r3, [pc, #176]	@ (800ccb8 <getSoundData+0x198>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	0013      	movs	r3, r2
 800cc0e:	0022      	movs	r2, r4
 800cc10:	f000 fdce 	bl	800d7b0 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	3301      	adds	r3, #1
 800cc18:	613b      	str	r3, [r7, #16]
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	2b05      	cmp	r3, #5
 800cc1e:	d9e2      	bls.n	800cbe6 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800cc20:	1cbb      	adds	r3, r7, #2
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d028      	beq.n	800cc7a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800cc28:	240e      	movs	r4, #14
 800cc2a:	193b      	adds	r3, r7, r4
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800cc30:	250d      	movs	r5, #13
 800cc32:	197b      	adds	r3, r7, r5
 800cc34:	2200      	movs	r2, #0
 800cc36:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800cc38:	4b24      	ldr	r3, [pc, #144]	@ (800cccc <getSoundData+0x1ac>)
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	4924      	ldr	r1, [pc, #144]	@ (800ccd0 <getSoundData+0x1b0>)
 800cc3e:	197b      	adds	r3, r7, r5
 800cc40:	193a      	adds	r2, r7, r4
 800cc42:	f000 fe59 	bl	800d8f8 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800cc46:	193b      	adds	r3, r7, r4
 800cc48:	881a      	ldrh	r2, [r3, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	21ff      	movs	r1, #255	@ 0xff
 800cc4e:	4011      	ands	r1, r2
 800cc50:	000c      	movs	r4, r1
 800cc52:	7b99      	ldrb	r1, [r3, #14]
 800cc54:	2000      	movs	r0, #0
 800cc56:	4001      	ands	r1, r0
 800cc58:	1c08      	adds	r0, r1, #0
 800cc5a:	1c21      	adds	r1, r4, #0
 800cc5c:	4301      	orrs	r1, r0
 800cc5e:	7399      	strb	r1, [r3, #14]
 800cc60:	0a12      	lsrs	r2, r2, #8
 800cc62:	b290      	uxth	r0, r2
 800cc64:	7bda      	ldrb	r2, [r3, #15]
 800cc66:	2100      	movs	r1, #0
 800cc68:	400a      	ands	r2, r1
 800cc6a:	1c11      	adds	r1, r2, #0
 800cc6c:	1c02      	adds	r2, r0, #0
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800cc72:	197b      	adds	r3, r7, r5
 800cc74:	781a      	ldrb	r2, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800cc7a:	f000 f86f 	bl	800cd5c <micSettlingComplete>
 800cc7e:	0003      	movs	r3, r0
 800cc80:	001a      	movs	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800cc86:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb0 <getSoundData+0x190>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d005      	beq.n	800cc9c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800cc90:	4b08      	ldr	r3, [pc, #32]	@ (800ccb4 <getSoundData+0x194>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	b25b      	sxtb	r3, r3
 800cc96:	0018      	movs	r0, r3
 800cc98:	f7ff ff06 	bl	800caa8 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800cc9c:	2301      	movs	r3, #1
}
 800cc9e:	0018      	movs	r0, r3
 800cca0:	46bd      	mov	sp, r7
 800cca2:	b006      	add	sp, #24
 800cca4:	bdb0      	pop	{r4, r5, r7, pc}
 800cca6:	46c0      	nop			@ (mov r8, r8)
 800cca8:	20000e9e 	.word	0x20000e9e
 800ccac:	20000ea1 	.word	0x20000ea1
 800ccb0:	20000ea0 	.word	0x20000ea0
 800ccb4:	200018f0 	.word	0x200018f0
 800ccb8:	2000192c 	.word	0x2000192c
 800ccbc:	200018f4 	.word	0x200018f4
 800ccc0:	200018f8 	.word	0x200018f8
 800ccc4:	200018fc 	.word	0x200018fc
 800ccc8:	20001914 	.word	0x20001914
 800cccc:	20000ea8 	.word	0x20000ea8
 800ccd0:	3b5c7333 	.word	0x3b5c7333

0800ccd4 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	001a      	movs	r2, r3
 800cce2:	1cfb      	adds	r3, r7, #3
 800cce4:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800cce6:	4b09      	ldr	r3, [pc, #36]	@ (800cd0c <soundInit+0x38>)
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800ccec:	4b08      	ldr	r3, [pc, #32]	@ (800cd10 <soundInit+0x3c>)
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800ccf2:	4b08      	ldr	r3, [pc, #32]	@ (800cd14 <soundInit+0x40>)
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800ccf8:	4b07      	ldr	r3, [pc, #28]	@ (800cd18 <soundInit+0x44>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	569a      	ldrsb	r2, [r3, r2]
 800ccfe:	4b06      	ldr	r3, [pc, #24]	@ (800cd18 <soundInit+0x44>)
 800cd00:	701a      	strb	r2, [r3, #0]

    return true;
 800cd02:	2301      	movs	r3, #1
}
 800cd04:	0018      	movs	r0, r3
 800cd06:	46bd      	mov	sp, r7
 800cd08:	b004      	add	sp, #16
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	200018e8 	.word	0x200018e8
 800cd10:	200018e4 	.word	0x200018e4
 800cd14:	200018ec 	.word	0x200018ec
 800cd18:	200018f0 	.word	0x200018f0

0800cd1c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800cd20:	4b02      	ldr	r3, [pc, #8]	@ (800cd2c <clearMaximumAmplitude+0x10>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
}
 800cd26:	46c0      	nop			@ (mov r8, r8)
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	20000ea8 	.word	0x20000ea8

0800cd30 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800cd34:	4b08      	ldr	r3, [pc, #32]	@ (800cd58 <startMicSettlingPeriod+0x28>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800cd3e:	4b06      	ldr	r3, [pc, #24]	@ (800cd58 <startMicSettlingPeriod+0x28>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	0018      	movs	r0, r3
 800cd44:	f00a fb6c 	bl	8017420 <HAL_TIM_Base_Start>
 800cd48:	1e03      	subs	r3, r0, #0
 800cd4a:	d001      	beq.n	800cd50 <startMicSettlingPeriod+0x20>
    {
        return false;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	e000      	b.n	800cd52 <startMicSettlingPeriod+0x22>
    }
    return true;
 800cd50:	2301      	movs	r3, #1
}
 800cd52:	0018      	movs	r0, r3
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	200018e4 	.word	0x200018e4

0800cd5c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800cd62:	4b0e      	ldr	r3, [pc, #56]	@ (800cd9c <micSettlingComplete+0x40>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	401a      	ands	r2, r3
 800cd6e:	1dfb      	adds	r3, r7, #7
 800cd70:	3a01      	subs	r2, #1
 800cd72:	4251      	negs	r1, r2
 800cd74:	414a      	adcs	r2, r1
 800cd76:	701a      	strb	r2, [r3, #0]
    if (complete)
 800cd78:	1dfb      	adds	r3, r7, #7
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d007      	beq.n	800cd90 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800cd80:	4b06      	ldr	r3, [pc, #24]	@ (800cd9c <micSettlingComplete+0x40>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	0018      	movs	r0, r3
 800cd86:	f00a fb95 	bl	80174b4 <HAL_TIM_Base_Stop>
      DataReady = true;
 800cd8a:	4b05      	ldr	r3, [pc, #20]	@ (800cda0 <micSettlingComplete+0x44>)
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800cd90:	1dfb      	adds	r3, r7, #7
 800cd92:	781b      	ldrb	r3, [r3, #0]
}
 800cd94:	0018      	movs	r0, r3
 800cd96:	46bd      	mov	sp, r7
 800cd98:	b002      	add	sp, #8
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	200018e4 	.word	0x200018e4
 800cda0:	20000e9d 	.word	0x20000e9d

0800cda4 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	0002      	movs	r2, r0
 800cdac:	1dfb      	adds	r3, r7, #7
 800cdae:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800cdb0:	4b29      	ldr	r3, [pc, #164]	@ (800ce58 <enableMicrophone+0xb4>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	1dfa      	adds	r2, r7, #7
 800cdb8:	7812      	ldrb	r2, [r2, #0]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d101      	bne.n	800cdc2 <enableMicrophone+0x1e>
    {
        return true;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e045      	b.n	800ce4e <enableMicrophone+0xaa>
    }
    if (bEnable)
 800cdc2:	1dfb      	adds	r3, r7, #7
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d025      	beq.n	800ce16 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800cdca:	f7ff ffb1 	bl	800cd30 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800cdce:	4b23      	ldr	r3, [pc, #140]	@ (800ce5c <enableMicrophone+0xb8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2280      	movs	r2, #128	@ 0x80
 800cdd4:	0092      	lsls	r2, r2, #2
 800cdd6:	4922      	ldr	r1, [pc, #136]	@ (800ce60 <enableMicrophone+0xbc>)
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f006 fd8b 	bl	80138f4 <HAL_I2S_Receive_DMA>
 800cdde:	1e03      	subs	r3, r0, #0
 800cde0:	d001      	beq.n	800cde6 <enableMicrophone+0x42>
        {
            return false;
 800cde2:	2300      	movs	r3, #0
 800cde4:	e033      	b.n	800ce4e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800cde6:	f7ff ff99 	bl	800cd1c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800cdea:	4b1e      	ldr	r3, [pc, #120]	@ (800ce64 <enableMicrophone+0xc0>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800cdf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ce68 <enableMicrophone+0xc4>)
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	b25b      	sxtb	r3, r3
 800cdf6:	0018      	movs	r0, r3
 800cdf8:	f7ff fe56 	bl	800caa8 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800cdfc:	4b1b      	ldr	r3, [pc, #108]	@ (800ce6c <enableMicrophone+0xc8>)
 800cdfe:	2201      	movs	r2, #1
 800ce00:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800ce02:	4b15      	ldr	r3, [pc, #84]	@ (800ce58 <enableMicrophone+0xb4>)
 800ce04:	2201      	movs	r2, #1
 800ce06:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ce08:	4b19      	ldr	r3, [pc, #100]	@ (800ce70 <enableMicrophone+0xcc>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800ce0e:	4b19      	ldr	r3, [pc, #100]	@ (800ce74 <enableMicrophone+0xd0>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	e01a      	b.n	800ce4c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800ce16:	4b14      	ldr	r3, [pc, #80]	@ (800ce68 <enableMicrophone+0xc4>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	b25b      	sxtb	r3, r3
 800ce1c:	0018      	movs	r0, r3
 800ce1e:	f7ff fe5d 	bl	800cadc <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800ce22:	4b12      	ldr	r3, [pc, #72]	@ (800ce6c <enableMicrophone+0xc8>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ce28:	4b11      	ldr	r3, [pc, #68]	@ (800ce70 <enableMicrophone+0xcc>)
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800ce2e:	4b11      	ldr	r3, [pc, #68]	@ (800ce74 <enableMicrophone+0xd0>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800ce34:	4b09      	ldr	r3, [pc, #36]	@ (800ce5c <enableMicrophone+0xb8>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	0018      	movs	r0, r3
 800ce3a:	f006 fe1d 	bl	8013a78 <HAL_I2S_DMAStop>
 800ce3e:	1e03      	subs	r3, r0, #0
 800ce40:	d001      	beq.n	800ce46 <enableMicrophone+0xa2>
        {
            return false;
 800ce42:	2300      	movs	r3, #0
 800ce44:	e003      	b.n	800ce4e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800ce46:	4b04      	ldr	r3, [pc, #16]	@ (800ce58 <enableMicrophone+0xb4>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800ce4c:	2301      	movs	r3, #1
}
 800ce4e:	0018      	movs	r0, r3
 800ce50:	46bd      	mov	sp, r7
 800ce52:	b002      	add	sp, #8
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	46c0      	nop			@ (mov r8, r8)
 800ce58:	20000e9e 	.word	0x20000e9e
 800ce5c:	200018e8 	.word	0x200018e8
 800ce60:	20000ee4 	.word	0x20000ee4
 800ce64:	20000ea4 	.word	0x20000ea4
 800ce68:	200018f0 	.word	0x200018f0
 800ce6c:	20000ea0 	.word	0x20000ea0
 800ce70:	20000e9f 	.word	0x20000e9f
 800ce74:	20000ea1 	.word	0x20000ea1

0800ce78 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800ce7c:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb0 <startSPLcalculation+0x38>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2201      	movs	r2, #1
 800ce84:	4053      	eors	r3, r2
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d001      	beq.n	800ce90 <startSPLcalculation+0x18>
    {
        return false;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	e00c      	b.n	800ceaa <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800ce90:	4b08      	ldr	r3, [pc, #32]	@ (800ceb4 <startSPLcalculation+0x3c>)
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <startSPLcalculation+0x26>
    {
        return true;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e005      	b.n	800ceaa <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800ce9e:	f000 fb63 	bl	800d568 <resetSPLstate>
    SPLcalcEnabled = true;
 800cea2:	4b04      	ldr	r3, [pc, #16]	@ (800ceb4 <startSPLcalculation+0x3c>)
 800cea4:	2201      	movs	r2, #1
 800cea6:	701a      	strb	r2, [r3, #0]
    return true;
 800cea8:	2301      	movs	r3, #1
}
 800ceaa:	0018      	movs	r0, r3
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20000e9e 	.word	0x20000e9e
 800ceb4:	20000e9f 	.word	0x20000e9f

0800ceb8 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800cec0:	4b05      	ldr	r3, [pc, #20]	@ (800ced8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d102      	bne.n	800ced0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800ceca:	2000      	movs	r0, #0
 800cecc:	f000 f81a 	bl	800cf04 <processHalfDMAbuffer>
  }
}
 800ced0:	46c0      	nop			@ (mov r8, r8)
 800ced2:	46bd      	mov	sp, r7
 800ced4:	b002      	add	sp, #8
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	200018e8 	.word	0x200018e8

0800cedc <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800cee4:	4b06      	ldr	r3, [pc, #24]	@ (800cf00 <HAL_I2S_RxCpltCallback+0x24>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d104      	bne.n	800cef8 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800ceee:	2380      	movs	r3, #128	@ 0x80
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	0018      	movs	r0, r3
 800cef4:	f000 f806 	bl	800cf04 <processHalfDMAbuffer>
  }
}
 800cef8:	46c0      	nop			@ (mov r8, r8)
 800cefa:	46bd      	mov	sp, r7
 800cefc:	b002      	add	sp, #8
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	200018e8 	.word	0x200018e8

0800cf04 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	005a      	lsls	r2, r3, #1
 800cf10:	4b15      	ldr	r3, [pc, #84]	@ (800cf68 <processHalfDMAbuffer+0x64>)
 800cf12:	18d3      	adds	r3, r2, r3
 800cf14:	4a15      	ldr	r2, [pc, #84]	@ (800cf6c <processHalfDMAbuffer+0x68>)
 800cf16:	2180      	movs	r1, #128	@ 0x80
 800cf18:	0089      	lsls	r1, r1, #2
 800cf1a:	0018      	movs	r0, r3
 800cf1c:	f000 fd35 	bl	800d98a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800cf20:	4b13      	ldr	r3, [pc, #76]	@ (800cf70 <processHalfDMAbuffer+0x6c>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	425a      	negs	r2, r3
 800cf26:	4153      	adcs	r3, r2
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	4b11      	ldr	r3, [pc, #68]	@ (800cf70 <processHalfDMAbuffer+0x6c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2109      	movs	r1, #9
 800cf30:	4299      	cmp	r1, r3
 800cf32:	419b      	sbcs	r3, r3
 800cf34:	425b      	negs	r3, r3
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	480c      	ldr	r0, [pc, #48]	@ (800cf6c <processHalfDMAbuffer+0x68>)
 800cf3a:	2180      	movs	r1, #128	@ 0x80
 800cf3c:	f000 fb46 	bl	800d5cc <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800cf40:	4b0b      	ldr	r3, [pc, #44]	@ (800cf70 <processHalfDMAbuffer+0x6c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b09      	cmp	r3, #9
 800cf46:	d804      	bhi.n	800cf52 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800cf48:	4b09      	ldr	r3, [pc, #36]	@ (800cf70 <processHalfDMAbuffer+0x6c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	1c5a      	adds	r2, r3, #1
 800cf4e:	4b08      	ldr	r3, [pc, #32]	@ (800cf70 <processHalfDMAbuffer+0x6c>)
 800cf50:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800cf52:	4b08      	ldr	r3, [pc, #32]	@ (800cf74 <processHalfDMAbuffer+0x70>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800cf5c:	f000 f826 	bl	800cfac <calculateSPLQ31>
    }
}
 800cf60:	46c0      	nop			@ (mov r8, r8)
 800cf62:	46bd      	mov	sp, r7
 800cf64:	b002      	add	sp, #8
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20000ee4 	.word	0x20000ee4
 800cf6c:	200016e4 	.word	0x200016e4
 800cf70:	20000ea4 	.word	0x20000ea4
 800cf74:	20000e9f 	.word	0x20000e9f

0800cf78 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800cf80:	4b07      	ldr	r3, [pc, #28]	@ (800cfa0 <HAL_I2S_ErrorCallback+0x28>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d106      	bne.n	800cf98 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800cf8a:	4a06      	ldr	r2, [pc, #24]	@ (800cfa4 <HAL_I2S_ErrorCallback+0x2c>)
 800cf8c:	239e      	movs	r3, #158	@ 0x9e
 800cf8e:	0059      	lsls	r1, r3, #1
 800cf90:	4b05      	ldr	r3, [pc, #20]	@ (800cfa8 <HAL_I2S_ErrorCallback+0x30>)
 800cf92:	0018      	movs	r0, r3
 800cf94:	f002 f8f4 	bl	800f180 <errorHandler>
  }
}
 800cf98:	46c0      	nop			@ (mov r8, r8)
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	b002      	add	sp, #8
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	200018e8 	.word	0x200018e8
 800cfa4:	08025f6c 	.word	0x08025f6c
 800cfa8:	08026794 	.word	0x08026794

0800cfac <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800cfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfae:	b0b3      	sub	sp, #204	@ 0xcc
 800cfb0:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800cfb2:	4ae2      	ldr	r2, [pc, #904]	@ (800d33c <calculateSPLQ31+0x390>)
 800cfb4:	2338      	movs	r3, #56	@ 0x38
 800cfb6:	2030      	movs	r0, #48	@ 0x30
 800cfb8:	181b      	adds	r3, r3, r0
 800cfba:	19d9      	adds	r1, r3, r7
 800cfbc:	2334      	movs	r3, #52	@ 0x34
 800cfbe:	181b      	adds	r3, r3, r0
 800cfc0:	19d8      	adds	r0, r3, r7
 800cfc2:	2380      	movs	r3, #128	@ 0x80
 800cfc4:	f000 fc36 	bl	800d834 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800cfc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	da00      	bge.n	800cfd0 <calculateSPLQ31+0x24>
 800cfce:	3301      	adds	r3, #1
 800cfd0:	105b      	asrs	r3, r3, #1
 800cfd2:	001a      	movs	r2, r3
 800cfd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	da00      	bge.n	800cfdc <calculateSPLQ31+0x30>
 800cfda:	3301      	adds	r3, #1
 800cfdc:	105b      	asrs	r3, r3, #1
 800cfde:	18d3      	adds	r3, r2, r3
 800cfe0:	2188      	movs	r1, #136	@ 0x88
 800cfe2:	187a      	adds	r2, r7, r1
 800cfe4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800cfe6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cfe8:	187b      	adds	r3, r7, r1
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	1ad3      	subs	r3, r2, r3
 800cfee:	3304      	adds	r3, #4
 800cff0:	2284      	movs	r2, #132	@ 0x84
 800cff2:	18b9      	adds	r1, r7, r2
 800cff4:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800cff6:	18bb      	adds	r3, r7, r2
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4ad1      	ldr	r2, [pc, #836]	@ (800d340 <calculateSPLQ31+0x394>)
 800cffc:	0019      	movs	r1, r3
 800cffe:	0010      	movs	r0, r2
 800d000:	f000 fc58 	bl	800d8b4 <getPo2factor>
 800d004:	0003      	movs	r3, r0
 800d006:	2280      	movs	r2, #128	@ 0x80
 800d008:	18ba      	adds	r2, r7, r2
 800d00a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	2284      	movs	r2, #132	@ 0x84
 800d010:	2130      	movs	r1, #48	@ 0x30
 800d012:	1852      	adds	r2, r2, r1
 800d014:	19d2      	adds	r2, r2, r7
 800d016:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800d018:	2300      	movs	r3, #0
 800d01a:	2280      	movs	r2, #128	@ 0x80
 800d01c:	1852      	adds	r2, r2, r1
 800d01e:	19d2      	adds	r2, r2, r7
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	e032      	b.n	800d08a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800d024:	4ac5      	ldr	r2, [pc, #788]	@ (800d33c <calculateSPLQ31+0x390>)
 800d026:	2680      	movs	r6, #128	@ 0x80
 800d028:	2330      	movs	r3, #48	@ 0x30
 800d02a:	18f1      	adds	r1, r6, r3
 800d02c:	19cb      	adds	r3, r1, r7
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	589a      	ldr	r2, [r3, r2]
 800d034:	2188      	movs	r1, #136	@ 0x88
 800d036:	1879      	adds	r1, r7, r1
 800d038:	680b      	ldr	r3, [r1, #0]
 800d03a:	1ad2      	subs	r2, r2, r3
 800d03c:	2180      	movs	r1, #128	@ 0x80
 800d03e:	1879      	adds	r1, r7, r1
 800d040:	680b      	ldr	r3, [r1, #0]
 800d042:	409a      	lsls	r2, r3
 800d044:	0011      	movs	r1, r2
 800d046:	4abf      	ldr	r2, [pc, #764]	@ (800d344 <calculateSPLQ31+0x398>)
 800d048:	2084      	movs	r0, #132	@ 0x84
 800d04a:	2330      	movs	r3, #48	@ 0x30
 800d04c:	18c3      	adds	r3, r0, r3
 800d04e:	19db      	adds	r3, r3, r7
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800d056:	2230      	movs	r2, #48	@ 0x30
 800d058:	1883      	adds	r3, r0, r2
 800d05a:	19db      	adds	r3, r3, r7
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3301      	adds	r3, #1
 800d060:	49b8      	ldr	r1, [pc, #736]	@ (800d344 <calculateSPLQ31+0x398>)
 800d062:	009a      	lsls	r2, r3, #2
 800d064:	2300      	movs	r3, #0
 800d066:	5053      	str	r3, [r2, r1]
        count += 2;
 800d068:	2230      	movs	r2, #48	@ 0x30
 800d06a:	1883      	adds	r3, r0, r2
 800d06c:	19db      	adds	r3, r3, r7
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3302      	adds	r3, #2
 800d072:	0011      	movs	r1, r2
 800d074:	1882      	adds	r2, r0, r2
 800d076:	19d2      	adds	r2, r2, r7
 800d078:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800d07a:	000a      	movs	r2, r1
 800d07c:	18b3      	adds	r3, r6, r2
 800d07e:	19db      	adds	r3, r3, r7
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3301      	adds	r3, #1
 800d084:	18b2      	adds	r2, r6, r2
 800d086:	19d2      	adds	r2, r2, r7
 800d088:	6013      	str	r3, [r2, #0]
 800d08a:	2380      	movs	r3, #128	@ 0x80
 800d08c:	2630      	movs	r6, #48	@ 0x30
 800d08e:	199b      	adds	r3, r3, r6
 800d090:	19db      	adds	r3, r3, r7
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b7f      	cmp	r3, #127	@ 0x7f
 800d096:	d9c5      	bls.n	800d024 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800d098:	4bab      	ldr	r3, [pc, #684]	@ (800d348 <calculateSPLQ31+0x39c>)
 800d09a:	6818      	ldr	r0, [r3, #0]
 800d09c:	49a9      	ldr	r1, [pc, #676]	@ (800d344 <calculateSPLQ31+0x398>)
 800d09e:	2301      	movs	r3, #1
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f011 fa83 	bl	801e5ac <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800d0a6:	4aa9      	ldr	r2, [pc, #676]	@ (800d34c <calculateSPLQ31+0x3a0>)
 800d0a8:	2338      	movs	r3, #56	@ 0x38
 800d0aa:	199b      	adds	r3, r3, r6
 800d0ac:	19d9      	adds	r1, r3, r7
 800d0ae:	2334      	movs	r3, #52	@ 0x34
 800d0b0:	199b      	adds	r3, r3, r6
 800d0b2:	19d8      	adds	r0, r3, r7
 800d0b4:	237e      	movs	r3, #126	@ 0x7e
 800d0b6:	f000 fbbd 	bl	800d834 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800d0ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d0bc:	2380      	movs	r3, #128	@ 0x80
 800d0be:	061b      	lsls	r3, r3, #24
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d101      	bne.n	800d0c8 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800d0c4:	4b9e      	ldr	r3, [pc, #632]	@ (800d340 <calculateSPLQ31+0x394>)
 800d0c6:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800d0c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d0ca:	2380      	movs	r3, #128	@ 0x80
 800d0cc:	061b      	lsls	r3, r3, #24
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d101      	bne.n	800d0d6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800d0d2:	4b9b      	ldr	r3, [pc, #620]	@ (800d340 <calculateSPLQ31+0x394>)
 800d0d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800d0d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0d8:	17da      	asrs	r2, r3, #31
 800d0da:	189b      	adds	r3, r3, r2
 800d0dc:	4053      	eors	r3, r2
 800d0de:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800d0e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0e2:	17da      	asrs	r2, r3, #31
 800d0e4:	189b      	adds	r3, r3, r2
 800d0e6:	4053      	eors	r3, r2
 800d0e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800d0ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d0ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	dd01      	ble.n	800d0f6 <calculateSPLQ31+0x14a>
    {
        max = min;
 800d0f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800d0f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0f8:	3304      	adds	r3, #4
 800d0fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800d0fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d0fe:	4a90      	ldr	r2, [pc, #576]	@ (800d340 <calculateSPLQ31+0x394>)
 800d100:	0019      	movs	r1, r3
 800d102:	0010      	movs	r0, r2
 800d104:	f000 fbd6 	bl	800d8b4 <getPo2factor>
 800d108:	0003      	movs	r3, r0
 800d10a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800d10c:	2302      	movs	r3, #2
 800d10e:	22ac      	movs	r2, #172	@ 0xac
 800d110:	18ba      	adds	r2, r7, r2
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	e012      	b.n	800d13c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800d116:	4a8b      	ldr	r2, [pc, #556]	@ (800d344 <calculateSPLQ31+0x398>)
 800d118:	20ac      	movs	r0, #172	@ 0xac
 800d11a:	183b      	adds	r3, r7, r0
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	589a      	ldr	r2, [r3, r2]
 800d122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d124:	409a      	lsls	r2, r3
 800d126:	0011      	movs	r1, r2
 800d128:	4a86      	ldr	r2, [pc, #536]	@ (800d344 <calculateSPLQ31+0x398>)
 800d12a:	183b      	adds	r3, r7, r0
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800d132:	183b      	adds	r3, r7, r0
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3301      	adds	r3, #1
 800d138:	183a      	adds	r2, r7, r0
 800d13a:	6013      	str	r3, [r2, #0]
 800d13c:	23ac      	movs	r3, #172	@ 0xac
 800d13e:	18fb      	adds	r3, r7, r3
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b7f      	cmp	r3, #127	@ 0x7f
 800d144:	d9e7      	bls.n	800d116 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800d146:	4b7d      	ldr	r3, [pc, #500]	@ (800d33c <calculateSPLQ31+0x390>)
 800d148:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800d14a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800d14c:	4b7d      	ldr	r3, [pc, #500]	@ (800d344 <calculateSPLQ31+0x398>)
 800d14e:	2240      	movs	r2, #64	@ 0x40
 800d150:	0018      	movs	r0, r3
 800d152:	f011 ffd5 	bl	801f100 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800d156:	2330      	movs	r3, #48	@ 0x30
 800d158:	18fb      	adds	r3, r7, r3
 800d15a:	0018      	movs	r0, r3
 800d15c:	2330      	movs	r3, #48	@ 0x30
 800d15e:	001a      	movs	r2, r3
 800d160:	2100      	movs	r1, #0
 800d162:	f013 fe13 	bl	8020d8c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800d166:	2200      	movs	r2, #0
 800d168:	2300      	movs	r3, #0
 800d16a:	21a0      	movs	r1, #160	@ 0xa0
 800d16c:	1879      	adds	r1, r7, r1
 800d16e:	600a      	str	r2, [r1, #0]
 800d170:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800d172:	2301      	movs	r3, #1
 800d174:	229c      	movs	r2, #156	@ 0x9c
 800d176:	18ba      	adds	r2, r7, r2
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	e05b      	b.n	800d234 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800d17c:	269c      	movs	r6, #156	@ 0x9c
 800d17e:	19bb      	adds	r3, r7, r6
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	009a      	lsls	r2, r3, #2
 800d184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d186:	189b      	adds	r3, r3, r2
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	613b      	str	r3, [r7, #16]
 800d18c:	17db      	asrs	r3, r3, #31
 800d18e:	617b      	str	r3, [r7, #20]
 800d190:	4b6f      	ldr	r3, [pc, #444]	@ (800d350 <calculateSPLQ31+0x3a4>)
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	19bb      	adds	r3, r7, r6
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	18d3      	adds	r3, r2, r3
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	60bb      	str	r3, [r7, #8]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	60fb      	str	r3, [r7, #12]
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6938      	ldr	r0, [r7, #16]
 800d1aa:	6979      	ldr	r1, [r7, #20]
 800d1ac:	f7f3 fa08 	bl	80005c0 <__aeabi_lmul>
 800d1b0:	0002      	movs	r2, r0
 800d1b2:	000b      	movs	r3, r1
 800d1b4:	0010      	movs	r0, r2
 800d1b6:	0019      	movs	r1, r3
 800d1b8:	23a0      	movs	r3, #160	@ 0xa0
 800d1ba:	18fa      	adds	r2, r7, r3
 800d1bc:	6853      	ldr	r3, [r2, #4]
 800d1be:	6812      	ldr	r2, [r2, #0]
 800d1c0:	1812      	adds	r2, r2, r0
 800d1c2:	414b      	adcs	r3, r1
 800d1c4:	21a0      	movs	r1, #160	@ 0xa0
 800d1c6:	1879      	adds	r1, r7, r1
 800d1c8:	600a      	str	r2, [r1, #0]
 800d1ca:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800d1cc:	4b61      	ldr	r3, [pc, #388]	@ (800d354 <calculateSPLQ31+0x3a8>)
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	19bb      	adds	r3, r7, r6
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	18d3      	adds	r3, r2, r3
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b06      	cmp	r3, #6
 800d1da:	d025      	beq.n	800d228 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800d1dc:	4b5d      	ldr	r3, [pc, #372]	@ (800d354 <calculateSPLQ31+0x3a8>)
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	19bb      	adds	r3, r7, r6
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	18d3      	adds	r3, r2, r3
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	2230      	movs	r2, #48	@ 0x30
 800d1ea:	18ba      	adds	r2, r7, r2
 800d1ec:	00db      	lsls	r3, r3, #3
 800d1ee:	18d3      	adds	r3, r2, r3
 800d1f0:	6818      	ldr	r0, [r3, #0]
 800d1f2:	6859      	ldr	r1, [r3, #4]
 800d1f4:	19bb      	adds	r3, r7, r6
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	009a      	lsls	r2, r3, #2
 800d1fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1fc:	189b      	adds	r3, r3, r2
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	603b      	str	r3, [r7, #0]
 800d202:	17db      	asrs	r3, r3, #31
 800d204:	607b      	str	r3, [r7, #4]
 800d206:	4b53      	ldr	r3, [pc, #332]	@ (800d354 <calculateSPLQ31+0x3a8>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	19be      	adds	r6, r7, r6
 800d20c:	6833      	ldr	r3, [r6, #0]
 800d20e:	18d3      	adds	r3, r2, r3
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	001e      	movs	r6, r3
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	1880      	adds	r0, r0, r2
 800d21a:	4159      	adcs	r1, r3
 800d21c:	2330      	movs	r3, #48	@ 0x30
 800d21e:	18fa      	adds	r2, r7, r3
 800d220:	00f3      	lsls	r3, r6, #3
 800d222:	18d3      	adds	r3, r2, r3
 800d224:	6018      	str	r0, [r3, #0]
 800d226:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800d228:	229c      	movs	r2, #156	@ 0x9c
 800d22a:	18bb      	adds	r3, r7, r2
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	3301      	adds	r3, #1
 800d230:	18ba      	adds	r2, r7, r2
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	239c      	movs	r3, #156	@ 0x9c
 800d236:	18fb      	adds	r3, r7, r3
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b3f      	cmp	r3, #63	@ 0x3f
 800d23c:	d99e      	bls.n	800d17c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800d23e:	2380      	movs	r3, #128	@ 0x80
 800d240:	18fb      	adds	r3, r7, r3
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	001a      	movs	r2, r3
 800d248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d24a:	005b      	lsls	r3, r3, #1
 800d24c:	18d3      	adds	r3, r2, r3
 800d24e:	3b22      	subs	r3, #34	@ 0x22
 800d250:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800d252:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d254:	17da      	asrs	r2, r3, #31
 800d256:	189b      	adds	r3, r3, r2
 800d258:	4053      	eors	r3, r2
 800d25a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800d25c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d25e:	2b00      	cmp	r3, #0
 800d260:	da62      	bge.n	800d328 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800d262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d264:	3b20      	subs	r3, #32
 800d266:	2b00      	cmp	r3, #0
 800d268:	db05      	blt.n	800d276 <calculateSPLQ31+0x2ca>
 800d26a:	22a0      	movs	r2, #160	@ 0xa0
 800d26c:	18ba      	adds	r2, r7, r2
 800d26e:	6812      	ldr	r2, [r2, #0]
 800d270:	409a      	lsls	r2, r3
 800d272:	627a      	str	r2, [r7, #36]	@ 0x24
 800d274:	e010      	b.n	800d298 <calculateSPLQ31+0x2ec>
 800d276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d278:	2220      	movs	r2, #32
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	22a0      	movs	r2, #160	@ 0xa0
 800d27e:	18ba      	adds	r2, r7, r2
 800d280:	6812      	ldr	r2, [r2, #0]
 800d282:	40da      	lsrs	r2, r3
 800d284:	0013      	movs	r3, r2
 800d286:	22a4      	movs	r2, #164	@ 0xa4
 800d288:	18ba      	adds	r2, r7, r2
 800d28a:	6811      	ldr	r1, [r2, #0]
 800d28c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d28e:	4091      	lsls	r1, r2
 800d290:	6279      	str	r1, [r7, #36]	@ 0x24
 800d292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d294:	431a      	orrs	r2, r3
 800d296:	627a      	str	r2, [r7, #36]	@ 0x24
 800d298:	21a0      	movs	r1, #160	@ 0xa0
 800d29a:	187b      	adds	r3, r7, r1
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2a0:	409a      	lsls	r2, r3
 800d2a2:	623a      	str	r2, [r7, #32]
 800d2a4:	6a3b      	ldr	r3, [r7, #32]
 800d2a6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800d2a8:	187a      	adds	r2, r7, r1
 800d2aa:	6013      	str	r3, [r2, #0]
 800d2ac:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	2298      	movs	r2, #152	@ 0x98
 800d2b2:	18ba      	adds	r2, r7, r2
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	e031      	b.n	800d31c <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800d2b8:	2330      	movs	r3, #48	@ 0x30
 800d2ba:	18fa      	adds	r2, r7, r3
 800d2bc:	2398      	movs	r3, #152	@ 0x98
 800d2be:	18fb      	adds	r3, r7, r3
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	18d3      	adds	r3, r2, r3
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d2cc:	3920      	subs	r1, #32
 800d2ce:	2900      	cmp	r1, #0
 800d2d0:	db03      	blt.n	800d2da <calculateSPLQ31+0x32e>
 800d2d2:	0010      	movs	r0, r2
 800d2d4:	4088      	lsls	r0, r1
 800d2d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d2d8:	e00c      	b.n	800d2f4 <calculateSPLQ31+0x348>
 800d2da:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d2dc:	2020      	movs	r0, #32
 800d2de:	1a41      	subs	r1, r0, r1
 800d2e0:	0010      	movs	r0, r2
 800d2e2:	40c8      	lsrs	r0, r1
 800d2e4:	0001      	movs	r1, r0
 800d2e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d2e8:	001c      	movs	r4, r3
 800d2ea:	4084      	lsls	r4, r0
 800d2ec:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800d2ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2f0:	4308      	orrs	r0, r1
 800d2f2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d2f4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d2f6:	0013      	movs	r3, r2
 800d2f8:	408b      	lsls	r3, r1
 800d2fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d2fc:	2330      	movs	r3, #48	@ 0x30
 800d2fe:	18fa      	adds	r2, r7, r3
 800d300:	2098      	movs	r0, #152	@ 0x98
 800d302:	183b      	adds	r3, r7, r0
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	18d3      	adds	r3, r2, r3
 800d30a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d30c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d30e:	6019      	str	r1, [r3, #0]
 800d310:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d312:	183b      	adds	r3, r7, r0
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	3301      	adds	r3, #1
 800d318:	183a      	adds	r2, r7, r0
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	2398      	movs	r3, #152	@ 0x98
 800d31e:	18fb      	adds	r3, r7, r3
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b05      	cmp	r3, #5
 800d324:	d9c8      	bls.n	800d2b8 <calculateSPLQ31+0x30c>
 800d326:	e06b      	b.n	800d400 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800d328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d32a:	3b20      	subs	r3, #32
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	db13      	blt.n	800d358 <calculateSPLQ31+0x3ac>
 800d330:	22a4      	movs	r2, #164	@ 0xa4
 800d332:	18ba      	adds	r2, r7, r2
 800d334:	6812      	ldr	r2, [r2, #0]
 800d336:	40da      	lsrs	r2, r3
 800d338:	61ba      	str	r2, [r7, #24]
 800d33a:	e01e      	b.n	800d37a <calculateSPLQ31+0x3ce>
 800d33c:	200016e4 	.word	0x200016e4
 800d340:	7fffffff 	.word	0x7fffffff
 800d344:	20001930 	.word	0x20001930
 800d348:	200000b4 	.word	0x200000b4
 800d34c:	20001938 	.word	0x20001938
 800d350:	200000b8 	.word	0x200000b8
 800d354:	200000c4 	.word	0x200000c4
 800d358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d35a:	2220      	movs	r2, #32
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	22a4      	movs	r2, #164	@ 0xa4
 800d360:	18ba      	adds	r2, r7, r2
 800d362:	6812      	ldr	r2, [r2, #0]
 800d364:	409a      	lsls	r2, r3
 800d366:	0013      	movs	r3, r2
 800d368:	22a0      	movs	r2, #160	@ 0xa0
 800d36a:	18ba      	adds	r2, r7, r2
 800d36c:	6811      	ldr	r1, [r2, #0]
 800d36e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d370:	40d1      	lsrs	r1, r2
 800d372:	61b9      	str	r1, [r7, #24]
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	431a      	orrs	r2, r3
 800d378:	61ba      	str	r2, [r7, #24]
 800d37a:	23a4      	movs	r3, #164	@ 0xa4
 800d37c:	18fb      	adds	r3, r7, r3
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d382:	40da      	lsrs	r2, r3
 800d384:	61fa      	str	r2, [r7, #28]
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	21a0      	movs	r1, #160	@ 0xa0
 800d38c:	1879      	adds	r1, r7, r1
 800d38e:	600a      	str	r2, [r1, #0]
 800d390:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d392:	2300      	movs	r3, #0
 800d394:	2294      	movs	r2, #148	@ 0x94
 800d396:	18ba      	adds	r2, r7, r2
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	e02c      	b.n	800d3f6 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800d39c:	2330      	movs	r3, #48	@ 0x30
 800d39e:	18fa      	adds	r2, r7, r3
 800d3a0:	2394      	movs	r3, #148	@ 0x94
 800d3a2:	18fb      	adds	r3, r7, r3
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	00db      	lsls	r3, r3, #3
 800d3a8:	18d3      	adds	r3, r2, r3
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d3b0:	3920      	subs	r1, #32
 800d3b2:	2900      	cmp	r1, #0
 800d3b4:	db03      	blt.n	800d3be <calculateSPLQ31+0x412>
 800d3b6:	0018      	movs	r0, r3
 800d3b8:	40c8      	lsrs	r0, r1
 800d3ba:	0004      	movs	r4, r0
 800d3bc:	e00a      	b.n	800d3d4 <calculateSPLQ31+0x428>
 800d3be:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d3c0:	2020      	movs	r0, #32
 800d3c2:	1a41      	subs	r1, r0, r1
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	4088      	lsls	r0, r1
 800d3c8:	0001      	movs	r1, r0
 800d3ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d3cc:	0016      	movs	r6, r2
 800d3ce:	40c6      	lsrs	r6, r0
 800d3d0:	0034      	movs	r4, r6
 800d3d2:	430c      	orrs	r4, r1
 800d3d4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d3d6:	40cb      	lsrs	r3, r1
 800d3d8:	001d      	movs	r5, r3
 800d3da:	2330      	movs	r3, #48	@ 0x30
 800d3dc:	18fa      	adds	r2, r7, r3
 800d3de:	2194      	movs	r1, #148	@ 0x94
 800d3e0:	187b      	adds	r3, r7, r1
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	00db      	lsls	r3, r3, #3
 800d3e6:	18d3      	adds	r3, r2, r3
 800d3e8:	601c      	str	r4, [r3, #0]
 800d3ea:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d3ec:	187b      	adds	r3, r7, r1
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	187a      	adds	r2, r7, r1
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	2394      	movs	r3, #148	@ 0x94
 800d3f8:	18fb      	adds	r3, r7, r3
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b05      	cmp	r3, #5
 800d3fe:	d9cd      	bls.n	800d39c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800d400:	230f      	movs	r3, #15
 800d402:	425d      	negs	r5, r3
 800d404:	2305      	movs	r3, #5
 800d406:	425e      	negs	r6, r3
 800d408:	4b4a      	ldr	r3, [pc, #296]	@ (800d534 <calculateSPLQ31+0x588>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	4b4a      	ldr	r3, [pc, #296]	@ (800d538 <calculateSPLQ31+0x58c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	21a0      	movs	r1, #160	@ 0xa0
 800d416:	1879      	adds	r1, r7, r1
 800d418:	6808      	ldr	r0, [r1, #0]
 800d41a:	6849      	ldr	r1, [r1, #4]
 800d41c:	4c47      	ldr	r4, [pc, #284]	@ (800d53c <calculateSPLQ31+0x590>)
 800d41e:	9403      	str	r4, [sp, #12]
 800d420:	4c47      	ldr	r4, [pc, #284]	@ (800d540 <calculateSPLQ31+0x594>)
 800d422:	9402      	str	r4, [sp, #8]
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	9200      	str	r2, [sp, #0]
 800d428:	0033      	movs	r3, r6
 800d42a:	002a      	movs	r2, r5
 800d42c:	f000 fa86 	bl	800d93c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800d430:	2300      	movs	r3, #0
 800d432:	2290      	movs	r2, #144	@ 0x90
 800d434:	18ba      	adds	r2, r7, r2
 800d436:	6013      	str	r3, [r2, #0]
 800d438:	e026      	b.n	800d488 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800d43a:	2330      	movs	r3, #48	@ 0x30
 800d43c:	18fa      	adds	r2, r7, r3
 800d43e:	2490      	movs	r4, #144	@ 0x90
 800d440:	193b      	adds	r3, r7, r4
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	18d3      	adds	r3, r2, r3
 800d448:	6818      	ldr	r0, [r3, #0]
 800d44a:	6859      	ldr	r1, [r3, #4]
 800d44c:	230f      	movs	r3, #15
 800d44e:	425d      	negs	r5, r3
 800d450:	2305      	movs	r3, #5
 800d452:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800d454:	193b      	adds	r3, r7, r4
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	009a      	lsls	r2, r3, #2
 800d45a:	4b3a      	ldr	r3, [pc, #232]	@ (800d544 <calculateSPLQ31+0x598>)
 800d45c:	18d3      	adds	r3, r2, r3
 800d45e:	193a      	adds	r2, r7, r4
 800d460:	6812      	ldr	r2, [r2, #0]
 800d462:	0094      	lsls	r4, r2, #2
 800d464:	4a38      	ldr	r2, [pc, #224]	@ (800d548 <calculateSPLQ31+0x59c>)
 800d466:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800d468:	9203      	str	r2, [sp, #12]
 800d46a:	9302      	str	r3, [sp, #8]
 800d46c:	2300      	movs	r3, #0
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	2300      	movs	r3, #0
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	0033      	movs	r3, r6
 800d476:	002a      	movs	r2, r5
 800d478:	f000 fa60 	bl	800d93c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800d47c:	2490      	movs	r4, #144	@ 0x90
 800d47e:	193b      	adds	r3, r7, r4
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	193a      	adds	r2, r7, r4
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	2390      	movs	r3, #144	@ 0x90
 800d48a:	18fb      	adds	r3, r7, r3
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b05      	cmp	r3, #5
 800d490:	d9d3      	bls.n	800d43a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800d492:	4b2b      	ldr	r3, [pc, #172]	@ (800d540 <calculateSPLQ31+0x594>)
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	4b2d      	ldr	r3, [pc, #180]	@ (800d54c <calculateSPLQ31+0x5a0>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	18d2      	adds	r2, r2, r3
 800d49c:	4b2b      	ldr	r3, [pc, #172]	@ (800d54c <calculateSPLQ31+0x5a0>)
 800d49e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800d4a0:	4b26      	ldr	r3, [pc, #152]	@ (800d53c <calculateSPLQ31+0x590>)
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	4b2a      	ldr	r3, [pc, #168]	@ (800d550 <calculateSPLQ31+0x5a4>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	18d2      	adds	r2, r2, r3
 800d4aa:	4b29      	ldr	r3, [pc, #164]	@ (800d550 <calculateSPLQ31+0x5a4>)
 800d4ac:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	228c      	movs	r2, #140	@ 0x8c
 800d4b2:	18ba      	adds	r2, r7, r2
 800d4b4:	6013      	str	r3, [r2, #0]
 800d4b6:	e025      	b.n	800d504 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800d4b8:	4b22      	ldr	r3, [pc, #136]	@ (800d544 <calculateSPLQ31+0x598>)
 800d4ba:	208c      	movs	r0, #140	@ 0x8c
 800d4bc:	183a      	adds	r2, r7, r0
 800d4be:	6812      	ldr	r2, [r2, #0]
 800d4c0:	0092      	lsls	r2, r2, #2
 800d4c2:	58d2      	ldr	r2, [r2, r3]
 800d4c4:	4b23      	ldr	r3, [pc, #140]	@ (800d554 <calculateSPLQ31+0x5a8>)
 800d4c6:	1839      	adds	r1, r7, r0
 800d4c8:	6809      	ldr	r1, [r1, #0]
 800d4ca:	0089      	lsls	r1, r1, #2
 800d4cc:	58cb      	ldr	r3, [r1, r3]
 800d4ce:	18d1      	adds	r1, r2, r3
 800d4d0:	4b20      	ldr	r3, [pc, #128]	@ (800d554 <calculateSPLQ31+0x5a8>)
 800d4d2:	183a      	adds	r2, r7, r0
 800d4d4:	6812      	ldr	r2, [r2, #0]
 800d4d6:	0092      	lsls	r2, r2, #2
 800d4d8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800d4da:	4b1b      	ldr	r3, [pc, #108]	@ (800d548 <calculateSPLQ31+0x59c>)
 800d4dc:	183a      	adds	r2, r7, r0
 800d4de:	6812      	ldr	r2, [r2, #0]
 800d4e0:	0092      	lsls	r2, r2, #2
 800d4e2:	58d2      	ldr	r2, [r2, r3]
 800d4e4:	4b1c      	ldr	r3, [pc, #112]	@ (800d558 <calculateSPLQ31+0x5ac>)
 800d4e6:	1839      	adds	r1, r7, r0
 800d4e8:	6809      	ldr	r1, [r1, #0]
 800d4ea:	0089      	lsls	r1, r1, #2
 800d4ec:	58cb      	ldr	r3, [r1, r3]
 800d4ee:	18d1      	adds	r1, r2, r3
 800d4f0:	4b19      	ldr	r3, [pc, #100]	@ (800d558 <calculateSPLQ31+0x5ac>)
 800d4f2:	183a      	adds	r2, r7, r0
 800d4f4:	6812      	ldr	r2, [r2, #0]
 800d4f6:	0092      	lsls	r2, r2, #2
 800d4f8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d4fa:	183b      	adds	r3, r7, r0
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3301      	adds	r3, #1
 800d500:	183a      	adds	r2, r7, r0
 800d502:	6013      	str	r3, [r2, #0]
 800d504:	238c      	movs	r3, #140	@ 0x8c
 800d506:	18fb      	adds	r3, r7, r3
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b05      	cmp	r3, #5
 800d50c:	d9d4      	bls.n	800d4b8 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800d50e:	4b13      	ldr	r3, [pc, #76]	@ (800d55c <calculateSPLQ31+0x5b0>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	4b11      	ldr	r3, [pc, #68]	@ (800d55c <calculateSPLQ31+0x5b0>)
 800d516:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800d518:	4b10      	ldr	r3, [pc, #64]	@ (800d55c <calculateSPLQ31+0x5b0>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b0f      	cmp	r3, #15
 800d51e:	d905      	bls.n	800d52c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800d520:	4b0f      	ldr	r3, [pc, #60]	@ (800d560 <calculateSPLQ31+0x5b4>)
 800d522:	2201      	movs	r2, #1
 800d524:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800d526:	4b0f      	ldr	r3, [pc, #60]	@ (800d564 <calculateSPLQ31+0x5b8>)
 800d528:	2200      	movs	r2, #0
 800d52a:	701a      	strb	r2, [r3, #0]
    }
}
 800d52c:	46c0      	nop			@ (mov r8, r8)
 800d52e:	46bd      	mov	sp, r7
 800d530:	b02f      	add	sp, #188	@ 0xbc
 800d532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d534:	200000bc 	.word	0x200000bc
 800d538:	200000c0 	.word	0x200000c0
 800d53c:	20000eb0 	.word	0x20000eb0
 800d540:	20000eac 	.word	0x20000eac
 800d544:	20000eb4 	.word	0x20000eb4
 800d548:	20000ecc 	.word	0x20000ecc
 800d54c:	200018f4 	.word	0x200018f4
 800d550:	200018f8 	.word	0x200018f8
 800d554:	200018fc 	.word	0x200018fc
 800d558:	20001914 	.word	0x20001914
 800d55c:	2000192c 	.word	0x2000192c
 800d560:	20000ea1 	.word	0x20000ea1
 800d564:	20000e9f 	.word	0x20000e9f

0800d568 <resetSPLstate>:

static void resetSPLstate(void)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800d56e:	4b11      	ldr	r3, [pc, #68]	@ (800d5b4 <resetSPLstate+0x4c>)
 800d570:	2200      	movs	r2, #0
 800d572:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800d574:	4b10      	ldr	r3, [pc, #64]	@ (800d5b8 <resetSPLstate+0x50>)
 800d576:	2200      	movs	r2, #0
 800d578:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800d57a:	4b10      	ldr	r3, [pc, #64]	@ (800d5bc <resetSPLstate+0x54>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800d580:	2300      	movs	r3, #0
 800d582:	607b      	str	r3, [r7, #4]
 800d584:	e00c      	b.n	800d5a0 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800d586:	4b0e      	ldr	r3, [pc, #56]	@ (800d5c0 <resetSPLstate+0x58>)
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	0092      	lsls	r2, r2, #2
 800d58c:	2100      	movs	r1, #0
 800d58e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800d590:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c4 <resetSPLstate+0x5c>)
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	0092      	lsls	r2, r2, #2
 800d596:	2100      	movs	r1, #0
 800d598:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	3301      	adds	r3, #1
 800d59e:	607b      	str	r3, [r7, #4]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b05      	cmp	r3, #5
 800d5a4:	d9ef      	bls.n	800d586 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800d5a6:	4b08      	ldr	r3, [pc, #32]	@ (800d5c8 <resetSPLstate+0x60>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	701a      	strb	r2, [r3, #0]
}
 800d5ac:	46c0      	nop			@ (mov r8, r8)
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	b002      	add	sp, #8
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	200018f4 	.word	0x200018f4
 800d5b8:	200018f8 	.word	0x200018f8
 800d5bc:	2000192c 	.word	0x2000192c
 800d5c0:	200018fc 	.word	0x200018fc
 800d5c4:	20001914 	.word	0x20001914
 800d5c8:	20000ea1 	.word	0x20000ea1

0800d5cc <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800d5cc:	b5b0      	push	{r4, r5, r7, lr}
 800d5ce:	b090      	sub	sp, #64	@ 0x40
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	0019      	movs	r1, r3
 800d5d8:	1dfb      	adds	r3, r7, #7
 800d5da:	701a      	strb	r2, [r3, #0]
 800d5dc:	1dbb      	adds	r3, r7, #6
 800d5de:	1c0a      	adds	r2, r1, #0
 800d5e0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800d5e2:	1dfb      	adds	r3, r7, #7
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d005      	beq.n	800d5f6 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800d5ea:	4b3b      	ldr	r3, [pc, #236]	@ (800d6d8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800d5f0:	4b3a      	ldr	r3, [pc, #232]	@ (800d6dc <getFilteredMaxAmplitudeQ31+0x110>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800d5fe:	2305      	movs	r3, #5
 800d600:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800d602:	2300      	movs	r3, #0
 800d604:	637b      	str	r3, [r7, #52]	@ 0x34
 800d606:	e040      	b.n	800d68a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800d608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	18d3      	adds	r3, r2, r3
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	409a      	lsls	r2, r3
 800d616:	0013      	movs	r3, r2
 800d618:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800d61a:	4b30      	ldr	r3, [pc, #192]	@ (800d6dc <getFilteredMaxAmplitudeQ31+0x110>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	425a      	negs	r2, r3
 800d620:	4b2e      	ldr	r3, [pc, #184]	@ (800d6dc <getFilteredMaxAmplitudeQ31+0x110>)
 800d622:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800d624:	2418      	movs	r4, #24
 800d626:	193a      	adds	r2, r7, r4
 800d628:	492c      	ldr	r1, [pc, #176]	@ (800d6dc <getFilteredMaxAmplitudeQ31+0x110>)
 800d62a:	231c      	movs	r3, #28
 800d62c:	18f8      	adds	r0, r7, r3
 800d62e:	2301      	movs	r3, #1
 800d630:	f011 fdbe 	bl	801f1b0 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800d634:	2514      	movs	r5, #20
 800d636:	197a      	adds	r2, r7, r5
 800d638:	1939      	adds	r1, r7, r4
 800d63a:	4829      	ldr	r0, [pc, #164]	@ (800d6e0 <getFilteredMaxAmplitudeQ31+0x114>)
 800d63c:	2301      	movs	r3, #1
 800d63e:	f011 fd85 	bl	801f14c <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800d642:	2410      	movs	r4, #16
 800d644:	193a      	adds	r2, r7, r4
 800d646:	4924      	ldr	r1, [pc, #144]	@ (800d6d8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d648:	4826      	ldr	r0, [pc, #152]	@ (800d6e4 <getFilteredMaxAmplitudeQ31+0x118>)
 800d64a:	2301      	movs	r3, #1
 800d64c:	f011 fd7e 	bl	801f14c <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800d650:	4a21      	ldr	r2, [pc, #132]	@ (800d6d8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d652:	1939      	adds	r1, r7, r4
 800d654:	1978      	adds	r0, r7, r5
 800d656:	2301      	movs	r3, #1
 800d658:	f011 fdaa 	bl	801f1b0 <arm_add_q31>

        lastData = fx;
 800d65c:	69fa      	ldr	r2, [r7, #28]
 800d65e:	4b1f      	ldr	r3, [pc, #124]	@ (800d6dc <getFilteredMaxAmplitudeQ31+0x110>)
 800d660:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800d662:	4b1d      	ldr	r3, [pc, #116]	@ (800d6d8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d668:	429a      	cmp	r2, r3
 800d66a:	da03      	bge.n	800d674 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800d66c:	4b1a      	ldr	r3, [pc, #104]	@ (800d6d8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d672:	e007      	b.n	800d684 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800d674:	4b18      	ldr	r3, [pc, #96]	@ (800d6d8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d67a:	429a      	cmp	r2, r3
 800d67c:	dd02      	ble.n	800d684 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800d67e:	4b16      	ldr	r3, [pc, #88]	@ (800d6d8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800d684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d686:	3301      	adds	r3, #1
 800d688:	637b      	str	r3, [r7, #52]	@ 0x34
 800d68a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d3ba      	bcc.n	800d608 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800d692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d694:	17da      	asrs	r2, r3, #31
 800d696:	189b      	adds	r3, r3, r2
 800d698:	4053      	eors	r3, r2
 800d69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800d69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d69e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800d6a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d200      	bcs.n	800d6aa <getFilteredMaxAmplitudeQ31+0xde>
 800d6a8:	0013      	movs	r3, r2
 800d6aa:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800d6ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b0:	40da      	lsrs	r2, r3
 800d6b2:	0013      	movs	r3, r2
 800d6b4:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800d6b6:	1dbb      	adds	r3, r7, #6
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d007      	beq.n	800d6ce <getFilteredMaxAmplitudeQ31+0x102>
 800d6be:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6a3a      	ldr	r2, [r7, #32]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d902      	bls.n	800d6ce <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800d6c8:	4b07      	ldr	r3, [pc, #28]	@ (800d6e8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800d6ca:	6a3a      	ldr	r2, [r7, #32]
 800d6cc:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800d6ce:	6a3b      	ldr	r3, [r7, #32]
}
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	b010      	add	sp, #64	@ 0x40
 800d6d6:	bdb0      	pop	{r4, r5, r7, pc}
 800d6d8:	20001d30 	.word	0x20001d30
 800d6dc:	20001d34 	.word	0x20001d34
 800d6e0:	0802678c 	.word	0x0802678c
 800d6e4:	08026790 	.word	0x08026790
 800d6e8:	20000ea8 	.word	0x20000ea8

0800d6ec <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800d6f8:	4913      	ldr	r1, [pc, #76]	@ (800d748 <floatToIntAndFrac2dp+0x5c>)
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f7f3 fc50 	bl	8000fa0 <__aeabi_fmul>
 800d700:	1c03      	adds	r3, r0, #0
 800d702:	1c18      	adds	r0, r3, #0
 800d704:	f016 f9aa 	bl	8023a5c <roundf>
 800d708:	1c03      	adds	r3, r0, #0
 800d70a:	1c18      	adds	r0, r3, #0
 800d70c:	f7f2 ff86 	bl	800061c <__aeabi_f2uiz>
 800d710:	0003      	movs	r3, r0
 800d712:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2164      	movs	r1, #100	@ 0x64
 800d718:	0018      	movs	r0, r3
 800d71a:	f7f2 fd43 	bl	80001a4 <__udivsi3>
 800d71e:	0003      	movs	r3, r0
 800d720:	001a      	movs	r2, r3
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2164      	movs	r1, #100	@ 0x64
 800d732:	434b      	muls	r3, r1
 800d734:	b2db      	uxtb	r3, r3
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	701a      	strb	r2, [r3, #0]
}
 800d73e:	46c0      	nop			@ (mov r8, r8)
 800d740:	46bd      	mov	sp, r7
 800d742:	b006      	add	sp, #24
 800d744:	bd80      	pop	{r7, pc}
 800d746:	46c0      	nop			@ (mov r8, r8)
 800d748:	42c80000 	.word	0x42c80000

0800d74c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800d758:	4914      	ldr	r1, [pc, #80]	@ (800d7ac <floatToIntAndFrac1dp+0x60>)
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f7f3 fc20 	bl	8000fa0 <__aeabi_fmul>
 800d760:	1c03      	adds	r3, r0, #0
 800d762:	1c18      	adds	r0, r3, #0
 800d764:	f016 f97a 	bl	8023a5c <roundf>
 800d768:	1c03      	adds	r3, r0, #0
 800d76a:	1c18      	adds	r0, r3, #0
 800d76c:	f7f2 ff56 	bl	800061c <__aeabi_f2uiz>
 800d770:	0003      	movs	r3, r0
 800d772:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	210a      	movs	r1, #10
 800d778:	0018      	movs	r0, r3
 800d77a:	f7f2 fd13 	bl	80001a4 <__udivsi3>
 800d77e:	0003      	movs	r3, r0
 800d780:	001a      	movs	r2, r3
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	1c19      	adds	r1, r3, #0
 800d792:	0089      	lsls	r1, r1, #2
 800d794:	18cb      	adds	r3, r1, r3
 800d796:	18db      	adds	r3, r3, r3
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	701a      	strb	r2, [r3, #0]
}
 800d7a2:	46c0      	nop			@ (mov r8, r8)
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	b006      	add	sp, #24
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	46c0      	nop			@ (mov r8, r8)
 800d7ac:	41200000 	.word	0x41200000

0800d7b0 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800d7b0:	b590      	push	{r4, r7, lr}
 800d7b2:	b087      	sub	sp, #28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7f3 ff06 	bl	80015d0 <__aeabi_i2f>
 800d7c4:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d7c6:	6838      	ldr	r0, [r7, #0]
 800d7c8:	f7f3 ff02 	bl	80015d0 <__aeabi_i2f>
 800d7cc:	1c03      	adds	r3, r0, #0
 800d7ce:	4918      	ldr	r1, [pc, #96]	@ (800d830 <sumToIntAverage+0x80>)
 800d7d0:	1c18      	adds	r0, r3, #0
 800d7d2:	f7f3 f9ff 	bl	8000bd4 <__aeabi_fdiv>
 800d7d6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d7d8:	1c19      	adds	r1, r3, #0
 800d7da:	1c20      	adds	r0, r4, #0
 800d7dc:	f7f3 f870 	bl	80008c0 <__aeabi_fadd>
 800d7e0:	1c03      	adds	r3, r0, #0
 800d7e2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d7e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7e6:	f7f3 ff3f 	bl	8001668 <__aeabi_ui2f>
 800d7ea:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d7ec:	1c19      	adds	r1, r3, #0
 800d7ee:	1c20      	adds	r0, r4, #0
 800d7f0:	f7f3 f9f0 	bl	8000bd4 <__aeabi_fdiv>
 800d7f4:	1c03      	adds	r3, r0, #0
 800d7f6:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	2310      	movs	r3, #16
 800d800:	18f9      	adds	r1, r7, r3
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	1c18      	adds	r0, r3, #0
 800d806:	f7ff ffa1 	bl	800d74c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	2bff      	cmp	r3, #255	@ 0xff
 800d80e:	d906      	bls.n	800d81e <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	22ff      	movs	r2, #255	@ 0xff
 800d814:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2209      	movs	r2, #9
 800d81a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800d81c:	e003      	b.n	800d826 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	b2da      	uxtb	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	701a      	strb	r2, [r3, #0]
}
 800d826:	46c0      	nop			@ (mov r8, r8)
 800d828:	46bd      	mov	sp, r7
 800d82a:	b007      	add	sp, #28
 800d82c:	bd90      	pop	{r4, r7, pc}
 800d82e:	46c0      	nop			@ (mov r8, r8)
 800d830:	41200000 	.word	0x41200000

0800d834 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	2280      	movs	r2, #128	@ 0x80
 800d846:	0612      	lsls	r2, r2, #24
 800d848:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	4a18      	ldr	r2, [pc, #96]	@ (800d8b0 <findMinMax+0x7c>)
 800d84e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d850:	2300      	movs	r3, #0
 800d852:	617b      	str	r3, [r7, #20]
 800d854:	e022      	b.n	800d89c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	18d3      	adds	r3, r2, r3
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	429a      	cmp	r2, r3
 800d866:	da06      	bge.n	800d876 <findMinMax+0x42>
        {
            min[0] = array[i];
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	18d3      	adds	r3, r2, r3
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	18d3      	adds	r3, r2, r3
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	429a      	cmp	r2, r3
 800d886:	dd06      	ble.n	800d896 <findMinMax+0x62>
        {
            max[0] = array[i];
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	18d3      	adds	r3, r2, r3
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	3301      	adds	r3, #1
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d3d8      	bcc.n	800d856 <findMinMax+0x22>
        }
    }
}
 800d8a4:	46c0      	nop			@ (mov r8, r8)
 800d8a6:	46c0      	nop			@ (mov r8, r8)
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	b006      	add	sp, #24
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	46c0      	nop			@ (mov r8, r8)
 800d8b0:	7fffffff 	.word	0x7fffffff

0800d8b4 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d302      	bcc.n	800d8d0 <getPo2factor+0x1c>
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d107      	bne.n	800d8e0 <getPo2factor+0x2c>
    {
        return 0;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	e00d      	b.n	800d8f0 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	085b      	lsrs	r3, r3, #1
 800d8d8:	607b      	str	r3, [r7, #4]
        bitShift++;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d2f5      	bcs.n	800d8d4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
}
 800d8f0:	0018      	movs	r0, r3
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	b004      	add	sp, #16
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7f3 feae 	bl	8001668 <__aeabi_ui2f>
 800d90c:	1c03      	adds	r3, r0, #0
 800d90e:	1c19      	adds	r1, r3, #0
 800d910:	68b8      	ldr	r0, [r7, #8]
 800d912:	f7f3 fb45 	bl	8000fa0 <__aeabi_fmul>
 800d916:	1c03      	adds	r3, r0, #0
 800d918:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800d91e:	683a      	ldr	r2, [r7, #0]
 800d920:	2310      	movs	r3, #16
 800d922:	18f9      	adds	r1, r7, r3
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	1c18      	adds	r0, r3, #0
 800d928:	f7ff fee0 	bl	800d6ec <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	b29a      	uxth	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	801a      	strh	r2, [r3, #0]
}
 800d934:	46c0      	nop			@ (mov r8, r8)
 800d936:	46bd      	mov	sp, r7
 800d938:	b006      	add	sp, #24
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	60b8      	str	r0, [r7, #8]
 800d944:	60f9      	str	r1, [r7, #12]
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800d94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94c:	6a3a      	ldr	r2, [r7, #32]
 800d94e:	68b8      	ldr	r0, [r7, #8]
 800d950:	68f9      	ldr	r1, [r7, #12]
 800d952:	f7fa f9a9 	bl	8007ca8 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800d956:	6a3b      	ldr	r3, [r7, #32]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	18d2      	adds	r2, r2, r3
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	18d2      	adds	r2, r2, r3
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800d966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	18d2      	adds	r2, r2, r3
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	18d2      	adds	r2, r2, r3
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800d976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d978:	6a3b      	ldr	r3, [r7, #32]
 800d97a:	0011      	movs	r1, r2
 800d97c:	0018      	movs	r0, r3
 800d97e:	f7fa fa23 	bl	8007dc8 <correctIntFracNumber>
}
 800d982:	46c0      	nop			@ (mov r8, r8)
 800d984:	46bd      	mov	sp, r7
 800d986:	b004      	add	sp, #16
 800d988:	bd80      	pop	{r7, pc}

0800d98a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b086      	sub	sp, #24
 800d98e:	af00      	add	r7, sp, #0
 800d990:	60f8      	str	r0, [r7, #12]
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d99a:	2300      	movs	r3, #0
 800d99c:	613b      	str	r3, [r7, #16]
 800d99e:	e019      	b.n	800d9d4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	005b      	lsls	r3, r3, #1
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	18d3      	adds	r3, r2, r3
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d9ac:	693a      	ldr	r2, [r7, #16]
 800d9ae:	3201      	adds	r2, #1
 800d9b0:	0052      	lsls	r2, r2, #1
 800d9b2:	68f9      	ldr	r1, [r7, #12]
 800d9b4:	188a      	adds	r2, r1, r2
 800d9b6:	8812      	ldrh	r2, [r2, #0]
 800d9b8:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d9ba:	0019      	movs	r1, r3
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d9c4:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d9c6:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	613b      	str	r3, [r7, #16]
 800d9d4:	693a      	ldr	r2, [r7, #16]
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d3e1      	bcc.n	800d9a0 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d9dc:	46c0      	nop			@ (mov r8, r8)
 800d9de:	46c0      	nop			@ (mov r8, r8)
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	b006      	add	sp, #24
 800d9e4:	bd80      	pop	{r7, pc}
	...

0800d9e8 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	af00      	add	r7, sp, #0
  init = false;
 800d9ec:	4b02      	ldr	r3, [pc, #8]	@ (800d9f8 <InitDone+0x10>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	701a      	strb	r2, [r3, #0]
}
 800d9f2:	46c0      	nop			@ (mov r8, r8)
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	200000c8 	.word	0x200000c8

0800d9fc <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800da02:	f7f9 f8cf 	bl	8006ba4 <ReadBatteryVoltage>
 800da06:	1c02      	adds	r2, r0, #0
 800da08:	4b25      	ldr	r3, [pc, #148]	@ (800daa0 <batteryChargeCheck+0xa4>)
 800da0a:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800da0c:	4b24      	ldr	r3, [pc, #144]	@ (800daa0 <batteryChargeCheck+0xa4>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4924      	ldr	r1, [pc, #144]	@ (800daa4 <batteryChargeCheck+0xa8>)
 800da12:	1c18      	adds	r0, r3, #0
 800da14:	f7f2 fd8c 	bl	8000530 <__aeabi_fcmplt>
 800da18:	1e03      	subs	r3, r0, #0
 800da1a:	d002      	beq.n	800da22 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800da1c:	1dfb      	adds	r3, r7, #7
 800da1e:	2200      	movs	r2, #0
 800da20:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800da22:	4b1f      	ldr	r3, [pc, #124]	@ (800daa0 <batteryChargeCheck+0xa4>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	491f      	ldr	r1, [pc, #124]	@ (800daa4 <batteryChargeCheck+0xa8>)
 800da28:	1c18      	adds	r0, r3, #0
 800da2a:	f7f2 fd9f 	bl	800056c <__aeabi_fcmpge>
 800da2e:	1e03      	subs	r3, r0, #0
 800da30:	d00d      	beq.n	800da4e <batteryChargeCheck+0x52>
 800da32:	4b1b      	ldr	r3, [pc, #108]	@ (800daa0 <batteryChargeCheck+0xa4>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	1c18      	adds	r0, r3, #0
 800da38:	f7f5 fd14 	bl	8003464 <__aeabi_f2d>
 800da3c:	4a1a      	ldr	r2, [pc, #104]	@ (800daa8 <batteryChargeCheck+0xac>)
 800da3e:	4b1b      	ldr	r3, [pc, #108]	@ (800daac <batteryChargeCheck+0xb0>)
 800da40:	f7f2 fd3c 	bl	80004bc <__aeabi_dcmplt>
 800da44:	1e03      	subs	r3, r0, #0
 800da46:	d002      	beq.n	800da4e <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800da48:	1dfb      	adds	r3, r7, #7
 800da4a:	2201      	movs	r2, #1
 800da4c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800da4e:	4b14      	ldr	r3, [pc, #80]	@ (800daa0 <batteryChargeCheck+0xa4>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	1c18      	adds	r0, r3, #0
 800da54:	f7f5 fd06 	bl	8003464 <__aeabi_f2d>
 800da58:	4a13      	ldr	r2, [pc, #76]	@ (800daa8 <batteryChargeCheck+0xac>)
 800da5a:	4b14      	ldr	r3, [pc, #80]	@ (800daac <batteryChargeCheck+0xb0>)
 800da5c:	f7f2 fd4c 	bl	80004f8 <__aeabi_dcmpge>
 800da60:	1e03      	subs	r3, r0, #0
 800da62:	d00b      	beq.n	800da7c <batteryChargeCheck+0x80>
 800da64:	4b0e      	ldr	r3, [pc, #56]	@ (800daa0 <batteryChargeCheck+0xa4>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2181      	movs	r1, #129	@ 0x81
 800da6a:	05c9      	lsls	r1, r1, #23
 800da6c:	1c18      	adds	r0, r3, #0
 800da6e:	f7f2 fd5f 	bl	8000530 <__aeabi_fcmplt>
 800da72:	1e03      	subs	r3, r0, #0
 800da74:	d002      	beq.n	800da7c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800da76:	1dfb      	adds	r3, r7, #7
 800da78:	2202      	movs	r2, #2
 800da7a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800da7c:	4b08      	ldr	r3, [pc, #32]	@ (800daa0 <batteryChargeCheck+0xa4>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2181      	movs	r1, #129	@ 0x81
 800da82:	05c9      	lsls	r1, r1, #23
 800da84:	1c18      	adds	r0, r3, #0
 800da86:	f7f2 fd71 	bl	800056c <__aeabi_fcmpge>
 800da8a:	1e03      	subs	r3, r0, #0
 800da8c:	d002      	beq.n	800da94 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800da8e:	1dfb      	adds	r3, r7, #7
 800da90:	2203      	movs	r2, #3
 800da92:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800da94:	1dfb      	adds	r3, r7, #7
 800da96:	781b      	ldrb	r3, [r3, #0]
}
 800da98:	0018      	movs	r0, r3
 800da9a:	46bd      	mov	sp, r7
 800da9c:	b002      	add	sp, #8
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20001d48 	.word	0x20001d48
 800daa4:	40600000 	.word	0x40600000
 800daa8:	9999999a 	.word	0x9999999a
 800daac:	400d9999 	.word	0x400d9999

0800dab0 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800dab0:	b5b0      	push	{r4, r5, r7, lr}
 800dab2:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800dab4:	f7f9 f8d8 	bl	8006c68 <ReadSolarVoltage>
 800dab8:	0003      	movs	r3, r0
 800daba:	001a      	movs	r2, r3
 800dabc:	4b1a      	ldr	r3, [pc, #104]	@ (800db28 <Calculate_LED_ON+0x78>)
 800dabe:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800dac0:	4b19      	ldr	r3, [pc, #100]	@ (800db28 <Calculate_LED_ON+0x78>)
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	4a19      	ldr	r2, [pc, #100]	@ (800db2c <Calculate_LED_ON+0x7c>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d802      	bhi.n	800dad0 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800daca:	4b17      	ldr	r3, [pc, #92]	@ (800db28 <Calculate_LED_ON+0x78>)
 800dacc:	4a18      	ldr	r2, [pc, #96]	@ (800db30 <Calculate_LED_ON+0x80>)
 800dace:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800dad0:	4b15      	ldr	r3, [pc, #84]	@ (800db28 <Calculate_LED_ON+0x78>)
 800dad2:	881b      	ldrh	r3, [r3, #0]
 800dad4:	4a17      	ldr	r2, [pc, #92]	@ (800db34 <Calculate_LED_ON+0x84>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d902      	bls.n	800dae0 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800dada:	4b13      	ldr	r3, [pc, #76]	@ (800db28 <Calculate_LED_ON+0x78>)
 800dadc:	4a15      	ldr	r2, [pc, #84]	@ (800db34 <Calculate_LED_ON+0x84>)
 800dade:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800dae0:	4b11      	ldr	r3, [pc, #68]	@ (800db28 <Calculate_LED_ON+0x78>)
 800dae2:	881b      	ldrh	r3, [r3, #0]
 800dae4:	0018      	movs	r0, r3
 800dae6:	f7f5 fc6b 	bl	80033c0 <__aeabi_i2d>
 800daea:	0004      	movs	r4, r0
 800daec:	000d      	movs	r5, r1
 800daee:	4b0e      	ldr	r3, [pc, #56]	@ (800db28 <Calculate_LED_ON+0x78>)
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	001a      	movs	r2, r3
 800daf4:	4b10      	ldr	r3, [pc, #64]	@ (800db38 <Calculate_LED_ON+0x88>)
 800daf6:	1a9b      	subs	r3, r3, r2
 800daf8:	0018      	movs	r0, r3
 800dafa:	f7f5 fc61 	bl	80033c0 <__aeabi_i2d>
 800dafe:	2200      	movs	r2, #0
 800db00:	4b0e      	ldr	r3, [pc, #56]	@ (800db3c <Calculate_LED_ON+0x8c>)
 800db02:	f7f4 fd9b 	bl	800263c <__aeabi_dmul>
 800db06:	0002      	movs	r2, r0
 800db08:	000b      	movs	r3, r1
 800db0a:	0020      	movs	r0, r4
 800db0c:	0029      	movs	r1, r5
 800db0e:	f7f3 fded 	bl	80016ec <__aeabi_dadd>
 800db12:	0002      	movs	r2, r0
 800db14:	000b      	movs	r3, r1
 800db16:	0010      	movs	r0, r2
 800db18:	0019      	movs	r1, r3
 800db1a:	f7f2 fd97 	bl	800064c <__aeabi_d2uiz>
 800db1e:	0003      	movs	r3, r0
 800db20:	b29b      	uxth	r3, r3
}
 800db22:	0018      	movs	r0, r3
 800db24:	46bd      	mov	sp, r7
 800db26:	bdb0      	pop	{r4, r5, r7, pc}
 800db28:	20001d4c 	.word	0x20001d4c
 800db2c:	00000b53 	.word	0x00000b53
 800db30:	00000b54 	.word	0x00000b54
 800db34:	0000125c 	.word	0x0000125c
 800db38:	00000dee 	.word	0x00000dee
 800db3c:	3ff80000 	.word	0x3ff80000

0800db40 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800db40:	b590      	push	{r4, r7, lr}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	0004      	movs	r4, r0
 800db48:	0008      	movs	r0, r1
 800db4a:	0011      	movs	r1, r2
 800db4c:	1dbb      	adds	r3, r7, #6
 800db4e:	1c22      	adds	r2, r4, #0
 800db50:	801a      	strh	r2, [r3, #0]
 800db52:	1d3b      	adds	r3, r7, #4
 800db54:	1c02      	adds	r2, r0, #0
 800db56:	801a      	strh	r2, [r3, #0]
 800db58:	1cbb      	adds	r3, r7, #2
 800db5a:	1c0a      	adds	r2, r1, #0
 800db5c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800db5e:	4b0f      	ldr	r3, [pc, #60]	@ (800db9c <SetStatusLED+0x5c>)
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d107      	bne.n	800db76 <SetStatusLED+0x36>
 800db66:	4b0e      	ldr	r3, [pc, #56]	@ (800dba0 <SetStatusLED+0x60>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d103      	bne.n	800db76 <SetStatusLED+0x36>
 800db6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dba4 <SetStatusLED+0x64>)
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00e      	beq.n	800db94 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800db76:	2380      	movs	r3, #128	@ 0x80
 800db78:	05db      	lsls	r3, r3, #23
 800db7a:	1dba      	adds	r2, r7, #6
 800db7c:	8812      	ldrh	r2, [r2, #0]
 800db7e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800db80:	2380      	movs	r3, #128	@ 0x80
 800db82:	05db      	lsls	r3, r3, #23
 800db84:	1d3a      	adds	r2, r7, #4
 800db86:	8812      	ldrh	r2, [r2, #0]
 800db88:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800db8a:	2380      	movs	r3, #128	@ 0x80
 800db8c:	05db      	lsls	r3, r3, #23
 800db8e:	1cba      	adds	r2, r7, #2
 800db90:	8812      	ldrh	r2, [r2, #0]
 800db92:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800db94:	46c0      	nop			@ (mov r8, r8)
 800db96:	46bd      	mov	sp, r7
 800db98:	b003      	add	sp, #12
 800db9a:	bd90      	pop	{r4, r7, pc}
 800db9c:	20001d39 	.word	0x20001d39
 800dba0:	200000c8 	.word	0x200000c8
 800dba4:	20001d3a 	.word	0x20001d3a

0800dba8 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800dba8:	b590      	push	{r4, r7, lr}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	0004      	movs	r4, r0
 800dbb0:	0008      	movs	r0, r1
 800dbb2:	0011      	movs	r1, r2
 800dbb4:	1dfb      	adds	r3, r7, #7
 800dbb6:	1c22      	adds	r2, r4, #0
 800dbb8:	701a      	strb	r2, [r3, #0]
 800dbba:	1dbb      	adds	r3, r7, #6
 800dbbc:	1c02      	adds	r2, r0, #0
 800dbbe:	701a      	strb	r2, [r3, #0]
 800dbc0:	1d7b      	adds	r3, r7, #5
 800dbc2:	1c0a      	adds	r2, r1, #0
 800dbc4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800dbc6:	4b19      	ldr	r3, [pc, #100]	@ (800dc2c <SetDBLED+0x84>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d107      	bne.n	800dbde <SetDBLED+0x36>
 800dbce:	4b18      	ldr	r3, [pc, #96]	@ (800dc30 <SetDBLED+0x88>)
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d103      	bne.n	800dbde <SetDBLED+0x36>
 800dbd6:	4b17      	ldr	r3, [pc, #92]	@ (800dc34 <SetDBLED+0x8c>)
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d022      	beq.n	800dc24 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800dbde:	1dfb      	adds	r3, r7, #7
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	4053      	eors	r3, r2
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	001a      	movs	r2, r3
 800dbea:	4b13      	ldr	r3, [pc, #76]	@ (800dc38 <SetDBLED+0x90>)
 800dbec:	2101      	movs	r1, #1
 800dbee:	0018      	movs	r0, r3
 800dbf0:	f003 f8e3 	bl	8010dba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800dbf4:	1dbb      	adds	r3, r7, #6
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	4053      	eors	r3, r2
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	001a      	movs	r2, r3
 800dc00:	2380      	movs	r3, #128	@ 0x80
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	480c      	ldr	r0, [pc, #48]	@ (800dc38 <SetDBLED+0x90>)
 800dc06:	0019      	movs	r1, r3
 800dc08:	f003 f8d7 	bl	8010dba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800dc0c:	1d7b      	adds	r3, r7, #5
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2201      	movs	r2, #1
 800dc12:	4053      	eors	r3, r2
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	001a      	movs	r2, r3
 800dc18:	2380      	movs	r3, #128	@ 0x80
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	4806      	ldr	r0, [pc, #24]	@ (800dc38 <SetDBLED+0x90>)
 800dc1e:	0019      	movs	r1, r3
 800dc20:	f003 f8cb 	bl	8010dba <HAL_GPIO_WritePin>
  }
}
 800dc24:	46c0      	nop			@ (mov r8, r8)
 800dc26:	46bd      	mov	sp, r7
 800dc28:	b003      	add	sp, #12
 800dc2a:	bd90      	pop	{r4, r7, pc}
 800dc2c:	20001d39 	.word	0x20001d39
 800dc30:	200000c8 	.word	0x200000c8
 800dc34:	20001d3a 	.word	0x20001d3a
 800dc38:	50000400 	.word	0x50000400

0800dc3c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800dc3c:	b590      	push	{r4, r7, lr}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	0004      	movs	r4, r0
 800dc44:	0008      	movs	r0, r1
 800dc46:	0011      	movs	r1, r2
 800dc48:	1dbb      	adds	r3, r7, #6
 800dc4a:	1c22      	adds	r2, r4, #0
 800dc4c:	801a      	strh	r2, [r3, #0]
 800dc4e:	1d3b      	adds	r3, r7, #4
 800dc50:	1c02      	adds	r2, r0, #0
 800dc52:	801a      	strh	r2, [r3, #0]
 800dc54:	1cbb      	adds	r3, r7, #2
 800dc56:	1c0a      	adds	r2, r1, #0
 800dc58:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800dc5a:	4b0e      	ldr	r3, [pc, #56]	@ (800dc94 <SetVocLED+0x58>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d107      	bne.n	800dc72 <SetVocLED+0x36>
 800dc62:	4b0d      	ldr	r3, [pc, #52]	@ (800dc98 <SetVocLED+0x5c>)
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d103      	bne.n	800dc72 <SetVocLED+0x36>
 800dc6a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc9c <SetVocLED+0x60>)
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d00b      	beq.n	800dc8a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800dc72:	4b0b      	ldr	r3, [pc, #44]	@ (800dca0 <SetVocLED+0x64>)
 800dc74:	1dba      	adds	r2, r7, #6
 800dc76:	8812      	ldrh	r2, [r2, #0]
 800dc78:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800dc7a:	4b09      	ldr	r3, [pc, #36]	@ (800dca0 <SetVocLED+0x64>)
 800dc7c:	1d3a      	adds	r2, r7, #4
 800dc7e:	8812      	ldrh	r2, [r2, #0]
 800dc80:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800dc82:	4b07      	ldr	r3, [pc, #28]	@ (800dca0 <SetVocLED+0x64>)
 800dc84:	1cba      	adds	r2, r7, #2
 800dc86:	8812      	ldrh	r2, [r2, #0]
 800dc88:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800dc8a:	46c0      	nop			@ (mov r8, r8)
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	b003      	add	sp, #12
 800dc90:	bd90      	pop	{r4, r7, pc}
 800dc92:	46c0      	nop			@ (mov r8, r8)
 800dc94:	20001d39 	.word	0x20001d39
 800dc98:	200000c8 	.word	0x200000c8
 800dc9c:	20001d3a 	.word	0x20001d3a
 800dca0:	40000400 	.word	0x40000400

0800dca4 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800dca4:	b580      	push	{r7, lr}
 800dca6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dca8:	4b08      	ldr	r3, [pc, #32]	@ (800dccc <SetMeasurementIndicator+0x28>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d103      	bne.n	800dcb8 <SetMeasurementIndicator+0x14>
 800dcb0:	4b07      	ldr	r3, [pc, #28]	@ (800dcd0 <SetMeasurementIndicator+0x2c>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d006      	beq.n	800dcc6 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800dcb8:	f7ff fefa 	bl	800dab0 <Calculate_LED_ON>
 800dcbc:	0003      	movs	r3, r0
 800dcbe:	001a      	movs	r2, r3
 800dcc0:	2380      	movs	r3, #128	@ 0x80
 800dcc2:	05db      	lsls	r3, r3, #23
 800dcc4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800dcc6:	46c0      	nop			@ (mov r8, r8)
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	20001d39 	.word	0x20001d39
 800dcd0:	20001d3a 	.word	0x20001d3a

0800dcd4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dcd8:	4b07      	ldr	r3, [pc, #28]	@ (800dcf8 <ResetMeasurementIndicator+0x24>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d103      	bne.n	800dce8 <ResetMeasurementIndicator+0x14>
 800dce0:	4b06      	ldr	r3, [pc, #24]	@ (800dcfc <ResetMeasurementIndicator+0x28>)
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800dce8:	2380      	movs	r3, #128	@ 0x80
 800dcea:	05db      	lsls	r3, r3, #23
 800dcec:	22fa      	movs	r2, #250	@ 0xfa
 800dcee:	0112      	lsls	r2, r2, #4
 800dcf0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800dcf2:	46c0      	nop			@ (mov r8, r8)
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	20001d39 	.word	0x20001d39
 800dcfc:	20001d3a 	.word	0x20001d3a

0800dd00 <SetMICIndicator>:
void SetMICIndicator(){
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dd04:	4b19      	ldr	r3, [pc, #100]	@ (800dd6c <SetMICIndicator+0x6c>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d103      	bne.n	800dd14 <SetMICIndicator+0x14>
 800dd0c:	4b18      	ldr	r3, [pc, #96]	@ (800dd70 <SetMICIndicator+0x70>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d007      	beq.n	800dd24 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800dd14:	f7ff fecc 	bl	800dab0 <Calculate_LED_ON>
 800dd18:	0003      	movs	r3, r0
 800dd1a:	001a      	movs	r2, r3
 800dd1c:	2380      	movs	r3, #128	@ 0x80
 800dd1e:	05db      	lsls	r3, r3, #23
 800dd20:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800dd22:	e01f      	b.n	800dd64 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800dd24:	4b13      	ldr	r3, [pc, #76]	@ (800dd74 <SetMICIndicator+0x74>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	1c18      	adds	r0, r3, #0
 800dd2a:	f7f5 fb9b 	bl	8003464 <__aeabi_f2d>
 800dd2e:	4a12      	ldr	r2, [pc, #72]	@ (800dd78 <SetMICIndicator+0x78>)
 800dd30:	4b12      	ldr	r3, [pc, #72]	@ (800dd7c <SetMICIndicator+0x7c>)
 800dd32:	f7f2 fbd7 	bl	80004e4 <__aeabi_dcmpgt>
 800dd36:	1e03      	subs	r3, r0, #0
 800dd38:	d00a      	beq.n	800dd50 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800dd3a:	f7ff feb9 	bl	800dab0 <Calculate_LED_ON>
 800dd3e:	0003      	movs	r3, r0
 800dd40:	001a      	movs	r2, r3
 800dd42:	2380      	movs	r3, #128	@ 0x80
 800dd44:	05db      	lsls	r3, r3, #23
 800dd46:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800dd48:	4b0d      	ldr	r3, [pc, #52]	@ (800dd80 <SetMICIndicator+0x80>)
 800dd4a:	2202      	movs	r2, #2
 800dd4c:	701a      	strb	r2, [r3, #0]
}
 800dd4e:	e009      	b.n	800dd64 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800dd50:	f7ff feae 	bl	800dab0 <Calculate_LED_ON>
 800dd54:	0003      	movs	r3, r0
 800dd56:	001a      	movs	r2, r3
 800dd58:	2380      	movs	r3, #128	@ 0x80
 800dd5a:	05db      	lsls	r3, r3, #23
 800dd5c:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800dd5e:	4b08      	ldr	r3, [pc, #32]	@ (800dd80 <SetMICIndicator+0x80>)
 800dd60:	2201      	movs	r2, #1
 800dd62:	701a      	strb	r2, [r3, #0]
}
 800dd64:	46c0      	nop			@ (mov r8, r8)
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	46c0      	nop			@ (mov r8, r8)
 800dd6c:	20001d39 	.word	0x20001d39
 800dd70:	20001d3a 	.word	0x20001d3a
 800dd74:	20001d48 	.word	0x20001d48
 800dd78:	9999999a 	.word	0x9999999a
 800dd7c:	400d9999 	.word	0x400d9999
 800dd80:	20001d3c 	.word	0x20001d3c

0800dd84 <ResetMICIndicator>:
void ResetMICIndicator(){
 800dd84:	b580      	push	{r7, lr}
 800dd86:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dd88:	4b0f      	ldr	r3, [pc, #60]	@ (800ddc8 <ResetMICIndicator+0x44>)
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d103      	bne.n	800dd98 <ResetMICIndicator+0x14>
 800dd90:	4b0e      	ldr	r3, [pc, #56]	@ (800ddcc <ResetMICIndicator+0x48>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d005      	beq.n	800dda4 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800dd98:	2380      	movs	r3, #128	@ 0x80
 800dd9a:	05db      	lsls	r3, r3, #23
 800dd9c:	22fa      	movs	r2, #250	@ 0xfa
 800dd9e:	0112      	lsls	r2, r2, #4
 800dda0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800dda2:	e00e      	b.n	800ddc2 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800dda4:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd0 <ResetMICIndicator+0x4c>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d105      	bne.n	800ddb8 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800ddac:	2380      	movs	r3, #128	@ 0x80
 800ddae:	05db      	lsls	r3, r3, #23
 800ddb0:	22fa      	movs	r2, #250	@ 0xfa
 800ddb2:	0112      	lsls	r2, r2, #4
 800ddb4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ddb6:	e004      	b.n	800ddc2 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800ddb8:	2380      	movs	r3, #128	@ 0x80
 800ddba:	05db      	lsls	r3, r3, #23
 800ddbc:	22fa      	movs	r2, #250	@ 0xfa
 800ddbe:	0112      	lsls	r2, r2, #4
 800ddc0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800ddc2:	46c0      	nop			@ (mov r8, r8)
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	20001d39 	.word	0x20001d39
 800ddcc:	20001d3a 	.word	0x20001d3a
 800ddd0:	20001d3c 	.word	0x20001d3c

0800ddd4 <SetESPIndicator>:
void SetESPIndicator(){
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ddd8:	4b08      	ldr	r3, [pc, #32]	@ (800ddfc <SetESPIndicator+0x28>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d103      	bne.n	800dde8 <SetESPIndicator+0x14>
 800dde0:	4b07      	ldr	r3, [pc, #28]	@ (800de00 <SetESPIndicator+0x2c>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800dde8:	f7ff fe62 	bl	800dab0 <Calculate_LED_ON>
 800ddec:	0003      	movs	r3, r0
 800ddee:	001a      	movs	r2, r3
 800ddf0:	2380      	movs	r3, #128	@ 0x80
 800ddf2:	05db      	lsls	r3, r3, #23
 800ddf4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ddf6:	46c0      	nop			@ (mov r8, r8)
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	20001d39 	.word	0x20001d39
 800de00:	20001d3a 	.word	0x20001d3a

0800de04 <ResetESPIndicator>:
void ResetESPIndicator(){
 800de04:	b580      	push	{r7, lr}
 800de06:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800de08:	4b07      	ldr	r3, [pc, #28]	@ (800de28 <ResetESPIndicator+0x24>)
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d103      	bne.n	800de18 <ResetESPIndicator+0x14>
 800de10:	4b06      	ldr	r3, [pc, #24]	@ (800de2c <ResetESPIndicator+0x28>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d004      	beq.n	800de22 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800de18:	2380      	movs	r3, #128	@ 0x80
 800de1a:	05db      	lsls	r3, r3, #23
 800de1c:	22fa      	movs	r2, #250	@ 0xfa
 800de1e:	0112      	lsls	r2, r2, #4
 800de20:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800de22:	46c0      	nop			@ (mov r8, r8)
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	20001d39 	.word	0x20001d39
 800de2c:	20001d3a 	.word	0x20001d3a

0800de30 <SetPMIndicator>:

void SetPMIndicator() {
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800de34:	4b0f      	ldr	r3, [pc, #60]	@ (800de74 <SetPMIndicator+0x44>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d103      	bne.n	800de44 <SetPMIndicator+0x14>
 800de3c:	4b0e      	ldr	r3, [pc, #56]	@ (800de78 <SetPMIndicator+0x48>)
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d014      	beq.n	800de6e <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800de44:	f7ff fe34 	bl	800dab0 <Calculate_LED_ON>
 800de48:	0003      	movs	r3, r0
 800de4a:	001a      	movs	r2, r3
 800de4c:	2380      	movs	r3, #128	@ 0x80
 800de4e:	05db      	lsls	r3, r3, #23
 800de50:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800de52:	f7ff fe2d 	bl	800dab0 <Calculate_LED_ON>
 800de56:	0003      	movs	r3, r0
 800de58:	001a      	movs	r2, r3
 800de5a:	2380      	movs	r3, #128	@ 0x80
 800de5c:	05db      	lsls	r3, r3, #23
 800de5e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800de60:	f7ff fe26 	bl	800dab0 <Calculate_LED_ON>
 800de64:	0003      	movs	r3, r0
 800de66:	001a      	movs	r2, r3
 800de68:	2380      	movs	r3, #128	@ 0x80
 800de6a:	05db      	lsls	r3, r3, #23
 800de6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800de6e:	46c0      	nop			@ (mov r8, r8)
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	20001d39 	.word	0x20001d39
 800de78:	20001d3a 	.word	0x20001d3a

0800de7c <ResetPMIndicator>:

void ResetPMIndicator() {
 800de7c:	b580      	push	{r7, lr}
 800de7e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800de80:	4b0c      	ldr	r3, [pc, #48]	@ (800deb4 <ResetPMIndicator+0x38>)
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d103      	bne.n	800de90 <ResetPMIndicator+0x14>
 800de88:	4b0b      	ldr	r3, [pc, #44]	@ (800deb8 <ResetPMIndicator+0x3c>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00e      	beq.n	800deae <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800de90:	2380      	movs	r3, #128	@ 0x80
 800de92:	05db      	lsls	r3, r3, #23
 800de94:	22fa      	movs	r2, #250	@ 0xfa
 800de96:	0112      	lsls	r2, r2, #4
 800de98:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800de9a:	2380      	movs	r3, #128	@ 0x80
 800de9c:	05db      	lsls	r3, r3, #23
 800de9e:	22fa      	movs	r2, #250	@ 0xfa
 800dea0:	0112      	lsls	r2, r2, #4
 800dea2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800dea4:	2380      	movs	r3, #128	@ 0x80
 800dea6:	05db      	lsls	r3, r3, #23
 800dea8:	22fa      	movs	r2, #250	@ 0xfa
 800deaa:	0112      	lsls	r2, r2, #4
 800deac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800deae:	46c0      	nop			@ (mov r8, r8)
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	20001d39 	.word	0x20001d39
 800deb8:	20001d3a 	.word	0x20001d3a

0800debc <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800debc:	b580      	push	{r7, lr}
 800debe:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800dec0:	23fa      	movs	r3, #250	@ 0xfa
 800dec2:	011a      	lsls	r2, r3, #4
 800dec4:	23fa      	movs	r3, #250	@ 0xfa
 800dec6:	0119      	lsls	r1, r3, #4
 800dec8:	23fa      	movs	r3, #250	@ 0xfa
 800deca:	011b      	lsls	r3, r3, #4
 800decc:	0018      	movs	r0, r3
 800dece:	f7ff fe37 	bl	800db40 <SetStatusLED>
  SetDBLED(false,false,false);
 800ded2:	2200      	movs	r2, #0
 800ded4:	2100      	movs	r1, #0
 800ded6:	2000      	movs	r0, #0
 800ded8:	f7ff fe66 	bl	800dba8 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800dedc:	23fa      	movs	r3, #250	@ 0xfa
 800dede:	011a      	lsls	r2, r3, #4
 800dee0:	23fa      	movs	r3, #250	@ 0xfa
 800dee2:	0119      	lsls	r1, r3, #4
 800dee4:	23fa      	movs	r3, #250	@ 0xfa
 800dee6:	011b      	lsls	r3, r3, #4
 800dee8:	0018      	movs	r0, r3
 800deea:	f7ff fea7 	bl	800dc3c <SetVocLED>
return;
 800deee:	46c0      	nop			@ (mov r8, r8)
}
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <SetAllREDLED>:

void SetAllREDLED() {
 800def4:	b580      	push	{r7, lr}
 800def6:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 800def8:	2380      	movs	r3, #128	@ 0x80
 800defa:	05db      	lsls	r3, r3, #23
 800defc:	4a19      	ldr	r2, [pc, #100]	@ (800df64 <SetAllREDLED+0x70>)
 800defe:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 800df00:	2380      	movs	r3, #128	@ 0x80
 800df02:	05db      	lsls	r3, r3, #23
 800df04:	22fa      	movs	r2, #250	@ 0xfa
 800df06:	0112      	lsls	r2, r2, #4
 800df08:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 800df0a:	2380      	movs	r3, #128	@ 0x80
 800df0c:	05db      	lsls	r3, r3, #23
 800df0e:	22fa      	movs	r2, #250	@ 0xfa
 800df10:	0112      	lsls	r2, r2, #4
 800df12:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 800df14:	4b14      	ldr	r3, [pc, #80]	@ (800df68 <SetAllREDLED+0x74>)
 800df16:	4a13      	ldr	r2, [pc, #76]	@ (800df64 <SetAllREDLED+0x70>)
 800df18:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 800df1a:	4b13      	ldr	r3, [pc, #76]	@ (800df68 <SetAllREDLED+0x74>)
 800df1c:	22fa      	movs	r2, #250	@ 0xfa
 800df1e:	0112      	lsls	r2, r2, #4
 800df20:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 800df22:	4b11      	ldr	r3, [pc, #68]	@ (800df68 <SetAllREDLED+0x74>)
 800df24:	22fa      	movs	r2, #250	@ 0xfa
 800df26:	0112      	lsls	r2, r2, #4
 800df28:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 800df2a:	4b10      	ldr	r3, [pc, #64]	@ (800df6c <SetAllREDLED+0x78>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	2101      	movs	r1, #1
 800df30:	0018      	movs	r0, r3
 800df32:	f002 ff42 	bl	8010dba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 800df36:	2380      	movs	r3, #128	@ 0x80
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	480c      	ldr	r0, [pc, #48]	@ (800df6c <SetAllREDLED+0x78>)
 800df3c:	2201      	movs	r2, #1
 800df3e:	0019      	movs	r1, r3
 800df40:	f002 ff3b 	bl	8010dba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 800df44:	2380      	movs	r3, #128	@ 0x80
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4808      	ldr	r0, [pc, #32]	@ (800df6c <SetAllREDLED+0x78>)
 800df4a:	2201      	movs	r2, #1
 800df4c:	0019      	movs	r1, r3
 800df4e:	f002 ff34 	bl	8010dba <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800df52:	23fa      	movs	r3, #250	@ 0xfa
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	0018      	movs	r0, r3
 800df58:	f001 fca8 	bl	800f8ac <HAL_Delay>
}
 800df5c:	46c0      	nop			@ (mov r8, r8)
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	46c0      	nop			@ (mov r8, r8)
 800df64:	00000bb8 	.word	0x00000bb8
 800df68:	40000400 	.word	0x40000400
 800df6c:	50000400 	.word	0x50000400

0800df70 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800df70:	b5b0      	push	{r4, r5, r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	0002      	movs	r2, r0
 800df78:	1dbb      	adds	r3, r7, #6
 800df7a:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800df7c:	1dbb      	adds	r3, r7, #6
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d05a      	beq.n	800e03a <SetVOCindicator+0xca>
 800df84:	1dbb      	adds	r3, r7, #6
 800df86:	881b      	ldrh	r3, [r3, #0]
 800df88:	2b64      	cmp	r3, #100	@ 0x64
 800df8a:	d856      	bhi.n	800e03a <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800df8c:	1dbb      	adds	r3, r7, #6
 800df8e:	881b      	ldrh	r3, [r3, #0]
 800df90:	0018      	movs	r0, r3
 800df92:	f7f5 fa15 	bl	80033c0 <__aeabi_i2d>
 800df96:	2200      	movs	r2, #0
 800df98:	4b5f      	ldr	r3, [pc, #380]	@ (800e118 <SetVOCindicator+0x1a8>)
 800df9a:	f7f3 ff0b 	bl	8001db4 <__aeabi_ddiv>
 800df9e:	0002      	movs	r2, r0
 800dfa0:	000b      	movs	r3, r1
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	495d      	ldr	r1, [pc, #372]	@ (800e11c <SetVOCindicator+0x1ac>)
 800dfa6:	f7f4 fe11 	bl	8002bcc <__aeabi_dsub>
 800dfaa:	0002      	movs	r2, r0
 800dfac:	000b      	movs	r3, r1
 800dfae:	0014      	movs	r4, r2
 800dfb0:	001d      	movs	r5, r3
 800dfb2:	4b5b      	ldr	r3, [pc, #364]	@ (800e120 <SetVOCindicator+0x1b0>)
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	0018      	movs	r0, r3
 800dfb8:	f7f5 fa02 	bl	80033c0 <__aeabi_i2d>
 800dfbc:	0002      	movs	r2, r0
 800dfbe:	000b      	movs	r3, r1
 800dfc0:	0020      	movs	r0, r4
 800dfc2:	0029      	movs	r1, r5
 800dfc4:	f7f4 fb3a 	bl	800263c <__aeabi_dmul>
 800dfc8:	0002      	movs	r2, r0
 800dfca:	000b      	movs	r3, r1
 800dfcc:	0010      	movs	r0, r2
 800dfce:	0019      	movs	r1, r3
 800dfd0:	f7f2 fb3c 	bl	800064c <__aeabi_d2uiz>
 800dfd4:	0003      	movs	r3, r0
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	4b52      	ldr	r3, [pc, #328]	@ (800e124 <SetVOCindicator+0x1b4>)
 800dfda:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800dfdc:	1dbb      	adds	r3, r7, #6
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	0018      	movs	r0, r3
 800dfe2:	f7f5 f9ed 	bl	80033c0 <__aeabi_i2d>
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	4b4b      	ldr	r3, [pc, #300]	@ (800e118 <SetVOCindicator+0x1a8>)
 800dfea:	f7f3 fee3 	bl	8001db4 <__aeabi_ddiv>
 800dfee:	0002      	movs	r2, r0
 800dff0:	000b      	movs	r3, r1
 800dff2:	0014      	movs	r4, r2
 800dff4:	001d      	movs	r5, r3
 800dff6:	4b4a      	ldr	r3, [pc, #296]	@ (800e120 <SetVOCindicator+0x1b0>)
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	0018      	movs	r0, r3
 800dffc:	f7f5 f9e0 	bl	80033c0 <__aeabi_i2d>
 800e000:	0002      	movs	r2, r0
 800e002:	000b      	movs	r3, r1
 800e004:	0020      	movs	r0, r4
 800e006:	0029      	movs	r1, r5
 800e008:	f7f4 fb18 	bl	800263c <__aeabi_dmul>
 800e00c:	0002      	movs	r2, r0
 800e00e:	000b      	movs	r3, r1
 800e010:	0010      	movs	r0, r2
 800e012:	0019      	movs	r1, r3
 800e014:	f7f2 fb1a 	bl	800064c <__aeabi_d2uiz>
 800e018:	0003      	movs	r3, r0
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	4b42      	ldr	r3, [pc, #264]	@ (800e128 <SetVOCindicator+0x1b8>)
 800e01e:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800e020:	4b3f      	ldr	r3, [pc, #252]	@ (800e120 <SetVOCindicator+0x1b0>)
 800e022:	881a      	ldrh	r2, [r3, #0]
 800e024:	4b41      	ldr	r3, [pc, #260]	@ (800e12c <SetVOCindicator+0x1bc>)
 800e026:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800e028:	4b40      	ldr	r3, [pc, #256]	@ (800e12c <SetVOCindicator+0x1bc>)
 800e02a:	8818      	ldrh	r0, [r3, #0]
 800e02c:	4b3d      	ldr	r3, [pc, #244]	@ (800e124 <SetVOCindicator+0x1b4>)
 800e02e:	8819      	ldrh	r1, [r3, #0]
 800e030:	4b3d      	ldr	r3, [pc, #244]	@ (800e128 <SetVOCindicator+0x1b8>)
 800e032:	881b      	ldrh	r3, [r3, #0]
 800e034:	001a      	movs	r2, r3
 800e036:	f7ff fe01 	bl	800dc3c <SetVocLED>
  }
  if(VOCi > 100){
 800e03a:	1dbb      	adds	r3, r7, #6
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	2b64      	cmp	r3, #100	@ 0x64
 800e040:	d966      	bls.n	800e110 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800e042:	1dbb      	adds	r3, r7, #6
 800e044:	881b      	ldrh	r3, [r3, #0]
 800e046:	0018      	movs	r0, r3
 800e048:	f7f5 f9ba 	bl	80033c0 <__aeabi_i2d>
 800e04c:	2200      	movs	r2, #0
 800e04e:	4b32      	ldr	r3, [pc, #200]	@ (800e118 <SetVOCindicator+0x1a8>)
 800e050:	f7f4 fdbc 	bl	8002bcc <__aeabi_dsub>
 800e054:	0002      	movs	r2, r0
 800e056:	000b      	movs	r3, r1
 800e058:	0010      	movs	r0, r2
 800e05a:	0019      	movs	r1, r3
 800e05c:	2200      	movs	r2, #0
 800e05e:	4b34      	ldr	r3, [pc, #208]	@ (800e130 <SetVOCindicator+0x1c0>)
 800e060:	f7f3 fea8 	bl	8001db4 <__aeabi_ddiv>
 800e064:	0002      	movs	r2, r0
 800e066:	000b      	movs	r3, r1
 800e068:	0014      	movs	r4, r2
 800e06a:	001d      	movs	r5, r3
 800e06c:	4b2c      	ldr	r3, [pc, #176]	@ (800e120 <SetVOCindicator+0x1b0>)
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	0018      	movs	r0, r3
 800e072:	f7f5 f9a5 	bl	80033c0 <__aeabi_i2d>
 800e076:	0002      	movs	r2, r0
 800e078:	000b      	movs	r3, r1
 800e07a:	0020      	movs	r0, r4
 800e07c:	0029      	movs	r1, r5
 800e07e:	f7f4 fadd 	bl	800263c <__aeabi_dmul>
 800e082:	0002      	movs	r2, r0
 800e084:	000b      	movs	r3, r1
 800e086:	0010      	movs	r0, r2
 800e088:	0019      	movs	r1, r3
 800e08a:	f7f2 fadf 	bl	800064c <__aeabi_d2uiz>
 800e08e:	0003      	movs	r3, r0
 800e090:	b29a      	uxth	r2, r3
 800e092:	4b24      	ldr	r3, [pc, #144]	@ (800e124 <SetVOCindicator+0x1b4>)
 800e094:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800e096:	1dbb      	adds	r3, r7, #6
 800e098:	881b      	ldrh	r3, [r3, #0]
 800e09a:	0018      	movs	r0, r3
 800e09c:	f7f5 f990 	bl	80033c0 <__aeabi_i2d>
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	4b1d      	ldr	r3, [pc, #116]	@ (800e118 <SetVOCindicator+0x1a8>)
 800e0a4:	f7f4 fd92 	bl	8002bcc <__aeabi_dsub>
 800e0a8:	0002      	movs	r2, r0
 800e0aa:	000b      	movs	r3, r1
 800e0ac:	0010      	movs	r0, r2
 800e0ae:	0019      	movs	r1, r3
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	4b1f      	ldr	r3, [pc, #124]	@ (800e130 <SetVOCindicator+0x1c0>)
 800e0b4:	f7f3 fe7e 	bl	8001db4 <__aeabi_ddiv>
 800e0b8:	0002      	movs	r2, r0
 800e0ba:	000b      	movs	r3, r1
 800e0bc:	2000      	movs	r0, #0
 800e0be:	4917      	ldr	r1, [pc, #92]	@ (800e11c <SetVOCindicator+0x1ac>)
 800e0c0:	f7f4 fd84 	bl	8002bcc <__aeabi_dsub>
 800e0c4:	0002      	movs	r2, r0
 800e0c6:	000b      	movs	r3, r1
 800e0c8:	0014      	movs	r4, r2
 800e0ca:	001d      	movs	r5, r3
 800e0cc:	4b14      	ldr	r3, [pc, #80]	@ (800e120 <SetVOCindicator+0x1b0>)
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	0018      	movs	r0, r3
 800e0d2:	f7f5 f975 	bl	80033c0 <__aeabi_i2d>
 800e0d6:	0002      	movs	r2, r0
 800e0d8:	000b      	movs	r3, r1
 800e0da:	0020      	movs	r0, r4
 800e0dc:	0029      	movs	r1, r5
 800e0de:	f7f4 faad 	bl	800263c <__aeabi_dmul>
 800e0e2:	0002      	movs	r2, r0
 800e0e4:	000b      	movs	r3, r1
 800e0e6:	0010      	movs	r0, r2
 800e0e8:	0019      	movs	r1, r3
 800e0ea:	f7f2 faaf 	bl	800064c <__aeabi_d2uiz>
 800e0ee:	0003      	movs	r3, r0
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800e12c <SetVOCindicator+0x1bc>)
 800e0f4:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800e0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e120 <SetVOCindicator+0x1b0>)
 800e0f8:	881a      	ldrh	r2, [r3, #0]
 800e0fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e128 <SetVOCindicator+0x1b8>)
 800e0fc:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800e0fe:	4b0b      	ldr	r3, [pc, #44]	@ (800e12c <SetVOCindicator+0x1bc>)
 800e100:	8818      	ldrh	r0, [r3, #0]
 800e102:	4b08      	ldr	r3, [pc, #32]	@ (800e124 <SetVOCindicator+0x1b4>)
 800e104:	8819      	ldrh	r1, [r3, #0]
 800e106:	4b08      	ldr	r3, [pc, #32]	@ (800e128 <SetVOCindicator+0x1b8>)
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	001a      	movs	r2, r3
 800e10c:	f7ff fd96 	bl	800dc3c <SetVocLED>
  }

}
 800e110:	46c0      	nop			@ (mov r8, r8)
 800e112:	46bd      	mov	sp, r7
 800e114:	b002      	add	sp, #8
 800e116:	bdb0      	pop	{r4, r5, r7, pc}
 800e118:	40590000 	.word	0x40590000
 800e11c:	3ff00000 	.word	0x3ff00000
 800e120:	200000ca 	.word	0x200000ca
 800e124:	20001d4e 	.word	0x20001d4e
 800e128:	20001d50 	.word	0x20001d50
 800e12c:	20001d52 	.word	0x20001d52
 800e130:	40790000 	.word	0x40790000

0800e134 <powerCheck>:

Battery_Status powerCheck(){
 800e134:	b590      	push	{r4, r7, lr}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800e13a:	f7f8 fde9 	bl	8006d10 <Check_USB_PowerOn>
 800e13e:	0003      	movs	r3, r0
 800e140:	001a      	movs	r2, r3
 800e142:	2301      	movs	r3, #1
 800e144:	4053      	eors	r3, r2
 800e146:	b2db      	uxtb	r3, r3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d005      	beq.n	800e158 <powerCheck+0x24>
    status = batteryChargeCheck();
 800e14c:	1dfc      	adds	r4, r7, #7
 800e14e:	f7ff fc55 	bl	800d9fc <batteryChargeCheck>
 800e152:	0003      	movs	r3, r0
 800e154:	7023      	strb	r3, [r4, #0]
 800e156:	e002      	b.n	800e15e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800e158:	1dfb      	adds	r3, r7, #7
 800e15a:	2204      	movs	r2, #4
 800e15c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800e15e:	1dfb      	adds	r3, r7, #7
 800e160:	781b      	ldrb	r3, [r3, #0]
}
 800e162:	0018      	movs	r0, r3
 800e164:	46bd      	mov	sp, r7
 800e166:	b003      	add	sp, #12
 800e168:	bd90      	pop	{r4, r7, pc}
	...

0800e16c <powerDisplay>:

void powerDisplay(Battery_Status status){
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	0002      	movs	r2, r0
 800e174:	1dfb      	adds	r3, r7, #7
 800e176:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800e178:	1dfb      	adds	r3, r7, #7
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	2b04      	cmp	r3, #4
 800e17e:	d105      	bne.n	800e18c <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800e180:	4a18      	ldr	r2, [pc, #96]	@ (800e1e4 <powerDisplay+0x78>)
 800e182:	4b19      	ldr	r3, [pc, #100]	@ (800e1e8 <powerDisplay+0x7c>)
 800e184:	0019      	movs	r1, r3
 800e186:	2003      	movs	r0, #3
 800e188:	f000 ff42 	bl	800f010 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800e18c:	1dfb      	adds	r3, r7, #7
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	2b03      	cmp	r3, #3
 800e192:	d105      	bne.n	800e1a0 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800e194:	4a15      	ldr	r2, [pc, #84]	@ (800e1ec <powerDisplay+0x80>)
 800e196:	4b14      	ldr	r3, [pc, #80]	@ (800e1e8 <powerDisplay+0x7c>)
 800e198:	0019      	movs	r1, r3
 800e19a:	2003      	movs	r0, #3
 800e19c:	f000 ff38 	bl	800f010 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800e1a0:	1dfb      	adds	r3, r7, #7
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d105      	bne.n	800e1b4 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800e1a8:	4a11      	ldr	r2, [pc, #68]	@ (800e1f0 <powerDisplay+0x84>)
 800e1aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e1e8 <powerDisplay+0x7c>)
 800e1ac:	0019      	movs	r1, r3
 800e1ae:	2003      	movs	r0, #3
 800e1b0:	f000 ff2e 	bl	800f010 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800e1b4:	1dfb      	adds	r3, r7, #7
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d105      	bne.n	800e1c8 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800e1bc:	4a0d      	ldr	r2, [pc, #52]	@ (800e1f4 <powerDisplay+0x88>)
 800e1be:	4b0a      	ldr	r3, [pc, #40]	@ (800e1e8 <powerDisplay+0x7c>)
 800e1c0:	0019      	movs	r1, r3
 800e1c2:	2003      	movs	r0, #3
 800e1c4:	f000 ff24 	bl	800f010 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800e1c8:	1dfb      	adds	r3, r7, #7
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d105      	bne.n	800e1dc <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800e1d0:	4a09      	ldr	r2, [pc, #36]	@ (800e1f8 <powerDisplay+0x8c>)
 800e1d2:	4b05      	ldr	r3, [pc, #20]	@ (800e1e8 <powerDisplay+0x7c>)
 800e1d4:	0019      	movs	r1, r3
 800e1d6:	2003      	movs	r0, #3
 800e1d8:	f000 ff1a 	bl	800f010 <CreateLine>
  }
}
 800e1dc:	46c0      	nop			@ (mov r8, r8)
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	b002      	add	sp, #8
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	08025f8c 	.word	0x08025f8c
 800e1e8:	08025fb0 	.word	0x08025fb0
 800e1ec:	08025fb4 	.word	0x08025fb4
 800e1f0:	08025fcc 	.word	0x08025fcc
 800e1f4:	08025fec 	.word	0x08025fec
 800e1f8:	08026004 	.word	0x08026004

0800e1fc <configCheck>:

void configCheck(){
 800e1fc:	b590      	push	{r4, r7, lr}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800e202:	f7f8 fd94 	bl	8006d2e <BootButton_Pressed>
 800e206:	1e03      	subs	r3, r0, #0
 800e208:	d007      	beq.n	800e21a <configCheck+0x1e>
 800e20a:	f7f8 fda1 	bl	8006d50 <UserButton_Pressed>
 800e20e:	1e03      	subs	r3, r0, #0
 800e210:	d003      	beq.n	800e21a <configCheck+0x1e>
    configSet = true;
 800e212:	4bb2      	ldr	r3, [pc, #712]	@ (800e4dc <configCheck+0x2e0>)
 800e214:	2201      	movs	r2, #1
 800e216:	701a      	strb	r2, [r3, #0]
 800e218:	e00a      	b.n	800e230 <configCheck+0x34>
  }
  else{
    configSet = false;
 800e21a:	4bb0      	ldr	r3, [pc, #704]	@ (800e4dc <configCheck+0x2e0>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800e220:	f001 fb3a 	bl	800f898 <HAL_GetTick>
 800e224:	0003      	movs	r3, r0
 800e226:	22fa      	movs	r2, #250	@ 0xfa
 800e228:	00d2      	lsls	r2, r2, #3
 800e22a:	189a      	adds	r2, r3, r2
 800e22c:	4bac      	ldr	r3, [pc, #688]	@ (800e4e0 <configCheck+0x2e4>)
 800e22e:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800e230:	4baa      	ldr	r3, [pc, #680]	@ (800e4dc <configCheck+0x2e0>)
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00d      	beq.n	800e254 <configCheck+0x58>
 800e238:	4ba9      	ldr	r3, [pc, #676]	@ (800e4e0 <configCheck+0x2e4>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	0018      	movs	r0, r3
 800e23e:	f000 fe91 	bl	800ef64 <TimestampIsReached>
 800e242:	1e03      	subs	r3, r0, #0
 800e244:	d006      	beq.n	800e254 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800e246:	f7f5 fb7b 	bl	8003940 <SetConfigMode>
    SetDBLED(true, true, true);
 800e24a:	2201      	movs	r2, #1
 800e24c:	2101      	movs	r1, #1
 800e24e:	2001      	movs	r0, #1
 800e250:	f7ff fcaa 	bl	800dba8 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800e254:	f7f8 fd6b 	bl	8006d2e <BootButton_Pressed>
 800e258:	0003      	movs	r3, r0
 800e25a:	001a      	movs	r2, r3
 800e25c:	2301      	movs	r3, #1
 800e25e:	4053      	eors	r3, r2
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	d054      	beq.n	800e310 <configCheck+0x114>
 800e266:	f7f8 fd73 	bl	8006d50 <UserButton_Pressed>
 800e26a:	1e03      	subs	r3, r0, #0
 800e26c:	d050      	beq.n	800e310 <configCheck+0x114>
 800e26e:	4b9d      	ldr	r3, [pc, #628]	@ (800e4e4 <configCheck+0x2e8>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	2201      	movs	r2, #1
 800e274:	4053      	eors	r3, r2
 800e276:	b2db      	uxtb	r3, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d049      	beq.n	800e310 <configCheck+0x114>
 800e27c:	f7f5 fb80 	bl	8003980 <GetReconfigMode>
 800e280:	0003      	movs	r3, r0
 800e282:	001a      	movs	r2, r3
 800e284:	2301      	movs	r3, #1
 800e286:	4053      	eors	r3, r2
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d040      	beq.n	800e310 <configCheck+0x114>
    SetLEDsOff();
 800e28e:	f7ff fe15 	bl	800debc <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800e292:	4a95      	ldr	r2, [pc, #596]	@ (800e4e8 <configCheck+0x2ec>)
 800e294:	4994      	ldr	r1, [pc, #592]	@ (800e4e8 <configCheck+0x2ec>)
 800e296:	4b94      	ldr	r3, [pc, #592]	@ (800e4e8 <configCheck+0x2ec>)
 800e298:	0018      	movs	r0, r3
 800e29a:	f7ff fccf 	bl	800dc3c <SetVocLED>
    HAL_Delay(1500);
 800e29e:	4b93      	ldr	r3, [pc, #588]	@ (800e4ec <configCheck+0x2f0>)
 800e2a0:	0018      	movs	r0, r3
 800e2a2:	f001 fb03 	bl	800f8ac <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800e2a6:	23fa      	movs	r3, #250	@ 0xfa
 800e2a8:	011a      	lsls	r2, r3, #4
 800e2aa:	23fa      	movs	r3, #250	@ 0xfa
 800e2ac:	0119      	lsls	r1, r3, #4
 800e2ae:	23fa      	movs	r3, #250	@ 0xfa
 800e2b0:	011b      	lsls	r3, r3, #4
 800e2b2:	0018      	movs	r0, r3
 800e2b4:	f7ff fcc2 	bl	800dc3c <SetVocLED>
    userToggle = !userToggle;
 800e2b8:	4b8d      	ldr	r3, [pc, #564]	@ (800e4f0 <configCheck+0x2f4>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	1e5a      	subs	r2, r3, #1
 800e2be:	4193      	sbcs	r3, r2
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	4053      	eors	r3, r2
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	1c1a      	adds	r2, r3, #0
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	4b87      	ldr	r3, [pc, #540]	@ (800e4f0 <configCheck+0x2f4>)
 800e2d2:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800e2d4:	4b86      	ldr	r3, [pc, #536]	@ (800e4f0 <configCheck+0x2f4>)
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <configCheck+0xe4>
      EnabledConnectedDevices();
 800e2dc:	f7fb f820 	bl	8009320 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800e2e0:	4b83      	ldr	r3, [pc, #524]	@ (800e4f0 <configCheck+0x2f4>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <configCheck+0xf0>
 800e2e8:	4b82      	ldr	r3, [pc, #520]	@ (800e4f4 <configCheck+0x2f8>)
 800e2ea:	e000      	b.n	800e2ee <configCheck+0xf2>
 800e2ec:	4b82      	ldr	r3, [pc, #520]	@ (800e4f8 <configCheck+0x2fc>)
 800e2ee:	4a83      	ldr	r2, [pc, #524]	@ (800e4fc <configCheck+0x300>)
 800e2f0:	4983      	ldr	r1, [pc, #524]	@ (800e500 <configCheck+0x304>)
 800e2f2:	2003      	movs	r0, #3
 800e2f4:	f000 fe8c 	bl	800f010 <CreateLine>
    userbuttonHeld = true;
 800e2f8:	4b7a      	ldr	r3, [pc, #488]	@ (800e4e4 <configCheck+0x2e8>)
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800e2fe:	f001 facb 	bl	800f898 <HAL_GetTick>
 800e302:	0003      	movs	r3, r0
 800e304:	22fa      	movs	r2, #250	@ 0xfa
 800e306:	00d2      	lsls	r2, r2, #3
 800e308:	189a      	adds	r2, r3, r2
 800e30a:	4b7e      	ldr	r3, [pc, #504]	@ (800e504 <configCheck+0x308>)
 800e30c:	601a      	str	r2, [r3, #0]
 800e30e:	e002      	b.n	800e316 <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800e310:	4b74      	ldr	r3, [pc, #464]	@ (800e4e4 <configCheck+0x2e8>)
 800e312:	2200      	movs	r2, #0
 800e314:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800e316:	f7f8 fd0a 	bl	8006d2e <BootButton_Pressed>
 800e31a:	0003      	movs	r3, r0
 800e31c:	001a      	movs	r2, r3
 800e31e:	2301      	movs	r3, #1
 800e320:	4053      	eors	r3, r2
 800e322:	b2db      	uxtb	r3, r3
 800e324:	2b00      	cmp	r3, #0
 800e326:	d100      	bne.n	800e32a <configCheck+0x12e>
 800e328:	e0a4      	b.n	800e474 <configCheck+0x278>
 800e32a:	4b6e      	ldr	r3, [pc, #440]	@ (800e4e4 <configCheck+0x2e8>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d100      	bne.n	800e334 <configCheck+0x138>
 800e332:	e09f      	b.n	800e474 <configCheck+0x278>
 800e334:	4b73      	ldr	r3, [pc, #460]	@ (800e504 <configCheck+0x308>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	0018      	movs	r0, r3
 800e33a:	f000 fe13 	bl	800ef64 <TimestampIsReached>
 800e33e:	1e03      	subs	r3, r0, #0
 800e340:	d100      	bne.n	800e344 <configCheck+0x148>
 800e342:	e097      	b.n	800e474 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e344:	f7fa fd3e 	bl	8008dc4 <GetPMSensorPresence>
 800e348:	1e03      	subs	r3, r0, #0
 800e34a:	d100      	bne.n	800e34e <configCheck+0x152>
 800e34c:	e082      	b.n	800e454 <configCheck+0x258>
 800e34e:	4b6e      	ldr	r3, [pc, #440]	@ (800e508 <configCheck+0x30c>)
 800e350:	791b      	ldrb	r3, [r3, #4]
 800e352:	2b34      	cmp	r3, #52	@ 0x34
 800e354:	d004      	beq.n	800e360 <configCheck+0x164>
 800e356:	4b6c      	ldr	r3, [pc, #432]	@ (800e508 <configCheck+0x30c>)
 800e358:	791b      	ldrb	r3, [r3, #4]
 800e35a:	2b35      	cmp	r3, #53	@ 0x35
 800e35c:	d000      	beq.n	800e360 <configCheck+0x164>
 800e35e:	e079      	b.n	800e454 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800e360:	4b6a      	ldr	r3, [pc, #424]	@ (800e50c <configCheck+0x310>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	1e5a      	subs	r2, r3, #1
 800e366:	4193      	sbcs	r3, r2
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	2201      	movs	r2, #1
 800e36c:	4053      	eors	r3, r2
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	1c1a      	adds	r2, r3, #0
 800e372:	2301      	movs	r3, #1
 800e374:	4013      	ands	r3, r2
 800e376:	b2da      	uxtb	r2, r3
 800e378:	4b64      	ldr	r3, [pc, #400]	@ (800e50c <configCheck+0x310>)
 800e37a:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800e37c:	4b63      	ldr	r3, [pc, #396]	@ (800e50c <configCheck+0x310>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d005      	beq.n	800e390 <configCheck+0x194>
 800e384:	1dbc      	adds	r4, r7, #6
 800e386:	f7ff fb93 	bl	800dab0 <Calculate_LED_ON>
 800e38a:	0003      	movs	r3, r0
 800e38c:	8023      	strh	r3, [r4, #0]
 800e38e:	e003      	b.n	800e398 <configCheck+0x19c>
        else color = 4000;
 800e390:	1dbb      	adds	r3, r7, #6
 800e392:	22fa      	movs	r2, #250	@ 0xfa
 800e394:	0112      	lsls	r2, r2, #4
 800e396:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800e398:	4b5c      	ldr	r3, [pc, #368]	@ (800e50c <configCheck+0x310>)
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d001      	beq.n	800e3a4 <configCheck+0x1a8>
 800e3a0:	4b5b      	ldr	r3, [pc, #364]	@ (800e510 <configCheck+0x314>)
 800e3a2:	e000      	b.n	800e3a6 <configCheck+0x1aa>
 800e3a4:	4b5b      	ldr	r3, [pc, #364]	@ (800e514 <configCheck+0x318>)
 800e3a6:	4a5c      	ldr	r2, [pc, #368]	@ (800e518 <configCheck+0x31c>)
 800e3a8:	495c      	ldr	r1, [pc, #368]	@ (800e51c <configCheck+0x320>)
 800e3aa:	2002      	movs	r0, #2
 800e3ac:	f000 fe30 	bl	800f010 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800e3b0:	1d7b      	adds	r3, r7, #5
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	701a      	strb	r2, [r3, #0]
 800e3b6:	e028      	b.n	800e40a <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800e3b8:	f7ff fb7a 	bl	800dab0 <Calculate_LED_ON>
 800e3bc:	0003      	movs	r3, r0
 800e3be:	001a      	movs	r2, r3
 800e3c0:	4b57      	ldr	r3, [pc, #348]	@ (800e520 <configCheck+0x324>)
 800e3c2:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800e3c4:	4b56      	ldr	r3, [pc, #344]	@ (800e520 <configCheck+0x324>)
 800e3c6:	1dba      	adds	r2, r7, #6
 800e3c8:	8812      	ldrh	r2, [r2, #0]
 800e3ca:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800e3cc:	4b54      	ldr	r3, [pc, #336]	@ (800e520 <configCheck+0x324>)
 800e3ce:	1dba      	adds	r2, r7, #6
 800e3d0:	8812      	ldrh	r2, [r2, #0]
 800e3d2:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800e3d4:	23c8      	movs	r3, #200	@ 0xc8
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	0018      	movs	r0, r3
 800e3da:	f001 fa67 	bl	800f8ac <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800e3de:	4b50      	ldr	r3, [pc, #320]	@ (800e520 <configCheck+0x324>)
 800e3e0:	22fa      	movs	r2, #250	@ 0xfa
 800e3e2:	0112      	lsls	r2, r2, #4
 800e3e4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800e3e6:	4b4e      	ldr	r3, [pc, #312]	@ (800e520 <configCheck+0x324>)
 800e3e8:	22fa      	movs	r2, #250	@ 0xfa
 800e3ea:	0112      	lsls	r2, r2, #4
 800e3ec:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800e3ee:	4b4c      	ldr	r3, [pc, #304]	@ (800e520 <configCheck+0x324>)
 800e3f0:	22fa      	movs	r2, #250	@ 0xfa
 800e3f2:	0112      	lsls	r2, r2, #4
 800e3f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800e3f6:	23c8      	movs	r3, #200	@ 0xc8
 800e3f8:	005b      	lsls	r3, r3, #1
 800e3fa:	0018      	movs	r0, r3
 800e3fc:	f001 fa56 	bl	800f8ac <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800e400:	1d7b      	adds	r3, r7, #5
 800e402:	781a      	ldrb	r2, [r3, #0]
 800e404:	1d7b      	adds	r3, r7, #5
 800e406:	3201      	adds	r2, #1
 800e408:	701a      	strb	r2, [r3, #0]
 800e40a:	1d7b      	adds	r3, r7, #5
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d9d2      	bls.n	800e3b8 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800e412:	4b37      	ldr	r3, [pc, #220]	@ (800e4f0 <configCheck+0x2f4>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	1e5a      	subs	r2, r3, #1
 800e418:	4193      	sbcs	r3, r2
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	2201      	movs	r2, #1
 800e41e:	4053      	eors	r3, r2
 800e420:	b2db      	uxtb	r3, r3
 800e422:	1c1a      	adds	r2, r3, #0
 800e424:	2301      	movs	r3, #1
 800e426:	4013      	ands	r3, r2
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	4b31      	ldr	r3, [pc, #196]	@ (800e4f0 <configCheck+0x2f4>)
 800e42c:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800e42e:	4b30      	ldr	r3, [pc, #192]	@ (800e4f0 <configCheck+0x2f4>)
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <configCheck+0x23e>
 800e436:	4b36      	ldr	r3, [pc, #216]	@ (800e510 <configCheck+0x314>)
 800e438:	e000      	b.n	800e43c <configCheck+0x240>
 800e43a:	4b36      	ldr	r3, [pc, #216]	@ (800e514 <configCheck+0x318>)
 800e43c:	4a39      	ldr	r2, [pc, #228]	@ (800e524 <configCheck+0x328>)
 800e43e:	4937      	ldr	r1, [pc, #220]	@ (800e51c <configCheck+0x320>)
 800e440:	2002      	movs	r0, #2
 800e442:	f000 fde5 	bl	800f010 <CreateLine>
      if (usbPluggedIn) {
 800e446:	4b38      	ldr	r3, [pc, #224]	@ (800e528 <configCheck+0x32c>)
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d009      	beq.n	800e462 <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800e44e:	f7fc f861 	bl	800a514 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e452:	e006      	b.n	800e462 <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800e454:	4a35      	ldr	r2, [pc, #212]	@ (800e52c <configCheck+0x330>)
 800e456:	4b31      	ldr	r3, [pc, #196]	@ (800e51c <configCheck+0x320>)
 800e458:	0019      	movs	r1, r3
 800e45a:	2002      	movs	r0, #2
 800e45c:	f000 fdd8 	bl	800f010 <CreateLine>
 800e460:	e000      	b.n	800e464 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e462:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800e464:	46c0      	nop			@ (mov r8, r8)
 800e466:	f7f8 fc73 	bl	8006d50 <UserButton_Pressed>
 800e46a:	1e03      	subs	r3, r0, #0
 800e46c:	d1fb      	bne.n	800e466 <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800e46e:	4b1d      	ldr	r3, [pc, #116]	@ (800e4e4 <configCheck+0x2e8>)
 800e470:	2200      	movs	r2, #0
 800e472:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800e474:	f7f8 fc5b 	bl	8006d2e <BootButton_Pressed>
 800e478:	0003      	movs	r3, r0
 800e47a:	001a      	movs	r2, r3
 800e47c:	2301      	movs	r3, #1
 800e47e:	4053      	eors	r3, r2
 800e480:	b2db      	uxtb	r3, r3
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00b      	beq.n	800e49e <configCheck+0x2a2>
 800e486:	f7f8 fc63 	bl	8006d50 <UserButton_Pressed>
 800e48a:	0003      	movs	r3, r0
 800e48c:	001a      	movs	r2, r3
 800e48e:	2301      	movs	r3, #1
 800e490:	4053      	eors	r3, r2
 800e492:	b2db      	uxtb	r3, r3
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <configCheck+0x2a2>
    userbuttonHeld = false;
 800e498:	4b12      	ldr	r3, [pc, #72]	@ (800e4e4 <configCheck+0x2e8>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800e49e:	f7f8 fc37 	bl	8006d10 <Check_USB_PowerOn>
 800e4a2:	1e03      	subs	r3, r0, #0
 800e4a4:	d003      	beq.n	800e4ae <configCheck+0x2b2>
    usbPluggedIn = true;
 800e4a6:	4b20      	ldr	r3, [pc, #128]	@ (800e528 <configCheck+0x32c>)
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800e4ac:	e012      	b.n	800e4d4 <configCheck+0x2d8>
    if(!userToggle && !init){
 800e4ae:	4b10      	ldr	r3, [pc, #64]	@ (800e4f0 <configCheck+0x2f4>)
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	4053      	eors	r3, r2
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d008      	beq.n	800e4ce <configCheck+0x2d2>
 800e4bc:	4b1c      	ldr	r3, [pc, #112]	@ (800e530 <configCheck+0x334>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	4053      	eors	r3, r2
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d001      	beq.n	800e4ce <configCheck+0x2d2>
      SetLEDsOff();
 800e4ca:	f7ff fcf7 	bl	800debc <SetLEDsOff>
    usbPluggedIn = false;
 800e4ce:	4b16      	ldr	r3, [pc, #88]	@ (800e528 <configCheck+0x32c>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	701a      	strb	r2, [r3, #0]
}
 800e4d4:	46c0      	nop			@ (mov r8, r8)
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	b003      	add	sp, #12
 800e4da:	bd90      	pop	{r4, r7, pc}
 800e4dc:	20001d38 	.word	0x20001d38
 800e4e0:	20001d40 	.word	0x20001d40
 800e4e4:	20001d3b 	.word	0x20001d3b
 800e4e8:	00000bb8 	.word	0x00000bb8
 800e4ec:	000005dc 	.word	0x000005dc
 800e4f0:	20001d3a 	.word	0x20001d3a
 800e4f4:	08026028 	.word	0x08026028
 800e4f8:	0802602c 	.word	0x0802602c
 800e4fc:	08026030 	.word	0x08026030
 800e500:	08025fb0 	.word	0x08025fb0
 800e504:	20001d44 	.word	0x20001d44
 800e508:	20000dac 	.word	0x20000dac
 800e50c:	20000daa 	.word	0x20000daa
 800e510:	08026050 	.word	0x08026050
 800e514:	08026058 	.word	0x08026058
 800e518:	08026064 	.word	0x08026064
 800e51c:	08026084 	.word	0x08026084
 800e520:	40000400 	.word	0x40000400
 800e524:	08026088 	.word	0x08026088
 800e528:	20001d39 	.word	0x20001d39
 800e52c:	080260a0 	.word	0x080260a0
 800e530:	200000c8 	.word	0x200000c8

0800e534 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800e534:	b590      	push	{r4, r7, lr}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800e53a:	1dfc      	adds	r4, r7, #7
 800e53c:	f7ff fdfa 	bl	800e134 <powerCheck>
 800e540:	0003      	movs	r3, r0
 800e542:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800e544:	1dfb      	adds	r3, r7, #7
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	0018      	movs	r0, r3
 800e54a:	f7ff fe0f 	bl	800e16c <powerDisplay>
  return status;
 800e54e:	1dfb      	adds	r3, r7, #7
 800e550:	781b      	ldrb	r3, [r3, #0]
}
 800e552:	0018      	movs	r0, r3
 800e554:	46bd      	mov	sp, r7
 800e556:	b003      	add	sp, #12
 800e558:	bd90      	pop	{r4, r7, pc}
	...

0800e55c <setuserToggle>:

void setuserToggle(void) {
 800e55c:	b580      	push	{r7, lr}
 800e55e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800e560:	f7ff fde8 	bl	800e134 <powerCheck>
 800e564:	0003      	movs	r3, r0
 800e566:	2b04      	cmp	r3, #4
 800e568:	d004      	beq.n	800e574 <setuserToggle+0x18>
    userToggle = true;
 800e56a:	4b04      	ldr	r3, [pc, #16]	@ (800e57c <setuserToggle+0x20>)
 800e56c:	2201      	movs	r2, #1
 800e56e:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800e570:	f7fa fed6 	bl	8009320 <EnabledConnectedDevices>
  }
}
 800e574:	46c0      	nop			@ (mov r8, r8)
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	46c0      	nop			@ (mov r8, r8)
 800e57c:	20001d3a 	.word	0x20001d3a

0800e580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e584:	4b07      	ldr	r3, [pc, #28]	@ (800e5a4 <HAL_MspInit+0x24>)
 800e586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e588:	4b06      	ldr	r3, [pc, #24]	@ (800e5a4 <HAL_MspInit+0x24>)
 800e58a:	2101      	movs	r1, #1
 800e58c:	430a      	orrs	r2, r1
 800e58e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800e590:	4b04      	ldr	r3, [pc, #16]	@ (800e5a4 <HAL_MspInit+0x24>)
 800e592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e594:	4b03      	ldr	r3, [pc, #12]	@ (800e5a4 <HAL_MspInit+0x24>)
 800e596:	2180      	movs	r1, #128	@ 0x80
 800e598:	0549      	lsls	r1, r1, #21
 800e59a:	430a      	orrs	r2, r1
 800e59c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e59e:	46c0      	nop			@ (mov r8, r8)
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	40021000 	.word	0x40021000

0800e5a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e5ac:	46c0      	nop			@ (mov r8, r8)
 800e5ae:	e7fd      	b.n	800e5ac <NMI_Handler+0x4>

0800e5b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e5b4:	46c0      	nop			@ (mov r8, r8)
 800e5b6:	e7fd      	b.n	800e5b4 <HardFault_Handler+0x4>

0800e5b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800e5bc:	46c0      	nop			@ (mov r8, r8)
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e5c6:	46c0      	nop			@ (mov r8, r8)
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e5d0:	f001 f950 	bl	800f874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800e5d4:	46c0      	nop			@ (mov r8, r8)
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800e5e0:	4b03      	ldr	r3, [pc, #12]	@ (800e5f0 <RTC_IRQHandler+0x14>)
 800e5e2:	0018      	movs	r0, r3
 800e5e4:	f008 fe76 	bl	80172d4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800e5e8:	46c0      	nop			@ (mov r8, r8)
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	46c0      	nop			@ (mov r8, r8)
 800e5f0:	20000d84 	.word	0x20000d84

0800e5f4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800e5f8:	2380      	movs	r3, #128	@ 0x80
 800e5fa:	021b      	lsls	r3, r3, #8
 800e5fc:	0018      	movs	r0, r3
 800e5fe:	f002 fbf9 	bl	8010df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800e602:	46c0      	nop			@ (mov r8, r8)
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800e60c:	4b05      	ldr	r3, [pc, #20]	@ (800e624 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800e60e:	0018      	movs	r0, r3
 800e610:	f001 ff81 	bl	8010516 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800e614:	4b04      	ldr	r3, [pc, #16]	@ (800e628 <DMA1_Channel2_3_IRQHandler+0x20>)
 800e616:	0018      	movs	r0, r3
 800e618:	f001 ff7d 	bl	8010516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800e61c:	46c0      	nop			@ (mov r8, r8)
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	46c0      	nop			@ (mov r8, r8)
 800e624:	20000c28 	.word	0x20000c28
 800e628:	20000be0 	.word	0x20000be0

0800e62c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800e630:	4b07      	ldr	r3, [pc, #28]	@ (800e650 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800e632:	0018      	movs	r0, r3
 800e634:	f001 ff6f 	bl	8010516 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800e638:	4b06      	ldr	r3, [pc, #24]	@ (800e654 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800e63a:	0018      	movs	r0, r3
 800e63c:	f001 ff6b 	bl	8010516 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800e640:	4b05      	ldr	r3, [pc, #20]	@ (800e658 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800e642:	0018      	movs	r0, r3
 800e644:	f001 ff67 	bl	8010516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800e648:	46c0      	nop			@ (mov r8, r8)
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	46c0      	nop			@ (mov r8, r8)
 800e650:	20000cac 	.word	0x20000cac
 800e654:	20002040 	.word	0x20002040
 800e658:	20002088 	.word	0x20002088

0800e65c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800e660:	4b03      	ldr	r3, [pc, #12]	@ (800e670 <USART4_5_IRQHandler+0x14>)
 800e662:	0018      	movs	r0, r3
 800e664:	f009 fd30 	bl	80180c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800e668:	46c0      	nop			@ (mov r8, r8)
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	46c0      	nop			@ (mov r8, r8)
 800e670:	20001f88 	.word	0x20001f88

0800e674 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800e678:	4b09      	ldr	r3, [pc, #36]	@ (800e6a0 <I2C1_IRQHandler+0x2c>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	699a      	ldr	r2, [r3, #24]
 800e67e:	23e0      	movs	r3, #224	@ 0xe0
 800e680:	00db      	lsls	r3, r3, #3
 800e682:	4013      	ands	r3, r2
 800e684:	d004      	beq.n	800e690 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800e686:	4b06      	ldr	r3, [pc, #24]	@ (800e6a0 <I2C1_IRQHandler+0x2c>)
 800e688:	0018      	movs	r0, r3
 800e68a:	f003 f89b 	bl	80117c4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800e68e:	e003      	b.n	800e698 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800e690:	4b03      	ldr	r3, [pc, #12]	@ (800e6a0 <I2C1_IRQHandler+0x2c>)
 800e692:	0018      	movs	r0, r3
 800e694:	f003 f87c 	bl	8011790 <HAL_I2C_EV_IRQHandler>
}
 800e698:	46c0      	nop			@ (mov r8, r8)
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	46c0      	nop			@ (mov r8, r8)
 800e6a0:	20000b38 	.word	0x20000b38

0800e6a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e6a8:	4b03      	ldr	r3, [pc, #12]	@ (800e6b8 <USART1_IRQHandler+0x14>)
 800e6aa:	0018      	movs	r0, r3
 800e6ac:	f009 fd0c 	bl	80180c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e6b0:	46c0      	nop			@ (mov r8, r8)
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	46c0      	nop			@ (mov r8, r8)
 800e6b8:	20001ed0 	.word	0x20001ed0

0800e6bc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800e6c0:	4b03      	ldr	r3, [pc, #12]	@ (800e6d0 <USB_IRQHandler+0x14>)
 800e6c2:	0018      	movs	r0, r3
 800e6c4:	f005 fc5c 	bl	8013f80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800e6c8:	46c0      	nop			@ (mov r8, r8)
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	46c0      	nop			@ (mov r8, r8)
 800e6d0:	20002e9c 	.word	0x20002e9c

0800e6d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	af00      	add	r7, sp, #0
  return 1;
 800e6d8:	2301      	movs	r3, #1
}
 800e6da:	0018      	movs	r0, r3
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <_kill>:

int _kill(int pid, int sig)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e6ea:	f012 fbf3 	bl	8020ed4 <__errno>
 800e6ee:	0003      	movs	r3, r0
 800e6f0:	2216      	movs	r2, #22
 800e6f2:	601a      	str	r2, [r3, #0]
  return -1;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	425b      	negs	r3, r3
}
 800e6f8:	0018      	movs	r0, r3
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	b002      	add	sp, #8
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_exit>:

void _exit (int status)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e708:	2301      	movs	r3, #1
 800e70a:	425a      	negs	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	0011      	movs	r1, r2
 800e710:	0018      	movs	r0, r3
 800e712:	f7ff ffe5 	bl	800e6e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800e716:	46c0      	nop			@ (mov r8, r8)
 800e718:	e7fd      	b.n	800e716 <_exit+0x16>

0800e71a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b086      	sub	sp, #24
 800e71e:	af00      	add	r7, sp, #0
 800e720:	60f8      	str	r0, [r7, #12]
 800e722:	60b9      	str	r1, [r7, #8]
 800e724:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e726:	2300      	movs	r3, #0
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	e00a      	b.n	800e742 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e72c:	e000      	b.n	800e730 <_read+0x16>
 800e72e:	bf00      	nop
 800e730:	0001      	movs	r1, r0
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	1c5a      	adds	r2, r3, #1
 800e736:	60ba      	str	r2, [r7, #8]
 800e738:	b2ca      	uxtb	r2, r1
 800e73a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	3301      	adds	r3, #1
 800e740:	617b      	str	r3, [r7, #20]
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	429a      	cmp	r2, r3
 800e748:	dbf0      	blt.n	800e72c <_read+0x12>
  }

  return len;
 800e74a:	687b      	ldr	r3, [r7, #4]
}
 800e74c:	0018      	movs	r0, r3
 800e74e:	46bd      	mov	sp, r7
 800e750:	b006      	add	sp, #24
 800e752:	bd80      	pop	{r7, pc}

0800e754 <_close>:
  }
  return len;
}

int _close(int file)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e75c:	2301      	movs	r3, #1
 800e75e:	425b      	negs	r3, r3
}
 800e760:	0018      	movs	r0, r3
 800e762:	46bd      	mov	sp, r7
 800e764:	b002      	add	sp, #8
 800e766:	bd80      	pop	{r7, pc}

0800e768 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2280      	movs	r2, #128	@ 0x80
 800e776:	0192      	lsls	r2, r2, #6
 800e778:	605a      	str	r2, [r3, #4]
  return 0;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	0018      	movs	r0, r3
 800e77e:	46bd      	mov	sp, r7
 800e780:	b002      	add	sp, #8
 800e782:	bd80      	pop	{r7, pc}

0800e784 <_isatty>:

int _isatty(int file)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e78c:	2301      	movs	r3, #1
}
 800e78e:	0018      	movs	r0, r3
 800e790:	46bd      	mov	sp, r7
 800e792:	b002      	add	sp, #8
 800e794:	bd80      	pop	{r7, pc}

0800e796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b084      	sub	sp, #16
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	60f8      	str	r0, [r7, #12]
 800e79e:	60b9      	str	r1, [r7, #8]
 800e7a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	0018      	movs	r0, r3
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	b004      	add	sp, #16
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e7b4:	4a14      	ldr	r2, [pc, #80]	@ (800e808 <_sbrk+0x5c>)
 800e7b6:	4b15      	ldr	r3, [pc, #84]	@ (800e80c <_sbrk+0x60>)
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e7c0:	4b13      	ldr	r3, [pc, #76]	@ (800e810 <_sbrk+0x64>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e7c8:	4b11      	ldr	r3, [pc, #68]	@ (800e810 <_sbrk+0x64>)
 800e7ca:	4a12      	ldr	r2, [pc, #72]	@ (800e814 <_sbrk+0x68>)
 800e7cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e7ce:	4b10      	ldr	r3, [pc, #64]	@ (800e810 <_sbrk+0x64>)
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	18d3      	adds	r3, r2, r3
 800e7d6:	693a      	ldr	r2, [r7, #16]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d207      	bcs.n	800e7ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e7dc:	f012 fb7a 	bl	8020ed4 <__errno>
 800e7e0:	0003      	movs	r3, r0
 800e7e2:	220c      	movs	r2, #12
 800e7e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	425b      	negs	r3, r3
 800e7ea:	e009      	b.n	800e800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e7ec:	4b08      	ldr	r3, [pc, #32]	@ (800e810 <_sbrk+0x64>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e7f2:	4b07      	ldr	r3, [pc, #28]	@ (800e810 <_sbrk+0x64>)
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	18d2      	adds	r2, r2, r3
 800e7fa:	4b05      	ldr	r3, [pc, #20]	@ (800e810 <_sbrk+0x64>)
 800e7fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
}
 800e800:	0018      	movs	r0, r3
 800e802:	46bd      	mov	sp, r7
 800e804:	b006      	add	sp, #24
 800e806:	bd80      	pop	{r7, pc}
 800e808:	20005000 	.word	0x20005000
 800e80c:	00000400 	.word	0x00000400
 800e810:	20001d54 	.word	0x20001d54
 800e814:	20003500 	.word	0x20003500

0800e818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e81c:	46c0      	nop			@ (mov r8, r8)
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
	...

0800e824 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e82a:	2310      	movs	r3, #16
 800e82c:	18fb      	adds	r3, r7, r3
 800e82e:	0018      	movs	r0, r3
 800e830:	2308      	movs	r3, #8
 800e832:	001a      	movs	r2, r3
 800e834:	2100      	movs	r1, #0
 800e836:	f012 faa9 	bl	8020d8c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e83a:	003b      	movs	r3, r7
 800e83c:	0018      	movs	r0, r3
 800e83e:	2310      	movs	r3, #16
 800e840:	001a      	movs	r2, r3
 800e842:	2100      	movs	r1, #0
 800e844:	f012 faa2 	bl	8020d8c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e848:	4b2e      	ldr	r3, [pc, #184]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e84a:	2280      	movs	r2, #128	@ 0x80
 800e84c:	05d2      	lsls	r2, r2, #23
 800e84e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e850:	4b2c      	ldr	r3, [pc, #176]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e852:	2200      	movs	r2, #0
 800e854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e856:	4b2b      	ldr	r3, [pc, #172]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e858:	2200      	movs	r2, #0
 800e85a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800e85c:	4b29      	ldr	r3, [pc, #164]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e85e:	4a2a      	ldr	r2, [pc, #168]	@ (800e908 <MX_TIM2_Init+0xe4>)
 800e860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e862:	4b28      	ldr	r3, [pc, #160]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e864:	2200      	movs	r2, #0
 800e866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e868:	4b26      	ldr	r3, [pc, #152]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e86e:	4b25      	ldr	r3, [pc, #148]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e870:	0018      	movs	r0, r3
 800e872:	f008 fe3d 	bl	80174f0 <HAL_TIM_PWM_Init>
 800e876:	1e03      	subs	r3, r0, #0
 800e878:	d001      	beq.n	800e87e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800e87a:	f7fa fa63 	bl	8008d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e87e:	2110      	movs	r1, #16
 800e880:	187b      	adds	r3, r7, r1
 800e882:	2200      	movs	r2, #0
 800e884:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e886:	187b      	adds	r3, r7, r1
 800e888:	2200      	movs	r2, #0
 800e88a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e88c:	187a      	adds	r2, r7, r1
 800e88e:	4b1d      	ldr	r3, [pc, #116]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e890:	0011      	movs	r1, r2
 800e892:	0018      	movs	r0, r3
 800e894:	f009 f94a 	bl	8017b2c <HAL_TIMEx_MasterConfigSynchronization>
 800e898:	1e03      	subs	r3, r0, #0
 800e89a:	d001      	beq.n	800e8a0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800e89c:	f7fa fa52 	bl	8008d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e8a0:	003b      	movs	r3, r7
 800e8a2:	2260      	movs	r2, #96	@ 0x60
 800e8a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e8a6:	003b      	movs	r3, r7
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e8ac:	003b      	movs	r3, r7
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e8b2:	003b      	movs	r3, r7
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e8b8:	0039      	movs	r1, r7
 800e8ba:	4b12      	ldr	r3, [pc, #72]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	0018      	movs	r0, r3
 800e8c0:	f008 fee8 	bl	8017694 <HAL_TIM_PWM_ConfigChannel>
 800e8c4:	1e03      	subs	r3, r0, #0
 800e8c6:	d001      	beq.n	800e8cc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800e8c8:	f7fa fa3c 	bl	8008d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e8cc:	0039      	movs	r1, r7
 800e8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e8d0:	2208      	movs	r2, #8
 800e8d2:	0018      	movs	r0, r3
 800e8d4:	f008 fede 	bl	8017694 <HAL_TIM_PWM_ConfigChannel>
 800e8d8:	1e03      	subs	r3, r0, #0
 800e8da:	d001      	beq.n	800e8e0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800e8dc:	f7fa fa32 	bl	8008d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e8e0:	0039      	movs	r1, r7
 800e8e2:	4b08      	ldr	r3, [pc, #32]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e8e4:	220c      	movs	r2, #12
 800e8e6:	0018      	movs	r0, r3
 800e8e8:	f008 fed4 	bl	8017694 <HAL_TIM_PWM_ConfigChannel>
 800e8ec:	1e03      	subs	r3, r0, #0
 800e8ee:	d001      	beq.n	800e8f4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800e8f0:	f7fa fa28 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e8f4:	4b03      	ldr	r3, [pc, #12]	@ (800e904 <MX_TIM2_Init+0xe0>)
 800e8f6:	0018      	movs	r0, r3
 800e8f8:	f000 f8fe 	bl	800eaf8 <HAL_TIM_MspPostInit>

}
 800e8fc:	46c0      	nop			@ (mov r8, r8)
 800e8fe:	46bd      	mov	sp, r7
 800e900:	b006      	add	sp, #24
 800e902:	bd80      	pop	{r7, pc}
 800e904:	20001d58 	.word	0x20001d58
 800e908:	0000ffff 	.word	0x0000ffff

0800e90c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e912:	2310      	movs	r3, #16
 800e914:	18fb      	adds	r3, r7, r3
 800e916:	0018      	movs	r0, r3
 800e918:	2308      	movs	r3, #8
 800e91a:	001a      	movs	r2, r3
 800e91c:	2100      	movs	r1, #0
 800e91e:	f012 fa35 	bl	8020d8c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e922:	003b      	movs	r3, r7
 800e924:	0018      	movs	r0, r3
 800e926:	2310      	movs	r3, #16
 800e928:	001a      	movs	r2, r3
 800e92a:	2100      	movs	r1, #0
 800e92c:	f012 fa2e 	bl	8020d8c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e930:	4b32      	ldr	r3, [pc, #200]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e932:	4a33      	ldr	r2, [pc, #204]	@ (800ea00 <MX_TIM3_Init+0xf4>)
 800e934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e936:	4b31      	ldr	r3, [pc, #196]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e938:	2200      	movs	r2, #0
 800e93a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e93c:	4b2f      	ldr	r3, [pc, #188]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e93e:	2200      	movs	r2, #0
 800e940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800e942:	4b2e      	ldr	r3, [pc, #184]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e944:	4a2f      	ldr	r2, [pc, #188]	@ (800ea04 <MX_TIM3_Init+0xf8>)
 800e946:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e948:	4b2c      	ldr	r3, [pc, #176]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e94e:	4b2b      	ldr	r3, [pc, #172]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e950:	2200      	movs	r2, #0
 800e952:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e954:	4b29      	ldr	r3, [pc, #164]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e956:	0018      	movs	r0, r3
 800e958:	f008 fdca 	bl	80174f0 <HAL_TIM_PWM_Init>
 800e95c:	1e03      	subs	r3, r0, #0
 800e95e:	d001      	beq.n	800e964 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800e960:	f7fa f9f0 	bl	8008d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e964:	2110      	movs	r1, #16
 800e966:	187b      	adds	r3, r7, r1
 800e968:	2200      	movs	r2, #0
 800e96a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e96c:	187b      	adds	r3, r7, r1
 800e96e:	2200      	movs	r2, #0
 800e970:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e972:	187a      	adds	r2, r7, r1
 800e974:	4b21      	ldr	r3, [pc, #132]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e976:	0011      	movs	r1, r2
 800e978:	0018      	movs	r0, r3
 800e97a:	f009 f8d7 	bl	8017b2c <HAL_TIMEx_MasterConfigSynchronization>
 800e97e:	1e03      	subs	r3, r0, #0
 800e980:	d001      	beq.n	800e986 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800e982:	f7fa f9df 	bl	8008d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e986:	003b      	movs	r3, r7
 800e988:	2260      	movs	r2, #96	@ 0x60
 800e98a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e98c:	003b      	movs	r3, r7
 800e98e:	2200      	movs	r2, #0
 800e990:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e992:	003b      	movs	r3, r7
 800e994:	2200      	movs	r2, #0
 800e996:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e998:	003b      	movs	r3, r7
 800e99a:	2200      	movs	r2, #0
 800e99c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e99e:	0039      	movs	r1, r7
 800e9a0:	4b16      	ldr	r3, [pc, #88]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	0018      	movs	r0, r3
 800e9a6:	f008 fe75 	bl	8017694 <HAL_TIM_PWM_ConfigChannel>
 800e9aa:	1e03      	subs	r3, r0, #0
 800e9ac:	d001      	beq.n	800e9b2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800e9ae:	f7fa f9c9 	bl	8008d44 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800e9b2:	4b12      	ldr	r3, [pc, #72]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e9b4:	2104      	movs	r1, #4
 800e9b6:	0018      	movs	r0, r3
 800e9b8:	f009 f916 	bl	8017be8 <HAL_TIMEx_RemapConfig>
 800e9bc:	1e03      	subs	r3, r0, #0
 800e9be:	d001      	beq.n	800e9c4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800e9c0:	f7fa f9c0 	bl	8008d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e9c4:	0039      	movs	r1, r7
 800e9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e9c8:	2204      	movs	r2, #4
 800e9ca:	0018      	movs	r0, r3
 800e9cc:	f008 fe62 	bl	8017694 <HAL_TIM_PWM_ConfigChannel>
 800e9d0:	1e03      	subs	r3, r0, #0
 800e9d2:	d001      	beq.n	800e9d8 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800e9d4:	f7fa f9b6 	bl	8008d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e9d8:	0039      	movs	r1, r7
 800e9da:	4b08      	ldr	r3, [pc, #32]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e9dc:	2208      	movs	r2, #8
 800e9de:	0018      	movs	r0, r3
 800e9e0:	f008 fe58 	bl	8017694 <HAL_TIM_PWM_ConfigChannel>
 800e9e4:	1e03      	subs	r3, r0, #0
 800e9e6:	d001      	beq.n	800e9ec <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800e9e8:	f7fa f9ac 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e9ec:	4b03      	ldr	r3, [pc, #12]	@ (800e9fc <MX_TIM3_Init+0xf0>)
 800e9ee:	0018      	movs	r0, r3
 800e9f0:	f000 f882 	bl	800eaf8 <HAL_TIM_MspPostInit>

}
 800e9f4:	46c0      	nop			@ (mov r8, r8)
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	b006      	add	sp, #24
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	20001d98 	.word	0x20001d98
 800ea00:	40000400 	.word	0x40000400
 800ea04:	0000ffff 	.word	0x0000ffff

0800ea08 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ea0e:	003b      	movs	r3, r7
 800ea10:	0018      	movs	r0, r3
 800ea12:	2308      	movs	r3, #8
 800ea14:	001a      	movs	r2, r3
 800ea16:	2100      	movs	r1, #0
 800ea18:	f012 f9b8 	bl	8020d8c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ea1c:	4b15      	ldr	r3, [pc, #84]	@ (800ea74 <MX_TIM6_Init+0x6c>)
 800ea1e:	4a16      	ldr	r2, [pc, #88]	@ (800ea78 <MX_TIM6_Init+0x70>)
 800ea20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800ea22:	4b14      	ldr	r3, [pc, #80]	@ (800ea74 <MX_TIM6_Init+0x6c>)
 800ea24:	220a      	movs	r2, #10
 800ea26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ea28:	4b12      	ldr	r3, [pc, #72]	@ (800ea74 <MX_TIM6_Init+0x6c>)
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800ea2e:	4b11      	ldr	r3, [pc, #68]	@ (800ea74 <MX_TIM6_Init+0x6c>)
 800ea30:	4a12      	ldr	r2, [pc, #72]	@ (800ea7c <MX_TIM6_Init+0x74>)
 800ea32:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ea34:	4b0f      	ldr	r3, [pc, #60]	@ (800ea74 <MX_TIM6_Init+0x6c>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ea3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ea74 <MX_TIM6_Init+0x6c>)
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	f008 fcaf 	bl	80173a0 <HAL_TIM_Base_Init>
 800ea42:	1e03      	subs	r3, r0, #0
 800ea44:	d001      	beq.n	800ea4a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800ea46:	f7fa f97d 	bl	8008d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ea4a:	003b      	movs	r3, r7
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ea50:	003b      	movs	r3, r7
 800ea52:	2200      	movs	r2, #0
 800ea54:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ea56:	003a      	movs	r2, r7
 800ea58:	4b06      	ldr	r3, [pc, #24]	@ (800ea74 <MX_TIM6_Init+0x6c>)
 800ea5a:	0011      	movs	r1, r2
 800ea5c:	0018      	movs	r0, r3
 800ea5e:	f009 f865 	bl	8017b2c <HAL_TIMEx_MasterConfigSynchronization>
 800ea62:	1e03      	subs	r3, r0, #0
 800ea64:	d001      	beq.n	800ea6a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800ea66:	f7fa f96d 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ea6a:	46c0      	nop			@ (mov r8, r8)
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	b002      	add	sp, #8
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	46c0      	nop			@ (mov r8, r8)
 800ea74:	20001dd8 	.word	0x20001dd8
 800ea78:	40001000 	.word	0x40001000
 800ea7c:	0000ffff 	.word	0x0000ffff

0800ea80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	2380      	movs	r3, #128	@ 0x80
 800ea8e:	05db      	lsls	r3, r3, #23
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d106      	bne.n	800eaa2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ea94:	4b0a      	ldr	r3, [pc, #40]	@ (800eac0 <HAL_TIM_PWM_MspInit+0x40>)
 800ea96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea98:	4b09      	ldr	r3, [pc, #36]	@ (800eac0 <HAL_TIM_PWM_MspInit+0x40>)
 800ea9a:	2101      	movs	r1, #1
 800ea9c:	430a      	orrs	r2, r1
 800ea9e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800eaa0:	e00a      	b.n	800eab8 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4a07      	ldr	r2, [pc, #28]	@ (800eac4 <HAL_TIM_PWM_MspInit+0x44>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d105      	bne.n	800eab8 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800eaac:	4b04      	ldr	r3, [pc, #16]	@ (800eac0 <HAL_TIM_PWM_MspInit+0x40>)
 800eaae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eab0:	4b03      	ldr	r3, [pc, #12]	@ (800eac0 <HAL_TIM_PWM_MspInit+0x40>)
 800eab2:	2102      	movs	r1, #2
 800eab4:	430a      	orrs	r2, r1
 800eab6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800eab8:	46c0      	nop			@ (mov r8, r8)
 800eaba:	46bd      	mov	sp, r7
 800eabc:	b002      	add	sp, #8
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	40021000 	.word	0x40021000
 800eac4:	40000400 	.word	0x40000400

0800eac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a06      	ldr	r2, [pc, #24]	@ (800eaf0 <HAL_TIM_Base_MspInit+0x28>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d105      	bne.n	800eae6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800eada:	4b06      	ldr	r3, [pc, #24]	@ (800eaf4 <HAL_TIM_Base_MspInit+0x2c>)
 800eadc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eade:	4b05      	ldr	r3, [pc, #20]	@ (800eaf4 <HAL_TIM_Base_MspInit+0x2c>)
 800eae0:	2110      	movs	r1, #16
 800eae2:	430a      	orrs	r2, r1
 800eae4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800eae6:	46c0      	nop			@ (mov r8, r8)
 800eae8:	46bd      	mov	sp, r7
 800eaea:	b002      	add	sp, #8
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	46c0      	nop			@ (mov r8, r8)
 800eaf0:	40001000 	.word	0x40001000
 800eaf4:	40021000 	.word	0x40021000

0800eaf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800eaf8:	b590      	push	{r4, r7, lr}
 800eafa:	b08b      	sub	sp, #44	@ 0x2c
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb00:	2414      	movs	r4, #20
 800eb02:	193b      	adds	r3, r7, r4
 800eb04:	0018      	movs	r0, r3
 800eb06:	2314      	movs	r3, #20
 800eb08:	001a      	movs	r2, r3
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	f012 f93e 	bl	8020d8c <memset>
  if(timHandle->Instance==TIM2)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	2380      	movs	r3, #128	@ 0x80
 800eb16:	05db      	lsls	r3, r3, #23
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d123      	bne.n	800eb64 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb1c:	4b27      	ldr	r3, [pc, #156]	@ (800ebbc <HAL_TIM_MspPostInit+0xc4>)
 800eb1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb20:	4b26      	ldr	r3, [pc, #152]	@ (800ebbc <HAL_TIM_MspPostInit+0xc4>)
 800eb22:	2101      	movs	r1, #1
 800eb24:	430a      	orrs	r2, r1
 800eb26:	62da      	str	r2, [r3, #44]	@ 0x2c
 800eb28:	4b24      	ldr	r3, [pc, #144]	@ (800ebbc <HAL_TIM_MspPostInit+0xc4>)
 800eb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	4013      	ands	r3, r2
 800eb30:	613b      	str	r3, [r7, #16]
 800eb32:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800eb34:	0021      	movs	r1, r4
 800eb36:	187b      	adds	r3, r7, r1
 800eb38:	220d      	movs	r2, #13
 800eb3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb3c:	187b      	adds	r3, r7, r1
 800eb3e:	2202      	movs	r2, #2
 800eb40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb42:	187b      	adds	r3, r7, r1
 800eb44:	2200      	movs	r2, #0
 800eb46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb48:	187b      	adds	r3, r7, r1
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800eb4e:	187b      	adds	r3, r7, r1
 800eb50:	2202      	movs	r2, #2
 800eb52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb54:	187a      	adds	r2, r7, r1
 800eb56:	23a0      	movs	r3, #160	@ 0xa0
 800eb58:	05db      	lsls	r3, r3, #23
 800eb5a:	0011      	movs	r1, r2
 800eb5c:	0018      	movs	r0, r3
 800eb5e:	f001 ff91 	bl	8010a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800eb62:	e027      	b.n	800ebb4 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a15      	ldr	r2, [pc, #84]	@ (800ebc0 <HAL_TIM_MspPostInit+0xc8>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d122      	bne.n	800ebb4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eb6e:	4b13      	ldr	r3, [pc, #76]	@ (800ebbc <HAL_TIM_MspPostInit+0xc4>)
 800eb70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb72:	4b12      	ldr	r3, [pc, #72]	@ (800ebbc <HAL_TIM_MspPostInit+0xc4>)
 800eb74:	2104      	movs	r1, #4
 800eb76:	430a      	orrs	r2, r1
 800eb78:	62da      	str	r2, [r3, #44]	@ 0x2c
 800eb7a:	4b10      	ldr	r3, [pc, #64]	@ (800ebbc <HAL_TIM_MspPostInit+0xc4>)
 800eb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb7e:	2204      	movs	r2, #4
 800eb80:	4013      	ands	r3, r2
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800eb86:	2114      	movs	r1, #20
 800eb88:	187b      	adds	r3, r7, r1
 800eb8a:	22e0      	movs	r2, #224	@ 0xe0
 800eb8c:	0052      	lsls	r2, r2, #1
 800eb8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb90:	187b      	adds	r3, r7, r1
 800eb92:	2202      	movs	r2, #2
 800eb94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb96:	187b      	adds	r3, r7, r1
 800eb98:	2200      	movs	r2, #0
 800eb9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb9c:	187b      	adds	r3, r7, r1
 800eb9e:	2200      	movs	r2, #0
 800eba0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800eba2:	187b      	adds	r3, r7, r1
 800eba4:	2202      	movs	r2, #2
 800eba6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eba8:	187b      	adds	r3, r7, r1
 800ebaa:	4a06      	ldr	r2, [pc, #24]	@ (800ebc4 <HAL_TIM_MspPostInit+0xcc>)
 800ebac:	0019      	movs	r1, r3
 800ebae:	0010      	movs	r0, r2
 800ebb0:	f001 ff68 	bl	8010a84 <HAL_GPIO_Init>
}
 800ebb4:	46c0      	nop			@ (mov r8, r8)
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	b00b      	add	sp, #44	@ 0x2c
 800ebba:	bd90      	pop	{r4, r7, pc}
 800ebbc:	40021000 	.word	0x40021000
 800ebc0:	40000400 	.word	0x40000400
 800ebc4:	50000800 	.word	0x50000800

0800ebc8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800ebcc:	4b17      	ldr	r3, [pc, #92]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ebce:	4a18      	ldr	r2, [pc, #96]	@ (800ec30 <MX_LPUART1_UART_Init+0x68>)
 800ebd0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800ebd2:	4b16      	ldr	r3, [pc, #88]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ebd4:	22e1      	movs	r2, #225	@ 0xe1
 800ebd6:	0252      	lsls	r2, r2, #9
 800ebd8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ebda:	4b14      	ldr	r3, [pc, #80]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ebdc:	2200      	movs	r2, #0
 800ebde:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800ebe0:	4b12      	ldr	r3, [pc, #72]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800ebe6:	4b11      	ldr	r3, [pc, #68]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800ebec:	4b0f      	ldr	r3, [pc, #60]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ebee:	220c      	movs	r2, #12
 800ebf0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ebf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ebf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800ebfe:	4b0b      	ldr	r3, [pc, #44]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ec00:	2218      	movs	r2, #24
 800ec02:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800ec04:	4b09      	ldr	r3, [pc, #36]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ec06:	2280      	movs	r2, #128	@ 0x80
 800ec08:	0212      	lsls	r2, r2, #8
 800ec0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800ec0c:	4b07      	ldr	r3, [pc, #28]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ec0e:	2280      	movs	r2, #128	@ 0x80
 800ec10:	0152      	lsls	r2, r2, #5
 800ec12:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800ec14:	4b05      	ldr	r3, [pc, #20]	@ (800ec2c <MX_LPUART1_UART_Init+0x64>)
 800ec16:	0018      	movs	r0, r3
 800ec18:	f009 f804 	bl	8017c24 <HAL_UART_Init>
 800ec1c:	1e03      	subs	r3, r0, #0
 800ec1e:	d001      	beq.n	800ec24 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800ec20:	f7fa f890 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800ec24:	46c0      	nop			@ (mov r8, r8)
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	46c0      	nop			@ (mov r8, r8)
 800ec2c:	20001e18 	.word	0x20001e18
 800ec30:	40004800 	.word	0x40004800

0800ec34 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ec38:	4b14      	ldr	r3, [pc, #80]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec3a:	4a15      	ldr	r2, [pc, #84]	@ (800ec90 <MX_USART1_UART_Init+0x5c>)
 800ec3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ec3e:	4b13      	ldr	r3, [pc, #76]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec40:	22e1      	movs	r2, #225	@ 0xe1
 800ec42:	0252      	lsls	r2, r2, #9
 800ec44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ec46:	4b11      	ldr	r3, [pc, #68]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ec4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ec52:	4b0e      	ldr	r3, [pc, #56]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ec58:	4b0c      	ldr	r3, [pc, #48]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec5a:	220c      	movs	r2, #12
 800ec5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ec5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ec64:	4b09      	ldr	r3, [pc, #36]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ec6a:	4b08      	ldr	r3, [pc, #32]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ec70:	4b06      	ldr	r3, [pc, #24]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ec76:	4b05      	ldr	r3, [pc, #20]	@ (800ec8c <MX_USART1_UART_Init+0x58>)
 800ec78:	0018      	movs	r0, r3
 800ec7a:	f008 ffd3 	bl	8017c24 <HAL_UART_Init>
 800ec7e:	1e03      	subs	r3, r0, #0
 800ec80:	d001      	beq.n	800ec86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800ec82:	f7fa f85f 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ec86:	46c0      	nop			@ (mov r8, r8)
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	20001ed0 	.word	0x20001ed0
 800ec90:	40013800 	.word	0x40013800

0800ec94 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800ec98:	4b14      	ldr	r3, [pc, #80]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800ec9a:	4a15      	ldr	r2, [pc, #84]	@ (800ecf0 <MX_USART4_UART_Init+0x5c>)
 800ec9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800ec9e:	4b13      	ldr	r3, [pc, #76]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800eca0:	22e1      	movs	r2, #225	@ 0xe1
 800eca2:	0252      	lsls	r2, r2, #9
 800eca4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800eca6:	4b11      	ldr	r3, [pc, #68]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ecac:	4b0f      	ldr	r3, [pc, #60]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800ecae:	2200      	movs	r2, #0
 800ecb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800ecb2:	4b0e      	ldr	r3, [pc, #56]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ecb8:	4b0c      	ldr	r3, [pc, #48]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800ecba:	220c      	movs	r2, #12
 800ecbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ecbe:	4b0b      	ldr	r3, [pc, #44]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ecc4:	4b09      	ldr	r3, [pc, #36]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ecca:	4b08      	ldr	r3, [pc, #32]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800eccc:	2200      	movs	r2, #0
 800ecce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ecd0:	4b06      	ldr	r3, [pc, #24]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ecd6:	4b05      	ldr	r3, [pc, #20]	@ (800ecec <MX_USART4_UART_Init+0x58>)
 800ecd8:	0018      	movs	r0, r3
 800ecda:	f008 ffa3 	bl	8017c24 <HAL_UART_Init>
 800ecde:	1e03      	subs	r3, r0, #0
 800ece0:	d001      	beq.n	800ece6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800ece2:	f7fa f82f 	bl	8008d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800ece6:	46c0      	nop			@ (mov r8, r8)
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	20001f88 	.word	0x20001f88
 800ecf0:	40004c00 	.word	0x40004c00

0800ecf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ecf4:	b590      	push	{r4, r7, lr}
 800ecf6:	b08d      	sub	sp, #52	@ 0x34
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ecfc:	241c      	movs	r4, #28
 800ecfe:	193b      	adds	r3, r7, r4
 800ed00:	0018      	movs	r0, r3
 800ed02:	2314      	movs	r3, #20
 800ed04:	001a      	movs	r2, r3
 800ed06:	2100      	movs	r1, #0
 800ed08:	f012 f840 	bl	8020d8c <memset>
  if(uartHandle->Instance==LPUART1)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a8b      	ldr	r2, [pc, #556]	@ (800ef40 <HAL_UART_MspInit+0x24c>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d129      	bne.n	800ed6a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ed16:	4b8b      	ldr	r3, [pc, #556]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed1a:	4b8a      	ldr	r3, [pc, #552]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed1c:	2180      	movs	r1, #128	@ 0x80
 800ed1e:	02c9      	lsls	r1, r1, #11
 800ed20:	430a      	orrs	r2, r1
 800ed22:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed24:	4b87      	ldr	r3, [pc, #540]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed28:	4b86      	ldr	r3, [pc, #536]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed2a:	2104      	movs	r1, #4
 800ed2c:	430a      	orrs	r2, r1
 800ed2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ed30:	4b84      	ldr	r3, [pc, #528]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed34:	2204      	movs	r2, #4
 800ed36:	4013      	ands	r3, r2
 800ed38:	61bb      	str	r3, [r7, #24]
 800ed3a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ed3c:	0021      	movs	r1, r4
 800ed3e:	187b      	adds	r3, r7, r1
 800ed40:	2203      	movs	r2, #3
 800ed42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed44:	187b      	adds	r3, r7, r1
 800ed46:	2202      	movs	r2, #2
 800ed48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed4a:	187b      	adds	r3, r7, r1
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed50:	187b      	adds	r3, r7, r1
 800ed52:	2203      	movs	r2, #3
 800ed54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800ed56:	187b      	adds	r3, r7, r1
 800ed58:	2206      	movs	r2, #6
 800ed5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed5c:	187b      	adds	r3, r7, r1
 800ed5e:	4a7a      	ldr	r2, [pc, #488]	@ (800ef48 <HAL_UART_MspInit+0x254>)
 800ed60:	0019      	movs	r1, r3
 800ed62:	0010      	movs	r0, r2
 800ed64:	f001 fe8e 	bl	8010a84 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800ed68:	e0e5      	b.n	800ef36 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4a77      	ldr	r2, [pc, #476]	@ (800ef4c <HAL_UART_MspInit+0x258>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d133      	bne.n	800eddc <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ed74:	4b73      	ldr	r3, [pc, #460]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed78:	4b72      	ldr	r3, [pc, #456]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed7a:	2180      	movs	r1, #128	@ 0x80
 800ed7c:	01c9      	lsls	r1, r1, #7
 800ed7e:	430a      	orrs	r2, r1
 800ed80:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed82:	4b70      	ldr	r3, [pc, #448]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed86:	4b6f      	ldr	r3, [pc, #444]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed88:	2101      	movs	r1, #1
 800ed8a:	430a      	orrs	r2, r1
 800ed8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ed8e:	4b6d      	ldr	r3, [pc, #436]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ed90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed92:	2201      	movs	r2, #1
 800ed94:	4013      	ands	r3, r2
 800ed96:	617b      	str	r3, [r7, #20]
 800ed98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ed9a:	211c      	movs	r1, #28
 800ed9c:	187b      	adds	r3, r7, r1
 800ed9e:	22c0      	movs	r2, #192	@ 0xc0
 800eda0:	00d2      	lsls	r2, r2, #3
 800eda2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eda4:	187b      	adds	r3, r7, r1
 800eda6:	2202      	movs	r2, #2
 800eda8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edaa:	187b      	adds	r3, r7, r1
 800edac:	2200      	movs	r2, #0
 800edae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edb0:	187b      	adds	r3, r7, r1
 800edb2:	2203      	movs	r2, #3
 800edb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800edb6:	187b      	adds	r3, r7, r1
 800edb8:	2204      	movs	r2, #4
 800edba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edbc:	187a      	adds	r2, r7, r1
 800edbe:	23a0      	movs	r3, #160	@ 0xa0
 800edc0:	05db      	lsls	r3, r3, #23
 800edc2:	0011      	movs	r1, r2
 800edc4:	0018      	movs	r0, r3
 800edc6:	f001 fe5d 	bl	8010a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800edca:	2200      	movs	r2, #0
 800edcc:	2100      	movs	r1, #0
 800edce:	201b      	movs	r0, #27
 800edd0:	f001 fa06 	bl	80101e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800edd4:	201b      	movs	r0, #27
 800edd6:	f001 fa18 	bl	801020a <HAL_NVIC_EnableIRQ>
}
 800edda:	e0ac      	b.n	800ef36 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a5b      	ldr	r2, [pc, #364]	@ (800ef50 <HAL_UART_MspInit+0x25c>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d000      	beq.n	800ede8 <HAL_UART_MspInit+0xf4>
 800ede6:	e0a6      	b.n	800ef36 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800ede8:	4b56      	ldr	r3, [pc, #344]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800edea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800edec:	4b55      	ldr	r3, [pc, #340]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800edee:	2180      	movs	r1, #128	@ 0x80
 800edf0:	0309      	lsls	r1, r1, #12
 800edf2:	430a      	orrs	r2, r1
 800edf4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800edf6:	4b53      	ldr	r3, [pc, #332]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800edf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edfa:	4b52      	ldr	r3, [pc, #328]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800edfc:	2101      	movs	r1, #1
 800edfe:	430a      	orrs	r2, r1
 800ee00:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ee02:	4b50      	ldr	r3, [pc, #320]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ee04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee06:	2201      	movs	r2, #1
 800ee08:	4013      	ands	r3, r2
 800ee0a:	613b      	str	r3, [r7, #16]
 800ee0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee0e:	4b4d      	ldr	r3, [pc, #308]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ee10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee12:	4b4c      	ldr	r3, [pc, #304]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ee14:	2104      	movs	r1, #4
 800ee16:	430a      	orrs	r2, r1
 800ee18:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ee1a:	4b4a      	ldr	r3, [pc, #296]	@ (800ef44 <HAL_UART_MspInit+0x250>)
 800ee1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee1e:	2204      	movs	r2, #4
 800ee20:	4013      	ands	r3, r2
 800ee22:	60fb      	str	r3, [r7, #12]
 800ee24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ee26:	241c      	movs	r4, #28
 800ee28:	193b      	adds	r3, r7, r4
 800ee2a:	2202      	movs	r2, #2
 800ee2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee2e:	193b      	adds	r3, r7, r4
 800ee30:	2202      	movs	r2, #2
 800ee32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee34:	193b      	adds	r3, r7, r4
 800ee36:	2200      	movs	r2, #0
 800ee38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee3a:	193b      	adds	r3, r7, r4
 800ee3c:	2203      	movs	r2, #3
 800ee3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ee40:	193b      	adds	r3, r7, r4
 800ee42:	2206      	movs	r2, #6
 800ee44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee46:	193a      	adds	r2, r7, r4
 800ee48:	23a0      	movs	r3, #160	@ 0xa0
 800ee4a:	05db      	lsls	r3, r3, #23
 800ee4c:	0011      	movs	r1, r2
 800ee4e:	0018      	movs	r0, r3
 800ee50:	f001 fe18 	bl	8010a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ee54:	0021      	movs	r1, r4
 800ee56:	187b      	adds	r3, r7, r1
 800ee58:	2280      	movs	r2, #128	@ 0x80
 800ee5a:	00d2      	lsls	r2, r2, #3
 800ee5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee5e:	187b      	adds	r3, r7, r1
 800ee60:	2202      	movs	r2, #2
 800ee62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee64:	187b      	adds	r3, r7, r1
 800ee66:	2200      	movs	r2, #0
 800ee68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee6a:	187b      	adds	r3, r7, r1
 800ee6c:	2203      	movs	r2, #3
 800ee6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ee70:	187b      	adds	r3, r7, r1
 800ee72:	2206      	movs	r2, #6
 800ee74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ee76:	187b      	adds	r3, r7, r1
 800ee78:	4a33      	ldr	r2, [pc, #204]	@ (800ef48 <HAL_UART_MspInit+0x254>)
 800ee7a:	0019      	movs	r1, r3
 800ee7c:	0010      	movs	r0, r2
 800ee7e:	f001 fe01 	bl	8010a84 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800ee82:	4b34      	ldr	r3, [pc, #208]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800ee84:	4a34      	ldr	r2, [pc, #208]	@ (800ef58 <HAL_UART_MspInit+0x264>)
 800ee86:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800ee88:	4b32      	ldr	r3, [pc, #200]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800ee8a:	220c      	movs	r2, #12
 800ee8c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ee8e:	4b31      	ldr	r3, [pc, #196]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800ee90:	2200      	movs	r2, #0
 800ee92:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ee94:	4b2f      	ldr	r3, [pc, #188]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ee9a:	4b2e      	ldr	r3, [pc, #184]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800ee9c:	2280      	movs	r2, #128	@ 0x80
 800ee9e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eea0:	4b2c      	ldr	r3, [pc, #176]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800eea2:	2200      	movs	r2, #0
 800eea4:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eea6:	4b2b      	ldr	r3, [pc, #172]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800eea8:	2200      	movs	r2, #0
 800eeaa:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800eeac:	4b29      	ldr	r3, [pc, #164]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800eeae:	2220      	movs	r2, #32
 800eeb0:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800eeb2:	4b28      	ldr	r3, [pc, #160]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800eeb8:	4b26      	ldr	r3, [pc, #152]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800eeba:	0018      	movs	r0, r3
 800eebc:	f001 f9c6 	bl	801024c <HAL_DMA_Init>
 800eec0:	1e03      	subs	r3, r0, #0
 800eec2:	d001      	beq.n	800eec8 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800eec4:	f7f9 ff3e 	bl	8008d44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a22      	ldr	r2, [pc, #136]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800eecc:	675a      	str	r2, [r3, #116]	@ 0x74
 800eece:	4b21      	ldr	r3, [pc, #132]	@ (800ef54 <HAL_UART_MspInit+0x260>)
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800eed4:	4b21      	ldr	r3, [pc, #132]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800eed6:	4a22      	ldr	r2, [pc, #136]	@ (800ef60 <HAL_UART_MspInit+0x26c>)
 800eed8:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800eeda:	4b20      	ldr	r3, [pc, #128]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800eedc:	220c      	movs	r2, #12
 800eede:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eee0:	4b1e      	ldr	r3, [pc, #120]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800eee2:	2210      	movs	r2, #16
 800eee4:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eee6:	4b1d      	ldr	r3, [pc, #116]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800eeec:	4b1b      	ldr	r3, [pc, #108]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800eeee:	2280      	movs	r2, #128	@ 0x80
 800eef0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eef2:	4b1a      	ldr	r3, [pc, #104]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800eef4:	2200      	movs	r2, #0
 800eef6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eef8:	4b18      	ldr	r3, [pc, #96]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800eefe:	4b17      	ldr	r3, [pc, #92]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ef04:	4b15      	ldr	r3, [pc, #84]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800ef0a:	4b14      	ldr	r3, [pc, #80]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800ef0c:	0018      	movs	r0, r3
 800ef0e:	f001 f99d 	bl	801024c <HAL_DMA_Init>
 800ef12:	1e03      	subs	r3, r0, #0
 800ef14:	d001      	beq.n	800ef1a <HAL_UART_MspInit+0x226>
      Error_Handler();
 800ef16:	f7f9 ff15 	bl	8008d44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4a0f      	ldr	r2, [pc, #60]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800ef1e:	671a      	str	r2, [r3, #112]	@ 0x70
 800ef20:	4b0e      	ldr	r3, [pc, #56]	@ (800ef5c <HAL_UART_MspInit+0x268>)
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800ef26:	2200      	movs	r2, #0
 800ef28:	2100      	movs	r1, #0
 800ef2a:	200e      	movs	r0, #14
 800ef2c:	f001 f958 	bl	80101e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800ef30:	200e      	movs	r0, #14
 800ef32:	f001 f96a 	bl	801020a <HAL_NVIC_EnableIRQ>
}
 800ef36:	46c0      	nop			@ (mov r8, r8)
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	b00d      	add	sp, #52	@ 0x34
 800ef3c:	bd90      	pop	{r4, r7, pc}
 800ef3e:	46c0      	nop			@ (mov r8, r8)
 800ef40:	40004800 	.word	0x40004800
 800ef44:	40021000 	.word	0x40021000
 800ef48:	50000800 	.word	0x50000800
 800ef4c:	40013800 	.word	0x40013800
 800ef50:	40004c00 	.word	0x40004c00
 800ef54:	20002040 	.word	0x20002040
 800ef58:	4002006c 	.word	0x4002006c
 800ef5c:	20002088 	.word	0x20002088
 800ef60:	40020080 	.word	0x40020080

0800ef64 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b086      	sub	sp, #24
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800ef6c:	f000 fc94 	bl	800f898 <HAL_GetTick>
 800ef70:	0003      	movs	r3, r0
 800ef72:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800ef74:	4b1c      	ldr	r3, [pc, #112]	@ (800efe8 <TimestampIsReached+0x84>)
 800ef76:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800ef78:	697a      	ldr	r2, [r7, #20]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d307      	bcc.n	800ef90 <TimestampIsReached+0x2c>
 800ef80:	697a      	ldr	r2, [r7, #20]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	693a      	ldr	r2, [r7, #16]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d901      	bls.n	800ef90 <TimestampIsReached+0x2c>
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	e000      	b.n	800ef92 <TimestampIsReached+0x2e>
 800ef90:	2200      	movs	r2, #0
 800ef92:	230f      	movs	r3, #15
 800ef94:	18fb      	adds	r3, r7, r3
 800ef96:	701a      	strb	r2, [r3, #0]
 800ef98:	781a      	ldrb	r2, [r3, #0]
 800ef9a:	2101      	movs	r1, #1
 800ef9c:	400a      	ands	r2, r1
 800ef9e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800efa0:	697a      	ldr	r2, [r7, #20]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d207      	bcs.n	800efb8 <TimestampIsReached+0x54>
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	693a      	ldr	r2, [r7, #16]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d201      	bcs.n	800efb8 <TimestampIsReached+0x54>
 800efb4:	2201      	movs	r2, #1
 800efb6:	e000      	b.n	800efba <TimestampIsReached+0x56>
 800efb8:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800efba:	200e      	movs	r0, #14
 800efbc:	183b      	adds	r3, r7, r0
 800efbe:	701a      	strb	r2, [r3, #0]
 800efc0:	781a      	ldrb	r2, [r3, #0]
 800efc2:	2101      	movs	r1, #1
 800efc4:	400a      	ands	r2, r1
 800efc6:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800efc8:	230f      	movs	r3, #15
 800efca:	18fb      	adds	r3, r7, r3
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d103      	bne.n	800efda <TimestampIsReached+0x76>
 800efd2:	183b      	adds	r3, r7, r0
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800efda:	2301      	movs	r3, #1
 800efdc:	e000      	b.n	800efe0 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	0018      	movs	r0, r3
 800efe2:	46bd      	mov	sp, r7
 800efe4:	b006      	add	sp, #24
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	7fffffff 	.word	0x7fffffff

0800efec <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800eff4:	f000 fc50 	bl	800f898 <HAL_GetTick>
 800eff8:	0002      	movs	r2, r0
 800effa:	4904      	ldr	r1, [pc, #16]	@ (800f00c <AddTimestamp+0x20>)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	0018      	movs	r0, r3
 800f000:	f011 fd5e 	bl	8020ac0 <siprintf>
}
 800f004:	46c0      	nop			@ (mov r8, r8)
 800f006:	46bd      	mov	sp, r7
 800f008:	b002      	add	sp, #8
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	080260d4 	.word	0x080260d4

0800f010 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800f010:	b40c      	push	{r2, r3}
 800f012:	b5b0      	push	{r4, r5, r7, lr}
 800f014:	b0a4      	sub	sp, #144	@ 0x90
 800f016:	af00      	add	r7, sp, #0
 800f018:	0002      	movs	r2, r0
 800f01a:	6039      	str	r1, [r7, #0]
 800f01c:	1dfb      	adds	r3, r7, #7
 800f01e:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800f020:	4b23      	ldr	r3, [pc, #140]	@ (800f0b0 <CreateLine+0xa0>)
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	1dfa      	adds	r2, r7, #7
 800f026:	7812      	ldrb	r2, [r2, #0]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d839      	bhi.n	800f0a0 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800f02c:	683a      	ldr	r2, [r7, #0]
 800f02e:	4921      	ldr	r1, [pc, #132]	@ (800f0b4 <CreateLine+0xa4>)
 800f030:	240c      	movs	r4, #12
 800f032:	193b      	adds	r3, r7, r4
 800f034:	0018      	movs	r0, r3
 800f036:	f011 fd43 	bl	8020ac0 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800f03a:	4b1d      	ldr	r3, [pc, #116]	@ (800f0b0 <CreateLine+0xa0>)
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d909      	bls.n	800f056 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800f042:	193b      	adds	r3, r7, r4
 800f044:	0018      	movs	r0, r3
 800f046:	f7f1 f891 	bl	800016c <strlen>
 800f04a:	0002      	movs	r2, r0
 800f04c:	193b      	adds	r3, r7, r4
 800f04e:	189b      	adds	r3, r3, r2
 800f050:	0018      	movs	r0, r3
 800f052:	f7ff ffcb 	bl	800efec <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800f056:	240c      	movs	r4, #12
 800f058:	193b      	adds	r3, r7, r4
 800f05a:	0018      	movs	r0, r3
 800f05c:	f7f1 f886 	bl	800016c <strlen>
 800f060:	0003      	movs	r3, r0
 800f062:	218c      	movs	r1, #140	@ 0x8c
 800f064:	187a      	adds	r2, r7, r1
 800f066:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800f068:	239c      	movs	r3, #156	@ 0x9c
 800f06a:	2508      	movs	r5, #8
 800f06c:	195b      	adds	r3, r3, r5
 800f06e:	19db      	adds	r3, r3, r7
 800f070:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800f072:	193a      	adds	r2, r7, r4
 800f074:	187b      	adds	r3, r7, r1
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	18d0      	adds	r0, r2, r3
 800f07a:	187b      	adds	r3, r7, r1
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2280      	movs	r2, #128	@ 0x80
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	0019      	movs	r1, r3
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	2298      	movs	r2, #152	@ 0x98
 800f088:	1952      	adds	r2, r2, r5
 800f08a:	19d2      	adds	r2, r2, r7
 800f08c:	6812      	ldr	r2, [r2, #0]
 800f08e:	f011 fdaf 	bl	8020bf0 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800f092:	193a      	adds	r2, r7, r4
 800f094:	4b08      	ldr	r3, [pc, #32]	@ (800f0b8 <CreateLine+0xa8>)
 800f096:	0011      	movs	r1, r2
 800f098:	0018      	movs	r0, r3
 800f09a:	f011 fca1 	bl	80209e0 <iprintf>
 800f09e:	e000      	b.n	800f0a2 <CreateLine+0x92>
    return;
 800f0a0:	46c0      	nop			@ (mov r8, r8)
}
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	b024      	add	sp, #144	@ 0x90
 800f0a6:	bcb0      	pop	{r4, r5, r7}
 800f0a8:	bc08      	pop	{r3}
 800f0aa:	b002      	add	sp, #8
 800f0ac:	4718      	bx	r3
 800f0ae:	46c0      	nop			@ (mov r8, r8)
 800f0b0:	200000d0 	.word	0x200000d0
 800f0b4:	080260e0 	.word	0x080260e0
 800f0b8:	080260e4 	.word	0x080260e4

0800f0bc <_write>:

int _write(int fd, void *buf, size_t count) {
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	68b9      	ldr	r1, [r7, #8]
 800f0ce:	4804      	ldr	r0, [pc, #16]	@ (800f0e0 <_write+0x24>)
 800f0d0:	2364      	movs	r3, #100	@ 0x64
 800f0d2:	f008 fe0d 	bl	8017cf0 <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800f0d6:	687b      	ldr	r3, [r7, #4]
}
 800f0d8:	0018      	movs	r0, r3
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	b004      	add	sp, #16
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	20001ed0 	.word	0x20001ed0

0800f0e4 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	0002      	movs	r2, r0
 800f0ec:	1dfb      	adds	r3, r7, #7
 800f0ee:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800f0f0:	4b03      	ldr	r3, [pc, #12]	@ (800f100 <SetVerboseLevel+0x1c>)
 800f0f2:	1dfa      	adds	r2, r7, #7
 800f0f4:	7812      	ldrb	r2, [r2, #0]
 800f0f6:	701a      	strb	r2, [r3, #0]
}
 800f0f8:	46c0      	nop			@ (mov r8, r8)
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	b002      	add	sp, #8
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	200000d0 	.word	0x200000d0

0800f104 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800f104:	b580      	push	{r7, lr}
 800f106:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800f108:	4b02      	ldr	r3, [pc, #8]	@ (800f114 <GetVerboseLevel+0x10>)
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	0018      	movs	r0, r3
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	46c0      	nop			@ (mov r8, r8)
 800f114:	200000d0 	.word	0x200000d0

0800f118 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800f11e:	4a0f      	ldr	r2, [pc, #60]	@ (800f15c <BinaryReleaseInfo+0x44>)
 800f120:	4b0f      	ldr	r3, [pc, #60]	@ (800f160 <BinaryReleaseInfo+0x48>)
 800f122:	0019      	movs	r1, r3
 800f124:	2002      	movs	r0, #2
 800f126:	f7ff ff73 	bl	800f010 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800f12a:	480e      	ldr	r0, [pc, #56]	@ (800f164 <BinaryReleaseInfo+0x4c>)
 800f12c:	4a0e      	ldr	r2, [pc, #56]	@ (800f168 <BinaryReleaseInfo+0x50>)
 800f12e:	490c      	ldr	r1, [pc, #48]	@ (800f160 <BinaryReleaseInfo+0x48>)
 800f130:	4b0e      	ldr	r3, [pc, #56]	@ (800f16c <BinaryReleaseInfo+0x54>)
 800f132:	9300      	str	r3, [sp, #0]
 800f134:	0003      	movs	r3, r0
 800f136:	2002      	movs	r0, #2
 800f138:	f7ff ff6a 	bl	800f010 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800f13c:	4b0c      	ldr	r3, [pc, #48]	@ (800f170 <BinaryReleaseInfo+0x58>)
 800f13e:	4a0d      	ldr	r2, [pc, #52]	@ (800f174 <BinaryReleaseInfo+0x5c>)
 800f140:	4907      	ldr	r1, [pc, #28]	@ (800f160 <BinaryReleaseInfo+0x48>)
 800f142:	2002      	movs	r0, #2
 800f144:	f7ff ff64 	bl	800f010 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800f148:	4b0b      	ldr	r3, [pc, #44]	@ (800f178 <BinaryReleaseInfo+0x60>)
 800f14a:	4a0c      	ldr	r2, [pc, #48]	@ (800f17c <BinaryReleaseInfo+0x64>)
 800f14c:	4904      	ldr	r1, [pc, #16]	@ (800f160 <BinaryReleaseInfo+0x48>)
 800f14e:	2002      	movs	r0, #2
 800f150:	f7ff ff5e 	bl	800f010 <CreateLine>
}
 800f154:	46c0      	nop			@ (mov r8, r8)
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	46c0      	nop			@ (mov r8, r8)
 800f15c:	080260ec 	.word	0x080260ec
 800f160:	08026118 	.word	0x08026118
 800f164:	0802611c 	.word	0x0802611c
 800f168:	08026128 	.word	0x08026128
 800f16c:	0802613c 	.word	0x0802613c
 800f170:	08026148 	.word	0x08026148
 800f174:	08026154 	.word	0x08026154
 800f178:	0802615c 	.word	0x0802615c
 800f17c:	08026164 	.word	0x08026164

0800f180 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	68f9      	ldr	r1, [r7, #12]
 800f192:	4803      	ldr	r0, [pc, #12]	@ (800f1a0 <errorHandler+0x20>)
 800f194:	f011 fc24 	bl	80209e0 <iprintf>
//    while (true)
//    {
//    }
}
 800f198:	46c0      	nop			@ (mov r8, r8)
 800f19a:	46bd      	mov	sp, r7
 800f19c:	b004      	add	sp, #16
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	0802617c 	.word	0x0802617c

0800f1a4 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6039      	str	r1, [r7, #0]
 800f1ac:	0011      	movs	r1, r2
 800f1ae:	1dfb      	adds	r3, r7, #7
 800f1b0:	1c02      	adds	r2, r0, #0
 800f1b2:	701a      	strb	r2, [r3, #0]
 800f1b4:	1dbb      	adds	r3, r7, #6
 800f1b6:	1c0a      	adds	r2, r1, #0
 800f1b8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800f1ba:	4b0a      	ldr	r3, [pc, #40]	@ (800f1e4 <ReadRegister+0x40>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00a      	beq.n	800f1d8 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800f1c2:	4b08      	ldr	r3, [pc, #32]	@ (800f1e4 <ReadRegister+0x40>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	1dba      	adds	r2, r7, #6
 800f1c8:	7814      	ldrb	r4, [r2, #0]
 800f1ca:	6839      	ldr	r1, [r7, #0]
 800f1cc:	1dfa      	adds	r2, r7, #7
 800f1ce:	7810      	ldrb	r0, [r2, #0]
 800f1d0:	0022      	movs	r2, r4
 800f1d2:	4798      	blx	r3
 800f1d4:	0003      	movs	r3, r0
 800f1d6:	e000      	b.n	800f1da <ReadRegister+0x36>
	}
	return false;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	0018      	movs	r0, r3
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	b003      	add	sp, #12
 800f1e0:	bd90      	pop	{r4, r7, pc}
 800f1e2:	46c0      	nop			@ (mov r8, r8)
 800f1e4:	200020d8 	.word	0x200020d8

0800f1e8 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800f1e8:	b590      	push	{r4, r7, lr}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6039      	str	r1, [r7, #0]
 800f1f0:	0011      	movs	r1, r2
 800f1f2:	1dfb      	adds	r3, r7, #7
 800f1f4:	1c02      	adds	r2, r0, #0
 800f1f6:	701a      	strb	r2, [r3, #0]
 800f1f8:	1dbb      	adds	r3, r7, #6
 800f1fa:	1c0a      	adds	r2, r1, #0
 800f1fc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800f1fe:	4b0a      	ldr	r3, [pc, #40]	@ (800f228 <WriteRegister+0x40>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00a      	beq.n	800f21c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800f206:	4b08      	ldr	r3, [pc, #32]	@ (800f228 <WriteRegister+0x40>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	1dba      	adds	r2, r7, #6
 800f20c:	7814      	ldrb	r4, [r2, #0]
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	1dfa      	adds	r2, r7, #7
 800f212:	7810      	ldrb	r0, [r2, #0]
 800f214:	0022      	movs	r2, r4
 800f216:	4798      	blx	r3
 800f218:	0003      	movs	r3, r0
 800f21a:	e000      	b.n	800f21e <WriteRegister+0x36>
  }
  return false;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	0018      	movs	r0, r3
 800f220:	46bd      	mov	sp, r7
 800f222:	b003      	add	sp, #12
 800f224:	bd90      	pop	{r4, r7, pc}
 800f226:	46c0      	nop			@ (mov r8, r8)
 800f228:	200020dc 	.word	0x200020dc

0800f22c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	000a      	movs	r2, r1
 800f236:	1cfb      	adds	r3, r7, #3
 800f238:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800f23a:	230f      	movs	r3, #15
 800f23c:	18fb      	adds	r3, r7, r3
 800f23e:	22ff      	movs	r2, #255	@ 0xff
 800f240:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800f242:	230e      	movs	r3, #14
 800f244:	18fb      	adds	r3, r7, r3
 800f246:	2200      	movs	r2, #0
 800f248:	701a      	strb	r2, [r3, #0]
 800f24a:	e037      	b.n	800f2bc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800f24c:	230e      	movs	r3, #14
 800f24e:	18fb      	adds	r3, r7, r3
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	18d3      	adds	r3, r2, r3
 800f256:	7819      	ldrb	r1, [r3, #0]
 800f258:	220f      	movs	r2, #15
 800f25a:	18bb      	adds	r3, r7, r2
 800f25c:	18ba      	adds	r2, r7, r2
 800f25e:	7812      	ldrb	r2, [r2, #0]
 800f260:	404a      	eors	r2, r1
 800f262:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800f264:	230d      	movs	r3, #13
 800f266:	18fb      	adds	r3, r7, r3
 800f268:	2200      	movs	r2, #0
 800f26a:	701a      	strb	r2, [r3, #0]
 800f26c:	e01b      	b.n	800f2a6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800f26e:	210f      	movs	r1, #15
 800f270:	187b      	adds	r3, r7, r1
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	b25b      	sxtb	r3, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	da09      	bge.n	800f28e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800f27a:	187b      	adds	r3, r7, r1
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	005b      	lsls	r3, r3, #1
 800f280:	b25b      	sxtb	r3, r3
 800f282:	2231      	movs	r2, #49	@ 0x31
 800f284:	4053      	eors	r3, r2
 800f286:	b25a      	sxtb	r2, r3
 800f288:	187b      	adds	r3, r7, r1
 800f28a:	701a      	strb	r2, [r3, #0]
 800f28c:	e005      	b.n	800f29a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800f28e:	230f      	movs	r3, #15
 800f290:	18fa      	adds	r2, r7, r3
 800f292:	18fb      	adds	r3, r7, r3
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	18db      	adds	r3, r3, r3
 800f298:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800f29a:	210d      	movs	r1, #13
 800f29c:	187b      	adds	r3, r7, r1
 800f29e:	781a      	ldrb	r2, [r3, #0]
 800f2a0:	187b      	adds	r3, r7, r1
 800f2a2:	3201      	adds	r2, #1
 800f2a4:	701a      	strb	r2, [r3, #0]
 800f2a6:	230d      	movs	r3, #13
 800f2a8:	18fb      	adds	r3, r7, r3
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	2b07      	cmp	r3, #7
 800f2ae:	d9de      	bls.n	800f26e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800f2b0:	210e      	movs	r1, #14
 800f2b2:	187b      	adds	r3, r7, r1
 800f2b4:	781a      	ldrb	r2, [r3, #0]
 800f2b6:	187b      	adds	r3, r7, r1
 800f2b8:	3201      	adds	r2, #1
 800f2ba:	701a      	strb	r2, [r3, #0]
 800f2bc:	230e      	movs	r3, #14
 800f2be:	18fa      	adds	r2, r7, r3
 800f2c0:	1cfb      	adds	r3, r7, #3
 800f2c2:	7812      	ldrb	r2, [r2, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d3c0      	bcc.n	800f24c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800f2ca:	230f      	movs	r3, #15
 800f2cc:	18fb      	adds	r3, r7, r3
 800f2ce:	781b      	ldrb	r3, [r3, #0]
}
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	b004      	add	sp, #16
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800f2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f30c <HIDS_Init+0x34>)
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800f2e8:	4b09      	ldr	r3, [pc, #36]	@ (800f310 <HIDS_Init+0x38>)
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800f2ee:	4b09      	ldr	r3, [pc, #36]	@ (800f314 <HIDS_Init+0x3c>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	0018      	movs	r0, r3
 800f2f4:	f000 f840 	bl	800f378 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800f2f8:	4b07      	ldr	r3, [pc, #28]	@ (800f318 <HIDS_Init+0x40>)
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	0018      	movs	r0, r3
 800f2fe:	f000 f82b 	bl	800f358 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800f302:	46c0      	nop			@ (mov r8, r8)
 800f304:	46bd      	mov	sp, r7
 800f306:	b002      	add	sp, #8
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	46c0      	nop			@ (mov r8, r8)
 800f30c:	200020d8 	.word	0x200020d8
 800f310:	200020dc 	.word	0x200020dc
 800f314:	200000d2 	.word	0x200000d2
 800f318:	200000d1 	.word	0x200000d1

0800f31c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800f320:	f000 faba 	bl	800f898 <HAL_GetTick>
 800f324:	0002      	movs	r2, r0
 800f326:	4b08      	ldr	r3, [pc, #32]	@ (800f348 <HIDS_StartMeasurement+0x2c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	18d2      	adds	r2, r2, r3
 800f32c:	4b07      	ldr	r3, [pc, #28]	@ (800f34c <HIDS_StartMeasurement+0x30>)
 800f32e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800f330:	4b07      	ldr	r3, [pc, #28]	@ (800f350 <HIDS_StartMeasurement+0x34>)
 800f332:	2201      	movs	r2, #1
 800f334:	0019      	movs	r1, r3
 800f336:	2044      	movs	r0, #68	@ 0x44
 800f338:	f7ff ff56 	bl	800f1e8 <WriteRegister>
  MeasurementDone = false;
 800f33c:	4b05      	ldr	r3, [pc, #20]	@ (800f354 <HIDS_StartMeasurement+0x38>)
 800f33e:	2200      	movs	r2, #0
 800f340:	701a      	strb	r2, [r3, #0]
}
 800f342:	46c0      	nop			@ (mov r8, r8)
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	200000d8 	.word	0x200000d8
 800f34c:	200000d4 	.word	0x200000d4
 800f350:	200000d2 	.word	0x200000d2
 800f354:	200020ee 	.word	0x200020ee

0800f358 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	0002      	movs	r2, r0
 800f360:	1dfb      	adds	r3, r7, #7
 800f362:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800f364:	4b03      	ldr	r3, [pc, #12]	@ (800f374 <HIDS_SetHeaterMode+0x1c>)
 800f366:	1dfa      	adds	r2, r7, #7
 800f368:	7812      	ldrb	r2, [r2, #0]
 800f36a:	701a      	strb	r2, [r3, #0]
}
 800f36c:	46c0      	nop			@ (mov r8, r8)
 800f36e:	46bd      	mov	sp, r7
 800f370:	b002      	add	sp, #8
 800f372:	bd80      	pop	{r7, pc}
 800f374:	200000d1 	.word	0x200000d1

0800f378 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	0002      	movs	r2, r0
 800f380:	1dfb      	adds	r3, r7, #7
 800f382:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800f384:	4b03      	ldr	r3, [pc, #12]	@ (800f394 <HIDS_SetMeasurementMode+0x1c>)
 800f386:	1dfa      	adds	r2, r7, #7
 800f388:	7812      	ldrb	r2, [r2, #0]
 800f38a:	701a      	strb	r2, [r3, #0]
}
 800f38c:	46c0      	nop			@ (mov r8, r8)
 800f38e:	46bd      	mov	sp, r7
 800f390:	b002      	add	sp, #8
 800f392:	bd80      	pop	{r7, pc}
 800f394:	200000d2 	.word	0x200000d2

0800f398 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800f3a0:	f000 fa7a 	bl	800f898 <HAL_GetTick>
 800f3a4:	0002      	movs	r2, r0
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	18d2      	adds	r2, r2, r3
 800f3aa:	4b03      	ldr	r3, [pc, #12]	@ (800f3b8 <setHIDSTimeStamp+0x20>)
 800f3ac:	601a      	str	r2, [r3, #0]
}
 800f3ae:	46c0      	nop			@ (mov r8, r8)
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	b002      	add	sp, #8
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	46c0      	nop			@ (mov r8, r8)
 800f3b8:	200020f0 	.word	0x200020f0

0800f3bc <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	781a      	ldrb	r2, [r3, #0]
 800f3c8:	210c      	movs	r1, #12
 800f3ca:	187b      	adds	r3, r7, r1
 800f3cc:	701a      	strb	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	785a      	ldrb	r2, [r3, #1]
 800f3d2:	187b      	adds	r3, r7, r1
 800f3d4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800f3d6:	240f      	movs	r4, #15
 800f3d8:	193b      	adds	r3, r7, r4
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	7892      	ldrb	r2, [r2, #2]
 800f3de:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800f3e0:	187b      	adds	r3, r7, r1
 800f3e2:	2102      	movs	r1, #2
 800f3e4:	0018      	movs	r0, r3
 800f3e6:	f7ff ff21 	bl	800f22c <CalculateCRC>
 800f3ea:	0003      	movs	r3, r0
 800f3ec:	001a      	movs	r2, r3
 800f3ee:	193b      	adds	r3, r7, r4
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d007      	beq.n	800f406 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800f3f6:	4a1a      	ldr	r2, [pc, #104]	@ (800f460 <CheckCRC+0xa4>)
 800f3f8:	4b1a      	ldr	r3, [pc, #104]	@ (800f464 <CheckCRC+0xa8>)
 800f3fa:	0019      	movs	r1, r3
 800f3fc:	2001      	movs	r0, #1
 800f3fe:	f7ff fe07 	bl	800f010 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800f402:	2300      	movs	r3, #0
 800f404:	e027      	b.n	800f456 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	78da      	ldrb	r2, [r3, #3]
 800f40a:	2108      	movs	r1, #8
 800f40c:	187b      	adds	r3, r7, r1
 800f40e:	701a      	strb	r2, [r3, #0]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	791a      	ldrb	r2, [r3, #4]
 800f414:	187b      	adds	r3, r7, r1
 800f416:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800f418:	240e      	movs	r4, #14
 800f41a:	193b      	adds	r3, r7, r4
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	7952      	ldrb	r2, [r2, #5]
 800f420:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800f422:	187b      	adds	r3, r7, r1
 800f424:	2102      	movs	r1, #2
 800f426:	0018      	movs	r0, r3
 800f428:	f7ff ff00 	bl	800f22c <CalculateCRC>
 800f42c:	0003      	movs	r3, r0
 800f42e:	001a      	movs	r2, r3
 800f430:	193b      	adds	r3, r7, r4
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	4293      	cmp	r3, r2
 800f436:	d00d      	beq.n	800f454 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800f438:	4a0b      	ldr	r2, [pc, #44]	@ (800f468 <CheckCRC+0xac>)
 800f43a:	4b0a      	ldr	r3, [pc, #40]	@ (800f464 <CheckCRC+0xa8>)
 800f43c:	0019      	movs	r1, r3
 800f43e:	2001      	movs	r0, #1
 800f440:	f7ff fde6 	bl	800f010 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800f444:	4a09      	ldr	r2, [pc, #36]	@ (800f46c <CheckCRC+0xb0>)
 800f446:	4b0a      	ldr	r3, [pc, #40]	@ (800f470 <CheckCRC+0xb4>)
 800f448:	217c      	movs	r1, #124	@ 0x7c
 800f44a:	0018      	movs	r0, r3
 800f44c:	f7ff fe98 	bl	800f180 <errorHandler>
		return false;
 800f450:	2300      	movs	r3, #0
 800f452:	e000      	b.n	800f456 <CheckCRC+0x9a>
	}
	return true;
 800f454:	2301      	movs	r3, #1
}
 800f456:	0018      	movs	r0, r3
 800f458:	46bd      	mov	sp, r7
 800f45a:	b005      	add	sp, #20
 800f45c:	bd90      	pop	{r4, r7, pc}
 800f45e:	46c0      	nop			@ (mov r8, r8)
 800f460:	080261c8 	.word	0x080261c8
 800f464:	080261f0 	.word	0x080261f0
 800f468:	080261f4 	.word	0x080261f4
 800f46c:	08026220 	.word	0x08026220
 800f470:	080267ec 	.word	0x080267ec

0800f474 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800f47a:	1dbb      	adds	r3, r7, #6
 800f47c:	2289      	movs	r2, #137	@ 0x89
 800f47e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800f480:	1dbb      	adds	r3, r7, #6
 800f482:	2201      	movs	r2, #1
 800f484:	0019      	movs	r1, r3
 800f486:	2044      	movs	r0, #68	@ 0x44
 800f488:	f7ff feae 	bl	800f1e8 <WriteRegister>
	HAL_Delay(30);
 800f48c:	201e      	movs	r0, #30
 800f48e:	f000 fa0d 	bl	800f8ac <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800f492:	4b14      	ldr	r3, [pc, #80]	@ (800f4e4 <HIDS_DeviceConnected+0x70>)
 800f494:	2206      	movs	r2, #6
 800f496:	0019      	movs	r1, r3
 800f498:	2044      	movs	r0, #68	@ 0x44
 800f49a:	f7ff fe83 	bl	800f1a4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800f49e:	1dfb      	adds	r3, r7, #7
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	701a      	strb	r2, [r3, #0]
 800f4a4:	e011      	b.n	800f4ca <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800f4a6:	1dfb      	adds	r3, r7, #7
 800f4a8:	7818      	ldrb	r0, [r3, #0]
 800f4aa:	1dfb      	adds	r3, r7, #7
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	4a0d      	ldr	r2, [pc, #52]	@ (800f4e4 <HIDS_DeviceConnected+0x70>)
 800f4b0:	5cd3      	ldrb	r3, [r2, r3]
 800f4b2:	4a0d      	ldr	r2, [pc, #52]	@ (800f4e8 <HIDS_DeviceConnected+0x74>)
 800f4b4:	490d      	ldr	r1, [pc, #52]	@ (800f4ec <HIDS_DeviceConnected+0x78>)
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	0003      	movs	r3, r0
 800f4ba:	2002      	movs	r0, #2
 800f4bc:	f7ff fda8 	bl	800f010 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800f4c0:	1dfb      	adds	r3, r7, #7
 800f4c2:	781a      	ldrb	r2, [r3, #0]
 800f4c4:	1dfb      	adds	r3, r7, #7
 800f4c6:	3201      	adds	r2, #1
 800f4c8:	701a      	strb	r2, [r3, #0]
 800f4ca:	1dfb      	adds	r3, r7, #7
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	2b05      	cmp	r3, #5
 800f4d0:	d9e9      	bls.n	800f4a6 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800f4d2:	4b04      	ldr	r3, [pc, #16]	@ (800f4e4 <HIDS_DeviceConnected+0x70>)
 800f4d4:	0018      	movs	r0, r3
 800f4d6:	f7ff ff71 	bl	800f3bc <CheckCRC>
 800f4da:	0003      	movs	r3, r0
}
 800f4dc:	0018      	movs	r0, r3
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	b002      	add	sp, #8
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	200020e0 	.word	0x200020e0
 800f4e8:	08026238 	.word	0x08026238
 800f4ec:	080261c4 	.word	0x080261c4

0800f4f0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800f4f4:	4b04      	ldr	r3, [pc, #16]	@ (800f508 <HIDS_MeasurementReady+0x18>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	0018      	movs	r0, r3
 800f4fa:	f7ff fd33 	bl	800ef64 <TimestampIsReached>
 800f4fe:	0003      	movs	r3, r0
}
 800f500:	0018      	movs	r0, r3
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	46c0      	nop			@ (mov r8, r8)
 800f508:	200000d4 	.word	0x200000d4

0800f50c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800f516:	4b41      	ldr	r3, [pc, #260]	@ (800f61c <HIDS_GetMeasurementValues+0x110>)
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d001      	beq.n	800f522 <HIDS_GetMeasurementValues+0x16>
 800f51e:	2301      	movs	r3, #1
 800f520:	e077      	b.n	800f612 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800f522:	f7ff ffe5 	bl	800f4f0 <HIDS_MeasurementReady>
 800f526:	0003      	movs	r3, r0
 800f528:	001a      	movs	r2, r3
 800f52a:	2301      	movs	r3, #1
 800f52c:	4053      	eors	r3, r2
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <HIDS_GetMeasurementValues+0x2c>
 800f534:	2300      	movs	r3, #0
 800f536:	e06c      	b.n	800f612 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800f538:	4b39      	ldr	r3, [pc, #228]	@ (800f620 <HIDS_GetMeasurementValues+0x114>)
 800f53a:	2206      	movs	r2, #6
 800f53c:	0019      	movs	r1, r3
 800f53e:	2044      	movs	r0, #68	@ 0x44
 800f540:	f7ff fe30 	bl	800f1a4 <ReadRegister>
 800f544:	0003      	movs	r3, r0
 800f546:	001a      	movs	r2, r3
 800f548:	2301      	movs	r3, #1
 800f54a:	4053      	eors	r3, r2
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d005      	beq.n	800f55e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800f552:	4a34      	ldr	r2, [pc, #208]	@ (800f624 <HIDS_GetMeasurementValues+0x118>)
 800f554:	4b34      	ldr	r3, [pc, #208]	@ (800f628 <HIDS_GetMeasurementValues+0x11c>)
 800f556:	0019      	movs	r1, r3
 800f558:	2001      	movs	r0, #1
 800f55a:	f7ff fd59 	bl	800f010 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800f55e:	4b30      	ldr	r3, [pc, #192]	@ (800f620 <HIDS_GetMeasurementValues+0x114>)
 800f560:	0018      	movs	r0, r3
 800f562:	f7ff ff2b 	bl	800f3bc <CheckCRC>
 800f566:	0003      	movs	r3, r0
 800f568:	001a      	movs	r2, r3
 800f56a:	2301      	movs	r3, #1
 800f56c:	4053      	eors	r3, r2
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b00      	cmp	r3, #0
 800f572:	d001      	beq.n	800f578 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800f574:	2300      	movs	r3, #0
 800f576:	e04c      	b.n	800f612 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800f578:	4b29      	ldr	r3, [pc, #164]	@ (800f620 <HIDS_GetMeasurementValues+0x114>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	021b      	lsls	r3, r3, #8
 800f57e:	4a28      	ldr	r2, [pc, #160]	@ (800f620 <HIDS_GetMeasurementValues+0x114>)
 800f580:	7852      	ldrb	r2, [r2, #1]
 800f582:	4313      	orrs	r3, r2
 800f584:	22af      	movs	r2, #175	@ 0xaf
 800f586:	4353      	muls	r3, r2
 800f588:	0018      	movs	r0, r3
 800f58a:	f7f3 ff19 	bl	80033c0 <__aeabi_i2d>
 800f58e:	2200      	movs	r2, #0
 800f590:	4b26      	ldr	r3, [pc, #152]	@ (800f62c <HIDS_GetMeasurementValues+0x120>)
 800f592:	f7f2 fc0f 	bl	8001db4 <__aeabi_ddiv>
 800f596:	0002      	movs	r2, r0
 800f598:	000b      	movs	r3, r1
 800f59a:	0010      	movs	r0, r2
 800f59c:	0019      	movs	r1, r3
 800f59e:	f7f3 ffa9 	bl	80034f4 <__aeabi_d2f>
 800f5a2:	1c03      	adds	r3, r0, #0
 800f5a4:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800f5a6:	4922      	ldr	r1, [pc, #136]	@ (800f630 <HIDS_GetMeasurementValues+0x124>)
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f7f1 fe37 	bl	800121c <__aeabi_fsub>
 800f5ae:	1c03      	adds	r3, r0, #0
 800f5b0:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800f5b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f620 <HIDS_GetMeasurementValues+0x114>)
 800f5b4:	78db      	ldrb	r3, [r3, #3]
 800f5b6:	021b      	lsls	r3, r3, #8
 800f5b8:	4a19      	ldr	r2, [pc, #100]	@ (800f620 <HIDS_GetMeasurementValues+0x114>)
 800f5ba:	7912      	ldrb	r2, [r2, #4]
 800f5bc:	431a      	orrs	r2, r3
 800f5be:	0013      	movs	r3, r2
 800f5c0:	015b      	lsls	r3, r3, #5
 800f5c2:	1a9b      	subs	r3, r3, r2
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	189b      	adds	r3, r3, r2
 800f5c8:	0018      	movs	r0, r3
 800f5ca:	f7f3 fef9 	bl	80033c0 <__aeabi_i2d>
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	4b16      	ldr	r3, [pc, #88]	@ (800f62c <HIDS_GetMeasurementValues+0x120>)
 800f5d2:	f7f2 fbef 	bl	8001db4 <__aeabi_ddiv>
 800f5d6:	0002      	movs	r2, r0
 800f5d8:	000b      	movs	r3, r1
 800f5da:	0010      	movs	r0, r2
 800f5dc:	0019      	movs	r1, r3
 800f5de:	f7f3 ff89 	bl	80034f4 <__aeabi_d2f>
 800f5e2:	1c03      	adds	r3, r0, #0
 800f5e4:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800f5e6:	4913      	ldr	r1, [pc, #76]	@ (800f634 <HIDS_GetMeasurementValues+0x128>)
 800f5e8:	68b8      	ldr	r0, [r7, #8]
 800f5ea:	f7f1 fe17 	bl	800121c <__aeabi_fsub>
 800f5ee:	1c03      	adds	r3, r0, #0
 800f5f0:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	0011      	movs	r1, r2
 800f604:	0018      	movs	r0, r3
 800f606:	f7fd f921 	bl	800c84c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800f60a:	4b04      	ldr	r3, [pc, #16]	@ (800f61c <HIDS_GetMeasurementValues+0x110>)
 800f60c:	2201      	movs	r2, #1
 800f60e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800f610:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800f612:	0018      	movs	r0, r3
 800f614:	46bd      	mov	sp, r7
 800f616:	b004      	add	sp, #16
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	46c0      	nop			@ (mov r8, r8)
 800f61c:	200020ee 	.word	0x200020ee
 800f620:	200020e8 	.word	0x200020e8
 800f624:	08026258 	.word	0x08026258
 800f628:	080261f0 	.word	0x080261f0
 800f62c:	40efffe0 	.word	0x40efffe0
 800f630:	42340000 	.word	0x42340000
 800f634:	40c00000 	.word	0x40c00000

0800f638 <ResetHIDSresults>:

void ResetHIDSresults() {
 800f638:	b580      	push	{r7, lr}
 800f63a:	af00      	add	r7, sp, #0
  humid = 0.0;
 800f63c:	4b04      	ldr	r3, [pc, #16]	@ (800f650 <ResetHIDSresults+0x18>)
 800f63e:	2200      	movs	r2, #0
 800f640:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800f642:	4b04      	ldr	r3, [pc, #16]	@ (800f654 <ResetHIDSresults+0x1c>)
 800f644:	2200      	movs	r2, #0
 800f646:	601a      	str	r2, [r3, #0]
}
 800f648:	46c0      	nop			@ (mov r8, r8)
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	46c0      	nop			@ (mov r8, r8)
 800f650:	200020d0 	.word	0x200020d0
 800f654:	200020d4 	.word	0x200020d4

0800f658 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800f658:	b5b0      	push	{r4, r5, r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800f65e:	4b3c      	ldr	r3, [pc, #240]	@ (800f750 <HIDS_Upkeep+0xf8>)
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b06      	cmp	r3, #6
 800f664:	d868      	bhi.n	800f738 <HIDS_Upkeep+0xe0>
 800f666:	009a      	lsls	r2, r3, #2
 800f668:	4b3a      	ldr	r3, [pc, #232]	@ (800f754 <HIDS_Upkeep+0xfc>)
 800f66a:	18d3      	adds	r3, r2, r3
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800f670:	4a39      	ldr	r2, [pc, #228]	@ (800f758 <HIDS_Upkeep+0x100>)
 800f672:	4b3a      	ldr	r3, [pc, #232]	@ (800f75c <HIDS_Upkeep+0x104>)
 800f674:	0019      	movs	r1, r3
 800f676:	2003      	movs	r0, #3
 800f678:	f7ff fcca 	bl	800f010 <CreateLine>
      break;
 800f67c:	e063      	b.n	800f746 <HIDS_Upkeep+0xee>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800f67e:	f7ff ffdb 	bl	800f638 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800f682:	4b33      	ldr	r3, [pc, #204]	@ (800f750 <HIDS_Upkeep+0xf8>)
 800f684:	2201      	movs	r2, #1
 800f686:	701a      	strb	r2, [r3, #0]
      break;
 800f688:	e05d      	b.n	800f746 <HIDS_Upkeep+0xee>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800f68a:	f7fe fb0b 	bl	800dca4 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800f68e:	f7ff fe45 	bl	800f31c <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800f692:	4b2f      	ldr	r3, [pc, #188]	@ (800f750 <HIDS_Upkeep+0xf8>)
 800f694:	2202      	movs	r2, #2
 800f696:	701a      	strb	r2, [r3, #0]
      break;
 800f698:	e055      	b.n	800f746 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800f69a:	4a31      	ldr	r2, [pc, #196]	@ (800f760 <HIDS_Upkeep+0x108>)
 800f69c:	4b31      	ldr	r3, [pc, #196]	@ (800f764 <HIDS_Upkeep+0x10c>)
 800f69e:	0011      	movs	r1, r2
 800f6a0:	0018      	movs	r0, r3
 800f6a2:	f7ff ff33 	bl	800f50c <HIDS_GetMeasurementValues>
 800f6a6:	1e03      	subs	r3, r0, #0
 800f6a8:	d04a      	beq.n	800f740 <HIDS_Upkeep+0xe8>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800f6aa:	4b29      	ldr	r3, [pc, #164]	@ (800f750 <HIDS_Upkeep+0xf8>)
 800f6ac:	2203      	movs	r2, #3
 800f6ae:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f6b0:	e046      	b.n	800f740 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800f6b2:	4b2c      	ldr	r3, [pc, #176]	@ (800f764 <HIDS_Upkeep+0x10c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	1c18      	adds	r0, r3, #0
 800f6b8:	f7f3 fed4 	bl	8003464 <__aeabi_f2d>
 800f6bc:	0004      	movs	r4, r0
 800f6be:	000d      	movs	r5, r1
 800f6c0:	4b27      	ldr	r3, [pc, #156]	@ (800f760 <HIDS_Upkeep+0x108>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	1c18      	adds	r0, r3, #0
 800f6c6:	f7f3 fecd 	bl	8003464 <__aeabi_f2d>
 800f6ca:	0002      	movs	r2, r0
 800f6cc:	000b      	movs	r3, r1
 800f6ce:	4826      	ldr	r0, [pc, #152]	@ (800f768 <HIDS_Upkeep+0x110>)
 800f6d0:	4922      	ldr	r1, [pc, #136]	@ (800f75c <HIDS_Upkeep+0x104>)
 800f6d2:	9202      	str	r2, [sp, #8]
 800f6d4:	9303      	str	r3, [sp, #12]
 800f6d6:	9400      	str	r4, [sp, #0]
 800f6d8:	9501      	str	r5, [sp, #4]
 800f6da:	0002      	movs	r2, r0
 800f6dc:	2003      	movs	r0, #3
 800f6de:	f7ff fc97 	bl	800f010 <CreateLine>
      setHIDS(temp, humid);
 800f6e2:	4b1f      	ldr	r3, [pc, #124]	@ (800f760 <HIDS_Upkeep+0x108>)
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	4b1f      	ldr	r3, [pc, #124]	@ (800f764 <HIDS_Upkeep+0x10c>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	1c19      	adds	r1, r3, #0
 800f6ec:	1c10      	adds	r0, r2, #0
 800f6ee:	f7f4 f85b 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 800f6f2:	f7fe faef 	bl	800dcd4 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 800f6f6:	f000 f8cf 	bl	800f898 <HAL_GetTick>
 800f6fa:	0004      	movs	r4, r0
 800f6fc:	f7f7 fb08 	bl	8006d10 <Check_USB_PowerOn>
 800f700:	1e03      	subs	r3, r0, #0
 800f702:	d103      	bne.n	800f70c <HIDS_Upkeep+0xb4>
 800f704:	4b19      	ldr	r3, [pc, #100]	@ (800f76c <HIDS_Upkeep+0x114>)
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <HIDS_Upkeep+0xb8>
 800f70c:	4b18      	ldr	r3, [pc, #96]	@ (800f770 <HIDS_Upkeep+0x118>)
 800f70e:	e001      	b.n	800f714 <HIDS_Upkeep+0xbc>
 800f710:	23fa      	movs	r3, #250	@ 0xfa
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	191a      	adds	r2, r3, r4
 800f716:	4b17      	ldr	r3, [pc, #92]	@ (800f774 <HIDS_Upkeep+0x11c>)
 800f718:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800f71a:	4b0d      	ldr	r3, [pc, #52]	@ (800f750 <HIDS_Upkeep+0xf8>)
 800f71c:	2206      	movs	r2, #6
 800f71e:	701a      	strb	r2, [r3, #0]
      break;
 800f720:	e011      	b.n	800f746 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800f722:	4b14      	ldr	r3, [pc, #80]	@ (800f774 <HIDS_Upkeep+0x11c>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	0018      	movs	r0, r3
 800f728:	f7ff fc1c 	bl	800ef64 <TimestampIsReached>
 800f72c:	1e03      	subs	r3, r0, #0
 800f72e:	d009      	beq.n	800f744 <HIDS_Upkeep+0xec>
        HIDSState = HIDS_STATE_INIT;
 800f730:	4b07      	ldr	r3, [pc, #28]	@ (800f750 <HIDS_Upkeep+0xf8>)
 800f732:	2200      	movs	r2, #0
 800f734:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f736:	e005      	b.n	800f744 <HIDS_Upkeep+0xec>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800f738:	4b05      	ldr	r3, [pc, #20]	@ (800f750 <HIDS_Upkeep+0xf8>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	701a      	strb	r2, [r3, #0]
      break;
 800f73e:	e002      	b.n	800f746 <HIDS_Upkeep+0xee>
      break;
 800f740:	46c0      	nop			@ (mov r8, r8)
 800f742:	e000      	b.n	800f746 <HIDS_Upkeep+0xee>
      break;
 800f744:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800f746:	4b02      	ldr	r3, [pc, #8]	@ (800f750 <HIDS_Upkeep+0xf8>)
 800f748:	781b      	ldrb	r3, [r3, #0]
}
 800f74a:	0018      	movs	r0, r3
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bdb0      	pop	{r4, r5, r7, pc}
 800f750:	200020f4 	.word	0x200020f4
 800f754:	080267d0 	.word	0x080267d0
 800f758:	0802628c 	.word	0x0802628c
 800f75c:	080262c0 	.word	0x080262c0
 800f760:	200020d4 	.word	0x200020d4
 800f764:	200020d0 	.word	0x200020d0
 800f768:	080262c4 	.word	0x080262c4
 800f76c:	20001d3a 	.word	0x20001d3a
 800f770:	00002710 	.word	0x00002710
 800f774:	200020f0 	.word	0x200020f0

0800f778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800f778:	480d      	ldr	r0, [pc, #52]	@ (800f7b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800f77a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800f77c:	f7ff f84c 	bl	800e818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f780:	480c      	ldr	r0, [pc, #48]	@ (800f7b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800f782:	490d      	ldr	r1, [pc, #52]	@ (800f7b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800f784:	4a0d      	ldr	r2, [pc, #52]	@ (800f7bc <LoopForever+0xe>)
  movs r3, #0
 800f786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f788:	e002      	b.n	800f790 <LoopCopyDataInit>

0800f78a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f78a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f78c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f78e:	3304      	adds	r3, #4

0800f790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f794:	d3f9      	bcc.n	800f78a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f796:	4a0a      	ldr	r2, [pc, #40]	@ (800f7c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f798:	4c0a      	ldr	r4, [pc, #40]	@ (800f7c4 <LoopForever+0x16>)
  movs r3, #0
 800f79a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f79c:	e001      	b.n	800f7a2 <LoopFillZerobss>

0800f79e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f79e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f7a0:	3204      	adds	r2, #4

0800f7a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f7a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f7a4:	d3fb      	bcc.n	800f79e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f7a6:	f011 fb9b 	bl	8020ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f7aa:	f7f8 ff53 	bl	8008654 <main>

0800f7ae <LoopForever>:

LoopForever:
    b LoopForever
 800f7ae:	e7fe      	b.n	800f7ae <LoopForever>
   ldr   r0, =_estack
 800f7b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800f7b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f7b8:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800f7bc:	08027170 	.word	0x08027170
  ldr r2, =_sbss
 800f7c0:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800f7c4:	200034fc 	.word	0x200034fc

0800f7c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f7c8:	e7fe      	b.n	800f7c8 <ADC1_COMP_IRQHandler>
	...

0800f7cc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f7d2:	1dfb      	adds	r3, r7, #7
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800f7d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f808 <HAL_Init+0x3c>)
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f808 <HAL_Init+0x3c>)
 800f7de:	2140      	movs	r1, #64	@ 0x40
 800f7e0:	430a      	orrs	r2, r1
 800f7e2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f7e4:	2003      	movs	r0, #3
 800f7e6:	f000 f811 	bl	800f80c <HAL_InitTick>
 800f7ea:	1e03      	subs	r3, r0, #0
 800f7ec:	d003      	beq.n	800f7f6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800f7ee:	1dfb      	adds	r3, r7, #7
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	701a      	strb	r2, [r3, #0]
 800f7f4:	e001      	b.n	800f7fa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f7f6:	f7fe fec3 	bl	800e580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f7fa:	1dfb      	adds	r3, r7, #7
 800f7fc:	781b      	ldrb	r3, [r3, #0]
}
 800f7fe:	0018      	movs	r0, r3
 800f800:	46bd      	mov	sp, r7
 800f802:	b002      	add	sp, #8
 800f804:	bd80      	pop	{r7, pc}
 800f806:	46c0      	nop			@ (mov r8, r8)
 800f808:	40022000 	.word	0x40022000

0800f80c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f80c:	b590      	push	{r4, r7, lr}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f814:	4b14      	ldr	r3, [pc, #80]	@ (800f868 <HAL_InitTick+0x5c>)
 800f816:	681c      	ldr	r4, [r3, #0]
 800f818:	4b14      	ldr	r3, [pc, #80]	@ (800f86c <HAL_InitTick+0x60>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	0019      	movs	r1, r3
 800f81e:	23fa      	movs	r3, #250	@ 0xfa
 800f820:	0098      	lsls	r0, r3, #2
 800f822:	f7f0 fcbf 	bl	80001a4 <__udivsi3>
 800f826:	0003      	movs	r3, r0
 800f828:	0019      	movs	r1, r3
 800f82a:	0020      	movs	r0, r4
 800f82c:	f7f0 fcba 	bl	80001a4 <__udivsi3>
 800f830:	0003      	movs	r3, r0
 800f832:	0018      	movs	r0, r3
 800f834:	f000 fcfd 	bl	8010232 <HAL_SYSTICK_Config>
 800f838:	1e03      	subs	r3, r0, #0
 800f83a:	d001      	beq.n	800f840 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800f83c:	2301      	movs	r3, #1
 800f83e:	e00f      	b.n	800f860 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b03      	cmp	r3, #3
 800f844:	d80b      	bhi.n	800f85e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f846:	6879      	ldr	r1, [r7, #4]
 800f848:	2301      	movs	r3, #1
 800f84a:	425b      	negs	r3, r3
 800f84c:	2200      	movs	r2, #0
 800f84e:	0018      	movs	r0, r3
 800f850:	f000 fcc6 	bl	80101e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f854:	4b06      	ldr	r3, [pc, #24]	@ (800f870 <HAL_InitTick+0x64>)
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f85a:	2300      	movs	r3, #0
 800f85c:	e000      	b.n	800f860 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800f85e:	2301      	movs	r3, #1
}
 800f860:	0018      	movs	r0, r3
 800f862:	46bd      	mov	sp, r7
 800f864:	b003      	add	sp, #12
 800f866:	bd90      	pop	{r4, r7, pc}
 800f868:	200000cc 	.word	0x200000cc
 800f86c:	200000e0 	.word	0x200000e0
 800f870:	200000dc 	.word	0x200000dc

0800f874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f878:	4b05      	ldr	r3, [pc, #20]	@ (800f890 <HAL_IncTick+0x1c>)
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	001a      	movs	r2, r3
 800f87e:	4b05      	ldr	r3, [pc, #20]	@ (800f894 <HAL_IncTick+0x20>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	18d2      	adds	r2, r2, r3
 800f884:	4b03      	ldr	r3, [pc, #12]	@ (800f894 <HAL_IncTick+0x20>)
 800f886:	601a      	str	r2, [r3, #0]
}
 800f888:	46c0      	nop			@ (mov r8, r8)
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	46c0      	nop			@ (mov r8, r8)
 800f890:	200000e0 	.word	0x200000e0
 800f894:	200020f8 	.word	0x200020f8

0800f898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	af00      	add	r7, sp, #0
  return uwTick;
 800f89c:	4b02      	ldr	r3, [pc, #8]	@ (800f8a8 <HAL_GetTick+0x10>)
 800f89e:	681b      	ldr	r3, [r3, #0]
}
 800f8a0:	0018      	movs	r0, r3
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	46c0      	nop			@ (mov r8, r8)
 800f8a8:	200020f8 	.word	0x200020f8

0800f8ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f8b4:	f7ff fff0 	bl	800f898 <HAL_GetTick>
 800f8b8:	0003      	movs	r3, r0
 800f8ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	d005      	beq.n	800f8d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f8c6:	4b0a      	ldr	r3, [pc, #40]	@ (800f8f0 <HAL_Delay+0x44>)
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	001a      	movs	r2, r3
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	189b      	adds	r3, r3, r2
 800f8d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f8d2:	46c0      	nop			@ (mov r8, r8)
 800f8d4:	f7ff ffe0 	bl	800f898 <HAL_GetTick>
 800f8d8:	0002      	movs	r2, r0
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	1ad3      	subs	r3, r2, r3
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d8f7      	bhi.n	800f8d4 <HAL_Delay+0x28>
  {
  }
}
 800f8e4:	46c0      	nop			@ (mov r8, r8)
 800f8e6:	46c0      	nop			@ (mov r8, r8)
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	b004      	add	sp, #16
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	46c0      	nop			@ (mov r8, r8)
 800f8f0:	200000e0 	.word	0x200000e0

0800f8f4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800f8f8:	4b04      	ldr	r3, [pc, #16]	@ (800f90c <HAL_SuspendTick+0x18>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	4b03      	ldr	r3, [pc, #12]	@ (800f90c <HAL_SuspendTick+0x18>)
 800f8fe:	2102      	movs	r1, #2
 800f900:	438a      	bics	r2, r1
 800f902:	601a      	str	r2, [r3, #0]
}
 800f904:	46c0      	nop			@ (mov r8, r8)
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	46c0      	nop			@ (mov r8, r8)
 800f90c:	e000e010 	.word	0xe000e010

0800f910 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800f914:	4b04      	ldr	r3, [pc, #16]	@ (800f928 <HAL_ResumeTick+0x18>)
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	4b03      	ldr	r3, [pc, #12]	@ (800f928 <HAL_ResumeTick+0x18>)
 800f91a:	2102      	movs	r1, #2
 800f91c:	430a      	orrs	r2, r1
 800f91e:	601a      	str	r2, [r3, #0]
}
 800f920:	46c0      	nop			@ (mov r8, r8)
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	46c0      	nop			@ (mov r8, r8)
 800f928:	e000e010 	.word	0xe000e010

0800f92c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800f930:	4b02      	ldr	r3, [pc, #8]	@ (800f93c <HAL_GetUIDw0+0x10>)
 800f932:	681b      	ldr	r3, [r3, #0]
}
 800f934:	0018      	movs	r0, r3
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	46c0      	nop			@ (mov r8, r8)
 800f93c:	1ff80050 	.word	0x1ff80050

0800f940 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800f944:	4b02      	ldr	r3, [pc, #8]	@ (800f950 <HAL_GetUIDw1+0x10>)
 800f946:	681b      	ldr	r3, [r3, #0]
}
 800f948:	0018      	movs	r0, r3
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	46c0      	nop			@ (mov r8, r8)
 800f950:	1ff80054 	.word	0x1ff80054

0800f954 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800f958:	4b02      	ldr	r3, [pc, #8]	@ (800f964 <HAL_GetUIDw2+0x10>)
 800f95a:	681b      	ldr	r3, [r3, #0]
}
 800f95c:	0018      	movs	r0, r3
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	46c0      	nop			@ (mov r8, r8)
 800f964:	1ff80064 	.word	0x1ff80064

0800f968 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d101      	bne.n	800f97a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800f976:	2301      	movs	r3, #1
 800f978:	e159      	b.n	800fc2e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d10a      	bne.n	800f998 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2200      	movs	r2, #0
 800f986:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2250      	movs	r2, #80	@ 0x50
 800f98c:	2100      	movs	r1, #0
 800f98e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	0018      	movs	r0, r3
 800f994:	f7f8 f854 	bl	8007a40 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f99c:	2210      	movs	r2, #16
 800f99e:	4013      	ands	r3, r2
 800f9a0:	2b10      	cmp	r3, #16
 800f9a2:	d005      	beq.n	800f9b0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	689b      	ldr	r3, [r3, #8]
 800f9aa:	2204      	movs	r2, #4
 800f9ac:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f9ae:	d00b      	beq.n	800f9c8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9b4:	2210      	movs	r2, #16
 800f9b6:	431a      	orrs	r2, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2250      	movs	r2, #80	@ 0x50
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	e132      	b.n	800fc2e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9cc:	4a9a      	ldr	r2, [pc, #616]	@ (800fc38 <HAL_ADC_Init+0x2d0>)
 800f9ce:	4013      	ands	r3, r2
 800f9d0:	2202      	movs	r2, #2
 800f9d2:	431a      	orrs	r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	689b      	ldr	r3, [r3, #8]
 800f9de:	2203      	movs	r2, #3
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d108      	bne.n	800f9f8 <HAL_ADC_Init+0x90>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	4013      	ands	r3, r2
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d101      	bne.n	800f9f8 <HAL_ADC_Init+0x90>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e000      	b.n	800f9fa <HAL_ADC_Init+0x92>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d149      	bne.n	800fa92 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	685a      	ldr	r2, [r3, #4]
 800fa02:	23c0      	movs	r3, #192	@ 0xc0
 800fa04:	061b      	lsls	r3, r3, #24
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d00b      	beq.n	800fa22 <HAL_ADC_Init+0xba>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	2380      	movs	r3, #128	@ 0x80
 800fa10:	05db      	lsls	r3, r3, #23
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d005      	beq.n	800fa22 <HAL_ADC_Init+0xba>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	2380      	movs	r3, #128	@ 0x80
 800fa1c:	061b      	lsls	r3, r3, #24
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d111      	bne.n	800fa46 <HAL_ADC_Init+0xde>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	691a      	ldr	r2, [r3, #16]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	0092      	lsls	r2, r2, #2
 800fa2e:	0892      	lsrs	r2, r2, #2
 800fa30:	611a      	str	r2, [r3, #16]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	6919      	ldr	r1, [r3, #16]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	685a      	ldr	r2, [r3, #4]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	430a      	orrs	r2, r1
 800fa42:	611a      	str	r2, [r3, #16]
 800fa44:	e014      	b.n	800fa70 <HAL_ADC_Init+0x108>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	691a      	ldr	r2, [r3, #16]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	0092      	lsls	r2, r2, #2
 800fa52:	0892      	lsrs	r2, r2, #2
 800fa54:	611a      	str	r2, [r3, #16]
 800fa56:	4b79      	ldr	r3, [pc, #484]	@ (800fc3c <HAL_ADC_Init+0x2d4>)
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	4b78      	ldr	r3, [pc, #480]	@ (800fc3c <HAL_ADC_Init+0x2d4>)
 800fa5c:	4978      	ldr	r1, [pc, #480]	@ (800fc40 <HAL_ADC_Init+0x2d8>)
 800fa5e:	400a      	ands	r2, r1
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	4b76      	ldr	r3, [pc, #472]	@ (800fc3c <HAL_ADC_Init+0x2d4>)
 800fa64:	6819      	ldr	r1, [r3, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	4b74      	ldr	r3, [pc, #464]	@ (800fc3c <HAL_ADC_Init+0x2d4>)
 800fa6c:	430a      	orrs	r2, r1
 800fa6e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	68da      	ldr	r2, [r3, #12]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2118      	movs	r1, #24
 800fa7c:	438a      	bics	r2, r1
 800fa7e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	68d9      	ldr	r1, [r3, #12]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	689a      	ldr	r2, [r3, #8]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	430a      	orrs	r2, r1
 800fa90:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800fa92:	4b6a      	ldr	r3, [pc, #424]	@ (800fc3c <HAL_ADC_Init+0x2d4>)
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	4b69      	ldr	r3, [pc, #420]	@ (800fc3c <HAL_ADC_Init+0x2d4>)
 800fa98:	496a      	ldr	r1, [pc, #424]	@ (800fc44 <HAL_ADC_Init+0x2dc>)
 800fa9a:	400a      	ands	r2, r1
 800fa9c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800fa9e:	4b67      	ldr	r3, [pc, #412]	@ (800fc3c <HAL_ADC_Init+0x2d4>)
 800faa0:	6819      	ldr	r1, [r3, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faa6:	065a      	lsls	r2, r3, #25
 800faa8:	4b64      	ldr	r3, [pc, #400]	@ (800fc3c <HAL_ADC_Init+0x2d4>)
 800faaa:	430a      	orrs	r2, r1
 800faac:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	689a      	ldr	r2, [r3, #8]
 800fab4:	2380      	movs	r3, #128	@ 0x80
 800fab6:	055b      	lsls	r3, r3, #21
 800fab8:	4013      	ands	r3, r2
 800faba:	d108      	bne.n	800face <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	689a      	ldr	r2, [r3, #8]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	2180      	movs	r1, #128	@ 0x80
 800fac8:	0549      	lsls	r1, r1, #21
 800faca:	430a      	orrs	r2, r1
 800facc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	68da      	ldr	r2, [r3, #12]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	495b      	ldr	r1, [pc, #364]	@ (800fc48 <HAL_ADC_Init+0x2e0>)
 800fada:	400a      	ands	r2, r1
 800fadc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68d9      	ldr	r1, [r3, #12]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	2b02      	cmp	r3, #2
 800faee:	d101      	bne.n	800faf4 <HAL_ADC_Init+0x18c>
 800faf0:	2304      	movs	r3, #4
 800faf2:	e000      	b.n	800faf6 <HAL_ADC_Init+0x18e>
 800faf4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800faf6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2020      	movs	r0, #32
 800fafc:	5c1b      	ldrb	r3, [r3, r0]
 800fafe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800fb00:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	202c      	movs	r0, #44	@ 0x2c
 800fb06:	5c1b      	ldrb	r3, [r3, r0]
 800fb08:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800fb0a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800fb10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800fb18:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	69db      	ldr	r3, [r3, #28]
 800fb1e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800fb20:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	430a      	orrs	r2, r1
 800fb28:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb2e:	23c2      	movs	r3, #194	@ 0xc2
 800fb30:	33ff      	adds	r3, #255	@ 0xff
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d00b      	beq.n	800fb4e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	68d9      	ldr	r1, [r3, #12]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800fb44:	431a      	orrs	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	430a      	orrs	r2, r1
 800fb4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2221      	movs	r2, #33	@ 0x21
 800fb52:	5c9b      	ldrb	r3, [r3, r2]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d11a      	bne.n	800fb8e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2220      	movs	r2, #32
 800fb5c:	5c9b      	ldrb	r3, [r3, r2]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d109      	bne.n	800fb76 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	68da      	ldr	r2, [r3, #12]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2180      	movs	r1, #128	@ 0x80
 800fb6e:	0249      	lsls	r1, r1, #9
 800fb70:	430a      	orrs	r2, r1
 800fb72:	60da      	str	r2, [r3, #12]
 800fb74:	e00b      	b.n	800fb8e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb7a:	2220      	movs	r2, #32
 800fb7c:	431a      	orrs	r2, r3
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb86:	2201      	movs	r2, #1
 800fb88:	431a      	orrs	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d11f      	bne.n	800fbd6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	691a      	ldr	r2, [r3, #16]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	492a      	ldr	r1, [pc, #168]	@ (800fc4c <HAL_ADC_Init+0x2e4>)
 800fba2:	400a      	ands	r2, r1
 800fba4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	6919      	ldr	r1, [r3, #16]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800fbb4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800fbba:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	430a      	orrs	r2, r1
 800fbc2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	691a      	ldr	r2, [r3, #16]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2101      	movs	r1, #1
 800fbd0:	430a      	orrs	r2, r1
 800fbd2:	611a      	str	r2, [r3, #16]
 800fbd4:	e00e      	b.n	800fbf4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	4013      	ands	r3, r2
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d107      	bne.n	800fbf4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	691a      	ldr	r2, [r3, #16]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2101      	movs	r1, #1
 800fbf0:	438a      	bics	r2, r1
 800fbf2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	695a      	ldr	r2, [r3, #20]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2107      	movs	r1, #7
 800fc00:	438a      	bics	r2, r1
 800fc02:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	6959      	ldr	r1, [r3, #20]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	430a      	orrs	r2, r1
 800fc14:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc20:	2203      	movs	r2, #3
 800fc22:	4393      	bics	r3, r2
 800fc24:	2201      	movs	r2, #1
 800fc26:	431a      	orrs	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	0018      	movs	r0, r3
 800fc30:	46bd      	mov	sp, r7
 800fc32:	b002      	add	sp, #8
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	46c0      	nop			@ (mov r8, r8)
 800fc38:	fffffefd 	.word	0xfffffefd
 800fc3c:	40012708 	.word	0x40012708
 800fc40:	ffc3ffff 	.word	0xffc3ffff
 800fc44:	fdffffff 	.word	0xfdffffff
 800fc48:	fffe0219 	.word	0xfffe0219
 800fc4c:	fffffc03 	.word	0xfffffc03

0800fc50 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800fc50:	b590      	push	{r4, r7, lr}
 800fc52:	b085      	sub	sp, #20
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc58:	230f      	movs	r3, #15
 800fc5a:	18fb      	adds	r3, r7, r3
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	2204      	movs	r2, #4
 800fc68:	4013      	ands	r3, r2
 800fc6a:	d138      	bne.n	800fcde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2250      	movs	r2, #80	@ 0x50
 800fc70:	5c9b      	ldrb	r3, [r3, r2]
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d101      	bne.n	800fc7a <HAL_ADC_Start+0x2a>
 800fc76:	2302      	movs	r3, #2
 800fc78:	e038      	b.n	800fcec <HAL_ADC_Start+0x9c>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2250      	movs	r2, #80	@ 0x50
 800fc7e:	2101      	movs	r1, #1
 800fc80:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	69db      	ldr	r3, [r3, #28]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d007      	beq.n	800fc9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800fc8a:	230f      	movs	r3, #15
 800fc8c:	18fc      	adds	r4, r7, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	0018      	movs	r0, r3
 800fc92:	f000 f95f 	bl	800ff54 <ADC_Enable>
 800fc96:	0003      	movs	r3, r0
 800fc98:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800fc9a:	230f      	movs	r3, #15
 800fc9c:	18fb      	adds	r3, r7, r3
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d120      	bne.n	800fce6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fca8:	4a12      	ldr	r2, [pc, #72]	@ (800fcf4 <HAL_ADC_Start+0xa4>)
 800fcaa:	4013      	ands	r3, r2
 800fcac:	2280      	movs	r2, #128	@ 0x80
 800fcae:	0052      	lsls	r2, r2, #1
 800fcb0:	431a      	orrs	r2, r3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2250      	movs	r2, #80	@ 0x50
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	221c      	movs	r2, #28
 800fcca:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	689a      	ldr	r2, [r3, #8]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2104      	movs	r1, #4
 800fcd8:	430a      	orrs	r2, r1
 800fcda:	609a      	str	r2, [r3, #8]
 800fcdc:	e003      	b.n	800fce6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800fcde:	230f      	movs	r3, #15
 800fce0:	18fb      	adds	r3, r7, r3
 800fce2:	2202      	movs	r2, #2
 800fce4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800fce6:	230f      	movs	r3, #15
 800fce8:	18fb      	adds	r3, r7, r3
 800fcea:	781b      	ldrb	r3, [r3, #0]
}
 800fcec:	0018      	movs	r0, r3
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	b005      	add	sp, #20
 800fcf2:	bd90      	pop	{r4, r7, pc}
 800fcf4:	fffff0fe 	.word	0xfffff0fe

0800fcf8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800fd06:	2300      	movs	r3, #0
 800fd08:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	2b08      	cmp	r3, #8
 800fd10:	d102      	bne.n	800fd18 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fd12:	2308      	movs	r3, #8
 800fd14:	60fb      	str	r3, [r7, #12]
 800fd16:	e014      	b.n	800fd42 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	4013      	ands	r3, r2
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d10b      	bne.n	800fd3e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd2a:	2220      	movs	r2, #32
 800fd2c:	431a      	orrs	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2250      	movs	r2, #80	@ 0x50
 800fd36:	2100      	movs	r1, #0
 800fd38:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e072      	b.n	800fe24 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fd3e:	230c      	movs	r3, #12
 800fd40:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800fd42:	f7ff fda9 	bl	800f898 <HAL_GetTick>
 800fd46:	0003      	movs	r3, r0
 800fd48:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fd4a:	e01f      	b.n	800fd8c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	3301      	adds	r3, #1
 800fd50:	d01c      	beq.n	800fd8c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d007      	beq.n	800fd68 <HAL_ADC_PollForConversion+0x70>
 800fd58:	f7ff fd9e 	bl	800f898 <HAL_GetTick>
 800fd5c:	0002      	movs	r2, r0
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d211      	bcs.n	800fd8c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	68fa      	ldr	r2, [r7, #12]
 800fd70:	4013      	ands	r3, r2
 800fd72:	d10b      	bne.n	800fd8c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd78:	2204      	movs	r2, #4
 800fd7a:	431a      	orrs	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2250      	movs	r2, #80	@ 0x50
 800fd84:	2100      	movs	r1, #0
 800fd86:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800fd88:	2303      	movs	r3, #3
 800fd8a:	e04b      	b.n	800fe24 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	68fa      	ldr	r2, [r7, #12]
 800fd94:	4013      	ands	r3, r2
 800fd96:	d0d9      	beq.n	800fd4c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd9c:	2280      	movs	r2, #128	@ 0x80
 800fd9e:	0092      	lsls	r2, r2, #2
 800fda0:	431a      	orrs	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68da      	ldr	r2, [r3, #12]
 800fdac:	23c0      	movs	r3, #192	@ 0xc0
 800fdae:	011b      	lsls	r3, r3, #4
 800fdb0:	4013      	ands	r3, r2
 800fdb2:	d12e      	bne.n	800fe12 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2220      	movs	r2, #32
 800fdb8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d129      	bne.n	800fe12 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2208      	movs	r2, #8
 800fdc6:	4013      	ands	r3, r2
 800fdc8:	2b08      	cmp	r3, #8
 800fdca:	d122      	bne.n	800fe12 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	689b      	ldr	r3, [r3, #8]
 800fdd2:	2204      	movs	r2, #4
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	d110      	bne.n	800fdfa <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	210c      	movs	r1, #12
 800fde4:	438a      	bics	r2, r1
 800fde6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdec:	4a0f      	ldr	r2, [pc, #60]	@ (800fe2c <HAL_ADC_PollForConversion+0x134>)
 800fdee:	4013      	ands	r3, r2
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	431a      	orrs	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	655a      	str	r2, [r3, #84]	@ 0x54
 800fdf8:	e00b      	b.n	800fe12 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdfe:	2220      	movs	r2, #32
 800fe00:	431a      	orrs	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	431a      	orrs	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	699b      	ldr	r3, [r3, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d103      	bne.n	800fe22 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	220c      	movs	r2, #12
 800fe20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	0018      	movs	r0, r3
 800fe26:	46bd      	mov	sp, r7
 800fe28:	b004      	add	sp, #16
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	fffffefe 	.word	0xfffffefe

0800fe30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800fe3e:	0018      	movs	r0, r3
 800fe40:	46bd      	mov	sp, r7
 800fe42:	b002      	add	sp, #8
 800fe44:	bd80      	pop	{r7, pc}
	...

0800fe48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2250      	movs	r2, #80	@ 0x50
 800fe56:	5c9b      	ldrb	r3, [r3, r2]
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d101      	bne.n	800fe60 <HAL_ADC_ConfigChannel+0x18>
 800fe5c:	2302      	movs	r3, #2
 800fe5e:	e06c      	b.n	800ff3a <HAL_ADC_ConfigChannel+0xf2>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2250      	movs	r2, #80	@ 0x50
 800fe64:	2101      	movs	r1, #1
 800fe66:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	689b      	ldr	r3, [r3, #8]
 800fe6e:	2204      	movs	r2, #4
 800fe70:	4013      	ands	r3, r2
 800fe72:	d00b      	beq.n	800fe8c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe78:	2220      	movs	r2, #32
 800fe7a:	431a      	orrs	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2250      	movs	r2, #80	@ 0x50
 800fe84:	2100      	movs	r1, #0
 800fe86:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	e056      	b.n	800ff3a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	4a2c      	ldr	r2, [pc, #176]	@ (800ff44 <HAL_ADC_ConfigChannel+0xfc>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d028      	beq.n	800fee8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	035b      	lsls	r3, r3, #13
 800fea2:	0b5a      	lsrs	r2, r3, #13
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	430a      	orrs	r2, r1
 800feaa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	2380      	movs	r3, #128	@ 0x80
 800feb2:	02db      	lsls	r3, r3, #11
 800feb4:	4013      	ands	r3, r2
 800feb6:	d009      	beq.n	800fecc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800feb8:	4b23      	ldr	r3, [pc, #140]	@ (800ff48 <HAL_ADC_ConfigChannel+0x100>)
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	4b22      	ldr	r3, [pc, #136]	@ (800ff48 <HAL_ADC_ConfigChannel+0x100>)
 800febe:	2180      	movs	r1, #128	@ 0x80
 800fec0:	0409      	lsls	r1, r1, #16
 800fec2:	430a      	orrs	r2, r1
 800fec4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800fec6:	200a      	movs	r0, #10
 800fec8:	f000 f8ac 	bl	8010024 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	2380      	movs	r3, #128	@ 0x80
 800fed2:	029b      	lsls	r3, r3, #10
 800fed4:	4013      	ands	r3, r2
 800fed6:	d02b      	beq.n	800ff30 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800fed8:	4b1b      	ldr	r3, [pc, #108]	@ (800ff48 <HAL_ADC_ConfigChannel+0x100>)
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	4b1a      	ldr	r3, [pc, #104]	@ (800ff48 <HAL_ADC_ConfigChannel+0x100>)
 800fede:	2180      	movs	r1, #128	@ 0x80
 800fee0:	03c9      	lsls	r1, r1, #15
 800fee2:	430a      	orrs	r2, r1
 800fee4:	601a      	str	r2, [r3, #0]
 800fee6:	e023      	b.n	800ff30 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	035b      	lsls	r3, r3, #13
 800fef4:	0b5b      	lsrs	r3, r3, #13
 800fef6:	43d9      	mvns	r1, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	400a      	ands	r2, r1
 800fefe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	2380      	movs	r3, #128	@ 0x80
 800ff06:	02db      	lsls	r3, r3, #11
 800ff08:	4013      	ands	r3, r2
 800ff0a:	d005      	beq.n	800ff18 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800ff0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ff48 <HAL_ADC_ConfigChannel+0x100>)
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	4b0d      	ldr	r3, [pc, #52]	@ (800ff48 <HAL_ADC_ConfigChannel+0x100>)
 800ff12:	490e      	ldr	r1, [pc, #56]	@ (800ff4c <HAL_ADC_ConfigChannel+0x104>)
 800ff14:	400a      	ands	r2, r1
 800ff16:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	2380      	movs	r3, #128	@ 0x80
 800ff1e:	029b      	lsls	r3, r3, #10
 800ff20:	4013      	ands	r3, r2
 800ff22:	d005      	beq.n	800ff30 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800ff24:	4b08      	ldr	r3, [pc, #32]	@ (800ff48 <HAL_ADC_ConfigChannel+0x100>)
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	4b07      	ldr	r3, [pc, #28]	@ (800ff48 <HAL_ADC_ConfigChannel+0x100>)
 800ff2a:	4909      	ldr	r1, [pc, #36]	@ (800ff50 <HAL_ADC_ConfigChannel+0x108>)
 800ff2c:	400a      	ands	r2, r1
 800ff2e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2250      	movs	r2, #80	@ 0x50
 800ff34:	2100      	movs	r1, #0
 800ff36:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	0018      	movs	r0, r3
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	b002      	add	sp, #8
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	46c0      	nop			@ (mov r8, r8)
 800ff44:	00001001 	.word	0x00001001
 800ff48:	40012708 	.word	0x40012708
 800ff4c:	ff7fffff 	.word	0xff7fffff
 800ff50:	ffbfffff 	.word	0xffbfffff

0800ff54 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	689b      	ldr	r3, [r3, #8]
 800ff66:	2203      	movs	r2, #3
 800ff68:	4013      	ands	r3, r2
 800ff6a:	2b01      	cmp	r3, #1
 800ff6c:	d108      	bne.n	800ff80 <ADC_Enable+0x2c>
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2201      	movs	r2, #1
 800ff76:	4013      	ands	r3, r2
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d101      	bne.n	800ff80 <ADC_Enable+0x2c>
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e000      	b.n	800ff82 <ADC_Enable+0x2e>
 800ff80:	2300      	movs	r3, #0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d146      	bne.n	8010014 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	4a24      	ldr	r2, [pc, #144]	@ (8010020 <ADC_Enable+0xcc>)
 800ff8e:	4013      	ands	r3, r2
 800ff90:	d00d      	beq.n	800ffae <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff96:	2210      	movs	r2, #16
 800ff98:	431a      	orrs	r2, r3
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	431a      	orrs	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e033      	b.n	8010016 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	689a      	ldr	r2, [r3, #8]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2101      	movs	r1, #1
 800ffba:	430a      	orrs	r2, r1
 800ffbc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800ffbe:	2001      	movs	r0, #1
 800ffc0:	f000 f830 	bl	8010024 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800ffc4:	f7ff fc68 	bl	800f898 <HAL_GetTick>
 800ffc8:	0003      	movs	r3, r0
 800ffca:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ffcc:	e01b      	b.n	8010006 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ffce:	f7ff fc63 	bl	800f898 <HAL_GetTick>
 800ffd2:	0002      	movs	r2, r0
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	2b0a      	cmp	r3, #10
 800ffda:	d914      	bls.n	8010006 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	4013      	ands	r3, r2
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d00d      	beq.n	8010006 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffee:	2210      	movs	r2, #16
 800fff0:	431a      	orrs	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fffa:	2201      	movs	r2, #1
 800fffc:	431a      	orrs	r2, r3
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8010002:	2301      	movs	r3, #1
 8010004:	e007      	b.n	8010016 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2201      	movs	r2, #1
 801000e:	4013      	ands	r3, r2
 8010010:	2b01      	cmp	r3, #1
 8010012:	d1dc      	bne.n	800ffce <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8010014:	2300      	movs	r3, #0
}
 8010016:	0018      	movs	r0, r3
 8010018:	46bd      	mov	sp, r7
 801001a:	b004      	add	sp, #16
 801001c:	bd80      	pop	{r7, pc}
 801001e:	46c0      	nop			@ (mov r8, r8)
 8010020:	80000017 	.word	0x80000017

08010024 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 801002c:	4b0b      	ldr	r3, [pc, #44]	@ (801005c <ADC_DelayMicroSecond+0x38>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	490b      	ldr	r1, [pc, #44]	@ (8010060 <ADC_DelayMicroSecond+0x3c>)
 8010032:	0018      	movs	r0, r3
 8010034:	f7f0 f8b6 	bl	80001a4 <__udivsi3>
 8010038:	0003      	movs	r3, r0
 801003a:	001a      	movs	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4353      	muls	r3, r2
 8010040:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8010042:	e002      	b.n	801004a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3b01      	subs	r3, #1
 8010048:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1f9      	bne.n	8010044 <ADC_DelayMicroSecond+0x20>
  }
}
 8010050:	46c0      	nop			@ (mov r8, r8)
 8010052:	46c0      	nop			@ (mov r8, r8)
 8010054:	46bd      	mov	sp, r7
 8010056:	b004      	add	sp, #16
 8010058:	bd80      	pop	{r7, pc}
 801005a:	46c0      	nop			@ (mov r8, r8)
 801005c:	200000cc 	.word	0x200000cc
 8010060:	000f4240 	.word	0x000f4240

08010064 <__NVIC_EnableIRQ>:
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	0002      	movs	r2, r0
 801006c:	1dfb      	adds	r3, r7, #7
 801006e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010070:	1dfb      	adds	r3, r7, #7
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	2b7f      	cmp	r3, #127	@ 0x7f
 8010076:	d809      	bhi.n	801008c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010078:	1dfb      	adds	r3, r7, #7
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	001a      	movs	r2, r3
 801007e:	231f      	movs	r3, #31
 8010080:	401a      	ands	r2, r3
 8010082:	4b04      	ldr	r3, [pc, #16]	@ (8010094 <__NVIC_EnableIRQ+0x30>)
 8010084:	2101      	movs	r1, #1
 8010086:	4091      	lsls	r1, r2
 8010088:	000a      	movs	r2, r1
 801008a:	601a      	str	r2, [r3, #0]
}
 801008c:	46c0      	nop			@ (mov r8, r8)
 801008e:	46bd      	mov	sp, r7
 8010090:	b002      	add	sp, #8
 8010092:	bd80      	pop	{r7, pc}
 8010094:	e000e100 	.word	0xe000e100

08010098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010098:	b590      	push	{r4, r7, lr}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	0002      	movs	r2, r0
 80100a0:	6039      	str	r1, [r7, #0]
 80100a2:	1dfb      	adds	r3, r7, #7
 80100a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80100a6:	1dfb      	adds	r3, r7, #7
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80100ac:	d828      	bhi.n	8010100 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80100ae:	4a2f      	ldr	r2, [pc, #188]	@ (801016c <__NVIC_SetPriority+0xd4>)
 80100b0:	1dfb      	adds	r3, r7, #7
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	b25b      	sxtb	r3, r3
 80100b6:	089b      	lsrs	r3, r3, #2
 80100b8:	33c0      	adds	r3, #192	@ 0xc0
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	589b      	ldr	r3, [r3, r2]
 80100be:	1dfa      	adds	r2, r7, #7
 80100c0:	7812      	ldrb	r2, [r2, #0]
 80100c2:	0011      	movs	r1, r2
 80100c4:	2203      	movs	r2, #3
 80100c6:	400a      	ands	r2, r1
 80100c8:	00d2      	lsls	r2, r2, #3
 80100ca:	21ff      	movs	r1, #255	@ 0xff
 80100cc:	4091      	lsls	r1, r2
 80100ce:	000a      	movs	r2, r1
 80100d0:	43d2      	mvns	r2, r2
 80100d2:	401a      	ands	r2, r3
 80100d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	019b      	lsls	r3, r3, #6
 80100da:	22ff      	movs	r2, #255	@ 0xff
 80100dc:	401a      	ands	r2, r3
 80100de:	1dfb      	adds	r3, r7, #7
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	0018      	movs	r0, r3
 80100e4:	2303      	movs	r3, #3
 80100e6:	4003      	ands	r3, r0
 80100e8:	00db      	lsls	r3, r3, #3
 80100ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80100ec:	481f      	ldr	r0, [pc, #124]	@ (801016c <__NVIC_SetPriority+0xd4>)
 80100ee:	1dfb      	adds	r3, r7, #7
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	b25b      	sxtb	r3, r3
 80100f4:	089b      	lsrs	r3, r3, #2
 80100f6:	430a      	orrs	r2, r1
 80100f8:	33c0      	adds	r3, #192	@ 0xc0
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80100fe:	e031      	b.n	8010164 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010100:	4a1b      	ldr	r2, [pc, #108]	@ (8010170 <__NVIC_SetPriority+0xd8>)
 8010102:	1dfb      	adds	r3, r7, #7
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	0019      	movs	r1, r3
 8010108:	230f      	movs	r3, #15
 801010a:	400b      	ands	r3, r1
 801010c:	3b08      	subs	r3, #8
 801010e:	089b      	lsrs	r3, r3, #2
 8010110:	3306      	adds	r3, #6
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	18d3      	adds	r3, r2, r3
 8010116:	3304      	adds	r3, #4
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	1dfa      	adds	r2, r7, #7
 801011c:	7812      	ldrb	r2, [r2, #0]
 801011e:	0011      	movs	r1, r2
 8010120:	2203      	movs	r2, #3
 8010122:	400a      	ands	r2, r1
 8010124:	00d2      	lsls	r2, r2, #3
 8010126:	21ff      	movs	r1, #255	@ 0xff
 8010128:	4091      	lsls	r1, r2
 801012a:	000a      	movs	r2, r1
 801012c:	43d2      	mvns	r2, r2
 801012e:	401a      	ands	r2, r3
 8010130:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	019b      	lsls	r3, r3, #6
 8010136:	22ff      	movs	r2, #255	@ 0xff
 8010138:	401a      	ands	r2, r3
 801013a:	1dfb      	adds	r3, r7, #7
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	0018      	movs	r0, r3
 8010140:	2303      	movs	r3, #3
 8010142:	4003      	ands	r3, r0
 8010144:	00db      	lsls	r3, r3, #3
 8010146:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010148:	4809      	ldr	r0, [pc, #36]	@ (8010170 <__NVIC_SetPriority+0xd8>)
 801014a:	1dfb      	adds	r3, r7, #7
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	001c      	movs	r4, r3
 8010150:	230f      	movs	r3, #15
 8010152:	4023      	ands	r3, r4
 8010154:	3b08      	subs	r3, #8
 8010156:	089b      	lsrs	r3, r3, #2
 8010158:	430a      	orrs	r2, r1
 801015a:	3306      	adds	r3, #6
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	18c3      	adds	r3, r0, r3
 8010160:	3304      	adds	r3, #4
 8010162:	601a      	str	r2, [r3, #0]
}
 8010164:	46c0      	nop			@ (mov r8, r8)
 8010166:	46bd      	mov	sp, r7
 8010168:	b003      	add	sp, #12
 801016a:	bd90      	pop	{r4, r7, pc}
 801016c:	e000e100 	.word	0xe000e100
 8010170:	e000ed00 	.word	0xe000ed00

08010174 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8010178:	f3bf 8f4f 	dsb	sy
}
 801017c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801017e:	4b04      	ldr	r3, [pc, #16]	@ (8010190 <__NVIC_SystemReset+0x1c>)
 8010180:	4a04      	ldr	r2, [pc, #16]	@ (8010194 <__NVIC_SystemReset+0x20>)
 8010182:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010184:	f3bf 8f4f 	dsb	sy
}
 8010188:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801018a:	46c0      	nop			@ (mov r8, r8)
 801018c:	e7fd      	b.n	801018a <__NVIC_SystemReset+0x16>
 801018e:	46c0      	nop			@ (mov r8, r8)
 8010190:	e000ed00 	.word	0xe000ed00
 8010194:	05fa0004 	.word	0x05fa0004

08010198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	1e5a      	subs	r2, r3, #1
 80101a4:	2380      	movs	r3, #128	@ 0x80
 80101a6:	045b      	lsls	r3, r3, #17
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d301      	bcc.n	80101b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80101ac:	2301      	movs	r3, #1
 80101ae:	e010      	b.n	80101d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80101b0:	4b0a      	ldr	r3, [pc, #40]	@ (80101dc <SysTick_Config+0x44>)
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	3a01      	subs	r2, #1
 80101b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80101b8:	2301      	movs	r3, #1
 80101ba:	425b      	negs	r3, r3
 80101bc:	2103      	movs	r1, #3
 80101be:	0018      	movs	r0, r3
 80101c0:	f7ff ff6a 	bl	8010098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80101c4:	4b05      	ldr	r3, [pc, #20]	@ (80101dc <SysTick_Config+0x44>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80101ca:	4b04      	ldr	r3, [pc, #16]	@ (80101dc <SysTick_Config+0x44>)
 80101cc:	2207      	movs	r2, #7
 80101ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	0018      	movs	r0, r3
 80101d4:	46bd      	mov	sp, r7
 80101d6:	b002      	add	sp, #8
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	46c0      	nop			@ (mov r8, r8)
 80101dc:	e000e010 	.word	0xe000e010

080101e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60b9      	str	r1, [r7, #8]
 80101e8:	607a      	str	r2, [r7, #4]
 80101ea:	210f      	movs	r1, #15
 80101ec:	187b      	adds	r3, r7, r1
 80101ee:	1c02      	adds	r2, r0, #0
 80101f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	187b      	adds	r3, r7, r1
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	b25b      	sxtb	r3, r3
 80101fa:	0011      	movs	r1, r2
 80101fc:	0018      	movs	r0, r3
 80101fe:	f7ff ff4b 	bl	8010098 <__NVIC_SetPriority>
}
 8010202:	46c0      	nop			@ (mov r8, r8)
 8010204:	46bd      	mov	sp, r7
 8010206:	b004      	add	sp, #16
 8010208:	bd80      	pop	{r7, pc}

0801020a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b082      	sub	sp, #8
 801020e:	af00      	add	r7, sp, #0
 8010210:	0002      	movs	r2, r0
 8010212:	1dfb      	adds	r3, r7, #7
 8010214:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010216:	1dfb      	adds	r3, r7, #7
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	b25b      	sxtb	r3, r3
 801021c:	0018      	movs	r0, r3
 801021e:	f7ff ff21 	bl	8010064 <__NVIC_EnableIRQ>
}
 8010222:	46c0      	nop			@ (mov r8, r8)
 8010224:	46bd      	mov	sp, r7
 8010226:	b002      	add	sp, #8
 8010228:	bd80      	pop	{r7, pc}

0801022a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801022e:	f7ff ffa1 	bl	8010174 <__NVIC_SystemReset>

08010232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010232:	b580      	push	{r7, lr}
 8010234:	b082      	sub	sp, #8
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	0018      	movs	r0, r3
 801023e:	f7ff ffab 	bl	8010198 <SysTick_Config>
 8010242:	0003      	movs	r3, r0
}
 8010244:	0018      	movs	r0, r3
 8010246:	46bd      	mov	sp, r7
 8010248:	b002      	add	sp, #8
 801024a:	bd80      	pop	{r7, pc}

0801024c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d101      	bne.n	801025e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801025a:	2301      	movs	r3, #1
 801025c:	e061      	b.n	8010322 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4a32      	ldr	r2, [pc, #200]	@ (801032c <HAL_DMA_Init+0xe0>)
 8010264:	4694      	mov	ip, r2
 8010266:	4463      	add	r3, ip
 8010268:	2114      	movs	r1, #20
 801026a:	0018      	movs	r0, r3
 801026c:	f7ef ff9a 	bl	80001a4 <__udivsi3>
 8010270:	0003      	movs	r3, r0
 8010272:	009a      	lsls	r2, r3, #2
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	4a2d      	ldr	r2, [pc, #180]	@ (8010330 <HAL_DMA_Init+0xe4>)
 801027c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2225      	movs	r2, #37	@ 0x25
 8010282:	2102      	movs	r1, #2
 8010284:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	4a28      	ldr	r2, [pc, #160]	@ (8010334 <HAL_DMA_Init+0xe8>)
 8010292:	4013      	ands	r3, r2
 8010294:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801029e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	691b      	ldr	r3, [r3, #16]
 80102a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80102aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80102b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6a1b      	ldr	r3, [r3, #32]
 80102bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80102be:	68fa      	ldr	r2, [r7, #12]
 80102c0:	4313      	orrs	r3, r2
 80102c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	68fa      	ldr	r2, [r7, #12]
 80102ca:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	689a      	ldr	r2, [r3, #8]
 80102d0:	2380      	movs	r3, #128	@ 0x80
 80102d2:	01db      	lsls	r3, r3, #7
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d018      	beq.n	801030a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80102d8:	4b17      	ldr	r3, [pc, #92]	@ (8010338 <HAL_DMA_Init+0xec>)
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102e0:	211c      	movs	r1, #28
 80102e2:	400b      	ands	r3, r1
 80102e4:	210f      	movs	r1, #15
 80102e6:	4099      	lsls	r1, r3
 80102e8:	000b      	movs	r3, r1
 80102ea:	43d9      	mvns	r1, r3
 80102ec:	4b12      	ldr	r3, [pc, #72]	@ (8010338 <HAL_DMA_Init+0xec>)
 80102ee:	400a      	ands	r2, r1
 80102f0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80102f2:	4b11      	ldr	r3, [pc, #68]	@ (8010338 <HAL_DMA_Init+0xec>)
 80102f4:	6819      	ldr	r1, [r3, #0]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102fe:	201c      	movs	r0, #28
 8010300:	4003      	ands	r3, r0
 8010302:	409a      	lsls	r2, r3
 8010304:	4b0c      	ldr	r3, [pc, #48]	@ (8010338 <HAL_DMA_Init+0xec>)
 8010306:	430a      	orrs	r2, r1
 8010308:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2225      	movs	r2, #37	@ 0x25
 8010314:	2101      	movs	r1, #1
 8010316:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2224      	movs	r2, #36	@ 0x24
 801031c:	2100      	movs	r1, #0
 801031e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010320:	2300      	movs	r3, #0
}
 8010322:	0018      	movs	r0, r3
 8010324:	46bd      	mov	sp, r7
 8010326:	b004      	add	sp, #16
 8010328:	bd80      	pop	{r7, pc}
 801032a:	46c0      	nop			@ (mov r8, r8)
 801032c:	bffdfff8 	.word	0xbffdfff8
 8010330:	40020000 	.word	0x40020000
 8010334:	ffff800f 	.word	0xffff800f
 8010338:	400200a8 	.word	0x400200a8

0801033c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
 8010348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801034a:	2317      	movs	r3, #23
 801034c:	18fb      	adds	r3, r7, r3
 801034e:	2200      	movs	r2, #0
 8010350:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2224      	movs	r2, #36	@ 0x24
 8010356:	5c9b      	ldrb	r3, [r3, r2]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d101      	bne.n	8010360 <HAL_DMA_Start_IT+0x24>
 801035c:	2302      	movs	r3, #2
 801035e:	e04f      	b.n	8010400 <HAL_DMA_Start_IT+0xc4>
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2224      	movs	r2, #36	@ 0x24
 8010364:	2101      	movs	r1, #1
 8010366:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2225      	movs	r2, #37	@ 0x25
 801036c:	5c9b      	ldrb	r3, [r3, r2]
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b01      	cmp	r3, #1
 8010372:	d13a      	bne.n	80103ea <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2225      	movs	r2, #37	@ 0x25
 8010378:	2102      	movs	r1, #2
 801037a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	2200      	movs	r2, #0
 8010380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2101      	movs	r1, #1
 801038e:	438a      	bics	r2, r1
 8010390:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	68b9      	ldr	r1, [r7, #8]
 8010398:	68f8      	ldr	r0, [r7, #12]
 801039a:	f000 f976 	bl	801068a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d008      	beq.n	80103b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	210e      	movs	r1, #14
 80103b2:	430a      	orrs	r2, r1
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	e00f      	b.n	80103d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2104      	movs	r1, #4
 80103c4:	438a      	bics	r2, r1
 80103c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	210a      	movs	r1, #10
 80103d4:	430a      	orrs	r2, r1
 80103d6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2101      	movs	r1, #1
 80103e4:	430a      	orrs	r2, r1
 80103e6:	601a      	str	r2, [r3, #0]
 80103e8:	e007      	b.n	80103fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2224      	movs	r2, #36	@ 0x24
 80103ee:	2100      	movs	r1, #0
 80103f0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80103f2:	2317      	movs	r3, #23
 80103f4:	18fb      	adds	r3, r7, r3
 80103f6:	2202      	movs	r2, #2
 80103f8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80103fa:	2317      	movs	r3, #23
 80103fc:	18fb      	adds	r3, r7, r3
 80103fe:	781b      	ldrb	r3, [r3, #0]
}
 8010400:	0018      	movs	r0, r3
 8010402:	46bd      	mov	sp, r7
 8010404:	b006      	add	sp, #24
 8010406:	bd80      	pop	{r7, pc}

08010408 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010410:	230f      	movs	r3, #15
 8010412:	18fb      	adds	r3, r7, r3
 8010414:	2200      	movs	r2, #0
 8010416:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2225      	movs	r2, #37	@ 0x25
 801041c:	5c9b      	ldrb	r3, [r3, r2]
 801041e:	b2db      	uxtb	r3, r3
 8010420:	2b02      	cmp	r3, #2
 8010422:	d008      	beq.n	8010436 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2204      	movs	r2, #4
 8010428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2224      	movs	r2, #36	@ 0x24
 801042e:	2100      	movs	r1, #0
 8010430:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8010432:	2301      	movs	r3, #1
 8010434:	e024      	b.n	8010480 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	210e      	movs	r1, #14
 8010442:	438a      	bics	r2, r1
 8010444:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	681a      	ldr	r2, [r3, #0]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2101      	movs	r1, #1
 8010452:	438a      	bics	r2, r1
 8010454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801045a:	221c      	movs	r2, #28
 801045c:	401a      	ands	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010462:	2101      	movs	r1, #1
 8010464:	4091      	lsls	r1, r2
 8010466:	000a      	movs	r2, r1
 8010468:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2225      	movs	r2, #37	@ 0x25
 801046e:	2101      	movs	r1, #1
 8010470:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2224      	movs	r2, #36	@ 0x24
 8010476:	2100      	movs	r1, #0
 8010478:	5499      	strb	r1, [r3, r2]

    return status;
 801047a:	230f      	movs	r3, #15
 801047c:	18fb      	adds	r3, r7, r3
 801047e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010480:	0018      	movs	r0, r3
 8010482:	46bd      	mov	sp, r7
 8010484:	b004      	add	sp, #16
 8010486:	bd80      	pop	{r7, pc}

08010488 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010490:	210f      	movs	r1, #15
 8010492:	187b      	adds	r3, r7, r1
 8010494:	2200      	movs	r2, #0
 8010496:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2225      	movs	r2, #37	@ 0x25
 801049c:	5c9b      	ldrb	r3, [r3, r2]
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	2b02      	cmp	r3, #2
 80104a2:	d006      	beq.n	80104b2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2204      	movs	r2, #4
 80104a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80104aa:	187b      	adds	r3, r7, r1
 80104ac:	2201      	movs	r2, #1
 80104ae:	701a      	strb	r2, [r3, #0]
 80104b0:	e02a      	b.n	8010508 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	210e      	movs	r1, #14
 80104be:	438a      	bics	r2, r1
 80104c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2101      	movs	r1, #1
 80104ce:	438a      	bics	r2, r1
 80104d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104d6:	221c      	movs	r2, #28
 80104d8:	401a      	ands	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104de:	2101      	movs	r1, #1
 80104e0:	4091      	lsls	r1, r2
 80104e2:	000a      	movs	r2, r1
 80104e4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2225      	movs	r2, #37	@ 0x25
 80104ea:	2101      	movs	r1, #1
 80104ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2224      	movs	r2, #36	@ 0x24
 80104f2:	2100      	movs	r1, #0
 80104f4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d004      	beq.n	8010508 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	0010      	movs	r0, r2
 8010506:	4798      	blx	r3
    }
  }
  return status;
 8010508:	230f      	movs	r3, #15
 801050a:	18fb      	adds	r3, r7, r3
 801050c:	781b      	ldrb	r3, [r3, #0]
}
 801050e:	0018      	movs	r0, r3
 8010510:	46bd      	mov	sp, r7
 8010512:	b004      	add	sp, #16
 8010514:	bd80      	pop	{r7, pc}

08010516 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b084      	sub	sp, #16
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010532:	221c      	movs	r2, #28
 8010534:	4013      	ands	r3, r2
 8010536:	2204      	movs	r2, #4
 8010538:	409a      	lsls	r2, r3
 801053a:	0013      	movs	r3, r2
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	4013      	ands	r3, r2
 8010540:	d026      	beq.n	8010590 <HAL_DMA_IRQHandler+0x7a>
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	2204      	movs	r2, #4
 8010546:	4013      	ands	r3, r2
 8010548:	d022      	beq.n	8010590 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2220      	movs	r2, #32
 8010552:	4013      	ands	r3, r2
 8010554:	d107      	bne.n	8010566 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2104      	movs	r1, #4
 8010562:	438a      	bics	r2, r1
 8010564:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801056a:	221c      	movs	r2, #28
 801056c:	401a      	ands	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010572:	2104      	movs	r1, #4
 8010574:	4091      	lsls	r1, r2
 8010576:	000a      	movs	r2, r1
 8010578:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801057e:	2b00      	cmp	r3, #0
 8010580:	d100      	bne.n	8010584 <HAL_DMA_IRQHandler+0x6e>
 8010582:	e071      	b.n	8010668 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	0010      	movs	r0, r2
 801058c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801058e:	e06b      	b.n	8010668 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010594:	221c      	movs	r2, #28
 8010596:	4013      	ands	r3, r2
 8010598:	2202      	movs	r2, #2
 801059a:	409a      	lsls	r2, r3
 801059c:	0013      	movs	r3, r2
 801059e:	68fa      	ldr	r2, [r7, #12]
 80105a0:	4013      	ands	r3, r2
 80105a2:	d02d      	beq.n	8010600 <HAL_DMA_IRQHandler+0xea>
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	2202      	movs	r2, #2
 80105a8:	4013      	ands	r3, r2
 80105aa:	d029      	beq.n	8010600 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2220      	movs	r2, #32
 80105b4:	4013      	ands	r3, r2
 80105b6:	d10b      	bne.n	80105d0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	210a      	movs	r1, #10
 80105c4:	438a      	bics	r2, r1
 80105c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2225      	movs	r2, #37	@ 0x25
 80105cc:	2101      	movs	r1, #1
 80105ce:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105d4:	221c      	movs	r2, #28
 80105d6:	401a      	ands	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105dc:	2102      	movs	r1, #2
 80105de:	4091      	lsls	r1, r2
 80105e0:	000a      	movs	r2, r1
 80105e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2224      	movs	r2, #36	@ 0x24
 80105e8:	2100      	movs	r1, #0
 80105ea:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d039      	beq.n	8010668 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	0010      	movs	r0, r2
 80105fc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80105fe:	e033      	b.n	8010668 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010604:	221c      	movs	r2, #28
 8010606:	4013      	ands	r3, r2
 8010608:	2208      	movs	r2, #8
 801060a:	409a      	lsls	r2, r3
 801060c:	0013      	movs	r3, r2
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	4013      	ands	r3, r2
 8010612:	d02a      	beq.n	801066a <HAL_DMA_IRQHandler+0x154>
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	2208      	movs	r2, #8
 8010618:	4013      	ands	r3, r2
 801061a:	d026      	beq.n	801066a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	210e      	movs	r1, #14
 8010628:	438a      	bics	r2, r1
 801062a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010630:	221c      	movs	r2, #28
 8010632:	401a      	ands	r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010638:	2101      	movs	r1, #1
 801063a:	4091      	lsls	r1, r2
 801063c:	000a      	movs	r2, r1
 801063e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2201      	movs	r2, #1
 8010644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2225      	movs	r2, #37	@ 0x25
 801064a:	2101      	movs	r1, #1
 801064c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2224      	movs	r2, #36	@ 0x24
 8010652:	2100      	movs	r1, #0
 8010654:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801065a:	2b00      	cmp	r3, #0
 801065c:	d005      	beq.n	801066a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	0010      	movs	r0, r2
 8010666:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8010668:	46c0      	nop			@ (mov r8, r8)
 801066a:	46c0      	nop			@ (mov r8, r8)
}
 801066c:	46bd      	mov	sp, r7
 801066e:	b004      	add	sp, #16
 8010670:	bd80      	pop	{r7, pc}

08010672 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b082      	sub	sp, #8
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2225      	movs	r2, #37	@ 0x25
 801067e:	5c9b      	ldrb	r3, [r3, r2]
 8010680:	b2db      	uxtb	r3, r3
}
 8010682:	0018      	movs	r0, r3
 8010684:	46bd      	mov	sp, r7
 8010686:	b002      	add	sp, #8
 8010688:	bd80      	pop	{r7, pc}

0801068a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801068a:	b580      	push	{r7, lr}
 801068c:	b084      	sub	sp, #16
 801068e:	af00      	add	r7, sp, #0
 8010690:	60f8      	str	r0, [r7, #12]
 8010692:	60b9      	str	r1, [r7, #8]
 8010694:	607a      	str	r2, [r7, #4]
 8010696:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801069c:	221c      	movs	r2, #28
 801069e:	401a      	ands	r2, r3
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106a4:	2101      	movs	r1, #1
 80106a6:	4091      	lsls	r1, r2
 80106a8:	000a      	movs	r2, r1
 80106aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	683a      	ldr	r2, [r7, #0]
 80106b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	2b10      	cmp	r3, #16
 80106ba:	d108      	bne.n	80106ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80106cc:	e007      	b.n	80106de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	68ba      	ldr	r2, [r7, #8]
 80106d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	60da      	str	r2, [r3, #12]
}
 80106de:	46c0      	nop			@ (mov r8, r8)
 80106e0:	46bd      	mov	sp, r7
 80106e2:	b004      	add	sp, #16
 80106e4:	bd80      	pop	{r7, pc}
	...

080106e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80106f0:	f7ff f8d2 	bl	800f898 <HAL_GetTick>
 80106f4:	0003      	movs	r3, r0
 80106f6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80106f8:	e00f      	b.n	801071a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	3301      	adds	r3, #1
 80106fe:	d00c      	beq.n	801071a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d007      	beq.n	8010716 <FLASH_WaitForLastOperation+0x2e>
 8010706:	f7ff f8c7 	bl	800f898 <HAL_GetTick>
 801070a:	0002      	movs	r2, r0
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	1ad3      	subs	r3, r2, r3
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	429a      	cmp	r2, r3
 8010714:	d201      	bcs.n	801071a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8010716:	2303      	movs	r3, #3
 8010718:	e052      	b.n	80107c0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801071a:	4b2b      	ldr	r3, [pc, #172]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 801071c:	699b      	ldr	r3, [r3, #24]
 801071e:	2201      	movs	r2, #1
 8010720:	4013      	ands	r3, r2
 8010722:	2b01      	cmp	r3, #1
 8010724:	d0e9      	beq.n	80106fa <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010726:	4b28      	ldr	r3, [pc, #160]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 8010728:	699b      	ldr	r3, [r3, #24]
 801072a:	2202      	movs	r2, #2
 801072c:	4013      	ands	r3, r2
 801072e:	2b02      	cmp	r3, #2
 8010730:	d102      	bne.n	8010738 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010732:	4b25      	ldr	r3, [pc, #148]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 8010734:	2202      	movs	r2, #2
 8010736:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8010738:	4b23      	ldr	r3, [pc, #140]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 801073a:	699a      	ldr	r2, [r3, #24]
 801073c:	2380      	movs	r3, #128	@ 0x80
 801073e:	005b      	lsls	r3, r3, #1
 8010740:	401a      	ands	r2, r3
 8010742:	2380      	movs	r3, #128	@ 0x80
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	429a      	cmp	r2, r3
 8010748:	d035      	beq.n	80107b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801074a:	4b1f      	ldr	r3, [pc, #124]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 801074c:	699a      	ldr	r2, [r3, #24]
 801074e:	2380      	movs	r3, #128	@ 0x80
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8010754:	2380      	movs	r3, #128	@ 0x80
 8010756:	009b      	lsls	r3, r3, #2
 8010758:	429a      	cmp	r2, r3
 801075a:	d02c      	beq.n	80107b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 801075c:	4b1a      	ldr	r3, [pc, #104]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 801075e:	699a      	ldr	r2, [r3, #24]
 8010760:	2380      	movs	r3, #128	@ 0x80
 8010762:	00db      	lsls	r3, r3, #3
 8010764:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8010766:	2380      	movs	r3, #128	@ 0x80
 8010768:	00db      	lsls	r3, r3, #3
 801076a:	429a      	cmp	r2, r3
 801076c:	d023      	beq.n	80107b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801076e:	4b16      	ldr	r3, [pc, #88]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 8010770:	699a      	ldr	r2, [r3, #24]
 8010772:	2380      	movs	r3, #128	@ 0x80
 8010774:	011b      	lsls	r3, r3, #4
 8010776:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8010778:	2380      	movs	r3, #128	@ 0x80
 801077a:	011b      	lsls	r3, r3, #4
 801077c:	429a      	cmp	r2, r3
 801077e:	d01a      	beq.n	80107b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8010780:	4b11      	ldr	r3, [pc, #68]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 8010782:	699a      	ldr	r2, [r3, #24]
 8010784:	2380      	movs	r3, #128	@ 0x80
 8010786:	019b      	lsls	r3, r3, #6
 8010788:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801078a:	2380      	movs	r3, #128	@ 0x80
 801078c:	019b      	lsls	r3, r3, #6
 801078e:	429a      	cmp	r2, r3
 8010790:	d011      	beq.n	80107b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8010792:	4b0d      	ldr	r3, [pc, #52]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 8010794:	699a      	ldr	r2, [r3, #24]
 8010796:	2380      	movs	r3, #128	@ 0x80
 8010798:	029b      	lsls	r3, r3, #10
 801079a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 801079c:	2380      	movs	r3, #128	@ 0x80
 801079e:	029b      	lsls	r3, r3, #10
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d008      	beq.n	80107b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80107a4:	4b08      	ldr	r3, [pc, #32]	@ (80107c8 <FLASH_WaitForLastOperation+0xe0>)
 80107a6:	699a      	ldr	r2, [r3, #24]
 80107a8:	2380      	movs	r3, #128	@ 0x80
 80107aa:	025b      	lsls	r3, r3, #9
 80107ac:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80107ae:	2380      	movs	r3, #128	@ 0x80
 80107b0:	025b      	lsls	r3, r3, #9
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d103      	bne.n	80107be <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80107b6:	f000 f809 	bl	80107cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80107ba:	2301      	movs	r3, #1
 80107bc:	e000      	b.n	80107c0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80107be:	2300      	movs	r3, #0
}
 80107c0:	0018      	movs	r0, r3
 80107c2:	46bd      	mov	sp, r7
 80107c4:	b004      	add	sp, #16
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	40022000 	.word	0x40022000

080107cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80107d2:	2300      	movs	r3, #0
 80107d4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80107d6:	4b49      	ldr	r3, [pc, #292]	@ (80108fc <FLASH_SetErrorCode+0x130>)
 80107d8:	699a      	ldr	r2, [r3, #24]
 80107da:	2380      	movs	r3, #128	@ 0x80
 80107dc:	005b      	lsls	r3, r3, #1
 80107de:	401a      	ands	r2, r3
 80107e0:	2380      	movs	r3, #128	@ 0x80
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d10a      	bne.n	80107fe <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80107e8:	4b45      	ldr	r3, [pc, #276]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 80107ea:	695b      	ldr	r3, [r3, #20]
 80107ec:	2202      	movs	r2, #2
 80107ee:	431a      	orrs	r2, r3
 80107f0:	4b43      	ldr	r3, [pc, #268]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 80107f2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2280      	movs	r2, #128	@ 0x80
 80107f8:	0052      	lsls	r2, r2, #1
 80107fa:	4313      	orrs	r3, r2
 80107fc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80107fe:	4b3f      	ldr	r3, [pc, #252]	@ (80108fc <FLASH_SetErrorCode+0x130>)
 8010800:	699a      	ldr	r2, [r3, #24]
 8010802:	2380      	movs	r3, #128	@ 0x80
 8010804:	009b      	lsls	r3, r3, #2
 8010806:	401a      	ands	r2, r3
 8010808:	2380      	movs	r3, #128	@ 0x80
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	429a      	cmp	r2, r3
 801080e:	d10a      	bne.n	8010826 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010810:	4b3b      	ldr	r3, [pc, #236]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 8010812:	695b      	ldr	r3, [r3, #20]
 8010814:	2201      	movs	r2, #1
 8010816:	431a      	orrs	r2, r3
 8010818:	4b39      	ldr	r3, [pc, #228]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 801081a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2280      	movs	r2, #128	@ 0x80
 8010820:	0092      	lsls	r2, r2, #2
 8010822:	4313      	orrs	r3, r2
 8010824:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8010826:	4b35      	ldr	r3, [pc, #212]	@ (80108fc <FLASH_SetErrorCode+0x130>)
 8010828:	699a      	ldr	r2, [r3, #24]
 801082a:	2380      	movs	r3, #128	@ 0x80
 801082c:	00db      	lsls	r3, r3, #3
 801082e:	401a      	ands	r2, r3
 8010830:	2380      	movs	r3, #128	@ 0x80
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	429a      	cmp	r2, r3
 8010836:	d10a      	bne.n	801084e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8010838:	4b31      	ldr	r3, [pc, #196]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 801083a:	695b      	ldr	r3, [r3, #20]
 801083c:	2208      	movs	r2, #8
 801083e:	431a      	orrs	r2, r3
 8010840:	4b2f      	ldr	r3, [pc, #188]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 8010842:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2280      	movs	r2, #128	@ 0x80
 8010848:	00d2      	lsls	r2, r2, #3
 801084a:	4313      	orrs	r3, r2
 801084c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 801084e:	4b2b      	ldr	r3, [pc, #172]	@ (80108fc <FLASH_SetErrorCode+0x130>)
 8010850:	699a      	ldr	r2, [r3, #24]
 8010852:	2380      	movs	r3, #128	@ 0x80
 8010854:	011b      	lsls	r3, r3, #4
 8010856:	401a      	ands	r2, r3
 8010858:	2380      	movs	r3, #128	@ 0x80
 801085a:	011b      	lsls	r3, r3, #4
 801085c:	429a      	cmp	r2, r3
 801085e:	d10a      	bne.n	8010876 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8010860:	4b27      	ldr	r3, [pc, #156]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 8010862:	695b      	ldr	r3, [r3, #20]
 8010864:	2204      	movs	r2, #4
 8010866:	431a      	orrs	r2, r3
 8010868:	4b25      	ldr	r3, [pc, #148]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 801086a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2280      	movs	r2, #128	@ 0x80
 8010870:	0112      	lsls	r2, r2, #4
 8010872:	4313      	orrs	r3, r2
 8010874:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8010876:	4b21      	ldr	r3, [pc, #132]	@ (80108fc <FLASH_SetErrorCode+0x130>)
 8010878:	699a      	ldr	r2, [r3, #24]
 801087a:	2380      	movs	r3, #128	@ 0x80
 801087c:	019b      	lsls	r3, r3, #6
 801087e:	401a      	ands	r2, r3
 8010880:	2380      	movs	r3, #128	@ 0x80
 8010882:	019b      	lsls	r3, r3, #6
 8010884:	429a      	cmp	r2, r3
 8010886:	d10a      	bne.n	801089e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8010888:	4b1d      	ldr	r3, [pc, #116]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 801088a:	695b      	ldr	r3, [r3, #20]
 801088c:	2210      	movs	r2, #16
 801088e:	431a      	orrs	r2, r3
 8010890:	4b1b      	ldr	r3, [pc, #108]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 8010892:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2280      	movs	r2, #128	@ 0x80
 8010898:	0192      	lsls	r2, r2, #6
 801089a:	4313      	orrs	r3, r2
 801089c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 801089e:	4b17      	ldr	r3, [pc, #92]	@ (80108fc <FLASH_SetErrorCode+0x130>)
 80108a0:	699a      	ldr	r2, [r3, #24]
 80108a2:	2380      	movs	r3, #128	@ 0x80
 80108a4:	029b      	lsls	r3, r3, #10
 80108a6:	401a      	ands	r2, r3
 80108a8:	2380      	movs	r3, #128	@ 0x80
 80108aa:	029b      	lsls	r3, r3, #10
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d109      	bne.n	80108c4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80108b0:	4b13      	ldr	r3, [pc, #76]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 80108b2:	695b      	ldr	r3, [r3, #20]
 80108b4:	2220      	movs	r2, #32
 80108b6:	431a      	orrs	r2, r3
 80108b8:	4b11      	ldr	r3, [pc, #68]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 80108ba:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2220      	movs	r2, #32
 80108c0:	4313      	orrs	r3, r2
 80108c2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80108c4:	4b0d      	ldr	r3, [pc, #52]	@ (80108fc <FLASH_SetErrorCode+0x130>)
 80108c6:	699a      	ldr	r2, [r3, #24]
 80108c8:	2380      	movs	r3, #128	@ 0x80
 80108ca:	025b      	lsls	r3, r3, #9
 80108cc:	401a      	ands	r2, r3
 80108ce:	2380      	movs	r3, #128	@ 0x80
 80108d0:	025b      	lsls	r3, r3, #9
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d10a      	bne.n	80108ec <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80108d6:	4b0a      	ldr	r3, [pc, #40]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 80108d8:	695b      	ldr	r3, [r3, #20]
 80108da:	2240      	movs	r2, #64	@ 0x40
 80108dc:	431a      	orrs	r2, r3
 80108de:	4b08      	ldr	r3, [pc, #32]	@ (8010900 <FLASH_SetErrorCode+0x134>)
 80108e0:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2280      	movs	r2, #128	@ 0x80
 80108e6:	0252      	lsls	r2, r2, #9
 80108e8:	4313      	orrs	r3, r2
 80108ea:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80108ec:	4b03      	ldr	r3, [pc, #12]	@ (80108fc <FLASH_SetErrorCode+0x130>)
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	619a      	str	r2, [r3, #24]
}  
 80108f2:	46c0      	nop			@ (mov r8, r8)
 80108f4:	46bd      	mov	sp, r7
 80108f6:	b002      	add	sp, #8
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	46c0      	nop			@ (mov r8, r8)
 80108fc:	40022000 	.word	0x40022000
 8010900:	200020fc 	.word	0x200020fc

08010904 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801090a:	4b12      	ldr	r3, [pc, #72]	@ (8010954 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	2201      	movs	r2, #1
 8010910:	4013      	ands	r3, r2
 8010912:	d019      	beq.n	8010948 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010914:	f3ef 8310 	mrs	r3, PRIMASK
 8010918:	607b      	str	r3, [r7, #4]
  return(result);
 801091a:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 801091c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801091e:	b672      	cpsid	i
}
 8010920:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8010922:	4b0c      	ldr	r3, [pc, #48]	@ (8010954 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8010924:	4a0c      	ldr	r2, [pc, #48]	@ (8010958 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8010926:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8010928:	4b0a      	ldr	r3, [pc, #40]	@ (8010954 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801092a:	4a0c      	ldr	r2, [pc, #48]	@ (801095c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 801092c:	60da      	str	r2, [r3, #12]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	f383 8810 	msr	PRIMASK, r3
}
 8010938:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801093a:	4b06      	ldr	r3, [pc, #24]	@ (8010954 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	2201      	movs	r2, #1
 8010940:	4013      	ands	r3, r2
 8010942:	d001      	beq.n	8010948 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8010944:	2301      	movs	r3, #1
 8010946:	e000      	b.n	801094a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8010948:	2300      	movs	r3, #0
}
 801094a:	0018      	movs	r0, r3
 801094c:	46bd      	mov	sp, r7
 801094e:	b004      	add	sp, #16
 8010950:	bd80      	pop	{r7, pc}
 8010952:	46c0      	nop			@ (mov r8, r8)
 8010954:	40022000 	.word	0x40022000
 8010958:	89abcdef 	.word	0x89abcdef
 801095c:	02030405 	.word	0x02030405

08010960 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8010964:	4b04      	ldr	r3, [pc, #16]	@ (8010978 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8010966:	685a      	ldr	r2, [r3, #4]
 8010968:	4b03      	ldr	r3, [pc, #12]	@ (8010978 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801096a:	2101      	movs	r1, #1
 801096c:	430a      	orrs	r2, r1
 801096e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8010970:	2300      	movs	r3, #0
}
 8010972:	0018      	movs	r0, r3
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	40022000 	.word	0x40022000

0801097c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 801097c:	b5b0      	push	{r4, r5, r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010984:	250f      	movs	r5, #15
 8010986:	197b      	adds	r3, r7, r5
 8010988:	2200      	movs	r2, #0
 801098a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801098c:	197c      	adds	r4, r7, r5
 801098e:	4b0f      	ldr	r3, [pc, #60]	@ (80109cc <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010990:	0018      	movs	r0, r3
 8010992:	f7ff fea9 	bl	80106e8 <FLASH_WaitForLastOperation>
 8010996:	0003      	movs	r3, r0
 8010998:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801099a:	0029      	movs	r1, r5
 801099c:	187b      	adds	r3, r7, r1
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d10c      	bne.n	80109be <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80109a4:	4b0a      	ldr	r3, [pc, #40]	@ (80109d0 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80109b0:	187c      	adds	r4, r7, r1
 80109b2:	4b06      	ldr	r3, [pc, #24]	@ (80109cc <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80109b4:	0018      	movs	r0, r3
 80109b6:	f7ff fe97 	bl	80106e8 <FLASH_WaitForLastOperation>
 80109ba:	0003      	movs	r3, r0
 80109bc:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80109be:	230f      	movs	r3, #15
 80109c0:	18fb      	adds	r3, r7, r3
 80109c2:	781b      	ldrb	r3, [r3, #0]
}  
 80109c4:	0018      	movs	r0, r3
 80109c6:	46bd      	mov	sp, r7
 80109c8:	b004      	add	sp, #16
 80109ca:	bdb0      	pop	{r4, r5, r7, pc}
 80109cc:	0000c350 	.word	0x0000c350
 80109d0:	200020fc 	.word	0x200020fc

080109d4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80109d4:	b5b0      	push	{r4, r5, r7, lr}
 80109d6:	b086      	sub	sp, #24
 80109d8:	af00      	add	r7, sp, #0
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	60b9      	str	r1, [r7, #8]
 80109de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80109e0:	2317      	movs	r3, #23
 80109e2:	18fb      	adds	r3, r7, r3
 80109e4:	2201      	movs	r2, #1
 80109e6:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80109e8:	4b24      	ldr	r3, [pc, #144]	@ (8010a7c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80109ea:	7c1b      	ldrb	r3, [r3, #16]
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d101      	bne.n	80109f4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80109f0:	2302      	movs	r3, #2
 80109f2:	e03e      	b.n	8010a72 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80109f4:	4b21      	ldr	r3, [pc, #132]	@ (8010a7c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80109f6:	2201      	movs	r2, #1
 80109f8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80109fa:	2517      	movs	r5, #23
 80109fc:	197c      	adds	r4, r7, r5
 80109fe:	4b20      	ldr	r3, [pc, #128]	@ (8010a80 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8010a00:	0018      	movs	r0, r3
 8010a02:	f7ff fe71 	bl	80106e8 <FLASH_WaitForLastOperation>
 8010a06:	0003      	movs	r3, r0
 8010a08:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8010a0a:	197b      	adds	r3, r7, r5
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d129      	bne.n	8010a66 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010a12:	4b1a      	ldr	r3, [pc, #104]	@ (8010a7c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010a14:	2200      	movs	r2, #0
 8010a16:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d103      	bne.n	8010a26 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	601a      	str	r2, [r3, #0]
 8010a24:	e013      	b.n	8010a4e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d104      	bne.n	8010a36 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	b292      	uxth	r2, r2
 8010a32:	801a      	strh	r2, [r3, #0]
 8010a34:	e00b      	b.n	8010a4e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d104      	bne.n	8010a46 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	b2d2      	uxtb	r2, r2
 8010a42:	701a      	strb	r2, [r3, #0]
 8010a44:	e003      	b.n	8010a4e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8010a46:	2317      	movs	r3, #23
 8010a48:	18fb      	adds	r3, r7, r3
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8010a4e:	2217      	movs	r2, #23
 8010a50:	18bb      	adds	r3, r7, r2
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d106      	bne.n	8010a66 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010a58:	18bc      	adds	r4, r7, r2
 8010a5a:	4b09      	ldr	r3, [pc, #36]	@ (8010a80 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8010a5c:	0018      	movs	r0, r3
 8010a5e:	f7ff fe43 	bl	80106e8 <FLASH_WaitForLastOperation>
 8010a62:	0003      	movs	r3, r0
 8010a64:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010a66:	4b05      	ldr	r3, [pc, #20]	@ (8010a7c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010a68:	2200      	movs	r2, #0
 8010a6a:	741a      	strb	r2, [r3, #16]

  return status;
 8010a6c:	2317      	movs	r3, #23
 8010a6e:	18fb      	adds	r3, r7, r3
 8010a70:	781b      	ldrb	r3, [r3, #0]
}
 8010a72:	0018      	movs	r0, r3
 8010a74:	46bd      	mov	sp, r7
 8010a76:	b006      	add	sp, #24
 8010a78:	bdb0      	pop	{r4, r5, r7, pc}
 8010a7a:	46c0      	nop			@ (mov r8, r8)
 8010a7c:	200020fc 	.word	0x200020fc
 8010a80:	0000c350 	.word	0x0000c350

08010a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b086      	sub	sp, #24
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010a92:	2300      	movs	r3, #0
 8010a94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8010a96:	2300      	movs	r3, #0
 8010a98:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8010a9a:	e155      	b.n	8010d48 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2101      	movs	r1, #1
 8010aa2:	697a      	ldr	r2, [r7, #20]
 8010aa4:	4091      	lsls	r1, r2
 8010aa6:	000a      	movs	r2, r1
 8010aa8:	4013      	ands	r3, r2
 8010aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d100      	bne.n	8010ab4 <HAL_GPIO_Init+0x30>
 8010ab2:	e146      	b.n	8010d42 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	2203      	movs	r2, #3
 8010aba:	4013      	ands	r3, r2
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	d005      	beq.n	8010acc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	2203      	movs	r2, #3
 8010ac6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010ac8:	2b02      	cmp	r3, #2
 8010aca:	d130      	bne.n	8010b2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	689b      	ldr	r3, [r3, #8]
 8010ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	2203      	movs	r2, #3
 8010ad8:	409a      	lsls	r2, r3
 8010ada:	0013      	movs	r3, r2
 8010adc:	43da      	mvns	r2, r3
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	4013      	ands	r3, r2
 8010ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	68da      	ldr	r2, [r3, #12]
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	005b      	lsls	r3, r3, #1
 8010aec:	409a      	lsls	r2, r3
 8010aee:	0013      	movs	r3, r2
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	4313      	orrs	r3, r2
 8010af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	693a      	ldr	r2, [r7, #16]
 8010afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010b02:	2201      	movs	r2, #1
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	409a      	lsls	r2, r3
 8010b08:	0013      	movs	r3, r2
 8010b0a:	43da      	mvns	r2, r3
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	4013      	ands	r3, r2
 8010b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	091b      	lsrs	r3, r3, #4
 8010b18:	2201      	movs	r2, #1
 8010b1a:	401a      	ands	r2, r3
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	409a      	lsls	r2, r3
 8010b20:	0013      	movs	r3, r2
 8010b22:	693a      	ldr	r2, [r7, #16]
 8010b24:	4313      	orrs	r3, r2
 8010b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	693a      	ldr	r2, [r7, #16]
 8010b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	2203      	movs	r2, #3
 8010b34:	4013      	ands	r3, r2
 8010b36:	2b03      	cmp	r3, #3
 8010b38:	d017      	beq.n	8010b6a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	68db      	ldr	r3, [r3, #12]
 8010b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	005b      	lsls	r3, r3, #1
 8010b44:	2203      	movs	r2, #3
 8010b46:	409a      	lsls	r2, r3
 8010b48:	0013      	movs	r3, r2
 8010b4a:	43da      	mvns	r2, r3
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	4013      	ands	r3, r2
 8010b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	689a      	ldr	r2, [r3, #8]
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	005b      	lsls	r3, r3, #1
 8010b5a:	409a      	lsls	r2, r3
 8010b5c:	0013      	movs	r3, r2
 8010b5e:	693a      	ldr	r2, [r7, #16]
 8010b60:	4313      	orrs	r3, r2
 8010b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	693a      	ldr	r2, [r7, #16]
 8010b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	2203      	movs	r2, #3
 8010b70:	4013      	ands	r3, r2
 8010b72:	2b02      	cmp	r3, #2
 8010b74:	d123      	bne.n	8010bbe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	08da      	lsrs	r2, r3, #3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	3208      	adds	r2, #8
 8010b7e:	0092      	lsls	r2, r2, #2
 8010b80:	58d3      	ldr	r3, [r2, r3]
 8010b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	2207      	movs	r2, #7
 8010b88:	4013      	ands	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	220f      	movs	r2, #15
 8010b8e:	409a      	lsls	r2, r3
 8010b90:	0013      	movs	r3, r2
 8010b92:	43da      	mvns	r2, r3
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	4013      	ands	r3, r2
 8010b98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	691a      	ldr	r2, [r3, #16]
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2107      	movs	r1, #7
 8010ba2:	400b      	ands	r3, r1
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	409a      	lsls	r2, r3
 8010ba8:	0013      	movs	r3, r2
 8010baa:	693a      	ldr	r2, [r7, #16]
 8010bac:	4313      	orrs	r3, r2
 8010bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	08da      	lsrs	r2, r3, #3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	3208      	adds	r2, #8
 8010bb8:	0092      	lsls	r2, r2, #2
 8010bba:	6939      	ldr	r1, [r7, #16]
 8010bbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	005b      	lsls	r3, r3, #1
 8010bc8:	2203      	movs	r2, #3
 8010bca:	409a      	lsls	r2, r3
 8010bcc:	0013      	movs	r3, r2
 8010bce:	43da      	mvns	r2, r3
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	4013      	ands	r3, r2
 8010bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	2203      	movs	r2, #3
 8010bdc:	401a      	ands	r2, r3
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	005b      	lsls	r3, r3, #1
 8010be2:	409a      	lsls	r2, r3
 8010be4:	0013      	movs	r3, r2
 8010be6:	693a      	ldr	r2, [r7, #16]
 8010be8:	4313      	orrs	r3, r2
 8010bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	693a      	ldr	r2, [r7, #16]
 8010bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	685a      	ldr	r2, [r3, #4]
 8010bf6:	23c0      	movs	r3, #192	@ 0xc0
 8010bf8:	029b      	lsls	r3, r3, #10
 8010bfa:	4013      	ands	r3, r2
 8010bfc:	d100      	bne.n	8010c00 <HAL_GPIO_Init+0x17c>
 8010bfe:	e0a0      	b.n	8010d42 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c00:	4b57      	ldr	r3, [pc, #348]	@ (8010d60 <HAL_GPIO_Init+0x2dc>)
 8010c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c04:	4b56      	ldr	r3, [pc, #344]	@ (8010d60 <HAL_GPIO_Init+0x2dc>)
 8010c06:	2101      	movs	r1, #1
 8010c08:	430a      	orrs	r2, r1
 8010c0a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8010c0c:	4a55      	ldr	r2, [pc, #340]	@ (8010d64 <HAL_GPIO_Init+0x2e0>)
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	089b      	lsrs	r3, r3, #2
 8010c12:	3302      	adds	r3, #2
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	589b      	ldr	r3, [r3, r2]
 8010c18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2203      	movs	r2, #3
 8010c1e:	4013      	ands	r3, r2
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	220f      	movs	r2, #15
 8010c24:	409a      	lsls	r2, r3
 8010c26:	0013      	movs	r3, r2
 8010c28:	43da      	mvns	r2, r3
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	4013      	ands	r3, r2
 8010c2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	23a0      	movs	r3, #160	@ 0xa0
 8010c34:	05db      	lsls	r3, r3, #23
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d01f      	beq.n	8010c7a <HAL_GPIO_Init+0x1f6>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8010d68 <HAL_GPIO_Init+0x2e4>)
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d019      	beq.n	8010c76 <HAL_GPIO_Init+0x1f2>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4a49      	ldr	r2, [pc, #292]	@ (8010d6c <HAL_GPIO_Init+0x2e8>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d013      	beq.n	8010c72 <HAL_GPIO_Init+0x1ee>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4a48      	ldr	r2, [pc, #288]	@ (8010d70 <HAL_GPIO_Init+0x2ec>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d00d      	beq.n	8010c6e <HAL_GPIO_Init+0x1ea>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4a47      	ldr	r2, [pc, #284]	@ (8010d74 <HAL_GPIO_Init+0x2f0>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d007      	beq.n	8010c6a <HAL_GPIO_Init+0x1e6>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4a46      	ldr	r2, [pc, #280]	@ (8010d78 <HAL_GPIO_Init+0x2f4>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d101      	bne.n	8010c66 <HAL_GPIO_Init+0x1e2>
 8010c62:	2305      	movs	r3, #5
 8010c64:	e00a      	b.n	8010c7c <HAL_GPIO_Init+0x1f8>
 8010c66:	2306      	movs	r3, #6
 8010c68:	e008      	b.n	8010c7c <HAL_GPIO_Init+0x1f8>
 8010c6a:	2304      	movs	r3, #4
 8010c6c:	e006      	b.n	8010c7c <HAL_GPIO_Init+0x1f8>
 8010c6e:	2303      	movs	r3, #3
 8010c70:	e004      	b.n	8010c7c <HAL_GPIO_Init+0x1f8>
 8010c72:	2302      	movs	r3, #2
 8010c74:	e002      	b.n	8010c7c <HAL_GPIO_Init+0x1f8>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e000      	b.n	8010c7c <HAL_GPIO_Init+0x1f8>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	697a      	ldr	r2, [r7, #20]
 8010c7e:	2103      	movs	r1, #3
 8010c80:	400a      	ands	r2, r1
 8010c82:	0092      	lsls	r2, r2, #2
 8010c84:	4093      	lsls	r3, r2
 8010c86:	693a      	ldr	r2, [r7, #16]
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010c8c:	4935      	ldr	r1, [pc, #212]	@ (8010d64 <HAL_GPIO_Init+0x2e0>)
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	089b      	lsrs	r3, r3, #2
 8010c92:	3302      	adds	r3, #2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	693a      	ldr	r2, [r7, #16]
 8010c98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010c9a:	4b38      	ldr	r3, [pc, #224]	@ (8010d7c <HAL_GPIO_Init+0x2f8>)
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	43da      	mvns	r2, r3
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	4013      	ands	r3, r2
 8010ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	685a      	ldr	r2, [r3, #4]
 8010cae:	2380      	movs	r3, #128	@ 0x80
 8010cb0:	035b      	lsls	r3, r3, #13
 8010cb2:	4013      	ands	r3, r2
 8010cb4:	d003      	beq.n	8010cbe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8010cb6:	693a      	ldr	r2, [r7, #16]
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	4313      	orrs	r3, r2
 8010cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8010cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8010d7c <HAL_GPIO_Init+0x2f8>)
 8010cc0:	693a      	ldr	r2, [r7, #16]
 8010cc2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8010d7c <HAL_GPIO_Init+0x2f8>)
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	43da      	mvns	r2, r3
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	4013      	ands	r3, r2
 8010cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	685a      	ldr	r2, [r3, #4]
 8010cd8:	2380      	movs	r3, #128	@ 0x80
 8010cda:	039b      	lsls	r3, r3, #14
 8010cdc:	4013      	ands	r3, r2
 8010cde:	d003      	beq.n	8010ce8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8010ce0:	693a      	ldr	r2, [r7, #16]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010ce8:	4b24      	ldr	r3, [pc, #144]	@ (8010d7c <HAL_GPIO_Init+0x2f8>)
 8010cea:	693a      	ldr	r2, [r7, #16]
 8010cec:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8010cee:	4b23      	ldr	r3, [pc, #140]	@ (8010d7c <HAL_GPIO_Init+0x2f8>)
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	43da      	mvns	r2, r3
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	4013      	ands	r3, r2
 8010cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	685a      	ldr	r2, [r3, #4]
 8010d02:	2380      	movs	r3, #128	@ 0x80
 8010d04:	029b      	lsls	r3, r3, #10
 8010d06:	4013      	ands	r3, r2
 8010d08:	d003      	beq.n	8010d12 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8010d0a:	693a      	ldr	r2, [r7, #16]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8010d12:	4b1a      	ldr	r3, [pc, #104]	@ (8010d7c <HAL_GPIO_Init+0x2f8>)
 8010d14:	693a      	ldr	r2, [r7, #16]
 8010d16:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010d18:	4b18      	ldr	r3, [pc, #96]	@ (8010d7c <HAL_GPIO_Init+0x2f8>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	43da      	mvns	r2, r3
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	4013      	ands	r3, r2
 8010d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	685a      	ldr	r2, [r3, #4]
 8010d2c:	2380      	movs	r3, #128	@ 0x80
 8010d2e:	025b      	lsls	r3, r3, #9
 8010d30:	4013      	ands	r3, r2
 8010d32:	d003      	beq.n	8010d3c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8010d34:	693a      	ldr	r2, [r7, #16]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	4313      	orrs	r3, r2
 8010d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8010d7c <HAL_GPIO_Init+0x2f8>)
 8010d3e:	693a      	ldr	r2, [r7, #16]
 8010d40:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	3301      	adds	r3, #1
 8010d46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	681a      	ldr	r2, [r3, #0]
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	40da      	lsrs	r2, r3
 8010d50:	1e13      	subs	r3, r2, #0
 8010d52:	d000      	beq.n	8010d56 <HAL_GPIO_Init+0x2d2>
 8010d54:	e6a2      	b.n	8010a9c <HAL_GPIO_Init+0x18>
  }
}
 8010d56:	46c0      	nop			@ (mov r8, r8)
 8010d58:	46c0      	nop			@ (mov r8, r8)
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	b006      	add	sp, #24
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	40021000 	.word	0x40021000
 8010d64:	40010000 	.word	0x40010000
 8010d68:	50000400 	.word	0x50000400
 8010d6c:	50000800 	.word	0x50000800
 8010d70:	50000c00 	.word	0x50000c00
 8010d74:	50001000 	.word	0x50001000
 8010d78:	50001c00 	.word	0x50001c00
 8010d7c:	40010400 	.word	0x40010400

08010d80 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	000a      	movs	r2, r1
 8010d8a:	1cbb      	adds	r3, r7, #2
 8010d8c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	691b      	ldr	r3, [r3, #16]
 8010d92:	1cba      	adds	r2, r7, #2
 8010d94:	8812      	ldrh	r2, [r2, #0]
 8010d96:	4013      	ands	r3, r2
 8010d98:	d004      	beq.n	8010da4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8010d9a:	230f      	movs	r3, #15
 8010d9c:	18fb      	adds	r3, r7, r3
 8010d9e:	2201      	movs	r2, #1
 8010da0:	701a      	strb	r2, [r3, #0]
 8010da2:	e003      	b.n	8010dac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010da4:	230f      	movs	r3, #15
 8010da6:	18fb      	adds	r3, r7, r3
 8010da8:	2200      	movs	r2, #0
 8010daa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8010dac:	230f      	movs	r3, #15
 8010dae:	18fb      	adds	r3, r7, r3
 8010db0:	781b      	ldrb	r3, [r3, #0]
}
 8010db2:	0018      	movs	r0, r3
 8010db4:	46bd      	mov	sp, r7
 8010db6:	b004      	add	sp, #16
 8010db8:	bd80      	pop	{r7, pc}

08010dba <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010dba:	b580      	push	{r7, lr}
 8010dbc:	b082      	sub	sp, #8
 8010dbe:	af00      	add	r7, sp, #0
 8010dc0:	6078      	str	r0, [r7, #4]
 8010dc2:	0008      	movs	r0, r1
 8010dc4:	0011      	movs	r1, r2
 8010dc6:	1cbb      	adds	r3, r7, #2
 8010dc8:	1c02      	adds	r2, r0, #0
 8010dca:	801a      	strh	r2, [r3, #0]
 8010dcc:	1c7b      	adds	r3, r7, #1
 8010dce:	1c0a      	adds	r2, r1, #0
 8010dd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010dd2:	1c7b      	adds	r3, r7, #1
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d004      	beq.n	8010de4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010dda:	1cbb      	adds	r3, r7, #2
 8010ddc:	881a      	ldrh	r2, [r3, #0]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8010de2:	e003      	b.n	8010dec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8010de4:	1cbb      	adds	r3, r7, #2
 8010de6:	881a      	ldrh	r2, [r3, #0]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010dec:	46c0      	nop			@ (mov r8, r8)
 8010dee:	46bd      	mov	sp, r7
 8010df0:	b002      	add	sp, #8
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	0002      	movs	r2, r0
 8010dfc:	1dbb      	adds	r3, r7, #6
 8010dfe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010e00:	4b09      	ldr	r3, [pc, #36]	@ (8010e28 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010e02:	695b      	ldr	r3, [r3, #20]
 8010e04:	1dba      	adds	r2, r7, #6
 8010e06:	8812      	ldrh	r2, [r2, #0]
 8010e08:	4013      	ands	r3, r2
 8010e0a:	d008      	beq.n	8010e1e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010e0c:	4b06      	ldr	r3, [pc, #24]	@ (8010e28 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010e0e:	1dba      	adds	r2, r7, #6
 8010e10:	8812      	ldrh	r2, [r2, #0]
 8010e12:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010e14:	1dbb      	adds	r3, r7, #6
 8010e16:	881b      	ldrh	r3, [r3, #0]
 8010e18:	0018      	movs	r0, r3
 8010e1a:	f7f7 ff75 	bl	8008d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8010e1e:	46c0      	nop			@ (mov r8, r8)
 8010e20:	46bd      	mov	sp, r7
 8010e22:	b002      	add	sp, #8
 8010e24:	bd80      	pop	{r7, pc}
 8010e26:	46c0      	nop			@ (mov r8, r8)
 8010e28:	40010400 	.word	0x40010400

08010e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d101      	bne.n	8010e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	e082      	b.n	8010f44 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2241      	movs	r2, #65	@ 0x41
 8010e42:	5c9b      	ldrb	r3, [r3, r2]
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d107      	bne.n	8010e5a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2240      	movs	r2, #64	@ 0x40
 8010e4e:	2100      	movs	r1, #0
 8010e50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	0018      	movs	r0, r3
 8010e56:	f7f7 fa23 	bl	80082a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2241      	movs	r2, #65	@ 0x41
 8010e5e:	2124      	movs	r1, #36	@ 0x24
 8010e60:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2101      	movs	r1, #1
 8010e6e:	438a      	bics	r2, r1
 8010e70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	685a      	ldr	r2, [r3, #4]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4934      	ldr	r1, [pc, #208]	@ (8010f4c <HAL_I2C_Init+0x120>)
 8010e7c:	400a      	ands	r2, r1
 8010e7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	689a      	ldr	r2, [r3, #8]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	4931      	ldr	r1, [pc, #196]	@ (8010f50 <HAL_I2C_Init+0x124>)
 8010e8c:	400a      	ands	r2, r1
 8010e8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d108      	bne.n	8010eaa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	689a      	ldr	r2, [r3, #8]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2180      	movs	r1, #128	@ 0x80
 8010ea2:	0209      	lsls	r1, r1, #8
 8010ea4:	430a      	orrs	r2, r1
 8010ea6:	609a      	str	r2, [r3, #8]
 8010ea8:	e007      	b.n	8010eba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	689a      	ldr	r2, [r3, #8]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2184      	movs	r1, #132	@ 0x84
 8010eb4:	0209      	lsls	r1, r1, #8
 8010eb6:	430a      	orrs	r2, r1
 8010eb8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	2b02      	cmp	r3, #2
 8010ec0:	d104      	bne.n	8010ecc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2280      	movs	r2, #128	@ 0x80
 8010ec8:	0112      	lsls	r2, r2, #4
 8010eca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	685a      	ldr	r2, [r3, #4]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	491f      	ldr	r1, [pc, #124]	@ (8010f54 <HAL_I2C_Init+0x128>)
 8010ed8:	430a      	orrs	r2, r1
 8010eda:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	68da      	ldr	r2, [r3, #12]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	491a      	ldr	r1, [pc, #104]	@ (8010f50 <HAL_I2C_Init+0x124>)
 8010ee8:	400a      	ands	r2, r1
 8010eea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	691a      	ldr	r2, [r3, #16]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	695b      	ldr	r3, [r3, #20]
 8010ef4:	431a      	orrs	r2, r3
 8010ef6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	699b      	ldr	r3, [r3, #24]
 8010efc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	430a      	orrs	r2, r1
 8010f04:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	69d9      	ldr	r1, [r3, #28]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6a1a      	ldr	r2, [r3, #32]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	430a      	orrs	r2, r1
 8010f14:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2101      	movs	r1, #1
 8010f22:	430a      	orrs	r2, r1
 8010f24:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2241      	movs	r2, #65	@ 0x41
 8010f30:	2120      	movs	r1, #32
 8010f32:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2200      	movs	r2, #0
 8010f38:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2242      	movs	r2, #66	@ 0x42
 8010f3e:	2100      	movs	r1, #0
 8010f40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010f42:	2300      	movs	r3, #0
}
 8010f44:	0018      	movs	r0, r3
 8010f46:	46bd      	mov	sp, r7
 8010f48:	b002      	add	sp, #8
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	f0ffffff 	.word	0xf0ffffff
 8010f50:	ffff7fff 	.word	0xffff7fff
 8010f54:	02008000 	.word	0x02008000

08010f58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010f58:	b590      	push	{r4, r7, lr}
 8010f5a:	b089      	sub	sp, #36	@ 0x24
 8010f5c:	af02      	add	r7, sp, #8
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	0008      	movs	r0, r1
 8010f62:	607a      	str	r2, [r7, #4]
 8010f64:	0019      	movs	r1, r3
 8010f66:	230a      	movs	r3, #10
 8010f68:	18fb      	adds	r3, r7, r3
 8010f6a:	1c02      	adds	r2, r0, #0
 8010f6c:	801a      	strh	r2, [r3, #0]
 8010f6e:	2308      	movs	r3, #8
 8010f70:	18fb      	adds	r3, r7, r3
 8010f72:	1c0a      	adds	r2, r1, #0
 8010f74:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2241      	movs	r2, #65	@ 0x41
 8010f7a:	5c9b      	ldrb	r3, [r3, r2]
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	2b20      	cmp	r3, #32
 8010f80:	d000      	beq.n	8010f84 <HAL_I2C_Master_Transmit+0x2c>
 8010f82:	e0e7      	b.n	8011154 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2240      	movs	r2, #64	@ 0x40
 8010f88:	5c9b      	ldrb	r3, [r3, r2]
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d101      	bne.n	8010f92 <HAL_I2C_Master_Transmit+0x3a>
 8010f8e:	2302      	movs	r3, #2
 8010f90:	e0e1      	b.n	8011156 <HAL_I2C_Master_Transmit+0x1fe>
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2240      	movs	r2, #64	@ 0x40
 8010f96:	2101      	movs	r1, #1
 8010f98:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010f9a:	f7fe fc7d 	bl	800f898 <HAL_GetTick>
 8010f9e:	0003      	movs	r3, r0
 8010fa0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010fa2:	2380      	movs	r3, #128	@ 0x80
 8010fa4:	0219      	lsls	r1, r3, #8
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	9300      	str	r3, [sp, #0]
 8010fac:	2319      	movs	r3, #25
 8010fae:	2201      	movs	r2, #1
 8010fb0:	f001 ff98 	bl	8012ee4 <I2C_WaitOnFlagUntilTimeout>
 8010fb4:	1e03      	subs	r3, r0, #0
 8010fb6:	d001      	beq.n	8010fbc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e0cc      	b.n	8011156 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2241      	movs	r2, #65	@ 0x41
 8010fc0:	2121      	movs	r1, #33	@ 0x21
 8010fc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2242      	movs	r2, #66	@ 0x42
 8010fc8:	2110      	movs	r1, #16
 8010fca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2208      	movs	r2, #8
 8010fdc:	18ba      	adds	r2, r7, r2
 8010fde:	8812      	ldrh	r2, [r2, #0]
 8010fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	2bff      	cmp	r3, #255	@ 0xff
 8010ff0:	d911      	bls.n	8011016 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	22ff      	movs	r2, #255	@ 0xff
 8010ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	2380      	movs	r3, #128	@ 0x80
 8011000:	045c      	lsls	r4, r3, #17
 8011002:	230a      	movs	r3, #10
 8011004:	18fb      	adds	r3, r7, r3
 8011006:	8819      	ldrh	r1, [r3, #0]
 8011008:	68f8      	ldr	r0, [r7, #12]
 801100a:	4b55      	ldr	r3, [pc, #340]	@ (8011160 <HAL_I2C_Master_Transmit+0x208>)
 801100c:	9300      	str	r3, [sp, #0]
 801100e:	0023      	movs	r3, r4
 8011010:	f002 f9ba 	bl	8013388 <I2C_TransferConfig>
 8011014:	e075      	b.n	8011102 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801101a:	b29a      	uxth	r2, r3
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011024:	b2da      	uxtb	r2, r3
 8011026:	2380      	movs	r3, #128	@ 0x80
 8011028:	049c      	lsls	r4, r3, #18
 801102a:	230a      	movs	r3, #10
 801102c:	18fb      	adds	r3, r7, r3
 801102e:	8819      	ldrh	r1, [r3, #0]
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	4b4b      	ldr	r3, [pc, #300]	@ (8011160 <HAL_I2C_Master_Transmit+0x208>)
 8011034:	9300      	str	r3, [sp, #0]
 8011036:	0023      	movs	r3, r4
 8011038:	f002 f9a6 	bl	8013388 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801103c:	e061      	b.n	8011102 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801103e:	697a      	ldr	r2, [r7, #20]
 8011040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	0018      	movs	r0, r3
 8011046:	f001 ff9b 	bl	8012f80 <I2C_WaitOnTXISFlagUntilTimeout>
 801104a:	1e03      	subs	r3, r0, #0
 801104c:	d001      	beq.n	8011052 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801104e:	2301      	movs	r3, #1
 8011050:	e081      	b.n	8011156 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011056:	781a      	ldrb	r2, [r3, #0]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011062:	1c5a      	adds	r2, r3, #1
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801106c:	b29b      	uxth	r3, r3
 801106e:	3b01      	subs	r3, #1
 8011070:	b29a      	uxth	r2, r3
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801107a:	3b01      	subs	r3, #1
 801107c:	b29a      	uxth	r2, r3
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011086:	b29b      	uxth	r3, r3
 8011088:	2b00      	cmp	r3, #0
 801108a:	d03a      	beq.n	8011102 <HAL_I2C_Master_Transmit+0x1aa>
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011090:	2b00      	cmp	r3, #0
 8011092:	d136      	bne.n	8011102 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	0013      	movs	r3, r2
 801109e:	2200      	movs	r2, #0
 80110a0:	2180      	movs	r1, #128	@ 0x80
 80110a2:	f001 ff1f 	bl	8012ee4 <I2C_WaitOnFlagUntilTimeout>
 80110a6:	1e03      	subs	r3, r0, #0
 80110a8:	d001      	beq.n	80110ae <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80110aa:	2301      	movs	r3, #1
 80110ac:	e053      	b.n	8011156 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	2bff      	cmp	r3, #255	@ 0xff
 80110b6:	d911      	bls.n	80110dc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	22ff      	movs	r2, #255	@ 0xff
 80110bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110c2:	b2da      	uxtb	r2, r3
 80110c4:	2380      	movs	r3, #128	@ 0x80
 80110c6:	045c      	lsls	r4, r3, #17
 80110c8:	230a      	movs	r3, #10
 80110ca:	18fb      	adds	r3, r7, r3
 80110cc:	8819      	ldrh	r1, [r3, #0]
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	2300      	movs	r3, #0
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	0023      	movs	r3, r4
 80110d6:	f002 f957 	bl	8013388 <I2C_TransferConfig>
 80110da:	e012      	b.n	8011102 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110ea:	b2da      	uxtb	r2, r3
 80110ec:	2380      	movs	r3, #128	@ 0x80
 80110ee:	049c      	lsls	r4, r3, #18
 80110f0:	230a      	movs	r3, #10
 80110f2:	18fb      	adds	r3, r7, r3
 80110f4:	8819      	ldrh	r1, [r3, #0]
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	2300      	movs	r3, #0
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	0023      	movs	r3, r4
 80110fe:	f002 f943 	bl	8013388 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011106:	b29b      	uxth	r3, r3
 8011108:	2b00      	cmp	r3, #0
 801110a:	d198      	bne.n	801103e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801110c:	697a      	ldr	r2, [r7, #20]
 801110e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	0018      	movs	r0, r3
 8011114:	f001 ff7a 	bl	801300c <I2C_WaitOnSTOPFlagUntilTimeout>
 8011118:	1e03      	subs	r3, r0, #0
 801111a:	d001      	beq.n	8011120 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 801111c:	2301      	movs	r3, #1
 801111e:	e01a      	b.n	8011156 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2220      	movs	r2, #32
 8011126:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	685a      	ldr	r2, [r3, #4]
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	490c      	ldr	r1, [pc, #48]	@ (8011164 <HAL_I2C_Master_Transmit+0x20c>)
 8011134:	400a      	ands	r2, r1
 8011136:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2241      	movs	r2, #65	@ 0x41
 801113c:	2120      	movs	r1, #32
 801113e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2242      	movs	r2, #66	@ 0x42
 8011144:	2100      	movs	r1, #0
 8011146:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2240      	movs	r2, #64	@ 0x40
 801114c:	2100      	movs	r1, #0
 801114e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011150:	2300      	movs	r3, #0
 8011152:	e000      	b.n	8011156 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8011154:	2302      	movs	r3, #2
  }
}
 8011156:	0018      	movs	r0, r3
 8011158:	46bd      	mov	sp, r7
 801115a:	b007      	add	sp, #28
 801115c:	bd90      	pop	{r4, r7, pc}
 801115e:	46c0      	nop			@ (mov r8, r8)
 8011160:	80002000 	.word	0x80002000
 8011164:	fe00e800 	.word	0xfe00e800

08011168 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8011168:	b590      	push	{r4, r7, lr}
 801116a:	b089      	sub	sp, #36	@ 0x24
 801116c:	af02      	add	r7, sp, #8
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	0008      	movs	r0, r1
 8011172:	607a      	str	r2, [r7, #4]
 8011174:	0019      	movs	r1, r3
 8011176:	230a      	movs	r3, #10
 8011178:	18fb      	adds	r3, r7, r3
 801117a:	1c02      	adds	r2, r0, #0
 801117c:	801a      	strh	r2, [r3, #0]
 801117e:	2308      	movs	r3, #8
 8011180:	18fb      	adds	r3, r7, r3
 8011182:	1c0a      	adds	r2, r1, #0
 8011184:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2241      	movs	r2, #65	@ 0x41
 801118a:	5c9b      	ldrb	r3, [r3, r2]
 801118c:	b2db      	uxtb	r3, r3
 801118e:	2b20      	cmp	r3, #32
 8011190:	d000      	beq.n	8011194 <HAL_I2C_Master_Receive+0x2c>
 8011192:	e0e8      	b.n	8011366 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2240      	movs	r2, #64	@ 0x40
 8011198:	5c9b      	ldrb	r3, [r3, r2]
 801119a:	2b01      	cmp	r3, #1
 801119c:	d101      	bne.n	80111a2 <HAL_I2C_Master_Receive+0x3a>
 801119e:	2302      	movs	r3, #2
 80111a0:	e0e2      	b.n	8011368 <HAL_I2C_Master_Receive+0x200>
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2240      	movs	r2, #64	@ 0x40
 80111a6:	2101      	movs	r1, #1
 80111a8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80111aa:	f7fe fb75 	bl	800f898 <HAL_GetTick>
 80111ae:	0003      	movs	r3, r0
 80111b0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80111b2:	2380      	movs	r3, #128	@ 0x80
 80111b4:	0219      	lsls	r1, r3, #8
 80111b6:	68f8      	ldr	r0, [r7, #12]
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	2319      	movs	r3, #25
 80111be:	2201      	movs	r2, #1
 80111c0:	f001 fe90 	bl	8012ee4 <I2C_WaitOnFlagUntilTimeout>
 80111c4:	1e03      	subs	r3, r0, #0
 80111c6:	d001      	beq.n	80111cc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80111c8:	2301      	movs	r3, #1
 80111ca:	e0cd      	b.n	8011368 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2241      	movs	r2, #65	@ 0x41
 80111d0:	2122      	movs	r1, #34	@ 0x22
 80111d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2242      	movs	r2, #66	@ 0x42
 80111d8:	2110      	movs	r1, #16
 80111da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	2200      	movs	r2, #0
 80111e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2208      	movs	r2, #8
 80111ec:	18ba      	adds	r2, r7, r2
 80111ee:	8812      	ldrh	r2, [r2, #0]
 80111f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2200      	movs	r2, #0
 80111f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	2bff      	cmp	r3, #255	@ 0xff
 8011200:	d911      	bls.n	8011226 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	22ff      	movs	r2, #255	@ 0xff
 8011206:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801120c:	b2da      	uxtb	r2, r3
 801120e:	2380      	movs	r3, #128	@ 0x80
 8011210:	045c      	lsls	r4, r3, #17
 8011212:	230a      	movs	r3, #10
 8011214:	18fb      	adds	r3, r7, r3
 8011216:	8819      	ldrh	r1, [r3, #0]
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	4b55      	ldr	r3, [pc, #340]	@ (8011370 <HAL_I2C_Master_Receive+0x208>)
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	0023      	movs	r3, r4
 8011220:	f002 f8b2 	bl	8013388 <I2C_TransferConfig>
 8011224:	e076      	b.n	8011314 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801122a:	b29a      	uxth	r2, r3
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011234:	b2da      	uxtb	r2, r3
 8011236:	2380      	movs	r3, #128	@ 0x80
 8011238:	049c      	lsls	r4, r3, #18
 801123a:	230a      	movs	r3, #10
 801123c:	18fb      	adds	r3, r7, r3
 801123e:	8819      	ldrh	r1, [r3, #0]
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	4b4b      	ldr	r3, [pc, #300]	@ (8011370 <HAL_I2C_Master_Receive+0x208>)
 8011244:	9300      	str	r3, [sp, #0]
 8011246:	0023      	movs	r3, r4
 8011248:	f002 f89e 	bl	8013388 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801124c:	e062      	b.n	8011314 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801124e:	697a      	ldr	r2, [r7, #20]
 8011250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	0018      	movs	r0, r3
 8011256:	f001 ff1d 	bl	8013094 <I2C_WaitOnRXNEFlagUntilTimeout>
 801125a:	1e03      	subs	r3, r0, #0
 801125c:	d001      	beq.n	8011262 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801125e:	2301      	movs	r3, #1
 8011260:	e082      	b.n	8011368 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126c:	b2d2      	uxtb	r2, r2
 801126e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801127e:	3b01      	subs	r3, #1
 8011280:	b29a      	uxth	r2, r3
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801128a:	b29b      	uxth	r3, r3
 801128c:	3b01      	subs	r3, #1
 801128e:	b29a      	uxth	r2, r3
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011298:	b29b      	uxth	r3, r3
 801129a:	2b00      	cmp	r3, #0
 801129c:	d03a      	beq.n	8011314 <HAL_I2C_Master_Receive+0x1ac>
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d136      	bne.n	8011314 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80112a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112a8:	68f8      	ldr	r0, [r7, #12]
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	0013      	movs	r3, r2
 80112b0:	2200      	movs	r2, #0
 80112b2:	2180      	movs	r1, #128	@ 0x80
 80112b4:	f001 fe16 	bl	8012ee4 <I2C_WaitOnFlagUntilTimeout>
 80112b8:	1e03      	subs	r3, r0, #0
 80112ba:	d001      	beq.n	80112c0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80112bc:	2301      	movs	r3, #1
 80112be:	e053      	b.n	8011368 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	2bff      	cmp	r3, #255	@ 0xff
 80112c8:	d911      	bls.n	80112ee <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	22ff      	movs	r2, #255	@ 0xff
 80112ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112d4:	b2da      	uxtb	r2, r3
 80112d6:	2380      	movs	r3, #128	@ 0x80
 80112d8:	045c      	lsls	r4, r3, #17
 80112da:	230a      	movs	r3, #10
 80112dc:	18fb      	adds	r3, r7, r3
 80112de:	8819      	ldrh	r1, [r3, #0]
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	2300      	movs	r3, #0
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	0023      	movs	r3, r4
 80112e8:	f002 f84e 	bl	8013388 <I2C_TransferConfig>
 80112ec:	e012      	b.n	8011314 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112f2:	b29a      	uxth	r2, r3
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112fc:	b2da      	uxtb	r2, r3
 80112fe:	2380      	movs	r3, #128	@ 0x80
 8011300:	049c      	lsls	r4, r3, #18
 8011302:	230a      	movs	r3, #10
 8011304:	18fb      	adds	r3, r7, r3
 8011306:	8819      	ldrh	r1, [r3, #0]
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	2300      	movs	r3, #0
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	0023      	movs	r3, r4
 8011310:	f002 f83a 	bl	8013388 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011318:	b29b      	uxth	r3, r3
 801131a:	2b00      	cmp	r3, #0
 801131c:	d197      	bne.n	801124e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	0018      	movs	r0, r3
 8011326:	f001 fe71 	bl	801300c <I2C_WaitOnSTOPFlagUntilTimeout>
 801132a:	1e03      	subs	r3, r0, #0
 801132c:	d001      	beq.n	8011332 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 801132e:	2301      	movs	r3, #1
 8011330:	e01a      	b.n	8011368 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2220      	movs	r2, #32
 8011338:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	685a      	ldr	r2, [r3, #4]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	490b      	ldr	r1, [pc, #44]	@ (8011374 <HAL_I2C_Master_Receive+0x20c>)
 8011346:	400a      	ands	r2, r1
 8011348:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2241      	movs	r2, #65	@ 0x41
 801134e:	2120      	movs	r1, #32
 8011350:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	2242      	movs	r2, #66	@ 0x42
 8011356:	2100      	movs	r1, #0
 8011358:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2240      	movs	r2, #64	@ 0x40
 801135e:	2100      	movs	r1, #0
 8011360:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011362:	2300      	movs	r3, #0
 8011364:	e000      	b.n	8011368 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8011366:	2302      	movs	r3, #2
  }
}
 8011368:	0018      	movs	r0, r3
 801136a:	46bd      	mov	sp, r7
 801136c:	b007      	add	sp, #28
 801136e:	bd90      	pop	{r4, r7, pc}
 8011370:	80002400 	.word	0x80002400
 8011374:	fe00e800 	.word	0xfe00e800

08011378 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8011378:	b5b0      	push	{r4, r5, r7, lr}
 801137a:	b088      	sub	sp, #32
 801137c:	af02      	add	r7, sp, #8
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	0008      	movs	r0, r1
 8011382:	607a      	str	r2, [r7, #4]
 8011384:	0019      	movs	r1, r3
 8011386:	230a      	movs	r3, #10
 8011388:	18fb      	adds	r3, r7, r3
 801138a:	1c02      	adds	r2, r0, #0
 801138c:	801a      	strh	r2, [r3, #0]
 801138e:	2308      	movs	r3, #8
 8011390:	18fb      	adds	r3, r7, r3
 8011392:	1c0a      	adds	r2, r1, #0
 8011394:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2241      	movs	r2, #65	@ 0x41
 801139a:	5c9b      	ldrb	r3, [r3, r2]
 801139c:	b2db      	uxtb	r3, r3
 801139e:	2b20      	cmp	r3, #32
 80113a0:	d000      	beq.n	80113a4 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80113a2:	e0dd      	b.n	8011560 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	699a      	ldr	r2, [r3, #24]
 80113aa:	2380      	movs	r3, #128	@ 0x80
 80113ac:	021b      	lsls	r3, r3, #8
 80113ae:	401a      	ands	r2, r3
 80113b0:	2380      	movs	r3, #128	@ 0x80
 80113b2:	021b      	lsls	r3, r3, #8
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d101      	bne.n	80113bc <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80113b8:	2302      	movs	r3, #2
 80113ba:	e0d2      	b.n	8011562 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2240      	movs	r2, #64	@ 0x40
 80113c0:	5c9b      	ldrb	r3, [r3, r2]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d101      	bne.n	80113ca <HAL_I2C_Master_Transmit_DMA+0x52>
 80113c6:	2302      	movs	r3, #2
 80113c8:	e0cb      	b.n	8011562 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2240      	movs	r2, #64	@ 0x40
 80113ce:	2101      	movs	r1, #1
 80113d0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2241      	movs	r2, #65	@ 0x41
 80113d6:	2121      	movs	r1, #33	@ 0x21
 80113d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2242      	movs	r2, #66	@ 0x42
 80113de:	2110      	movs	r1, #16
 80113e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	2200      	movs	r2, #0
 80113e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2208      	movs	r2, #8
 80113f2:	18ba      	adds	r2, r7, r2
 80113f4:	8812      	ldrh	r2, [r2, #0]
 80113f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	4a5c      	ldr	r2, [pc, #368]	@ (801156c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80113fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	4a5b      	ldr	r2, [pc, #364]	@ (8011570 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8011402:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011408:	b29b      	uxth	r3, r3
 801140a:	2bff      	cmp	r3, #255	@ 0xff
 801140c:	d906      	bls.n	801141c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	22ff      	movs	r2, #255	@ 0xff
 8011412:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8011414:	2380      	movs	r3, #128	@ 0x80
 8011416:	045b      	lsls	r3, r3, #17
 8011418:	617b      	str	r3, [r7, #20]
 801141a:	e007      	b.n	801142c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011420:	b29a      	uxth	r2, r3
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8011426:	2380      	movs	r3, #128	@ 0x80
 8011428:	049b      	lsls	r3, r3, #18
 801142a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011430:	2b00      	cmp	r3, #0
 8011432:	d100      	bne.n	8011436 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8011434:	e078      	b.n	8011528 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801143a:	2b00      	cmp	r3, #0
 801143c:	d023      	beq.n	8011486 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011442:	4a4c      	ldr	r2, [pc, #304]	@ (8011574 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8011444:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801144a:	4a4b      	ldr	r2, [pc, #300]	@ (8011578 <HAL_I2C_Master_Transmit_DMA+0x200>)
 801144c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011452:	2200      	movs	r2, #0
 8011454:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801145a:	2200      	movs	r2, #0
 801145c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011462:	6879      	ldr	r1, [r7, #4]
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	3328      	adds	r3, #40	@ 0x28
 801146a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8011470:	2513      	movs	r5, #19
 8011472:	197c      	adds	r4, r7, r5
 8011474:	f7fe ff62 	bl	801033c <HAL_DMA_Start_IT>
 8011478:	0003      	movs	r3, r0
 801147a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801147c:	197b      	adds	r3, r7, r5
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d13d      	bne.n	8011500 <HAL_I2C_Master_Transmit_DMA+0x188>
 8011484:	e013      	b.n	80114ae <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	2241      	movs	r2, #65	@ 0x41
 801148a:	2120      	movs	r1, #32
 801148c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2242      	movs	r2, #66	@ 0x42
 8011492:	2100      	movs	r1, #0
 8011494:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801149a:	2280      	movs	r2, #128	@ 0x80
 801149c:	431a      	orrs	r2, r3
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2240      	movs	r2, #64	@ 0x40
 80114a6:	2100      	movs	r1, #0
 80114a8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80114aa:	2301      	movs	r3, #1
 80114ac:	e059      	b.n	8011562 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	697c      	ldr	r4, [r7, #20]
 80114b6:	230a      	movs	r3, #10
 80114b8:	18fb      	adds	r3, r7, r3
 80114ba:	8819      	ldrh	r1, [r3, #0]
 80114bc:	68f8      	ldr	r0, [r7, #12]
 80114be:	4b2f      	ldr	r3, [pc, #188]	@ (801157c <HAL_I2C_Master_Transmit_DMA+0x204>)
 80114c0:	9300      	str	r3, [sp, #0]
 80114c2:	0023      	movs	r3, r4
 80114c4:	f001 ff60 	bl	8013388 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114d2:	1ad3      	subs	r3, r2, r3
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2240      	movs	r2, #64	@ 0x40
 80114de:	2100      	movs	r1, #0
 80114e0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2110      	movs	r1, #16
 80114e6:	0018      	movs	r0, r3
 80114e8:	f001 ff88 	bl	80133fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	2180      	movs	r1, #128	@ 0x80
 80114f8:	01c9      	lsls	r1, r1, #7
 80114fa:	430a      	orrs	r2, r1
 80114fc:	601a      	str	r2, [r3, #0]
 80114fe:	e02d      	b.n	801155c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	2241      	movs	r2, #65	@ 0x41
 8011504:	2120      	movs	r1, #32
 8011506:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2242      	movs	r2, #66	@ 0x42
 801150c:	2100      	movs	r1, #0
 801150e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011514:	2210      	movs	r2, #16
 8011516:	431a      	orrs	r2, r3
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2240      	movs	r2, #64	@ 0x40
 8011520:	2100      	movs	r1, #0
 8011522:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011524:	2301      	movs	r3, #1
 8011526:	e01c      	b.n	8011562 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	4a15      	ldr	r2, [pc, #84]	@ (8011580 <HAL_I2C_Master_Transmit_DMA+0x208>)
 801152c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011532:	b2da      	uxtb	r2, r3
 8011534:	2380      	movs	r3, #128	@ 0x80
 8011536:	049c      	lsls	r4, r3, #18
 8011538:	230a      	movs	r3, #10
 801153a:	18fb      	adds	r3, r7, r3
 801153c:	8819      	ldrh	r1, [r3, #0]
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	4b0e      	ldr	r3, [pc, #56]	@ (801157c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8011542:	9300      	str	r3, [sp, #0]
 8011544:	0023      	movs	r3, r4
 8011546:	f001 ff1f 	bl	8013388 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2240      	movs	r2, #64	@ 0x40
 801154e:	2100      	movs	r1, #0
 8011550:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	2101      	movs	r1, #1
 8011556:	0018      	movs	r0, r3
 8011558:	f001 ff50 	bl	80133fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 801155c:	2300      	movs	r3, #0
 801155e:	e000      	b.n	8011562 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8011560:	2302      	movs	r3, #2
  }
}
 8011562:	0018      	movs	r0, r3
 8011564:	46bd      	mov	sp, r7
 8011566:	b006      	add	sp, #24
 8011568:	bdb0      	pop	{r4, r5, r7, pc}
 801156a:	46c0      	nop			@ (mov r8, r8)
 801156c:	ffff0000 	.word	0xffff0000
 8011570:	08011d7d 	.word	0x08011d7d
 8011574:	08012d35 	.word	0x08012d35
 8011578:	08012e75 	.word	0x08012e75
 801157c:	80002000 	.word	0x80002000
 8011580:	08011929 	.word	0x08011929

08011584 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8011584:	b5b0      	push	{r4, r5, r7, lr}
 8011586:	b088      	sub	sp, #32
 8011588:	af02      	add	r7, sp, #8
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	0008      	movs	r0, r1
 801158e:	607a      	str	r2, [r7, #4]
 8011590:	0019      	movs	r1, r3
 8011592:	230a      	movs	r3, #10
 8011594:	18fb      	adds	r3, r7, r3
 8011596:	1c02      	adds	r2, r0, #0
 8011598:	801a      	strh	r2, [r3, #0]
 801159a:	2308      	movs	r3, #8
 801159c:	18fb      	adds	r3, r7, r3
 801159e:	1c0a      	adds	r2, r1, #0
 80115a0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2241      	movs	r2, #65	@ 0x41
 80115a6:	5c9b      	ldrb	r3, [r3, r2]
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	2b20      	cmp	r3, #32
 80115ac:	d000      	beq.n	80115b0 <HAL_I2C_Master_Receive_DMA+0x2c>
 80115ae:	e0dd      	b.n	801176c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	699a      	ldr	r2, [r3, #24]
 80115b6:	2380      	movs	r3, #128	@ 0x80
 80115b8:	021b      	lsls	r3, r3, #8
 80115ba:	401a      	ands	r2, r3
 80115bc:	2380      	movs	r3, #128	@ 0x80
 80115be:	021b      	lsls	r3, r3, #8
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d101      	bne.n	80115c8 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80115c4:	2302      	movs	r3, #2
 80115c6:	e0d2      	b.n	801176e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2240      	movs	r2, #64	@ 0x40
 80115cc:	5c9b      	ldrb	r3, [r3, r2]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d101      	bne.n	80115d6 <HAL_I2C_Master_Receive_DMA+0x52>
 80115d2:	2302      	movs	r3, #2
 80115d4:	e0cb      	b.n	801176e <HAL_I2C_Master_Receive_DMA+0x1ea>
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2240      	movs	r2, #64	@ 0x40
 80115da:	2101      	movs	r1, #1
 80115dc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2241      	movs	r2, #65	@ 0x41
 80115e2:	2122      	movs	r1, #34	@ 0x22
 80115e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2242      	movs	r2, #66	@ 0x42
 80115ea:	2110      	movs	r1, #16
 80115ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2200      	movs	r2, #0
 80115f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2208      	movs	r2, #8
 80115fe:	18ba      	adds	r2, r7, r2
 8011600:	8812      	ldrh	r2, [r2, #0]
 8011602:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	4a5c      	ldr	r2, [pc, #368]	@ (8011778 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8011608:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	4a5b      	ldr	r2, [pc, #364]	@ (801177c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 801160e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011614:	b29b      	uxth	r3, r3
 8011616:	2bff      	cmp	r3, #255	@ 0xff
 8011618:	d906      	bls.n	8011628 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	22ff      	movs	r2, #255	@ 0xff
 801161e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8011620:	2380      	movs	r3, #128	@ 0x80
 8011622:	045b      	lsls	r3, r3, #17
 8011624:	617b      	str	r3, [r7, #20]
 8011626:	e007      	b.n	8011638 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801162c:	b29a      	uxth	r2, r3
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8011632:	2380      	movs	r3, #128	@ 0x80
 8011634:	049b      	lsls	r3, r3, #18
 8011636:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801163c:	2b00      	cmp	r3, #0
 801163e:	d100      	bne.n	8011642 <HAL_I2C_Master_Receive_DMA+0xbe>
 8011640:	e078      	b.n	8011734 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011646:	2b00      	cmp	r3, #0
 8011648:	d023      	beq.n	8011692 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801164e:	4a4c      	ldr	r2, [pc, #304]	@ (8011780 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8011650:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011656:	4a4b      	ldr	r2, [pc, #300]	@ (8011784 <HAL_I2C_Master_Receive_DMA+0x200>)
 8011658:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801165e:	2200      	movs	r2, #0
 8011660:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011666:	2200      	movs	r2, #0
 8011668:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	3324      	adds	r3, #36	@ 0x24
 8011674:	0019      	movs	r1, r3
 8011676:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801167c:	2513      	movs	r5, #19
 801167e:	197c      	adds	r4, r7, r5
 8011680:	f7fe fe5c 	bl	801033c <HAL_DMA_Start_IT>
 8011684:	0003      	movs	r3, r0
 8011686:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8011688:	197b      	adds	r3, r7, r5
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d13d      	bne.n	801170c <HAL_I2C_Master_Receive_DMA+0x188>
 8011690:	e013      	b.n	80116ba <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2241      	movs	r2, #65	@ 0x41
 8011696:	2120      	movs	r1, #32
 8011698:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2242      	movs	r2, #66	@ 0x42
 801169e:	2100      	movs	r1, #0
 80116a0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116a6:	2280      	movs	r2, #128	@ 0x80
 80116a8:	431a      	orrs	r2, r3
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2240      	movs	r2, #64	@ 0x40
 80116b2:	2100      	movs	r1, #0
 80116b4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80116b6:	2301      	movs	r3, #1
 80116b8:	e059      	b.n	801176e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116be:	b2da      	uxtb	r2, r3
 80116c0:	697c      	ldr	r4, [r7, #20]
 80116c2:	230a      	movs	r3, #10
 80116c4:	18fb      	adds	r3, r7, r3
 80116c6:	8819      	ldrh	r1, [r3, #0]
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	4b2f      	ldr	r3, [pc, #188]	@ (8011788 <HAL_I2C_Master_Receive_DMA+0x204>)
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	0023      	movs	r3, r4
 80116d0:	f001 fe5a 	bl	8013388 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116d8:	b29a      	uxth	r2, r3
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2240      	movs	r2, #64	@ 0x40
 80116ea:	2100      	movs	r1, #0
 80116ec:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2110      	movs	r1, #16
 80116f2:	0018      	movs	r0, r3
 80116f4:	f001 fe82 	bl	80133fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	681a      	ldr	r2, [r3, #0]
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2180      	movs	r1, #128	@ 0x80
 8011704:	0209      	lsls	r1, r1, #8
 8011706:	430a      	orrs	r2, r1
 8011708:	601a      	str	r2, [r3, #0]
 801170a:	e02d      	b.n	8011768 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2241      	movs	r2, #65	@ 0x41
 8011710:	2120      	movs	r1, #32
 8011712:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2242      	movs	r2, #66	@ 0x42
 8011718:	2100      	movs	r1, #0
 801171a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011720:	2210      	movs	r2, #16
 8011722:	431a      	orrs	r2, r3
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2240      	movs	r2, #64	@ 0x40
 801172c:	2100      	movs	r1, #0
 801172e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011730:	2301      	movs	r3, #1
 8011732:	e01c      	b.n	801176e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	4a15      	ldr	r2, [pc, #84]	@ (801178c <HAL_I2C_Master_Receive_DMA+0x208>)
 8011738:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801173e:	b2da      	uxtb	r2, r3
 8011740:	2380      	movs	r3, #128	@ 0x80
 8011742:	049c      	lsls	r4, r3, #18
 8011744:	230a      	movs	r3, #10
 8011746:	18fb      	adds	r3, r7, r3
 8011748:	8819      	ldrh	r1, [r3, #0]
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	4b0e      	ldr	r3, [pc, #56]	@ (8011788 <HAL_I2C_Master_Receive_DMA+0x204>)
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	0023      	movs	r3, r4
 8011752:	f001 fe19 	bl	8013388 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2240      	movs	r2, #64	@ 0x40
 801175a:	2100      	movs	r1, #0
 801175c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2101      	movs	r1, #1
 8011762:	0018      	movs	r0, r3
 8011764:	f001 fe4a 	bl	80133fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8011768:	2300      	movs	r3, #0
 801176a:	e000      	b.n	801176e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801176c:	2302      	movs	r3, #2
  }
}
 801176e:	0018      	movs	r0, r3
 8011770:	46bd      	mov	sp, r7
 8011772:	b006      	add	sp, #24
 8011774:	bdb0      	pop	{r4, r5, r7, pc}
 8011776:	46c0      	nop			@ (mov r8, r8)
 8011778:	ffff0000 	.word	0xffff0000
 801177c:	08011d7d 	.word	0x08011d7d
 8011780:	08012dd5 	.word	0x08012dd5
 8011784:	08012e75 	.word	0x08012e75
 8011788:	80002400 	.word	0x80002400
 801178c:	08011929 	.word	0x08011929

08011790 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d005      	beq.n	80117bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117b4:	68ba      	ldr	r2, [r7, #8]
 80117b6:	68f9      	ldr	r1, [r7, #12]
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	4798      	blx	r3
  }
}
 80117bc:	46c0      	nop			@ (mov r8, r8)
 80117be:	46bd      	mov	sp, r7
 80117c0:	b004      	add	sp, #16
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b086      	sub	sp, #24
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	699b      	ldr	r3, [r3, #24]
 80117d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80117dc:	697a      	ldr	r2, [r7, #20]
 80117de:	2380      	movs	r3, #128	@ 0x80
 80117e0:	005b      	lsls	r3, r3, #1
 80117e2:	4013      	ands	r3, r2
 80117e4:	d00e      	beq.n	8011804 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	2280      	movs	r2, #128	@ 0x80
 80117ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80117ec:	d00a      	beq.n	8011804 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117f2:	2201      	movs	r2, #1
 80117f4:	431a      	orrs	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2280      	movs	r2, #128	@ 0x80
 8011800:	0052      	lsls	r2, r2, #1
 8011802:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8011804:	697a      	ldr	r2, [r7, #20]
 8011806:	2380      	movs	r3, #128	@ 0x80
 8011808:	00db      	lsls	r3, r3, #3
 801180a:	4013      	ands	r3, r2
 801180c:	d00e      	beq.n	801182c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	2280      	movs	r2, #128	@ 0x80
 8011812:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8011814:	d00a      	beq.n	801182c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801181a:	2208      	movs	r2, #8
 801181c:	431a      	orrs	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	2280      	movs	r2, #128	@ 0x80
 8011828:	00d2      	lsls	r2, r2, #3
 801182a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801182c:	697a      	ldr	r2, [r7, #20]
 801182e:	2380      	movs	r3, #128	@ 0x80
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	4013      	ands	r3, r2
 8011834:	d00e      	beq.n	8011854 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	2280      	movs	r2, #128	@ 0x80
 801183a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801183c:	d00a      	beq.n	8011854 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011842:	2202      	movs	r2, #2
 8011844:	431a      	orrs	r2, r3
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2280      	movs	r2, #128	@ 0x80
 8011850:	0092      	lsls	r2, r2, #2
 8011852:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011858:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	220b      	movs	r2, #11
 801185e:	4013      	ands	r3, r2
 8011860:	d005      	beq.n	801186e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8011862:	68fa      	ldr	r2, [r7, #12]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	0011      	movs	r1, r2
 8011868:	0018      	movs	r0, r3
 801186a:	f001 f915 	bl	8012a98 <I2C_ITError>
  }
}
 801186e:	46c0      	nop			@ (mov r8, r8)
 8011870:	46bd      	mov	sp, r7
 8011872:	b006      	add	sp, #24
 8011874:	bd80      	pop	{r7, pc}

08011876 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011876:	b580      	push	{r7, lr}
 8011878:	b082      	sub	sp, #8
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801187e:	46c0      	nop			@ (mov r8, r8)
 8011880:	46bd      	mov	sp, r7
 8011882:	b002      	add	sp, #8
 8011884:	bd80      	pop	{r7, pc}

08011886 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b082      	sub	sp, #8
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801188e:	46c0      	nop			@ (mov r8, r8)
 8011890:	46bd      	mov	sp, r7
 8011892:	b002      	add	sp, #8
 8011894:	bd80      	pop	{r7, pc}

08011896 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011896:	b580      	push	{r7, lr}
 8011898:	b082      	sub	sp, #8
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801189e:	46c0      	nop			@ (mov r8, r8)
 80118a0:	46bd      	mov	sp, r7
 80118a2:	b002      	add	sp, #8
 80118a4:	bd80      	pop	{r7, pc}

080118a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80118a6:	b580      	push	{r7, lr}
 80118a8:	b082      	sub	sp, #8
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80118ae:	46c0      	nop			@ (mov r8, r8)
 80118b0:	46bd      	mov	sp, r7
 80118b2:	b002      	add	sp, #8
 80118b4:	bd80      	pop	{r7, pc}

080118b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b082      	sub	sp, #8
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
 80118be:	0008      	movs	r0, r1
 80118c0:	0011      	movs	r1, r2
 80118c2:	1cfb      	adds	r3, r7, #3
 80118c4:	1c02      	adds	r2, r0, #0
 80118c6:	701a      	strb	r2, [r3, #0]
 80118c8:	003b      	movs	r3, r7
 80118ca:	1c0a      	adds	r2, r1, #0
 80118cc:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80118ce:	46c0      	nop			@ (mov r8, r8)
 80118d0:	46bd      	mov	sp, r7
 80118d2:	b002      	add	sp, #8
 80118d4:	bd80      	pop	{r7, pc}

080118d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80118d6:	b580      	push	{r7, lr}
 80118d8:	b082      	sub	sp, #8
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80118de:	46c0      	nop			@ (mov r8, r8)
 80118e0:	46bd      	mov	sp, r7
 80118e2:	b002      	add	sp, #8
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b082      	sub	sp, #8
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80118ee:	46c0      	nop			@ (mov r8, r8)
 80118f0:	46bd      	mov	sp, r7
 80118f2:	b002      	add	sp, #8
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b082      	sub	sp, #8
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80118fe:	46c0      	nop			@ (mov r8, r8)
 8011900:	46bd      	mov	sp, r7
 8011902:	b002      	add	sp, #8
 8011904:	bd80      	pop	{r7, pc}

08011906 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011906:	b580      	push	{r7, lr}
 8011908:	b082      	sub	sp, #8
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801190e:	46c0      	nop			@ (mov r8, r8)
 8011910:	46bd      	mov	sp, r7
 8011912:	b002      	add	sp, #8
 8011914:	bd80      	pop	{r7, pc}

08011916 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011916:	b580      	push	{r7, lr}
 8011918:	b082      	sub	sp, #8
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801191e:	46c0      	nop			@ (mov r8, r8)
 8011920:	46bd      	mov	sp, r7
 8011922:	b002      	add	sp, #8
 8011924:	bd80      	pop	{r7, pc}
	...

08011928 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011928:	b590      	push	{r4, r7, lr}
 801192a:	b089      	sub	sp, #36	@ 0x24
 801192c:	af02      	add	r7, sp, #8
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2240      	movs	r2, #64	@ 0x40
 801193c:	5c9b      	ldrb	r3, [r3, r2]
 801193e:	2b01      	cmp	r3, #1
 8011940:	d101      	bne.n	8011946 <I2C_Master_ISR_IT+0x1e>
 8011942:	2302      	movs	r3, #2
 8011944:	e113      	b.n	8011b6e <I2C_Master_ISR_IT+0x246>
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2240      	movs	r2, #64	@ 0x40
 801194a:	2101      	movs	r1, #1
 801194c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	2210      	movs	r2, #16
 8011952:	4013      	ands	r3, r2
 8011954:	d012      	beq.n	801197c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2210      	movs	r2, #16
 801195a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801195c:	d00e      	beq.n	801197c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2210      	movs	r2, #16
 8011964:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801196a:	2204      	movs	r2, #4
 801196c:	431a      	orrs	r2, r3
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	0018      	movs	r0, r3
 8011976:	f001 f9ba 	bl	8012cee <I2C_Flush_TXDR>
 801197a:	e0e5      	b.n	8011b48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	2204      	movs	r2, #4
 8011980:	4013      	ands	r3, r2
 8011982:	d021      	beq.n	80119c8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2204      	movs	r2, #4
 8011988:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801198a:	d01d      	beq.n	80119c8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	2204      	movs	r2, #4
 8011990:	4393      	bics	r3, r2
 8011992:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801199e:	b2d2      	uxtb	r2, r2
 80119a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119a6:	1c5a      	adds	r2, r3, #1
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119b0:	3b01      	subs	r3, #1
 80119b2:	b29a      	uxth	r2, r3
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119bc:	b29b      	uxth	r3, r3
 80119be:	3b01      	subs	r3, #1
 80119c0:	b29a      	uxth	r2, r3
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80119c6:	e0bf      	b.n	8011b48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	2202      	movs	r2, #2
 80119cc:	4013      	ands	r3, r2
 80119ce:	d01c      	beq.n	8011a0a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2202      	movs	r2, #2
 80119d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80119d6:	d018      	beq.n	8011a0a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119dc:	781a      	ldrb	r2, [r3, #0]
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119e8:	1c5a      	adds	r2, r3, #1
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119f2:	3b01      	subs	r3, #1
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	3b01      	subs	r3, #1
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011a08:	e09e      	b.n	8011b48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2280      	movs	r2, #128	@ 0x80
 8011a0e:	4013      	ands	r3, r2
 8011a10:	d100      	bne.n	8011a14 <I2C_Master_ISR_IT+0xec>
 8011a12:	e069      	b.n	8011ae8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2240      	movs	r2, #64	@ 0x40
 8011a18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8011a1a:	d065      	beq.n	8011ae8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d04a      	beq.n	8011abc <I2C_Master_ISR_IT+0x194>
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d146      	bne.n	8011abc <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	2112      	movs	r1, #18
 8011a38:	187b      	adds	r3, r7, r1
 8011a3a:	0592      	lsls	r2, r2, #22
 8011a3c:	0d92      	lsrs	r2, r2, #22
 8011a3e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	2bff      	cmp	r3, #255	@ 0xff
 8011a48:	d910      	bls.n	8011a6c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	22ff      	movs	r2, #255	@ 0xff
 8011a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a54:	b2da      	uxtb	r2, r3
 8011a56:	2380      	movs	r3, #128	@ 0x80
 8011a58:	045c      	lsls	r4, r3, #17
 8011a5a:	187b      	adds	r3, r7, r1
 8011a5c:	8819      	ldrh	r1, [r3, #0]
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	2300      	movs	r3, #0
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	0023      	movs	r3, r4
 8011a66:	f001 fc8f 	bl	8013388 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a6a:	e03c      	b.n	8011ae6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a70:	b29a      	uxth	r2, r3
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8011b78 <I2C_Master_ISR_IT+0x250>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d00e      	beq.n	8011a9e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a84:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011a8a:	2312      	movs	r3, #18
 8011a8c:	18fb      	adds	r3, r7, r3
 8011a8e:	8819      	ldrh	r1, [r3, #0]
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	2300      	movs	r3, #0
 8011a94:	9300      	str	r3, [sp, #0]
 8011a96:	0023      	movs	r3, r4
 8011a98:	f001 fc76 	bl	8013388 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011a9c:	e023      	b.n	8011ae6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011aa2:	b2da      	uxtb	r2, r3
 8011aa4:	2380      	movs	r3, #128	@ 0x80
 8011aa6:	049c      	lsls	r4, r3, #18
 8011aa8:	2312      	movs	r3, #18
 8011aaa:	18fb      	adds	r3, r7, r3
 8011aac:	8819      	ldrh	r1, [r3, #0]
 8011aae:	68f8      	ldr	r0, [r7, #12]
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	0023      	movs	r3, r4
 8011ab6:	f001 fc67 	bl	8013388 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011aba:	e014      	b.n	8011ae6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	685a      	ldr	r2, [r3, #4]
 8011ac2:	2380      	movs	r3, #128	@ 0x80
 8011ac4:	049b      	lsls	r3, r3, #18
 8011ac6:	401a      	ands	r2, r3
 8011ac8:	2380      	movs	r3, #128	@ 0x80
 8011aca:	049b      	lsls	r3, r3, #18
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d004      	beq.n	8011ada <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	0018      	movs	r0, r3
 8011ad4:	f000 fcf4 	bl	80124c0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011ad8:	e036      	b.n	8011b48 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2140      	movs	r1, #64	@ 0x40
 8011ade:	0018      	movs	r0, r3
 8011ae0:	f000 ffda 	bl	8012a98 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011ae4:	e030      	b.n	8011b48 <I2C_Master_ISR_IT+0x220>
 8011ae6:	e02f      	b.n	8011b48 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	2240      	movs	r2, #64	@ 0x40
 8011aec:	4013      	ands	r3, r2
 8011aee:	d02b      	beq.n	8011b48 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2240      	movs	r2, #64	@ 0x40
 8011af4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8011af6:	d027      	beq.n	8011b48 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d11d      	bne.n	8011b3e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	685a      	ldr	r2, [r3, #4]
 8011b08:	2380      	movs	r3, #128	@ 0x80
 8011b0a:	049b      	lsls	r3, r3, #18
 8011b0c:	401a      	ands	r2, r3
 8011b0e:	2380      	movs	r3, #128	@ 0x80
 8011b10:	049b      	lsls	r3, r3, #18
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d018      	beq.n	8011b48 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b1a:	4a17      	ldr	r2, [pc, #92]	@ (8011b78 <I2C_Master_ISR_IT+0x250>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d109      	bne.n	8011b34 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	685a      	ldr	r2, [r3, #4]
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2180      	movs	r1, #128	@ 0x80
 8011b2c:	01c9      	lsls	r1, r1, #7
 8011b2e:	430a      	orrs	r2, r1
 8011b30:	605a      	str	r2, [r3, #4]
 8011b32:	e009      	b.n	8011b48 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	0018      	movs	r0, r3
 8011b38:	f000 fcc2 	bl	80124c0 <I2C_ITMasterSeqCplt>
 8011b3c:	e004      	b.n	8011b48 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2140      	movs	r1, #64	@ 0x40
 8011b42:	0018      	movs	r0, r3
 8011b44:	f000 ffa8 	bl	8012a98 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	2220      	movs	r2, #32
 8011b4c:	4013      	ands	r3, r2
 8011b4e:	d009      	beq.n	8011b64 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2220      	movs	r2, #32
 8011b54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011b56:	d005      	beq.n	8011b64 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011b58:	697a      	ldr	r2, [r7, #20]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	0011      	movs	r1, r2
 8011b5e:	0018      	movs	r0, r3
 8011b60:	f000 fd54 	bl	801260c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2240      	movs	r2, #64	@ 0x40
 8011b68:	2100      	movs	r1, #0
 8011b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	0018      	movs	r0, r3
 8011b70:	46bd      	mov	sp, r7
 8011b72:	b007      	add	sp, #28
 8011b74:	bd90      	pop	{r4, r7, pc}
 8011b76:	46c0      	nop			@ (mov r8, r8)
 8011b78:	ffff0000 	.word	0xffff0000

08011b7c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b086      	sub	sp, #24
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2240      	movs	r2, #64	@ 0x40
 8011b96:	5c9b      	ldrb	r3, [r3, r2]
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d101      	bne.n	8011ba0 <I2C_Slave_ISR_IT+0x24>
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	e0e6      	b.n	8011d6e <I2C_Slave_ISR_IT+0x1f2>
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2240      	movs	r2, #64	@ 0x40
 8011ba4:	2101      	movs	r1, #1
 8011ba6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	2220      	movs	r2, #32
 8011bac:	4013      	ands	r3, r2
 8011bae:	d009      	beq.n	8011bc4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2220      	movs	r2, #32
 8011bb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011bb6:	d005      	beq.n	8011bc4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011bb8:	693a      	ldr	r2, [r7, #16]
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	0011      	movs	r1, r2
 8011bbe:	0018      	movs	r0, r3
 8011bc0:	f000 fdf2 	bl	80127a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	2210      	movs	r2, #16
 8011bc8:	4013      	ands	r3, r2
 8011bca:	d052      	beq.n	8011c72 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2210      	movs	r2, #16
 8011bd0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011bd2:	d04e      	beq.n	8011c72 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d12d      	bne.n	8011c3a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2241      	movs	r2, #65	@ 0x41
 8011be2:	5c9b      	ldrb	r3, [r3, r2]
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b28      	cmp	r3, #40	@ 0x28
 8011be8:	d10b      	bne.n	8011c02 <I2C_Slave_ISR_IT+0x86>
 8011bea:	697a      	ldr	r2, [r7, #20]
 8011bec:	2380      	movs	r3, #128	@ 0x80
 8011bee:	049b      	lsls	r3, r3, #18
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d106      	bne.n	8011c02 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8011bf4:	693a      	ldr	r2, [r7, #16]
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	0011      	movs	r1, r2
 8011bfa:	0018      	movs	r0, r3
 8011bfc:	f000 fef4 	bl	80129e8 <I2C_ITListenCplt>
 8011c00:	e036      	b.n	8011c70 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2241      	movs	r2, #65	@ 0x41
 8011c06:	5c9b      	ldrb	r3, [r3, r2]
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	2b29      	cmp	r3, #41	@ 0x29
 8011c0c:	d110      	bne.n	8011c30 <I2C_Slave_ISR_IT+0xb4>
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	4a59      	ldr	r2, [pc, #356]	@ (8011d78 <I2C_Slave_ISR_IT+0x1fc>)
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d00c      	beq.n	8011c30 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2210      	movs	r2, #16
 8011c1c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	0018      	movs	r0, r3
 8011c22:	f001 f864 	bl	8012cee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	0018      	movs	r0, r3
 8011c2a:	f000 fc8b 	bl	8012544 <I2C_ITSlaveSeqCplt>
 8011c2e:	e01f      	b.n	8011c70 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2210      	movs	r2, #16
 8011c36:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011c38:	e091      	b.n	8011d5e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2210      	movs	r2, #16
 8011c40:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c46:	2204      	movs	r2, #4
 8011c48:	431a      	orrs	r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d005      	beq.n	8011c60 <I2C_Slave_ISR_IT+0xe4>
 8011c54:	697a      	ldr	r2, [r7, #20]
 8011c56:	2380      	movs	r3, #128	@ 0x80
 8011c58:	045b      	lsls	r3, r3, #17
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d000      	beq.n	8011c60 <I2C_Slave_ISR_IT+0xe4>
 8011c5e:	e07e      	b.n	8011d5e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	0011      	movs	r1, r2
 8011c68:	0018      	movs	r0, r3
 8011c6a:	f000 ff15 	bl	8012a98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011c6e:	e076      	b.n	8011d5e <I2C_Slave_ISR_IT+0x1e2>
 8011c70:	e075      	b.n	8011d5e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	2204      	movs	r2, #4
 8011c76:	4013      	ands	r3, r2
 8011c78:	d02f      	beq.n	8011cda <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2204      	movs	r2, #4
 8011c7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011c80:	d02b      	beq.n	8011cda <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d018      	beq.n	8011cbe <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c96:	b2d2      	uxtb	r2, r2
 8011c98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c9e:	1c5a      	adds	r2, r3, #1
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ca8:	3b01      	subs	r3, #1
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	3b01      	subs	r3, #1
 8011cb8:	b29a      	uxth	r2, r3
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d14c      	bne.n	8011d62 <I2C_Slave_ISR_IT+0x1e6>
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	4a2b      	ldr	r2, [pc, #172]	@ (8011d78 <I2C_Slave_ISR_IT+0x1fc>)
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d048      	beq.n	8011d62 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	0018      	movs	r0, r3
 8011cd4:	f000 fc36 	bl	8012544 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011cd8:	e043      	b.n	8011d62 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	2208      	movs	r2, #8
 8011cde:	4013      	ands	r3, r2
 8011ce0:	d00a      	beq.n	8011cf8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2208      	movs	r2, #8
 8011ce6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011ce8:	d006      	beq.n	8011cf8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8011cea:	693a      	ldr	r2, [r7, #16]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	0011      	movs	r1, r2
 8011cf0:	0018      	movs	r0, r3
 8011cf2:	f000 fb41 	bl	8012378 <I2C_ITAddrCplt>
 8011cf6:	e035      	b.n	8011d64 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	4013      	ands	r3, r2
 8011cfe:	d031      	beq.n	8011d64 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2202      	movs	r2, #2
 8011d04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011d06:	d02d      	beq.n	8011d64 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d018      	beq.n	8011d44 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d16:	781a      	ldrb	r2, [r3, #0]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d22:	1c5a      	adds	r2, r3, #1
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	b29a      	uxth	r2, r3
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011d42:	e00f      	b.n	8011d64 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011d44:	697a      	ldr	r2, [r7, #20]
 8011d46:	2380      	movs	r3, #128	@ 0x80
 8011d48:	045b      	lsls	r3, r3, #17
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d002      	beq.n	8011d54 <I2C_Slave_ISR_IT+0x1d8>
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d107      	bne.n	8011d64 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	0018      	movs	r0, r3
 8011d58:	f000 fbf4 	bl	8012544 <I2C_ITSlaveSeqCplt>
 8011d5c:	e002      	b.n	8011d64 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8011d5e:	46c0      	nop			@ (mov r8, r8)
 8011d60:	e000      	b.n	8011d64 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8011d62:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2240      	movs	r2, #64	@ 0x40
 8011d68:	2100      	movs	r1, #0
 8011d6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	0018      	movs	r0, r3
 8011d70:	46bd      	mov	sp, r7
 8011d72:	b006      	add	sp, #24
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	46c0      	nop			@ (mov r8, r8)
 8011d78:	ffff0000 	.word	0xffff0000

08011d7c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011d7c:	b590      	push	{r4, r7, lr}
 8011d7e:	b089      	sub	sp, #36	@ 0x24
 8011d80:	af02      	add	r7, sp, #8
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2240      	movs	r2, #64	@ 0x40
 8011d8c:	5c9b      	ldrb	r3, [r3, r2]
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d101      	bne.n	8011d96 <I2C_Master_ISR_DMA+0x1a>
 8011d92:	2302      	movs	r3, #2
 8011d94:	e0e7      	b.n	8011f66 <I2C_Master_ISR_DMA+0x1ea>
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2240      	movs	r2, #64	@ 0x40
 8011d9a:	2101      	movs	r1, #1
 8011d9c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	2210      	movs	r2, #16
 8011da2:	4013      	ands	r3, r2
 8011da4:	d017      	beq.n	8011dd6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2210      	movs	r2, #16
 8011daa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011dac:	d013      	beq.n	8011dd6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2210      	movs	r2, #16
 8011db4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dba:	2204      	movs	r2, #4
 8011dbc:	431a      	orrs	r2, r3
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2120      	movs	r1, #32
 8011dc6:	0018      	movs	r0, r3
 8011dc8:	f001 fb18 	bl	80133fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	0018      	movs	r0, r3
 8011dd0:	f000 ff8d 	bl	8012cee <I2C_Flush_TXDR>
 8011dd4:	e0c2      	b.n	8011f5c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	2280      	movs	r2, #128	@ 0x80
 8011dda:	4013      	ands	r3, r2
 8011ddc:	d100      	bne.n	8011de0 <I2C_Master_ISR_DMA+0x64>
 8011dde:	e07c      	b.n	8011eda <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2240      	movs	r2, #64	@ 0x40
 8011de4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011de6:	d100      	bne.n	8011dea <I2C_Master_ISR_DMA+0x6e>
 8011de8:	e077      	b.n	8011eda <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2140      	movs	r1, #64	@ 0x40
 8011df6:	438a      	bics	r2, r1
 8011df8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d055      	beq.n	8011eb0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	2312      	movs	r3, #18
 8011e0e:	18fb      	adds	r3, r7, r3
 8011e10:	0592      	lsls	r2, r2, #22
 8011e12:	0d92      	lsrs	r2, r2, #22
 8011e14:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	2bff      	cmp	r3, #255	@ 0xff
 8011e1e:	d906      	bls.n	8011e2e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	22ff      	movs	r2, #255	@ 0xff
 8011e24:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8011e26:	2380      	movs	r3, #128	@ 0x80
 8011e28:	045b      	lsls	r3, r3, #17
 8011e2a:	617b      	str	r3, [r7, #20]
 8011e2c:	e010      	b.n	8011e50 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8011f70 <I2C_Master_ISR_DMA+0x1f4>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d003      	beq.n	8011e4a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e46:	617b      	str	r3, [r7, #20]
 8011e48:	e002      	b.n	8011e50 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011e4a:	2380      	movs	r3, #128	@ 0x80
 8011e4c:	049b      	lsls	r3, r3, #18
 8011e4e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e54:	b2da      	uxtb	r2, r3
 8011e56:	697c      	ldr	r4, [r7, #20]
 8011e58:	2312      	movs	r3, #18
 8011e5a:	18fb      	adds	r3, r7, r3
 8011e5c:	8819      	ldrh	r1, [r3, #0]
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	2300      	movs	r3, #0
 8011e62:	9300      	str	r3, [sp, #0]
 8011e64:	0023      	movs	r3, r4
 8011e66:	f001 fa8f 	bl	8013388 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2241      	movs	r2, #65	@ 0x41
 8011e80:	5c9b      	ldrb	r3, [r3, r2]
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	2b22      	cmp	r3, #34	@ 0x22
 8011e86:	d109      	bne.n	8011e9c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2180      	movs	r1, #128	@ 0x80
 8011e94:	0209      	lsls	r1, r1, #8
 8011e96:	430a      	orrs	r2, r1
 8011e98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011e9a:	e05f      	b.n	8011f5c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2180      	movs	r1, #128	@ 0x80
 8011ea8:	01c9      	lsls	r1, r1, #7
 8011eaa:	430a      	orrs	r2, r1
 8011eac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011eae:	e055      	b.n	8011f5c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	685a      	ldr	r2, [r3, #4]
 8011eb6:	2380      	movs	r3, #128	@ 0x80
 8011eb8:	049b      	lsls	r3, r3, #18
 8011eba:	401a      	ands	r2, r3
 8011ebc:	2380      	movs	r3, #128	@ 0x80
 8011ebe:	049b      	lsls	r3, r3, #18
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d004      	beq.n	8011ece <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	0018      	movs	r0, r3
 8011ec8:	f000 fafa 	bl	80124c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011ecc:	e046      	b.n	8011f5c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2140      	movs	r1, #64	@ 0x40
 8011ed2:	0018      	movs	r0, r3
 8011ed4:	f000 fde0 	bl	8012a98 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011ed8:	e040      	b.n	8011f5c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	2240      	movs	r2, #64	@ 0x40
 8011ede:	4013      	ands	r3, r2
 8011ee0:	d02c      	beq.n	8011f3c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2240      	movs	r2, #64	@ 0x40
 8011ee6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011ee8:	d028      	beq.n	8011f3c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d11d      	bne.n	8011f30 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	685a      	ldr	r2, [r3, #4]
 8011efa:	2380      	movs	r3, #128	@ 0x80
 8011efc:	049b      	lsls	r3, r3, #18
 8011efe:	401a      	ands	r2, r3
 8011f00:	2380      	movs	r3, #128	@ 0x80
 8011f02:	049b      	lsls	r3, r3, #18
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d028      	beq.n	8011f5a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f0c:	4a18      	ldr	r2, [pc, #96]	@ (8011f70 <I2C_Master_ISR_DMA+0x1f4>)
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d109      	bne.n	8011f26 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	685a      	ldr	r2, [r3, #4]
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2180      	movs	r1, #128	@ 0x80
 8011f1e:	01c9      	lsls	r1, r1, #7
 8011f20:	430a      	orrs	r2, r1
 8011f22:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8011f24:	e019      	b.n	8011f5a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	0018      	movs	r0, r3
 8011f2a:	f000 fac9 	bl	80124c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011f2e:	e014      	b.n	8011f5a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2140      	movs	r1, #64	@ 0x40
 8011f34:	0018      	movs	r0, r3
 8011f36:	f000 fdaf 	bl	8012a98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011f3a:	e00e      	b.n	8011f5a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	2220      	movs	r2, #32
 8011f40:	4013      	ands	r3, r2
 8011f42:	d00b      	beq.n	8011f5c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2220      	movs	r2, #32
 8011f48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011f4a:	d007      	beq.n	8011f5c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011f4c:	68ba      	ldr	r2, [r7, #8]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	0011      	movs	r1, r2
 8011f52:	0018      	movs	r0, r3
 8011f54:	f000 fb5a 	bl	801260c <I2C_ITMasterCplt>
 8011f58:	e000      	b.n	8011f5c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011f5a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2240      	movs	r2, #64	@ 0x40
 8011f60:	2100      	movs	r1, #0
 8011f62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011f64:	2300      	movs	r3, #0
}
 8011f66:	0018      	movs	r0, r3
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	b007      	add	sp, #28
 8011f6c:	bd90      	pop	{r4, r7, pc}
 8011f6e:	46c0      	nop			@ (mov r8, r8)
 8011f70:	ffff0000 	.word	0xffff0000

08011f74 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011f74:	b590      	push	{r4, r7, lr}
 8011f76:	b089      	sub	sp, #36	@ 0x24
 8011f78:	af02      	add	r7, sp, #8
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8011f80:	4b88      	ldr	r3, [pc, #544]	@ (80121a4 <I2C_Mem_ISR_DMA+0x230>)
 8011f82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2240      	movs	r2, #64	@ 0x40
 8011f88:	5c9b      	ldrb	r3, [r3, r2]
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d101      	bne.n	8011f92 <I2C_Mem_ISR_DMA+0x1e>
 8011f8e:	2302      	movs	r3, #2
 8011f90:	e104      	b.n	801219c <I2C_Mem_ISR_DMA+0x228>
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2240      	movs	r2, #64	@ 0x40
 8011f96:	2101      	movs	r1, #1
 8011f98:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	2210      	movs	r2, #16
 8011f9e:	4013      	ands	r3, r2
 8011fa0:	d017      	beq.n	8011fd2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2210      	movs	r2, #16
 8011fa6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011fa8:	d013      	beq.n	8011fd2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	2210      	movs	r2, #16
 8011fb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fb6:	2204      	movs	r2, #4
 8011fb8:	431a      	orrs	r2, r3
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2120      	movs	r1, #32
 8011fc2:	0018      	movs	r0, r3
 8011fc4:	f001 fa1a 	bl	80133fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	0018      	movs	r0, r3
 8011fcc:	f000 fe8f 	bl	8012cee <I2C_Flush_TXDR>
 8011fd0:	e0df      	b.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	2202      	movs	r2, #2
 8011fd6:	4013      	ands	r3, r2
 8011fd8:	d00d      	beq.n	8011ff6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2202      	movs	r2, #2
 8011fde:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011fe0:	d009      	beq.n	8011ff6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011fea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2201      	movs	r2, #1
 8011ff0:	4252      	negs	r2, r2
 8011ff2:	651a      	str	r2, [r3, #80]	@ 0x50
 8011ff4:	e0cd      	b.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	2280      	movs	r2, #128	@ 0x80
 8011ffa:	4013      	ands	r3, r2
 8011ffc:	d05e      	beq.n	80120bc <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2240      	movs	r2, #64	@ 0x40
 8012002:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8012004:	d05a      	beq.n	80120bc <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2110      	movs	r1, #16
 801200a:	0018      	movs	r0, r3
 801200c:	f001 f9f6 	bl	80133fc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012014:	b29b      	uxth	r3, r3
 8012016:	2b00      	cmp	r3, #0
 8012018:	d04a      	beq.n	80120b0 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801201e:	b29b      	uxth	r3, r3
 8012020:	2bff      	cmp	r3, #255	@ 0xff
 8012022:	d910      	bls.n	8012046 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	22ff      	movs	r2, #255	@ 0xff
 8012028:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801202e:	b299      	uxth	r1, r3
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012034:	b2da      	uxtb	r2, r3
 8012036:	2380      	movs	r3, #128	@ 0x80
 8012038:	045b      	lsls	r3, r3, #17
 801203a:	68f8      	ldr	r0, [r7, #12]
 801203c:	2400      	movs	r4, #0
 801203e:	9400      	str	r4, [sp, #0]
 8012040:	f001 f9a2 	bl	8013388 <I2C_TransferConfig>
 8012044:	e011      	b.n	801206a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801204a:	b29a      	uxth	r2, r3
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012054:	b299      	uxth	r1, r3
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801205a:	b2da      	uxtb	r2, r3
 801205c:	2380      	movs	r3, #128	@ 0x80
 801205e:	049b      	lsls	r3, r3, #18
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	2400      	movs	r4, #0
 8012064:	9400      	str	r4, [sp, #0]
 8012066:	f001 f98f 	bl	8013388 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801206e:	b29a      	uxth	r2, r3
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012074:	1ad3      	subs	r3, r2, r3
 8012076:	b29a      	uxth	r2, r3
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2241      	movs	r2, #65	@ 0x41
 8012080:	5c9b      	ldrb	r3, [r3, r2]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	2b22      	cmp	r3, #34	@ 0x22
 8012086:	d109      	bne.n	801209c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2180      	movs	r1, #128	@ 0x80
 8012094:	0209      	lsls	r1, r1, #8
 8012096:	430a      	orrs	r2, r1
 8012098:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801209a:	e07a      	b.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2180      	movs	r1, #128	@ 0x80
 80120a8:	01c9      	lsls	r1, r1, #7
 80120aa:	430a      	orrs	r2, r1
 80120ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80120ae:	e070      	b.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	2140      	movs	r1, #64	@ 0x40
 80120b4:	0018      	movs	r0, r3
 80120b6:	f000 fcef 	bl	8012a98 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80120ba:	e06a      	b.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	2240      	movs	r2, #64	@ 0x40
 80120c0:	4013      	ands	r3, r2
 80120c2:	d058      	beq.n	8012176 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2240      	movs	r2, #64	@ 0x40
 80120c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80120ca:	d054      	beq.n	8012176 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2241      	movs	r2, #65	@ 0x41
 80120d0:	5c9b      	ldrb	r3, [r3, r2]
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	2b22      	cmp	r3, #34	@ 0x22
 80120d6:	d101      	bne.n	80120dc <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80120d8:	4b33      	ldr	r3, [pc, #204]	@ (80121a8 <I2C_Mem_ISR_DMA+0x234>)
 80120da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120e0:	b29b      	uxth	r3, r3
 80120e2:	2bff      	cmp	r3, #255	@ 0xff
 80120e4:	d911      	bls.n	801210a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	22ff      	movs	r2, #255	@ 0xff
 80120ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120f0:	b299      	uxth	r1, r3
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120f6:	b2da      	uxtb	r2, r3
 80120f8:	2380      	movs	r3, #128	@ 0x80
 80120fa:	045c      	lsls	r4, r3, #17
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	0023      	movs	r3, r4
 8012104:	f001 f940 	bl	8013388 <I2C_TransferConfig>
 8012108:	e012      	b.n	8012130 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801210e:	b29a      	uxth	r2, r3
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012118:	b299      	uxth	r1, r3
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801211e:	b2da      	uxtb	r2, r3
 8012120:	2380      	movs	r3, #128	@ 0x80
 8012122:	049c      	lsls	r4, r3, #18
 8012124:	68f8      	ldr	r0, [r7, #12]
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	9300      	str	r3, [sp, #0]
 801212a:	0023      	movs	r3, r4
 801212c:	f001 f92c 	bl	8013388 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012134:	b29a      	uxth	r2, r3
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	b29a      	uxth	r2, r3
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2241      	movs	r2, #65	@ 0x41
 8012146:	5c9b      	ldrb	r3, [r3, r2]
 8012148:	b2db      	uxtb	r3, r3
 801214a:	2b22      	cmp	r3, #34	@ 0x22
 801214c:	d109      	bne.n	8012162 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2180      	movs	r1, #128	@ 0x80
 801215a:	0209      	lsls	r1, r1, #8
 801215c:	430a      	orrs	r2, r1
 801215e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012160:	e017      	b.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2180      	movs	r1, #128	@ 0x80
 801216e:	01c9      	lsls	r1, r1, #7
 8012170:	430a      	orrs	r2, r1
 8012172:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012174:	e00d      	b.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	2220      	movs	r2, #32
 801217a:	4013      	ands	r3, r2
 801217c:	d009      	beq.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2220      	movs	r2, #32
 8012182:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8012184:	d005      	beq.n	8012192 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	0011      	movs	r1, r2
 801218c:	0018      	movs	r0, r3
 801218e:	f000 fa3d 	bl	801260c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2240      	movs	r2, #64	@ 0x40
 8012196:	2100      	movs	r1, #0
 8012198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801219a:	2300      	movs	r3, #0
}
 801219c:	0018      	movs	r0, r3
 801219e:	46bd      	mov	sp, r7
 80121a0:	b007      	add	sp, #28
 80121a2:	bd90      	pop	{r4, r7, pc}
 80121a4:	80002000 	.word	0x80002000
 80121a8:	80002400 	.word	0x80002400

080121ac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b088      	sub	sp, #32
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	60b9      	str	r1, [r7, #8]
 80121b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80121be:	2300      	movs	r3, #0
 80121c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2240      	movs	r2, #64	@ 0x40
 80121c6:	5c9b      	ldrb	r3, [r3, r2]
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d101      	bne.n	80121d0 <I2C_Slave_ISR_DMA+0x24>
 80121cc:	2302      	movs	r3, #2
 80121ce:	e0cd      	b.n	801236c <I2C_Slave_ISR_DMA+0x1c0>
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2240      	movs	r2, #64	@ 0x40
 80121d4:	2101      	movs	r1, #1
 80121d6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	2220      	movs	r2, #32
 80121dc:	4013      	ands	r3, r2
 80121de:	d009      	beq.n	80121f4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2220      	movs	r2, #32
 80121e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80121e6:	d005      	beq.n	80121f4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80121e8:	68ba      	ldr	r2, [r7, #8]
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	0011      	movs	r1, r2
 80121ee:	0018      	movs	r0, r3
 80121f0:	f000 fada 	bl	80127a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	2210      	movs	r2, #16
 80121f8:	4013      	ands	r3, r2
 80121fa:	d100      	bne.n	80121fe <I2C_Slave_ISR_DMA+0x52>
 80121fc:	e0a3      	b.n	8012346 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2210      	movs	r2, #16
 8012202:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8012204:	d100      	bne.n	8012208 <I2C_Slave_ISR_DMA+0x5c>
 8012206:	e09e      	b.n	8012346 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	2380      	movs	r3, #128	@ 0x80
 801220c:	01db      	lsls	r3, r3, #7
 801220e:	4013      	ands	r3, r2
 8012210:	d105      	bne.n	801221e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	2380      	movs	r3, #128	@ 0x80
 8012216:	021b      	lsls	r3, r3, #8
 8012218:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801221a:	d100      	bne.n	801221e <I2C_Slave_ISR_DMA+0x72>
 801221c:	e08c      	b.n	8012338 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012222:	2b00      	cmp	r3, #0
 8012224:	d00c      	beq.n	8012240 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	2380      	movs	r3, #128	@ 0x80
 801222a:	021b      	lsls	r3, r3, #8
 801222c:	4013      	ands	r3, r2
 801222e:	d007      	beq.n	8012240 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d101      	bne.n	8012240 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 801223c:	2301      	movs	r3, #1
 801223e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012244:	2b00      	cmp	r3, #0
 8012246:	d00c      	beq.n	8012262 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	2380      	movs	r3, #128	@ 0x80
 801224c:	01db      	lsls	r3, r3, #7
 801224e:	4013      	ands	r3, r2
 8012250:	d007      	beq.n	8012262 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d101      	bne.n	8012262 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 801225e:	2301      	movs	r3, #1
 8012260:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d12d      	bne.n	80122c4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2241      	movs	r2, #65	@ 0x41
 801226c:	5c9b      	ldrb	r3, [r3, r2]
 801226e:	b2db      	uxtb	r3, r3
 8012270:	2b28      	cmp	r3, #40	@ 0x28
 8012272:	d10b      	bne.n	801228c <I2C_Slave_ISR_DMA+0xe0>
 8012274:	69ba      	ldr	r2, [r7, #24]
 8012276:	2380      	movs	r3, #128	@ 0x80
 8012278:	049b      	lsls	r3, r3, #18
 801227a:	429a      	cmp	r2, r3
 801227c:	d106      	bne.n	801228c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801227e:	68ba      	ldr	r2, [r7, #8]
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	0011      	movs	r1, r2
 8012284:	0018      	movs	r0, r3
 8012286:	f000 fbaf 	bl	80129e8 <I2C_ITListenCplt>
 801228a:	e054      	b.n	8012336 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2241      	movs	r2, #65	@ 0x41
 8012290:	5c9b      	ldrb	r3, [r3, r2]
 8012292:	b2db      	uxtb	r3, r3
 8012294:	2b29      	cmp	r3, #41	@ 0x29
 8012296:	d110      	bne.n	80122ba <I2C_Slave_ISR_DMA+0x10e>
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	4a36      	ldr	r2, [pc, #216]	@ (8012374 <I2C_Slave_ISR_DMA+0x1c8>)
 801229c:	4293      	cmp	r3, r2
 801229e:	d00c      	beq.n	80122ba <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	2210      	movs	r2, #16
 80122a6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	0018      	movs	r0, r3
 80122ac:	f000 fd1f 	bl	8012cee <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	0018      	movs	r0, r3
 80122b4:	f000 f946 	bl	8012544 <I2C_ITSlaveSeqCplt>
 80122b8:	e03d      	b.n	8012336 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	2210      	movs	r2, #16
 80122c0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80122c2:	e03e      	b.n	8012342 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	2210      	movs	r2, #16
 80122ca:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122d0:	2204      	movs	r2, #4
 80122d2:	431a      	orrs	r2, r3
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80122d8:	2317      	movs	r3, #23
 80122da:	18fb      	adds	r3, r7, r3
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	2141      	movs	r1, #65	@ 0x41
 80122e0:	5c52      	ldrb	r2, [r2, r1]
 80122e2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d004      	beq.n	80122f4 <I2C_Slave_ISR_DMA+0x148>
 80122ea:	69ba      	ldr	r2, [r7, #24]
 80122ec:	2380      	movs	r3, #128	@ 0x80
 80122ee:	045b      	lsls	r3, r3, #17
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d126      	bne.n	8012342 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80122f4:	2217      	movs	r2, #23
 80122f6:	18bb      	adds	r3, r7, r2
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2b21      	cmp	r3, #33	@ 0x21
 80122fc:	d003      	beq.n	8012306 <I2C_Slave_ISR_DMA+0x15a>
 80122fe:	18bb      	adds	r3, r7, r2
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	2b29      	cmp	r3, #41	@ 0x29
 8012304:	d103      	bne.n	801230e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2221      	movs	r2, #33	@ 0x21
 801230a:	631a      	str	r2, [r3, #48]	@ 0x30
 801230c:	e00b      	b.n	8012326 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801230e:	2217      	movs	r2, #23
 8012310:	18bb      	adds	r3, r7, r2
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	2b22      	cmp	r3, #34	@ 0x22
 8012316:	d003      	beq.n	8012320 <I2C_Slave_ISR_DMA+0x174>
 8012318:	18bb      	adds	r3, r7, r2
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b2a      	cmp	r3, #42	@ 0x2a
 801231e:	d102      	bne.n	8012326 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2222      	movs	r2, #34	@ 0x22
 8012324:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	0011      	movs	r1, r2
 801232e:	0018      	movs	r0, r3
 8012330:	f000 fbb2 	bl	8012a98 <I2C_ITError>
      if (treatdmanack == 1U)
 8012334:	e005      	b.n	8012342 <I2C_Slave_ISR_DMA+0x196>
 8012336:	e004      	b.n	8012342 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2210      	movs	r2, #16
 801233e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8012340:	e00f      	b.n	8012362 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8012342:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8012344:	e00d      	b.n	8012362 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	2208      	movs	r2, #8
 801234a:	4013      	ands	r3, r2
 801234c:	d009      	beq.n	8012362 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2208      	movs	r2, #8
 8012352:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8012354:	d005      	beq.n	8012362 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8012356:	68ba      	ldr	r2, [r7, #8]
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	0011      	movs	r1, r2
 801235c:	0018      	movs	r0, r3
 801235e:	f000 f80b 	bl	8012378 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2240      	movs	r2, #64	@ 0x40
 8012366:	2100      	movs	r1, #0
 8012368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801236a:	2300      	movs	r3, #0
}
 801236c:	0018      	movs	r0, r3
 801236e:	46bd      	mov	sp, r7
 8012370:	b008      	add	sp, #32
 8012372:	bd80      	pop	{r7, pc}
 8012374:	ffff0000 	.word	0xffff0000

08012378 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012378:	b5b0      	push	{r4, r5, r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2241      	movs	r2, #65	@ 0x41
 8012386:	5c9b      	ldrb	r3, [r3, r2]
 8012388:	b2db      	uxtb	r3, r3
 801238a:	001a      	movs	r2, r3
 801238c:	2328      	movs	r3, #40	@ 0x28
 801238e:	4013      	ands	r3, r2
 8012390:	2b28      	cmp	r3, #40	@ 0x28
 8012392:	d000      	beq.n	8012396 <I2C_ITAddrCplt+0x1e>
 8012394:	e088      	b.n	80124a8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	699b      	ldr	r3, [r3, #24]
 801239c:	0c1b      	lsrs	r3, r3, #16
 801239e:	b2da      	uxtb	r2, r3
 80123a0:	250f      	movs	r5, #15
 80123a2:	197b      	adds	r3, r7, r5
 80123a4:	2101      	movs	r1, #1
 80123a6:	400a      	ands	r2, r1
 80123a8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	699b      	ldr	r3, [r3, #24]
 80123b0:	0c1b      	lsrs	r3, r3, #16
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	200c      	movs	r0, #12
 80123b6:	183b      	adds	r3, r7, r0
 80123b8:	21fe      	movs	r1, #254	@ 0xfe
 80123ba:	400a      	ands	r2, r1
 80123bc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	689b      	ldr	r3, [r3, #8]
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	240a      	movs	r4, #10
 80123c8:	193b      	adds	r3, r7, r4
 80123ca:	0592      	lsls	r2, r2, #22
 80123cc:	0d92      	lsrs	r2, r2, #22
 80123ce:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	2308      	movs	r3, #8
 80123da:	18fb      	adds	r3, r7, r3
 80123dc:	21fe      	movs	r1, #254	@ 0xfe
 80123de:	400a      	ands	r2, r1
 80123e0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	68db      	ldr	r3, [r3, #12]
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	d148      	bne.n	801247c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80123ea:	0021      	movs	r1, r4
 80123ec:	187b      	adds	r3, r7, r1
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	09db      	lsrs	r3, r3, #7
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	183b      	adds	r3, r7, r0
 80123f6:	881b      	ldrh	r3, [r3, #0]
 80123f8:	4053      	eors	r3, r2
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	001a      	movs	r2, r3
 80123fe:	2306      	movs	r3, #6
 8012400:	4013      	ands	r3, r2
 8012402:	d120      	bne.n	8012446 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8012404:	183b      	adds	r3, r7, r0
 8012406:	187a      	adds	r2, r7, r1
 8012408:	8812      	ldrh	r2, [r2, #0]
 801240a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012410:	1c5a      	adds	r2, r3, #1
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801241a:	2b02      	cmp	r3, #2
 801241c:	d14c      	bne.n	80124b8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2200      	movs	r2, #0
 8012422:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2208      	movs	r2, #8
 801242a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2240      	movs	r2, #64	@ 0x40
 8012430:	2100      	movs	r1, #0
 8012432:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8012434:	183b      	adds	r3, r7, r0
 8012436:	881a      	ldrh	r2, [r3, #0]
 8012438:	197b      	adds	r3, r7, r5
 801243a:	7819      	ldrb	r1, [r3, #0]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	0018      	movs	r0, r3
 8012440:	f7ff fa39 	bl	80118b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8012444:	e038      	b.n	80124b8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8012446:	240c      	movs	r4, #12
 8012448:	193b      	adds	r3, r7, r4
 801244a:	2208      	movs	r2, #8
 801244c:	18ba      	adds	r2, r7, r2
 801244e:	8812      	ldrh	r2, [r2, #0]
 8012450:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8012452:	2380      	movs	r3, #128	@ 0x80
 8012454:	021a      	lsls	r2, r3, #8
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	0011      	movs	r1, r2
 801245a:	0018      	movs	r0, r3
 801245c:	f001 f85c 	bl	8013518 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2240      	movs	r2, #64	@ 0x40
 8012464:	2100      	movs	r1, #0
 8012466:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8012468:	193b      	adds	r3, r7, r4
 801246a:	881a      	ldrh	r2, [r3, #0]
 801246c:	230f      	movs	r3, #15
 801246e:	18fb      	adds	r3, r7, r3
 8012470:	7819      	ldrb	r1, [r3, #0]
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	0018      	movs	r0, r3
 8012476:	f7ff fa1e 	bl	80118b6 <HAL_I2C_AddrCallback>
}
 801247a:	e01d      	b.n	80124b8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801247c:	2380      	movs	r3, #128	@ 0x80
 801247e:	021a      	lsls	r2, r3, #8
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	0011      	movs	r1, r2
 8012484:	0018      	movs	r0, r3
 8012486:	f001 f847 	bl	8013518 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2240      	movs	r2, #64	@ 0x40
 801248e:	2100      	movs	r1, #0
 8012490:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8012492:	230c      	movs	r3, #12
 8012494:	18fb      	adds	r3, r7, r3
 8012496:	881a      	ldrh	r2, [r3, #0]
 8012498:	230f      	movs	r3, #15
 801249a:	18fb      	adds	r3, r7, r3
 801249c:	7819      	ldrb	r1, [r3, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	0018      	movs	r0, r3
 80124a2:	f7ff fa08 	bl	80118b6 <HAL_I2C_AddrCallback>
}
 80124a6:	e007      	b.n	80124b8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	2208      	movs	r2, #8
 80124ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2240      	movs	r2, #64	@ 0x40
 80124b4:	2100      	movs	r1, #0
 80124b6:	5499      	strb	r1, [r3, r2]
}
 80124b8:	46c0      	nop			@ (mov r8, r8)
 80124ba:	46bd      	mov	sp, r7
 80124bc:	b004      	add	sp, #16
 80124be:	bdb0      	pop	{r4, r5, r7, pc}

080124c0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2242      	movs	r2, #66	@ 0x42
 80124cc:	2100      	movs	r1, #0
 80124ce:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2241      	movs	r2, #65	@ 0x41
 80124d4:	5c9b      	ldrb	r3, [r3, r2]
 80124d6:	b2db      	uxtb	r3, r3
 80124d8:	2b21      	cmp	r3, #33	@ 0x21
 80124da:	d117      	bne.n	801250c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2241      	movs	r2, #65	@ 0x41
 80124e0:	2120      	movs	r1, #32
 80124e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2211      	movs	r2, #17
 80124e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2200      	movs	r2, #0
 80124ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2101      	movs	r1, #1
 80124f4:	0018      	movs	r0, r3
 80124f6:	f001 f80f 	bl	8013518 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2240      	movs	r2, #64	@ 0x40
 80124fe:	2100      	movs	r1, #0
 8012500:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	0018      	movs	r0, r3
 8012506:	f7ff f9b6 	bl	8011876 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801250a:	e016      	b.n	801253a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2241      	movs	r2, #65	@ 0x41
 8012510:	2120      	movs	r1, #32
 8012512:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2212      	movs	r2, #18
 8012518:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2102      	movs	r1, #2
 8012524:	0018      	movs	r0, r3
 8012526:	f000 fff7 	bl	8013518 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2240      	movs	r2, #64	@ 0x40
 801252e:	2100      	movs	r1, #0
 8012530:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	0018      	movs	r0, r3
 8012536:	f7ff f9a6 	bl	8011886 <HAL_I2C_MasterRxCpltCallback>
}
 801253a:	46c0      	nop			@ (mov r8, r8)
 801253c:	46bd      	mov	sp, r7
 801253e:	b002      	add	sp, #8
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2242      	movs	r2, #66	@ 0x42
 8012558:	2100      	movs	r1, #0
 801255a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801255c:	68fa      	ldr	r2, [r7, #12]
 801255e:	2380      	movs	r3, #128	@ 0x80
 8012560:	01db      	lsls	r3, r3, #7
 8012562:	4013      	ands	r3, r2
 8012564:	d008      	beq.n	8012578 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4924      	ldr	r1, [pc, #144]	@ (8012604 <I2C_ITSlaveSeqCplt+0xc0>)
 8012572:	400a      	ands	r2, r1
 8012574:	601a      	str	r2, [r3, #0]
 8012576:	e00c      	b.n	8012592 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	2380      	movs	r3, #128	@ 0x80
 801257c:	021b      	lsls	r3, r3, #8
 801257e:	4013      	ands	r3, r2
 8012580:	d007      	beq.n	8012592 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	491e      	ldr	r1, [pc, #120]	@ (8012608 <I2C_ITSlaveSeqCplt+0xc4>)
 801258e:	400a      	ands	r2, r1
 8012590:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2241      	movs	r2, #65	@ 0x41
 8012596:	5c9b      	ldrb	r3, [r3, r2]
 8012598:	b2db      	uxtb	r3, r3
 801259a:	2b29      	cmp	r3, #41	@ 0x29
 801259c:	d114      	bne.n	80125c8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2241      	movs	r2, #65	@ 0x41
 80125a2:	2128      	movs	r1, #40	@ 0x28
 80125a4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2221      	movs	r2, #33	@ 0x21
 80125aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2101      	movs	r1, #1
 80125b0:	0018      	movs	r0, r3
 80125b2:	f000 ffb1 	bl	8013518 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2240      	movs	r2, #64	@ 0x40
 80125ba:	2100      	movs	r1, #0
 80125bc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	0018      	movs	r0, r3
 80125c2:	f7ff f968 	bl	8011896 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80125c6:	e019      	b.n	80125fc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2241      	movs	r2, #65	@ 0x41
 80125cc:	5c9b      	ldrb	r3, [r3, r2]
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80125d2:	d113      	bne.n	80125fc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2241      	movs	r2, #65	@ 0x41
 80125d8:	2128      	movs	r1, #40	@ 0x28
 80125da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2222      	movs	r2, #34	@ 0x22
 80125e0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2102      	movs	r1, #2
 80125e6:	0018      	movs	r0, r3
 80125e8:	f000 ff96 	bl	8013518 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2240      	movs	r2, #64	@ 0x40
 80125f0:	2100      	movs	r1, #0
 80125f2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	0018      	movs	r0, r3
 80125f8:	f7ff f955 	bl	80118a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80125fc:	46c0      	nop			@ (mov r8, r8)
 80125fe:	46bd      	mov	sp, r7
 8012600:	b004      	add	sp, #16
 8012602:	bd80      	pop	{r7, pc}
 8012604:	ffffbfff 	.word	0xffffbfff
 8012608:	ffff7fff 	.word	0xffff7fff

0801260c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b086      	sub	sp, #24
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2220      	movs	r2, #32
 8012620:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2241      	movs	r2, #65	@ 0x41
 8012626:	5c9b      	ldrb	r3, [r3, r2]
 8012628:	b2db      	uxtb	r3, r3
 801262a:	2b21      	cmp	r3, #33	@ 0x21
 801262c:	d108      	bne.n	8012640 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2101      	movs	r1, #1
 8012632:	0018      	movs	r0, r3
 8012634:	f000 ff70 	bl	8013518 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2211      	movs	r2, #17
 801263c:	631a      	str	r2, [r3, #48]	@ 0x30
 801263e:	e00d      	b.n	801265c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2241      	movs	r2, #65	@ 0x41
 8012644:	5c9b      	ldrb	r3, [r3, r2]
 8012646:	b2db      	uxtb	r3, r3
 8012648:	2b22      	cmp	r3, #34	@ 0x22
 801264a:	d107      	bne.n	801265c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2102      	movs	r1, #2
 8012650:	0018      	movs	r0, r3
 8012652:	f000 ff61 	bl	8013518 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2212      	movs	r2, #18
 801265a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	685a      	ldr	r2, [r3, #4]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	494e      	ldr	r1, [pc, #312]	@ (80127a0 <I2C_ITMasterCplt+0x194>)
 8012668:	400a      	ands	r2, r1
 801266a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4a4b      	ldr	r2, [pc, #300]	@ (80127a4 <I2C_ITMasterCplt+0x198>)
 8012676:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	2210      	movs	r2, #16
 801267c:	4013      	ands	r3, r2
 801267e:	d009      	beq.n	8012694 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	2210      	movs	r2, #16
 8012686:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801268c:	2204      	movs	r2, #4
 801268e:	431a      	orrs	r2, r3
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2241      	movs	r2, #65	@ 0x41
 8012698:	5c9b      	ldrb	r3, [r3, r2]
 801269a:	b2db      	uxtb	r3, r3
 801269c:	2b60      	cmp	r3, #96	@ 0x60
 801269e:	d109      	bne.n	80126b4 <I2C_ITMasterCplt+0xa8>
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	2204      	movs	r2, #4
 80126a4:	4013      	ands	r3, r2
 80126a6:	d005      	beq.n	80126b4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80126b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	0018      	movs	r0, r3
 80126b8:	f000 fb19 	bl	8012cee <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126c0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2241      	movs	r2, #65	@ 0x41
 80126c6:	5c9b      	ldrb	r3, [r3, r2]
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	2b60      	cmp	r3, #96	@ 0x60
 80126cc:	d002      	beq.n	80126d4 <I2C_ITMasterCplt+0xc8>
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d007      	beq.n	80126e4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	0011      	movs	r1, r2
 80126dc:	0018      	movs	r0, r3
 80126de:	f000 f9db 	bl	8012a98 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80126e2:	e058      	b.n	8012796 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2241      	movs	r2, #65	@ 0x41
 80126e8:	5c9b      	ldrb	r3, [r3, r2]
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	2b21      	cmp	r3, #33	@ 0x21
 80126ee:	d126      	bne.n	801273e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2241      	movs	r2, #65	@ 0x41
 80126f4:	2120      	movs	r1, #32
 80126f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2200      	movs	r2, #0
 80126fc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2242      	movs	r2, #66	@ 0x42
 8012702:	5c9b      	ldrb	r3, [r3, r2]
 8012704:	b2db      	uxtb	r3, r3
 8012706:	2b40      	cmp	r3, #64	@ 0x40
 8012708:	d10c      	bne.n	8012724 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2242      	movs	r2, #66	@ 0x42
 801270e:	2100      	movs	r1, #0
 8012710:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2240      	movs	r2, #64	@ 0x40
 8012716:	2100      	movs	r1, #0
 8012718:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	0018      	movs	r0, r3
 801271e:	f7ff f8e2 	bl	80118e6 <HAL_I2C_MemTxCpltCallback>
}
 8012722:	e038      	b.n	8012796 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2242      	movs	r2, #66	@ 0x42
 8012728:	2100      	movs	r1, #0
 801272a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2240      	movs	r2, #64	@ 0x40
 8012730:	2100      	movs	r1, #0
 8012732:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	0018      	movs	r0, r3
 8012738:	f7ff f89d 	bl	8011876 <HAL_I2C_MasterTxCpltCallback>
}
 801273c:	e02b      	b.n	8012796 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2241      	movs	r2, #65	@ 0x41
 8012742:	5c9b      	ldrb	r3, [r3, r2]
 8012744:	b2db      	uxtb	r3, r3
 8012746:	2b22      	cmp	r3, #34	@ 0x22
 8012748:	d125      	bne.n	8012796 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2241      	movs	r2, #65	@ 0x41
 801274e:	2120      	movs	r1, #32
 8012750:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2200      	movs	r2, #0
 8012756:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2242      	movs	r2, #66	@ 0x42
 801275c:	5c9b      	ldrb	r3, [r3, r2]
 801275e:	b2db      	uxtb	r3, r3
 8012760:	2b40      	cmp	r3, #64	@ 0x40
 8012762:	d10c      	bne.n	801277e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2242      	movs	r2, #66	@ 0x42
 8012768:	2100      	movs	r1, #0
 801276a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2240      	movs	r2, #64	@ 0x40
 8012770:	2100      	movs	r1, #0
 8012772:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	0018      	movs	r0, r3
 8012778:	f7ff f8bd 	bl	80118f6 <HAL_I2C_MemRxCpltCallback>
}
 801277c:	e00b      	b.n	8012796 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2242      	movs	r2, #66	@ 0x42
 8012782:	2100      	movs	r1, #0
 8012784:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2240      	movs	r2, #64	@ 0x40
 801278a:	2100      	movs	r1, #0
 801278c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	0018      	movs	r0, r3
 8012792:	f7ff f878 	bl	8011886 <HAL_I2C_MasterRxCpltCallback>
}
 8012796:	46c0      	nop			@ (mov r8, r8)
 8012798:	46bd      	mov	sp, r7
 801279a:	b006      	add	sp, #24
 801279c:	bd80      	pop	{r7, pc}
 801279e:	46c0      	nop			@ (mov r8, r8)
 80127a0:	fe00e800 	.word	0xfe00e800
 80127a4:	ffff0000 	.word	0xffff0000

080127a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b086      	sub	sp, #24
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80127be:	200f      	movs	r0, #15
 80127c0:	183b      	adds	r3, r7, r0
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	2141      	movs	r1, #65	@ 0x41
 80127c6:	5c52      	ldrb	r2, [r2, r1]
 80127c8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2220      	movs	r2, #32
 80127d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80127d2:	183b      	adds	r3, r7, r0
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	2b21      	cmp	r3, #33	@ 0x21
 80127d8:	d003      	beq.n	80127e2 <I2C_ITSlaveCplt+0x3a>
 80127da:	183b      	adds	r3, r7, r0
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	2b29      	cmp	r3, #41	@ 0x29
 80127e0:	d109      	bne.n	80127f6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80127e2:	4a7b      	ldr	r2, [pc, #492]	@ (80129d0 <I2C_ITSlaveCplt+0x228>)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	0011      	movs	r1, r2
 80127e8:	0018      	movs	r0, r3
 80127ea:	f000 fe95 	bl	8013518 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2221      	movs	r2, #33	@ 0x21
 80127f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80127f4:	e011      	b.n	801281a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80127f6:	220f      	movs	r2, #15
 80127f8:	18bb      	adds	r3, r7, r2
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b22      	cmp	r3, #34	@ 0x22
 80127fe:	d003      	beq.n	8012808 <I2C_ITSlaveCplt+0x60>
 8012800:	18bb      	adds	r3, r7, r2
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	2b2a      	cmp	r3, #42	@ 0x2a
 8012806:	d108      	bne.n	801281a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8012808:	4a72      	ldr	r2, [pc, #456]	@ (80129d4 <I2C_ITSlaveCplt+0x22c>)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	0011      	movs	r1, r2
 801280e:	0018      	movs	r0, r3
 8012810:	f000 fe82 	bl	8013518 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2222      	movs	r2, #34	@ 0x22
 8012818:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	685a      	ldr	r2, [r3, #4]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2180      	movs	r1, #128	@ 0x80
 8012826:	0209      	lsls	r1, r1, #8
 8012828:	430a      	orrs	r2, r1
 801282a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	685a      	ldr	r2, [r3, #4]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4968      	ldr	r1, [pc, #416]	@ (80129d8 <I2C_ITSlaveCplt+0x230>)
 8012838:	400a      	ands	r2, r1
 801283a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	0018      	movs	r0, r3
 8012840:	f000 fa55 	bl	8012cee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8012844:	693a      	ldr	r2, [r7, #16]
 8012846:	2380      	movs	r3, #128	@ 0x80
 8012848:	01db      	lsls	r3, r3, #7
 801284a:	4013      	ands	r3, r2
 801284c:	d013      	beq.n	8012876 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4960      	ldr	r1, [pc, #384]	@ (80129dc <I2C_ITSlaveCplt+0x234>)
 801285a:	400a      	ands	r2, r1
 801285c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012862:	2b00      	cmp	r3, #0
 8012864:	d01f      	beq.n	80128a6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	b29a      	uxth	r2, r3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012874:	e017      	b.n	80128a6 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8012876:	693a      	ldr	r2, [r7, #16]
 8012878:	2380      	movs	r3, #128	@ 0x80
 801287a:	021b      	lsls	r3, r3, #8
 801287c:	4013      	ands	r3, r2
 801287e:	d012      	beq.n	80128a6 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4955      	ldr	r1, [pc, #340]	@ (80129e0 <I2C_ITSlaveCplt+0x238>)
 801288c:	400a      	ands	r2, r1
 801288e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012894:	2b00      	cmp	r3, #0
 8012896:	d006      	beq.n	80128a6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	b29a      	uxth	r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	2204      	movs	r2, #4
 80128aa:	4013      	ands	r3, r2
 80128ac:	d020      	beq.n	80128f0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	2204      	movs	r2, #4
 80128b2:	4393      	bics	r3, r2
 80128b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128c0:	b2d2      	uxtb	r2, r2
 80128c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128c8:	1c5a      	adds	r2, r3, #1
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d00c      	beq.n	80128f0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128da:	3b01      	subs	r3, #1
 80128dc:	b29a      	uxth	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	3b01      	subs	r3, #1
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d005      	beq.n	8012906 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128fe:	2204      	movs	r2, #4
 8012900:	431a      	orrs	r2, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2242      	movs	r2, #66	@ 0x42
 801290a:	2100      	movs	r1, #0
 801290c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2200      	movs	r2, #0
 8012912:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012918:	2b00      	cmp	r3, #0
 801291a:	d013      	beq.n	8012944 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	0011      	movs	r1, r2
 8012924:	0018      	movs	r0, r3
 8012926:	f000 f8b7 	bl	8012a98 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2241      	movs	r2, #65	@ 0x41
 801292e:	5c9b      	ldrb	r3, [r3, r2]
 8012930:	b2db      	uxtb	r3, r3
 8012932:	2b28      	cmp	r3, #40	@ 0x28
 8012934:	d147      	bne.n	80129c6 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8012936:	697a      	ldr	r2, [r7, #20]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	0011      	movs	r1, r2
 801293c:	0018      	movs	r0, r3
 801293e:	f000 f853 	bl	80129e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012942:	e040      	b.n	80129c6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012948:	4a26      	ldr	r2, [pc, #152]	@ (80129e4 <I2C_ITSlaveCplt+0x23c>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d016      	beq.n	801297c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	0018      	movs	r0, r3
 8012952:	f7ff fdf7 	bl	8012544 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	4a22      	ldr	r2, [pc, #136]	@ (80129e4 <I2C_ITSlaveCplt+0x23c>)
 801295a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2241      	movs	r2, #65	@ 0x41
 8012960:	2120      	movs	r1, #32
 8012962:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2200      	movs	r2, #0
 8012968:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2240      	movs	r2, #64	@ 0x40
 801296e:	2100      	movs	r1, #0
 8012970:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	0018      	movs	r0, r3
 8012976:	f7fe ffae 	bl	80118d6 <HAL_I2C_ListenCpltCallback>
}
 801297a:	e024      	b.n	80129c6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2241      	movs	r2, #65	@ 0x41
 8012980:	5c9b      	ldrb	r3, [r3, r2]
 8012982:	b2db      	uxtb	r3, r3
 8012984:	2b22      	cmp	r3, #34	@ 0x22
 8012986:	d10f      	bne.n	80129a8 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2241      	movs	r2, #65	@ 0x41
 801298c:	2120      	movs	r1, #32
 801298e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2200      	movs	r2, #0
 8012994:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2240      	movs	r2, #64	@ 0x40
 801299a:	2100      	movs	r1, #0
 801299c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	0018      	movs	r0, r3
 80129a2:	f7fe ff80 	bl	80118a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80129a6:	e00e      	b.n	80129c6 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2241      	movs	r2, #65	@ 0x41
 80129ac:	2120      	movs	r1, #32
 80129ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2200      	movs	r2, #0
 80129b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2240      	movs	r2, #64	@ 0x40
 80129ba:	2100      	movs	r1, #0
 80129bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	0018      	movs	r0, r3
 80129c2:	f7fe ff68 	bl	8011896 <HAL_I2C_SlaveTxCpltCallback>
}
 80129c6:	46c0      	nop			@ (mov r8, r8)
 80129c8:	46bd      	mov	sp, r7
 80129ca:	b006      	add	sp, #24
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	46c0      	nop			@ (mov r8, r8)
 80129d0:	00008001 	.word	0x00008001
 80129d4:	00008002 	.word	0x00008002
 80129d8:	fe00e800 	.word	0xfe00e800
 80129dc:	ffffbfff 	.word	0xffffbfff
 80129e0:	ffff7fff 	.word	0xffff7fff
 80129e4:	ffff0000 	.word	0xffff0000

080129e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	4a26      	ldr	r2, [pc, #152]	@ (8012a90 <I2C_ITListenCplt+0xa8>)
 80129f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2241      	movs	r2, #65	@ 0x41
 8012a02:	2120      	movs	r1, #32
 8012a04:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2242      	movs	r2, #66	@ 0x42
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2200      	movs	r2, #0
 8012a12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2204      	movs	r2, #4
 8012a18:	4013      	ands	r3, r2
 8012a1a:	d022      	beq.n	8012a62 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a26:	b2d2      	uxtb	r2, r2
 8012a28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a2e:	1c5a      	adds	r2, r3, #1
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d012      	beq.n	8012a62 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a40:	3b01      	subs	r3, #1
 8012a42:	b29a      	uxth	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	3b01      	subs	r3, #1
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a5a:	2204      	movs	r2, #4
 8012a5c:	431a      	orrs	r2, r3
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012a62:	4a0c      	ldr	r2, [pc, #48]	@ (8012a94 <I2C_ITListenCplt+0xac>)
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	0011      	movs	r1, r2
 8012a68:	0018      	movs	r0, r3
 8012a6a:	f000 fd55 	bl	8013518 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2210      	movs	r2, #16
 8012a74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2240      	movs	r2, #64	@ 0x40
 8012a7a:	2100      	movs	r1, #0
 8012a7c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	0018      	movs	r0, r3
 8012a82:	f7fe ff28 	bl	80118d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8012a86:	46c0      	nop			@ (mov r8, r8)
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	b002      	add	sp, #8
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	46c0      	nop			@ (mov r8, r8)
 8012a90:	ffff0000 	.word	0xffff0000
 8012a94:	00008003 	.word	0x00008003

08012a98 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8012aa2:	200f      	movs	r0, #15
 8012aa4:	183b      	adds	r3, r7, r0
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	2141      	movs	r1, #65	@ 0x41
 8012aaa:	5c52      	ldrb	r2, [r2, r1]
 8012aac:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2242      	movs	r2, #66	@ 0x42
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4a72      	ldr	r2, [pc, #456]	@ (8012c84 <I2C_ITError+0x1ec>)
 8012aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2200      	movs	r2, #0
 8012ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	431a      	orrs	r2, r3
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8012ace:	183b      	adds	r3, r7, r0
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	2b28      	cmp	r3, #40	@ 0x28
 8012ad4:	d007      	beq.n	8012ae6 <I2C_ITError+0x4e>
 8012ad6:	183b      	adds	r3, r7, r0
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	2b29      	cmp	r3, #41	@ 0x29
 8012adc:	d003      	beq.n	8012ae6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8012ade:	183b      	adds	r3, r7, r0
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ae4:	d10c      	bne.n	8012b00 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2103      	movs	r1, #3
 8012aea:	0018      	movs	r0, r3
 8012aec:	f000 fd14 	bl	8013518 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2241      	movs	r2, #65	@ 0x41
 8012af4:	2128      	movs	r1, #40	@ 0x28
 8012af6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4a63      	ldr	r2, [pc, #396]	@ (8012c88 <I2C_ITError+0x1f0>)
 8012afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8012afe:	e032      	b.n	8012b66 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012b00:	4a62      	ldr	r2, [pc, #392]	@ (8012c8c <I2C_ITError+0x1f4>)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	0011      	movs	r1, r2
 8012b06:	0018      	movs	r0, r3
 8012b08:	f000 fd06 	bl	8013518 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	0018      	movs	r0, r3
 8012b10:	f000 f8ed 	bl	8012cee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2241      	movs	r2, #65	@ 0x41
 8012b18:	5c9b      	ldrb	r3, [r3, r2]
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b60      	cmp	r3, #96	@ 0x60
 8012b1e:	d01f      	beq.n	8012b60 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2241      	movs	r2, #65	@ 0x41
 8012b24:	2120      	movs	r1, #32
 8012b26:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	699b      	ldr	r3, [r3, #24]
 8012b2e:	2220      	movs	r2, #32
 8012b30:	4013      	ands	r3, r2
 8012b32:	2b20      	cmp	r3, #32
 8012b34:	d114      	bne.n	8012b60 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	699b      	ldr	r3, [r3, #24]
 8012b3c:	2210      	movs	r2, #16
 8012b3e:	4013      	ands	r3, r2
 8012b40:	2b10      	cmp	r3, #16
 8012b42:	d109      	bne.n	8012b58 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	2210      	movs	r2, #16
 8012b4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b50:	2204      	movs	r2, #4
 8012b52:	431a      	orrs	r2, r3
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2220      	movs	r2, #32
 8012b5e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2200      	movs	r2, #0
 8012b64:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d03b      	beq.n	8012bec <I2C_ITError+0x154>
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	2b11      	cmp	r3, #17
 8012b78:	d002      	beq.n	8012b80 <I2C_ITError+0xe8>
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	2b21      	cmp	r3, #33	@ 0x21
 8012b7e:	d135      	bne.n	8012bec <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	2380      	movs	r3, #128	@ 0x80
 8012b88:	01db      	lsls	r3, r3, #7
 8012b8a:	401a      	ands	r2, r3
 8012b8c:	2380      	movs	r3, #128	@ 0x80
 8012b8e:	01db      	lsls	r3, r3, #7
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d107      	bne.n	8012ba4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	493c      	ldr	r1, [pc, #240]	@ (8012c90 <I2C_ITError+0x1f8>)
 8012ba0:	400a      	ands	r2, r1
 8012ba2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ba8:	0018      	movs	r0, r3
 8012baa:	f7fd fd62 	bl	8010672 <HAL_DMA_GetState>
 8012bae:	0003      	movs	r3, r0
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d016      	beq.n	8012be2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bb8:	4a36      	ldr	r2, [pc, #216]	@ (8012c94 <I2C_ITError+0x1fc>)
 8012bba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2240      	movs	r2, #64	@ 0x40
 8012bc0:	2100      	movs	r1, #0
 8012bc2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bc8:	0018      	movs	r0, r3
 8012bca:	f7fd fc5d 	bl	8010488 <HAL_DMA_Abort_IT>
 8012bce:	1e03      	subs	r3, r0, #0
 8012bd0:	d051      	beq.n	8012c76 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bdc:	0018      	movs	r0, r3
 8012bde:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012be0:	e049      	b.n	8012c76 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	0018      	movs	r0, r3
 8012be6:	f000 f859 	bl	8012c9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012bea:	e044      	b.n	8012c76 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d03b      	beq.n	8012c6c <I2C_ITError+0x1d4>
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	2b12      	cmp	r3, #18
 8012bf8:	d002      	beq.n	8012c00 <I2C_ITError+0x168>
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	2b22      	cmp	r3, #34	@ 0x22
 8012bfe:	d135      	bne.n	8012c6c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	2380      	movs	r3, #128	@ 0x80
 8012c08:	021b      	lsls	r3, r3, #8
 8012c0a:	401a      	ands	r2, r3
 8012c0c:	2380      	movs	r3, #128	@ 0x80
 8012c0e:	021b      	lsls	r3, r3, #8
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d107      	bne.n	8012c24 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	491e      	ldr	r1, [pc, #120]	@ (8012c98 <I2C_ITError+0x200>)
 8012c20:	400a      	ands	r2, r1
 8012c22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c28:	0018      	movs	r0, r3
 8012c2a:	f7fd fd22 	bl	8010672 <HAL_DMA_GetState>
 8012c2e:	0003      	movs	r3, r0
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d016      	beq.n	8012c62 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c38:	4a16      	ldr	r2, [pc, #88]	@ (8012c94 <I2C_ITError+0x1fc>)
 8012c3a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2240      	movs	r2, #64	@ 0x40
 8012c40:	2100      	movs	r1, #0
 8012c42:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c48:	0018      	movs	r0, r3
 8012c4a:	f7fd fc1d 	bl	8010488 <HAL_DMA_Abort_IT>
 8012c4e:	1e03      	subs	r3, r0, #0
 8012c50:	d013      	beq.n	8012c7a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c5c:	0018      	movs	r0, r3
 8012c5e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012c60:	e00b      	b.n	8012c7a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	0018      	movs	r0, r3
 8012c66:	f000 f819 	bl	8012c9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012c6a:	e006      	b.n	8012c7a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	0018      	movs	r0, r3
 8012c70:	f000 f814 	bl	8012c9c <I2C_TreatErrorCallback>
  }
}
 8012c74:	e002      	b.n	8012c7c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012c76:	46c0      	nop			@ (mov r8, r8)
 8012c78:	e000      	b.n	8012c7c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012c7a:	46c0      	nop			@ (mov r8, r8)
}
 8012c7c:	46c0      	nop			@ (mov r8, r8)
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	b004      	add	sp, #16
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	ffff0000 	.word	0xffff0000
 8012c88:	08011b7d 	.word	0x08011b7d
 8012c8c:	00008003 	.word	0x00008003
 8012c90:	ffffbfff 	.word	0xffffbfff
 8012c94:	08012ea7 	.word	0x08012ea7
 8012c98:	ffff7fff 	.word	0xffff7fff

08012c9c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2241      	movs	r2, #65	@ 0x41
 8012ca8:	5c9b      	ldrb	r3, [r3, r2]
 8012caa:	b2db      	uxtb	r3, r3
 8012cac:	2b60      	cmp	r3, #96	@ 0x60
 8012cae:	d10f      	bne.n	8012cd0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2241      	movs	r2, #65	@ 0x41
 8012cb4:	2120      	movs	r1, #32
 8012cb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2240      	movs	r2, #64	@ 0x40
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	0018      	movs	r0, r3
 8012cca:	f7fe fe24 	bl	8011916 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012cce:	e00a      	b.n	8012ce6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2240      	movs	r2, #64	@ 0x40
 8012cda:	2100      	movs	r1, #0
 8012cdc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	0018      	movs	r0, r3
 8012ce2:	f7fe fe10 	bl	8011906 <HAL_I2C_ErrorCallback>
}
 8012ce6:	46c0      	nop			@ (mov r8, r8)
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	b002      	add	sp, #8
 8012cec:	bd80      	pop	{r7, pc}

08012cee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012cee:	b580      	push	{r7, lr}
 8012cf0:	b082      	sub	sp, #8
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	699b      	ldr	r3, [r3, #24]
 8012cfc:	2202      	movs	r2, #2
 8012cfe:	4013      	ands	r3, r2
 8012d00:	2b02      	cmp	r3, #2
 8012d02:	d103      	bne.n	8012d0c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	699b      	ldr	r3, [r3, #24]
 8012d12:	2201      	movs	r2, #1
 8012d14:	4013      	ands	r3, r2
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d007      	beq.n	8012d2a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	699a      	ldr	r2, [r3, #24]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2101      	movs	r1, #1
 8012d26:	430a      	orrs	r2, r1
 8012d28:	619a      	str	r2, [r3, #24]
  }
}
 8012d2a:	46c0      	nop			@ (mov r8, r8)
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	b002      	add	sp, #8
 8012d30:	bd80      	pop	{r7, pc}
	...

08012d34 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b084      	sub	sp, #16
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d40:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	681a      	ldr	r2, [r3, #0]
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	4920      	ldr	r1, [pc, #128]	@ (8012dd0 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012d4e:	400a      	ands	r2, r1
 8012d50:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d105      	bne.n	8012d68 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	2120      	movs	r1, #32
 8012d60:	0018      	movs	r0, r3
 8012d62:	f000 fb4b 	bl	80133fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012d66:	e02e      	b.n	8012dc6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d6c:	68fa      	ldr	r2, [r7, #12]
 8012d6e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012d70:	189a      	adds	r2, r3, r2
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	2bff      	cmp	r3, #255	@ 0xff
 8012d7e:	d903      	bls.n	8012d88 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	22ff      	movs	r2, #255	@ 0xff
 8012d84:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012d86:	e004      	b.n	8012d92 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d9a:	0019      	movs	r1, r3
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	3328      	adds	r3, #40	@ 0x28
 8012da2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012da8:	f7fd fac8 	bl	801033c <HAL_DMA_Start_IT>
 8012dac:	1e03      	subs	r3, r0, #0
 8012dae:	d005      	beq.n	8012dbc <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2110      	movs	r1, #16
 8012db4:	0018      	movs	r0, r3
 8012db6:	f7ff fe6f 	bl	8012a98 <I2C_ITError>
}
 8012dba:	e004      	b.n	8012dc6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2140      	movs	r1, #64	@ 0x40
 8012dc0:	0018      	movs	r0, r3
 8012dc2:	f000 fb1b 	bl	80133fc <I2C_Enable_IRQ>
}
 8012dc6:	46c0      	nop			@ (mov r8, r8)
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	b004      	add	sp, #16
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	46c0      	nop			@ (mov r8, r8)
 8012dd0:	ffffbfff 	.word	0xffffbfff

08012dd4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012de0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4920      	ldr	r1, [pc, #128]	@ (8012e70 <I2C_DMAMasterReceiveCplt+0x9c>)
 8012dee:	400a      	ands	r2, r1
 8012df0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d105      	bne.n	8012e08 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2120      	movs	r1, #32
 8012e00:	0018      	movs	r0, r3
 8012e02:	f000 fafb 	bl	80133fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012e06:	e02e      	b.n	8012e66 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012e10:	189a      	adds	r2, r3, r2
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	2bff      	cmp	r3, #255	@ 0xff
 8012e1e:	d903      	bls.n	8012e28 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	22ff      	movs	r2, #255	@ 0xff
 8012e24:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012e26:	e004      	b.n	8012e32 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	3324      	adds	r3, #36	@ 0x24
 8012e3c:	0019      	movs	r1, r3
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e42:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012e48:	f7fd fa78 	bl	801033c <HAL_DMA_Start_IT>
 8012e4c:	1e03      	subs	r3, r0, #0
 8012e4e:	d005      	beq.n	8012e5c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	2110      	movs	r1, #16
 8012e54:	0018      	movs	r0, r3
 8012e56:	f7ff fe1f 	bl	8012a98 <I2C_ITError>
}
 8012e5a:	e004      	b.n	8012e66 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2140      	movs	r1, #64	@ 0x40
 8012e60:	0018      	movs	r0, r3
 8012e62:	f000 facb 	bl	80133fc <I2C_Enable_IRQ>
}
 8012e66:	46c0      	nop			@ (mov r8, r8)
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	b004      	add	sp, #16
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	46c0      	nop			@ (mov r8, r8)
 8012e70:	ffff7fff 	.word	0xffff7fff

08012e74 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e80:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	685a      	ldr	r2, [r3, #4]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	2180      	movs	r1, #128	@ 0x80
 8012e8e:	0209      	lsls	r1, r1, #8
 8012e90:	430a      	orrs	r2, r1
 8012e92:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2110      	movs	r1, #16
 8012e98:	0018      	movs	r0, r3
 8012e9a:	f7ff fdfd 	bl	8012a98 <I2C_ITError>
}
 8012e9e:	46c0      	nop			@ (mov r8, r8)
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	b004      	add	sp, #16
 8012ea4:	bd80      	pop	{r7, pc}

08012ea6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012ea6:	b580      	push	{r7, lr}
 8012ea8:	b084      	sub	sp, #16
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012eb2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d003      	beq.n	8012ec4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d003      	beq.n	8012ed4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	0018      	movs	r0, r3
 8012ed8:	f7ff fee0 	bl	8012c9c <I2C_TreatErrorCallback>
}
 8012edc:	46c0      	nop			@ (mov r8, r8)
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	b004      	add	sp, #16
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	60b9      	str	r1, [r7, #8]
 8012eee:	603b      	str	r3, [r7, #0]
 8012ef0:	1dfb      	adds	r3, r7, #7
 8012ef2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012ef4:	e030      	b.n	8012f58 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	3301      	adds	r3, #1
 8012efa:	d02d      	beq.n	8012f58 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012efc:	f7fc fccc 	bl	800f898 <HAL_GetTick>
 8012f00:	0002      	movs	r2, r0
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	683a      	ldr	r2, [r7, #0]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d302      	bcc.n	8012f12 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d122      	bne.n	8012f58 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	699b      	ldr	r3, [r3, #24]
 8012f18:	68ba      	ldr	r2, [r7, #8]
 8012f1a:	4013      	ands	r3, r2
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	1ad3      	subs	r3, r2, r3
 8012f20:	425a      	negs	r2, r3
 8012f22:	4153      	adcs	r3, r2
 8012f24:	b2db      	uxtb	r3, r3
 8012f26:	001a      	movs	r2, r3
 8012f28:	1dfb      	adds	r3, r7, #7
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d113      	bne.n	8012f58 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f34:	2220      	movs	r2, #32
 8012f36:	431a      	orrs	r2, r3
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	2241      	movs	r2, #65	@ 0x41
 8012f40:	2120      	movs	r1, #32
 8012f42:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2242      	movs	r2, #66	@ 0x42
 8012f48:	2100      	movs	r1, #0
 8012f4a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2240      	movs	r2, #64	@ 0x40
 8012f50:	2100      	movs	r1, #0
 8012f52:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012f54:	2301      	movs	r3, #1
 8012f56:	e00f      	b.n	8012f78 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	699b      	ldr	r3, [r3, #24]
 8012f5e:	68ba      	ldr	r2, [r7, #8]
 8012f60:	4013      	ands	r3, r2
 8012f62:	68ba      	ldr	r2, [r7, #8]
 8012f64:	1ad3      	subs	r3, r2, r3
 8012f66:	425a      	negs	r2, r3
 8012f68:	4153      	adcs	r3, r2
 8012f6a:	b2db      	uxtb	r3, r3
 8012f6c:	001a      	movs	r2, r3
 8012f6e:	1dfb      	adds	r3, r7, #7
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d0bf      	beq.n	8012ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012f76:	2300      	movs	r3, #0
}
 8012f78:	0018      	movs	r0, r3
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	b004      	add	sp, #16
 8012f7e:	bd80      	pop	{r7, pc}

08012f80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012f8c:	e032      	b.n	8012ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	68b9      	ldr	r1, [r7, #8]
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	0018      	movs	r0, r3
 8012f96:	f000 f8ff 	bl	8013198 <I2C_IsErrorOccurred>
 8012f9a:	1e03      	subs	r3, r0, #0
 8012f9c:	d001      	beq.n	8012fa2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	e030      	b.n	8013004 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	d025      	beq.n	8012ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012fa8:	f7fc fc76 	bl	800f898 <HAL_GetTick>
 8012fac:	0002      	movs	r2, r0
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	1ad3      	subs	r3, r2, r3
 8012fb2:	68ba      	ldr	r2, [r7, #8]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d302      	bcc.n	8012fbe <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012fb8:	68bb      	ldr	r3, [r7, #8]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d11a      	bne.n	8012ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	699b      	ldr	r3, [r3, #24]
 8012fc4:	2202      	movs	r2, #2
 8012fc6:	4013      	ands	r3, r2
 8012fc8:	2b02      	cmp	r3, #2
 8012fca:	d013      	beq.n	8012ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fd0:	2220      	movs	r2, #32
 8012fd2:	431a      	orrs	r2, r3
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2241      	movs	r2, #65	@ 0x41
 8012fdc:	2120      	movs	r1, #32
 8012fde:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	2242      	movs	r2, #66	@ 0x42
 8012fe4:	2100      	movs	r1, #0
 8012fe6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2240      	movs	r2, #64	@ 0x40
 8012fec:	2100      	movs	r1, #0
 8012fee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	e007      	b.n	8013004 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	699b      	ldr	r3, [r3, #24]
 8012ffa:	2202      	movs	r2, #2
 8012ffc:	4013      	ands	r3, r2
 8012ffe:	2b02      	cmp	r3, #2
 8013000:	d1c5      	bne.n	8012f8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8013002:	2300      	movs	r3, #0
}
 8013004:	0018      	movs	r0, r3
 8013006:	46bd      	mov	sp, r7
 8013008:	b004      	add	sp, #16
 801300a:	bd80      	pop	{r7, pc}

0801300c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	60f8      	str	r0, [r7, #12]
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013018:	e02f      	b.n	801307a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801301a:	687a      	ldr	r2, [r7, #4]
 801301c:	68b9      	ldr	r1, [r7, #8]
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	0018      	movs	r0, r3
 8013022:	f000 f8b9 	bl	8013198 <I2C_IsErrorOccurred>
 8013026:	1e03      	subs	r3, r0, #0
 8013028:	d001      	beq.n	801302e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801302a:	2301      	movs	r3, #1
 801302c:	e02d      	b.n	801308a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801302e:	f7fc fc33 	bl	800f898 <HAL_GetTick>
 8013032:	0002      	movs	r2, r0
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	1ad3      	subs	r3, r2, r3
 8013038:	68ba      	ldr	r2, [r7, #8]
 801303a:	429a      	cmp	r2, r3
 801303c:	d302      	bcc.n	8013044 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d11a      	bne.n	801307a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	699b      	ldr	r3, [r3, #24]
 801304a:	2220      	movs	r2, #32
 801304c:	4013      	ands	r3, r2
 801304e:	2b20      	cmp	r3, #32
 8013050:	d013      	beq.n	801307a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013056:	2220      	movs	r2, #32
 8013058:	431a      	orrs	r2, r3
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2241      	movs	r2, #65	@ 0x41
 8013062:	2120      	movs	r1, #32
 8013064:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2242      	movs	r2, #66	@ 0x42
 801306a:	2100      	movs	r1, #0
 801306c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2240      	movs	r2, #64	@ 0x40
 8013072:	2100      	movs	r1, #0
 8013074:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013076:	2301      	movs	r3, #1
 8013078:	e007      	b.n	801308a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	699b      	ldr	r3, [r3, #24]
 8013080:	2220      	movs	r2, #32
 8013082:	4013      	ands	r3, r2
 8013084:	2b20      	cmp	r3, #32
 8013086:	d1c8      	bne.n	801301a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013088:	2300      	movs	r3, #0
}
 801308a:	0018      	movs	r0, r3
 801308c:	46bd      	mov	sp, r7
 801308e:	b004      	add	sp, #16
 8013090:	bd80      	pop	{r7, pc}
	...

08013094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80130a0:	e06b      	b.n	801317a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80130a2:	687a      	ldr	r2, [r7, #4]
 80130a4:	68b9      	ldr	r1, [r7, #8]
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	0018      	movs	r0, r3
 80130aa:	f000 f875 	bl	8013198 <I2C_IsErrorOccurred>
 80130ae:	1e03      	subs	r3, r0, #0
 80130b0:	d001      	beq.n	80130b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80130b2:	2301      	movs	r3, #1
 80130b4:	e069      	b.n	801318a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	699b      	ldr	r3, [r3, #24]
 80130bc:	2220      	movs	r2, #32
 80130be:	4013      	ands	r3, r2
 80130c0:	2b20      	cmp	r3, #32
 80130c2:	d138      	bne.n	8013136 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	699b      	ldr	r3, [r3, #24]
 80130ca:	2204      	movs	r2, #4
 80130cc:	4013      	ands	r3, r2
 80130ce:	2b04      	cmp	r3, #4
 80130d0:	d105      	bne.n	80130de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d001      	beq.n	80130de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80130da:	2300      	movs	r3, #0
 80130dc:	e055      	b.n	801318a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	699b      	ldr	r3, [r3, #24]
 80130e4:	2210      	movs	r2, #16
 80130e6:	4013      	ands	r3, r2
 80130e8:	2b10      	cmp	r3, #16
 80130ea:	d107      	bne.n	80130fc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2210      	movs	r2, #16
 80130f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	2204      	movs	r2, #4
 80130f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80130fa:	e002      	b.n	8013102 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2200      	movs	r2, #0
 8013100:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	2220      	movs	r2, #32
 8013108:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	685a      	ldr	r2, [r3, #4]
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	491f      	ldr	r1, [pc, #124]	@ (8013194 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8013116:	400a      	ands	r2, r1
 8013118:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2241      	movs	r2, #65	@ 0x41
 801311e:	2120      	movs	r1, #32
 8013120:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2242      	movs	r2, #66	@ 0x42
 8013126:	2100      	movs	r1, #0
 8013128:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2240      	movs	r2, #64	@ 0x40
 801312e:	2100      	movs	r1, #0
 8013130:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013132:	2301      	movs	r3, #1
 8013134:	e029      	b.n	801318a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013136:	f7fc fbaf 	bl	800f898 <HAL_GetTick>
 801313a:	0002      	movs	r2, r0
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	1ad3      	subs	r3, r2, r3
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	429a      	cmp	r2, r3
 8013144:	d302      	bcc.n	801314c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d116      	bne.n	801317a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	699b      	ldr	r3, [r3, #24]
 8013152:	2204      	movs	r2, #4
 8013154:	4013      	ands	r3, r2
 8013156:	2b04      	cmp	r3, #4
 8013158:	d00f      	beq.n	801317a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801315e:	2220      	movs	r2, #32
 8013160:	431a      	orrs	r2, r3
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	2241      	movs	r2, #65	@ 0x41
 801316a:	2120      	movs	r1, #32
 801316c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	2240      	movs	r2, #64	@ 0x40
 8013172:	2100      	movs	r1, #0
 8013174:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013176:	2301      	movs	r3, #1
 8013178:	e007      	b.n	801318a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	699b      	ldr	r3, [r3, #24]
 8013180:	2204      	movs	r2, #4
 8013182:	4013      	ands	r3, r2
 8013184:	2b04      	cmp	r3, #4
 8013186:	d18c      	bne.n	80130a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013188:	2300      	movs	r3, #0
}
 801318a:	0018      	movs	r0, r3
 801318c:	46bd      	mov	sp, r7
 801318e:	b004      	add	sp, #16
 8013190:	bd80      	pop	{r7, pc}
 8013192:	46c0      	nop			@ (mov r8, r8)
 8013194:	fe00e800 	.word	0xfe00e800

08013198 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b08a      	sub	sp, #40	@ 0x28
 801319c:	af00      	add	r7, sp, #0
 801319e:	60f8      	str	r0, [r7, #12]
 80131a0:	60b9      	str	r1, [r7, #8]
 80131a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80131a4:	2327      	movs	r3, #39	@ 0x27
 80131a6:	18fb      	adds	r3, r7, r3
 80131a8:	2200      	movs	r2, #0
 80131aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	699b      	ldr	r3, [r3, #24]
 80131b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80131b4:	2300      	movs	r3, #0
 80131b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	2210      	movs	r2, #16
 80131c0:	4013      	ands	r3, r2
 80131c2:	d100      	bne.n	80131c6 <I2C_IsErrorOccurred+0x2e>
 80131c4:	e079      	b.n	80132ba <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	2210      	movs	r2, #16
 80131cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80131ce:	e057      	b.n	8013280 <I2C_IsErrorOccurred+0xe8>
 80131d0:	2227      	movs	r2, #39	@ 0x27
 80131d2:	18bb      	adds	r3, r7, r2
 80131d4:	18ba      	adds	r2, r7, r2
 80131d6:	7812      	ldrb	r2, [r2, #0]
 80131d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	3301      	adds	r3, #1
 80131de:	d04f      	beq.n	8013280 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80131e0:	f7fc fb5a 	bl	800f898 <HAL_GetTick>
 80131e4:	0002      	movs	r2, r0
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	1ad3      	subs	r3, r2, r3
 80131ea:	68ba      	ldr	r2, [r7, #8]
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d302      	bcc.n	80131f6 <I2C_IsErrorOccurred+0x5e>
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d144      	bne.n	8013280 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	685a      	ldr	r2, [r3, #4]
 80131fc:	2380      	movs	r3, #128	@ 0x80
 80131fe:	01db      	lsls	r3, r3, #7
 8013200:	4013      	ands	r3, r2
 8013202:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8013204:	2013      	movs	r0, #19
 8013206:	183b      	adds	r3, r7, r0
 8013208:	68fa      	ldr	r2, [r7, #12]
 801320a:	2142      	movs	r1, #66	@ 0x42
 801320c:	5c52      	ldrb	r2, [r2, r1]
 801320e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	699a      	ldr	r2, [r3, #24]
 8013216:	2380      	movs	r3, #128	@ 0x80
 8013218:	021b      	lsls	r3, r3, #8
 801321a:	401a      	ands	r2, r3
 801321c:	2380      	movs	r3, #128	@ 0x80
 801321e:	021b      	lsls	r3, r3, #8
 8013220:	429a      	cmp	r2, r3
 8013222:	d126      	bne.n	8013272 <I2C_IsErrorOccurred+0xda>
 8013224:	697a      	ldr	r2, [r7, #20]
 8013226:	2380      	movs	r3, #128	@ 0x80
 8013228:	01db      	lsls	r3, r3, #7
 801322a:	429a      	cmp	r2, r3
 801322c:	d021      	beq.n	8013272 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 801322e:	183b      	adds	r3, r7, r0
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	2b20      	cmp	r3, #32
 8013234:	d01d      	beq.n	8013272 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	685a      	ldr	r2, [r3, #4]
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2180      	movs	r1, #128	@ 0x80
 8013242:	01c9      	lsls	r1, r1, #7
 8013244:	430a      	orrs	r2, r1
 8013246:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8013248:	f7fc fb26 	bl	800f898 <HAL_GetTick>
 801324c:	0003      	movs	r3, r0
 801324e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013250:	e00f      	b.n	8013272 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8013252:	f7fc fb21 	bl	800f898 <HAL_GetTick>
 8013256:	0002      	movs	r2, r0
 8013258:	69fb      	ldr	r3, [r7, #28]
 801325a:	1ad3      	subs	r3, r2, r3
 801325c:	2b19      	cmp	r3, #25
 801325e:	d908      	bls.n	8013272 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8013260:	6a3b      	ldr	r3, [r7, #32]
 8013262:	2220      	movs	r2, #32
 8013264:	4313      	orrs	r3, r2
 8013266:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8013268:	2327      	movs	r3, #39	@ 0x27
 801326a:	18fb      	adds	r3, r7, r3
 801326c:	2201      	movs	r2, #1
 801326e:	701a      	strb	r2, [r3, #0]

              break;
 8013270:	e006      	b.n	8013280 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	699b      	ldr	r3, [r3, #24]
 8013278:	2220      	movs	r2, #32
 801327a:	4013      	ands	r3, r2
 801327c:	2b20      	cmp	r3, #32
 801327e:	d1e8      	bne.n	8013252 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	699b      	ldr	r3, [r3, #24]
 8013286:	2220      	movs	r2, #32
 8013288:	4013      	ands	r3, r2
 801328a:	2b20      	cmp	r3, #32
 801328c:	d004      	beq.n	8013298 <I2C_IsErrorOccurred+0x100>
 801328e:	2327      	movs	r3, #39	@ 0x27
 8013290:	18fb      	adds	r3, r7, r3
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d09b      	beq.n	80131d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8013298:	2327      	movs	r3, #39	@ 0x27
 801329a:	18fb      	adds	r3, r7, r3
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d103      	bne.n	80132aa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2220      	movs	r2, #32
 80132a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80132aa:	6a3b      	ldr	r3, [r7, #32]
 80132ac:	2204      	movs	r2, #4
 80132ae:	4313      	orrs	r3, r2
 80132b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80132b2:	2327      	movs	r3, #39	@ 0x27
 80132b4:	18fb      	adds	r3, r7, r3
 80132b6:	2201      	movs	r2, #1
 80132b8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	699b      	ldr	r3, [r3, #24]
 80132c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80132c2:	69ba      	ldr	r2, [r7, #24]
 80132c4:	2380      	movs	r3, #128	@ 0x80
 80132c6:	005b      	lsls	r3, r3, #1
 80132c8:	4013      	ands	r3, r2
 80132ca:	d00c      	beq.n	80132e6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80132cc:	6a3b      	ldr	r3, [r7, #32]
 80132ce:	2201      	movs	r2, #1
 80132d0:	4313      	orrs	r3, r2
 80132d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	2280      	movs	r2, #128	@ 0x80
 80132da:	0052      	lsls	r2, r2, #1
 80132dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80132de:	2327      	movs	r3, #39	@ 0x27
 80132e0:	18fb      	adds	r3, r7, r3
 80132e2:	2201      	movs	r2, #1
 80132e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80132e6:	69ba      	ldr	r2, [r7, #24]
 80132e8:	2380      	movs	r3, #128	@ 0x80
 80132ea:	00db      	lsls	r3, r3, #3
 80132ec:	4013      	ands	r3, r2
 80132ee:	d00c      	beq.n	801330a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80132f0:	6a3b      	ldr	r3, [r7, #32]
 80132f2:	2208      	movs	r2, #8
 80132f4:	4313      	orrs	r3, r2
 80132f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2280      	movs	r2, #128	@ 0x80
 80132fe:	00d2      	lsls	r2, r2, #3
 8013300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8013302:	2327      	movs	r3, #39	@ 0x27
 8013304:	18fb      	adds	r3, r7, r3
 8013306:	2201      	movs	r2, #1
 8013308:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801330a:	69ba      	ldr	r2, [r7, #24]
 801330c:	2380      	movs	r3, #128	@ 0x80
 801330e:	009b      	lsls	r3, r3, #2
 8013310:	4013      	ands	r3, r2
 8013312:	d00c      	beq.n	801332e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8013314:	6a3b      	ldr	r3, [r7, #32]
 8013316:	2202      	movs	r2, #2
 8013318:	4313      	orrs	r3, r2
 801331a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2280      	movs	r2, #128	@ 0x80
 8013322:	0092      	lsls	r2, r2, #2
 8013324:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8013326:	2327      	movs	r3, #39	@ 0x27
 8013328:	18fb      	adds	r3, r7, r3
 801332a:	2201      	movs	r2, #1
 801332c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 801332e:	2327      	movs	r3, #39	@ 0x27
 8013330:	18fb      	adds	r3, r7, r3
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d01d      	beq.n	8013374 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	0018      	movs	r0, r3
 801333c:	f7ff fcd7 	bl	8012cee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	685a      	ldr	r2, [r3, #4]
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	490e      	ldr	r1, [pc, #56]	@ (8013384 <I2C_IsErrorOccurred+0x1ec>)
 801334c:	400a      	ands	r2, r1
 801334e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013354:	6a3b      	ldr	r3, [r7, #32]
 8013356:	431a      	orrs	r2, r3
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2241      	movs	r2, #65	@ 0x41
 8013360:	2120      	movs	r1, #32
 8013362:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2242      	movs	r2, #66	@ 0x42
 8013368:	2100      	movs	r1, #0
 801336a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2240      	movs	r2, #64	@ 0x40
 8013370:	2100      	movs	r1, #0
 8013372:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8013374:	2327      	movs	r3, #39	@ 0x27
 8013376:	18fb      	adds	r3, r7, r3
 8013378:	781b      	ldrb	r3, [r3, #0]
}
 801337a:	0018      	movs	r0, r3
 801337c:	46bd      	mov	sp, r7
 801337e:	b00a      	add	sp, #40	@ 0x28
 8013380:	bd80      	pop	{r7, pc}
 8013382:	46c0      	nop			@ (mov r8, r8)
 8013384:	fe00e800 	.word	0xfe00e800

08013388 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8013388:	b590      	push	{r4, r7, lr}
 801338a:	b087      	sub	sp, #28
 801338c:	af00      	add	r7, sp, #0
 801338e:	60f8      	str	r0, [r7, #12]
 8013390:	0008      	movs	r0, r1
 8013392:	0011      	movs	r1, r2
 8013394:	607b      	str	r3, [r7, #4]
 8013396:	240a      	movs	r4, #10
 8013398:	193b      	adds	r3, r7, r4
 801339a:	1c02      	adds	r2, r0, #0
 801339c:	801a      	strh	r2, [r3, #0]
 801339e:	2009      	movs	r0, #9
 80133a0:	183b      	adds	r3, r7, r0
 80133a2:	1c0a      	adds	r2, r1, #0
 80133a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80133a6:	193b      	adds	r3, r7, r4
 80133a8:	881b      	ldrh	r3, [r3, #0]
 80133aa:	059b      	lsls	r3, r3, #22
 80133ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80133ae:	183b      	adds	r3, r7, r0
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	0419      	lsls	r1, r3, #16
 80133b4:	23ff      	movs	r3, #255	@ 0xff
 80133b6:	041b      	lsls	r3, r3, #16
 80133b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80133ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80133c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c2:	4313      	orrs	r3, r2
 80133c4:	005b      	lsls	r3, r3, #1
 80133c6:	085b      	lsrs	r3, r3, #1
 80133c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133d2:	0d51      	lsrs	r1, r2, #21
 80133d4:	2280      	movs	r2, #128	@ 0x80
 80133d6:	00d2      	lsls	r2, r2, #3
 80133d8:	400a      	ands	r2, r1
 80133da:	4907      	ldr	r1, [pc, #28]	@ (80133f8 <I2C_TransferConfig+0x70>)
 80133dc:	430a      	orrs	r2, r1
 80133de:	43d2      	mvns	r2, r2
 80133e0:	401a      	ands	r2, r3
 80133e2:	0011      	movs	r1, r2
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	697a      	ldr	r2, [r7, #20]
 80133ea:	430a      	orrs	r2, r1
 80133ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80133ee:	46c0      	nop			@ (mov r8, r8)
 80133f0:	46bd      	mov	sp, r7
 80133f2:	b007      	add	sp, #28
 80133f4:	bd90      	pop	{r4, r7, pc}
 80133f6:	46c0      	nop			@ (mov r8, r8)
 80133f8:	03ff63ff 	.word	0x03ff63ff

080133fc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	000a      	movs	r2, r1
 8013406:	1cbb      	adds	r3, r7, #2
 8013408:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801340a:	2300      	movs	r3, #0
 801340c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013412:	4b3e      	ldr	r3, [pc, #248]	@ (801350c <I2C_Enable_IRQ+0x110>)
 8013414:	429a      	cmp	r2, r3
 8013416:	d035      	beq.n	8013484 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801341c:	4b3c      	ldr	r3, [pc, #240]	@ (8013510 <I2C_Enable_IRQ+0x114>)
 801341e:	429a      	cmp	r2, r3
 8013420:	d030      	beq.n	8013484 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8013426:	4b3b      	ldr	r3, [pc, #236]	@ (8013514 <I2C_Enable_IRQ+0x118>)
 8013428:	429a      	cmp	r2, r3
 801342a:	d02b      	beq.n	8013484 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801342c:	1cbb      	adds	r3, r7, #2
 801342e:	2200      	movs	r2, #0
 8013430:	5e9b      	ldrsh	r3, [r3, r2]
 8013432:	2b00      	cmp	r3, #0
 8013434:	da03      	bge.n	801343e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	22b8      	movs	r2, #184	@ 0xb8
 801343a:	4313      	orrs	r3, r2
 801343c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801343e:	1cbb      	adds	r3, r7, #2
 8013440:	881b      	ldrh	r3, [r3, #0]
 8013442:	2201      	movs	r2, #1
 8013444:	4013      	ands	r3, r2
 8013446:	d003      	beq.n	8013450 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	22f2      	movs	r2, #242	@ 0xf2
 801344c:	4313      	orrs	r3, r2
 801344e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8013450:	1cbb      	adds	r3, r7, #2
 8013452:	881b      	ldrh	r3, [r3, #0]
 8013454:	2202      	movs	r2, #2
 8013456:	4013      	ands	r3, r2
 8013458:	d003      	beq.n	8013462 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	22f4      	movs	r2, #244	@ 0xf4
 801345e:	4313      	orrs	r3, r2
 8013460:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8013462:	1cbb      	adds	r3, r7, #2
 8013464:	881b      	ldrh	r3, [r3, #0]
 8013466:	2b10      	cmp	r3, #16
 8013468:	d103      	bne.n	8013472 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	2290      	movs	r2, #144	@ 0x90
 801346e:	4313      	orrs	r3, r2
 8013470:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8013472:	1cbb      	adds	r3, r7, #2
 8013474:	881b      	ldrh	r3, [r3, #0]
 8013476:	2b20      	cmp	r3, #32
 8013478:	d13c      	bne.n	80134f4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	2220      	movs	r2, #32
 801347e:	4313      	orrs	r3, r2
 8013480:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8013482:	e037      	b.n	80134f4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8013484:	1cbb      	adds	r3, r7, #2
 8013486:	2200      	movs	r2, #0
 8013488:	5e9b      	ldrsh	r3, [r3, r2]
 801348a:	2b00      	cmp	r3, #0
 801348c:	da03      	bge.n	8013496 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	22b8      	movs	r2, #184	@ 0xb8
 8013492:	4313      	orrs	r3, r2
 8013494:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8013496:	1cbb      	adds	r3, r7, #2
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	2201      	movs	r2, #1
 801349c:	4013      	ands	r3, r2
 801349e:	d003      	beq.n	80134a8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	22f2      	movs	r2, #242	@ 0xf2
 80134a4:	4313      	orrs	r3, r2
 80134a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80134a8:	1cbb      	adds	r3, r7, #2
 80134aa:	881b      	ldrh	r3, [r3, #0]
 80134ac:	2202      	movs	r2, #2
 80134ae:	4013      	ands	r3, r2
 80134b0:	d003      	beq.n	80134ba <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	22f4      	movs	r2, #244	@ 0xf4
 80134b6:	4313      	orrs	r3, r2
 80134b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80134ba:	1cbb      	adds	r3, r7, #2
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	2b10      	cmp	r3, #16
 80134c0:	d103      	bne.n	80134ca <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2290      	movs	r2, #144	@ 0x90
 80134c6:	4313      	orrs	r3, r2
 80134c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80134ca:	1cbb      	adds	r3, r7, #2
 80134cc:	881b      	ldrh	r3, [r3, #0]
 80134ce:	2b20      	cmp	r3, #32
 80134d0:	d103      	bne.n	80134da <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2260      	movs	r2, #96	@ 0x60
 80134d6:	4313      	orrs	r3, r2
 80134d8:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80134de:	4b0d      	ldr	r3, [pc, #52]	@ (8013514 <I2C_Enable_IRQ+0x118>)
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d007      	beq.n	80134f4 <I2C_Enable_IRQ+0xf8>
 80134e4:	1cbb      	adds	r3, r7, #2
 80134e6:	881b      	ldrh	r3, [r3, #0]
 80134e8:	2b40      	cmp	r3, #64	@ 0x40
 80134ea:	d103      	bne.n	80134f4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	2240      	movs	r2, #64	@ 0x40
 80134f0:	4313      	orrs	r3, r2
 80134f2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	6819      	ldr	r1, [r3, #0]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	68fa      	ldr	r2, [r7, #12]
 8013500:	430a      	orrs	r2, r1
 8013502:	601a      	str	r2, [r3, #0]
}
 8013504:	46c0      	nop			@ (mov r8, r8)
 8013506:	46bd      	mov	sp, r7
 8013508:	b004      	add	sp, #16
 801350a:	bd80      	pop	{r7, pc}
 801350c:	08011d7d 	.word	0x08011d7d
 8013510:	080121ad 	.word	0x080121ad
 8013514:	08011f75 	.word	0x08011f75

08013518 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	000a      	movs	r2, r1
 8013522:	1cbb      	adds	r3, r7, #2
 8013524:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8013526:	2300      	movs	r3, #0
 8013528:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801352a:	1cbb      	adds	r3, r7, #2
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	2201      	movs	r2, #1
 8013530:	4013      	ands	r3, r2
 8013532:	d010      	beq.n	8013556 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2242      	movs	r2, #66	@ 0x42
 8013538:	4313      	orrs	r3, r2
 801353a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2241      	movs	r2, #65	@ 0x41
 8013540:	5c9b      	ldrb	r3, [r3, r2]
 8013542:	b2db      	uxtb	r3, r3
 8013544:	001a      	movs	r2, r3
 8013546:	2328      	movs	r3, #40	@ 0x28
 8013548:	4013      	ands	r3, r2
 801354a:	2b28      	cmp	r3, #40	@ 0x28
 801354c:	d003      	beq.n	8013556 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	22b0      	movs	r2, #176	@ 0xb0
 8013552:	4313      	orrs	r3, r2
 8013554:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8013556:	1cbb      	adds	r3, r7, #2
 8013558:	881b      	ldrh	r3, [r3, #0]
 801355a:	2202      	movs	r2, #2
 801355c:	4013      	ands	r3, r2
 801355e:	d010      	beq.n	8013582 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	2244      	movs	r2, #68	@ 0x44
 8013564:	4313      	orrs	r3, r2
 8013566:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2241      	movs	r2, #65	@ 0x41
 801356c:	5c9b      	ldrb	r3, [r3, r2]
 801356e:	b2db      	uxtb	r3, r3
 8013570:	001a      	movs	r2, r3
 8013572:	2328      	movs	r3, #40	@ 0x28
 8013574:	4013      	ands	r3, r2
 8013576:	2b28      	cmp	r3, #40	@ 0x28
 8013578:	d003      	beq.n	8013582 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	22b0      	movs	r2, #176	@ 0xb0
 801357e:	4313      	orrs	r3, r2
 8013580:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8013582:	1cbb      	adds	r3, r7, #2
 8013584:	2200      	movs	r2, #0
 8013586:	5e9b      	ldrsh	r3, [r3, r2]
 8013588:	2b00      	cmp	r3, #0
 801358a:	da03      	bge.n	8013594 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	22b8      	movs	r2, #184	@ 0xb8
 8013590:	4313      	orrs	r3, r2
 8013592:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8013594:	1cbb      	adds	r3, r7, #2
 8013596:	881b      	ldrh	r3, [r3, #0]
 8013598:	2b10      	cmp	r3, #16
 801359a:	d103      	bne.n	80135a4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2290      	movs	r2, #144	@ 0x90
 80135a0:	4313      	orrs	r3, r2
 80135a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80135a4:	1cbb      	adds	r3, r7, #2
 80135a6:	881b      	ldrh	r3, [r3, #0]
 80135a8:	2b20      	cmp	r3, #32
 80135aa:	d103      	bne.n	80135b4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2220      	movs	r2, #32
 80135b0:	4313      	orrs	r3, r2
 80135b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80135b4:	1cbb      	adds	r3, r7, #2
 80135b6:	881b      	ldrh	r3, [r3, #0]
 80135b8:	2b40      	cmp	r3, #64	@ 0x40
 80135ba:	d103      	bne.n	80135c4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2240      	movs	r2, #64	@ 0x40
 80135c0:	4313      	orrs	r3, r2
 80135c2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	43d9      	mvns	r1, r3
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	400a      	ands	r2, r1
 80135d4:	601a      	str	r2, [r3, #0]
}
 80135d6:	46c0      	nop			@ (mov r8, r8)
 80135d8:	46bd      	mov	sp, r7
 80135da:	b004      	add	sp, #16
 80135dc:	bd80      	pop	{r7, pc}
	...

080135e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
 80135e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2241      	movs	r2, #65	@ 0x41
 80135ee:	5c9b      	ldrb	r3, [r3, r2]
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	2b20      	cmp	r3, #32
 80135f4:	d138      	bne.n	8013668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2240      	movs	r2, #64	@ 0x40
 80135fa:	5c9b      	ldrb	r3, [r3, r2]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d101      	bne.n	8013604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8013600:	2302      	movs	r3, #2
 8013602:	e032      	b.n	801366a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2240      	movs	r2, #64	@ 0x40
 8013608:	2101      	movs	r1, #1
 801360a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2241      	movs	r2, #65	@ 0x41
 8013610:	2124      	movs	r1, #36	@ 0x24
 8013612:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	681a      	ldr	r2, [r3, #0]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2101      	movs	r1, #1
 8013620:	438a      	bics	r2, r1
 8013622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	4911      	ldr	r1, [pc, #68]	@ (8013674 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8013630:	400a      	ands	r2, r1
 8013632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	6819      	ldr	r1, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	683a      	ldr	r2, [r7, #0]
 8013640:	430a      	orrs	r2, r1
 8013642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2101      	movs	r1, #1
 8013650:	430a      	orrs	r2, r1
 8013652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2241      	movs	r2, #65	@ 0x41
 8013658:	2120      	movs	r1, #32
 801365a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2240      	movs	r2, #64	@ 0x40
 8013660:	2100      	movs	r1, #0
 8013662:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013664:	2300      	movs	r3, #0
 8013666:	e000      	b.n	801366a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013668:	2302      	movs	r3, #2
  }
}
 801366a:	0018      	movs	r0, r3
 801366c:	46bd      	mov	sp, r7
 801366e:	b002      	add	sp, #8
 8013670:	bd80      	pop	{r7, pc}
 8013672:	46c0      	nop			@ (mov r8, r8)
 8013674:	ffffefff 	.word	0xffffefff

08013678 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2241      	movs	r2, #65	@ 0x41
 8013686:	5c9b      	ldrb	r3, [r3, r2]
 8013688:	b2db      	uxtb	r3, r3
 801368a:	2b20      	cmp	r3, #32
 801368c:	d139      	bne.n	8013702 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	2240      	movs	r2, #64	@ 0x40
 8013692:	5c9b      	ldrb	r3, [r3, r2]
 8013694:	2b01      	cmp	r3, #1
 8013696:	d101      	bne.n	801369c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8013698:	2302      	movs	r3, #2
 801369a:	e033      	b.n	8013704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2240      	movs	r2, #64	@ 0x40
 80136a0:	2101      	movs	r1, #1
 80136a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2241      	movs	r2, #65	@ 0x41
 80136a8:	2124      	movs	r1, #36	@ 0x24
 80136aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2101      	movs	r1, #1
 80136b8:	438a      	bics	r2, r1
 80136ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	4a11      	ldr	r2, [pc, #68]	@ (801370c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80136c8:	4013      	ands	r3, r2
 80136ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	021b      	lsls	r3, r3, #8
 80136d0:	68fa      	ldr	r2, [r7, #12]
 80136d2:	4313      	orrs	r3, r2
 80136d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	681a      	ldr	r2, [r3, #0]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	2101      	movs	r1, #1
 80136ea:	430a      	orrs	r2, r1
 80136ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2241      	movs	r2, #65	@ 0x41
 80136f2:	2120      	movs	r1, #32
 80136f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2240      	movs	r2, #64	@ 0x40
 80136fa:	2100      	movs	r1, #0
 80136fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80136fe:	2300      	movs	r3, #0
 8013700:	e000      	b.n	8013704 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8013702:	2302      	movs	r3, #2
  }
}
 8013704:	0018      	movs	r0, r3
 8013706:	46bd      	mov	sp, r7
 8013708:	b004      	add	sp, #16
 801370a:	bd80      	pop	{r7, pc}
 801370c:	fffff0ff 	.word	0xfffff0ff

08013710 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b088      	sub	sp, #32
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d101      	bne.n	8013722 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801371e:	2301      	movs	r3, #1
 8013720:	e0e1      	b.n	80138e6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2235      	movs	r2, #53	@ 0x35
 8013726:	5c9b      	ldrb	r3, [r3, r2]
 8013728:	b2db      	uxtb	r3, r3
 801372a:	2b00      	cmp	r3, #0
 801372c:	d107      	bne.n	801373e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2234      	movs	r2, #52	@ 0x34
 8013732:	2100      	movs	r1, #0
 8013734:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	0018      	movs	r0, r3
 801373a:	f7f4 feb3 	bl	80084a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2235      	movs	r2, #53	@ 0x35
 8013742:	2102      	movs	r1, #2
 8013744:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	69da      	ldr	r2, [r3, #28]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	4967      	ldr	r1, [pc, #412]	@ (80138f0 <HAL_I2S_Init+0x1e0>)
 8013752:	400a      	ands	r2, r1
 8013754:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2202      	movs	r2, #2
 801375c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	695b      	ldr	r3, [r3, #20]
 8013762:	2b02      	cmp	r3, #2
 8013764:	d073      	beq.n	801384e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d102      	bne.n	8013774 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 801376e:	2310      	movs	r3, #16
 8013770:	617b      	str	r3, [r7, #20]
 8013772:	e001      	b.n	8013778 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8013774:	2320      	movs	r3, #32
 8013776:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	689b      	ldr	r3, [r3, #8]
 801377c:	2b20      	cmp	r3, #32
 801377e:	d802      	bhi.n	8013786 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	005b      	lsls	r3, r3, #1
 8013784:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8013786:	f002 fed3 	bl	8016530 <HAL_RCC_GetSysClockFreq>
 801378a:	0003      	movs	r3, r0
 801378c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	691a      	ldr	r2, [r3, #16]
 8013792:	2380      	movs	r3, #128	@ 0x80
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	429a      	cmp	r2, r3
 8013798:	d131      	bne.n	80137fe <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d016      	beq.n	80137d0 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	0019      	movs	r1, r3
 80137a8:	68f8      	ldr	r0, [r7, #12]
 80137aa:	f7ec fcfb 	bl	80001a4 <__udivsi3>
 80137ae:	0003      	movs	r3, r0
 80137b0:	001a      	movs	r2, r3
 80137b2:	0013      	movs	r3, r2
 80137b4:	009b      	lsls	r3, r3, #2
 80137b6:	189b      	adds	r3, r3, r2
 80137b8:	005b      	lsls	r3, r3, #1
 80137ba:	001a      	movs	r2, r3
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	695b      	ldr	r3, [r3, #20]
 80137c0:	0019      	movs	r1, r3
 80137c2:	0010      	movs	r0, r2
 80137c4:	f7ec fcee 	bl	80001a4 <__udivsi3>
 80137c8:	0003      	movs	r3, r0
 80137ca:	3305      	adds	r3, #5
 80137cc:	613b      	str	r3, [r7, #16]
 80137ce:	e02a      	b.n	8013826 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	00db      	lsls	r3, r3, #3
 80137d4:	0019      	movs	r1, r3
 80137d6:	68f8      	ldr	r0, [r7, #12]
 80137d8:	f7ec fce4 	bl	80001a4 <__udivsi3>
 80137dc:	0003      	movs	r3, r0
 80137de:	001a      	movs	r2, r3
 80137e0:	0013      	movs	r3, r2
 80137e2:	009b      	lsls	r3, r3, #2
 80137e4:	189b      	adds	r3, r3, r2
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	001a      	movs	r2, r3
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	695b      	ldr	r3, [r3, #20]
 80137ee:	0019      	movs	r1, r3
 80137f0:	0010      	movs	r0, r2
 80137f2:	f7ec fcd7 	bl	80001a4 <__udivsi3>
 80137f6:	0003      	movs	r3, r0
 80137f8:	3305      	adds	r3, #5
 80137fa:	613b      	str	r3, [r7, #16]
 80137fc:	e013      	b.n	8013826 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80137fe:	6979      	ldr	r1, [r7, #20]
 8013800:	68f8      	ldr	r0, [r7, #12]
 8013802:	f7ec fccf 	bl	80001a4 <__udivsi3>
 8013806:	0003      	movs	r3, r0
 8013808:	001a      	movs	r2, r3
 801380a:	0013      	movs	r3, r2
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	189b      	adds	r3, r3, r2
 8013810:	005b      	lsls	r3, r3, #1
 8013812:	001a      	movs	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	695b      	ldr	r3, [r3, #20]
 8013818:	0019      	movs	r1, r3
 801381a:	0010      	movs	r0, r2
 801381c:	f7ec fcc2 	bl	80001a4 <__udivsi3>
 8013820:	0003      	movs	r3, r0
 8013822:	3305      	adds	r3, #5
 8013824:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	210a      	movs	r1, #10
 801382a:	0018      	movs	r0, r3
 801382c:	f7ec fcba 	bl	80001a4 <__udivsi3>
 8013830:	0003      	movs	r3, r0
 8013832:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	2201      	movs	r2, #1
 8013838:	4013      	ands	r3, r2
 801383a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 801383c:	693a      	ldr	r2, [r7, #16]
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	1ad3      	subs	r3, r2, r3
 8013842:	085b      	lsrs	r3, r3, #1
 8013844:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8013846:	69bb      	ldr	r3, [r7, #24]
 8013848:	021b      	lsls	r3, r3, #8
 801384a:	61bb      	str	r3, [r7, #24]
 801384c:	e003      	b.n	8013856 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801384e:	2302      	movs	r3, #2
 8013850:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8013852:	2300      	movs	r3, #0
 8013854:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d902      	bls.n	8013862 <HAL_I2S_Init+0x152>
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	2bff      	cmp	r3, #255	@ 0xff
 8013860:	d907      	bls.n	8013872 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013866:	2210      	movs	r2, #16
 8013868:	431a      	orrs	r2, r3
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 801386e:	2301      	movs	r3, #1
 8013870:	e039      	b.n	80138e6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	691a      	ldr	r2, [r3, #16]
 8013876:	69bb      	ldr	r3, [r7, #24]
 8013878:	431a      	orrs	r2, r3
 801387a:	0011      	movs	r1, r2
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	69fa      	ldr	r2, [r7, #28]
 8013882:	430a      	orrs	r2, r1
 8013884:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	69db      	ldr	r3, [r3, #28]
 801388c:	4a18      	ldr	r2, [pc, #96]	@ (80138f0 <HAL_I2S_Init+0x1e0>)
 801388e:	401a      	ands	r2, r3
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	6859      	ldr	r1, [r3, #4]
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	689b      	ldr	r3, [r3, #8]
 8013898:	4319      	orrs	r1, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	68db      	ldr	r3, [r3, #12]
 801389e:	4319      	orrs	r1, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	699b      	ldr	r3, [r3, #24]
 80138a4:	430b      	orrs	r3, r1
 80138a6:	431a      	orrs	r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2180      	movs	r1, #128	@ 0x80
 80138ae:	0109      	lsls	r1, r1, #4
 80138b0:	430a      	orrs	r2, r1
 80138b2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	689b      	ldr	r3, [r3, #8]
 80138b8:	2b30      	cmp	r3, #48	@ 0x30
 80138ba:	d003      	beq.n	80138c4 <HAL_I2S_Init+0x1b4>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	689b      	ldr	r3, [r3, #8]
 80138c0:	2bb0      	cmp	r3, #176	@ 0xb0
 80138c2:	d108      	bne.n	80138d6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	69da      	ldr	r2, [r3, #28]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	2180      	movs	r1, #128	@ 0x80
 80138d0:	0149      	lsls	r1, r1, #5
 80138d2:	430a      	orrs	r2, r1
 80138d4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2200      	movs	r2, #0
 80138da:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2235      	movs	r2, #53	@ 0x35
 80138e0:	2101      	movs	r1, #1
 80138e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80138e4:	2300      	movs	r3, #0
}
 80138e6:	0018      	movs	r0, r3
 80138e8:	46bd      	mov	sp, r7
 80138ea:	b008      	add	sp, #32
 80138ec:	bd80      	pop	{r7, pc}
 80138ee:	46c0      	nop			@ (mov r8, r8)
 80138f0:	fffff040 	.word	0xfffff040

080138f4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b086      	sub	sp, #24
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	1dbb      	adds	r3, r7, #6
 8013900:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d003      	beq.n	8013910 <HAL_I2S_Receive_DMA+0x1c>
 8013908:	1dbb      	adds	r3, r7, #6
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d101      	bne.n	8013914 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8013910:	2301      	movs	r3, #1
 8013912:	e0a6      	b.n	8013a62 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2234      	movs	r2, #52	@ 0x34
 8013918:	5c9b      	ldrb	r3, [r3, r2]
 801391a:	b2db      	uxtb	r3, r3
 801391c:	2b01      	cmp	r3, #1
 801391e:	d101      	bne.n	8013924 <HAL_I2S_Receive_DMA+0x30>
 8013920:	2302      	movs	r3, #2
 8013922:	e09e      	b.n	8013a62 <HAL_I2S_Receive_DMA+0x16e>
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	2234      	movs	r2, #52	@ 0x34
 8013928:	2101      	movs	r1, #1
 801392a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2235      	movs	r2, #53	@ 0x35
 8013930:	5c9b      	ldrb	r3, [r3, r2]
 8013932:	b2db      	uxtb	r3, r3
 8013934:	2b01      	cmp	r3, #1
 8013936:	d005      	beq.n	8013944 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2234      	movs	r2, #52	@ 0x34
 801393c:	2100      	movs	r1, #0
 801393e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8013940:	2302      	movs	r3, #2
 8013942:	e08e      	b.n	8013a62 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	2235      	movs	r2, #53	@ 0x35
 8013948:	2104      	movs	r1, #4
 801394a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	2200      	movs	r2, #0
 8013950:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	68ba      	ldr	r2, [r7, #8]
 8013956:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	69db      	ldr	r3, [r3, #28]
 801395e:	2207      	movs	r2, #7
 8013960:	4013      	ands	r3, r2
 8013962:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	2b03      	cmp	r3, #3
 8013968:	d002      	beq.n	8013970 <HAL_I2S_Receive_DMA+0x7c>
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	2b05      	cmp	r3, #5
 801396e:	d10c      	bne.n	801398a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8013970:	1dbb      	adds	r3, r7, #6
 8013972:	881b      	ldrh	r3, [r3, #0]
 8013974:	18db      	adds	r3, r3, r3
 8013976:	b29a      	uxth	r2, r3
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 801397c:	1dbb      	adds	r3, r7, #6
 801397e:	881b      	ldrh	r3, [r3, #0]
 8013980:	18db      	adds	r3, r3, r3
 8013982:	b29a      	uxth	r2, r3
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013988:	e007      	b.n	801399a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	1dba      	adds	r2, r7, #6
 801398e:	8812      	ldrh	r2, [r2, #0]
 8013990:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	1dba      	adds	r2, r7, #6
 8013996:	8812      	ldrh	r2, [r2, #0]
 8013998:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801399e:	4a33      	ldr	r2, [pc, #204]	@ (8013a6c <HAL_I2S_Receive_DMA+0x178>)
 80139a0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139a6:	4a32      	ldr	r2, [pc, #200]	@ (8013a70 <HAL_I2S_Receive_DMA+0x17c>)
 80139a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139ae:	4a31      	ldr	r2, [pc, #196]	@ (8013a74 <HAL_I2S_Receive_DMA+0x180>)
 80139b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	69da      	ldr	r2, [r3, #28]
 80139b8:	23c0      	movs	r3, #192	@ 0xc0
 80139ba:	009b      	lsls	r3, r3, #2
 80139bc:	401a      	ands	r2, r3
 80139be:	23c0      	movs	r3, #192	@ 0xc0
 80139c0:	009b      	lsls	r3, r3, #2
 80139c2:	429a      	cmp	r2, r3
 80139c4:	d10a      	bne.n	80139dc <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80139c6:	2300      	movs	r3, #0
 80139c8:	613b      	str	r3, [r7, #16]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	613b      	str	r3, [r7, #16]
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	689b      	ldr	r3, [r3, #8]
 80139d8:	613b      	str	r3, [r7, #16]
 80139da:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	330c      	adds	r3, #12
 80139e6:	0019      	movs	r1, r3
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139ec:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80139f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80139f4:	f7fc fca2 	bl	801033c <HAL_DMA_Start_IT>
 80139f8:	1e03      	subs	r3, r0, #0
 80139fa:	d00f      	beq.n	8013a1c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a00:	2208      	movs	r2, #8
 8013a02:	431a      	orrs	r2, r3
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2235      	movs	r2, #53	@ 0x35
 8013a0c:	2101      	movs	r1, #1
 8013a0e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2234      	movs	r2, #52	@ 0x34
 8013a14:	2100      	movs	r1, #0
 8013a16:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013a18:	2301      	movs	r3, #1
 8013a1a:	e022      	b.n	8013a62 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	69da      	ldr	r2, [r3, #28]
 8013a22:	2380      	movs	r3, #128	@ 0x80
 8013a24:	00db      	lsls	r3, r3, #3
 8013a26:	4013      	ands	r3, r2
 8013a28:	d108      	bne.n	8013a3c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	69da      	ldr	r2, [r3, #28]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	2180      	movs	r1, #128	@ 0x80
 8013a36:	00c9      	lsls	r1, r1, #3
 8013a38:	430a      	orrs	r2, r1
 8013a3a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	685b      	ldr	r3, [r3, #4]
 8013a42:	2201      	movs	r2, #1
 8013a44:	4013      	ands	r3, r2
 8013a46:	d107      	bne.n	8013a58 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	685a      	ldr	r2, [r3, #4]
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	2101      	movs	r1, #1
 8013a54:	430a      	orrs	r2, r1
 8013a56:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	2234      	movs	r2, #52	@ 0x34
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	0018      	movs	r0, r3
 8013a64:	46bd      	mov	sp, r7
 8013a66:	b006      	add	sp, #24
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	46c0      	nop			@ (mov r8, r8)
 8013a6c:	08013c55 	.word	0x08013c55
 8013a70:	08013c11 	.word	0x08013c11
 8013a74:	08013c73 	.word	0x08013c73

08013a78 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b086      	sub	sp, #24
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013a80:	2317      	movs	r3, #23
 8013a82:	18fb      	adds	r3, r7, r3
 8013a84:	2200      	movs	r2, #0
 8013a86:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	685a      	ldr	r2, [r3, #4]
 8013a8c:	2380      	movs	r3, #128	@ 0x80
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d003      	beq.n	8013a9c <HAL_I2S_DMAStop+0x24>
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d158      	bne.n	8013b4e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d010      	beq.n	8013ac6 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013aa8:	0018      	movs	r0, r3
 8013aaa:	f7fc fcad 	bl	8010408 <HAL_DMA_Abort>
 8013aae:	1e03      	subs	r3, r0, #0
 8013ab0:	d009      	beq.n	8013ac6 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ab6:	2208      	movs	r2, #8
 8013ab8:	431a      	orrs	r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8013abe:	2317      	movs	r3, #23
 8013ac0:	18fb      	adds	r3, r7, r3
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	2364      	movs	r3, #100	@ 0x64
 8013aca:	2201      	movs	r2, #1
 8013acc:	2102      	movs	r1, #2
 8013ace:	f000 f8f7 	bl	8013cc0 <I2S_WaitFlagStateUntilTimeout>
 8013ad2:	1e03      	subs	r3, r0, #0
 8013ad4:	d00d      	beq.n	8013af2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ada:	2201      	movs	r2, #1
 8013adc:	431a      	orrs	r2, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2235      	movs	r2, #53	@ 0x35
 8013ae6:	2101      	movs	r1, #1
 8013ae8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8013aea:	2317      	movs	r3, #23
 8013aec:	18fb      	adds	r3, r7, r3
 8013aee:	2201      	movs	r2, #1
 8013af0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	2364      	movs	r3, #100	@ 0x64
 8013af6:	2200      	movs	r2, #0
 8013af8:	2180      	movs	r1, #128	@ 0x80
 8013afa:	f000 f8e1 	bl	8013cc0 <I2S_WaitFlagStateUntilTimeout>
 8013afe:	1e03      	subs	r3, r0, #0
 8013b00:	d00d      	beq.n	8013b1e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b06:	2201      	movs	r2, #1
 8013b08:	431a      	orrs	r2, r3
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2235      	movs	r2, #53	@ 0x35
 8013b12:	2101      	movs	r1, #1
 8013b14:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8013b16:	2317      	movs	r3, #23
 8013b18:	18fb      	adds	r3, r7, r3
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	69da      	ldr	r2, [r3, #28]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	4938      	ldr	r1, [pc, #224]	@ (8013c0c <HAL_I2S_DMAStop+0x194>)
 8013b2a:	400a      	ands	r2, r1
 8013b2c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8013b2e:	2300      	movs	r3, #0
 8013b30:	613b      	str	r3, [r7, #16]
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	689b      	ldr	r3, [r3, #8]
 8013b38:	613b      	str	r3, [r7, #16]
 8013b3a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	685a      	ldr	r2, [r3, #4]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2102      	movs	r1, #2
 8013b48:	438a      	bics	r2, r1
 8013b4a:	605a      	str	r2, [r3, #4]
 8013b4c:	e053      	b.n	8013bf6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	685a      	ldr	r2, [r3, #4]
 8013b52:	23c0      	movs	r3, #192	@ 0xc0
 8013b54:	009b      	lsls	r3, r3, #2
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d005      	beq.n	8013b66 <HAL_I2S_DMAStop+0xee>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	685a      	ldr	r2, [r3, #4]
 8013b5e:	2380      	movs	r3, #128	@ 0x80
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d147      	bne.n	8013bf6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d010      	beq.n	8013b90 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b72:	0018      	movs	r0, r3
 8013b74:	f7fc fc48 	bl	8010408 <HAL_DMA_Abort>
 8013b78:	1e03      	subs	r3, r0, #0
 8013b7a:	d009      	beq.n	8013b90 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b80:	2208      	movs	r2, #8
 8013b82:	431a      	orrs	r2, r3
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8013b88:	2317      	movs	r3, #23
 8013b8a:	18fb      	adds	r3, r7, r3
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	69da      	ldr	r2, [r3, #28]
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	491c      	ldr	r1, [pc, #112]	@ (8013c0c <HAL_I2S_DMAStop+0x194>)
 8013b9c:	400a      	ands	r2, r1
 8013b9e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	60fb      	str	r3, [r7, #12]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	68db      	ldr	r3, [r3, #12]
 8013baa:	60fb      	str	r3, [r7, #12]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	689b      	ldr	r3, [r3, #8]
 8013bb2:	60fb      	str	r3, [r7, #12]
 8013bb4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	685a      	ldr	r2, [r3, #4]
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	2101      	movs	r1, #1
 8013bc2:	438a      	bics	r2, r1
 8013bc4:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	685a      	ldr	r2, [r3, #4]
 8013bca:	2380      	movs	r3, #128	@ 0x80
 8013bcc:	005b      	lsls	r3, r3, #1
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d10e      	bne.n	8013bf0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bd6:	2240      	movs	r2, #64	@ 0x40
 8013bd8:	431a      	orrs	r2, r3
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2235      	movs	r2, #53	@ 0x35
 8013be2:	2101      	movs	r1, #1
 8013be4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8013be6:	2317      	movs	r3, #23
 8013be8:	18fb      	adds	r3, r7, r3
 8013bea:	2201      	movs	r2, #1
 8013bec:	701a      	strb	r2, [r3, #0]
 8013bee:	e002      	b.n	8013bf6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2235      	movs	r2, #53	@ 0x35
 8013bfa:	2101      	movs	r1, #1
 8013bfc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8013bfe:	2317      	movs	r3, #23
 8013c00:	18fb      	adds	r3, r7, r3
 8013c02:	781b      	ldrb	r3, [r3, #0]
}
 8013c04:	0018      	movs	r0, r3
 8013c06:	46bd      	mov	sp, r7
 8013c08:	b006      	add	sp, #24
 8013c0a:	bd80      	pop	{r7, pc}
 8013c0c:	fffffbff 	.word	0xfffffbff

08013c10 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c1c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	69db      	ldr	r3, [r3, #28]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d10e      	bne.n	8013c44 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	685a      	ldr	r2, [r3, #4]
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2101      	movs	r1, #1
 8013c32:	438a      	bics	r2, r1
 8013c34:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	2235      	movs	r2, #53	@ 0x35
 8013c40:	2101      	movs	r1, #1
 8013c42:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	0018      	movs	r0, r3
 8013c48:	f7f9 f948 	bl	800cedc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013c4c:	46c0      	nop			@ (mov r8, r8)
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	b004      	add	sp, #16
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b084      	sub	sp, #16
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c60:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	0018      	movs	r0, r3
 8013c66:	f7f9 f927 	bl	800ceb8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013c6a:	46c0      	nop			@ (mov r8, r8)
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	b004      	add	sp, #16
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8013c72:	b580      	push	{r7, lr}
 8013c74:	b084      	sub	sp, #16
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c7e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	685a      	ldr	r2, [r3, #4]
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2103      	movs	r1, #3
 8013c8c:	438a      	bics	r2, r1
 8013c8e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	2200      	movs	r2, #0
 8013c94:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	2235      	movs	r2, #53	@ 0x35
 8013ca0:	2101      	movs	r1, #1
 8013ca2:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ca8:	2208      	movs	r2, #8
 8013caa:	431a      	orrs	r2, r3
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	0018      	movs	r0, r3
 8013cb4:	f7f9 f960 	bl	800cf78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013cb8:	46c0      	nop			@ (mov r8, r8)
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	b004      	add	sp, #16
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b086      	sub	sp, #24
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	60f8      	str	r0, [r7, #12]
 8013cc8:	60b9      	str	r1, [r7, #8]
 8013cca:	603b      	str	r3, [r7, #0]
 8013ccc:	1dfb      	adds	r3, r7, #7
 8013cce:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8013cd0:	f7fb fde2 	bl	800f898 <HAL_GetTick>
 8013cd4:	0003      	movs	r3, r0
 8013cd6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013cd8:	e017      	b.n	8013d0a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	3301      	adds	r3, #1
 8013cde:	d014      	beq.n	8013d0a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8013ce0:	f7fb fdda 	bl	800f898 <HAL_GetTick>
 8013ce4:	0002      	movs	r2, r0
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	1ad3      	subs	r3, r2, r3
 8013cea:	683a      	ldr	r2, [r7, #0]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d902      	bls.n	8013cf6 <I2S_WaitFlagStateUntilTimeout+0x36>
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d109      	bne.n	8013d0a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2235      	movs	r2, #53	@ 0x35
 8013cfa:	2101      	movs	r1, #1
 8013cfc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2234      	movs	r2, #52	@ 0x34
 8013d02:	2100      	movs	r1, #0
 8013d04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8013d06:	2303      	movs	r3, #3
 8013d08:	e00f      	b.n	8013d2a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	689b      	ldr	r3, [r3, #8]
 8013d10:	68ba      	ldr	r2, [r7, #8]
 8013d12:	4013      	ands	r3, r2
 8013d14:	68ba      	ldr	r2, [r7, #8]
 8013d16:	1ad3      	subs	r3, r2, r3
 8013d18:	425a      	negs	r2, r3
 8013d1a:	4153      	adcs	r3, r2
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	001a      	movs	r2, r3
 8013d20:	1dfb      	adds	r3, r7, #7
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d1d8      	bne.n	8013cda <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013d28:	2300      	movs	r3, #0
}
 8013d2a:	0018      	movs	r0, r3
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	b006      	add	sp, #24
 8013d30:	bd80      	pop	{r7, pc}
	...

08013d34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d36:	b08b      	sub	sp, #44	@ 0x2c
 8013d38:	af06      	add	r7, sp, #24
 8013d3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d101      	bne.n	8013d46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8013d42:	2301      	movs	r3, #1
 8013d44:	e0f0      	b.n	8013f28 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4a79      	ldr	r2, [pc, #484]	@ (8013f30 <HAL_PCD_Init+0x1fc>)
 8013d4a:	5c9b      	ldrb	r3, [r3, r2]
 8013d4c:	b2db      	uxtb	r3, r3
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d108      	bne.n	8013d64 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013d52:	687a      	ldr	r2, [r7, #4]
 8013d54:	23aa      	movs	r3, #170	@ 0xaa
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	2100      	movs	r1, #0
 8013d5a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	0018      	movs	r0, r3
 8013d60:	f009 ff4a 	bl	801dbf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	4a72      	ldr	r2, [pc, #456]	@ (8013f30 <HAL_PCD_Init+0x1fc>)
 8013d68:	2103      	movs	r1, #3
 8013d6a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	0018      	movs	r0, r3
 8013d72:	f005 fefd 	bl	8019b70 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013d76:	230f      	movs	r3, #15
 8013d78:	18fb      	adds	r3, r7, r3
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	701a      	strb	r2, [r3, #0]
 8013d7e:	e049      	b.n	8013e14 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013d80:	200f      	movs	r0, #15
 8013d82:	183b      	adds	r3, r7, r0
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	6879      	ldr	r1, [r7, #4]
 8013d88:	1c5a      	adds	r2, r3, #1
 8013d8a:	0013      	movs	r3, r2
 8013d8c:	009b      	lsls	r3, r3, #2
 8013d8e:	189b      	adds	r3, r3, r2
 8013d90:	00db      	lsls	r3, r3, #3
 8013d92:	18cb      	adds	r3, r1, r3
 8013d94:	3301      	adds	r3, #1
 8013d96:	2201      	movs	r2, #1
 8013d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013d9a:	183b      	adds	r3, r7, r0
 8013d9c:	781b      	ldrb	r3, [r3, #0]
 8013d9e:	6879      	ldr	r1, [r7, #4]
 8013da0:	1c5a      	adds	r2, r3, #1
 8013da2:	0013      	movs	r3, r2
 8013da4:	009b      	lsls	r3, r3, #2
 8013da6:	189b      	adds	r3, r3, r2
 8013da8:	00db      	lsls	r3, r3, #3
 8013daa:	183a      	adds	r2, r7, r0
 8013dac:	7812      	ldrb	r2, [r2, #0]
 8013dae:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013db0:	183b      	adds	r3, r7, r0
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	6879      	ldr	r1, [r7, #4]
 8013db6:	1c5a      	adds	r2, r3, #1
 8013db8:	0013      	movs	r3, r2
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	189b      	adds	r3, r3, r2
 8013dbe:	00db      	lsls	r3, r3, #3
 8013dc0:	18cb      	adds	r3, r1, r3
 8013dc2:	3303      	adds	r3, #3
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013dc8:	183b      	adds	r3, r7, r0
 8013dca:	781a      	ldrb	r2, [r3, #0]
 8013dcc:	6879      	ldr	r1, [r7, #4]
 8013dce:	0013      	movs	r3, r2
 8013dd0:	009b      	lsls	r3, r3, #2
 8013dd2:	189b      	adds	r3, r3, r2
 8013dd4:	00db      	lsls	r3, r3, #3
 8013dd6:	18cb      	adds	r3, r1, r3
 8013dd8:	3338      	adds	r3, #56	@ 0x38
 8013dda:	2200      	movs	r2, #0
 8013ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013dde:	183b      	adds	r3, r7, r0
 8013de0:	781a      	ldrb	r2, [r3, #0]
 8013de2:	6879      	ldr	r1, [r7, #4]
 8013de4:	0013      	movs	r3, r2
 8013de6:	009b      	lsls	r3, r3, #2
 8013de8:	189b      	adds	r3, r3, r2
 8013dea:	00db      	lsls	r3, r3, #3
 8013dec:	18cb      	adds	r3, r1, r3
 8013dee:	333c      	adds	r3, #60	@ 0x3c
 8013df0:	2200      	movs	r2, #0
 8013df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013df4:	183b      	adds	r3, r7, r0
 8013df6:	781a      	ldrb	r2, [r3, #0]
 8013df8:	6879      	ldr	r1, [r7, #4]
 8013dfa:	0013      	movs	r3, r2
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	189b      	adds	r3, r3, r2
 8013e00:	00db      	lsls	r3, r3, #3
 8013e02:	18cb      	adds	r3, r1, r3
 8013e04:	3340      	adds	r3, #64	@ 0x40
 8013e06:	2200      	movs	r2, #0
 8013e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013e0a:	183b      	adds	r3, r7, r0
 8013e0c:	781a      	ldrb	r2, [r3, #0]
 8013e0e:	183b      	adds	r3, r7, r0
 8013e10:	3201      	adds	r2, #1
 8013e12:	701a      	strb	r2, [r3, #0]
 8013e14:	210f      	movs	r1, #15
 8013e16:	187b      	adds	r3, r7, r1
 8013e18:	781a      	ldrb	r2, [r3, #0]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	685b      	ldr	r3, [r3, #4]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d3ae      	bcc.n	8013d80 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013e22:	187b      	adds	r3, r7, r1
 8013e24:	2200      	movs	r2, #0
 8013e26:	701a      	strb	r2, [r3, #0]
 8013e28:	e056      	b.n	8013ed8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013e2a:	240f      	movs	r4, #15
 8013e2c:	193b      	adds	r3, r7, r4
 8013e2e:	781a      	ldrb	r2, [r3, #0]
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	236a      	movs	r3, #106	@ 0x6a
 8013e34:	33ff      	adds	r3, #255	@ 0xff
 8013e36:	0019      	movs	r1, r3
 8013e38:	0013      	movs	r3, r2
 8013e3a:	009b      	lsls	r3, r3, #2
 8013e3c:	189b      	adds	r3, r3, r2
 8013e3e:	00db      	lsls	r3, r3, #3
 8013e40:	18c3      	adds	r3, r0, r3
 8013e42:	185b      	adds	r3, r3, r1
 8013e44:	2200      	movs	r2, #0
 8013e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013e48:	193b      	adds	r3, r7, r4
 8013e4a:	781a      	ldrb	r2, [r3, #0]
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	23b4      	movs	r3, #180	@ 0xb4
 8013e50:	0059      	lsls	r1, r3, #1
 8013e52:	0013      	movs	r3, r2
 8013e54:	009b      	lsls	r3, r3, #2
 8013e56:	189b      	adds	r3, r3, r2
 8013e58:	00db      	lsls	r3, r3, #3
 8013e5a:	18c3      	adds	r3, r0, r3
 8013e5c:	185b      	adds	r3, r3, r1
 8013e5e:	193a      	adds	r2, r7, r4
 8013e60:	7812      	ldrb	r2, [r2, #0]
 8013e62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013e64:	193b      	adds	r3, r7, r4
 8013e66:	781a      	ldrb	r2, [r3, #0]
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	236c      	movs	r3, #108	@ 0x6c
 8013e6c:	33ff      	adds	r3, #255	@ 0xff
 8013e6e:	0019      	movs	r1, r3
 8013e70:	0013      	movs	r3, r2
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	189b      	adds	r3, r3, r2
 8013e76:	00db      	lsls	r3, r3, #3
 8013e78:	18c3      	adds	r3, r0, r3
 8013e7a:	185b      	adds	r3, r3, r1
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013e80:	193b      	adds	r3, r7, r4
 8013e82:	781a      	ldrb	r2, [r3, #0]
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	23bc      	movs	r3, #188	@ 0xbc
 8013e88:	0059      	lsls	r1, r3, #1
 8013e8a:	0013      	movs	r3, r2
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	189b      	adds	r3, r3, r2
 8013e90:	00db      	lsls	r3, r3, #3
 8013e92:	18c3      	adds	r3, r0, r3
 8013e94:	185b      	adds	r3, r3, r1
 8013e96:	2200      	movs	r2, #0
 8013e98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013e9a:	193b      	adds	r3, r7, r4
 8013e9c:	781a      	ldrb	r2, [r3, #0]
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	23be      	movs	r3, #190	@ 0xbe
 8013ea2:	0059      	lsls	r1, r3, #1
 8013ea4:	0013      	movs	r3, r2
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	189b      	adds	r3, r3, r2
 8013eaa:	00db      	lsls	r3, r3, #3
 8013eac:	18c3      	adds	r3, r0, r3
 8013eae:	185b      	adds	r3, r3, r1
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013eb4:	193b      	adds	r3, r7, r4
 8013eb6:	781a      	ldrb	r2, [r3, #0]
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	23c0      	movs	r3, #192	@ 0xc0
 8013ebc:	0059      	lsls	r1, r3, #1
 8013ebe:	0013      	movs	r3, r2
 8013ec0:	009b      	lsls	r3, r3, #2
 8013ec2:	189b      	adds	r3, r3, r2
 8013ec4:	00db      	lsls	r3, r3, #3
 8013ec6:	18c3      	adds	r3, r0, r3
 8013ec8:	185b      	adds	r3, r3, r1
 8013eca:	2200      	movs	r2, #0
 8013ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013ece:	193b      	adds	r3, r7, r4
 8013ed0:	781a      	ldrb	r2, [r3, #0]
 8013ed2:	193b      	adds	r3, r7, r4
 8013ed4:	3201      	adds	r2, #1
 8013ed6:	701a      	strb	r2, [r3, #0]
 8013ed8:	230f      	movs	r3, #15
 8013eda:	18fb      	adds	r3, r7, r3
 8013edc:	781a      	ldrb	r2, [r3, #0]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d3a1      	bcc.n	8013e2a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6818      	ldr	r0, [r3, #0]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	466a      	mov	r2, sp
 8013eee:	0011      	movs	r1, r2
 8013ef0:	001a      	movs	r2, r3
 8013ef2:	3210      	adds	r2, #16
 8013ef4:	ca70      	ldmia	r2!, {r4, r5, r6}
 8013ef6:	c170      	stmia	r1!, {r4, r5, r6}
 8013ef8:	ca30      	ldmia	r2!, {r4, r5}
 8013efa:	c130      	stmia	r1!, {r4, r5}
 8013efc:	6859      	ldr	r1, [r3, #4]
 8013efe:	689a      	ldr	r2, [r3, #8]
 8013f00:	68db      	ldr	r3, [r3, #12]
 8013f02:	f005 fe4f 	bl	8019ba4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2224      	movs	r2, #36	@ 0x24
 8013f0a:	2100      	movs	r1, #0
 8013f0c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4a07      	ldr	r2, [pc, #28]	@ (8013f30 <HAL_PCD_Init+0x1fc>)
 8013f12:	2101      	movs	r1, #1
 8013f14:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	69db      	ldr	r3, [r3, #28]
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d103      	bne.n	8013f26 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	0018      	movs	r0, r3
 8013f22:	f001 fd23 	bl	801596c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	0018      	movs	r0, r3
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	b005      	add	sp, #20
 8013f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f30:	000002a9 	.word	0x000002a9

08013f34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	23aa      	movs	r3, #170	@ 0xaa
 8013f40:	009b      	lsls	r3, r3, #2
 8013f42:	5cd3      	ldrb	r3, [r2, r3]
 8013f44:	2b01      	cmp	r3, #1
 8013f46:	d101      	bne.n	8013f4c <HAL_PCD_Start+0x18>
 8013f48:	2302      	movs	r3, #2
 8013f4a:	e014      	b.n	8013f76 <HAL_PCD_Start+0x42>
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	23aa      	movs	r3, #170	@ 0xaa
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	2101      	movs	r1, #1
 8013f54:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	0018      	movs	r0, r3
 8013f5c:	f005 fdf2 	bl	8019b44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	0018      	movs	r0, r3
 8013f66:	f007 fdf5 	bl	801bb54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013f6a:	687a      	ldr	r2, [r7, #4]
 8013f6c:	23aa      	movs	r3, #170	@ 0xaa
 8013f6e:	009b      	lsls	r3, r3, #2
 8013f70:	2100      	movs	r1, #0
 8013f72:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013f74:	2300      	movs	r3, #0
}
 8013f76:	0018      	movs	r0, r3
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	b002      	add	sp, #8
 8013f7c:	bd80      	pop	{r7, pc}
	...

08013f80 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b084      	sub	sp, #16
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	0018      	movs	r0, r3
 8013f8e:	f007 fdf7 	bl	801bb80 <USB_ReadInterrupts>
 8013f92:	0003      	movs	r3, r0
 8013f94:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8013f96:	68fa      	ldr	r2, [r7, #12]
 8013f98:	2380      	movs	r3, #128	@ 0x80
 8013f9a:	021b      	lsls	r3, r3, #8
 8013f9c:	4013      	ands	r3, r2
 8013f9e:	d004      	beq.n	8013faa <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	0018      	movs	r0, r3
 8013fa4:	f000 fb62 	bl	801466c <PCD_EP_ISR_Handler>

    return;
 8013fa8:	e11d      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8013faa:	68fa      	ldr	r2, [r7, #12]
 8013fac:	2380      	movs	r3, #128	@ 0x80
 8013fae:	00db      	lsls	r3, r3, #3
 8013fb0:	4013      	ands	r3, r2
 8013fb2:	d015      	beq.n	8013fe0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2244      	movs	r2, #68	@ 0x44
 8013fba:	5a9b      	ldrh	r3, [r3, r2]
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	498a      	ldr	r1, [pc, #552]	@ (80141ec <HAL_PCD_IRQHandler+0x26c>)
 8013fc4:	400a      	ands	r2, r1
 8013fc6:	b291      	uxth	r1, r2
 8013fc8:	2244      	movs	r2, #68	@ 0x44
 8013fca:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	0018      	movs	r0, r3
 8013fd0:	f009 fe95 	bl	801dcfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	0018      	movs	r0, r3
 8013fda:	f000 f915 	bl	8014208 <HAL_PCD_SetAddress>

    return;
 8013fde:	e102      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8013fe0:	68fa      	ldr	r2, [r7, #12]
 8013fe2:	2380      	movs	r3, #128	@ 0x80
 8013fe4:	01db      	lsls	r3, r3, #7
 8013fe6:	4013      	ands	r3, r2
 8013fe8:	d00c      	beq.n	8014004 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2244      	movs	r2, #68	@ 0x44
 8013ff0:	5a9b      	ldrh	r3, [r3, r2]
 8013ff2:	b29a      	uxth	r2, r3
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	497d      	ldr	r1, [pc, #500]	@ (80141f0 <HAL_PCD_IRQHandler+0x270>)
 8013ffa:	400a      	ands	r2, r1
 8013ffc:	b291      	uxth	r1, r2
 8013ffe:	2244      	movs	r2, #68	@ 0x44
 8014000:	5299      	strh	r1, [r3, r2]

    return;
 8014002:	e0f0      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8014004:	68fa      	ldr	r2, [r7, #12]
 8014006:	2380      	movs	r3, #128	@ 0x80
 8014008:	019b      	lsls	r3, r3, #6
 801400a:	4013      	ands	r3, r2
 801400c:	d00c      	beq.n	8014028 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	2244      	movs	r2, #68	@ 0x44
 8014014:	5a9b      	ldrh	r3, [r3, r2]
 8014016:	b29a      	uxth	r2, r3
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	4975      	ldr	r1, [pc, #468]	@ (80141f4 <HAL_PCD_IRQHandler+0x274>)
 801401e:	400a      	ands	r2, r1
 8014020:	b291      	uxth	r1, r2
 8014022:	2244      	movs	r2, #68	@ 0x44
 8014024:	5299      	strh	r1, [r3, r2]

    return;
 8014026:	e0de      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8014028:	68fa      	ldr	r2, [r7, #12]
 801402a:	2380      	movs	r3, #128	@ 0x80
 801402c:	015b      	lsls	r3, r3, #5
 801402e:	4013      	ands	r3, r2
 8014030:	d038      	beq.n	80140a4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	2240      	movs	r2, #64	@ 0x40
 8014038:	5a9b      	ldrh	r3, [r3, r2]
 801403a:	b29a      	uxth	r2, r3
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2104      	movs	r1, #4
 8014042:	438a      	bics	r2, r1
 8014044:	b291      	uxth	r1, r2
 8014046:	2240      	movs	r2, #64	@ 0x40
 8014048:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2240      	movs	r2, #64	@ 0x40
 8014050:	5a9b      	ldrh	r3, [r3, r2]
 8014052:	b29a      	uxth	r2, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2108      	movs	r1, #8
 801405a:	438a      	bics	r2, r1
 801405c:	b291      	uxth	r1, r2
 801405e:	2240      	movs	r2, #64	@ 0x40
 8014060:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8014062:	687a      	ldr	r2, [r7, #4]
 8014064:	23b8      	movs	r3, #184	@ 0xb8
 8014066:	009b      	lsls	r3, r3, #2
 8014068:	5cd3      	ldrb	r3, [r2, r3]
 801406a:	2b01      	cmp	r3, #1
 801406c:	d109      	bne.n	8014082 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	23b8      	movs	r3, #184	@ 0xb8
 8014072:	009b      	lsls	r3, r3, #2
 8014074:	2100      	movs	r1, #0
 8014076:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2100      	movs	r1, #0
 801407c:	0018      	movs	r0, r3
 801407e:	f001 fc9f 	bl	80159c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	0018      	movs	r0, r3
 8014086:	f009 fe7b 	bl	801dd80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	2244      	movs	r2, #68	@ 0x44
 8014090:	5a9b      	ldrh	r3, [r3, r2]
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4957      	ldr	r1, [pc, #348]	@ (80141f8 <HAL_PCD_IRQHandler+0x278>)
 801409a:	400a      	ands	r2, r1
 801409c:	b291      	uxth	r1, r2
 801409e:	2244      	movs	r2, #68	@ 0x44
 80140a0:	5299      	strh	r1, [r3, r2]

    return;
 80140a2:	e0a0      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80140a4:	68fa      	ldr	r2, [r7, #12]
 80140a6:	2380      	movs	r3, #128	@ 0x80
 80140a8:	011b      	lsls	r3, r3, #4
 80140aa:	4013      	ands	r3, r2
 80140ac:	d028      	beq.n	8014100 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	2240      	movs	r2, #64	@ 0x40
 80140b4:	5a9b      	ldrh	r3, [r3, r2]
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2108      	movs	r1, #8
 80140be:	430a      	orrs	r2, r1
 80140c0:	b291      	uxth	r1, r2
 80140c2:	2240      	movs	r2, #64	@ 0x40
 80140c4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	2244      	movs	r2, #68	@ 0x44
 80140cc:	5a9b      	ldrh	r3, [r3, r2]
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4949      	ldr	r1, [pc, #292]	@ (80141fc <HAL_PCD_IRQHandler+0x27c>)
 80140d6:	400a      	ands	r2, r1
 80140d8:	b291      	uxth	r1, r2
 80140da:	2244      	movs	r2, #68	@ 0x44
 80140dc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2240      	movs	r2, #64	@ 0x40
 80140e4:	5a9b      	ldrh	r3, [r3, r2]
 80140e6:	b29a      	uxth	r2, r3
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2104      	movs	r1, #4
 80140ee:	430a      	orrs	r2, r1
 80140f0:	b291      	uxth	r1, r2
 80140f2:	2240      	movs	r2, #64	@ 0x40
 80140f4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	0018      	movs	r0, r3
 80140fa:	f009 fe25 	bl	801dd48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80140fe:	e072      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2280      	movs	r2, #128	@ 0x80
 8014104:	4013      	ands	r3, r2
 8014106:	d046      	beq.n	8014196 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	2244      	movs	r2, #68	@ 0x44
 801410e:	5a9b      	ldrh	r3, [r3, r2]
 8014110:	b29a      	uxth	r2, r3
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	2180      	movs	r1, #128	@ 0x80
 8014118:	438a      	bics	r2, r1
 801411a:	b291      	uxth	r1, r2
 801411c:	2244      	movs	r2, #68	@ 0x44
 801411e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8014120:	687a      	ldr	r2, [r7, #4]
 8014122:	23b8      	movs	r3, #184	@ 0xb8
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	5cd3      	ldrb	r3, [r2, r3]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d12f      	bne.n	801418c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2240      	movs	r2, #64	@ 0x40
 8014132:	5a9b      	ldrh	r3, [r3, r2]
 8014134:	b29a      	uxth	r2, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	2104      	movs	r1, #4
 801413c:	430a      	orrs	r2, r1
 801413e:	b291      	uxth	r1, r2
 8014140:	2240      	movs	r2, #64	@ 0x40
 8014142:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2240      	movs	r2, #64	@ 0x40
 801414a:	5a9b      	ldrh	r3, [r3, r2]
 801414c:	b29a      	uxth	r2, r3
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	2108      	movs	r1, #8
 8014154:	430a      	orrs	r2, r1
 8014156:	b291      	uxth	r1, r2
 8014158:	2240      	movs	r2, #64	@ 0x40
 801415a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 801415c:	687a      	ldr	r2, [r7, #4]
 801415e:	23b8      	movs	r3, #184	@ 0xb8
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	2101      	movs	r1, #1
 8014164:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2254      	movs	r2, #84	@ 0x54
 801416c:	5a9b      	ldrh	r3, [r3, r2]
 801416e:	b29b      	uxth	r3, r3
 8014170:	089b      	lsrs	r3, r3, #2
 8014172:	223c      	movs	r2, #60	@ 0x3c
 8014174:	4013      	ands	r3, r2
 8014176:	0019      	movs	r1, r3
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	23b9      	movs	r3, #185	@ 0xb9
 801417c:	009b      	lsls	r3, r3, #2
 801417e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2101      	movs	r1, #1
 8014184:	0018      	movs	r0, r3
 8014186:	f001 fc1b 	bl	80159c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801418a:	e02c      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	0018      	movs	r0, r3
 8014190:	f009 fdda 	bl	801dd48 <HAL_PCD_SuspendCallback>
    return;
 8014194:	e027      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8014196:	68fa      	ldr	r2, [r7, #12]
 8014198:	2380      	movs	r3, #128	@ 0x80
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4013      	ands	r3, r2
 801419e:	d010      	beq.n	80141c2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2244      	movs	r2, #68	@ 0x44
 80141a6:	5a9b      	ldrh	r3, [r3, r2]
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	4914      	ldr	r1, [pc, #80]	@ (8014200 <HAL_PCD_IRQHandler+0x280>)
 80141b0:	400a      	ands	r2, r1
 80141b2:	b291      	uxth	r1, r2
 80141b4:	2244      	movs	r2, #68	@ 0x44
 80141b6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	0018      	movs	r0, r3
 80141bc:	f009 fd90 	bl	801dce0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80141c0:	e011      	b.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80141c2:	68fa      	ldr	r2, [r7, #12]
 80141c4:	2380      	movs	r3, #128	@ 0x80
 80141c6:	005b      	lsls	r3, r3, #1
 80141c8:	4013      	ands	r3, r2
 80141ca:	d00c      	beq.n	80141e6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2244      	movs	r2, #68	@ 0x44
 80141d2:	5a9b      	ldrh	r3, [r3, r2]
 80141d4:	b29a      	uxth	r2, r3
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	490a      	ldr	r1, [pc, #40]	@ (8014204 <HAL_PCD_IRQHandler+0x284>)
 80141dc:	400a      	ands	r2, r1
 80141de:	b291      	uxth	r1, r2
 80141e0:	2244      	movs	r2, #68	@ 0x44
 80141e2:	5299      	strh	r1, [r3, r2]

    return;
 80141e4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80141e6:	46bd      	mov	sp, r7
 80141e8:	b004      	add	sp, #16
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	fffffbff 	.word	0xfffffbff
 80141f0:	ffffbfff 	.word	0xffffbfff
 80141f4:	ffffdfff 	.word	0xffffdfff
 80141f8:	ffffefff 	.word	0xffffefff
 80141fc:	fffff7ff 	.word	0xfffff7ff
 8014200:	fffffdff 	.word	0xfffffdff
 8014204:	fffffeff 	.word	0xfffffeff

08014208 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	000a      	movs	r2, r1
 8014212:	1cfb      	adds	r3, r7, #3
 8014214:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8014216:	687a      	ldr	r2, [r7, #4]
 8014218:	23aa      	movs	r3, #170	@ 0xaa
 801421a:	009b      	lsls	r3, r3, #2
 801421c:	5cd3      	ldrb	r3, [r2, r3]
 801421e:	2b01      	cmp	r3, #1
 8014220:	d101      	bne.n	8014226 <HAL_PCD_SetAddress+0x1e>
 8014222:	2302      	movs	r3, #2
 8014224:	e017      	b.n	8014256 <HAL_PCD_SetAddress+0x4e>
 8014226:	687a      	ldr	r2, [r7, #4]
 8014228:	23aa      	movs	r3, #170	@ 0xaa
 801422a:	009b      	lsls	r3, r3, #2
 801422c:	2101      	movs	r1, #1
 801422e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	1cfa      	adds	r2, r7, #3
 8014234:	2124      	movs	r1, #36	@ 0x24
 8014236:	7812      	ldrb	r2, [r2, #0]
 8014238:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	1cfb      	adds	r3, r7, #3
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	0019      	movs	r1, r3
 8014244:	0010      	movs	r0, r2
 8014246:	f007 fc71 	bl	801bb2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801424a:	687a      	ldr	r2, [r7, #4]
 801424c:	23aa      	movs	r3, #170	@ 0xaa
 801424e:	009b      	lsls	r3, r3, #2
 8014250:	2100      	movs	r1, #0
 8014252:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8014254:	2300      	movs	r3, #0
}
 8014256:	0018      	movs	r0, r3
 8014258:	46bd      	mov	sp, r7
 801425a:	b002      	add	sp, #8
 801425c:	bd80      	pop	{r7, pc}

0801425e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801425e:	b590      	push	{r4, r7, lr}
 8014260:	b085      	sub	sp, #20
 8014262:	af00      	add	r7, sp, #0
 8014264:	6078      	str	r0, [r7, #4]
 8014266:	000c      	movs	r4, r1
 8014268:	0010      	movs	r0, r2
 801426a:	0019      	movs	r1, r3
 801426c:	1cfb      	adds	r3, r7, #3
 801426e:	1c22      	adds	r2, r4, #0
 8014270:	701a      	strb	r2, [r3, #0]
 8014272:	003b      	movs	r3, r7
 8014274:	1c02      	adds	r2, r0, #0
 8014276:	801a      	strh	r2, [r3, #0]
 8014278:	1cbb      	adds	r3, r7, #2
 801427a:	1c0a      	adds	r2, r1, #0
 801427c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 801427e:	230b      	movs	r3, #11
 8014280:	18fb      	adds	r3, r7, r3
 8014282:	2200      	movs	r2, #0
 8014284:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8014286:	1cfb      	adds	r3, r7, #3
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	b25b      	sxtb	r3, r3
 801428c:	2b00      	cmp	r3, #0
 801428e:	da0f      	bge.n	80142b0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014290:	1cfb      	adds	r3, r7, #3
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	2207      	movs	r2, #7
 8014296:	4013      	ands	r3, r2
 8014298:	1c5a      	adds	r2, r3, #1
 801429a:	0013      	movs	r3, r2
 801429c:	009b      	lsls	r3, r3, #2
 801429e:	189b      	adds	r3, r3, r2
 80142a0:	00db      	lsls	r3, r3, #3
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	18d3      	adds	r3, r2, r3
 80142a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	2201      	movs	r2, #1
 80142ac:	705a      	strb	r2, [r3, #1]
 80142ae:	e00f      	b.n	80142d0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80142b0:	1cfb      	adds	r3, r7, #3
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	2207      	movs	r2, #7
 80142b6:	401a      	ands	r2, r3
 80142b8:	0013      	movs	r3, r2
 80142ba:	009b      	lsls	r3, r3, #2
 80142bc:	189b      	adds	r3, r3, r2
 80142be:	00db      	lsls	r3, r3, #3
 80142c0:	3369      	adds	r3, #105	@ 0x69
 80142c2:	33ff      	adds	r3, #255	@ 0xff
 80142c4:	687a      	ldr	r2, [r7, #4]
 80142c6:	18d3      	adds	r3, r2, r3
 80142c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	2200      	movs	r2, #0
 80142ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80142d0:	1cfb      	adds	r3, r7, #3
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	2207      	movs	r2, #7
 80142d6:	4013      	ands	r3, r2
 80142d8:	b2da      	uxtb	r2, r3
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80142de:	003b      	movs	r3, r7
 80142e0:	881a      	ldrh	r2, [r3, #0]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	1cba      	adds	r2, r7, #2
 80142ea:	7812      	ldrb	r2, [r2, #0]
 80142ec:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80142ee:	1cbb      	adds	r3, r7, #2
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	2b02      	cmp	r3, #2
 80142f4:	d102      	bne.n	80142fc <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	2200      	movs	r2, #0
 80142fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80142fc:	687a      	ldr	r2, [r7, #4]
 80142fe:	23aa      	movs	r3, #170	@ 0xaa
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	5cd3      	ldrb	r3, [r2, r3]
 8014304:	2b01      	cmp	r3, #1
 8014306:	d101      	bne.n	801430c <HAL_PCD_EP_Open+0xae>
 8014308:	2302      	movs	r3, #2
 801430a:	e013      	b.n	8014334 <HAL_PCD_EP_Open+0xd6>
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	23aa      	movs	r3, #170	@ 0xaa
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	2101      	movs	r1, #1
 8014314:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	68fa      	ldr	r2, [r7, #12]
 801431c:	0011      	movs	r1, r2
 801431e:	0018      	movs	r0, r3
 8014320:	f005 fc68 	bl	8019bf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8014324:	687a      	ldr	r2, [r7, #4]
 8014326:	23aa      	movs	r3, #170	@ 0xaa
 8014328:	009b      	lsls	r3, r3, #2
 801432a:	2100      	movs	r1, #0
 801432c:	54d1      	strb	r1, [r2, r3]

  return ret;
 801432e:	230b      	movs	r3, #11
 8014330:	18fb      	adds	r3, r7, r3
 8014332:	781b      	ldrb	r3, [r3, #0]
}
 8014334:	0018      	movs	r0, r3
 8014336:	46bd      	mov	sp, r7
 8014338:	b005      	add	sp, #20
 801433a:	bd90      	pop	{r4, r7, pc}

0801433c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b084      	sub	sp, #16
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	000a      	movs	r2, r1
 8014346:	1cfb      	adds	r3, r7, #3
 8014348:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801434a:	1cfb      	adds	r3, r7, #3
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	b25b      	sxtb	r3, r3
 8014350:	2b00      	cmp	r3, #0
 8014352:	da0f      	bge.n	8014374 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014354:	1cfb      	adds	r3, r7, #3
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	2207      	movs	r2, #7
 801435a:	4013      	ands	r3, r2
 801435c:	1c5a      	adds	r2, r3, #1
 801435e:	0013      	movs	r3, r2
 8014360:	009b      	lsls	r3, r3, #2
 8014362:	189b      	adds	r3, r3, r2
 8014364:	00db      	lsls	r3, r3, #3
 8014366:	687a      	ldr	r2, [r7, #4]
 8014368:	18d3      	adds	r3, r2, r3
 801436a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	2201      	movs	r2, #1
 8014370:	705a      	strb	r2, [r3, #1]
 8014372:	e00f      	b.n	8014394 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014374:	1cfb      	adds	r3, r7, #3
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	2207      	movs	r2, #7
 801437a:	401a      	ands	r2, r3
 801437c:	0013      	movs	r3, r2
 801437e:	009b      	lsls	r3, r3, #2
 8014380:	189b      	adds	r3, r3, r2
 8014382:	00db      	lsls	r3, r3, #3
 8014384:	3369      	adds	r3, #105	@ 0x69
 8014386:	33ff      	adds	r3, #255	@ 0xff
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	18d3      	adds	r3, r2, r3
 801438c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	2200      	movs	r2, #0
 8014392:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8014394:	1cfb      	adds	r3, r7, #3
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	2207      	movs	r2, #7
 801439a:	4013      	ands	r3, r2
 801439c:	b2da      	uxtb	r2, r3
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80143a2:	687a      	ldr	r2, [r7, #4]
 80143a4:	23aa      	movs	r3, #170	@ 0xaa
 80143a6:	009b      	lsls	r3, r3, #2
 80143a8:	5cd3      	ldrb	r3, [r2, r3]
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d101      	bne.n	80143b2 <HAL_PCD_EP_Close+0x76>
 80143ae:	2302      	movs	r3, #2
 80143b0:	e011      	b.n	80143d6 <HAL_PCD_EP_Close+0x9a>
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	23aa      	movs	r3, #170	@ 0xaa
 80143b6:	009b      	lsls	r3, r3, #2
 80143b8:	2101      	movs	r1, #1
 80143ba:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	68fa      	ldr	r2, [r7, #12]
 80143c2:	0011      	movs	r1, r2
 80143c4:	0018      	movs	r0, r3
 80143c6:	f005 ffb7 	bl	801a338 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80143ca:	687a      	ldr	r2, [r7, #4]
 80143cc:	23aa      	movs	r3, #170	@ 0xaa
 80143ce:	009b      	lsls	r3, r3, #2
 80143d0:	2100      	movs	r1, #0
 80143d2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80143d4:	2300      	movs	r3, #0
}
 80143d6:	0018      	movs	r0, r3
 80143d8:	46bd      	mov	sp, r7
 80143da:	b004      	add	sp, #16
 80143dc:	bd80      	pop	{r7, pc}

080143de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80143de:	b580      	push	{r7, lr}
 80143e0:	b086      	sub	sp, #24
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	60f8      	str	r0, [r7, #12]
 80143e6:	607a      	str	r2, [r7, #4]
 80143e8:	603b      	str	r3, [r7, #0]
 80143ea:	200b      	movs	r0, #11
 80143ec:	183b      	adds	r3, r7, r0
 80143ee:	1c0a      	adds	r2, r1, #0
 80143f0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80143f2:	0001      	movs	r1, r0
 80143f4:	187b      	adds	r3, r7, r1
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	2207      	movs	r2, #7
 80143fa:	401a      	ands	r2, r3
 80143fc:	0013      	movs	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	189b      	adds	r3, r3, r2
 8014402:	00db      	lsls	r3, r3, #3
 8014404:	3369      	adds	r3, #105	@ 0x69
 8014406:	33ff      	adds	r3, #255	@ 0xff
 8014408:	68fa      	ldr	r2, [r7, #12]
 801440a:	18d3      	adds	r3, r2, r3
 801440c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	2200      	movs	r2, #0
 801441e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	2200      	movs	r2, #0
 8014424:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014426:	187b      	adds	r3, r7, r1
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	2207      	movs	r2, #7
 801442c:	4013      	ands	r3, r2
 801442e:	b2da      	uxtb	r2, r3
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	697a      	ldr	r2, [r7, #20]
 801443a:	0011      	movs	r1, r2
 801443c:	0018      	movs	r0, r3
 801443e:	f006 f93b 	bl	801a6b8 <USB_EPStartXfer>

  return HAL_OK;
 8014442:	2300      	movs	r3, #0
}
 8014444:	0018      	movs	r0, r3
 8014446:	46bd      	mov	sp, r7
 8014448:	b006      	add	sp, #24
 801444a:	bd80      	pop	{r7, pc}

0801444c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b082      	sub	sp, #8
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	000a      	movs	r2, r1
 8014456:	1cfb      	adds	r3, r7, #3
 8014458:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801445a:	1cfb      	adds	r3, r7, #3
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	2207      	movs	r2, #7
 8014460:	401a      	ands	r2, r3
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	23c2      	movs	r3, #194	@ 0xc2
 8014466:	0059      	lsls	r1, r3, #1
 8014468:	0013      	movs	r3, r2
 801446a:	009b      	lsls	r3, r3, #2
 801446c:	189b      	adds	r3, r3, r2
 801446e:	00db      	lsls	r3, r3, #3
 8014470:	18c3      	adds	r3, r0, r3
 8014472:	185b      	adds	r3, r3, r1
 8014474:	681b      	ldr	r3, [r3, #0]
}
 8014476:	0018      	movs	r0, r3
 8014478:	46bd      	mov	sp, r7
 801447a:	b002      	add	sp, #8
 801447c:	bd80      	pop	{r7, pc}

0801447e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801447e:	b580      	push	{r7, lr}
 8014480:	b086      	sub	sp, #24
 8014482:	af00      	add	r7, sp, #0
 8014484:	60f8      	str	r0, [r7, #12]
 8014486:	607a      	str	r2, [r7, #4]
 8014488:	603b      	str	r3, [r7, #0]
 801448a:	200b      	movs	r0, #11
 801448c:	183b      	adds	r3, r7, r0
 801448e:	1c0a      	adds	r2, r1, #0
 8014490:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014492:	183b      	adds	r3, r7, r0
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	2207      	movs	r2, #7
 8014498:	4013      	ands	r3, r2
 801449a:	1c5a      	adds	r2, r3, #1
 801449c:	0013      	movs	r3, r2
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	189b      	adds	r3, r3, r2
 80144a2:	00db      	lsls	r3, r3, #3
 80144a4:	68fa      	ldr	r2, [r7, #12]
 80144a6:	18d3      	adds	r3, r2, r3
 80144a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	683a      	ldr	r2, [r7, #0]
 80144b4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	2224      	movs	r2, #36	@ 0x24
 80144ba:	2101      	movs	r1, #1
 80144bc:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	683a      	ldr	r2, [r7, #0]
 80144c2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	2200      	movs	r2, #0
 80144c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	2201      	movs	r2, #1
 80144ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80144d0:	183b      	adds	r3, r7, r0
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	2207      	movs	r2, #7
 80144d6:	4013      	ands	r3, r2
 80144d8:	b2da      	uxtb	r2, r3
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	697a      	ldr	r2, [r7, #20]
 80144e4:	0011      	movs	r1, r2
 80144e6:	0018      	movs	r0, r3
 80144e8:	f006 f8e6 	bl	801a6b8 <USB_EPStartXfer>

  return HAL_OK;
 80144ec:	2300      	movs	r3, #0
}
 80144ee:	0018      	movs	r0, r3
 80144f0:	46bd      	mov	sp, r7
 80144f2:	b006      	add	sp, #24
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80144f6:	b580      	push	{r7, lr}
 80144f8:	b084      	sub	sp, #16
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	6078      	str	r0, [r7, #4]
 80144fe:	000a      	movs	r2, r1
 8014500:	1cfb      	adds	r3, r7, #3
 8014502:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8014504:	1cfb      	adds	r3, r7, #3
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	2207      	movs	r2, #7
 801450a:	401a      	ands	r2, r3
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	429a      	cmp	r2, r3
 8014512:	d901      	bls.n	8014518 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8014514:	2301      	movs	r3, #1
 8014516:	e046      	b.n	80145a6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014518:	1cfb      	adds	r3, r7, #3
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	b25b      	sxtb	r3, r3
 801451e:	2b00      	cmp	r3, #0
 8014520:	da0f      	bge.n	8014542 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014522:	1cfb      	adds	r3, r7, #3
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	2207      	movs	r2, #7
 8014528:	4013      	ands	r3, r2
 801452a:	1c5a      	adds	r2, r3, #1
 801452c:	0013      	movs	r3, r2
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	189b      	adds	r3, r3, r2
 8014532:	00db      	lsls	r3, r3, #3
 8014534:	687a      	ldr	r2, [r7, #4]
 8014536:	18d3      	adds	r3, r2, r3
 8014538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2201      	movs	r2, #1
 801453e:	705a      	strb	r2, [r3, #1]
 8014540:	e00d      	b.n	801455e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014542:	1cfb      	adds	r3, r7, #3
 8014544:	781a      	ldrb	r2, [r3, #0]
 8014546:	0013      	movs	r3, r2
 8014548:	009b      	lsls	r3, r3, #2
 801454a:	189b      	adds	r3, r3, r2
 801454c:	00db      	lsls	r3, r3, #3
 801454e:	3369      	adds	r3, #105	@ 0x69
 8014550:	33ff      	adds	r3, #255	@ 0xff
 8014552:	687a      	ldr	r2, [r7, #4]
 8014554:	18d3      	adds	r3, r2, r3
 8014556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	2200      	movs	r2, #0
 801455c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2201      	movs	r2, #1
 8014562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014564:	1cfb      	adds	r3, r7, #3
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	2207      	movs	r2, #7
 801456a:	4013      	ands	r3, r2
 801456c:	b2da      	uxtb	r2, r3
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	23aa      	movs	r3, #170	@ 0xaa
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	5cd3      	ldrb	r3, [r2, r3]
 801457a:	2b01      	cmp	r3, #1
 801457c:	d101      	bne.n	8014582 <HAL_PCD_EP_SetStall+0x8c>
 801457e:	2302      	movs	r3, #2
 8014580:	e011      	b.n	80145a6 <HAL_PCD_EP_SetStall+0xb0>
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	23aa      	movs	r3, #170	@ 0xaa
 8014586:	009b      	lsls	r3, r3, #2
 8014588:	2101      	movs	r1, #1
 801458a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	68fa      	ldr	r2, [r7, #12]
 8014592:	0011      	movs	r1, r2
 8014594:	0018      	movs	r0, r3
 8014596:	f007 f9c7 	bl	801b928 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	23aa      	movs	r3, #170	@ 0xaa
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	2100      	movs	r1, #0
 80145a2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	0018      	movs	r0, r3
 80145a8:	46bd      	mov	sp, r7
 80145aa:	b004      	add	sp, #16
 80145ac:	bd80      	pop	{r7, pc}

080145ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b084      	sub	sp, #16
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
 80145b6:	000a      	movs	r2, r1
 80145b8:	1cfb      	adds	r3, r7, #3
 80145ba:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80145bc:	1cfb      	adds	r3, r7, #3
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	220f      	movs	r2, #15
 80145c2:	401a      	ands	r2, r3
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d901      	bls.n	80145d0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80145cc:	2301      	movs	r3, #1
 80145ce:	e048      	b.n	8014662 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80145d0:	1cfb      	adds	r3, r7, #3
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	b25b      	sxtb	r3, r3
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	da0f      	bge.n	80145fa <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80145da:	1cfb      	adds	r3, r7, #3
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	2207      	movs	r2, #7
 80145e0:	4013      	ands	r3, r2
 80145e2:	1c5a      	adds	r2, r3, #1
 80145e4:	0013      	movs	r3, r2
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	189b      	adds	r3, r3, r2
 80145ea:	00db      	lsls	r3, r3, #3
 80145ec:	687a      	ldr	r2, [r7, #4]
 80145ee:	18d3      	adds	r3, r2, r3
 80145f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	2201      	movs	r2, #1
 80145f6:	705a      	strb	r2, [r3, #1]
 80145f8:	e00f      	b.n	801461a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80145fa:	1cfb      	adds	r3, r7, #3
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	2207      	movs	r2, #7
 8014600:	401a      	ands	r2, r3
 8014602:	0013      	movs	r3, r2
 8014604:	009b      	lsls	r3, r3, #2
 8014606:	189b      	adds	r3, r3, r2
 8014608:	00db      	lsls	r3, r3, #3
 801460a:	3369      	adds	r3, #105	@ 0x69
 801460c:	33ff      	adds	r3, #255	@ 0xff
 801460e:	687a      	ldr	r2, [r7, #4]
 8014610:	18d3      	adds	r3, r2, r3
 8014612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	2200      	movs	r2, #0
 8014618:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	2200      	movs	r2, #0
 801461e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014620:	1cfb      	adds	r3, r7, #3
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	2207      	movs	r2, #7
 8014626:	4013      	ands	r3, r2
 8014628:	b2da      	uxtb	r2, r3
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	23aa      	movs	r3, #170	@ 0xaa
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	5cd3      	ldrb	r3, [r2, r3]
 8014636:	2b01      	cmp	r3, #1
 8014638:	d101      	bne.n	801463e <HAL_PCD_EP_ClrStall+0x90>
 801463a:	2302      	movs	r3, #2
 801463c:	e011      	b.n	8014662 <HAL_PCD_EP_ClrStall+0xb4>
 801463e:	687a      	ldr	r2, [r7, #4]
 8014640:	23aa      	movs	r3, #170	@ 0xaa
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	2101      	movs	r1, #1
 8014646:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	68fa      	ldr	r2, [r7, #12]
 801464e:	0011      	movs	r1, r2
 8014650:	0018      	movs	r0, r3
 8014652:	f007 f9b9 	bl	801b9c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	23aa      	movs	r3, #170	@ 0xaa
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	2100      	movs	r1, #0
 801465e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8014660:	2300      	movs	r3, #0
}
 8014662:	0018      	movs	r0, r3
 8014664:	46bd      	mov	sp, r7
 8014666:	b004      	add	sp, #16
 8014668:	bd80      	pop	{r7, pc}
	...

0801466c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 801466c:	b5b0      	push	{r4, r5, r7, lr}
 801466e:	b096      	sub	sp, #88	@ 0x58
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014674:	f000 fbec 	bl	8014e50 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681a      	ldr	r2, [r3, #0]
 801467c:	204e      	movs	r0, #78	@ 0x4e
 801467e:	183b      	adds	r3, r7, r0
 8014680:	2144      	movs	r1, #68	@ 0x44
 8014682:	5a52      	ldrh	r2, [r2, r1]
 8014684:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8014686:	183b      	adds	r3, r7, r0
 8014688:	881b      	ldrh	r3, [r3, #0]
 801468a:	b2da      	uxtb	r2, r3
 801468c:	244d      	movs	r4, #77	@ 0x4d
 801468e:	193b      	adds	r3, r7, r4
 8014690:	210f      	movs	r1, #15
 8014692:	400a      	ands	r2, r1
 8014694:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8014696:	193b      	adds	r3, r7, r4
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d000      	beq.n	80146a0 <PCD_EP_ISR_Handler+0x34>
 801469e:	e18f      	b.n	80149c0 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80146a0:	183b      	adds	r3, r7, r0
 80146a2:	881b      	ldrh	r3, [r3, #0]
 80146a4:	2210      	movs	r2, #16
 80146a6:	4013      	ands	r3, r2
 80146a8:	d155      	bne.n	8014756 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	881b      	ldrh	r3, [r3, #0]
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	200e      	movs	r0, #14
 80146b4:	183b      	adds	r3, r7, r0
 80146b6:	49bb      	ldr	r1, [pc, #748]	@ (80149a4 <PCD_EP_ISR_Handler+0x338>)
 80146b8:	400a      	ands	r2, r1
 80146ba:	801a      	strh	r2, [r3, #0]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	183a      	adds	r2, r7, r0
 80146c2:	8812      	ldrh	r2, [r2, #0]
 80146c4:	49b8      	ldr	r1, [pc, #736]	@ (80149a8 <PCD_EP_ISR_Handler+0x33c>)
 80146c6:	430a      	orrs	r2, r1
 80146c8:	b292      	uxth	r2, r2
 80146ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	3328      	adds	r3, #40	@ 0x28
 80146d0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	2250      	movs	r2, #80	@ 0x50
 80146d8:	5a9b      	ldrh	r3, [r3, r2]
 80146da:	b29b      	uxth	r3, r3
 80146dc:	001a      	movs	r2, r3
 80146de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	00db      	lsls	r3, r3, #3
 80146e4:	18d2      	adds	r2, r2, r3
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	18d3      	adds	r3, r2, r3
 80146ec:	4aaf      	ldr	r2, [pc, #700]	@ (80149ac <PCD_EP_ISR_Handler+0x340>)
 80146ee:	4694      	mov	ip, r2
 80146f0:	4463      	add	r3, ip
 80146f2:	881b      	ldrh	r3, [r3, #0]
 80146f4:	059b      	lsls	r3, r3, #22
 80146f6:	0d9a      	lsrs	r2, r3, #22
 80146f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80146fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146fe:	695a      	ldr	r2, [r3, #20]
 8014700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014702:	69db      	ldr	r3, [r3, #28]
 8014704:	18d2      	adds	r2, r2, r3
 8014706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014708:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2100      	movs	r1, #0
 801470e:	0018      	movs	r0, r3
 8014710:	f009 fac8 	bl	801dca4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2224      	movs	r2, #36	@ 0x24
 8014718:	5c9b      	ldrb	r3, [r3, r2]
 801471a:	b2db      	uxtb	r3, r3
 801471c:	2b00      	cmp	r3, #0
 801471e:	d101      	bne.n	8014724 <PCD_EP_ISR_Handler+0xb8>
 8014720:	f000 fb96 	bl	8014e50 <PCD_EP_ISR_Handler+0x7e4>
 8014724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014726:	699b      	ldr	r3, [r3, #24]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d001      	beq.n	8014730 <PCD_EP_ISR_Handler+0xc4>
 801472c:	f000 fb90 	bl	8014e50 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2224      	movs	r2, #36	@ 0x24
 8014734:	5c9b      	ldrb	r3, [r3, r2]
 8014736:	b2db      	uxtb	r3, r3
 8014738:	2280      	movs	r2, #128	@ 0x80
 801473a:	4252      	negs	r2, r2
 801473c:	4313      	orrs	r3, r2
 801473e:	b2da      	uxtb	r2, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	0011      	movs	r1, r2
 8014746:	224c      	movs	r2, #76	@ 0x4c
 8014748:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2224      	movs	r2, #36	@ 0x24
 801474e:	2100      	movs	r1, #0
 8014750:	5499      	strb	r1, [r3, r2]
 8014752:	f000 fb7d 	bl	8014e50 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	3369      	adds	r3, #105	@ 0x69
 801475a:	33ff      	adds	r3, #255	@ 0xff
 801475c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681a      	ldr	r2, [r3, #0]
 8014762:	214a      	movs	r1, #74	@ 0x4a
 8014764:	187b      	adds	r3, r7, r1
 8014766:	8812      	ldrh	r2, [r2, #0]
 8014768:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801476a:	187b      	adds	r3, r7, r1
 801476c:	881a      	ldrh	r2, [r3, #0]
 801476e:	2380      	movs	r3, #128	@ 0x80
 8014770:	011b      	lsls	r3, r3, #4
 8014772:	4013      	ands	r3, r2
 8014774:	d037      	beq.n	80147e6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	2250      	movs	r2, #80	@ 0x50
 801477c:	5a9b      	ldrh	r3, [r3, r2]
 801477e:	b29b      	uxth	r3, r3
 8014780:	001a      	movs	r2, r3
 8014782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014784:	781b      	ldrb	r3, [r3, #0]
 8014786:	00db      	lsls	r3, r3, #3
 8014788:	18d2      	adds	r2, r2, r3
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	18d3      	adds	r3, r2, r3
 8014790:	4a87      	ldr	r2, [pc, #540]	@ (80149b0 <PCD_EP_ISR_Handler+0x344>)
 8014792:	4694      	mov	ip, r2
 8014794:	4463      	add	r3, ip
 8014796:	881b      	ldrh	r3, [r3, #0]
 8014798:	059b      	lsls	r3, r3, #22
 801479a:	0d9a      	lsrs	r2, r3, #22
 801479c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801479e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	6818      	ldr	r0, [r3, #0]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	22ac      	movs	r2, #172	@ 0xac
 80147a8:	0092      	lsls	r2, r2, #2
 80147aa:	1899      	adds	r1, r3, r2
 80147ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80147b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80147b4:	b29b      	uxth	r3, r3
 80147b6:	f007 fa3a 	bl	801bc2e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	881b      	ldrh	r3, [r3, #0]
 80147c0:	b29a      	uxth	r2, r3
 80147c2:	2010      	movs	r0, #16
 80147c4:	183b      	adds	r3, r7, r0
 80147c6:	497b      	ldr	r1, [pc, #492]	@ (80149b4 <PCD_EP_ISR_Handler+0x348>)
 80147c8:	400a      	ands	r2, r1
 80147ca:	801a      	strh	r2, [r3, #0]
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	183a      	adds	r2, r7, r0
 80147d2:	8812      	ldrh	r2, [r2, #0]
 80147d4:	2180      	movs	r1, #128	@ 0x80
 80147d6:	430a      	orrs	r2, r1
 80147d8:	b292      	uxth	r2, r2
 80147da:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	0018      	movs	r0, r3
 80147e0:	f009 fa2a 	bl	801dc38 <HAL_PCD_SetupStageCallback>
 80147e4:	e334      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80147e6:	234a      	movs	r3, #74	@ 0x4a
 80147e8:	18fb      	adds	r3, r7, r3
 80147ea:	2200      	movs	r2, #0
 80147ec:	5e9b      	ldrsh	r3, [r3, r2]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	db00      	blt.n	80147f4 <PCD_EP_ISR_Handler+0x188>
 80147f2:	e32d      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	881b      	ldrh	r3, [r3, #0]
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	201e      	movs	r0, #30
 80147fe:	183b      	adds	r3, r7, r0
 8014800:	496c      	ldr	r1, [pc, #432]	@ (80149b4 <PCD_EP_ISR_Handler+0x348>)
 8014802:	400a      	ands	r2, r1
 8014804:	801a      	strh	r2, [r3, #0]
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	183a      	adds	r2, r7, r0
 801480c:	8812      	ldrh	r2, [r2, #0]
 801480e:	2180      	movs	r1, #128	@ 0x80
 8014810:	430a      	orrs	r2, r1
 8014812:	b292      	uxth	r2, r2
 8014814:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2250      	movs	r2, #80	@ 0x50
 801481c:	5a9b      	ldrh	r3, [r3, r2]
 801481e:	b29b      	uxth	r3, r3
 8014820:	001a      	movs	r2, r3
 8014822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	00db      	lsls	r3, r3, #3
 8014828:	18d2      	adds	r2, r2, r3
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	18d3      	adds	r3, r2, r3
 8014830:	4a5f      	ldr	r2, [pc, #380]	@ (80149b0 <PCD_EP_ISR_Handler+0x344>)
 8014832:	4694      	mov	ip, r2
 8014834:	4463      	add	r3, ip
 8014836:	881b      	ldrh	r3, [r3, #0]
 8014838:	059b      	lsls	r3, r3, #22
 801483a:	0d9a      	lsrs	r2, r3, #22
 801483c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801483e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8014840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014842:	69db      	ldr	r3, [r3, #28]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d01a      	beq.n	801487e <PCD_EP_ISR_Handler+0x212>
 8014848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801484a:	695b      	ldr	r3, [r3, #20]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d016      	beq.n	801487e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6818      	ldr	r0, [r3, #0]
 8014854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014856:	6959      	ldr	r1, [r3, #20]
 8014858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801485a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801485c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801485e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014860:	b29b      	uxth	r3, r3
 8014862:	f007 f9e4 	bl	801bc2e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8014866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014868:	695a      	ldr	r2, [r3, #20]
 801486a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801486c:	69db      	ldr	r3, [r3, #28]
 801486e:	18d2      	adds	r2, r2, r3
 8014870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014872:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2100      	movs	r1, #0
 8014878:	0018      	movs	r0, r3
 801487a:	f009 f9f2 	bl	801dc62 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681a      	ldr	r2, [r3, #0]
 8014882:	214a      	movs	r1, #74	@ 0x4a
 8014884:	187b      	adds	r3, r7, r1
 8014886:	8812      	ldrh	r2, [r2, #0]
 8014888:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801488a:	187b      	adds	r3, r7, r1
 801488c:	881a      	ldrh	r2, [r3, #0]
 801488e:	2380      	movs	r3, #128	@ 0x80
 8014890:	011b      	lsls	r3, r3, #4
 8014892:	4013      	ands	r3, r2
 8014894:	d000      	beq.n	8014898 <PCD_EP_ISR_Handler+0x22c>
 8014896:	e2db      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
 8014898:	187b      	adds	r3, r7, r1
 801489a:	881a      	ldrh	r2, [r3, #0]
 801489c:	23c0      	movs	r3, #192	@ 0xc0
 801489e:	019b      	lsls	r3, r3, #6
 80148a0:	401a      	ands	r2, r3
 80148a2:	23c0      	movs	r3, #192	@ 0xc0
 80148a4:	019b      	lsls	r3, r3, #6
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d100      	bne.n	80148ac <PCD_EP_ISR_Handler+0x240>
 80148aa:	e2d1      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	61bb      	str	r3, [r7, #24]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	2250      	movs	r2, #80	@ 0x50
 80148b8:	5a9b      	ldrh	r3, [r3, r2]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	001a      	movs	r2, r3
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	189b      	adds	r3, r3, r2
 80148c2:	61bb      	str	r3, [r7, #24]
 80148c4:	69bb      	ldr	r3, [r7, #24]
 80148c6:	4a3a      	ldr	r2, [pc, #232]	@ (80149b0 <PCD_EP_ISR_Handler+0x344>)
 80148c8:	4694      	mov	ip, r2
 80148ca:	4463      	add	r3, ip
 80148cc:	617b      	str	r3, [r7, #20]
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	881b      	ldrh	r3, [r3, #0]
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	059b      	lsls	r3, r3, #22
 80148d6:	0d9b      	lsrs	r3, r3, #22
 80148d8:	b29a      	uxth	r2, r3
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	801a      	strh	r2, [r3, #0]
 80148de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148e0:	691b      	ldr	r3, [r3, #16]
 80148e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80148e4:	d91a      	bls.n	801491c <PCD_EP_ISR_Handler+0x2b0>
 80148e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148e8:	691b      	ldr	r3, [r3, #16]
 80148ea:	095b      	lsrs	r3, r3, #5
 80148ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80148ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148f0:	691b      	ldr	r3, [r3, #16]
 80148f2:	221f      	movs	r2, #31
 80148f4:	4013      	ands	r3, r2
 80148f6:	d102      	bne.n	80148fe <PCD_EP_ISR_Handler+0x292>
 80148f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148fa:	3b01      	subs	r3, #1
 80148fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	881b      	ldrh	r3, [r3, #0]
 8014902:	b29a      	uxth	r2, r3
 8014904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014906:	b29b      	uxth	r3, r3
 8014908:	029b      	lsls	r3, r3, #10
 801490a:	b29b      	uxth	r3, r3
 801490c:	4313      	orrs	r3, r2
 801490e:	b29b      	uxth	r3, r3
 8014910:	4a25      	ldr	r2, [pc, #148]	@ (80149a8 <PCD_EP_ISR_Handler+0x33c>)
 8014912:	4313      	orrs	r3, r2
 8014914:	b29a      	uxth	r2, r3
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	801a      	strh	r2, [r3, #0]
 801491a:	e023      	b.n	8014964 <PCD_EP_ISR_Handler+0x2f8>
 801491c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801491e:	691b      	ldr	r3, [r3, #16]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d108      	bne.n	8014936 <PCD_EP_ISR_Handler+0x2ca>
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	881b      	ldrh	r3, [r3, #0]
 8014928:	b29b      	uxth	r3, r3
 801492a:	4a1f      	ldr	r2, [pc, #124]	@ (80149a8 <PCD_EP_ISR_Handler+0x33c>)
 801492c:	4313      	orrs	r3, r2
 801492e:	b29a      	uxth	r2, r3
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	801a      	strh	r2, [r3, #0]
 8014934:	e016      	b.n	8014964 <PCD_EP_ISR_Handler+0x2f8>
 8014936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014938:	691b      	ldr	r3, [r3, #16]
 801493a:	085b      	lsrs	r3, r3, #1
 801493c:	647b      	str	r3, [r7, #68]	@ 0x44
 801493e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014940:	691b      	ldr	r3, [r3, #16]
 8014942:	2201      	movs	r2, #1
 8014944:	4013      	ands	r3, r2
 8014946:	d002      	beq.n	801494e <PCD_EP_ISR_Handler+0x2e2>
 8014948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801494a:	3301      	adds	r3, #1
 801494c:	647b      	str	r3, [r7, #68]	@ 0x44
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	881b      	ldrh	r3, [r3, #0]
 8014952:	b29a      	uxth	r2, r3
 8014954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014956:	b29b      	uxth	r3, r3
 8014958:	029b      	lsls	r3, r3, #10
 801495a:	b29b      	uxth	r3, r3
 801495c:	4313      	orrs	r3, r2
 801495e:	b29a      	uxth	r2, r3
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	881b      	ldrh	r3, [r3, #0]
 801496a:	b29a      	uxth	r2, r3
 801496c:	2012      	movs	r0, #18
 801496e:	183b      	adds	r3, r7, r0
 8014970:	4911      	ldr	r1, [pc, #68]	@ (80149b8 <PCD_EP_ISR_Handler+0x34c>)
 8014972:	400a      	ands	r2, r1
 8014974:	801a      	strh	r2, [r3, #0]
 8014976:	183b      	adds	r3, r7, r0
 8014978:	183a      	adds	r2, r7, r0
 801497a:	8812      	ldrh	r2, [r2, #0]
 801497c:	2180      	movs	r1, #128	@ 0x80
 801497e:	0149      	lsls	r1, r1, #5
 8014980:	404a      	eors	r2, r1
 8014982:	801a      	strh	r2, [r3, #0]
 8014984:	183b      	adds	r3, r7, r0
 8014986:	183a      	adds	r2, r7, r0
 8014988:	8812      	ldrh	r2, [r2, #0]
 801498a:	2180      	movs	r1, #128	@ 0x80
 801498c:	0189      	lsls	r1, r1, #6
 801498e:	404a      	eors	r2, r1
 8014990:	801a      	strh	r2, [r3, #0]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	183a      	adds	r2, r7, r0
 8014998:	8812      	ldrh	r2, [r2, #0]
 801499a:	4908      	ldr	r1, [pc, #32]	@ (80149bc <PCD_EP_ISR_Handler+0x350>)
 801499c:	430a      	orrs	r2, r1
 801499e:	b292      	uxth	r2, r2
 80149a0:	801a      	strh	r2, [r3, #0]
 80149a2:	e255      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
 80149a4:	ffff8f0f 	.word	0xffff8f0f
 80149a8:	ffff8000 	.word	0xffff8000
 80149ac:	00000402 	.word	0x00000402
 80149b0:	00000406 	.word	0x00000406
 80149b4:	00000f8f 	.word	0x00000f8f
 80149b8:	ffffbf8f 	.word	0xffffbf8f
 80149bc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	001a      	movs	r2, r3
 80149c6:	204d      	movs	r0, #77	@ 0x4d
 80149c8:	183b      	adds	r3, r7, r0
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	18d2      	adds	r2, r2, r3
 80149d0:	214a      	movs	r1, #74	@ 0x4a
 80149d2:	187b      	adds	r3, r7, r1
 80149d4:	8812      	ldrh	r2, [r2, #0]
 80149d6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80149d8:	187b      	adds	r3, r7, r1
 80149da:	2200      	movs	r2, #0
 80149dc:	5e9b      	ldrsh	r3, [r3, r2]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	db00      	blt.n	80149e4 <PCD_EP_ISR_Handler+0x378>
 80149e2:	e0fa      	b.n	8014bda <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	001a      	movs	r2, r3
 80149ea:	183b      	adds	r3, r7, r0
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	009b      	lsls	r3, r3, #2
 80149f0:	18d3      	adds	r3, r2, r3
 80149f2:	881b      	ldrh	r3, [r3, #0]
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	2448      	movs	r4, #72	@ 0x48
 80149f8:	193b      	adds	r3, r7, r4
 80149fa:	49d1      	ldr	r1, [pc, #836]	@ (8014d40 <PCD_EP_ISR_Handler+0x6d4>)
 80149fc:	400a      	ands	r2, r1
 80149fe:	801a      	strh	r2, [r3, #0]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	001a      	movs	r2, r3
 8014a06:	183b      	adds	r3, r7, r0
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	18d3      	adds	r3, r2, r3
 8014a0e:	193a      	adds	r2, r7, r4
 8014a10:	8812      	ldrh	r2, [r2, #0]
 8014a12:	2180      	movs	r1, #128	@ 0x80
 8014a14:	430a      	orrs	r2, r1
 8014a16:	b292      	uxth	r2, r2
 8014a18:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8014a1a:	183b      	adds	r3, r7, r0
 8014a1c:	781a      	ldrb	r2, [r3, #0]
 8014a1e:	0013      	movs	r3, r2
 8014a20:	009b      	lsls	r3, r3, #2
 8014a22:	189b      	adds	r3, r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	3369      	adds	r3, #105	@ 0x69
 8014a28:	33ff      	adds	r3, #255	@ 0xff
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	18d3      	adds	r3, r2, r3
 8014a2e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8014a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a32:	7b1b      	ldrb	r3, [r3, #12]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d125      	bne.n	8014a84 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	2250      	movs	r2, #80	@ 0x50
 8014a3e:	5a9b      	ldrh	r3, [r3, r2]
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	001a      	movs	r2, r3
 8014a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	00db      	lsls	r3, r3, #3
 8014a4a:	18d2      	adds	r2, r2, r3
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	18d3      	adds	r3, r2, r3
 8014a52:	4abc      	ldr	r2, [pc, #752]	@ (8014d44 <PCD_EP_ISR_Handler+0x6d8>)
 8014a54:	4694      	mov	ip, r2
 8014a56:	4463      	add	r3, ip
 8014a58:	881a      	ldrh	r2, [r3, #0]
 8014a5a:	2450      	movs	r4, #80	@ 0x50
 8014a5c:	193b      	adds	r3, r7, r4
 8014a5e:	0592      	lsls	r2, r2, #22
 8014a60:	0d92      	lsrs	r2, r2, #22
 8014a62:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8014a64:	193b      	adds	r3, r7, r4
 8014a66:	881b      	ldrh	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d100      	bne.n	8014a6e <PCD_EP_ISR_Handler+0x402>
 8014a6c:	e08d      	b.n	8014b8a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	6818      	ldr	r0, [r3, #0]
 8014a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a74:	6959      	ldr	r1, [r3, #20]
 8014a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a78:	88da      	ldrh	r2, [r3, #6]
 8014a7a:	193b      	adds	r3, r7, r4
 8014a7c:	881b      	ldrh	r3, [r3, #0]
 8014a7e:	f007 f8d6 	bl	801bc2e <USB_ReadPMA>
 8014a82:	e082      	b.n	8014b8a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8014a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a86:	78db      	ldrb	r3, [r3, #3]
 8014a88:	2b02      	cmp	r3, #2
 8014a8a:	d10c      	bne.n	8014aa6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8014a8c:	2350      	movs	r3, #80	@ 0x50
 8014a8e:	18fc      	adds	r4, r7, r3
 8014a90:	234a      	movs	r3, #74	@ 0x4a
 8014a92:	18fb      	adds	r3, r7, r3
 8014a94:	881a      	ldrh	r2, [r3, #0]
 8014a96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	0018      	movs	r0, r3
 8014a9c:	f000 f9ec 	bl	8014e78 <HAL_PCD_EP_DB_Receive>
 8014aa0:	0003      	movs	r3, r0
 8014aa2:	8023      	strh	r3, [r4, #0]
 8014aa4:	e071      	b.n	8014b8a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	001a      	movs	r2, r3
 8014aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	18d3      	adds	r3, r2, r3
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	2052      	movs	r0, #82	@ 0x52
 8014aba:	183b      	adds	r3, r7, r0
 8014abc:	49a2      	ldr	r1, [pc, #648]	@ (8014d48 <PCD_EP_ISR_Handler+0x6dc>)
 8014abe:	400a      	ands	r2, r1
 8014ac0:	801a      	strh	r2, [r3, #0]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	001a      	movs	r2, r3
 8014ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	18d3      	adds	r3, r2, r3
 8014ad0:	183a      	adds	r2, r7, r0
 8014ad2:	8812      	ldrh	r2, [r2, #0]
 8014ad4:	499d      	ldr	r1, [pc, #628]	@ (8014d4c <PCD_EP_ISR_Handler+0x6e0>)
 8014ad6:	430a      	orrs	r2, r1
 8014ad8:	b292      	uxth	r2, r2
 8014ada:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	001a      	movs	r2, r3
 8014ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	009b      	lsls	r3, r3, #2
 8014ae8:	18d3      	adds	r3, r2, r3
 8014aea:	881b      	ldrh	r3, [r3, #0]
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	001a      	movs	r2, r3
 8014af0:	2380      	movs	r3, #128	@ 0x80
 8014af2:	01db      	lsls	r3, r3, #7
 8014af4:	4013      	ands	r3, r2
 8014af6:	d024      	beq.n	8014b42 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	2250      	movs	r2, #80	@ 0x50
 8014afe:	5a9b      	ldrh	r3, [r3, r2]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	001a      	movs	r2, r3
 8014b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b06:	781b      	ldrb	r3, [r3, #0]
 8014b08:	00db      	lsls	r3, r3, #3
 8014b0a:	18d2      	adds	r2, r2, r3
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	18d3      	adds	r3, r2, r3
 8014b12:	4a8f      	ldr	r2, [pc, #572]	@ (8014d50 <PCD_EP_ISR_Handler+0x6e4>)
 8014b14:	4694      	mov	ip, r2
 8014b16:	4463      	add	r3, ip
 8014b18:	881a      	ldrh	r2, [r3, #0]
 8014b1a:	2450      	movs	r4, #80	@ 0x50
 8014b1c:	193b      	adds	r3, r7, r4
 8014b1e:	0592      	lsls	r2, r2, #22
 8014b20:	0d92      	lsrs	r2, r2, #22
 8014b22:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014b24:	193b      	adds	r3, r7, r4
 8014b26:	881b      	ldrh	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d02e      	beq.n	8014b8a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6818      	ldr	r0, [r3, #0]
 8014b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b32:	6959      	ldr	r1, [r3, #20]
 8014b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b36:	891a      	ldrh	r2, [r3, #8]
 8014b38:	193b      	adds	r3, r7, r4
 8014b3a:	881b      	ldrh	r3, [r3, #0]
 8014b3c:	f007 f877 	bl	801bc2e <USB_ReadPMA>
 8014b40:	e023      	b.n	8014b8a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	2250      	movs	r2, #80	@ 0x50
 8014b48:	5a9b      	ldrh	r3, [r3, r2]
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	001a      	movs	r2, r3
 8014b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	00db      	lsls	r3, r3, #3
 8014b54:	18d2      	adds	r2, r2, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	18d3      	adds	r3, r2, r3
 8014b5c:	4a79      	ldr	r2, [pc, #484]	@ (8014d44 <PCD_EP_ISR_Handler+0x6d8>)
 8014b5e:	4694      	mov	ip, r2
 8014b60:	4463      	add	r3, ip
 8014b62:	881a      	ldrh	r2, [r3, #0]
 8014b64:	2450      	movs	r4, #80	@ 0x50
 8014b66:	193b      	adds	r3, r7, r4
 8014b68:	0592      	lsls	r2, r2, #22
 8014b6a:	0d92      	lsrs	r2, r2, #22
 8014b6c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014b6e:	193b      	adds	r3, r7, r4
 8014b70:	881b      	ldrh	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d009      	beq.n	8014b8a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6818      	ldr	r0, [r3, #0]
 8014b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b7c:	6959      	ldr	r1, [r3, #20]
 8014b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b80:	895a      	ldrh	r2, [r3, #10]
 8014b82:	193b      	adds	r3, r7, r4
 8014b84:	881b      	ldrh	r3, [r3, #0]
 8014b86:	f007 f852 	bl	801bc2e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8014b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b8c:	69da      	ldr	r2, [r3, #28]
 8014b8e:	2150      	movs	r1, #80	@ 0x50
 8014b90:	187b      	adds	r3, r7, r1
 8014b92:	881b      	ldrh	r3, [r3, #0]
 8014b94:	18d2      	adds	r2, r2, r3
 8014b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8014b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b9c:	695a      	ldr	r2, [r3, #20]
 8014b9e:	187b      	adds	r3, r7, r1
 8014ba0:	881b      	ldrh	r3, [r3, #0]
 8014ba2:	18d2      	adds	r2, r2, r3
 8014ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ba6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8014ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014baa:	699b      	ldr	r3, [r3, #24]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d005      	beq.n	8014bbc <PCD_EP_ISR_Handler+0x550>
 8014bb0:	187b      	adds	r3, r7, r1
 8014bb2:	881a      	ldrh	r2, [r3, #0]
 8014bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014bb6:	691b      	ldr	r3, [r3, #16]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d207      	bcs.n	8014bcc <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8014bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014bbe:	781a      	ldrb	r2, [r3, #0]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	0011      	movs	r1, r2
 8014bc4:	0018      	movs	r0, r3
 8014bc6:	f009 f84c 	bl	801dc62 <HAL_PCD_DataOutStageCallback>
 8014bca:	e006      	b.n	8014bda <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014bd2:	0011      	movs	r1, r2
 8014bd4:	0018      	movs	r0, r3
 8014bd6:	f005 fd6f 	bl	801a6b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8014bda:	244a      	movs	r4, #74	@ 0x4a
 8014bdc:	193b      	adds	r3, r7, r4
 8014bde:	881b      	ldrh	r3, [r3, #0]
 8014be0:	2280      	movs	r2, #128	@ 0x80
 8014be2:	4013      	ands	r3, r2
 8014be4:	d100      	bne.n	8014be8 <PCD_EP_ISR_Handler+0x57c>
 8014be6:	e133      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8014be8:	204d      	movs	r0, #77	@ 0x4d
 8014bea:	183b      	adds	r3, r7, r0
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	1c5a      	adds	r2, r3, #1
 8014bf0:	0013      	movs	r3, r2
 8014bf2:	009b      	lsls	r3, r3, #2
 8014bf4:	189b      	adds	r3, r3, r2
 8014bf6:	00db      	lsls	r3, r3, #3
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	18d3      	adds	r3, r2, r3
 8014bfc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	001a      	movs	r2, r3
 8014c04:	183b      	adds	r3, r7, r0
 8014c06:	781b      	ldrb	r3, [r3, #0]
 8014c08:	009b      	lsls	r3, r3, #2
 8014c0a:	18d3      	adds	r3, r2, r3
 8014c0c:	881b      	ldrh	r3, [r3, #0]
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	2542      	movs	r5, #66	@ 0x42
 8014c12:	197b      	adds	r3, r7, r5
 8014c14:	494f      	ldr	r1, [pc, #316]	@ (8014d54 <PCD_EP_ISR_Handler+0x6e8>)
 8014c16:	400a      	ands	r2, r1
 8014c18:	801a      	strh	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	001a      	movs	r2, r3
 8014c20:	183b      	adds	r3, r7, r0
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	009b      	lsls	r3, r3, #2
 8014c26:	18d3      	adds	r3, r2, r3
 8014c28:	197a      	adds	r2, r7, r5
 8014c2a:	8812      	ldrh	r2, [r2, #0]
 8014c2c:	494a      	ldr	r1, [pc, #296]	@ (8014d58 <PCD_EP_ISR_Handler+0x6ec>)
 8014c2e:	430a      	orrs	r2, r1
 8014c30:	b292      	uxth	r2, r2
 8014c32:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8014c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c36:	78db      	ldrb	r3, [r3, #3]
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d000      	beq.n	8014c3e <PCD_EP_ISR_Handler+0x5d2>
 8014c3c:	e0af      	b.n	8014d9e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8014c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c40:	2200      	movs	r2, #0
 8014c42:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8014c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c46:	7b1b      	ldrb	r3, [r3, #12]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d100      	bne.n	8014c4e <PCD_EP_ISR_Handler+0x5e2>
 8014c4c:	e09f      	b.n	8014d8e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014c4e:	193b      	adds	r3, r7, r4
 8014c50:	881b      	ldrh	r3, [r3, #0]
 8014c52:	2240      	movs	r2, #64	@ 0x40
 8014c54:	4013      	ands	r3, r2
 8014c56:	d046      	beq.n	8014ce6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c5a:	785b      	ldrb	r3, [r3, #1]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d125      	bne.n	8014cac <PCD_EP_ISR_Handler+0x640>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	2250      	movs	r2, #80	@ 0x50
 8014c6c:	5a9b      	ldrh	r3, [r3, r2]
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	001a      	movs	r2, r3
 8014c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c74:	189b      	adds	r3, r3, r2
 8014c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c7a:	781b      	ldrb	r3, [r3, #0]
 8014c7c:	00da      	lsls	r2, r3, #3
 8014c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c80:	18d3      	adds	r3, r2, r3
 8014c82:	4a33      	ldr	r2, [pc, #204]	@ (8014d50 <PCD_EP_ISR_Handler+0x6e4>)
 8014c84:	4694      	mov	ip, r2
 8014c86:	4463      	add	r3, ip
 8014c88:	623b      	str	r3, [r7, #32]
 8014c8a:	6a3b      	ldr	r3, [r7, #32]
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	059b      	lsls	r3, r3, #22
 8014c92:	0d9b      	lsrs	r3, r3, #22
 8014c94:	b29a      	uxth	r2, r3
 8014c96:	6a3b      	ldr	r3, [r7, #32]
 8014c98:	801a      	strh	r2, [r3, #0]
 8014c9a:	6a3b      	ldr	r3, [r7, #32]
 8014c9c:	881b      	ldrh	r3, [r3, #0]
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8014d58 <PCD_EP_ISR_Handler+0x6ec>)
 8014ca2:	4313      	orrs	r3, r2
 8014ca4:	b29a      	uxth	r2, r3
 8014ca6:	6a3b      	ldr	r3, [r7, #32]
 8014ca8:	801a      	strh	r2, [r3, #0]
 8014caa:	e070      	b.n	8014d8e <PCD_EP_ISR_Handler+0x722>
 8014cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cae:	785b      	ldrb	r3, [r3, #1]
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	d16c      	bne.n	8014d8e <PCD_EP_ISR_Handler+0x722>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	2250      	movs	r2, #80	@ 0x50
 8014cc0:	5a9b      	ldrh	r3, [r3, r2]
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	001a      	movs	r2, r3
 8014cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc8:	189b      	adds	r3, r3, r2
 8014cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	00da      	lsls	r2, r3, #3
 8014cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd4:	18d3      	adds	r3, r2, r3
 8014cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8014d50 <PCD_EP_ISR_Handler+0x6e4>)
 8014cd8:	4694      	mov	ip, r2
 8014cda:	4463      	add	r3, ip
 8014cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	801a      	strh	r2, [r3, #0]
 8014ce4:	e053      	b.n	8014d8e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cee:	785b      	ldrb	r3, [r3, #1]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d133      	bne.n	8014d5c <PCD_EP_ISR_Handler+0x6f0>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	2250      	movs	r2, #80	@ 0x50
 8014d00:	5a9b      	ldrh	r3, [r3, r2]
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	001a      	movs	r2, r3
 8014d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d08:	189b      	adds	r3, r3, r2
 8014d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	00da      	lsls	r2, r3, #3
 8014d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d14:	18d3      	adds	r3, r2, r3
 8014d16:	4a0b      	ldr	r2, [pc, #44]	@ (8014d44 <PCD_EP_ISR_Handler+0x6d8>)
 8014d18:	4694      	mov	ip, r2
 8014d1a:	4463      	add	r3, ip
 8014d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8014d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d20:	881b      	ldrh	r3, [r3, #0]
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	059b      	lsls	r3, r3, #22
 8014d26:	0d9b      	lsrs	r3, r3, #22
 8014d28:	b29a      	uxth	r2, r3
 8014d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d2c:	801a      	strh	r2, [r3, #0]
 8014d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d30:	881b      	ldrh	r3, [r3, #0]
 8014d32:	b29b      	uxth	r3, r3
 8014d34:	4a08      	ldr	r2, [pc, #32]	@ (8014d58 <PCD_EP_ISR_Handler+0x6ec>)
 8014d36:	4313      	orrs	r3, r2
 8014d38:	b29a      	uxth	r2, r3
 8014d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d3c:	801a      	strh	r2, [r3, #0]
 8014d3e:	e026      	b.n	8014d8e <PCD_EP_ISR_Handler+0x722>
 8014d40:	00000f8f 	.word	0x00000f8f
 8014d44:	00000406 	.word	0x00000406
 8014d48:	ffff8f8f 	.word	0xffff8f8f
 8014d4c:	ffff80c0 	.word	0xffff80c0
 8014d50:	00000402 	.word	0x00000402
 8014d54:	ffff8f0f 	.word	0xffff8f0f
 8014d58:	ffff8000 	.word	0xffff8000
 8014d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d5e:	785b      	ldrb	r3, [r3, #1]
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d114      	bne.n	8014d8e <PCD_EP_ISR_Handler+0x722>
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2250      	movs	r2, #80	@ 0x50
 8014d6a:	5a9b      	ldrh	r3, [r3, r2]
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	001a      	movs	r2, r3
 8014d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d72:	189b      	adds	r3, r3, r2
 8014d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	00da      	lsls	r2, r3, #3
 8014d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d7e:	18d3      	adds	r3, r2, r3
 8014d80:	4a3b      	ldr	r2, [pc, #236]	@ (8014e70 <PCD_EP_ISR_Handler+0x804>)
 8014d82:	4694      	mov	ip, r2
 8014d84:	4463      	add	r3, ip
 8014d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d90:	781a      	ldrb	r2, [r3, #0]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	0011      	movs	r1, r2
 8014d96:	0018      	movs	r0, r3
 8014d98:	f008 ff84 	bl	801dca4 <HAL_PCD_DataInStageCallback>
 8014d9c:	e058      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8014d9e:	234a      	movs	r3, #74	@ 0x4a
 8014da0:	18fb      	adds	r3, r7, r3
 8014da2:	881a      	ldrh	r2, [r3, #0]
 8014da4:	2380      	movs	r3, #128	@ 0x80
 8014da6:	005b      	lsls	r3, r3, #1
 8014da8:	4013      	ands	r3, r2
 8014daa:	d149      	bne.n	8014e40 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2250      	movs	r2, #80	@ 0x50
 8014db2:	5a9b      	ldrh	r3, [r3, r2]
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	001a      	movs	r2, r3
 8014db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	00db      	lsls	r3, r3, #3
 8014dbe:	18d2      	adds	r2, r2, r3
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	18d3      	adds	r3, r2, r3
 8014dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8014e74 <PCD_EP_ISR_Handler+0x808>)
 8014dc8:	4694      	mov	ip, r2
 8014dca:	4463      	add	r3, ip
 8014dcc:	881a      	ldrh	r2, [r3, #0]
 8014dce:	2140      	movs	r1, #64	@ 0x40
 8014dd0:	187b      	adds	r3, r7, r1
 8014dd2:	0592      	lsls	r2, r2, #22
 8014dd4:	0d92      	lsrs	r2, r2, #22
 8014dd6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8014dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014dda:	699a      	ldr	r2, [r3, #24]
 8014ddc:	187b      	adds	r3, r7, r1
 8014dde:	881b      	ldrh	r3, [r3, #0]
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d907      	bls.n	8014df4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8014de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014de6:	699a      	ldr	r2, [r3, #24]
 8014de8:	187b      	adds	r3, r7, r1
 8014dea:	881b      	ldrh	r3, [r3, #0]
 8014dec:	1ad2      	subs	r2, r2, r3
 8014dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014df0:	619a      	str	r2, [r3, #24]
 8014df2:	e002      	b.n	8014dfa <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8014df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014df6:	2200      	movs	r2, #0
 8014df8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8014dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014dfc:	699b      	ldr	r3, [r3, #24]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d107      	bne.n	8014e12 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e04:	781a      	ldrb	r2, [r3, #0]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	0011      	movs	r1, r2
 8014e0a:	0018      	movs	r0, r3
 8014e0c:	f008 ff4a 	bl	801dca4 <HAL_PCD_DataInStageCallback>
 8014e10:	e01e      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8014e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e14:	695a      	ldr	r2, [r3, #20]
 8014e16:	2140      	movs	r1, #64	@ 0x40
 8014e18:	187b      	adds	r3, r7, r1
 8014e1a:	881b      	ldrh	r3, [r3, #0]
 8014e1c:	18d2      	adds	r2, r2, r3
 8014e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e20:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8014e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e24:	69da      	ldr	r2, [r3, #28]
 8014e26:	187b      	adds	r3, r7, r1
 8014e28:	881b      	ldrh	r3, [r3, #0]
 8014e2a:	18d2      	adds	r2, r2, r3
 8014e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e2e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014e36:	0011      	movs	r1, r2
 8014e38:	0018      	movs	r0, r3
 8014e3a:	f005 fc3d 	bl	801a6b8 <USB_EPStartXfer>
 8014e3e:	e007      	b.n	8014e50 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014e40:	234a      	movs	r3, #74	@ 0x4a
 8014e42:	18fb      	adds	r3, r7, r3
 8014e44:	881a      	ldrh	r2, [r3, #0]
 8014e46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	0018      	movs	r0, r3
 8014e4c:	f000 f930 	bl	80150b0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2244      	movs	r2, #68	@ 0x44
 8014e56:	5a9b      	ldrh	r3, [r3, r2]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	b21b      	sxth	r3, r3
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	da01      	bge.n	8014e64 <PCD_EP_ISR_Handler+0x7f8>
 8014e60:	f7ff fc0a 	bl	8014678 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014e64:	2300      	movs	r3, #0
}
 8014e66:	0018      	movs	r0, r3
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	b016      	add	sp, #88	@ 0x58
 8014e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e6e:	46c0      	nop			@ (mov r8, r8)
 8014e70:	00000406 	.word	0x00000406
 8014e74:	00000402 	.word	0x00000402

08014e78 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014e78:	b590      	push	{r4, r7, lr}
 8014e7a:	b089      	sub	sp, #36	@ 0x24
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	60f8      	str	r0, [r7, #12]
 8014e80:	60b9      	str	r1, [r7, #8]
 8014e82:	1dbb      	adds	r3, r7, #6
 8014e84:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014e86:	1dbb      	adds	r3, r7, #6
 8014e88:	881a      	ldrh	r2, [r3, #0]
 8014e8a:	2380      	movs	r3, #128	@ 0x80
 8014e8c:	01db      	lsls	r3, r3, #7
 8014e8e:	4013      	ands	r3, r2
 8014e90:	d100      	bne.n	8014e94 <HAL_PCD_EP_DB_Receive+0x1c>
 8014e92:	e07d      	b.n	8014f90 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2250      	movs	r2, #80	@ 0x50
 8014e9a:	5a9b      	ldrh	r3, [r3, r2]
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	001a      	movs	r2, r3
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	00db      	lsls	r3, r3, #3
 8014ea6:	18d2      	adds	r2, r2, r3
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	18d3      	adds	r3, r2, r3
 8014eae:	4a7a      	ldr	r2, [pc, #488]	@ (8015098 <HAL_PCD_EP_DB_Receive+0x220>)
 8014eb0:	4694      	mov	ip, r2
 8014eb2:	4463      	add	r3, ip
 8014eb4:	881a      	ldrh	r2, [r3, #0]
 8014eb6:	211a      	movs	r1, #26
 8014eb8:	187b      	adds	r3, r7, r1
 8014eba:	0592      	lsls	r2, r2, #22
 8014ebc:	0d92      	lsrs	r2, r2, #22
 8014ebe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	699a      	ldr	r2, [r3, #24]
 8014ec4:	187b      	adds	r3, r7, r1
 8014ec6:	881b      	ldrh	r3, [r3, #0]
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	d307      	bcc.n	8014edc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	699a      	ldr	r2, [r3, #24]
 8014ed0:	187b      	adds	r3, r7, r1
 8014ed2:	881b      	ldrh	r3, [r3, #0]
 8014ed4:	1ad2      	subs	r2, r2, r3
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	619a      	str	r2, [r3, #24]
 8014eda:	e002      	b.n	8014ee2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8014ee2:	68bb      	ldr	r3, [r7, #8]
 8014ee4:	699b      	ldr	r3, [r3, #24]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d121      	bne.n	8014f2e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	001a      	movs	r2, r3
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	009b      	lsls	r3, r3, #2
 8014ef6:	18d3      	adds	r3, r2, r3
 8014ef8:	881b      	ldrh	r3, [r3, #0]
 8014efa:	b29a      	uxth	r2, r3
 8014efc:	2018      	movs	r0, #24
 8014efe:	183b      	adds	r3, r7, r0
 8014f00:	4966      	ldr	r1, [pc, #408]	@ (801509c <HAL_PCD_EP_DB_Receive+0x224>)
 8014f02:	400a      	ands	r2, r1
 8014f04:	801a      	strh	r2, [r3, #0]
 8014f06:	183b      	adds	r3, r7, r0
 8014f08:	183a      	adds	r2, r7, r0
 8014f0a:	8812      	ldrh	r2, [r2, #0]
 8014f0c:	2180      	movs	r1, #128	@ 0x80
 8014f0e:	0189      	lsls	r1, r1, #6
 8014f10:	404a      	eors	r2, r1
 8014f12:	801a      	strh	r2, [r3, #0]
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	001a      	movs	r2, r3
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	18d3      	adds	r3, r2, r3
 8014f22:	183a      	adds	r2, r7, r0
 8014f24:	8812      	ldrh	r2, [r2, #0]
 8014f26:	495e      	ldr	r1, [pc, #376]	@ (80150a0 <HAL_PCD_EP_DB_Receive+0x228>)
 8014f28:	430a      	orrs	r2, r1
 8014f2a:	b292      	uxth	r2, r2
 8014f2c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014f2e:	1dbb      	adds	r3, r7, #6
 8014f30:	881b      	ldrh	r3, [r3, #0]
 8014f32:	2240      	movs	r2, #64	@ 0x40
 8014f34:	4013      	ands	r3, r2
 8014f36:	d01a      	beq.n	8014f6e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	001a      	movs	r2, r3
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	18d3      	adds	r3, r2, r3
 8014f46:	881b      	ldrh	r3, [r3, #0]
 8014f48:	b29a      	uxth	r2, r3
 8014f4a:	2016      	movs	r0, #22
 8014f4c:	183b      	adds	r3, r7, r0
 8014f4e:	4955      	ldr	r1, [pc, #340]	@ (80150a4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014f50:	400a      	ands	r2, r1
 8014f52:	801a      	strh	r2, [r3, #0]
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	001a      	movs	r2, r3
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	009b      	lsls	r3, r3, #2
 8014f60:	18d3      	adds	r3, r2, r3
 8014f62:	183a      	adds	r2, r7, r0
 8014f64:	8812      	ldrh	r2, [r2, #0]
 8014f66:	4950      	ldr	r1, [pc, #320]	@ (80150a8 <HAL_PCD_EP_DB_Receive+0x230>)
 8014f68:	430a      	orrs	r2, r1
 8014f6a:	b292      	uxth	r2, r2
 8014f6c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014f6e:	241a      	movs	r4, #26
 8014f70:	193b      	adds	r3, r7, r4
 8014f72:	881b      	ldrh	r3, [r3, #0]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d100      	bne.n	8014f7a <HAL_PCD_EP_DB_Receive+0x102>
 8014f78:	e086      	b.n	8015088 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	6818      	ldr	r0, [r3, #0]
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	6959      	ldr	r1, [r3, #20]
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	891a      	ldrh	r2, [r3, #8]
 8014f86:	193b      	adds	r3, r7, r4
 8014f88:	881b      	ldrh	r3, [r3, #0]
 8014f8a:	f006 fe50 	bl	801bc2e <USB_ReadPMA>
 8014f8e:	e07b      	b.n	8015088 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2250      	movs	r2, #80	@ 0x50
 8014f96:	5a9b      	ldrh	r3, [r3, r2]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	001a      	movs	r2, r3
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	00db      	lsls	r3, r3, #3
 8014fa2:	18d2      	adds	r2, r2, r3
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	18d3      	adds	r3, r2, r3
 8014faa:	4a40      	ldr	r2, [pc, #256]	@ (80150ac <HAL_PCD_EP_DB_Receive+0x234>)
 8014fac:	4694      	mov	ip, r2
 8014fae:	4463      	add	r3, ip
 8014fb0:	881a      	ldrh	r2, [r3, #0]
 8014fb2:	211a      	movs	r1, #26
 8014fb4:	187b      	adds	r3, r7, r1
 8014fb6:	0592      	lsls	r2, r2, #22
 8014fb8:	0d92      	lsrs	r2, r2, #22
 8014fba:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	699a      	ldr	r2, [r3, #24]
 8014fc0:	187b      	adds	r3, r7, r1
 8014fc2:	881b      	ldrh	r3, [r3, #0]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d307      	bcc.n	8014fd8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	699a      	ldr	r2, [r3, #24]
 8014fcc:	187b      	adds	r3, r7, r1
 8014fce:	881b      	ldrh	r3, [r3, #0]
 8014fd0:	1ad2      	subs	r2, r2, r3
 8014fd2:	68bb      	ldr	r3, [r7, #8]
 8014fd4:	619a      	str	r2, [r3, #24]
 8014fd6:	e002      	b.n	8014fde <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	699b      	ldr	r3, [r3, #24]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d121      	bne.n	801502a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	001a      	movs	r2, r3
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	781b      	ldrb	r3, [r3, #0]
 8014ff0:	009b      	lsls	r3, r3, #2
 8014ff2:	18d3      	adds	r3, r2, r3
 8014ff4:	881b      	ldrh	r3, [r3, #0]
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	201e      	movs	r0, #30
 8014ffa:	183b      	adds	r3, r7, r0
 8014ffc:	4927      	ldr	r1, [pc, #156]	@ (801509c <HAL_PCD_EP_DB_Receive+0x224>)
 8014ffe:	400a      	ands	r2, r1
 8015000:	801a      	strh	r2, [r3, #0]
 8015002:	183b      	adds	r3, r7, r0
 8015004:	183a      	adds	r2, r7, r0
 8015006:	8812      	ldrh	r2, [r2, #0]
 8015008:	2180      	movs	r1, #128	@ 0x80
 801500a:	0189      	lsls	r1, r1, #6
 801500c:	404a      	eors	r2, r1
 801500e:	801a      	strh	r2, [r3, #0]
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	001a      	movs	r2, r3
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	009b      	lsls	r3, r3, #2
 801501c:	18d3      	adds	r3, r2, r3
 801501e:	183a      	adds	r2, r7, r0
 8015020:	8812      	ldrh	r2, [r2, #0]
 8015022:	491f      	ldr	r1, [pc, #124]	@ (80150a0 <HAL_PCD_EP_DB_Receive+0x228>)
 8015024:	430a      	orrs	r2, r1
 8015026:	b292      	uxth	r2, r2
 8015028:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801502a:	1dbb      	adds	r3, r7, #6
 801502c:	881b      	ldrh	r3, [r3, #0]
 801502e:	2240      	movs	r2, #64	@ 0x40
 8015030:	4013      	ands	r3, r2
 8015032:	d11a      	bne.n	801506a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	001a      	movs	r2, r3
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	009b      	lsls	r3, r3, #2
 8015040:	18d3      	adds	r3, r2, r3
 8015042:	881b      	ldrh	r3, [r3, #0]
 8015044:	b29a      	uxth	r2, r3
 8015046:	201c      	movs	r0, #28
 8015048:	183b      	adds	r3, r7, r0
 801504a:	4916      	ldr	r1, [pc, #88]	@ (80150a4 <HAL_PCD_EP_DB_Receive+0x22c>)
 801504c:	400a      	ands	r2, r1
 801504e:	801a      	strh	r2, [r3, #0]
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	001a      	movs	r2, r3
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	18d3      	adds	r3, r2, r3
 801505e:	183a      	adds	r2, r7, r0
 8015060:	8812      	ldrh	r2, [r2, #0]
 8015062:	4911      	ldr	r1, [pc, #68]	@ (80150a8 <HAL_PCD_EP_DB_Receive+0x230>)
 8015064:	430a      	orrs	r2, r1
 8015066:	b292      	uxth	r2, r2
 8015068:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801506a:	241a      	movs	r4, #26
 801506c:	193b      	adds	r3, r7, r4
 801506e:	881b      	ldrh	r3, [r3, #0]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d009      	beq.n	8015088 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	6818      	ldr	r0, [r3, #0]
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	6959      	ldr	r1, [r3, #20]
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	895a      	ldrh	r2, [r3, #10]
 8015080:	193b      	adds	r3, r7, r4
 8015082:	881b      	ldrh	r3, [r3, #0]
 8015084:	f006 fdd3 	bl	801bc2e <USB_ReadPMA>
    }
  }

  return count;
 8015088:	231a      	movs	r3, #26
 801508a:	18fb      	adds	r3, r7, r3
 801508c:	881b      	ldrh	r3, [r3, #0]
}
 801508e:	0018      	movs	r0, r3
 8015090:	46bd      	mov	sp, r7
 8015092:	b009      	add	sp, #36	@ 0x24
 8015094:	bd90      	pop	{r4, r7, pc}
 8015096:	46c0      	nop			@ (mov r8, r8)
 8015098:	00000402 	.word	0x00000402
 801509c:	ffffbf8f 	.word	0xffffbf8f
 80150a0:	ffff8080 	.word	0xffff8080
 80150a4:	ffff8f8f 	.word	0xffff8f8f
 80150a8:	ffff80c0 	.word	0xffff80c0
 80150ac:	00000406 	.word	0x00000406

080150b0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b0a4      	sub	sp, #144	@ 0x90
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	1dbb      	adds	r3, r7, #6
 80150bc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80150be:	1dbb      	adds	r3, r7, #6
 80150c0:	881b      	ldrh	r3, [r3, #0]
 80150c2:	2240      	movs	r2, #64	@ 0x40
 80150c4:	4013      	ands	r3, r2
 80150c6:	d100      	bne.n	80150ca <HAL_PCD_EP_DB_Transmit+0x1a>
 80150c8:	e1e4      	b.n	8015494 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2250      	movs	r2, #80	@ 0x50
 80150d0:	5a9b      	ldrh	r3, [r3, r2]
 80150d2:	b29b      	uxth	r3, r3
 80150d4:	001a      	movs	r2, r3
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	00db      	lsls	r3, r3, #3
 80150dc:	18d2      	adds	r2, r2, r3
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	18d3      	adds	r3, r2, r3
 80150e4:	4ad0      	ldr	r2, [pc, #832]	@ (8015428 <HAL_PCD_EP_DB_Transmit+0x378>)
 80150e6:	4694      	mov	ip, r2
 80150e8:	4463      	add	r3, ip
 80150ea:	881a      	ldrh	r2, [r3, #0]
 80150ec:	2186      	movs	r1, #134	@ 0x86
 80150ee:	187b      	adds	r3, r7, r1
 80150f0:	0592      	lsls	r2, r2, #22
 80150f2:	0d92      	lsrs	r2, r2, #22
 80150f4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	699a      	ldr	r2, [r3, #24]
 80150fa:	187b      	adds	r3, r7, r1
 80150fc:	881b      	ldrh	r3, [r3, #0]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d907      	bls.n	8015112 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	699a      	ldr	r2, [r3, #24]
 8015106:	187b      	adds	r3, r7, r1
 8015108:	881b      	ldrh	r3, [r3, #0]
 801510a:	1ad2      	subs	r2, r2, r3
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	619a      	str	r2, [r3, #24]
 8015110:	e002      	b.n	8015118 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	2200      	movs	r2, #0
 8015116:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	699b      	ldr	r3, [r3, #24]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d000      	beq.n	8015122 <HAL_PCD_EP_DB_Transmit+0x72>
 8015120:	e0b5      	b.n	801528e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	785b      	ldrb	r3, [r3, #1]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d125      	bne.n	8015176 <HAL_PCD_EP_DB_Transmit+0xc6>
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	2250      	movs	r2, #80	@ 0x50
 8015136:	5a9b      	ldrh	r3, [r3, r2]
 8015138:	b29b      	uxth	r3, r3
 801513a:	001a      	movs	r2, r3
 801513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801513e:	189b      	adds	r3, r3, r2
 8015140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	00da      	lsls	r2, r3, #3
 8015148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801514a:	18d3      	adds	r3, r2, r3
 801514c:	4ab6      	ldr	r2, [pc, #728]	@ (8015428 <HAL_PCD_EP_DB_Transmit+0x378>)
 801514e:	4694      	mov	ip, r2
 8015150:	4463      	add	r3, ip
 8015152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015156:	881b      	ldrh	r3, [r3, #0]
 8015158:	b29b      	uxth	r3, r3
 801515a:	059b      	lsls	r3, r3, #22
 801515c:	0d9b      	lsrs	r3, r3, #22
 801515e:	b29a      	uxth	r2, r3
 8015160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015162:	801a      	strh	r2, [r3, #0]
 8015164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015166:	881b      	ldrh	r3, [r3, #0]
 8015168:	b29b      	uxth	r3, r3
 801516a:	4ab0      	ldr	r2, [pc, #704]	@ (801542c <HAL_PCD_EP_DB_Transmit+0x37c>)
 801516c:	4313      	orrs	r3, r2
 801516e:	b29a      	uxth	r2, r3
 8015170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015172:	801a      	strh	r2, [r3, #0]
 8015174:	e01b      	b.n	80151ae <HAL_PCD_EP_DB_Transmit+0xfe>
 8015176:	68bb      	ldr	r3, [r7, #8]
 8015178:	785b      	ldrb	r3, [r3, #1]
 801517a:	2b01      	cmp	r3, #1
 801517c:	d117      	bne.n	80151ae <HAL_PCD_EP_DB_Transmit+0xfe>
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	637b      	str	r3, [r7, #52]	@ 0x34
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2250      	movs	r2, #80	@ 0x50
 801518a:	5a9b      	ldrh	r3, [r3, r2]
 801518c:	b29b      	uxth	r3, r3
 801518e:	001a      	movs	r2, r3
 8015190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015192:	189b      	adds	r3, r3, r2
 8015194:	637b      	str	r3, [r7, #52]	@ 0x34
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	00da      	lsls	r2, r3, #3
 801519c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801519e:	18d3      	adds	r3, r2, r3
 80151a0:	4aa1      	ldr	r2, [pc, #644]	@ (8015428 <HAL_PCD_EP_DB_Transmit+0x378>)
 80151a2:	4694      	mov	ip, r2
 80151a4:	4463      	add	r3, ip
 80151a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80151a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151aa:	2200      	movs	r2, #0
 80151ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	785b      	ldrb	r3, [r3, #1]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d125      	bne.n	8015208 <HAL_PCD_EP_DB_Transmit+0x158>
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	61fb      	str	r3, [r7, #28]
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	2250      	movs	r2, #80	@ 0x50
 80151c8:	5a9b      	ldrh	r3, [r3, r2]
 80151ca:	b29b      	uxth	r3, r3
 80151cc:	001a      	movs	r2, r3
 80151ce:	69fb      	ldr	r3, [r7, #28]
 80151d0:	189b      	adds	r3, r3, r2
 80151d2:	61fb      	str	r3, [r7, #28]
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	00da      	lsls	r2, r3, #3
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	18d3      	adds	r3, r2, r3
 80151de:	4a94      	ldr	r2, [pc, #592]	@ (8015430 <HAL_PCD_EP_DB_Transmit+0x380>)
 80151e0:	4694      	mov	ip, r2
 80151e2:	4463      	add	r3, ip
 80151e4:	61bb      	str	r3, [r7, #24]
 80151e6:	69bb      	ldr	r3, [r7, #24]
 80151e8:	881b      	ldrh	r3, [r3, #0]
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	059b      	lsls	r3, r3, #22
 80151ee:	0d9b      	lsrs	r3, r3, #22
 80151f0:	b29a      	uxth	r2, r3
 80151f2:	69bb      	ldr	r3, [r7, #24]
 80151f4:	801a      	strh	r2, [r3, #0]
 80151f6:	69bb      	ldr	r3, [r7, #24]
 80151f8:	881b      	ldrh	r3, [r3, #0]
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	4a8b      	ldr	r2, [pc, #556]	@ (801542c <HAL_PCD_EP_DB_Transmit+0x37c>)
 80151fe:	4313      	orrs	r3, r2
 8015200:	b29a      	uxth	r2, r3
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	801a      	strh	r2, [r3, #0]
 8015206:	e018      	b.n	801523a <HAL_PCD_EP_DB_Transmit+0x18a>
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	785b      	ldrb	r3, [r3, #1]
 801520c:	2b01      	cmp	r3, #1
 801520e:	d114      	bne.n	801523a <HAL_PCD_EP_DB_Transmit+0x18a>
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	2250      	movs	r2, #80	@ 0x50
 8015216:	5a9b      	ldrh	r3, [r3, r2]
 8015218:	b29b      	uxth	r3, r3
 801521a:	001a      	movs	r2, r3
 801521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801521e:	189b      	adds	r3, r3, r2
 8015220:	627b      	str	r3, [r7, #36]	@ 0x24
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	00da      	lsls	r2, r3, #3
 8015228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801522a:	18d3      	adds	r3, r2, r3
 801522c:	4a80      	ldr	r2, [pc, #512]	@ (8015430 <HAL_PCD_EP_DB_Transmit+0x380>)
 801522e:	4694      	mov	ip, r2
 8015230:	4463      	add	r3, ip
 8015232:	623b      	str	r3, [r7, #32]
 8015234:	6a3b      	ldr	r3, [r7, #32]
 8015236:	2200      	movs	r2, #0
 8015238:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	781a      	ldrb	r2, [r3, #0]
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	0011      	movs	r1, r2
 8015242:	0018      	movs	r0, r3
 8015244:	f008 fd2e 	bl	801dca4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8015248:	1dbb      	adds	r3, r7, #6
 801524a:	881a      	ldrh	r2, [r3, #0]
 801524c:	2380      	movs	r3, #128	@ 0x80
 801524e:	01db      	lsls	r3, r3, #7
 8015250:	4013      	ands	r3, r2
 8015252:	d100      	bne.n	8015256 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8015254:	e309      	b.n	801586a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	001a      	movs	r2, r3
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	009b      	lsls	r3, r3, #2
 8015262:	18d3      	adds	r3, r2, r3
 8015264:	881b      	ldrh	r3, [r3, #0]
 8015266:	b29a      	uxth	r2, r3
 8015268:	2016      	movs	r0, #22
 801526a:	183b      	adds	r3, r7, r0
 801526c:	4971      	ldr	r1, [pc, #452]	@ (8015434 <HAL_PCD_EP_DB_Transmit+0x384>)
 801526e:	400a      	ands	r2, r1
 8015270:	801a      	strh	r2, [r3, #0]
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	001a      	movs	r2, r3
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	009b      	lsls	r3, r3, #2
 801527e:	18d3      	adds	r3, r2, r3
 8015280:	183a      	adds	r2, r7, r0
 8015282:	8812      	ldrh	r2, [r2, #0]
 8015284:	496c      	ldr	r1, [pc, #432]	@ (8015438 <HAL_PCD_EP_DB_Transmit+0x388>)
 8015286:	430a      	orrs	r2, r1
 8015288:	b292      	uxth	r2, r2
 801528a:	801a      	strh	r2, [r3, #0]
 801528c:	e2ed      	b.n	801586a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801528e:	1dbb      	adds	r3, r7, #6
 8015290:	881a      	ldrh	r2, [r3, #0]
 8015292:	2380      	movs	r3, #128	@ 0x80
 8015294:	01db      	lsls	r3, r3, #7
 8015296:	4013      	ands	r3, r2
 8015298:	d01a      	beq.n	80152d0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	001a      	movs	r2, r3
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	009b      	lsls	r3, r3, #2
 80152a6:	18d3      	adds	r3, r2, r3
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	b29a      	uxth	r2, r3
 80152ac:	208a      	movs	r0, #138	@ 0x8a
 80152ae:	183b      	adds	r3, r7, r0
 80152b0:	4960      	ldr	r1, [pc, #384]	@ (8015434 <HAL_PCD_EP_DB_Transmit+0x384>)
 80152b2:	400a      	ands	r2, r1
 80152b4:	801a      	strh	r2, [r3, #0]
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	001a      	movs	r2, r3
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	009b      	lsls	r3, r3, #2
 80152c2:	18d3      	adds	r3, r2, r3
 80152c4:	183a      	adds	r2, r7, r0
 80152c6:	8812      	ldrh	r2, [r2, #0]
 80152c8:	495b      	ldr	r1, [pc, #364]	@ (8015438 <HAL_PCD_EP_DB_Transmit+0x388>)
 80152ca:	430a      	orrs	r2, r1
 80152cc:	b292      	uxth	r2, r2
 80152ce:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	2224      	movs	r2, #36	@ 0x24
 80152d4:	5c9b      	ldrb	r3, [r3, r2]
 80152d6:	2b01      	cmp	r3, #1
 80152d8:	d000      	beq.n	80152dc <HAL_PCD_EP_DB_Transmit+0x22c>
 80152da:	e2c6      	b.n	801586a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	695a      	ldr	r2, [r3, #20]
 80152e0:	2186      	movs	r1, #134	@ 0x86
 80152e2:	187b      	adds	r3, r7, r1
 80152e4:	881b      	ldrh	r3, [r3, #0]
 80152e6:	18d2      	adds	r2, r2, r3
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	69da      	ldr	r2, [r3, #28]
 80152f0:	187b      	adds	r3, r7, r1
 80152f2:	881b      	ldrh	r3, [r3, #0]
 80152f4:	18d2      	adds	r2, r2, r3
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	6a1a      	ldr	r2, [r3, #32]
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	691b      	ldr	r3, [r3, #16]
 8015302:	429a      	cmp	r2, r3
 8015304:	d30c      	bcc.n	8015320 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8015306:	68bb      	ldr	r3, [r7, #8]
 8015308:	691b      	ldr	r3, [r3, #16]
 801530a:	218c      	movs	r1, #140	@ 0x8c
 801530c:	187a      	adds	r2, r7, r1
 801530e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	6a1a      	ldr	r2, [r3, #32]
 8015314:	187b      	adds	r3, r7, r1
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	1ad2      	subs	r2, r2, r3
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	621a      	str	r2, [r3, #32]
 801531e:	e01a      	b.n	8015356 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	6a1b      	ldr	r3, [r3, #32]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d10a      	bne.n	801533e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8015328:	2386      	movs	r3, #134	@ 0x86
 801532a:	18fb      	adds	r3, r7, r3
 801532c:	881b      	ldrh	r3, [r3, #0]
 801532e:	228c      	movs	r2, #140	@ 0x8c
 8015330:	18ba      	adds	r2, r7, r2
 8015332:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	2224      	movs	r2, #36	@ 0x24
 8015338:	2100      	movs	r1, #0
 801533a:	5499      	strb	r1, [r3, r2]
 801533c:	e00b      	b.n	8015356 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	2224      	movs	r2, #36	@ 0x24
 8015342:	2100      	movs	r1, #0
 8015344:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	6a1b      	ldr	r3, [r3, #32]
 801534a:	228c      	movs	r2, #140	@ 0x8c
 801534c:	18ba      	adds	r2, r7, r2
 801534e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	2200      	movs	r2, #0
 8015354:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	785b      	ldrb	r3, [r3, #1]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d000      	beq.n	8015360 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801535e:	e06d      	b.n	801543c <HAL_PCD_EP_DB_Transmit+0x38c>
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	2250      	movs	r2, #80	@ 0x50
 801536c:	5a9b      	ldrh	r3, [r3, r2]
 801536e:	b29b      	uxth	r3, r3
 8015370:	001a      	movs	r2, r3
 8015372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015374:	189b      	adds	r3, r3, r2
 8015376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	781b      	ldrb	r3, [r3, #0]
 801537c:	00da      	lsls	r2, r3, #3
 801537e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015380:	18d3      	adds	r3, r2, r3
 8015382:	4a29      	ldr	r2, [pc, #164]	@ (8015428 <HAL_PCD_EP_DB_Transmit+0x378>)
 8015384:	4694      	mov	ip, r2
 8015386:	4463      	add	r3, ip
 8015388:	63bb      	str	r3, [r7, #56]	@ 0x38
 801538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	b29b      	uxth	r3, r3
 8015390:	059b      	lsls	r3, r3, #22
 8015392:	0d9b      	lsrs	r3, r3, #22
 8015394:	b29a      	uxth	r2, r3
 8015396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015398:	801a      	strh	r2, [r3, #0]
 801539a:	228c      	movs	r2, #140	@ 0x8c
 801539c:	18bb      	adds	r3, r7, r2
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80153a2:	d91a      	bls.n	80153da <HAL_PCD_EP_DB_Transmit+0x32a>
 80153a4:	18bb      	adds	r3, r7, r2
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	095b      	lsrs	r3, r3, #5
 80153aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153ac:	18bb      	adds	r3, r7, r2
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	221f      	movs	r2, #31
 80153b2:	4013      	ands	r3, r2
 80153b4:	d102      	bne.n	80153bc <HAL_PCD_EP_DB_Transmit+0x30c>
 80153b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80153b8:	3b01      	subs	r3, #1
 80153ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153be:	881b      	ldrh	r3, [r3, #0]
 80153c0:	b29a      	uxth	r2, r3
 80153c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	029b      	lsls	r3, r3, #10
 80153c8:	b29b      	uxth	r3, r3
 80153ca:	4313      	orrs	r3, r2
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	4a17      	ldr	r2, [pc, #92]	@ (801542c <HAL_PCD_EP_DB_Transmit+0x37c>)
 80153d0:	4313      	orrs	r3, r2
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153d6:	801a      	strh	r2, [r3, #0]
 80153d8:	e04f      	b.n	801547a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80153da:	238c      	movs	r3, #140	@ 0x8c
 80153dc:	18fb      	adds	r3, r7, r3
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d108      	bne.n	80153f6 <HAL_PCD_EP_DB_Transmit+0x346>
 80153e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153e6:	881b      	ldrh	r3, [r3, #0]
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	4a10      	ldr	r2, [pc, #64]	@ (801542c <HAL_PCD_EP_DB_Transmit+0x37c>)
 80153ec:	4313      	orrs	r3, r2
 80153ee:	b29a      	uxth	r2, r3
 80153f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153f2:	801a      	strh	r2, [r3, #0]
 80153f4:	e041      	b.n	801547a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80153f6:	228c      	movs	r2, #140	@ 0x8c
 80153f8:	18bb      	adds	r3, r7, r2
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	085b      	lsrs	r3, r3, #1
 80153fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015400:	18bb      	adds	r3, r7, r2
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	2201      	movs	r2, #1
 8015406:	4013      	ands	r3, r2
 8015408:	d002      	beq.n	8015410 <HAL_PCD_EP_DB_Transmit+0x360>
 801540a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801540c:	3301      	adds	r3, #1
 801540e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015412:	881b      	ldrh	r3, [r3, #0]
 8015414:	b29a      	uxth	r2, r3
 8015416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015418:	b29b      	uxth	r3, r3
 801541a:	029b      	lsls	r3, r3, #10
 801541c:	b29b      	uxth	r3, r3
 801541e:	4313      	orrs	r3, r2
 8015420:	b29a      	uxth	r2, r3
 8015422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015424:	801a      	strh	r2, [r3, #0]
 8015426:	e028      	b.n	801547a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8015428:	00000402 	.word	0x00000402
 801542c:	ffff8000 	.word	0xffff8000
 8015430:	00000406 	.word	0x00000406
 8015434:	ffff8f8f 	.word	0xffff8f8f
 8015438:	ffffc080 	.word	0xffffc080
 801543c:	68bb      	ldr	r3, [r7, #8]
 801543e:	785b      	ldrb	r3, [r3, #1]
 8015440:	2b01      	cmp	r3, #1
 8015442:	d11a      	bne.n	801547a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	647b      	str	r3, [r7, #68]	@ 0x44
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	2250      	movs	r2, #80	@ 0x50
 8015450:	5a9b      	ldrh	r3, [r3, r2]
 8015452:	b29b      	uxth	r3, r3
 8015454:	001a      	movs	r2, r3
 8015456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015458:	189b      	adds	r3, r3, r2
 801545a:	647b      	str	r3, [r7, #68]	@ 0x44
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	00da      	lsls	r2, r3, #3
 8015462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015464:	18d3      	adds	r3, r2, r3
 8015466:	4adb      	ldr	r2, [pc, #876]	@ (80157d4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8015468:	4694      	mov	ip, r2
 801546a:	4463      	add	r3, ip
 801546c:	643b      	str	r3, [r7, #64]	@ 0x40
 801546e:	238c      	movs	r3, #140	@ 0x8c
 8015470:	18fb      	adds	r3, r7, r3
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	b29a      	uxth	r2, r3
 8015476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015478:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	6818      	ldr	r0, [r3, #0]
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	6959      	ldr	r1, [r3, #20]
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	891a      	ldrh	r2, [r3, #8]
 8015486:	238c      	movs	r3, #140	@ 0x8c
 8015488:	18fb      	adds	r3, r7, r3
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	b29b      	uxth	r3, r3
 801548e:	f006 fb85 	bl	801bb9c <USB_WritePMA>
 8015492:	e1ea      	b.n	801586a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	2250      	movs	r2, #80	@ 0x50
 801549a:	5a9b      	ldrh	r3, [r3, r2]
 801549c:	b29b      	uxth	r3, r3
 801549e:	001a      	movs	r2, r3
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	00db      	lsls	r3, r3, #3
 80154a6:	18d2      	adds	r2, r2, r3
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	18d3      	adds	r3, r2, r3
 80154ae:	4aca      	ldr	r2, [pc, #808]	@ (80157d8 <HAL_PCD_EP_DB_Transmit+0x728>)
 80154b0:	4694      	mov	ip, r2
 80154b2:	4463      	add	r3, ip
 80154b4:	881a      	ldrh	r2, [r3, #0]
 80154b6:	2186      	movs	r1, #134	@ 0x86
 80154b8:	187b      	adds	r3, r7, r1
 80154ba:	0592      	lsls	r2, r2, #22
 80154bc:	0d92      	lsrs	r2, r2, #22
 80154be:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	699a      	ldr	r2, [r3, #24]
 80154c4:	187b      	adds	r3, r7, r1
 80154c6:	881b      	ldrh	r3, [r3, #0]
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d307      	bcc.n	80154dc <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80154cc:	68bb      	ldr	r3, [r7, #8]
 80154ce:	699a      	ldr	r2, [r3, #24]
 80154d0:	187b      	adds	r3, r7, r1
 80154d2:	881b      	ldrh	r3, [r3, #0]
 80154d4:	1ad2      	subs	r2, r2, r3
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	619a      	str	r2, [r3, #24]
 80154da:	e002      	b.n	80154e2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	2200      	movs	r2, #0
 80154e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80154e2:	68bb      	ldr	r3, [r7, #8]
 80154e4:	699b      	ldr	r3, [r3, #24]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d000      	beq.n	80154ec <HAL_PCD_EP_DB_Transmit+0x43c>
 80154ea:	e0bb      	b.n	8015664 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	785b      	ldrb	r3, [r3, #1]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d125      	bne.n	8015540 <HAL_PCD_EP_DB_Transmit+0x490>
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2250      	movs	r2, #80	@ 0x50
 8015500:	5a9b      	ldrh	r3, [r3, r2]
 8015502:	b29b      	uxth	r3, r3
 8015504:	001a      	movs	r2, r3
 8015506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015508:	189b      	adds	r3, r3, r2
 801550a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	00da      	lsls	r2, r3, #3
 8015512:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015514:	18d3      	adds	r3, r2, r3
 8015516:	4aaf      	ldr	r2, [pc, #700]	@ (80157d4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8015518:	4694      	mov	ip, r2
 801551a:	4463      	add	r3, ip
 801551c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801551e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015520:	881b      	ldrh	r3, [r3, #0]
 8015522:	b29b      	uxth	r3, r3
 8015524:	059b      	lsls	r3, r3, #22
 8015526:	0d9b      	lsrs	r3, r3, #22
 8015528:	b29a      	uxth	r2, r3
 801552a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801552c:	801a      	strh	r2, [r3, #0]
 801552e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015530:	881b      	ldrh	r3, [r3, #0]
 8015532:	b29b      	uxth	r3, r3
 8015534:	4aa9      	ldr	r2, [pc, #676]	@ (80157dc <HAL_PCD_EP_DB_Transmit+0x72c>)
 8015536:	4313      	orrs	r3, r2
 8015538:	b29a      	uxth	r2, r3
 801553a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801553c:	801a      	strh	r2, [r3, #0]
 801553e:	e01b      	b.n	8015578 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	785b      	ldrb	r3, [r3, #1]
 8015544:	2b01      	cmp	r3, #1
 8015546:	d117      	bne.n	8015578 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	667b      	str	r3, [r7, #100]	@ 0x64
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	2250      	movs	r2, #80	@ 0x50
 8015554:	5a9b      	ldrh	r3, [r3, r2]
 8015556:	b29b      	uxth	r3, r3
 8015558:	001a      	movs	r2, r3
 801555a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801555c:	189b      	adds	r3, r3, r2
 801555e:	667b      	str	r3, [r7, #100]	@ 0x64
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	781b      	ldrb	r3, [r3, #0]
 8015564:	00da      	lsls	r2, r3, #3
 8015566:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015568:	18d3      	adds	r3, r2, r3
 801556a:	4a9a      	ldr	r2, [pc, #616]	@ (80157d4 <HAL_PCD_EP_DB_Transmit+0x724>)
 801556c:	4694      	mov	ip, r2
 801556e:	4463      	add	r3, ip
 8015570:	663b      	str	r3, [r7, #96]	@ 0x60
 8015572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015574:	2200      	movs	r2, #0
 8015576:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	677b      	str	r3, [r7, #116]	@ 0x74
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	785b      	ldrb	r3, [r3, #1]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d12b      	bne.n	80155de <HAL_PCD_EP_DB_Transmit+0x52e>
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	2250      	movs	r2, #80	@ 0x50
 8015592:	5a9b      	ldrh	r3, [r3, r2]
 8015594:	b29b      	uxth	r3, r3
 8015596:	001a      	movs	r2, r3
 8015598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801559a:	189b      	adds	r3, r3, r2
 801559c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	00da      	lsls	r2, r3, #3
 80155a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80155a6:	18d3      	adds	r3, r2, r3
 80155a8:	4a8b      	ldr	r2, [pc, #556]	@ (80157d8 <HAL_PCD_EP_DB_Transmit+0x728>)
 80155aa:	4694      	mov	ip, r2
 80155ac:	4463      	add	r3, ip
 80155ae:	2180      	movs	r1, #128	@ 0x80
 80155b0:	187a      	adds	r2, r7, r1
 80155b2:	6013      	str	r3, [r2, #0]
 80155b4:	187b      	adds	r3, r7, r1
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	881b      	ldrh	r3, [r3, #0]
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	059b      	lsls	r3, r3, #22
 80155be:	0d9b      	lsrs	r3, r3, #22
 80155c0:	b29a      	uxth	r2, r3
 80155c2:	187b      	adds	r3, r7, r1
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	801a      	strh	r2, [r3, #0]
 80155c8:	187b      	adds	r3, r7, r1
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	881b      	ldrh	r3, [r3, #0]
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	4a82      	ldr	r2, [pc, #520]	@ (80157dc <HAL_PCD_EP_DB_Transmit+0x72c>)
 80155d2:	4313      	orrs	r3, r2
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	187b      	adds	r3, r7, r1
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	801a      	strh	r2, [r3, #0]
 80155dc:	e018      	b.n	8015610 <HAL_PCD_EP_DB_Transmit+0x560>
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	785b      	ldrb	r3, [r3, #1]
 80155e2:	2b01      	cmp	r3, #1
 80155e4:	d114      	bne.n	8015610 <HAL_PCD_EP_DB_Transmit+0x560>
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	2250      	movs	r2, #80	@ 0x50
 80155ec:	5a9b      	ldrh	r3, [r3, r2]
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	001a      	movs	r2, r3
 80155f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80155f4:	189b      	adds	r3, r3, r2
 80155f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	00da      	lsls	r2, r3, #3
 80155fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015600:	18d3      	adds	r3, r2, r3
 8015602:	4a75      	ldr	r2, [pc, #468]	@ (80157d8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8015604:	4694      	mov	ip, r2
 8015606:	4463      	add	r3, ip
 8015608:	673b      	str	r3, [r7, #112]	@ 0x70
 801560a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801560c:	2200      	movs	r2, #0
 801560e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8015610:	68bb      	ldr	r3, [r7, #8]
 8015612:	781a      	ldrb	r2, [r3, #0]
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	0011      	movs	r1, r2
 8015618:	0018      	movs	r0, r3
 801561a:	f008 fb43 	bl	801dca4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801561e:	1dbb      	adds	r3, r7, #6
 8015620:	881a      	ldrh	r2, [r3, #0]
 8015622:	2380      	movs	r3, #128	@ 0x80
 8015624:	01db      	lsls	r3, r3, #7
 8015626:	4013      	ands	r3, r2
 8015628:	d000      	beq.n	801562c <HAL_PCD_EP_DB_Transmit+0x57c>
 801562a:	e11e      	b.n	801586a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	001a      	movs	r2, r3
 8015632:	68bb      	ldr	r3, [r7, #8]
 8015634:	781b      	ldrb	r3, [r3, #0]
 8015636:	009b      	lsls	r3, r3, #2
 8015638:	18d3      	adds	r3, r2, r3
 801563a:	881b      	ldrh	r3, [r3, #0]
 801563c:	b29a      	uxth	r2, r3
 801563e:	2088      	movs	r0, #136	@ 0x88
 8015640:	183b      	adds	r3, r7, r0
 8015642:	4967      	ldr	r1, [pc, #412]	@ (80157e0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8015644:	400a      	ands	r2, r1
 8015646:	801a      	strh	r2, [r3, #0]
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	001a      	movs	r2, r3
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	18d3      	adds	r3, r2, r3
 8015656:	183a      	adds	r2, r7, r0
 8015658:	8812      	ldrh	r2, [r2, #0]
 801565a:	4962      	ldr	r1, [pc, #392]	@ (80157e4 <HAL_PCD_EP_DB_Transmit+0x734>)
 801565c:	430a      	orrs	r2, r1
 801565e:	b292      	uxth	r2, r2
 8015660:	801a      	strh	r2, [r3, #0]
 8015662:	e102      	b.n	801586a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8015664:	1dbb      	adds	r3, r7, #6
 8015666:	881a      	ldrh	r2, [r3, #0]
 8015668:	2380      	movs	r3, #128	@ 0x80
 801566a:	01db      	lsls	r3, r3, #7
 801566c:	4013      	ands	r3, r2
 801566e:	d11a      	bne.n	80156a6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	001a      	movs	r2, r3
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	009b      	lsls	r3, r3, #2
 801567c:	18d3      	adds	r3, r2, r3
 801567e:	881b      	ldrh	r3, [r3, #0]
 8015680:	b29a      	uxth	r2, r3
 8015682:	204e      	movs	r0, #78	@ 0x4e
 8015684:	183b      	adds	r3, r7, r0
 8015686:	4956      	ldr	r1, [pc, #344]	@ (80157e0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8015688:	400a      	ands	r2, r1
 801568a:	801a      	strh	r2, [r3, #0]
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	001a      	movs	r2, r3
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	781b      	ldrb	r3, [r3, #0]
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	18d3      	adds	r3, r2, r3
 801569a:	183a      	adds	r2, r7, r0
 801569c:	8812      	ldrh	r2, [r2, #0]
 801569e:	4951      	ldr	r1, [pc, #324]	@ (80157e4 <HAL_PCD_EP_DB_Transmit+0x734>)
 80156a0:	430a      	orrs	r2, r1
 80156a2:	b292      	uxth	r2, r2
 80156a4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	2224      	movs	r2, #36	@ 0x24
 80156aa:	5c9b      	ldrb	r3, [r3, r2]
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d000      	beq.n	80156b2 <HAL_PCD_EP_DB_Transmit+0x602>
 80156b0:	e0db      	b.n	801586a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	695a      	ldr	r2, [r3, #20]
 80156b6:	2186      	movs	r1, #134	@ 0x86
 80156b8:	187b      	adds	r3, r7, r1
 80156ba:	881b      	ldrh	r3, [r3, #0]
 80156bc:	18d2      	adds	r2, r2, r3
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	69da      	ldr	r2, [r3, #28]
 80156c6:	187b      	adds	r3, r7, r1
 80156c8:	881b      	ldrh	r3, [r3, #0]
 80156ca:	18d2      	adds	r2, r2, r3
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	6a1a      	ldr	r2, [r3, #32]
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	691b      	ldr	r3, [r3, #16]
 80156d8:	429a      	cmp	r2, r3
 80156da:	d30c      	bcc.n	80156f6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	691b      	ldr	r3, [r3, #16]
 80156e0:	218c      	movs	r1, #140	@ 0x8c
 80156e2:	187a      	adds	r2, r7, r1
 80156e4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	6a1a      	ldr	r2, [r3, #32]
 80156ea:	187b      	adds	r3, r7, r1
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	1ad2      	subs	r2, r2, r3
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	621a      	str	r2, [r3, #32]
 80156f4:	e01a      	b.n	801572c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	6a1b      	ldr	r3, [r3, #32]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d10a      	bne.n	8015714 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80156fe:	2386      	movs	r3, #134	@ 0x86
 8015700:	18fb      	adds	r3, r7, r3
 8015702:	881b      	ldrh	r3, [r3, #0]
 8015704:	228c      	movs	r2, #140	@ 0x8c
 8015706:	18ba      	adds	r2, r7, r2
 8015708:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	2224      	movs	r2, #36	@ 0x24
 801570e:	2100      	movs	r1, #0
 8015710:	5499      	strb	r1, [r3, r2]
 8015712:	e00b      	b.n	801572c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	6a1b      	ldr	r3, [r3, #32]
 8015718:	228c      	movs	r2, #140	@ 0x8c
 801571a:	18ba      	adds	r2, r7, r2
 801571c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	2200      	movs	r2, #0
 8015722:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	2224      	movs	r2, #36	@ 0x24
 8015728:	2100      	movs	r1, #0
 801572a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	657b      	str	r3, [r7, #84]	@ 0x54
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	785b      	ldrb	r3, [r3, #1]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d000      	beq.n	801573c <HAL_PCD_EP_DB_Transmit+0x68c>
 801573a:	e06e      	b.n	801581a <HAL_PCD_EP_DB_Transmit+0x76a>
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	2250      	movs	r2, #80	@ 0x50
 8015748:	5a9b      	ldrh	r3, [r3, r2]
 801574a:	b29b      	uxth	r3, r3
 801574c:	001a      	movs	r2, r3
 801574e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015750:	189b      	adds	r3, r3, r2
 8015752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	781b      	ldrb	r3, [r3, #0]
 8015758:	00da      	lsls	r2, r3, #3
 801575a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801575c:	18d3      	adds	r3, r2, r3
 801575e:	4a1e      	ldr	r2, [pc, #120]	@ (80157d8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8015760:	4694      	mov	ip, r2
 8015762:	4463      	add	r3, ip
 8015764:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015768:	881b      	ldrh	r3, [r3, #0]
 801576a:	b29b      	uxth	r3, r3
 801576c:	059b      	lsls	r3, r3, #22
 801576e:	0d9b      	lsrs	r3, r3, #22
 8015770:	b29a      	uxth	r2, r3
 8015772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015774:	801a      	strh	r2, [r3, #0]
 8015776:	228c      	movs	r2, #140	@ 0x8c
 8015778:	18bb      	adds	r3, r7, r2
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	2b3e      	cmp	r3, #62	@ 0x3e
 801577e:	d91a      	bls.n	80157b6 <HAL_PCD_EP_DB_Transmit+0x706>
 8015780:	18bb      	adds	r3, r7, r2
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	095b      	lsrs	r3, r3, #5
 8015786:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015788:	18bb      	adds	r3, r7, r2
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	221f      	movs	r2, #31
 801578e:	4013      	ands	r3, r2
 8015790:	d102      	bne.n	8015798 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8015792:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015794:	3b01      	subs	r3, #1
 8015796:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015798:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801579a:	881b      	ldrh	r3, [r3, #0]
 801579c:	b29a      	uxth	r2, r3
 801579e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	029b      	lsls	r3, r3, #10
 80157a4:	b29b      	uxth	r3, r3
 80157a6:	4313      	orrs	r3, r2
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	4a0c      	ldr	r2, [pc, #48]	@ (80157dc <HAL_PCD_EP_DB_Transmit+0x72c>)
 80157ac:	4313      	orrs	r3, r2
 80157ae:	b29a      	uxth	r2, r3
 80157b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80157b2:	801a      	strh	r2, [r3, #0]
 80157b4:	e04d      	b.n	8015852 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80157b6:	238c      	movs	r3, #140	@ 0x8c
 80157b8:	18fb      	adds	r3, r7, r3
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d113      	bne.n	80157e8 <HAL_PCD_EP_DB_Transmit+0x738>
 80157c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80157c2:	881b      	ldrh	r3, [r3, #0]
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	4a05      	ldr	r2, [pc, #20]	@ (80157dc <HAL_PCD_EP_DB_Transmit+0x72c>)
 80157c8:	4313      	orrs	r3, r2
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80157ce:	801a      	strh	r2, [r3, #0]
 80157d0:	e03f      	b.n	8015852 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80157d2:	46c0      	nop			@ (mov r8, r8)
 80157d4:	00000402 	.word	0x00000402
 80157d8:	00000406 	.word	0x00000406
 80157dc:	ffff8000 	.word	0xffff8000
 80157e0:	ffff8f8f 	.word	0xffff8f8f
 80157e4:	ffffc080 	.word	0xffffc080
 80157e8:	228c      	movs	r2, #140	@ 0x8c
 80157ea:	18bb      	adds	r3, r7, r2
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	085b      	lsrs	r3, r3, #1
 80157f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80157f2:	18bb      	adds	r3, r7, r2
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	2201      	movs	r2, #1
 80157f8:	4013      	ands	r3, r2
 80157fa:	d002      	beq.n	8015802 <HAL_PCD_EP_DB_Transmit+0x752>
 80157fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157fe:	3301      	adds	r3, #1
 8015800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015802:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015804:	881b      	ldrh	r3, [r3, #0]
 8015806:	b29a      	uxth	r2, r3
 8015808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801580a:	b29b      	uxth	r3, r3
 801580c:	029b      	lsls	r3, r3, #10
 801580e:	b29b      	uxth	r3, r3
 8015810:	4313      	orrs	r3, r2
 8015812:	b29a      	uxth	r2, r3
 8015814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015816:	801a      	strh	r2, [r3, #0]
 8015818:	e01b      	b.n	8015852 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	785b      	ldrb	r3, [r3, #1]
 801581e:	2b01      	cmp	r3, #1
 8015820:	d117      	bne.n	8015852 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2250      	movs	r2, #80	@ 0x50
 8015828:	5a9b      	ldrh	r3, [r3, r2]
 801582a:	b29b      	uxth	r3, r3
 801582c:	001a      	movs	r2, r3
 801582e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015830:	189b      	adds	r3, r3, r2
 8015832:	657b      	str	r3, [r7, #84]	@ 0x54
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	00da      	lsls	r2, r3, #3
 801583a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801583c:	18d3      	adds	r3, r2, r3
 801583e:	4a21      	ldr	r2, [pc, #132]	@ (80158c4 <HAL_PCD_EP_DB_Transmit+0x814>)
 8015840:	4694      	mov	ip, r2
 8015842:	4463      	add	r3, ip
 8015844:	653b      	str	r3, [r7, #80]	@ 0x50
 8015846:	238c      	movs	r3, #140	@ 0x8c
 8015848:	18fb      	adds	r3, r7, r3
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	b29a      	uxth	r2, r3
 801584e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015850:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	6818      	ldr	r0, [r3, #0]
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	6959      	ldr	r1, [r3, #20]
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	895a      	ldrh	r2, [r3, #10]
 801585e:	238c      	movs	r3, #140	@ 0x8c
 8015860:	18fb      	adds	r3, r7, r3
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	b29b      	uxth	r3, r3
 8015866:	f006 f999 	bl	801bb9c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	001a      	movs	r2, r3
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	18d3      	adds	r3, r2, r3
 8015878:	881b      	ldrh	r3, [r3, #0]
 801587a:	b29a      	uxth	r2, r3
 801587c:	2014      	movs	r0, #20
 801587e:	183b      	adds	r3, r7, r0
 8015880:	4911      	ldr	r1, [pc, #68]	@ (80158c8 <HAL_PCD_EP_DB_Transmit+0x818>)
 8015882:	400a      	ands	r2, r1
 8015884:	801a      	strh	r2, [r3, #0]
 8015886:	183b      	adds	r3, r7, r0
 8015888:	183a      	adds	r2, r7, r0
 801588a:	8812      	ldrh	r2, [r2, #0]
 801588c:	2110      	movs	r1, #16
 801588e:	404a      	eors	r2, r1
 8015890:	801a      	strh	r2, [r3, #0]
 8015892:	183b      	adds	r3, r7, r0
 8015894:	183a      	adds	r2, r7, r0
 8015896:	8812      	ldrh	r2, [r2, #0]
 8015898:	2120      	movs	r1, #32
 801589a:	404a      	eors	r2, r1
 801589c:	801a      	strh	r2, [r3, #0]
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	001a      	movs	r2, r3
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	18d3      	adds	r3, r2, r3
 80158ac:	183a      	adds	r2, r7, r0
 80158ae:	8812      	ldrh	r2, [r2, #0]
 80158b0:	4906      	ldr	r1, [pc, #24]	@ (80158cc <HAL_PCD_EP_DB_Transmit+0x81c>)
 80158b2:	430a      	orrs	r2, r1
 80158b4:	b292      	uxth	r2, r2
 80158b6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80158b8:	2300      	movs	r3, #0
}
 80158ba:	0018      	movs	r0, r3
 80158bc:	46bd      	mov	sp, r7
 80158be:	b024      	add	sp, #144	@ 0x90
 80158c0:	bd80      	pop	{r7, pc}
 80158c2:	46c0      	nop			@ (mov r8, r8)
 80158c4:	00000406 	.word	0x00000406
 80158c8:	ffff8fbf 	.word	0xffff8fbf
 80158cc:	ffff8080 	.word	0xffff8080

080158d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80158d0:	b590      	push	{r4, r7, lr}
 80158d2:	b087      	sub	sp, #28
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	0008      	movs	r0, r1
 80158da:	0011      	movs	r1, r2
 80158dc:	607b      	str	r3, [r7, #4]
 80158de:	240a      	movs	r4, #10
 80158e0:	193b      	adds	r3, r7, r4
 80158e2:	1c02      	adds	r2, r0, #0
 80158e4:	801a      	strh	r2, [r3, #0]
 80158e6:	2308      	movs	r3, #8
 80158e8:	18fb      	adds	r3, r7, r3
 80158ea:	1c0a      	adds	r2, r1, #0
 80158ec:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80158ee:	0021      	movs	r1, r4
 80158f0:	187b      	adds	r3, r7, r1
 80158f2:	881b      	ldrh	r3, [r3, #0]
 80158f4:	2280      	movs	r2, #128	@ 0x80
 80158f6:	4013      	ands	r3, r2
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d00c      	beq.n	8015918 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80158fe:	187b      	adds	r3, r7, r1
 8015900:	881b      	ldrh	r3, [r3, #0]
 8015902:	2207      	movs	r2, #7
 8015904:	4013      	ands	r3, r2
 8015906:	1c5a      	adds	r2, r3, #1
 8015908:	0013      	movs	r3, r2
 801590a:	009b      	lsls	r3, r3, #2
 801590c:	189b      	adds	r3, r3, r2
 801590e:	00db      	lsls	r3, r3, #3
 8015910:	68fa      	ldr	r2, [r7, #12]
 8015912:	18d3      	adds	r3, r2, r3
 8015914:	617b      	str	r3, [r7, #20]
 8015916:	e00b      	b.n	8015930 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8015918:	230a      	movs	r3, #10
 801591a:	18fb      	adds	r3, r7, r3
 801591c:	881a      	ldrh	r2, [r3, #0]
 801591e:	0013      	movs	r3, r2
 8015920:	009b      	lsls	r3, r3, #2
 8015922:	189b      	adds	r3, r3, r2
 8015924:	00db      	lsls	r3, r3, #3
 8015926:	3369      	adds	r3, #105	@ 0x69
 8015928:	33ff      	adds	r3, #255	@ 0xff
 801592a:	68fa      	ldr	r2, [r7, #12]
 801592c:	18d3      	adds	r3, r2, r3
 801592e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8015930:	2308      	movs	r3, #8
 8015932:	18fb      	adds	r3, r7, r3
 8015934:	881b      	ldrh	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d107      	bne.n	801594a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	2200      	movs	r2, #0
 801593e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	b29a      	uxth	r2, r3
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	80da      	strh	r2, [r3, #6]
 8015948:	e00b      	b.n	8015962 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	2201      	movs	r2, #1
 801594e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	b29a      	uxth	r2, r3
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	0c1b      	lsrs	r3, r3, #16
 801595c:	b29a      	uxth	r2, r3
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8015962:	2300      	movs	r3, #0
}
 8015964:	0018      	movs	r0, r3
 8015966:	46bd      	mov	sp, r7
 8015968:	b007      	add	sp, #28
 801596a:	bd90      	pop	{r4, r7, pc}

0801596c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801597a:	687a      	ldr	r2, [r7, #4]
 801597c:	23ba      	movs	r3, #186	@ 0xba
 801597e:	009b      	lsls	r3, r3, #2
 8015980:	2101      	movs	r1, #1
 8015982:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8015984:	687a      	ldr	r2, [r7, #4]
 8015986:	23b8      	movs	r3, #184	@ 0xb8
 8015988:	009b      	lsls	r3, r3, #2
 801598a:	2100      	movs	r1, #0
 801598c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2254      	movs	r2, #84	@ 0x54
 8015992:	5a9b      	ldrh	r3, [r3, r2]
 8015994:	b29b      	uxth	r3, r3
 8015996:	2201      	movs	r2, #1
 8015998:	4313      	orrs	r3, r2
 801599a:	b299      	uxth	r1, r3
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2254      	movs	r2, #84	@ 0x54
 80159a0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2254      	movs	r2, #84	@ 0x54
 80159a6:	5a9b      	ldrh	r3, [r3, r2]
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	2202      	movs	r2, #2
 80159ac:	4313      	orrs	r3, r2
 80159ae:	b299      	uxth	r1, r3
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2254      	movs	r2, #84	@ 0x54
 80159b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80159b6:	2300      	movs	r3, #0
}
 80159b8:	0018      	movs	r0, r3
 80159ba:	46bd      	mov	sp, r7
 80159bc:	b004      	add	sp, #16
 80159be:	bd80      	pop	{r7, pc}

080159c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
 80159c8:	000a      	movs	r2, r1
 80159ca:	1cfb      	adds	r3, r7, #3
 80159cc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80159ce:	46c0      	nop			@ (mov r8, r8)
 80159d0:	46bd      	mov	sp, r7
 80159d2:	b002      	add	sp, #8
 80159d4:	bd80      	pop	{r7, pc}
	...

080159d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80159dc:	4b04      	ldr	r3, [pc, #16]	@ (80159f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80159de:	681a      	ldr	r2, [r3, #0]
 80159e0:	4b03      	ldr	r3, [pc, #12]	@ (80159f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80159e2:	2180      	movs	r1, #128	@ 0x80
 80159e4:	0049      	lsls	r1, r1, #1
 80159e6:	430a      	orrs	r2, r1
 80159e8:	601a      	str	r2, [r3, #0]
}
 80159ea:	46c0      	nop			@ (mov r8, r8)
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}
 80159f0:	40007000 	.word	0x40007000

080159f4 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80159f8:	4b04      	ldr	r3, [pc, #16]	@ (8015a0c <HAL_PWR_DisableBkUpAccess+0x18>)
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	4b03      	ldr	r3, [pc, #12]	@ (8015a0c <HAL_PWR_DisableBkUpAccess+0x18>)
 80159fe:	4904      	ldr	r1, [pc, #16]	@ (8015a10 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8015a00:	400a      	ands	r2, r1
 8015a02:	601a      	str	r2, [r3, #0]
}
 8015a04:	46c0      	nop			@ (mov r8, r8)
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}
 8015a0a:	46c0      	nop			@ (mov r8, r8)
 8015a0c:	40007000 	.word	0x40007000
 8015a10:	fffffeff 	.word	0xfffffeff

08015a14 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b086      	sub	sp, #24
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
 8015a1c:	000a      	movs	r2, r1
 8015a1e:	1cfb      	adds	r3, r7, #3
 8015a20:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8015a22:	2300      	movs	r3, #0
 8015a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8015a26:	4b25      	ldr	r3, [pc, #148]	@ (8015abc <HAL_PWR_EnterSTOPMode+0xa8>)
 8015a28:	681a      	ldr	r2, [r3, #0]
 8015a2a:	2380      	movs	r3, #128	@ 0x80
 8015a2c:	009b      	lsls	r3, r3, #2
 8015a2e:	4013      	ands	r3, r2
 8015a30:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8015a32:	4b23      	ldr	r3, [pc, #140]	@ (8015ac0 <HAL_PWR_EnterSTOPMode+0xac>)
 8015a34:	6a1b      	ldr	r3, [r3, #32]
 8015a36:	2201      	movs	r2, #1
 8015a38:	4013      	ands	r3, r2
 8015a3a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d008      	beq.n	8015a54 <HAL_PWR_EnterSTOPMode+0x40>
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d005      	beq.n	8015a54 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8015a48:	4b1c      	ldr	r3, [pc, #112]	@ (8015abc <HAL_PWR_EnterSTOPMode+0xa8>)
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8015abc <HAL_PWR_EnterSTOPMode+0xa8>)
 8015a4e:	491d      	ldr	r1, [pc, #116]	@ (8015ac4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8015a50:	400a      	ands	r2, r1
 8015a52:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8015a54:	4b19      	ldr	r3, [pc, #100]	@ (8015abc <HAL_PWR_EnterSTOPMode+0xa8>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	2203      	movs	r2, #3
 8015a5e:	4393      	bics	r3, r2
 8015a60:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8015a62:	697a      	ldr	r2, [r7, #20]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	4313      	orrs	r3, r2
 8015a68:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8015a6a:	4b14      	ldr	r3, [pc, #80]	@ (8015abc <HAL_PWR_EnterSTOPMode+0xa8>)
 8015a6c:	697a      	ldr	r2, [r7, #20]
 8015a6e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015a70:	4b15      	ldr	r3, [pc, #84]	@ (8015ac8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015a72:	691a      	ldr	r2, [r3, #16]
 8015a74:	4b14      	ldr	r3, [pc, #80]	@ (8015ac8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015a76:	2104      	movs	r1, #4
 8015a78:	430a      	orrs	r2, r1
 8015a7a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8015a7c:	1cfb      	adds	r3, r7, #3
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	2b01      	cmp	r3, #1
 8015a82:	d101      	bne.n	8015a88 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8015a84:	bf30      	wfi
 8015a86:	e002      	b.n	8015a8e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8015a88:	bf40      	sev
    __WFE();
 8015a8a:	bf20      	wfe
    __WFE();
 8015a8c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8015ac8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015a90:	691a      	ldr	r2, [r3, #16]
 8015a92:	4b0d      	ldr	r3, [pc, #52]	@ (8015ac8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015a94:	2104      	movs	r1, #4
 8015a96:	438a      	bics	r2, r1
 8015a98:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d009      	beq.n	8015ab4 <HAL_PWR_EnterSTOPMode+0xa0>
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d006      	beq.n	8015ab4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8015aa6:	4b05      	ldr	r3, [pc, #20]	@ (8015abc <HAL_PWR_EnterSTOPMode+0xa8>)
 8015aa8:	681a      	ldr	r2, [r3, #0]
 8015aaa:	4b04      	ldr	r3, [pc, #16]	@ (8015abc <HAL_PWR_EnterSTOPMode+0xa8>)
 8015aac:	2180      	movs	r1, #128	@ 0x80
 8015aae:	0089      	lsls	r1, r1, #2
 8015ab0:	430a      	orrs	r2, r1
 8015ab2:	601a      	str	r2, [r3, #0]
  }
}
 8015ab4:	46c0      	nop			@ (mov r8, r8)
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	b006      	add	sp, #24
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	40007000 	.word	0x40007000
 8015ac0:	40010000 	.word	0x40010000
 8015ac4:	fffffdff 	.word	0xfffffdff
 8015ac8:	e000ed00 	.word	0xe000ed00

08015acc <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8015ad0:	4b07      	ldr	r3, [pc, #28]	@ (8015af0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8015ad2:	681a      	ldr	r2, [r3, #0]
 8015ad4:	4b06      	ldr	r3, [pc, #24]	@ (8015af0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8015ad6:	2102      	movs	r1, #2
 8015ad8:	430a      	orrs	r2, r1
 8015ada:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015adc:	4b05      	ldr	r3, [pc, #20]	@ (8015af4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8015ade:	691a      	ldr	r2, [r3, #16]
 8015ae0:	4b04      	ldr	r3, [pc, #16]	@ (8015af4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8015ae2:	2104      	movs	r1, #4
 8015ae4:	430a      	orrs	r2, r1
 8015ae6:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8015ae8:	bf30      	wfi
}
 8015aea:	46c0      	nop			@ (mov r8, r8)
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}
 8015af0:	40007000 	.word	0x40007000
 8015af4:	e000ed00 	.word	0xe000ed00

08015af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015af8:	b5b0      	push	{r4, r5, r7, lr}
 8015afa:	b08a      	sub	sp, #40	@ 0x28
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d102      	bne.n	8015b0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8015b06:	2301      	movs	r3, #1
 8015b08:	f000 fbbf 	bl	801628a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015b0c:	4bc9      	ldr	r3, [pc, #804]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b0e:	68db      	ldr	r3, [r3, #12]
 8015b10:	220c      	movs	r2, #12
 8015b12:	4013      	ands	r3, r2
 8015b14:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015b16:	4bc7      	ldr	r3, [pc, #796]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b18:	68da      	ldr	r2, [r3, #12]
 8015b1a:	2380      	movs	r3, #128	@ 0x80
 8015b1c:	025b      	lsls	r3, r3, #9
 8015b1e:	4013      	ands	r3, r2
 8015b20:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	2201      	movs	r2, #1
 8015b28:	4013      	ands	r3, r2
 8015b2a:	d100      	bne.n	8015b2e <HAL_RCC_OscConfig+0x36>
 8015b2c:	e07e      	b.n	8015c2c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8015b2e:	69fb      	ldr	r3, [r7, #28]
 8015b30:	2b08      	cmp	r3, #8
 8015b32:	d007      	beq.n	8015b44 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8015b34:	69fb      	ldr	r3, [r7, #28]
 8015b36:	2b0c      	cmp	r3, #12
 8015b38:	d112      	bne.n	8015b60 <HAL_RCC_OscConfig+0x68>
 8015b3a:	69ba      	ldr	r2, [r7, #24]
 8015b3c:	2380      	movs	r3, #128	@ 0x80
 8015b3e:	025b      	lsls	r3, r3, #9
 8015b40:	429a      	cmp	r2, r3
 8015b42:	d10d      	bne.n	8015b60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015b44:	4bbb      	ldr	r3, [pc, #748]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b46:	681a      	ldr	r2, [r3, #0]
 8015b48:	2380      	movs	r3, #128	@ 0x80
 8015b4a:	029b      	lsls	r3, r3, #10
 8015b4c:	4013      	ands	r3, r2
 8015b4e:	d100      	bne.n	8015b52 <HAL_RCC_OscConfig+0x5a>
 8015b50:	e06b      	b.n	8015c2a <HAL_RCC_OscConfig+0x132>
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d167      	bne.n	8015c2a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	f000 fb95 	bl	801628a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	685a      	ldr	r2, [r3, #4]
 8015b64:	2380      	movs	r3, #128	@ 0x80
 8015b66:	025b      	lsls	r3, r3, #9
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	d107      	bne.n	8015b7c <HAL_RCC_OscConfig+0x84>
 8015b6c:	4bb1      	ldr	r3, [pc, #708]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	4bb0      	ldr	r3, [pc, #704]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b72:	2180      	movs	r1, #128	@ 0x80
 8015b74:	0249      	lsls	r1, r1, #9
 8015b76:	430a      	orrs	r2, r1
 8015b78:	601a      	str	r2, [r3, #0]
 8015b7a:	e027      	b.n	8015bcc <HAL_RCC_OscConfig+0xd4>
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	685a      	ldr	r2, [r3, #4]
 8015b80:	23a0      	movs	r3, #160	@ 0xa0
 8015b82:	02db      	lsls	r3, r3, #11
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d10e      	bne.n	8015ba6 <HAL_RCC_OscConfig+0xae>
 8015b88:	4baa      	ldr	r3, [pc, #680]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b8a:	681a      	ldr	r2, [r3, #0]
 8015b8c:	4ba9      	ldr	r3, [pc, #676]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b8e:	2180      	movs	r1, #128	@ 0x80
 8015b90:	02c9      	lsls	r1, r1, #11
 8015b92:	430a      	orrs	r2, r1
 8015b94:	601a      	str	r2, [r3, #0]
 8015b96:	4ba7      	ldr	r3, [pc, #668]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	4ba6      	ldr	r3, [pc, #664]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015b9c:	2180      	movs	r1, #128	@ 0x80
 8015b9e:	0249      	lsls	r1, r1, #9
 8015ba0:	430a      	orrs	r2, r1
 8015ba2:	601a      	str	r2, [r3, #0]
 8015ba4:	e012      	b.n	8015bcc <HAL_RCC_OscConfig+0xd4>
 8015ba6:	4ba3      	ldr	r3, [pc, #652]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	4ba2      	ldr	r3, [pc, #648]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015bac:	49a2      	ldr	r1, [pc, #648]	@ (8015e38 <HAL_RCC_OscConfig+0x340>)
 8015bae:	400a      	ands	r2, r1
 8015bb0:	601a      	str	r2, [r3, #0]
 8015bb2:	4ba0      	ldr	r3, [pc, #640]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015bb4:	681a      	ldr	r2, [r3, #0]
 8015bb6:	2380      	movs	r3, #128	@ 0x80
 8015bb8:	025b      	lsls	r3, r3, #9
 8015bba:	4013      	ands	r3, r2
 8015bbc:	60fb      	str	r3, [r7, #12]
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	4b9c      	ldr	r3, [pc, #624]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015bc2:	681a      	ldr	r2, [r3, #0]
 8015bc4:	4b9b      	ldr	r3, [pc, #620]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015bc6:	499d      	ldr	r1, [pc, #628]	@ (8015e3c <HAL_RCC_OscConfig+0x344>)
 8015bc8:	400a      	ands	r2, r1
 8015bca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	685b      	ldr	r3, [r3, #4]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d015      	beq.n	8015c00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015bd4:	f7f9 fe60 	bl	800f898 <HAL_GetTick>
 8015bd8:	0003      	movs	r3, r0
 8015bda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015bdc:	e009      	b.n	8015bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015bde:	f7f9 fe5b 	bl	800f898 <HAL_GetTick>
 8015be2:	0002      	movs	r2, r0
 8015be4:	697b      	ldr	r3, [r7, #20]
 8015be6:	1ad3      	subs	r3, r2, r3
 8015be8:	2b64      	cmp	r3, #100	@ 0x64
 8015bea:	d902      	bls.n	8015bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015bec:	2303      	movs	r3, #3
 8015bee:	f000 fb4c 	bl	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015bf2:	4b90      	ldr	r3, [pc, #576]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015bf4:	681a      	ldr	r2, [r3, #0]
 8015bf6:	2380      	movs	r3, #128	@ 0x80
 8015bf8:	029b      	lsls	r3, r3, #10
 8015bfa:	4013      	ands	r3, r2
 8015bfc:	d0ef      	beq.n	8015bde <HAL_RCC_OscConfig+0xe6>
 8015bfe:	e015      	b.n	8015c2c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015c00:	f7f9 fe4a 	bl	800f898 <HAL_GetTick>
 8015c04:	0003      	movs	r3, r0
 8015c06:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015c08:	e008      	b.n	8015c1c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015c0a:	f7f9 fe45 	bl	800f898 <HAL_GetTick>
 8015c0e:	0002      	movs	r2, r0
 8015c10:	697b      	ldr	r3, [r7, #20]
 8015c12:	1ad3      	subs	r3, r2, r3
 8015c14:	2b64      	cmp	r3, #100	@ 0x64
 8015c16:	d901      	bls.n	8015c1c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8015c18:	2303      	movs	r3, #3
 8015c1a:	e336      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015c1c:	4b85      	ldr	r3, [pc, #532]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015c1e:	681a      	ldr	r2, [r3, #0]
 8015c20:	2380      	movs	r3, #128	@ 0x80
 8015c22:	029b      	lsls	r3, r3, #10
 8015c24:	4013      	ands	r3, r2
 8015c26:	d1f0      	bne.n	8015c0a <HAL_RCC_OscConfig+0x112>
 8015c28:	e000      	b.n	8015c2c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015c2a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	2202      	movs	r2, #2
 8015c32:	4013      	ands	r3, r2
 8015c34:	d100      	bne.n	8015c38 <HAL_RCC_OscConfig+0x140>
 8015c36:	e099      	b.n	8015d6c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	68db      	ldr	r3, [r3, #12]
 8015c3c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8015c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c40:	2220      	movs	r2, #32
 8015c42:	4013      	ands	r3, r2
 8015c44:	d009      	beq.n	8015c5a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8015c46:	4b7b      	ldr	r3, [pc, #492]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015c48:	681a      	ldr	r2, [r3, #0]
 8015c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015c4c:	2120      	movs	r1, #32
 8015c4e:	430a      	orrs	r2, r1
 8015c50:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8015c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c54:	2220      	movs	r2, #32
 8015c56:	4393      	bics	r3, r2
 8015c58:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015c5a:	69fb      	ldr	r3, [r7, #28]
 8015c5c:	2b04      	cmp	r3, #4
 8015c5e:	d005      	beq.n	8015c6c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	2b0c      	cmp	r3, #12
 8015c64:	d13e      	bne.n	8015ce4 <HAL_RCC_OscConfig+0x1ec>
 8015c66:	69bb      	ldr	r3, [r7, #24]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d13b      	bne.n	8015ce4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015c6c:	4b71      	ldr	r3, [pc, #452]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	2204      	movs	r2, #4
 8015c72:	4013      	ands	r3, r2
 8015c74:	d004      	beq.n	8015c80 <HAL_RCC_OscConfig+0x188>
 8015c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d101      	bne.n	8015c80 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	e304      	b.n	801628a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015c80:	4b6c      	ldr	r3, [pc, #432]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	4a6e      	ldr	r2, [pc, #440]	@ (8015e40 <HAL_RCC_OscConfig+0x348>)
 8015c86:	4013      	ands	r3, r2
 8015c88:	0019      	movs	r1, r3
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	691b      	ldr	r3, [r3, #16]
 8015c8e:	021a      	lsls	r2, r3, #8
 8015c90:	4b68      	ldr	r3, [pc, #416]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015c92:	430a      	orrs	r2, r1
 8015c94:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015c96:	4b67      	ldr	r3, [pc, #412]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2209      	movs	r2, #9
 8015c9c:	4393      	bics	r3, r2
 8015c9e:	0019      	movs	r1, r3
 8015ca0:	4b64      	ldr	r3, [pc, #400]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ca4:	430a      	orrs	r2, r1
 8015ca6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015ca8:	f000 fc42 	bl	8016530 <HAL_RCC_GetSysClockFreq>
 8015cac:	0001      	movs	r1, r0
 8015cae:	4b61      	ldr	r3, [pc, #388]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015cb0:	68db      	ldr	r3, [r3, #12]
 8015cb2:	091b      	lsrs	r3, r3, #4
 8015cb4:	220f      	movs	r2, #15
 8015cb6:	4013      	ands	r3, r2
 8015cb8:	4a62      	ldr	r2, [pc, #392]	@ (8015e44 <HAL_RCC_OscConfig+0x34c>)
 8015cba:	5cd3      	ldrb	r3, [r2, r3]
 8015cbc:	000a      	movs	r2, r1
 8015cbe:	40da      	lsrs	r2, r3
 8015cc0:	4b61      	ldr	r3, [pc, #388]	@ (8015e48 <HAL_RCC_OscConfig+0x350>)
 8015cc2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8015cc4:	4b61      	ldr	r3, [pc, #388]	@ (8015e4c <HAL_RCC_OscConfig+0x354>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2513      	movs	r5, #19
 8015cca:	197c      	adds	r4, r7, r5
 8015ccc:	0018      	movs	r0, r3
 8015cce:	f7f9 fd9d 	bl	800f80c <HAL_InitTick>
 8015cd2:	0003      	movs	r3, r0
 8015cd4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8015cd6:	197b      	adds	r3, r7, r5
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d046      	beq.n	8015d6c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8015cde:	197b      	adds	r3, r7, r5
 8015ce0:	781b      	ldrb	r3, [r3, #0]
 8015ce2:	e2d2      	b.n	801628a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8015ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d027      	beq.n	8015d3a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015cea:	4b52      	ldr	r3, [pc, #328]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	2209      	movs	r2, #9
 8015cf0:	4393      	bics	r3, r2
 8015cf2:	0019      	movs	r1, r3
 8015cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015cf8:	430a      	orrs	r2, r1
 8015cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cfc:	f7f9 fdcc 	bl	800f898 <HAL_GetTick>
 8015d00:	0003      	movs	r3, r0
 8015d02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015d04:	e008      	b.n	8015d18 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015d06:	f7f9 fdc7 	bl	800f898 <HAL_GetTick>
 8015d0a:	0002      	movs	r2, r0
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	1ad3      	subs	r3, r2, r3
 8015d10:	2b02      	cmp	r3, #2
 8015d12:	d901      	bls.n	8015d18 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8015d14:	2303      	movs	r3, #3
 8015d16:	e2b8      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015d18:	4b46      	ldr	r3, [pc, #280]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2204      	movs	r2, #4
 8015d1e:	4013      	ands	r3, r2
 8015d20:	d0f1      	beq.n	8015d06 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015d22:	4b44      	ldr	r3, [pc, #272]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	4a46      	ldr	r2, [pc, #280]	@ (8015e40 <HAL_RCC_OscConfig+0x348>)
 8015d28:	4013      	ands	r3, r2
 8015d2a:	0019      	movs	r1, r3
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	691b      	ldr	r3, [r3, #16]
 8015d30:	021a      	lsls	r2, r3, #8
 8015d32:	4b40      	ldr	r3, [pc, #256]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015d34:	430a      	orrs	r2, r1
 8015d36:	605a      	str	r2, [r3, #4]
 8015d38:	e018      	b.n	8015d6c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015d3c:	681a      	ldr	r2, [r3, #0]
 8015d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015d40:	2101      	movs	r1, #1
 8015d42:	438a      	bics	r2, r1
 8015d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015d46:	f7f9 fda7 	bl	800f898 <HAL_GetTick>
 8015d4a:	0003      	movs	r3, r0
 8015d4c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015d4e:	e008      	b.n	8015d62 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015d50:	f7f9 fda2 	bl	800f898 <HAL_GetTick>
 8015d54:	0002      	movs	r2, r0
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	1ad3      	subs	r3, r2, r3
 8015d5a:	2b02      	cmp	r3, #2
 8015d5c:	d901      	bls.n	8015d62 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8015d5e:	2303      	movs	r3, #3
 8015d60:	e293      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015d62:	4b34      	ldr	r3, [pc, #208]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2204      	movs	r2, #4
 8015d68:	4013      	ands	r3, r2
 8015d6a:	d1f1      	bne.n	8015d50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	2210      	movs	r2, #16
 8015d72:	4013      	ands	r3, r2
 8015d74:	d100      	bne.n	8015d78 <HAL_RCC_OscConfig+0x280>
 8015d76:	e0a2      	b.n	8015ebe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015d78:	69fb      	ldr	r3, [r7, #28]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d140      	bne.n	8015e00 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015d80:	681a      	ldr	r2, [r3, #0]
 8015d82:	2380      	movs	r3, #128	@ 0x80
 8015d84:	009b      	lsls	r3, r3, #2
 8015d86:	4013      	ands	r3, r2
 8015d88:	d005      	beq.n	8015d96 <HAL_RCC_OscConfig+0x29e>
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	69db      	ldr	r3, [r3, #28]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d101      	bne.n	8015d96 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8015d92:	2301      	movs	r3, #1
 8015d94:	e279      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015d96:	4b27      	ldr	r3, [pc, #156]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8015e50 <HAL_RCC_OscConfig+0x358>)
 8015d9c:	4013      	ands	r3, r2
 8015d9e:	0019      	movs	r1, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015da4:	4b23      	ldr	r3, [pc, #140]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015da6:	430a      	orrs	r2, r1
 8015da8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015daa:	4b22      	ldr	r3, [pc, #136]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015dac:	685b      	ldr	r3, [r3, #4]
 8015dae:	021b      	lsls	r3, r3, #8
 8015db0:	0a19      	lsrs	r1, r3, #8
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	6a1b      	ldr	r3, [r3, #32]
 8015db6:	061a      	lsls	r2, r3, #24
 8015db8:	4b1e      	ldr	r3, [pc, #120]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015dba:	430a      	orrs	r2, r1
 8015dbc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015dc2:	0b5b      	lsrs	r3, r3, #13
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	2280      	movs	r2, #128	@ 0x80
 8015dc8:	0212      	lsls	r2, r2, #8
 8015dca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8015dcc:	4b19      	ldr	r3, [pc, #100]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	091b      	lsrs	r3, r3, #4
 8015dd2:	210f      	movs	r1, #15
 8015dd4:	400b      	ands	r3, r1
 8015dd6:	491b      	ldr	r1, [pc, #108]	@ (8015e44 <HAL_RCC_OscConfig+0x34c>)
 8015dd8:	5ccb      	ldrb	r3, [r1, r3]
 8015dda:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8015e48 <HAL_RCC_OscConfig+0x350>)
 8015dde:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8015de0:	4b1a      	ldr	r3, [pc, #104]	@ (8015e4c <HAL_RCC_OscConfig+0x354>)
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	2513      	movs	r5, #19
 8015de6:	197c      	adds	r4, r7, r5
 8015de8:	0018      	movs	r0, r3
 8015dea:	f7f9 fd0f 	bl	800f80c <HAL_InitTick>
 8015dee:	0003      	movs	r3, r0
 8015df0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8015df2:	197b      	adds	r3, r7, r5
 8015df4:	781b      	ldrb	r3, [r3, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d061      	beq.n	8015ebe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8015dfa:	197b      	adds	r3, r7, r5
 8015dfc:	781b      	ldrb	r3, [r3, #0]
 8015dfe:	e244      	b.n	801628a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	69db      	ldr	r3, [r3, #28]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d040      	beq.n	8015e8a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015e08:	4b0a      	ldr	r3, [pc, #40]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	4b09      	ldr	r3, [pc, #36]	@ (8015e34 <HAL_RCC_OscConfig+0x33c>)
 8015e0e:	2180      	movs	r1, #128	@ 0x80
 8015e10:	0049      	lsls	r1, r1, #1
 8015e12:	430a      	orrs	r2, r1
 8015e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015e16:	f7f9 fd3f 	bl	800f898 <HAL_GetTick>
 8015e1a:	0003      	movs	r3, r0
 8015e1c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015e1e:	e019      	b.n	8015e54 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015e20:	f7f9 fd3a 	bl	800f898 <HAL_GetTick>
 8015e24:	0002      	movs	r2, r0
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	1ad3      	subs	r3, r2, r3
 8015e2a:	2b02      	cmp	r3, #2
 8015e2c:	d912      	bls.n	8015e54 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8015e2e:	2303      	movs	r3, #3
 8015e30:	e22b      	b.n	801628a <HAL_RCC_OscConfig+0x792>
 8015e32:	46c0      	nop			@ (mov r8, r8)
 8015e34:	40021000 	.word	0x40021000
 8015e38:	fffeffff 	.word	0xfffeffff
 8015e3c:	fffbffff 	.word	0xfffbffff
 8015e40:	ffffe0ff 	.word	0xffffe0ff
 8015e44:	080267ac 	.word	0x080267ac
 8015e48:	200000cc 	.word	0x200000cc
 8015e4c:	200000dc 	.word	0x200000dc
 8015e50:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015e54:	4bca      	ldr	r3, [pc, #808]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015e56:	681a      	ldr	r2, [r3, #0]
 8015e58:	2380      	movs	r3, #128	@ 0x80
 8015e5a:	009b      	lsls	r3, r3, #2
 8015e5c:	4013      	ands	r3, r2
 8015e5e:	d0df      	beq.n	8015e20 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015e60:	4bc7      	ldr	r3, [pc, #796]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015e62:	685b      	ldr	r3, [r3, #4]
 8015e64:	4ac7      	ldr	r2, [pc, #796]	@ (8016184 <HAL_RCC_OscConfig+0x68c>)
 8015e66:	4013      	ands	r3, r2
 8015e68:	0019      	movs	r1, r3
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e6e:	4bc4      	ldr	r3, [pc, #784]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015e70:	430a      	orrs	r2, r1
 8015e72:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015e74:	4bc2      	ldr	r3, [pc, #776]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015e76:	685b      	ldr	r3, [r3, #4]
 8015e78:	021b      	lsls	r3, r3, #8
 8015e7a:	0a19      	lsrs	r1, r3, #8
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	6a1b      	ldr	r3, [r3, #32]
 8015e80:	061a      	lsls	r2, r3, #24
 8015e82:	4bbf      	ldr	r3, [pc, #764]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015e84:	430a      	orrs	r2, r1
 8015e86:	605a      	str	r2, [r3, #4]
 8015e88:	e019      	b.n	8015ebe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015e8a:	4bbd      	ldr	r3, [pc, #756]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015e8c:	681a      	ldr	r2, [r3, #0]
 8015e8e:	4bbc      	ldr	r3, [pc, #752]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015e90:	49bd      	ldr	r1, [pc, #756]	@ (8016188 <HAL_RCC_OscConfig+0x690>)
 8015e92:	400a      	ands	r2, r1
 8015e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015e96:	f7f9 fcff 	bl	800f898 <HAL_GetTick>
 8015e9a:	0003      	movs	r3, r0
 8015e9c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8015e9e:	e008      	b.n	8015eb2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015ea0:	f7f9 fcfa 	bl	800f898 <HAL_GetTick>
 8015ea4:	0002      	movs	r2, r0
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	1ad3      	subs	r3, r2, r3
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d901      	bls.n	8015eb2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8015eae:	2303      	movs	r3, #3
 8015eb0:	e1eb      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8015eb2:	4bb3      	ldr	r3, [pc, #716]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015eb4:	681a      	ldr	r2, [r3, #0]
 8015eb6:	2380      	movs	r3, #128	@ 0x80
 8015eb8:	009b      	lsls	r3, r3, #2
 8015eba:	4013      	ands	r3, r2
 8015ebc:	d1f0      	bne.n	8015ea0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	2208      	movs	r2, #8
 8015ec4:	4013      	ands	r3, r2
 8015ec6:	d036      	beq.n	8015f36 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	695b      	ldr	r3, [r3, #20]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d019      	beq.n	8015f04 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015ed0:	4bab      	ldr	r3, [pc, #684]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015ed2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ed4:	4baa      	ldr	r3, [pc, #680]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015ed6:	2101      	movs	r1, #1
 8015ed8:	430a      	orrs	r2, r1
 8015eda:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015edc:	f7f9 fcdc 	bl	800f898 <HAL_GetTick>
 8015ee0:	0003      	movs	r3, r0
 8015ee2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015ee4:	e008      	b.n	8015ef8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015ee6:	f7f9 fcd7 	bl	800f898 <HAL_GetTick>
 8015eea:	0002      	movs	r2, r0
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	1ad3      	subs	r3, r2, r3
 8015ef0:	2b02      	cmp	r3, #2
 8015ef2:	d901      	bls.n	8015ef8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8015ef4:	2303      	movs	r3, #3
 8015ef6:	e1c8      	b.n	801628a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015ef8:	4ba1      	ldr	r3, [pc, #644]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015efc:	2202      	movs	r2, #2
 8015efe:	4013      	ands	r3, r2
 8015f00:	d0f1      	beq.n	8015ee6 <HAL_RCC_OscConfig+0x3ee>
 8015f02:	e018      	b.n	8015f36 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015f04:	4b9e      	ldr	r3, [pc, #632]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015f06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015f08:	4b9d      	ldr	r3, [pc, #628]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	438a      	bics	r2, r1
 8015f0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015f10:	f7f9 fcc2 	bl	800f898 <HAL_GetTick>
 8015f14:	0003      	movs	r3, r0
 8015f16:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015f18:	e008      	b.n	8015f2c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015f1a:	f7f9 fcbd 	bl	800f898 <HAL_GetTick>
 8015f1e:	0002      	movs	r2, r0
 8015f20:	697b      	ldr	r3, [r7, #20]
 8015f22:	1ad3      	subs	r3, r2, r3
 8015f24:	2b02      	cmp	r3, #2
 8015f26:	d901      	bls.n	8015f2c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015f28:	2303      	movs	r3, #3
 8015f2a:	e1ae      	b.n	801628a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015f2c:	4b94      	ldr	r3, [pc, #592]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015f30:	2202      	movs	r2, #2
 8015f32:	4013      	ands	r3, r2
 8015f34:	d1f1      	bne.n	8015f1a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	2204      	movs	r2, #4
 8015f3c:	4013      	ands	r3, r2
 8015f3e:	d100      	bne.n	8015f42 <HAL_RCC_OscConfig+0x44a>
 8015f40:	e0ae      	b.n	80160a0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015f42:	2023      	movs	r0, #35	@ 0x23
 8015f44:	183b      	adds	r3, r7, r0
 8015f46:	2200      	movs	r2, #0
 8015f48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f4e:	2380      	movs	r3, #128	@ 0x80
 8015f50:	055b      	lsls	r3, r3, #21
 8015f52:	4013      	ands	r3, r2
 8015f54:	d109      	bne.n	8015f6a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015f56:	4b8a      	ldr	r3, [pc, #552]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015f58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f5a:	4b89      	ldr	r3, [pc, #548]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015f5c:	2180      	movs	r1, #128	@ 0x80
 8015f5e:	0549      	lsls	r1, r1, #21
 8015f60:	430a      	orrs	r2, r1
 8015f62:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015f64:	183b      	adds	r3, r7, r0
 8015f66:	2201      	movs	r2, #1
 8015f68:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015f6a:	4b88      	ldr	r3, [pc, #544]	@ (801618c <HAL_RCC_OscConfig+0x694>)
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	2380      	movs	r3, #128	@ 0x80
 8015f70:	005b      	lsls	r3, r3, #1
 8015f72:	4013      	ands	r3, r2
 8015f74:	d11a      	bne.n	8015fac <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015f76:	4b85      	ldr	r3, [pc, #532]	@ (801618c <HAL_RCC_OscConfig+0x694>)
 8015f78:	681a      	ldr	r2, [r3, #0]
 8015f7a:	4b84      	ldr	r3, [pc, #528]	@ (801618c <HAL_RCC_OscConfig+0x694>)
 8015f7c:	2180      	movs	r1, #128	@ 0x80
 8015f7e:	0049      	lsls	r1, r1, #1
 8015f80:	430a      	orrs	r2, r1
 8015f82:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015f84:	f7f9 fc88 	bl	800f898 <HAL_GetTick>
 8015f88:	0003      	movs	r3, r0
 8015f8a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015f8c:	e008      	b.n	8015fa0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015f8e:	f7f9 fc83 	bl	800f898 <HAL_GetTick>
 8015f92:	0002      	movs	r2, r0
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	1ad3      	subs	r3, r2, r3
 8015f98:	2b64      	cmp	r3, #100	@ 0x64
 8015f9a:	d901      	bls.n	8015fa0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8015f9c:	2303      	movs	r3, #3
 8015f9e:	e174      	b.n	801628a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015fa0:	4b7a      	ldr	r3, [pc, #488]	@ (801618c <HAL_RCC_OscConfig+0x694>)
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	2380      	movs	r3, #128	@ 0x80
 8015fa6:	005b      	lsls	r3, r3, #1
 8015fa8:	4013      	ands	r3, r2
 8015faa:	d0f0      	beq.n	8015f8e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	689a      	ldr	r2, [r3, #8]
 8015fb0:	2380      	movs	r3, #128	@ 0x80
 8015fb2:	005b      	lsls	r3, r3, #1
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d107      	bne.n	8015fc8 <HAL_RCC_OscConfig+0x4d0>
 8015fb8:	4b71      	ldr	r3, [pc, #452]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015fba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015fbc:	4b70      	ldr	r3, [pc, #448]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015fbe:	2180      	movs	r1, #128	@ 0x80
 8015fc0:	0049      	lsls	r1, r1, #1
 8015fc2:	430a      	orrs	r2, r1
 8015fc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8015fc6:	e031      	b.n	801602c <HAL_RCC_OscConfig+0x534>
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	689b      	ldr	r3, [r3, #8]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d10c      	bne.n	8015fea <HAL_RCC_OscConfig+0x4f2>
 8015fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015fd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015fd6:	496c      	ldr	r1, [pc, #432]	@ (8016188 <HAL_RCC_OscConfig+0x690>)
 8015fd8:	400a      	ands	r2, r1
 8015fda:	651a      	str	r2, [r3, #80]	@ 0x50
 8015fdc:	4b68      	ldr	r3, [pc, #416]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015fde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015fe0:	4b67      	ldr	r3, [pc, #412]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015fe2:	496b      	ldr	r1, [pc, #428]	@ (8016190 <HAL_RCC_OscConfig+0x698>)
 8015fe4:	400a      	ands	r2, r1
 8015fe6:	651a      	str	r2, [r3, #80]	@ 0x50
 8015fe8:	e020      	b.n	801602c <HAL_RCC_OscConfig+0x534>
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	689a      	ldr	r2, [r3, #8]
 8015fee:	23a0      	movs	r3, #160	@ 0xa0
 8015ff0:	00db      	lsls	r3, r3, #3
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	d10e      	bne.n	8016014 <HAL_RCC_OscConfig+0x51c>
 8015ff6:	4b62      	ldr	r3, [pc, #392]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015ff8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ffa:	4b61      	ldr	r3, [pc, #388]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8015ffc:	2180      	movs	r1, #128	@ 0x80
 8015ffe:	00c9      	lsls	r1, r1, #3
 8016000:	430a      	orrs	r2, r1
 8016002:	651a      	str	r2, [r3, #80]	@ 0x50
 8016004:	4b5e      	ldr	r3, [pc, #376]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016006:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016008:	4b5d      	ldr	r3, [pc, #372]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 801600a:	2180      	movs	r1, #128	@ 0x80
 801600c:	0049      	lsls	r1, r1, #1
 801600e:	430a      	orrs	r2, r1
 8016010:	651a      	str	r2, [r3, #80]	@ 0x50
 8016012:	e00b      	b.n	801602c <HAL_RCC_OscConfig+0x534>
 8016014:	4b5a      	ldr	r3, [pc, #360]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016016:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016018:	4b59      	ldr	r3, [pc, #356]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 801601a:	495b      	ldr	r1, [pc, #364]	@ (8016188 <HAL_RCC_OscConfig+0x690>)
 801601c:	400a      	ands	r2, r1
 801601e:	651a      	str	r2, [r3, #80]	@ 0x50
 8016020:	4b57      	ldr	r3, [pc, #348]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016022:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016024:	4b56      	ldr	r3, [pc, #344]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016026:	495a      	ldr	r1, [pc, #360]	@ (8016190 <HAL_RCC_OscConfig+0x698>)
 8016028:	400a      	ands	r2, r1
 801602a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	689b      	ldr	r3, [r3, #8]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d015      	beq.n	8016060 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016034:	f7f9 fc30 	bl	800f898 <HAL_GetTick>
 8016038:	0003      	movs	r3, r0
 801603a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801603c:	e009      	b.n	8016052 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801603e:	f7f9 fc2b 	bl	800f898 <HAL_GetTick>
 8016042:	0002      	movs	r2, r0
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	1ad3      	subs	r3, r2, r3
 8016048:	4a52      	ldr	r2, [pc, #328]	@ (8016194 <HAL_RCC_OscConfig+0x69c>)
 801604a:	4293      	cmp	r3, r2
 801604c:	d901      	bls.n	8016052 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801604e:	2303      	movs	r3, #3
 8016050:	e11b      	b.n	801628a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016052:	4b4b      	ldr	r3, [pc, #300]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016054:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016056:	2380      	movs	r3, #128	@ 0x80
 8016058:	009b      	lsls	r3, r3, #2
 801605a:	4013      	ands	r3, r2
 801605c:	d0ef      	beq.n	801603e <HAL_RCC_OscConfig+0x546>
 801605e:	e014      	b.n	801608a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016060:	f7f9 fc1a 	bl	800f898 <HAL_GetTick>
 8016064:	0003      	movs	r3, r0
 8016066:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8016068:	e009      	b.n	801607e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801606a:	f7f9 fc15 	bl	800f898 <HAL_GetTick>
 801606e:	0002      	movs	r2, r0
 8016070:	697b      	ldr	r3, [r7, #20]
 8016072:	1ad3      	subs	r3, r2, r3
 8016074:	4a47      	ldr	r2, [pc, #284]	@ (8016194 <HAL_RCC_OscConfig+0x69c>)
 8016076:	4293      	cmp	r3, r2
 8016078:	d901      	bls.n	801607e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801607a:	2303      	movs	r3, #3
 801607c:	e105      	b.n	801628a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801607e:	4b40      	ldr	r3, [pc, #256]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016080:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016082:	2380      	movs	r3, #128	@ 0x80
 8016084:	009b      	lsls	r3, r3, #2
 8016086:	4013      	ands	r3, r2
 8016088:	d1ef      	bne.n	801606a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801608a:	2323      	movs	r3, #35	@ 0x23
 801608c:	18fb      	adds	r3, r7, r3
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	2b01      	cmp	r3, #1
 8016092:	d105      	bne.n	80160a0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016094:	4b3a      	ldr	r3, [pc, #232]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016098:	4b39      	ldr	r3, [pc, #228]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 801609a:	493f      	ldr	r1, [pc, #252]	@ (8016198 <HAL_RCC_OscConfig+0x6a0>)
 801609c:	400a      	ands	r2, r1
 801609e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	2220      	movs	r2, #32
 80160a6:	4013      	ands	r3, r2
 80160a8:	d049      	beq.n	801613e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	699b      	ldr	r3, [r3, #24]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d026      	beq.n	8016100 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80160b2:	4b33      	ldr	r3, [pc, #204]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 80160b4:	689a      	ldr	r2, [r3, #8]
 80160b6:	4b32      	ldr	r3, [pc, #200]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 80160b8:	2101      	movs	r1, #1
 80160ba:	430a      	orrs	r2, r1
 80160bc:	609a      	str	r2, [r3, #8]
 80160be:	4b30      	ldr	r3, [pc, #192]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 80160c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80160c2:	4b2f      	ldr	r3, [pc, #188]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 80160c4:	2101      	movs	r1, #1
 80160c6:	430a      	orrs	r2, r1
 80160c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80160ca:	4b34      	ldr	r3, [pc, #208]	@ (801619c <HAL_RCC_OscConfig+0x6a4>)
 80160cc:	6a1a      	ldr	r2, [r3, #32]
 80160ce:	4b33      	ldr	r3, [pc, #204]	@ (801619c <HAL_RCC_OscConfig+0x6a4>)
 80160d0:	2180      	movs	r1, #128	@ 0x80
 80160d2:	0189      	lsls	r1, r1, #6
 80160d4:	430a      	orrs	r2, r1
 80160d6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160d8:	f7f9 fbde 	bl	800f898 <HAL_GetTick>
 80160dc:	0003      	movs	r3, r0
 80160de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80160e0:	e008      	b.n	80160f4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80160e2:	f7f9 fbd9 	bl	800f898 <HAL_GetTick>
 80160e6:	0002      	movs	r2, r0
 80160e8:	697b      	ldr	r3, [r7, #20]
 80160ea:	1ad3      	subs	r3, r2, r3
 80160ec:	2b02      	cmp	r3, #2
 80160ee:	d901      	bls.n	80160f4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80160f0:	2303      	movs	r3, #3
 80160f2:	e0ca      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80160f4:	4b22      	ldr	r3, [pc, #136]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 80160f6:	689b      	ldr	r3, [r3, #8]
 80160f8:	2202      	movs	r2, #2
 80160fa:	4013      	ands	r3, r2
 80160fc:	d0f1      	beq.n	80160e2 <HAL_RCC_OscConfig+0x5ea>
 80160fe:	e01e      	b.n	801613e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8016100:	4b1f      	ldr	r3, [pc, #124]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016102:	689a      	ldr	r2, [r3, #8]
 8016104:	4b1e      	ldr	r3, [pc, #120]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016106:	2101      	movs	r1, #1
 8016108:	438a      	bics	r2, r1
 801610a:	609a      	str	r2, [r3, #8]
 801610c:	4b23      	ldr	r3, [pc, #140]	@ (801619c <HAL_RCC_OscConfig+0x6a4>)
 801610e:	6a1a      	ldr	r2, [r3, #32]
 8016110:	4b22      	ldr	r3, [pc, #136]	@ (801619c <HAL_RCC_OscConfig+0x6a4>)
 8016112:	4923      	ldr	r1, [pc, #140]	@ (80161a0 <HAL_RCC_OscConfig+0x6a8>)
 8016114:	400a      	ands	r2, r1
 8016116:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016118:	f7f9 fbbe 	bl	800f898 <HAL_GetTick>
 801611c:	0003      	movs	r3, r0
 801611e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8016120:	e008      	b.n	8016134 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8016122:	f7f9 fbb9 	bl	800f898 <HAL_GetTick>
 8016126:	0002      	movs	r2, r0
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	1ad3      	subs	r3, r2, r3
 801612c:	2b02      	cmp	r3, #2
 801612e:	d901      	bls.n	8016134 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8016130:	2303      	movs	r3, #3
 8016132:	e0aa      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8016134:	4b12      	ldr	r3, [pc, #72]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 8016136:	689b      	ldr	r3, [r3, #8]
 8016138:	2202      	movs	r2, #2
 801613a:	4013      	ands	r3, r2
 801613c:	d1f1      	bne.n	8016122 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016142:	2b00      	cmp	r3, #0
 8016144:	d100      	bne.n	8016148 <HAL_RCC_OscConfig+0x650>
 8016146:	e09f      	b.n	8016288 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016148:	69fb      	ldr	r3, [r7, #28]
 801614a:	2b0c      	cmp	r3, #12
 801614c:	d100      	bne.n	8016150 <HAL_RCC_OscConfig+0x658>
 801614e:	e078      	b.n	8016242 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016154:	2b02      	cmp	r3, #2
 8016156:	d159      	bne.n	801620c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016158:	4b09      	ldr	r3, [pc, #36]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 801615a:	681a      	ldr	r2, [r3, #0]
 801615c:	4b08      	ldr	r3, [pc, #32]	@ (8016180 <HAL_RCC_OscConfig+0x688>)
 801615e:	4911      	ldr	r1, [pc, #68]	@ (80161a4 <HAL_RCC_OscConfig+0x6ac>)
 8016160:	400a      	ands	r2, r1
 8016162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016164:	f7f9 fb98 	bl	800f898 <HAL_GetTick>
 8016168:	0003      	movs	r3, r0
 801616a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801616c:	e01c      	b.n	80161a8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801616e:	f7f9 fb93 	bl	800f898 <HAL_GetTick>
 8016172:	0002      	movs	r2, r0
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	1ad3      	subs	r3, r2, r3
 8016178:	2b02      	cmp	r3, #2
 801617a:	d915      	bls.n	80161a8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801617c:	2303      	movs	r3, #3
 801617e:	e084      	b.n	801628a <HAL_RCC_OscConfig+0x792>
 8016180:	40021000 	.word	0x40021000
 8016184:	ffff1fff 	.word	0xffff1fff
 8016188:	fffffeff 	.word	0xfffffeff
 801618c:	40007000 	.word	0x40007000
 8016190:	fffffbff 	.word	0xfffffbff
 8016194:	00001388 	.word	0x00001388
 8016198:	efffffff 	.word	0xefffffff
 801619c:	40010000 	.word	0x40010000
 80161a0:	ffffdfff 	.word	0xffffdfff
 80161a4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80161a8:	4b3a      	ldr	r3, [pc, #232]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 80161aa:	681a      	ldr	r2, [r3, #0]
 80161ac:	2380      	movs	r3, #128	@ 0x80
 80161ae:	049b      	lsls	r3, r3, #18
 80161b0:	4013      	ands	r3, r2
 80161b2:	d1dc      	bne.n	801616e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80161b4:	4b37      	ldr	r3, [pc, #220]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 80161b6:	68db      	ldr	r3, [r3, #12]
 80161b8:	4a37      	ldr	r2, [pc, #220]	@ (8016298 <HAL_RCC_OscConfig+0x7a0>)
 80161ba:	4013      	ands	r3, r2
 80161bc:	0019      	movs	r1, r3
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161c6:	431a      	orrs	r2, r3
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80161cc:	431a      	orrs	r2, r3
 80161ce:	4b31      	ldr	r3, [pc, #196]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 80161d0:	430a      	orrs	r2, r1
 80161d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80161d4:	4b2f      	ldr	r3, [pc, #188]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 80161d6:	681a      	ldr	r2, [r3, #0]
 80161d8:	4b2e      	ldr	r3, [pc, #184]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 80161da:	2180      	movs	r1, #128	@ 0x80
 80161dc:	0449      	lsls	r1, r1, #17
 80161de:	430a      	orrs	r2, r1
 80161e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80161e2:	f7f9 fb59 	bl	800f898 <HAL_GetTick>
 80161e6:	0003      	movs	r3, r0
 80161e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80161ea:	e008      	b.n	80161fe <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80161ec:	f7f9 fb54 	bl	800f898 <HAL_GetTick>
 80161f0:	0002      	movs	r2, r0
 80161f2:	697b      	ldr	r3, [r7, #20]
 80161f4:	1ad3      	subs	r3, r2, r3
 80161f6:	2b02      	cmp	r3, #2
 80161f8:	d901      	bls.n	80161fe <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80161fa:	2303      	movs	r3, #3
 80161fc:	e045      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80161fe:	4b25      	ldr	r3, [pc, #148]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 8016200:	681a      	ldr	r2, [r3, #0]
 8016202:	2380      	movs	r3, #128	@ 0x80
 8016204:	049b      	lsls	r3, r3, #18
 8016206:	4013      	ands	r3, r2
 8016208:	d0f0      	beq.n	80161ec <HAL_RCC_OscConfig+0x6f4>
 801620a:	e03d      	b.n	8016288 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801620c:	4b21      	ldr	r3, [pc, #132]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 801620e:	681a      	ldr	r2, [r3, #0]
 8016210:	4b20      	ldr	r3, [pc, #128]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 8016212:	4922      	ldr	r1, [pc, #136]	@ (801629c <HAL_RCC_OscConfig+0x7a4>)
 8016214:	400a      	ands	r2, r1
 8016216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016218:	f7f9 fb3e 	bl	800f898 <HAL_GetTick>
 801621c:	0003      	movs	r3, r0
 801621e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8016220:	e008      	b.n	8016234 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016222:	f7f9 fb39 	bl	800f898 <HAL_GetTick>
 8016226:	0002      	movs	r2, r0
 8016228:	697b      	ldr	r3, [r7, #20]
 801622a:	1ad3      	subs	r3, r2, r3
 801622c:	2b02      	cmp	r3, #2
 801622e:	d901      	bls.n	8016234 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8016230:	2303      	movs	r3, #3
 8016232:	e02a      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8016234:	4b17      	ldr	r3, [pc, #92]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 8016236:	681a      	ldr	r2, [r3, #0]
 8016238:	2380      	movs	r3, #128	@ 0x80
 801623a:	049b      	lsls	r3, r3, #18
 801623c:	4013      	ands	r3, r2
 801623e:	d1f0      	bne.n	8016222 <HAL_RCC_OscConfig+0x72a>
 8016240:	e022      	b.n	8016288 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016246:	2b01      	cmp	r3, #1
 8016248:	d101      	bne.n	801624e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801624a:	2301      	movs	r3, #1
 801624c:	e01d      	b.n	801628a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801624e:	4b11      	ldr	r3, [pc, #68]	@ (8016294 <HAL_RCC_OscConfig+0x79c>)
 8016250:	68db      	ldr	r3, [r3, #12]
 8016252:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016254:	69ba      	ldr	r2, [r7, #24]
 8016256:	2380      	movs	r3, #128	@ 0x80
 8016258:	025b      	lsls	r3, r3, #9
 801625a:	401a      	ands	r2, r3
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016260:	429a      	cmp	r2, r3
 8016262:	d10f      	bne.n	8016284 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8016264:	69ba      	ldr	r2, [r7, #24]
 8016266:	23f0      	movs	r3, #240	@ 0xf0
 8016268:	039b      	lsls	r3, r3, #14
 801626a:	401a      	ands	r2, r3
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016270:	429a      	cmp	r2, r3
 8016272:	d107      	bne.n	8016284 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8016274:	69ba      	ldr	r2, [r7, #24]
 8016276:	23c0      	movs	r3, #192	@ 0xc0
 8016278:	041b      	lsls	r3, r3, #16
 801627a:	401a      	ands	r2, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8016280:	429a      	cmp	r2, r3
 8016282:	d001      	beq.n	8016288 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8016284:	2301      	movs	r3, #1
 8016286:	e000      	b.n	801628a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8016288:	2300      	movs	r3, #0
}
 801628a:	0018      	movs	r0, r3
 801628c:	46bd      	mov	sp, r7
 801628e:	b00a      	add	sp, #40	@ 0x28
 8016290:	bdb0      	pop	{r4, r5, r7, pc}
 8016292:	46c0      	nop			@ (mov r8, r8)
 8016294:	40021000 	.word	0x40021000
 8016298:	ff02ffff 	.word	0xff02ffff
 801629c:	feffffff 	.word	0xfeffffff

080162a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80162a0:	b5b0      	push	{r4, r5, r7, lr}
 80162a2:	b084      	sub	sp, #16
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
 80162a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d101      	bne.n	80162b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80162b0:	2301      	movs	r3, #1
 80162b2:	e128      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80162b4:	4b96      	ldr	r3, [pc, #600]	@ (8016510 <HAL_RCC_ClockConfig+0x270>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	2201      	movs	r2, #1
 80162ba:	4013      	ands	r3, r2
 80162bc:	683a      	ldr	r2, [r7, #0]
 80162be:	429a      	cmp	r2, r3
 80162c0:	d91e      	bls.n	8016300 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80162c2:	4b93      	ldr	r3, [pc, #588]	@ (8016510 <HAL_RCC_ClockConfig+0x270>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	2201      	movs	r2, #1
 80162c8:	4393      	bics	r3, r2
 80162ca:	0019      	movs	r1, r3
 80162cc:	4b90      	ldr	r3, [pc, #576]	@ (8016510 <HAL_RCC_ClockConfig+0x270>)
 80162ce:	683a      	ldr	r2, [r7, #0]
 80162d0:	430a      	orrs	r2, r1
 80162d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80162d4:	f7f9 fae0 	bl	800f898 <HAL_GetTick>
 80162d8:	0003      	movs	r3, r0
 80162da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80162dc:	e009      	b.n	80162f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80162de:	f7f9 fadb 	bl	800f898 <HAL_GetTick>
 80162e2:	0002      	movs	r2, r0
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	1ad3      	subs	r3, r2, r3
 80162e8:	4a8a      	ldr	r2, [pc, #552]	@ (8016514 <HAL_RCC_ClockConfig+0x274>)
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d901      	bls.n	80162f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80162ee:	2303      	movs	r3, #3
 80162f0:	e109      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80162f2:	4b87      	ldr	r3, [pc, #540]	@ (8016510 <HAL_RCC_ClockConfig+0x270>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	2201      	movs	r2, #1
 80162f8:	4013      	ands	r3, r2
 80162fa:	683a      	ldr	r2, [r7, #0]
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d1ee      	bne.n	80162de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	2202      	movs	r2, #2
 8016306:	4013      	ands	r3, r2
 8016308:	d009      	beq.n	801631e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801630a:	4b83      	ldr	r3, [pc, #524]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 801630c:	68db      	ldr	r3, [r3, #12]
 801630e:	22f0      	movs	r2, #240	@ 0xf0
 8016310:	4393      	bics	r3, r2
 8016312:	0019      	movs	r1, r3
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	689a      	ldr	r2, [r3, #8]
 8016318:	4b7f      	ldr	r3, [pc, #508]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 801631a:	430a      	orrs	r2, r1
 801631c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	2201      	movs	r2, #1
 8016324:	4013      	ands	r3, r2
 8016326:	d100      	bne.n	801632a <HAL_RCC_ClockConfig+0x8a>
 8016328:	e089      	b.n	801643e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	2b02      	cmp	r3, #2
 8016330:	d107      	bne.n	8016342 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8016332:	4b79      	ldr	r3, [pc, #484]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 8016334:	681a      	ldr	r2, [r3, #0]
 8016336:	2380      	movs	r3, #128	@ 0x80
 8016338:	029b      	lsls	r3, r3, #10
 801633a:	4013      	ands	r3, r2
 801633c:	d120      	bne.n	8016380 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801633e:	2301      	movs	r3, #1
 8016340:	e0e1      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	2b03      	cmp	r3, #3
 8016348:	d107      	bne.n	801635a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801634a:	4b73      	ldr	r3, [pc, #460]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 801634c:	681a      	ldr	r2, [r3, #0]
 801634e:	2380      	movs	r3, #128	@ 0x80
 8016350:	049b      	lsls	r3, r3, #18
 8016352:	4013      	ands	r3, r2
 8016354:	d114      	bne.n	8016380 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8016356:	2301      	movs	r3, #1
 8016358:	e0d5      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	2b01      	cmp	r3, #1
 8016360:	d106      	bne.n	8016370 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016362:	4b6d      	ldr	r3, [pc, #436]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	2204      	movs	r2, #4
 8016368:	4013      	ands	r3, r2
 801636a:	d109      	bne.n	8016380 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801636c:	2301      	movs	r3, #1
 801636e:	e0ca      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8016370:	4b69      	ldr	r3, [pc, #420]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 8016372:	681a      	ldr	r2, [r3, #0]
 8016374:	2380      	movs	r3, #128	@ 0x80
 8016376:	009b      	lsls	r3, r3, #2
 8016378:	4013      	ands	r3, r2
 801637a:	d101      	bne.n	8016380 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801637c:	2301      	movs	r3, #1
 801637e:	e0c2      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016380:	4b65      	ldr	r3, [pc, #404]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	2203      	movs	r2, #3
 8016386:	4393      	bics	r3, r2
 8016388:	0019      	movs	r1, r3
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	685a      	ldr	r2, [r3, #4]
 801638e:	4b62      	ldr	r3, [pc, #392]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 8016390:	430a      	orrs	r2, r1
 8016392:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016394:	f7f9 fa80 	bl	800f898 <HAL_GetTick>
 8016398:	0003      	movs	r3, r0
 801639a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	685b      	ldr	r3, [r3, #4]
 80163a0:	2b02      	cmp	r3, #2
 80163a2:	d111      	bne.n	80163c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80163a4:	e009      	b.n	80163ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80163a6:	f7f9 fa77 	bl	800f898 <HAL_GetTick>
 80163aa:	0002      	movs	r2, r0
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	1ad3      	subs	r3, r2, r3
 80163b0:	4a58      	ldr	r2, [pc, #352]	@ (8016514 <HAL_RCC_ClockConfig+0x274>)
 80163b2:	4293      	cmp	r3, r2
 80163b4:	d901      	bls.n	80163ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80163b6:	2303      	movs	r3, #3
 80163b8:	e0a5      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80163ba:	4b57      	ldr	r3, [pc, #348]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	220c      	movs	r2, #12
 80163c0:	4013      	ands	r3, r2
 80163c2:	2b08      	cmp	r3, #8
 80163c4:	d1ef      	bne.n	80163a6 <HAL_RCC_ClockConfig+0x106>
 80163c6:	e03a      	b.n	801643e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	685b      	ldr	r3, [r3, #4]
 80163cc:	2b03      	cmp	r3, #3
 80163ce:	d111      	bne.n	80163f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80163d0:	e009      	b.n	80163e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80163d2:	f7f9 fa61 	bl	800f898 <HAL_GetTick>
 80163d6:	0002      	movs	r2, r0
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	1ad3      	subs	r3, r2, r3
 80163dc:	4a4d      	ldr	r2, [pc, #308]	@ (8016514 <HAL_RCC_ClockConfig+0x274>)
 80163de:	4293      	cmp	r3, r2
 80163e0:	d901      	bls.n	80163e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80163e2:	2303      	movs	r3, #3
 80163e4:	e08f      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80163e6:	4b4c      	ldr	r3, [pc, #304]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 80163e8:	68db      	ldr	r3, [r3, #12]
 80163ea:	220c      	movs	r2, #12
 80163ec:	4013      	ands	r3, r2
 80163ee:	2b0c      	cmp	r3, #12
 80163f0:	d1ef      	bne.n	80163d2 <HAL_RCC_ClockConfig+0x132>
 80163f2:	e024      	b.n	801643e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	685b      	ldr	r3, [r3, #4]
 80163f8:	2b01      	cmp	r3, #1
 80163fa:	d11b      	bne.n	8016434 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80163fc:	e009      	b.n	8016412 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80163fe:	f7f9 fa4b 	bl	800f898 <HAL_GetTick>
 8016402:	0002      	movs	r2, r0
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	1ad3      	subs	r3, r2, r3
 8016408:	4a42      	ldr	r2, [pc, #264]	@ (8016514 <HAL_RCC_ClockConfig+0x274>)
 801640a:	4293      	cmp	r3, r2
 801640c:	d901      	bls.n	8016412 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801640e:	2303      	movs	r3, #3
 8016410:	e079      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8016412:	4b41      	ldr	r3, [pc, #260]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 8016414:	68db      	ldr	r3, [r3, #12]
 8016416:	220c      	movs	r2, #12
 8016418:	4013      	ands	r3, r2
 801641a:	2b04      	cmp	r3, #4
 801641c:	d1ef      	bne.n	80163fe <HAL_RCC_ClockConfig+0x15e>
 801641e:	e00e      	b.n	801643e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016420:	f7f9 fa3a 	bl	800f898 <HAL_GetTick>
 8016424:	0002      	movs	r2, r0
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	1ad3      	subs	r3, r2, r3
 801642a:	4a3a      	ldr	r2, [pc, #232]	@ (8016514 <HAL_RCC_ClockConfig+0x274>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d901      	bls.n	8016434 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8016430:	2303      	movs	r3, #3
 8016432:	e068      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8016434:	4b38      	ldr	r3, [pc, #224]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 8016436:	68db      	ldr	r3, [r3, #12]
 8016438:	220c      	movs	r2, #12
 801643a:	4013      	ands	r3, r2
 801643c:	d1f0      	bne.n	8016420 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801643e:	4b34      	ldr	r3, [pc, #208]	@ (8016510 <HAL_RCC_ClockConfig+0x270>)
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	2201      	movs	r2, #1
 8016444:	4013      	ands	r3, r2
 8016446:	683a      	ldr	r2, [r7, #0]
 8016448:	429a      	cmp	r2, r3
 801644a:	d21e      	bcs.n	801648a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801644c:	4b30      	ldr	r3, [pc, #192]	@ (8016510 <HAL_RCC_ClockConfig+0x270>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	2201      	movs	r2, #1
 8016452:	4393      	bics	r3, r2
 8016454:	0019      	movs	r1, r3
 8016456:	4b2e      	ldr	r3, [pc, #184]	@ (8016510 <HAL_RCC_ClockConfig+0x270>)
 8016458:	683a      	ldr	r2, [r7, #0]
 801645a:	430a      	orrs	r2, r1
 801645c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801645e:	f7f9 fa1b 	bl	800f898 <HAL_GetTick>
 8016462:	0003      	movs	r3, r0
 8016464:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016466:	e009      	b.n	801647c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016468:	f7f9 fa16 	bl	800f898 <HAL_GetTick>
 801646c:	0002      	movs	r2, r0
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	1ad3      	subs	r3, r2, r3
 8016472:	4a28      	ldr	r2, [pc, #160]	@ (8016514 <HAL_RCC_ClockConfig+0x274>)
 8016474:	4293      	cmp	r3, r2
 8016476:	d901      	bls.n	801647c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8016478:	2303      	movs	r3, #3
 801647a:	e044      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801647c:	4b24      	ldr	r3, [pc, #144]	@ (8016510 <HAL_RCC_ClockConfig+0x270>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	2201      	movs	r2, #1
 8016482:	4013      	ands	r3, r2
 8016484:	683a      	ldr	r2, [r7, #0]
 8016486:	429a      	cmp	r2, r3
 8016488:	d1ee      	bne.n	8016468 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	2204      	movs	r2, #4
 8016490:	4013      	ands	r3, r2
 8016492:	d009      	beq.n	80164a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016494:	4b20      	ldr	r3, [pc, #128]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	4a20      	ldr	r2, [pc, #128]	@ (801651c <HAL_RCC_ClockConfig+0x27c>)
 801649a:	4013      	ands	r3, r2
 801649c:	0019      	movs	r1, r3
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	68da      	ldr	r2, [r3, #12]
 80164a2:	4b1d      	ldr	r3, [pc, #116]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 80164a4:	430a      	orrs	r2, r1
 80164a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	2208      	movs	r2, #8
 80164ae:	4013      	ands	r3, r2
 80164b0:	d00a      	beq.n	80164c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80164b2:	4b19      	ldr	r3, [pc, #100]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 80164b4:	68db      	ldr	r3, [r3, #12]
 80164b6:	4a1a      	ldr	r2, [pc, #104]	@ (8016520 <HAL_RCC_ClockConfig+0x280>)
 80164b8:	4013      	ands	r3, r2
 80164ba:	0019      	movs	r1, r3
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	691b      	ldr	r3, [r3, #16]
 80164c0:	00da      	lsls	r2, r3, #3
 80164c2:	4b15      	ldr	r3, [pc, #84]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 80164c4:	430a      	orrs	r2, r1
 80164c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80164c8:	f000 f832 	bl	8016530 <HAL_RCC_GetSysClockFreq>
 80164cc:	0001      	movs	r1, r0
 80164ce:	4b12      	ldr	r3, [pc, #72]	@ (8016518 <HAL_RCC_ClockConfig+0x278>)
 80164d0:	68db      	ldr	r3, [r3, #12]
 80164d2:	091b      	lsrs	r3, r3, #4
 80164d4:	220f      	movs	r2, #15
 80164d6:	4013      	ands	r3, r2
 80164d8:	4a12      	ldr	r2, [pc, #72]	@ (8016524 <HAL_RCC_ClockConfig+0x284>)
 80164da:	5cd3      	ldrb	r3, [r2, r3]
 80164dc:	000a      	movs	r2, r1
 80164de:	40da      	lsrs	r2, r3
 80164e0:	4b11      	ldr	r3, [pc, #68]	@ (8016528 <HAL_RCC_ClockConfig+0x288>)
 80164e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80164e4:	4b11      	ldr	r3, [pc, #68]	@ (801652c <HAL_RCC_ClockConfig+0x28c>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	250b      	movs	r5, #11
 80164ea:	197c      	adds	r4, r7, r5
 80164ec:	0018      	movs	r0, r3
 80164ee:	f7f9 f98d 	bl	800f80c <HAL_InitTick>
 80164f2:	0003      	movs	r3, r0
 80164f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80164f6:	197b      	adds	r3, r7, r5
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d002      	beq.n	8016504 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80164fe:	197b      	adds	r3, r7, r5
 8016500:	781b      	ldrb	r3, [r3, #0]
 8016502:	e000      	b.n	8016506 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8016504:	2300      	movs	r3, #0
}
 8016506:	0018      	movs	r0, r3
 8016508:	46bd      	mov	sp, r7
 801650a:	b004      	add	sp, #16
 801650c:	bdb0      	pop	{r4, r5, r7, pc}
 801650e:	46c0      	nop			@ (mov r8, r8)
 8016510:	40022000 	.word	0x40022000
 8016514:	00001388 	.word	0x00001388
 8016518:	40021000 	.word	0x40021000
 801651c:	fffff8ff 	.word	0xfffff8ff
 8016520:	ffffc7ff 	.word	0xffffc7ff
 8016524:	080267ac 	.word	0x080267ac
 8016528:	200000cc 	.word	0x200000cc
 801652c:	200000dc 	.word	0x200000dc

08016530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016530:	b5b0      	push	{r4, r5, r7, lr}
 8016532:	b08e      	sub	sp, #56	@ 0x38
 8016534:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8016536:	4b4c      	ldr	r3, [pc, #304]	@ (8016668 <HAL_RCC_GetSysClockFreq+0x138>)
 8016538:	68db      	ldr	r3, [r3, #12]
 801653a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801653c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801653e:	230c      	movs	r3, #12
 8016540:	4013      	ands	r3, r2
 8016542:	2b0c      	cmp	r3, #12
 8016544:	d014      	beq.n	8016570 <HAL_RCC_GetSysClockFreq+0x40>
 8016546:	d900      	bls.n	801654a <HAL_RCC_GetSysClockFreq+0x1a>
 8016548:	e07b      	b.n	8016642 <HAL_RCC_GetSysClockFreq+0x112>
 801654a:	2b04      	cmp	r3, #4
 801654c:	d002      	beq.n	8016554 <HAL_RCC_GetSysClockFreq+0x24>
 801654e:	2b08      	cmp	r3, #8
 8016550:	d00b      	beq.n	801656a <HAL_RCC_GetSysClockFreq+0x3a>
 8016552:	e076      	b.n	8016642 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8016554:	4b44      	ldr	r3, [pc, #272]	@ (8016668 <HAL_RCC_GetSysClockFreq+0x138>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	2210      	movs	r2, #16
 801655a:	4013      	ands	r3, r2
 801655c:	d002      	beq.n	8016564 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801655e:	4b43      	ldr	r3, [pc, #268]	@ (801666c <HAL_RCC_GetSysClockFreq+0x13c>)
 8016560:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8016562:	e07c      	b.n	801665e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8016564:	4b42      	ldr	r3, [pc, #264]	@ (8016670 <HAL_RCC_GetSysClockFreq+0x140>)
 8016566:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8016568:	e079      	b.n	801665e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801656a:	4b42      	ldr	r3, [pc, #264]	@ (8016674 <HAL_RCC_GetSysClockFreq+0x144>)
 801656c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801656e:	e076      	b.n	801665e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8016570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016572:	0c9a      	lsrs	r2, r3, #18
 8016574:	230f      	movs	r3, #15
 8016576:	401a      	ands	r2, r3
 8016578:	4b3f      	ldr	r3, [pc, #252]	@ (8016678 <HAL_RCC_GetSysClockFreq+0x148>)
 801657a:	5c9b      	ldrb	r3, [r3, r2]
 801657c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801657e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016580:	0d9a      	lsrs	r2, r3, #22
 8016582:	2303      	movs	r3, #3
 8016584:	4013      	ands	r3, r2
 8016586:	3301      	adds	r3, #1
 8016588:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801658a:	4b37      	ldr	r3, [pc, #220]	@ (8016668 <HAL_RCC_GetSysClockFreq+0x138>)
 801658c:	68da      	ldr	r2, [r3, #12]
 801658e:	2380      	movs	r3, #128	@ 0x80
 8016590:	025b      	lsls	r3, r3, #9
 8016592:	4013      	ands	r3, r2
 8016594:	d01a      	beq.n	80165cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8016596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016598:	61bb      	str	r3, [r7, #24]
 801659a:	2300      	movs	r3, #0
 801659c:	61fb      	str	r3, [r7, #28]
 801659e:	4a35      	ldr	r2, [pc, #212]	@ (8016674 <HAL_RCC_GetSysClockFreq+0x144>)
 80165a0:	2300      	movs	r3, #0
 80165a2:	69b8      	ldr	r0, [r7, #24]
 80165a4:	69f9      	ldr	r1, [r7, #28]
 80165a6:	f7ea f80b 	bl	80005c0 <__aeabi_lmul>
 80165aa:	0002      	movs	r2, r0
 80165ac:	000b      	movs	r3, r1
 80165ae:	0010      	movs	r0, r2
 80165b0:	0019      	movs	r1, r3
 80165b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165b4:	613b      	str	r3, [r7, #16]
 80165b6:	2300      	movs	r3, #0
 80165b8:	617b      	str	r3, [r7, #20]
 80165ba:	693a      	ldr	r2, [r7, #16]
 80165bc:	697b      	ldr	r3, [r7, #20]
 80165be:	f7e9 ffdf 	bl	8000580 <__aeabi_uldivmod>
 80165c2:	0002      	movs	r2, r0
 80165c4:	000b      	movs	r3, r1
 80165c6:	0013      	movs	r3, r2
 80165c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80165ca:	e037      	b.n	801663c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80165cc:	4b26      	ldr	r3, [pc, #152]	@ (8016668 <HAL_RCC_GetSysClockFreq+0x138>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	2210      	movs	r2, #16
 80165d2:	4013      	ands	r3, r2
 80165d4:	d01a      	beq.n	801660c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80165d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165d8:	60bb      	str	r3, [r7, #8]
 80165da:	2300      	movs	r3, #0
 80165dc:	60fb      	str	r3, [r7, #12]
 80165de:	4a23      	ldr	r2, [pc, #140]	@ (801666c <HAL_RCC_GetSysClockFreq+0x13c>)
 80165e0:	2300      	movs	r3, #0
 80165e2:	68b8      	ldr	r0, [r7, #8]
 80165e4:	68f9      	ldr	r1, [r7, #12]
 80165e6:	f7e9 ffeb 	bl	80005c0 <__aeabi_lmul>
 80165ea:	0002      	movs	r2, r0
 80165ec:	000b      	movs	r3, r1
 80165ee:	0010      	movs	r0, r2
 80165f0:	0019      	movs	r1, r3
 80165f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f4:	603b      	str	r3, [r7, #0]
 80165f6:	2300      	movs	r3, #0
 80165f8:	607b      	str	r3, [r7, #4]
 80165fa:	683a      	ldr	r2, [r7, #0]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	f7e9 ffbf 	bl	8000580 <__aeabi_uldivmod>
 8016602:	0002      	movs	r2, r0
 8016604:	000b      	movs	r3, r1
 8016606:	0013      	movs	r3, r2
 8016608:	637b      	str	r3, [r7, #52]	@ 0x34
 801660a:	e017      	b.n	801663c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801660e:	0018      	movs	r0, r3
 8016610:	2300      	movs	r3, #0
 8016612:	0019      	movs	r1, r3
 8016614:	4a16      	ldr	r2, [pc, #88]	@ (8016670 <HAL_RCC_GetSysClockFreq+0x140>)
 8016616:	2300      	movs	r3, #0
 8016618:	f7e9 ffd2 	bl	80005c0 <__aeabi_lmul>
 801661c:	0002      	movs	r2, r0
 801661e:	000b      	movs	r3, r1
 8016620:	0010      	movs	r0, r2
 8016622:	0019      	movs	r1, r3
 8016624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016626:	001c      	movs	r4, r3
 8016628:	2300      	movs	r3, #0
 801662a:	001d      	movs	r5, r3
 801662c:	0022      	movs	r2, r4
 801662e:	002b      	movs	r3, r5
 8016630:	f7e9 ffa6 	bl	8000580 <__aeabi_uldivmod>
 8016634:	0002      	movs	r2, r0
 8016636:	000b      	movs	r3, r1
 8016638:	0013      	movs	r3, r2
 801663a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801663c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801663e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8016640:	e00d      	b.n	801665e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8016642:	4b09      	ldr	r3, [pc, #36]	@ (8016668 <HAL_RCC_GetSysClockFreq+0x138>)
 8016644:	685b      	ldr	r3, [r3, #4]
 8016646:	0b5b      	lsrs	r3, r3, #13
 8016648:	2207      	movs	r2, #7
 801664a:	4013      	ands	r3, r2
 801664c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801664e:	6a3b      	ldr	r3, [r7, #32]
 8016650:	3301      	adds	r3, #1
 8016652:	2280      	movs	r2, #128	@ 0x80
 8016654:	0212      	lsls	r2, r2, #8
 8016656:	409a      	lsls	r2, r3
 8016658:	0013      	movs	r3, r2
 801665a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801665c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801665e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8016660:	0018      	movs	r0, r3
 8016662:	46bd      	mov	sp, r7
 8016664:	b00e      	add	sp, #56	@ 0x38
 8016666:	bdb0      	pop	{r4, r5, r7, pc}
 8016668:	40021000 	.word	0x40021000
 801666c:	003d0900 	.word	0x003d0900
 8016670:	00f42400 	.word	0x00f42400
 8016674:	007a1200 	.word	0x007a1200
 8016678:	080267c4 	.word	0x080267c4

0801667c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016680:	4b02      	ldr	r3, [pc, #8]	@ (801668c <HAL_RCC_GetHCLKFreq+0x10>)
 8016682:	681b      	ldr	r3, [r3, #0]
}
 8016684:	0018      	movs	r0, r3
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
 801668a:	46c0      	nop			@ (mov r8, r8)
 801668c:	200000cc 	.word	0x200000cc

08016690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8016694:	f7ff fff2 	bl	801667c <HAL_RCC_GetHCLKFreq>
 8016698:	0001      	movs	r1, r0
 801669a:	4b06      	ldr	r3, [pc, #24]	@ (80166b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801669c:	68db      	ldr	r3, [r3, #12]
 801669e:	0a1b      	lsrs	r3, r3, #8
 80166a0:	2207      	movs	r2, #7
 80166a2:	4013      	ands	r3, r2
 80166a4:	4a04      	ldr	r2, [pc, #16]	@ (80166b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80166a6:	5cd3      	ldrb	r3, [r2, r3]
 80166a8:	40d9      	lsrs	r1, r3
 80166aa:	000b      	movs	r3, r1
}
 80166ac:	0018      	movs	r0, r3
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}
 80166b2:	46c0      	nop			@ (mov r8, r8)
 80166b4:	40021000 	.word	0x40021000
 80166b8:	080267bc 	.word	0x080267bc

080166bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80166c0:	f7ff ffdc 	bl	801667c <HAL_RCC_GetHCLKFreq>
 80166c4:	0001      	movs	r1, r0
 80166c6:	4b06      	ldr	r3, [pc, #24]	@ (80166e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80166c8:	68db      	ldr	r3, [r3, #12]
 80166ca:	0adb      	lsrs	r3, r3, #11
 80166cc:	2207      	movs	r2, #7
 80166ce:	4013      	ands	r3, r2
 80166d0:	4a04      	ldr	r2, [pc, #16]	@ (80166e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80166d2:	5cd3      	ldrb	r3, [r2, r3]
 80166d4:	40d9      	lsrs	r1, r3
 80166d6:	000b      	movs	r3, r1
}
 80166d8:	0018      	movs	r0, r3
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}
 80166de:	46c0      	nop			@ (mov r8, r8)
 80166e0:	40021000 	.word	0x40021000
 80166e4:	080267bc 	.word	0x080267bc

080166e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b086      	sub	sp, #24
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80166f0:	2017      	movs	r0, #23
 80166f2:	183b      	adds	r3, r7, r0
 80166f4:	2200      	movs	r2, #0
 80166f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	2220      	movs	r2, #32
 80166fe:	4013      	ands	r3, r2
 8016700:	d100      	bne.n	8016704 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8016702:	e0c7      	b.n	8016894 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016704:	4b9b      	ldr	r3, [pc, #620]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016708:	2380      	movs	r3, #128	@ 0x80
 801670a:	055b      	lsls	r3, r3, #21
 801670c:	4013      	ands	r3, r2
 801670e:	d109      	bne.n	8016724 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016710:	4b98      	ldr	r3, [pc, #608]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016714:	4b97      	ldr	r3, [pc, #604]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016716:	2180      	movs	r1, #128	@ 0x80
 8016718:	0549      	lsls	r1, r1, #21
 801671a:	430a      	orrs	r2, r1
 801671c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801671e:	183b      	adds	r3, r7, r0
 8016720:	2201      	movs	r2, #1
 8016722:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016724:	4b94      	ldr	r3, [pc, #592]	@ (8016978 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	2380      	movs	r3, #128	@ 0x80
 801672a:	005b      	lsls	r3, r3, #1
 801672c:	4013      	ands	r3, r2
 801672e:	d11a      	bne.n	8016766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016730:	4b91      	ldr	r3, [pc, #580]	@ (8016978 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	4b90      	ldr	r3, [pc, #576]	@ (8016978 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8016736:	2180      	movs	r1, #128	@ 0x80
 8016738:	0049      	lsls	r1, r1, #1
 801673a:	430a      	orrs	r2, r1
 801673c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801673e:	f7f9 f8ab 	bl	800f898 <HAL_GetTick>
 8016742:	0003      	movs	r3, r0
 8016744:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016746:	e008      	b.n	801675a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016748:	f7f9 f8a6 	bl	800f898 <HAL_GetTick>
 801674c:	0002      	movs	r2, r0
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	1ad3      	subs	r3, r2, r3
 8016752:	2b64      	cmp	r3, #100	@ 0x64
 8016754:	d901      	bls.n	801675a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8016756:	2303      	movs	r3, #3
 8016758:	e107      	b.n	801696a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801675a:	4b87      	ldr	r3, [pc, #540]	@ (8016978 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801675c:	681a      	ldr	r2, [r3, #0]
 801675e:	2380      	movs	r3, #128	@ 0x80
 8016760:	005b      	lsls	r3, r3, #1
 8016762:	4013      	ands	r3, r2
 8016764:	d0f0      	beq.n	8016748 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8016766:	4b83      	ldr	r3, [pc, #524]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016768:	681a      	ldr	r2, [r3, #0]
 801676a:	23c0      	movs	r3, #192	@ 0xc0
 801676c:	039b      	lsls	r3, r3, #14
 801676e:	4013      	ands	r3, r2
 8016770:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	685a      	ldr	r2, [r3, #4]
 8016776:	23c0      	movs	r3, #192	@ 0xc0
 8016778:	039b      	lsls	r3, r3, #14
 801677a:	4013      	ands	r3, r2
 801677c:	68fa      	ldr	r2, [r7, #12]
 801677e:	429a      	cmp	r2, r3
 8016780:	d013      	beq.n	80167aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	685a      	ldr	r2, [r3, #4]
 8016786:	23c0      	movs	r3, #192	@ 0xc0
 8016788:	029b      	lsls	r3, r3, #10
 801678a:	401a      	ands	r2, r3
 801678c:	23c0      	movs	r3, #192	@ 0xc0
 801678e:	029b      	lsls	r3, r3, #10
 8016790:	429a      	cmp	r2, r3
 8016792:	d10a      	bne.n	80167aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016794:	4b77      	ldr	r3, [pc, #476]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016796:	681a      	ldr	r2, [r3, #0]
 8016798:	2380      	movs	r3, #128	@ 0x80
 801679a:	029b      	lsls	r3, r3, #10
 801679c:	401a      	ands	r2, r3
 801679e:	2380      	movs	r3, #128	@ 0x80
 80167a0:	029b      	lsls	r3, r3, #10
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d101      	bne.n	80167aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80167a6:	2301      	movs	r3, #1
 80167a8:	e0df      	b.n	801696a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80167aa:	4b72      	ldr	r3, [pc, #456]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167ae:	23c0      	movs	r3, #192	@ 0xc0
 80167b0:	029b      	lsls	r3, r3, #10
 80167b2:	4013      	ands	r3, r2
 80167b4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d03b      	beq.n	8016834 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	685a      	ldr	r2, [r3, #4]
 80167c0:	23c0      	movs	r3, #192	@ 0xc0
 80167c2:	029b      	lsls	r3, r3, #10
 80167c4:	4013      	ands	r3, r2
 80167c6:	68fa      	ldr	r2, [r7, #12]
 80167c8:	429a      	cmp	r2, r3
 80167ca:	d033      	beq.n	8016834 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2220      	movs	r2, #32
 80167d2:	4013      	ands	r3, r2
 80167d4:	d02e      	beq.n	8016834 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80167d6:	4b67      	ldr	r3, [pc, #412]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80167da:	4a68      	ldr	r2, [pc, #416]	@ (801697c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80167dc:	4013      	ands	r3, r2
 80167de:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80167e0:	4b64      	ldr	r3, [pc, #400]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167e4:	4b63      	ldr	r3, [pc, #396]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167e6:	2180      	movs	r1, #128	@ 0x80
 80167e8:	0309      	lsls	r1, r1, #12
 80167ea:	430a      	orrs	r2, r1
 80167ec:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80167ee:	4b61      	ldr	r3, [pc, #388]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167f2:	4b60      	ldr	r3, [pc, #384]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167f4:	4962      	ldr	r1, [pc, #392]	@ (8016980 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80167f6:	400a      	ands	r2, r1
 80167f8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80167fa:	4b5e      	ldr	r3, [pc, #376]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167fc:	68fa      	ldr	r2, [r7, #12]
 80167fe:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8016800:	68fa      	ldr	r2, [r7, #12]
 8016802:	2380      	movs	r3, #128	@ 0x80
 8016804:	005b      	lsls	r3, r3, #1
 8016806:	4013      	ands	r3, r2
 8016808:	d014      	beq.n	8016834 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801680a:	f7f9 f845 	bl	800f898 <HAL_GetTick>
 801680e:	0003      	movs	r3, r0
 8016810:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016812:	e009      	b.n	8016828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8016814:	f7f9 f840 	bl	800f898 <HAL_GetTick>
 8016818:	0002      	movs	r2, r0
 801681a:	693b      	ldr	r3, [r7, #16]
 801681c:	1ad3      	subs	r3, r2, r3
 801681e:	4a59      	ldr	r2, [pc, #356]	@ (8016984 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8016820:	4293      	cmp	r3, r2
 8016822:	d901      	bls.n	8016828 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8016824:	2303      	movs	r3, #3
 8016826:	e0a0      	b.n	801696a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016828:	4b52      	ldr	r3, [pc, #328]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801682a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801682c:	2380      	movs	r3, #128	@ 0x80
 801682e:	009b      	lsls	r3, r3, #2
 8016830:	4013      	ands	r3, r2
 8016832:	d0ef      	beq.n	8016814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	2220      	movs	r2, #32
 801683a:	4013      	ands	r3, r2
 801683c:	d01f      	beq.n	801687e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	685a      	ldr	r2, [r3, #4]
 8016842:	23c0      	movs	r3, #192	@ 0xc0
 8016844:	029b      	lsls	r3, r3, #10
 8016846:	401a      	ands	r2, r3
 8016848:	23c0      	movs	r3, #192	@ 0xc0
 801684a:	029b      	lsls	r3, r3, #10
 801684c:	429a      	cmp	r2, r3
 801684e:	d10c      	bne.n	801686a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8016850:	4b48      	ldr	r3, [pc, #288]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	4a4c      	ldr	r2, [pc, #304]	@ (8016988 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8016856:	4013      	ands	r3, r2
 8016858:	0019      	movs	r1, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	685a      	ldr	r2, [r3, #4]
 801685e:	23c0      	movs	r3, #192	@ 0xc0
 8016860:	039b      	lsls	r3, r3, #14
 8016862:	401a      	ands	r2, r3
 8016864:	4b43      	ldr	r3, [pc, #268]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016866:	430a      	orrs	r2, r1
 8016868:	601a      	str	r2, [r3, #0]
 801686a:	4b42      	ldr	r3, [pc, #264]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801686c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	685a      	ldr	r2, [r3, #4]
 8016872:	23c0      	movs	r3, #192	@ 0xc0
 8016874:	029b      	lsls	r3, r3, #10
 8016876:	401a      	ands	r2, r3
 8016878:	4b3e      	ldr	r3, [pc, #248]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801687a:	430a      	orrs	r2, r1
 801687c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801687e:	2317      	movs	r3, #23
 8016880:	18fb      	adds	r3, r7, r3
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	2b01      	cmp	r3, #1
 8016886:	d105      	bne.n	8016894 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016888:	4b3a      	ldr	r3, [pc, #232]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801688a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801688c:	4b39      	ldr	r3, [pc, #228]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801688e:	493f      	ldr	r1, [pc, #252]	@ (801698c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8016890:	400a      	ands	r2, r1
 8016892:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	2201      	movs	r2, #1
 801689a:	4013      	ands	r3, r2
 801689c:	d009      	beq.n	80168b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801689e:	4b35      	ldr	r3, [pc, #212]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80168a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80168a2:	2203      	movs	r2, #3
 80168a4:	4393      	bics	r3, r2
 80168a6:	0019      	movs	r1, r3
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	689a      	ldr	r2, [r3, #8]
 80168ac:	4b31      	ldr	r3, [pc, #196]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80168ae:	430a      	orrs	r2, r1
 80168b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	2202      	movs	r2, #2
 80168b8:	4013      	ands	r3, r2
 80168ba:	d009      	beq.n	80168d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80168bc:	4b2d      	ldr	r3, [pc, #180]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80168be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80168c0:	220c      	movs	r2, #12
 80168c2:	4393      	bics	r3, r2
 80168c4:	0019      	movs	r1, r3
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	68da      	ldr	r2, [r3, #12]
 80168ca:	4b2a      	ldr	r3, [pc, #168]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80168cc:	430a      	orrs	r2, r1
 80168ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	2204      	movs	r2, #4
 80168d6:	4013      	ands	r3, r2
 80168d8:	d009      	beq.n	80168ee <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80168da:	4b26      	ldr	r3, [pc, #152]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80168dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80168de:	4a2c      	ldr	r2, [pc, #176]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80168e0:	4013      	ands	r3, r2
 80168e2:	0019      	movs	r1, r3
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	691a      	ldr	r2, [r3, #16]
 80168e8:	4b22      	ldr	r3, [pc, #136]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80168ea:	430a      	orrs	r2, r1
 80168ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	2208      	movs	r2, #8
 80168f4:	4013      	ands	r3, r2
 80168f6:	d009      	beq.n	801690c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80168f8:	4b1e      	ldr	r3, [pc, #120]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80168fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80168fc:	4a25      	ldr	r2, [pc, #148]	@ (8016994 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80168fe:	4013      	ands	r3, r2
 8016900:	0019      	movs	r1, r3
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	695a      	ldr	r2, [r3, #20]
 8016906:	4b1b      	ldr	r3, [pc, #108]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016908:	430a      	orrs	r2, r1
 801690a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681a      	ldr	r2, [r3, #0]
 8016910:	2380      	movs	r3, #128	@ 0x80
 8016912:	005b      	lsls	r3, r3, #1
 8016914:	4013      	ands	r3, r2
 8016916:	d009      	beq.n	801692c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8016918:	4b16      	ldr	r3, [pc, #88]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801691a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801691c:	4a17      	ldr	r2, [pc, #92]	@ (801697c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801691e:	4013      	ands	r3, r2
 8016920:	0019      	movs	r1, r3
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	699a      	ldr	r2, [r3, #24]
 8016926:	4b13      	ldr	r3, [pc, #76]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016928:	430a      	orrs	r2, r1
 801692a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	2240      	movs	r2, #64	@ 0x40
 8016932:	4013      	ands	r3, r2
 8016934:	d009      	beq.n	801694a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016936:	4b0f      	ldr	r3, [pc, #60]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801693a:	4a17      	ldr	r2, [pc, #92]	@ (8016998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801693c:	4013      	ands	r3, r2
 801693e:	0019      	movs	r1, r3
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6a1a      	ldr	r2, [r3, #32]
 8016944:	4b0b      	ldr	r3, [pc, #44]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016946:	430a      	orrs	r2, r1
 8016948:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	2280      	movs	r2, #128	@ 0x80
 8016950:	4013      	ands	r3, r2
 8016952:	d009      	beq.n	8016968 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8016954:	4b07      	ldr	r3, [pc, #28]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016958:	4a10      	ldr	r2, [pc, #64]	@ (801699c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801695a:	4013      	ands	r3, r2
 801695c:	0019      	movs	r1, r3
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	69da      	ldr	r2, [r3, #28]
 8016962:	4b04      	ldr	r3, [pc, #16]	@ (8016974 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016964:	430a      	orrs	r2, r1
 8016966:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8016968:	2300      	movs	r3, #0
}
 801696a:	0018      	movs	r0, r3
 801696c:	46bd      	mov	sp, r7
 801696e:	b006      	add	sp, #24
 8016970:	bd80      	pop	{r7, pc}
 8016972:	46c0      	nop			@ (mov r8, r8)
 8016974:	40021000 	.word	0x40021000
 8016978:	40007000 	.word	0x40007000
 801697c:	fffcffff 	.word	0xfffcffff
 8016980:	fff7ffff 	.word	0xfff7ffff
 8016984:	00001388 	.word	0x00001388
 8016988:	ffcfffff 	.word	0xffcfffff
 801698c:	efffffff 	.word	0xefffffff
 8016990:	fffff3ff 	.word	0xfffff3ff
 8016994:	ffffcfff 	.word	0xffffcfff
 8016998:	fbffffff 	.word	0xfbffffff
 801699c:	fff3ffff 	.word	0xfff3ffff

080169a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80169a0:	b5b0      	push	{r4, r5, r7, lr}
 80169a2:	b084      	sub	sp, #16
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80169a8:	230f      	movs	r3, #15
 80169aa:	18fb      	adds	r3, r7, r3
 80169ac:	2201      	movs	r2, #1
 80169ae:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d101      	bne.n	80169ba <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80169b6:	2301      	movs	r3, #1
 80169b8:	e088      	b.n	8016acc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2221      	movs	r2, #33	@ 0x21
 80169be:	5c9b      	ldrb	r3, [r3, r2]
 80169c0:	b2db      	uxtb	r3, r3
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d107      	bne.n	80169d6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2220      	movs	r2, #32
 80169ca:	2100      	movs	r1, #0
 80169cc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	0018      	movs	r0, r3
 80169d2:	f7f3 f835 	bl	8009a40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2221      	movs	r2, #33	@ 0x21
 80169da:	2102      	movs	r1, #2
 80169dc:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	68db      	ldr	r3, [r3, #12]
 80169e4:	2210      	movs	r2, #16
 80169e6:	4013      	ands	r3, r2
 80169e8:	2b10      	cmp	r3, #16
 80169ea:	d05f      	beq.n	8016aac <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	22ca      	movs	r2, #202	@ 0xca
 80169f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	2253      	movs	r2, #83	@ 0x53
 80169fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80169fc:	250f      	movs	r5, #15
 80169fe:	197c      	adds	r4, r7, r5
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	0018      	movs	r0, r3
 8016a04:	f000 fa7c 	bl	8016f00 <RTC_EnterInitMode>
 8016a08:	0003      	movs	r3, r0
 8016a0a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8016a0c:	0028      	movs	r0, r5
 8016a0e:	183b      	adds	r3, r7, r0
 8016a10:	781b      	ldrb	r3, [r3, #0]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d12c      	bne.n	8016a70 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	689a      	ldr	r2, [r3, #8]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	492c      	ldr	r1, [pc, #176]	@ (8016ad4 <HAL_RTC_Init+0x134>)
 8016a22:	400a      	ands	r2, r1
 8016a24:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	6899      	ldr	r1, [r3, #8]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	685a      	ldr	r2, [r3, #4]
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	691b      	ldr	r3, [r3, #16]
 8016a34:	431a      	orrs	r2, r3
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	699b      	ldr	r3, [r3, #24]
 8016a3a:	431a      	orrs	r2, r3
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	430a      	orrs	r2, r1
 8016a42:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	687a      	ldr	r2, [r7, #4]
 8016a4a:	68d2      	ldr	r2, [r2, #12]
 8016a4c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	6919      	ldr	r1, [r3, #16]
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	689b      	ldr	r3, [r3, #8]
 8016a58:	041a      	lsls	r2, r3, #16
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	430a      	orrs	r2, r1
 8016a60:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8016a62:	183c      	adds	r4, r7, r0
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	0018      	movs	r0, r3
 8016a68:	f000 fa8e 	bl	8016f88 <RTC_ExitInitMode>
 8016a6c:	0003      	movs	r3, r0
 8016a6e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8016a70:	230f      	movs	r3, #15
 8016a72:	18fb      	adds	r3, r7, r3
 8016a74:	781b      	ldrb	r3, [r3, #0]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d113      	bne.n	8016aa2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	2103      	movs	r1, #3
 8016a86:	438a      	bics	r2, r1
 8016a88:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	69da      	ldr	r2, [r3, #28]
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	695b      	ldr	r3, [r3, #20]
 8016a98:	431a      	orrs	r2, r3
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	430a      	orrs	r2, r1
 8016aa0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	22ff      	movs	r2, #255	@ 0xff
 8016aa8:	625a      	str	r2, [r3, #36]	@ 0x24
 8016aaa:	e003      	b.n	8016ab4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8016aac:	230f      	movs	r3, #15
 8016aae:	18fb      	adds	r3, r7, r3
 8016ab0:	2200      	movs	r2, #0
 8016ab2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8016ab4:	230f      	movs	r3, #15
 8016ab6:	18fb      	adds	r3, r7, r3
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d103      	bne.n	8016ac6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	2221      	movs	r2, #33	@ 0x21
 8016ac2:	2101      	movs	r1, #1
 8016ac4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8016ac6:	230f      	movs	r3, #15
 8016ac8:	18fb      	adds	r3, r7, r3
 8016aca:	781b      	ldrb	r3, [r3, #0]
}
 8016acc:	0018      	movs	r0, r3
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	b004      	add	sp, #16
 8016ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8016ad4:	ff8fffbf 	.word	0xff8fffbf

08016ad8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016ad8:	b5b0      	push	{r4, r5, r7, lr}
 8016ada:	b086      	sub	sp, #24
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	60f8      	str	r0, [r7, #12]
 8016ae0:	60b9      	str	r1, [r7, #8]
 8016ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	2220      	movs	r2, #32
 8016aec:	5c9b      	ldrb	r3, [r3, r2]
 8016aee:	2b01      	cmp	r3, #1
 8016af0:	d101      	bne.n	8016af6 <HAL_RTC_SetTime+0x1e>
 8016af2:	2302      	movs	r3, #2
 8016af4:	e092      	b.n	8016c1c <HAL_RTC_SetTime+0x144>
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	2220      	movs	r2, #32
 8016afa:	2101      	movs	r1, #1
 8016afc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	2221      	movs	r2, #33	@ 0x21
 8016b02:	2102      	movs	r1, #2
 8016b04:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d125      	bne.n	8016b58 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	689b      	ldr	r3, [r3, #8]
 8016b12:	2240      	movs	r2, #64	@ 0x40
 8016b14:	4013      	ands	r3, r2
 8016b16:	d102      	bne.n	8016b1e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016b1e:	68bb      	ldr	r3, [r7, #8]
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	0018      	movs	r0, r3
 8016b24:	f000 fa5a 	bl	8016fdc <RTC_ByteToBcd2>
 8016b28:	0003      	movs	r3, r0
 8016b2a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	785b      	ldrb	r3, [r3, #1]
 8016b30:	0018      	movs	r0, r3
 8016b32:	f000 fa53 	bl	8016fdc <RTC_ByteToBcd2>
 8016b36:	0003      	movs	r3, r0
 8016b38:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016b3a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	789b      	ldrb	r3, [r3, #2]
 8016b40:	0018      	movs	r0, r3
 8016b42:	f000 fa4b 	bl	8016fdc <RTC_ByteToBcd2>
 8016b46:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016b48:	0022      	movs	r2, r4
 8016b4a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	78db      	ldrb	r3, [r3, #3]
 8016b50:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016b52:	4313      	orrs	r3, r2
 8016b54:	617b      	str	r3, [r7, #20]
 8016b56:	e017      	b.n	8016b88 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	689b      	ldr	r3, [r3, #8]
 8016b5e:	2240      	movs	r2, #64	@ 0x40
 8016b60:	4013      	ands	r3, r2
 8016b62:	d102      	bne.n	8016b6a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	2200      	movs	r2, #0
 8016b68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	781b      	ldrb	r3, [r3, #0]
 8016b6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016b70:	68bb      	ldr	r3, [r7, #8]
 8016b72:	785b      	ldrb	r3, [r3, #1]
 8016b74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016b76:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8016b78:	68ba      	ldr	r2, [r7, #8]
 8016b7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016b7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	78db      	ldrb	r3, [r3, #3]
 8016b82:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016b84:	4313      	orrs	r3, r2
 8016b86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	22ca      	movs	r2, #202	@ 0xca
 8016b8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	2253      	movs	r2, #83	@ 0x53
 8016b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016b98:	2513      	movs	r5, #19
 8016b9a:	197c      	adds	r4, r7, r5
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	0018      	movs	r0, r3
 8016ba0:	f000 f9ae 	bl	8016f00 <RTC_EnterInitMode>
 8016ba4:	0003      	movs	r3, r0
 8016ba6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016ba8:	0028      	movs	r0, r5
 8016baa:	183b      	adds	r3, r7, r0
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d120      	bne.n	8016bf4 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	697a      	ldr	r2, [r7, #20]
 8016bb8:	491a      	ldr	r1, [pc, #104]	@ (8016c24 <HAL_RTC_SetTime+0x14c>)
 8016bba:	400a      	ands	r2, r1
 8016bbc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	689a      	ldr	r2, [r3, #8]
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	4917      	ldr	r1, [pc, #92]	@ (8016c28 <HAL_RTC_SetTime+0x150>)
 8016bca:	400a      	ands	r2, r1
 8016bcc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	6899      	ldr	r1, [r3, #8]
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	68da      	ldr	r2, [r3, #12]
 8016bd8:	68bb      	ldr	r3, [r7, #8]
 8016bda:	691b      	ldr	r3, [r3, #16]
 8016bdc:	431a      	orrs	r2, r3
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	430a      	orrs	r2, r1
 8016be4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016be6:	183c      	adds	r4, r7, r0
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	0018      	movs	r0, r3
 8016bec:	f000 f9cc 	bl	8016f88 <RTC_ExitInitMode>
 8016bf0:	0003      	movs	r3, r0
 8016bf2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016bf4:	2313      	movs	r3, #19
 8016bf6:	18fb      	adds	r3, r7, r3
 8016bf8:	781b      	ldrb	r3, [r3, #0]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d103      	bne.n	8016c06 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	2221      	movs	r2, #33	@ 0x21
 8016c02:	2101      	movs	r1, #1
 8016c04:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	22ff      	movs	r2, #255	@ 0xff
 8016c0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	2220      	movs	r2, #32
 8016c12:	2100      	movs	r1, #0
 8016c14:	5499      	strb	r1, [r3, r2]

  return status;
 8016c16:	2313      	movs	r3, #19
 8016c18:	18fb      	adds	r3, r7, r3
 8016c1a:	781b      	ldrb	r3, [r3, #0]
}
 8016c1c:	0018      	movs	r0, r3
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	b006      	add	sp, #24
 8016c22:	bdb0      	pop	{r4, r5, r7, pc}
 8016c24:	007f7f7f 	.word	0x007f7f7f
 8016c28:	fffbffff 	.word	0xfffbffff

08016c2c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b086      	sub	sp, #24
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	60f8      	str	r0, [r7, #12]
 8016c34:	60b9      	str	r1, [r7, #8]
 8016c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	691b      	ldr	r3, [r3, #16]
 8016c4c:	045b      	lsls	r3, r3, #17
 8016c4e:	0c5a      	lsrs	r2, r3, #17
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	4a22      	ldr	r2, [pc, #136]	@ (8016ce4 <HAL_RTC_GetTime+0xb8>)
 8016c5c:	4013      	ands	r3, r2
 8016c5e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8016c60:	697b      	ldr	r3, [r7, #20]
 8016c62:	0c1b      	lsrs	r3, r3, #16
 8016c64:	b2db      	uxtb	r3, r3
 8016c66:	223f      	movs	r2, #63	@ 0x3f
 8016c68:	4013      	ands	r3, r2
 8016c6a:	b2da      	uxtb	r2, r3
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	0a1b      	lsrs	r3, r3, #8
 8016c74:	b2db      	uxtb	r3, r3
 8016c76:	227f      	movs	r2, #127	@ 0x7f
 8016c78:	4013      	ands	r3, r2
 8016c7a:	b2da      	uxtb	r2, r3
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	b2db      	uxtb	r3, r3
 8016c84:	227f      	movs	r2, #127	@ 0x7f
 8016c86:	4013      	ands	r3, r2
 8016c88:	b2da      	uxtb	r2, r3
 8016c8a:	68bb      	ldr	r3, [r7, #8]
 8016c8c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8016c8e:	697b      	ldr	r3, [r7, #20]
 8016c90:	0d9b      	lsrs	r3, r3, #22
 8016c92:	b2db      	uxtb	r3, r3
 8016c94:	2201      	movs	r2, #1
 8016c96:	4013      	ands	r3, r2
 8016c98:	b2da      	uxtb	r2, r3
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d11a      	bne.n	8016cda <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	781b      	ldrb	r3, [r3, #0]
 8016ca8:	0018      	movs	r0, r3
 8016caa:	f000 f9b8 	bl	801701e <RTC_Bcd2ToByte>
 8016cae:	0003      	movs	r3, r0
 8016cb0:	001a      	movs	r2, r3
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8016cb6:	68bb      	ldr	r3, [r7, #8]
 8016cb8:	785b      	ldrb	r3, [r3, #1]
 8016cba:	0018      	movs	r0, r3
 8016cbc:	f000 f9af 	bl	801701e <RTC_Bcd2ToByte>
 8016cc0:	0003      	movs	r3, r0
 8016cc2:	001a      	movs	r2, r3
 8016cc4:	68bb      	ldr	r3, [r7, #8]
 8016cc6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	789b      	ldrb	r3, [r3, #2]
 8016ccc:	0018      	movs	r0, r3
 8016cce:	f000 f9a6 	bl	801701e <RTC_Bcd2ToByte>
 8016cd2:	0003      	movs	r3, r0
 8016cd4:	001a      	movs	r2, r3
 8016cd6:	68bb      	ldr	r3, [r7, #8]
 8016cd8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8016cda:	2300      	movs	r3, #0
}
 8016cdc:	0018      	movs	r0, r3
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	b006      	add	sp, #24
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	007f7f7f 	.word	0x007f7f7f

08016ce8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016ce8:	b5b0      	push	{r4, r5, r7, lr}
 8016cea:	b086      	sub	sp, #24
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	2220      	movs	r2, #32
 8016cfc:	5c9b      	ldrb	r3, [r3, r2]
 8016cfe:	2b01      	cmp	r3, #1
 8016d00:	d101      	bne.n	8016d06 <HAL_RTC_SetDate+0x1e>
 8016d02:	2302      	movs	r3, #2
 8016d04:	e07e      	b.n	8016e04 <HAL_RTC_SetDate+0x11c>
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	2220      	movs	r2, #32
 8016d0a:	2101      	movs	r1, #1
 8016d0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	2221      	movs	r2, #33	@ 0x21
 8016d12:	2102      	movs	r1, #2
 8016d14:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d10e      	bne.n	8016d3a <HAL_RTC_SetDate+0x52>
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	785b      	ldrb	r3, [r3, #1]
 8016d20:	001a      	movs	r2, r3
 8016d22:	2310      	movs	r3, #16
 8016d24:	4013      	ands	r3, r2
 8016d26:	d008      	beq.n	8016d3a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	785b      	ldrb	r3, [r3, #1]
 8016d2c:	2210      	movs	r2, #16
 8016d2e:	4393      	bics	r3, r2
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	330a      	adds	r3, #10
 8016d34:	b2da      	uxtb	r2, r3
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d11c      	bne.n	8016d7a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	78db      	ldrb	r3, [r3, #3]
 8016d44:	0018      	movs	r0, r3
 8016d46:	f000 f949 	bl	8016fdc <RTC_ByteToBcd2>
 8016d4a:	0003      	movs	r3, r0
 8016d4c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016d4e:	68bb      	ldr	r3, [r7, #8]
 8016d50:	785b      	ldrb	r3, [r3, #1]
 8016d52:	0018      	movs	r0, r3
 8016d54:	f000 f942 	bl	8016fdc <RTC_ByteToBcd2>
 8016d58:	0003      	movs	r3, r0
 8016d5a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016d5c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8016d5e:	68bb      	ldr	r3, [r7, #8]
 8016d60:	789b      	ldrb	r3, [r3, #2]
 8016d62:	0018      	movs	r0, r3
 8016d64:	f000 f93a 	bl	8016fdc <RTC_ByteToBcd2>
 8016d68:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016d6a:	0022      	movs	r2, r4
 8016d6c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8016d6e:	68bb      	ldr	r3, [r7, #8]
 8016d70:	781b      	ldrb	r3, [r3, #0]
 8016d72:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016d74:	4313      	orrs	r3, r2
 8016d76:	617b      	str	r3, [r7, #20]
 8016d78:	e00e      	b.n	8016d98 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	78db      	ldrb	r3, [r3, #3]
 8016d7e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	785b      	ldrb	r3, [r3, #1]
 8016d84:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016d86:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016d88:	68ba      	ldr	r2, [r7, #8]
 8016d8a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016d8c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	781b      	ldrb	r3, [r3, #0]
 8016d92:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016d94:	4313      	orrs	r3, r2
 8016d96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	22ca      	movs	r2, #202	@ 0xca
 8016d9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2253      	movs	r2, #83	@ 0x53
 8016da6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016da8:	2513      	movs	r5, #19
 8016daa:	197c      	adds	r4, r7, r5
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	0018      	movs	r0, r3
 8016db0:	f000 f8a6 	bl	8016f00 <RTC_EnterInitMode>
 8016db4:	0003      	movs	r3, r0
 8016db6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016db8:	0028      	movs	r0, r5
 8016dba:	183b      	adds	r3, r7, r0
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d10c      	bne.n	8016ddc <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	697a      	ldr	r2, [r7, #20]
 8016dc8:	4910      	ldr	r1, [pc, #64]	@ (8016e0c <HAL_RTC_SetDate+0x124>)
 8016dca:	400a      	ands	r2, r1
 8016dcc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016dce:	183c      	adds	r4, r7, r0
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	0018      	movs	r0, r3
 8016dd4:	f000 f8d8 	bl	8016f88 <RTC_ExitInitMode>
 8016dd8:	0003      	movs	r3, r0
 8016dda:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016ddc:	2313      	movs	r3, #19
 8016dde:	18fb      	adds	r3, r7, r3
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d103      	bne.n	8016dee <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	2221      	movs	r2, #33	@ 0x21
 8016dea:	2101      	movs	r1, #1
 8016dec:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	22ff      	movs	r2, #255	@ 0xff
 8016df4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	2220      	movs	r2, #32
 8016dfa:	2100      	movs	r1, #0
 8016dfc:	5499      	strb	r1, [r3, r2]

  return status;
 8016dfe:	2313      	movs	r3, #19
 8016e00:	18fb      	adds	r3, r7, r3
 8016e02:	781b      	ldrb	r3, [r3, #0]
}
 8016e04:	0018      	movs	r0, r3
 8016e06:	46bd      	mov	sp, r7
 8016e08:	b006      	add	sp, #24
 8016e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e0c:	00ffff3f 	.word	0x00ffff3f

08016e10 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b086      	sub	sp, #24
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	60f8      	str	r0, [r7, #12]
 8016e18:	60b9      	str	r1, [r7, #8]
 8016e1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	685b      	ldr	r3, [r3, #4]
 8016e26:	4a21      	ldr	r2, [pc, #132]	@ (8016eac <HAL_RTC_GetDate+0x9c>)
 8016e28:	4013      	ands	r3, r2
 8016e2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	0c1b      	lsrs	r3, r3, #16
 8016e30:	b2da      	uxtb	r2, r3
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	0a1b      	lsrs	r3, r3, #8
 8016e3a:	b2db      	uxtb	r3, r3
 8016e3c:	221f      	movs	r2, #31
 8016e3e:	4013      	ands	r3, r2
 8016e40:	b2da      	uxtb	r2, r3
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	223f      	movs	r2, #63	@ 0x3f
 8016e4c:	4013      	ands	r3, r2
 8016e4e:	b2da      	uxtb	r2, r3
 8016e50:	68bb      	ldr	r3, [r7, #8]
 8016e52:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016e54:	697b      	ldr	r3, [r7, #20]
 8016e56:	0b5b      	lsrs	r3, r3, #13
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	2207      	movs	r2, #7
 8016e5c:	4013      	ands	r3, r2
 8016e5e:	b2da      	uxtb	r2, r3
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d11a      	bne.n	8016ea0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	78db      	ldrb	r3, [r3, #3]
 8016e6e:	0018      	movs	r0, r3
 8016e70:	f000 f8d5 	bl	801701e <RTC_Bcd2ToByte>
 8016e74:	0003      	movs	r3, r0
 8016e76:	001a      	movs	r2, r3
 8016e78:	68bb      	ldr	r3, [r7, #8]
 8016e7a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	785b      	ldrb	r3, [r3, #1]
 8016e80:	0018      	movs	r0, r3
 8016e82:	f000 f8cc 	bl	801701e <RTC_Bcd2ToByte>
 8016e86:	0003      	movs	r3, r0
 8016e88:	001a      	movs	r2, r3
 8016e8a:	68bb      	ldr	r3, [r7, #8]
 8016e8c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	789b      	ldrb	r3, [r3, #2]
 8016e92:	0018      	movs	r0, r3
 8016e94:	f000 f8c3 	bl	801701e <RTC_Bcd2ToByte>
 8016e98:	0003      	movs	r3, r0
 8016e9a:	001a      	movs	r2, r3
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	0018      	movs	r0, r3
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	b006      	add	sp, #24
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	46c0      	nop			@ (mov r8, r8)
 8016eac:	00ffff3f 	.word	0x00ffff3f

08016eb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b084      	sub	sp, #16
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016eb8:	2300      	movs	r3, #0
 8016eba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8016efc <HAL_RTC_WaitForSynchro+0x4c>)
 8016ec2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016ec4:	f7f8 fce8 	bl	800f898 <HAL_GetTick>
 8016ec8:	0003      	movs	r3, r0
 8016eca:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016ecc:	e00a      	b.n	8016ee4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016ece:	f7f8 fce3 	bl	800f898 <HAL_GetTick>
 8016ed2:	0002      	movs	r2, r0
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	1ad2      	subs	r2, r2, r3
 8016ed8:	23fa      	movs	r3, #250	@ 0xfa
 8016eda:	009b      	lsls	r3, r3, #2
 8016edc:	429a      	cmp	r2, r3
 8016ede:	d901      	bls.n	8016ee4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8016ee0:	2303      	movs	r3, #3
 8016ee2:	e006      	b.n	8016ef2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	68db      	ldr	r3, [r3, #12]
 8016eea:	2220      	movs	r2, #32
 8016eec:	4013      	ands	r3, r2
 8016eee:	d0ee      	beq.n	8016ece <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8016ef0:	2300      	movs	r3, #0
}
 8016ef2:	0018      	movs	r0, r3
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	b004      	add	sp, #16
 8016ef8:	bd80      	pop	{r7, pc}
 8016efa:	46c0      	nop			@ (mov r8, r8)
 8016efc:	0001ff5f 	.word	0x0001ff5f

08016f00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b084      	sub	sp, #16
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8016f0c:	230f      	movs	r3, #15
 8016f0e:	18fb      	adds	r3, r7, r3
 8016f10:	2200      	movs	r2, #0
 8016f12:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	68db      	ldr	r3, [r3, #12]
 8016f1a:	2240      	movs	r2, #64	@ 0x40
 8016f1c:	4013      	ands	r3, r2
 8016f1e:	d12c      	bne.n	8016f7a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	68da      	ldr	r2, [r3, #12]
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	2180      	movs	r1, #128	@ 0x80
 8016f2c:	430a      	orrs	r2, r1
 8016f2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016f30:	f7f8 fcb2 	bl	800f898 <HAL_GetTick>
 8016f34:	0003      	movs	r3, r0
 8016f36:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016f38:	e014      	b.n	8016f64 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016f3a:	f7f8 fcad 	bl	800f898 <HAL_GetTick>
 8016f3e:	0002      	movs	r2, r0
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	1ad2      	subs	r2, r2, r3
 8016f44:	200f      	movs	r0, #15
 8016f46:	183b      	adds	r3, r7, r0
 8016f48:	1839      	adds	r1, r7, r0
 8016f4a:	7809      	ldrb	r1, [r1, #0]
 8016f4c:	7019      	strb	r1, [r3, #0]
 8016f4e:	23fa      	movs	r3, #250	@ 0xfa
 8016f50:	009b      	lsls	r3, r3, #2
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d906      	bls.n	8016f64 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2221      	movs	r2, #33	@ 0x21
 8016f5a:	2104      	movs	r1, #4
 8016f5c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8016f5e:	183b      	adds	r3, r7, r0
 8016f60:	2201      	movs	r2, #1
 8016f62:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	68db      	ldr	r3, [r3, #12]
 8016f6a:	2240      	movs	r2, #64	@ 0x40
 8016f6c:	4013      	ands	r3, r2
 8016f6e:	d104      	bne.n	8016f7a <RTC_EnterInitMode+0x7a>
 8016f70:	230f      	movs	r3, #15
 8016f72:	18fb      	adds	r3, r7, r3
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	d1df      	bne.n	8016f3a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8016f7a:	230f      	movs	r3, #15
 8016f7c:	18fb      	adds	r3, r7, r3
 8016f7e:	781b      	ldrb	r3, [r3, #0]
}
 8016f80:	0018      	movs	r0, r3
 8016f82:	46bd      	mov	sp, r7
 8016f84:	b004      	add	sp, #16
 8016f86:	bd80      	pop	{r7, pc}

08016f88 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016f88:	b590      	push	{r4, r7, lr}
 8016f8a:	b085      	sub	sp, #20
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016f90:	240f      	movs	r4, #15
 8016f92:	193b      	adds	r3, r7, r4
 8016f94:	2200      	movs	r2, #0
 8016f96:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	68da      	ldr	r2, [r3, #12]
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	2180      	movs	r1, #128	@ 0x80
 8016fa4:	438a      	bics	r2, r1
 8016fa6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	689b      	ldr	r3, [r3, #8]
 8016fae:	2220      	movs	r2, #32
 8016fb0:	4013      	ands	r3, r2
 8016fb2:	d10c      	bne.n	8016fce <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	0018      	movs	r0, r3
 8016fb8:	f7ff ff7a 	bl	8016eb0 <HAL_RTC_WaitForSynchro>
 8016fbc:	1e03      	subs	r3, r0, #0
 8016fbe:	d006      	beq.n	8016fce <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2221      	movs	r2, #33	@ 0x21
 8016fc4:	2104      	movs	r1, #4
 8016fc6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8016fc8:	193b      	adds	r3, r7, r4
 8016fca:	2201      	movs	r2, #1
 8016fcc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8016fce:	230f      	movs	r3, #15
 8016fd0:	18fb      	adds	r3, r7, r3
 8016fd2:	781b      	ldrb	r3, [r3, #0]
}
 8016fd4:	0018      	movs	r0, r3
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	b005      	add	sp, #20
 8016fda:	bd90      	pop	{r4, r7, pc}

08016fdc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b084      	sub	sp, #16
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	0002      	movs	r2, r0
 8016fe4:	1dfb      	adds	r3, r7, #7
 8016fe6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8016fec:	e007      	b.n	8016ffe <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	3301      	adds	r3, #1
 8016ff2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8016ff4:	1dfb      	adds	r3, r7, #7
 8016ff6:	1dfa      	adds	r2, r7, #7
 8016ff8:	7812      	ldrb	r2, [r2, #0]
 8016ffa:	3a0a      	subs	r2, #10
 8016ffc:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8016ffe:	1dfb      	adds	r3, r7, #7
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	2b09      	cmp	r3, #9
 8017004:	d8f3      	bhi.n	8016fee <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	b2db      	uxtb	r3, r3
 801700a:	011b      	lsls	r3, r3, #4
 801700c:	b2da      	uxtb	r2, r3
 801700e:	1dfb      	adds	r3, r7, #7
 8017010:	781b      	ldrb	r3, [r3, #0]
 8017012:	4313      	orrs	r3, r2
 8017014:	b2db      	uxtb	r3, r3
}
 8017016:	0018      	movs	r0, r3
 8017018:	46bd      	mov	sp, r7
 801701a:	b004      	add	sp, #16
 801701c:	bd80      	pop	{r7, pc}

0801701e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801701e:	b580      	push	{r7, lr}
 8017020:	b084      	sub	sp, #16
 8017022:	af00      	add	r7, sp, #0
 8017024:	0002      	movs	r2, r0
 8017026:	1dfb      	adds	r3, r7, #7
 8017028:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801702a:	2300      	movs	r3, #0
 801702c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801702e:	1dfb      	adds	r3, r7, #7
 8017030:	781b      	ldrb	r3, [r3, #0]
 8017032:	091b      	lsrs	r3, r3, #4
 8017034:	b2db      	uxtb	r3, r3
 8017036:	001a      	movs	r2, r3
 8017038:	0013      	movs	r3, r2
 801703a:	009b      	lsls	r3, r3, #2
 801703c:	189b      	adds	r3, r3, r2
 801703e:	005b      	lsls	r3, r3, #1
 8017040:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	b2da      	uxtb	r2, r3
 8017046:	1dfb      	adds	r3, r7, #7
 8017048:	781b      	ldrb	r3, [r3, #0]
 801704a:	210f      	movs	r1, #15
 801704c:	400b      	ands	r3, r1
 801704e:	b2db      	uxtb	r3, r3
 8017050:	18d3      	adds	r3, r2, r3
 8017052:	b2db      	uxtb	r3, r3
}
 8017054:	0018      	movs	r0, r3
 8017056:	46bd      	mov	sp, r7
 8017058:	b004      	add	sp, #16
 801705a:	bd80      	pop	{r7, pc}

0801705c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b086      	sub	sp, #24
 8017060:	af00      	add	r7, sp, #0
 8017062:	60f8      	str	r0, [r7, #12]
 8017064:	60b9      	str	r1, [r7, #8]
 8017066:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8017068:	4b64      	ldr	r3, [pc, #400]	@ (80171fc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	22fa      	movs	r2, #250	@ 0xfa
 801706e:	01d1      	lsls	r1, r2, #7
 8017070:	0018      	movs	r0, r3
 8017072:	f7e9 f897 	bl	80001a4 <__udivsi3>
 8017076:	0003      	movs	r3, r0
 8017078:	001a      	movs	r2, r3
 801707a:	0013      	movs	r3, r2
 801707c:	015b      	lsls	r3, r3, #5
 801707e:	1a9b      	subs	r3, r3, r2
 8017080:	009b      	lsls	r3, r3, #2
 8017082:	189b      	adds	r3, r3, r2
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2220      	movs	r2, #32
 801708c:	5c9b      	ldrb	r3, [r3, r2]
 801708e:	2b01      	cmp	r3, #1
 8017090:	d101      	bne.n	8017096 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8017092:	2302      	movs	r3, #2
 8017094:	e0ad      	b.n	80171f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	2220      	movs	r2, #32
 801709a:	2101      	movs	r1, #1
 801709c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	2221      	movs	r2, #33	@ 0x21
 80170a2:	2102      	movs	r1, #2
 80170a4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	22ca      	movs	r2, #202	@ 0xca
 80170ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	2253      	movs	r2, #83	@ 0x53
 80170b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	689a      	ldr	r2, [r3, #8]
 80170bc:	2380      	movs	r3, #128	@ 0x80
 80170be:	00db      	lsls	r3, r3, #3
 80170c0:	4013      	ands	r3, r2
 80170c2:	d019      	beq.n	80170f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	3b01      	subs	r3, #1
 80170c8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d10d      	bne.n	80170ec <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	22ff      	movs	r2, #255	@ 0xff
 80170d6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	2221      	movs	r2, #33	@ 0x21
 80170dc:	2103      	movs	r1, #3
 80170de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	2220      	movs	r2, #32
 80170e4:	2100      	movs	r1, #0
 80170e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80170e8:	2303      	movs	r3, #3
 80170ea:	e082      	b.n	80171f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	68db      	ldr	r3, [r3, #12]
 80170f2:	2204      	movs	r2, #4
 80170f4:	4013      	ands	r3, r2
 80170f6:	d1e5      	bne.n	80170c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	689a      	ldr	r2, [r3, #8]
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	493f      	ldr	r1, [pc, #252]	@ (8017200 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8017104:	400a      	ands	r2, r1
 8017106:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	68db      	ldr	r3, [r3, #12]
 801710e:	22ff      	movs	r2, #255	@ 0xff
 8017110:	401a      	ands	r2, r3
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	493b      	ldr	r1, [pc, #236]	@ (8017204 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8017118:	430a      	orrs	r2, r1
 801711a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801711c:	4b37      	ldr	r3, [pc, #220]	@ (80171fc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	22fa      	movs	r2, #250	@ 0xfa
 8017122:	01d1      	lsls	r1, r2, #7
 8017124:	0018      	movs	r0, r3
 8017126:	f7e9 f83d 	bl	80001a4 <__udivsi3>
 801712a:	0003      	movs	r3, r0
 801712c:	001a      	movs	r2, r3
 801712e:	0013      	movs	r3, r2
 8017130:	015b      	lsls	r3, r3, #5
 8017132:	1a9b      	subs	r3, r3, r2
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	189b      	adds	r3, r3, r2
 8017138:	00db      	lsls	r3, r3, #3
 801713a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801713c:	697b      	ldr	r3, [r7, #20]
 801713e:	3b01      	subs	r3, #1
 8017140:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d10d      	bne.n	8017164 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	22ff      	movs	r2, #255	@ 0xff
 801714e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	2221      	movs	r2, #33	@ 0x21
 8017154:	2103      	movs	r1, #3
 8017156:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2220      	movs	r2, #32
 801715c:	2100      	movs	r1, #0
 801715e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8017160:	2303      	movs	r3, #3
 8017162:	e046      	b.n	80171f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	68db      	ldr	r3, [r3, #12]
 801716a:	2204      	movs	r2, #4
 801716c:	4013      	ands	r3, r2
 801716e:	d0e5      	beq.n	801713c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	689a      	ldr	r2, [r3, #8]
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	2107      	movs	r1, #7
 801717c:	438a      	bics	r2, r1
 801717e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	6899      	ldr	r1, [r3, #8]
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	687a      	ldr	r2, [r7, #4]
 801718c:	430a      	orrs	r2, r1
 801718e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	68ba      	ldr	r2, [r7, #8]
 8017196:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8017198:	4b1b      	ldr	r3, [pc, #108]	@ (8017208 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801719a:	681a      	ldr	r2, [r3, #0]
 801719c:	4b1a      	ldr	r3, [pc, #104]	@ (8017208 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801719e:	2180      	movs	r1, #128	@ 0x80
 80171a0:	0349      	lsls	r1, r1, #13
 80171a2:	430a      	orrs	r2, r1
 80171a4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80171a6:	4b18      	ldr	r3, [pc, #96]	@ (8017208 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80171a8:	689a      	ldr	r2, [r3, #8]
 80171aa:	4b17      	ldr	r3, [pc, #92]	@ (8017208 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80171ac:	2180      	movs	r1, #128	@ 0x80
 80171ae:	0349      	lsls	r1, r1, #13
 80171b0:	430a      	orrs	r2, r1
 80171b2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	689a      	ldr	r2, [r3, #8]
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	2180      	movs	r1, #128	@ 0x80
 80171c0:	01c9      	lsls	r1, r1, #7
 80171c2:	430a      	orrs	r2, r1
 80171c4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	689a      	ldr	r2, [r3, #8]
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	2180      	movs	r1, #128	@ 0x80
 80171d2:	00c9      	lsls	r1, r1, #3
 80171d4:	430a      	orrs	r2, r1
 80171d6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	22ff      	movs	r2, #255	@ 0xff
 80171de:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2221      	movs	r2, #33	@ 0x21
 80171e4:	2101      	movs	r1, #1
 80171e6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2220      	movs	r2, #32
 80171ec:	2100      	movs	r1, #0
 80171ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80171f0:	2300      	movs	r3, #0
}
 80171f2:	0018      	movs	r0, r3
 80171f4:	46bd      	mov	sp, r7
 80171f6:	b006      	add	sp, #24
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	46c0      	nop			@ (mov r8, r8)
 80171fc:	200000cc 	.word	0x200000cc
 8017200:	fffffbff 	.word	0xfffffbff
 8017204:	fffffb7f 	.word	0xfffffb7f
 8017208:	40010400 	.word	0x40010400

0801720c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b084      	sub	sp, #16
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8017214:	2300      	movs	r3, #0
 8017216:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	2220      	movs	r2, #32
 801721c:	5c9b      	ldrb	r3, [r3, r2]
 801721e:	2b01      	cmp	r3, #1
 8017220:	d101      	bne.n	8017226 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8017222:	2302      	movs	r3, #2
 8017224:	e04e      	b.n	80172c4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	2220      	movs	r2, #32
 801722a:	2101      	movs	r1, #1
 801722c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	2221      	movs	r2, #33	@ 0x21
 8017232:	2102      	movs	r1, #2
 8017234:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	22ca      	movs	r2, #202	@ 0xca
 801723c:	625a      	str	r2, [r3, #36]	@ 0x24
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	2253      	movs	r2, #83	@ 0x53
 8017244:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	689a      	ldr	r2, [r3, #8]
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	491e      	ldr	r1, [pc, #120]	@ (80172cc <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8017252:	400a      	ands	r2, r1
 8017254:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	689a      	ldr	r2, [r3, #8]
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	491b      	ldr	r1, [pc, #108]	@ (80172d0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8017262:	400a      	ands	r2, r1
 8017264:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8017266:	f7f8 fb17 	bl	800f898 <HAL_GetTick>
 801726a:	0003      	movs	r3, r0
 801726c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801726e:	e016      	b.n	801729e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017270:	f7f8 fb12 	bl	800f898 <HAL_GetTick>
 8017274:	0002      	movs	r2, r0
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	1ad2      	subs	r2, r2, r3
 801727a:	23fa      	movs	r3, #250	@ 0xfa
 801727c:	009b      	lsls	r3, r3, #2
 801727e:	429a      	cmp	r2, r3
 8017280:	d90d      	bls.n	801729e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	22ff      	movs	r2, #255	@ 0xff
 8017288:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2221      	movs	r2, #33	@ 0x21
 801728e:	2103      	movs	r1, #3
 8017290:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	2220      	movs	r2, #32
 8017296:	2100      	movs	r1, #0
 8017298:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801729a:	2303      	movs	r3, #3
 801729c:	e012      	b.n	80172c4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	68db      	ldr	r3, [r3, #12]
 80172a4:	2204      	movs	r2, #4
 80172a6:	4013      	ands	r3, r2
 80172a8:	d0e2      	beq.n	8017270 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	22ff      	movs	r2, #255	@ 0xff
 80172b0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	2221      	movs	r2, #33	@ 0x21
 80172b6:	2101      	movs	r1, #1
 80172b8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2220      	movs	r2, #32
 80172be:	2100      	movs	r1, #0
 80172c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80172c2:	2300      	movs	r3, #0
}
 80172c4:	0018      	movs	r0, r3
 80172c6:	46bd      	mov	sp, r7
 80172c8:	b004      	add	sp, #16
 80172ca:	bd80      	pop	{r7, pc}
 80172cc:	fffffbff 	.word	0xfffffbff
 80172d0:	ffffbfff 	.word	0xffffbfff

080172d4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b082      	sub	sp, #8
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80172dc:	4b13      	ldr	r3, [pc, #76]	@ (801732c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80172de:	2280      	movs	r2, #128	@ 0x80
 80172e0:	0352      	lsls	r2, r2, #13
 80172e2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	689a      	ldr	r2, [r3, #8]
 80172ea:	2380      	movs	r3, #128	@ 0x80
 80172ec:	01db      	lsls	r3, r3, #7
 80172ee:	4013      	ands	r3, r2
 80172f0:	d014      	beq.n	801731c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	68da      	ldr	r2, [r3, #12]
 80172f8:	2380      	movs	r3, #128	@ 0x80
 80172fa:	00db      	lsls	r3, r3, #3
 80172fc:	4013      	ands	r3, r2
 80172fe:	d00d      	beq.n	801731c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	68db      	ldr	r3, [r3, #12]
 8017306:	22ff      	movs	r2, #255	@ 0xff
 8017308:	401a      	ands	r2, r3
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	4908      	ldr	r1, [pc, #32]	@ (8017330 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8017310:	430a      	orrs	r2, r1
 8017312:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	0018      	movs	r0, r3
 8017318:	f000 f80c 	bl	8017334 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2221      	movs	r2, #33	@ 0x21
 8017320:	2101      	movs	r1, #1
 8017322:	5499      	strb	r1, [r3, r2]
}
 8017324:	46c0      	nop			@ (mov r8, r8)
 8017326:	46bd      	mov	sp, r7
 8017328:	b002      	add	sp, #8
 801732a:	bd80      	pop	{r7, pc}
 801732c:	40010400 	.word	0x40010400
 8017330:	fffffb7f 	.word	0xfffffb7f

08017334 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801733c:	46c0      	nop			@ (mov r8, r8)
 801733e:	46bd      	mov	sp, r7
 8017340:	b002      	add	sp, #8
 8017342:	bd80      	pop	{r7, pc}

08017344 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b086      	sub	sp, #24
 8017348:	af00      	add	r7, sp, #0
 801734a:	60f8      	str	r0, [r7, #12]
 801734c:	60b9      	str	r1, [r7, #8]
 801734e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8017350:	2300      	movs	r3, #0
 8017352:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	3350      	adds	r3, #80	@ 0x50
 801735a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	009b      	lsls	r3, r3, #2
 8017360:	697a      	ldr	r2, [r7, #20]
 8017362:	18d3      	adds	r3, r2, r3
 8017364:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8017366:	697b      	ldr	r3, [r7, #20]
 8017368:	687a      	ldr	r2, [r7, #4]
 801736a:	601a      	str	r2, [r3, #0]
}
 801736c:	46c0      	nop			@ (mov r8, r8)
 801736e:	46bd      	mov	sp, r7
 8017370:	b006      	add	sp, #24
 8017372:	bd80      	pop	{r7, pc}

08017374 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b084      	sub	sp, #16
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
 801737c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801737e:	2300      	movs	r3, #0
 8017380:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	3350      	adds	r3, #80	@ 0x50
 8017388:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	68fa      	ldr	r2, [r7, #12]
 8017390:	18d3      	adds	r3, r2, r3
 8017392:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	681b      	ldr	r3, [r3, #0]
}
 8017398:	0018      	movs	r0, r3
 801739a:	46bd      	mov	sp, r7
 801739c:	b004      	add	sp, #16
 801739e:	bd80      	pop	{r7, pc}

080173a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b082      	sub	sp, #8
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d101      	bne.n	80173b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80173ae:	2301      	movs	r3, #1
 80173b0:	e032      	b.n	8017418 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2239      	movs	r2, #57	@ 0x39
 80173b6:	5c9b      	ldrb	r3, [r3, r2]
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d107      	bne.n	80173ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	2238      	movs	r2, #56	@ 0x38
 80173c2:	2100      	movs	r1, #0
 80173c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	0018      	movs	r0, r3
 80173ca:	f7f7 fb7d 	bl	800eac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2239      	movs	r2, #57	@ 0x39
 80173d2:	2102      	movs	r1, #2
 80173d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	3304      	adds	r3, #4
 80173de:	0019      	movs	r1, r3
 80173e0:	0010      	movs	r0, r2
 80173e2:	f000 fa1d 	bl	8017820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	223e      	movs	r2, #62	@ 0x3e
 80173ea:	2101      	movs	r1, #1
 80173ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	223a      	movs	r2, #58	@ 0x3a
 80173f2:	2101      	movs	r1, #1
 80173f4:	5499      	strb	r1, [r3, r2]
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	223b      	movs	r2, #59	@ 0x3b
 80173fa:	2101      	movs	r1, #1
 80173fc:	5499      	strb	r1, [r3, r2]
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	223c      	movs	r2, #60	@ 0x3c
 8017402:	2101      	movs	r1, #1
 8017404:	5499      	strb	r1, [r3, r2]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	223d      	movs	r2, #61	@ 0x3d
 801740a:	2101      	movs	r1, #1
 801740c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	2239      	movs	r2, #57	@ 0x39
 8017412:	2101      	movs	r1, #1
 8017414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017416:	2300      	movs	r3, #0
}
 8017418:	0018      	movs	r0, r3
 801741a:	46bd      	mov	sp, r7
 801741c:	b002      	add	sp, #8
 801741e:	bd80      	pop	{r7, pc}

08017420 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b084      	sub	sp, #16
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2239      	movs	r2, #57	@ 0x39
 801742c:	5c9b      	ldrb	r3, [r3, r2]
 801742e:	b2db      	uxtb	r3, r3
 8017430:	2b01      	cmp	r3, #1
 8017432:	d001      	beq.n	8017438 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8017434:	2301      	movs	r3, #1
 8017436:	e033      	b.n	80174a0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	2239      	movs	r2, #57	@ 0x39
 801743c:	2102      	movs	r1, #2
 801743e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	681a      	ldr	r2, [r3, #0]
 8017444:	2380      	movs	r3, #128	@ 0x80
 8017446:	05db      	lsls	r3, r3, #23
 8017448:	429a      	cmp	r2, r3
 801744a:	d00e      	beq.n	801746a <HAL_TIM_Base_Start+0x4a>
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	4a15      	ldr	r2, [pc, #84]	@ (80174a8 <HAL_TIM_Base_Start+0x88>)
 8017452:	4293      	cmp	r3, r2
 8017454:	d009      	beq.n	801746a <HAL_TIM_Base_Start+0x4a>
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	4a14      	ldr	r2, [pc, #80]	@ (80174ac <HAL_TIM_Base_Start+0x8c>)
 801745c:	4293      	cmp	r3, r2
 801745e:	d004      	beq.n	801746a <HAL_TIM_Base_Start+0x4a>
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4a12      	ldr	r2, [pc, #72]	@ (80174b0 <HAL_TIM_Base_Start+0x90>)
 8017466:	4293      	cmp	r3, r2
 8017468:	d111      	bne.n	801748e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	689b      	ldr	r3, [r3, #8]
 8017470:	2207      	movs	r2, #7
 8017472:	4013      	ands	r3, r2
 8017474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	2b06      	cmp	r3, #6
 801747a:	d010      	beq.n	801749e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	681a      	ldr	r2, [r3, #0]
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	2101      	movs	r1, #1
 8017488:	430a      	orrs	r2, r1
 801748a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801748c:	e007      	b.n	801749e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	681a      	ldr	r2, [r3, #0]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	2101      	movs	r1, #1
 801749a:	430a      	orrs	r2, r1
 801749c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801749e:	2300      	movs	r3, #0
}
 80174a0:	0018      	movs	r0, r3
 80174a2:	46bd      	mov	sp, r7
 80174a4:	b004      	add	sp, #16
 80174a6:	bd80      	pop	{r7, pc}
 80174a8:	40000400 	.word	0x40000400
 80174ac:	40010800 	.word	0x40010800
 80174b0:	40011400 	.word	0x40011400

080174b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b082      	sub	sp, #8
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	6a1b      	ldr	r3, [r3, #32]
 80174c2:	4a0a      	ldr	r2, [pc, #40]	@ (80174ec <HAL_TIM_Base_Stop+0x38>)
 80174c4:	4013      	ands	r3, r2
 80174c6:	d107      	bne.n	80174d8 <HAL_TIM_Base_Stop+0x24>
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	681a      	ldr	r2, [r3, #0]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	2101      	movs	r1, #1
 80174d4:	438a      	bics	r2, r1
 80174d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2239      	movs	r2, #57	@ 0x39
 80174dc:	2101      	movs	r1, #1
 80174de:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80174e0:	2300      	movs	r3, #0
}
 80174e2:	0018      	movs	r0, r3
 80174e4:	46bd      	mov	sp, r7
 80174e6:	b002      	add	sp, #8
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	46c0      	nop			@ (mov r8, r8)
 80174ec:	00001111 	.word	0x00001111

080174f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b082      	sub	sp, #8
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d101      	bne.n	8017502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80174fe:	2301      	movs	r3, #1
 8017500:	e032      	b.n	8017568 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	2239      	movs	r2, #57	@ 0x39
 8017506:	5c9b      	ldrb	r3, [r3, r2]
 8017508:	b2db      	uxtb	r3, r3
 801750a:	2b00      	cmp	r3, #0
 801750c:	d107      	bne.n	801751e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2238      	movs	r2, #56	@ 0x38
 8017512:	2100      	movs	r1, #0
 8017514:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	0018      	movs	r0, r3
 801751a:	f7f7 fab1 	bl	800ea80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	2239      	movs	r2, #57	@ 0x39
 8017522:	2102      	movs	r1, #2
 8017524:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	681a      	ldr	r2, [r3, #0]
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	3304      	adds	r3, #4
 801752e:	0019      	movs	r1, r3
 8017530:	0010      	movs	r0, r2
 8017532:	f000 f975 	bl	8017820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	223e      	movs	r2, #62	@ 0x3e
 801753a:	2101      	movs	r1, #1
 801753c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	223a      	movs	r2, #58	@ 0x3a
 8017542:	2101      	movs	r1, #1
 8017544:	5499      	strb	r1, [r3, r2]
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	223b      	movs	r2, #59	@ 0x3b
 801754a:	2101      	movs	r1, #1
 801754c:	5499      	strb	r1, [r3, r2]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	223c      	movs	r2, #60	@ 0x3c
 8017552:	2101      	movs	r1, #1
 8017554:	5499      	strb	r1, [r3, r2]
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	223d      	movs	r2, #61	@ 0x3d
 801755a:	2101      	movs	r1, #1
 801755c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	2239      	movs	r2, #57	@ 0x39
 8017562:	2101      	movs	r1, #1
 8017564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017566:	2300      	movs	r3, #0
}
 8017568:	0018      	movs	r0, r3
 801756a:	46bd      	mov	sp, r7
 801756c:	b002      	add	sp, #8
 801756e:	bd80      	pop	{r7, pc}

08017570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b084      	sub	sp, #16
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d108      	bne.n	8017592 <HAL_TIM_PWM_Start+0x22>
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	223a      	movs	r2, #58	@ 0x3a
 8017584:	5c9b      	ldrb	r3, [r3, r2]
 8017586:	b2db      	uxtb	r3, r3
 8017588:	3b01      	subs	r3, #1
 801758a:	1e5a      	subs	r2, r3, #1
 801758c:	4193      	sbcs	r3, r2
 801758e:	b2db      	uxtb	r3, r3
 8017590:	e01f      	b.n	80175d2 <HAL_TIM_PWM_Start+0x62>
 8017592:	683b      	ldr	r3, [r7, #0]
 8017594:	2b04      	cmp	r3, #4
 8017596:	d108      	bne.n	80175aa <HAL_TIM_PWM_Start+0x3a>
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	223b      	movs	r2, #59	@ 0x3b
 801759c:	5c9b      	ldrb	r3, [r3, r2]
 801759e:	b2db      	uxtb	r3, r3
 80175a0:	3b01      	subs	r3, #1
 80175a2:	1e5a      	subs	r2, r3, #1
 80175a4:	4193      	sbcs	r3, r2
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	e013      	b.n	80175d2 <HAL_TIM_PWM_Start+0x62>
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	2b08      	cmp	r3, #8
 80175ae:	d108      	bne.n	80175c2 <HAL_TIM_PWM_Start+0x52>
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	223c      	movs	r2, #60	@ 0x3c
 80175b4:	5c9b      	ldrb	r3, [r3, r2]
 80175b6:	b2db      	uxtb	r3, r3
 80175b8:	3b01      	subs	r3, #1
 80175ba:	1e5a      	subs	r2, r3, #1
 80175bc:	4193      	sbcs	r3, r2
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	e007      	b.n	80175d2 <HAL_TIM_PWM_Start+0x62>
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	223d      	movs	r2, #61	@ 0x3d
 80175c6:	5c9b      	ldrb	r3, [r3, r2]
 80175c8:	b2db      	uxtb	r3, r3
 80175ca:	3b01      	subs	r3, #1
 80175cc:	1e5a      	subs	r2, r3, #1
 80175ce:	4193      	sbcs	r3, r2
 80175d0:	b2db      	uxtb	r3, r3
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d001      	beq.n	80175da <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80175d6:	2301      	movs	r3, #1
 80175d8:	e052      	b.n	8017680 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d104      	bne.n	80175ea <HAL_TIM_PWM_Start+0x7a>
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	223a      	movs	r2, #58	@ 0x3a
 80175e4:	2102      	movs	r1, #2
 80175e6:	5499      	strb	r1, [r3, r2]
 80175e8:	e013      	b.n	8017612 <HAL_TIM_PWM_Start+0xa2>
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	2b04      	cmp	r3, #4
 80175ee:	d104      	bne.n	80175fa <HAL_TIM_PWM_Start+0x8a>
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	223b      	movs	r2, #59	@ 0x3b
 80175f4:	2102      	movs	r1, #2
 80175f6:	5499      	strb	r1, [r3, r2]
 80175f8:	e00b      	b.n	8017612 <HAL_TIM_PWM_Start+0xa2>
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	2b08      	cmp	r3, #8
 80175fe:	d104      	bne.n	801760a <HAL_TIM_PWM_Start+0x9a>
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	223c      	movs	r2, #60	@ 0x3c
 8017604:	2102      	movs	r1, #2
 8017606:	5499      	strb	r1, [r3, r2]
 8017608:	e003      	b.n	8017612 <HAL_TIM_PWM_Start+0xa2>
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	223d      	movs	r2, #61	@ 0x3d
 801760e:	2102      	movs	r1, #2
 8017610:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	6839      	ldr	r1, [r7, #0]
 8017618:	2201      	movs	r2, #1
 801761a:	0018      	movs	r0, r3
 801761c:	f000 fa62 	bl	8017ae4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	681a      	ldr	r2, [r3, #0]
 8017624:	2380      	movs	r3, #128	@ 0x80
 8017626:	05db      	lsls	r3, r3, #23
 8017628:	429a      	cmp	r2, r3
 801762a:	d00e      	beq.n	801764a <HAL_TIM_PWM_Start+0xda>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	4a15      	ldr	r2, [pc, #84]	@ (8017688 <HAL_TIM_PWM_Start+0x118>)
 8017632:	4293      	cmp	r3, r2
 8017634:	d009      	beq.n	801764a <HAL_TIM_PWM_Start+0xda>
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	4a14      	ldr	r2, [pc, #80]	@ (801768c <HAL_TIM_PWM_Start+0x11c>)
 801763c:	4293      	cmp	r3, r2
 801763e:	d004      	beq.n	801764a <HAL_TIM_PWM_Start+0xda>
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	4a12      	ldr	r2, [pc, #72]	@ (8017690 <HAL_TIM_PWM_Start+0x120>)
 8017646:	4293      	cmp	r3, r2
 8017648:	d111      	bne.n	801766e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	689b      	ldr	r3, [r3, #8]
 8017650:	2207      	movs	r2, #7
 8017652:	4013      	ands	r3, r2
 8017654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	2b06      	cmp	r3, #6
 801765a:	d010      	beq.n	801767e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	2101      	movs	r1, #1
 8017668:	430a      	orrs	r2, r1
 801766a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801766c:	e007      	b.n	801767e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	681a      	ldr	r2, [r3, #0]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	2101      	movs	r1, #1
 801767a:	430a      	orrs	r2, r1
 801767c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801767e:	2300      	movs	r3, #0
}
 8017680:	0018      	movs	r0, r3
 8017682:	46bd      	mov	sp, r7
 8017684:	b004      	add	sp, #16
 8017686:	bd80      	pop	{r7, pc}
 8017688:	40000400 	.word	0x40000400
 801768c:	40010800 	.word	0x40010800
 8017690:	40011400 	.word	0x40011400

08017694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b086      	sub	sp, #24
 8017698:	af00      	add	r7, sp, #0
 801769a:	60f8      	str	r0, [r7, #12]
 801769c:	60b9      	str	r1, [r7, #8]
 801769e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80176a0:	2317      	movs	r3, #23
 80176a2:	18fb      	adds	r3, r7, r3
 80176a4:	2200      	movs	r2, #0
 80176a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	2238      	movs	r2, #56	@ 0x38
 80176ac:	5c9b      	ldrb	r3, [r3, r2]
 80176ae:	2b01      	cmp	r3, #1
 80176b0:	d101      	bne.n	80176b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80176b2:	2302      	movs	r3, #2
 80176b4:	e0ad      	b.n	8017812 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	2238      	movs	r2, #56	@ 0x38
 80176ba:	2101      	movs	r1, #1
 80176bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	2b0c      	cmp	r3, #12
 80176c2:	d100      	bne.n	80176c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80176c4:	e076      	b.n	80177b4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2b0c      	cmp	r3, #12
 80176ca:	d900      	bls.n	80176ce <HAL_TIM_PWM_ConfigChannel+0x3a>
 80176cc:	e095      	b.n	80177fa <HAL_TIM_PWM_ConfigChannel+0x166>
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	2b08      	cmp	r3, #8
 80176d2:	d04e      	beq.n	8017772 <HAL_TIM_PWM_ConfigChannel+0xde>
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	2b08      	cmp	r3, #8
 80176d8:	d900      	bls.n	80176dc <HAL_TIM_PWM_ConfigChannel+0x48>
 80176da:	e08e      	b.n	80177fa <HAL_TIM_PWM_ConfigChannel+0x166>
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d003      	beq.n	80176ea <HAL_TIM_PWM_ConfigChannel+0x56>
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	2b04      	cmp	r3, #4
 80176e6:	d021      	beq.n	801772c <HAL_TIM_PWM_ConfigChannel+0x98>
 80176e8:	e087      	b.n	80177fa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	68ba      	ldr	r2, [r7, #8]
 80176f0:	0011      	movs	r1, r2
 80176f2:	0018      	movs	r0, r3
 80176f4:	f000 f8f2 	bl	80178dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	699a      	ldr	r2, [r3, #24]
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	2108      	movs	r1, #8
 8017704:	430a      	orrs	r2, r1
 8017706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	699a      	ldr	r2, [r3, #24]
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	2104      	movs	r1, #4
 8017714:	438a      	bics	r2, r1
 8017716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	6999      	ldr	r1, [r3, #24]
 801771e:	68bb      	ldr	r3, [r7, #8]
 8017720:	68da      	ldr	r2, [r3, #12]
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	430a      	orrs	r2, r1
 8017728:	619a      	str	r2, [r3, #24]
      break;
 801772a:	e06b      	b.n	8017804 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	68ba      	ldr	r2, [r7, #8]
 8017732:	0011      	movs	r1, r2
 8017734:	0018      	movs	r0, r3
 8017736:	f000 f90d 	bl	8017954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	699a      	ldr	r2, [r3, #24]
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	2180      	movs	r1, #128	@ 0x80
 8017746:	0109      	lsls	r1, r1, #4
 8017748:	430a      	orrs	r2, r1
 801774a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	699a      	ldr	r2, [r3, #24]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	4931      	ldr	r1, [pc, #196]	@ (801781c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8017758:	400a      	ands	r2, r1
 801775a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	6999      	ldr	r1, [r3, #24]
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	68db      	ldr	r3, [r3, #12]
 8017766:	021a      	lsls	r2, r3, #8
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	430a      	orrs	r2, r1
 801776e:	619a      	str	r2, [r3, #24]
      break;
 8017770:	e048      	b.n	8017804 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	68ba      	ldr	r2, [r7, #8]
 8017778:	0011      	movs	r1, r2
 801777a:	0018      	movs	r0, r3
 801777c:	f000 f92c 	bl	80179d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	69da      	ldr	r2, [r3, #28]
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	2108      	movs	r1, #8
 801778c:	430a      	orrs	r2, r1
 801778e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	69da      	ldr	r2, [r3, #28]
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	2104      	movs	r1, #4
 801779c:	438a      	bics	r2, r1
 801779e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	69d9      	ldr	r1, [r3, #28]
 80177a6:	68bb      	ldr	r3, [r7, #8]
 80177a8:	68da      	ldr	r2, [r3, #12]
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	430a      	orrs	r2, r1
 80177b0:	61da      	str	r2, [r3, #28]
      break;
 80177b2:	e027      	b.n	8017804 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	68ba      	ldr	r2, [r7, #8]
 80177ba:	0011      	movs	r1, r2
 80177bc:	0018      	movs	r0, r3
 80177be:	f000 f94b 	bl	8017a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	69da      	ldr	r2, [r3, #28]
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	2180      	movs	r1, #128	@ 0x80
 80177ce:	0109      	lsls	r1, r1, #4
 80177d0:	430a      	orrs	r2, r1
 80177d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	69da      	ldr	r2, [r3, #28]
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	490f      	ldr	r1, [pc, #60]	@ (801781c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80177e0:	400a      	ands	r2, r1
 80177e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	69d9      	ldr	r1, [r3, #28]
 80177ea:	68bb      	ldr	r3, [r7, #8]
 80177ec:	68db      	ldr	r3, [r3, #12]
 80177ee:	021a      	lsls	r2, r3, #8
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	430a      	orrs	r2, r1
 80177f6:	61da      	str	r2, [r3, #28]
      break;
 80177f8:	e004      	b.n	8017804 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80177fa:	2317      	movs	r3, #23
 80177fc:	18fb      	adds	r3, r7, r3
 80177fe:	2201      	movs	r2, #1
 8017800:	701a      	strb	r2, [r3, #0]
      break;
 8017802:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	2238      	movs	r2, #56	@ 0x38
 8017808:	2100      	movs	r1, #0
 801780a:	5499      	strb	r1, [r3, r2]

  return status;
 801780c:	2317      	movs	r3, #23
 801780e:	18fb      	adds	r3, r7, r3
 8017810:	781b      	ldrb	r3, [r3, #0]
}
 8017812:	0018      	movs	r0, r3
 8017814:	46bd      	mov	sp, r7
 8017816:	b006      	add	sp, #24
 8017818:	bd80      	pop	{r7, pc}
 801781a:	46c0      	nop			@ (mov r8, r8)
 801781c:	fffffbff 	.word	0xfffffbff

08017820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b084      	sub	sp, #16
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017830:	687a      	ldr	r2, [r7, #4]
 8017832:	2380      	movs	r3, #128	@ 0x80
 8017834:	05db      	lsls	r3, r3, #23
 8017836:	429a      	cmp	r2, r3
 8017838:	d00b      	beq.n	8017852 <TIM_Base_SetConfig+0x32>
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	4a23      	ldr	r2, [pc, #140]	@ (80178cc <TIM_Base_SetConfig+0xac>)
 801783e:	4293      	cmp	r3, r2
 8017840:	d007      	beq.n	8017852 <TIM_Base_SetConfig+0x32>
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	4a22      	ldr	r2, [pc, #136]	@ (80178d0 <TIM_Base_SetConfig+0xb0>)
 8017846:	4293      	cmp	r3, r2
 8017848:	d003      	beq.n	8017852 <TIM_Base_SetConfig+0x32>
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	4a21      	ldr	r2, [pc, #132]	@ (80178d4 <TIM_Base_SetConfig+0xb4>)
 801784e:	4293      	cmp	r3, r2
 8017850:	d108      	bne.n	8017864 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	2270      	movs	r2, #112	@ 0x70
 8017856:	4393      	bics	r3, r2
 8017858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801785a:	683b      	ldr	r3, [r7, #0]
 801785c:	685b      	ldr	r3, [r3, #4]
 801785e:	68fa      	ldr	r2, [r7, #12]
 8017860:	4313      	orrs	r3, r2
 8017862:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017864:	687a      	ldr	r2, [r7, #4]
 8017866:	2380      	movs	r3, #128	@ 0x80
 8017868:	05db      	lsls	r3, r3, #23
 801786a:	429a      	cmp	r2, r3
 801786c:	d00b      	beq.n	8017886 <TIM_Base_SetConfig+0x66>
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	4a16      	ldr	r2, [pc, #88]	@ (80178cc <TIM_Base_SetConfig+0xac>)
 8017872:	4293      	cmp	r3, r2
 8017874:	d007      	beq.n	8017886 <TIM_Base_SetConfig+0x66>
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	4a15      	ldr	r2, [pc, #84]	@ (80178d0 <TIM_Base_SetConfig+0xb0>)
 801787a:	4293      	cmp	r3, r2
 801787c:	d003      	beq.n	8017886 <TIM_Base_SetConfig+0x66>
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	4a14      	ldr	r2, [pc, #80]	@ (80178d4 <TIM_Base_SetConfig+0xb4>)
 8017882:	4293      	cmp	r3, r2
 8017884:	d108      	bne.n	8017898 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	4a13      	ldr	r2, [pc, #76]	@ (80178d8 <TIM_Base_SetConfig+0xb8>)
 801788a:	4013      	ands	r3, r2
 801788c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	68db      	ldr	r3, [r3, #12]
 8017892:	68fa      	ldr	r2, [r7, #12]
 8017894:	4313      	orrs	r3, r2
 8017896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	2280      	movs	r2, #128	@ 0x80
 801789c:	4393      	bics	r3, r2
 801789e:	001a      	movs	r2, r3
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	691b      	ldr	r3, [r3, #16]
 80178a4:	4313      	orrs	r3, r2
 80178a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	68fa      	ldr	r2, [r7, #12]
 80178ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	689a      	ldr	r2, [r3, #8]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2201      	movs	r2, #1
 80178c2:	615a      	str	r2, [r3, #20]
}
 80178c4:	46c0      	nop			@ (mov r8, r8)
 80178c6:	46bd      	mov	sp, r7
 80178c8:	b004      	add	sp, #16
 80178ca:	bd80      	pop	{r7, pc}
 80178cc:	40000400 	.word	0x40000400
 80178d0:	40010800 	.word	0x40010800
 80178d4:	40011400 	.word	0x40011400
 80178d8:	fffffcff 	.word	0xfffffcff

080178dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b086      	sub	sp, #24
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
 80178e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6a1b      	ldr	r3, [r3, #32]
 80178ea:	2201      	movs	r2, #1
 80178ec:	4393      	bics	r3, r2
 80178ee:	001a      	movs	r2, r3
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	6a1b      	ldr	r3, [r3, #32]
 80178f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	699b      	ldr	r3, [r3, #24]
 8017904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	2270      	movs	r2, #112	@ 0x70
 801790a:	4393      	bics	r3, r2
 801790c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	2203      	movs	r2, #3
 8017912:	4393      	bics	r3, r2
 8017914:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	68fa      	ldr	r2, [r7, #12]
 801791c:	4313      	orrs	r3, r2
 801791e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8017920:	697b      	ldr	r3, [r7, #20]
 8017922:	2202      	movs	r2, #2
 8017924:	4393      	bics	r3, r2
 8017926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	689b      	ldr	r3, [r3, #8]
 801792c:	697a      	ldr	r2, [r7, #20]
 801792e:	4313      	orrs	r3, r2
 8017930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	693a      	ldr	r2, [r7, #16]
 8017936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	68fa      	ldr	r2, [r7, #12]
 801793c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	685a      	ldr	r2, [r3, #4]
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	697a      	ldr	r2, [r7, #20]
 801794a:	621a      	str	r2, [r3, #32]
}
 801794c:	46c0      	nop			@ (mov r8, r8)
 801794e:	46bd      	mov	sp, r7
 8017950:	b006      	add	sp, #24
 8017952:	bd80      	pop	{r7, pc}

08017954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b086      	sub	sp, #24
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6a1b      	ldr	r3, [r3, #32]
 8017962:	2210      	movs	r2, #16
 8017964:	4393      	bics	r3, r2
 8017966:	001a      	movs	r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6a1b      	ldr	r3, [r3, #32]
 8017970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	699b      	ldr	r3, [r3, #24]
 801797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	4a13      	ldr	r2, [pc, #76]	@ (80179d0 <TIM_OC2_SetConfig+0x7c>)
 8017982:	4013      	ands	r3, r2
 8017984:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	4a12      	ldr	r2, [pc, #72]	@ (80179d4 <TIM_OC2_SetConfig+0x80>)
 801798a:	4013      	ands	r3, r2
 801798c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801798e:	683b      	ldr	r3, [r7, #0]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	021b      	lsls	r3, r3, #8
 8017994:	68fa      	ldr	r2, [r7, #12]
 8017996:	4313      	orrs	r3, r2
 8017998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	2220      	movs	r2, #32
 801799e:	4393      	bics	r3, r2
 80179a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	689b      	ldr	r3, [r3, #8]
 80179a6:	011b      	lsls	r3, r3, #4
 80179a8:	697a      	ldr	r2, [r7, #20]
 80179aa:	4313      	orrs	r3, r2
 80179ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	693a      	ldr	r2, [r7, #16]
 80179b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	68fa      	ldr	r2, [r7, #12]
 80179b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	685a      	ldr	r2, [r3, #4]
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	697a      	ldr	r2, [r7, #20]
 80179c6:	621a      	str	r2, [r3, #32]
}
 80179c8:	46c0      	nop			@ (mov r8, r8)
 80179ca:	46bd      	mov	sp, r7
 80179cc:	b006      	add	sp, #24
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	ffff8fff 	.word	0xffff8fff
 80179d4:	fffffcff 	.word	0xfffffcff

080179d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b086      	sub	sp, #24
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
 80179e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6a1b      	ldr	r3, [r3, #32]
 80179e6:	4a1a      	ldr	r2, [pc, #104]	@ (8017a50 <TIM_OC3_SetConfig+0x78>)
 80179e8:	401a      	ands	r2, r3
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	6a1b      	ldr	r3, [r3, #32]
 80179f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	69db      	ldr	r3, [r3, #28]
 80179fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	2270      	movs	r2, #112	@ 0x70
 8017a04:	4393      	bics	r3, r2
 8017a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	2203      	movs	r2, #3
 8017a0c:	4393      	bics	r3, r2
 8017a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	68fa      	ldr	r2, [r7, #12]
 8017a16:	4313      	orrs	r3, r2
 8017a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017a1a:	697b      	ldr	r3, [r7, #20]
 8017a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8017a54 <TIM_OC3_SetConfig+0x7c>)
 8017a1e:	4013      	ands	r3, r2
 8017a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	689b      	ldr	r3, [r3, #8]
 8017a26:	021b      	lsls	r3, r3, #8
 8017a28:	697a      	ldr	r2, [r7, #20]
 8017a2a:	4313      	orrs	r3, r2
 8017a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	693a      	ldr	r2, [r7, #16]
 8017a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	68fa      	ldr	r2, [r7, #12]
 8017a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017a3a:	683b      	ldr	r3, [r7, #0]
 8017a3c:	685a      	ldr	r2, [r3, #4]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	697a      	ldr	r2, [r7, #20]
 8017a46:	621a      	str	r2, [r3, #32]
}
 8017a48:	46c0      	nop			@ (mov r8, r8)
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	b006      	add	sp, #24
 8017a4e:	bd80      	pop	{r7, pc}
 8017a50:	fffffeff 	.word	0xfffffeff
 8017a54:	fffffdff 	.word	0xfffffdff

08017a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b086      	sub	sp, #24
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
 8017a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	6a1b      	ldr	r3, [r3, #32]
 8017a66:	4a1b      	ldr	r2, [pc, #108]	@ (8017ad4 <TIM_OC4_SetConfig+0x7c>)
 8017a68:	401a      	ands	r2, r3
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	6a1b      	ldr	r3, [r3, #32]
 8017a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	685b      	ldr	r3, [r3, #4]
 8017a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	69db      	ldr	r3, [r3, #28]
 8017a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	4a15      	ldr	r2, [pc, #84]	@ (8017ad8 <TIM_OC4_SetConfig+0x80>)
 8017a84:	4013      	ands	r3, r2
 8017a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	4a14      	ldr	r2, [pc, #80]	@ (8017adc <TIM_OC4_SetConfig+0x84>)
 8017a8c:	4013      	ands	r3, r2
 8017a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017a90:	683b      	ldr	r3, [r7, #0]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	021b      	lsls	r3, r3, #8
 8017a96:	68fa      	ldr	r2, [r7, #12]
 8017a98:	4313      	orrs	r3, r2
 8017a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	4a10      	ldr	r2, [pc, #64]	@ (8017ae0 <TIM_OC4_SetConfig+0x88>)
 8017aa0:	4013      	ands	r3, r2
 8017aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017aa4:	683b      	ldr	r3, [r7, #0]
 8017aa6:	689b      	ldr	r3, [r3, #8]
 8017aa8:	031b      	lsls	r3, r3, #12
 8017aaa:	697a      	ldr	r2, [r7, #20]
 8017aac:	4313      	orrs	r3, r2
 8017aae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	693a      	ldr	r2, [r7, #16]
 8017ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	68fa      	ldr	r2, [r7, #12]
 8017aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	685a      	ldr	r2, [r3, #4]
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	697a      	ldr	r2, [r7, #20]
 8017ac8:	621a      	str	r2, [r3, #32]
}
 8017aca:	46c0      	nop			@ (mov r8, r8)
 8017acc:	46bd      	mov	sp, r7
 8017ace:	b006      	add	sp, #24
 8017ad0:	bd80      	pop	{r7, pc}
 8017ad2:	46c0      	nop			@ (mov r8, r8)
 8017ad4:	ffffefff 	.word	0xffffefff
 8017ad8:	ffff8fff 	.word	0xffff8fff
 8017adc:	fffffcff 	.word	0xfffffcff
 8017ae0:	ffffdfff 	.word	0xffffdfff

08017ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b086      	sub	sp, #24
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	60f8      	str	r0, [r7, #12]
 8017aec:	60b9      	str	r1, [r7, #8]
 8017aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	221f      	movs	r2, #31
 8017af4:	4013      	ands	r3, r2
 8017af6:	2201      	movs	r2, #1
 8017af8:	409a      	lsls	r2, r3
 8017afa:	0013      	movs	r3, r2
 8017afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	6a1b      	ldr	r3, [r3, #32]
 8017b02:	697a      	ldr	r2, [r7, #20]
 8017b04:	43d2      	mvns	r2, r2
 8017b06:	401a      	ands	r2, r3
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	6a1a      	ldr	r2, [r3, #32]
 8017b10:	68bb      	ldr	r3, [r7, #8]
 8017b12:	211f      	movs	r1, #31
 8017b14:	400b      	ands	r3, r1
 8017b16:	6879      	ldr	r1, [r7, #4]
 8017b18:	4099      	lsls	r1, r3
 8017b1a:	000b      	movs	r3, r1
 8017b1c:	431a      	orrs	r2, r3
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	621a      	str	r2, [r3, #32]
}
 8017b22:	46c0      	nop			@ (mov r8, r8)
 8017b24:	46bd      	mov	sp, r7
 8017b26:	b006      	add	sp, #24
 8017b28:	bd80      	pop	{r7, pc}
	...

08017b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b084      	sub	sp, #16
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	2238      	movs	r2, #56	@ 0x38
 8017b3a:	5c9b      	ldrb	r3, [r3, r2]
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d101      	bne.n	8017b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017b40:	2302      	movs	r3, #2
 8017b42:	e047      	b.n	8017bd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	2238      	movs	r2, #56	@ 0x38
 8017b48:	2101      	movs	r1, #1
 8017b4a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	2239      	movs	r2, #57	@ 0x39
 8017b50:	2102      	movs	r1, #2
 8017b52:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	689b      	ldr	r3, [r3, #8]
 8017b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	2270      	movs	r2, #112	@ 0x70
 8017b68:	4393      	bics	r3, r2
 8017b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	68fa      	ldr	r2, [r7, #12]
 8017b72:	4313      	orrs	r3, r2
 8017b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	68fa      	ldr	r2, [r7, #12]
 8017b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681a      	ldr	r2, [r3, #0]
 8017b82:	2380      	movs	r3, #128	@ 0x80
 8017b84:	05db      	lsls	r3, r3, #23
 8017b86:	429a      	cmp	r2, r3
 8017b88:	d00e      	beq.n	8017ba8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	4a13      	ldr	r2, [pc, #76]	@ (8017bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8017b90:	4293      	cmp	r3, r2
 8017b92:	d009      	beq.n	8017ba8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	4a11      	ldr	r2, [pc, #68]	@ (8017be0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8017b9a:	4293      	cmp	r3, r2
 8017b9c:	d004      	beq.n	8017ba8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	4a10      	ldr	r2, [pc, #64]	@ (8017be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8017ba4:	4293      	cmp	r3, r2
 8017ba6:	d10c      	bne.n	8017bc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017ba8:	68bb      	ldr	r3, [r7, #8]
 8017baa:	2280      	movs	r2, #128	@ 0x80
 8017bac:	4393      	bics	r3, r2
 8017bae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	685b      	ldr	r3, [r3, #4]
 8017bb4:	68ba      	ldr	r2, [r7, #8]
 8017bb6:	4313      	orrs	r3, r2
 8017bb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	68ba      	ldr	r2, [r7, #8]
 8017bc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2239      	movs	r2, #57	@ 0x39
 8017bc6:	2101      	movs	r1, #1
 8017bc8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2238      	movs	r2, #56	@ 0x38
 8017bce:	2100      	movs	r1, #0
 8017bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017bd2:	2300      	movs	r3, #0
}
 8017bd4:	0018      	movs	r0, r3
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	b004      	add	sp, #16
 8017bda:	bd80      	pop	{r7, pc}
 8017bdc:	40000400 	.word	0x40000400
 8017be0:	40010800 	.word	0x40010800
 8017be4:	40011400 	.word	0x40011400

08017be8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	2238      	movs	r2, #56	@ 0x38
 8017bf6:	5c9b      	ldrb	r3, [r3, r2]
 8017bf8:	2b01      	cmp	r3, #1
 8017bfa:	d101      	bne.n	8017c00 <HAL_TIMEx_RemapConfig+0x18>
 8017bfc:	2302      	movs	r3, #2
 8017bfe:	e00c      	b.n	8017c1a <HAL_TIMEx_RemapConfig+0x32>
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2238      	movs	r2, #56	@ 0x38
 8017c04:	2101      	movs	r1, #1
 8017c06:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	683a      	ldr	r2, [r7, #0]
 8017c0e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2238      	movs	r2, #56	@ 0x38
 8017c14:	2100      	movs	r1, #0
 8017c16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017c18:	2300      	movs	r3, #0
}
 8017c1a:	0018      	movs	r0, r3
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	b002      	add	sp, #8
 8017c20:	bd80      	pop	{r7, pc}
	...

08017c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d101      	bne.n	8017c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017c32:	2301      	movs	r3, #1
 8017c34:	e053      	b.n	8017cde <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d116      	bne.n	8017c6c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	2278      	movs	r2, #120	@ 0x78
 8017c42:	2100      	movs	r1, #0
 8017c44:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	0018      	movs	r0, r3
 8017c4a:	f000 fd65 	bl	8018718 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	22b0      	movs	r2, #176	@ 0xb0
 8017c52:	589b      	ldr	r3, [r3, r2]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d103      	bne.n	8017c60 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	21b0      	movs	r1, #176	@ 0xb0
 8017c5c:	4a22      	ldr	r2, [pc, #136]	@ (8017ce8 <HAL_UART_Init+0xc4>)
 8017c5e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	22b0      	movs	r2, #176	@ 0xb0
 8017c64:	589b      	ldr	r3, [r3, r2]
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	0010      	movs	r0, r2
 8017c6a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	2224      	movs	r2, #36	@ 0x24
 8017c70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	681a      	ldr	r2, [r3, #0]
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	2101      	movs	r1, #1
 8017c7e:	438a      	bics	r2, r1
 8017c80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	0018      	movs	r0, r3
 8017c86:	f000 fd8b 	bl	80187a0 <UART_SetConfig>
 8017c8a:	0003      	movs	r3, r0
 8017c8c:	2b01      	cmp	r3, #1
 8017c8e:	d101      	bne.n	8017c94 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8017c90:	2301      	movs	r3, #1
 8017c92:	e024      	b.n	8017cde <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d003      	beq.n	8017ca4 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	0018      	movs	r0, r3
 8017ca0:	f001 f81c 	bl	8018cdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	685a      	ldr	r2, [r3, #4]
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	490f      	ldr	r1, [pc, #60]	@ (8017cec <HAL_UART_Init+0xc8>)
 8017cb0:	400a      	ands	r2, r1
 8017cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	689a      	ldr	r2, [r3, #8]
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	212a      	movs	r1, #42	@ 0x2a
 8017cc0:	438a      	bics	r2, r1
 8017cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	681a      	ldr	r2, [r3, #0]
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	2101      	movs	r1, #1
 8017cd0:	430a      	orrs	r2, r1
 8017cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	0018      	movs	r0, r3
 8017cd8:	f001 f8b4 	bl	8018e44 <UART_CheckIdleState>
 8017cdc:	0003      	movs	r3, r0
}
 8017cde:	0018      	movs	r0, r3
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	b002      	add	sp, #8
 8017ce4:	bd80      	pop	{r7, pc}
 8017ce6:	46c0      	nop			@ (mov r8, r8)
 8017ce8:	0800ecf5 	.word	0x0800ecf5
 8017cec:	ffffb7ff 	.word	0xffffb7ff

08017cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b08a      	sub	sp, #40	@ 0x28
 8017cf4:	af02      	add	r7, sp, #8
 8017cf6:	60f8      	str	r0, [r7, #12]
 8017cf8:	60b9      	str	r1, [r7, #8]
 8017cfa:	603b      	str	r3, [r7, #0]
 8017cfc:	1dbb      	adds	r3, r7, #6
 8017cfe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017d04:	2b20      	cmp	r3, #32
 8017d06:	d000      	beq.n	8017d0a <HAL_UART_Transmit+0x1a>
 8017d08:	e08c      	b.n	8017e24 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d003      	beq.n	8017d18 <HAL_UART_Transmit+0x28>
 8017d10:	1dbb      	adds	r3, r7, #6
 8017d12:	881b      	ldrh	r3, [r3, #0]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d101      	bne.n	8017d1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017d18:	2301      	movs	r3, #1
 8017d1a:	e084      	b.n	8017e26 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	689a      	ldr	r2, [r3, #8]
 8017d20:	2380      	movs	r3, #128	@ 0x80
 8017d22:	015b      	lsls	r3, r3, #5
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d109      	bne.n	8017d3c <HAL_UART_Transmit+0x4c>
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	691b      	ldr	r3, [r3, #16]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d105      	bne.n	8017d3c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	2201      	movs	r2, #1
 8017d34:	4013      	ands	r3, r2
 8017d36:	d001      	beq.n	8017d3c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017d38:	2301      	movs	r3, #1
 8017d3a:	e074      	b.n	8017e26 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	2284      	movs	r2, #132	@ 0x84
 8017d40:	2100      	movs	r1, #0
 8017d42:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	2221      	movs	r2, #33	@ 0x21
 8017d48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017d4a:	f7f7 fda5 	bl	800f898 <HAL_GetTick>
 8017d4e:	0003      	movs	r3, r0
 8017d50:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	1dba      	adds	r2, r7, #6
 8017d56:	2150      	movs	r1, #80	@ 0x50
 8017d58:	8812      	ldrh	r2, [r2, #0]
 8017d5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	1dba      	adds	r2, r7, #6
 8017d60:	2152      	movs	r1, #82	@ 0x52
 8017d62:	8812      	ldrh	r2, [r2, #0]
 8017d64:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	689a      	ldr	r2, [r3, #8]
 8017d6a:	2380      	movs	r3, #128	@ 0x80
 8017d6c:	015b      	lsls	r3, r3, #5
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d108      	bne.n	8017d84 <HAL_UART_Transmit+0x94>
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	691b      	ldr	r3, [r3, #16]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d104      	bne.n	8017d84 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	61bb      	str	r3, [r7, #24]
 8017d82:	e003      	b.n	8017d8c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017d84:	68bb      	ldr	r3, [r7, #8]
 8017d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017d8c:	e02f      	b.n	8017dee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017d8e:	697a      	ldr	r2, [r7, #20]
 8017d90:	68f8      	ldr	r0, [r7, #12]
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	9300      	str	r3, [sp, #0]
 8017d96:	0013      	movs	r3, r2
 8017d98:	2200      	movs	r2, #0
 8017d9a:	2180      	movs	r1, #128	@ 0x80
 8017d9c:	f001 f8fa 	bl	8018f94 <UART_WaitOnFlagUntilTimeout>
 8017da0:	1e03      	subs	r3, r0, #0
 8017da2:	d004      	beq.n	8017dae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	2220      	movs	r2, #32
 8017da8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8017daa:	2303      	movs	r3, #3
 8017dac:	e03b      	b.n	8017e26 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8017dae:	69fb      	ldr	r3, [r7, #28]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d10b      	bne.n	8017dcc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017db4:	69bb      	ldr	r3, [r7, #24]
 8017db6:	881b      	ldrh	r3, [r3, #0]
 8017db8:	001a      	movs	r2, r3
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	05d2      	lsls	r2, r2, #23
 8017dc0:	0dd2      	lsrs	r2, r2, #23
 8017dc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017dc4:	69bb      	ldr	r3, [r7, #24]
 8017dc6:	3302      	adds	r3, #2
 8017dc8:	61bb      	str	r3, [r7, #24]
 8017dca:	e007      	b.n	8017ddc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017dcc:	69fb      	ldr	r3, [r7, #28]
 8017dce:	781a      	ldrb	r2, [r3, #0]
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017dd6:	69fb      	ldr	r3, [r7, #28]
 8017dd8:	3301      	adds	r3, #1
 8017dda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	2252      	movs	r2, #82	@ 0x52
 8017de0:	5a9b      	ldrh	r3, [r3, r2]
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	3b01      	subs	r3, #1
 8017de6:	b299      	uxth	r1, r3
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	2252      	movs	r2, #82	@ 0x52
 8017dec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	2252      	movs	r2, #82	@ 0x52
 8017df2:	5a9b      	ldrh	r3, [r3, r2]
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d1c9      	bne.n	8017d8e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017dfa:	697a      	ldr	r2, [r7, #20]
 8017dfc:	68f8      	ldr	r0, [r7, #12]
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	9300      	str	r3, [sp, #0]
 8017e02:	0013      	movs	r3, r2
 8017e04:	2200      	movs	r2, #0
 8017e06:	2140      	movs	r1, #64	@ 0x40
 8017e08:	f001 f8c4 	bl	8018f94 <UART_WaitOnFlagUntilTimeout>
 8017e0c:	1e03      	subs	r3, r0, #0
 8017e0e:	d004      	beq.n	8017e1a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	2220      	movs	r2, #32
 8017e14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8017e16:	2303      	movs	r3, #3
 8017e18:	e005      	b.n	8017e26 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	2220      	movs	r2, #32
 8017e1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8017e20:	2300      	movs	r3, #0
 8017e22:	e000      	b.n	8017e26 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8017e24:	2302      	movs	r3, #2
  }
}
 8017e26:	0018      	movs	r0, r3
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	b008      	add	sp, #32
 8017e2c:	bd80      	pop	{r7, pc}
	...

08017e30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b088      	sub	sp, #32
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	1dbb      	adds	r3, r7, #6
 8017e3c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	2280      	movs	r2, #128	@ 0x80
 8017e42:	589b      	ldr	r3, [r3, r2]
 8017e44:	2b20      	cmp	r3, #32
 8017e46:	d14a      	bne.n	8017ede <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017e48:	68bb      	ldr	r3, [r7, #8]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d003      	beq.n	8017e56 <HAL_UART_Receive_IT+0x26>
 8017e4e:	1dbb      	adds	r3, r7, #6
 8017e50:	881b      	ldrh	r3, [r3, #0]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d101      	bne.n	8017e5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8017e56:	2301      	movs	r3, #1
 8017e58:	e042      	b.n	8017ee0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	689a      	ldr	r2, [r3, #8]
 8017e5e:	2380      	movs	r3, #128	@ 0x80
 8017e60:	015b      	lsls	r3, r3, #5
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d109      	bne.n	8017e7a <HAL_UART_Receive_IT+0x4a>
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	691b      	ldr	r3, [r3, #16]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d105      	bne.n	8017e7a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017e6e:	68bb      	ldr	r3, [r7, #8]
 8017e70:	2201      	movs	r2, #1
 8017e72:	4013      	ands	r3, r2
 8017e74:	d001      	beq.n	8017e7a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8017e76:	2301      	movs	r3, #1
 8017e78:	e032      	b.n	8017ee0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4a18      	ldr	r2, [pc, #96]	@ (8017ee8 <HAL_UART_Receive_IT+0xb8>)
 8017e86:	4293      	cmp	r3, r2
 8017e88:	d020      	beq.n	8017ecc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	685a      	ldr	r2, [r3, #4]
 8017e90:	2380      	movs	r3, #128	@ 0x80
 8017e92:	041b      	lsls	r3, r3, #16
 8017e94:	4013      	ands	r3, r2
 8017e96:	d019      	beq.n	8017ecc <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e98:	f3ef 8310 	mrs	r3, PRIMASK
 8017e9c:	613b      	str	r3, [r7, #16]
  return(result);
 8017e9e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017ea0:	61fb      	str	r3, [r7, #28]
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ea6:	697b      	ldr	r3, [r7, #20]
 8017ea8:	f383 8810 	msr	PRIMASK, r3
}
 8017eac:	46c0      	nop			@ (mov r8, r8)
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	681a      	ldr	r2, [r3, #0]
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	2180      	movs	r1, #128	@ 0x80
 8017eba:	04c9      	lsls	r1, r1, #19
 8017ebc:	430a      	orrs	r2, r1
 8017ebe:	601a      	str	r2, [r3, #0]
 8017ec0:	69fb      	ldr	r3, [r7, #28]
 8017ec2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ec4:	69bb      	ldr	r3, [r7, #24]
 8017ec6:	f383 8810 	msr	PRIMASK, r3
}
 8017eca:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017ecc:	1dbb      	adds	r3, r7, #6
 8017ece:	881a      	ldrh	r2, [r3, #0]
 8017ed0:	68b9      	ldr	r1, [r7, #8]
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	0018      	movs	r0, r3
 8017ed6:	f001 f8c7 	bl	8019068 <UART_Start_Receive_IT>
 8017eda:	0003      	movs	r3, r0
 8017edc:	e000      	b.n	8017ee0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017ede:	2302      	movs	r3, #2
  }
}
 8017ee0:	0018      	movs	r0, r3
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	b008      	add	sp, #32
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	40004800 	.word	0x40004800

08017eec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b088      	sub	sp, #32
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	60f8      	str	r0, [r7, #12]
 8017ef4:	60b9      	str	r1, [r7, #8]
 8017ef6:	1dbb      	adds	r3, r7, #6
 8017ef8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017efe:	2b20      	cmp	r3, #32
 8017f00:	d000      	beq.n	8017f04 <HAL_UART_Transmit_DMA+0x18>
 8017f02:	e077      	b.n	8017ff4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8017f04:	68bb      	ldr	r3, [r7, #8]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d003      	beq.n	8017f12 <HAL_UART_Transmit_DMA+0x26>
 8017f0a:	1dbb      	adds	r3, r7, #6
 8017f0c:	881b      	ldrh	r3, [r3, #0]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d101      	bne.n	8017f16 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8017f12:	2301      	movs	r3, #1
 8017f14:	e06f      	b.n	8017ff6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	689a      	ldr	r2, [r3, #8]
 8017f1a:	2380      	movs	r3, #128	@ 0x80
 8017f1c:	015b      	lsls	r3, r3, #5
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d109      	bne.n	8017f36 <HAL_UART_Transmit_DMA+0x4a>
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	691b      	ldr	r3, [r3, #16]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d105      	bne.n	8017f36 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017f2a:	68bb      	ldr	r3, [r7, #8]
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	4013      	ands	r3, r2
 8017f30:	d001      	beq.n	8017f36 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8017f32:	2301      	movs	r3, #1
 8017f34:	e05f      	b.n	8017ff6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	68ba      	ldr	r2, [r7, #8]
 8017f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	1dba      	adds	r2, r7, #6
 8017f40:	2150      	movs	r1, #80	@ 0x50
 8017f42:	8812      	ldrh	r2, [r2, #0]
 8017f44:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	1dba      	adds	r2, r7, #6
 8017f4a:	2152      	movs	r1, #82	@ 0x52
 8017f4c:	8812      	ldrh	r2, [r2, #0]
 8017f4e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	2284      	movs	r2, #132	@ 0x84
 8017f54:	2100      	movs	r1, #0
 8017f56:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	2221      	movs	r2, #33	@ 0x21
 8017f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d027      	beq.n	8017fb6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f6a:	4a25      	ldr	r2, [pc, #148]	@ (8018000 <HAL_UART_Transmit_DMA+0x114>)
 8017f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f72:	4a24      	ldr	r2, [pc, #144]	@ (8018004 <HAL_UART_Transmit_DMA+0x118>)
 8017f74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f7a:	4a23      	ldr	r2, [pc, #140]	@ (8018008 <HAL_UART_Transmit_DMA+0x11c>)
 8017f7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f82:	2200      	movs	r2, #0
 8017f84:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f8e:	0019      	movs	r1, r3
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	3328      	adds	r3, #40	@ 0x28
 8017f96:	001a      	movs	r2, r3
 8017f98:	1dbb      	adds	r3, r7, #6
 8017f9a:	881b      	ldrh	r3, [r3, #0]
 8017f9c:	f7f8 f9ce 	bl	801033c <HAL_DMA_Start_IT>
 8017fa0:	1e03      	subs	r3, r0, #0
 8017fa2:	d008      	beq.n	8017fb6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	2284      	movs	r2, #132	@ 0x84
 8017fa8:	2110      	movs	r1, #16
 8017faa:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	2220      	movs	r2, #32
 8017fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8017fb2:	2301      	movs	r3, #1
 8017fb4:	e01f      	b.n	8017ff6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	2240      	movs	r2, #64	@ 0x40
 8017fbc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8017fc2:	613b      	str	r3, [r7, #16]
  return(result);
 8017fc4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017fc6:	61fb      	str	r3, [r7, #28]
 8017fc8:	2301      	movs	r3, #1
 8017fca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	f383 8810 	msr	PRIMASK, r3
}
 8017fd2:	46c0      	nop			@ (mov r8, r8)
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	689a      	ldr	r2, [r3, #8]
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	2180      	movs	r1, #128	@ 0x80
 8017fe0:	430a      	orrs	r2, r1
 8017fe2:	609a      	str	r2, [r3, #8]
 8017fe4:	69fb      	ldr	r3, [r7, #28]
 8017fe6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fe8:	69bb      	ldr	r3, [r7, #24]
 8017fea:	f383 8810 	msr	PRIMASK, r3
}
 8017fee:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	e000      	b.n	8017ff6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8017ff4:	2302      	movs	r3, #2
  }
}
 8017ff6:	0018      	movs	r0, r3
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	b008      	add	sp, #32
 8017ffc:	bd80      	pop	{r7, pc}
 8017ffe:	46c0      	nop			@ (mov r8, r8)
 8018000:	0801944d 	.word	0x0801944d
 8018004:	080194e9 	.word	0x080194e9
 8018008:	08019689 	.word	0x08019689

0801800c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b088      	sub	sp, #32
 8018010:	af00      	add	r7, sp, #0
 8018012:	60f8      	str	r0, [r7, #12]
 8018014:	60b9      	str	r1, [r7, #8]
 8018016:	1dbb      	adds	r3, r7, #6
 8018018:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	2280      	movs	r2, #128	@ 0x80
 801801e:	589b      	ldr	r3, [r3, r2]
 8018020:	2b20      	cmp	r3, #32
 8018022:	d14a      	bne.n	80180ba <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8018024:	68bb      	ldr	r3, [r7, #8]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d003      	beq.n	8018032 <HAL_UART_Receive_DMA+0x26>
 801802a:	1dbb      	adds	r3, r7, #6
 801802c:	881b      	ldrh	r3, [r3, #0]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d101      	bne.n	8018036 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8018032:	2301      	movs	r3, #1
 8018034:	e042      	b.n	80180bc <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	689a      	ldr	r2, [r3, #8]
 801803a:	2380      	movs	r3, #128	@ 0x80
 801803c:	015b      	lsls	r3, r3, #5
 801803e:	429a      	cmp	r2, r3
 8018040:	d109      	bne.n	8018056 <HAL_UART_Receive_DMA+0x4a>
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	691b      	ldr	r3, [r3, #16]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d105      	bne.n	8018056 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801804a:	68bb      	ldr	r3, [r7, #8]
 801804c:	2201      	movs	r2, #1
 801804e:	4013      	ands	r3, r2
 8018050:	d001      	beq.n	8018056 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8018052:	2301      	movs	r3, #1
 8018054:	e032      	b.n	80180bc <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	2200      	movs	r2, #0
 801805a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	4a18      	ldr	r2, [pc, #96]	@ (80180c4 <HAL_UART_Receive_DMA+0xb8>)
 8018062:	4293      	cmp	r3, r2
 8018064:	d020      	beq.n	80180a8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	685a      	ldr	r2, [r3, #4]
 801806c:	2380      	movs	r3, #128	@ 0x80
 801806e:	041b      	lsls	r3, r3, #16
 8018070:	4013      	ands	r3, r2
 8018072:	d019      	beq.n	80180a8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018074:	f3ef 8310 	mrs	r3, PRIMASK
 8018078:	613b      	str	r3, [r7, #16]
  return(result);
 801807a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801807c:	61fb      	str	r3, [r7, #28]
 801807e:	2301      	movs	r3, #1
 8018080:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	f383 8810 	msr	PRIMASK, r3
}
 8018088:	46c0      	nop			@ (mov r8, r8)
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	681a      	ldr	r2, [r3, #0]
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	2180      	movs	r1, #128	@ 0x80
 8018096:	04c9      	lsls	r1, r1, #19
 8018098:	430a      	orrs	r2, r1
 801809a:	601a      	str	r2, [r3, #0]
 801809c:	69fb      	ldr	r3, [r7, #28]
 801809e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180a0:	69bb      	ldr	r3, [r7, #24]
 80180a2:	f383 8810 	msr	PRIMASK, r3
}
 80180a6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80180a8:	1dbb      	adds	r3, r7, #6
 80180aa:	881a      	ldrh	r2, [r3, #0]
 80180ac:	68b9      	ldr	r1, [r7, #8]
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	0018      	movs	r0, r3
 80180b2:	f001 f8a3 	bl	80191fc <UART_Start_Receive_DMA>
 80180b6:	0003      	movs	r3, r0
 80180b8:	e000      	b.n	80180bc <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80180ba:	2302      	movs	r3, #2
  }
}
 80180bc:	0018      	movs	r0, r3
 80180be:	46bd      	mov	sp, r7
 80180c0:	b008      	add	sp, #32
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	40004800 	.word	0x40004800

080180c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80180c8:	b590      	push	{r4, r7, lr}
 80180ca:	b0ab      	sub	sp, #172	@ 0xac
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	69db      	ldr	r3, [r3, #28]
 80180d6:	22a4      	movs	r2, #164	@ 0xa4
 80180d8:	18b9      	adds	r1, r7, r2
 80180da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	20a0      	movs	r0, #160	@ 0xa0
 80180e4:	1839      	adds	r1, r7, r0
 80180e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	689b      	ldr	r3, [r3, #8]
 80180ee:	219c      	movs	r1, #156	@ 0x9c
 80180f0:	1879      	adds	r1, r7, r1
 80180f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80180f4:	0011      	movs	r1, r2
 80180f6:	18bb      	adds	r3, r7, r2
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	4a9c      	ldr	r2, [pc, #624]	@ (801836c <HAL_UART_IRQHandler+0x2a4>)
 80180fc:	4013      	ands	r3, r2
 80180fe:	2298      	movs	r2, #152	@ 0x98
 8018100:	18bc      	adds	r4, r7, r2
 8018102:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8018104:	18bb      	adds	r3, r7, r2
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d114      	bne.n	8018136 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801810c:	187b      	adds	r3, r7, r1
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	2220      	movs	r2, #32
 8018112:	4013      	ands	r3, r2
 8018114:	d00f      	beq.n	8018136 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018116:	183b      	adds	r3, r7, r0
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	2220      	movs	r2, #32
 801811c:	4013      	ands	r3, r2
 801811e:	d00a      	beq.n	8018136 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018124:	2b00      	cmp	r3, #0
 8018126:	d100      	bne.n	801812a <HAL_UART_IRQHandler+0x62>
 8018128:	e2aa      	b.n	8018680 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801812e:	687a      	ldr	r2, [r7, #4]
 8018130:	0010      	movs	r0, r2
 8018132:	4798      	blx	r3
      }
      return;
 8018134:	e2a4      	b.n	8018680 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018136:	2398      	movs	r3, #152	@ 0x98
 8018138:	18fb      	adds	r3, r7, r3
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d100      	bne.n	8018142 <HAL_UART_IRQHandler+0x7a>
 8018140:	e11a      	b.n	8018378 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8018142:	239c      	movs	r3, #156	@ 0x9c
 8018144:	18fb      	adds	r3, r7, r3
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2201      	movs	r2, #1
 801814a:	4013      	ands	r3, r2
 801814c:	d106      	bne.n	801815c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801814e:	23a0      	movs	r3, #160	@ 0xa0
 8018150:	18fb      	adds	r3, r7, r3
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	4a86      	ldr	r2, [pc, #536]	@ (8018370 <HAL_UART_IRQHandler+0x2a8>)
 8018156:	4013      	ands	r3, r2
 8018158:	d100      	bne.n	801815c <HAL_UART_IRQHandler+0x94>
 801815a:	e10d      	b.n	8018378 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801815c:	23a4      	movs	r3, #164	@ 0xa4
 801815e:	18fb      	adds	r3, r7, r3
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	2201      	movs	r2, #1
 8018164:	4013      	ands	r3, r2
 8018166:	d012      	beq.n	801818e <HAL_UART_IRQHandler+0xc6>
 8018168:	23a0      	movs	r3, #160	@ 0xa0
 801816a:	18fb      	adds	r3, r7, r3
 801816c:	681a      	ldr	r2, [r3, #0]
 801816e:	2380      	movs	r3, #128	@ 0x80
 8018170:	005b      	lsls	r3, r3, #1
 8018172:	4013      	ands	r3, r2
 8018174:	d00b      	beq.n	801818e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	2201      	movs	r2, #1
 801817c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	2284      	movs	r2, #132	@ 0x84
 8018182:	589b      	ldr	r3, [r3, r2]
 8018184:	2201      	movs	r2, #1
 8018186:	431a      	orrs	r2, r3
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2184      	movs	r1, #132	@ 0x84
 801818c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801818e:	23a4      	movs	r3, #164	@ 0xa4
 8018190:	18fb      	adds	r3, r7, r3
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	2202      	movs	r2, #2
 8018196:	4013      	ands	r3, r2
 8018198:	d011      	beq.n	80181be <HAL_UART_IRQHandler+0xf6>
 801819a:	239c      	movs	r3, #156	@ 0x9c
 801819c:	18fb      	adds	r3, r7, r3
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	2201      	movs	r2, #1
 80181a2:	4013      	ands	r3, r2
 80181a4:	d00b      	beq.n	80181be <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	2202      	movs	r2, #2
 80181ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	2284      	movs	r2, #132	@ 0x84
 80181b2:	589b      	ldr	r3, [r3, r2]
 80181b4:	2204      	movs	r2, #4
 80181b6:	431a      	orrs	r2, r3
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	2184      	movs	r1, #132	@ 0x84
 80181bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80181be:	23a4      	movs	r3, #164	@ 0xa4
 80181c0:	18fb      	adds	r3, r7, r3
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2204      	movs	r2, #4
 80181c6:	4013      	ands	r3, r2
 80181c8:	d011      	beq.n	80181ee <HAL_UART_IRQHandler+0x126>
 80181ca:	239c      	movs	r3, #156	@ 0x9c
 80181cc:	18fb      	adds	r3, r7, r3
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2201      	movs	r2, #1
 80181d2:	4013      	ands	r3, r2
 80181d4:	d00b      	beq.n	80181ee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	2204      	movs	r2, #4
 80181dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	2284      	movs	r2, #132	@ 0x84
 80181e2:	589b      	ldr	r3, [r3, r2]
 80181e4:	2202      	movs	r2, #2
 80181e6:	431a      	orrs	r2, r3
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2184      	movs	r1, #132	@ 0x84
 80181ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80181ee:	23a4      	movs	r3, #164	@ 0xa4
 80181f0:	18fb      	adds	r3, r7, r3
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	2208      	movs	r2, #8
 80181f6:	4013      	ands	r3, r2
 80181f8:	d017      	beq.n	801822a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80181fa:	23a0      	movs	r3, #160	@ 0xa0
 80181fc:	18fb      	adds	r3, r7, r3
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	2220      	movs	r2, #32
 8018202:	4013      	ands	r3, r2
 8018204:	d105      	bne.n	8018212 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8018206:	239c      	movs	r3, #156	@ 0x9c
 8018208:	18fb      	adds	r3, r7, r3
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	2201      	movs	r2, #1
 801820e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8018210:	d00b      	beq.n	801822a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	2208      	movs	r2, #8
 8018218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	2284      	movs	r2, #132	@ 0x84
 801821e:	589b      	ldr	r3, [r3, r2]
 8018220:	2208      	movs	r2, #8
 8018222:	431a      	orrs	r2, r3
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	2184      	movs	r1, #132	@ 0x84
 8018228:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801822a:	23a4      	movs	r3, #164	@ 0xa4
 801822c:	18fb      	adds	r3, r7, r3
 801822e:	681a      	ldr	r2, [r3, #0]
 8018230:	2380      	movs	r3, #128	@ 0x80
 8018232:	011b      	lsls	r3, r3, #4
 8018234:	4013      	ands	r3, r2
 8018236:	d013      	beq.n	8018260 <HAL_UART_IRQHandler+0x198>
 8018238:	23a0      	movs	r3, #160	@ 0xa0
 801823a:	18fb      	adds	r3, r7, r3
 801823c:	681a      	ldr	r2, [r3, #0]
 801823e:	2380      	movs	r3, #128	@ 0x80
 8018240:	04db      	lsls	r3, r3, #19
 8018242:	4013      	ands	r3, r2
 8018244:	d00c      	beq.n	8018260 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	2280      	movs	r2, #128	@ 0x80
 801824c:	0112      	lsls	r2, r2, #4
 801824e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2284      	movs	r2, #132	@ 0x84
 8018254:	589b      	ldr	r3, [r3, r2]
 8018256:	2220      	movs	r2, #32
 8018258:	431a      	orrs	r2, r3
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	2184      	movs	r1, #132	@ 0x84
 801825e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	2284      	movs	r2, #132	@ 0x84
 8018264:	589b      	ldr	r3, [r3, r2]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d100      	bne.n	801826c <HAL_UART_IRQHandler+0x1a4>
 801826a:	e20b      	b.n	8018684 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801826c:	23a4      	movs	r3, #164	@ 0xa4
 801826e:	18fb      	adds	r3, r7, r3
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	2220      	movs	r2, #32
 8018274:	4013      	ands	r3, r2
 8018276:	d00e      	beq.n	8018296 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018278:	23a0      	movs	r3, #160	@ 0xa0
 801827a:	18fb      	adds	r3, r7, r3
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	2220      	movs	r2, #32
 8018280:	4013      	ands	r3, r2
 8018282:	d008      	beq.n	8018296 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018288:	2b00      	cmp	r3, #0
 801828a:	d004      	beq.n	8018296 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018290:	687a      	ldr	r2, [r7, #4]
 8018292:	0010      	movs	r0, r2
 8018294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	2284      	movs	r2, #132	@ 0x84
 801829a:	589b      	ldr	r3, [r3, r2]
 801829c:	2194      	movs	r1, #148	@ 0x94
 801829e:	187a      	adds	r2, r7, r1
 80182a0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	689b      	ldr	r3, [r3, #8]
 80182a8:	2240      	movs	r2, #64	@ 0x40
 80182aa:	4013      	ands	r3, r2
 80182ac:	2b40      	cmp	r3, #64	@ 0x40
 80182ae:	d004      	beq.n	80182ba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80182b0:	187b      	adds	r3, r7, r1
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	2228      	movs	r2, #40	@ 0x28
 80182b6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80182b8:	d04b      	beq.n	8018352 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	0018      	movs	r0, r3
 80182be:	f001 f861 	bl	8019384 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	689b      	ldr	r3, [r3, #8]
 80182c8:	2240      	movs	r2, #64	@ 0x40
 80182ca:	4013      	ands	r3, r2
 80182cc:	2b40      	cmp	r3, #64	@ 0x40
 80182ce:	d139      	bne.n	8018344 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182d0:	f3ef 8310 	mrs	r3, PRIMASK
 80182d4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80182d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80182d8:	2090      	movs	r0, #144	@ 0x90
 80182da:	183a      	adds	r2, r7, r0
 80182dc:	6013      	str	r3, [r2, #0]
 80182de:	2301      	movs	r3, #1
 80182e0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80182e4:	f383 8810 	msr	PRIMASK, r3
}
 80182e8:	46c0      	nop			@ (mov r8, r8)
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	689a      	ldr	r2, [r3, #8]
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	2140      	movs	r1, #64	@ 0x40
 80182f6:	438a      	bics	r2, r1
 80182f8:	609a      	str	r2, [r3, #8]
 80182fa:	183b      	adds	r3, r7, r0
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018302:	f383 8810 	msr	PRIMASK, r3
}
 8018306:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801830c:	2b00      	cmp	r3, #0
 801830e:	d012      	beq.n	8018336 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018314:	4a17      	ldr	r2, [pc, #92]	@ (8018374 <HAL_UART_IRQHandler+0x2ac>)
 8018316:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801831c:	0018      	movs	r0, r3
 801831e:	f7f8 f8b3 	bl	8010488 <HAL_DMA_Abort_IT>
 8018322:	1e03      	subs	r3, r0, #0
 8018324:	d020      	beq.n	8018368 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801832a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018330:	0018      	movs	r0, r3
 8018332:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018334:	e018      	b.n	8018368 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	2298      	movs	r2, #152	@ 0x98
 801833a:	589b      	ldr	r3, [r3, r2]
 801833c:	687a      	ldr	r2, [r7, #4]
 801833e:	0010      	movs	r0, r2
 8018340:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018342:	e011      	b.n	8018368 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	2298      	movs	r2, #152	@ 0x98
 8018348:	589b      	ldr	r3, [r3, r2]
 801834a:	687a      	ldr	r2, [r7, #4]
 801834c:	0010      	movs	r0, r2
 801834e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018350:	e00a      	b.n	8018368 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2298      	movs	r2, #152	@ 0x98
 8018356:	589b      	ldr	r3, [r3, r2]
 8018358:	687a      	ldr	r2, [r7, #4]
 801835a:	0010      	movs	r0, r2
 801835c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2284      	movs	r2, #132	@ 0x84
 8018362:	2100      	movs	r1, #0
 8018364:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8018366:	e18d      	b.n	8018684 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018368:	46c0      	nop			@ (mov r8, r8)
    return;
 801836a:	e18b      	b.n	8018684 <HAL_UART_IRQHandler+0x5bc>
 801836c:	0000080f 	.word	0x0000080f
 8018370:	04000120 	.word	0x04000120
 8018374:	08019711 	.word	0x08019711

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801837c:	2b01      	cmp	r3, #1
 801837e:	d000      	beq.n	8018382 <HAL_UART_IRQHandler+0x2ba>
 8018380:	e13d      	b.n	80185fe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8018382:	23a4      	movs	r3, #164	@ 0xa4
 8018384:	18fb      	adds	r3, r7, r3
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	2210      	movs	r2, #16
 801838a:	4013      	ands	r3, r2
 801838c:	d100      	bne.n	8018390 <HAL_UART_IRQHandler+0x2c8>
 801838e:	e136      	b.n	80185fe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8018390:	23a0      	movs	r3, #160	@ 0xa0
 8018392:	18fb      	adds	r3, r7, r3
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	2210      	movs	r2, #16
 8018398:	4013      	ands	r3, r2
 801839a:	d100      	bne.n	801839e <HAL_UART_IRQHandler+0x2d6>
 801839c:	e12f      	b.n	80185fe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	2210      	movs	r2, #16
 80183a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	689b      	ldr	r3, [r3, #8]
 80183ac:	2240      	movs	r2, #64	@ 0x40
 80183ae:	4013      	ands	r3, r2
 80183b0:	2b40      	cmp	r3, #64	@ 0x40
 80183b2:	d000      	beq.n	80183b6 <HAL_UART_IRQHandler+0x2ee>
 80183b4:	e0a2      	b.n	80184fc <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	685a      	ldr	r2, [r3, #4]
 80183be:	217e      	movs	r1, #126	@ 0x7e
 80183c0:	187b      	adds	r3, r7, r1
 80183c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80183c4:	187b      	adds	r3, r7, r1
 80183c6:	881b      	ldrh	r3, [r3, #0]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d100      	bne.n	80183ce <HAL_UART_IRQHandler+0x306>
 80183cc:	e15c      	b.n	8018688 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	2258      	movs	r2, #88	@ 0x58
 80183d2:	5a9b      	ldrh	r3, [r3, r2]
 80183d4:	187a      	adds	r2, r7, r1
 80183d6:	8812      	ldrh	r2, [r2, #0]
 80183d8:	429a      	cmp	r2, r3
 80183da:	d300      	bcc.n	80183de <HAL_UART_IRQHandler+0x316>
 80183dc:	e154      	b.n	8018688 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	187a      	adds	r2, r7, r1
 80183e2:	215a      	movs	r1, #90	@ 0x5a
 80183e4:	8812      	ldrh	r2, [r2, #0]
 80183e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	2220      	movs	r2, #32
 80183f2:	4013      	ands	r3, r2
 80183f4:	d16f      	bne.n	80184d6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183f6:	f3ef 8310 	mrs	r3, PRIMASK
 80183fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80183fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80183fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8018400:	2301      	movs	r3, #1
 8018402:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018406:	f383 8810 	msr	PRIMASK, r3
}
 801840a:	46c0      	nop			@ (mov r8, r8)
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	681a      	ldr	r2, [r3, #0]
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	49a0      	ldr	r1, [pc, #640]	@ (8018698 <HAL_UART_IRQHandler+0x5d0>)
 8018418:	400a      	ands	r2, r1
 801841a:	601a      	str	r2, [r3, #0]
 801841c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801841e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018422:	f383 8810 	msr	PRIMASK, r3
}
 8018426:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018428:	f3ef 8310 	mrs	r3, PRIMASK
 801842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801842e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018430:	677b      	str	r3, [r7, #116]	@ 0x74
 8018432:	2301      	movs	r3, #1
 8018434:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018438:	f383 8810 	msr	PRIMASK, r3
}
 801843c:	46c0      	nop			@ (mov r8, r8)
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	689a      	ldr	r2, [r3, #8]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2101      	movs	r1, #1
 801844a:	438a      	bics	r2, r1
 801844c:	609a      	str	r2, [r3, #8]
 801844e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018450:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018454:	f383 8810 	msr	PRIMASK, r3
}
 8018458:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801845a:	f3ef 8310 	mrs	r3, PRIMASK
 801845e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8018460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018462:	673b      	str	r3, [r7, #112]	@ 0x70
 8018464:	2301      	movs	r3, #1
 8018466:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801846a:	f383 8810 	msr	PRIMASK, r3
}
 801846e:	46c0      	nop			@ (mov r8, r8)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	689a      	ldr	r2, [r3, #8]
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	2140      	movs	r1, #64	@ 0x40
 801847c:	438a      	bics	r2, r1
 801847e:	609a      	str	r2, [r3, #8]
 8018480:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018482:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018486:	f383 8810 	msr	PRIMASK, r3
}
 801848a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2280      	movs	r2, #128	@ 0x80
 8018490:	2120      	movs	r1, #32
 8018492:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2200      	movs	r2, #0
 8018498:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801849a:	f3ef 8310 	mrs	r3, PRIMASK
 801849e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80184a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80184a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80184a4:	2301      	movs	r3, #1
 80184a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184aa:	f383 8810 	msr	PRIMASK, r3
}
 80184ae:	46c0      	nop			@ (mov r8, r8)
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	681a      	ldr	r2, [r3, #0]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	2110      	movs	r1, #16
 80184bc:	438a      	bics	r2, r1
 80184be:	601a      	str	r2, [r3, #0]
 80184c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80184c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80184c6:	f383 8810 	msr	PRIMASK, r3
}
 80184ca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80184d0:	0018      	movs	r0, r3
 80184d2:	f7f7 ff99 	bl	8010408 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2202      	movs	r2, #2
 80184da:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	22ac      	movs	r2, #172	@ 0xac
 80184e0:	589b      	ldr	r3, [r3, r2]
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	2158      	movs	r1, #88	@ 0x58
 80184e6:	5a51      	ldrh	r1, [r2, r1]
 80184e8:	687a      	ldr	r2, [r7, #4]
 80184ea:	205a      	movs	r0, #90	@ 0x5a
 80184ec:	5a12      	ldrh	r2, [r2, r0]
 80184ee:	b292      	uxth	r2, r2
 80184f0:	1a8a      	subs	r2, r1, r2
 80184f2:	b291      	uxth	r1, r2
 80184f4:	687a      	ldr	r2, [r7, #4]
 80184f6:	0010      	movs	r0, r2
 80184f8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80184fa:	e0c5      	b.n	8018688 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	2258      	movs	r2, #88	@ 0x58
 8018500:	5a99      	ldrh	r1, [r3, r2]
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	225a      	movs	r2, #90	@ 0x5a
 8018506:	5a9b      	ldrh	r3, [r3, r2]
 8018508:	b29a      	uxth	r2, r3
 801850a:	208e      	movs	r0, #142	@ 0x8e
 801850c:	183b      	adds	r3, r7, r0
 801850e:	1a8a      	subs	r2, r1, r2
 8018510:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	225a      	movs	r2, #90	@ 0x5a
 8018516:	5a9b      	ldrh	r3, [r3, r2]
 8018518:	b29b      	uxth	r3, r3
 801851a:	2b00      	cmp	r3, #0
 801851c:	d100      	bne.n	8018520 <HAL_UART_IRQHandler+0x458>
 801851e:	e0b5      	b.n	801868c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8018520:	183b      	adds	r3, r7, r0
 8018522:	881b      	ldrh	r3, [r3, #0]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d100      	bne.n	801852a <HAL_UART_IRQHandler+0x462>
 8018528:	e0b0      	b.n	801868c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801852a:	f3ef 8310 	mrs	r3, PRIMASK
 801852e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018530:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018532:	2488      	movs	r4, #136	@ 0x88
 8018534:	193a      	adds	r2, r7, r4
 8018536:	6013      	str	r3, [r2, #0]
 8018538:	2301      	movs	r3, #1
 801853a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	f383 8810 	msr	PRIMASK, r3
}
 8018542:	46c0      	nop			@ (mov r8, r8)
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	681a      	ldr	r2, [r3, #0]
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	4953      	ldr	r1, [pc, #332]	@ (801869c <HAL_UART_IRQHandler+0x5d4>)
 8018550:	400a      	ands	r2, r1
 8018552:	601a      	str	r2, [r3, #0]
 8018554:	193b      	adds	r3, r7, r4
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801855a:	697b      	ldr	r3, [r7, #20]
 801855c:	f383 8810 	msr	PRIMASK, r3
}
 8018560:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018562:	f3ef 8310 	mrs	r3, PRIMASK
 8018566:	61bb      	str	r3, [r7, #24]
  return(result);
 8018568:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801856a:	2484      	movs	r4, #132	@ 0x84
 801856c:	193a      	adds	r2, r7, r4
 801856e:	6013      	str	r3, [r2, #0]
 8018570:	2301      	movs	r3, #1
 8018572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018574:	69fb      	ldr	r3, [r7, #28]
 8018576:	f383 8810 	msr	PRIMASK, r3
}
 801857a:	46c0      	nop			@ (mov r8, r8)
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	689a      	ldr	r2, [r3, #8]
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2101      	movs	r1, #1
 8018588:	438a      	bics	r2, r1
 801858a:	609a      	str	r2, [r3, #8]
 801858c:	193b      	adds	r3, r7, r4
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018592:	6a3b      	ldr	r3, [r7, #32]
 8018594:	f383 8810 	msr	PRIMASK, r3
}
 8018598:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	2280      	movs	r2, #128	@ 0x80
 801859e:	2120      	movs	r1, #32
 80185a0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	2200      	movs	r2, #0
 80185a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	2200      	movs	r2, #0
 80185ac:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185ae:	f3ef 8310 	mrs	r3, PRIMASK
 80185b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80185b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80185b6:	2480      	movs	r4, #128	@ 0x80
 80185b8:	193a      	adds	r2, r7, r4
 80185ba:	6013      	str	r3, [r2, #0]
 80185bc:	2301      	movs	r3, #1
 80185be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185c2:	f383 8810 	msr	PRIMASK, r3
}
 80185c6:	46c0      	nop			@ (mov r8, r8)
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	681a      	ldr	r2, [r3, #0]
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	2110      	movs	r1, #16
 80185d4:	438a      	bics	r2, r1
 80185d6:	601a      	str	r2, [r3, #0]
 80185d8:	193b      	adds	r3, r7, r4
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185e0:	f383 8810 	msr	PRIMASK, r3
}
 80185e4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	2202      	movs	r2, #2
 80185ea:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	22ac      	movs	r2, #172	@ 0xac
 80185f0:	589b      	ldr	r3, [r3, r2]
 80185f2:	183a      	adds	r2, r7, r0
 80185f4:	8811      	ldrh	r1, [r2, #0]
 80185f6:	687a      	ldr	r2, [r7, #4]
 80185f8:	0010      	movs	r0, r2
 80185fa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80185fc:	e046      	b.n	801868c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80185fe:	23a4      	movs	r3, #164	@ 0xa4
 8018600:	18fb      	adds	r3, r7, r3
 8018602:	681a      	ldr	r2, [r3, #0]
 8018604:	2380      	movs	r3, #128	@ 0x80
 8018606:	035b      	lsls	r3, r3, #13
 8018608:	4013      	ands	r3, r2
 801860a:	d012      	beq.n	8018632 <HAL_UART_IRQHandler+0x56a>
 801860c:	239c      	movs	r3, #156	@ 0x9c
 801860e:	18fb      	adds	r3, r7, r3
 8018610:	681a      	ldr	r2, [r3, #0]
 8018612:	2380      	movs	r3, #128	@ 0x80
 8018614:	03db      	lsls	r3, r3, #15
 8018616:	4013      	ands	r3, r2
 8018618:	d00b      	beq.n	8018632 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	2280      	movs	r2, #128	@ 0x80
 8018620:	0352      	lsls	r2, r2, #13
 8018622:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	22a8      	movs	r2, #168	@ 0xa8
 8018628:	589b      	ldr	r3, [r3, r2]
 801862a:	687a      	ldr	r2, [r7, #4]
 801862c:	0010      	movs	r0, r2
 801862e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018630:	e02f      	b.n	8018692 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8018632:	23a4      	movs	r3, #164	@ 0xa4
 8018634:	18fb      	adds	r3, r7, r3
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	2280      	movs	r2, #128	@ 0x80
 801863a:	4013      	ands	r3, r2
 801863c:	d00f      	beq.n	801865e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801863e:	23a0      	movs	r3, #160	@ 0xa0
 8018640:	18fb      	adds	r3, r7, r3
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	2280      	movs	r2, #128	@ 0x80
 8018646:	4013      	ands	r3, r2
 8018648:	d009      	beq.n	801865e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801864e:	2b00      	cmp	r3, #0
 8018650:	d01e      	beq.n	8018690 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018656:	687a      	ldr	r2, [r7, #4]
 8018658:	0010      	movs	r0, r2
 801865a:	4798      	blx	r3
    }
    return;
 801865c:	e018      	b.n	8018690 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801865e:	23a4      	movs	r3, #164	@ 0xa4
 8018660:	18fb      	adds	r3, r7, r3
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2240      	movs	r2, #64	@ 0x40
 8018666:	4013      	ands	r3, r2
 8018668:	d013      	beq.n	8018692 <HAL_UART_IRQHandler+0x5ca>
 801866a:	23a0      	movs	r3, #160	@ 0xa0
 801866c:	18fb      	adds	r3, r7, r3
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	2240      	movs	r2, #64	@ 0x40
 8018672:	4013      	ands	r3, r2
 8018674:	d00d      	beq.n	8018692 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	0018      	movs	r0, r3
 801867a:	f001 f862 	bl	8019742 <UART_EndTransmit_IT>
    return;
 801867e:	e008      	b.n	8018692 <HAL_UART_IRQHandler+0x5ca>
      return;
 8018680:	46c0      	nop			@ (mov r8, r8)
 8018682:	e006      	b.n	8018692 <HAL_UART_IRQHandler+0x5ca>
    return;
 8018684:	46c0      	nop			@ (mov r8, r8)
 8018686:	e004      	b.n	8018692 <HAL_UART_IRQHandler+0x5ca>
      return;
 8018688:	46c0      	nop			@ (mov r8, r8)
 801868a:	e002      	b.n	8018692 <HAL_UART_IRQHandler+0x5ca>
      return;
 801868c:	46c0      	nop			@ (mov r8, r8)
 801868e:	e000      	b.n	8018692 <HAL_UART_IRQHandler+0x5ca>
    return;
 8018690:	46c0      	nop			@ (mov r8, r8)
  }

}
 8018692:	46bd      	mov	sp, r7
 8018694:	b02b      	add	sp, #172	@ 0xac
 8018696:	bd90      	pop	{r4, r7, pc}
 8018698:	fffffeff 	.word	0xfffffeff
 801869c:	fffffedf 	.word	0xfffffedf

080186a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b082      	sub	sp, #8
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80186a8:	46c0      	nop			@ (mov r8, r8)
 80186aa:	46bd      	mov	sp, r7
 80186ac:	b002      	add	sp, #8
 80186ae:	bd80      	pop	{r7, pc}

080186b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b082      	sub	sp, #8
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80186b8:	46c0      	nop			@ (mov r8, r8)
 80186ba:	46bd      	mov	sp, r7
 80186bc:	b002      	add	sp, #8
 80186be:	bd80      	pop	{r7, pc}

080186c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b082      	sub	sp, #8
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80186c8:	46c0      	nop			@ (mov r8, r8)
 80186ca:	46bd      	mov	sp, r7
 80186cc:	b002      	add	sp, #8
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b082      	sub	sp, #8
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80186d8:	46c0      	nop			@ (mov r8, r8)
 80186da:	46bd      	mov	sp, r7
 80186dc:	b002      	add	sp, #8
 80186de:	bd80      	pop	{r7, pc}

080186e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b082      	sub	sp, #8
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80186e8:	46c0      	nop			@ (mov r8, r8)
 80186ea:	46bd      	mov	sp, r7
 80186ec:	b002      	add	sp, #8
 80186ee:	bd80      	pop	{r7, pc}

080186f0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b082      	sub	sp, #8
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80186f8:	46c0      	nop			@ (mov r8, r8)
 80186fa:	46bd      	mov	sp, r7
 80186fc:	b002      	add	sp, #8
 80186fe:	bd80      	pop	{r7, pc}

08018700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b082      	sub	sp, #8
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
 8018708:	000a      	movs	r2, r1
 801870a:	1cbb      	adds	r3, r7, #2
 801870c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801870e:	46c0      	nop			@ (mov r8, r8)
 8018710:	46bd      	mov	sp, r7
 8018712:	b002      	add	sp, #8
 8018714:	bd80      	pop	{r7, pc}
	...

08018718 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	2188      	movs	r1, #136	@ 0x88
 8018724:	4a14      	ldr	r2, [pc, #80]	@ (8018778 <UART_InitCallbacksToDefault+0x60>)
 8018726:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	218c      	movs	r1, #140	@ 0x8c
 801872c:	4a13      	ldr	r2, [pc, #76]	@ (801877c <UART_InitCallbacksToDefault+0x64>)
 801872e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2190      	movs	r1, #144	@ 0x90
 8018734:	4a12      	ldr	r2, [pc, #72]	@ (8018780 <UART_InitCallbacksToDefault+0x68>)
 8018736:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	2194      	movs	r1, #148	@ 0x94
 801873c:	4a11      	ldr	r2, [pc, #68]	@ (8018784 <UART_InitCallbacksToDefault+0x6c>)
 801873e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	2198      	movs	r1, #152	@ 0x98
 8018744:	4a10      	ldr	r2, [pc, #64]	@ (8018788 <UART_InitCallbacksToDefault+0x70>)
 8018746:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	219c      	movs	r1, #156	@ 0x9c
 801874c:	4a0f      	ldr	r2, [pc, #60]	@ (801878c <UART_InitCallbacksToDefault+0x74>)
 801874e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	21a0      	movs	r1, #160	@ 0xa0
 8018754:	4a0e      	ldr	r2, [pc, #56]	@ (8018790 <UART_InitCallbacksToDefault+0x78>)
 8018756:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	21a4      	movs	r1, #164	@ 0xa4
 801875c:	4a0d      	ldr	r2, [pc, #52]	@ (8018794 <UART_InitCallbacksToDefault+0x7c>)
 801875e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	21a8      	movs	r1, #168	@ 0xa8
 8018764:	4a0c      	ldr	r2, [pc, #48]	@ (8018798 <UART_InitCallbacksToDefault+0x80>)
 8018766:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	21ac      	movs	r1, #172	@ 0xac
 801876c:	4a0b      	ldr	r2, [pc, #44]	@ (801879c <UART_InitCallbacksToDefault+0x84>)
 801876e:	505a      	str	r2, [r3, r1]

}
 8018770:	46c0      	nop			@ (mov r8, r8)
 8018772:	46bd      	mov	sp, r7
 8018774:	b002      	add	sp, #8
 8018776:	bd80      	pop	{r7, pc}
 8018778:	080186b1 	.word	0x080186b1
 801877c:	080186a1 	.word	0x080186a1
 8018780:	080186c1 	.word	0x080186c1
 8018784:	08008cd9 	.word	0x08008cd9
 8018788:	08003be9 	.word	0x08003be9
 801878c:	080186d1 	.word	0x080186d1
 8018790:	080186e1 	.word	0x080186e1
 8018794:	080186f1 	.word	0x080186f1
 8018798:	08019b35 	.word	0x08019b35
 801879c:	08018701 	.word	0x08018701

080187a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80187a0:	b5b0      	push	{r4, r5, r7, lr}
 80187a2:	b08e      	sub	sp, #56	@ 0x38
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80187a8:	231a      	movs	r3, #26
 80187aa:	2218      	movs	r2, #24
 80187ac:	189b      	adds	r3, r3, r2
 80187ae:	19db      	adds	r3, r3, r7
 80187b0:	2200      	movs	r2, #0
 80187b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80187b4:	69fb      	ldr	r3, [r7, #28]
 80187b6:	689a      	ldr	r2, [r3, #8]
 80187b8:	69fb      	ldr	r3, [r7, #28]
 80187ba:	691b      	ldr	r3, [r3, #16]
 80187bc:	431a      	orrs	r2, r3
 80187be:	69fb      	ldr	r3, [r7, #28]
 80187c0:	695b      	ldr	r3, [r3, #20]
 80187c2:	431a      	orrs	r2, r3
 80187c4:	69fb      	ldr	r3, [r7, #28]
 80187c6:	69db      	ldr	r3, [r3, #28]
 80187c8:	4313      	orrs	r3, r2
 80187ca:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80187cc:	69fb      	ldr	r3, [r7, #28]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	4ac3      	ldr	r2, [pc, #780]	@ (8018ae0 <UART_SetConfig+0x340>)
 80187d4:	4013      	ands	r3, r2
 80187d6:	0019      	movs	r1, r3
 80187d8:	69fb      	ldr	r3, [r7, #28]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80187de:	430a      	orrs	r2, r1
 80187e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80187e2:	69fb      	ldr	r3, [r7, #28]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	4abe      	ldr	r2, [pc, #760]	@ (8018ae4 <UART_SetConfig+0x344>)
 80187ea:	4013      	ands	r3, r2
 80187ec:	0019      	movs	r1, r3
 80187ee:	69fb      	ldr	r3, [r7, #28]
 80187f0:	68da      	ldr	r2, [r3, #12]
 80187f2:	69fb      	ldr	r3, [r7, #28]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	430a      	orrs	r2, r1
 80187f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80187fa:	69fb      	ldr	r3, [r7, #28]
 80187fc:	699b      	ldr	r3, [r3, #24]
 80187fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018800:	69fb      	ldr	r3, [r7, #28]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	4ab8      	ldr	r2, [pc, #736]	@ (8018ae8 <UART_SetConfig+0x348>)
 8018806:	4293      	cmp	r3, r2
 8018808:	d004      	beq.n	8018814 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801880a:	69fb      	ldr	r3, [r7, #28]
 801880c:	6a1b      	ldr	r3, [r3, #32]
 801880e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018810:	4313      	orrs	r3, r2
 8018812:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018814:	69fb      	ldr	r3, [r7, #28]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	689b      	ldr	r3, [r3, #8]
 801881a:	4ab4      	ldr	r2, [pc, #720]	@ (8018aec <UART_SetConfig+0x34c>)
 801881c:	4013      	ands	r3, r2
 801881e:	0019      	movs	r1, r3
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018826:	430a      	orrs	r2, r1
 8018828:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801882a:	69fb      	ldr	r3, [r7, #28]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	4ab0      	ldr	r2, [pc, #704]	@ (8018af0 <UART_SetConfig+0x350>)
 8018830:	4293      	cmp	r3, r2
 8018832:	d131      	bne.n	8018898 <UART_SetConfig+0xf8>
 8018834:	4baf      	ldr	r3, [pc, #700]	@ (8018af4 <UART_SetConfig+0x354>)
 8018836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018838:	2203      	movs	r2, #3
 801883a:	4013      	ands	r3, r2
 801883c:	2b03      	cmp	r3, #3
 801883e:	d01d      	beq.n	801887c <UART_SetConfig+0xdc>
 8018840:	d823      	bhi.n	801888a <UART_SetConfig+0xea>
 8018842:	2b02      	cmp	r3, #2
 8018844:	d00c      	beq.n	8018860 <UART_SetConfig+0xc0>
 8018846:	d820      	bhi.n	801888a <UART_SetConfig+0xea>
 8018848:	2b00      	cmp	r3, #0
 801884a:	d002      	beq.n	8018852 <UART_SetConfig+0xb2>
 801884c:	2b01      	cmp	r3, #1
 801884e:	d00e      	beq.n	801886e <UART_SetConfig+0xce>
 8018850:	e01b      	b.n	801888a <UART_SetConfig+0xea>
 8018852:	231b      	movs	r3, #27
 8018854:	2218      	movs	r2, #24
 8018856:	189b      	adds	r3, r3, r2
 8018858:	19db      	adds	r3, r3, r7
 801885a:	2201      	movs	r2, #1
 801885c:	701a      	strb	r2, [r3, #0]
 801885e:	e0b4      	b.n	80189ca <UART_SetConfig+0x22a>
 8018860:	231b      	movs	r3, #27
 8018862:	2218      	movs	r2, #24
 8018864:	189b      	adds	r3, r3, r2
 8018866:	19db      	adds	r3, r3, r7
 8018868:	2202      	movs	r2, #2
 801886a:	701a      	strb	r2, [r3, #0]
 801886c:	e0ad      	b.n	80189ca <UART_SetConfig+0x22a>
 801886e:	231b      	movs	r3, #27
 8018870:	2218      	movs	r2, #24
 8018872:	189b      	adds	r3, r3, r2
 8018874:	19db      	adds	r3, r3, r7
 8018876:	2204      	movs	r2, #4
 8018878:	701a      	strb	r2, [r3, #0]
 801887a:	e0a6      	b.n	80189ca <UART_SetConfig+0x22a>
 801887c:	231b      	movs	r3, #27
 801887e:	2218      	movs	r2, #24
 8018880:	189b      	adds	r3, r3, r2
 8018882:	19db      	adds	r3, r3, r7
 8018884:	2208      	movs	r2, #8
 8018886:	701a      	strb	r2, [r3, #0]
 8018888:	e09f      	b.n	80189ca <UART_SetConfig+0x22a>
 801888a:	231b      	movs	r3, #27
 801888c:	2218      	movs	r2, #24
 801888e:	189b      	adds	r3, r3, r2
 8018890:	19db      	adds	r3, r3, r7
 8018892:	2210      	movs	r2, #16
 8018894:	701a      	strb	r2, [r3, #0]
 8018896:	e098      	b.n	80189ca <UART_SetConfig+0x22a>
 8018898:	69fb      	ldr	r3, [r7, #28]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	4a96      	ldr	r2, [pc, #600]	@ (8018af8 <UART_SetConfig+0x358>)
 801889e:	4293      	cmp	r3, r2
 80188a0:	d131      	bne.n	8018906 <UART_SetConfig+0x166>
 80188a2:	4b94      	ldr	r3, [pc, #592]	@ (8018af4 <UART_SetConfig+0x354>)
 80188a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80188a6:	220c      	movs	r2, #12
 80188a8:	4013      	ands	r3, r2
 80188aa:	2b0c      	cmp	r3, #12
 80188ac:	d01d      	beq.n	80188ea <UART_SetConfig+0x14a>
 80188ae:	d823      	bhi.n	80188f8 <UART_SetConfig+0x158>
 80188b0:	2b08      	cmp	r3, #8
 80188b2:	d00c      	beq.n	80188ce <UART_SetConfig+0x12e>
 80188b4:	d820      	bhi.n	80188f8 <UART_SetConfig+0x158>
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d002      	beq.n	80188c0 <UART_SetConfig+0x120>
 80188ba:	2b04      	cmp	r3, #4
 80188bc:	d00e      	beq.n	80188dc <UART_SetConfig+0x13c>
 80188be:	e01b      	b.n	80188f8 <UART_SetConfig+0x158>
 80188c0:	231b      	movs	r3, #27
 80188c2:	2218      	movs	r2, #24
 80188c4:	189b      	adds	r3, r3, r2
 80188c6:	19db      	adds	r3, r3, r7
 80188c8:	2200      	movs	r2, #0
 80188ca:	701a      	strb	r2, [r3, #0]
 80188cc:	e07d      	b.n	80189ca <UART_SetConfig+0x22a>
 80188ce:	231b      	movs	r3, #27
 80188d0:	2218      	movs	r2, #24
 80188d2:	189b      	adds	r3, r3, r2
 80188d4:	19db      	adds	r3, r3, r7
 80188d6:	2202      	movs	r2, #2
 80188d8:	701a      	strb	r2, [r3, #0]
 80188da:	e076      	b.n	80189ca <UART_SetConfig+0x22a>
 80188dc:	231b      	movs	r3, #27
 80188de:	2218      	movs	r2, #24
 80188e0:	189b      	adds	r3, r3, r2
 80188e2:	19db      	adds	r3, r3, r7
 80188e4:	2204      	movs	r2, #4
 80188e6:	701a      	strb	r2, [r3, #0]
 80188e8:	e06f      	b.n	80189ca <UART_SetConfig+0x22a>
 80188ea:	231b      	movs	r3, #27
 80188ec:	2218      	movs	r2, #24
 80188ee:	189b      	adds	r3, r3, r2
 80188f0:	19db      	adds	r3, r3, r7
 80188f2:	2208      	movs	r2, #8
 80188f4:	701a      	strb	r2, [r3, #0]
 80188f6:	e068      	b.n	80189ca <UART_SetConfig+0x22a>
 80188f8:	231b      	movs	r3, #27
 80188fa:	2218      	movs	r2, #24
 80188fc:	189b      	adds	r3, r3, r2
 80188fe:	19db      	adds	r3, r3, r7
 8018900:	2210      	movs	r2, #16
 8018902:	701a      	strb	r2, [r3, #0]
 8018904:	e061      	b.n	80189ca <UART_SetConfig+0x22a>
 8018906:	69fb      	ldr	r3, [r7, #28]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	4a7c      	ldr	r2, [pc, #496]	@ (8018afc <UART_SetConfig+0x35c>)
 801890c:	4293      	cmp	r3, r2
 801890e:	d106      	bne.n	801891e <UART_SetConfig+0x17e>
 8018910:	231b      	movs	r3, #27
 8018912:	2218      	movs	r2, #24
 8018914:	189b      	adds	r3, r3, r2
 8018916:	19db      	adds	r3, r3, r7
 8018918:	2200      	movs	r2, #0
 801891a:	701a      	strb	r2, [r3, #0]
 801891c:	e055      	b.n	80189ca <UART_SetConfig+0x22a>
 801891e:	69fb      	ldr	r3, [r7, #28]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	4a77      	ldr	r2, [pc, #476]	@ (8018b00 <UART_SetConfig+0x360>)
 8018924:	4293      	cmp	r3, r2
 8018926:	d106      	bne.n	8018936 <UART_SetConfig+0x196>
 8018928:	231b      	movs	r3, #27
 801892a:	2218      	movs	r2, #24
 801892c:	189b      	adds	r3, r3, r2
 801892e:	19db      	adds	r3, r3, r7
 8018930:	2200      	movs	r2, #0
 8018932:	701a      	strb	r2, [r3, #0]
 8018934:	e049      	b.n	80189ca <UART_SetConfig+0x22a>
 8018936:	69fb      	ldr	r3, [r7, #28]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	4a6b      	ldr	r2, [pc, #428]	@ (8018ae8 <UART_SetConfig+0x348>)
 801893c:	4293      	cmp	r3, r2
 801893e:	d13e      	bne.n	80189be <UART_SetConfig+0x21e>
 8018940:	4b6c      	ldr	r3, [pc, #432]	@ (8018af4 <UART_SetConfig+0x354>)
 8018942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018944:	23c0      	movs	r3, #192	@ 0xc0
 8018946:	011b      	lsls	r3, r3, #4
 8018948:	4013      	ands	r3, r2
 801894a:	22c0      	movs	r2, #192	@ 0xc0
 801894c:	0112      	lsls	r2, r2, #4
 801894e:	4293      	cmp	r3, r2
 8018950:	d027      	beq.n	80189a2 <UART_SetConfig+0x202>
 8018952:	22c0      	movs	r2, #192	@ 0xc0
 8018954:	0112      	lsls	r2, r2, #4
 8018956:	4293      	cmp	r3, r2
 8018958:	d82a      	bhi.n	80189b0 <UART_SetConfig+0x210>
 801895a:	2280      	movs	r2, #128	@ 0x80
 801895c:	0112      	lsls	r2, r2, #4
 801895e:	4293      	cmp	r3, r2
 8018960:	d011      	beq.n	8018986 <UART_SetConfig+0x1e6>
 8018962:	2280      	movs	r2, #128	@ 0x80
 8018964:	0112      	lsls	r2, r2, #4
 8018966:	4293      	cmp	r3, r2
 8018968:	d822      	bhi.n	80189b0 <UART_SetConfig+0x210>
 801896a:	2b00      	cmp	r3, #0
 801896c:	d004      	beq.n	8018978 <UART_SetConfig+0x1d8>
 801896e:	2280      	movs	r2, #128	@ 0x80
 8018970:	00d2      	lsls	r2, r2, #3
 8018972:	4293      	cmp	r3, r2
 8018974:	d00e      	beq.n	8018994 <UART_SetConfig+0x1f4>
 8018976:	e01b      	b.n	80189b0 <UART_SetConfig+0x210>
 8018978:	231b      	movs	r3, #27
 801897a:	2218      	movs	r2, #24
 801897c:	189b      	adds	r3, r3, r2
 801897e:	19db      	adds	r3, r3, r7
 8018980:	2200      	movs	r2, #0
 8018982:	701a      	strb	r2, [r3, #0]
 8018984:	e021      	b.n	80189ca <UART_SetConfig+0x22a>
 8018986:	231b      	movs	r3, #27
 8018988:	2218      	movs	r2, #24
 801898a:	189b      	adds	r3, r3, r2
 801898c:	19db      	adds	r3, r3, r7
 801898e:	2202      	movs	r2, #2
 8018990:	701a      	strb	r2, [r3, #0]
 8018992:	e01a      	b.n	80189ca <UART_SetConfig+0x22a>
 8018994:	231b      	movs	r3, #27
 8018996:	2218      	movs	r2, #24
 8018998:	189b      	adds	r3, r3, r2
 801899a:	19db      	adds	r3, r3, r7
 801899c:	2204      	movs	r2, #4
 801899e:	701a      	strb	r2, [r3, #0]
 80189a0:	e013      	b.n	80189ca <UART_SetConfig+0x22a>
 80189a2:	231b      	movs	r3, #27
 80189a4:	2218      	movs	r2, #24
 80189a6:	189b      	adds	r3, r3, r2
 80189a8:	19db      	adds	r3, r3, r7
 80189aa:	2208      	movs	r2, #8
 80189ac:	701a      	strb	r2, [r3, #0]
 80189ae:	e00c      	b.n	80189ca <UART_SetConfig+0x22a>
 80189b0:	231b      	movs	r3, #27
 80189b2:	2218      	movs	r2, #24
 80189b4:	189b      	adds	r3, r3, r2
 80189b6:	19db      	adds	r3, r3, r7
 80189b8:	2210      	movs	r2, #16
 80189ba:	701a      	strb	r2, [r3, #0]
 80189bc:	e005      	b.n	80189ca <UART_SetConfig+0x22a>
 80189be:	231b      	movs	r3, #27
 80189c0:	2218      	movs	r2, #24
 80189c2:	189b      	adds	r3, r3, r2
 80189c4:	19db      	adds	r3, r3, r7
 80189c6:	2210      	movs	r2, #16
 80189c8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80189ca:	69fb      	ldr	r3, [r7, #28]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	4a46      	ldr	r2, [pc, #280]	@ (8018ae8 <UART_SetConfig+0x348>)
 80189d0:	4293      	cmp	r3, r2
 80189d2:	d000      	beq.n	80189d6 <UART_SetConfig+0x236>
 80189d4:	e09a      	b.n	8018b0c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80189d6:	231b      	movs	r3, #27
 80189d8:	2218      	movs	r2, #24
 80189da:	189b      	adds	r3, r3, r2
 80189dc:	19db      	adds	r3, r3, r7
 80189de:	781b      	ldrb	r3, [r3, #0]
 80189e0:	2b08      	cmp	r3, #8
 80189e2:	d01d      	beq.n	8018a20 <UART_SetConfig+0x280>
 80189e4:	dc20      	bgt.n	8018a28 <UART_SetConfig+0x288>
 80189e6:	2b04      	cmp	r3, #4
 80189e8:	d015      	beq.n	8018a16 <UART_SetConfig+0x276>
 80189ea:	dc1d      	bgt.n	8018a28 <UART_SetConfig+0x288>
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d002      	beq.n	80189f6 <UART_SetConfig+0x256>
 80189f0:	2b02      	cmp	r3, #2
 80189f2:	d005      	beq.n	8018a00 <UART_SetConfig+0x260>
 80189f4:	e018      	b.n	8018a28 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80189f6:	f7fd fe4b 	bl	8016690 <HAL_RCC_GetPCLK1Freq>
 80189fa:	0003      	movs	r3, r0
 80189fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80189fe:	e01c      	b.n	8018a3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018a00:	4b3c      	ldr	r3, [pc, #240]	@ (8018af4 <UART_SetConfig+0x354>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	2210      	movs	r2, #16
 8018a06:	4013      	ands	r3, r2
 8018a08:	d002      	beq.n	8018a10 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8018b04 <UART_SetConfig+0x364>)
 8018a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018a0e:	e014      	b.n	8018a3a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8018a10:	4b3d      	ldr	r3, [pc, #244]	@ (8018b08 <UART_SetConfig+0x368>)
 8018a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018a14:	e011      	b.n	8018a3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018a16:	f7fd fd8b 	bl	8016530 <HAL_RCC_GetSysClockFreq>
 8018a1a:	0003      	movs	r3, r0
 8018a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018a1e:	e00c      	b.n	8018a3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018a20:	2380      	movs	r3, #128	@ 0x80
 8018a22:	021b      	lsls	r3, r3, #8
 8018a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018a26:	e008      	b.n	8018a3a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018a2c:	231a      	movs	r3, #26
 8018a2e:	2218      	movs	r2, #24
 8018a30:	189b      	adds	r3, r3, r2
 8018a32:	19db      	adds	r3, r3, r7
 8018a34:	2201      	movs	r2, #1
 8018a36:	701a      	strb	r2, [r3, #0]
        break;
 8018a38:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d100      	bne.n	8018a42 <UART_SetConfig+0x2a2>
 8018a40:	e133      	b.n	8018caa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018a42:	69fb      	ldr	r3, [r7, #28]
 8018a44:	685a      	ldr	r2, [r3, #4]
 8018a46:	0013      	movs	r3, r2
 8018a48:	005b      	lsls	r3, r3, #1
 8018a4a:	189b      	adds	r3, r3, r2
 8018a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	d305      	bcc.n	8018a5e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8018a52:	69fb      	ldr	r3, [r7, #28]
 8018a54:	685b      	ldr	r3, [r3, #4]
 8018a56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d906      	bls.n	8018a6c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8018a5e:	231a      	movs	r3, #26
 8018a60:	2218      	movs	r2, #24
 8018a62:	189b      	adds	r3, r3, r2
 8018a64:	19db      	adds	r3, r3, r7
 8018a66:	2201      	movs	r2, #1
 8018a68:	701a      	strb	r2, [r3, #0]
 8018a6a:	e11e      	b.n	8018caa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8018a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a6e:	613b      	str	r3, [r7, #16]
 8018a70:	2300      	movs	r3, #0
 8018a72:	617b      	str	r3, [r7, #20]
 8018a74:	6939      	ldr	r1, [r7, #16]
 8018a76:	697a      	ldr	r2, [r7, #20]
 8018a78:	000b      	movs	r3, r1
 8018a7a:	0e1b      	lsrs	r3, r3, #24
 8018a7c:	0010      	movs	r0, r2
 8018a7e:	0205      	lsls	r5, r0, #8
 8018a80:	431d      	orrs	r5, r3
 8018a82:	000b      	movs	r3, r1
 8018a84:	021c      	lsls	r4, r3, #8
 8018a86:	69fb      	ldr	r3, [r7, #28]
 8018a88:	685b      	ldr	r3, [r3, #4]
 8018a8a:	085b      	lsrs	r3, r3, #1
 8018a8c:	60bb      	str	r3, [r7, #8]
 8018a8e:	2300      	movs	r3, #0
 8018a90:	60fb      	str	r3, [r7, #12]
 8018a92:	68b8      	ldr	r0, [r7, #8]
 8018a94:	68f9      	ldr	r1, [r7, #12]
 8018a96:	1900      	adds	r0, r0, r4
 8018a98:	4169      	adcs	r1, r5
 8018a9a:	69fb      	ldr	r3, [r7, #28]
 8018a9c:	685b      	ldr	r3, [r3, #4]
 8018a9e:	603b      	str	r3, [r7, #0]
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	607b      	str	r3, [r7, #4]
 8018aa4:	683a      	ldr	r2, [r7, #0]
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	f7e7 fd6a 	bl	8000580 <__aeabi_uldivmod>
 8018aac:	0002      	movs	r2, r0
 8018aae:	000b      	movs	r3, r1
 8018ab0:	0013      	movs	r3, r2
 8018ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ab6:	23c0      	movs	r3, #192	@ 0xc0
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	429a      	cmp	r2, r3
 8018abc:	d309      	bcc.n	8018ad2 <UART_SetConfig+0x332>
 8018abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ac0:	2380      	movs	r3, #128	@ 0x80
 8018ac2:	035b      	lsls	r3, r3, #13
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	d204      	bcs.n	8018ad2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8018ac8:	69fb      	ldr	r3, [r7, #28]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ace:	60da      	str	r2, [r3, #12]
 8018ad0:	e0eb      	b.n	8018caa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8018ad2:	231a      	movs	r3, #26
 8018ad4:	2218      	movs	r2, #24
 8018ad6:	189b      	adds	r3, r3, r2
 8018ad8:	19db      	adds	r3, r3, r7
 8018ada:	2201      	movs	r2, #1
 8018adc:	701a      	strb	r2, [r3, #0]
 8018ade:	e0e4      	b.n	8018caa <UART_SetConfig+0x50a>
 8018ae0:	efff69f3 	.word	0xefff69f3
 8018ae4:	ffffcfff 	.word	0xffffcfff
 8018ae8:	40004800 	.word	0x40004800
 8018aec:	fffff4ff 	.word	0xfffff4ff
 8018af0:	40013800 	.word	0x40013800
 8018af4:	40021000 	.word	0x40021000
 8018af8:	40004400 	.word	0x40004400
 8018afc:	40004c00 	.word	0x40004c00
 8018b00:	40005000 	.word	0x40005000
 8018b04:	003d0900 	.word	0x003d0900
 8018b08:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018b0c:	69fb      	ldr	r3, [r7, #28]
 8018b0e:	69da      	ldr	r2, [r3, #28]
 8018b10:	2380      	movs	r3, #128	@ 0x80
 8018b12:	021b      	lsls	r3, r3, #8
 8018b14:	429a      	cmp	r2, r3
 8018b16:	d000      	beq.n	8018b1a <UART_SetConfig+0x37a>
 8018b18:	e070      	b.n	8018bfc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8018b1a:	231b      	movs	r3, #27
 8018b1c:	2218      	movs	r2, #24
 8018b1e:	189b      	adds	r3, r3, r2
 8018b20:	19db      	adds	r3, r3, r7
 8018b22:	781b      	ldrb	r3, [r3, #0]
 8018b24:	2b08      	cmp	r3, #8
 8018b26:	d822      	bhi.n	8018b6e <UART_SetConfig+0x3ce>
 8018b28:	009a      	lsls	r2, r3, #2
 8018b2a:	4b67      	ldr	r3, [pc, #412]	@ (8018cc8 <UART_SetConfig+0x528>)
 8018b2c:	18d3      	adds	r3, r2, r3
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018b32:	f7fd fdad 	bl	8016690 <HAL_RCC_GetPCLK1Freq>
 8018b36:	0003      	movs	r3, r0
 8018b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018b3a:	e021      	b.n	8018b80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018b3c:	f7fd fdbe 	bl	80166bc <HAL_RCC_GetPCLK2Freq>
 8018b40:	0003      	movs	r3, r0
 8018b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018b44:	e01c      	b.n	8018b80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018b46:	4b61      	ldr	r3, [pc, #388]	@ (8018ccc <UART_SetConfig+0x52c>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	2210      	movs	r2, #16
 8018b4c:	4013      	ands	r3, r2
 8018b4e:	d002      	beq.n	8018b56 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018b50:	4b5f      	ldr	r3, [pc, #380]	@ (8018cd0 <UART_SetConfig+0x530>)
 8018b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018b54:	e014      	b.n	8018b80 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8018b56:	4b5f      	ldr	r3, [pc, #380]	@ (8018cd4 <UART_SetConfig+0x534>)
 8018b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018b5a:	e011      	b.n	8018b80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018b5c:	f7fd fce8 	bl	8016530 <HAL_RCC_GetSysClockFreq>
 8018b60:	0003      	movs	r3, r0
 8018b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018b64:	e00c      	b.n	8018b80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018b66:	2380      	movs	r3, #128	@ 0x80
 8018b68:	021b      	lsls	r3, r3, #8
 8018b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018b6c:	e008      	b.n	8018b80 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018b72:	231a      	movs	r3, #26
 8018b74:	2218      	movs	r2, #24
 8018b76:	189b      	adds	r3, r3, r2
 8018b78:	19db      	adds	r3, r3, r7
 8018b7a:	2201      	movs	r2, #1
 8018b7c:	701a      	strb	r2, [r3, #0]
        break;
 8018b7e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d100      	bne.n	8018b88 <UART_SetConfig+0x3e8>
 8018b86:	e090      	b.n	8018caa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8018b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b8a:	005a      	lsls	r2, r3, #1
 8018b8c:	69fb      	ldr	r3, [r7, #28]
 8018b8e:	685b      	ldr	r3, [r3, #4]
 8018b90:	085b      	lsrs	r3, r3, #1
 8018b92:	18d2      	adds	r2, r2, r3
 8018b94:	69fb      	ldr	r3, [r7, #28]
 8018b96:	685b      	ldr	r3, [r3, #4]
 8018b98:	0019      	movs	r1, r3
 8018b9a:	0010      	movs	r0, r2
 8018b9c:	f7e7 fb02 	bl	80001a4 <__udivsi3>
 8018ba0:	0003      	movs	r3, r0
 8018ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ba6:	2b0f      	cmp	r3, #15
 8018ba8:	d921      	bls.n	8018bee <UART_SetConfig+0x44e>
 8018baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018bac:	2380      	movs	r3, #128	@ 0x80
 8018bae:	025b      	lsls	r3, r3, #9
 8018bb0:	429a      	cmp	r2, r3
 8018bb2:	d21c      	bcs.n	8018bee <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bb6:	b29a      	uxth	r2, r3
 8018bb8:	200e      	movs	r0, #14
 8018bba:	2418      	movs	r4, #24
 8018bbc:	1903      	adds	r3, r0, r4
 8018bbe:	19db      	adds	r3, r3, r7
 8018bc0:	210f      	movs	r1, #15
 8018bc2:	438a      	bics	r2, r1
 8018bc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bc8:	085b      	lsrs	r3, r3, #1
 8018bca:	b29b      	uxth	r3, r3
 8018bcc:	2207      	movs	r2, #7
 8018bce:	4013      	ands	r3, r2
 8018bd0:	b299      	uxth	r1, r3
 8018bd2:	1903      	adds	r3, r0, r4
 8018bd4:	19db      	adds	r3, r3, r7
 8018bd6:	1902      	adds	r2, r0, r4
 8018bd8:	19d2      	adds	r2, r2, r7
 8018bda:	8812      	ldrh	r2, [r2, #0]
 8018bdc:	430a      	orrs	r2, r1
 8018bde:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8018be0:	69fb      	ldr	r3, [r7, #28]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	1902      	adds	r2, r0, r4
 8018be6:	19d2      	adds	r2, r2, r7
 8018be8:	8812      	ldrh	r2, [r2, #0]
 8018bea:	60da      	str	r2, [r3, #12]
 8018bec:	e05d      	b.n	8018caa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8018bee:	231a      	movs	r3, #26
 8018bf0:	2218      	movs	r2, #24
 8018bf2:	189b      	adds	r3, r3, r2
 8018bf4:	19db      	adds	r3, r3, r7
 8018bf6:	2201      	movs	r2, #1
 8018bf8:	701a      	strb	r2, [r3, #0]
 8018bfa:	e056      	b.n	8018caa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018bfc:	231b      	movs	r3, #27
 8018bfe:	2218      	movs	r2, #24
 8018c00:	189b      	adds	r3, r3, r2
 8018c02:	19db      	adds	r3, r3, r7
 8018c04:	781b      	ldrb	r3, [r3, #0]
 8018c06:	2b08      	cmp	r3, #8
 8018c08:	d822      	bhi.n	8018c50 <UART_SetConfig+0x4b0>
 8018c0a:	009a      	lsls	r2, r3, #2
 8018c0c:	4b32      	ldr	r3, [pc, #200]	@ (8018cd8 <UART_SetConfig+0x538>)
 8018c0e:	18d3      	adds	r3, r2, r3
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018c14:	f7fd fd3c 	bl	8016690 <HAL_RCC_GetPCLK1Freq>
 8018c18:	0003      	movs	r3, r0
 8018c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018c1c:	e021      	b.n	8018c62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018c1e:	f7fd fd4d 	bl	80166bc <HAL_RCC_GetPCLK2Freq>
 8018c22:	0003      	movs	r3, r0
 8018c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018c26:	e01c      	b.n	8018c62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018c28:	4b28      	ldr	r3, [pc, #160]	@ (8018ccc <UART_SetConfig+0x52c>)
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	2210      	movs	r2, #16
 8018c2e:	4013      	ands	r3, r2
 8018c30:	d002      	beq.n	8018c38 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018c32:	4b27      	ldr	r3, [pc, #156]	@ (8018cd0 <UART_SetConfig+0x530>)
 8018c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018c36:	e014      	b.n	8018c62 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8018c38:	4b26      	ldr	r3, [pc, #152]	@ (8018cd4 <UART_SetConfig+0x534>)
 8018c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018c3c:	e011      	b.n	8018c62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018c3e:	f7fd fc77 	bl	8016530 <HAL_RCC_GetSysClockFreq>
 8018c42:	0003      	movs	r3, r0
 8018c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018c46:	e00c      	b.n	8018c62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018c48:	2380      	movs	r3, #128	@ 0x80
 8018c4a:	021b      	lsls	r3, r3, #8
 8018c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018c4e:	e008      	b.n	8018c62 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8018c50:	2300      	movs	r3, #0
 8018c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018c54:	231a      	movs	r3, #26
 8018c56:	2218      	movs	r2, #24
 8018c58:	189b      	adds	r3, r3, r2
 8018c5a:	19db      	adds	r3, r3, r7
 8018c5c:	2201      	movs	r2, #1
 8018c5e:	701a      	strb	r2, [r3, #0]
        break;
 8018c60:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8018c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d020      	beq.n	8018caa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018c68:	69fb      	ldr	r3, [r7, #28]
 8018c6a:	685b      	ldr	r3, [r3, #4]
 8018c6c:	085a      	lsrs	r2, r3, #1
 8018c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c70:	18d2      	adds	r2, r2, r3
 8018c72:	69fb      	ldr	r3, [r7, #28]
 8018c74:	685b      	ldr	r3, [r3, #4]
 8018c76:	0019      	movs	r1, r3
 8018c78:	0010      	movs	r0, r2
 8018c7a:	f7e7 fa93 	bl	80001a4 <__udivsi3>
 8018c7e:	0003      	movs	r3, r0
 8018c80:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c84:	2b0f      	cmp	r3, #15
 8018c86:	d90a      	bls.n	8018c9e <UART_SetConfig+0x4fe>
 8018c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018c8a:	2380      	movs	r3, #128	@ 0x80
 8018c8c:	025b      	lsls	r3, r3, #9
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d205      	bcs.n	8018c9e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c94:	b29a      	uxth	r2, r3
 8018c96:	69fb      	ldr	r3, [r7, #28]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	60da      	str	r2, [r3, #12]
 8018c9c:	e005      	b.n	8018caa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8018c9e:	231a      	movs	r3, #26
 8018ca0:	2218      	movs	r2, #24
 8018ca2:	189b      	adds	r3, r3, r2
 8018ca4:	19db      	adds	r3, r3, r7
 8018ca6:	2201      	movs	r2, #1
 8018ca8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018caa:	69fb      	ldr	r3, [r7, #28]
 8018cac:	2200      	movs	r2, #0
 8018cae:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8018cb0:	69fb      	ldr	r3, [r7, #28]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8018cb6:	231a      	movs	r3, #26
 8018cb8:	2218      	movs	r2, #24
 8018cba:	189b      	adds	r3, r3, r2
 8018cbc:	19db      	adds	r3, r3, r7
 8018cbe:	781b      	ldrb	r3, [r3, #0]
}
 8018cc0:	0018      	movs	r0, r3
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	b00e      	add	sp, #56	@ 0x38
 8018cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8018cc8:	080267f8 	.word	0x080267f8
 8018ccc:	40021000 	.word	0x40021000
 8018cd0:	003d0900 	.word	0x003d0900
 8018cd4:	00f42400 	.word	0x00f42400
 8018cd8:	0802681c 	.word	0x0802681c

08018cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b082      	sub	sp, #8
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ce8:	2201      	movs	r2, #1
 8018cea:	4013      	ands	r3, r2
 8018cec:	d00b      	beq.n	8018d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	685b      	ldr	r3, [r3, #4]
 8018cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8018e20 <UART_AdvFeatureConfig+0x144>)
 8018cf6:	4013      	ands	r3, r2
 8018cf8:	0019      	movs	r1, r3
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	430a      	orrs	r2, r1
 8018d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d0a:	2202      	movs	r2, #2
 8018d0c:	4013      	ands	r3, r2
 8018d0e:	d00b      	beq.n	8018d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	685b      	ldr	r3, [r3, #4]
 8018d16:	4a43      	ldr	r2, [pc, #268]	@ (8018e24 <UART_AdvFeatureConfig+0x148>)
 8018d18:	4013      	ands	r3, r2
 8018d1a:	0019      	movs	r1, r3
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	430a      	orrs	r2, r1
 8018d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d2c:	2204      	movs	r2, #4
 8018d2e:	4013      	ands	r3, r2
 8018d30:	d00b      	beq.n	8018d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	685b      	ldr	r3, [r3, #4]
 8018d38:	4a3b      	ldr	r2, [pc, #236]	@ (8018e28 <UART_AdvFeatureConfig+0x14c>)
 8018d3a:	4013      	ands	r3, r2
 8018d3c:	0019      	movs	r1, r3
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	430a      	orrs	r2, r1
 8018d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d4e:	2208      	movs	r2, #8
 8018d50:	4013      	ands	r3, r2
 8018d52:	d00b      	beq.n	8018d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	685b      	ldr	r3, [r3, #4]
 8018d5a:	4a34      	ldr	r2, [pc, #208]	@ (8018e2c <UART_AdvFeatureConfig+0x150>)
 8018d5c:	4013      	ands	r3, r2
 8018d5e:	0019      	movs	r1, r3
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	430a      	orrs	r2, r1
 8018d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d70:	2210      	movs	r2, #16
 8018d72:	4013      	ands	r3, r2
 8018d74:	d00b      	beq.n	8018d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	689b      	ldr	r3, [r3, #8]
 8018d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8018e30 <UART_AdvFeatureConfig+0x154>)
 8018d7e:	4013      	ands	r3, r2
 8018d80:	0019      	movs	r1, r3
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	430a      	orrs	r2, r1
 8018d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d92:	2220      	movs	r2, #32
 8018d94:	4013      	ands	r3, r2
 8018d96:	d00b      	beq.n	8018db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	689b      	ldr	r3, [r3, #8]
 8018d9e:	4a25      	ldr	r2, [pc, #148]	@ (8018e34 <UART_AdvFeatureConfig+0x158>)
 8018da0:	4013      	ands	r3, r2
 8018da2:	0019      	movs	r1, r3
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	430a      	orrs	r2, r1
 8018dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018db4:	2240      	movs	r2, #64	@ 0x40
 8018db6:	4013      	ands	r3, r2
 8018db8:	d01d      	beq.n	8018df6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8018e38 <UART_AdvFeatureConfig+0x15c>)
 8018dc2:	4013      	ands	r3, r2
 8018dc4:	0019      	movs	r1, r3
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	430a      	orrs	r2, r1
 8018dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018dd6:	2380      	movs	r3, #128	@ 0x80
 8018dd8:	035b      	lsls	r3, r3, #13
 8018dda:	429a      	cmp	r2, r3
 8018ddc:	d10b      	bne.n	8018df6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	685b      	ldr	r3, [r3, #4]
 8018de4:	4a15      	ldr	r2, [pc, #84]	@ (8018e3c <UART_AdvFeatureConfig+0x160>)
 8018de6:	4013      	ands	r3, r2
 8018de8:	0019      	movs	r1, r3
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	430a      	orrs	r2, r1
 8018df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dfa:	2280      	movs	r2, #128	@ 0x80
 8018dfc:	4013      	ands	r3, r2
 8018dfe:	d00b      	beq.n	8018e18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	685b      	ldr	r3, [r3, #4]
 8018e06:	4a0e      	ldr	r2, [pc, #56]	@ (8018e40 <UART_AdvFeatureConfig+0x164>)
 8018e08:	4013      	ands	r3, r2
 8018e0a:	0019      	movs	r1, r3
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	430a      	orrs	r2, r1
 8018e16:	605a      	str	r2, [r3, #4]
  }
}
 8018e18:	46c0      	nop			@ (mov r8, r8)
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	b002      	add	sp, #8
 8018e1e:	bd80      	pop	{r7, pc}
 8018e20:	fffdffff 	.word	0xfffdffff
 8018e24:	fffeffff 	.word	0xfffeffff
 8018e28:	fffbffff 	.word	0xfffbffff
 8018e2c:	ffff7fff 	.word	0xffff7fff
 8018e30:	ffffefff 	.word	0xffffefff
 8018e34:	ffffdfff 	.word	0xffffdfff
 8018e38:	ffefffff 	.word	0xffefffff
 8018e3c:	ff9fffff 	.word	0xff9fffff
 8018e40:	fff7ffff 	.word	0xfff7ffff

08018e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b092      	sub	sp, #72	@ 0x48
 8018e48:	af02      	add	r7, sp, #8
 8018e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	2284      	movs	r2, #132	@ 0x84
 8018e50:	2100      	movs	r1, #0
 8018e52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018e54:	f7f6 fd20 	bl	800f898 <HAL_GetTick>
 8018e58:	0003      	movs	r3, r0
 8018e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	2208      	movs	r2, #8
 8018e64:	4013      	ands	r3, r2
 8018e66:	2b08      	cmp	r3, #8
 8018e68:	d12c      	bne.n	8018ec4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e6c:	2280      	movs	r2, #128	@ 0x80
 8018e6e:	0391      	lsls	r1, r2, #14
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	4a46      	ldr	r2, [pc, #280]	@ (8018f8c <UART_CheckIdleState+0x148>)
 8018e74:	9200      	str	r2, [sp, #0]
 8018e76:	2200      	movs	r2, #0
 8018e78:	f000 f88c 	bl	8018f94 <UART_WaitOnFlagUntilTimeout>
 8018e7c:	1e03      	subs	r3, r0, #0
 8018e7e:	d021      	beq.n	8018ec4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e80:	f3ef 8310 	mrs	r3, PRIMASK
 8018e84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018e8a:	2301      	movs	r3, #1
 8018e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e90:	f383 8810 	msr	PRIMASK, r3
}
 8018e94:	46c0      	nop			@ (mov r8, r8)
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	681a      	ldr	r2, [r3, #0]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	2180      	movs	r1, #128	@ 0x80
 8018ea2:	438a      	bics	r2, r1
 8018ea4:	601a      	str	r2, [r3, #0]
 8018ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018eac:	f383 8810 	msr	PRIMASK, r3
}
 8018eb0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	2220      	movs	r2, #32
 8018eb6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2278      	movs	r2, #120	@ 0x78
 8018ebc:	2100      	movs	r1, #0
 8018ebe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018ec0:	2303      	movs	r3, #3
 8018ec2:	e05f      	b.n	8018f84 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	2204      	movs	r2, #4
 8018ecc:	4013      	ands	r3, r2
 8018ece:	2b04      	cmp	r3, #4
 8018ed0:	d146      	bne.n	8018f60 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ed4:	2280      	movs	r2, #128	@ 0x80
 8018ed6:	03d1      	lsls	r1, r2, #15
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	4a2c      	ldr	r2, [pc, #176]	@ (8018f8c <UART_CheckIdleState+0x148>)
 8018edc:	9200      	str	r2, [sp, #0]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	f000 f858 	bl	8018f94 <UART_WaitOnFlagUntilTimeout>
 8018ee4:	1e03      	subs	r3, r0, #0
 8018ee6:	d03b      	beq.n	8018f60 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8018eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8018eee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ef2:	2301      	movs	r3, #1
 8018ef4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	f383 8810 	msr	PRIMASK, r3
}
 8018efc:	46c0      	nop			@ (mov r8, r8)
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	4921      	ldr	r1, [pc, #132]	@ (8018f90 <UART_CheckIdleState+0x14c>)
 8018f0a:	400a      	ands	r2, r1
 8018f0c:	601a      	str	r2, [r3, #0]
 8018f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f12:	697b      	ldr	r3, [r7, #20]
 8018f14:	f383 8810 	msr	PRIMASK, r3
}
 8018f18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8018f1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8018f20:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8018f24:	2301      	movs	r3, #1
 8018f26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f28:	69fb      	ldr	r3, [r7, #28]
 8018f2a:	f383 8810 	msr	PRIMASK, r3
}
 8018f2e:	46c0      	nop			@ (mov r8, r8)
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	689a      	ldr	r2, [r3, #8]
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	2101      	movs	r1, #1
 8018f3c:	438a      	bics	r2, r1
 8018f3e:	609a      	str	r2, [r3, #8]
 8018f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f44:	6a3b      	ldr	r3, [r7, #32]
 8018f46:	f383 8810 	msr	PRIMASK, r3
}
 8018f4a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	2280      	movs	r2, #128	@ 0x80
 8018f50:	2120      	movs	r1, #32
 8018f52:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	2278      	movs	r2, #120	@ 0x78
 8018f58:	2100      	movs	r1, #0
 8018f5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018f5c:	2303      	movs	r3, #3
 8018f5e:	e011      	b.n	8018f84 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	2220      	movs	r2, #32
 8018f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	2280      	movs	r2, #128	@ 0x80
 8018f6a:	2120      	movs	r1, #32
 8018f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	2200      	movs	r2, #0
 8018f72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	2200      	movs	r2, #0
 8018f78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2278      	movs	r2, #120	@ 0x78
 8018f7e:	2100      	movs	r1, #0
 8018f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018f82:	2300      	movs	r3, #0
}
 8018f84:	0018      	movs	r0, r3
 8018f86:	46bd      	mov	sp, r7
 8018f88:	b010      	add	sp, #64	@ 0x40
 8018f8a:	bd80      	pop	{r7, pc}
 8018f8c:	01ffffff 	.word	0x01ffffff
 8018f90:	fffffedf 	.word	0xfffffedf

08018f94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b084      	sub	sp, #16
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	60f8      	str	r0, [r7, #12]
 8018f9c:	60b9      	str	r1, [r7, #8]
 8018f9e:	603b      	str	r3, [r7, #0]
 8018fa0:	1dfb      	adds	r3, r7, #7
 8018fa2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018fa4:	e04b      	b.n	801903e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018fa6:	69bb      	ldr	r3, [r7, #24]
 8018fa8:	3301      	adds	r3, #1
 8018faa:	d048      	beq.n	801903e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018fac:	f7f6 fc74 	bl	800f898 <HAL_GetTick>
 8018fb0:	0002      	movs	r2, r0
 8018fb2:	683b      	ldr	r3, [r7, #0]
 8018fb4:	1ad3      	subs	r3, r2, r3
 8018fb6:	69ba      	ldr	r2, [r7, #24]
 8018fb8:	429a      	cmp	r2, r3
 8018fba:	d302      	bcc.n	8018fc2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8018fbc:	69bb      	ldr	r3, [r7, #24]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d101      	bne.n	8018fc6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8018fc2:	2303      	movs	r3, #3
 8018fc4:	e04b      	b.n	801905e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	2204      	movs	r2, #4
 8018fce:	4013      	ands	r3, r2
 8018fd0:	d035      	beq.n	801903e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	69db      	ldr	r3, [r3, #28]
 8018fd8:	2208      	movs	r2, #8
 8018fda:	4013      	ands	r3, r2
 8018fdc:	2b08      	cmp	r3, #8
 8018fde:	d111      	bne.n	8019004 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	2208      	movs	r2, #8
 8018fe6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	0018      	movs	r0, r3
 8018fec:	f000 f9ca 	bl	8019384 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	2284      	movs	r2, #132	@ 0x84
 8018ff4:	2108      	movs	r1, #8
 8018ff6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	2278      	movs	r2, #120	@ 0x78
 8018ffc:	2100      	movs	r1, #0
 8018ffe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8019000:	2301      	movs	r3, #1
 8019002:	e02c      	b.n	801905e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	69da      	ldr	r2, [r3, #28]
 801900a:	2380      	movs	r3, #128	@ 0x80
 801900c:	011b      	lsls	r3, r3, #4
 801900e:	401a      	ands	r2, r3
 8019010:	2380      	movs	r3, #128	@ 0x80
 8019012:	011b      	lsls	r3, r3, #4
 8019014:	429a      	cmp	r2, r3
 8019016:	d112      	bne.n	801903e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	2280      	movs	r2, #128	@ 0x80
 801901e:	0112      	lsls	r2, r2, #4
 8019020:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	0018      	movs	r0, r3
 8019026:	f000 f9ad 	bl	8019384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	2284      	movs	r2, #132	@ 0x84
 801902e:	2120      	movs	r1, #32
 8019030:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	2278      	movs	r2, #120	@ 0x78
 8019036:	2100      	movs	r1, #0
 8019038:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801903a:	2303      	movs	r3, #3
 801903c:	e00f      	b.n	801905e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	69db      	ldr	r3, [r3, #28]
 8019044:	68ba      	ldr	r2, [r7, #8]
 8019046:	4013      	ands	r3, r2
 8019048:	68ba      	ldr	r2, [r7, #8]
 801904a:	1ad3      	subs	r3, r2, r3
 801904c:	425a      	negs	r2, r3
 801904e:	4153      	adcs	r3, r2
 8019050:	b2db      	uxtb	r3, r3
 8019052:	001a      	movs	r2, r3
 8019054:	1dfb      	adds	r3, r7, #7
 8019056:	781b      	ldrb	r3, [r3, #0]
 8019058:	429a      	cmp	r2, r3
 801905a:	d0a4      	beq.n	8018fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801905c:	2300      	movs	r3, #0
}
 801905e:	0018      	movs	r0, r3
 8019060:	46bd      	mov	sp, r7
 8019062:	b004      	add	sp, #16
 8019064:	bd80      	pop	{r7, pc}
	...

08019068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b090      	sub	sp, #64	@ 0x40
 801906c:	af00      	add	r7, sp, #0
 801906e:	60f8      	str	r0, [r7, #12]
 8019070:	60b9      	str	r1, [r7, #8]
 8019072:	1dbb      	adds	r3, r7, #6
 8019074:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	68ba      	ldr	r2, [r7, #8]
 801907a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	1dba      	adds	r2, r7, #6
 8019080:	2158      	movs	r1, #88	@ 0x58
 8019082:	8812      	ldrh	r2, [r2, #0]
 8019084:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	1dba      	adds	r2, r7, #6
 801908a:	215a      	movs	r1, #90	@ 0x5a
 801908c:	8812      	ldrh	r2, [r2, #0]
 801908e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	2200      	movs	r2, #0
 8019094:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	689a      	ldr	r2, [r3, #8]
 801909a:	2380      	movs	r3, #128	@ 0x80
 801909c:	015b      	lsls	r3, r3, #5
 801909e:	429a      	cmp	r2, r3
 80190a0:	d10d      	bne.n	80190be <UART_Start_Receive_IT+0x56>
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	691b      	ldr	r3, [r3, #16]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d104      	bne.n	80190b4 <UART_Start_Receive_IT+0x4c>
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	225c      	movs	r2, #92	@ 0x5c
 80190ae:	4950      	ldr	r1, [pc, #320]	@ (80191f0 <UART_Start_Receive_IT+0x188>)
 80190b0:	5299      	strh	r1, [r3, r2]
 80190b2:	e02e      	b.n	8019112 <UART_Start_Receive_IT+0xaa>
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	225c      	movs	r2, #92	@ 0x5c
 80190b8:	21ff      	movs	r1, #255	@ 0xff
 80190ba:	5299      	strh	r1, [r3, r2]
 80190bc:	e029      	b.n	8019112 <UART_Start_Receive_IT+0xaa>
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	689b      	ldr	r3, [r3, #8]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d10d      	bne.n	80190e2 <UART_Start_Receive_IT+0x7a>
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	691b      	ldr	r3, [r3, #16]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d104      	bne.n	80190d8 <UART_Start_Receive_IT+0x70>
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	225c      	movs	r2, #92	@ 0x5c
 80190d2:	21ff      	movs	r1, #255	@ 0xff
 80190d4:	5299      	strh	r1, [r3, r2]
 80190d6:	e01c      	b.n	8019112 <UART_Start_Receive_IT+0xaa>
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	225c      	movs	r2, #92	@ 0x5c
 80190dc:	217f      	movs	r1, #127	@ 0x7f
 80190de:	5299      	strh	r1, [r3, r2]
 80190e0:	e017      	b.n	8019112 <UART_Start_Receive_IT+0xaa>
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	689a      	ldr	r2, [r3, #8]
 80190e6:	2380      	movs	r3, #128	@ 0x80
 80190e8:	055b      	lsls	r3, r3, #21
 80190ea:	429a      	cmp	r2, r3
 80190ec:	d10d      	bne.n	801910a <UART_Start_Receive_IT+0xa2>
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	691b      	ldr	r3, [r3, #16]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d104      	bne.n	8019100 <UART_Start_Receive_IT+0x98>
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	225c      	movs	r2, #92	@ 0x5c
 80190fa:	217f      	movs	r1, #127	@ 0x7f
 80190fc:	5299      	strh	r1, [r3, r2]
 80190fe:	e008      	b.n	8019112 <UART_Start_Receive_IT+0xaa>
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	225c      	movs	r2, #92	@ 0x5c
 8019104:	213f      	movs	r1, #63	@ 0x3f
 8019106:	5299      	strh	r1, [r3, r2]
 8019108:	e003      	b.n	8019112 <UART_Start_Receive_IT+0xaa>
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	225c      	movs	r2, #92	@ 0x5c
 801910e:	2100      	movs	r1, #0
 8019110:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	2284      	movs	r2, #132	@ 0x84
 8019116:	2100      	movs	r1, #0
 8019118:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	2280      	movs	r2, #128	@ 0x80
 801911e:	2122      	movs	r1, #34	@ 0x22
 8019120:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019122:	f3ef 8310 	mrs	r3, PRIMASK
 8019126:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8019128:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801912a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801912c:	2301      	movs	r3, #1
 801912e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019132:	f383 8810 	msr	PRIMASK, r3
}
 8019136:	46c0      	nop			@ (mov r8, r8)
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	689a      	ldr	r2, [r3, #8]
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	2101      	movs	r1, #1
 8019144:	430a      	orrs	r2, r1
 8019146:	609a      	str	r2, [r3, #8]
 8019148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801914a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801914e:	f383 8810 	msr	PRIMASK, r3
}
 8019152:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	689a      	ldr	r2, [r3, #8]
 8019158:	2380      	movs	r3, #128	@ 0x80
 801915a:	015b      	lsls	r3, r3, #5
 801915c:	429a      	cmp	r2, r3
 801915e:	d107      	bne.n	8019170 <UART_Start_Receive_IT+0x108>
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	691b      	ldr	r3, [r3, #16]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d103      	bne.n	8019170 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	4a22      	ldr	r2, [pc, #136]	@ (80191f4 <UART_Start_Receive_IT+0x18c>)
 801916c:	669a      	str	r2, [r3, #104]	@ 0x68
 801916e:	e002      	b.n	8019176 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	4a21      	ldr	r2, [pc, #132]	@ (80191f8 <UART_Start_Receive_IT+0x190>)
 8019174:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	691b      	ldr	r3, [r3, #16]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d019      	beq.n	80191b2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801917e:	f3ef 8310 	mrs	r3, PRIMASK
 8019182:	61fb      	str	r3, [r7, #28]
  return(result);
 8019184:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8019186:	637b      	str	r3, [r7, #52]	@ 0x34
 8019188:	2301      	movs	r3, #1
 801918a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801918c:	6a3b      	ldr	r3, [r7, #32]
 801918e:	f383 8810 	msr	PRIMASK, r3
}
 8019192:	46c0      	nop			@ (mov r8, r8)
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	681a      	ldr	r2, [r3, #0]
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	2190      	movs	r1, #144	@ 0x90
 80191a0:	0049      	lsls	r1, r1, #1
 80191a2:	430a      	orrs	r2, r1
 80191a4:	601a      	str	r2, [r3, #0]
 80191a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191a8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191ac:	f383 8810 	msr	PRIMASK, r3
}
 80191b0:	e018      	b.n	80191e4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191b2:	f3ef 8310 	mrs	r3, PRIMASK
 80191b6:	613b      	str	r3, [r7, #16]
  return(result);
 80191b8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80191ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80191bc:	2301      	movs	r3, #1
 80191be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191c0:	697b      	ldr	r3, [r7, #20]
 80191c2:	f383 8810 	msr	PRIMASK, r3
}
 80191c6:	46c0      	nop			@ (mov r8, r8)
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	681a      	ldr	r2, [r3, #0]
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	2120      	movs	r1, #32
 80191d4:	430a      	orrs	r2, r1
 80191d6:	601a      	str	r2, [r3, #0]
 80191d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191dc:	69bb      	ldr	r3, [r7, #24]
 80191de:	f383 8810 	msr	PRIMASK, r3
}
 80191e2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80191e4:	2300      	movs	r3, #0
}
 80191e6:	0018      	movs	r0, r3
 80191e8:	46bd      	mov	sp, r7
 80191ea:	b010      	add	sp, #64	@ 0x40
 80191ec:	bd80      	pop	{r7, pc}
 80191ee:	46c0      	nop			@ (mov r8, r8)
 80191f0:	000001ff 	.word	0x000001ff
 80191f4:	08019969 	.word	0x08019969
 80191f8:	0801979d 	.word	0x0801979d

080191fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b090      	sub	sp, #64	@ 0x40
 8019200:	af00      	add	r7, sp, #0
 8019202:	60f8      	str	r0, [r7, #12]
 8019204:	60b9      	str	r1, [r7, #8]
 8019206:	1dbb      	adds	r3, r7, #6
 8019208:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	68ba      	ldr	r2, [r7, #8]
 801920e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	1dba      	adds	r2, r7, #6
 8019214:	2158      	movs	r1, #88	@ 0x58
 8019216:	8812      	ldrh	r2, [r2, #0]
 8019218:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	2284      	movs	r2, #132	@ 0x84
 801921e:	2100      	movs	r1, #0
 8019220:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	2280      	movs	r2, #128	@ 0x80
 8019226:	2122      	movs	r1, #34	@ 0x22
 8019228:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801922e:	2b00      	cmp	r3, #0
 8019230:	d028      	beq.n	8019284 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019236:	4a3e      	ldr	r2, [pc, #248]	@ (8019330 <UART_Start_Receive_DMA+0x134>)
 8019238:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801923e:	4a3d      	ldr	r2, [pc, #244]	@ (8019334 <UART_Start_Receive_DMA+0x138>)
 8019240:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019246:	4a3c      	ldr	r2, [pc, #240]	@ (8019338 <UART_Start_Receive_DMA+0x13c>)
 8019248:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801924e:	2200      	movs	r2, #0
 8019250:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	3324      	adds	r3, #36	@ 0x24
 801925c:	0019      	movs	r1, r3
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019262:	001a      	movs	r2, r3
 8019264:	1dbb      	adds	r3, r7, #6
 8019266:	881b      	ldrh	r3, [r3, #0]
 8019268:	f7f7 f868 	bl	801033c <HAL_DMA_Start_IT>
 801926c:	1e03      	subs	r3, r0, #0
 801926e:	d009      	beq.n	8019284 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	2284      	movs	r2, #132	@ 0x84
 8019274:	2110      	movs	r1, #16
 8019276:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	2280      	movs	r2, #128	@ 0x80
 801927c:	2120      	movs	r1, #32
 801927e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8019280:	2301      	movs	r3, #1
 8019282:	e050      	b.n	8019326 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	691b      	ldr	r3, [r3, #16]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d019      	beq.n	80192c0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801928c:	f3ef 8310 	mrs	r3, PRIMASK
 8019290:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8019292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019296:	2301      	movs	r3, #1
 8019298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801929a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801929c:	f383 8810 	msr	PRIMASK, r3
}
 80192a0:	46c0      	nop			@ (mov r8, r8)
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	681a      	ldr	r2, [r3, #0]
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	2180      	movs	r1, #128	@ 0x80
 80192ae:	0049      	lsls	r1, r1, #1
 80192b0:	430a      	orrs	r2, r1
 80192b2:	601a      	str	r2, [r3, #0]
 80192b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192b6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192ba:	f383 8810 	msr	PRIMASK, r3
}
 80192be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192c0:	f3ef 8310 	mrs	r3, PRIMASK
 80192c4:	613b      	str	r3, [r7, #16]
  return(result);
 80192c6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80192c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80192ca:	2301      	movs	r3, #1
 80192cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192ce:	697b      	ldr	r3, [r7, #20]
 80192d0:	f383 8810 	msr	PRIMASK, r3
}
 80192d4:	46c0      	nop			@ (mov r8, r8)
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	689a      	ldr	r2, [r3, #8]
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	2101      	movs	r1, #1
 80192e2:	430a      	orrs	r2, r1
 80192e4:	609a      	str	r2, [r3, #8]
 80192e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192ea:	69bb      	ldr	r3, [r7, #24]
 80192ec:	f383 8810 	msr	PRIMASK, r3
}
 80192f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192f2:	f3ef 8310 	mrs	r3, PRIMASK
 80192f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80192f8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80192fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80192fc:	2301      	movs	r3, #1
 80192fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019300:	6a3b      	ldr	r3, [r7, #32]
 8019302:	f383 8810 	msr	PRIMASK, r3
}
 8019306:	46c0      	nop			@ (mov r8, r8)
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	689a      	ldr	r2, [r3, #8]
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	2140      	movs	r1, #64	@ 0x40
 8019314:	430a      	orrs	r2, r1
 8019316:	609a      	str	r2, [r3, #8]
 8019318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801931a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801931e:	f383 8810 	msr	PRIMASK, r3
}
 8019322:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8019324:	2300      	movs	r3, #0
}
 8019326:	0018      	movs	r0, r3
 8019328:	46bd      	mov	sp, r7
 801932a:	b010      	add	sp, #64	@ 0x40
 801932c:	bd80      	pop	{r7, pc}
 801932e:	46c0      	nop			@ (mov r8, r8)
 8019330:	0801950d 	.word	0x0801950d
 8019334:	08019641 	.word	0x08019641
 8019338:	08019689 	.word	0x08019689

0801933c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b086      	sub	sp, #24
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019344:	f3ef 8310 	mrs	r3, PRIMASK
 8019348:	60bb      	str	r3, [r7, #8]
  return(result);
 801934a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801934c:	617b      	str	r3, [r7, #20]
 801934e:	2301      	movs	r3, #1
 8019350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	f383 8810 	msr	PRIMASK, r3
}
 8019358:	46c0      	nop			@ (mov r8, r8)
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	681a      	ldr	r2, [r3, #0]
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	21c0      	movs	r1, #192	@ 0xc0
 8019366:	438a      	bics	r2, r1
 8019368:	601a      	str	r2, [r3, #0]
 801936a:	697b      	ldr	r3, [r7, #20]
 801936c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	f383 8810 	msr	PRIMASK, r3
}
 8019374:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2220      	movs	r2, #32
 801937a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801937c:	46c0      	nop			@ (mov r8, r8)
 801937e:	46bd      	mov	sp, r7
 8019380:	b006      	add	sp, #24
 8019382:	bd80      	pop	{r7, pc}

08019384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b08e      	sub	sp, #56	@ 0x38
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801938c:	f3ef 8310 	mrs	r3, PRIMASK
 8019390:	617b      	str	r3, [r7, #20]
  return(result);
 8019392:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019394:	637b      	str	r3, [r7, #52]	@ 0x34
 8019396:	2301      	movs	r3, #1
 8019398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801939a:	69bb      	ldr	r3, [r7, #24]
 801939c:	f383 8810 	msr	PRIMASK, r3
}
 80193a0:	46c0      	nop			@ (mov r8, r8)
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	681a      	ldr	r2, [r3, #0]
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	4926      	ldr	r1, [pc, #152]	@ (8019448 <UART_EndRxTransfer+0xc4>)
 80193ae:	400a      	ands	r2, r1
 80193b0:	601a      	str	r2, [r3, #0]
 80193b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193b6:	69fb      	ldr	r3, [r7, #28]
 80193b8:	f383 8810 	msr	PRIMASK, r3
}
 80193bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193be:	f3ef 8310 	mrs	r3, PRIMASK
 80193c2:	623b      	str	r3, [r7, #32]
  return(result);
 80193c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80193c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80193c8:	2301      	movs	r3, #1
 80193ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ce:	f383 8810 	msr	PRIMASK, r3
}
 80193d2:	46c0      	nop			@ (mov r8, r8)
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	689a      	ldr	r2, [r3, #8]
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	2101      	movs	r1, #1
 80193e0:	438a      	bics	r2, r1
 80193e2:	609a      	str	r2, [r3, #8]
 80193e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ea:	f383 8810 	msr	PRIMASK, r3
}
 80193ee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80193f4:	2b01      	cmp	r3, #1
 80193f6:	d118      	bne.n	801942a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193f8:	f3ef 8310 	mrs	r3, PRIMASK
 80193fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80193fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019402:	2301      	movs	r3, #1
 8019404:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	f383 8810 	msr	PRIMASK, r3
}
 801940c:	46c0      	nop			@ (mov r8, r8)
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	2110      	movs	r1, #16
 801941a:	438a      	bics	r2, r1
 801941c:	601a      	str	r2, [r3, #0]
 801941e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019422:	693b      	ldr	r3, [r7, #16]
 8019424:	f383 8810 	msr	PRIMASK, r3
}
 8019428:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	2280      	movs	r2, #128	@ 0x80
 801942e:	2120      	movs	r1, #32
 8019430:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2200      	movs	r2, #0
 8019436:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2200      	movs	r2, #0
 801943c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801943e:	46c0      	nop			@ (mov r8, r8)
 8019440:	46bd      	mov	sp, r7
 8019442:	b00e      	add	sp, #56	@ 0x38
 8019444:	bd80      	pop	{r7, pc}
 8019446:	46c0      	nop			@ (mov r8, r8)
 8019448:	fffffedf 	.word	0xfffffedf

0801944c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b08c      	sub	sp, #48	@ 0x30
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019458:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	2220      	movs	r2, #32
 8019462:	4013      	ands	r3, r2
 8019464:	d135      	bne.n	80194d2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8019466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019468:	2252      	movs	r2, #82	@ 0x52
 801946a:	2100      	movs	r1, #0
 801946c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801946e:	f3ef 8310 	mrs	r3, PRIMASK
 8019472:	60fb      	str	r3, [r7, #12]
  return(result);
 8019474:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019476:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019478:	2301      	movs	r3, #1
 801947a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801947c:	693b      	ldr	r3, [r7, #16]
 801947e:	f383 8810 	msr	PRIMASK, r3
}
 8019482:	46c0      	nop			@ (mov r8, r8)
 8019484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	689a      	ldr	r2, [r3, #8]
 801948a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	2180      	movs	r1, #128	@ 0x80
 8019490:	438a      	bics	r2, r1
 8019492:	609a      	str	r2, [r3, #8]
 8019494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019498:	697b      	ldr	r3, [r7, #20]
 801949a:	f383 8810 	msr	PRIMASK, r3
}
 801949e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194a0:	f3ef 8310 	mrs	r3, PRIMASK
 80194a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80194a6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80194a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80194aa:	2301      	movs	r3, #1
 80194ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194ae:	69fb      	ldr	r3, [r7, #28]
 80194b0:	f383 8810 	msr	PRIMASK, r3
}
 80194b4:	46c0      	nop			@ (mov r8, r8)
 80194b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	681a      	ldr	r2, [r3, #0]
 80194bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	2140      	movs	r1, #64	@ 0x40
 80194c2:	430a      	orrs	r2, r1
 80194c4:	601a      	str	r2, [r3, #0]
 80194c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194ca:	6a3b      	ldr	r3, [r7, #32]
 80194cc:	f383 8810 	msr	PRIMASK, r3
}
 80194d0:	e006      	b.n	80194e0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 80194d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194d4:	228c      	movs	r2, #140	@ 0x8c
 80194d6:	589b      	ldr	r3, [r3, r2]
 80194d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80194da:	0010      	movs	r0, r2
 80194dc:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80194de:	46c0      	nop			@ (mov r8, r8)
 80194e0:	46c0      	nop			@ (mov r8, r8)
 80194e2:	46bd      	mov	sp, r7
 80194e4:	b00c      	add	sp, #48	@ 0x30
 80194e6:	bd80      	pop	{r7, pc}

080194e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b084      	sub	sp, #16
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	2288      	movs	r2, #136	@ 0x88
 80194fa:	589b      	ldr	r3, [r3, r2]
 80194fc:	68fa      	ldr	r2, [r7, #12]
 80194fe:	0010      	movs	r0, r2
 8019500:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019502:	46c0      	nop			@ (mov r8, r8)
 8019504:	46bd      	mov	sp, r7
 8019506:	b004      	add	sp, #16
 8019508:	bd80      	pop	{r7, pc}
	...

0801950c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b094      	sub	sp, #80	@ 0x50
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019518:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	2220      	movs	r2, #32
 8019522:	4013      	ands	r3, r2
 8019524:	d16f      	bne.n	8019606 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8019526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019528:	225a      	movs	r2, #90	@ 0x5a
 801952a:	2100      	movs	r1, #0
 801952c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801952e:	f3ef 8310 	mrs	r3, PRIMASK
 8019532:	61bb      	str	r3, [r7, #24]
  return(result);
 8019534:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019538:	2301      	movs	r3, #1
 801953a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801953c:	69fb      	ldr	r3, [r7, #28]
 801953e:	f383 8810 	msr	PRIMASK, r3
}
 8019542:	46c0      	nop			@ (mov r8, r8)
 8019544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	681a      	ldr	r2, [r3, #0]
 801954a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	493b      	ldr	r1, [pc, #236]	@ (801963c <UART_DMAReceiveCplt+0x130>)
 8019550:	400a      	ands	r2, r1
 8019552:	601a      	str	r2, [r3, #0]
 8019554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019558:	6a3b      	ldr	r3, [r7, #32]
 801955a:	f383 8810 	msr	PRIMASK, r3
}
 801955e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019560:	f3ef 8310 	mrs	r3, PRIMASK
 8019564:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8019566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019568:	647b      	str	r3, [r7, #68]	@ 0x44
 801956a:	2301      	movs	r3, #1
 801956c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019570:	f383 8810 	msr	PRIMASK, r3
}
 8019574:	46c0      	nop			@ (mov r8, r8)
 8019576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	689a      	ldr	r2, [r3, #8]
 801957c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	2101      	movs	r1, #1
 8019582:	438a      	bics	r2, r1
 8019584:	609a      	str	r2, [r3, #8]
 8019586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801958c:	f383 8810 	msr	PRIMASK, r3
}
 8019590:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019592:	f3ef 8310 	mrs	r3, PRIMASK
 8019596:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8019598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801959a:	643b      	str	r3, [r7, #64]	@ 0x40
 801959c:	2301      	movs	r3, #1
 801959e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80195a2:	f383 8810 	msr	PRIMASK, r3
}
 80195a6:	46c0      	nop			@ (mov r8, r8)
 80195a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	689a      	ldr	r2, [r3, #8]
 80195ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	2140      	movs	r1, #64	@ 0x40
 80195b4:	438a      	bics	r2, r1
 80195b6:	609a      	str	r2, [r3, #8]
 80195b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80195ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195be:	f383 8810 	msr	PRIMASK, r3
}
 80195c2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80195c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195c6:	2280      	movs	r2, #128	@ 0x80
 80195c8:	2120      	movs	r1, #32
 80195ca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80195cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80195d0:	2b01      	cmp	r3, #1
 80195d2:	d118      	bne.n	8019606 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80195d4:	f3ef 8310 	mrs	r3, PRIMASK
 80195d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80195da:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80195dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80195de:	2301      	movs	r3, #1
 80195e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195e2:	693b      	ldr	r3, [r7, #16]
 80195e4:	f383 8810 	msr	PRIMASK, r3
}
 80195e8:	46c0      	nop			@ (mov r8, r8)
 80195ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	681a      	ldr	r2, [r3, #0]
 80195f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	2110      	movs	r1, #16
 80195f6:	438a      	bics	r2, r1
 80195f8:	601a      	str	r2, [r3, #0]
 80195fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195fe:	697b      	ldr	r3, [r7, #20]
 8019600:	f383 8810 	msr	PRIMASK, r3
}
 8019604:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019608:	2200      	movs	r2, #0
 801960a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801960c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801960e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019610:	2b01      	cmp	r3, #1
 8019612:	d109      	bne.n	8019628 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8019614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019616:	22ac      	movs	r2, #172	@ 0xac
 8019618:	589b      	ldr	r3, [r3, r2]
 801961a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801961c:	2158      	movs	r1, #88	@ 0x58
 801961e:	5a51      	ldrh	r1, [r2, r1]
 8019620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019622:	0010      	movs	r0, r2
 8019624:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8019626:	e005      	b.n	8019634 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8019628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801962a:	2294      	movs	r2, #148	@ 0x94
 801962c:	589b      	ldr	r3, [r3, r2]
 801962e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019630:	0010      	movs	r0, r2
 8019632:	4798      	blx	r3
}
 8019634:	46c0      	nop			@ (mov r8, r8)
 8019636:	46bd      	mov	sp, r7
 8019638:	b014      	add	sp, #80	@ 0x50
 801963a:	bd80      	pop	{r7, pc}
 801963c:	fffffeff 	.word	0xfffffeff

08019640 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b084      	sub	sp, #16
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801964c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	2201      	movs	r2, #1
 8019652:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019658:	2b01      	cmp	r3, #1
 801965a:	d10b      	bne.n	8019674 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	22ac      	movs	r2, #172	@ 0xac
 8019660:	589b      	ldr	r3, [r3, r2]
 8019662:	68fa      	ldr	r2, [r7, #12]
 8019664:	2158      	movs	r1, #88	@ 0x58
 8019666:	5a52      	ldrh	r2, [r2, r1]
 8019668:	0852      	lsrs	r2, r2, #1
 801966a:	b291      	uxth	r1, r2
 801966c:	68fa      	ldr	r2, [r7, #12]
 801966e:	0010      	movs	r0, r2
 8019670:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8019672:	e005      	b.n	8019680 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	2290      	movs	r2, #144	@ 0x90
 8019678:	589b      	ldr	r3, [r3, r2]
 801967a:	68fa      	ldr	r2, [r7, #12]
 801967c:	0010      	movs	r0, r2
 801967e:	4798      	blx	r3
}
 8019680:	46c0      	nop			@ (mov r8, r8)
 8019682:	46bd      	mov	sp, r7
 8019684:	b004      	add	sp, #16
 8019686:	bd80      	pop	{r7, pc}

08019688 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b086      	sub	sp, #24
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019694:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801969a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801969c:	697b      	ldr	r3, [r7, #20]
 801969e:	2280      	movs	r2, #128	@ 0x80
 80196a0:	589b      	ldr	r3, [r3, r2]
 80196a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80196a4:	697b      	ldr	r3, [r7, #20]
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	689b      	ldr	r3, [r3, #8]
 80196aa:	2280      	movs	r2, #128	@ 0x80
 80196ac:	4013      	ands	r3, r2
 80196ae:	2b80      	cmp	r3, #128	@ 0x80
 80196b0:	d10a      	bne.n	80196c8 <UART_DMAError+0x40>
 80196b2:	693b      	ldr	r3, [r7, #16]
 80196b4:	2b21      	cmp	r3, #33	@ 0x21
 80196b6:	d107      	bne.n	80196c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80196b8:	697b      	ldr	r3, [r7, #20]
 80196ba:	2252      	movs	r2, #82	@ 0x52
 80196bc:	2100      	movs	r1, #0
 80196be:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80196c0:	697b      	ldr	r3, [r7, #20]
 80196c2:	0018      	movs	r0, r3
 80196c4:	f7ff fe3a 	bl	801933c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80196c8:	697b      	ldr	r3, [r7, #20]
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	689b      	ldr	r3, [r3, #8]
 80196ce:	2240      	movs	r2, #64	@ 0x40
 80196d0:	4013      	ands	r3, r2
 80196d2:	2b40      	cmp	r3, #64	@ 0x40
 80196d4:	d10a      	bne.n	80196ec <UART_DMAError+0x64>
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	2b22      	cmp	r3, #34	@ 0x22
 80196da:	d107      	bne.n	80196ec <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	225a      	movs	r2, #90	@ 0x5a
 80196e0:	2100      	movs	r1, #0
 80196e2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80196e4:	697b      	ldr	r3, [r7, #20]
 80196e6:	0018      	movs	r0, r3
 80196e8:	f7ff fe4c 	bl	8019384 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	2284      	movs	r2, #132	@ 0x84
 80196f0:	589b      	ldr	r3, [r3, r2]
 80196f2:	2210      	movs	r2, #16
 80196f4:	431a      	orrs	r2, r3
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	2184      	movs	r1, #132	@ 0x84
 80196fa:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80196fc:	697b      	ldr	r3, [r7, #20]
 80196fe:	2298      	movs	r2, #152	@ 0x98
 8019700:	589b      	ldr	r3, [r3, r2]
 8019702:	697a      	ldr	r2, [r7, #20]
 8019704:	0010      	movs	r0, r2
 8019706:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019708:	46c0      	nop			@ (mov r8, r8)
 801970a:	46bd      	mov	sp, r7
 801970c:	b006      	add	sp, #24
 801970e:	bd80      	pop	{r7, pc}

08019710 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b084      	sub	sp, #16
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801971c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	225a      	movs	r2, #90	@ 0x5a
 8019722:	2100      	movs	r1, #0
 8019724:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	2252      	movs	r2, #82	@ 0x52
 801972a:	2100      	movs	r1, #0
 801972c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	2298      	movs	r2, #152	@ 0x98
 8019732:	589b      	ldr	r3, [r3, r2]
 8019734:	68fa      	ldr	r2, [r7, #12]
 8019736:	0010      	movs	r0, r2
 8019738:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801973a:	46c0      	nop			@ (mov r8, r8)
 801973c:	46bd      	mov	sp, r7
 801973e:	b004      	add	sp, #16
 8019740:	bd80      	pop	{r7, pc}

08019742 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019742:	b580      	push	{r7, lr}
 8019744:	b086      	sub	sp, #24
 8019746:	af00      	add	r7, sp, #0
 8019748:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801974a:	f3ef 8310 	mrs	r3, PRIMASK
 801974e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019750:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019752:	617b      	str	r3, [r7, #20]
 8019754:	2301      	movs	r3, #1
 8019756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	f383 8810 	msr	PRIMASK, r3
}
 801975e:	46c0      	nop			@ (mov r8, r8)
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	681a      	ldr	r2, [r3, #0]
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	2140      	movs	r1, #64	@ 0x40
 801976c:	438a      	bics	r2, r1
 801976e:	601a      	str	r2, [r3, #0]
 8019770:	697b      	ldr	r3, [r7, #20]
 8019772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019774:	693b      	ldr	r3, [r7, #16]
 8019776:	f383 8810 	msr	PRIMASK, r3
}
 801977a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	2220      	movs	r2, #32
 8019780:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	2200      	movs	r2, #0
 8019786:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	228c      	movs	r2, #140	@ 0x8c
 801978c:	589b      	ldr	r3, [r3, r2]
 801978e:	687a      	ldr	r2, [r7, #4]
 8019790:	0010      	movs	r0, r2
 8019792:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019794:	46c0      	nop			@ (mov r8, r8)
 8019796:	46bd      	mov	sp, r7
 8019798:	b006      	add	sp, #24
 801979a:	bd80      	pop	{r7, pc}

0801979c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b094      	sub	sp, #80	@ 0x50
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80197a4:	204e      	movs	r0, #78	@ 0x4e
 80197a6:	183b      	adds	r3, r7, r0
 80197a8:	687a      	ldr	r2, [r7, #4]
 80197aa:	215c      	movs	r1, #92	@ 0x5c
 80197ac:	5a52      	ldrh	r2, [r2, r1]
 80197ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	2280      	movs	r2, #128	@ 0x80
 80197b4:	589b      	ldr	r3, [r3, r2]
 80197b6:	2b22      	cmp	r3, #34	@ 0x22
 80197b8:	d000      	beq.n	80197bc <UART_RxISR_8BIT+0x20>
 80197ba:	e0c2      	b.n	8019942 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80197c2:	214c      	movs	r1, #76	@ 0x4c
 80197c4:	187b      	adds	r3, r7, r1
 80197c6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80197c8:	187b      	adds	r3, r7, r1
 80197ca:	881b      	ldrh	r3, [r3, #0]
 80197cc:	b2da      	uxtb	r2, r3
 80197ce:	183b      	adds	r3, r7, r0
 80197d0:	881b      	ldrh	r3, [r3, #0]
 80197d2:	b2d9      	uxtb	r1, r3
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80197d8:	400a      	ands	r2, r1
 80197da:	b2d2      	uxtb	r2, r2
 80197dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80197e2:	1c5a      	adds	r2, r3, #1
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	225a      	movs	r2, #90	@ 0x5a
 80197ec:	5a9b      	ldrh	r3, [r3, r2]
 80197ee:	b29b      	uxth	r3, r3
 80197f0:	3b01      	subs	r3, #1
 80197f2:	b299      	uxth	r1, r3
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	225a      	movs	r2, #90	@ 0x5a
 80197f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	225a      	movs	r2, #90	@ 0x5a
 80197fe:	5a9b      	ldrh	r3, [r3, r2]
 8019800:	b29b      	uxth	r3, r3
 8019802:	2b00      	cmp	r3, #0
 8019804:	d000      	beq.n	8019808 <UART_RxISR_8BIT+0x6c>
 8019806:	e0a4      	b.n	8019952 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019808:	f3ef 8310 	mrs	r3, PRIMASK
 801980c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019812:	2301      	movs	r3, #1
 8019814:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019818:	f383 8810 	msr	PRIMASK, r3
}
 801981c:	46c0      	nop			@ (mov r8, r8)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	681a      	ldr	r2, [r3, #0]
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	494c      	ldr	r1, [pc, #304]	@ (801995c <UART_RxISR_8BIT+0x1c0>)
 801982a:	400a      	ands	r2, r1
 801982c:	601a      	str	r2, [r3, #0]
 801982e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019834:	f383 8810 	msr	PRIMASK, r3
}
 8019838:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801983a:	f3ef 8310 	mrs	r3, PRIMASK
 801983e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8019840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019842:	647b      	str	r3, [r7, #68]	@ 0x44
 8019844:	2301      	movs	r3, #1
 8019846:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801984a:	f383 8810 	msr	PRIMASK, r3
}
 801984e:	46c0      	nop			@ (mov r8, r8)
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	689a      	ldr	r2, [r3, #8]
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	2101      	movs	r1, #1
 801985c:	438a      	bics	r2, r1
 801985e:	609a      	str	r2, [r3, #8]
 8019860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019862:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019866:	f383 8810 	msr	PRIMASK, r3
}
 801986a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	2280      	movs	r2, #128	@ 0x80
 8019870:	2120      	movs	r1, #32
 8019872:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	2200      	movs	r2, #0
 8019878:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	2200      	movs	r2, #0
 801987e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	4a36      	ldr	r2, [pc, #216]	@ (8019960 <UART_RxISR_8BIT+0x1c4>)
 8019886:	4293      	cmp	r3, r2
 8019888:	d01f      	beq.n	80198ca <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	685a      	ldr	r2, [r3, #4]
 8019890:	2380      	movs	r3, #128	@ 0x80
 8019892:	041b      	lsls	r3, r3, #16
 8019894:	4013      	ands	r3, r2
 8019896:	d018      	beq.n	80198ca <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019898:	f3ef 8310 	mrs	r3, PRIMASK
 801989c:	61bb      	str	r3, [r7, #24]
  return(result);
 801989e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80198a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80198a2:	2301      	movs	r3, #1
 80198a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198a6:	69fb      	ldr	r3, [r7, #28]
 80198a8:	f383 8810 	msr	PRIMASK, r3
}
 80198ac:	46c0      	nop			@ (mov r8, r8)
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	681a      	ldr	r2, [r3, #0]
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	492a      	ldr	r1, [pc, #168]	@ (8019964 <UART_RxISR_8BIT+0x1c8>)
 80198ba:	400a      	ands	r2, r1
 80198bc:	601a      	str	r2, [r3, #0]
 80198be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198c2:	6a3b      	ldr	r3, [r7, #32]
 80198c4:	f383 8810 	msr	PRIMASK, r3
}
 80198c8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80198ce:	2b01      	cmp	r3, #1
 80198d0:	d130      	bne.n	8019934 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2200      	movs	r2, #0
 80198d6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80198d8:	f3ef 8310 	mrs	r3, PRIMASK
 80198dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80198de:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80198e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80198e2:	2301      	movs	r3, #1
 80198e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198e6:	693b      	ldr	r3, [r7, #16]
 80198e8:	f383 8810 	msr	PRIMASK, r3
}
 80198ec:	46c0      	nop			@ (mov r8, r8)
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	681a      	ldr	r2, [r3, #0]
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	2110      	movs	r1, #16
 80198fa:	438a      	bics	r2, r1
 80198fc:	601a      	str	r2, [r3, #0]
 80198fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019902:	697b      	ldr	r3, [r7, #20]
 8019904:	f383 8810 	msr	PRIMASK, r3
}
 8019908:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	69db      	ldr	r3, [r3, #28]
 8019910:	2210      	movs	r2, #16
 8019912:	4013      	ands	r3, r2
 8019914:	2b10      	cmp	r3, #16
 8019916:	d103      	bne.n	8019920 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	2210      	movs	r2, #16
 801991e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	22ac      	movs	r2, #172	@ 0xac
 8019924:	589b      	ldr	r3, [r3, r2]
 8019926:	687a      	ldr	r2, [r7, #4]
 8019928:	2158      	movs	r1, #88	@ 0x58
 801992a:	5a51      	ldrh	r1, [r2, r1]
 801992c:	687a      	ldr	r2, [r7, #4]
 801992e:	0010      	movs	r0, r2
 8019930:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019932:	e00e      	b.n	8019952 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	2294      	movs	r2, #148	@ 0x94
 8019938:	589b      	ldr	r3, [r3, r2]
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	0010      	movs	r0, r2
 801993e:	4798      	blx	r3
}
 8019940:	e007      	b.n	8019952 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	699a      	ldr	r2, [r3, #24]
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	2108      	movs	r1, #8
 801994e:	430a      	orrs	r2, r1
 8019950:	619a      	str	r2, [r3, #24]
}
 8019952:	46c0      	nop			@ (mov r8, r8)
 8019954:	46bd      	mov	sp, r7
 8019956:	b014      	add	sp, #80	@ 0x50
 8019958:	bd80      	pop	{r7, pc}
 801995a:	46c0      	nop			@ (mov r8, r8)
 801995c:	fffffedf 	.word	0xfffffedf
 8019960:	40004800 	.word	0x40004800
 8019964:	fbffffff 	.word	0xfbffffff

08019968 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b094      	sub	sp, #80	@ 0x50
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019970:	204e      	movs	r0, #78	@ 0x4e
 8019972:	183b      	adds	r3, r7, r0
 8019974:	687a      	ldr	r2, [r7, #4]
 8019976:	215c      	movs	r1, #92	@ 0x5c
 8019978:	5a52      	ldrh	r2, [r2, r1]
 801997a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	2280      	movs	r2, #128	@ 0x80
 8019980:	589b      	ldr	r3, [r3, r2]
 8019982:	2b22      	cmp	r3, #34	@ 0x22
 8019984:	d000      	beq.n	8019988 <UART_RxISR_16BIT+0x20>
 8019986:	e0c2      	b.n	8019b0e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801998e:	214c      	movs	r1, #76	@ 0x4c
 8019990:	187b      	adds	r3, r7, r1
 8019992:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019998:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801999a:	187b      	adds	r3, r7, r1
 801999c:	183a      	adds	r2, r7, r0
 801999e:	881b      	ldrh	r3, [r3, #0]
 80199a0:	8812      	ldrh	r2, [r2, #0]
 80199a2:	4013      	ands	r3, r2
 80199a4:	b29a      	uxth	r2, r3
 80199a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80199a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80199ae:	1c9a      	adds	r2, r3, #2
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	225a      	movs	r2, #90	@ 0x5a
 80199b8:	5a9b      	ldrh	r3, [r3, r2]
 80199ba:	b29b      	uxth	r3, r3
 80199bc:	3b01      	subs	r3, #1
 80199be:	b299      	uxth	r1, r3
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	225a      	movs	r2, #90	@ 0x5a
 80199c4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	225a      	movs	r2, #90	@ 0x5a
 80199ca:	5a9b      	ldrh	r3, [r3, r2]
 80199cc:	b29b      	uxth	r3, r3
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d000      	beq.n	80199d4 <UART_RxISR_16BIT+0x6c>
 80199d2:	e0a4      	b.n	8019b1e <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199d4:	f3ef 8310 	mrs	r3, PRIMASK
 80199d8:	623b      	str	r3, [r7, #32]
  return(result);
 80199da:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80199dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80199de:	2301      	movs	r3, #1
 80199e0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199e4:	f383 8810 	msr	PRIMASK, r3
}
 80199e8:	46c0      	nop			@ (mov r8, r8)
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	681a      	ldr	r2, [r3, #0]
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	494c      	ldr	r1, [pc, #304]	@ (8019b28 <UART_RxISR_16BIT+0x1c0>)
 80199f6:	400a      	ands	r2, r1
 80199f8:	601a      	str	r2, [r3, #0]
 80199fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80199fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a00:	f383 8810 	msr	PRIMASK, r3
}
 8019a04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a06:	f3ef 8310 	mrs	r3, PRIMASK
 8019a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8019a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019a0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8019a10:	2301      	movs	r3, #1
 8019a12:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a16:	f383 8810 	msr	PRIMASK, r3
}
 8019a1a:	46c0      	nop			@ (mov r8, r8)
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	689a      	ldr	r2, [r3, #8]
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	2101      	movs	r1, #1
 8019a28:	438a      	bics	r2, r1
 8019a2a:	609a      	str	r2, [r3, #8]
 8019a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a32:	f383 8810 	msr	PRIMASK, r3
}
 8019a36:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	2280      	movs	r2, #128	@ 0x80
 8019a3c:	2120      	movs	r1, #32
 8019a3e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	2200      	movs	r2, #0
 8019a44:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	4a36      	ldr	r2, [pc, #216]	@ (8019b2c <UART_RxISR_16BIT+0x1c4>)
 8019a52:	4293      	cmp	r3, r2
 8019a54:	d01f      	beq.n	8019a96 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	685a      	ldr	r2, [r3, #4]
 8019a5c:	2380      	movs	r3, #128	@ 0x80
 8019a5e:	041b      	lsls	r3, r3, #16
 8019a60:	4013      	ands	r3, r2
 8019a62:	d018      	beq.n	8019a96 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a64:	f3ef 8310 	mrs	r3, PRIMASK
 8019a68:	617b      	str	r3, [r7, #20]
  return(result);
 8019a6a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019a6e:	2301      	movs	r3, #1
 8019a70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a72:	69bb      	ldr	r3, [r7, #24]
 8019a74:	f383 8810 	msr	PRIMASK, r3
}
 8019a78:	46c0      	nop			@ (mov r8, r8)
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	681a      	ldr	r2, [r3, #0]
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	492a      	ldr	r1, [pc, #168]	@ (8019b30 <UART_RxISR_16BIT+0x1c8>)
 8019a86:	400a      	ands	r2, r1
 8019a88:	601a      	str	r2, [r3, #0]
 8019a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a8e:	69fb      	ldr	r3, [r7, #28]
 8019a90:	f383 8810 	msr	PRIMASK, r3
}
 8019a94:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a9a:	2b01      	cmp	r3, #1
 8019a9c:	d130      	bne.n	8019b00 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8019aa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8019aaa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019aac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019aae:	2301      	movs	r3, #1
 8019ab0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	f383 8810 	msr	PRIMASK, r3
}
 8019ab8:	46c0      	nop			@ (mov r8, r8)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	681a      	ldr	r2, [r3, #0]
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	2110      	movs	r1, #16
 8019ac6:	438a      	bics	r2, r1
 8019ac8:	601a      	str	r2, [r3, #0]
 8019aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019acc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ace:	693b      	ldr	r3, [r7, #16]
 8019ad0:	f383 8810 	msr	PRIMASK, r3
}
 8019ad4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	69db      	ldr	r3, [r3, #28]
 8019adc:	2210      	movs	r2, #16
 8019ade:	4013      	ands	r3, r2
 8019ae0:	2b10      	cmp	r3, #16
 8019ae2:	d103      	bne.n	8019aec <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	2210      	movs	r2, #16
 8019aea:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	22ac      	movs	r2, #172	@ 0xac
 8019af0:	589b      	ldr	r3, [r3, r2]
 8019af2:	687a      	ldr	r2, [r7, #4]
 8019af4:	2158      	movs	r1, #88	@ 0x58
 8019af6:	5a51      	ldrh	r1, [r2, r1]
 8019af8:	687a      	ldr	r2, [r7, #4]
 8019afa:	0010      	movs	r0, r2
 8019afc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019afe:	e00e      	b.n	8019b1e <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	2294      	movs	r2, #148	@ 0x94
 8019b04:	589b      	ldr	r3, [r3, r2]
 8019b06:	687a      	ldr	r2, [r7, #4]
 8019b08:	0010      	movs	r0, r2
 8019b0a:	4798      	blx	r3
}
 8019b0c:	e007      	b.n	8019b1e <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	699a      	ldr	r2, [r3, #24]
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	2108      	movs	r1, #8
 8019b1a:	430a      	orrs	r2, r1
 8019b1c:	619a      	str	r2, [r3, #24]
}
 8019b1e:	46c0      	nop			@ (mov r8, r8)
 8019b20:	46bd      	mov	sp, r7
 8019b22:	b014      	add	sp, #80	@ 0x50
 8019b24:	bd80      	pop	{r7, pc}
 8019b26:	46c0      	nop			@ (mov r8, r8)
 8019b28:	fffffedf 	.word	0xfffffedf
 8019b2c:	40004800 	.word	0x40004800
 8019b30:	fbffffff 	.word	0xfbffffff

08019b34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8019b34:	b580      	push	{r7, lr}
 8019b36:	b082      	sub	sp, #8
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019b3c:	46c0      	nop			@ (mov r8, r8)
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	b002      	add	sp, #8
 8019b42:	bd80      	pop	{r7, pc}

08019b44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8019b44:	b580      	push	{r7, lr}
 8019b46:	b084      	sub	sp, #16
 8019b48:	af00      	add	r7, sp, #0
 8019b4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	2244      	movs	r2, #68	@ 0x44
 8019b50:	2100      	movs	r1, #0
 8019b52:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019b54:	4b05      	ldr	r3, [pc, #20]	@ (8019b6c <USB_EnableGlobalInt+0x28>)
 8019b56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	b299      	uxth	r1, r3
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	2240      	movs	r2, #64	@ 0x40
 8019b60:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019b62:	2300      	movs	r3, #0
}
 8019b64:	0018      	movs	r0, r3
 8019b66:	46bd      	mov	sp, r7
 8019b68:	b004      	add	sp, #16
 8019b6a:	bd80      	pop	{r7, pc}
 8019b6c:	0000bf80 	.word	0x0000bf80

08019b70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b084      	sub	sp, #16
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019b78:	4b09      	ldr	r3, [pc, #36]	@ (8019ba0 <USB_DisableGlobalInt+0x30>)
 8019b7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2240      	movs	r2, #64	@ 0x40
 8019b80:	5a9b      	ldrh	r3, [r3, r2]
 8019b82:	b29b      	uxth	r3, r3
 8019b84:	68fa      	ldr	r2, [r7, #12]
 8019b86:	b292      	uxth	r2, r2
 8019b88:	43d2      	mvns	r2, r2
 8019b8a:	b292      	uxth	r2, r2
 8019b8c:	4013      	ands	r3, r2
 8019b8e:	b299      	uxth	r1, r3
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	2240      	movs	r2, #64	@ 0x40
 8019b94:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019b96:	2300      	movs	r3, #0
}
 8019b98:	0018      	movs	r0, r3
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	b004      	add	sp, #16
 8019b9e:	bd80      	pop	{r7, pc}
 8019ba0:	0000bf80 	.word	0x0000bf80

08019ba4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019ba4:	b084      	sub	sp, #16
 8019ba6:	b590      	push	{r4, r7, lr}
 8019ba8:	b083      	sub	sp, #12
 8019baa:	af00      	add	r7, sp, #0
 8019bac:	6078      	str	r0, [r7, #4]
 8019bae:	2004      	movs	r0, #4
 8019bb0:	2410      	movs	r4, #16
 8019bb2:	1900      	adds	r0, r0, r4
 8019bb4:	2408      	movs	r4, #8
 8019bb6:	46a4      	mov	ip, r4
 8019bb8:	44bc      	add	ip, r7
 8019bba:	4460      	add	r0, ip
 8019bbc:	6001      	str	r1, [r0, #0]
 8019bbe:	6042      	str	r2, [r0, #4]
 8019bc0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	2240      	movs	r2, #64	@ 0x40
 8019bc6:	2101      	movs	r1, #1
 8019bc8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	2240      	movs	r2, #64	@ 0x40
 8019bce:	2100      	movs	r1, #0
 8019bd0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	2244      	movs	r2, #68	@ 0x44
 8019bd6:	2100      	movs	r1, #0
 8019bd8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	2250      	movs	r2, #80	@ 0x50
 8019bde:	2100      	movs	r1, #0
 8019be0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019be2:	2300      	movs	r3, #0
}
 8019be4:	0018      	movs	r0, r3
 8019be6:	46bd      	mov	sp, r7
 8019be8:	b003      	add	sp, #12
 8019bea:	bc90      	pop	{r4, r7}
 8019bec:	bc08      	pop	{r3}
 8019bee:	b004      	add	sp, #16
 8019bf0:	4718      	bx	r3
	...

08019bf4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b09c      	sub	sp, #112	@ 0x70
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
 8019bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8019bfe:	236f      	movs	r3, #111	@ 0x6f
 8019c00:	18fb      	adds	r3, r7, r3
 8019c02:	2200      	movs	r2, #0
 8019c04:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8019c06:	687a      	ldr	r2, [r7, #4]
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	781b      	ldrb	r3, [r3, #0]
 8019c0c:	009b      	lsls	r3, r3, #2
 8019c0e:	18d3      	adds	r3, r2, r3
 8019c10:	881b      	ldrh	r3, [r3, #0]
 8019c12:	b29a      	uxth	r2, r3
 8019c14:	236c      	movs	r3, #108	@ 0x6c
 8019c16:	18fb      	adds	r3, r7, r3
 8019c18:	49a3      	ldr	r1, [pc, #652]	@ (8019ea8 <USB_ActivateEndpoint+0x2b4>)
 8019c1a:	400a      	ands	r2, r1
 8019c1c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	78db      	ldrb	r3, [r3, #3]
 8019c22:	2b03      	cmp	r3, #3
 8019c24:	d017      	beq.n	8019c56 <USB_ActivateEndpoint+0x62>
 8019c26:	dc28      	bgt.n	8019c7a <USB_ActivateEndpoint+0x86>
 8019c28:	2b02      	cmp	r3, #2
 8019c2a:	d00e      	beq.n	8019c4a <USB_ActivateEndpoint+0x56>
 8019c2c:	dc25      	bgt.n	8019c7a <USB_ActivateEndpoint+0x86>
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d002      	beq.n	8019c38 <USB_ActivateEndpoint+0x44>
 8019c32:	2b01      	cmp	r3, #1
 8019c34:	d018      	beq.n	8019c68 <USB_ActivateEndpoint+0x74>
 8019c36:	e020      	b.n	8019c7a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8019c38:	226c      	movs	r2, #108	@ 0x6c
 8019c3a:	18bb      	adds	r3, r7, r2
 8019c3c:	18ba      	adds	r2, r7, r2
 8019c3e:	8812      	ldrh	r2, [r2, #0]
 8019c40:	2180      	movs	r1, #128	@ 0x80
 8019c42:	0089      	lsls	r1, r1, #2
 8019c44:	430a      	orrs	r2, r1
 8019c46:	801a      	strh	r2, [r3, #0]
      break;
 8019c48:	e01c      	b.n	8019c84 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019c4a:	226c      	movs	r2, #108	@ 0x6c
 8019c4c:	18bb      	adds	r3, r7, r2
 8019c4e:	18ba      	adds	r2, r7, r2
 8019c50:	8812      	ldrh	r2, [r2, #0]
 8019c52:	801a      	strh	r2, [r3, #0]
      break;
 8019c54:	e016      	b.n	8019c84 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8019c56:	226c      	movs	r2, #108	@ 0x6c
 8019c58:	18bb      	adds	r3, r7, r2
 8019c5a:	18ba      	adds	r2, r7, r2
 8019c5c:	8812      	ldrh	r2, [r2, #0]
 8019c5e:	21c0      	movs	r1, #192	@ 0xc0
 8019c60:	00c9      	lsls	r1, r1, #3
 8019c62:	430a      	orrs	r2, r1
 8019c64:	801a      	strh	r2, [r3, #0]
      break;
 8019c66:	e00d      	b.n	8019c84 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019c68:	226c      	movs	r2, #108	@ 0x6c
 8019c6a:	18bb      	adds	r3, r7, r2
 8019c6c:	18ba      	adds	r2, r7, r2
 8019c6e:	8812      	ldrh	r2, [r2, #0]
 8019c70:	2180      	movs	r1, #128	@ 0x80
 8019c72:	00c9      	lsls	r1, r1, #3
 8019c74:	430a      	orrs	r2, r1
 8019c76:	801a      	strh	r2, [r3, #0]
      break;
 8019c78:	e004      	b.n	8019c84 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8019c7a:	236f      	movs	r3, #111	@ 0x6f
 8019c7c:	18fb      	adds	r3, r7, r3
 8019c7e:	2201      	movs	r2, #1
 8019c80:	701a      	strb	r2, [r3, #0]
      break;
 8019c82:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019c84:	687a      	ldr	r2, [r7, #4]
 8019c86:	683b      	ldr	r3, [r7, #0]
 8019c88:	781b      	ldrb	r3, [r3, #0]
 8019c8a:	009b      	lsls	r3, r3, #2
 8019c8c:	18d3      	adds	r3, r2, r3
 8019c8e:	226c      	movs	r2, #108	@ 0x6c
 8019c90:	18ba      	adds	r2, r7, r2
 8019c92:	8812      	ldrh	r2, [r2, #0]
 8019c94:	4985      	ldr	r1, [pc, #532]	@ (8019eac <USB_ActivateEndpoint+0x2b8>)
 8019c96:	430a      	orrs	r2, r1
 8019c98:	b292      	uxth	r2, r2
 8019c9a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8019c9c:	687a      	ldr	r2, [r7, #4]
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	781b      	ldrb	r3, [r3, #0]
 8019ca2:	009b      	lsls	r3, r3, #2
 8019ca4:	18d3      	adds	r3, r2, r3
 8019ca6:	881b      	ldrh	r3, [r3, #0]
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	b21b      	sxth	r3, r3
 8019cac:	4a80      	ldr	r2, [pc, #512]	@ (8019eb0 <USB_ActivateEndpoint+0x2bc>)
 8019cae:	4013      	ands	r3, r2
 8019cb0:	b21a      	sxth	r2, r3
 8019cb2:	683b      	ldr	r3, [r7, #0]
 8019cb4:	781b      	ldrb	r3, [r3, #0]
 8019cb6:	b21b      	sxth	r3, r3
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	b21a      	sxth	r2, r3
 8019cbc:	2166      	movs	r1, #102	@ 0x66
 8019cbe:	187b      	adds	r3, r7, r1
 8019cc0:	801a      	strh	r2, [r3, #0]
 8019cc2:	687a      	ldr	r2, [r7, #4]
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	781b      	ldrb	r3, [r3, #0]
 8019cc8:	009b      	lsls	r3, r3, #2
 8019cca:	18d3      	adds	r3, r2, r3
 8019ccc:	187a      	adds	r2, r7, r1
 8019cce:	8812      	ldrh	r2, [r2, #0]
 8019cd0:	4976      	ldr	r1, [pc, #472]	@ (8019eac <USB_ActivateEndpoint+0x2b8>)
 8019cd2:	430a      	orrs	r2, r1
 8019cd4:	b292      	uxth	r2, r2
 8019cd6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8019cd8:	683b      	ldr	r3, [r7, #0]
 8019cda:	7b1b      	ldrb	r3, [r3, #12]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d000      	beq.n	8019ce2 <USB_ActivateEndpoint+0xee>
 8019ce0:	e178      	b.n	8019fd4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8019ce2:	683b      	ldr	r3, [r7, #0]
 8019ce4:	785b      	ldrb	r3, [r3, #1]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d100      	bne.n	8019cec <USB_ActivateEndpoint+0xf8>
 8019cea:	e07a      	b.n	8019de2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	61bb      	str	r3, [r7, #24]
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	2250      	movs	r2, #80	@ 0x50
 8019cf4:	5a9b      	ldrh	r3, [r3, r2]
 8019cf6:	b29b      	uxth	r3, r3
 8019cf8:	001a      	movs	r2, r3
 8019cfa:	69bb      	ldr	r3, [r7, #24]
 8019cfc:	189b      	adds	r3, r3, r2
 8019cfe:	61bb      	str	r3, [r7, #24]
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	781b      	ldrb	r3, [r3, #0]
 8019d04:	00da      	lsls	r2, r3, #3
 8019d06:	69bb      	ldr	r3, [r7, #24]
 8019d08:	18d3      	adds	r3, r2, r3
 8019d0a:	2280      	movs	r2, #128	@ 0x80
 8019d0c:	00d2      	lsls	r2, r2, #3
 8019d0e:	4694      	mov	ip, r2
 8019d10:	4463      	add	r3, ip
 8019d12:	617b      	str	r3, [r7, #20]
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	88db      	ldrh	r3, [r3, #6]
 8019d18:	085b      	lsrs	r3, r3, #1
 8019d1a:	b29b      	uxth	r3, r3
 8019d1c:	18db      	adds	r3, r3, r3
 8019d1e:	b29a      	uxth	r2, r3
 8019d20:	697b      	ldr	r3, [r7, #20]
 8019d22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019d24:	687a      	ldr	r2, [r7, #4]
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	009b      	lsls	r3, r3, #2
 8019d2c:	18d2      	adds	r2, r2, r3
 8019d2e:	2112      	movs	r1, #18
 8019d30:	187b      	adds	r3, r7, r1
 8019d32:	8812      	ldrh	r2, [r2, #0]
 8019d34:	801a      	strh	r2, [r3, #0]
 8019d36:	187b      	adds	r3, r7, r1
 8019d38:	881b      	ldrh	r3, [r3, #0]
 8019d3a:	2240      	movs	r2, #64	@ 0x40
 8019d3c:	4013      	ands	r3, r2
 8019d3e:	d016      	beq.n	8019d6e <USB_ActivateEndpoint+0x17a>
 8019d40:	687a      	ldr	r2, [r7, #4]
 8019d42:	683b      	ldr	r3, [r7, #0]
 8019d44:	781b      	ldrb	r3, [r3, #0]
 8019d46:	009b      	lsls	r3, r3, #2
 8019d48:	18d3      	adds	r3, r2, r3
 8019d4a:	881b      	ldrh	r3, [r3, #0]
 8019d4c:	b29a      	uxth	r2, r3
 8019d4e:	2010      	movs	r0, #16
 8019d50:	183b      	adds	r3, r7, r0
 8019d52:	4957      	ldr	r1, [pc, #348]	@ (8019eb0 <USB_ActivateEndpoint+0x2bc>)
 8019d54:	400a      	ands	r2, r1
 8019d56:	801a      	strh	r2, [r3, #0]
 8019d58:	687a      	ldr	r2, [r7, #4]
 8019d5a:	683b      	ldr	r3, [r7, #0]
 8019d5c:	781b      	ldrb	r3, [r3, #0]
 8019d5e:	009b      	lsls	r3, r3, #2
 8019d60:	18d3      	adds	r3, r2, r3
 8019d62:	183a      	adds	r2, r7, r0
 8019d64:	8812      	ldrh	r2, [r2, #0]
 8019d66:	4953      	ldr	r1, [pc, #332]	@ (8019eb4 <USB_ActivateEndpoint+0x2c0>)
 8019d68:	430a      	orrs	r2, r1
 8019d6a:	b292      	uxth	r2, r2
 8019d6c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019d6e:	683b      	ldr	r3, [r7, #0]
 8019d70:	78db      	ldrb	r3, [r3, #3]
 8019d72:	2b01      	cmp	r3, #1
 8019d74:	d01d      	beq.n	8019db2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019d76:	687a      	ldr	r2, [r7, #4]
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	781b      	ldrb	r3, [r3, #0]
 8019d7c:	009b      	lsls	r3, r3, #2
 8019d7e:	18d3      	adds	r3, r2, r3
 8019d80:	881b      	ldrh	r3, [r3, #0]
 8019d82:	b29a      	uxth	r2, r3
 8019d84:	200c      	movs	r0, #12
 8019d86:	183b      	adds	r3, r7, r0
 8019d88:	494b      	ldr	r1, [pc, #300]	@ (8019eb8 <USB_ActivateEndpoint+0x2c4>)
 8019d8a:	400a      	ands	r2, r1
 8019d8c:	801a      	strh	r2, [r3, #0]
 8019d8e:	183b      	adds	r3, r7, r0
 8019d90:	183a      	adds	r2, r7, r0
 8019d92:	8812      	ldrh	r2, [r2, #0]
 8019d94:	2120      	movs	r1, #32
 8019d96:	404a      	eors	r2, r1
 8019d98:	801a      	strh	r2, [r3, #0]
 8019d9a:	687a      	ldr	r2, [r7, #4]
 8019d9c:	683b      	ldr	r3, [r7, #0]
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	009b      	lsls	r3, r3, #2
 8019da2:	18d3      	adds	r3, r2, r3
 8019da4:	183a      	adds	r2, r7, r0
 8019da6:	8812      	ldrh	r2, [r2, #0]
 8019da8:	4940      	ldr	r1, [pc, #256]	@ (8019eac <USB_ActivateEndpoint+0x2b8>)
 8019daa:	430a      	orrs	r2, r1
 8019dac:	b292      	uxth	r2, r2
 8019dae:	801a      	strh	r2, [r3, #0]
 8019db0:	e2b4      	b.n	801a31c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	683b      	ldr	r3, [r7, #0]
 8019db6:	781b      	ldrb	r3, [r3, #0]
 8019db8:	009b      	lsls	r3, r3, #2
 8019dba:	18d3      	adds	r3, r2, r3
 8019dbc:	881b      	ldrh	r3, [r3, #0]
 8019dbe:	b29a      	uxth	r2, r3
 8019dc0:	200e      	movs	r0, #14
 8019dc2:	183b      	adds	r3, r7, r0
 8019dc4:	493c      	ldr	r1, [pc, #240]	@ (8019eb8 <USB_ActivateEndpoint+0x2c4>)
 8019dc6:	400a      	ands	r2, r1
 8019dc8:	801a      	strh	r2, [r3, #0]
 8019dca:	687a      	ldr	r2, [r7, #4]
 8019dcc:	683b      	ldr	r3, [r7, #0]
 8019dce:	781b      	ldrb	r3, [r3, #0]
 8019dd0:	009b      	lsls	r3, r3, #2
 8019dd2:	18d3      	adds	r3, r2, r3
 8019dd4:	183a      	adds	r2, r7, r0
 8019dd6:	8812      	ldrh	r2, [r2, #0]
 8019dd8:	4934      	ldr	r1, [pc, #208]	@ (8019eac <USB_ActivateEndpoint+0x2b8>)
 8019dda:	430a      	orrs	r2, r1
 8019ddc:	b292      	uxth	r2, r2
 8019dde:	801a      	strh	r2, [r3, #0]
 8019de0:	e29c      	b.n	801a31c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	2250      	movs	r2, #80	@ 0x50
 8019dea:	5a9b      	ldrh	r3, [r3, r2]
 8019dec:	b29b      	uxth	r3, r3
 8019dee:	001a      	movs	r2, r3
 8019df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019df2:	189b      	adds	r3, r3, r2
 8019df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	781b      	ldrb	r3, [r3, #0]
 8019dfa:	00da      	lsls	r2, r3, #3
 8019dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dfe:	18d3      	adds	r3, r2, r3
 8019e00:	4a2e      	ldr	r2, [pc, #184]	@ (8019ebc <USB_ActivateEndpoint+0x2c8>)
 8019e02:	4694      	mov	ip, r2
 8019e04:	4463      	add	r3, ip
 8019e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	88db      	ldrh	r3, [r3, #6]
 8019e0c:	085b      	lsrs	r3, r3, #1
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	18db      	adds	r3, r3, r3
 8019e12:	b29a      	uxth	r2, r3
 8019e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	2250      	movs	r2, #80	@ 0x50
 8019e20:	5a9b      	ldrh	r3, [r3, r2]
 8019e22:	b29b      	uxth	r3, r3
 8019e24:	001a      	movs	r2, r3
 8019e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e28:	189b      	adds	r3, r3, r2
 8019e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e2c:	683b      	ldr	r3, [r7, #0]
 8019e2e:	781b      	ldrb	r3, [r3, #0]
 8019e30:	00da      	lsls	r2, r3, #3
 8019e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e34:	18d3      	adds	r3, r2, r3
 8019e36:	4a22      	ldr	r2, [pc, #136]	@ (8019ec0 <USB_ActivateEndpoint+0x2cc>)
 8019e38:	4694      	mov	ip, r2
 8019e3a:	4463      	add	r3, ip
 8019e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e40:	881b      	ldrh	r3, [r3, #0]
 8019e42:	b29b      	uxth	r3, r3
 8019e44:	059b      	lsls	r3, r3, #22
 8019e46:	0d9b      	lsrs	r3, r3, #22
 8019e48:	b29a      	uxth	r2, r3
 8019e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e4c:	801a      	strh	r2, [r3, #0]
 8019e4e:	683b      	ldr	r3, [r7, #0]
 8019e50:	691b      	ldr	r3, [r3, #16]
 8019e52:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e54:	d91a      	bls.n	8019e8c <USB_ActivateEndpoint+0x298>
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	691b      	ldr	r3, [r3, #16]
 8019e5a:	095b      	lsrs	r3, r3, #5
 8019e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	691b      	ldr	r3, [r3, #16]
 8019e62:	221f      	movs	r2, #31
 8019e64:	4013      	ands	r3, r2
 8019e66:	d102      	bne.n	8019e6e <USB_ActivateEndpoint+0x27a>
 8019e68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019e6a:	3b01      	subs	r3, #1
 8019e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e70:	881b      	ldrh	r3, [r3, #0]
 8019e72:	b29a      	uxth	r2, r3
 8019e74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	029b      	lsls	r3, r3, #10
 8019e7a:	b29b      	uxth	r3, r3
 8019e7c:	4313      	orrs	r3, r2
 8019e7e:	b29b      	uxth	r3, r3
 8019e80:	4a10      	ldr	r2, [pc, #64]	@ (8019ec4 <USB_ActivateEndpoint+0x2d0>)
 8019e82:	4313      	orrs	r3, r2
 8019e84:	b29a      	uxth	r2, r3
 8019e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e88:	801a      	strh	r2, [r3, #0]
 8019e8a:	e034      	b.n	8019ef6 <USB_ActivateEndpoint+0x302>
 8019e8c:	683b      	ldr	r3, [r7, #0]
 8019e8e:	691b      	ldr	r3, [r3, #16]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d119      	bne.n	8019ec8 <USB_ActivateEndpoint+0x2d4>
 8019e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e96:	881b      	ldrh	r3, [r3, #0]
 8019e98:	b29b      	uxth	r3, r3
 8019e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8019ec4 <USB_ActivateEndpoint+0x2d0>)
 8019e9c:	4313      	orrs	r3, r2
 8019e9e:	b29a      	uxth	r2, r3
 8019ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ea2:	801a      	strh	r2, [r3, #0]
 8019ea4:	e027      	b.n	8019ef6 <USB_ActivateEndpoint+0x302>
 8019ea6:	46c0      	nop			@ (mov r8, r8)
 8019ea8:	ffff898f 	.word	0xffff898f
 8019eac:	ffff8080 	.word	0xffff8080
 8019eb0:	ffff8f8f 	.word	0xffff8f8f
 8019eb4:	ffff80c0 	.word	0xffff80c0
 8019eb8:	ffff8fbf 	.word	0xffff8fbf
 8019ebc:	00000404 	.word	0x00000404
 8019ec0:	00000406 	.word	0x00000406
 8019ec4:	ffff8000 	.word	0xffff8000
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	691b      	ldr	r3, [r3, #16]
 8019ecc:	085b      	lsrs	r3, r3, #1
 8019ece:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	691b      	ldr	r3, [r3, #16]
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	4013      	ands	r3, r2
 8019ed8:	d002      	beq.n	8019ee0 <USB_ActivateEndpoint+0x2ec>
 8019eda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019edc:	3301      	adds	r3, #1
 8019ede:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ee2:	881b      	ldrh	r3, [r3, #0]
 8019ee4:	b29a      	uxth	r2, r3
 8019ee6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ee8:	b29b      	uxth	r3, r3
 8019eea:	029b      	lsls	r3, r3, #10
 8019eec:	b29b      	uxth	r3, r3
 8019eee:	4313      	orrs	r3, r2
 8019ef0:	b29a      	uxth	r2, r3
 8019ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ef4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019ef6:	687a      	ldr	r2, [r7, #4]
 8019ef8:	683b      	ldr	r3, [r7, #0]
 8019efa:	781b      	ldrb	r3, [r3, #0]
 8019efc:	009b      	lsls	r3, r3, #2
 8019efe:	18d2      	adds	r2, r2, r3
 8019f00:	2122      	movs	r1, #34	@ 0x22
 8019f02:	187b      	adds	r3, r7, r1
 8019f04:	8812      	ldrh	r2, [r2, #0]
 8019f06:	801a      	strh	r2, [r3, #0]
 8019f08:	187b      	adds	r3, r7, r1
 8019f0a:	881a      	ldrh	r2, [r3, #0]
 8019f0c:	2380      	movs	r3, #128	@ 0x80
 8019f0e:	01db      	lsls	r3, r3, #7
 8019f10:	4013      	ands	r3, r2
 8019f12:	d016      	beq.n	8019f42 <USB_ActivateEndpoint+0x34e>
 8019f14:	687a      	ldr	r2, [r7, #4]
 8019f16:	683b      	ldr	r3, [r7, #0]
 8019f18:	781b      	ldrb	r3, [r3, #0]
 8019f1a:	009b      	lsls	r3, r3, #2
 8019f1c:	18d3      	adds	r3, r2, r3
 8019f1e:	881b      	ldrh	r3, [r3, #0]
 8019f20:	b29a      	uxth	r2, r3
 8019f22:	2020      	movs	r0, #32
 8019f24:	183b      	adds	r3, r7, r0
 8019f26:	49dd      	ldr	r1, [pc, #884]	@ (801a29c <USB_ActivateEndpoint+0x6a8>)
 8019f28:	400a      	ands	r2, r1
 8019f2a:	801a      	strh	r2, [r3, #0]
 8019f2c:	687a      	ldr	r2, [r7, #4]
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	781b      	ldrb	r3, [r3, #0]
 8019f32:	009b      	lsls	r3, r3, #2
 8019f34:	18d3      	adds	r3, r2, r3
 8019f36:	183a      	adds	r2, r7, r0
 8019f38:	8812      	ldrh	r2, [r2, #0]
 8019f3a:	49d9      	ldr	r1, [pc, #868]	@ (801a2a0 <USB_ActivateEndpoint+0x6ac>)
 8019f3c:	430a      	orrs	r2, r1
 8019f3e:	b292      	uxth	r2, r2
 8019f40:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8019f42:	683b      	ldr	r3, [r7, #0]
 8019f44:	781b      	ldrb	r3, [r3, #0]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d125      	bne.n	8019f96 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019f4a:	687a      	ldr	r2, [r7, #4]
 8019f4c:	683b      	ldr	r3, [r7, #0]
 8019f4e:	781b      	ldrb	r3, [r3, #0]
 8019f50:	009b      	lsls	r3, r3, #2
 8019f52:	18d3      	adds	r3, r2, r3
 8019f54:	881b      	ldrh	r3, [r3, #0]
 8019f56:	b29a      	uxth	r2, r3
 8019f58:	201c      	movs	r0, #28
 8019f5a:	183b      	adds	r3, r7, r0
 8019f5c:	49d1      	ldr	r1, [pc, #836]	@ (801a2a4 <USB_ActivateEndpoint+0x6b0>)
 8019f5e:	400a      	ands	r2, r1
 8019f60:	801a      	strh	r2, [r3, #0]
 8019f62:	183b      	adds	r3, r7, r0
 8019f64:	183a      	adds	r2, r7, r0
 8019f66:	8812      	ldrh	r2, [r2, #0]
 8019f68:	2180      	movs	r1, #128	@ 0x80
 8019f6a:	0149      	lsls	r1, r1, #5
 8019f6c:	404a      	eors	r2, r1
 8019f6e:	801a      	strh	r2, [r3, #0]
 8019f70:	183b      	adds	r3, r7, r0
 8019f72:	183a      	adds	r2, r7, r0
 8019f74:	8812      	ldrh	r2, [r2, #0]
 8019f76:	2180      	movs	r1, #128	@ 0x80
 8019f78:	0189      	lsls	r1, r1, #6
 8019f7a:	404a      	eors	r2, r1
 8019f7c:	801a      	strh	r2, [r3, #0]
 8019f7e:	687a      	ldr	r2, [r7, #4]
 8019f80:	683b      	ldr	r3, [r7, #0]
 8019f82:	781b      	ldrb	r3, [r3, #0]
 8019f84:	009b      	lsls	r3, r3, #2
 8019f86:	18d3      	adds	r3, r2, r3
 8019f88:	183a      	adds	r2, r7, r0
 8019f8a:	8812      	ldrh	r2, [r2, #0]
 8019f8c:	49c6      	ldr	r1, [pc, #792]	@ (801a2a8 <USB_ActivateEndpoint+0x6b4>)
 8019f8e:	430a      	orrs	r2, r1
 8019f90:	b292      	uxth	r2, r2
 8019f92:	801a      	strh	r2, [r3, #0]
 8019f94:	e1c2      	b.n	801a31c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8019f96:	687a      	ldr	r2, [r7, #4]
 8019f98:	683b      	ldr	r3, [r7, #0]
 8019f9a:	781b      	ldrb	r3, [r3, #0]
 8019f9c:	009b      	lsls	r3, r3, #2
 8019f9e:	18d3      	adds	r3, r2, r3
 8019fa0:	881b      	ldrh	r3, [r3, #0]
 8019fa2:	b29a      	uxth	r2, r3
 8019fa4:	201e      	movs	r0, #30
 8019fa6:	183b      	adds	r3, r7, r0
 8019fa8:	49be      	ldr	r1, [pc, #760]	@ (801a2a4 <USB_ActivateEndpoint+0x6b0>)
 8019faa:	400a      	ands	r2, r1
 8019fac:	801a      	strh	r2, [r3, #0]
 8019fae:	183b      	adds	r3, r7, r0
 8019fb0:	183a      	adds	r2, r7, r0
 8019fb2:	8812      	ldrh	r2, [r2, #0]
 8019fb4:	2180      	movs	r1, #128	@ 0x80
 8019fb6:	0189      	lsls	r1, r1, #6
 8019fb8:	404a      	eors	r2, r1
 8019fba:	801a      	strh	r2, [r3, #0]
 8019fbc:	687a      	ldr	r2, [r7, #4]
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	009b      	lsls	r3, r3, #2
 8019fc4:	18d3      	adds	r3, r2, r3
 8019fc6:	183a      	adds	r2, r7, r0
 8019fc8:	8812      	ldrh	r2, [r2, #0]
 8019fca:	49b7      	ldr	r1, [pc, #732]	@ (801a2a8 <USB_ActivateEndpoint+0x6b4>)
 8019fcc:	430a      	orrs	r2, r1
 8019fce:	b292      	uxth	r2, r2
 8019fd0:	801a      	strh	r2, [r3, #0]
 8019fd2:	e1a3      	b.n	801a31c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	78db      	ldrb	r3, [r3, #3]
 8019fd8:	2b02      	cmp	r3, #2
 8019fda:	d117      	bne.n	801a00c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019fdc:	687a      	ldr	r2, [r7, #4]
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	781b      	ldrb	r3, [r3, #0]
 8019fe2:	009b      	lsls	r3, r3, #2
 8019fe4:	18d3      	adds	r3, r2, r3
 8019fe6:	881b      	ldrh	r3, [r3, #0]
 8019fe8:	b29a      	uxth	r2, r3
 8019fea:	2062      	movs	r0, #98	@ 0x62
 8019fec:	183b      	adds	r3, r7, r0
 8019fee:	49ab      	ldr	r1, [pc, #684]	@ (801a29c <USB_ActivateEndpoint+0x6a8>)
 8019ff0:	400a      	ands	r2, r1
 8019ff2:	801a      	strh	r2, [r3, #0]
 8019ff4:	687a      	ldr	r2, [r7, #4]
 8019ff6:	683b      	ldr	r3, [r7, #0]
 8019ff8:	781b      	ldrb	r3, [r3, #0]
 8019ffa:	009b      	lsls	r3, r3, #2
 8019ffc:	18d3      	adds	r3, r2, r3
 8019ffe:	183a      	adds	r2, r7, r0
 801a000:	8812      	ldrh	r2, [r2, #0]
 801a002:	49aa      	ldr	r1, [pc, #680]	@ (801a2ac <USB_ActivateEndpoint+0x6b8>)
 801a004:	430a      	orrs	r2, r1
 801a006:	b292      	uxth	r2, r2
 801a008:	801a      	strh	r2, [r3, #0]
 801a00a:	e016      	b.n	801a03a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801a00c:	687a      	ldr	r2, [r7, #4]
 801a00e:	683b      	ldr	r3, [r7, #0]
 801a010:	781b      	ldrb	r3, [r3, #0]
 801a012:	009b      	lsls	r3, r3, #2
 801a014:	18d3      	adds	r3, r2, r3
 801a016:	881b      	ldrh	r3, [r3, #0]
 801a018:	b29a      	uxth	r2, r3
 801a01a:	2064      	movs	r0, #100	@ 0x64
 801a01c:	183b      	adds	r3, r7, r0
 801a01e:	49a4      	ldr	r1, [pc, #656]	@ (801a2b0 <USB_ActivateEndpoint+0x6bc>)
 801a020:	400a      	ands	r2, r1
 801a022:	801a      	strh	r2, [r3, #0]
 801a024:	687a      	ldr	r2, [r7, #4]
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	781b      	ldrb	r3, [r3, #0]
 801a02a:	009b      	lsls	r3, r3, #2
 801a02c:	18d3      	adds	r3, r2, r3
 801a02e:	183a      	adds	r2, r7, r0
 801a030:	8812      	ldrh	r2, [r2, #0]
 801a032:	499d      	ldr	r1, [pc, #628]	@ (801a2a8 <USB_ActivateEndpoint+0x6b4>)
 801a034:	430a      	orrs	r2, r1
 801a036:	b292      	uxth	r2, r2
 801a038:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	2250      	movs	r2, #80	@ 0x50
 801a042:	5a9b      	ldrh	r3, [r3, r2]
 801a044:	b29b      	uxth	r3, r3
 801a046:	001a      	movs	r2, r3
 801a048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a04a:	189b      	adds	r3, r3, r2
 801a04c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a04e:	683b      	ldr	r3, [r7, #0]
 801a050:	781b      	ldrb	r3, [r3, #0]
 801a052:	00da      	lsls	r2, r3, #3
 801a054:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a056:	18d3      	adds	r3, r2, r3
 801a058:	2280      	movs	r2, #128	@ 0x80
 801a05a:	00d2      	lsls	r2, r2, #3
 801a05c:	4694      	mov	ip, r2
 801a05e:	4463      	add	r3, ip
 801a060:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a062:	683b      	ldr	r3, [r7, #0]
 801a064:	891b      	ldrh	r3, [r3, #8]
 801a066:	085b      	lsrs	r3, r3, #1
 801a068:	b29b      	uxth	r3, r3
 801a06a:	18db      	adds	r3, r3, r3
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a070:	801a      	strh	r2, [r3, #0]
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	657b      	str	r3, [r7, #84]	@ 0x54
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	2250      	movs	r2, #80	@ 0x50
 801a07a:	5a9b      	ldrh	r3, [r3, r2]
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	001a      	movs	r2, r3
 801a080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a082:	189b      	adds	r3, r3, r2
 801a084:	657b      	str	r3, [r7, #84]	@ 0x54
 801a086:	683b      	ldr	r3, [r7, #0]
 801a088:	781b      	ldrb	r3, [r3, #0]
 801a08a:	00da      	lsls	r2, r3, #3
 801a08c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a08e:	18d3      	adds	r3, r2, r3
 801a090:	4a88      	ldr	r2, [pc, #544]	@ (801a2b4 <USB_ActivateEndpoint+0x6c0>)
 801a092:	4694      	mov	ip, r2
 801a094:	4463      	add	r3, ip
 801a096:	653b      	str	r3, [r7, #80]	@ 0x50
 801a098:	683b      	ldr	r3, [r7, #0]
 801a09a:	895b      	ldrh	r3, [r3, #10]
 801a09c:	085b      	lsrs	r3, r3, #1
 801a09e:	b29b      	uxth	r3, r3
 801a0a0:	18db      	adds	r3, r3, r3
 801a0a2:	b29a      	uxth	r2, r3
 801a0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a0a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	785b      	ldrb	r3, [r3, #1]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d000      	beq.n	801a0b2 <USB_ActivateEndpoint+0x4be>
 801a0b0:	e087      	b.n	801a1c2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a0b2:	687a      	ldr	r2, [r7, #4]
 801a0b4:	683b      	ldr	r3, [r7, #0]
 801a0b6:	781b      	ldrb	r3, [r3, #0]
 801a0b8:	009b      	lsls	r3, r3, #2
 801a0ba:	18d2      	adds	r2, r2, r3
 801a0bc:	2140      	movs	r1, #64	@ 0x40
 801a0be:	187b      	adds	r3, r7, r1
 801a0c0:	8812      	ldrh	r2, [r2, #0]
 801a0c2:	801a      	strh	r2, [r3, #0]
 801a0c4:	187b      	adds	r3, r7, r1
 801a0c6:	881a      	ldrh	r2, [r3, #0]
 801a0c8:	2380      	movs	r3, #128	@ 0x80
 801a0ca:	01db      	lsls	r3, r3, #7
 801a0cc:	4013      	ands	r3, r2
 801a0ce:	d016      	beq.n	801a0fe <USB_ActivateEndpoint+0x50a>
 801a0d0:	687a      	ldr	r2, [r7, #4]
 801a0d2:	683b      	ldr	r3, [r7, #0]
 801a0d4:	781b      	ldrb	r3, [r3, #0]
 801a0d6:	009b      	lsls	r3, r3, #2
 801a0d8:	18d3      	adds	r3, r2, r3
 801a0da:	881b      	ldrh	r3, [r3, #0]
 801a0dc:	b29a      	uxth	r2, r3
 801a0de:	203e      	movs	r0, #62	@ 0x3e
 801a0e0:	183b      	adds	r3, r7, r0
 801a0e2:	496e      	ldr	r1, [pc, #440]	@ (801a29c <USB_ActivateEndpoint+0x6a8>)
 801a0e4:	400a      	ands	r2, r1
 801a0e6:	801a      	strh	r2, [r3, #0]
 801a0e8:	687a      	ldr	r2, [r7, #4]
 801a0ea:	683b      	ldr	r3, [r7, #0]
 801a0ec:	781b      	ldrb	r3, [r3, #0]
 801a0ee:	009b      	lsls	r3, r3, #2
 801a0f0:	18d3      	adds	r3, r2, r3
 801a0f2:	183a      	adds	r2, r7, r0
 801a0f4:	8812      	ldrh	r2, [r2, #0]
 801a0f6:	496a      	ldr	r1, [pc, #424]	@ (801a2a0 <USB_ActivateEndpoint+0x6ac>)
 801a0f8:	430a      	orrs	r2, r1
 801a0fa:	b292      	uxth	r2, r2
 801a0fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a0fe:	687a      	ldr	r2, [r7, #4]
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	781b      	ldrb	r3, [r3, #0]
 801a104:	009b      	lsls	r3, r3, #2
 801a106:	18d2      	adds	r2, r2, r3
 801a108:	213c      	movs	r1, #60	@ 0x3c
 801a10a:	187b      	adds	r3, r7, r1
 801a10c:	8812      	ldrh	r2, [r2, #0]
 801a10e:	801a      	strh	r2, [r3, #0]
 801a110:	187b      	adds	r3, r7, r1
 801a112:	881b      	ldrh	r3, [r3, #0]
 801a114:	2240      	movs	r2, #64	@ 0x40
 801a116:	4013      	ands	r3, r2
 801a118:	d016      	beq.n	801a148 <USB_ActivateEndpoint+0x554>
 801a11a:	687a      	ldr	r2, [r7, #4]
 801a11c:	683b      	ldr	r3, [r7, #0]
 801a11e:	781b      	ldrb	r3, [r3, #0]
 801a120:	009b      	lsls	r3, r3, #2
 801a122:	18d3      	adds	r3, r2, r3
 801a124:	881b      	ldrh	r3, [r3, #0]
 801a126:	b29a      	uxth	r2, r3
 801a128:	203a      	movs	r0, #58	@ 0x3a
 801a12a:	183b      	adds	r3, r7, r0
 801a12c:	495b      	ldr	r1, [pc, #364]	@ (801a29c <USB_ActivateEndpoint+0x6a8>)
 801a12e:	400a      	ands	r2, r1
 801a130:	801a      	strh	r2, [r3, #0]
 801a132:	687a      	ldr	r2, [r7, #4]
 801a134:	683b      	ldr	r3, [r7, #0]
 801a136:	781b      	ldrb	r3, [r3, #0]
 801a138:	009b      	lsls	r3, r3, #2
 801a13a:	18d3      	adds	r3, r2, r3
 801a13c:	183a      	adds	r2, r7, r0
 801a13e:	8812      	ldrh	r2, [r2, #0]
 801a140:	495d      	ldr	r1, [pc, #372]	@ (801a2b8 <USB_ActivateEndpoint+0x6c4>)
 801a142:	430a      	orrs	r2, r1
 801a144:	b292      	uxth	r2, r2
 801a146:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a148:	687a      	ldr	r2, [r7, #4]
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	781b      	ldrb	r3, [r3, #0]
 801a14e:	009b      	lsls	r3, r3, #2
 801a150:	18d3      	adds	r3, r2, r3
 801a152:	881b      	ldrh	r3, [r3, #0]
 801a154:	b29a      	uxth	r2, r3
 801a156:	2038      	movs	r0, #56	@ 0x38
 801a158:	183b      	adds	r3, r7, r0
 801a15a:	4952      	ldr	r1, [pc, #328]	@ (801a2a4 <USB_ActivateEndpoint+0x6b0>)
 801a15c:	400a      	ands	r2, r1
 801a15e:	801a      	strh	r2, [r3, #0]
 801a160:	183b      	adds	r3, r7, r0
 801a162:	183a      	adds	r2, r7, r0
 801a164:	8812      	ldrh	r2, [r2, #0]
 801a166:	2180      	movs	r1, #128	@ 0x80
 801a168:	0149      	lsls	r1, r1, #5
 801a16a:	404a      	eors	r2, r1
 801a16c:	801a      	strh	r2, [r3, #0]
 801a16e:	183b      	adds	r3, r7, r0
 801a170:	183a      	adds	r2, r7, r0
 801a172:	8812      	ldrh	r2, [r2, #0]
 801a174:	2180      	movs	r1, #128	@ 0x80
 801a176:	0189      	lsls	r1, r1, #6
 801a178:	404a      	eors	r2, r1
 801a17a:	801a      	strh	r2, [r3, #0]
 801a17c:	687a      	ldr	r2, [r7, #4]
 801a17e:	683b      	ldr	r3, [r7, #0]
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	009b      	lsls	r3, r3, #2
 801a184:	18d3      	adds	r3, r2, r3
 801a186:	183a      	adds	r2, r7, r0
 801a188:	8812      	ldrh	r2, [r2, #0]
 801a18a:	4947      	ldr	r1, [pc, #284]	@ (801a2a8 <USB_ActivateEndpoint+0x6b4>)
 801a18c:	430a      	orrs	r2, r1
 801a18e:	b292      	uxth	r2, r2
 801a190:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a192:	687a      	ldr	r2, [r7, #4]
 801a194:	683b      	ldr	r3, [r7, #0]
 801a196:	781b      	ldrb	r3, [r3, #0]
 801a198:	009b      	lsls	r3, r3, #2
 801a19a:	18d3      	adds	r3, r2, r3
 801a19c:	881b      	ldrh	r3, [r3, #0]
 801a19e:	b29a      	uxth	r2, r3
 801a1a0:	2036      	movs	r0, #54	@ 0x36
 801a1a2:	183b      	adds	r3, r7, r0
 801a1a4:	4945      	ldr	r1, [pc, #276]	@ (801a2bc <USB_ActivateEndpoint+0x6c8>)
 801a1a6:	400a      	ands	r2, r1
 801a1a8:	801a      	strh	r2, [r3, #0]
 801a1aa:	687a      	ldr	r2, [r7, #4]
 801a1ac:	683b      	ldr	r3, [r7, #0]
 801a1ae:	781b      	ldrb	r3, [r3, #0]
 801a1b0:	009b      	lsls	r3, r3, #2
 801a1b2:	18d3      	adds	r3, r2, r3
 801a1b4:	183a      	adds	r2, r7, r0
 801a1b6:	8812      	ldrh	r2, [r2, #0]
 801a1b8:	493b      	ldr	r1, [pc, #236]	@ (801a2a8 <USB_ActivateEndpoint+0x6b4>)
 801a1ba:	430a      	orrs	r2, r1
 801a1bc:	b292      	uxth	r2, r2
 801a1be:	801a      	strh	r2, [r3, #0]
 801a1c0:	e0ac      	b.n	801a31c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a1c2:	687a      	ldr	r2, [r7, #4]
 801a1c4:	683b      	ldr	r3, [r7, #0]
 801a1c6:	781b      	ldrb	r3, [r3, #0]
 801a1c8:	009b      	lsls	r3, r3, #2
 801a1ca:	18d2      	adds	r2, r2, r3
 801a1cc:	214e      	movs	r1, #78	@ 0x4e
 801a1ce:	187b      	adds	r3, r7, r1
 801a1d0:	8812      	ldrh	r2, [r2, #0]
 801a1d2:	801a      	strh	r2, [r3, #0]
 801a1d4:	187b      	adds	r3, r7, r1
 801a1d6:	881a      	ldrh	r2, [r3, #0]
 801a1d8:	2380      	movs	r3, #128	@ 0x80
 801a1da:	01db      	lsls	r3, r3, #7
 801a1dc:	4013      	ands	r3, r2
 801a1de:	d016      	beq.n	801a20e <USB_ActivateEndpoint+0x61a>
 801a1e0:	687a      	ldr	r2, [r7, #4]
 801a1e2:	683b      	ldr	r3, [r7, #0]
 801a1e4:	781b      	ldrb	r3, [r3, #0]
 801a1e6:	009b      	lsls	r3, r3, #2
 801a1e8:	18d3      	adds	r3, r2, r3
 801a1ea:	881b      	ldrh	r3, [r3, #0]
 801a1ec:	b29a      	uxth	r2, r3
 801a1ee:	204c      	movs	r0, #76	@ 0x4c
 801a1f0:	183b      	adds	r3, r7, r0
 801a1f2:	492a      	ldr	r1, [pc, #168]	@ (801a29c <USB_ActivateEndpoint+0x6a8>)
 801a1f4:	400a      	ands	r2, r1
 801a1f6:	801a      	strh	r2, [r3, #0]
 801a1f8:	687a      	ldr	r2, [r7, #4]
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	781b      	ldrb	r3, [r3, #0]
 801a1fe:	009b      	lsls	r3, r3, #2
 801a200:	18d3      	adds	r3, r2, r3
 801a202:	183a      	adds	r2, r7, r0
 801a204:	8812      	ldrh	r2, [r2, #0]
 801a206:	4926      	ldr	r1, [pc, #152]	@ (801a2a0 <USB_ActivateEndpoint+0x6ac>)
 801a208:	430a      	orrs	r2, r1
 801a20a:	b292      	uxth	r2, r2
 801a20c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a20e:	687a      	ldr	r2, [r7, #4]
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	781b      	ldrb	r3, [r3, #0]
 801a214:	009b      	lsls	r3, r3, #2
 801a216:	18d2      	adds	r2, r2, r3
 801a218:	214a      	movs	r1, #74	@ 0x4a
 801a21a:	187b      	adds	r3, r7, r1
 801a21c:	8812      	ldrh	r2, [r2, #0]
 801a21e:	801a      	strh	r2, [r3, #0]
 801a220:	187b      	adds	r3, r7, r1
 801a222:	881b      	ldrh	r3, [r3, #0]
 801a224:	2240      	movs	r2, #64	@ 0x40
 801a226:	4013      	ands	r3, r2
 801a228:	d016      	beq.n	801a258 <USB_ActivateEndpoint+0x664>
 801a22a:	687a      	ldr	r2, [r7, #4]
 801a22c:	683b      	ldr	r3, [r7, #0]
 801a22e:	781b      	ldrb	r3, [r3, #0]
 801a230:	009b      	lsls	r3, r3, #2
 801a232:	18d3      	adds	r3, r2, r3
 801a234:	881b      	ldrh	r3, [r3, #0]
 801a236:	b29a      	uxth	r2, r3
 801a238:	2048      	movs	r0, #72	@ 0x48
 801a23a:	183b      	adds	r3, r7, r0
 801a23c:	4917      	ldr	r1, [pc, #92]	@ (801a29c <USB_ActivateEndpoint+0x6a8>)
 801a23e:	400a      	ands	r2, r1
 801a240:	801a      	strh	r2, [r3, #0]
 801a242:	687a      	ldr	r2, [r7, #4]
 801a244:	683b      	ldr	r3, [r7, #0]
 801a246:	781b      	ldrb	r3, [r3, #0]
 801a248:	009b      	lsls	r3, r3, #2
 801a24a:	18d3      	adds	r3, r2, r3
 801a24c:	183a      	adds	r2, r7, r0
 801a24e:	8812      	ldrh	r2, [r2, #0]
 801a250:	4919      	ldr	r1, [pc, #100]	@ (801a2b8 <USB_ActivateEndpoint+0x6c4>)
 801a252:	430a      	orrs	r2, r1
 801a254:	b292      	uxth	r2, r2
 801a256:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a258:	683b      	ldr	r3, [r7, #0]
 801a25a:	78db      	ldrb	r3, [r3, #3]
 801a25c:	2b01      	cmp	r3, #1
 801a25e:	d02f      	beq.n	801a2c0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a260:	687a      	ldr	r2, [r7, #4]
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	781b      	ldrb	r3, [r3, #0]
 801a266:	009b      	lsls	r3, r3, #2
 801a268:	18d3      	adds	r3, r2, r3
 801a26a:	881b      	ldrh	r3, [r3, #0]
 801a26c:	b29a      	uxth	r2, r3
 801a26e:	2044      	movs	r0, #68	@ 0x44
 801a270:	183b      	adds	r3, r7, r0
 801a272:	4912      	ldr	r1, [pc, #72]	@ (801a2bc <USB_ActivateEndpoint+0x6c8>)
 801a274:	400a      	ands	r2, r1
 801a276:	801a      	strh	r2, [r3, #0]
 801a278:	183b      	adds	r3, r7, r0
 801a27a:	183a      	adds	r2, r7, r0
 801a27c:	8812      	ldrh	r2, [r2, #0]
 801a27e:	2120      	movs	r1, #32
 801a280:	404a      	eors	r2, r1
 801a282:	801a      	strh	r2, [r3, #0]
 801a284:	687a      	ldr	r2, [r7, #4]
 801a286:	683b      	ldr	r3, [r7, #0]
 801a288:	781b      	ldrb	r3, [r3, #0]
 801a28a:	009b      	lsls	r3, r3, #2
 801a28c:	18d3      	adds	r3, r2, r3
 801a28e:	183a      	adds	r2, r7, r0
 801a290:	8812      	ldrh	r2, [r2, #0]
 801a292:	4905      	ldr	r1, [pc, #20]	@ (801a2a8 <USB_ActivateEndpoint+0x6b4>)
 801a294:	430a      	orrs	r2, r1
 801a296:	b292      	uxth	r2, r2
 801a298:	801a      	strh	r2, [r3, #0]
 801a29a:	e028      	b.n	801a2ee <USB_ActivateEndpoint+0x6fa>
 801a29c:	ffff8f8f 	.word	0xffff8f8f
 801a2a0:	ffffc080 	.word	0xffffc080
 801a2a4:	ffffbf8f 	.word	0xffffbf8f
 801a2a8:	ffff8080 	.word	0xffff8080
 801a2ac:	ffff8180 	.word	0xffff8180
 801a2b0:	ffff8e8f 	.word	0xffff8e8f
 801a2b4:	00000404 	.word	0x00000404
 801a2b8:	ffff80c0 	.word	0xffff80c0
 801a2bc:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a2c0:	687a      	ldr	r2, [r7, #4]
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	781b      	ldrb	r3, [r3, #0]
 801a2c6:	009b      	lsls	r3, r3, #2
 801a2c8:	18d3      	adds	r3, r2, r3
 801a2ca:	881b      	ldrh	r3, [r3, #0]
 801a2cc:	b29a      	uxth	r2, r3
 801a2ce:	2046      	movs	r0, #70	@ 0x46
 801a2d0:	183b      	adds	r3, r7, r0
 801a2d2:	4916      	ldr	r1, [pc, #88]	@ (801a32c <USB_ActivateEndpoint+0x738>)
 801a2d4:	400a      	ands	r2, r1
 801a2d6:	801a      	strh	r2, [r3, #0]
 801a2d8:	687a      	ldr	r2, [r7, #4]
 801a2da:	683b      	ldr	r3, [r7, #0]
 801a2dc:	781b      	ldrb	r3, [r3, #0]
 801a2de:	009b      	lsls	r3, r3, #2
 801a2e0:	18d3      	adds	r3, r2, r3
 801a2e2:	183a      	adds	r2, r7, r0
 801a2e4:	8812      	ldrh	r2, [r2, #0]
 801a2e6:	4912      	ldr	r1, [pc, #72]	@ (801a330 <USB_ActivateEndpoint+0x73c>)
 801a2e8:	430a      	orrs	r2, r1
 801a2ea:	b292      	uxth	r2, r2
 801a2ec:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a2ee:	687a      	ldr	r2, [r7, #4]
 801a2f0:	683b      	ldr	r3, [r7, #0]
 801a2f2:	781b      	ldrb	r3, [r3, #0]
 801a2f4:	009b      	lsls	r3, r3, #2
 801a2f6:	18d3      	adds	r3, r2, r3
 801a2f8:	881b      	ldrh	r3, [r3, #0]
 801a2fa:	b29a      	uxth	r2, r3
 801a2fc:	2042      	movs	r0, #66	@ 0x42
 801a2fe:	183b      	adds	r3, r7, r0
 801a300:	490c      	ldr	r1, [pc, #48]	@ (801a334 <USB_ActivateEndpoint+0x740>)
 801a302:	400a      	ands	r2, r1
 801a304:	801a      	strh	r2, [r3, #0]
 801a306:	687a      	ldr	r2, [r7, #4]
 801a308:	683b      	ldr	r3, [r7, #0]
 801a30a:	781b      	ldrb	r3, [r3, #0]
 801a30c:	009b      	lsls	r3, r3, #2
 801a30e:	18d3      	adds	r3, r2, r3
 801a310:	183a      	adds	r2, r7, r0
 801a312:	8812      	ldrh	r2, [r2, #0]
 801a314:	4906      	ldr	r1, [pc, #24]	@ (801a330 <USB_ActivateEndpoint+0x73c>)
 801a316:	430a      	orrs	r2, r1
 801a318:	b292      	uxth	r2, r2
 801a31a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801a31c:	236f      	movs	r3, #111	@ 0x6f
 801a31e:	18fb      	adds	r3, r7, r3
 801a320:	781b      	ldrb	r3, [r3, #0]
}
 801a322:	0018      	movs	r0, r3
 801a324:	46bd      	mov	sp, r7
 801a326:	b01c      	add	sp, #112	@ 0x70
 801a328:	bd80      	pop	{r7, pc}
 801a32a:	46c0      	nop			@ (mov r8, r8)
 801a32c:	ffff8fbf 	.word	0xffff8fbf
 801a330:	ffff8080 	.word	0xffff8080
 801a334:	ffffbf8f 	.word	0xffffbf8f

0801a338 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b08c      	sub	sp, #48	@ 0x30
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	6078      	str	r0, [r7, #4]
 801a340:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a342:	683b      	ldr	r3, [r7, #0]
 801a344:	7b1b      	ldrb	r3, [r3, #12]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d000      	beq.n	801a34c <USB_DeactivateEndpoint+0x14>
 801a34a:	e07e      	b.n	801a44a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801a34c:	683b      	ldr	r3, [r7, #0]
 801a34e:	785b      	ldrb	r3, [r3, #1]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d03c      	beq.n	801a3ce <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a354:	687a      	ldr	r2, [r7, #4]
 801a356:	683b      	ldr	r3, [r7, #0]
 801a358:	781b      	ldrb	r3, [r3, #0]
 801a35a:	009b      	lsls	r3, r3, #2
 801a35c:	18d2      	adds	r2, r2, r3
 801a35e:	210c      	movs	r1, #12
 801a360:	187b      	adds	r3, r7, r1
 801a362:	8812      	ldrh	r2, [r2, #0]
 801a364:	801a      	strh	r2, [r3, #0]
 801a366:	187b      	adds	r3, r7, r1
 801a368:	881b      	ldrh	r3, [r3, #0]
 801a36a:	2240      	movs	r2, #64	@ 0x40
 801a36c:	4013      	ands	r3, r2
 801a36e:	d016      	beq.n	801a39e <USB_DeactivateEndpoint+0x66>
 801a370:	687a      	ldr	r2, [r7, #4]
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	781b      	ldrb	r3, [r3, #0]
 801a376:	009b      	lsls	r3, r3, #2
 801a378:	18d3      	adds	r3, r2, r3
 801a37a:	881b      	ldrh	r3, [r3, #0]
 801a37c:	b29a      	uxth	r2, r3
 801a37e:	200a      	movs	r0, #10
 801a380:	183b      	adds	r3, r7, r0
 801a382:	49c7      	ldr	r1, [pc, #796]	@ (801a6a0 <USB_DeactivateEndpoint+0x368>)
 801a384:	400a      	ands	r2, r1
 801a386:	801a      	strh	r2, [r3, #0]
 801a388:	687a      	ldr	r2, [r7, #4]
 801a38a:	683b      	ldr	r3, [r7, #0]
 801a38c:	781b      	ldrb	r3, [r3, #0]
 801a38e:	009b      	lsls	r3, r3, #2
 801a390:	18d3      	adds	r3, r2, r3
 801a392:	183a      	adds	r2, r7, r0
 801a394:	8812      	ldrh	r2, [r2, #0]
 801a396:	49c3      	ldr	r1, [pc, #780]	@ (801a6a4 <USB_DeactivateEndpoint+0x36c>)
 801a398:	430a      	orrs	r2, r1
 801a39a:	b292      	uxth	r2, r2
 801a39c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a39e:	687a      	ldr	r2, [r7, #4]
 801a3a0:	683b      	ldr	r3, [r7, #0]
 801a3a2:	781b      	ldrb	r3, [r3, #0]
 801a3a4:	009b      	lsls	r3, r3, #2
 801a3a6:	18d3      	adds	r3, r2, r3
 801a3a8:	881b      	ldrh	r3, [r3, #0]
 801a3aa:	b29a      	uxth	r2, r3
 801a3ac:	2008      	movs	r0, #8
 801a3ae:	183b      	adds	r3, r7, r0
 801a3b0:	49bd      	ldr	r1, [pc, #756]	@ (801a6a8 <USB_DeactivateEndpoint+0x370>)
 801a3b2:	400a      	ands	r2, r1
 801a3b4:	801a      	strh	r2, [r3, #0]
 801a3b6:	687a      	ldr	r2, [r7, #4]
 801a3b8:	683b      	ldr	r3, [r7, #0]
 801a3ba:	781b      	ldrb	r3, [r3, #0]
 801a3bc:	009b      	lsls	r3, r3, #2
 801a3be:	18d3      	adds	r3, r2, r3
 801a3c0:	183a      	adds	r2, r7, r0
 801a3c2:	8812      	ldrh	r2, [r2, #0]
 801a3c4:	49b9      	ldr	r1, [pc, #740]	@ (801a6ac <USB_DeactivateEndpoint+0x374>)
 801a3c6:	430a      	orrs	r2, r1
 801a3c8:	b292      	uxth	r2, r2
 801a3ca:	801a      	strh	r2, [r3, #0]
 801a3cc:	e163      	b.n	801a696 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a3ce:	687a      	ldr	r2, [r7, #4]
 801a3d0:	683b      	ldr	r3, [r7, #0]
 801a3d2:	781b      	ldrb	r3, [r3, #0]
 801a3d4:	009b      	lsls	r3, r3, #2
 801a3d6:	18d2      	adds	r2, r2, r3
 801a3d8:	2112      	movs	r1, #18
 801a3da:	187b      	adds	r3, r7, r1
 801a3dc:	8812      	ldrh	r2, [r2, #0]
 801a3de:	801a      	strh	r2, [r3, #0]
 801a3e0:	187b      	adds	r3, r7, r1
 801a3e2:	881a      	ldrh	r2, [r3, #0]
 801a3e4:	2380      	movs	r3, #128	@ 0x80
 801a3e6:	01db      	lsls	r3, r3, #7
 801a3e8:	4013      	ands	r3, r2
 801a3ea:	d016      	beq.n	801a41a <USB_DeactivateEndpoint+0xe2>
 801a3ec:	687a      	ldr	r2, [r7, #4]
 801a3ee:	683b      	ldr	r3, [r7, #0]
 801a3f0:	781b      	ldrb	r3, [r3, #0]
 801a3f2:	009b      	lsls	r3, r3, #2
 801a3f4:	18d3      	adds	r3, r2, r3
 801a3f6:	881b      	ldrh	r3, [r3, #0]
 801a3f8:	b29a      	uxth	r2, r3
 801a3fa:	2010      	movs	r0, #16
 801a3fc:	183b      	adds	r3, r7, r0
 801a3fe:	49a8      	ldr	r1, [pc, #672]	@ (801a6a0 <USB_DeactivateEndpoint+0x368>)
 801a400:	400a      	ands	r2, r1
 801a402:	801a      	strh	r2, [r3, #0]
 801a404:	687a      	ldr	r2, [r7, #4]
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	781b      	ldrb	r3, [r3, #0]
 801a40a:	009b      	lsls	r3, r3, #2
 801a40c:	18d3      	adds	r3, r2, r3
 801a40e:	183a      	adds	r2, r7, r0
 801a410:	8812      	ldrh	r2, [r2, #0]
 801a412:	49a7      	ldr	r1, [pc, #668]	@ (801a6b0 <USB_DeactivateEndpoint+0x378>)
 801a414:	430a      	orrs	r2, r1
 801a416:	b292      	uxth	r2, r2
 801a418:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a41a:	687a      	ldr	r2, [r7, #4]
 801a41c:	683b      	ldr	r3, [r7, #0]
 801a41e:	781b      	ldrb	r3, [r3, #0]
 801a420:	009b      	lsls	r3, r3, #2
 801a422:	18d3      	adds	r3, r2, r3
 801a424:	881b      	ldrh	r3, [r3, #0]
 801a426:	b29a      	uxth	r2, r3
 801a428:	200e      	movs	r0, #14
 801a42a:	183b      	adds	r3, r7, r0
 801a42c:	49a1      	ldr	r1, [pc, #644]	@ (801a6b4 <USB_DeactivateEndpoint+0x37c>)
 801a42e:	400a      	ands	r2, r1
 801a430:	801a      	strh	r2, [r3, #0]
 801a432:	687a      	ldr	r2, [r7, #4]
 801a434:	683b      	ldr	r3, [r7, #0]
 801a436:	781b      	ldrb	r3, [r3, #0]
 801a438:	009b      	lsls	r3, r3, #2
 801a43a:	18d3      	adds	r3, r2, r3
 801a43c:	183a      	adds	r2, r7, r0
 801a43e:	8812      	ldrh	r2, [r2, #0]
 801a440:	499a      	ldr	r1, [pc, #616]	@ (801a6ac <USB_DeactivateEndpoint+0x374>)
 801a442:	430a      	orrs	r2, r1
 801a444:	b292      	uxth	r2, r2
 801a446:	801a      	strh	r2, [r3, #0]
 801a448:	e125      	b.n	801a696 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801a44a:	683b      	ldr	r3, [r7, #0]
 801a44c:	785b      	ldrb	r3, [r3, #1]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d000      	beq.n	801a454 <USB_DeactivateEndpoint+0x11c>
 801a452:	e090      	b.n	801a576 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a454:	687a      	ldr	r2, [r7, #4]
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	781b      	ldrb	r3, [r3, #0]
 801a45a:	009b      	lsls	r3, r3, #2
 801a45c:	18d2      	adds	r2, r2, r3
 801a45e:	2120      	movs	r1, #32
 801a460:	187b      	adds	r3, r7, r1
 801a462:	8812      	ldrh	r2, [r2, #0]
 801a464:	801a      	strh	r2, [r3, #0]
 801a466:	187b      	adds	r3, r7, r1
 801a468:	881a      	ldrh	r2, [r3, #0]
 801a46a:	2380      	movs	r3, #128	@ 0x80
 801a46c:	01db      	lsls	r3, r3, #7
 801a46e:	4013      	ands	r3, r2
 801a470:	d016      	beq.n	801a4a0 <USB_DeactivateEndpoint+0x168>
 801a472:	687a      	ldr	r2, [r7, #4]
 801a474:	683b      	ldr	r3, [r7, #0]
 801a476:	781b      	ldrb	r3, [r3, #0]
 801a478:	009b      	lsls	r3, r3, #2
 801a47a:	18d3      	adds	r3, r2, r3
 801a47c:	881b      	ldrh	r3, [r3, #0]
 801a47e:	b29a      	uxth	r2, r3
 801a480:	201e      	movs	r0, #30
 801a482:	183b      	adds	r3, r7, r0
 801a484:	4986      	ldr	r1, [pc, #536]	@ (801a6a0 <USB_DeactivateEndpoint+0x368>)
 801a486:	400a      	ands	r2, r1
 801a488:	801a      	strh	r2, [r3, #0]
 801a48a:	687a      	ldr	r2, [r7, #4]
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	781b      	ldrb	r3, [r3, #0]
 801a490:	009b      	lsls	r3, r3, #2
 801a492:	18d3      	adds	r3, r2, r3
 801a494:	183a      	adds	r2, r7, r0
 801a496:	8812      	ldrh	r2, [r2, #0]
 801a498:	4985      	ldr	r1, [pc, #532]	@ (801a6b0 <USB_DeactivateEndpoint+0x378>)
 801a49a:	430a      	orrs	r2, r1
 801a49c:	b292      	uxth	r2, r2
 801a49e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a4a0:	687a      	ldr	r2, [r7, #4]
 801a4a2:	683b      	ldr	r3, [r7, #0]
 801a4a4:	781b      	ldrb	r3, [r3, #0]
 801a4a6:	009b      	lsls	r3, r3, #2
 801a4a8:	18d2      	adds	r2, r2, r3
 801a4aa:	211c      	movs	r1, #28
 801a4ac:	187b      	adds	r3, r7, r1
 801a4ae:	8812      	ldrh	r2, [r2, #0]
 801a4b0:	801a      	strh	r2, [r3, #0]
 801a4b2:	187b      	adds	r3, r7, r1
 801a4b4:	881b      	ldrh	r3, [r3, #0]
 801a4b6:	2240      	movs	r2, #64	@ 0x40
 801a4b8:	4013      	ands	r3, r2
 801a4ba:	d016      	beq.n	801a4ea <USB_DeactivateEndpoint+0x1b2>
 801a4bc:	687a      	ldr	r2, [r7, #4]
 801a4be:	683b      	ldr	r3, [r7, #0]
 801a4c0:	781b      	ldrb	r3, [r3, #0]
 801a4c2:	009b      	lsls	r3, r3, #2
 801a4c4:	18d3      	adds	r3, r2, r3
 801a4c6:	881b      	ldrh	r3, [r3, #0]
 801a4c8:	b29a      	uxth	r2, r3
 801a4ca:	201a      	movs	r0, #26
 801a4cc:	183b      	adds	r3, r7, r0
 801a4ce:	4974      	ldr	r1, [pc, #464]	@ (801a6a0 <USB_DeactivateEndpoint+0x368>)
 801a4d0:	400a      	ands	r2, r1
 801a4d2:	801a      	strh	r2, [r3, #0]
 801a4d4:	687a      	ldr	r2, [r7, #4]
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	781b      	ldrb	r3, [r3, #0]
 801a4da:	009b      	lsls	r3, r3, #2
 801a4dc:	18d3      	adds	r3, r2, r3
 801a4de:	183a      	adds	r2, r7, r0
 801a4e0:	8812      	ldrh	r2, [r2, #0]
 801a4e2:	4970      	ldr	r1, [pc, #448]	@ (801a6a4 <USB_DeactivateEndpoint+0x36c>)
 801a4e4:	430a      	orrs	r2, r1
 801a4e6:	b292      	uxth	r2, r2
 801a4e8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801a4ea:	687a      	ldr	r2, [r7, #4]
 801a4ec:	683b      	ldr	r3, [r7, #0]
 801a4ee:	781b      	ldrb	r3, [r3, #0]
 801a4f0:	009b      	lsls	r3, r3, #2
 801a4f2:	18d3      	adds	r3, r2, r3
 801a4f4:	881b      	ldrh	r3, [r3, #0]
 801a4f6:	b29a      	uxth	r2, r3
 801a4f8:	2018      	movs	r0, #24
 801a4fa:	183b      	adds	r3, r7, r0
 801a4fc:	4968      	ldr	r1, [pc, #416]	@ (801a6a0 <USB_DeactivateEndpoint+0x368>)
 801a4fe:	400a      	ands	r2, r1
 801a500:	801a      	strh	r2, [r3, #0]
 801a502:	687a      	ldr	r2, [r7, #4]
 801a504:	683b      	ldr	r3, [r7, #0]
 801a506:	781b      	ldrb	r3, [r3, #0]
 801a508:	009b      	lsls	r3, r3, #2
 801a50a:	18d3      	adds	r3, r2, r3
 801a50c:	183a      	adds	r2, r7, r0
 801a50e:	8812      	ldrh	r2, [r2, #0]
 801a510:	4964      	ldr	r1, [pc, #400]	@ (801a6a4 <USB_DeactivateEndpoint+0x36c>)
 801a512:	430a      	orrs	r2, r1
 801a514:	b292      	uxth	r2, r2
 801a516:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a518:	687a      	ldr	r2, [r7, #4]
 801a51a:	683b      	ldr	r3, [r7, #0]
 801a51c:	781b      	ldrb	r3, [r3, #0]
 801a51e:	009b      	lsls	r3, r3, #2
 801a520:	18d3      	adds	r3, r2, r3
 801a522:	881b      	ldrh	r3, [r3, #0]
 801a524:	b29a      	uxth	r2, r3
 801a526:	2016      	movs	r0, #22
 801a528:	183b      	adds	r3, r7, r0
 801a52a:	4962      	ldr	r1, [pc, #392]	@ (801a6b4 <USB_DeactivateEndpoint+0x37c>)
 801a52c:	400a      	ands	r2, r1
 801a52e:	801a      	strh	r2, [r3, #0]
 801a530:	687a      	ldr	r2, [r7, #4]
 801a532:	683b      	ldr	r3, [r7, #0]
 801a534:	781b      	ldrb	r3, [r3, #0]
 801a536:	009b      	lsls	r3, r3, #2
 801a538:	18d3      	adds	r3, r2, r3
 801a53a:	183a      	adds	r2, r7, r0
 801a53c:	8812      	ldrh	r2, [r2, #0]
 801a53e:	495b      	ldr	r1, [pc, #364]	@ (801a6ac <USB_DeactivateEndpoint+0x374>)
 801a540:	430a      	orrs	r2, r1
 801a542:	b292      	uxth	r2, r2
 801a544:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a546:	687a      	ldr	r2, [r7, #4]
 801a548:	683b      	ldr	r3, [r7, #0]
 801a54a:	781b      	ldrb	r3, [r3, #0]
 801a54c:	009b      	lsls	r3, r3, #2
 801a54e:	18d3      	adds	r3, r2, r3
 801a550:	881b      	ldrh	r3, [r3, #0]
 801a552:	b29a      	uxth	r2, r3
 801a554:	2014      	movs	r0, #20
 801a556:	183b      	adds	r3, r7, r0
 801a558:	4953      	ldr	r1, [pc, #332]	@ (801a6a8 <USB_DeactivateEndpoint+0x370>)
 801a55a:	400a      	ands	r2, r1
 801a55c:	801a      	strh	r2, [r3, #0]
 801a55e:	687a      	ldr	r2, [r7, #4]
 801a560:	683b      	ldr	r3, [r7, #0]
 801a562:	781b      	ldrb	r3, [r3, #0]
 801a564:	009b      	lsls	r3, r3, #2
 801a566:	18d3      	adds	r3, r2, r3
 801a568:	183a      	adds	r2, r7, r0
 801a56a:	8812      	ldrh	r2, [r2, #0]
 801a56c:	494f      	ldr	r1, [pc, #316]	@ (801a6ac <USB_DeactivateEndpoint+0x374>)
 801a56e:	430a      	orrs	r2, r1
 801a570:	b292      	uxth	r2, r2
 801a572:	801a      	strh	r2, [r3, #0]
 801a574:	e08f      	b.n	801a696 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a576:	687a      	ldr	r2, [r7, #4]
 801a578:	683b      	ldr	r3, [r7, #0]
 801a57a:	781b      	ldrb	r3, [r3, #0]
 801a57c:	009b      	lsls	r3, r3, #2
 801a57e:	18d2      	adds	r2, r2, r3
 801a580:	212e      	movs	r1, #46	@ 0x2e
 801a582:	187b      	adds	r3, r7, r1
 801a584:	8812      	ldrh	r2, [r2, #0]
 801a586:	801a      	strh	r2, [r3, #0]
 801a588:	187b      	adds	r3, r7, r1
 801a58a:	881a      	ldrh	r2, [r3, #0]
 801a58c:	2380      	movs	r3, #128	@ 0x80
 801a58e:	01db      	lsls	r3, r3, #7
 801a590:	4013      	ands	r3, r2
 801a592:	d016      	beq.n	801a5c2 <USB_DeactivateEndpoint+0x28a>
 801a594:	687a      	ldr	r2, [r7, #4]
 801a596:	683b      	ldr	r3, [r7, #0]
 801a598:	781b      	ldrb	r3, [r3, #0]
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	18d3      	adds	r3, r2, r3
 801a59e:	881b      	ldrh	r3, [r3, #0]
 801a5a0:	b29a      	uxth	r2, r3
 801a5a2:	202c      	movs	r0, #44	@ 0x2c
 801a5a4:	183b      	adds	r3, r7, r0
 801a5a6:	493e      	ldr	r1, [pc, #248]	@ (801a6a0 <USB_DeactivateEndpoint+0x368>)
 801a5a8:	400a      	ands	r2, r1
 801a5aa:	801a      	strh	r2, [r3, #0]
 801a5ac:	687a      	ldr	r2, [r7, #4]
 801a5ae:	683b      	ldr	r3, [r7, #0]
 801a5b0:	781b      	ldrb	r3, [r3, #0]
 801a5b2:	009b      	lsls	r3, r3, #2
 801a5b4:	18d3      	adds	r3, r2, r3
 801a5b6:	183a      	adds	r2, r7, r0
 801a5b8:	8812      	ldrh	r2, [r2, #0]
 801a5ba:	493d      	ldr	r1, [pc, #244]	@ (801a6b0 <USB_DeactivateEndpoint+0x378>)
 801a5bc:	430a      	orrs	r2, r1
 801a5be:	b292      	uxth	r2, r2
 801a5c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a5c2:	687a      	ldr	r2, [r7, #4]
 801a5c4:	683b      	ldr	r3, [r7, #0]
 801a5c6:	781b      	ldrb	r3, [r3, #0]
 801a5c8:	009b      	lsls	r3, r3, #2
 801a5ca:	18d2      	adds	r2, r2, r3
 801a5cc:	212a      	movs	r1, #42	@ 0x2a
 801a5ce:	187b      	adds	r3, r7, r1
 801a5d0:	8812      	ldrh	r2, [r2, #0]
 801a5d2:	801a      	strh	r2, [r3, #0]
 801a5d4:	187b      	adds	r3, r7, r1
 801a5d6:	881b      	ldrh	r3, [r3, #0]
 801a5d8:	2240      	movs	r2, #64	@ 0x40
 801a5da:	4013      	ands	r3, r2
 801a5dc:	d016      	beq.n	801a60c <USB_DeactivateEndpoint+0x2d4>
 801a5de:	687a      	ldr	r2, [r7, #4]
 801a5e0:	683b      	ldr	r3, [r7, #0]
 801a5e2:	781b      	ldrb	r3, [r3, #0]
 801a5e4:	009b      	lsls	r3, r3, #2
 801a5e6:	18d3      	adds	r3, r2, r3
 801a5e8:	881b      	ldrh	r3, [r3, #0]
 801a5ea:	b29a      	uxth	r2, r3
 801a5ec:	2028      	movs	r0, #40	@ 0x28
 801a5ee:	183b      	adds	r3, r7, r0
 801a5f0:	492b      	ldr	r1, [pc, #172]	@ (801a6a0 <USB_DeactivateEndpoint+0x368>)
 801a5f2:	400a      	ands	r2, r1
 801a5f4:	801a      	strh	r2, [r3, #0]
 801a5f6:	687a      	ldr	r2, [r7, #4]
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	781b      	ldrb	r3, [r3, #0]
 801a5fc:	009b      	lsls	r3, r3, #2
 801a5fe:	18d3      	adds	r3, r2, r3
 801a600:	183a      	adds	r2, r7, r0
 801a602:	8812      	ldrh	r2, [r2, #0]
 801a604:	4927      	ldr	r1, [pc, #156]	@ (801a6a4 <USB_DeactivateEndpoint+0x36c>)
 801a606:	430a      	orrs	r2, r1
 801a608:	b292      	uxth	r2, r2
 801a60a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801a60c:	687a      	ldr	r2, [r7, #4]
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	781b      	ldrb	r3, [r3, #0]
 801a612:	009b      	lsls	r3, r3, #2
 801a614:	18d3      	adds	r3, r2, r3
 801a616:	881b      	ldrh	r3, [r3, #0]
 801a618:	b29a      	uxth	r2, r3
 801a61a:	2026      	movs	r0, #38	@ 0x26
 801a61c:	183b      	adds	r3, r7, r0
 801a61e:	4920      	ldr	r1, [pc, #128]	@ (801a6a0 <USB_DeactivateEndpoint+0x368>)
 801a620:	400a      	ands	r2, r1
 801a622:	801a      	strh	r2, [r3, #0]
 801a624:	687a      	ldr	r2, [r7, #4]
 801a626:	683b      	ldr	r3, [r7, #0]
 801a628:	781b      	ldrb	r3, [r3, #0]
 801a62a:	009b      	lsls	r3, r3, #2
 801a62c:	18d3      	adds	r3, r2, r3
 801a62e:	183a      	adds	r2, r7, r0
 801a630:	8812      	ldrh	r2, [r2, #0]
 801a632:	491f      	ldr	r1, [pc, #124]	@ (801a6b0 <USB_DeactivateEndpoint+0x378>)
 801a634:	430a      	orrs	r2, r1
 801a636:	b292      	uxth	r2, r2
 801a638:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a63a:	687a      	ldr	r2, [r7, #4]
 801a63c:	683b      	ldr	r3, [r7, #0]
 801a63e:	781b      	ldrb	r3, [r3, #0]
 801a640:	009b      	lsls	r3, r3, #2
 801a642:	18d3      	adds	r3, r2, r3
 801a644:	881b      	ldrh	r3, [r3, #0]
 801a646:	b29a      	uxth	r2, r3
 801a648:	2024      	movs	r0, #36	@ 0x24
 801a64a:	183b      	adds	r3, r7, r0
 801a64c:	4916      	ldr	r1, [pc, #88]	@ (801a6a8 <USB_DeactivateEndpoint+0x370>)
 801a64e:	400a      	ands	r2, r1
 801a650:	801a      	strh	r2, [r3, #0]
 801a652:	687a      	ldr	r2, [r7, #4]
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	781b      	ldrb	r3, [r3, #0]
 801a658:	009b      	lsls	r3, r3, #2
 801a65a:	18d3      	adds	r3, r2, r3
 801a65c:	183a      	adds	r2, r7, r0
 801a65e:	8812      	ldrh	r2, [r2, #0]
 801a660:	4912      	ldr	r1, [pc, #72]	@ (801a6ac <USB_DeactivateEndpoint+0x374>)
 801a662:	430a      	orrs	r2, r1
 801a664:	b292      	uxth	r2, r2
 801a666:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a668:	687a      	ldr	r2, [r7, #4]
 801a66a:	683b      	ldr	r3, [r7, #0]
 801a66c:	781b      	ldrb	r3, [r3, #0]
 801a66e:	009b      	lsls	r3, r3, #2
 801a670:	18d3      	adds	r3, r2, r3
 801a672:	881b      	ldrh	r3, [r3, #0]
 801a674:	b29a      	uxth	r2, r3
 801a676:	2022      	movs	r0, #34	@ 0x22
 801a678:	183b      	adds	r3, r7, r0
 801a67a:	490e      	ldr	r1, [pc, #56]	@ (801a6b4 <USB_DeactivateEndpoint+0x37c>)
 801a67c:	400a      	ands	r2, r1
 801a67e:	801a      	strh	r2, [r3, #0]
 801a680:	687a      	ldr	r2, [r7, #4]
 801a682:	683b      	ldr	r3, [r7, #0]
 801a684:	781b      	ldrb	r3, [r3, #0]
 801a686:	009b      	lsls	r3, r3, #2
 801a688:	18d3      	adds	r3, r2, r3
 801a68a:	183a      	adds	r2, r7, r0
 801a68c:	8812      	ldrh	r2, [r2, #0]
 801a68e:	4907      	ldr	r1, [pc, #28]	@ (801a6ac <USB_DeactivateEndpoint+0x374>)
 801a690:	430a      	orrs	r2, r1
 801a692:	b292      	uxth	r2, r2
 801a694:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801a696:	2300      	movs	r3, #0
}
 801a698:	0018      	movs	r0, r3
 801a69a:	46bd      	mov	sp, r7
 801a69c:	b00c      	add	sp, #48	@ 0x30
 801a69e:	bd80      	pop	{r7, pc}
 801a6a0:	ffff8f8f 	.word	0xffff8f8f
 801a6a4:	ffff80c0 	.word	0xffff80c0
 801a6a8:	ffff8fbf 	.word	0xffff8fbf
 801a6ac:	ffff8080 	.word	0xffff8080
 801a6b0:	ffffc080 	.word	0xffffc080
 801a6b4:	ffffbf8f 	.word	0xffffbf8f

0801a6b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a6b8:	b590      	push	{r4, r7, lr}
 801a6ba:	b0c3      	sub	sp, #268	@ 0x10c
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
 801a6c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	785b      	ldrb	r3, [r3, #1]
 801a6c6:	2b01      	cmp	r3, #1
 801a6c8:	d001      	beq.n	801a6ce <USB_EPStartXfer+0x16>
 801a6ca:	f000 fd2d 	bl	801b128 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801a6ce:	683b      	ldr	r3, [r7, #0]
 801a6d0:	699a      	ldr	r2, [r3, #24]
 801a6d2:	683b      	ldr	r3, [r7, #0]
 801a6d4:	691b      	ldr	r3, [r3, #16]
 801a6d6:	429a      	cmp	r2, r3
 801a6d8:	d905      	bls.n	801a6e6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	691b      	ldr	r3, [r3, #16]
 801a6de:	1d7a      	adds	r2, r7, #5
 801a6e0:	32ff      	adds	r2, #255	@ 0xff
 801a6e2:	6013      	str	r3, [r2, #0]
 801a6e4:	e004      	b.n	801a6f0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801a6e6:	683b      	ldr	r3, [r7, #0]
 801a6e8:	699b      	ldr	r3, [r3, #24]
 801a6ea:	1d7a      	adds	r2, r7, #5
 801a6ec:	32ff      	adds	r2, #255	@ 0xff
 801a6ee:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801a6f0:	683b      	ldr	r3, [r7, #0]
 801a6f2:	7b1b      	ldrb	r3, [r3, #12]
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d125      	bne.n	801a744 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801a6f8:	683b      	ldr	r3, [r7, #0]
 801a6fa:	6959      	ldr	r1, [r3, #20]
 801a6fc:	683b      	ldr	r3, [r7, #0]
 801a6fe:	88da      	ldrh	r2, [r3, #6]
 801a700:	1d7b      	adds	r3, r7, #5
 801a702:	33ff      	adds	r3, #255	@ 0xff
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	b29b      	uxth	r3, r3
 801a708:	6878      	ldr	r0, [r7, #4]
 801a70a:	f001 fa47 	bl	801bb9c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	613b      	str	r3, [r7, #16]
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	2250      	movs	r2, #80	@ 0x50
 801a716:	5a9b      	ldrh	r3, [r3, r2]
 801a718:	b29b      	uxth	r3, r3
 801a71a:	001a      	movs	r2, r3
 801a71c:	693b      	ldr	r3, [r7, #16]
 801a71e:	189b      	adds	r3, r3, r2
 801a720:	613b      	str	r3, [r7, #16]
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	781b      	ldrb	r3, [r3, #0]
 801a726:	00da      	lsls	r2, r3, #3
 801a728:	693b      	ldr	r3, [r7, #16]
 801a72a:	18d3      	adds	r3, r2, r3
 801a72c:	4ad7      	ldr	r2, [pc, #860]	@ (801aa8c <USB_EPStartXfer+0x3d4>)
 801a72e:	4694      	mov	ip, r2
 801a730:	4463      	add	r3, ip
 801a732:	60fb      	str	r3, [r7, #12]
 801a734:	1d7b      	adds	r3, r7, #5
 801a736:	33ff      	adds	r3, #255	@ 0xff
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	b29a      	uxth	r2, r3
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	801a      	strh	r2, [r3, #0]
 801a740:	f000 fccd 	bl	801b0de <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801a744:	683b      	ldr	r3, [r7, #0]
 801a746:	78db      	ldrb	r3, [r3, #3]
 801a748:	2b02      	cmp	r3, #2
 801a74a:	d000      	beq.n	801a74e <USB_EPStartXfer+0x96>
 801a74c:	e362      	b.n	801ae14 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801a74e:	683b      	ldr	r3, [r7, #0]
 801a750:	6a1a      	ldr	r2, [r3, #32]
 801a752:	683b      	ldr	r3, [r7, #0]
 801a754:	691b      	ldr	r3, [r3, #16]
 801a756:	429a      	cmp	r2, r3
 801a758:	d800      	bhi.n	801a75c <USB_EPStartXfer+0xa4>
 801a75a:	e309      	b.n	801ad70 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801a75c:	687a      	ldr	r2, [r7, #4]
 801a75e:	683b      	ldr	r3, [r7, #0]
 801a760:	781b      	ldrb	r3, [r3, #0]
 801a762:	009b      	lsls	r3, r3, #2
 801a764:	18d3      	adds	r3, r2, r3
 801a766:	881b      	ldrh	r3, [r3, #0]
 801a768:	b29a      	uxth	r2, r3
 801a76a:	2056      	movs	r0, #86	@ 0x56
 801a76c:	183b      	adds	r3, r7, r0
 801a76e:	49c8      	ldr	r1, [pc, #800]	@ (801aa90 <USB_EPStartXfer+0x3d8>)
 801a770:	400a      	ands	r2, r1
 801a772:	801a      	strh	r2, [r3, #0]
 801a774:	687a      	ldr	r2, [r7, #4]
 801a776:	683b      	ldr	r3, [r7, #0]
 801a778:	781b      	ldrb	r3, [r3, #0]
 801a77a:	009b      	lsls	r3, r3, #2
 801a77c:	18d3      	adds	r3, r2, r3
 801a77e:	183a      	adds	r2, r7, r0
 801a780:	8812      	ldrh	r2, [r2, #0]
 801a782:	49c4      	ldr	r1, [pc, #784]	@ (801aa94 <USB_EPStartXfer+0x3dc>)
 801a784:	430a      	orrs	r2, r1
 801a786:	b292      	uxth	r2, r2
 801a788:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801a78a:	683b      	ldr	r3, [r7, #0]
 801a78c:	6a1a      	ldr	r2, [r3, #32]
 801a78e:	1d7b      	adds	r3, r7, #5
 801a790:	33ff      	adds	r3, #255	@ 0xff
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	1ad2      	subs	r2, r2, r3
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a79a:	687a      	ldr	r2, [r7, #4]
 801a79c:	683b      	ldr	r3, [r7, #0]
 801a79e:	781b      	ldrb	r3, [r3, #0]
 801a7a0:	009b      	lsls	r3, r3, #2
 801a7a2:	18d3      	adds	r3, r2, r3
 801a7a4:	881b      	ldrh	r3, [r3, #0]
 801a7a6:	b29b      	uxth	r3, r3
 801a7a8:	001a      	movs	r2, r3
 801a7aa:	2340      	movs	r3, #64	@ 0x40
 801a7ac:	4013      	ands	r3, r2
 801a7ae:	d100      	bne.n	801a7b2 <USB_EPStartXfer+0xfa>
 801a7b0:	e176      	b.n	801aaa0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	633b      	str	r3, [r7, #48]	@ 0x30
 801a7b6:	683b      	ldr	r3, [r7, #0]
 801a7b8:	785b      	ldrb	r3, [r3, #1]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d000      	beq.n	801a7c0 <USB_EPStartXfer+0x108>
 801a7be:	e074      	b.n	801a8aa <USB_EPStartXfer+0x1f2>
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	2250      	movs	r2, #80	@ 0x50
 801a7c8:	5a9b      	ldrh	r3, [r3, r2]
 801a7ca:	b29b      	uxth	r3, r3
 801a7cc:	001a      	movs	r2, r3
 801a7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7d0:	189b      	adds	r3, r3, r2
 801a7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7d4:	683b      	ldr	r3, [r7, #0]
 801a7d6:	781b      	ldrb	r3, [r3, #0]
 801a7d8:	00da      	lsls	r2, r3, #3
 801a7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7dc:	18d3      	adds	r3, r2, r3
 801a7de:	4aae      	ldr	r2, [pc, #696]	@ (801aa98 <USB_EPStartXfer+0x3e0>)
 801a7e0:	4694      	mov	ip, r2
 801a7e2:	4463      	add	r3, ip
 801a7e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801a7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7e8:	881b      	ldrh	r3, [r3, #0]
 801a7ea:	b29b      	uxth	r3, r3
 801a7ec:	059b      	lsls	r3, r3, #22
 801a7ee:	0d9b      	lsrs	r3, r3, #22
 801a7f0:	b29a      	uxth	r2, r3
 801a7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7f4:	801a      	strh	r2, [r3, #0]
 801a7f6:	1d7b      	adds	r3, r7, #5
 801a7f8:	33ff      	adds	r3, #255	@ 0xff
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	2b3e      	cmp	r3, #62	@ 0x3e
 801a7fe:	d924      	bls.n	801a84a <USB_EPStartXfer+0x192>
 801a800:	1d7b      	adds	r3, r7, #5
 801a802:	33ff      	adds	r3, #255	@ 0xff
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	095b      	lsrs	r3, r3, #5
 801a808:	1c7a      	adds	r2, r7, #1
 801a80a:	32ff      	adds	r2, #255	@ 0xff
 801a80c:	6013      	str	r3, [r2, #0]
 801a80e:	1d7b      	adds	r3, r7, #5
 801a810:	33ff      	adds	r3, #255	@ 0xff
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	221f      	movs	r2, #31
 801a816:	4013      	ands	r3, r2
 801a818:	d106      	bne.n	801a828 <USB_EPStartXfer+0x170>
 801a81a:	1c7b      	adds	r3, r7, #1
 801a81c:	33ff      	adds	r3, #255	@ 0xff
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	3b01      	subs	r3, #1
 801a822:	1c7a      	adds	r2, r7, #1
 801a824:	32ff      	adds	r2, #255	@ 0xff
 801a826:	6013      	str	r3, [r2, #0]
 801a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a82a:	881b      	ldrh	r3, [r3, #0]
 801a82c:	b29a      	uxth	r2, r3
 801a82e:	1c7b      	adds	r3, r7, #1
 801a830:	33ff      	adds	r3, #255	@ 0xff
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	b29b      	uxth	r3, r3
 801a836:	029b      	lsls	r3, r3, #10
 801a838:	b29b      	uxth	r3, r3
 801a83a:	4313      	orrs	r3, r2
 801a83c:	b29b      	uxth	r3, r3
 801a83e:	4a97      	ldr	r2, [pc, #604]	@ (801aa9c <USB_EPStartXfer+0x3e4>)
 801a840:	4313      	orrs	r3, r2
 801a842:	b29a      	uxth	r2, r3
 801a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a846:	801a      	strh	r2, [r3, #0]
 801a848:	e04a      	b.n	801a8e0 <USB_EPStartXfer+0x228>
 801a84a:	1d7b      	adds	r3, r7, #5
 801a84c:	33ff      	adds	r3, #255	@ 0xff
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d108      	bne.n	801a866 <USB_EPStartXfer+0x1ae>
 801a854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a856:	881b      	ldrh	r3, [r3, #0]
 801a858:	b29b      	uxth	r3, r3
 801a85a:	4a90      	ldr	r2, [pc, #576]	@ (801aa9c <USB_EPStartXfer+0x3e4>)
 801a85c:	4313      	orrs	r3, r2
 801a85e:	b29a      	uxth	r2, r3
 801a860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a862:	801a      	strh	r2, [r3, #0]
 801a864:	e03c      	b.n	801a8e0 <USB_EPStartXfer+0x228>
 801a866:	1d7b      	adds	r3, r7, #5
 801a868:	33ff      	adds	r3, #255	@ 0xff
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	085b      	lsrs	r3, r3, #1
 801a86e:	1c7a      	adds	r2, r7, #1
 801a870:	32ff      	adds	r2, #255	@ 0xff
 801a872:	6013      	str	r3, [r2, #0]
 801a874:	1d7b      	adds	r3, r7, #5
 801a876:	33ff      	adds	r3, #255	@ 0xff
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	2201      	movs	r2, #1
 801a87c:	4013      	ands	r3, r2
 801a87e:	d006      	beq.n	801a88e <USB_EPStartXfer+0x1d6>
 801a880:	1c7b      	adds	r3, r7, #1
 801a882:	33ff      	adds	r3, #255	@ 0xff
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	3301      	adds	r3, #1
 801a888:	1c7a      	adds	r2, r7, #1
 801a88a:	32ff      	adds	r2, #255	@ 0xff
 801a88c:	6013      	str	r3, [r2, #0]
 801a88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a890:	881b      	ldrh	r3, [r3, #0]
 801a892:	b29a      	uxth	r2, r3
 801a894:	1c7b      	adds	r3, r7, #1
 801a896:	33ff      	adds	r3, #255	@ 0xff
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	b29b      	uxth	r3, r3
 801a89c:	029b      	lsls	r3, r3, #10
 801a89e:	b29b      	uxth	r3, r3
 801a8a0:	4313      	orrs	r3, r2
 801a8a2:	b29a      	uxth	r2, r3
 801a8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8a6:	801a      	strh	r2, [r3, #0]
 801a8a8:	e01a      	b.n	801a8e0 <USB_EPStartXfer+0x228>
 801a8aa:	683b      	ldr	r3, [r7, #0]
 801a8ac:	785b      	ldrb	r3, [r3, #1]
 801a8ae:	2b01      	cmp	r3, #1
 801a8b0:	d116      	bne.n	801a8e0 <USB_EPStartXfer+0x228>
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	2250      	movs	r2, #80	@ 0x50
 801a8b6:	5a9b      	ldrh	r3, [r3, r2]
 801a8b8:	b29b      	uxth	r3, r3
 801a8ba:	001a      	movs	r2, r3
 801a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8be:	189b      	adds	r3, r3, r2
 801a8c0:	633b      	str	r3, [r7, #48]	@ 0x30
 801a8c2:	683b      	ldr	r3, [r7, #0]
 801a8c4:	781b      	ldrb	r3, [r3, #0]
 801a8c6:	00da      	lsls	r2, r3, #3
 801a8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8ca:	18d3      	adds	r3, r2, r3
 801a8cc:	4a72      	ldr	r2, [pc, #456]	@ (801aa98 <USB_EPStartXfer+0x3e0>)
 801a8ce:	4694      	mov	ip, r2
 801a8d0:	4463      	add	r3, ip
 801a8d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8d4:	1d7b      	adds	r3, r7, #5
 801a8d6:	33ff      	adds	r3, #255	@ 0xff
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	b29a      	uxth	r2, r3
 801a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a8e0:	2076      	movs	r0, #118	@ 0x76
 801a8e2:	183b      	adds	r3, r7, r0
 801a8e4:	683a      	ldr	r2, [r7, #0]
 801a8e6:	8952      	ldrh	r2, [r2, #10]
 801a8e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a8ea:	683b      	ldr	r3, [r7, #0]
 801a8ec:	6959      	ldr	r1, [r3, #20]
 801a8ee:	1d7b      	adds	r3, r7, #5
 801a8f0:	33ff      	adds	r3, #255	@ 0xff
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	b29c      	uxth	r4, r3
 801a8f6:	183b      	adds	r3, r7, r0
 801a8f8:	881a      	ldrh	r2, [r3, #0]
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	0023      	movs	r3, r4
 801a8fe:	f001 f94d 	bl	801bb9c <USB_WritePMA>
            ep->xfer_buff += len;
 801a902:	683b      	ldr	r3, [r7, #0]
 801a904:	695a      	ldr	r2, [r3, #20]
 801a906:	1d7b      	adds	r3, r7, #5
 801a908:	33ff      	adds	r3, #255	@ 0xff
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	18d2      	adds	r2, r2, r3
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a912:	683b      	ldr	r3, [r7, #0]
 801a914:	6a1a      	ldr	r2, [r3, #32]
 801a916:	683b      	ldr	r3, [r7, #0]
 801a918:	691b      	ldr	r3, [r3, #16]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d908      	bls.n	801a930 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801a91e:	683b      	ldr	r3, [r7, #0]
 801a920:	6a1a      	ldr	r2, [r3, #32]
 801a922:	1d7b      	adds	r3, r7, #5
 801a924:	33ff      	adds	r3, #255	@ 0xff
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	1ad2      	subs	r2, r2, r3
 801a92a:	683b      	ldr	r3, [r7, #0]
 801a92c:	621a      	str	r2, [r3, #32]
 801a92e:	e007      	b.n	801a940 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	6a1b      	ldr	r3, [r3, #32]
 801a934:	1d7a      	adds	r2, r7, #5
 801a936:	32ff      	adds	r2, #255	@ 0xff
 801a938:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	2200      	movs	r2, #0
 801a93e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a940:	683b      	ldr	r3, [r7, #0]
 801a942:	785b      	ldrb	r3, [r3, #1]
 801a944:	2b00      	cmp	r3, #0
 801a946:	d000      	beq.n	801a94a <USB_EPStartXfer+0x292>
 801a948:	e070      	b.n	801aa2c <USB_EPStartXfer+0x374>
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	61bb      	str	r3, [r7, #24]
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	2250      	movs	r2, #80	@ 0x50
 801a952:	5a9b      	ldrh	r3, [r3, r2]
 801a954:	b29b      	uxth	r3, r3
 801a956:	001a      	movs	r2, r3
 801a958:	69bb      	ldr	r3, [r7, #24]
 801a95a:	189b      	adds	r3, r3, r2
 801a95c:	61bb      	str	r3, [r7, #24]
 801a95e:	683b      	ldr	r3, [r7, #0]
 801a960:	781b      	ldrb	r3, [r3, #0]
 801a962:	00da      	lsls	r2, r3, #3
 801a964:	69bb      	ldr	r3, [r7, #24]
 801a966:	18d3      	adds	r3, r2, r3
 801a968:	4a48      	ldr	r2, [pc, #288]	@ (801aa8c <USB_EPStartXfer+0x3d4>)
 801a96a:	4694      	mov	ip, r2
 801a96c:	4463      	add	r3, ip
 801a96e:	617b      	str	r3, [r7, #20]
 801a970:	697b      	ldr	r3, [r7, #20]
 801a972:	881b      	ldrh	r3, [r3, #0]
 801a974:	b29b      	uxth	r3, r3
 801a976:	059b      	lsls	r3, r3, #22
 801a978:	0d9b      	lsrs	r3, r3, #22
 801a97a:	b29a      	uxth	r2, r3
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	801a      	strh	r2, [r3, #0]
 801a980:	1d7b      	adds	r3, r7, #5
 801a982:	33ff      	adds	r3, #255	@ 0xff
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	2b3e      	cmp	r3, #62	@ 0x3e
 801a988:	d922      	bls.n	801a9d0 <USB_EPStartXfer+0x318>
 801a98a:	1d7b      	adds	r3, r7, #5
 801a98c:	33ff      	adds	r3, #255	@ 0xff
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	095b      	lsrs	r3, r3, #5
 801a992:	21fc      	movs	r1, #252	@ 0xfc
 801a994:	187a      	adds	r2, r7, r1
 801a996:	6013      	str	r3, [r2, #0]
 801a998:	1d7b      	adds	r3, r7, #5
 801a99a:	33ff      	adds	r3, #255	@ 0xff
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	221f      	movs	r2, #31
 801a9a0:	4013      	ands	r3, r2
 801a9a2:	d104      	bne.n	801a9ae <USB_EPStartXfer+0x2f6>
 801a9a4:	187b      	adds	r3, r7, r1
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	3b01      	subs	r3, #1
 801a9aa:	187a      	adds	r2, r7, r1
 801a9ac:	6013      	str	r3, [r2, #0]
 801a9ae:	697b      	ldr	r3, [r7, #20]
 801a9b0:	881b      	ldrh	r3, [r3, #0]
 801a9b2:	b29a      	uxth	r2, r3
 801a9b4:	23fc      	movs	r3, #252	@ 0xfc
 801a9b6:	18fb      	adds	r3, r7, r3
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	b29b      	uxth	r3, r3
 801a9bc:	029b      	lsls	r3, r3, #10
 801a9be:	b29b      	uxth	r3, r3
 801a9c0:	4313      	orrs	r3, r2
 801a9c2:	b29b      	uxth	r3, r3
 801a9c4:	4a35      	ldr	r2, [pc, #212]	@ (801aa9c <USB_EPStartXfer+0x3e4>)
 801a9c6:	4313      	orrs	r3, r2
 801a9c8:	b29a      	uxth	r2, r3
 801a9ca:	697b      	ldr	r3, [r7, #20]
 801a9cc:	801a      	strh	r2, [r3, #0]
 801a9ce:	e04a      	b.n	801aa66 <USB_EPStartXfer+0x3ae>
 801a9d0:	1d7b      	adds	r3, r7, #5
 801a9d2:	33ff      	adds	r3, #255	@ 0xff
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d108      	bne.n	801a9ec <USB_EPStartXfer+0x334>
 801a9da:	697b      	ldr	r3, [r7, #20]
 801a9dc:	881b      	ldrh	r3, [r3, #0]
 801a9de:	b29b      	uxth	r3, r3
 801a9e0:	4a2e      	ldr	r2, [pc, #184]	@ (801aa9c <USB_EPStartXfer+0x3e4>)
 801a9e2:	4313      	orrs	r3, r2
 801a9e4:	b29a      	uxth	r2, r3
 801a9e6:	697b      	ldr	r3, [r7, #20]
 801a9e8:	801a      	strh	r2, [r3, #0]
 801a9ea:	e03c      	b.n	801aa66 <USB_EPStartXfer+0x3ae>
 801a9ec:	1d7b      	adds	r3, r7, #5
 801a9ee:	33ff      	adds	r3, #255	@ 0xff
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	085b      	lsrs	r3, r3, #1
 801a9f4:	21fc      	movs	r1, #252	@ 0xfc
 801a9f6:	187a      	adds	r2, r7, r1
 801a9f8:	6013      	str	r3, [r2, #0]
 801a9fa:	1d7b      	adds	r3, r7, #5
 801a9fc:	33ff      	adds	r3, #255	@ 0xff
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	2201      	movs	r2, #1
 801aa02:	4013      	ands	r3, r2
 801aa04:	d004      	beq.n	801aa10 <USB_EPStartXfer+0x358>
 801aa06:	187b      	adds	r3, r7, r1
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	3301      	adds	r3, #1
 801aa0c:	187a      	adds	r2, r7, r1
 801aa0e:	6013      	str	r3, [r2, #0]
 801aa10:	697b      	ldr	r3, [r7, #20]
 801aa12:	881b      	ldrh	r3, [r3, #0]
 801aa14:	b29a      	uxth	r2, r3
 801aa16:	23fc      	movs	r3, #252	@ 0xfc
 801aa18:	18fb      	adds	r3, r7, r3
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	b29b      	uxth	r3, r3
 801aa1e:	029b      	lsls	r3, r3, #10
 801aa20:	b29b      	uxth	r3, r3
 801aa22:	4313      	orrs	r3, r2
 801aa24:	b29a      	uxth	r2, r3
 801aa26:	697b      	ldr	r3, [r7, #20]
 801aa28:	801a      	strh	r2, [r3, #0]
 801aa2a:	e01c      	b.n	801aa66 <USB_EPStartXfer+0x3ae>
 801aa2c:	683b      	ldr	r3, [r7, #0]
 801aa2e:	785b      	ldrb	r3, [r3, #1]
 801aa30:	2b01      	cmp	r3, #1
 801aa32:	d118      	bne.n	801aa66 <USB_EPStartXfer+0x3ae>
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	623b      	str	r3, [r7, #32]
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	2250      	movs	r2, #80	@ 0x50
 801aa3c:	5a9b      	ldrh	r3, [r3, r2]
 801aa3e:	b29b      	uxth	r3, r3
 801aa40:	001a      	movs	r2, r3
 801aa42:	6a3b      	ldr	r3, [r7, #32]
 801aa44:	189b      	adds	r3, r3, r2
 801aa46:	623b      	str	r3, [r7, #32]
 801aa48:	683b      	ldr	r3, [r7, #0]
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	00da      	lsls	r2, r3, #3
 801aa4e:	6a3b      	ldr	r3, [r7, #32]
 801aa50:	18d3      	adds	r3, r2, r3
 801aa52:	4a0e      	ldr	r2, [pc, #56]	@ (801aa8c <USB_EPStartXfer+0x3d4>)
 801aa54:	4694      	mov	ip, r2
 801aa56:	4463      	add	r3, ip
 801aa58:	61fb      	str	r3, [r7, #28]
 801aa5a:	1d7b      	adds	r3, r7, #5
 801aa5c:	33ff      	adds	r3, #255	@ 0xff
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	b29a      	uxth	r2, r3
 801aa62:	69fb      	ldr	r3, [r7, #28]
 801aa64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801aa66:	2076      	movs	r0, #118	@ 0x76
 801aa68:	183b      	adds	r3, r7, r0
 801aa6a:	683a      	ldr	r2, [r7, #0]
 801aa6c:	8912      	ldrh	r2, [r2, #8]
 801aa6e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	6959      	ldr	r1, [r3, #20]
 801aa74:	1d7b      	adds	r3, r7, #5
 801aa76:	33ff      	adds	r3, #255	@ 0xff
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	b29c      	uxth	r4, r3
 801aa7c:	183b      	adds	r3, r7, r0
 801aa7e:	881a      	ldrh	r2, [r3, #0]
 801aa80:	6878      	ldr	r0, [r7, #4]
 801aa82:	0023      	movs	r3, r4
 801aa84:	f001 f88a 	bl	801bb9c <USB_WritePMA>
 801aa88:	e329      	b.n	801b0de <USB_EPStartXfer+0xa26>
 801aa8a:	46c0      	nop			@ (mov r8, r8)
 801aa8c:	00000402 	.word	0x00000402
 801aa90:	ffff8f8f 	.word	0xffff8f8f
 801aa94:	ffff8180 	.word	0xffff8180
 801aa98:	00000406 	.word	0x00000406
 801aa9c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	785b      	ldrb	r3, [r3, #1]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d000      	beq.n	801aaaa <USB_EPStartXfer+0x3f2>
 801aaa8:	e070      	b.n	801ab8c <USB_EPStartXfer+0x4d4>
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	2250      	movs	r2, #80	@ 0x50
 801aab2:	5a9b      	ldrh	r3, [r3, r2]
 801aab4:	b29b      	uxth	r3, r3
 801aab6:	001a      	movs	r2, r3
 801aab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aaba:	189b      	adds	r3, r3, r2
 801aabc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aabe:	683b      	ldr	r3, [r7, #0]
 801aac0:	781b      	ldrb	r3, [r3, #0]
 801aac2:	00da      	lsls	r2, r3, #3
 801aac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aac6:	18d3      	adds	r3, r2, r3
 801aac8:	4acd      	ldr	r2, [pc, #820]	@ (801ae00 <USB_EPStartXfer+0x748>)
 801aaca:	4694      	mov	ip, r2
 801aacc:	4463      	add	r3, ip
 801aace:	647b      	str	r3, [r7, #68]	@ 0x44
 801aad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aad2:	881b      	ldrh	r3, [r3, #0]
 801aad4:	b29b      	uxth	r3, r3
 801aad6:	059b      	lsls	r3, r3, #22
 801aad8:	0d9b      	lsrs	r3, r3, #22
 801aada:	b29a      	uxth	r2, r3
 801aadc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aade:	801a      	strh	r2, [r3, #0]
 801aae0:	1d7b      	adds	r3, r7, #5
 801aae2:	33ff      	adds	r3, #255	@ 0xff
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	2b3e      	cmp	r3, #62	@ 0x3e
 801aae8:	d922      	bls.n	801ab30 <USB_EPStartXfer+0x478>
 801aaea:	1d7b      	adds	r3, r7, #5
 801aaec:	33ff      	adds	r3, #255	@ 0xff
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	095b      	lsrs	r3, r3, #5
 801aaf2:	21f8      	movs	r1, #248	@ 0xf8
 801aaf4:	187a      	adds	r2, r7, r1
 801aaf6:	6013      	str	r3, [r2, #0]
 801aaf8:	1d7b      	adds	r3, r7, #5
 801aafa:	33ff      	adds	r3, #255	@ 0xff
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	221f      	movs	r2, #31
 801ab00:	4013      	ands	r3, r2
 801ab02:	d104      	bne.n	801ab0e <USB_EPStartXfer+0x456>
 801ab04:	187b      	adds	r3, r7, r1
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	3b01      	subs	r3, #1
 801ab0a:	187a      	adds	r2, r7, r1
 801ab0c:	6013      	str	r3, [r2, #0]
 801ab0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab10:	881b      	ldrh	r3, [r3, #0]
 801ab12:	b29a      	uxth	r2, r3
 801ab14:	23f8      	movs	r3, #248	@ 0xf8
 801ab16:	18fb      	adds	r3, r7, r3
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	b29b      	uxth	r3, r3
 801ab1c:	029b      	lsls	r3, r3, #10
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	4313      	orrs	r3, r2
 801ab22:	b29b      	uxth	r3, r3
 801ab24:	4ab7      	ldr	r2, [pc, #732]	@ (801ae04 <USB_EPStartXfer+0x74c>)
 801ab26:	4313      	orrs	r3, r2
 801ab28:	b29a      	uxth	r2, r3
 801ab2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab2c:	801a      	strh	r2, [r3, #0]
 801ab2e:	e04a      	b.n	801abc6 <USB_EPStartXfer+0x50e>
 801ab30:	1d7b      	adds	r3, r7, #5
 801ab32:	33ff      	adds	r3, #255	@ 0xff
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d108      	bne.n	801ab4c <USB_EPStartXfer+0x494>
 801ab3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab3c:	881b      	ldrh	r3, [r3, #0]
 801ab3e:	b29b      	uxth	r3, r3
 801ab40:	4ab0      	ldr	r2, [pc, #704]	@ (801ae04 <USB_EPStartXfer+0x74c>)
 801ab42:	4313      	orrs	r3, r2
 801ab44:	b29a      	uxth	r2, r3
 801ab46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab48:	801a      	strh	r2, [r3, #0]
 801ab4a:	e03c      	b.n	801abc6 <USB_EPStartXfer+0x50e>
 801ab4c:	1d7b      	adds	r3, r7, #5
 801ab4e:	33ff      	adds	r3, #255	@ 0xff
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	085b      	lsrs	r3, r3, #1
 801ab54:	21f8      	movs	r1, #248	@ 0xf8
 801ab56:	187a      	adds	r2, r7, r1
 801ab58:	6013      	str	r3, [r2, #0]
 801ab5a:	1d7b      	adds	r3, r7, #5
 801ab5c:	33ff      	adds	r3, #255	@ 0xff
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	2201      	movs	r2, #1
 801ab62:	4013      	ands	r3, r2
 801ab64:	d004      	beq.n	801ab70 <USB_EPStartXfer+0x4b8>
 801ab66:	187b      	adds	r3, r7, r1
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	3301      	adds	r3, #1
 801ab6c:	187a      	adds	r2, r7, r1
 801ab6e:	6013      	str	r3, [r2, #0]
 801ab70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab72:	881b      	ldrh	r3, [r3, #0]
 801ab74:	b29a      	uxth	r2, r3
 801ab76:	23f8      	movs	r3, #248	@ 0xf8
 801ab78:	18fb      	adds	r3, r7, r3
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	029b      	lsls	r3, r3, #10
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	4313      	orrs	r3, r2
 801ab84:	b29a      	uxth	r2, r3
 801ab86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab88:	801a      	strh	r2, [r3, #0]
 801ab8a:	e01c      	b.n	801abc6 <USB_EPStartXfer+0x50e>
 801ab8c:	683b      	ldr	r3, [r7, #0]
 801ab8e:	785b      	ldrb	r3, [r3, #1]
 801ab90:	2b01      	cmp	r3, #1
 801ab92:	d118      	bne.n	801abc6 <USB_EPStartXfer+0x50e>
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	653b      	str	r3, [r7, #80]	@ 0x50
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2250      	movs	r2, #80	@ 0x50
 801ab9c:	5a9b      	ldrh	r3, [r3, r2]
 801ab9e:	b29b      	uxth	r3, r3
 801aba0:	001a      	movs	r2, r3
 801aba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aba4:	189b      	adds	r3, r3, r2
 801aba6:	653b      	str	r3, [r7, #80]	@ 0x50
 801aba8:	683b      	ldr	r3, [r7, #0]
 801abaa:	781b      	ldrb	r3, [r3, #0]
 801abac:	00da      	lsls	r2, r3, #3
 801abae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801abb0:	18d3      	adds	r3, r2, r3
 801abb2:	4a93      	ldr	r2, [pc, #588]	@ (801ae00 <USB_EPStartXfer+0x748>)
 801abb4:	4694      	mov	ip, r2
 801abb6:	4463      	add	r3, ip
 801abb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801abba:	1d7b      	adds	r3, r7, #5
 801abbc:	33ff      	adds	r3, #255	@ 0xff
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	b29a      	uxth	r2, r3
 801abc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801abc4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801abc6:	2076      	movs	r0, #118	@ 0x76
 801abc8:	183b      	adds	r3, r7, r0
 801abca:	683a      	ldr	r2, [r7, #0]
 801abcc:	8912      	ldrh	r2, [r2, #8]
 801abce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801abd0:	683b      	ldr	r3, [r7, #0]
 801abd2:	6959      	ldr	r1, [r3, #20]
 801abd4:	1d7b      	adds	r3, r7, #5
 801abd6:	33ff      	adds	r3, #255	@ 0xff
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	b29c      	uxth	r4, r3
 801abdc:	183b      	adds	r3, r7, r0
 801abde:	881a      	ldrh	r2, [r3, #0]
 801abe0:	6878      	ldr	r0, [r7, #4]
 801abe2:	0023      	movs	r3, r4
 801abe4:	f000 ffda 	bl	801bb9c <USB_WritePMA>
            ep->xfer_buff += len;
 801abe8:	683b      	ldr	r3, [r7, #0]
 801abea:	695a      	ldr	r2, [r3, #20]
 801abec:	1d7b      	adds	r3, r7, #5
 801abee:	33ff      	adds	r3, #255	@ 0xff
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	18d2      	adds	r2, r2, r3
 801abf4:	683b      	ldr	r3, [r7, #0]
 801abf6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801abf8:	683b      	ldr	r3, [r7, #0]
 801abfa:	6a1a      	ldr	r2, [r3, #32]
 801abfc:	683b      	ldr	r3, [r7, #0]
 801abfe:	691b      	ldr	r3, [r3, #16]
 801ac00:	429a      	cmp	r2, r3
 801ac02:	d908      	bls.n	801ac16 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801ac04:	683b      	ldr	r3, [r7, #0]
 801ac06:	6a1a      	ldr	r2, [r3, #32]
 801ac08:	1d7b      	adds	r3, r7, #5
 801ac0a:	33ff      	adds	r3, #255	@ 0xff
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	1ad2      	subs	r2, r2, r3
 801ac10:	683b      	ldr	r3, [r7, #0]
 801ac12:	621a      	str	r2, [r3, #32]
 801ac14:	e007      	b.n	801ac26 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801ac16:	683b      	ldr	r3, [r7, #0]
 801ac18:	6a1b      	ldr	r3, [r3, #32]
 801ac1a:	1d7a      	adds	r2, r7, #5
 801ac1c:	32ff      	adds	r2, #255	@ 0xff
 801ac1e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	2200      	movs	r2, #0
 801ac24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	643b      	str	r3, [r7, #64]	@ 0x40
 801ac2a:	683b      	ldr	r3, [r7, #0]
 801ac2c:	785b      	ldrb	r3, [r3, #1]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d000      	beq.n	801ac34 <USB_EPStartXfer+0x57c>
 801ac32:	e070      	b.n	801ad16 <USB_EPStartXfer+0x65e>
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	2250      	movs	r2, #80	@ 0x50
 801ac3c:	5a9b      	ldrh	r3, [r3, r2]
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	001a      	movs	r2, r3
 801ac42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac44:	189b      	adds	r3, r3, r2
 801ac46:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ac48:	683b      	ldr	r3, [r7, #0]
 801ac4a:	781b      	ldrb	r3, [r3, #0]
 801ac4c:	00da      	lsls	r2, r3, #3
 801ac4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac50:	18d3      	adds	r3, r2, r3
 801ac52:	4a6d      	ldr	r2, [pc, #436]	@ (801ae08 <USB_EPStartXfer+0x750>)
 801ac54:	4694      	mov	ip, r2
 801ac56:	4463      	add	r3, ip
 801ac58:	637b      	str	r3, [r7, #52]	@ 0x34
 801ac5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac5c:	881b      	ldrh	r3, [r3, #0]
 801ac5e:	b29b      	uxth	r3, r3
 801ac60:	059b      	lsls	r3, r3, #22
 801ac62:	0d9b      	lsrs	r3, r3, #22
 801ac64:	b29a      	uxth	r2, r3
 801ac66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac68:	801a      	strh	r2, [r3, #0]
 801ac6a:	1d7b      	adds	r3, r7, #5
 801ac6c:	33ff      	adds	r3, #255	@ 0xff
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac72:	d922      	bls.n	801acba <USB_EPStartXfer+0x602>
 801ac74:	1d7b      	adds	r3, r7, #5
 801ac76:	33ff      	adds	r3, #255	@ 0xff
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	095b      	lsrs	r3, r3, #5
 801ac7c:	21f4      	movs	r1, #244	@ 0xf4
 801ac7e:	187a      	adds	r2, r7, r1
 801ac80:	6013      	str	r3, [r2, #0]
 801ac82:	1d7b      	adds	r3, r7, #5
 801ac84:	33ff      	adds	r3, #255	@ 0xff
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	221f      	movs	r2, #31
 801ac8a:	4013      	ands	r3, r2
 801ac8c:	d104      	bne.n	801ac98 <USB_EPStartXfer+0x5e0>
 801ac8e:	187b      	adds	r3, r7, r1
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	3b01      	subs	r3, #1
 801ac94:	187a      	adds	r2, r7, r1
 801ac96:	6013      	str	r3, [r2, #0]
 801ac98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac9a:	881b      	ldrh	r3, [r3, #0]
 801ac9c:	b29a      	uxth	r2, r3
 801ac9e:	23f4      	movs	r3, #244	@ 0xf4
 801aca0:	18fb      	adds	r3, r7, r3
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	b29b      	uxth	r3, r3
 801aca6:	029b      	lsls	r3, r3, #10
 801aca8:	b29b      	uxth	r3, r3
 801acaa:	4313      	orrs	r3, r2
 801acac:	b29b      	uxth	r3, r3
 801acae:	4a55      	ldr	r2, [pc, #340]	@ (801ae04 <USB_EPStartXfer+0x74c>)
 801acb0:	4313      	orrs	r3, r2
 801acb2:	b29a      	uxth	r2, r3
 801acb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801acb6:	801a      	strh	r2, [r3, #0]
 801acb8:	e048      	b.n	801ad4c <USB_EPStartXfer+0x694>
 801acba:	1d7b      	adds	r3, r7, #5
 801acbc:	33ff      	adds	r3, #255	@ 0xff
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d108      	bne.n	801acd6 <USB_EPStartXfer+0x61e>
 801acc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801acc6:	881b      	ldrh	r3, [r3, #0]
 801acc8:	b29b      	uxth	r3, r3
 801acca:	4a4e      	ldr	r2, [pc, #312]	@ (801ae04 <USB_EPStartXfer+0x74c>)
 801accc:	4313      	orrs	r3, r2
 801acce:	b29a      	uxth	r2, r3
 801acd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801acd2:	801a      	strh	r2, [r3, #0]
 801acd4:	e03a      	b.n	801ad4c <USB_EPStartXfer+0x694>
 801acd6:	1d7b      	adds	r3, r7, #5
 801acd8:	33ff      	adds	r3, #255	@ 0xff
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	085b      	lsrs	r3, r3, #1
 801acde:	21f4      	movs	r1, #244	@ 0xf4
 801ace0:	187a      	adds	r2, r7, r1
 801ace2:	6013      	str	r3, [r2, #0]
 801ace4:	1d7b      	adds	r3, r7, #5
 801ace6:	33ff      	adds	r3, #255	@ 0xff
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	2201      	movs	r2, #1
 801acec:	4013      	ands	r3, r2
 801acee:	d004      	beq.n	801acfa <USB_EPStartXfer+0x642>
 801acf0:	187b      	adds	r3, r7, r1
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	3301      	adds	r3, #1
 801acf6:	187a      	adds	r2, r7, r1
 801acf8:	6013      	str	r3, [r2, #0]
 801acfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801acfc:	881b      	ldrh	r3, [r3, #0]
 801acfe:	b29a      	uxth	r2, r3
 801ad00:	23f4      	movs	r3, #244	@ 0xf4
 801ad02:	18fb      	adds	r3, r7, r3
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	b29b      	uxth	r3, r3
 801ad08:	029b      	lsls	r3, r3, #10
 801ad0a:	b29b      	uxth	r3, r3
 801ad0c:	4313      	orrs	r3, r2
 801ad0e:	b29a      	uxth	r2, r3
 801ad10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad12:	801a      	strh	r2, [r3, #0]
 801ad14:	e01a      	b.n	801ad4c <USB_EPStartXfer+0x694>
 801ad16:	683b      	ldr	r3, [r7, #0]
 801ad18:	785b      	ldrb	r3, [r3, #1]
 801ad1a:	2b01      	cmp	r3, #1
 801ad1c:	d116      	bne.n	801ad4c <USB_EPStartXfer+0x694>
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2250      	movs	r2, #80	@ 0x50
 801ad22:	5a9b      	ldrh	r3, [r3, r2]
 801ad24:	b29b      	uxth	r3, r3
 801ad26:	001a      	movs	r2, r3
 801ad28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ad2a:	189b      	adds	r3, r3, r2
 801ad2c:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	781b      	ldrb	r3, [r3, #0]
 801ad32:	00da      	lsls	r2, r3, #3
 801ad34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ad36:	18d3      	adds	r3, r2, r3
 801ad38:	4a33      	ldr	r2, [pc, #204]	@ (801ae08 <USB_EPStartXfer+0x750>)
 801ad3a:	4694      	mov	ip, r2
 801ad3c:	4463      	add	r3, ip
 801ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ad40:	1d7b      	adds	r3, r7, #5
 801ad42:	33ff      	adds	r3, #255	@ 0xff
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	b29a      	uxth	r2, r3
 801ad48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801ad4c:	2076      	movs	r0, #118	@ 0x76
 801ad4e:	183b      	adds	r3, r7, r0
 801ad50:	683a      	ldr	r2, [r7, #0]
 801ad52:	8952      	ldrh	r2, [r2, #10]
 801ad54:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	6959      	ldr	r1, [r3, #20]
 801ad5a:	1d7b      	adds	r3, r7, #5
 801ad5c:	33ff      	adds	r3, #255	@ 0xff
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	b29c      	uxth	r4, r3
 801ad62:	183b      	adds	r3, r7, r0
 801ad64:	881a      	ldrh	r2, [r3, #0]
 801ad66:	6878      	ldr	r0, [r7, #4]
 801ad68:	0023      	movs	r3, r4
 801ad6a:	f000 ff17 	bl	801bb9c <USB_WritePMA>
 801ad6e:	e1b6      	b.n	801b0de <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801ad70:	683b      	ldr	r3, [r7, #0]
 801ad72:	6a1b      	ldr	r3, [r3, #32]
 801ad74:	1d7a      	adds	r2, r7, #5
 801ad76:	32ff      	adds	r2, #255	@ 0xff
 801ad78:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801ad7a:	687a      	ldr	r2, [r7, #4]
 801ad7c:	683b      	ldr	r3, [r7, #0]
 801ad7e:	781b      	ldrb	r3, [r3, #0]
 801ad80:	009b      	lsls	r3, r3, #2
 801ad82:	18d3      	adds	r3, r2, r3
 801ad84:	881b      	ldrh	r3, [r3, #0]
 801ad86:	b29a      	uxth	r2, r3
 801ad88:	2062      	movs	r0, #98	@ 0x62
 801ad8a:	183b      	adds	r3, r7, r0
 801ad8c:	491f      	ldr	r1, [pc, #124]	@ (801ae0c <USB_EPStartXfer+0x754>)
 801ad8e:	400a      	ands	r2, r1
 801ad90:	801a      	strh	r2, [r3, #0]
 801ad92:	687a      	ldr	r2, [r7, #4]
 801ad94:	683b      	ldr	r3, [r7, #0]
 801ad96:	781b      	ldrb	r3, [r3, #0]
 801ad98:	009b      	lsls	r3, r3, #2
 801ad9a:	18d3      	adds	r3, r2, r3
 801ad9c:	183a      	adds	r2, r7, r0
 801ad9e:	8812      	ldrh	r2, [r2, #0]
 801ada0:	491b      	ldr	r1, [pc, #108]	@ (801ae10 <USB_EPStartXfer+0x758>)
 801ada2:	430a      	orrs	r2, r1
 801ada4:	b292      	uxth	r2, r2
 801ada6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	2250      	movs	r2, #80	@ 0x50
 801adb0:	5a9b      	ldrh	r3, [r3, r2]
 801adb2:	b29b      	uxth	r3, r3
 801adb4:	001a      	movs	r2, r3
 801adb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801adb8:	189b      	adds	r3, r3, r2
 801adba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801adbc:	683b      	ldr	r3, [r7, #0]
 801adbe:	781b      	ldrb	r3, [r3, #0]
 801adc0:	00da      	lsls	r2, r3, #3
 801adc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801adc4:	18d3      	adds	r3, r2, r3
 801adc6:	4a0e      	ldr	r2, [pc, #56]	@ (801ae00 <USB_EPStartXfer+0x748>)
 801adc8:	4694      	mov	ip, r2
 801adca:	4463      	add	r3, ip
 801adcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 801adce:	1d7b      	adds	r3, r7, #5
 801add0:	33ff      	adds	r3, #255	@ 0xff
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	b29a      	uxth	r2, r3
 801add6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801add8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801adda:	2076      	movs	r0, #118	@ 0x76
 801addc:	183b      	adds	r3, r7, r0
 801adde:	683a      	ldr	r2, [r7, #0]
 801ade0:	8912      	ldrh	r2, [r2, #8]
 801ade2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ade4:	683b      	ldr	r3, [r7, #0]
 801ade6:	6959      	ldr	r1, [r3, #20]
 801ade8:	1d7b      	adds	r3, r7, #5
 801adea:	33ff      	adds	r3, #255	@ 0xff
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	b29c      	uxth	r4, r3
 801adf0:	183b      	adds	r3, r7, r0
 801adf2:	881a      	ldrh	r2, [r3, #0]
 801adf4:	6878      	ldr	r0, [r7, #4]
 801adf6:	0023      	movs	r3, r4
 801adf8:	f000 fed0 	bl	801bb9c <USB_WritePMA>
 801adfc:	e16f      	b.n	801b0de <USB_EPStartXfer+0xa26>
 801adfe:	46c0      	nop			@ (mov r8, r8)
 801ae00:	00000402 	.word	0x00000402
 801ae04:	ffff8000 	.word	0xffff8000
 801ae08:	00000406 	.word	0x00000406
 801ae0c:	ffff8e8f 	.word	0xffff8e8f
 801ae10:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	6a1a      	ldr	r2, [r3, #32]
 801ae18:	1d7b      	adds	r3, r7, #5
 801ae1a:	33ff      	adds	r3, #255	@ 0xff
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	1ad2      	subs	r2, r2, r3
 801ae20:	683b      	ldr	r3, [r7, #0]
 801ae22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ae24:	687a      	ldr	r2, [r7, #4]
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	781b      	ldrb	r3, [r3, #0]
 801ae2a:	009b      	lsls	r3, r3, #2
 801ae2c:	18d3      	adds	r3, r2, r3
 801ae2e:	881b      	ldrh	r3, [r3, #0]
 801ae30:	b29b      	uxth	r3, r3
 801ae32:	001a      	movs	r2, r3
 801ae34:	2340      	movs	r3, #64	@ 0x40
 801ae36:	4013      	ands	r3, r2
 801ae38:	d100      	bne.n	801ae3c <USB_EPStartXfer+0x784>
 801ae3a:	e0a4      	b.n	801af86 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	673b      	str	r3, [r7, #112]	@ 0x70
 801ae40:	683b      	ldr	r3, [r7, #0]
 801ae42:	785b      	ldrb	r3, [r3, #1]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d000      	beq.n	801ae4a <USB_EPStartXfer+0x792>
 801ae48:	e070      	b.n	801af2c <USB_EPStartXfer+0x874>
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	2250      	movs	r2, #80	@ 0x50
 801ae52:	5a9b      	ldrh	r3, [r3, r2]
 801ae54:	b29b      	uxth	r3, r3
 801ae56:	001a      	movs	r2, r3
 801ae58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ae5a:	189b      	adds	r3, r3, r2
 801ae5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	781b      	ldrb	r3, [r3, #0]
 801ae62:	00da      	lsls	r2, r3, #3
 801ae64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ae66:	18d3      	adds	r3, r2, r3
 801ae68:	4abc      	ldr	r2, [pc, #752]	@ (801b15c <USB_EPStartXfer+0xaa4>)
 801ae6a:	4694      	mov	ip, r2
 801ae6c:	4463      	add	r3, ip
 801ae6e:	667b      	str	r3, [r7, #100]	@ 0x64
 801ae70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ae72:	881b      	ldrh	r3, [r3, #0]
 801ae74:	b29b      	uxth	r3, r3
 801ae76:	059b      	lsls	r3, r3, #22
 801ae78:	0d9b      	lsrs	r3, r3, #22
 801ae7a:	b29a      	uxth	r2, r3
 801ae7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ae7e:	801a      	strh	r2, [r3, #0]
 801ae80:	1d7b      	adds	r3, r7, #5
 801ae82:	33ff      	adds	r3, #255	@ 0xff
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	2b3e      	cmp	r3, #62	@ 0x3e
 801ae88:	d922      	bls.n	801aed0 <USB_EPStartXfer+0x818>
 801ae8a:	1d7b      	adds	r3, r7, #5
 801ae8c:	33ff      	adds	r3, #255	@ 0xff
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	095b      	lsrs	r3, r3, #5
 801ae92:	21f0      	movs	r1, #240	@ 0xf0
 801ae94:	187a      	adds	r2, r7, r1
 801ae96:	6013      	str	r3, [r2, #0]
 801ae98:	1d7b      	adds	r3, r7, #5
 801ae9a:	33ff      	adds	r3, #255	@ 0xff
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	221f      	movs	r2, #31
 801aea0:	4013      	ands	r3, r2
 801aea2:	d104      	bne.n	801aeae <USB_EPStartXfer+0x7f6>
 801aea4:	187b      	adds	r3, r7, r1
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	3b01      	subs	r3, #1
 801aeaa:	187a      	adds	r2, r7, r1
 801aeac:	6013      	str	r3, [r2, #0]
 801aeae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801aeb0:	881b      	ldrh	r3, [r3, #0]
 801aeb2:	b29a      	uxth	r2, r3
 801aeb4:	23f0      	movs	r3, #240	@ 0xf0
 801aeb6:	18fb      	adds	r3, r7, r3
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	029b      	lsls	r3, r3, #10
 801aebe:	b29b      	uxth	r3, r3
 801aec0:	4313      	orrs	r3, r2
 801aec2:	b29b      	uxth	r3, r3
 801aec4:	4aa6      	ldr	r2, [pc, #664]	@ (801b160 <USB_EPStartXfer+0xaa8>)
 801aec6:	4313      	orrs	r3, r2
 801aec8:	b29a      	uxth	r2, r3
 801aeca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801aecc:	801a      	strh	r2, [r3, #0]
 801aece:	e048      	b.n	801af62 <USB_EPStartXfer+0x8aa>
 801aed0:	1d7b      	adds	r3, r7, #5
 801aed2:	33ff      	adds	r3, #255	@ 0xff
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d108      	bne.n	801aeec <USB_EPStartXfer+0x834>
 801aeda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801aedc:	881b      	ldrh	r3, [r3, #0]
 801aede:	b29b      	uxth	r3, r3
 801aee0:	4a9f      	ldr	r2, [pc, #636]	@ (801b160 <USB_EPStartXfer+0xaa8>)
 801aee2:	4313      	orrs	r3, r2
 801aee4:	b29a      	uxth	r2, r3
 801aee6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801aee8:	801a      	strh	r2, [r3, #0]
 801aeea:	e03a      	b.n	801af62 <USB_EPStartXfer+0x8aa>
 801aeec:	1d7b      	adds	r3, r7, #5
 801aeee:	33ff      	adds	r3, #255	@ 0xff
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	085b      	lsrs	r3, r3, #1
 801aef4:	21f0      	movs	r1, #240	@ 0xf0
 801aef6:	187a      	adds	r2, r7, r1
 801aef8:	6013      	str	r3, [r2, #0]
 801aefa:	1d7b      	adds	r3, r7, #5
 801aefc:	33ff      	adds	r3, #255	@ 0xff
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	2201      	movs	r2, #1
 801af02:	4013      	ands	r3, r2
 801af04:	d004      	beq.n	801af10 <USB_EPStartXfer+0x858>
 801af06:	187b      	adds	r3, r7, r1
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	3301      	adds	r3, #1
 801af0c:	187a      	adds	r2, r7, r1
 801af0e:	6013      	str	r3, [r2, #0]
 801af10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801af12:	881b      	ldrh	r3, [r3, #0]
 801af14:	b29a      	uxth	r2, r3
 801af16:	23f0      	movs	r3, #240	@ 0xf0
 801af18:	18fb      	adds	r3, r7, r3
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	b29b      	uxth	r3, r3
 801af1e:	029b      	lsls	r3, r3, #10
 801af20:	b29b      	uxth	r3, r3
 801af22:	4313      	orrs	r3, r2
 801af24:	b29a      	uxth	r2, r3
 801af26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801af28:	801a      	strh	r2, [r3, #0]
 801af2a:	e01a      	b.n	801af62 <USB_EPStartXfer+0x8aa>
 801af2c:	683b      	ldr	r3, [r7, #0]
 801af2e:	785b      	ldrb	r3, [r3, #1]
 801af30:	2b01      	cmp	r3, #1
 801af32:	d116      	bne.n	801af62 <USB_EPStartXfer+0x8aa>
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2250      	movs	r2, #80	@ 0x50
 801af38:	5a9b      	ldrh	r3, [r3, r2]
 801af3a:	b29b      	uxth	r3, r3
 801af3c:	001a      	movs	r2, r3
 801af3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801af40:	189b      	adds	r3, r3, r2
 801af42:	673b      	str	r3, [r7, #112]	@ 0x70
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	781b      	ldrb	r3, [r3, #0]
 801af48:	00da      	lsls	r2, r3, #3
 801af4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801af4c:	18d3      	adds	r3, r2, r3
 801af4e:	4a83      	ldr	r2, [pc, #524]	@ (801b15c <USB_EPStartXfer+0xaa4>)
 801af50:	4694      	mov	ip, r2
 801af52:	4463      	add	r3, ip
 801af54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801af56:	1d7b      	adds	r3, r7, #5
 801af58:	33ff      	adds	r3, #255	@ 0xff
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	b29a      	uxth	r2, r3
 801af5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801af60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801af62:	2076      	movs	r0, #118	@ 0x76
 801af64:	183b      	adds	r3, r7, r0
 801af66:	683a      	ldr	r2, [r7, #0]
 801af68:	8952      	ldrh	r2, [r2, #10]
 801af6a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801af6c:	683b      	ldr	r3, [r7, #0]
 801af6e:	6959      	ldr	r1, [r3, #20]
 801af70:	1d7b      	adds	r3, r7, #5
 801af72:	33ff      	adds	r3, #255	@ 0xff
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	b29c      	uxth	r4, r3
 801af78:	183b      	adds	r3, r7, r0
 801af7a:	881a      	ldrh	r2, [r3, #0]
 801af7c:	6878      	ldr	r0, [r7, #4]
 801af7e:	0023      	movs	r3, r4
 801af80:	f000 fe0c 	bl	801bb9c <USB_WritePMA>
 801af84:	e0ab      	b.n	801b0de <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801af86:	683b      	ldr	r3, [r7, #0]
 801af88:	785b      	ldrb	r3, [r3, #1]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d000      	beq.n	801af90 <USB_EPStartXfer+0x8d8>
 801af8e:	e070      	b.n	801b072 <USB_EPStartXfer+0x9ba>
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	2250      	movs	r2, #80	@ 0x50
 801af98:	5a9b      	ldrh	r3, [r3, r2]
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	001a      	movs	r2, r3
 801af9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801afa0:	189b      	adds	r3, r3, r2
 801afa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801afa4:	683b      	ldr	r3, [r7, #0]
 801afa6:	781b      	ldrb	r3, [r3, #0]
 801afa8:	00da      	lsls	r2, r3, #3
 801afaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801afac:	18d3      	adds	r3, r2, r3
 801afae:	4a6d      	ldr	r2, [pc, #436]	@ (801b164 <USB_EPStartXfer+0xaac>)
 801afb0:	4694      	mov	ip, r2
 801afb2:	4463      	add	r3, ip
 801afb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 801afb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801afb8:	881b      	ldrh	r3, [r3, #0]
 801afba:	b29b      	uxth	r3, r3
 801afbc:	059b      	lsls	r3, r3, #22
 801afbe:	0d9b      	lsrs	r3, r3, #22
 801afc0:	b29a      	uxth	r2, r3
 801afc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801afc4:	801a      	strh	r2, [r3, #0]
 801afc6:	1d7b      	adds	r3, r7, #5
 801afc8:	33ff      	adds	r3, #255	@ 0xff
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	2b3e      	cmp	r3, #62	@ 0x3e
 801afce:	d922      	bls.n	801b016 <USB_EPStartXfer+0x95e>
 801afd0:	1d7b      	adds	r3, r7, #5
 801afd2:	33ff      	adds	r3, #255	@ 0xff
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	095b      	lsrs	r3, r3, #5
 801afd8:	21ec      	movs	r1, #236	@ 0xec
 801afda:	187a      	adds	r2, r7, r1
 801afdc:	6013      	str	r3, [r2, #0]
 801afde:	1d7b      	adds	r3, r7, #5
 801afe0:	33ff      	adds	r3, #255	@ 0xff
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	221f      	movs	r2, #31
 801afe6:	4013      	ands	r3, r2
 801afe8:	d104      	bne.n	801aff4 <USB_EPStartXfer+0x93c>
 801afea:	187b      	adds	r3, r7, r1
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	3b01      	subs	r3, #1
 801aff0:	187a      	adds	r2, r7, r1
 801aff2:	6013      	str	r3, [r2, #0]
 801aff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aff6:	881b      	ldrh	r3, [r3, #0]
 801aff8:	b29a      	uxth	r2, r3
 801affa:	23ec      	movs	r3, #236	@ 0xec
 801affc:	18fb      	adds	r3, r7, r3
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	b29b      	uxth	r3, r3
 801b002:	029b      	lsls	r3, r3, #10
 801b004:	b29b      	uxth	r3, r3
 801b006:	4313      	orrs	r3, r2
 801b008:	b29b      	uxth	r3, r3
 801b00a:	4a55      	ldr	r2, [pc, #340]	@ (801b160 <USB_EPStartXfer+0xaa8>)
 801b00c:	4313      	orrs	r3, r2
 801b00e:	b29a      	uxth	r2, r3
 801b010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b012:	801a      	strh	r2, [r3, #0]
 801b014:	e052      	b.n	801b0bc <USB_EPStartXfer+0xa04>
 801b016:	1d7b      	adds	r3, r7, #5
 801b018:	33ff      	adds	r3, #255	@ 0xff
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d108      	bne.n	801b032 <USB_EPStartXfer+0x97a>
 801b020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b022:	881b      	ldrh	r3, [r3, #0]
 801b024:	b29b      	uxth	r3, r3
 801b026:	4a4e      	ldr	r2, [pc, #312]	@ (801b160 <USB_EPStartXfer+0xaa8>)
 801b028:	4313      	orrs	r3, r2
 801b02a:	b29a      	uxth	r2, r3
 801b02c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b02e:	801a      	strh	r2, [r3, #0]
 801b030:	e044      	b.n	801b0bc <USB_EPStartXfer+0xa04>
 801b032:	1d7b      	adds	r3, r7, #5
 801b034:	33ff      	adds	r3, #255	@ 0xff
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	085b      	lsrs	r3, r3, #1
 801b03a:	21ec      	movs	r1, #236	@ 0xec
 801b03c:	187a      	adds	r2, r7, r1
 801b03e:	6013      	str	r3, [r2, #0]
 801b040:	1d7b      	adds	r3, r7, #5
 801b042:	33ff      	adds	r3, #255	@ 0xff
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	2201      	movs	r2, #1
 801b048:	4013      	ands	r3, r2
 801b04a:	d004      	beq.n	801b056 <USB_EPStartXfer+0x99e>
 801b04c:	187b      	adds	r3, r7, r1
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	3301      	adds	r3, #1
 801b052:	187a      	adds	r2, r7, r1
 801b054:	6013      	str	r3, [r2, #0]
 801b056:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b058:	881b      	ldrh	r3, [r3, #0]
 801b05a:	b29a      	uxth	r2, r3
 801b05c:	23ec      	movs	r3, #236	@ 0xec
 801b05e:	18fb      	adds	r3, r7, r3
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	b29b      	uxth	r3, r3
 801b064:	029b      	lsls	r3, r3, #10
 801b066:	b29b      	uxth	r3, r3
 801b068:	4313      	orrs	r3, r2
 801b06a:	b29a      	uxth	r2, r3
 801b06c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b06e:	801a      	strh	r2, [r3, #0]
 801b070:	e024      	b.n	801b0bc <USB_EPStartXfer+0xa04>
 801b072:	683b      	ldr	r3, [r7, #0]
 801b074:	785b      	ldrb	r3, [r3, #1]
 801b076:	2b01      	cmp	r3, #1
 801b078:	d120      	bne.n	801b0bc <USB_EPStartXfer+0xa04>
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	2184      	movs	r1, #132	@ 0x84
 801b07e:	187a      	adds	r2, r7, r1
 801b080:	6013      	str	r3, [r2, #0]
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	2250      	movs	r2, #80	@ 0x50
 801b086:	5a9b      	ldrh	r3, [r3, r2]
 801b088:	b29b      	uxth	r3, r3
 801b08a:	001a      	movs	r2, r3
 801b08c:	187b      	adds	r3, r7, r1
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	189b      	adds	r3, r3, r2
 801b092:	187a      	adds	r2, r7, r1
 801b094:	6013      	str	r3, [r2, #0]
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	00da      	lsls	r2, r3, #3
 801b09c:	187b      	adds	r3, r7, r1
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	18d3      	adds	r3, r2, r3
 801b0a2:	4a30      	ldr	r2, [pc, #192]	@ (801b164 <USB_EPStartXfer+0xaac>)
 801b0a4:	4694      	mov	ip, r2
 801b0a6:	4463      	add	r3, ip
 801b0a8:	2180      	movs	r1, #128	@ 0x80
 801b0aa:	187a      	adds	r2, r7, r1
 801b0ac:	6013      	str	r3, [r2, #0]
 801b0ae:	1d7b      	adds	r3, r7, #5
 801b0b0:	33ff      	adds	r3, #255	@ 0xff
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	b29a      	uxth	r2, r3
 801b0b6:	187b      	adds	r3, r7, r1
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801b0bc:	2076      	movs	r0, #118	@ 0x76
 801b0be:	183b      	adds	r3, r7, r0
 801b0c0:	683a      	ldr	r2, [r7, #0]
 801b0c2:	8912      	ldrh	r2, [r2, #8]
 801b0c4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801b0c6:	683b      	ldr	r3, [r7, #0]
 801b0c8:	6959      	ldr	r1, [r3, #20]
 801b0ca:	1d7b      	adds	r3, r7, #5
 801b0cc:	33ff      	adds	r3, #255	@ 0xff
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	b29c      	uxth	r4, r3
 801b0d2:	183b      	adds	r3, r7, r0
 801b0d4:	881a      	ldrh	r2, [r3, #0]
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	0023      	movs	r3, r4
 801b0da:	f000 fd5f 	bl	801bb9c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801b0de:	687a      	ldr	r2, [r7, #4]
 801b0e0:	683b      	ldr	r3, [r7, #0]
 801b0e2:	781b      	ldrb	r3, [r3, #0]
 801b0e4:	009b      	lsls	r3, r3, #2
 801b0e6:	18d3      	adds	r3, r2, r3
 801b0e8:	881b      	ldrh	r3, [r3, #0]
 801b0ea:	b29a      	uxth	r2, r3
 801b0ec:	200a      	movs	r0, #10
 801b0ee:	183b      	adds	r3, r7, r0
 801b0f0:	491d      	ldr	r1, [pc, #116]	@ (801b168 <USB_EPStartXfer+0xab0>)
 801b0f2:	400a      	ands	r2, r1
 801b0f4:	801a      	strh	r2, [r3, #0]
 801b0f6:	183b      	adds	r3, r7, r0
 801b0f8:	183a      	adds	r2, r7, r0
 801b0fa:	8812      	ldrh	r2, [r2, #0]
 801b0fc:	2110      	movs	r1, #16
 801b0fe:	404a      	eors	r2, r1
 801b100:	801a      	strh	r2, [r3, #0]
 801b102:	183b      	adds	r3, r7, r0
 801b104:	183a      	adds	r2, r7, r0
 801b106:	8812      	ldrh	r2, [r2, #0]
 801b108:	2120      	movs	r1, #32
 801b10a:	404a      	eors	r2, r1
 801b10c:	801a      	strh	r2, [r3, #0]
 801b10e:	687a      	ldr	r2, [r7, #4]
 801b110:	683b      	ldr	r3, [r7, #0]
 801b112:	781b      	ldrb	r3, [r3, #0]
 801b114:	009b      	lsls	r3, r3, #2
 801b116:	18d3      	adds	r3, r2, r3
 801b118:	183a      	adds	r2, r7, r0
 801b11a:	8812      	ldrh	r2, [r2, #0]
 801b11c:	4913      	ldr	r1, [pc, #76]	@ (801b16c <USB_EPStartXfer+0xab4>)
 801b11e:	430a      	orrs	r2, r1
 801b120:	b292      	uxth	r2, r2
 801b122:	801a      	strh	r2, [r3, #0]
 801b124:	f000 fbf4 	bl	801b910 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	7b1b      	ldrb	r3, [r3, #12]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d000      	beq.n	801b132 <USB_EPStartXfer+0xa7a>
 801b130:	e0a9      	b.n	801b286 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801b132:	683b      	ldr	r3, [r7, #0]
 801b134:	699a      	ldr	r2, [r3, #24]
 801b136:	683b      	ldr	r3, [r7, #0]
 801b138:	691b      	ldr	r3, [r3, #16]
 801b13a:	429a      	cmp	r2, r3
 801b13c:	d918      	bls.n	801b170 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	691b      	ldr	r3, [r3, #16]
 801b142:	1d7a      	adds	r2, r7, #5
 801b144:	32ff      	adds	r2, #255	@ 0xff
 801b146:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801b148:	683b      	ldr	r3, [r7, #0]
 801b14a:	699a      	ldr	r2, [r3, #24]
 801b14c:	1d7b      	adds	r3, r7, #5
 801b14e:	33ff      	adds	r3, #255	@ 0xff
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	1ad2      	subs	r2, r2, r3
 801b154:	683b      	ldr	r3, [r7, #0]
 801b156:	619a      	str	r2, [r3, #24]
 801b158:	e012      	b.n	801b180 <USB_EPStartXfer+0xac8>
 801b15a:	46c0      	nop			@ (mov r8, r8)
 801b15c:	00000406 	.word	0x00000406
 801b160:	ffff8000 	.word	0xffff8000
 801b164:	00000402 	.word	0x00000402
 801b168:	ffff8fbf 	.word	0xffff8fbf
 801b16c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801b170:	683b      	ldr	r3, [r7, #0]
 801b172:	699b      	ldr	r3, [r3, #24]
 801b174:	1d7a      	adds	r2, r7, #5
 801b176:	32ff      	adds	r2, #255	@ 0xff
 801b178:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801b17a:	683b      	ldr	r3, [r7, #0]
 801b17c:	2200      	movs	r2, #0
 801b17e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	2190      	movs	r1, #144	@ 0x90
 801b184:	187a      	adds	r2, r7, r1
 801b186:	6013      	str	r3, [r2, #0]
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	2250      	movs	r2, #80	@ 0x50
 801b18c:	5a9b      	ldrh	r3, [r3, r2]
 801b18e:	b29b      	uxth	r3, r3
 801b190:	001a      	movs	r2, r3
 801b192:	187b      	adds	r3, r7, r1
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	189b      	adds	r3, r3, r2
 801b198:	187a      	adds	r2, r7, r1
 801b19a:	6013      	str	r3, [r2, #0]
 801b19c:	683b      	ldr	r3, [r7, #0]
 801b19e:	781b      	ldrb	r3, [r3, #0]
 801b1a0:	00da      	lsls	r2, r3, #3
 801b1a2:	187b      	adds	r3, r7, r1
 801b1a4:	681b      	ldr	r3, [r3, #0]
 801b1a6:	18d3      	adds	r3, r2, r3
 801b1a8:	4acf      	ldr	r2, [pc, #828]	@ (801b4e8 <USB_EPStartXfer+0xe30>)
 801b1aa:	4694      	mov	ip, r2
 801b1ac:	4463      	add	r3, ip
 801b1ae:	218c      	movs	r1, #140	@ 0x8c
 801b1b0:	187a      	adds	r2, r7, r1
 801b1b2:	6013      	str	r3, [r2, #0]
 801b1b4:	187b      	adds	r3, r7, r1
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	881b      	ldrh	r3, [r3, #0]
 801b1ba:	b29b      	uxth	r3, r3
 801b1bc:	059b      	lsls	r3, r3, #22
 801b1be:	0d9b      	lsrs	r3, r3, #22
 801b1c0:	b29a      	uxth	r2, r3
 801b1c2:	187b      	adds	r3, r7, r1
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	801a      	strh	r2, [r3, #0]
 801b1c8:	1d7b      	adds	r3, r7, #5
 801b1ca:	33ff      	adds	r3, #255	@ 0xff
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	2b3e      	cmp	r3, #62	@ 0x3e
 801b1d0:	d925      	bls.n	801b21e <USB_EPStartXfer+0xb66>
 801b1d2:	1d7b      	adds	r3, r7, #5
 801b1d4:	33ff      	adds	r3, #255	@ 0xff
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	095b      	lsrs	r3, r3, #5
 801b1da:	21e8      	movs	r1, #232	@ 0xe8
 801b1dc:	187a      	adds	r2, r7, r1
 801b1de:	6013      	str	r3, [r2, #0]
 801b1e0:	1d7b      	adds	r3, r7, #5
 801b1e2:	33ff      	adds	r3, #255	@ 0xff
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	221f      	movs	r2, #31
 801b1e8:	4013      	ands	r3, r2
 801b1ea:	d104      	bne.n	801b1f6 <USB_EPStartXfer+0xb3e>
 801b1ec:	187b      	adds	r3, r7, r1
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	3b01      	subs	r3, #1
 801b1f2:	187a      	adds	r2, r7, r1
 801b1f4:	6013      	str	r3, [r2, #0]
 801b1f6:	218c      	movs	r1, #140	@ 0x8c
 801b1f8:	187b      	adds	r3, r7, r1
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	881b      	ldrh	r3, [r3, #0]
 801b1fe:	b29a      	uxth	r2, r3
 801b200:	23e8      	movs	r3, #232	@ 0xe8
 801b202:	18fb      	adds	r3, r7, r3
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	b29b      	uxth	r3, r3
 801b208:	029b      	lsls	r3, r3, #10
 801b20a:	b29b      	uxth	r3, r3
 801b20c:	4313      	orrs	r3, r2
 801b20e:	b29b      	uxth	r3, r3
 801b210:	4ab6      	ldr	r2, [pc, #728]	@ (801b4ec <USB_EPStartXfer+0xe34>)
 801b212:	4313      	orrs	r3, r2
 801b214:	b29a      	uxth	r2, r3
 801b216:	187b      	adds	r3, r7, r1
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	801a      	strh	r2, [r3, #0]
 801b21c:	e353      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
 801b21e:	1d7b      	adds	r3, r7, #5
 801b220:	33ff      	adds	r3, #255	@ 0xff
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d10b      	bne.n	801b240 <USB_EPStartXfer+0xb88>
 801b228:	218c      	movs	r1, #140	@ 0x8c
 801b22a:	187b      	adds	r3, r7, r1
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	881b      	ldrh	r3, [r3, #0]
 801b230:	b29b      	uxth	r3, r3
 801b232:	4aae      	ldr	r2, [pc, #696]	@ (801b4ec <USB_EPStartXfer+0xe34>)
 801b234:	4313      	orrs	r3, r2
 801b236:	b29a      	uxth	r2, r3
 801b238:	187b      	adds	r3, r7, r1
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	801a      	strh	r2, [r3, #0]
 801b23e:	e342      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
 801b240:	1d7b      	adds	r3, r7, #5
 801b242:	33ff      	adds	r3, #255	@ 0xff
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	085b      	lsrs	r3, r3, #1
 801b248:	21e8      	movs	r1, #232	@ 0xe8
 801b24a:	187a      	adds	r2, r7, r1
 801b24c:	6013      	str	r3, [r2, #0]
 801b24e:	1d7b      	adds	r3, r7, #5
 801b250:	33ff      	adds	r3, #255	@ 0xff
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	2201      	movs	r2, #1
 801b256:	4013      	ands	r3, r2
 801b258:	d004      	beq.n	801b264 <USB_EPStartXfer+0xbac>
 801b25a:	187b      	adds	r3, r7, r1
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	3301      	adds	r3, #1
 801b260:	187a      	adds	r2, r7, r1
 801b262:	6013      	str	r3, [r2, #0]
 801b264:	218c      	movs	r1, #140	@ 0x8c
 801b266:	187b      	adds	r3, r7, r1
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	881b      	ldrh	r3, [r3, #0]
 801b26c:	b29a      	uxth	r2, r3
 801b26e:	23e8      	movs	r3, #232	@ 0xe8
 801b270:	18fb      	adds	r3, r7, r3
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	b29b      	uxth	r3, r3
 801b276:	029b      	lsls	r3, r3, #10
 801b278:	b29b      	uxth	r3, r3
 801b27a:	4313      	orrs	r3, r2
 801b27c:	b29a      	uxth	r2, r3
 801b27e:	187b      	adds	r3, r7, r1
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	801a      	strh	r2, [r3, #0]
 801b284:	e31f      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801b286:	683b      	ldr	r3, [r7, #0]
 801b288:	78db      	ldrb	r3, [r3, #3]
 801b28a:	2b02      	cmp	r3, #2
 801b28c:	d000      	beq.n	801b290 <USB_EPStartXfer+0xbd8>
 801b28e:	e191      	b.n	801b5b4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801b290:	683b      	ldr	r3, [r7, #0]
 801b292:	785b      	ldrb	r3, [r3, #1]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d000      	beq.n	801b29a <USB_EPStartXfer+0xbe2>
 801b298:	e07c      	b.n	801b394 <USB_EPStartXfer+0xcdc>
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	21ac      	movs	r1, #172	@ 0xac
 801b29e:	187a      	adds	r2, r7, r1
 801b2a0:	6013      	str	r3, [r2, #0]
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	2250      	movs	r2, #80	@ 0x50
 801b2a6:	5a9b      	ldrh	r3, [r3, r2]
 801b2a8:	b29b      	uxth	r3, r3
 801b2aa:	001a      	movs	r2, r3
 801b2ac:	187b      	adds	r3, r7, r1
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	189b      	adds	r3, r3, r2
 801b2b2:	187a      	adds	r2, r7, r1
 801b2b4:	6013      	str	r3, [r2, #0]
 801b2b6:	683b      	ldr	r3, [r7, #0]
 801b2b8:	781b      	ldrb	r3, [r3, #0]
 801b2ba:	00da      	lsls	r2, r3, #3
 801b2bc:	187b      	adds	r3, r7, r1
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	18d3      	adds	r3, r2, r3
 801b2c2:	4a8b      	ldr	r2, [pc, #556]	@ (801b4f0 <USB_EPStartXfer+0xe38>)
 801b2c4:	4694      	mov	ip, r2
 801b2c6:	4463      	add	r3, ip
 801b2c8:	21a8      	movs	r1, #168	@ 0xa8
 801b2ca:	187a      	adds	r2, r7, r1
 801b2cc:	6013      	str	r3, [r2, #0]
 801b2ce:	187b      	adds	r3, r7, r1
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	881b      	ldrh	r3, [r3, #0]
 801b2d4:	b29b      	uxth	r3, r3
 801b2d6:	059b      	lsls	r3, r3, #22
 801b2d8:	0d9b      	lsrs	r3, r3, #22
 801b2da:	b29a      	uxth	r2, r3
 801b2dc:	187b      	adds	r3, r7, r1
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	801a      	strh	r2, [r3, #0]
 801b2e2:	683b      	ldr	r3, [r7, #0]
 801b2e4:	691b      	ldr	r3, [r3, #16]
 801b2e6:	2b3e      	cmp	r3, #62	@ 0x3e
 801b2e8:	d923      	bls.n	801b332 <USB_EPStartXfer+0xc7a>
 801b2ea:	683b      	ldr	r3, [r7, #0]
 801b2ec:	691b      	ldr	r3, [r3, #16]
 801b2ee:	095b      	lsrs	r3, r3, #5
 801b2f0:	21e4      	movs	r1, #228	@ 0xe4
 801b2f2:	187a      	adds	r2, r7, r1
 801b2f4:	6013      	str	r3, [r2, #0]
 801b2f6:	683b      	ldr	r3, [r7, #0]
 801b2f8:	691b      	ldr	r3, [r3, #16]
 801b2fa:	221f      	movs	r2, #31
 801b2fc:	4013      	ands	r3, r2
 801b2fe:	d104      	bne.n	801b30a <USB_EPStartXfer+0xc52>
 801b300:	187b      	adds	r3, r7, r1
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	3b01      	subs	r3, #1
 801b306:	187a      	adds	r2, r7, r1
 801b308:	6013      	str	r3, [r2, #0]
 801b30a:	21a8      	movs	r1, #168	@ 0xa8
 801b30c:	187b      	adds	r3, r7, r1
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	881b      	ldrh	r3, [r3, #0]
 801b312:	b29a      	uxth	r2, r3
 801b314:	23e4      	movs	r3, #228	@ 0xe4
 801b316:	18fb      	adds	r3, r7, r3
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	b29b      	uxth	r3, r3
 801b31c:	029b      	lsls	r3, r3, #10
 801b31e:	b29b      	uxth	r3, r3
 801b320:	4313      	orrs	r3, r2
 801b322:	b29b      	uxth	r3, r3
 801b324:	4a71      	ldr	r2, [pc, #452]	@ (801b4ec <USB_EPStartXfer+0xe34>)
 801b326:	4313      	orrs	r3, r2
 801b328:	b29a      	uxth	r2, r3
 801b32a:	187b      	adds	r3, r7, r1
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	801a      	strh	r2, [r3, #0]
 801b330:	e054      	b.n	801b3dc <USB_EPStartXfer+0xd24>
 801b332:	683b      	ldr	r3, [r7, #0]
 801b334:	691b      	ldr	r3, [r3, #16]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d10b      	bne.n	801b352 <USB_EPStartXfer+0xc9a>
 801b33a:	21a8      	movs	r1, #168	@ 0xa8
 801b33c:	187b      	adds	r3, r7, r1
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	881b      	ldrh	r3, [r3, #0]
 801b342:	b29b      	uxth	r3, r3
 801b344:	4a69      	ldr	r2, [pc, #420]	@ (801b4ec <USB_EPStartXfer+0xe34>)
 801b346:	4313      	orrs	r3, r2
 801b348:	b29a      	uxth	r2, r3
 801b34a:	187b      	adds	r3, r7, r1
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	801a      	strh	r2, [r3, #0]
 801b350:	e044      	b.n	801b3dc <USB_EPStartXfer+0xd24>
 801b352:	683b      	ldr	r3, [r7, #0]
 801b354:	691b      	ldr	r3, [r3, #16]
 801b356:	085b      	lsrs	r3, r3, #1
 801b358:	21e4      	movs	r1, #228	@ 0xe4
 801b35a:	187a      	adds	r2, r7, r1
 801b35c:	6013      	str	r3, [r2, #0]
 801b35e:	683b      	ldr	r3, [r7, #0]
 801b360:	691b      	ldr	r3, [r3, #16]
 801b362:	2201      	movs	r2, #1
 801b364:	4013      	ands	r3, r2
 801b366:	d004      	beq.n	801b372 <USB_EPStartXfer+0xcba>
 801b368:	187b      	adds	r3, r7, r1
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	3301      	adds	r3, #1
 801b36e:	187a      	adds	r2, r7, r1
 801b370:	6013      	str	r3, [r2, #0]
 801b372:	21a8      	movs	r1, #168	@ 0xa8
 801b374:	187b      	adds	r3, r7, r1
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	881b      	ldrh	r3, [r3, #0]
 801b37a:	b29a      	uxth	r2, r3
 801b37c:	23e4      	movs	r3, #228	@ 0xe4
 801b37e:	18fb      	adds	r3, r7, r3
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	b29b      	uxth	r3, r3
 801b384:	029b      	lsls	r3, r3, #10
 801b386:	b29b      	uxth	r3, r3
 801b388:	4313      	orrs	r3, r2
 801b38a:	b29a      	uxth	r2, r3
 801b38c:	187b      	adds	r3, r7, r1
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	801a      	strh	r2, [r3, #0]
 801b392:	e023      	b.n	801b3dc <USB_EPStartXfer+0xd24>
 801b394:	683b      	ldr	r3, [r7, #0]
 801b396:	785b      	ldrb	r3, [r3, #1]
 801b398:	2b01      	cmp	r3, #1
 801b39a:	d11f      	bne.n	801b3dc <USB_EPStartXfer+0xd24>
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	21b4      	movs	r1, #180	@ 0xb4
 801b3a0:	187a      	adds	r2, r7, r1
 801b3a2:	6013      	str	r3, [r2, #0]
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	2250      	movs	r2, #80	@ 0x50
 801b3a8:	5a9b      	ldrh	r3, [r3, r2]
 801b3aa:	b29b      	uxth	r3, r3
 801b3ac:	001a      	movs	r2, r3
 801b3ae:	187b      	adds	r3, r7, r1
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	189b      	adds	r3, r3, r2
 801b3b4:	187a      	adds	r2, r7, r1
 801b3b6:	6013      	str	r3, [r2, #0]
 801b3b8:	683b      	ldr	r3, [r7, #0]
 801b3ba:	781b      	ldrb	r3, [r3, #0]
 801b3bc:	00da      	lsls	r2, r3, #3
 801b3be:	187b      	adds	r3, r7, r1
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	18d3      	adds	r3, r2, r3
 801b3c4:	4a4a      	ldr	r2, [pc, #296]	@ (801b4f0 <USB_EPStartXfer+0xe38>)
 801b3c6:	4694      	mov	ip, r2
 801b3c8:	4463      	add	r3, ip
 801b3ca:	21b0      	movs	r1, #176	@ 0xb0
 801b3cc:	187a      	adds	r2, r7, r1
 801b3ce:	6013      	str	r3, [r2, #0]
 801b3d0:	683b      	ldr	r3, [r7, #0]
 801b3d2:	691b      	ldr	r3, [r3, #16]
 801b3d4:	b29a      	uxth	r2, r3
 801b3d6:	187b      	adds	r3, r7, r1
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	801a      	strh	r2, [r3, #0]
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	22a4      	movs	r2, #164	@ 0xa4
 801b3e0:	18ba      	adds	r2, r7, r2
 801b3e2:	6013      	str	r3, [r2, #0]
 801b3e4:	683b      	ldr	r3, [r7, #0]
 801b3e6:	785b      	ldrb	r3, [r3, #1]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d000      	beq.n	801b3ee <USB_EPStartXfer+0xd36>
 801b3ec:	e082      	b.n	801b4f4 <USB_EPStartXfer+0xe3c>
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	219c      	movs	r1, #156	@ 0x9c
 801b3f2:	187a      	adds	r2, r7, r1
 801b3f4:	6013      	str	r3, [r2, #0]
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	2250      	movs	r2, #80	@ 0x50
 801b3fa:	5a9b      	ldrh	r3, [r3, r2]
 801b3fc:	b29b      	uxth	r3, r3
 801b3fe:	001a      	movs	r2, r3
 801b400:	187b      	adds	r3, r7, r1
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	189b      	adds	r3, r3, r2
 801b406:	187a      	adds	r2, r7, r1
 801b408:	6013      	str	r3, [r2, #0]
 801b40a:	683b      	ldr	r3, [r7, #0]
 801b40c:	781b      	ldrb	r3, [r3, #0]
 801b40e:	00da      	lsls	r2, r3, #3
 801b410:	187b      	adds	r3, r7, r1
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	18d3      	adds	r3, r2, r3
 801b416:	4a34      	ldr	r2, [pc, #208]	@ (801b4e8 <USB_EPStartXfer+0xe30>)
 801b418:	4694      	mov	ip, r2
 801b41a:	4463      	add	r3, ip
 801b41c:	2198      	movs	r1, #152	@ 0x98
 801b41e:	187a      	adds	r2, r7, r1
 801b420:	6013      	str	r3, [r2, #0]
 801b422:	187b      	adds	r3, r7, r1
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	881b      	ldrh	r3, [r3, #0]
 801b428:	b29b      	uxth	r3, r3
 801b42a:	059b      	lsls	r3, r3, #22
 801b42c:	0d9b      	lsrs	r3, r3, #22
 801b42e:	b29a      	uxth	r2, r3
 801b430:	187b      	adds	r3, r7, r1
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	801a      	strh	r2, [r3, #0]
 801b436:	683b      	ldr	r3, [r7, #0]
 801b438:	691b      	ldr	r3, [r3, #16]
 801b43a:	2b3e      	cmp	r3, #62	@ 0x3e
 801b43c:	d923      	bls.n	801b486 <USB_EPStartXfer+0xdce>
 801b43e:	683b      	ldr	r3, [r7, #0]
 801b440:	691b      	ldr	r3, [r3, #16]
 801b442:	095b      	lsrs	r3, r3, #5
 801b444:	21e0      	movs	r1, #224	@ 0xe0
 801b446:	187a      	adds	r2, r7, r1
 801b448:	6013      	str	r3, [r2, #0]
 801b44a:	683b      	ldr	r3, [r7, #0]
 801b44c:	691b      	ldr	r3, [r3, #16]
 801b44e:	221f      	movs	r2, #31
 801b450:	4013      	ands	r3, r2
 801b452:	d104      	bne.n	801b45e <USB_EPStartXfer+0xda6>
 801b454:	187b      	adds	r3, r7, r1
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	3b01      	subs	r3, #1
 801b45a:	187a      	adds	r2, r7, r1
 801b45c:	6013      	str	r3, [r2, #0]
 801b45e:	2198      	movs	r1, #152	@ 0x98
 801b460:	187b      	adds	r3, r7, r1
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	881b      	ldrh	r3, [r3, #0]
 801b466:	b29a      	uxth	r2, r3
 801b468:	23e0      	movs	r3, #224	@ 0xe0
 801b46a:	18fb      	adds	r3, r7, r3
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	b29b      	uxth	r3, r3
 801b470:	029b      	lsls	r3, r3, #10
 801b472:	b29b      	uxth	r3, r3
 801b474:	4313      	orrs	r3, r2
 801b476:	b29b      	uxth	r3, r3
 801b478:	4a1c      	ldr	r2, [pc, #112]	@ (801b4ec <USB_EPStartXfer+0xe34>)
 801b47a:	4313      	orrs	r3, r2
 801b47c:	b29a      	uxth	r2, r3
 801b47e:	187b      	adds	r3, r7, r1
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	801a      	strh	r2, [r3, #0]
 801b484:	e057      	b.n	801b536 <USB_EPStartXfer+0xe7e>
 801b486:	683b      	ldr	r3, [r7, #0]
 801b488:	691b      	ldr	r3, [r3, #16]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d10b      	bne.n	801b4a6 <USB_EPStartXfer+0xdee>
 801b48e:	2198      	movs	r1, #152	@ 0x98
 801b490:	187b      	adds	r3, r7, r1
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	881b      	ldrh	r3, [r3, #0]
 801b496:	b29b      	uxth	r3, r3
 801b498:	4a14      	ldr	r2, [pc, #80]	@ (801b4ec <USB_EPStartXfer+0xe34>)
 801b49a:	4313      	orrs	r3, r2
 801b49c:	b29a      	uxth	r2, r3
 801b49e:	187b      	adds	r3, r7, r1
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	801a      	strh	r2, [r3, #0]
 801b4a4:	e047      	b.n	801b536 <USB_EPStartXfer+0xe7e>
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	691b      	ldr	r3, [r3, #16]
 801b4aa:	085b      	lsrs	r3, r3, #1
 801b4ac:	21e0      	movs	r1, #224	@ 0xe0
 801b4ae:	187a      	adds	r2, r7, r1
 801b4b0:	6013      	str	r3, [r2, #0]
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	691b      	ldr	r3, [r3, #16]
 801b4b6:	2201      	movs	r2, #1
 801b4b8:	4013      	ands	r3, r2
 801b4ba:	d004      	beq.n	801b4c6 <USB_EPStartXfer+0xe0e>
 801b4bc:	187b      	adds	r3, r7, r1
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	3301      	adds	r3, #1
 801b4c2:	187a      	adds	r2, r7, r1
 801b4c4:	6013      	str	r3, [r2, #0]
 801b4c6:	2198      	movs	r1, #152	@ 0x98
 801b4c8:	187b      	adds	r3, r7, r1
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	881b      	ldrh	r3, [r3, #0]
 801b4ce:	b29a      	uxth	r2, r3
 801b4d0:	23e0      	movs	r3, #224	@ 0xe0
 801b4d2:	18fb      	adds	r3, r7, r3
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	029b      	lsls	r3, r3, #10
 801b4da:	b29b      	uxth	r3, r3
 801b4dc:	4313      	orrs	r3, r2
 801b4de:	b29a      	uxth	r2, r3
 801b4e0:	187b      	adds	r3, r7, r1
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	801a      	strh	r2, [r3, #0]
 801b4e6:	e026      	b.n	801b536 <USB_EPStartXfer+0xe7e>
 801b4e8:	00000406 	.word	0x00000406
 801b4ec:	ffff8000 	.word	0xffff8000
 801b4f0:	00000402 	.word	0x00000402
 801b4f4:	683b      	ldr	r3, [r7, #0]
 801b4f6:	785b      	ldrb	r3, [r3, #1]
 801b4f8:	2b01      	cmp	r3, #1
 801b4fa:	d11c      	bne.n	801b536 <USB_EPStartXfer+0xe7e>
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	2250      	movs	r2, #80	@ 0x50
 801b500:	5a9b      	ldrh	r3, [r3, r2]
 801b502:	b29b      	uxth	r3, r3
 801b504:	001a      	movs	r2, r3
 801b506:	21a4      	movs	r1, #164	@ 0xa4
 801b508:	187b      	adds	r3, r7, r1
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	189b      	adds	r3, r3, r2
 801b50e:	187a      	adds	r2, r7, r1
 801b510:	6013      	str	r3, [r2, #0]
 801b512:	683b      	ldr	r3, [r7, #0]
 801b514:	781b      	ldrb	r3, [r3, #0]
 801b516:	00da      	lsls	r2, r3, #3
 801b518:	187b      	adds	r3, r7, r1
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	18d3      	adds	r3, r2, r3
 801b51e:	4ad2      	ldr	r2, [pc, #840]	@ (801b868 <USB_EPStartXfer+0x11b0>)
 801b520:	4694      	mov	ip, r2
 801b522:	4463      	add	r3, ip
 801b524:	21a0      	movs	r1, #160	@ 0xa0
 801b526:	187a      	adds	r2, r7, r1
 801b528:	6013      	str	r3, [r2, #0]
 801b52a:	683b      	ldr	r3, [r7, #0]
 801b52c:	691b      	ldr	r3, [r3, #16]
 801b52e:	b29a      	uxth	r2, r3
 801b530:	187b      	adds	r3, r7, r1
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801b536:	683b      	ldr	r3, [r7, #0]
 801b538:	69db      	ldr	r3, [r3, #28]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d100      	bne.n	801b540 <USB_EPStartXfer+0xe88>
 801b53e:	e1c2      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801b540:	687a      	ldr	r2, [r7, #4]
 801b542:	683b      	ldr	r3, [r7, #0]
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	009b      	lsls	r3, r3, #2
 801b548:	18d2      	adds	r2, r2, r3
 801b54a:	2196      	movs	r1, #150	@ 0x96
 801b54c:	187b      	adds	r3, r7, r1
 801b54e:	8812      	ldrh	r2, [r2, #0]
 801b550:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801b552:	187b      	adds	r3, r7, r1
 801b554:	881a      	ldrh	r2, [r3, #0]
 801b556:	2380      	movs	r3, #128	@ 0x80
 801b558:	01db      	lsls	r3, r3, #7
 801b55a:	4013      	ands	r3, r2
 801b55c:	d004      	beq.n	801b568 <USB_EPStartXfer+0xeb0>
 801b55e:	187b      	adds	r3, r7, r1
 801b560:	881b      	ldrh	r3, [r3, #0]
 801b562:	2240      	movs	r2, #64	@ 0x40
 801b564:	4013      	ands	r3, r2
 801b566:	d10d      	bne.n	801b584 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801b568:	2196      	movs	r1, #150	@ 0x96
 801b56a:	187b      	adds	r3, r7, r1
 801b56c:	881a      	ldrh	r2, [r3, #0]
 801b56e:	2380      	movs	r3, #128	@ 0x80
 801b570:	01db      	lsls	r3, r3, #7
 801b572:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801b574:	d000      	beq.n	801b578 <USB_EPStartXfer+0xec0>
 801b576:	e1a6      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801b578:	187b      	adds	r3, r7, r1
 801b57a:	881b      	ldrh	r3, [r3, #0]
 801b57c:	2240      	movs	r2, #64	@ 0x40
 801b57e:	4013      	ands	r3, r2
 801b580:	d000      	beq.n	801b584 <USB_EPStartXfer+0xecc>
 801b582:	e1a0      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801b584:	687a      	ldr	r2, [r7, #4]
 801b586:	683b      	ldr	r3, [r7, #0]
 801b588:	781b      	ldrb	r3, [r3, #0]
 801b58a:	009b      	lsls	r3, r3, #2
 801b58c:	18d3      	adds	r3, r2, r3
 801b58e:	881b      	ldrh	r3, [r3, #0]
 801b590:	b29a      	uxth	r2, r3
 801b592:	2094      	movs	r0, #148	@ 0x94
 801b594:	183b      	adds	r3, r7, r0
 801b596:	49b5      	ldr	r1, [pc, #724]	@ (801b86c <USB_EPStartXfer+0x11b4>)
 801b598:	400a      	ands	r2, r1
 801b59a:	801a      	strh	r2, [r3, #0]
 801b59c:	687a      	ldr	r2, [r7, #4]
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	781b      	ldrb	r3, [r3, #0]
 801b5a2:	009b      	lsls	r3, r3, #2
 801b5a4:	18d3      	adds	r3, r2, r3
 801b5a6:	183a      	adds	r2, r7, r0
 801b5a8:	8812      	ldrh	r2, [r2, #0]
 801b5aa:	49b1      	ldr	r1, [pc, #708]	@ (801b870 <USB_EPStartXfer+0x11b8>)
 801b5ac:	430a      	orrs	r2, r1
 801b5ae:	b292      	uxth	r2, r2
 801b5b0:	801a      	strh	r2, [r3, #0]
 801b5b2:	e188      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801b5b4:	683b      	ldr	r3, [r7, #0]
 801b5b6:	78db      	ldrb	r3, [r3, #3]
 801b5b8:	2b01      	cmp	r3, #1
 801b5ba:	d000      	beq.n	801b5be <USB_EPStartXfer+0xf06>
 801b5bc:	e181      	b.n	801b8c2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801b5be:	683b      	ldr	r3, [r7, #0]
 801b5c0:	699a      	ldr	r2, [r3, #24]
 801b5c2:	683b      	ldr	r3, [r7, #0]
 801b5c4:	691b      	ldr	r3, [r3, #16]
 801b5c6:	429a      	cmp	r2, r3
 801b5c8:	d90d      	bls.n	801b5e6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801b5ca:	683b      	ldr	r3, [r7, #0]
 801b5cc:	691b      	ldr	r3, [r3, #16]
 801b5ce:	1d7a      	adds	r2, r7, #5
 801b5d0:	32ff      	adds	r2, #255	@ 0xff
 801b5d2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	699a      	ldr	r2, [r3, #24]
 801b5d8:	1d7b      	adds	r3, r7, #5
 801b5da:	33ff      	adds	r3, #255	@ 0xff
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	1ad2      	subs	r2, r2, r3
 801b5e0:	683b      	ldr	r3, [r7, #0]
 801b5e2:	619a      	str	r2, [r3, #24]
 801b5e4:	e007      	b.n	801b5f6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801b5e6:	683b      	ldr	r3, [r7, #0]
 801b5e8:	699b      	ldr	r3, [r3, #24]
 801b5ea:	1d7a      	adds	r2, r7, #5
 801b5ec:	32ff      	adds	r2, #255	@ 0xff
 801b5ee:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801b5f0:	683b      	ldr	r3, [r7, #0]
 801b5f2:	2200      	movs	r2, #0
 801b5f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801b5f6:	683b      	ldr	r3, [r7, #0]
 801b5f8:	785b      	ldrb	r3, [r3, #1]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d000      	beq.n	801b600 <USB_EPStartXfer+0xf48>
 801b5fe:	e082      	b.n	801b706 <USB_EPStartXfer+0x104e>
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	21cc      	movs	r1, #204	@ 0xcc
 801b604:	187a      	adds	r2, r7, r1
 801b606:	6013      	str	r3, [r2, #0]
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	2250      	movs	r2, #80	@ 0x50
 801b60c:	5a9b      	ldrh	r3, [r3, r2]
 801b60e:	b29b      	uxth	r3, r3
 801b610:	001a      	movs	r2, r3
 801b612:	187b      	adds	r3, r7, r1
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	189b      	adds	r3, r3, r2
 801b618:	187a      	adds	r2, r7, r1
 801b61a:	6013      	str	r3, [r2, #0]
 801b61c:	683b      	ldr	r3, [r7, #0]
 801b61e:	781b      	ldrb	r3, [r3, #0]
 801b620:	00da      	lsls	r2, r3, #3
 801b622:	187b      	adds	r3, r7, r1
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	18d3      	adds	r3, r2, r3
 801b628:	4a92      	ldr	r2, [pc, #584]	@ (801b874 <USB_EPStartXfer+0x11bc>)
 801b62a:	4694      	mov	ip, r2
 801b62c:	4463      	add	r3, ip
 801b62e:	21c8      	movs	r1, #200	@ 0xc8
 801b630:	187a      	adds	r2, r7, r1
 801b632:	6013      	str	r3, [r2, #0]
 801b634:	187b      	adds	r3, r7, r1
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	881b      	ldrh	r3, [r3, #0]
 801b63a:	b29b      	uxth	r3, r3
 801b63c:	059b      	lsls	r3, r3, #22
 801b63e:	0d9b      	lsrs	r3, r3, #22
 801b640:	b29a      	uxth	r2, r3
 801b642:	187b      	adds	r3, r7, r1
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	801a      	strh	r2, [r3, #0]
 801b648:	1d7b      	adds	r3, r7, #5
 801b64a:	33ff      	adds	r3, #255	@ 0xff
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	2b3e      	cmp	r3, #62	@ 0x3e
 801b650:	d925      	bls.n	801b69e <USB_EPStartXfer+0xfe6>
 801b652:	1d7b      	adds	r3, r7, #5
 801b654:	33ff      	adds	r3, #255	@ 0xff
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	095b      	lsrs	r3, r3, #5
 801b65a:	21dc      	movs	r1, #220	@ 0xdc
 801b65c:	187a      	adds	r2, r7, r1
 801b65e:	6013      	str	r3, [r2, #0]
 801b660:	1d7b      	adds	r3, r7, #5
 801b662:	33ff      	adds	r3, #255	@ 0xff
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	221f      	movs	r2, #31
 801b668:	4013      	ands	r3, r2
 801b66a:	d104      	bne.n	801b676 <USB_EPStartXfer+0xfbe>
 801b66c:	187b      	adds	r3, r7, r1
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	3b01      	subs	r3, #1
 801b672:	187a      	adds	r2, r7, r1
 801b674:	6013      	str	r3, [r2, #0]
 801b676:	21c8      	movs	r1, #200	@ 0xc8
 801b678:	187b      	adds	r3, r7, r1
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	881b      	ldrh	r3, [r3, #0]
 801b67e:	b29a      	uxth	r2, r3
 801b680:	23dc      	movs	r3, #220	@ 0xdc
 801b682:	18fb      	adds	r3, r7, r3
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	b29b      	uxth	r3, r3
 801b688:	029b      	lsls	r3, r3, #10
 801b68a:	b29b      	uxth	r3, r3
 801b68c:	4313      	orrs	r3, r2
 801b68e:	b29b      	uxth	r3, r3
 801b690:	4a79      	ldr	r2, [pc, #484]	@ (801b878 <USB_EPStartXfer+0x11c0>)
 801b692:	4313      	orrs	r3, r2
 801b694:	b29a      	uxth	r2, r3
 801b696:	187b      	adds	r3, r7, r1
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	801a      	strh	r2, [r3, #0]
 801b69c:	e058      	b.n	801b750 <USB_EPStartXfer+0x1098>
 801b69e:	1d7b      	adds	r3, r7, #5
 801b6a0:	33ff      	adds	r3, #255	@ 0xff
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d10b      	bne.n	801b6c0 <USB_EPStartXfer+0x1008>
 801b6a8:	21c8      	movs	r1, #200	@ 0xc8
 801b6aa:	187b      	adds	r3, r7, r1
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	881b      	ldrh	r3, [r3, #0]
 801b6b0:	b29b      	uxth	r3, r3
 801b6b2:	4a71      	ldr	r2, [pc, #452]	@ (801b878 <USB_EPStartXfer+0x11c0>)
 801b6b4:	4313      	orrs	r3, r2
 801b6b6:	b29a      	uxth	r2, r3
 801b6b8:	187b      	adds	r3, r7, r1
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	801a      	strh	r2, [r3, #0]
 801b6be:	e047      	b.n	801b750 <USB_EPStartXfer+0x1098>
 801b6c0:	1d7b      	adds	r3, r7, #5
 801b6c2:	33ff      	adds	r3, #255	@ 0xff
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	085b      	lsrs	r3, r3, #1
 801b6c8:	21dc      	movs	r1, #220	@ 0xdc
 801b6ca:	187a      	adds	r2, r7, r1
 801b6cc:	6013      	str	r3, [r2, #0]
 801b6ce:	1d7b      	adds	r3, r7, #5
 801b6d0:	33ff      	adds	r3, #255	@ 0xff
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	2201      	movs	r2, #1
 801b6d6:	4013      	ands	r3, r2
 801b6d8:	d004      	beq.n	801b6e4 <USB_EPStartXfer+0x102c>
 801b6da:	187b      	adds	r3, r7, r1
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	3301      	adds	r3, #1
 801b6e0:	187a      	adds	r2, r7, r1
 801b6e2:	6013      	str	r3, [r2, #0]
 801b6e4:	21c8      	movs	r1, #200	@ 0xc8
 801b6e6:	187b      	adds	r3, r7, r1
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	881b      	ldrh	r3, [r3, #0]
 801b6ec:	b29a      	uxth	r2, r3
 801b6ee:	23dc      	movs	r3, #220	@ 0xdc
 801b6f0:	18fb      	adds	r3, r7, r3
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	b29b      	uxth	r3, r3
 801b6f6:	029b      	lsls	r3, r3, #10
 801b6f8:	b29b      	uxth	r3, r3
 801b6fa:	4313      	orrs	r3, r2
 801b6fc:	b29a      	uxth	r2, r3
 801b6fe:	187b      	adds	r3, r7, r1
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	801a      	strh	r2, [r3, #0]
 801b704:	e024      	b.n	801b750 <USB_EPStartXfer+0x1098>
 801b706:	683b      	ldr	r3, [r7, #0]
 801b708:	785b      	ldrb	r3, [r3, #1]
 801b70a:	2b01      	cmp	r3, #1
 801b70c:	d120      	bne.n	801b750 <USB_EPStartXfer+0x1098>
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	21d4      	movs	r1, #212	@ 0xd4
 801b712:	187a      	adds	r2, r7, r1
 801b714:	6013      	str	r3, [r2, #0]
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	2250      	movs	r2, #80	@ 0x50
 801b71a:	5a9b      	ldrh	r3, [r3, r2]
 801b71c:	b29b      	uxth	r3, r3
 801b71e:	001a      	movs	r2, r3
 801b720:	187b      	adds	r3, r7, r1
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	189b      	adds	r3, r3, r2
 801b726:	187a      	adds	r2, r7, r1
 801b728:	6013      	str	r3, [r2, #0]
 801b72a:	683b      	ldr	r3, [r7, #0]
 801b72c:	781b      	ldrb	r3, [r3, #0]
 801b72e:	00da      	lsls	r2, r3, #3
 801b730:	187b      	adds	r3, r7, r1
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	18d3      	adds	r3, r2, r3
 801b736:	4a4f      	ldr	r2, [pc, #316]	@ (801b874 <USB_EPStartXfer+0x11bc>)
 801b738:	4694      	mov	ip, r2
 801b73a:	4463      	add	r3, ip
 801b73c:	21d0      	movs	r1, #208	@ 0xd0
 801b73e:	187a      	adds	r2, r7, r1
 801b740:	6013      	str	r3, [r2, #0]
 801b742:	1d7b      	adds	r3, r7, #5
 801b744:	33ff      	adds	r3, #255	@ 0xff
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	b29a      	uxth	r2, r3
 801b74a:	187b      	adds	r3, r7, r1
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	801a      	strh	r2, [r3, #0]
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	22c4      	movs	r2, #196	@ 0xc4
 801b754:	18ba      	adds	r2, r7, r2
 801b756:	6013      	str	r3, [r2, #0]
 801b758:	683b      	ldr	r3, [r7, #0]
 801b75a:	785b      	ldrb	r3, [r3, #1]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d000      	beq.n	801b762 <USB_EPStartXfer+0x10aa>
 801b760:	e08c      	b.n	801b87c <USB_EPStartXfer+0x11c4>
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	21bc      	movs	r1, #188	@ 0xbc
 801b766:	187a      	adds	r2, r7, r1
 801b768:	6013      	str	r3, [r2, #0]
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	2250      	movs	r2, #80	@ 0x50
 801b76e:	5a9b      	ldrh	r3, [r3, r2]
 801b770:	b29b      	uxth	r3, r3
 801b772:	001a      	movs	r2, r3
 801b774:	187b      	adds	r3, r7, r1
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	189b      	adds	r3, r3, r2
 801b77a:	187a      	adds	r2, r7, r1
 801b77c:	6013      	str	r3, [r2, #0]
 801b77e:	683b      	ldr	r3, [r7, #0]
 801b780:	781b      	ldrb	r3, [r3, #0]
 801b782:	00da      	lsls	r2, r3, #3
 801b784:	187b      	adds	r3, r7, r1
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	18d3      	adds	r3, r2, r3
 801b78a:	4a37      	ldr	r2, [pc, #220]	@ (801b868 <USB_EPStartXfer+0x11b0>)
 801b78c:	4694      	mov	ip, r2
 801b78e:	4463      	add	r3, ip
 801b790:	21b8      	movs	r1, #184	@ 0xb8
 801b792:	187a      	adds	r2, r7, r1
 801b794:	6013      	str	r3, [r2, #0]
 801b796:	187b      	adds	r3, r7, r1
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	881b      	ldrh	r3, [r3, #0]
 801b79c:	b29b      	uxth	r3, r3
 801b79e:	059b      	lsls	r3, r3, #22
 801b7a0:	0d9b      	lsrs	r3, r3, #22
 801b7a2:	b29a      	uxth	r2, r3
 801b7a4:	187b      	adds	r3, r7, r1
 801b7a6:	681b      	ldr	r3, [r3, #0]
 801b7a8:	801a      	strh	r2, [r3, #0]
 801b7aa:	1d7b      	adds	r3, r7, #5
 801b7ac:	33ff      	adds	r3, #255	@ 0xff
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	2b3e      	cmp	r3, #62	@ 0x3e
 801b7b2:	d925      	bls.n	801b800 <USB_EPStartXfer+0x1148>
 801b7b4:	1d7b      	adds	r3, r7, #5
 801b7b6:	33ff      	adds	r3, #255	@ 0xff
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	095b      	lsrs	r3, r3, #5
 801b7bc:	21d8      	movs	r1, #216	@ 0xd8
 801b7be:	187a      	adds	r2, r7, r1
 801b7c0:	6013      	str	r3, [r2, #0]
 801b7c2:	1d7b      	adds	r3, r7, #5
 801b7c4:	33ff      	adds	r3, #255	@ 0xff
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	221f      	movs	r2, #31
 801b7ca:	4013      	ands	r3, r2
 801b7cc:	d104      	bne.n	801b7d8 <USB_EPStartXfer+0x1120>
 801b7ce:	187b      	adds	r3, r7, r1
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	3b01      	subs	r3, #1
 801b7d4:	187a      	adds	r2, r7, r1
 801b7d6:	6013      	str	r3, [r2, #0]
 801b7d8:	21b8      	movs	r1, #184	@ 0xb8
 801b7da:	187b      	adds	r3, r7, r1
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	881b      	ldrh	r3, [r3, #0]
 801b7e0:	b29a      	uxth	r2, r3
 801b7e2:	23d8      	movs	r3, #216	@ 0xd8
 801b7e4:	18fb      	adds	r3, r7, r3
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	b29b      	uxth	r3, r3
 801b7ea:	029b      	lsls	r3, r3, #10
 801b7ec:	b29b      	uxth	r3, r3
 801b7ee:	4313      	orrs	r3, r2
 801b7f0:	b29b      	uxth	r3, r3
 801b7f2:	4a21      	ldr	r2, [pc, #132]	@ (801b878 <USB_EPStartXfer+0x11c0>)
 801b7f4:	4313      	orrs	r3, r2
 801b7f6:	b29a      	uxth	r2, r3
 801b7f8:	187b      	adds	r3, r7, r1
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	801a      	strh	r2, [r3, #0]
 801b7fe:	e062      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
 801b800:	1d7b      	adds	r3, r7, #5
 801b802:	33ff      	adds	r3, #255	@ 0xff
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	2b00      	cmp	r3, #0
 801b808:	d10b      	bne.n	801b822 <USB_EPStartXfer+0x116a>
 801b80a:	21b8      	movs	r1, #184	@ 0xb8
 801b80c:	187b      	adds	r3, r7, r1
 801b80e:	681b      	ldr	r3, [r3, #0]
 801b810:	881b      	ldrh	r3, [r3, #0]
 801b812:	b29b      	uxth	r3, r3
 801b814:	4a18      	ldr	r2, [pc, #96]	@ (801b878 <USB_EPStartXfer+0x11c0>)
 801b816:	4313      	orrs	r3, r2
 801b818:	b29a      	uxth	r2, r3
 801b81a:	187b      	adds	r3, r7, r1
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	801a      	strh	r2, [r3, #0]
 801b820:	e051      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
 801b822:	1d7b      	adds	r3, r7, #5
 801b824:	33ff      	adds	r3, #255	@ 0xff
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	085b      	lsrs	r3, r3, #1
 801b82a:	21d8      	movs	r1, #216	@ 0xd8
 801b82c:	187a      	adds	r2, r7, r1
 801b82e:	6013      	str	r3, [r2, #0]
 801b830:	1d7b      	adds	r3, r7, #5
 801b832:	33ff      	adds	r3, #255	@ 0xff
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	2201      	movs	r2, #1
 801b838:	4013      	ands	r3, r2
 801b83a:	d004      	beq.n	801b846 <USB_EPStartXfer+0x118e>
 801b83c:	187b      	adds	r3, r7, r1
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	3301      	adds	r3, #1
 801b842:	187a      	adds	r2, r7, r1
 801b844:	6013      	str	r3, [r2, #0]
 801b846:	21b8      	movs	r1, #184	@ 0xb8
 801b848:	187b      	adds	r3, r7, r1
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	881b      	ldrh	r3, [r3, #0]
 801b84e:	b29a      	uxth	r2, r3
 801b850:	23d8      	movs	r3, #216	@ 0xd8
 801b852:	18fb      	adds	r3, r7, r3
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	b29b      	uxth	r3, r3
 801b858:	029b      	lsls	r3, r3, #10
 801b85a:	b29b      	uxth	r3, r3
 801b85c:	4313      	orrs	r3, r2
 801b85e:	b29a      	uxth	r2, r3
 801b860:	187b      	adds	r3, r7, r1
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	801a      	strh	r2, [r3, #0]
 801b866:	e02e      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
 801b868:	00000406 	.word	0x00000406
 801b86c:	ffff8f8f 	.word	0xffff8f8f
 801b870:	ffff80c0 	.word	0xffff80c0
 801b874:	00000402 	.word	0x00000402
 801b878:	ffff8000 	.word	0xffff8000
 801b87c:	683b      	ldr	r3, [r7, #0]
 801b87e:	785b      	ldrb	r3, [r3, #1]
 801b880:	2b01      	cmp	r3, #1
 801b882:	d120      	bne.n	801b8c6 <USB_EPStartXfer+0x120e>
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	2250      	movs	r2, #80	@ 0x50
 801b888:	5a9b      	ldrh	r3, [r3, r2]
 801b88a:	b29b      	uxth	r3, r3
 801b88c:	001a      	movs	r2, r3
 801b88e:	21c4      	movs	r1, #196	@ 0xc4
 801b890:	187b      	adds	r3, r7, r1
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	189b      	adds	r3, r3, r2
 801b896:	187a      	adds	r2, r7, r1
 801b898:	6013      	str	r3, [r2, #0]
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	781b      	ldrb	r3, [r3, #0]
 801b89e:	00da      	lsls	r2, r3, #3
 801b8a0:	187b      	adds	r3, r7, r1
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	18d3      	adds	r3, r2, r3
 801b8a6:	4a1d      	ldr	r2, [pc, #116]	@ (801b91c <USB_EPStartXfer+0x1264>)
 801b8a8:	4694      	mov	ip, r2
 801b8aa:	4463      	add	r3, ip
 801b8ac:	21c0      	movs	r1, #192	@ 0xc0
 801b8ae:	187a      	adds	r2, r7, r1
 801b8b0:	6013      	str	r3, [r2, #0]
 801b8b2:	1d7b      	adds	r3, r7, #5
 801b8b4:	33ff      	adds	r3, #255	@ 0xff
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	b29a      	uxth	r2, r3
 801b8ba:	187b      	adds	r3, r7, r1
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	801a      	strh	r2, [r3, #0]
 801b8c0:	e001      	b.n	801b8c6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801b8c2:	2301      	movs	r3, #1
 801b8c4:	e025      	b.n	801b912 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b8c6:	687a      	ldr	r2, [r7, #4]
 801b8c8:	683b      	ldr	r3, [r7, #0]
 801b8ca:	781b      	ldrb	r3, [r3, #0]
 801b8cc:	009b      	lsls	r3, r3, #2
 801b8ce:	18d3      	adds	r3, r2, r3
 801b8d0:	881b      	ldrh	r3, [r3, #0]
 801b8d2:	b29a      	uxth	r2, r3
 801b8d4:	208a      	movs	r0, #138	@ 0x8a
 801b8d6:	183b      	adds	r3, r7, r0
 801b8d8:	4911      	ldr	r1, [pc, #68]	@ (801b920 <USB_EPStartXfer+0x1268>)
 801b8da:	400a      	ands	r2, r1
 801b8dc:	801a      	strh	r2, [r3, #0]
 801b8de:	183b      	adds	r3, r7, r0
 801b8e0:	183a      	adds	r2, r7, r0
 801b8e2:	8812      	ldrh	r2, [r2, #0]
 801b8e4:	2180      	movs	r1, #128	@ 0x80
 801b8e6:	0149      	lsls	r1, r1, #5
 801b8e8:	404a      	eors	r2, r1
 801b8ea:	801a      	strh	r2, [r3, #0]
 801b8ec:	183b      	adds	r3, r7, r0
 801b8ee:	183a      	adds	r2, r7, r0
 801b8f0:	8812      	ldrh	r2, [r2, #0]
 801b8f2:	2180      	movs	r1, #128	@ 0x80
 801b8f4:	0189      	lsls	r1, r1, #6
 801b8f6:	404a      	eors	r2, r1
 801b8f8:	801a      	strh	r2, [r3, #0]
 801b8fa:	687a      	ldr	r2, [r7, #4]
 801b8fc:	683b      	ldr	r3, [r7, #0]
 801b8fe:	781b      	ldrb	r3, [r3, #0]
 801b900:	009b      	lsls	r3, r3, #2
 801b902:	18d3      	adds	r3, r2, r3
 801b904:	183a      	adds	r2, r7, r0
 801b906:	8812      	ldrh	r2, [r2, #0]
 801b908:	4906      	ldr	r1, [pc, #24]	@ (801b924 <USB_EPStartXfer+0x126c>)
 801b90a:	430a      	orrs	r2, r1
 801b90c:	b292      	uxth	r2, r2
 801b90e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b910:	2300      	movs	r3, #0
}
 801b912:	0018      	movs	r0, r3
 801b914:	46bd      	mov	sp, r7
 801b916:	b043      	add	sp, #268	@ 0x10c
 801b918:	bd90      	pop	{r4, r7, pc}
 801b91a:	46c0      	nop			@ (mov r8, r8)
 801b91c:	00000406 	.word	0x00000406
 801b920:	ffffbf8f 	.word	0xffffbf8f
 801b924:	ffff8080 	.word	0xffff8080

0801b928 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b084      	sub	sp, #16
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	6078      	str	r0, [r7, #4]
 801b930:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801b932:	683b      	ldr	r3, [r7, #0]
 801b934:	785b      	ldrb	r3, [r3, #1]
 801b936:	2b00      	cmp	r3, #0
 801b938:	d01d      	beq.n	801b976 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801b93a:	687a      	ldr	r2, [r7, #4]
 801b93c:	683b      	ldr	r3, [r7, #0]
 801b93e:	781b      	ldrb	r3, [r3, #0]
 801b940:	009b      	lsls	r3, r3, #2
 801b942:	18d3      	adds	r3, r2, r3
 801b944:	881b      	ldrh	r3, [r3, #0]
 801b946:	b29a      	uxth	r2, r3
 801b948:	200c      	movs	r0, #12
 801b94a:	183b      	adds	r3, r7, r0
 801b94c:	491b      	ldr	r1, [pc, #108]	@ (801b9bc <USB_EPSetStall+0x94>)
 801b94e:	400a      	ands	r2, r1
 801b950:	801a      	strh	r2, [r3, #0]
 801b952:	183b      	adds	r3, r7, r0
 801b954:	183a      	adds	r2, r7, r0
 801b956:	8812      	ldrh	r2, [r2, #0]
 801b958:	2110      	movs	r1, #16
 801b95a:	404a      	eors	r2, r1
 801b95c:	801a      	strh	r2, [r3, #0]
 801b95e:	687a      	ldr	r2, [r7, #4]
 801b960:	683b      	ldr	r3, [r7, #0]
 801b962:	781b      	ldrb	r3, [r3, #0]
 801b964:	009b      	lsls	r3, r3, #2
 801b966:	18d3      	adds	r3, r2, r3
 801b968:	183a      	adds	r2, r7, r0
 801b96a:	8812      	ldrh	r2, [r2, #0]
 801b96c:	4914      	ldr	r1, [pc, #80]	@ (801b9c0 <USB_EPSetStall+0x98>)
 801b96e:	430a      	orrs	r2, r1
 801b970:	b292      	uxth	r2, r2
 801b972:	801a      	strh	r2, [r3, #0]
 801b974:	e01d      	b.n	801b9b2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801b976:	687a      	ldr	r2, [r7, #4]
 801b978:	683b      	ldr	r3, [r7, #0]
 801b97a:	781b      	ldrb	r3, [r3, #0]
 801b97c:	009b      	lsls	r3, r3, #2
 801b97e:	18d3      	adds	r3, r2, r3
 801b980:	881b      	ldrh	r3, [r3, #0]
 801b982:	b29a      	uxth	r2, r3
 801b984:	200e      	movs	r0, #14
 801b986:	183b      	adds	r3, r7, r0
 801b988:	490e      	ldr	r1, [pc, #56]	@ (801b9c4 <USB_EPSetStall+0x9c>)
 801b98a:	400a      	ands	r2, r1
 801b98c:	801a      	strh	r2, [r3, #0]
 801b98e:	183b      	adds	r3, r7, r0
 801b990:	183a      	adds	r2, r7, r0
 801b992:	8812      	ldrh	r2, [r2, #0]
 801b994:	2180      	movs	r1, #128	@ 0x80
 801b996:	0149      	lsls	r1, r1, #5
 801b998:	404a      	eors	r2, r1
 801b99a:	801a      	strh	r2, [r3, #0]
 801b99c:	687a      	ldr	r2, [r7, #4]
 801b99e:	683b      	ldr	r3, [r7, #0]
 801b9a0:	781b      	ldrb	r3, [r3, #0]
 801b9a2:	009b      	lsls	r3, r3, #2
 801b9a4:	18d3      	adds	r3, r2, r3
 801b9a6:	183a      	adds	r2, r7, r0
 801b9a8:	8812      	ldrh	r2, [r2, #0]
 801b9aa:	4905      	ldr	r1, [pc, #20]	@ (801b9c0 <USB_EPSetStall+0x98>)
 801b9ac:	430a      	orrs	r2, r1
 801b9ae:	b292      	uxth	r2, r2
 801b9b0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b9b2:	2300      	movs	r3, #0
}
 801b9b4:	0018      	movs	r0, r3
 801b9b6:	46bd      	mov	sp, r7
 801b9b8:	b004      	add	sp, #16
 801b9ba:	bd80      	pop	{r7, pc}
 801b9bc:	ffff8fbf 	.word	0xffff8fbf
 801b9c0:	ffff8080 	.word	0xffff8080
 801b9c4:	ffffbf8f 	.word	0xffffbf8f

0801b9c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b9c8:	b580      	push	{r7, lr}
 801b9ca:	b086      	sub	sp, #24
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
 801b9d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801b9d2:	683b      	ldr	r3, [r7, #0]
 801b9d4:	7b1b      	ldrb	r3, [r3, #12]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d000      	beq.n	801b9dc <USB_EPClearStall+0x14>
 801b9da:	e095      	b.n	801bb08 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801b9dc:	683b      	ldr	r3, [r7, #0]
 801b9de:	785b      	ldrb	r3, [r3, #1]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d046      	beq.n	801ba72 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801b9e4:	687a      	ldr	r2, [r7, #4]
 801b9e6:	683b      	ldr	r3, [r7, #0]
 801b9e8:	781b      	ldrb	r3, [r3, #0]
 801b9ea:	009b      	lsls	r3, r3, #2
 801b9ec:	18d2      	adds	r2, r2, r3
 801b9ee:	2110      	movs	r1, #16
 801b9f0:	187b      	adds	r3, r7, r1
 801b9f2:	8812      	ldrh	r2, [r2, #0]
 801b9f4:	801a      	strh	r2, [r3, #0]
 801b9f6:	187b      	adds	r3, r7, r1
 801b9f8:	881b      	ldrh	r3, [r3, #0]
 801b9fa:	2240      	movs	r2, #64	@ 0x40
 801b9fc:	4013      	ands	r3, r2
 801b9fe:	d016      	beq.n	801ba2e <USB_EPClearStall+0x66>
 801ba00:	687a      	ldr	r2, [r7, #4]
 801ba02:	683b      	ldr	r3, [r7, #0]
 801ba04:	781b      	ldrb	r3, [r3, #0]
 801ba06:	009b      	lsls	r3, r3, #2
 801ba08:	18d3      	adds	r3, r2, r3
 801ba0a:	881b      	ldrh	r3, [r3, #0]
 801ba0c:	b29a      	uxth	r2, r3
 801ba0e:	200e      	movs	r0, #14
 801ba10:	183b      	adds	r3, r7, r0
 801ba12:	4940      	ldr	r1, [pc, #256]	@ (801bb14 <USB_EPClearStall+0x14c>)
 801ba14:	400a      	ands	r2, r1
 801ba16:	801a      	strh	r2, [r3, #0]
 801ba18:	687a      	ldr	r2, [r7, #4]
 801ba1a:	683b      	ldr	r3, [r7, #0]
 801ba1c:	781b      	ldrb	r3, [r3, #0]
 801ba1e:	009b      	lsls	r3, r3, #2
 801ba20:	18d3      	adds	r3, r2, r3
 801ba22:	183a      	adds	r2, r7, r0
 801ba24:	8812      	ldrh	r2, [r2, #0]
 801ba26:	493c      	ldr	r1, [pc, #240]	@ (801bb18 <USB_EPClearStall+0x150>)
 801ba28:	430a      	orrs	r2, r1
 801ba2a:	b292      	uxth	r2, r2
 801ba2c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ba2e:	683b      	ldr	r3, [r7, #0]
 801ba30:	78db      	ldrb	r3, [r3, #3]
 801ba32:	2b01      	cmp	r3, #1
 801ba34:	d068      	beq.n	801bb08 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ba36:	687a      	ldr	r2, [r7, #4]
 801ba38:	683b      	ldr	r3, [r7, #0]
 801ba3a:	781b      	ldrb	r3, [r3, #0]
 801ba3c:	009b      	lsls	r3, r3, #2
 801ba3e:	18d3      	adds	r3, r2, r3
 801ba40:	881b      	ldrh	r3, [r3, #0]
 801ba42:	b29a      	uxth	r2, r3
 801ba44:	200c      	movs	r0, #12
 801ba46:	183b      	adds	r3, r7, r0
 801ba48:	4934      	ldr	r1, [pc, #208]	@ (801bb1c <USB_EPClearStall+0x154>)
 801ba4a:	400a      	ands	r2, r1
 801ba4c:	801a      	strh	r2, [r3, #0]
 801ba4e:	183b      	adds	r3, r7, r0
 801ba50:	183a      	adds	r2, r7, r0
 801ba52:	8812      	ldrh	r2, [r2, #0]
 801ba54:	2120      	movs	r1, #32
 801ba56:	404a      	eors	r2, r1
 801ba58:	801a      	strh	r2, [r3, #0]
 801ba5a:	687a      	ldr	r2, [r7, #4]
 801ba5c:	683b      	ldr	r3, [r7, #0]
 801ba5e:	781b      	ldrb	r3, [r3, #0]
 801ba60:	009b      	lsls	r3, r3, #2
 801ba62:	18d3      	adds	r3, r2, r3
 801ba64:	183a      	adds	r2, r7, r0
 801ba66:	8812      	ldrh	r2, [r2, #0]
 801ba68:	492d      	ldr	r1, [pc, #180]	@ (801bb20 <USB_EPClearStall+0x158>)
 801ba6a:	430a      	orrs	r2, r1
 801ba6c:	b292      	uxth	r2, r2
 801ba6e:	801a      	strh	r2, [r3, #0]
 801ba70:	e04a      	b.n	801bb08 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ba72:	687a      	ldr	r2, [r7, #4]
 801ba74:	683b      	ldr	r3, [r7, #0]
 801ba76:	781b      	ldrb	r3, [r3, #0]
 801ba78:	009b      	lsls	r3, r3, #2
 801ba7a:	18d2      	adds	r2, r2, r3
 801ba7c:	2116      	movs	r1, #22
 801ba7e:	187b      	adds	r3, r7, r1
 801ba80:	8812      	ldrh	r2, [r2, #0]
 801ba82:	801a      	strh	r2, [r3, #0]
 801ba84:	187b      	adds	r3, r7, r1
 801ba86:	881a      	ldrh	r2, [r3, #0]
 801ba88:	2380      	movs	r3, #128	@ 0x80
 801ba8a:	01db      	lsls	r3, r3, #7
 801ba8c:	4013      	ands	r3, r2
 801ba8e:	d016      	beq.n	801babe <USB_EPClearStall+0xf6>
 801ba90:	687a      	ldr	r2, [r7, #4]
 801ba92:	683b      	ldr	r3, [r7, #0]
 801ba94:	781b      	ldrb	r3, [r3, #0]
 801ba96:	009b      	lsls	r3, r3, #2
 801ba98:	18d3      	adds	r3, r2, r3
 801ba9a:	881b      	ldrh	r3, [r3, #0]
 801ba9c:	b29a      	uxth	r2, r3
 801ba9e:	2014      	movs	r0, #20
 801baa0:	183b      	adds	r3, r7, r0
 801baa2:	491c      	ldr	r1, [pc, #112]	@ (801bb14 <USB_EPClearStall+0x14c>)
 801baa4:	400a      	ands	r2, r1
 801baa6:	801a      	strh	r2, [r3, #0]
 801baa8:	687a      	ldr	r2, [r7, #4]
 801baaa:	683b      	ldr	r3, [r7, #0]
 801baac:	781b      	ldrb	r3, [r3, #0]
 801baae:	009b      	lsls	r3, r3, #2
 801bab0:	18d3      	adds	r3, r2, r3
 801bab2:	183a      	adds	r2, r7, r0
 801bab4:	8812      	ldrh	r2, [r2, #0]
 801bab6:	491b      	ldr	r1, [pc, #108]	@ (801bb24 <USB_EPClearStall+0x15c>)
 801bab8:	430a      	orrs	r2, r1
 801baba:	b292      	uxth	r2, r2
 801babc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801babe:	687a      	ldr	r2, [r7, #4]
 801bac0:	683b      	ldr	r3, [r7, #0]
 801bac2:	781b      	ldrb	r3, [r3, #0]
 801bac4:	009b      	lsls	r3, r3, #2
 801bac6:	18d3      	adds	r3, r2, r3
 801bac8:	881b      	ldrh	r3, [r3, #0]
 801baca:	b29a      	uxth	r2, r3
 801bacc:	2012      	movs	r0, #18
 801bace:	183b      	adds	r3, r7, r0
 801bad0:	4915      	ldr	r1, [pc, #84]	@ (801bb28 <USB_EPClearStall+0x160>)
 801bad2:	400a      	ands	r2, r1
 801bad4:	801a      	strh	r2, [r3, #0]
 801bad6:	183b      	adds	r3, r7, r0
 801bad8:	183a      	adds	r2, r7, r0
 801bada:	8812      	ldrh	r2, [r2, #0]
 801badc:	2180      	movs	r1, #128	@ 0x80
 801bade:	0149      	lsls	r1, r1, #5
 801bae0:	404a      	eors	r2, r1
 801bae2:	801a      	strh	r2, [r3, #0]
 801bae4:	183b      	adds	r3, r7, r0
 801bae6:	183a      	adds	r2, r7, r0
 801bae8:	8812      	ldrh	r2, [r2, #0]
 801baea:	2180      	movs	r1, #128	@ 0x80
 801baec:	0189      	lsls	r1, r1, #6
 801baee:	404a      	eors	r2, r1
 801baf0:	801a      	strh	r2, [r3, #0]
 801baf2:	687a      	ldr	r2, [r7, #4]
 801baf4:	683b      	ldr	r3, [r7, #0]
 801baf6:	781b      	ldrb	r3, [r3, #0]
 801baf8:	009b      	lsls	r3, r3, #2
 801bafa:	18d3      	adds	r3, r2, r3
 801bafc:	183a      	adds	r2, r7, r0
 801bafe:	8812      	ldrh	r2, [r2, #0]
 801bb00:	4907      	ldr	r1, [pc, #28]	@ (801bb20 <USB_EPClearStall+0x158>)
 801bb02:	430a      	orrs	r2, r1
 801bb04:	b292      	uxth	r2, r2
 801bb06:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801bb08:	2300      	movs	r3, #0
}
 801bb0a:	0018      	movs	r0, r3
 801bb0c:	46bd      	mov	sp, r7
 801bb0e:	b006      	add	sp, #24
 801bb10:	bd80      	pop	{r7, pc}
 801bb12:	46c0      	nop			@ (mov r8, r8)
 801bb14:	ffff8f8f 	.word	0xffff8f8f
 801bb18:	ffff80c0 	.word	0xffff80c0
 801bb1c:	ffff8fbf 	.word	0xffff8fbf
 801bb20:	ffff8080 	.word	0xffff8080
 801bb24:	ffffc080 	.word	0xffffc080
 801bb28:	ffffbf8f 	.word	0xffffbf8f

0801bb2c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b082      	sub	sp, #8
 801bb30:	af00      	add	r7, sp, #0
 801bb32:	6078      	str	r0, [r7, #4]
 801bb34:	000a      	movs	r2, r1
 801bb36:	1cfb      	adds	r3, r7, #3
 801bb38:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801bb3a:	1cfb      	adds	r3, r7, #3
 801bb3c:	781b      	ldrb	r3, [r3, #0]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d103      	bne.n	801bb4a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	224c      	movs	r2, #76	@ 0x4c
 801bb46:	2180      	movs	r1, #128	@ 0x80
 801bb48:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801bb4a:	2300      	movs	r3, #0
}
 801bb4c:	0018      	movs	r0, r3
 801bb4e:	46bd      	mov	sp, r7
 801bb50:	b002      	add	sp, #8
 801bb52:	bd80      	pop	{r7, pc}

0801bb54 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b082      	sub	sp, #8
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	2258      	movs	r2, #88	@ 0x58
 801bb60:	5a9b      	ldrh	r3, [r3, r2]
 801bb62:	b29b      	uxth	r3, r3
 801bb64:	4a05      	ldr	r2, [pc, #20]	@ (801bb7c <USB_DevConnect+0x28>)
 801bb66:	4313      	orrs	r3, r2
 801bb68:	b299      	uxth	r1, r3
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	2258      	movs	r2, #88	@ 0x58
 801bb6e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801bb70:	2300      	movs	r3, #0
}
 801bb72:	0018      	movs	r0, r3
 801bb74:	46bd      	mov	sp, r7
 801bb76:	b002      	add	sp, #8
 801bb78:	bd80      	pop	{r7, pc}
 801bb7a:	46c0      	nop			@ (mov r8, r8)
 801bb7c:	ffff8000 	.word	0xffff8000

0801bb80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b084      	sub	sp, #16
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	2244      	movs	r2, #68	@ 0x44
 801bb8c:	5a9b      	ldrh	r3, [r3, r2]
 801bb8e:	b29b      	uxth	r3, r3
 801bb90:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801bb92:	68fb      	ldr	r3, [r7, #12]
}
 801bb94:	0018      	movs	r0, r3
 801bb96:	46bd      	mov	sp, r7
 801bb98:	b004      	add	sp, #16
 801bb9a:	bd80      	pop	{r7, pc}

0801bb9c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b08a      	sub	sp, #40	@ 0x28
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	60f8      	str	r0, [r7, #12]
 801bba4:	60b9      	str	r1, [r7, #8]
 801bba6:	0019      	movs	r1, r3
 801bba8:	1dbb      	adds	r3, r7, #6
 801bbaa:	801a      	strh	r2, [r3, #0]
 801bbac:	1d3b      	adds	r3, r7, #4
 801bbae:	1c0a      	adds	r2, r1, #0
 801bbb0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801bbb2:	1d3b      	adds	r3, r7, #4
 801bbb4:	881b      	ldrh	r3, [r3, #0]
 801bbb6:	3301      	adds	r3, #1
 801bbb8:	085b      	lsrs	r3, r3, #1
 801bbba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801bbc0:	68bb      	ldr	r3, [r7, #8]
 801bbc2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801bbc4:	1dbb      	adds	r3, r7, #6
 801bbc6:	881a      	ldrh	r2, [r3, #0]
 801bbc8:	697b      	ldr	r3, [r7, #20]
 801bbca:	18d3      	adds	r3, r2, r3
 801bbcc:	2280      	movs	r2, #128	@ 0x80
 801bbce:	00d2      	lsls	r2, r2, #3
 801bbd0:	4694      	mov	ip, r2
 801bbd2:	4463      	add	r3, ip
 801bbd4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801bbd6:	69bb      	ldr	r3, [r7, #24]
 801bbd8:	627b      	str	r3, [r7, #36]	@ 0x24
 801bbda:	e020      	b.n	801bc1e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801bbdc:	69fb      	ldr	r3, [r7, #28]
 801bbde:	781a      	ldrb	r2, [r3, #0]
 801bbe0:	2112      	movs	r1, #18
 801bbe2:	187b      	adds	r3, r7, r1
 801bbe4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801bbe6:	69fb      	ldr	r3, [r7, #28]
 801bbe8:	3301      	adds	r3, #1
 801bbea:	781b      	ldrb	r3, [r3, #0]
 801bbec:	021b      	lsls	r3, r3, #8
 801bbee:	b21a      	sxth	r2, r3
 801bbf0:	187b      	adds	r3, r7, r1
 801bbf2:	2000      	movs	r0, #0
 801bbf4:	5e1b      	ldrsh	r3, [r3, r0]
 801bbf6:	4313      	orrs	r3, r2
 801bbf8:	b21a      	sxth	r2, r3
 801bbfa:	187b      	adds	r3, r7, r1
 801bbfc:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801bbfe:	6a3b      	ldr	r3, [r7, #32]
 801bc00:	187a      	adds	r2, r7, r1
 801bc02:	8812      	ldrh	r2, [r2, #0]
 801bc04:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801bc06:	6a3b      	ldr	r3, [r7, #32]
 801bc08:	3302      	adds	r3, #2
 801bc0a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801bc0c:	69fb      	ldr	r3, [r7, #28]
 801bc0e:	3301      	adds	r3, #1
 801bc10:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801bc12:	69fb      	ldr	r3, [r7, #28]
 801bc14:	3301      	adds	r3, #1
 801bc16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801bc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc1a:	3b01      	subs	r3, #1
 801bc1c:	627b      	str	r3, [r7, #36]	@ 0x24
 801bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d1db      	bne.n	801bbdc <USB_WritePMA+0x40>
  }
}
 801bc24:	46c0      	nop			@ (mov r8, r8)
 801bc26:	46c0      	nop			@ (mov r8, r8)
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	b00a      	add	sp, #40	@ 0x28
 801bc2c:	bd80      	pop	{r7, pc}

0801bc2e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801bc2e:	b580      	push	{r7, lr}
 801bc30:	b08a      	sub	sp, #40	@ 0x28
 801bc32:	af00      	add	r7, sp, #0
 801bc34:	60f8      	str	r0, [r7, #12]
 801bc36:	60b9      	str	r1, [r7, #8]
 801bc38:	0019      	movs	r1, r3
 801bc3a:	1dbb      	adds	r3, r7, #6
 801bc3c:	801a      	strh	r2, [r3, #0]
 801bc3e:	1d3b      	adds	r3, r7, #4
 801bc40:	1c0a      	adds	r2, r1, #0
 801bc42:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801bc44:	1d3b      	adds	r3, r7, #4
 801bc46:	881b      	ldrh	r3, [r3, #0]
 801bc48:	085b      	lsrs	r3, r3, #1
 801bc4a:	b29b      	uxth	r3, r3
 801bc4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801bc56:	1dbb      	adds	r3, r7, #6
 801bc58:	881a      	ldrh	r2, [r3, #0]
 801bc5a:	697b      	ldr	r3, [r7, #20]
 801bc5c:	18d3      	adds	r3, r2, r3
 801bc5e:	2280      	movs	r2, #128	@ 0x80
 801bc60:	00d2      	lsls	r2, r2, #3
 801bc62:	4694      	mov	ip, r2
 801bc64:	4463      	add	r3, ip
 801bc66:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801bc68:	69bb      	ldr	r3, [r7, #24]
 801bc6a:	627b      	str	r3, [r7, #36]	@ 0x24
 801bc6c:	e018      	b.n	801bca0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801bc6e:	6a3b      	ldr	r3, [r7, #32]
 801bc70:	881b      	ldrh	r3, [r3, #0]
 801bc72:	b29b      	uxth	r3, r3
 801bc74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801bc76:	6a3b      	ldr	r3, [r7, #32]
 801bc78:	3302      	adds	r3, #2
 801bc7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801bc7c:	693b      	ldr	r3, [r7, #16]
 801bc7e:	b2da      	uxtb	r2, r3
 801bc80:	69fb      	ldr	r3, [r7, #28]
 801bc82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801bc84:	69fb      	ldr	r3, [r7, #28]
 801bc86:	3301      	adds	r3, #1
 801bc88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801bc8a:	693b      	ldr	r3, [r7, #16]
 801bc8c:	0a1b      	lsrs	r3, r3, #8
 801bc8e:	b2da      	uxtb	r2, r3
 801bc90:	69fb      	ldr	r3, [r7, #28]
 801bc92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801bc94:	69fb      	ldr	r3, [r7, #28]
 801bc96:	3301      	adds	r3, #1
 801bc98:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801bc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc9c:	3b01      	subs	r3, #1
 801bc9e:	627b      	str	r3, [r7, #36]	@ 0x24
 801bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d1e3      	bne.n	801bc6e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801bca6:	1d3b      	adds	r3, r7, #4
 801bca8:	881b      	ldrh	r3, [r3, #0]
 801bcaa:	2201      	movs	r2, #1
 801bcac:	4013      	ands	r3, r2
 801bcae:	b29b      	uxth	r3, r3
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d007      	beq.n	801bcc4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801bcb4:	6a3b      	ldr	r3, [r7, #32]
 801bcb6:	881b      	ldrh	r3, [r3, #0]
 801bcb8:	b29b      	uxth	r3, r3
 801bcba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801bcbc:	693b      	ldr	r3, [r7, #16]
 801bcbe:	b2da      	uxtb	r2, r3
 801bcc0:	69fb      	ldr	r3, [r7, #28]
 801bcc2:	701a      	strb	r2, [r3, #0]
  }
}
 801bcc4:	46c0      	nop			@ (mov r8, r8)
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	b00a      	add	sp, #40	@ 0x28
 801bcca:	bd80      	pop	{r7, pc}

0801bccc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bccc:	b580      	push	{r7, lr}
 801bcce:	b084      	sub	sp, #16
 801bcd0:	af00      	add	r7, sp, #0
 801bcd2:	6078      	str	r0, [r7, #4]
 801bcd4:	000a      	movs	r2, r1
 801bcd6:	1cfb      	adds	r3, r7, #3
 801bcd8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801bcda:	230f      	movs	r3, #15
 801bcdc:	18fb      	adds	r3, r7, r3
 801bcde:	2200      	movs	r2, #0
 801bce0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	7c1b      	ldrb	r3, [r3, #16]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d116      	bne.n	801bd18 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801bcea:	2380      	movs	r3, #128	@ 0x80
 801bcec:	009b      	lsls	r3, r3, #2
 801bcee:	6878      	ldr	r0, [r7, #4]
 801bcf0:	2202      	movs	r2, #2
 801bcf2:	2181      	movs	r1, #129	@ 0x81
 801bcf4:	f002 f8eb 	bl	801dece <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	2201      	movs	r2, #1
 801bcfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801bcfe:	2380      	movs	r3, #128	@ 0x80
 801bd00:	009b      	lsls	r3, r3, #2
 801bd02:	6878      	ldr	r0, [r7, #4]
 801bd04:	2202      	movs	r2, #2
 801bd06:	2101      	movs	r1, #1
 801bd08:	f002 f8e1 	bl	801dece <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801bd0c:	687a      	ldr	r2, [r7, #4]
 801bd0e:	23b6      	movs	r3, #182	@ 0xb6
 801bd10:	005b      	lsls	r3, r3, #1
 801bd12:	2101      	movs	r1, #1
 801bd14:	50d1      	str	r1, [r2, r3]
 801bd16:	e013      	b.n	801bd40 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801bd18:	6878      	ldr	r0, [r7, #4]
 801bd1a:	2340      	movs	r3, #64	@ 0x40
 801bd1c:	2202      	movs	r2, #2
 801bd1e:	2181      	movs	r1, #129	@ 0x81
 801bd20:	f002 f8d5 	bl	801dece <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	2201      	movs	r2, #1
 801bd28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	2340      	movs	r3, #64	@ 0x40
 801bd2e:	2202      	movs	r2, #2
 801bd30:	2101      	movs	r1, #1
 801bd32:	f002 f8cc 	bl	801dece <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801bd36:	687a      	ldr	r2, [r7, #4]
 801bd38:	23b6      	movs	r3, #182	@ 0xb6
 801bd3a:	005b      	lsls	r3, r3, #1
 801bd3c:	2101      	movs	r1, #1
 801bd3e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801bd40:	6878      	ldr	r0, [r7, #4]
 801bd42:	2308      	movs	r3, #8
 801bd44:	2203      	movs	r2, #3
 801bd46:	2182      	movs	r1, #130	@ 0x82
 801bd48:	f002 f8c1 	bl	801dece <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	2201      	movs	r2, #1
 801bd50:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801bd52:	2387      	movs	r3, #135	@ 0x87
 801bd54:	009b      	lsls	r3, r3, #2
 801bd56:	0018      	movs	r0, r3
 801bd58:	f002 fa52 	bl	801e200 <USBD_static_malloc>
 801bd5c:	0001      	movs	r1, r0
 801bd5e:	687a      	ldr	r2, [r7, #4]
 801bd60:	23ae      	movs	r3, #174	@ 0xae
 801bd62:	009b      	lsls	r3, r3, #2
 801bd64:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801bd66:	687a      	ldr	r2, [r7, #4]
 801bd68:	23ae      	movs	r3, #174	@ 0xae
 801bd6a:	009b      	lsls	r3, r3, #2
 801bd6c:	58d3      	ldr	r3, [r2, r3]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d104      	bne.n	801bd7c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801bd72:	230f      	movs	r3, #15
 801bd74:	18fb      	adds	r3, r7, r3
 801bd76:	2201      	movs	r2, #1
 801bd78:	701a      	strb	r2, [r3, #0]
 801bd7a:	e02c      	b.n	801bdd6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bd7c:	687a      	ldr	r2, [r7, #4]
 801bd7e:	23ae      	movs	r3, #174	@ 0xae
 801bd80:	009b      	lsls	r3, r3, #2
 801bd82:	58d3      	ldr	r3, [r2, r3]
 801bd84:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801bd86:	687a      	ldr	r2, [r7, #4]
 801bd88:	23af      	movs	r3, #175	@ 0xaf
 801bd8a:	009b      	lsls	r3, r3, #2
 801bd8c:	58d3      	ldr	r3, [r2, r3]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801bd92:	68ba      	ldr	r2, [r7, #8]
 801bd94:	2385      	movs	r3, #133	@ 0x85
 801bd96:	009b      	lsls	r3, r3, #2
 801bd98:	2100      	movs	r1, #0
 801bd9a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801bd9c:	68ba      	ldr	r2, [r7, #8]
 801bd9e:	2386      	movs	r3, #134	@ 0x86
 801bda0:	009b      	lsls	r3, r3, #2
 801bda2:	2100      	movs	r1, #0
 801bda4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	7c1b      	ldrb	r3, [r3, #16]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d10a      	bne.n	801bdc4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801bdae:	68ba      	ldr	r2, [r7, #8]
 801bdb0:	2381      	movs	r3, #129	@ 0x81
 801bdb2:	009b      	lsls	r3, r3, #2
 801bdb4:	58d2      	ldr	r2, [r2, r3]
 801bdb6:	2380      	movs	r3, #128	@ 0x80
 801bdb8:	009b      	lsls	r3, r3, #2
 801bdba:	6878      	ldr	r0, [r7, #4]
 801bdbc:	2101      	movs	r1, #1
 801bdbe:	f002 f9d1 	bl	801e164 <USBD_LL_PrepareReceive>
 801bdc2:	e008      	b.n	801bdd6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801bdc4:	68ba      	ldr	r2, [r7, #8]
 801bdc6:	2381      	movs	r3, #129	@ 0x81
 801bdc8:	009b      	lsls	r3, r3, #2
 801bdca:	58d2      	ldr	r2, [r2, r3]
 801bdcc:	6878      	ldr	r0, [r7, #4]
 801bdce:	2340      	movs	r3, #64	@ 0x40
 801bdd0:	2101      	movs	r1, #1
 801bdd2:	f002 f9c7 	bl	801e164 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801bdd6:	230f      	movs	r3, #15
 801bdd8:	18fb      	adds	r3, r7, r3
 801bdda:	781b      	ldrb	r3, [r3, #0]
}
 801bddc:	0018      	movs	r0, r3
 801bdde:	46bd      	mov	sp, r7
 801bde0:	b004      	add	sp, #16
 801bde2:	bd80      	pop	{r7, pc}

0801bde4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b084      	sub	sp, #16
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
 801bdec:	000a      	movs	r2, r1
 801bdee:	1cfb      	adds	r3, r7, #3
 801bdf0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801bdf2:	230f      	movs	r3, #15
 801bdf4:	18fb      	adds	r3, r7, r3
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	2181      	movs	r1, #129	@ 0x81
 801bdfe:	0018      	movs	r0, r3
 801be00:	f002 f89c 	bl	801df3c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	2200      	movs	r2, #0
 801be08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	2101      	movs	r1, #1
 801be0e:	0018      	movs	r0, r3
 801be10:	f002 f894 	bl	801df3c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801be14:	687a      	ldr	r2, [r7, #4]
 801be16:	23b6      	movs	r3, #182	@ 0xb6
 801be18:	005b      	lsls	r3, r3, #1
 801be1a:	2100      	movs	r1, #0
 801be1c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2182      	movs	r1, #130	@ 0x82
 801be22:	0018      	movs	r0, r3
 801be24:	f002 f88a 	bl	801df3c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	2200      	movs	r2, #0
 801be2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801be2e:	687a      	ldr	r2, [r7, #4]
 801be30:	23ae      	movs	r3, #174	@ 0xae
 801be32:	009b      	lsls	r3, r3, #2
 801be34:	58d3      	ldr	r3, [r2, r3]
 801be36:	2b00      	cmp	r3, #0
 801be38:	d011      	beq.n	801be5e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801be3a:	687a      	ldr	r2, [r7, #4]
 801be3c:	23af      	movs	r3, #175	@ 0xaf
 801be3e:	009b      	lsls	r3, r3, #2
 801be40:	58d3      	ldr	r3, [r2, r3]
 801be42:	685b      	ldr	r3, [r3, #4]
 801be44:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801be46:	687a      	ldr	r2, [r7, #4]
 801be48:	23ae      	movs	r3, #174	@ 0xae
 801be4a:	009b      	lsls	r3, r3, #2
 801be4c:	58d3      	ldr	r3, [r2, r3]
 801be4e:	0018      	movs	r0, r3
 801be50:	f002 f9e2 	bl	801e218 <USBD_static_free>
    pdev->pClassData = NULL;
 801be54:	687a      	ldr	r2, [r7, #4]
 801be56:	23ae      	movs	r3, #174	@ 0xae
 801be58:	009b      	lsls	r3, r3, #2
 801be5a:	2100      	movs	r1, #0
 801be5c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801be5e:	230f      	movs	r3, #15
 801be60:	18fb      	adds	r3, r7, r3
 801be62:	781b      	ldrb	r3, [r3, #0]
}
 801be64:	0018      	movs	r0, r3
 801be66:	46bd      	mov	sp, r7
 801be68:	b004      	add	sp, #16
 801be6a:	bd80      	pop	{r7, pc}

0801be6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801be6c:	b580      	push	{r7, lr}
 801be6e:	b086      	sub	sp, #24
 801be70:	af00      	add	r7, sp, #0
 801be72:	6078      	str	r0, [r7, #4]
 801be74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801be76:	687a      	ldr	r2, [r7, #4]
 801be78:	23ae      	movs	r3, #174	@ 0xae
 801be7a:	009b      	lsls	r3, r3, #2
 801be7c:	58d3      	ldr	r3, [r2, r3]
 801be7e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801be80:	230f      	movs	r3, #15
 801be82:	18fb      	adds	r3, r7, r3
 801be84:	2200      	movs	r2, #0
 801be86:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801be88:	230c      	movs	r3, #12
 801be8a:	18fb      	adds	r3, r7, r3
 801be8c:	2200      	movs	r2, #0
 801be8e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801be90:	2317      	movs	r3, #23
 801be92:	18fb      	adds	r3, r7, r3
 801be94:	2200      	movs	r2, #0
 801be96:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801be98:	683b      	ldr	r3, [r7, #0]
 801be9a:	781b      	ldrb	r3, [r3, #0]
 801be9c:	001a      	movs	r2, r3
 801be9e:	2360      	movs	r3, #96	@ 0x60
 801bea0:	4013      	ands	r3, r2
 801bea2:	d03d      	beq.n	801bf20 <USBD_CDC_Setup+0xb4>
 801bea4:	2b20      	cmp	r3, #32
 801bea6:	d000      	beq.n	801beaa <USBD_CDC_Setup+0x3e>
 801bea8:	e094      	b.n	801bfd4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801beaa:	683b      	ldr	r3, [r7, #0]
 801beac:	88db      	ldrh	r3, [r3, #6]
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d02b      	beq.n	801bf0a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	781b      	ldrb	r3, [r3, #0]
 801beb6:	b25b      	sxtb	r3, r3
 801beb8:	2b00      	cmp	r3, #0
 801beba:	da12      	bge.n	801bee2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801bebc:	687a      	ldr	r2, [r7, #4]
 801bebe:	23af      	movs	r3, #175	@ 0xaf
 801bec0:	009b      	lsls	r3, r3, #2
 801bec2:	58d3      	ldr	r3, [r2, r3]
 801bec4:	689b      	ldr	r3, [r3, #8]
 801bec6:	683a      	ldr	r2, [r7, #0]
 801bec8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801beca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801becc:	683a      	ldr	r2, [r7, #0]
 801bece:	88d2      	ldrh	r2, [r2, #6]
 801bed0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801bed2:	6939      	ldr	r1, [r7, #16]
 801bed4:	683b      	ldr	r3, [r7, #0]
 801bed6:	88da      	ldrh	r2, [r3, #6]
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	0018      	movs	r0, r3
 801bedc:	f001 fbaf 	bl	801d63e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801bee0:	e083      	b.n	801bfea <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801bee2:	683b      	ldr	r3, [r7, #0]
 801bee4:	7859      	ldrb	r1, [r3, #1]
 801bee6:	693a      	ldr	r2, [r7, #16]
 801bee8:	2380      	movs	r3, #128	@ 0x80
 801beea:	009b      	lsls	r3, r3, #2
 801beec:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801beee:	683b      	ldr	r3, [r7, #0]
 801bef0:	88db      	ldrh	r3, [r3, #6]
 801bef2:	b2d9      	uxtb	r1, r3
 801bef4:	693b      	ldr	r3, [r7, #16]
 801bef6:	4a40      	ldr	r2, [pc, #256]	@ (801bff8 <USBD_CDC_Setup+0x18c>)
 801bef8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801befa:	6939      	ldr	r1, [r7, #16]
 801befc:	683b      	ldr	r3, [r7, #0]
 801befe:	88da      	ldrh	r2, [r3, #6]
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	0018      	movs	r0, r3
 801bf04:	f001 fbce 	bl	801d6a4 <USBD_CtlPrepareRx>
      break;
 801bf08:	e06f      	b.n	801bfea <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801bf0a:	687a      	ldr	r2, [r7, #4]
 801bf0c:	23af      	movs	r3, #175	@ 0xaf
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	58d3      	ldr	r3, [r2, r3]
 801bf12:	689b      	ldr	r3, [r3, #8]
 801bf14:	683a      	ldr	r2, [r7, #0]
 801bf16:	7850      	ldrb	r0, [r2, #1]
 801bf18:	6839      	ldr	r1, [r7, #0]
 801bf1a:	2200      	movs	r2, #0
 801bf1c:	4798      	blx	r3
      break;
 801bf1e:	e064      	b.n	801bfea <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bf20:	683b      	ldr	r3, [r7, #0]
 801bf22:	785b      	ldrb	r3, [r3, #1]
 801bf24:	2b0b      	cmp	r3, #11
 801bf26:	d037      	beq.n	801bf98 <USBD_CDC_Setup+0x12c>
 801bf28:	dc47      	bgt.n	801bfba <USBD_CDC_Setup+0x14e>
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d002      	beq.n	801bf34 <USBD_CDC_Setup+0xc8>
 801bf2e:	2b0a      	cmp	r3, #10
 801bf30:	d019      	beq.n	801bf66 <USBD_CDC_Setup+0xfa>
 801bf32:	e042      	b.n	801bfba <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bf34:	687a      	ldr	r2, [r7, #4]
 801bf36:	23a7      	movs	r3, #167	@ 0xa7
 801bf38:	009b      	lsls	r3, r3, #2
 801bf3a:	5cd3      	ldrb	r3, [r2, r3]
 801bf3c:	2b03      	cmp	r3, #3
 801bf3e:	d107      	bne.n	801bf50 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801bf40:	230c      	movs	r3, #12
 801bf42:	18f9      	adds	r1, r7, r3
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	2202      	movs	r2, #2
 801bf48:	0018      	movs	r0, r3
 801bf4a:	f001 fb78 	bl	801d63e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801bf4e:	e040      	b.n	801bfd2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801bf50:	683a      	ldr	r2, [r7, #0]
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	0011      	movs	r1, r2
 801bf56:	0018      	movs	r0, r3
 801bf58:	f001 faf3 	bl	801d542 <USBD_CtlError>
            ret = USBD_FAIL;
 801bf5c:	2317      	movs	r3, #23
 801bf5e:	18fb      	adds	r3, r7, r3
 801bf60:	2202      	movs	r2, #2
 801bf62:	701a      	strb	r2, [r3, #0]
          break;
 801bf64:	e035      	b.n	801bfd2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bf66:	687a      	ldr	r2, [r7, #4]
 801bf68:	23a7      	movs	r3, #167	@ 0xa7
 801bf6a:	009b      	lsls	r3, r3, #2
 801bf6c:	5cd3      	ldrb	r3, [r2, r3]
 801bf6e:	2b03      	cmp	r3, #3
 801bf70:	d107      	bne.n	801bf82 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801bf72:	230f      	movs	r3, #15
 801bf74:	18f9      	adds	r1, r7, r3
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	2201      	movs	r2, #1
 801bf7a:	0018      	movs	r0, r3
 801bf7c:	f001 fb5f 	bl	801d63e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801bf80:	e027      	b.n	801bfd2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801bf82:	683a      	ldr	r2, [r7, #0]
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	0011      	movs	r1, r2
 801bf88:	0018      	movs	r0, r3
 801bf8a:	f001 fada 	bl	801d542 <USBD_CtlError>
            ret = USBD_FAIL;
 801bf8e:	2317      	movs	r3, #23
 801bf90:	18fb      	adds	r3, r7, r3
 801bf92:	2202      	movs	r2, #2
 801bf94:	701a      	strb	r2, [r3, #0]
          break;
 801bf96:	e01c      	b.n	801bfd2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801bf98:	687a      	ldr	r2, [r7, #4]
 801bf9a:	23a7      	movs	r3, #167	@ 0xa7
 801bf9c:	009b      	lsls	r3, r3, #2
 801bf9e:	5cd3      	ldrb	r3, [r2, r3]
 801bfa0:	2b03      	cmp	r3, #3
 801bfa2:	d015      	beq.n	801bfd0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801bfa4:	683a      	ldr	r2, [r7, #0]
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	0011      	movs	r1, r2
 801bfaa:	0018      	movs	r0, r3
 801bfac:	f001 fac9 	bl	801d542 <USBD_CtlError>
            ret = USBD_FAIL;
 801bfb0:	2317      	movs	r3, #23
 801bfb2:	18fb      	adds	r3, r7, r3
 801bfb4:	2202      	movs	r2, #2
 801bfb6:	701a      	strb	r2, [r3, #0]
          }
          break;
 801bfb8:	e00a      	b.n	801bfd0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801bfba:	683a      	ldr	r2, [r7, #0]
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	0011      	movs	r1, r2
 801bfc0:	0018      	movs	r0, r3
 801bfc2:	f001 fabe 	bl	801d542 <USBD_CtlError>
          ret = USBD_FAIL;
 801bfc6:	2317      	movs	r3, #23
 801bfc8:	18fb      	adds	r3, r7, r3
 801bfca:	2202      	movs	r2, #2
 801bfcc:	701a      	strb	r2, [r3, #0]
          break;
 801bfce:	e000      	b.n	801bfd2 <USBD_CDC_Setup+0x166>
          break;
 801bfd0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bfd2:	e00a      	b.n	801bfea <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801bfd4:	683a      	ldr	r2, [r7, #0]
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	0011      	movs	r1, r2
 801bfda:	0018      	movs	r0, r3
 801bfdc:	f001 fab1 	bl	801d542 <USBD_CtlError>
      ret = USBD_FAIL;
 801bfe0:	2317      	movs	r3, #23
 801bfe2:	18fb      	adds	r3, r7, r3
 801bfe4:	2202      	movs	r2, #2
 801bfe6:	701a      	strb	r2, [r3, #0]
      break;
 801bfe8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801bfea:	2317      	movs	r3, #23
 801bfec:	18fb      	adds	r3, r7, r3
 801bfee:	781b      	ldrb	r3, [r3, #0]
}
 801bff0:	0018      	movs	r0, r3
 801bff2:	46bd      	mov	sp, r7
 801bff4:	b006      	add	sp, #24
 801bff6:	bd80      	pop	{r7, pc}
 801bff8:	00000201 	.word	0x00000201

0801bffc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b084      	sub	sp, #16
 801c000:	af00      	add	r7, sp, #0
 801c002:	6078      	str	r0, [r7, #4]
 801c004:	000a      	movs	r2, r1
 801c006:	1cfb      	adds	r3, r7, #3
 801c008:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801c00a:	687a      	ldr	r2, [r7, #4]
 801c00c:	23ae      	movs	r3, #174	@ 0xae
 801c00e:	009b      	lsls	r3, r3, #2
 801c010:	58d3      	ldr	r3, [r2, r3]
 801c012:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801c014:	687a      	ldr	r2, [r7, #4]
 801c016:	23b0      	movs	r3, #176	@ 0xb0
 801c018:	009b      	lsls	r3, r3, #2
 801c01a:	58d3      	ldr	r3, [r2, r3]
 801c01c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801c01e:	687a      	ldr	r2, [r7, #4]
 801c020:	23ae      	movs	r3, #174	@ 0xae
 801c022:	009b      	lsls	r3, r3, #2
 801c024:	58d3      	ldr	r3, [r2, r3]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d03e      	beq.n	801c0a8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801c02a:	1cfb      	adds	r3, r7, #3
 801c02c:	781a      	ldrb	r2, [r3, #0]
 801c02e:	6879      	ldr	r1, [r7, #4]
 801c030:	0013      	movs	r3, r2
 801c032:	009b      	lsls	r3, r3, #2
 801c034:	189b      	adds	r3, r3, r2
 801c036:	009b      	lsls	r3, r3, #2
 801c038:	18cb      	adds	r3, r1, r3
 801c03a:	331c      	adds	r3, #28
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d02b      	beq.n	801c09a <USBD_CDC_DataIn+0x9e>
 801c042:	1cfb      	adds	r3, r7, #3
 801c044:	781a      	ldrb	r2, [r3, #0]
 801c046:	6879      	ldr	r1, [r7, #4]
 801c048:	0013      	movs	r3, r2
 801c04a:	009b      	lsls	r3, r3, #2
 801c04c:	189b      	adds	r3, r3, r2
 801c04e:	009b      	lsls	r3, r3, #2
 801c050:	18cb      	adds	r3, r1, r3
 801c052:	331c      	adds	r3, #28
 801c054:	6818      	ldr	r0, [r3, #0]
 801c056:	1cfb      	adds	r3, r7, #3
 801c058:	781a      	ldrb	r2, [r3, #0]
 801c05a:	68b9      	ldr	r1, [r7, #8]
 801c05c:	0013      	movs	r3, r2
 801c05e:	009b      	lsls	r3, r3, #2
 801c060:	189b      	adds	r3, r3, r2
 801c062:	00db      	lsls	r3, r3, #3
 801c064:	18cb      	adds	r3, r1, r3
 801c066:	3338      	adds	r3, #56	@ 0x38
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	0019      	movs	r1, r3
 801c06c:	f7e4 f920 	bl	80002b0 <__aeabi_uidivmod>
 801c070:	1e0b      	subs	r3, r1, #0
 801c072:	d112      	bne.n	801c09a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801c074:	1cfb      	adds	r3, r7, #3
 801c076:	781a      	ldrb	r2, [r3, #0]
 801c078:	6879      	ldr	r1, [r7, #4]
 801c07a:	0013      	movs	r3, r2
 801c07c:	009b      	lsls	r3, r3, #2
 801c07e:	189b      	adds	r3, r3, r2
 801c080:	009b      	lsls	r3, r3, #2
 801c082:	18cb      	adds	r3, r1, r3
 801c084:	331c      	adds	r3, #28
 801c086:	2200      	movs	r2, #0
 801c088:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801c08a:	1cfb      	adds	r3, r7, #3
 801c08c:	7819      	ldrb	r1, [r3, #0]
 801c08e:	6878      	ldr	r0, [r7, #4]
 801c090:	2300      	movs	r3, #0
 801c092:	2200      	movs	r2, #0
 801c094:	f002 f82f 	bl	801e0f6 <USBD_LL_Transmit>
 801c098:	e004      	b.n	801c0a4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801c09a:	68fa      	ldr	r2, [r7, #12]
 801c09c:	2385      	movs	r3, #133	@ 0x85
 801c09e:	009b      	lsls	r3, r3, #2
 801c0a0:	2100      	movs	r1, #0
 801c0a2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	e000      	b.n	801c0aa <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801c0a8:	2302      	movs	r3, #2
  }
}
 801c0aa:	0018      	movs	r0, r3
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	b004      	add	sp, #16
 801c0b0:	bd80      	pop	{r7, pc}

0801c0b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c0b2:	b580      	push	{r7, lr}
 801c0b4:	b084      	sub	sp, #16
 801c0b6:	af00      	add	r7, sp, #0
 801c0b8:	6078      	str	r0, [r7, #4]
 801c0ba:	000a      	movs	r2, r1
 801c0bc:	1cfb      	adds	r3, r7, #3
 801c0be:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c0c0:	687a      	ldr	r2, [r7, #4]
 801c0c2:	23ae      	movs	r3, #174	@ 0xae
 801c0c4:	009b      	lsls	r3, r3, #2
 801c0c6:	58d3      	ldr	r3, [r2, r3]
 801c0c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801c0ca:	1cfb      	adds	r3, r7, #3
 801c0cc:	781a      	ldrb	r2, [r3, #0]
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	0011      	movs	r1, r2
 801c0d2:	0018      	movs	r0, r3
 801c0d4:	f002 f87d 	bl	801e1d2 <USBD_LL_GetRxDataSize>
 801c0d8:	0001      	movs	r1, r0
 801c0da:	68fa      	ldr	r2, [r7, #12]
 801c0dc:	2383      	movs	r3, #131	@ 0x83
 801c0de:	009b      	lsls	r3, r3, #2
 801c0e0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801c0e2:	687a      	ldr	r2, [r7, #4]
 801c0e4:	23ae      	movs	r3, #174	@ 0xae
 801c0e6:	009b      	lsls	r3, r3, #2
 801c0e8:	58d3      	ldr	r3, [r2, r3]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d011      	beq.n	801c112 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801c0ee:	687a      	ldr	r2, [r7, #4]
 801c0f0:	23af      	movs	r3, #175	@ 0xaf
 801c0f2:	009b      	lsls	r3, r3, #2
 801c0f4:	58d3      	ldr	r3, [r2, r3]
 801c0f6:	68da      	ldr	r2, [r3, #12]
 801c0f8:	68f9      	ldr	r1, [r7, #12]
 801c0fa:	2381      	movs	r3, #129	@ 0x81
 801c0fc:	009b      	lsls	r3, r3, #2
 801c0fe:	58c8      	ldr	r0, [r1, r3]
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	2183      	movs	r1, #131	@ 0x83
 801c104:	0089      	lsls	r1, r1, #2
 801c106:	468c      	mov	ip, r1
 801c108:	4463      	add	r3, ip
 801c10a:	0019      	movs	r1, r3
 801c10c:	4790      	blx	r2

    return USBD_OK;
 801c10e:	2300      	movs	r3, #0
 801c110:	e000      	b.n	801c114 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801c112:	2302      	movs	r3, #2
  }
}
 801c114:	0018      	movs	r0, r3
 801c116:	46bd      	mov	sp, r7
 801c118:	b004      	add	sp, #16
 801c11a:	bd80      	pop	{r7, pc}

0801c11c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801c11c:	b590      	push	{r4, r7, lr}
 801c11e:	b085      	sub	sp, #20
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c124:	687a      	ldr	r2, [r7, #4]
 801c126:	23ae      	movs	r3, #174	@ 0xae
 801c128:	009b      	lsls	r3, r3, #2
 801c12a:	58d3      	ldr	r3, [r2, r3]
 801c12c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801c12e:	687a      	ldr	r2, [r7, #4]
 801c130:	23af      	movs	r3, #175	@ 0xaf
 801c132:	009b      	lsls	r3, r3, #2
 801c134:	58d3      	ldr	r3, [r2, r3]
 801c136:	2b00      	cmp	r3, #0
 801c138:	d018      	beq.n	801c16c <USBD_CDC_EP0_RxReady+0x50>
 801c13a:	68fa      	ldr	r2, [r7, #12]
 801c13c:	2380      	movs	r3, #128	@ 0x80
 801c13e:	009b      	lsls	r3, r3, #2
 801c140:	5cd3      	ldrb	r3, [r2, r3]
 801c142:	2bff      	cmp	r3, #255	@ 0xff
 801c144:	d012      	beq.n	801c16c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c146:	687a      	ldr	r2, [r7, #4]
 801c148:	23af      	movs	r3, #175	@ 0xaf
 801c14a:	009b      	lsls	r3, r3, #2
 801c14c:	58d3      	ldr	r3, [r2, r3]
 801c14e:	689b      	ldr	r3, [r3, #8]
 801c150:	68f9      	ldr	r1, [r7, #12]
 801c152:	2280      	movs	r2, #128	@ 0x80
 801c154:	0092      	lsls	r2, r2, #2
 801c156:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801c158:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801c15a:	68fa      	ldr	r2, [r7, #12]
 801c15c:	4c06      	ldr	r4, [pc, #24]	@ (801c178 <USBD_CDC_EP0_RxReady+0x5c>)
 801c15e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c160:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801c162:	68fa      	ldr	r2, [r7, #12]
 801c164:	2380      	movs	r3, #128	@ 0x80
 801c166:	009b      	lsls	r3, r3, #2
 801c168:	21ff      	movs	r1, #255	@ 0xff
 801c16a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801c16c:	2300      	movs	r3, #0
}
 801c16e:	0018      	movs	r0, r3
 801c170:	46bd      	mov	sp, r7
 801c172:	b005      	add	sp, #20
 801c174:	bd90      	pop	{r4, r7, pc}
 801c176:	46c0      	nop			@ (mov r8, r8)
 801c178:	00000201 	.word	0x00000201

0801c17c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b082      	sub	sp, #8
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	2243      	movs	r2, #67	@ 0x43
 801c188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801c18a:	4b02      	ldr	r3, [pc, #8]	@ (801c194 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801c18c:	0018      	movs	r0, r3
 801c18e:	46bd      	mov	sp, r7
 801c190:	b002      	add	sp, #8
 801c192:	bd80      	pop	{r7, pc}
 801c194:	2000016c 	.word	0x2000016c

0801c198 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801c198:	b580      	push	{r7, lr}
 801c19a:	b082      	sub	sp, #8
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	2243      	movs	r2, #67	@ 0x43
 801c1a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801c1a6:	4b02      	ldr	r3, [pc, #8]	@ (801c1b0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801c1a8:	0018      	movs	r0, r3
 801c1aa:	46bd      	mov	sp, r7
 801c1ac:	b002      	add	sp, #8
 801c1ae:	bd80      	pop	{r7, pc}
 801c1b0:	20000128 	.word	0x20000128

0801c1b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b082      	sub	sp, #8
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	2243      	movs	r2, #67	@ 0x43
 801c1c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801c1c2:	4b02      	ldr	r3, [pc, #8]	@ (801c1cc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801c1c4:	0018      	movs	r0, r3
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	b002      	add	sp, #8
 801c1ca:	bd80      	pop	{r7, pc}
 801c1cc:	200001b0 	.word	0x200001b0

0801c1d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	b082      	sub	sp, #8
 801c1d4:	af00      	add	r7, sp, #0
 801c1d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	220a      	movs	r2, #10
 801c1dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801c1de:	4b02      	ldr	r3, [pc, #8]	@ (801c1e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801c1e0:	0018      	movs	r0, r3
 801c1e2:	46bd      	mov	sp, r7
 801c1e4:	b002      	add	sp, #8
 801c1e6:	bd80      	pop	{r7, pc}
 801c1e8:	200000e4 	.word	0x200000e4

0801c1ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b084      	sub	sp, #16
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	6078      	str	r0, [r7, #4]
 801c1f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801c1f6:	200f      	movs	r0, #15
 801c1f8:	183b      	adds	r3, r7, r0
 801c1fa:	2202      	movs	r2, #2
 801c1fc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801c1fe:	683b      	ldr	r3, [r7, #0]
 801c200:	2b00      	cmp	r3, #0
 801c202:	d007      	beq.n	801c214 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801c204:	687a      	ldr	r2, [r7, #4]
 801c206:	23af      	movs	r3, #175	@ 0xaf
 801c208:	009b      	lsls	r3, r3, #2
 801c20a:	6839      	ldr	r1, [r7, #0]
 801c20c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801c20e:	183b      	adds	r3, r7, r0
 801c210:	2200      	movs	r2, #0
 801c212:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801c214:	230f      	movs	r3, #15
 801c216:	18fb      	adds	r3, r7, r3
 801c218:	781b      	ldrb	r3, [r3, #0]
}
 801c21a:	0018      	movs	r0, r3
 801c21c:	46bd      	mov	sp, r7
 801c21e:	b004      	add	sp, #16
 801c220:	bd80      	pop	{r7, pc}

0801c222 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801c222:	b580      	push	{r7, lr}
 801c224:	b086      	sub	sp, #24
 801c226:	af00      	add	r7, sp, #0
 801c228:	60f8      	str	r0, [r7, #12]
 801c22a:	60b9      	str	r1, [r7, #8]
 801c22c:	1dbb      	adds	r3, r7, #6
 801c22e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c230:	68fa      	ldr	r2, [r7, #12]
 801c232:	23ae      	movs	r3, #174	@ 0xae
 801c234:	009b      	lsls	r3, r3, #2
 801c236:	58d3      	ldr	r3, [r2, r3]
 801c238:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801c23a:	697a      	ldr	r2, [r7, #20]
 801c23c:	2382      	movs	r3, #130	@ 0x82
 801c23e:	009b      	lsls	r3, r3, #2
 801c240:	68b9      	ldr	r1, [r7, #8]
 801c242:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801c244:	1dbb      	adds	r3, r7, #6
 801c246:	8819      	ldrh	r1, [r3, #0]
 801c248:	697a      	ldr	r2, [r7, #20]
 801c24a:	2384      	movs	r3, #132	@ 0x84
 801c24c:	009b      	lsls	r3, r3, #2
 801c24e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801c250:	2300      	movs	r3, #0
}
 801c252:	0018      	movs	r0, r3
 801c254:	46bd      	mov	sp, r7
 801c256:	b006      	add	sp, #24
 801c258:	bd80      	pop	{r7, pc}

0801c25a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801c25a:	b580      	push	{r7, lr}
 801c25c:	b084      	sub	sp, #16
 801c25e:	af00      	add	r7, sp, #0
 801c260:	6078      	str	r0, [r7, #4]
 801c262:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c264:	687a      	ldr	r2, [r7, #4]
 801c266:	23ae      	movs	r3, #174	@ 0xae
 801c268:	009b      	lsls	r3, r3, #2
 801c26a:	58d3      	ldr	r3, [r2, r3]
 801c26c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801c26e:	68fa      	ldr	r2, [r7, #12]
 801c270:	2381      	movs	r3, #129	@ 0x81
 801c272:	009b      	lsls	r3, r3, #2
 801c274:	6839      	ldr	r1, [r7, #0]
 801c276:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801c278:	2300      	movs	r3, #0
}
 801c27a:	0018      	movs	r0, r3
 801c27c:	46bd      	mov	sp, r7
 801c27e:	b004      	add	sp, #16
 801c280:	bd80      	pop	{r7, pc}

0801c282 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801c282:	b580      	push	{r7, lr}
 801c284:	b084      	sub	sp, #16
 801c286:	af00      	add	r7, sp, #0
 801c288:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c28a:	687a      	ldr	r2, [r7, #4]
 801c28c:	23ae      	movs	r3, #174	@ 0xae
 801c28e:	009b      	lsls	r3, r3, #2
 801c290:	58d3      	ldr	r3, [r2, r3]
 801c292:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801c294:	687a      	ldr	r2, [r7, #4]
 801c296:	23ae      	movs	r3, #174	@ 0xae
 801c298:	009b      	lsls	r3, r3, #2
 801c29a:	58d3      	ldr	r3, [r2, r3]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d022      	beq.n	801c2e6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801c2a0:	68fa      	ldr	r2, [r7, #12]
 801c2a2:	2385      	movs	r3, #133	@ 0x85
 801c2a4:	009b      	lsls	r3, r3, #2
 801c2a6:	58d3      	ldr	r3, [r2, r3]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d11a      	bne.n	801c2e2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801c2ac:	68fa      	ldr	r2, [r7, #12]
 801c2ae:	2385      	movs	r3, #133	@ 0x85
 801c2b0:	009b      	lsls	r3, r3, #2
 801c2b2:	2101      	movs	r1, #1
 801c2b4:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801c2b6:	68fa      	ldr	r2, [r7, #12]
 801c2b8:	2384      	movs	r3, #132	@ 0x84
 801c2ba:	009b      	lsls	r3, r3, #2
 801c2bc:	58d2      	ldr	r2, [r2, r3]
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c2c2:	68fa      	ldr	r2, [r7, #12]
 801c2c4:	2382      	movs	r3, #130	@ 0x82
 801c2c6:	009b      	lsls	r3, r3, #2
 801c2c8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801c2ca:	68fa      	ldr	r2, [r7, #12]
 801c2cc:	2384      	movs	r3, #132	@ 0x84
 801c2ce:	009b      	lsls	r3, r3, #2
 801c2d0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c2d2:	b29b      	uxth	r3, r3
 801c2d4:	6878      	ldr	r0, [r7, #4]
 801c2d6:	000a      	movs	r2, r1
 801c2d8:	2181      	movs	r1, #129	@ 0x81
 801c2da:	f001 ff0c 	bl	801e0f6 <USBD_LL_Transmit>

      return USBD_OK;
 801c2de:	2300      	movs	r3, #0
 801c2e0:	e002      	b.n	801c2e8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801c2e2:	2301      	movs	r3, #1
 801c2e4:	e000      	b.n	801c2e8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801c2e6:	2302      	movs	r3, #2
  }
}
 801c2e8:	0018      	movs	r0, r3
 801c2ea:	46bd      	mov	sp, r7
 801c2ec:	b004      	add	sp, #16
 801c2ee:	bd80      	pop	{r7, pc}

0801c2f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b084      	sub	sp, #16
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c2f8:	687a      	ldr	r2, [r7, #4]
 801c2fa:	23ae      	movs	r3, #174	@ 0xae
 801c2fc:	009b      	lsls	r3, r3, #2
 801c2fe:	58d3      	ldr	r3, [r2, r3]
 801c300:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801c302:	687a      	ldr	r2, [r7, #4]
 801c304:	23ae      	movs	r3, #174	@ 0xae
 801c306:	009b      	lsls	r3, r3, #2
 801c308:	58d3      	ldr	r3, [r2, r3]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d019      	beq.n	801c342 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	7c1b      	ldrb	r3, [r3, #16]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d10a      	bne.n	801c32c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c316:	68fa      	ldr	r2, [r7, #12]
 801c318:	2381      	movs	r3, #129	@ 0x81
 801c31a:	009b      	lsls	r3, r3, #2
 801c31c:	58d2      	ldr	r2, [r2, r3]
 801c31e:	2380      	movs	r3, #128	@ 0x80
 801c320:	009b      	lsls	r3, r3, #2
 801c322:	6878      	ldr	r0, [r7, #4]
 801c324:	2101      	movs	r1, #1
 801c326:	f001 ff1d 	bl	801e164 <USBD_LL_PrepareReceive>
 801c32a:	e008      	b.n	801c33e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c32c:	68fa      	ldr	r2, [r7, #12]
 801c32e:	2381      	movs	r3, #129	@ 0x81
 801c330:	009b      	lsls	r3, r3, #2
 801c332:	58d2      	ldr	r2, [r2, r3]
 801c334:	6878      	ldr	r0, [r7, #4]
 801c336:	2340      	movs	r3, #64	@ 0x40
 801c338:	2101      	movs	r1, #1
 801c33a:	f001 ff13 	bl	801e164 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801c33e:	2300      	movs	r3, #0
 801c340:	e000      	b.n	801c344 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801c342:	2302      	movs	r3, #2
  }
}
 801c344:	0018      	movs	r0, r3
 801c346:	46bd      	mov	sp, r7
 801c348:	b004      	add	sp, #16
 801c34a:	bd80      	pop	{r7, pc}

0801c34c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b084      	sub	sp, #16
 801c350:	af00      	add	r7, sp, #0
 801c352:	60f8      	str	r0, [r7, #12]
 801c354:	60b9      	str	r1, [r7, #8]
 801c356:	1dfb      	adds	r3, r7, #7
 801c358:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d101      	bne.n	801c364 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801c360:	2302      	movs	r3, #2
 801c362:	e020      	b.n	801c3a6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801c364:	68fa      	ldr	r2, [r7, #12]
 801c366:	23ad      	movs	r3, #173	@ 0xad
 801c368:	009b      	lsls	r3, r3, #2
 801c36a:	58d3      	ldr	r3, [r2, r3]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d004      	beq.n	801c37a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801c370:	68fa      	ldr	r2, [r7, #12]
 801c372:	23ad      	movs	r3, #173	@ 0xad
 801c374:	009b      	lsls	r3, r3, #2
 801c376:	2100      	movs	r1, #0
 801c378:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801c37a:	68bb      	ldr	r3, [r7, #8]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d004      	beq.n	801c38a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801c380:	68fa      	ldr	r2, [r7, #12]
 801c382:	23ac      	movs	r3, #172	@ 0xac
 801c384:	009b      	lsls	r3, r3, #2
 801c386:	68b9      	ldr	r1, [r7, #8]
 801c388:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c38a:	68fa      	ldr	r2, [r7, #12]
 801c38c:	23a7      	movs	r3, #167	@ 0xa7
 801c38e:	009b      	lsls	r3, r3, #2
 801c390:	2101      	movs	r1, #1
 801c392:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	1dfa      	adds	r2, r7, #7
 801c398:	7812      	ldrb	r2, [r2, #0]
 801c39a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	0018      	movs	r0, r3
 801c3a0:	f001 fd0c 	bl	801ddbc <USBD_LL_Init>

  return USBD_OK;
 801c3a4:	2300      	movs	r3, #0
}
 801c3a6:	0018      	movs	r0, r3
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	b004      	add	sp, #16
 801c3ac:	bd80      	pop	{r7, pc}

0801c3ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801c3ae:	b580      	push	{r7, lr}
 801c3b0:	b084      	sub	sp, #16
 801c3b2:	af00      	add	r7, sp, #0
 801c3b4:	6078      	str	r0, [r7, #4]
 801c3b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801c3b8:	200f      	movs	r0, #15
 801c3ba:	183b      	adds	r3, r7, r0
 801c3bc:	2200      	movs	r2, #0
 801c3be:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801c3c0:	683b      	ldr	r3, [r7, #0]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d008      	beq.n	801c3d8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801c3c6:	687a      	ldr	r2, [r7, #4]
 801c3c8:	23ad      	movs	r3, #173	@ 0xad
 801c3ca:	009b      	lsls	r3, r3, #2
 801c3cc:	6839      	ldr	r1, [r7, #0]
 801c3ce:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801c3d0:	183b      	adds	r3, r7, r0
 801c3d2:	2200      	movs	r2, #0
 801c3d4:	701a      	strb	r2, [r3, #0]
 801c3d6:	e003      	b.n	801c3e0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801c3d8:	230f      	movs	r3, #15
 801c3da:	18fb      	adds	r3, r7, r3
 801c3dc:	2202      	movs	r2, #2
 801c3de:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801c3e0:	230f      	movs	r3, #15
 801c3e2:	18fb      	adds	r3, r7, r3
 801c3e4:	781b      	ldrb	r3, [r3, #0]
}
 801c3e6:	0018      	movs	r0, r3
 801c3e8:	46bd      	mov	sp, r7
 801c3ea:	b004      	add	sp, #16
 801c3ec:	bd80      	pop	{r7, pc}

0801c3ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801c3ee:	b580      	push	{r7, lr}
 801c3f0:	b082      	sub	sp, #8
 801c3f2:	af00      	add	r7, sp, #0
 801c3f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	0018      	movs	r0, r3
 801c3fa:	f001 fd43 	bl	801de84 <USBD_LL_Start>

  return USBD_OK;
 801c3fe:	2300      	movs	r3, #0
}
 801c400:	0018      	movs	r0, r3
 801c402:	46bd      	mov	sp, r7
 801c404:	b002      	add	sp, #8
 801c406:	bd80      	pop	{r7, pc}

0801c408 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b082      	sub	sp, #8
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c410:	2300      	movs	r3, #0
}
 801c412:	0018      	movs	r0, r3
 801c414:	46bd      	mov	sp, r7
 801c416:	b002      	add	sp, #8
 801c418:	bd80      	pop	{r7, pc}

0801c41a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c41a:	b590      	push	{r4, r7, lr}
 801c41c:	b085      	sub	sp, #20
 801c41e:	af00      	add	r7, sp, #0
 801c420:	6078      	str	r0, [r7, #4]
 801c422:	000a      	movs	r2, r1
 801c424:	1cfb      	adds	r3, r7, #3
 801c426:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801c428:	240f      	movs	r4, #15
 801c42a:	193b      	adds	r3, r7, r4
 801c42c:	2202      	movs	r2, #2
 801c42e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801c430:	687a      	ldr	r2, [r7, #4]
 801c432:	23ad      	movs	r3, #173	@ 0xad
 801c434:	009b      	lsls	r3, r3, #2
 801c436:	58d3      	ldr	r3, [r2, r3]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d00e      	beq.n	801c45a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801c43c:	687a      	ldr	r2, [r7, #4]
 801c43e:	23ad      	movs	r3, #173	@ 0xad
 801c440:	009b      	lsls	r3, r3, #2
 801c442:	58d3      	ldr	r3, [r2, r3]
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	1cfa      	adds	r2, r7, #3
 801c448:	7811      	ldrb	r1, [r2, #0]
 801c44a:	687a      	ldr	r2, [r7, #4]
 801c44c:	0010      	movs	r0, r2
 801c44e:	4798      	blx	r3
 801c450:	1e03      	subs	r3, r0, #0
 801c452:	d102      	bne.n	801c45a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801c454:	193b      	adds	r3, r7, r4
 801c456:	2200      	movs	r2, #0
 801c458:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801c45a:	230f      	movs	r3, #15
 801c45c:	18fb      	adds	r3, r7, r3
 801c45e:	781b      	ldrb	r3, [r3, #0]
}
 801c460:	0018      	movs	r0, r3
 801c462:	46bd      	mov	sp, r7
 801c464:	b005      	add	sp, #20
 801c466:	bd90      	pop	{r4, r7, pc}

0801c468 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b082      	sub	sp, #8
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
 801c470:	000a      	movs	r2, r1
 801c472:	1cfb      	adds	r3, r7, #3
 801c474:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801c476:	687a      	ldr	r2, [r7, #4]
 801c478:	23ad      	movs	r3, #173	@ 0xad
 801c47a:	009b      	lsls	r3, r3, #2
 801c47c:	58d3      	ldr	r3, [r2, r3]
 801c47e:	685b      	ldr	r3, [r3, #4]
 801c480:	1cfa      	adds	r2, r7, #3
 801c482:	7811      	ldrb	r1, [r2, #0]
 801c484:	687a      	ldr	r2, [r7, #4]
 801c486:	0010      	movs	r0, r2
 801c488:	4798      	blx	r3

  return USBD_OK;
 801c48a:	2300      	movs	r3, #0
}
 801c48c:	0018      	movs	r0, r3
 801c48e:	46bd      	mov	sp, r7
 801c490:	b002      	add	sp, #8
 801c492:	bd80      	pop	{r7, pc}

0801c494 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b082      	sub	sp, #8
 801c498:	af00      	add	r7, sp, #0
 801c49a:	6078      	str	r0, [r7, #4]
 801c49c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	22aa      	movs	r2, #170	@ 0xaa
 801c4a2:	0092      	lsls	r2, r2, #2
 801c4a4:	4694      	mov	ip, r2
 801c4a6:	4463      	add	r3, ip
 801c4a8:	683a      	ldr	r2, [r7, #0]
 801c4aa:	0011      	movs	r1, r2
 801c4ac:	0018      	movs	r0, r3
 801c4ae:	f001 f810 	bl	801d4d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801c4b2:	687a      	ldr	r2, [r7, #4]
 801c4b4:	23a5      	movs	r3, #165	@ 0xa5
 801c4b6:	009b      	lsls	r3, r3, #2
 801c4b8:	2101      	movs	r1, #1
 801c4ba:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	4a23      	ldr	r2, [pc, #140]	@ (801c54c <USBD_LL_SetupStage+0xb8>)
 801c4c0:	5a9b      	ldrh	r3, [r3, r2]
 801c4c2:	0019      	movs	r1, r3
 801c4c4:	687a      	ldr	r2, [r7, #4]
 801c4c6:	23a6      	movs	r3, #166	@ 0xa6
 801c4c8:	009b      	lsls	r3, r3, #2
 801c4ca:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801c4cc:	687a      	ldr	r2, [r7, #4]
 801c4ce:	23aa      	movs	r3, #170	@ 0xaa
 801c4d0:	009b      	lsls	r3, r3, #2
 801c4d2:	5cd3      	ldrb	r3, [r2, r3]
 801c4d4:	001a      	movs	r2, r3
 801c4d6:	231f      	movs	r3, #31
 801c4d8:	4013      	ands	r3, r2
 801c4da:	2b02      	cmp	r3, #2
 801c4dc:	d019      	beq.n	801c512 <USBD_LL_SetupStage+0x7e>
 801c4de:	d822      	bhi.n	801c526 <USBD_LL_SetupStage+0x92>
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d002      	beq.n	801c4ea <USBD_LL_SetupStage+0x56>
 801c4e4:	2b01      	cmp	r3, #1
 801c4e6:	d00a      	beq.n	801c4fe <USBD_LL_SetupStage+0x6a>
 801c4e8:	e01d      	b.n	801c526 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	22aa      	movs	r2, #170	@ 0xaa
 801c4ee:	0092      	lsls	r2, r2, #2
 801c4f0:	189a      	adds	r2, r3, r2
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	0011      	movs	r1, r2
 801c4f6:	0018      	movs	r0, r3
 801c4f8:	f000 fa10 	bl	801c91c <USBD_StdDevReq>
      break;
 801c4fc:	e020      	b.n	801c540 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	22aa      	movs	r2, #170	@ 0xaa
 801c502:	0092      	lsls	r2, r2, #2
 801c504:	189a      	adds	r2, r3, r2
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	0011      	movs	r1, r2
 801c50a:	0018      	movs	r0, r3
 801c50c:	f000 fa78 	bl	801ca00 <USBD_StdItfReq>
      break;
 801c510:	e016      	b.n	801c540 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	22aa      	movs	r2, #170	@ 0xaa
 801c516:	0092      	lsls	r2, r2, #2
 801c518:	189a      	adds	r2, r3, r2
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	0011      	movs	r1, r2
 801c51e:	0018      	movs	r0, r3
 801c520:	f000 fac5 	bl	801caae <USBD_StdEPReq>
      break;
 801c524:	e00c      	b.n	801c540 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801c526:	687a      	ldr	r2, [r7, #4]
 801c528:	23aa      	movs	r3, #170	@ 0xaa
 801c52a:	009b      	lsls	r3, r3, #2
 801c52c:	5cd3      	ldrb	r3, [r2, r3]
 801c52e:	227f      	movs	r2, #127	@ 0x7f
 801c530:	4393      	bics	r3, r2
 801c532:	b2da      	uxtb	r2, r3
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	0011      	movs	r1, r2
 801c538:	0018      	movs	r0, r3
 801c53a:	f001 fd2a 	bl	801df92 <USBD_LL_StallEP>
      break;
 801c53e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c540:	2300      	movs	r3, #0
}
 801c542:	0018      	movs	r0, r3
 801c544:	46bd      	mov	sp, r7
 801c546:	b002      	add	sp, #8
 801c548:	bd80      	pop	{r7, pc}
 801c54a:	46c0      	nop			@ (mov r8, r8)
 801c54c:	000002ae 	.word	0x000002ae

0801c550 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b086      	sub	sp, #24
 801c554:	af00      	add	r7, sp, #0
 801c556:	60f8      	str	r0, [r7, #12]
 801c558:	607a      	str	r2, [r7, #4]
 801c55a:	200b      	movs	r0, #11
 801c55c:	183b      	adds	r3, r7, r0
 801c55e:	1c0a      	adds	r2, r1, #0
 801c560:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c562:	183b      	adds	r3, r7, r0
 801c564:	781b      	ldrb	r3, [r3, #0]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d154      	bne.n	801c614 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	3355      	adds	r3, #85	@ 0x55
 801c56e:	33ff      	adds	r3, #255	@ 0xff
 801c570:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801c572:	68fa      	ldr	r2, [r7, #12]
 801c574:	23a5      	movs	r3, #165	@ 0xa5
 801c576:	009b      	lsls	r3, r3, #2
 801c578:	58d3      	ldr	r3, [r2, r3]
 801c57a:	2b03      	cmp	r3, #3
 801c57c:	d139      	bne.n	801c5f2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801c57e:	697b      	ldr	r3, [r7, #20]
 801c580:	68da      	ldr	r2, [r3, #12]
 801c582:	697b      	ldr	r3, [r7, #20]
 801c584:	691b      	ldr	r3, [r3, #16]
 801c586:	429a      	cmp	r2, r3
 801c588:	d919      	bls.n	801c5be <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801c58a:	697b      	ldr	r3, [r7, #20]
 801c58c:	68da      	ldr	r2, [r3, #12]
 801c58e:	697b      	ldr	r3, [r7, #20]
 801c590:	691b      	ldr	r3, [r3, #16]
 801c592:	1ad2      	subs	r2, r2, r3
 801c594:	697b      	ldr	r3, [r7, #20]
 801c596:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c598:	697b      	ldr	r3, [r7, #20]
 801c59a:	68da      	ldr	r2, [r3, #12]
 801c59c:	697b      	ldr	r3, [r7, #20]
 801c59e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c5a0:	429a      	cmp	r2, r3
 801c5a2:	d203      	bcs.n	801c5ac <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c5a4:	697b      	ldr	r3, [r7, #20]
 801c5a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801c5a8:	b29b      	uxth	r3, r3
 801c5aa:	e002      	b.n	801c5b2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c5ac:	697b      	ldr	r3, [r7, #20]
 801c5ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	6879      	ldr	r1, [r7, #4]
 801c5b4:	68f8      	ldr	r0, [r7, #12]
 801c5b6:	001a      	movs	r2, r3
 801c5b8:	f001 f898 	bl	801d6ec <USBD_CtlContinueRx>
 801c5bc:	e045      	b.n	801c64a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c5be:	68fa      	ldr	r2, [r7, #12]
 801c5c0:	23ad      	movs	r3, #173	@ 0xad
 801c5c2:	009b      	lsls	r3, r3, #2
 801c5c4:	58d3      	ldr	r3, [r2, r3]
 801c5c6:	691b      	ldr	r3, [r3, #16]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d00d      	beq.n	801c5e8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c5cc:	68fa      	ldr	r2, [r7, #12]
 801c5ce:	23a7      	movs	r3, #167	@ 0xa7
 801c5d0:	009b      	lsls	r3, r3, #2
 801c5d2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c5d4:	2b03      	cmp	r3, #3
 801c5d6:	d107      	bne.n	801c5e8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801c5d8:	68fa      	ldr	r2, [r7, #12]
 801c5da:	23ad      	movs	r3, #173	@ 0xad
 801c5dc:	009b      	lsls	r3, r3, #2
 801c5de:	58d3      	ldr	r3, [r2, r3]
 801c5e0:	691b      	ldr	r3, [r3, #16]
 801c5e2:	68fa      	ldr	r2, [r7, #12]
 801c5e4:	0010      	movs	r0, r2
 801c5e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	0018      	movs	r0, r3
 801c5ec:	f001 f891 	bl	801d712 <USBD_CtlSendStatus>
 801c5f0:	e02b      	b.n	801c64a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801c5f2:	68fa      	ldr	r2, [r7, #12]
 801c5f4:	23a5      	movs	r3, #165	@ 0xa5
 801c5f6:	009b      	lsls	r3, r3, #2
 801c5f8:	58d3      	ldr	r3, [r2, r3]
 801c5fa:	2b05      	cmp	r3, #5
 801c5fc:	d125      	bne.n	801c64a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801c5fe:	68fa      	ldr	r2, [r7, #12]
 801c600:	23a5      	movs	r3, #165	@ 0xa5
 801c602:	009b      	lsls	r3, r3, #2
 801c604:	2100      	movs	r1, #0
 801c606:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	2100      	movs	r1, #0
 801c60c:	0018      	movs	r0, r3
 801c60e:	f001 fcc0 	bl	801df92 <USBD_LL_StallEP>
 801c612:	e01a      	b.n	801c64a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801c614:	68fa      	ldr	r2, [r7, #12]
 801c616:	23ad      	movs	r3, #173	@ 0xad
 801c618:	009b      	lsls	r3, r3, #2
 801c61a:	58d3      	ldr	r3, [r2, r3]
 801c61c:	699b      	ldr	r3, [r3, #24]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d011      	beq.n	801c646 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c622:	68fa      	ldr	r2, [r7, #12]
 801c624:	23a7      	movs	r3, #167	@ 0xa7
 801c626:	009b      	lsls	r3, r3, #2
 801c628:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801c62a:	2b03      	cmp	r3, #3
 801c62c:	d10b      	bne.n	801c646 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801c62e:	68fa      	ldr	r2, [r7, #12]
 801c630:	23ad      	movs	r3, #173	@ 0xad
 801c632:	009b      	lsls	r3, r3, #2
 801c634:	58d3      	ldr	r3, [r2, r3]
 801c636:	699b      	ldr	r3, [r3, #24]
 801c638:	220b      	movs	r2, #11
 801c63a:	18ba      	adds	r2, r7, r2
 801c63c:	7811      	ldrb	r1, [r2, #0]
 801c63e:	68fa      	ldr	r2, [r7, #12]
 801c640:	0010      	movs	r0, r2
 801c642:	4798      	blx	r3
 801c644:	e001      	b.n	801c64a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c646:	2302      	movs	r3, #2
 801c648:	e000      	b.n	801c64c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801c64a:	2300      	movs	r3, #0
}
 801c64c:	0018      	movs	r0, r3
 801c64e:	46bd      	mov	sp, r7
 801c650:	b006      	add	sp, #24
 801c652:	bd80      	pop	{r7, pc}

0801c654 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b086      	sub	sp, #24
 801c658:	af00      	add	r7, sp, #0
 801c65a:	60f8      	str	r0, [r7, #12]
 801c65c:	607a      	str	r2, [r7, #4]
 801c65e:	200b      	movs	r0, #11
 801c660:	183b      	adds	r3, r7, r0
 801c662:	1c0a      	adds	r2, r1, #0
 801c664:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c666:	183b      	adds	r3, r7, r0
 801c668:	781b      	ldrb	r3, [r3, #0]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d000      	beq.n	801c670 <USBD_LL_DataInStage+0x1c>
 801c66e:	e08e      	b.n	801c78e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	3314      	adds	r3, #20
 801c674:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c676:	68fa      	ldr	r2, [r7, #12]
 801c678:	23a5      	movs	r3, #165	@ 0xa5
 801c67a:	009b      	lsls	r3, r3, #2
 801c67c:	58d3      	ldr	r3, [r2, r3]
 801c67e:	2b02      	cmp	r3, #2
 801c680:	d164      	bne.n	801c74c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801c682:	697b      	ldr	r3, [r7, #20]
 801c684:	68da      	ldr	r2, [r3, #12]
 801c686:	697b      	ldr	r3, [r7, #20]
 801c688:	691b      	ldr	r3, [r3, #16]
 801c68a:	429a      	cmp	r2, r3
 801c68c:	d915      	bls.n	801c6ba <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801c68e:	697b      	ldr	r3, [r7, #20]
 801c690:	68da      	ldr	r2, [r3, #12]
 801c692:	697b      	ldr	r3, [r7, #20]
 801c694:	691b      	ldr	r3, [r3, #16]
 801c696:	1ad2      	subs	r2, r2, r3
 801c698:	697b      	ldr	r3, [r7, #20]
 801c69a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801c69c:	697b      	ldr	r3, [r7, #20]
 801c69e:	68db      	ldr	r3, [r3, #12]
 801c6a0:	b29a      	uxth	r2, r3
 801c6a2:	6879      	ldr	r1, [r7, #4]
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	0018      	movs	r0, r3
 801c6a8:	f000 ffe9 	bl	801d67e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c6ac:	68f8      	ldr	r0, [r7, #12]
 801c6ae:	2300      	movs	r3, #0
 801c6b0:	2200      	movs	r2, #0
 801c6b2:	2100      	movs	r1, #0
 801c6b4:	f001 fd56 	bl	801e164 <USBD_LL_PrepareReceive>
 801c6b8:	e059      	b.n	801c76e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c6ba:	697b      	ldr	r3, [r7, #20]
 801c6bc:	689a      	ldr	r2, [r3, #8]
 801c6be:	697b      	ldr	r3, [r7, #20]
 801c6c0:	691b      	ldr	r3, [r3, #16]
 801c6c2:	0019      	movs	r1, r3
 801c6c4:	0010      	movs	r0, r2
 801c6c6:	f7e3 fdf3 	bl	80002b0 <__aeabi_uidivmod>
 801c6ca:	1e0b      	subs	r3, r1, #0
 801c6cc:	d11f      	bne.n	801c70e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801c6ce:	697b      	ldr	r3, [r7, #20]
 801c6d0:	689a      	ldr	r2, [r3, #8]
 801c6d2:	697b      	ldr	r3, [r7, #20]
 801c6d4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c6d6:	429a      	cmp	r2, r3
 801c6d8:	d319      	bcc.n	801c70e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801c6da:	697b      	ldr	r3, [r7, #20]
 801c6dc:	689a      	ldr	r2, [r3, #8]
 801c6de:	68f9      	ldr	r1, [r7, #12]
 801c6e0:	23a6      	movs	r3, #166	@ 0xa6
 801c6e2:	009b      	lsls	r3, r3, #2
 801c6e4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801c6e6:	429a      	cmp	r2, r3
 801c6e8:	d211      	bcs.n	801c70e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	2100      	movs	r1, #0
 801c6f0:	0018      	movs	r0, r3
 801c6f2:	f000 ffc4 	bl	801d67e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c6f6:	68fa      	ldr	r2, [r7, #12]
 801c6f8:	23a6      	movs	r3, #166	@ 0xa6
 801c6fa:	009b      	lsls	r3, r3, #2
 801c6fc:	2100      	movs	r1, #0
 801c6fe:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c700:	68f8      	ldr	r0, [r7, #12]
 801c702:	2300      	movs	r3, #0
 801c704:	2200      	movs	r2, #0
 801c706:	2100      	movs	r1, #0
 801c708:	f001 fd2c 	bl	801e164 <USBD_LL_PrepareReceive>
 801c70c:	e02f      	b.n	801c76e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c70e:	68fa      	ldr	r2, [r7, #12]
 801c710:	23ad      	movs	r3, #173	@ 0xad
 801c712:	009b      	lsls	r3, r3, #2
 801c714:	58d3      	ldr	r3, [r2, r3]
 801c716:	68db      	ldr	r3, [r3, #12]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d00d      	beq.n	801c738 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c71c:	68fa      	ldr	r2, [r7, #12]
 801c71e:	23a7      	movs	r3, #167	@ 0xa7
 801c720:	009b      	lsls	r3, r3, #2
 801c722:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c724:	2b03      	cmp	r3, #3
 801c726:	d107      	bne.n	801c738 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c728:	68fa      	ldr	r2, [r7, #12]
 801c72a:	23ad      	movs	r3, #173	@ 0xad
 801c72c:	009b      	lsls	r3, r3, #2
 801c72e:	58d3      	ldr	r3, [r2, r3]
 801c730:	68db      	ldr	r3, [r3, #12]
 801c732:	68fa      	ldr	r2, [r7, #12]
 801c734:	0010      	movs	r0, r2
 801c736:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	2180      	movs	r1, #128	@ 0x80
 801c73c:	0018      	movs	r0, r3
 801c73e:	f001 fc28 	bl	801df92 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	0018      	movs	r0, r3
 801c746:	f000 fff8 	bl	801d73a <USBD_CtlReceiveStatus>
 801c74a:	e010      	b.n	801c76e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c74c:	68fa      	ldr	r2, [r7, #12]
 801c74e:	23a5      	movs	r3, #165	@ 0xa5
 801c750:	009b      	lsls	r3, r3, #2
 801c752:	58d3      	ldr	r3, [r2, r3]
 801c754:	2b04      	cmp	r3, #4
 801c756:	d005      	beq.n	801c764 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c758:	68fa      	ldr	r2, [r7, #12]
 801c75a:	23a5      	movs	r3, #165	@ 0xa5
 801c75c:	009b      	lsls	r3, r3, #2
 801c75e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c760:	2b00      	cmp	r3, #0
 801c762:	d104      	bne.n	801c76e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	2180      	movs	r1, #128	@ 0x80
 801c768:	0018      	movs	r0, r3
 801c76a:	f001 fc12 	bl	801df92 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c76e:	68fa      	ldr	r2, [r7, #12]
 801c770:	23a8      	movs	r3, #168	@ 0xa8
 801c772:	009b      	lsls	r3, r3, #2
 801c774:	5cd3      	ldrb	r3, [r2, r3]
 801c776:	2b01      	cmp	r3, #1
 801c778:	d124      	bne.n	801c7c4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	0018      	movs	r0, r3
 801c77e:	f7ff fe43 	bl	801c408 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c782:	68fa      	ldr	r2, [r7, #12]
 801c784:	23a8      	movs	r3, #168	@ 0xa8
 801c786:	009b      	lsls	r3, r3, #2
 801c788:	2100      	movs	r1, #0
 801c78a:	54d1      	strb	r1, [r2, r3]
 801c78c:	e01a      	b.n	801c7c4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801c78e:	68fa      	ldr	r2, [r7, #12]
 801c790:	23ad      	movs	r3, #173	@ 0xad
 801c792:	009b      	lsls	r3, r3, #2
 801c794:	58d3      	ldr	r3, [r2, r3]
 801c796:	695b      	ldr	r3, [r3, #20]
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d011      	beq.n	801c7c0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c79c:	68fa      	ldr	r2, [r7, #12]
 801c79e:	23a7      	movs	r3, #167	@ 0xa7
 801c7a0:	009b      	lsls	r3, r3, #2
 801c7a2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801c7a4:	2b03      	cmp	r3, #3
 801c7a6:	d10b      	bne.n	801c7c0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801c7a8:	68fa      	ldr	r2, [r7, #12]
 801c7aa:	23ad      	movs	r3, #173	@ 0xad
 801c7ac:	009b      	lsls	r3, r3, #2
 801c7ae:	58d3      	ldr	r3, [r2, r3]
 801c7b0:	695b      	ldr	r3, [r3, #20]
 801c7b2:	220b      	movs	r2, #11
 801c7b4:	18ba      	adds	r2, r7, r2
 801c7b6:	7811      	ldrb	r1, [r2, #0]
 801c7b8:	68fa      	ldr	r2, [r7, #12]
 801c7ba:	0010      	movs	r0, r2
 801c7bc:	4798      	blx	r3
 801c7be:	e001      	b.n	801c7c4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c7c0:	2302      	movs	r3, #2
 801c7c2:	e000      	b.n	801c7c6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801c7c4:	2300      	movs	r3, #0
}
 801c7c6:	0018      	movs	r0, r3
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	b006      	add	sp, #24
 801c7cc:	bd80      	pop	{r7, pc}

0801c7ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c7ce:	b580      	push	{r7, lr}
 801c7d0:	b082      	sub	sp, #8
 801c7d2:	af00      	add	r7, sp, #0
 801c7d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c7d6:	6878      	ldr	r0, [r7, #4]
 801c7d8:	2340      	movs	r3, #64	@ 0x40
 801c7da:	2200      	movs	r2, #0
 801c7dc:	2100      	movs	r1, #0
 801c7de:	f001 fb76 	bl	801dece <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c7e2:	687a      	ldr	r2, [r7, #4]
 801c7e4:	23ac      	movs	r3, #172	@ 0xac
 801c7e6:	005b      	lsls	r3, r3, #1
 801c7e8:	2101      	movs	r1, #1
 801c7ea:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c7ec:	687a      	ldr	r2, [r7, #4]
 801c7ee:	23b2      	movs	r3, #178	@ 0xb2
 801c7f0:	005b      	lsls	r3, r3, #1
 801c7f2:	2140      	movs	r1, #64	@ 0x40
 801c7f4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c7f6:	6878      	ldr	r0, [r7, #4]
 801c7f8:	2340      	movs	r3, #64	@ 0x40
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	2180      	movs	r1, #128	@ 0x80
 801c7fe:	f001 fb66 	bl	801dece <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	2201      	movs	r2, #1
 801c806:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	2240      	movs	r2, #64	@ 0x40
 801c80c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c80e:	687a      	ldr	r2, [r7, #4]
 801c810:	23a7      	movs	r3, #167	@ 0xa7
 801c812:	009b      	lsls	r3, r3, #2
 801c814:	2101      	movs	r1, #1
 801c816:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801c818:	687a      	ldr	r2, [r7, #4]
 801c81a:	23a5      	movs	r3, #165	@ 0xa5
 801c81c:	009b      	lsls	r3, r3, #2
 801c81e:	2100      	movs	r1, #0
 801c820:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	2200      	movs	r2, #0
 801c826:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c828:	687a      	ldr	r2, [r7, #4]
 801c82a:	23a9      	movs	r3, #169	@ 0xa9
 801c82c:	009b      	lsls	r3, r3, #2
 801c82e:	2100      	movs	r1, #0
 801c830:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801c832:	687a      	ldr	r2, [r7, #4]
 801c834:	23ae      	movs	r3, #174	@ 0xae
 801c836:	009b      	lsls	r3, r3, #2
 801c838:	58d3      	ldr	r3, [r2, r3]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d00a      	beq.n	801c854 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c83e:	687a      	ldr	r2, [r7, #4]
 801c840:	23ad      	movs	r3, #173	@ 0xad
 801c842:	009b      	lsls	r3, r3, #2
 801c844:	58d3      	ldr	r3, [r2, r3]
 801c846:	685a      	ldr	r2, [r3, #4]
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	685b      	ldr	r3, [r3, #4]
 801c84c:	b2d9      	uxtb	r1, r3
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	0018      	movs	r0, r3
 801c852:	4790      	blx	r2
  }

  return USBD_OK;
 801c854:	2300      	movs	r3, #0
}
 801c856:	0018      	movs	r0, r3
 801c858:	46bd      	mov	sp, r7
 801c85a:	b002      	add	sp, #8
 801c85c:	bd80      	pop	{r7, pc}

0801c85e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c85e:	b580      	push	{r7, lr}
 801c860:	b082      	sub	sp, #8
 801c862:	af00      	add	r7, sp, #0
 801c864:	6078      	str	r0, [r7, #4]
 801c866:	000a      	movs	r2, r1
 801c868:	1cfb      	adds	r3, r7, #3
 801c86a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	1cfa      	adds	r2, r7, #3
 801c870:	7812      	ldrb	r2, [r2, #0]
 801c872:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c874:	2300      	movs	r3, #0
}
 801c876:	0018      	movs	r0, r3
 801c878:	46bd      	mov	sp, r7
 801c87a:	b002      	add	sp, #8
 801c87c:	bd80      	pop	{r7, pc}
	...

0801c880 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c880:	b580      	push	{r7, lr}
 801c882:	b082      	sub	sp, #8
 801c884:	af00      	add	r7, sp, #0
 801c886:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801c888:	687a      	ldr	r2, [r7, #4]
 801c88a:	23a7      	movs	r3, #167	@ 0xa7
 801c88c:	009b      	lsls	r3, r3, #2
 801c88e:	5cd1      	ldrb	r1, [r2, r3]
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	4a06      	ldr	r2, [pc, #24]	@ (801c8ac <USBD_LL_Suspend+0x2c>)
 801c894:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c896:	687a      	ldr	r2, [r7, #4]
 801c898:	23a7      	movs	r3, #167	@ 0xa7
 801c89a:	009b      	lsls	r3, r3, #2
 801c89c:	2104      	movs	r1, #4
 801c89e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801c8a0:	2300      	movs	r3, #0
}
 801c8a2:	0018      	movs	r0, r3
 801c8a4:	46bd      	mov	sp, r7
 801c8a6:	b002      	add	sp, #8
 801c8a8:	bd80      	pop	{r7, pc}
 801c8aa:	46c0      	nop			@ (mov r8, r8)
 801c8ac:	0000029d 	.word	0x0000029d

0801c8b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	b082      	sub	sp, #8
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c8b8:	687a      	ldr	r2, [r7, #4]
 801c8ba:	23a7      	movs	r3, #167	@ 0xa7
 801c8bc:	009b      	lsls	r3, r3, #2
 801c8be:	5cd3      	ldrb	r3, [r2, r3]
 801c8c0:	2b04      	cmp	r3, #4
 801c8c2:	d106      	bne.n	801c8d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	4a05      	ldr	r2, [pc, #20]	@ (801c8dc <USBD_LL_Resume+0x2c>)
 801c8c8:	5c99      	ldrb	r1, [r3, r2]
 801c8ca:	687a      	ldr	r2, [r7, #4]
 801c8cc:	23a7      	movs	r3, #167	@ 0xa7
 801c8ce:	009b      	lsls	r3, r3, #2
 801c8d0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801c8d2:	2300      	movs	r3, #0
}
 801c8d4:	0018      	movs	r0, r3
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	b002      	add	sp, #8
 801c8da:	bd80      	pop	{r7, pc}
 801c8dc:	0000029d 	.word	0x0000029d

0801c8e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	b082      	sub	sp, #8
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c8e8:	687a      	ldr	r2, [r7, #4]
 801c8ea:	23a7      	movs	r3, #167	@ 0xa7
 801c8ec:	009b      	lsls	r3, r3, #2
 801c8ee:	5cd3      	ldrb	r3, [r2, r3]
 801c8f0:	2b03      	cmp	r3, #3
 801c8f2:	d10e      	bne.n	801c912 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801c8f4:	687a      	ldr	r2, [r7, #4]
 801c8f6:	23ad      	movs	r3, #173	@ 0xad
 801c8f8:	009b      	lsls	r3, r3, #2
 801c8fa:	58d3      	ldr	r3, [r2, r3]
 801c8fc:	69db      	ldr	r3, [r3, #28]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d007      	beq.n	801c912 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801c902:	687a      	ldr	r2, [r7, #4]
 801c904:	23ad      	movs	r3, #173	@ 0xad
 801c906:	009b      	lsls	r3, r3, #2
 801c908:	58d3      	ldr	r3, [r2, r3]
 801c90a:	69db      	ldr	r3, [r3, #28]
 801c90c:	687a      	ldr	r2, [r7, #4]
 801c90e:	0010      	movs	r0, r2
 801c910:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c912:	2300      	movs	r3, #0
}
 801c914:	0018      	movs	r0, r3
 801c916:	46bd      	mov	sp, r7
 801c918:	b002      	add	sp, #8
 801c91a:	bd80      	pop	{r7, pc}

0801c91c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b084      	sub	sp, #16
 801c920:	af00      	add	r7, sp, #0
 801c922:	6078      	str	r0, [r7, #4]
 801c924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c926:	230f      	movs	r3, #15
 801c928:	18fb      	adds	r3, r7, r3
 801c92a:	2200      	movs	r2, #0
 801c92c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c92e:	683b      	ldr	r3, [r7, #0]
 801c930:	781b      	ldrb	r3, [r3, #0]
 801c932:	001a      	movs	r2, r3
 801c934:	2360      	movs	r3, #96	@ 0x60
 801c936:	4013      	ands	r3, r2
 801c938:	2b40      	cmp	r3, #64	@ 0x40
 801c93a:	d004      	beq.n	801c946 <USBD_StdDevReq+0x2a>
 801c93c:	d84f      	bhi.n	801c9de <USBD_StdDevReq+0xc2>
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d00b      	beq.n	801c95a <USBD_StdDevReq+0x3e>
 801c942:	2b20      	cmp	r3, #32
 801c944:	d14b      	bne.n	801c9de <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c946:	687a      	ldr	r2, [r7, #4]
 801c948:	23ad      	movs	r3, #173	@ 0xad
 801c94a:	009b      	lsls	r3, r3, #2
 801c94c:	58d3      	ldr	r3, [r2, r3]
 801c94e:	689b      	ldr	r3, [r3, #8]
 801c950:	6839      	ldr	r1, [r7, #0]
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	0010      	movs	r0, r2
 801c956:	4798      	blx	r3
      break;
 801c958:	e048      	b.n	801c9ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c95a:	683b      	ldr	r3, [r7, #0]
 801c95c:	785b      	ldrb	r3, [r3, #1]
 801c95e:	2b09      	cmp	r3, #9
 801c960:	d835      	bhi.n	801c9ce <USBD_StdDevReq+0xb2>
 801c962:	009a      	lsls	r2, r3, #2
 801c964:	4b25      	ldr	r3, [pc, #148]	@ (801c9fc <USBD_StdDevReq+0xe0>)
 801c966:	18d3      	adds	r3, r2, r3
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c96c:	683a      	ldr	r2, [r7, #0]
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	0011      	movs	r1, r2
 801c972:	0018      	movs	r0, r3
 801c974:	f000 fa52 	bl	801ce1c <USBD_GetDescriptor>
          break;
 801c978:	e030      	b.n	801c9dc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c97a:	683a      	ldr	r2, [r7, #0]
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	0011      	movs	r1, r2
 801c980:	0018      	movs	r0, r3
 801c982:	f000 fbfd 	bl	801d180 <USBD_SetAddress>
          break;
 801c986:	e029      	b.n	801c9dc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801c988:	683a      	ldr	r2, [r7, #0]
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	0011      	movs	r1, r2
 801c98e:	0018      	movs	r0, r3
 801c990:	f000 fc4a 	bl	801d228 <USBD_SetConfig>
          break;
 801c994:	e022      	b.n	801c9dc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c996:	683a      	ldr	r2, [r7, #0]
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	0011      	movs	r1, r2
 801c99c:	0018      	movs	r0, r3
 801c99e:	f000 fce7 	bl	801d370 <USBD_GetConfig>
          break;
 801c9a2:	e01b      	b.n	801c9dc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c9a4:	683a      	ldr	r2, [r7, #0]
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	0011      	movs	r1, r2
 801c9aa:	0018      	movs	r0, r3
 801c9ac:	f000 fd1b 	bl	801d3e6 <USBD_GetStatus>
          break;
 801c9b0:	e014      	b.n	801c9dc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c9b2:	683a      	ldr	r2, [r7, #0]
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	0011      	movs	r1, r2
 801c9b8:	0018      	movs	r0, r3
 801c9ba:	f000 fd4e 	bl	801d45a <USBD_SetFeature>
          break;
 801c9be:	e00d      	b.n	801c9dc <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c9c0:	683a      	ldr	r2, [r7, #0]
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	0011      	movs	r1, r2
 801c9c6:	0018      	movs	r0, r3
 801c9c8:	f000 fd5d 	bl	801d486 <USBD_ClrFeature>
          break;
 801c9cc:	e006      	b.n	801c9dc <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801c9ce:	683a      	ldr	r2, [r7, #0]
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	0011      	movs	r1, r2
 801c9d4:	0018      	movs	r0, r3
 801c9d6:	f000 fdb4 	bl	801d542 <USBD_CtlError>
          break;
 801c9da:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c9dc:	e006      	b.n	801c9ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801c9de:	683a      	ldr	r2, [r7, #0]
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	0011      	movs	r1, r2
 801c9e4:	0018      	movs	r0, r3
 801c9e6:	f000 fdac 	bl	801d542 <USBD_CtlError>
      break;
 801c9ea:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c9ec:	230f      	movs	r3, #15
 801c9ee:	18fb      	adds	r3, r7, r3
 801c9f0:	781b      	ldrb	r3, [r3, #0]
}
 801c9f2:	0018      	movs	r0, r3
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	b004      	add	sp, #16
 801c9f8:	bd80      	pop	{r7, pc}
 801c9fa:	46c0      	nop			@ (mov r8, r8)
 801c9fc:	08026840 	.word	0x08026840

0801ca00 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801ca00:	b5b0      	push	{r4, r5, r7, lr}
 801ca02:	b084      	sub	sp, #16
 801ca04:	af00      	add	r7, sp, #0
 801ca06:	6078      	str	r0, [r7, #4]
 801ca08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ca0a:	230f      	movs	r3, #15
 801ca0c:	18fb      	adds	r3, r7, r3
 801ca0e:	2200      	movs	r2, #0
 801ca10:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ca12:	683b      	ldr	r3, [r7, #0]
 801ca14:	781b      	ldrb	r3, [r3, #0]
 801ca16:	001a      	movs	r2, r3
 801ca18:	2360      	movs	r3, #96	@ 0x60
 801ca1a:	4013      	ands	r3, r2
 801ca1c:	2b40      	cmp	r3, #64	@ 0x40
 801ca1e:	d004      	beq.n	801ca2a <USBD_StdItfReq+0x2a>
 801ca20:	d839      	bhi.n	801ca96 <USBD_StdItfReq+0x96>
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d001      	beq.n	801ca2a <USBD_StdItfReq+0x2a>
 801ca26:	2b20      	cmp	r3, #32
 801ca28:	d135      	bne.n	801ca96 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801ca2a:	687a      	ldr	r2, [r7, #4]
 801ca2c:	23a7      	movs	r3, #167	@ 0xa7
 801ca2e:	009b      	lsls	r3, r3, #2
 801ca30:	5cd3      	ldrb	r3, [r2, r3]
 801ca32:	3b01      	subs	r3, #1
 801ca34:	2b02      	cmp	r3, #2
 801ca36:	d825      	bhi.n	801ca84 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801ca38:	683b      	ldr	r3, [r7, #0]
 801ca3a:	889b      	ldrh	r3, [r3, #4]
 801ca3c:	b2db      	uxtb	r3, r3
 801ca3e:	2b01      	cmp	r3, #1
 801ca40:	d819      	bhi.n	801ca76 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ca42:	687a      	ldr	r2, [r7, #4]
 801ca44:	23ad      	movs	r3, #173	@ 0xad
 801ca46:	009b      	lsls	r3, r3, #2
 801ca48:	58d3      	ldr	r3, [r2, r3]
 801ca4a:	689b      	ldr	r3, [r3, #8]
 801ca4c:	250f      	movs	r5, #15
 801ca4e:	197c      	adds	r4, r7, r5
 801ca50:	6839      	ldr	r1, [r7, #0]
 801ca52:	687a      	ldr	r2, [r7, #4]
 801ca54:	0010      	movs	r0, r2
 801ca56:	4798      	blx	r3
 801ca58:	0003      	movs	r3, r0
 801ca5a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801ca5c:	683b      	ldr	r3, [r7, #0]
 801ca5e:	88db      	ldrh	r3, [r3, #6]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d116      	bne.n	801ca92 <USBD_StdItfReq+0x92>
 801ca64:	197b      	adds	r3, r7, r5
 801ca66:	781b      	ldrb	r3, [r3, #0]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d112      	bne.n	801ca92 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	0018      	movs	r0, r3
 801ca70:	f000 fe4f 	bl	801d712 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801ca74:	e00d      	b.n	801ca92 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801ca76:	683a      	ldr	r2, [r7, #0]
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	0011      	movs	r1, r2
 801ca7c:	0018      	movs	r0, r3
 801ca7e:	f000 fd60 	bl	801d542 <USBD_CtlError>
          break;
 801ca82:	e006      	b.n	801ca92 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801ca84:	683a      	ldr	r2, [r7, #0]
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	0011      	movs	r1, r2
 801ca8a:	0018      	movs	r0, r3
 801ca8c:	f000 fd59 	bl	801d542 <USBD_CtlError>
          break;
 801ca90:	e000      	b.n	801ca94 <USBD_StdItfReq+0x94>
          break;
 801ca92:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ca94:	e006      	b.n	801caa4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801ca96:	683a      	ldr	r2, [r7, #0]
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	0011      	movs	r1, r2
 801ca9c:	0018      	movs	r0, r3
 801ca9e:	f000 fd50 	bl	801d542 <USBD_CtlError>
      break;
 801caa2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801caa4:	2300      	movs	r3, #0
}
 801caa6:	0018      	movs	r0, r3
 801caa8:	46bd      	mov	sp, r7
 801caaa:	b004      	add	sp, #16
 801caac:	bdb0      	pop	{r4, r5, r7, pc}

0801caae <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801caae:	b5b0      	push	{r4, r5, r7, lr}
 801cab0:	b084      	sub	sp, #16
 801cab2:	af00      	add	r7, sp, #0
 801cab4:	6078      	str	r0, [r7, #4]
 801cab6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801cab8:	230f      	movs	r3, #15
 801caba:	18fb      	adds	r3, r7, r3
 801cabc:	2200      	movs	r2, #0
 801cabe:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801cac0:	683b      	ldr	r3, [r7, #0]
 801cac2:	889a      	ldrh	r2, [r3, #4]
 801cac4:	230e      	movs	r3, #14
 801cac6:	18fb      	adds	r3, r7, r3
 801cac8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801caca:	683b      	ldr	r3, [r7, #0]
 801cacc:	781b      	ldrb	r3, [r3, #0]
 801cace:	001a      	movs	r2, r3
 801cad0:	2360      	movs	r3, #96	@ 0x60
 801cad2:	4013      	ands	r3, r2
 801cad4:	2b40      	cmp	r3, #64	@ 0x40
 801cad6:	d006      	beq.n	801cae6 <USBD_StdEPReq+0x38>
 801cad8:	d900      	bls.n	801cadc <USBD_StdEPReq+0x2e>
 801cada:	e190      	b.n	801cdfe <USBD_StdEPReq+0x350>
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d00c      	beq.n	801cafa <USBD_StdEPReq+0x4c>
 801cae0:	2b20      	cmp	r3, #32
 801cae2:	d000      	beq.n	801cae6 <USBD_StdEPReq+0x38>
 801cae4:	e18b      	b.n	801cdfe <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801cae6:	687a      	ldr	r2, [r7, #4]
 801cae8:	23ad      	movs	r3, #173	@ 0xad
 801caea:	009b      	lsls	r3, r3, #2
 801caec:	58d3      	ldr	r3, [r2, r3]
 801caee:	689b      	ldr	r3, [r3, #8]
 801caf0:	6839      	ldr	r1, [r7, #0]
 801caf2:	687a      	ldr	r2, [r7, #4]
 801caf4:	0010      	movs	r0, r2
 801caf6:	4798      	blx	r3
      break;
 801caf8:	e188      	b.n	801ce0c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	781b      	ldrb	r3, [r3, #0]
 801cafe:	001a      	movs	r2, r3
 801cb00:	2360      	movs	r3, #96	@ 0x60
 801cb02:	4013      	ands	r3, r2
 801cb04:	2b20      	cmp	r3, #32
 801cb06:	d10f      	bne.n	801cb28 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801cb08:	687a      	ldr	r2, [r7, #4]
 801cb0a:	23ad      	movs	r3, #173	@ 0xad
 801cb0c:	009b      	lsls	r3, r3, #2
 801cb0e:	58d3      	ldr	r3, [r2, r3]
 801cb10:	689b      	ldr	r3, [r3, #8]
 801cb12:	250f      	movs	r5, #15
 801cb14:	197c      	adds	r4, r7, r5
 801cb16:	6839      	ldr	r1, [r7, #0]
 801cb18:	687a      	ldr	r2, [r7, #4]
 801cb1a:	0010      	movs	r0, r2
 801cb1c:	4798      	blx	r3
 801cb1e:	0003      	movs	r3, r0
 801cb20:	7023      	strb	r3, [r4, #0]

        return ret;
 801cb22:	197b      	adds	r3, r7, r5
 801cb24:	781b      	ldrb	r3, [r3, #0]
 801cb26:	e174      	b.n	801ce12 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801cb28:	683b      	ldr	r3, [r7, #0]
 801cb2a:	785b      	ldrb	r3, [r3, #1]
 801cb2c:	2b03      	cmp	r3, #3
 801cb2e:	d007      	beq.n	801cb40 <USBD_StdEPReq+0x92>
 801cb30:	dd00      	ble.n	801cb34 <USBD_StdEPReq+0x86>
 801cb32:	e15c      	b.n	801cdee <USBD_StdEPReq+0x340>
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d100      	bne.n	801cb3a <USBD_StdEPReq+0x8c>
 801cb38:	e092      	b.n	801cc60 <USBD_StdEPReq+0x1b2>
 801cb3a:	2b01      	cmp	r3, #1
 801cb3c:	d04b      	beq.n	801cbd6 <USBD_StdEPReq+0x128>
 801cb3e:	e156      	b.n	801cdee <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801cb40:	687a      	ldr	r2, [r7, #4]
 801cb42:	23a7      	movs	r3, #167	@ 0xa7
 801cb44:	009b      	lsls	r3, r3, #2
 801cb46:	5cd3      	ldrb	r3, [r2, r3]
 801cb48:	2b02      	cmp	r3, #2
 801cb4a:	d002      	beq.n	801cb52 <USBD_StdEPReq+0xa4>
 801cb4c:	2b03      	cmp	r3, #3
 801cb4e:	d01d      	beq.n	801cb8c <USBD_StdEPReq+0xde>
 801cb50:	e039      	b.n	801cbc6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cb52:	220e      	movs	r2, #14
 801cb54:	18bb      	adds	r3, r7, r2
 801cb56:	781b      	ldrb	r3, [r3, #0]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d010      	beq.n	801cb7e <USBD_StdEPReq+0xd0>
 801cb5c:	18bb      	adds	r3, r7, r2
 801cb5e:	781b      	ldrb	r3, [r3, #0]
 801cb60:	2b80      	cmp	r3, #128	@ 0x80
 801cb62:	d00c      	beq.n	801cb7e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cb64:	18bb      	adds	r3, r7, r2
 801cb66:	781a      	ldrb	r2, [r3, #0]
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	0011      	movs	r1, r2
 801cb6c:	0018      	movs	r0, r3
 801cb6e:	f001 fa10 	bl	801df92 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	2180      	movs	r1, #128	@ 0x80
 801cb76:	0018      	movs	r0, r3
 801cb78:	f001 fa0b 	bl	801df92 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cb7c:	e02a      	b.n	801cbd4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801cb7e:	683a      	ldr	r2, [r7, #0]
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	0011      	movs	r1, r2
 801cb84:	0018      	movs	r0, r3
 801cb86:	f000 fcdc 	bl	801d542 <USBD_CtlError>
              break;
 801cb8a:	e023      	b.n	801cbd4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cb8c:	683b      	ldr	r3, [r7, #0]
 801cb8e:	885b      	ldrh	r3, [r3, #2]
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d113      	bne.n	801cbbc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801cb94:	220e      	movs	r2, #14
 801cb96:	18bb      	adds	r3, r7, r2
 801cb98:	781b      	ldrb	r3, [r3, #0]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d00e      	beq.n	801cbbc <USBD_StdEPReq+0x10e>
 801cb9e:	18bb      	adds	r3, r7, r2
 801cba0:	781b      	ldrb	r3, [r3, #0]
 801cba2:	2b80      	cmp	r3, #128	@ 0x80
 801cba4:	d00a      	beq.n	801cbbc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	88db      	ldrh	r3, [r3, #6]
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d106      	bne.n	801cbbc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801cbae:	18bb      	adds	r3, r7, r2
 801cbb0:	781a      	ldrb	r2, [r3, #0]
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	0011      	movs	r1, r2
 801cbb6:	0018      	movs	r0, r3
 801cbb8:	f001 f9eb 	bl	801df92 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	0018      	movs	r0, r3
 801cbc0:	f000 fda7 	bl	801d712 <USBD_CtlSendStatus>

              break;
 801cbc4:	e006      	b.n	801cbd4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801cbc6:	683a      	ldr	r2, [r7, #0]
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	0011      	movs	r1, r2
 801cbcc:	0018      	movs	r0, r3
 801cbce:	f000 fcb8 	bl	801d542 <USBD_CtlError>
              break;
 801cbd2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801cbd4:	e112      	b.n	801cdfc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801cbd6:	687a      	ldr	r2, [r7, #4]
 801cbd8:	23a7      	movs	r3, #167	@ 0xa7
 801cbda:	009b      	lsls	r3, r3, #2
 801cbdc:	5cd3      	ldrb	r3, [r2, r3]
 801cbde:	2b02      	cmp	r3, #2
 801cbe0:	d002      	beq.n	801cbe8 <USBD_StdEPReq+0x13a>
 801cbe2:	2b03      	cmp	r3, #3
 801cbe4:	d01d      	beq.n	801cc22 <USBD_StdEPReq+0x174>
 801cbe6:	e032      	b.n	801cc4e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cbe8:	220e      	movs	r2, #14
 801cbea:	18bb      	adds	r3, r7, r2
 801cbec:	781b      	ldrb	r3, [r3, #0]
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d010      	beq.n	801cc14 <USBD_StdEPReq+0x166>
 801cbf2:	18bb      	adds	r3, r7, r2
 801cbf4:	781b      	ldrb	r3, [r3, #0]
 801cbf6:	2b80      	cmp	r3, #128	@ 0x80
 801cbf8:	d00c      	beq.n	801cc14 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cbfa:	18bb      	adds	r3, r7, r2
 801cbfc:	781a      	ldrb	r2, [r3, #0]
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	0011      	movs	r1, r2
 801cc02:	0018      	movs	r0, r3
 801cc04:	f001 f9c5 	bl	801df92 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	2180      	movs	r1, #128	@ 0x80
 801cc0c:	0018      	movs	r0, r3
 801cc0e:	f001 f9c0 	bl	801df92 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cc12:	e024      	b.n	801cc5e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801cc14:	683a      	ldr	r2, [r7, #0]
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	0011      	movs	r1, r2
 801cc1a:	0018      	movs	r0, r3
 801cc1c:	f000 fc91 	bl	801d542 <USBD_CtlError>
              break;
 801cc20:	e01d      	b.n	801cc5e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cc22:	683b      	ldr	r3, [r7, #0]
 801cc24:	885b      	ldrh	r3, [r3, #2]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d118      	bne.n	801cc5c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801cc2a:	210e      	movs	r1, #14
 801cc2c:	187b      	adds	r3, r7, r1
 801cc2e:	781b      	ldrb	r3, [r3, #0]
 801cc30:	227f      	movs	r2, #127	@ 0x7f
 801cc32:	4013      	ands	r3, r2
 801cc34:	d006      	beq.n	801cc44 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801cc36:	187b      	adds	r3, r7, r1
 801cc38:	781a      	ldrb	r2, [r3, #0]
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	0011      	movs	r1, r2
 801cc3e:	0018      	movs	r0, r3
 801cc40:	f001 f9d2 	bl	801dfe8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	0018      	movs	r0, r3
 801cc48:	f000 fd63 	bl	801d712 <USBD_CtlSendStatus>
              }
              break;
 801cc4c:	e006      	b.n	801cc5c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801cc4e:	683a      	ldr	r2, [r7, #0]
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	0011      	movs	r1, r2
 801cc54:	0018      	movs	r0, r3
 801cc56:	f000 fc74 	bl	801d542 <USBD_CtlError>
              break;
 801cc5a:	e000      	b.n	801cc5e <USBD_StdEPReq+0x1b0>
              break;
 801cc5c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801cc5e:	e0cd      	b.n	801cdfc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801cc60:	687a      	ldr	r2, [r7, #4]
 801cc62:	23a7      	movs	r3, #167	@ 0xa7
 801cc64:	009b      	lsls	r3, r3, #2
 801cc66:	5cd3      	ldrb	r3, [r2, r3]
 801cc68:	2b02      	cmp	r3, #2
 801cc6a:	d002      	beq.n	801cc72 <USBD_StdEPReq+0x1c4>
 801cc6c:	2b03      	cmp	r3, #3
 801cc6e:	d03c      	beq.n	801ccea <USBD_StdEPReq+0x23c>
 801cc70:	e0b5      	b.n	801cdde <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cc72:	220e      	movs	r2, #14
 801cc74:	18bb      	adds	r3, r7, r2
 801cc76:	781b      	ldrb	r3, [r3, #0]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d00a      	beq.n	801cc92 <USBD_StdEPReq+0x1e4>
 801cc7c:	18bb      	adds	r3, r7, r2
 801cc7e:	781b      	ldrb	r3, [r3, #0]
 801cc80:	2b80      	cmp	r3, #128	@ 0x80
 801cc82:	d006      	beq.n	801cc92 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801cc84:	683a      	ldr	r2, [r7, #0]
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	0011      	movs	r1, r2
 801cc8a:	0018      	movs	r0, r3
 801cc8c:	f000 fc59 	bl	801d542 <USBD_CtlError>
                break;
 801cc90:	e0ac      	b.n	801cdec <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cc92:	220e      	movs	r2, #14
 801cc94:	18bb      	adds	r3, r7, r2
 801cc96:	781b      	ldrb	r3, [r3, #0]
 801cc98:	b25b      	sxtb	r3, r3
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	da0c      	bge.n	801ccb8 <USBD_StdEPReq+0x20a>
 801cc9e:	18bb      	adds	r3, r7, r2
 801cca0:	781b      	ldrb	r3, [r3, #0]
 801cca2:	227f      	movs	r2, #127	@ 0x7f
 801cca4:	401a      	ands	r2, r3
 801cca6:	0013      	movs	r3, r2
 801cca8:	009b      	lsls	r3, r3, #2
 801ccaa:	189b      	adds	r3, r3, r2
 801ccac:	009b      	lsls	r3, r3, #2
 801ccae:	3310      	adds	r3, #16
 801ccb0:	687a      	ldr	r2, [r7, #4]
 801ccb2:	18d3      	adds	r3, r2, r3
 801ccb4:	3304      	adds	r3, #4
 801ccb6:	e00d      	b.n	801ccd4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801ccb8:	230e      	movs	r3, #14
 801ccba:	18fb      	adds	r3, r7, r3
 801ccbc:	781b      	ldrb	r3, [r3, #0]
 801ccbe:	227f      	movs	r2, #127	@ 0x7f
 801ccc0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ccc2:	0013      	movs	r3, r2
 801ccc4:	009b      	lsls	r3, r3, #2
 801ccc6:	189b      	adds	r3, r3, r2
 801ccc8:	009b      	lsls	r3, r3, #2
 801ccca:	3351      	adds	r3, #81	@ 0x51
 801cccc:	33ff      	adds	r3, #255	@ 0xff
 801ccce:	687a      	ldr	r2, [r7, #4]
 801ccd0:	18d3      	adds	r3, r2, r3
 801ccd2:	3304      	adds	r3, #4
 801ccd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801ccd6:	68bb      	ldr	r3, [r7, #8]
 801ccd8:	2200      	movs	r2, #0
 801ccda:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ccdc:	68b9      	ldr	r1, [r7, #8]
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	2202      	movs	r2, #2
 801cce2:	0018      	movs	r0, r3
 801cce4:	f000 fcab 	bl	801d63e <USBD_CtlSendData>
              break;
 801cce8:	e080      	b.n	801cdec <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801ccea:	220e      	movs	r2, #14
 801ccec:	18bb      	adds	r3, r7, r2
 801ccee:	781b      	ldrb	r3, [r3, #0]
 801ccf0:	b25b      	sxtb	r3, r3
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	da14      	bge.n	801cd20 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801ccf6:	18bb      	adds	r3, r7, r2
 801ccf8:	781b      	ldrb	r3, [r3, #0]
 801ccfa:	220f      	movs	r2, #15
 801ccfc:	401a      	ands	r2, r3
 801ccfe:	6879      	ldr	r1, [r7, #4]
 801cd00:	0013      	movs	r3, r2
 801cd02:	009b      	lsls	r3, r3, #2
 801cd04:	189b      	adds	r3, r3, r2
 801cd06:	009b      	lsls	r3, r3, #2
 801cd08:	18cb      	adds	r3, r1, r3
 801cd0a:	3318      	adds	r3, #24
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d11e      	bne.n	801cd50 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801cd12:	683a      	ldr	r2, [r7, #0]
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	0011      	movs	r1, r2
 801cd18:	0018      	movs	r0, r3
 801cd1a:	f000 fc12 	bl	801d542 <USBD_CtlError>
                  break;
 801cd1e:	e065      	b.n	801cdec <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801cd20:	230e      	movs	r3, #14
 801cd22:	18fb      	adds	r3, r7, r3
 801cd24:	781b      	ldrb	r3, [r3, #0]
 801cd26:	220f      	movs	r2, #15
 801cd28:	401a      	ands	r2, r3
 801cd2a:	6878      	ldr	r0, [r7, #4]
 801cd2c:	23ac      	movs	r3, #172	@ 0xac
 801cd2e:	0059      	lsls	r1, r3, #1
 801cd30:	0013      	movs	r3, r2
 801cd32:	009b      	lsls	r3, r3, #2
 801cd34:	189b      	adds	r3, r3, r2
 801cd36:	009b      	lsls	r3, r3, #2
 801cd38:	18c3      	adds	r3, r0, r3
 801cd3a:	185b      	adds	r3, r3, r1
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d106      	bne.n	801cd50 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801cd42:	683a      	ldr	r2, [r7, #0]
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	0011      	movs	r1, r2
 801cd48:	0018      	movs	r0, r3
 801cd4a:	f000 fbfa 	bl	801d542 <USBD_CtlError>
                  break;
 801cd4e:	e04d      	b.n	801cdec <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cd50:	220e      	movs	r2, #14
 801cd52:	18bb      	adds	r3, r7, r2
 801cd54:	781b      	ldrb	r3, [r3, #0]
 801cd56:	b25b      	sxtb	r3, r3
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	da0c      	bge.n	801cd76 <USBD_StdEPReq+0x2c8>
 801cd5c:	18bb      	adds	r3, r7, r2
 801cd5e:	781b      	ldrb	r3, [r3, #0]
 801cd60:	227f      	movs	r2, #127	@ 0x7f
 801cd62:	401a      	ands	r2, r3
 801cd64:	0013      	movs	r3, r2
 801cd66:	009b      	lsls	r3, r3, #2
 801cd68:	189b      	adds	r3, r3, r2
 801cd6a:	009b      	lsls	r3, r3, #2
 801cd6c:	3310      	adds	r3, #16
 801cd6e:	687a      	ldr	r2, [r7, #4]
 801cd70:	18d3      	adds	r3, r2, r3
 801cd72:	3304      	adds	r3, #4
 801cd74:	e00d      	b.n	801cd92 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cd76:	230e      	movs	r3, #14
 801cd78:	18fb      	adds	r3, r7, r3
 801cd7a:	781b      	ldrb	r3, [r3, #0]
 801cd7c:	227f      	movs	r2, #127	@ 0x7f
 801cd7e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cd80:	0013      	movs	r3, r2
 801cd82:	009b      	lsls	r3, r3, #2
 801cd84:	189b      	adds	r3, r3, r2
 801cd86:	009b      	lsls	r3, r3, #2
 801cd88:	3351      	adds	r3, #81	@ 0x51
 801cd8a:	33ff      	adds	r3, #255	@ 0xff
 801cd8c:	687a      	ldr	r2, [r7, #4]
 801cd8e:	18d3      	adds	r3, r2, r3
 801cd90:	3304      	adds	r3, #4
 801cd92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801cd94:	220e      	movs	r2, #14
 801cd96:	18bb      	adds	r3, r7, r2
 801cd98:	781b      	ldrb	r3, [r3, #0]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d003      	beq.n	801cda6 <USBD_StdEPReq+0x2f8>
 801cd9e:	18bb      	adds	r3, r7, r2
 801cda0:	781b      	ldrb	r3, [r3, #0]
 801cda2:	2b80      	cmp	r3, #128	@ 0x80
 801cda4:	d103      	bne.n	801cdae <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801cda6:	68bb      	ldr	r3, [r7, #8]
 801cda8:	2200      	movs	r2, #0
 801cdaa:	601a      	str	r2, [r3, #0]
 801cdac:	e010      	b.n	801cdd0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801cdae:	230e      	movs	r3, #14
 801cdb0:	18fb      	adds	r3, r7, r3
 801cdb2:	781a      	ldrb	r2, [r3, #0]
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	0011      	movs	r1, r2
 801cdb8:	0018      	movs	r0, r3
 801cdba:	f001 f940 	bl	801e03e <USBD_LL_IsStallEP>
 801cdbe:	1e03      	subs	r3, r0, #0
 801cdc0:	d003      	beq.n	801cdca <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801cdc2:	68bb      	ldr	r3, [r7, #8]
 801cdc4:	2201      	movs	r2, #1
 801cdc6:	601a      	str	r2, [r3, #0]
 801cdc8:	e002      	b.n	801cdd0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801cdca:	68bb      	ldr	r3, [r7, #8]
 801cdcc:	2200      	movs	r2, #0
 801cdce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cdd0:	68b9      	ldr	r1, [r7, #8]
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	2202      	movs	r2, #2
 801cdd6:	0018      	movs	r0, r3
 801cdd8:	f000 fc31 	bl	801d63e <USBD_CtlSendData>
              break;
 801cddc:	e006      	b.n	801cdec <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801cdde:	683a      	ldr	r2, [r7, #0]
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	0011      	movs	r1, r2
 801cde4:	0018      	movs	r0, r3
 801cde6:	f000 fbac 	bl	801d542 <USBD_CtlError>
              break;
 801cdea:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801cdec:	e006      	b.n	801cdfc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801cdee:	683a      	ldr	r2, [r7, #0]
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	0011      	movs	r1, r2
 801cdf4:	0018      	movs	r0, r3
 801cdf6:	f000 fba4 	bl	801d542 <USBD_CtlError>
          break;
 801cdfa:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801cdfc:	e006      	b.n	801ce0c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801cdfe:	683a      	ldr	r2, [r7, #0]
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	0011      	movs	r1, r2
 801ce04:	0018      	movs	r0, r3
 801ce06:	f000 fb9c 	bl	801d542 <USBD_CtlError>
      break;
 801ce0a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ce0c:	230f      	movs	r3, #15
 801ce0e:	18fb      	adds	r3, r7, r3
 801ce10:	781b      	ldrb	r3, [r3, #0]
}
 801ce12:	0018      	movs	r0, r3
 801ce14:	46bd      	mov	sp, r7
 801ce16:	b004      	add	sp, #16
 801ce18:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801ce1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b084      	sub	sp, #16
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
 801ce24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ce26:	2308      	movs	r3, #8
 801ce28:	18fb      	adds	r3, r7, r3
 801ce2a:	2200      	movs	r2, #0
 801ce2c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801ce2e:	2300      	movs	r3, #0
 801ce30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ce32:	230b      	movs	r3, #11
 801ce34:	18fb      	adds	r3, r7, r3
 801ce36:	2200      	movs	r2, #0
 801ce38:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	885b      	ldrh	r3, [r3, #2]
 801ce3e:	0a1b      	lsrs	r3, r3, #8
 801ce40:	b29b      	uxth	r3, r3
 801ce42:	2b07      	cmp	r3, #7
 801ce44:	d900      	bls.n	801ce48 <USBD_GetDescriptor+0x2c>
 801ce46:	e159      	b.n	801d0fc <USBD_GetDescriptor+0x2e0>
 801ce48:	009a      	lsls	r2, r3, #2
 801ce4a:	4bcb      	ldr	r3, [pc, #812]	@ (801d178 <USBD_GetDescriptor+0x35c>)
 801ce4c:	18d3      	adds	r3, r2, r3
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ce52:	687a      	ldr	r2, [r7, #4]
 801ce54:	23ac      	movs	r3, #172	@ 0xac
 801ce56:	009b      	lsls	r3, r3, #2
 801ce58:	58d3      	ldr	r3, [r2, r3]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	687a      	ldr	r2, [r7, #4]
 801ce5e:	7c12      	ldrb	r2, [r2, #16]
 801ce60:	2108      	movs	r1, #8
 801ce62:	1879      	adds	r1, r7, r1
 801ce64:	0010      	movs	r0, r2
 801ce66:	4798      	blx	r3
 801ce68:	0003      	movs	r3, r0
 801ce6a:	60fb      	str	r3, [r7, #12]
      break;
 801ce6c:	e153      	b.n	801d116 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	7c1b      	ldrb	r3, [r3, #16]
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d10f      	bne.n	801ce96 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801ce76:	687a      	ldr	r2, [r7, #4]
 801ce78:	23ad      	movs	r3, #173	@ 0xad
 801ce7a:	009b      	lsls	r3, r3, #2
 801ce7c:	58d3      	ldr	r3, [r2, r3]
 801ce7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ce80:	2208      	movs	r2, #8
 801ce82:	18ba      	adds	r2, r7, r2
 801ce84:	0010      	movs	r0, r2
 801ce86:	4798      	blx	r3
 801ce88:	0003      	movs	r3, r0
 801ce8a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ce8c:	68fb      	ldr	r3, [r7, #12]
 801ce8e:	3301      	adds	r3, #1
 801ce90:	2202      	movs	r2, #2
 801ce92:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801ce94:	e13f      	b.n	801d116 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801ce96:	687a      	ldr	r2, [r7, #4]
 801ce98:	23ad      	movs	r3, #173	@ 0xad
 801ce9a:	009b      	lsls	r3, r3, #2
 801ce9c:	58d3      	ldr	r3, [r2, r3]
 801ce9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cea0:	2208      	movs	r2, #8
 801cea2:	18ba      	adds	r2, r7, r2
 801cea4:	0010      	movs	r0, r2
 801cea6:	4798      	blx	r3
 801cea8:	0003      	movs	r3, r0
 801ceaa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	3301      	adds	r3, #1
 801ceb0:	2202      	movs	r2, #2
 801ceb2:	701a      	strb	r2, [r3, #0]
      break;
 801ceb4:	e12f      	b.n	801d116 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801ceb6:	683b      	ldr	r3, [r7, #0]
 801ceb8:	885b      	ldrh	r3, [r3, #2]
 801ceba:	b2db      	uxtb	r3, r3
 801cebc:	2b05      	cmp	r3, #5
 801cebe:	d900      	bls.n	801cec2 <USBD_GetDescriptor+0xa6>
 801cec0:	e0d0      	b.n	801d064 <USBD_GetDescriptor+0x248>
 801cec2:	009a      	lsls	r2, r3, #2
 801cec4:	4bad      	ldr	r3, [pc, #692]	@ (801d17c <USBD_GetDescriptor+0x360>)
 801cec6:	18d3      	adds	r3, r2, r3
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801cecc:	687a      	ldr	r2, [r7, #4]
 801cece:	23ac      	movs	r3, #172	@ 0xac
 801ced0:	009b      	lsls	r3, r3, #2
 801ced2:	58d3      	ldr	r3, [r2, r3]
 801ced4:	685b      	ldr	r3, [r3, #4]
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d00d      	beq.n	801cef6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801ceda:	687a      	ldr	r2, [r7, #4]
 801cedc:	23ac      	movs	r3, #172	@ 0xac
 801cede:	009b      	lsls	r3, r3, #2
 801cee0:	58d3      	ldr	r3, [r2, r3]
 801cee2:	685b      	ldr	r3, [r3, #4]
 801cee4:	687a      	ldr	r2, [r7, #4]
 801cee6:	7c12      	ldrb	r2, [r2, #16]
 801cee8:	2108      	movs	r1, #8
 801ceea:	1879      	adds	r1, r7, r1
 801ceec:	0010      	movs	r0, r2
 801ceee:	4798      	blx	r3
 801cef0:	0003      	movs	r3, r0
 801cef2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cef4:	e0c3      	b.n	801d07e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801cef6:	683a      	ldr	r2, [r7, #0]
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	0011      	movs	r1, r2
 801cefc:	0018      	movs	r0, r3
 801cefe:	f000 fb20 	bl	801d542 <USBD_CtlError>
            err++;
 801cf02:	210b      	movs	r1, #11
 801cf04:	187b      	adds	r3, r7, r1
 801cf06:	781a      	ldrb	r2, [r3, #0]
 801cf08:	187b      	adds	r3, r7, r1
 801cf0a:	3201      	adds	r2, #1
 801cf0c:	701a      	strb	r2, [r3, #0]
          break;
 801cf0e:	e0b6      	b.n	801d07e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801cf10:	687a      	ldr	r2, [r7, #4]
 801cf12:	23ac      	movs	r3, #172	@ 0xac
 801cf14:	009b      	lsls	r3, r3, #2
 801cf16:	58d3      	ldr	r3, [r2, r3]
 801cf18:	689b      	ldr	r3, [r3, #8]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d00d      	beq.n	801cf3a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801cf1e:	687a      	ldr	r2, [r7, #4]
 801cf20:	23ac      	movs	r3, #172	@ 0xac
 801cf22:	009b      	lsls	r3, r3, #2
 801cf24:	58d3      	ldr	r3, [r2, r3]
 801cf26:	689b      	ldr	r3, [r3, #8]
 801cf28:	687a      	ldr	r2, [r7, #4]
 801cf2a:	7c12      	ldrb	r2, [r2, #16]
 801cf2c:	2108      	movs	r1, #8
 801cf2e:	1879      	adds	r1, r7, r1
 801cf30:	0010      	movs	r0, r2
 801cf32:	4798      	blx	r3
 801cf34:	0003      	movs	r3, r0
 801cf36:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cf38:	e0a1      	b.n	801d07e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801cf3a:	683a      	ldr	r2, [r7, #0]
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	0011      	movs	r1, r2
 801cf40:	0018      	movs	r0, r3
 801cf42:	f000 fafe 	bl	801d542 <USBD_CtlError>
            err++;
 801cf46:	210b      	movs	r1, #11
 801cf48:	187b      	adds	r3, r7, r1
 801cf4a:	781a      	ldrb	r2, [r3, #0]
 801cf4c:	187b      	adds	r3, r7, r1
 801cf4e:	3201      	adds	r2, #1
 801cf50:	701a      	strb	r2, [r3, #0]
          break;
 801cf52:	e094      	b.n	801d07e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801cf54:	687a      	ldr	r2, [r7, #4]
 801cf56:	23ac      	movs	r3, #172	@ 0xac
 801cf58:	009b      	lsls	r3, r3, #2
 801cf5a:	58d3      	ldr	r3, [r2, r3]
 801cf5c:	68db      	ldr	r3, [r3, #12]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d00d      	beq.n	801cf7e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801cf62:	687a      	ldr	r2, [r7, #4]
 801cf64:	23ac      	movs	r3, #172	@ 0xac
 801cf66:	009b      	lsls	r3, r3, #2
 801cf68:	58d3      	ldr	r3, [r2, r3]
 801cf6a:	68db      	ldr	r3, [r3, #12]
 801cf6c:	687a      	ldr	r2, [r7, #4]
 801cf6e:	7c12      	ldrb	r2, [r2, #16]
 801cf70:	2108      	movs	r1, #8
 801cf72:	1879      	adds	r1, r7, r1
 801cf74:	0010      	movs	r0, r2
 801cf76:	4798      	blx	r3
 801cf78:	0003      	movs	r3, r0
 801cf7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cf7c:	e07f      	b.n	801d07e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801cf7e:	683a      	ldr	r2, [r7, #0]
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	0011      	movs	r1, r2
 801cf84:	0018      	movs	r0, r3
 801cf86:	f000 fadc 	bl	801d542 <USBD_CtlError>
            err++;
 801cf8a:	210b      	movs	r1, #11
 801cf8c:	187b      	adds	r3, r7, r1
 801cf8e:	781a      	ldrb	r2, [r3, #0]
 801cf90:	187b      	adds	r3, r7, r1
 801cf92:	3201      	adds	r2, #1
 801cf94:	701a      	strb	r2, [r3, #0]
          break;
 801cf96:	e072      	b.n	801d07e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801cf98:	687a      	ldr	r2, [r7, #4]
 801cf9a:	23ac      	movs	r3, #172	@ 0xac
 801cf9c:	009b      	lsls	r3, r3, #2
 801cf9e:	58d3      	ldr	r3, [r2, r3]
 801cfa0:	691b      	ldr	r3, [r3, #16]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d00d      	beq.n	801cfc2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801cfa6:	687a      	ldr	r2, [r7, #4]
 801cfa8:	23ac      	movs	r3, #172	@ 0xac
 801cfaa:	009b      	lsls	r3, r3, #2
 801cfac:	58d3      	ldr	r3, [r2, r3]
 801cfae:	691b      	ldr	r3, [r3, #16]
 801cfb0:	687a      	ldr	r2, [r7, #4]
 801cfb2:	7c12      	ldrb	r2, [r2, #16]
 801cfb4:	2108      	movs	r1, #8
 801cfb6:	1879      	adds	r1, r7, r1
 801cfb8:	0010      	movs	r0, r2
 801cfba:	4798      	blx	r3
 801cfbc:	0003      	movs	r3, r0
 801cfbe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cfc0:	e05d      	b.n	801d07e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801cfc2:	683a      	ldr	r2, [r7, #0]
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	0011      	movs	r1, r2
 801cfc8:	0018      	movs	r0, r3
 801cfca:	f000 faba 	bl	801d542 <USBD_CtlError>
            err++;
 801cfce:	210b      	movs	r1, #11
 801cfd0:	187b      	adds	r3, r7, r1
 801cfd2:	781a      	ldrb	r2, [r3, #0]
 801cfd4:	187b      	adds	r3, r7, r1
 801cfd6:	3201      	adds	r2, #1
 801cfd8:	701a      	strb	r2, [r3, #0]
          break;
 801cfda:	e050      	b.n	801d07e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801cfdc:	687a      	ldr	r2, [r7, #4]
 801cfde:	23ac      	movs	r3, #172	@ 0xac
 801cfe0:	009b      	lsls	r3, r3, #2
 801cfe2:	58d3      	ldr	r3, [r2, r3]
 801cfe4:	695b      	ldr	r3, [r3, #20]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d00d      	beq.n	801d006 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801cfea:	687a      	ldr	r2, [r7, #4]
 801cfec:	23ac      	movs	r3, #172	@ 0xac
 801cfee:	009b      	lsls	r3, r3, #2
 801cff0:	58d3      	ldr	r3, [r2, r3]
 801cff2:	695b      	ldr	r3, [r3, #20]
 801cff4:	687a      	ldr	r2, [r7, #4]
 801cff6:	7c12      	ldrb	r2, [r2, #16]
 801cff8:	2108      	movs	r1, #8
 801cffa:	1879      	adds	r1, r7, r1
 801cffc:	0010      	movs	r0, r2
 801cffe:	4798      	blx	r3
 801d000:	0003      	movs	r3, r0
 801d002:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d004:	e03b      	b.n	801d07e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801d006:	683a      	ldr	r2, [r7, #0]
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	0011      	movs	r1, r2
 801d00c:	0018      	movs	r0, r3
 801d00e:	f000 fa98 	bl	801d542 <USBD_CtlError>
            err++;
 801d012:	210b      	movs	r1, #11
 801d014:	187b      	adds	r3, r7, r1
 801d016:	781a      	ldrb	r2, [r3, #0]
 801d018:	187b      	adds	r3, r7, r1
 801d01a:	3201      	adds	r2, #1
 801d01c:	701a      	strb	r2, [r3, #0]
          break;
 801d01e:	e02e      	b.n	801d07e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801d020:	687a      	ldr	r2, [r7, #4]
 801d022:	23ac      	movs	r3, #172	@ 0xac
 801d024:	009b      	lsls	r3, r3, #2
 801d026:	58d3      	ldr	r3, [r2, r3]
 801d028:	699b      	ldr	r3, [r3, #24]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d00d      	beq.n	801d04a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801d02e:	687a      	ldr	r2, [r7, #4]
 801d030:	23ac      	movs	r3, #172	@ 0xac
 801d032:	009b      	lsls	r3, r3, #2
 801d034:	58d3      	ldr	r3, [r2, r3]
 801d036:	699b      	ldr	r3, [r3, #24]
 801d038:	687a      	ldr	r2, [r7, #4]
 801d03a:	7c12      	ldrb	r2, [r2, #16]
 801d03c:	2108      	movs	r1, #8
 801d03e:	1879      	adds	r1, r7, r1
 801d040:	0010      	movs	r0, r2
 801d042:	4798      	blx	r3
 801d044:	0003      	movs	r3, r0
 801d046:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d048:	e019      	b.n	801d07e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801d04a:	683a      	ldr	r2, [r7, #0]
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	0011      	movs	r1, r2
 801d050:	0018      	movs	r0, r3
 801d052:	f000 fa76 	bl	801d542 <USBD_CtlError>
            err++;
 801d056:	210b      	movs	r1, #11
 801d058:	187b      	adds	r3, r7, r1
 801d05a:	781a      	ldrb	r2, [r3, #0]
 801d05c:	187b      	adds	r3, r7, r1
 801d05e:	3201      	adds	r2, #1
 801d060:	701a      	strb	r2, [r3, #0]
          break;
 801d062:	e00c      	b.n	801d07e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801d064:	683a      	ldr	r2, [r7, #0]
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	0011      	movs	r1, r2
 801d06a:	0018      	movs	r0, r3
 801d06c:	f000 fa69 	bl	801d542 <USBD_CtlError>
          err++;
 801d070:	210b      	movs	r1, #11
 801d072:	187b      	adds	r3, r7, r1
 801d074:	781a      	ldrb	r2, [r3, #0]
 801d076:	187b      	adds	r3, r7, r1
 801d078:	3201      	adds	r2, #1
 801d07a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801d07c:	e04b      	b.n	801d116 <USBD_GetDescriptor+0x2fa>
 801d07e:	e04a      	b.n	801d116 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	7c1b      	ldrb	r3, [r3, #16]
 801d084:	2b00      	cmp	r3, #0
 801d086:	d10b      	bne.n	801d0a0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801d088:	687a      	ldr	r2, [r7, #4]
 801d08a:	23ad      	movs	r3, #173	@ 0xad
 801d08c:	009b      	lsls	r3, r3, #2
 801d08e:	58d3      	ldr	r3, [r2, r3]
 801d090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d092:	2208      	movs	r2, #8
 801d094:	18ba      	adds	r2, r7, r2
 801d096:	0010      	movs	r0, r2
 801d098:	4798      	blx	r3
 801d09a:	0003      	movs	r3, r0
 801d09c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d09e:	e03a      	b.n	801d116 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801d0a0:	683a      	ldr	r2, [r7, #0]
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	0011      	movs	r1, r2
 801d0a6:	0018      	movs	r0, r3
 801d0a8:	f000 fa4b 	bl	801d542 <USBD_CtlError>
        err++;
 801d0ac:	210b      	movs	r1, #11
 801d0ae:	187b      	adds	r3, r7, r1
 801d0b0:	781a      	ldrb	r2, [r3, #0]
 801d0b2:	187b      	adds	r3, r7, r1
 801d0b4:	3201      	adds	r2, #1
 801d0b6:	701a      	strb	r2, [r3, #0]
      break;
 801d0b8:	e02d      	b.n	801d116 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	7c1b      	ldrb	r3, [r3, #16]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d10f      	bne.n	801d0e2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801d0c2:	687a      	ldr	r2, [r7, #4]
 801d0c4:	23ad      	movs	r3, #173	@ 0xad
 801d0c6:	009b      	lsls	r3, r3, #2
 801d0c8:	58d3      	ldr	r3, [r2, r3]
 801d0ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0cc:	2208      	movs	r2, #8
 801d0ce:	18ba      	adds	r2, r7, r2
 801d0d0:	0010      	movs	r0, r2
 801d0d2:	4798      	blx	r3
 801d0d4:	0003      	movs	r3, r0
 801d0d6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801d0d8:	68fb      	ldr	r3, [r7, #12]
 801d0da:	3301      	adds	r3, #1
 801d0dc:	2207      	movs	r2, #7
 801d0de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d0e0:	e019      	b.n	801d116 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801d0e2:	683a      	ldr	r2, [r7, #0]
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	0011      	movs	r1, r2
 801d0e8:	0018      	movs	r0, r3
 801d0ea:	f000 fa2a 	bl	801d542 <USBD_CtlError>
        err++;
 801d0ee:	210b      	movs	r1, #11
 801d0f0:	187b      	adds	r3, r7, r1
 801d0f2:	781a      	ldrb	r2, [r3, #0]
 801d0f4:	187b      	adds	r3, r7, r1
 801d0f6:	3201      	adds	r2, #1
 801d0f8:	701a      	strb	r2, [r3, #0]
      break;
 801d0fa:	e00c      	b.n	801d116 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801d0fc:	683a      	ldr	r2, [r7, #0]
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	0011      	movs	r1, r2
 801d102:	0018      	movs	r0, r3
 801d104:	f000 fa1d 	bl	801d542 <USBD_CtlError>
      err++;
 801d108:	210b      	movs	r1, #11
 801d10a:	187b      	adds	r3, r7, r1
 801d10c:	781a      	ldrb	r2, [r3, #0]
 801d10e:	187b      	adds	r3, r7, r1
 801d110:	3201      	adds	r2, #1
 801d112:	701a      	strb	r2, [r3, #0]
      break;
 801d114:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801d116:	230b      	movs	r3, #11
 801d118:	18fb      	adds	r3, r7, r3
 801d11a:	781b      	ldrb	r3, [r3, #0]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d127      	bne.n	801d170 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801d120:	2108      	movs	r1, #8
 801d122:	187b      	adds	r3, r7, r1
 801d124:	881b      	ldrh	r3, [r3, #0]
 801d126:	2b00      	cmp	r3, #0
 801d128:	d019      	beq.n	801d15e <USBD_GetDescriptor+0x342>
 801d12a:	683b      	ldr	r3, [r7, #0]
 801d12c:	88db      	ldrh	r3, [r3, #6]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d015      	beq.n	801d15e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801d132:	683b      	ldr	r3, [r7, #0]
 801d134:	88da      	ldrh	r2, [r3, #6]
 801d136:	187b      	adds	r3, r7, r1
 801d138:	881b      	ldrh	r3, [r3, #0]
 801d13a:	1c18      	adds	r0, r3, #0
 801d13c:	1c11      	adds	r1, r2, #0
 801d13e:	b28a      	uxth	r2, r1
 801d140:	b283      	uxth	r3, r0
 801d142:	429a      	cmp	r2, r3
 801d144:	d900      	bls.n	801d148 <USBD_GetDescriptor+0x32c>
 801d146:	1c01      	adds	r1, r0, #0
 801d148:	b28a      	uxth	r2, r1
 801d14a:	2108      	movs	r1, #8
 801d14c:	187b      	adds	r3, r7, r1
 801d14e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801d150:	187b      	adds	r3, r7, r1
 801d152:	881a      	ldrh	r2, [r3, #0]
 801d154:	68f9      	ldr	r1, [r7, #12]
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	0018      	movs	r0, r3
 801d15a:	f000 fa70 	bl	801d63e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801d15e:	683b      	ldr	r3, [r7, #0]
 801d160:	88db      	ldrh	r3, [r3, #6]
 801d162:	2b00      	cmp	r3, #0
 801d164:	d105      	bne.n	801d172 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	0018      	movs	r0, r3
 801d16a:	f000 fad2 	bl	801d712 <USBD_CtlSendStatus>
 801d16e:	e000      	b.n	801d172 <USBD_GetDescriptor+0x356>
    return;
 801d170:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801d172:	46bd      	mov	sp, r7
 801d174:	b004      	add	sp, #16
 801d176:	bd80      	pop	{r7, pc}
 801d178:	08026868 	.word	0x08026868
 801d17c:	08026888 	.word	0x08026888

0801d180 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d180:	b590      	push	{r4, r7, lr}
 801d182:	b085      	sub	sp, #20
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]
 801d188:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801d18a:	683b      	ldr	r3, [r7, #0]
 801d18c:	889b      	ldrh	r3, [r3, #4]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d13d      	bne.n	801d20e <USBD_SetAddress+0x8e>
 801d192:	683b      	ldr	r3, [r7, #0]
 801d194:	88db      	ldrh	r3, [r3, #6]
 801d196:	2b00      	cmp	r3, #0
 801d198:	d139      	bne.n	801d20e <USBD_SetAddress+0x8e>
 801d19a:	683b      	ldr	r3, [r7, #0]
 801d19c:	885b      	ldrh	r3, [r3, #2]
 801d19e:	2b7f      	cmp	r3, #127	@ 0x7f
 801d1a0:	d835      	bhi.n	801d20e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801d1a2:	683b      	ldr	r3, [r7, #0]
 801d1a4:	885b      	ldrh	r3, [r3, #2]
 801d1a6:	b2da      	uxtb	r2, r3
 801d1a8:	230f      	movs	r3, #15
 801d1aa:	18fb      	adds	r3, r7, r3
 801d1ac:	217f      	movs	r1, #127	@ 0x7f
 801d1ae:	400a      	ands	r2, r1
 801d1b0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d1b2:	687a      	ldr	r2, [r7, #4]
 801d1b4:	23a7      	movs	r3, #167	@ 0xa7
 801d1b6:	009b      	lsls	r3, r3, #2
 801d1b8:	5cd3      	ldrb	r3, [r2, r3]
 801d1ba:	2b03      	cmp	r3, #3
 801d1bc:	d106      	bne.n	801d1cc <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801d1be:	683a      	ldr	r2, [r7, #0]
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	0011      	movs	r1, r2
 801d1c4:	0018      	movs	r0, r3
 801d1c6:	f000 f9bc 	bl	801d542 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d1ca:	e027      	b.n	801d21c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	240f      	movs	r4, #15
 801d1d0:	193a      	adds	r2, r7, r4
 801d1d2:	4914      	ldr	r1, [pc, #80]	@ (801d224 <USBD_SetAddress+0xa4>)
 801d1d4:	7812      	ldrb	r2, [r2, #0]
 801d1d6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d1d8:	193b      	adds	r3, r7, r4
 801d1da:	781a      	ldrb	r2, [r3, #0]
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	0011      	movs	r1, r2
 801d1e0:	0018      	movs	r0, r3
 801d1e2:	f000 ff5d 	bl	801e0a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	0018      	movs	r0, r3
 801d1ea:	f000 fa92 	bl	801d712 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d1ee:	193b      	adds	r3, r7, r4
 801d1f0:	781b      	ldrb	r3, [r3, #0]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d005      	beq.n	801d202 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d1f6:	687a      	ldr	r2, [r7, #4]
 801d1f8:	23a7      	movs	r3, #167	@ 0xa7
 801d1fa:	009b      	lsls	r3, r3, #2
 801d1fc:	2102      	movs	r1, #2
 801d1fe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d200:	e00c      	b.n	801d21c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d202:	687a      	ldr	r2, [r7, #4]
 801d204:	23a7      	movs	r3, #167	@ 0xa7
 801d206:	009b      	lsls	r3, r3, #2
 801d208:	2101      	movs	r1, #1
 801d20a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d20c:	e006      	b.n	801d21c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d20e:	683a      	ldr	r2, [r7, #0]
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	0011      	movs	r1, r2
 801d214:	0018      	movs	r0, r3
 801d216:	f000 f994 	bl	801d542 <USBD_CtlError>
  }
}
 801d21a:	46c0      	nop			@ (mov r8, r8)
 801d21c:	46c0      	nop			@ (mov r8, r8)
 801d21e:	46bd      	mov	sp, r7
 801d220:	b005      	add	sp, #20
 801d222:	bd90      	pop	{r4, r7, pc}
 801d224:	0000029e 	.word	0x0000029e

0801d228 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d228:	b580      	push	{r7, lr}
 801d22a:	b082      	sub	sp, #8
 801d22c:	af00      	add	r7, sp, #0
 801d22e:	6078      	str	r0, [r7, #4]
 801d230:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d232:	683b      	ldr	r3, [r7, #0]
 801d234:	885b      	ldrh	r3, [r3, #2]
 801d236:	b2da      	uxtb	r2, r3
 801d238:	4b4c      	ldr	r3, [pc, #304]	@ (801d36c <USBD_SetConfig+0x144>)
 801d23a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d23c:	4b4b      	ldr	r3, [pc, #300]	@ (801d36c <USBD_SetConfig+0x144>)
 801d23e:	781b      	ldrb	r3, [r3, #0]
 801d240:	2b01      	cmp	r3, #1
 801d242:	d906      	bls.n	801d252 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801d244:	683a      	ldr	r2, [r7, #0]
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	0011      	movs	r1, r2
 801d24a:	0018      	movs	r0, r3
 801d24c:	f000 f979 	bl	801d542 <USBD_CtlError>
 801d250:	e088      	b.n	801d364 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801d252:	687a      	ldr	r2, [r7, #4]
 801d254:	23a7      	movs	r3, #167	@ 0xa7
 801d256:	009b      	lsls	r3, r3, #2
 801d258:	5cd3      	ldrb	r3, [r2, r3]
 801d25a:	2b02      	cmp	r3, #2
 801d25c:	d002      	beq.n	801d264 <USBD_SetConfig+0x3c>
 801d25e:	2b03      	cmp	r3, #3
 801d260:	d029      	beq.n	801d2b6 <USBD_SetConfig+0x8e>
 801d262:	e071      	b.n	801d348 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801d264:	4b41      	ldr	r3, [pc, #260]	@ (801d36c <USBD_SetConfig+0x144>)
 801d266:	781b      	ldrb	r3, [r3, #0]
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d01f      	beq.n	801d2ac <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801d26c:	4b3f      	ldr	r3, [pc, #252]	@ (801d36c <USBD_SetConfig+0x144>)
 801d26e:	781b      	ldrb	r3, [r3, #0]
 801d270:	001a      	movs	r2, r3
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d276:	687a      	ldr	r2, [r7, #4]
 801d278:	23a7      	movs	r3, #167	@ 0xa7
 801d27a:	009b      	lsls	r3, r3, #2
 801d27c:	2103      	movs	r1, #3
 801d27e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d280:	4b3a      	ldr	r3, [pc, #232]	@ (801d36c <USBD_SetConfig+0x144>)
 801d282:	781a      	ldrb	r2, [r3, #0]
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	0011      	movs	r1, r2
 801d288:	0018      	movs	r0, r3
 801d28a:	f7ff f8c6 	bl	801c41a <USBD_SetClassConfig>
 801d28e:	0003      	movs	r3, r0
 801d290:	2b02      	cmp	r3, #2
 801d292:	d106      	bne.n	801d2a2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801d294:	683a      	ldr	r2, [r7, #0]
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	0011      	movs	r1, r2
 801d29a:	0018      	movs	r0, r3
 801d29c:	f000 f951 	bl	801d542 <USBD_CtlError>
            return;
 801d2a0:	e060      	b.n	801d364 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	0018      	movs	r0, r3
 801d2a6:	f000 fa34 	bl	801d712 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d2aa:	e05b      	b.n	801d364 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	0018      	movs	r0, r3
 801d2b0:	f000 fa2f 	bl	801d712 <USBD_CtlSendStatus>
        break;
 801d2b4:	e056      	b.n	801d364 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801d2b6:	4b2d      	ldr	r3, [pc, #180]	@ (801d36c <USBD_SetConfig+0x144>)
 801d2b8:	781b      	ldrb	r3, [r3, #0]
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d115      	bne.n	801d2ea <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d2be:	687a      	ldr	r2, [r7, #4]
 801d2c0:	23a7      	movs	r3, #167	@ 0xa7
 801d2c2:	009b      	lsls	r3, r3, #2
 801d2c4:	2102      	movs	r1, #2
 801d2c6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801d2c8:	4b28      	ldr	r3, [pc, #160]	@ (801d36c <USBD_SetConfig+0x144>)
 801d2ca:	781b      	ldrb	r3, [r3, #0]
 801d2cc:	001a      	movs	r2, r3
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801d2d2:	4b26      	ldr	r3, [pc, #152]	@ (801d36c <USBD_SetConfig+0x144>)
 801d2d4:	781a      	ldrb	r2, [r3, #0]
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	0011      	movs	r1, r2
 801d2da:	0018      	movs	r0, r3
 801d2dc:	f7ff f8c4 	bl	801c468 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	0018      	movs	r0, r3
 801d2e4:	f000 fa15 	bl	801d712 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d2e8:	e03c      	b.n	801d364 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801d2ea:	4b20      	ldr	r3, [pc, #128]	@ (801d36c <USBD_SetConfig+0x144>)
 801d2ec:	781b      	ldrb	r3, [r3, #0]
 801d2ee:	001a      	movs	r2, r3
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	685b      	ldr	r3, [r3, #4]
 801d2f4:	429a      	cmp	r2, r3
 801d2f6:	d022      	beq.n	801d33e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	685b      	ldr	r3, [r3, #4]
 801d2fc:	b2da      	uxtb	r2, r3
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	0011      	movs	r1, r2
 801d302:	0018      	movs	r0, r3
 801d304:	f7ff f8b0 	bl	801c468 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801d308:	4b18      	ldr	r3, [pc, #96]	@ (801d36c <USBD_SetConfig+0x144>)
 801d30a:	781b      	ldrb	r3, [r3, #0]
 801d30c:	001a      	movs	r2, r3
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d312:	4b16      	ldr	r3, [pc, #88]	@ (801d36c <USBD_SetConfig+0x144>)
 801d314:	781a      	ldrb	r2, [r3, #0]
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	0011      	movs	r1, r2
 801d31a:	0018      	movs	r0, r3
 801d31c:	f7ff f87d 	bl	801c41a <USBD_SetClassConfig>
 801d320:	0003      	movs	r3, r0
 801d322:	2b02      	cmp	r3, #2
 801d324:	d106      	bne.n	801d334 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801d326:	683a      	ldr	r2, [r7, #0]
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	0011      	movs	r1, r2
 801d32c:	0018      	movs	r0, r3
 801d32e:	f000 f908 	bl	801d542 <USBD_CtlError>
            return;
 801d332:	e017      	b.n	801d364 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	0018      	movs	r0, r3
 801d338:	f000 f9eb 	bl	801d712 <USBD_CtlSendStatus>
        break;
 801d33c:	e012      	b.n	801d364 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	0018      	movs	r0, r3
 801d342:	f000 f9e6 	bl	801d712 <USBD_CtlSendStatus>
        break;
 801d346:	e00d      	b.n	801d364 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801d348:	683a      	ldr	r2, [r7, #0]
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	0011      	movs	r1, r2
 801d34e:	0018      	movs	r0, r3
 801d350:	f000 f8f7 	bl	801d542 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801d354:	4b05      	ldr	r3, [pc, #20]	@ (801d36c <USBD_SetConfig+0x144>)
 801d356:	781a      	ldrb	r2, [r3, #0]
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	0011      	movs	r1, r2
 801d35c:	0018      	movs	r0, r3
 801d35e:	f7ff f883 	bl	801c468 <USBD_ClrClassConfig>
        break;
 801d362:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801d364:	46bd      	mov	sp, r7
 801d366:	b002      	add	sp, #8
 801d368:	bd80      	pop	{r7, pc}
 801d36a:	46c0      	nop			@ (mov r8, r8)
 801d36c:	20002114 	.word	0x20002114

0801d370 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d370:	b580      	push	{r7, lr}
 801d372:	b082      	sub	sp, #8
 801d374:	af00      	add	r7, sp, #0
 801d376:	6078      	str	r0, [r7, #4]
 801d378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d37a:	683b      	ldr	r3, [r7, #0]
 801d37c:	88db      	ldrh	r3, [r3, #6]
 801d37e:	2b01      	cmp	r3, #1
 801d380:	d006      	beq.n	801d390 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801d382:	683a      	ldr	r2, [r7, #0]
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	0011      	movs	r1, r2
 801d388:	0018      	movs	r0, r3
 801d38a:	f000 f8da 	bl	801d542 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d38e:	e026      	b.n	801d3de <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801d390:	687a      	ldr	r2, [r7, #4]
 801d392:	23a7      	movs	r3, #167	@ 0xa7
 801d394:	009b      	lsls	r3, r3, #2
 801d396:	5cd3      	ldrb	r3, [r2, r3]
 801d398:	2b02      	cmp	r3, #2
 801d39a:	dc02      	bgt.n	801d3a2 <USBD_GetConfig+0x32>
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	dc03      	bgt.n	801d3a8 <USBD_GetConfig+0x38>
 801d3a0:	e016      	b.n	801d3d0 <USBD_GetConfig+0x60>
 801d3a2:	2b03      	cmp	r3, #3
 801d3a4:	d00c      	beq.n	801d3c0 <USBD_GetConfig+0x50>
 801d3a6:	e013      	b.n	801d3d0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	2200      	movs	r2, #0
 801d3ac:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	3308      	adds	r3, #8
 801d3b2:	0019      	movs	r1, r3
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	2201      	movs	r2, #1
 801d3b8:	0018      	movs	r0, r3
 801d3ba:	f000 f940 	bl	801d63e <USBD_CtlSendData>
        break;
 801d3be:	e00e      	b.n	801d3de <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	1d19      	adds	r1, r3, #4
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	2201      	movs	r2, #1
 801d3c8:	0018      	movs	r0, r3
 801d3ca:	f000 f938 	bl	801d63e <USBD_CtlSendData>
        break;
 801d3ce:	e006      	b.n	801d3de <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801d3d0:	683a      	ldr	r2, [r7, #0]
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	0011      	movs	r1, r2
 801d3d6:	0018      	movs	r0, r3
 801d3d8:	f000 f8b3 	bl	801d542 <USBD_CtlError>
        break;
 801d3dc:	46c0      	nop			@ (mov r8, r8)
}
 801d3de:	46c0      	nop			@ (mov r8, r8)
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	b002      	add	sp, #8
 801d3e4:	bd80      	pop	{r7, pc}

0801d3e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d3e6:	b580      	push	{r7, lr}
 801d3e8:	b082      	sub	sp, #8
 801d3ea:	af00      	add	r7, sp, #0
 801d3ec:	6078      	str	r0, [r7, #4]
 801d3ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d3f0:	687a      	ldr	r2, [r7, #4]
 801d3f2:	23a7      	movs	r3, #167	@ 0xa7
 801d3f4:	009b      	lsls	r3, r3, #2
 801d3f6:	5cd3      	ldrb	r3, [r2, r3]
 801d3f8:	3b01      	subs	r3, #1
 801d3fa:	2b02      	cmp	r3, #2
 801d3fc:	d822      	bhi.n	801d444 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d3fe:	683b      	ldr	r3, [r7, #0]
 801d400:	88db      	ldrh	r3, [r3, #6]
 801d402:	2b02      	cmp	r3, #2
 801d404:	d006      	beq.n	801d414 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801d406:	683a      	ldr	r2, [r7, #0]
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	0011      	movs	r1, r2
 801d40c:	0018      	movs	r0, r3
 801d40e:	f000 f898 	bl	801d542 <USBD_CtlError>
        break;
 801d412:	e01e      	b.n	801d452 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	2201      	movs	r2, #1
 801d418:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801d41a:	687a      	ldr	r2, [r7, #4]
 801d41c:	23a9      	movs	r3, #169	@ 0xa9
 801d41e:	009b      	lsls	r3, r3, #2
 801d420:	58d3      	ldr	r3, [r2, r3]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d005      	beq.n	801d432 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	68db      	ldr	r3, [r3, #12]
 801d42a:	2202      	movs	r2, #2
 801d42c:	431a      	orrs	r2, r3
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	330c      	adds	r3, #12
 801d436:	0019      	movs	r1, r3
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	2202      	movs	r2, #2
 801d43c:	0018      	movs	r0, r3
 801d43e:	f000 f8fe 	bl	801d63e <USBD_CtlSendData>
      break;
 801d442:	e006      	b.n	801d452 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801d444:	683a      	ldr	r2, [r7, #0]
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	0011      	movs	r1, r2
 801d44a:	0018      	movs	r0, r3
 801d44c:	f000 f879 	bl	801d542 <USBD_CtlError>
      break;
 801d450:	46c0      	nop			@ (mov r8, r8)
  }
}
 801d452:	46c0      	nop			@ (mov r8, r8)
 801d454:	46bd      	mov	sp, r7
 801d456:	b002      	add	sp, #8
 801d458:	bd80      	pop	{r7, pc}

0801d45a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d45a:	b580      	push	{r7, lr}
 801d45c:	b082      	sub	sp, #8
 801d45e:	af00      	add	r7, sp, #0
 801d460:	6078      	str	r0, [r7, #4]
 801d462:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d464:	683b      	ldr	r3, [r7, #0]
 801d466:	885b      	ldrh	r3, [r3, #2]
 801d468:	2b01      	cmp	r3, #1
 801d46a:	d108      	bne.n	801d47e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801d46c:	687a      	ldr	r2, [r7, #4]
 801d46e:	23a9      	movs	r3, #169	@ 0xa9
 801d470:	009b      	lsls	r3, r3, #2
 801d472:	2101      	movs	r1, #1
 801d474:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	0018      	movs	r0, r3
 801d47a:	f000 f94a 	bl	801d712 <USBD_CtlSendStatus>
  }
}
 801d47e:	46c0      	nop			@ (mov r8, r8)
 801d480:	46bd      	mov	sp, r7
 801d482:	b002      	add	sp, #8
 801d484:	bd80      	pop	{r7, pc}

0801d486 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d486:	b580      	push	{r7, lr}
 801d488:	b082      	sub	sp, #8
 801d48a:	af00      	add	r7, sp, #0
 801d48c:	6078      	str	r0, [r7, #4]
 801d48e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d490:	687a      	ldr	r2, [r7, #4]
 801d492:	23a7      	movs	r3, #167	@ 0xa7
 801d494:	009b      	lsls	r3, r3, #2
 801d496:	5cd3      	ldrb	r3, [r2, r3]
 801d498:	3b01      	subs	r3, #1
 801d49a:	2b02      	cmp	r3, #2
 801d49c:	d80d      	bhi.n	801d4ba <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d49e:	683b      	ldr	r3, [r7, #0]
 801d4a0:	885b      	ldrh	r3, [r3, #2]
 801d4a2:	2b01      	cmp	r3, #1
 801d4a4:	d110      	bne.n	801d4c8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801d4a6:	687a      	ldr	r2, [r7, #4]
 801d4a8:	23a9      	movs	r3, #169	@ 0xa9
 801d4aa:	009b      	lsls	r3, r3, #2
 801d4ac:	2100      	movs	r1, #0
 801d4ae:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	0018      	movs	r0, r3
 801d4b4:	f000 f92d 	bl	801d712 <USBD_CtlSendStatus>
      }
      break;
 801d4b8:	e006      	b.n	801d4c8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801d4ba:	683a      	ldr	r2, [r7, #0]
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	0011      	movs	r1, r2
 801d4c0:	0018      	movs	r0, r3
 801d4c2:	f000 f83e 	bl	801d542 <USBD_CtlError>
      break;
 801d4c6:	e000      	b.n	801d4ca <USBD_ClrFeature+0x44>
      break;
 801d4c8:	46c0      	nop			@ (mov r8, r8)
  }
}
 801d4ca:	46c0      	nop			@ (mov r8, r8)
 801d4cc:	46bd      	mov	sp, r7
 801d4ce:	b002      	add	sp, #8
 801d4d0:	bd80      	pop	{r7, pc}

0801d4d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d4d2:	b580      	push	{r7, lr}
 801d4d4:	b082      	sub	sp, #8
 801d4d6:	af00      	add	r7, sp, #0
 801d4d8:	6078      	str	r0, [r7, #4]
 801d4da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801d4dc:	683b      	ldr	r3, [r7, #0]
 801d4de:	781a      	ldrb	r2, [r3, #0]
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801d4e4:	683b      	ldr	r3, [r7, #0]
 801d4e6:	785a      	ldrb	r2, [r3, #1]
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801d4ec:	683b      	ldr	r3, [r7, #0]
 801d4ee:	3302      	adds	r3, #2
 801d4f0:	781b      	ldrb	r3, [r3, #0]
 801d4f2:	001a      	movs	r2, r3
 801d4f4:	683b      	ldr	r3, [r7, #0]
 801d4f6:	3303      	adds	r3, #3
 801d4f8:	781b      	ldrb	r3, [r3, #0]
 801d4fa:	021b      	lsls	r3, r3, #8
 801d4fc:	b29b      	uxth	r3, r3
 801d4fe:	18d3      	adds	r3, r2, r3
 801d500:	b29a      	uxth	r2, r3
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801d506:	683b      	ldr	r3, [r7, #0]
 801d508:	3304      	adds	r3, #4
 801d50a:	781b      	ldrb	r3, [r3, #0]
 801d50c:	001a      	movs	r2, r3
 801d50e:	683b      	ldr	r3, [r7, #0]
 801d510:	3305      	adds	r3, #5
 801d512:	781b      	ldrb	r3, [r3, #0]
 801d514:	021b      	lsls	r3, r3, #8
 801d516:	b29b      	uxth	r3, r3
 801d518:	18d3      	adds	r3, r2, r3
 801d51a:	b29a      	uxth	r2, r3
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801d520:	683b      	ldr	r3, [r7, #0]
 801d522:	3306      	adds	r3, #6
 801d524:	781b      	ldrb	r3, [r3, #0]
 801d526:	001a      	movs	r2, r3
 801d528:	683b      	ldr	r3, [r7, #0]
 801d52a:	3307      	adds	r3, #7
 801d52c:	781b      	ldrb	r3, [r3, #0]
 801d52e:	021b      	lsls	r3, r3, #8
 801d530:	b29b      	uxth	r3, r3
 801d532:	18d3      	adds	r3, r2, r3
 801d534:	b29a      	uxth	r2, r3
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	80da      	strh	r2, [r3, #6]

}
 801d53a:	46c0      	nop			@ (mov r8, r8)
 801d53c:	46bd      	mov	sp, r7
 801d53e:	b002      	add	sp, #8
 801d540:	bd80      	pop	{r7, pc}

0801d542 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801d542:	b580      	push	{r7, lr}
 801d544:	b082      	sub	sp, #8
 801d546:	af00      	add	r7, sp, #0
 801d548:	6078      	str	r0, [r7, #4]
 801d54a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	2180      	movs	r1, #128	@ 0x80
 801d550:	0018      	movs	r0, r3
 801d552:	f000 fd1e 	bl	801df92 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	2100      	movs	r1, #0
 801d55a:	0018      	movs	r0, r3
 801d55c:	f000 fd19 	bl	801df92 <USBD_LL_StallEP>
}
 801d560:	46c0      	nop			@ (mov r8, r8)
 801d562:	46bd      	mov	sp, r7
 801d564:	b002      	add	sp, #8
 801d566:	bd80      	pop	{r7, pc}

0801d568 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d568:	b590      	push	{r4, r7, lr}
 801d56a:	b087      	sub	sp, #28
 801d56c:	af00      	add	r7, sp, #0
 801d56e:	60f8      	str	r0, [r7, #12]
 801d570:	60b9      	str	r1, [r7, #8]
 801d572:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801d574:	2417      	movs	r4, #23
 801d576:	193b      	adds	r3, r7, r4
 801d578:	2200      	movs	r2, #0
 801d57a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d03c      	beq.n	801d5fc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	0018      	movs	r0, r3
 801d586:	f000 f83d 	bl	801d604 <USBD_GetLen>
 801d58a:	0003      	movs	r3, r0
 801d58c:	3301      	adds	r3, #1
 801d58e:	b29b      	uxth	r3, r3
 801d590:	18db      	adds	r3, r3, r3
 801d592:	b29a      	uxth	r2, r3
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801d598:	193b      	adds	r3, r7, r4
 801d59a:	781b      	ldrb	r3, [r3, #0]
 801d59c:	193a      	adds	r2, r7, r4
 801d59e:	1c59      	adds	r1, r3, #1
 801d5a0:	7011      	strb	r1, [r2, #0]
 801d5a2:	001a      	movs	r2, r3
 801d5a4:	68bb      	ldr	r3, [r7, #8]
 801d5a6:	189b      	adds	r3, r3, r2
 801d5a8:	687a      	ldr	r2, [r7, #4]
 801d5aa:	7812      	ldrb	r2, [r2, #0]
 801d5ac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801d5ae:	193b      	adds	r3, r7, r4
 801d5b0:	781b      	ldrb	r3, [r3, #0]
 801d5b2:	193a      	adds	r2, r7, r4
 801d5b4:	1c59      	adds	r1, r3, #1
 801d5b6:	7011      	strb	r1, [r2, #0]
 801d5b8:	001a      	movs	r2, r3
 801d5ba:	68bb      	ldr	r3, [r7, #8]
 801d5bc:	189b      	adds	r3, r3, r2
 801d5be:	2203      	movs	r2, #3
 801d5c0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801d5c2:	e017      	b.n	801d5f4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	1c5a      	adds	r2, r3, #1
 801d5c8:	60fa      	str	r2, [r7, #12]
 801d5ca:	2417      	movs	r4, #23
 801d5cc:	193a      	adds	r2, r7, r4
 801d5ce:	7812      	ldrb	r2, [r2, #0]
 801d5d0:	1939      	adds	r1, r7, r4
 801d5d2:	1c50      	adds	r0, r2, #1
 801d5d4:	7008      	strb	r0, [r1, #0]
 801d5d6:	0011      	movs	r1, r2
 801d5d8:	68ba      	ldr	r2, [r7, #8]
 801d5da:	1852      	adds	r2, r2, r1
 801d5dc:	781b      	ldrb	r3, [r3, #0]
 801d5de:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801d5e0:	193b      	adds	r3, r7, r4
 801d5e2:	781b      	ldrb	r3, [r3, #0]
 801d5e4:	193a      	adds	r2, r7, r4
 801d5e6:	1c59      	adds	r1, r3, #1
 801d5e8:	7011      	strb	r1, [r2, #0]
 801d5ea:	001a      	movs	r2, r3
 801d5ec:	68bb      	ldr	r3, [r7, #8]
 801d5ee:	189b      	adds	r3, r3, r2
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	781b      	ldrb	r3, [r3, #0]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d1e3      	bne.n	801d5c4 <USBD_GetString+0x5c>
    }
  }
}
 801d5fc:	46c0      	nop			@ (mov r8, r8)
 801d5fe:	46bd      	mov	sp, r7
 801d600:	b007      	add	sp, #28
 801d602:	bd90      	pop	{r4, r7, pc}

0801d604 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801d604:	b580      	push	{r7, lr}
 801d606:	b084      	sub	sp, #16
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801d60c:	230f      	movs	r3, #15
 801d60e:	18fb      	adds	r3, r7, r3
 801d610:	2200      	movs	r2, #0
 801d612:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801d614:	e008      	b.n	801d628 <USBD_GetLen+0x24>
  {
    len++;
 801d616:	210f      	movs	r1, #15
 801d618:	187b      	adds	r3, r7, r1
 801d61a:	781a      	ldrb	r2, [r3, #0]
 801d61c:	187b      	adds	r3, r7, r1
 801d61e:	3201      	adds	r2, #1
 801d620:	701a      	strb	r2, [r3, #0]
    buf++;
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	3301      	adds	r3, #1
 801d626:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	781b      	ldrb	r3, [r3, #0]
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d1f2      	bne.n	801d616 <USBD_GetLen+0x12>
  }

  return len;
 801d630:	230f      	movs	r3, #15
 801d632:	18fb      	adds	r3, r7, r3
 801d634:	781b      	ldrb	r3, [r3, #0]
}
 801d636:	0018      	movs	r0, r3
 801d638:	46bd      	mov	sp, r7
 801d63a:	b004      	add	sp, #16
 801d63c:	bd80      	pop	{r7, pc}

0801d63e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801d63e:	b580      	push	{r7, lr}
 801d640:	b084      	sub	sp, #16
 801d642:	af00      	add	r7, sp, #0
 801d644:	60f8      	str	r0, [r7, #12]
 801d646:	60b9      	str	r1, [r7, #8]
 801d648:	1dbb      	adds	r3, r7, #6
 801d64a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801d64c:	68fa      	ldr	r2, [r7, #12]
 801d64e:	23a5      	movs	r3, #165	@ 0xa5
 801d650:	009b      	lsls	r3, r3, #2
 801d652:	2102      	movs	r1, #2
 801d654:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801d656:	1dbb      	adds	r3, r7, #6
 801d658:	881a      	ldrh	r2, [r3, #0]
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801d65e:	1dbb      	adds	r3, r7, #6
 801d660:	881a      	ldrh	r2, [r3, #0]
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d666:	1dbb      	adds	r3, r7, #6
 801d668:	881b      	ldrh	r3, [r3, #0]
 801d66a:	68ba      	ldr	r2, [r7, #8]
 801d66c:	68f8      	ldr	r0, [r7, #12]
 801d66e:	2100      	movs	r1, #0
 801d670:	f000 fd41 	bl	801e0f6 <USBD_LL_Transmit>

  return USBD_OK;
 801d674:	2300      	movs	r3, #0
}
 801d676:	0018      	movs	r0, r3
 801d678:	46bd      	mov	sp, r7
 801d67a:	b004      	add	sp, #16
 801d67c:	bd80      	pop	{r7, pc}

0801d67e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801d67e:	b580      	push	{r7, lr}
 801d680:	b084      	sub	sp, #16
 801d682:	af00      	add	r7, sp, #0
 801d684:	60f8      	str	r0, [r7, #12]
 801d686:	60b9      	str	r1, [r7, #8]
 801d688:	1dbb      	adds	r3, r7, #6
 801d68a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d68c:	1dbb      	adds	r3, r7, #6
 801d68e:	881b      	ldrh	r3, [r3, #0]
 801d690:	68ba      	ldr	r2, [r7, #8]
 801d692:	68f8      	ldr	r0, [r7, #12]
 801d694:	2100      	movs	r1, #0
 801d696:	f000 fd2e 	bl	801e0f6 <USBD_LL_Transmit>

  return USBD_OK;
 801d69a:	2300      	movs	r3, #0
}
 801d69c:	0018      	movs	r0, r3
 801d69e:	46bd      	mov	sp, r7
 801d6a0:	b004      	add	sp, #16
 801d6a2:	bd80      	pop	{r7, pc}

0801d6a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801d6a4:	b580      	push	{r7, lr}
 801d6a6:	b084      	sub	sp, #16
 801d6a8:	af00      	add	r7, sp, #0
 801d6aa:	60f8      	str	r0, [r7, #12]
 801d6ac:	60b9      	str	r1, [r7, #8]
 801d6ae:	1dbb      	adds	r3, r7, #6
 801d6b0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d6b2:	68fa      	ldr	r2, [r7, #12]
 801d6b4:	23a5      	movs	r3, #165	@ 0xa5
 801d6b6:	009b      	lsls	r3, r3, #2
 801d6b8:	2103      	movs	r1, #3
 801d6ba:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801d6bc:	1dbb      	adds	r3, r7, #6
 801d6be:	8819      	ldrh	r1, [r3, #0]
 801d6c0:	68fa      	ldr	r2, [r7, #12]
 801d6c2:	23ae      	movs	r3, #174	@ 0xae
 801d6c4:	005b      	lsls	r3, r3, #1
 801d6c6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801d6c8:	1dbb      	adds	r3, r7, #6
 801d6ca:	8819      	ldrh	r1, [r3, #0]
 801d6cc:	68fa      	ldr	r2, [r7, #12]
 801d6ce:	23b0      	movs	r3, #176	@ 0xb0
 801d6d0:	005b      	lsls	r3, r3, #1
 801d6d2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d6d4:	1dbb      	adds	r3, r7, #6
 801d6d6:	881b      	ldrh	r3, [r3, #0]
 801d6d8:	68ba      	ldr	r2, [r7, #8]
 801d6da:	68f8      	ldr	r0, [r7, #12]
 801d6dc:	2100      	movs	r1, #0
 801d6de:	f000 fd41 	bl	801e164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d6e2:	2300      	movs	r3, #0
}
 801d6e4:	0018      	movs	r0, r3
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	b004      	add	sp, #16
 801d6ea:	bd80      	pop	{r7, pc}

0801d6ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801d6ec:	b580      	push	{r7, lr}
 801d6ee:	b084      	sub	sp, #16
 801d6f0:	af00      	add	r7, sp, #0
 801d6f2:	60f8      	str	r0, [r7, #12]
 801d6f4:	60b9      	str	r1, [r7, #8]
 801d6f6:	1dbb      	adds	r3, r7, #6
 801d6f8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d6fa:	1dbb      	adds	r3, r7, #6
 801d6fc:	881b      	ldrh	r3, [r3, #0]
 801d6fe:	68ba      	ldr	r2, [r7, #8]
 801d700:	68f8      	ldr	r0, [r7, #12]
 801d702:	2100      	movs	r1, #0
 801d704:	f000 fd2e 	bl	801e164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d708:	2300      	movs	r3, #0
}
 801d70a:	0018      	movs	r0, r3
 801d70c:	46bd      	mov	sp, r7
 801d70e:	b004      	add	sp, #16
 801d710:	bd80      	pop	{r7, pc}

0801d712 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801d712:	b580      	push	{r7, lr}
 801d714:	b082      	sub	sp, #8
 801d716:	af00      	add	r7, sp, #0
 801d718:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801d71a:	687a      	ldr	r2, [r7, #4]
 801d71c:	23a5      	movs	r3, #165	@ 0xa5
 801d71e:	009b      	lsls	r3, r3, #2
 801d720:	2104      	movs	r1, #4
 801d722:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d724:	6878      	ldr	r0, [r7, #4]
 801d726:	2300      	movs	r3, #0
 801d728:	2200      	movs	r2, #0
 801d72a:	2100      	movs	r1, #0
 801d72c:	f000 fce3 	bl	801e0f6 <USBD_LL_Transmit>

  return USBD_OK;
 801d730:	2300      	movs	r3, #0
}
 801d732:	0018      	movs	r0, r3
 801d734:	46bd      	mov	sp, r7
 801d736:	b002      	add	sp, #8
 801d738:	bd80      	pop	{r7, pc}

0801d73a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d73a:	b580      	push	{r7, lr}
 801d73c:	b082      	sub	sp, #8
 801d73e:	af00      	add	r7, sp, #0
 801d740:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d742:	687a      	ldr	r2, [r7, #4]
 801d744:	23a5      	movs	r3, #165	@ 0xa5
 801d746:	009b      	lsls	r3, r3, #2
 801d748:	2105      	movs	r1, #5
 801d74a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d74c:	6878      	ldr	r0, [r7, #4]
 801d74e:	2300      	movs	r3, #0
 801d750:	2200      	movs	r2, #0
 801d752:	2100      	movs	r1, #0
 801d754:	f000 fd06 	bl	801e164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d758:	2300      	movs	r3, #0
}
 801d75a:	0018      	movs	r0, r3
 801d75c:	46bd      	mov	sp, r7
 801d75e:	b002      	add	sp, #8
 801d760:	bd80      	pop	{r7, pc}
	...

0801d764 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d764:	b580      	push	{r7, lr}
 801d766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d768:	4914      	ldr	r1, [pc, #80]	@ (801d7bc <MX_USB_DEVICE_Init+0x58>)
 801d76a:	4b15      	ldr	r3, [pc, #84]	@ (801d7c0 <MX_USB_DEVICE_Init+0x5c>)
 801d76c:	2200      	movs	r2, #0
 801d76e:	0018      	movs	r0, r3
 801d770:	f7fe fdec 	bl	801c34c <USBD_Init>
 801d774:	1e03      	subs	r3, r0, #0
 801d776:	d001      	beq.n	801d77c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d778:	f7eb fae4 	bl	8008d44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d77c:	4a11      	ldr	r2, [pc, #68]	@ (801d7c4 <MX_USB_DEVICE_Init+0x60>)
 801d77e:	4b10      	ldr	r3, [pc, #64]	@ (801d7c0 <MX_USB_DEVICE_Init+0x5c>)
 801d780:	0011      	movs	r1, r2
 801d782:	0018      	movs	r0, r3
 801d784:	f7fe fe13 	bl	801c3ae <USBD_RegisterClass>
 801d788:	1e03      	subs	r3, r0, #0
 801d78a:	d001      	beq.n	801d790 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801d78c:	f7eb fada 	bl	8008d44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d790:	4a0d      	ldr	r2, [pc, #52]	@ (801d7c8 <MX_USB_DEVICE_Init+0x64>)
 801d792:	4b0b      	ldr	r3, [pc, #44]	@ (801d7c0 <MX_USB_DEVICE_Init+0x5c>)
 801d794:	0011      	movs	r1, r2
 801d796:	0018      	movs	r0, r3
 801d798:	f7fe fd28 	bl	801c1ec <USBD_CDC_RegisterInterface>
 801d79c:	1e03      	subs	r3, r0, #0
 801d79e:	d001      	beq.n	801d7a4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801d7a0:	f7eb fad0 	bl	8008d44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d7a4:	4b06      	ldr	r3, [pc, #24]	@ (801d7c0 <MX_USB_DEVICE_Init+0x5c>)
 801d7a6:	0018      	movs	r0, r3
 801d7a8:	f7fe fe21 	bl	801c3ee <USBD_Start>
 801d7ac:	1e03      	subs	r3, r0, #0
 801d7ae:	d001      	beq.n	801d7b4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801d7b0:	f7eb fac8 	bl	8008d44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d7b4:	46c0      	nop			@ (mov r8, r8)
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	bd80      	pop	{r7, pc}
 801d7ba:	46c0      	nop			@ (mov r8, r8)
 801d7bc:	20000204 	.word	0x20000204
 801d7c0:	20002118 	.word	0x20002118
 801d7c4:	200000f0 	.word	0x200000f0
 801d7c8:	200001f4 	.word	0x200001f4

0801d7cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d7cc:	b580      	push	{r7, lr}
 801d7ce:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d7d0:	4907      	ldr	r1, [pc, #28]	@ (801d7f0 <CDC_Init_FS+0x24>)
 801d7d2:	4b08      	ldr	r3, [pc, #32]	@ (801d7f4 <CDC_Init_FS+0x28>)
 801d7d4:	2200      	movs	r2, #0
 801d7d6:	0018      	movs	r0, r3
 801d7d8:	f7fe fd23 	bl	801c222 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d7dc:	4a06      	ldr	r2, [pc, #24]	@ (801d7f8 <CDC_Init_FS+0x2c>)
 801d7de:	4b05      	ldr	r3, [pc, #20]	@ (801d7f4 <CDC_Init_FS+0x28>)
 801d7e0:	0011      	movs	r1, r2
 801d7e2:	0018      	movs	r0, r3
 801d7e4:	f7fe fd39 	bl	801c25a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d7e8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d7ea:	0018      	movs	r0, r3
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	bd80      	pop	{r7, pc}
 801d7f0:	2000289c 	.word	0x2000289c
 801d7f4:	20002118 	.word	0x20002118
 801d7f8:	2000249c 	.word	0x2000249c

0801d7fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d800:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d802:	0018      	movs	r0, r3
 801d804:	46bd      	mov	sp, r7
 801d806:	bd80      	pop	{r7, pc}

0801d808 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b082      	sub	sp, #8
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	6039      	str	r1, [r7, #0]
 801d810:	0011      	movs	r1, r2
 801d812:	1dfb      	adds	r3, r7, #7
 801d814:	1c02      	adds	r2, r0, #0
 801d816:	701a      	strb	r2, [r3, #0]
 801d818:	1d3b      	adds	r3, r7, #4
 801d81a:	1c0a      	adds	r2, r1, #0
 801d81c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d81e:	1dfb      	adds	r3, r7, #7
 801d820:	781b      	ldrb	r3, [r3, #0]
 801d822:	2b23      	cmp	r3, #35	@ 0x23
 801d824:	d804      	bhi.n	801d830 <CDC_Control_FS+0x28>
 801d826:	009a      	lsls	r2, r3, #2
 801d828:	4b04      	ldr	r3, [pc, #16]	@ (801d83c <CDC_Control_FS+0x34>)
 801d82a:	18d3      	adds	r3, r2, r3
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d830:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801d832:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d834:	0018      	movs	r0, r3
 801d836:	46bd      	mov	sp, r7
 801d838:	b002      	add	sp, #8
 801d83a:	bd80      	pop	{r7, pc}
 801d83c:	080268a0 	.word	0x080268a0

0801d840 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b082      	sub	sp, #8
 801d844:	af00      	add	r7, sp, #0
 801d846:	6078      	str	r0, [r7, #4]
 801d848:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801d84a:	4b12      	ldr	r3, [pc, #72]	@ (801d894 <CDC_Receive_FS+0x54>)
 801d84c:	781b      	ldrb	r3, [r3, #0]
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d013      	beq.n	801d87a <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801d852:	683b      	ldr	r3, [r7, #0]
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	b29a      	uxth	r2, r3
 801d858:	2301      	movs	r3, #1
 801d85a:	425b      	negs	r3, r3
 801d85c:	6879      	ldr	r1, [r7, #4]
 801d85e:	480e      	ldr	r0, [pc, #56]	@ (801d898 <CDC_Receive_FS+0x58>)
 801d860:	f7fa fa46 	bl	8017cf0 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d864:	687a      	ldr	r2, [r7, #4]
 801d866:	4b0d      	ldr	r3, [pc, #52]	@ (801d89c <CDC_Receive_FS+0x5c>)
 801d868:	0011      	movs	r1, r2
 801d86a:	0018      	movs	r0, r3
 801d86c:	f7fe fcf5 	bl	801c25a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d870:	4b0a      	ldr	r3, [pc, #40]	@ (801d89c <CDC_Receive_FS+0x5c>)
 801d872:	0018      	movs	r0, r3
 801d874:	f7fe fd3c 	bl	801c2f0 <USBD_CDC_ReceivePacket>
 801d878:	e006      	b.n	801d888 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801d87a:	683b      	ldr	r3, [r7, #0]
 801d87c:	681a      	ldr	r2, [r3, #0]
 801d87e:	4b08      	ldr	r3, [pc, #32]	@ (801d8a0 <CDC_Receive_FS+0x60>)
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	18d2      	adds	r2, r2, r3
 801d884:	4b06      	ldr	r3, [pc, #24]	@ (801d8a0 <CDC_Receive_FS+0x60>)
 801d886:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801d888:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d88a:	0018      	movs	r0, r3
 801d88c:	46bd      	mov	sp, r7
 801d88e:	b002      	add	sp, #8
 801d890:	bd80      	pop	{r7, pc}
 801d892:	46c0      	nop			@ (mov r8, r8)
 801d894:	200023dc 	.word	0x200023dc
 801d898:	200023e0 	.word	0x200023e0
 801d89c:	20002118 	.word	0x20002118
 801d8a0:	20002498 	.word	0x20002498

0801d8a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d8a4:	b5b0      	push	{r4, r5, r7, lr}
 801d8a6:	b084      	sub	sp, #16
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	6078      	str	r0, [r7, #4]
 801d8ac:	000a      	movs	r2, r1
 801d8ae:	1cbb      	adds	r3, r7, #2
 801d8b0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801d8b2:	230f      	movs	r3, #15
 801d8b4:	18fb      	adds	r3, r7, r3
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d8ba:	4a11      	ldr	r2, [pc, #68]	@ (801d900 <CDC_Transmit_FS+0x5c>)
 801d8bc:	23ae      	movs	r3, #174	@ 0xae
 801d8be:	009b      	lsls	r3, r3, #2
 801d8c0:	58d3      	ldr	r3, [r2, r3]
 801d8c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d8c4:	68ba      	ldr	r2, [r7, #8]
 801d8c6:	2385      	movs	r3, #133	@ 0x85
 801d8c8:	009b      	lsls	r3, r3, #2
 801d8ca:	58d3      	ldr	r3, [r2, r3]
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d001      	beq.n	801d8d4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801d8d0:	2301      	movs	r3, #1
 801d8d2:	e010      	b.n	801d8f6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d8d4:	1cbb      	adds	r3, r7, #2
 801d8d6:	881a      	ldrh	r2, [r3, #0]
 801d8d8:	6879      	ldr	r1, [r7, #4]
 801d8da:	4b09      	ldr	r3, [pc, #36]	@ (801d900 <CDC_Transmit_FS+0x5c>)
 801d8dc:	0018      	movs	r0, r3
 801d8de:	f7fe fca0 	bl	801c222 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d8e2:	250f      	movs	r5, #15
 801d8e4:	197c      	adds	r4, r7, r5
 801d8e6:	4b06      	ldr	r3, [pc, #24]	@ (801d900 <CDC_Transmit_FS+0x5c>)
 801d8e8:	0018      	movs	r0, r3
 801d8ea:	f7fe fcca 	bl	801c282 <USBD_CDC_TransmitPacket>
 801d8ee:	0003      	movs	r3, r0
 801d8f0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801d8f2:	197b      	adds	r3, r7, r5
 801d8f4:	781b      	ldrb	r3, [r3, #0]
}
 801d8f6:	0018      	movs	r0, r3
 801d8f8:	46bd      	mov	sp, r7
 801d8fa:	b004      	add	sp, #16
 801d8fc:	bdb0      	pop	{r4, r5, r7, pc}
 801d8fe:	46c0      	nop			@ (mov r8, r8)
 801d900:	20002118 	.word	0x20002118

0801d904 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801d904:	b580      	push	{r7, lr}
 801d906:	af00      	add	r7, sp, #0
  ESPProg = true;
 801d908:	4b02      	ldr	r3, [pc, #8]	@ (801d914 <EnableESPProg+0x10>)
 801d90a:	2201      	movs	r2, #1
 801d90c:	701a      	strb	r2, [r3, #0]
}
 801d90e:	46c0      	nop			@ (mov r8, r8)
 801d910:	46bd      	mov	sp, r7
 801d912:	bd80      	pop	{r7, pc}
 801d914:	200023dc 	.word	0x200023dc

0801d918 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801d918:	b580      	push	{r7, lr}
 801d91a:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801d91c:	4b01      	ldr	r3, [pc, #4]	@ (801d924 <GetUsbRxPointer+0xc>)
}
 801d91e:	0018      	movs	r0, r3
 801d920:	46bd      	mov	sp, r7
 801d922:	bd80      	pop	{r7, pc}
 801d924:	2000249c 	.word	0x2000249c

0801d928 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801d92c:	4b07      	ldr	r3, [pc, #28]	@ (801d94c <ResetUsbRxDataSize+0x24>)
 801d92e:	2200      	movs	r2, #0
 801d930:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801d932:	4a07      	ldr	r2, [pc, #28]	@ (801d950 <ResetUsbRxDataSize+0x28>)
 801d934:	4b07      	ldr	r3, [pc, #28]	@ (801d954 <ResetUsbRxDataSize+0x2c>)
 801d936:	0011      	movs	r1, r2
 801d938:	0018      	movs	r0, r3
 801d93a:	f7fe fc8e 	bl	801c25a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d93e:	4b05      	ldr	r3, [pc, #20]	@ (801d954 <ResetUsbRxDataSize+0x2c>)
 801d940:	0018      	movs	r0, r3
 801d942:	f7fe fcd5 	bl	801c2f0 <USBD_CDC_ReceivePacket>
}
 801d946:	46c0      	nop			@ (mov r8, r8)
 801d948:	46bd      	mov	sp, r7
 801d94a:	bd80      	pop	{r7, pc}
 801d94c:	20002498 	.word	0x20002498
 801d950:	2000249c 	.word	0x2000249c
 801d954:	20002118 	.word	0x20002118

0801d958 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801d958:	b580      	push	{r7, lr}
 801d95a:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801d95c:	4b02      	ldr	r3, [pc, #8]	@ (801d968 <GetUsbRxDataSize+0x10>)
 801d95e:	681b      	ldr	r3, [r3, #0]
}
 801d960:	0018      	movs	r0, r3
 801d962:	46bd      	mov	sp, r7
 801d964:	bd80      	pop	{r7, pc}
 801d966:	46c0      	nop			@ (mov r8, r8)
 801d968:	20002498 	.word	0x20002498

0801d96c <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801d96c:	b580      	push	{r7, lr}
 801d96e:	b082      	sub	sp, #8
 801d970:	af00      	add	r7, sp, #0
 801d972:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801d974:	687a      	ldr	r2, [r7, #4]
 801d976:	4b07      	ldr	r3, [pc, #28]	@ (801d994 <GetUsbRxNextChunk+0x28>)
 801d978:	18d2      	adds	r2, r2, r3
 801d97a:	4b07      	ldr	r3, [pc, #28]	@ (801d998 <GetUsbRxNextChunk+0x2c>)
 801d97c:	0011      	movs	r1, r2
 801d97e:	0018      	movs	r0, r3
 801d980:	f7fe fc6b 	bl	801c25a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d984:	4b04      	ldr	r3, [pc, #16]	@ (801d998 <GetUsbRxNextChunk+0x2c>)
 801d986:	0018      	movs	r0, r3
 801d988:	f7fe fcb2 	bl	801c2f0 <USBD_CDC_ReceivePacket>
}
 801d98c:	46c0      	nop			@ (mov r8, r8)
 801d98e:	46bd      	mov	sp, r7
 801d990:	b002      	add	sp, #8
 801d992:	bd80      	pop	{r7, pc}
 801d994:	2000249c 	.word	0x2000249c
 801d998:	20002118 	.word	0x20002118

0801d99c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d99c:	b580      	push	{r7, lr}
 801d99e:	b082      	sub	sp, #8
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	0002      	movs	r2, r0
 801d9a4:	6039      	str	r1, [r7, #0]
 801d9a6:	1dfb      	adds	r3, r7, #7
 801d9a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d9aa:	683b      	ldr	r3, [r7, #0]
 801d9ac:	2212      	movs	r2, #18
 801d9ae:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d9b0:	4b02      	ldr	r3, [pc, #8]	@ (801d9bc <USBD_FS_DeviceDescriptor+0x20>)
}
 801d9b2:	0018      	movs	r0, r3
 801d9b4:	46bd      	mov	sp, r7
 801d9b6:	b002      	add	sp, #8
 801d9b8:	bd80      	pop	{r7, pc}
 801d9ba:	46c0      	nop			@ (mov r8, r8)
 801d9bc:	20000220 	.word	0x20000220

0801d9c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d9c0:	b580      	push	{r7, lr}
 801d9c2:	b082      	sub	sp, #8
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	0002      	movs	r2, r0
 801d9c8:	6039      	str	r1, [r7, #0]
 801d9ca:	1dfb      	adds	r3, r7, #7
 801d9cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d9ce:	683b      	ldr	r3, [r7, #0]
 801d9d0:	2204      	movs	r2, #4
 801d9d2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d9d4:	4b02      	ldr	r3, [pc, #8]	@ (801d9e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d9d6:	0018      	movs	r0, r3
 801d9d8:	46bd      	mov	sp, r7
 801d9da:	b002      	add	sp, #8
 801d9dc:	bd80      	pop	{r7, pc}
 801d9de:	46c0      	nop			@ (mov r8, r8)
 801d9e0:	20000234 	.word	0x20000234

0801d9e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d9e4:	b580      	push	{r7, lr}
 801d9e6:	b082      	sub	sp, #8
 801d9e8:	af00      	add	r7, sp, #0
 801d9ea:	0002      	movs	r2, r0
 801d9ec:	6039      	str	r1, [r7, #0]
 801d9ee:	1dfb      	adds	r3, r7, #7
 801d9f0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d9f2:	1dfb      	adds	r3, r7, #7
 801d9f4:	781b      	ldrb	r3, [r3, #0]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d106      	bne.n	801da08 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d9fa:	683a      	ldr	r2, [r7, #0]
 801d9fc:	4908      	ldr	r1, [pc, #32]	@ (801da20 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d9fe:	4b09      	ldr	r3, [pc, #36]	@ (801da24 <USBD_FS_ProductStrDescriptor+0x40>)
 801da00:	0018      	movs	r0, r3
 801da02:	f7ff fdb1 	bl	801d568 <USBD_GetString>
 801da06:	e005      	b.n	801da14 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801da08:	683a      	ldr	r2, [r7, #0]
 801da0a:	4905      	ldr	r1, [pc, #20]	@ (801da20 <USBD_FS_ProductStrDescriptor+0x3c>)
 801da0c:	4b05      	ldr	r3, [pc, #20]	@ (801da24 <USBD_FS_ProductStrDescriptor+0x40>)
 801da0e:	0018      	movs	r0, r3
 801da10:	f7ff fdaa 	bl	801d568 <USBD_GetString>
  }
  return USBD_StrDesc;
 801da14:	4b02      	ldr	r3, [pc, #8]	@ (801da20 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801da16:	0018      	movs	r0, r3
 801da18:	46bd      	mov	sp, r7
 801da1a:	b002      	add	sp, #8
 801da1c:	bd80      	pop	{r7, pc}
 801da1e:	46c0      	nop			@ (mov r8, r8)
 801da20:	20002c9c 	.word	0x20002c9c
 801da24:	080262f8 	.word	0x080262f8

0801da28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801da28:	b580      	push	{r7, lr}
 801da2a:	b082      	sub	sp, #8
 801da2c:	af00      	add	r7, sp, #0
 801da2e:	0002      	movs	r2, r0
 801da30:	6039      	str	r1, [r7, #0]
 801da32:	1dfb      	adds	r3, r7, #7
 801da34:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801da36:	683a      	ldr	r2, [r7, #0]
 801da38:	4904      	ldr	r1, [pc, #16]	@ (801da4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801da3a:	4b05      	ldr	r3, [pc, #20]	@ (801da50 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801da3c:	0018      	movs	r0, r3
 801da3e:	f7ff fd93 	bl	801d568 <USBD_GetString>
  return USBD_StrDesc;
 801da42:	4b02      	ldr	r3, [pc, #8]	@ (801da4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801da44:	0018      	movs	r0, r3
 801da46:	46bd      	mov	sp, r7
 801da48:	b002      	add	sp, #8
 801da4a:	bd80      	pop	{r7, pc}
 801da4c:	20002c9c 	.word	0x20002c9c
 801da50:	08026310 	.word	0x08026310

0801da54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801da54:	b580      	push	{r7, lr}
 801da56:	b082      	sub	sp, #8
 801da58:	af00      	add	r7, sp, #0
 801da5a:	0002      	movs	r2, r0
 801da5c:	6039      	str	r1, [r7, #0]
 801da5e:	1dfb      	adds	r3, r7, #7
 801da60:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801da62:	683b      	ldr	r3, [r7, #0]
 801da64:	221a      	movs	r2, #26
 801da66:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801da68:	f000 f84c 	bl	801db04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801da6c:	4b02      	ldr	r3, [pc, #8]	@ (801da78 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801da6e:	0018      	movs	r0, r3
 801da70:	46bd      	mov	sp, r7
 801da72:	b002      	add	sp, #8
 801da74:	bd80      	pop	{r7, pc}
 801da76:	46c0      	nop			@ (mov r8, r8)
 801da78:	20000238 	.word	0x20000238

0801da7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801da7c:	b580      	push	{r7, lr}
 801da7e:	b082      	sub	sp, #8
 801da80:	af00      	add	r7, sp, #0
 801da82:	0002      	movs	r2, r0
 801da84:	6039      	str	r1, [r7, #0]
 801da86:	1dfb      	adds	r3, r7, #7
 801da88:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801da8a:	1dfb      	adds	r3, r7, #7
 801da8c:	781b      	ldrb	r3, [r3, #0]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d106      	bne.n	801daa0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801da92:	683a      	ldr	r2, [r7, #0]
 801da94:	4908      	ldr	r1, [pc, #32]	@ (801dab8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801da96:	4b09      	ldr	r3, [pc, #36]	@ (801dabc <USBD_FS_ConfigStrDescriptor+0x40>)
 801da98:	0018      	movs	r0, r3
 801da9a:	f7ff fd65 	bl	801d568 <USBD_GetString>
 801da9e:	e005      	b.n	801daac <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801daa0:	683a      	ldr	r2, [r7, #0]
 801daa2:	4905      	ldr	r1, [pc, #20]	@ (801dab8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801daa4:	4b05      	ldr	r3, [pc, #20]	@ (801dabc <USBD_FS_ConfigStrDescriptor+0x40>)
 801daa6:	0018      	movs	r0, r3
 801daa8:	f7ff fd5e 	bl	801d568 <USBD_GetString>
  }
  return USBD_StrDesc;
 801daac:	4b02      	ldr	r3, [pc, #8]	@ (801dab8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801daae:	0018      	movs	r0, r3
 801dab0:	46bd      	mov	sp, r7
 801dab2:	b002      	add	sp, #8
 801dab4:	bd80      	pop	{r7, pc}
 801dab6:	46c0      	nop			@ (mov r8, r8)
 801dab8:	20002c9c 	.word	0x20002c9c
 801dabc:	08026324 	.word	0x08026324

0801dac0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dac0:	b580      	push	{r7, lr}
 801dac2:	b082      	sub	sp, #8
 801dac4:	af00      	add	r7, sp, #0
 801dac6:	0002      	movs	r2, r0
 801dac8:	6039      	str	r1, [r7, #0]
 801daca:	1dfb      	adds	r3, r7, #7
 801dacc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801dace:	1dfb      	adds	r3, r7, #7
 801dad0:	781b      	ldrb	r3, [r3, #0]
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	d106      	bne.n	801dae4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801dad6:	683a      	ldr	r2, [r7, #0]
 801dad8:	4908      	ldr	r1, [pc, #32]	@ (801dafc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801dada:	4b09      	ldr	r3, [pc, #36]	@ (801db00 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801dadc:	0018      	movs	r0, r3
 801dade:	f7ff fd43 	bl	801d568 <USBD_GetString>
 801dae2:	e005      	b.n	801daf0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801dae4:	683a      	ldr	r2, [r7, #0]
 801dae6:	4905      	ldr	r1, [pc, #20]	@ (801dafc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801dae8:	4b05      	ldr	r3, [pc, #20]	@ (801db00 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801daea:	0018      	movs	r0, r3
 801daec:	f7ff fd3c 	bl	801d568 <USBD_GetString>
  }
  return USBD_StrDesc;
 801daf0:	4b02      	ldr	r3, [pc, #8]	@ (801dafc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801daf2:	0018      	movs	r0, r3
 801daf4:	46bd      	mov	sp, r7
 801daf6:	b002      	add	sp, #8
 801daf8:	bd80      	pop	{r7, pc}
 801dafa:	46c0      	nop			@ (mov r8, r8)
 801dafc:	20002c9c 	.word	0x20002c9c
 801db00:	08026330 	.word	0x08026330

0801db04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801db04:	b580      	push	{r7, lr}
 801db06:	b084      	sub	sp, #16
 801db08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801db0a:	4b10      	ldr	r3, [pc, #64]	@ (801db4c <Get_SerialNum+0x48>)
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801db10:	4b0f      	ldr	r3, [pc, #60]	@ (801db50 <Get_SerialNum+0x4c>)
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801db16:	4b0f      	ldr	r3, [pc, #60]	@ (801db54 <Get_SerialNum+0x50>)
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801db1c:	68fa      	ldr	r2, [r7, #12]
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	18d3      	adds	r3, r2, r3
 801db22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	2b00      	cmp	r3, #0
 801db28:	d00b      	beq.n	801db42 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801db2a:	490b      	ldr	r1, [pc, #44]	@ (801db58 <Get_SerialNum+0x54>)
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	2208      	movs	r2, #8
 801db30:	0018      	movs	r0, r3
 801db32:	f000 f815 	bl	801db60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801db36:	4909      	ldr	r1, [pc, #36]	@ (801db5c <Get_SerialNum+0x58>)
 801db38:	68bb      	ldr	r3, [r7, #8]
 801db3a:	2204      	movs	r2, #4
 801db3c:	0018      	movs	r0, r3
 801db3e:	f000 f80f 	bl	801db60 <IntToUnicode>
  }
}
 801db42:	46c0      	nop			@ (mov r8, r8)
 801db44:	46bd      	mov	sp, r7
 801db46:	b004      	add	sp, #16
 801db48:	bd80      	pop	{r7, pc}
 801db4a:	46c0      	nop			@ (mov r8, r8)
 801db4c:	1ff80050 	.word	0x1ff80050
 801db50:	1ff80054 	.word	0x1ff80054
 801db54:	1ff80058 	.word	0x1ff80058
 801db58:	2000023a 	.word	0x2000023a
 801db5c:	2000024a 	.word	0x2000024a

0801db60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801db60:	b580      	push	{r7, lr}
 801db62:	b086      	sub	sp, #24
 801db64:	af00      	add	r7, sp, #0
 801db66:	60f8      	str	r0, [r7, #12]
 801db68:	60b9      	str	r1, [r7, #8]
 801db6a:	1dfb      	adds	r3, r7, #7
 801db6c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801db6e:	2117      	movs	r1, #23
 801db70:	187b      	adds	r3, r7, r1
 801db72:	2200      	movs	r2, #0
 801db74:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801db76:	187b      	adds	r3, r7, r1
 801db78:	2200      	movs	r2, #0
 801db7a:	701a      	strb	r2, [r3, #0]
 801db7c:	e02f      	b.n	801dbde <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	0f1b      	lsrs	r3, r3, #28
 801db82:	2b09      	cmp	r3, #9
 801db84:	d80d      	bhi.n	801dba2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801db86:	68fb      	ldr	r3, [r7, #12]
 801db88:	0f1b      	lsrs	r3, r3, #28
 801db8a:	b2da      	uxtb	r2, r3
 801db8c:	2317      	movs	r3, #23
 801db8e:	18fb      	adds	r3, r7, r3
 801db90:	781b      	ldrb	r3, [r3, #0]
 801db92:	005b      	lsls	r3, r3, #1
 801db94:	0019      	movs	r1, r3
 801db96:	68bb      	ldr	r3, [r7, #8]
 801db98:	185b      	adds	r3, r3, r1
 801db9a:	3230      	adds	r2, #48	@ 0x30
 801db9c:	b2d2      	uxtb	r2, r2
 801db9e:	701a      	strb	r2, [r3, #0]
 801dba0:	e00c      	b.n	801dbbc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801dba2:	68fb      	ldr	r3, [r7, #12]
 801dba4:	0f1b      	lsrs	r3, r3, #28
 801dba6:	b2da      	uxtb	r2, r3
 801dba8:	2317      	movs	r3, #23
 801dbaa:	18fb      	adds	r3, r7, r3
 801dbac:	781b      	ldrb	r3, [r3, #0]
 801dbae:	005b      	lsls	r3, r3, #1
 801dbb0:	0019      	movs	r1, r3
 801dbb2:	68bb      	ldr	r3, [r7, #8]
 801dbb4:	185b      	adds	r3, r3, r1
 801dbb6:	3237      	adds	r2, #55	@ 0x37
 801dbb8:	b2d2      	uxtb	r2, r2
 801dbba:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	011b      	lsls	r3, r3, #4
 801dbc0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801dbc2:	2117      	movs	r1, #23
 801dbc4:	187b      	adds	r3, r7, r1
 801dbc6:	781b      	ldrb	r3, [r3, #0]
 801dbc8:	005b      	lsls	r3, r3, #1
 801dbca:	3301      	adds	r3, #1
 801dbcc:	68ba      	ldr	r2, [r7, #8]
 801dbce:	18d3      	adds	r3, r2, r3
 801dbd0:	2200      	movs	r2, #0
 801dbd2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801dbd4:	187b      	adds	r3, r7, r1
 801dbd6:	781a      	ldrb	r2, [r3, #0]
 801dbd8:	187b      	adds	r3, r7, r1
 801dbda:	3201      	adds	r2, #1
 801dbdc:	701a      	strb	r2, [r3, #0]
 801dbde:	2317      	movs	r3, #23
 801dbe0:	18fa      	adds	r2, r7, r3
 801dbe2:	1dfb      	adds	r3, r7, #7
 801dbe4:	7812      	ldrb	r2, [r2, #0]
 801dbe6:	781b      	ldrb	r3, [r3, #0]
 801dbe8:	429a      	cmp	r2, r3
 801dbea:	d3c8      	bcc.n	801db7e <IntToUnicode+0x1e>
  }
}
 801dbec:	46c0      	nop			@ (mov r8, r8)
 801dbee:	46c0      	nop			@ (mov r8, r8)
 801dbf0:	46bd      	mov	sp, r7
 801dbf2:	b006      	add	sp, #24
 801dbf4:	bd80      	pop	{r7, pc}
	...

0801dbf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801dbf8:	b580      	push	{r7, lr}
 801dbfa:	b082      	sub	sp, #8
 801dbfc:	af00      	add	r7, sp, #0
 801dbfe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	4a0a      	ldr	r2, [pc, #40]	@ (801dc30 <HAL_PCD_MspInit+0x38>)
 801dc06:	4293      	cmp	r3, r2
 801dc08:	d10e      	bne.n	801dc28 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801dc0a:	4b0a      	ldr	r3, [pc, #40]	@ (801dc34 <HAL_PCD_MspInit+0x3c>)
 801dc0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dc0e:	4b09      	ldr	r3, [pc, #36]	@ (801dc34 <HAL_PCD_MspInit+0x3c>)
 801dc10:	2180      	movs	r1, #128	@ 0x80
 801dc12:	0409      	lsls	r1, r1, #16
 801dc14:	430a      	orrs	r2, r1
 801dc16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801dc18:	2200      	movs	r2, #0
 801dc1a:	2100      	movs	r1, #0
 801dc1c:	201f      	movs	r0, #31
 801dc1e:	f7f2 fadf 	bl	80101e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801dc22:	201f      	movs	r0, #31
 801dc24:	f7f2 faf1 	bl	801020a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801dc28:	46c0      	nop			@ (mov r8, r8)
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	b002      	add	sp, #8
 801dc2e:	bd80      	pop	{r7, pc}
 801dc30:	40005c00 	.word	0x40005c00
 801dc34:	40021000 	.word	0x40021000

0801dc38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc38:	b580      	push	{r7, lr}
 801dc3a:	b082      	sub	sp, #8
 801dc3c:	af00      	add	r7, sp, #0
 801dc3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801dc40:	687a      	ldr	r2, [r7, #4]
 801dc42:	23bc      	movs	r3, #188	@ 0xbc
 801dc44:	009b      	lsls	r3, r3, #2
 801dc46:	58d2      	ldr	r2, [r2, r3]
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	21ac      	movs	r1, #172	@ 0xac
 801dc4c:	0089      	lsls	r1, r1, #2
 801dc4e:	468c      	mov	ip, r1
 801dc50:	4463      	add	r3, ip
 801dc52:	0019      	movs	r1, r3
 801dc54:	0010      	movs	r0, r2
 801dc56:	f7fe fc1d 	bl	801c494 <USBD_LL_SetupStage>
}
 801dc5a:	46c0      	nop			@ (mov r8, r8)
 801dc5c:	46bd      	mov	sp, r7
 801dc5e:	b002      	add	sp, #8
 801dc60:	bd80      	pop	{r7, pc}

0801dc62 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc62:	b590      	push	{r4, r7, lr}
 801dc64:	b083      	sub	sp, #12
 801dc66:	af00      	add	r7, sp, #0
 801dc68:	6078      	str	r0, [r7, #4]
 801dc6a:	000a      	movs	r2, r1
 801dc6c:	1cfb      	adds	r3, r7, #3
 801dc6e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801dc70:	687a      	ldr	r2, [r7, #4]
 801dc72:	23bc      	movs	r3, #188	@ 0xbc
 801dc74:	009b      	lsls	r3, r3, #2
 801dc76:	58d4      	ldr	r4, [r2, r3]
 801dc78:	1cfb      	adds	r3, r7, #3
 801dc7a:	781a      	ldrb	r2, [r3, #0]
 801dc7c:	6878      	ldr	r0, [r7, #4]
 801dc7e:	23be      	movs	r3, #190	@ 0xbe
 801dc80:	0059      	lsls	r1, r3, #1
 801dc82:	0013      	movs	r3, r2
 801dc84:	009b      	lsls	r3, r3, #2
 801dc86:	189b      	adds	r3, r3, r2
 801dc88:	00db      	lsls	r3, r3, #3
 801dc8a:	18c3      	adds	r3, r0, r3
 801dc8c:	185b      	adds	r3, r3, r1
 801dc8e:	681a      	ldr	r2, [r3, #0]
 801dc90:	1cfb      	adds	r3, r7, #3
 801dc92:	781b      	ldrb	r3, [r3, #0]
 801dc94:	0019      	movs	r1, r3
 801dc96:	0020      	movs	r0, r4
 801dc98:	f7fe fc5a 	bl	801c550 <USBD_LL_DataOutStage>
}
 801dc9c:	46c0      	nop			@ (mov r8, r8)
 801dc9e:	46bd      	mov	sp, r7
 801dca0:	b003      	add	sp, #12
 801dca2:	bd90      	pop	{r4, r7, pc}

0801dca4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dca4:	b580      	push	{r7, lr}
 801dca6:	b082      	sub	sp, #8
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
 801dcac:	000a      	movs	r2, r1
 801dcae:	1cfb      	adds	r3, r7, #3
 801dcb0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801dcb2:	687a      	ldr	r2, [r7, #4]
 801dcb4:	23bc      	movs	r3, #188	@ 0xbc
 801dcb6:	009b      	lsls	r3, r3, #2
 801dcb8:	58d0      	ldr	r0, [r2, r3]
 801dcba:	1cfb      	adds	r3, r7, #3
 801dcbc:	781a      	ldrb	r2, [r3, #0]
 801dcbe:	6879      	ldr	r1, [r7, #4]
 801dcc0:	0013      	movs	r3, r2
 801dcc2:	009b      	lsls	r3, r3, #2
 801dcc4:	189b      	adds	r3, r3, r2
 801dcc6:	00db      	lsls	r3, r3, #3
 801dcc8:	18cb      	adds	r3, r1, r3
 801dcca:	333c      	adds	r3, #60	@ 0x3c
 801dccc:	681a      	ldr	r2, [r3, #0]
 801dcce:	1cfb      	adds	r3, r7, #3
 801dcd0:	781b      	ldrb	r3, [r3, #0]
 801dcd2:	0019      	movs	r1, r3
 801dcd4:	f7fe fcbe 	bl	801c654 <USBD_LL_DataInStage>
}
 801dcd8:	46c0      	nop			@ (mov r8, r8)
 801dcda:	46bd      	mov	sp, r7
 801dcdc:	b002      	add	sp, #8
 801dcde:	bd80      	pop	{r7, pc}

0801dce0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dce0:	b580      	push	{r7, lr}
 801dce2:	b082      	sub	sp, #8
 801dce4:	af00      	add	r7, sp, #0
 801dce6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801dce8:	687a      	ldr	r2, [r7, #4]
 801dcea:	23bc      	movs	r3, #188	@ 0xbc
 801dcec:	009b      	lsls	r3, r3, #2
 801dcee:	58d3      	ldr	r3, [r2, r3]
 801dcf0:	0018      	movs	r0, r3
 801dcf2:	f7fe fdf5 	bl	801c8e0 <USBD_LL_SOF>
}
 801dcf6:	46c0      	nop			@ (mov r8, r8)
 801dcf8:	46bd      	mov	sp, r7
 801dcfa:	b002      	add	sp, #8
 801dcfc:	bd80      	pop	{r7, pc}

0801dcfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dcfe:	b580      	push	{r7, lr}
 801dd00:	b084      	sub	sp, #16
 801dd02:	af00      	add	r7, sp, #0
 801dd04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801dd06:	230f      	movs	r3, #15
 801dd08:	18fb      	adds	r3, r7, r3
 801dd0a:	2201      	movs	r2, #1
 801dd0c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	689b      	ldr	r3, [r3, #8]
 801dd12:	2b02      	cmp	r3, #2
 801dd14:	d001      	beq.n	801dd1a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801dd16:	f7eb f815 	bl	8008d44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801dd1a:	687a      	ldr	r2, [r7, #4]
 801dd1c:	23bc      	movs	r3, #188	@ 0xbc
 801dd1e:	009b      	lsls	r3, r3, #2
 801dd20:	58d2      	ldr	r2, [r2, r3]
 801dd22:	230f      	movs	r3, #15
 801dd24:	18fb      	adds	r3, r7, r3
 801dd26:	781b      	ldrb	r3, [r3, #0]
 801dd28:	0019      	movs	r1, r3
 801dd2a:	0010      	movs	r0, r2
 801dd2c:	f7fe fd97 	bl	801c85e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801dd30:	687a      	ldr	r2, [r7, #4]
 801dd32:	23bc      	movs	r3, #188	@ 0xbc
 801dd34:	009b      	lsls	r3, r3, #2
 801dd36:	58d3      	ldr	r3, [r2, r3]
 801dd38:	0018      	movs	r0, r3
 801dd3a:	f7fe fd48 	bl	801c7ce <USBD_LL_Reset>
}
 801dd3e:	46c0      	nop			@ (mov r8, r8)
 801dd40:	46bd      	mov	sp, r7
 801dd42:	b004      	add	sp, #16
 801dd44:	bd80      	pop	{r7, pc}
	...

0801dd48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd48:	b580      	push	{r7, lr}
 801dd4a:	b082      	sub	sp, #8
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801dd50:	687a      	ldr	r2, [r7, #4]
 801dd52:	23bc      	movs	r3, #188	@ 0xbc
 801dd54:	009b      	lsls	r3, r3, #2
 801dd56:	58d3      	ldr	r3, [r2, r3]
 801dd58:	0018      	movs	r0, r3
 801dd5a:	f7fe fd91 	bl	801c880 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	699b      	ldr	r3, [r3, #24]
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d005      	beq.n	801dd72 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dd66:	4b05      	ldr	r3, [pc, #20]	@ (801dd7c <HAL_PCD_SuspendCallback+0x34>)
 801dd68:	691a      	ldr	r2, [r3, #16]
 801dd6a:	4b04      	ldr	r3, [pc, #16]	@ (801dd7c <HAL_PCD_SuspendCallback+0x34>)
 801dd6c:	2106      	movs	r1, #6
 801dd6e:	430a      	orrs	r2, r1
 801dd70:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801dd72:	46c0      	nop			@ (mov r8, r8)
 801dd74:	46bd      	mov	sp, r7
 801dd76:	b002      	add	sp, #8
 801dd78:	bd80      	pop	{r7, pc}
 801dd7a:	46c0      	nop			@ (mov r8, r8)
 801dd7c:	e000ed00 	.word	0xe000ed00

0801dd80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd80:	b580      	push	{r7, lr}
 801dd82:	b082      	sub	sp, #8
 801dd84:	af00      	add	r7, sp, #0
 801dd86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	699b      	ldr	r3, [r3, #24]
 801dd8c:	2b00      	cmp	r3, #0
 801dd8e:	d007      	beq.n	801dda0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dd90:	4b09      	ldr	r3, [pc, #36]	@ (801ddb8 <HAL_PCD_ResumeCallback+0x38>)
 801dd92:	691a      	ldr	r2, [r3, #16]
 801dd94:	4b08      	ldr	r3, [pc, #32]	@ (801ddb8 <HAL_PCD_ResumeCallback+0x38>)
 801dd96:	2106      	movs	r1, #6
 801dd98:	438a      	bics	r2, r1
 801dd9a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801dd9c:	f000 fa44 	bl	801e228 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801dda0:	687a      	ldr	r2, [r7, #4]
 801dda2:	23bc      	movs	r3, #188	@ 0xbc
 801dda4:	009b      	lsls	r3, r3, #2
 801dda6:	58d3      	ldr	r3, [r2, r3]
 801dda8:	0018      	movs	r0, r3
 801ddaa:	f7fe fd81 	bl	801c8b0 <USBD_LL_Resume>
}
 801ddae:	46c0      	nop			@ (mov r8, r8)
 801ddb0:	46bd      	mov	sp, r7
 801ddb2:	b002      	add	sp, #8
 801ddb4:	bd80      	pop	{r7, pc}
 801ddb6:	46c0      	nop			@ (mov r8, r8)
 801ddb8:	e000ed00 	.word	0xe000ed00

0801ddbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801ddbc:	b580      	push	{r7, lr}
 801ddbe:	b082      	sub	sp, #8
 801ddc0:	af00      	add	r7, sp, #0
 801ddc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801ddc4:	4a2d      	ldr	r2, [pc, #180]	@ (801de7c <USBD_LL_Init+0xc0>)
 801ddc6:	23bc      	movs	r3, #188	@ 0xbc
 801ddc8:	009b      	lsls	r3, r3, #2
 801ddca:	6879      	ldr	r1, [r7, #4]
 801ddcc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801ddce:	687a      	ldr	r2, [r7, #4]
 801ddd0:	23b0      	movs	r3, #176	@ 0xb0
 801ddd2:	009b      	lsls	r3, r3, #2
 801ddd4:	4929      	ldr	r1, [pc, #164]	@ (801de7c <USBD_LL_Init+0xc0>)
 801ddd6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801ddd8:	4b28      	ldr	r3, [pc, #160]	@ (801de7c <USBD_LL_Init+0xc0>)
 801ddda:	4a29      	ldr	r2, [pc, #164]	@ (801de80 <USBD_LL_Init+0xc4>)
 801dddc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801ddde:	4b27      	ldr	r3, [pc, #156]	@ (801de7c <USBD_LL_Init+0xc0>)
 801dde0:	2208      	movs	r2, #8
 801dde2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801dde4:	4b25      	ldr	r3, [pc, #148]	@ (801de7c <USBD_LL_Init+0xc0>)
 801dde6:	2202      	movs	r2, #2
 801dde8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ddea:	4b24      	ldr	r3, [pc, #144]	@ (801de7c <USBD_LL_Init+0xc0>)
 801ddec:	2202      	movs	r2, #2
 801ddee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801ddf0:	4b22      	ldr	r3, [pc, #136]	@ (801de7c <USBD_LL_Init+0xc0>)
 801ddf2:	2200      	movs	r2, #0
 801ddf4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801ddf6:	4b21      	ldr	r3, [pc, #132]	@ (801de7c <USBD_LL_Init+0xc0>)
 801ddf8:	2200      	movs	r2, #0
 801ddfa:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801ddfc:	4b1f      	ldr	r3, [pc, #124]	@ (801de7c <USBD_LL_Init+0xc0>)
 801ddfe:	2200      	movs	r2, #0
 801de00:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801de02:	4b1e      	ldr	r3, [pc, #120]	@ (801de7c <USBD_LL_Init+0xc0>)
 801de04:	0018      	movs	r0, r3
 801de06:	f7f5 ff95 	bl	8013d34 <HAL_PCD_Init>
 801de0a:	1e03      	subs	r3, r0, #0
 801de0c:	d001      	beq.n	801de12 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801de0e:	f7ea ff99 	bl	8008d44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801de12:	687a      	ldr	r2, [r7, #4]
 801de14:	23b0      	movs	r3, #176	@ 0xb0
 801de16:	009b      	lsls	r3, r3, #2
 801de18:	58d0      	ldr	r0, [r2, r3]
 801de1a:	2318      	movs	r3, #24
 801de1c:	2200      	movs	r2, #0
 801de1e:	2100      	movs	r1, #0
 801de20:	f7f7 fd56 	bl	80158d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801de24:	687a      	ldr	r2, [r7, #4]
 801de26:	23b0      	movs	r3, #176	@ 0xb0
 801de28:	009b      	lsls	r3, r3, #2
 801de2a:	58d0      	ldr	r0, [r2, r3]
 801de2c:	2358      	movs	r3, #88	@ 0x58
 801de2e:	2200      	movs	r2, #0
 801de30:	2180      	movs	r1, #128	@ 0x80
 801de32:	f7f7 fd4d 	bl	80158d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801de36:	687a      	ldr	r2, [r7, #4]
 801de38:	23b0      	movs	r3, #176	@ 0xb0
 801de3a:	009b      	lsls	r3, r3, #2
 801de3c:	58d0      	ldr	r0, [r2, r3]
 801de3e:	23c0      	movs	r3, #192	@ 0xc0
 801de40:	2200      	movs	r2, #0
 801de42:	2181      	movs	r1, #129	@ 0x81
 801de44:	f7f7 fd44 	bl	80158d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801de48:	687a      	ldr	r2, [r7, #4]
 801de4a:	23b0      	movs	r3, #176	@ 0xb0
 801de4c:	009b      	lsls	r3, r3, #2
 801de4e:	58d0      	ldr	r0, [r2, r3]
 801de50:	2388      	movs	r3, #136	@ 0x88
 801de52:	005b      	lsls	r3, r3, #1
 801de54:	2200      	movs	r2, #0
 801de56:	2101      	movs	r1, #1
 801de58:	f7f7 fd3a 	bl	80158d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801de5c:	687a      	ldr	r2, [r7, #4]
 801de5e:	23b0      	movs	r3, #176	@ 0xb0
 801de60:	009b      	lsls	r3, r3, #2
 801de62:	58d0      	ldr	r0, [r2, r3]
 801de64:	2380      	movs	r3, #128	@ 0x80
 801de66:	005b      	lsls	r3, r3, #1
 801de68:	2200      	movs	r2, #0
 801de6a:	2182      	movs	r1, #130	@ 0x82
 801de6c:	f7f7 fd30 	bl	80158d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801de70:	2300      	movs	r3, #0
}
 801de72:	0018      	movs	r0, r3
 801de74:	46bd      	mov	sp, r7
 801de76:	b002      	add	sp, #8
 801de78:	bd80      	pop	{r7, pc}
 801de7a:	46c0      	nop			@ (mov r8, r8)
 801de7c:	20002e9c 	.word	0x20002e9c
 801de80:	40005c00 	.word	0x40005c00

0801de84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801de84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de86:	b085      	sub	sp, #20
 801de88:	af00      	add	r7, sp, #0
 801de8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de8c:	210f      	movs	r1, #15
 801de8e:	187b      	adds	r3, r7, r1
 801de90:	2200      	movs	r2, #0
 801de92:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de94:	260e      	movs	r6, #14
 801de96:	19bb      	adds	r3, r7, r6
 801de98:	2200      	movs	r2, #0
 801de9a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801de9c:	687a      	ldr	r2, [r7, #4]
 801de9e:	23b0      	movs	r3, #176	@ 0xb0
 801dea0:	009b      	lsls	r3, r3, #2
 801dea2:	58d3      	ldr	r3, [r2, r3]
 801dea4:	000d      	movs	r5, r1
 801dea6:	187c      	adds	r4, r7, r1
 801dea8:	0018      	movs	r0, r3
 801deaa:	f7f6 f843 	bl	8013f34 <HAL_PCD_Start>
 801deae:	0003      	movs	r3, r0
 801deb0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801deb2:	19bc      	adds	r4, r7, r6
 801deb4:	197b      	adds	r3, r7, r5
 801deb6:	781b      	ldrb	r3, [r3, #0]
 801deb8:	0018      	movs	r0, r3
 801deba:	f000 f9bc 	bl	801e236 <USBD_Get_USB_Status>
 801debe:	0003      	movs	r3, r0
 801dec0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801dec2:	19bb      	adds	r3, r7, r6
 801dec4:	781b      	ldrb	r3, [r3, #0]
}
 801dec6:	0018      	movs	r0, r3
 801dec8:	46bd      	mov	sp, r7
 801deca:	b005      	add	sp, #20
 801decc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dece <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801dece:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ded0:	b085      	sub	sp, #20
 801ded2:	af00      	add	r7, sp, #0
 801ded4:	6078      	str	r0, [r7, #4]
 801ded6:	000c      	movs	r4, r1
 801ded8:	0010      	movs	r0, r2
 801deda:	0019      	movs	r1, r3
 801dedc:	1cfb      	adds	r3, r7, #3
 801dede:	1c22      	adds	r2, r4, #0
 801dee0:	701a      	strb	r2, [r3, #0]
 801dee2:	1cbb      	adds	r3, r7, #2
 801dee4:	1c02      	adds	r2, r0, #0
 801dee6:	701a      	strb	r2, [r3, #0]
 801dee8:	003b      	movs	r3, r7
 801deea:	1c0a      	adds	r2, r1, #0
 801deec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801deee:	260f      	movs	r6, #15
 801def0:	19bb      	adds	r3, r7, r6
 801def2:	2200      	movs	r2, #0
 801def4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801def6:	250e      	movs	r5, #14
 801def8:	197b      	adds	r3, r7, r5
 801defa:	2200      	movs	r2, #0
 801defc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801defe:	687a      	ldr	r2, [r7, #4]
 801df00:	23b0      	movs	r3, #176	@ 0xb0
 801df02:	009b      	lsls	r3, r3, #2
 801df04:	58d0      	ldr	r0, [r2, r3]
 801df06:	19bc      	adds	r4, r7, r6
 801df08:	1cbb      	adds	r3, r7, #2
 801df0a:	781d      	ldrb	r5, [r3, #0]
 801df0c:	003b      	movs	r3, r7
 801df0e:	881a      	ldrh	r2, [r3, #0]
 801df10:	1cfb      	adds	r3, r7, #3
 801df12:	7819      	ldrb	r1, [r3, #0]
 801df14:	002b      	movs	r3, r5
 801df16:	f7f6 f9a2 	bl	801425e <HAL_PCD_EP_Open>
 801df1a:	0003      	movs	r3, r0
 801df1c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801df1e:	250e      	movs	r5, #14
 801df20:	197c      	adds	r4, r7, r5
 801df22:	19bb      	adds	r3, r7, r6
 801df24:	781b      	ldrb	r3, [r3, #0]
 801df26:	0018      	movs	r0, r3
 801df28:	f000 f985 	bl	801e236 <USBD_Get_USB_Status>
 801df2c:	0003      	movs	r3, r0
 801df2e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801df30:	197b      	adds	r3, r7, r5
 801df32:	781b      	ldrb	r3, [r3, #0]
}
 801df34:	0018      	movs	r0, r3
 801df36:	46bd      	mov	sp, r7
 801df38:	b005      	add	sp, #20
 801df3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df3c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801df3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df3e:	b085      	sub	sp, #20
 801df40:	af00      	add	r7, sp, #0
 801df42:	6078      	str	r0, [r7, #4]
 801df44:	000a      	movs	r2, r1
 801df46:	1cfb      	adds	r3, r7, #3
 801df48:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801df4a:	210f      	movs	r1, #15
 801df4c:	187b      	adds	r3, r7, r1
 801df4e:	2200      	movs	r2, #0
 801df50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df52:	260e      	movs	r6, #14
 801df54:	19bb      	adds	r3, r7, r6
 801df56:	2200      	movs	r2, #0
 801df58:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801df5a:	687a      	ldr	r2, [r7, #4]
 801df5c:	23b0      	movs	r3, #176	@ 0xb0
 801df5e:	009b      	lsls	r3, r3, #2
 801df60:	58d2      	ldr	r2, [r2, r3]
 801df62:	000d      	movs	r5, r1
 801df64:	187c      	adds	r4, r7, r1
 801df66:	1cfb      	adds	r3, r7, #3
 801df68:	781b      	ldrb	r3, [r3, #0]
 801df6a:	0019      	movs	r1, r3
 801df6c:	0010      	movs	r0, r2
 801df6e:	f7f6 f9e5 	bl	801433c <HAL_PCD_EP_Close>
 801df72:	0003      	movs	r3, r0
 801df74:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801df76:	19bc      	adds	r4, r7, r6
 801df78:	197b      	adds	r3, r7, r5
 801df7a:	781b      	ldrb	r3, [r3, #0]
 801df7c:	0018      	movs	r0, r3
 801df7e:	f000 f95a 	bl	801e236 <USBD_Get_USB_Status>
 801df82:	0003      	movs	r3, r0
 801df84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801df86:	19bb      	adds	r3, r7, r6
 801df88:	781b      	ldrb	r3, [r3, #0]
}
 801df8a:	0018      	movs	r0, r3
 801df8c:	46bd      	mov	sp, r7
 801df8e:	b005      	add	sp, #20
 801df90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df92 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801df92:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df94:	b085      	sub	sp, #20
 801df96:	af00      	add	r7, sp, #0
 801df98:	6078      	str	r0, [r7, #4]
 801df9a:	000a      	movs	r2, r1
 801df9c:	1cfb      	adds	r3, r7, #3
 801df9e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dfa0:	210f      	movs	r1, #15
 801dfa2:	187b      	adds	r3, r7, r1
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dfa8:	260e      	movs	r6, #14
 801dfaa:	19bb      	adds	r3, r7, r6
 801dfac:	2200      	movs	r2, #0
 801dfae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801dfb0:	687a      	ldr	r2, [r7, #4]
 801dfb2:	23b0      	movs	r3, #176	@ 0xb0
 801dfb4:	009b      	lsls	r3, r3, #2
 801dfb6:	58d2      	ldr	r2, [r2, r3]
 801dfb8:	000d      	movs	r5, r1
 801dfba:	187c      	adds	r4, r7, r1
 801dfbc:	1cfb      	adds	r3, r7, #3
 801dfbe:	781b      	ldrb	r3, [r3, #0]
 801dfc0:	0019      	movs	r1, r3
 801dfc2:	0010      	movs	r0, r2
 801dfc4:	f7f6 fa97 	bl	80144f6 <HAL_PCD_EP_SetStall>
 801dfc8:	0003      	movs	r3, r0
 801dfca:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dfcc:	19bc      	adds	r4, r7, r6
 801dfce:	197b      	adds	r3, r7, r5
 801dfd0:	781b      	ldrb	r3, [r3, #0]
 801dfd2:	0018      	movs	r0, r3
 801dfd4:	f000 f92f 	bl	801e236 <USBD_Get_USB_Status>
 801dfd8:	0003      	movs	r3, r0
 801dfda:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801dfdc:	19bb      	adds	r3, r7, r6
 801dfde:	781b      	ldrb	r3, [r3, #0]
}
 801dfe0:	0018      	movs	r0, r3
 801dfe2:	46bd      	mov	sp, r7
 801dfe4:	b005      	add	sp, #20
 801dfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dfe8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfea:	b085      	sub	sp, #20
 801dfec:	af00      	add	r7, sp, #0
 801dfee:	6078      	str	r0, [r7, #4]
 801dff0:	000a      	movs	r2, r1
 801dff2:	1cfb      	adds	r3, r7, #3
 801dff4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dff6:	210f      	movs	r1, #15
 801dff8:	187b      	adds	r3, r7, r1
 801dffa:	2200      	movs	r2, #0
 801dffc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dffe:	260e      	movs	r6, #14
 801e000:	19bb      	adds	r3, r7, r6
 801e002:	2200      	movs	r2, #0
 801e004:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e006:	687a      	ldr	r2, [r7, #4]
 801e008:	23b0      	movs	r3, #176	@ 0xb0
 801e00a:	009b      	lsls	r3, r3, #2
 801e00c:	58d2      	ldr	r2, [r2, r3]
 801e00e:	000d      	movs	r5, r1
 801e010:	187c      	adds	r4, r7, r1
 801e012:	1cfb      	adds	r3, r7, #3
 801e014:	781b      	ldrb	r3, [r3, #0]
 801e016:	0019      	movs	r1, r3
 801e018:	0010      	movs	r0, r2
 801e01a:	f7f6 fac8 	bl	80145ae <HAL_PCD_EP_ClrStall>
 801e01e:	0003      	movs	r3, r0
 801e020:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e022:	19bc      	adds	r4, r7, r6
 801e024:	197b      	adds	r3, r7, r5
 801e026:	781b      	ldrb	r3, [r3, #0]
 801e028:	0018      	movs	r0, r3
 801e02a:	f000 f904 	bl	801e236 <USBD_Get_USB_Status>
 801e02e:	0003      	movs	r3, r0
 801e030:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e032:	19bb      	adds	r3, r7, r6
 801e034:	781b      	ldrb	r3, [r3, #0]
}
 801e036:	0018      	movs	r0, r3
 801e038:	46bd      	mov	sp, r7
 801e03a:	b005      	add	sp, #20
 801e03c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e03e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e03e:	b580      	push	{r7, lr}
 801e040:	b084      	sub	sp, #16
 801e042:	af00      	add	r7, sp, #0
 801e044:	6078      	str	r0, [r7, #4]
 801e046:	000a      	movs	r2, r1
 801e048:	1cfb      	adds	r3, r7, #3
 801e04a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e04c:	687a      	ldr	r2, [r7, #4]
 801e04e:	23b0      	movs	r3, #176	@ 0xb0
 801e050:	009b      	lsls	r3, r3, #2
 801e052:	58d3      	ldr	r3, [r2, r3]
 801e054:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801e056:	1cfb      	adds	r3, r7, #3
 801e058:	781b      	ldrb	r3, [r3, #0]
 801e05a:	b25b      	sxtb	r3, r3
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	da0d      	bge.n	801e07c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801e060:	1cfb      	adds	r3, r7, #3
 801e062:	781b      	ldrb	r3, [r3, #0]
 801e064:	227f      	movs	r2, #127	@ 0x7f
 801e066:	4013      	ands	r3, r2
 801e068:	68f9      	ldr	r1, [r7, #12]
 801e06a:	1c5a      	adds	r2, r3, #1
 801e06c:	0013      	movs	r3, r2
 801e06e:	009b      	lsls	r3, r3, #2
 801e070:	189b      	adds	r3, r3, r2
 801e072:	00db      	lsls	r3, r3, #3
 801e074:	18cb      	adds	r3, r1, r3
 801e076:	3302      	adds	r3, #2
 801e078:	781b      	ldrb	r3, [r3, #0]
 801e07a:	e00d      	b.n	801e098 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801e07c:	1cfb      	adds	r3, r7, #3
 801e07e:	781b      	ldrb	r3, [r3, #0]
 801e080:	227f      	movs	r2, #127	@ 0x7f
 801e082:	401a      	ands	r2, r3
 801e084:	68f8      	ldr	r0, [r7, #12]
 801e086:	23b5      	movs	r3, #181	@ 0xb5
 801e088:	0059      	lsls	r1, r3, #1
 801e08a:	0013      	movs	r3, r2
 801e08c:	009b      	lsls	r3, r3, #2
 801e08e:	189b      	adds	r3, r3, r2
 801e090:	00db      	lsls	r3, r3, #3
 801e092:	18c3      	adds	r3, r0, r3
 801e094:	185b      	adds	r3, r3, r1
 801e096:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e098:	0018      	movs	r0, r3
 801e09a:	46bd      	mov	sp, r7
 801e09c:	b004      	add	sp, #16
 801e09e:	bd80      	pop	{r7, pc}

0801e0a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0a2:	b085      	sub	sp, #20
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	6078      	str	r0, [r7, #4]
 801e0a8:	000a      	movs	r2, r1
 801e0aa:	1cfb      	adds	r3, r7, #3
 801e0ac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e0ae:	210f      	movs	r1, #15
 801e0b0:	187b      	adds	r3, r7, r1
 801e0b2:	2200      	movs	r2, #0
 801e0b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e0b6:	260e      	movs	r6, #14
 801e0b8:	19bb      	adds	r3, r7, r6
 801e0ba:	2200      	movs	r2, #0
 801e0bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e0be:	687a      	ldr	r2, [r7, #4]
 801e0c0:	23b0      	movs	r3, #176	@ 0xb0
 801e0c2:	009b      	lsls	r3, r3, #2
 801e0c4:	58d2      	ldr	r2, [r2, r3]
 801e0c6:	000d      	movs	r5, r1
 801e0c8:	187c      	adds	r4, r7, r1
 801e0ca:	1cfb      	adds	r3, r7, #3
 801e0cc:	781b      	ldrb	r3, [r3, #0]
 801e0ce:	0019      	movs	r1, r3
 801e0d0:	0010      	movs	r0, r2
 801e0d2:	f7f6 f899 	bl	8014208 <HAL_PCD_SetAddress>
 801e0d6:	0003      	movs	r3, r0
 801e0d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e0da:	19bc      	adds	r4, r7, r6
 801e0dc:	197b      	adds	r3, r7, r5
 801e0de:	781b      	ldrb	r3, [r3, #0]
 801e0e0:	0018      	movs	r0, r3
 801e0e2:	f000 f8a8 	bl	801e236 <USBD_Get_USB_Status>
 801e0e6:	0003      	movs	r3, r0
 801e0e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e0ea:	19bb      	adds	r3, r7, r6
 801e0ec:	781b      	ldrb	r3, [r3, #0]
}
 801e0ee:	0018      	movs	r0, r3
 801e0f0:	46bd      	mov	sp, r7
 801e0f2:	b005      	add	sp, #20
 801e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e0f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e0f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0f8:	b087      	sub	sp, #28
 801e0fa:	af00      	add	r7, sp, #0
 801e0fc:	60f8      	str	r0, [r7, #12]
 801e0fe:	0008      	movs	r0, r1
 801e100:	607a      	str	r2, [r7, #4]
 801e102:	0019      	movs	r1, r3
 801e104:	230b      	movs	r3, #11
 801e106:	18fb      	adds	r3, r7, r3
 801e108:	1c02      	adds	r2, r0, #0
 801e10a:	701a      	strb	r2, [r3, #0]
 801e10c:	2408      	movs	r4, #8
 801e10e:	193b      	adds	r3, r7, r4
 801e110:	1c0a      	adds	r2, r1, #0
 801e112:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e114:	2117      	movs	r1, #23
 801e116:	187b      	adds	r3, r7, r1
 801e118:	2200      	movs	r2, #0
 801e11a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e11c:	2516      	movs	r5, #22
 801e11e:	197b      	adds	r3, r7, r5
 801e120:	2200      	movs	r2, #0
 801e122:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e124:	68fa      	ldr	r2, [r7, #12]
 801e126:	23b0      	movs	r3, #176	@ 0xb0
 801e128:	009b      	lsls	r3, r3, #2
 801e12a:	58d0      	ldr	r0, [r2, r3]
 801e12c:	193b      	adds	r3, r7, r4
 801e12e:	881d      	ldrh	r5, [r3, #0]
 801e130:	000e      	movs	r6, r1
 801e132:	187c      	adds	r4, r7, r1
 801e134:	687a      	ldr	r2, [r7, #4]
 801e136:	230b      	movs	r3, #11
 801e138:	18fb      	adds	r3, r7, r3
 801e13a:	7819      	ldrb	r1, [r3, #0]
 801e13c:	002b      	movs	r3, r5
 801e13e:	f7f6 f99e 	bl	801447e <HAL_PCD_EP_Transmit>
 801e142:	0003      	movs	r3, r0
 801e144:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e146:	2516      	movs	r5, #22
 801e148:	197c      	adds	r4, r7, r5
 801e14a:	19bb      	adds	r3, r7, r6
 801e14c:	781b      	ldrb	r3, [r3, #0]
 801e14e:	0018      	movs	r0, r3
 801e150:	f000 f871 	bl	801e236 <USBD_Get_USB_Status>
 801e154:	0003      	movs	r3, r0
 801e156:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e158:	197b      	adds	r3, r7, r5
 801e15a:	781b      	ldrb	r3, [r3, #0]
}
 801e15c:	0018      	movs	r0, r3
 801e15e:	46bd      	mov	sp, r7
 801e160:	b007      	add	sp, #28
 801e162:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e164 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e164:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e166:	b087      	sub	sp, #28
 801e168:	af00      	add	r7, sp, #0
 801e16a:	60f8      	str	r0, [r7, #12]
 801e16c:	0008      	movs	r0, r1
 801e16e:	607a      	str	r2, [r7, #4]
 801e170:	0019      	movs	r1, r3
 801e172:	230b      	movs	r3, #11
 801e174:	18fb      	adds	r3, r7, r3
 801e176:	1c02      	adds	r2, r0, #0
 801e178:	701a      	strb	r2, [r3, #0]
 801e17a:	2408      	movs	r4, #8
 801e17c:	193b      	adds	r3, r7, r4
 801e17e:	1c0a      	adds	r2, r1, #0
 801e180:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e182:	2117      	movs	r1, #23
 801e184:	187b      	adds	r3, r7, r1
 801e186:	2200      	movs	r2, #0
 801e188:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e18a:	2516      	movs	r5, #22
 801e18c:	197b      	adds	r3, r7, r5
 801e18e:	2200      	movs	r2, #0
 801e190:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e192:	68fa      	ldr	r2, [r7, #12]
 801e194:	23b0      	movs	r3, #176	@ 0xb0
 801e196:	009b      	lsls	r3, r3, #2
 801e198:	58d0      	ldr	r0, [r2, r3]
 801e19a:	193b      	adds	r3, r7, r4
 801e19c:	881d      	ldrh	r5, [r3, #0]
 801e19e:	000e      	movs	r6, r1
 801e1a0:	187c      	adds	r4, r7, r1
 801e1a2:	687a      	ldr	r2, [r7, #4]
 801e1a4:	230b      	movs	r3, #11
 801e1a6:	18fb      	adds	r3, r7, r3
 801e1a8:	7819      	ldrb	r1, [r3, #0]
 801e1aa:	002b      	movs	r3, r5
 801e1ac:	f7f6 f917 	bl	80143de <HAL_PCD_EP_Receive>
 801e1b0:	0003      	movs	r3, r0
 801e1b2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e1b4:	2516      	movs	r5, #22
 801e1b6:	197c      	adds	r4, r7, r5
 801e1b8:	19bb      	adds	r3, r7, r6
 801e1ba:	781b      	ldrb	r3, [r3, #0]
 801e1bc:	0018      	movs	r0, r3
 801e1be:	f000 f83a 	bl	801e236 <USBD_Get_USB_Status>
 801e1c2:	0003      	movs	r3, r0
 801e1c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e1c6:	197b      	adds	r3, r7, r5
 801e1c8:	781b      	ldrb	r3, [r3, #0]
}
 801e1ca:	0018      	movs	r0, r3
 801e1cc:	46bd      	mov	sp, r7
 801e1ce:	b007      	add	sp, #28
 801e1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e1d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e1d2:	b580      	push	{r7, lr}
 801e1d4:	b082      	sub	sp, #8
 801e1d6:	af00      	add	r7, sp, #0
 801e1d8:	6078      	str	r0, [r7, #4]
 801e1da:	000a      	movs	r2, r1
 801e1dc:	1cfb      	adds	r3, r7, #3
 801e1de:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e1e0:	687a      	ldr	r2, [r7, #4]
 801e1e2:	23b0      	movs	r3, #176	@ 0xb0
 801e1e4:	009b      	lsls	r3, r3, #2
 801e1e6:	58d2      	ldr	r2, [r2, r3]
 801e1e8:	1cfb      	adds	r3, r7, #3
 801e1ea:	781b      	ldrb	r3, [r3, #0]
 801e1ec:	0019      	movs	r1, r3
 801e1ee:	0010      	movs	r0, r2
 801e1f0:	f7f6 f92c 	bl	801444c <HAL_PCD_EP_GetRxCount>
 801e1f4:	0003      	movs	r3, r0
}
 801e1f6:	0018      	movs	r0, r3
 801e1f8:	46bd      	mov	sp, r7
 801e1fa:	b002      	add	sp, #8
 801e1fc:	bd80      	pop	{r7, pc}
	...

0801e200 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801e200:	b580      	push	{r7, lr}
 801e202:	b082      	sub	sp, #8
 801e204:	af00      	add	r7, sp, #0
 801e206:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801e208:	4b02      	ldr	r3, [pc, #8]	@ (801e214 <USBD_static_malloc+0x14>)
}
 801e20a:	0018      	movs	r0, r3
 801e20c:	46bd      	mov	sp, r7
 801e20e:	b002      	add	sp, #8
 801e210:	bd80      	pop	{r7, pc}
 801e212:	46c0      	nop			@ (mov r8, r8)
 801e214:	20003190 	.word	0x20003190

0801e218 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801e218:	b580      	push	{r7, lr}
 801e21a:	b082      	sub	sp, #8
 801e21c:	af00      	add	r7, sp, #0
 801e21e:	6078      	str	r0, [r7, #4]

}
 801e220:	46c0      	nop			@ (mov r8, r8)
 801e222:	46bd      	mov	sp, r7
 801e224:	b002      	add	sp, #8
 801e226:	bd80      	pop	{r7, pc}

0801e228 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801e228:	b580      	push	{r7, lr}
 801e22a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801e22c:	f7ea fc3a 	bl	8008aa4 <SystemClock_Config>
}
 801e230:	46c0      	nop			@ (mov r8, r8)
 801e232:	46bd      	mov	sp, r7
 801e234:	bd80      	pop	{r7, pc}

0801e236 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e236:	b580      	push	{r7, lr}
 801e238:	b084      	sub	sp, #16
 801e23a:	af00      	add	r7, sp, #0
 801e23c:	0002      	movs	r2, r0
 801e23e:	1dfb      	adds	r3, r7, #7
 801e240:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e242:	230f      	movs	r3, #15
 801e244:	18fb      	adds	r3, r7, r3
 801e246:	2200      	movs	r2, #0
 801e248:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801e24a:	1dfb      	adds	r3, r7, #7
 801e24c:	781b      	ldrb	r3, [r3, #0]
 801e24e:	2b03      	cmp	r3, #3
 801e250:	d017      	beq.n	801e282 <USBD_Get_USB_Status+0x4c>
 801e252:	dc1b      	bgt.n	801e28c <USBD_Get_USB_Status+0x56>
 801e254:	2b02      	cmp	r3, #2
 801e256:	d00f      	beq.n	801e278 <USBD_Get_USB_Status+0x42>
 801e258:	dc18      	bgt.n	801e28c <USBD_Get_USB_Status+0x56>
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d002      	beq.n	801e264 <USBD_Get_USB_Status+0x2e>
 801e25e:	2b01      	cmp	r3, #1
 801e260:	d005      	beq.n	801e26e <USBD_Get_USB_Status+0x38>
 801e262:	e013      	b.n	801e28c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e264:	230f      	movs	r3, #15
 801e266:	18fb      	adds	r3, r7, r3
 801e268:	2200      	movs	r2, #0
 801e26a:	701a      	strb	r2, [r3, #0]
    break;
 801e26c:	e013      	b.n	801e296 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e26e:	230f      	movs	r3, #15
 801e270:	18fb      	adds	r3, r7, r3
 801e272:	2202      	movs	r2, #2
 801e274:	701a      	strb	r2, [r3, #0]
    break;
 801e276:	e00e      	b.n	801e296 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e278:	230f      	movs	r3, #15
 801e27a:	18fb      	adds	r3, r7, r3
 801e27c:	2201      	movs	r2, #1
 801e27e:	701a      	strb	r2, [r3, #0]
    break;
 801e280:	e009      	b.n	801e296 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e282:	230f      	movs	r3, #15
 801e284:	18fb      	adds	r3, r7, r3
 801e286:	2202      	movs	r2, #2
 801e288:	701a      	strb	r2, [r3, #0]
    break;
 801e28a:	e004      	b.n	801e296 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801e28c:	230f      	movs	r3, #15
 801e28e:	18fb      	adds	r3, r7, r3
 801e290:	2202      	movs	r2, #2
 801e292:	701a      	strb	r2, [r3, #0]
    break;
 801e294:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801e296:	230f      	movs	r3, #15
 801e298:	18fb      	adds	r3, r7, r3
 801e29a:	781b      	ldrb	r3, [r3, #0]
}
 801e29c:	0018      	movs	r0, r3
 801e29e:	46bd      	mov	sp, r7
 801e2a0:	b004      	add	sp, #16
 801e2a2:	bd80      	pop	{r7, pc}

0801e2a4 <arm_cfft_radix4by2_q31>:
 801e2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2a6:	465f      	mov	r7, fp
 801e2a8:	4656      	mov	r6, sl
 801e2aa:	464d      	mov	r5, r9
 801e2ac:	4644      	mov	r4, r8
 801e2ae:	000b      	movs	r3, r1
 801e2b0:	b4f0      	push	{r4, r5, r6, r7}
 801e2b2:	085b      	lsrs	r3, r3, #1
 801e2b4:	b08f      	sub	sp, #60	@ 0x3c
 801e2b6:	910a      	str	r1, [sp, #40]	@ 0x28
 801e2b8:	0007      	movs	r7, r0
 801e2ba:	9009      	str	r0, [sp, #36]	@ 0x24
 801e2bc:	0011      	movs	r1, r2
 801e2be:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e2c0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d100      	bne.n	801e2c8 <arm_cfft_radix4by2_q31+0x24>
 801e2c6:	e0a0      	b.n	801e40a <arm_cfft_radix4by2_q31+0x166>
 801e2c8:	0002      	movs	r2, r0
 801e2ca:	00db      	lsls	r3, r3, #3
 801e2cc:	3204      	adds	r2, #4
 801e2ce:	4691      	mov	r9, r2
 801e2d0:	4698      	mov	r8, r3
 801e2d2:	000a      	movs	r2, r1
 801e2d4:	464e      	mov	r6, r9
 801e2d6:	4442      	add	r2, r8
 801e2d8:	4699      	mov	r9, r3
 801e2da:	4688      	mov	r8, r1
 801e2dc:	9208      	str	r2, [sp, #32]
 801e2de:	900d      	str	r0, [sp, #52]	@ 0x34
 801e2e0:	4643      	mov	r3, r8
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	469b      	mov	fp, r3
 801e2e6:	4643      	mov	r3, r8
 801e2e8:	685b      	ldr	r3, [r3, #4]
 801e2ea:	469a      	mov	sl, r3
 801e2ec:	683b      	ldr	r3, [r7, #0]
 801e2ee:	109c      	asrs	r4, r3, #2
 801e2f0:	464b      	mov	r3, r9
 801e2f2:	58fb      	ldr	r3, [r7, r3]
 801e2f4:	109a      	asrs	r2, r3, #2
 801e2f6:	18a3      	adds	r3, r4, r2
 801e2f8:	603b      	str	r3, [r7, #0]
 801e2fa:	6833      	ldr	r3, [r6, #0]
 801e2fc:	1aa4      	subs	r4, r4, r2
 801e2fe:	109d      	asrs	r5, r3, #2
 801e300:	464b      	mov	r3, r9
 801e302:	58f3      	ldr	r3, [r6, r3]
 801e304:	17e2      	asrs	r2, r4, #31
 801e306:	109b      	asrs	r3, r3, #2
 801e308:	18e9      	adds	r1, r5, r3
 801e30a:	6031      	str	r1, [r6, #0]
 801e30c:	0011      	movs	r1, r2
 801e30e:	465a      	mov	r2, fp
 801e310:	17d2      	asrs	r2, r2, #31
 801e312:	0010      	movs	r0, r2
 801e314:	4652      	mov	r2, sl
 801e316:	1aed      	subs	r5, r5, r3
 801e318:	17eb      	asrs	r3, r5, #31
 801e31a:	17d2      	asrs	r2, r2, #31
 801e31c:	9307      	str	r3, [sp, #28]
 801e31e:	9204      	str	r2, [sp, #16]
 801e320:	0003      	movs	r3, r0
 801e322:	465a      	mov	r2, fp
 801e324:	9006      	str	r0, [sp, #24]
 801e326:	0020      	movs	r0, r4
 801e328:	9105      	str	r1, [sp, #20]
 801e32a:	f7e2 f949 	bl	80005c0 <__aeabi_lmul>
 801e32e:	2280      	movs	r2, #128	@ 0x80
 801e330:	2300      	movs	r3, #0
 801e332:	0612      	lsls	r2, r2, #24
 801e334:	1880      	adds	r0, r0, r2
 801e336:	4159      	adcs	r1, r3
 801e338:	2300      	movs	r3, #0
 801e33a:	9101      	str	r1, [sp, #4]
 801e33c:	9300      	str	r3, [sp, #0]
 801e33e:	4652      	mov	r2, sl
 801e340:	9b04      	ldr	r3, [sp, #16]
 801e342:	0028      	movs	r0, r5
 801e344:	17e9      	asrs	r1, r5, #31
 801e346:	f7e2 f93b 	bl	80005c0 <__aeabi_lmul>
 801e34a:	9a00      	ldr	r2, [sp, #0]
 801e34c:	9b01      	ldr	r3, [sp, #4]
 801e34e:	1880      	adds	r0, r0, r2
 801e350:	4159      	adcs	r1, r3
 801e352:	2280      	movs	r2, #128	@ 0x80
 801e354:	2300      	movs	r3, #0
 801e356:	0612      	lsls	r2, r2, #24
 801e358:	1880      	adds	r0, r0, r2
 801e35a:	4159      	adcs	r1, r3
 801e35c:	464a      	mov	r2, r9
 801e35e:	004b      	lsls	r3, r1, #1
 801e360:	50bb      	str	r3, [r7, r2]
 801e362:	4658      	mov	r0, fp
 801e364:	002a      	movs	r2, r5
 801e366:	9b07      	ldr	r3, [sp, #28]
 801e368:	9906      	ldr	r1, [sp, #24]
 801e36a:	f7e2 f929 	bl	80005c0 <__aeabi_lmul>
 801e36e:	2280      	movs	r2, #128	@ 0x80
 801e370:	2300      	movs	r3, #0
 801e372:	0612      	lsls	r2, r2, #24
 801e374:	1880      	adds	r0, r0, r2
 801e376:	4159      	adcs	r1, r3
 801e378:	2000      	movs	r0, #0
 801e37a:	9103      	str	r1, [sp, #12]
 801e37c:	9002      	str	r0, [sp, #8]
 801e37e:	4652      	mov	r2, sl
 801e380:	9b04      	ldr	r3, [sp, #16]
 801e382:	0020      	movs	r0, r4
 801e384:	9905      	ldr	r1, [sp, #20]
 801e386:	f7e2 f91b 	bl	80005c0 <__aeabi_lmul>
 801e38a:	9a02      	ldr	r2, [sp, #8]
 801e38c:	9b03      	ldr	r3, [sp, #12]
 801e38e:	1a12      	subs	r2, r2, r0
 801e390:	418b      	sbcs	r3, r1
 801e392:	2080      	movs	r0, #128	@ 0x80
 801e394:	2100      	movs	r1, #0
 801e396:	0600      	lsls	r0, r0, #24
 801e398:	1812      	adds	r2, r2, r0
 801e39a:	414b      	adcs	r3, r1
 801e39c:	464a      	mov	r2, r9
 801e39e:	005b      	lsls	r3, r3, #1
 801e3a0:	50b3      	str	r3, [r6, r2]
 801e3a2:	2308      	movs	r3, #8
 801e3a4:	469c      	mov	ip, r3
 801e3a6:	9b08      	ldr	r3, [sp, #32]
 801e3a8:	44e0      	add	r8, ip
 801e3aa:	3708      	adds	r7, #8
 801e3ac:	3608      	adds	r6, #8
 801e3ae:	4598      	cmp	r8, r3
 801e3b0:	d196      	bne.n	801e2e0 <arm_cfft_radix4by2_q31+0x3c>
 801e3b2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e3b4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e3b6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e3b8:	2302      	movs	r3, #2
 801e3ba:	003a      	movs	r2, r7
 801e3bc:	0029      	movs	r1, r5
 801e3be:	0020      	movs	r0, r4
 801e3c0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801e3c2:	f000 f957 	bl	801e674 <arm_radix4_butterfly_q31>
 801e3c6:	46a4      	mov	ip, r4
 801e3c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e3ca:	2302      	movs	r3, #2
 801e3cc:	0088      	lsls	r0, r1, #2
 801e3ce:	4460      	add	r0, ip
 801e3d0:	003a      	movs	r2, r7
 801e3d2:	0029      	movs	r1, r5
 801e3d4:	f000 f94e 	bl	801e674 <arm_radix4_butterfly_q31>
 801e3d8:	46a4      	mov	ip, r4
 801e3da:	0128      	lsls	r0, r5, #4
 801e3dc:	4460      	add	r0, ip
 801e3de:	6833      	ldr	r3, [r6, #0]
 801e3e0:	005b      	lsls	r3, r3, #1
 801e3e2:	6033      	str	r3, [r6, #0]
 801e3e4:	6873      	ldr	r3, [r6, #4]
 801e3e6:	005b      	lsls	r3, r3, #1
 801e3e8:	6073      	str	r3, [r6, #4]
 801e3ea:	68b3      	ldr	r3, [r6, #8]
 801e3ec:	005b      	lsls	r3, r3, #1
 801e3ee:	60b3      	str	r3, [r6, #8]
 801e3f0:	68f3      	ldr	r3, [r6, #12]
 801e3f2:	005b      	lsls	r3, r3, #1
 801e3f4:	60f3      	str	r3, [r6, #12]
 801e3f6:	3610      	adds	r6, #16
 801e3f8:	42b0      	cmp	r0, r6
 801e3fa:	d1f0      	bne.n	801e3de <arm_cfft_radix4by2_q31+0x13a>
 801e3fc:	b00f      	add	sp, #60	@ 0x3c
 801e3fe:	bc3c      	pop	{r2, r3, r4, r5}
 801e400:	4690      	mov	r8, r2
 801e402:	4699      	mov	r9, r3
 801e404:	46a2      	mov	sl, r4
 801e406:	46ab      	mov	fp, r5
 801e408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e40a:	2302      	movs	r3, #2
 801e40c:	2100      	movs	r1, #0
 801e40e:	0015      	movs	r5, r2
 801e410:	f000 f930 	bl	801e674 <arm_radix4_butterfly_q31>
 801e414:	46bc      	mov	ip, r7
 801e416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e418:	002a      	movs	r2, r5
 801e41a:	0098      	lsls	r0, r3, #2
 801e41c:	4460      	add	r0, ip
 801e41e:	2302      	movs	r3, #2
 801e420:	2100      	movs	r1, #0
 801e422:	f000 f927 	bl	801e674 <arm_radix4_butterfly_q31>
 801e426:	e7e9      	b.n	801e3fc <arm_cfft_radix4by2_q31+0x158>

0801e428 <arm_cfft_radix4by2_inverse_q31>:
 801e428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e42a:	465f      	mov	r7, fp
 801e42c:	4656      	mov	r6, sl
 801e42e:	464d      	mov	r5, r9
 801e430:	4644      	mov	r4, r8
 801e432:	000b      	movs	r3, r1
 801e434:	b4f0      	push	{r4, r5, r6, r7}
 801e436:	085b      	lsrs	r3, r3, #1
 801e438:	b08f      	sub	sp, #60	@ 0x3c
 801e43a:	910a      	str	r1, [sp, #40]	@ 0x28
 801e43c:	0007      	movs	r7, r0
 801e43e:	9009      	str	r0, [sp, #36]	@ 0x24
 801e440:	0011      	movs	r1, r2
 801e442:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e444:	930c      	str	r3, [sp, #48]	@ 0x30
 801e446:	2b00      	cmp	r3, #0
 801e448:	d100      	bne.n	801e44c <arm_cfft_radix4by2_inverse_q31+0x24>
 801e44a:	e0a0      	b.n	801e58e <arm_cfft_radix4by2_inverse_q31+0x166>
 801e44c:	0002      	movs	r2, r0
 801e44e:	00db      	lsls	r3, r3, #3
 801e450:	3204      	adds	r2, #4
 801e452:	4691      	mov	r9, r2
 801e454:	4698      	mov	r8, r3
 801e456:	000a      	movs	r2, r1
 801e458:	464e      	mov	r6, r9
 801e45a:	4442      	add	r2, r8
 801e45c:	4699      	mov	r9, r3
 801e45e:	4688      	mov	r8, r1
 801e460:	9208      	str	r2, [sp, #32]
 801e462:	900d      	str	r0, [sp, #52]	@ 0x34
 801e464:	4643      	mov	r3, r8
 801e466:	681b      	ldr	r3, [r3, #0]
 801e468:	469b      	mov	fp, r3
 801e46a:	4643      	mov	r3, r8
 801e46c:	685b      	ldr	r3, [r3, #4]
 801e46e:	469a      	mov	sl, r3
 801e470:	683b      	ldr	r3, [r7, #0]
 801e472:	109c      	asrs	r4, r3, #2
 801e474:	464b      	mov	r3, r9
 801e476:	58fb      	ldr	r3, [r7, r3]
 801e478:	109a      	asrs	r2, r3, #2
 801e47a:	18a3      	adds	r3, r4, r2
 801e47c:	603b      	str	r3, [r7, #0]
 801e47e:	6833      	ldr	r3, [r6, #0]
 801e480:	1aa4      	subs	r4, r4, r2
 801e482:	109d      	asrs	r5, r3, #2
 801e484:	464b      	mov	r3, r9
 801e486:	58f3      	ldr	r3, [r6, r3]
 801e488:	17e2      	asrs	r2, r4, #31
 801e48a:	109b      	asrs	r3, r3, #2
 801e48c:	18e9      	adds	r1, r5, r3
 801e48e:	6031      	str	r1, [r6, #0]
 801e490:	0011      	movs	r1, r2
 801e492:	465a      	mov	r2, fp
 801e494:	17d2      	asrs	r2, r2, #31
 801e496:	0010      	movs	r0, r2
 801e498:	4652      	mov	r2, sl
 801e49a:	1aed      	subs	r5, r5, r3
 801e49c:	17eb      	asrs	r3, r5, #31
 801e49e:	17d2      	asrs	r2, r2, #31
 801e4a0:	9307      	str	r3, [sp, #28]
 801e4a2:	9204      	str	r2, [sp, #16]
 801e4a4:	0003      	movs	r3, r0
 801e4a6:	465a      	mov	r2, fp
 801e4a8:	9006      	str	r0, [sp, #24]
 801e4aa:	0020      	movs	r0, r4
 801e4ac:	9105      	str	r1, [sp, #20]
 801e4ae:	f7e2 f887 	bl	80005c0 <__aeabi_lmul>
 801e4b2:	2280      	movs	r2, #128	@ 0x80
 801e4b4:	2300      	movs	r3, #0
 801e4b6:	0612      	lsls	r2, r2, #24
 801e4b8:	1880      	adds	r0, r0, r2
 801e4ba:	4159      	adcs	r1, r3
 801e4bc:	2300      	movs	r3, #0
 801e4be:	9101      	str	r1, [sp, #4]
 801e4c0:	9300      	str	r3, [sp, #0]
 801e4c2:	4652      	mov	r2, sl
 801e4c4:	9b04      	ldr	r3, [sp, #16]
 801e4c6:	0028      	movs	r0, r5
 801e4c8:	17e9      	asrs	r1, r5, #31
 801e4ca:	f7e2 f879 	bl	80005c0 <__aeabi_lmul>
 801e4ce:	9a00      	ldr	r2, [sp, #0]
 801e4d0:	9b01      	ldr	r3, [sp, #4]
 801e4d2:	1a12      	subs	r2, r2, r0
 801e4d4:	418b      	sbcs	r3, r1
 801e4d6:	2080      	movs	r0, #128	@ 0x80
 801e4d8:	2100      	movs	r1, #0
 801e4da:	0600      	lsls	r0, r0, #24
 801e4dc:	1812      	adds	r2, r2, r0
 801e4de:	414b      	adcs	r3, r1
 801e4e0:	464a      	mov	r2, r9
 801e4e2:	005b      	lsls	r3, r3, #1
 801e4e4:	50bb      	str	r3, [r7, r2]
 801e4e6:	4658      	mov	r0, fp
 801e4e8:	002a      	movs	r2, r5
 801e4ea:	9b07      	ldr	r3, [sp, #28]
 801e4ec:	9906      	ldr	r1, [sp, #24]
 801e4ee:	f7e2 f867 	bl	80005c0 <__aeabi_lmul>
 801e4f2:	2280      	movs	r2, #128	@ 0x80
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	0612      	lsls	r2, r2, #24
 801e4f8:	1880      	adds	r0, r0, r2
 801e4fa:	4159      	adcs	r1, r3
 801e4fc:	2000      	movs	r0, #0
 801e4fe:	9103      	str	r1, [sp, #12]
 801e500:	9002      	str	r0, [sp, #8]
 801e502:	4652      	mov	r2, sl
 801e504:	9b04      	ldr	r3, [sp, #16]
 801e506:	0020      	movs	r0, r4
 801e508:	9905      	ldr	r1, [sp, #20]
 801e50a:	f7e2 f859 	bl	80005c0 <__aeabi_lmul>
 801e50e:	9b02      	ldr	r3, [sp, #8]
 801e510:	9c03      	ldr	r4, [sp, #12]
 801e512:	18c0      	adds	r0, r0, r3
 801e514:	4161      	adcs	r1, r4
 801e516:	2380      	movs	r3, #128	@ 0x80
 801e518:	2400      	movs	r4, #0
 801e51a:	061b      	lsls	r3, r3, #24
 801e51c:	18c0      	adds	r0, r0, r3
 801e51e:	4161      	adcs	r1, r4
 801e520:	464a      	mov	r2, r9
 801e522:	004b      	lsls	r3, r1, #1
 801e524:	50b3      	str	r3, [r6, r2]
 801e526:	2308      	movs	r3, #8
 801e528:	469c      	mov	ip, r3
 801e52a:	9b08      	ldr	r3, [sp, #32]
 801e52c:	44e0      	add	r8, ip
 801e52e:	3708      	adds	r7, #8
 801e530:	3608      	adds	r6, #8
 801e532:	4598      	cmp	r8, r3
 801e534:	d196      	bne.n	801e464 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801e536:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e538:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e53a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e53c:	2302      	movs	r3, #2
 801e53e:	003a      	movs	r2, r7
 801e540:	0029      	movs	r1, r5
 801e542:	0020      	movs	r0, r4
 801e544:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801e546:	f000 fb3b 	bl	801ebc0 <arm_radix4_butterfly_inverse_q31>
 801e54a:	46a4      	mov	ip, r4
 801e54c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e54e:	2302      	movs	r3, #2
 801e550:	0088      	lsls	r0, r1, #2
 801e552:	4460      	add	r0, ip
 801e554:	003a      	movs	r2, r7
 801e556:	0029      	movs	r1, r5
 801e558:	f000 fb32 	bl	801ebc0 <arm_radix4_butterfly_inverse_q31>
 801e55c:	46a4      	mov	ip, r4
 801e55e:	0128      	lsls	r0, r5, #4
 801e560:	4460      	add	r0, ip
 801e562:	6833      	ldr	r3, [r6, #0]
 801e564:	005b      	lsls	r3, r3, #1
 801e566:	6033      	str	r3, [r6, #0]
 801e568:	6873      	ldr	r3, [r6, #4]
 801e56a:	005b      	lsls	r3, r3, #1
 801e56c:	6073      	str	r3, [r6, #4]
 801e56e:	68b3      	ldr	r3, [r6, #8]
 801e570:	005b      	lsls	r3, r3, #1
 801e572:	60b3      	str	r3, [r6, #8]
 801e574:	68f3      	ldr	r3, [r6, #12]
 801e576:	005b      	lsls	r3, r3, #1
 801e578:	60f3      	str	r3, [r6, #12]
 801e57a:	3610      	adds	r6, #16
 801e57c:	42b0      	cmp	r0, r6
 801e57e:	d1f0      	bne.n	801e562 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801e580:	b00f      	add	sp, #60	@ 0x3c
 801e582:	bc3c      	pop	{r2, r3, r4, r5}
 801e584:	4690      	mov	r8, r2
 801e586:	4699      	mov	r9, r3
 801e588:	46a2      	mov	sl, r4
 801e58a:	46ab      	mov	fp, r5
 801e58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e58e:	2302      	movs	r3, #2
 801e590:	2100      	movs	r1, #0
 801e592:	0015      	movs	r5, r2
 801e594:	f000 fb14 	bl	801ebc0 <arm_radix4_butterfly_inverse_q31>
 801e598:	46bc      	mov	ip, r7
 801e59a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e59c:	002a      	movs	r2, r5
 801e59e:	0098      	lsls	r0, r3, #2
 801e5a0:	4460      	add	r0, ip
 801e5a2:	2302      	movs	r3, #2
 801e5a4:	2100      	movs	r1, #0
 801e5a6:	f000 fb0b 	bl	801ebc0 <arm_radix4_butterfly_inverse_q31>
 801e5aa:	e7e9      	b.n	801e580 <arm_cfft_radix4by2_inverse_q31+0x158>

0801e5ac <arm_cfft_q31>:
 801e5ac:	b570      	push	{r4, r5, r6, lr}
 801e5ae:	001e      	movs	r6, r3
 801e5b0:	2380      	movs	r3, #128	@ 0x80
 801e5b2:	000d      	movs	r5, r1
 801e5b4:	0004      	movs	r4, r0
 801e5b6:	8801      	ldrh	r1, [r0, #0]
 801e5b8:	005b      	lsls	r3, r3, #1
 801e5ba:	2a01      	cmp	r2, #1
 801e5bc:	d028      	beq.n	801e610 <arm_cfft_q31+0x64>
 801e5be:	4299      	cmp	r1, r3
 801e5c0:	d020      	beq.n	801e604 <arm_cfft_q31+0x58>
 801e5c2:	d812      	bhi.n	801e5ea <arm_cfft_q31+0x3e>
 801e5c4:	2920      	cmp	r1, #32
 801e5c6:	d004      	beq.n	801e5d2 <arm_cfft_q31+0x26>
 801e5c8:	d949      	bls.n	801e65e <arm_cfft_q31+0xb2>
 801e5ca:	2940      	cmp	r1, #64	@ 0x40
 801e5cc:	d01a      	beq.n	801e604 <arm_cfft_q31+0x58>
 801e5ce:	2980      	cmp	r1, #128	@ 0x80
 801e5d0:	d103      	bne.n	801e5da <arm_cfft_q31+0x2e>
 801e5d2:	6862      	ldr	r2, [r4, #4]
 801e5d4:	0028      	movs	r0, r5
 801e5d6:	f7ff fe65 	bl	801e2a4 <arm_cfft_radix4by2_q31>
 801e5da:	2e00      	cmp	r6, #0
 801e5dc:	d004      	beq.n	801e5e8 <arm_cfft_q31+0x3c>
 801e5de:	68a2      	ldr	r2, [r4, #8]
 801e5e0:	89a1      	ldrh	r1, [r4, #12]
 801e5e2:	0028      	movs	r0, r5
 801e5e4:	f7e1 fd90 	bl	8000108 <arm_bitreversal_32>
 801e5e8:	bd70      	pop	{r4, r5, r6, pc}
 801e5ea:	2380      	movs	r3, #128	@ 0x80
 801e5ec:	00db      	lsls	r3, r3, #3
 801e5ee:	4299      	cmp	r1, r3
 801e5f0:	d008      	beq.n	801e604 <arm_cfft_q31+0x58>
 801e5f2:	d92f      	bls.n	801e654 <arm_cfft_q31+0xa8>
 801e5f4:	2380      	movs	r3, #128	@ 0x80
 801e5f6:	011b      	lsls	r3, r3, #4
 801e5f8:	4299      	cmp	r1, r3
 801e5fa:	d0ea      	beq.n	801e5d2 <arm_cfft_q31+0x26>
 801e5fc:	2380      	movs	r3, #128	@ 0x80
 801e5fe:	015b      	lsls	r3, r3, #5
 801e600:	4299      	cmp	r1, r3
 801e602:	d1ea      	bne.n	801e5da <arm_cfft_q31+0x2e>
 801e604:	2301      	movs	r3, #1
 801e606:	6862      	ldr	r2, [r4, #4]
 801e608:	0028      	movs	r0, r5
 801e60a:	f000 f833 	bl	801e674 <arm_radix4_butterfly_q31>
 801e60e:	e7e4      	b.n	801e5da <arm_cfft_q31+0x2e>
 801e610:	4299      	cmp	r1, r3
 801e612:	d019      	beq.n	801e648 <arm_cfft_q31+0x9c>
 801e614:	d80b      	bhi.n	801e62e <arm_cfft_q31+0x82>
 801e616:	2920      	cmp	r1, #32
 801e618:	d004      	beq.n	801e624 <arm_cfft_q31+0x78>
 801e61a:	d928      	bls.n	801e66e <arm_cfft_q31+0xc2>
 801e61c:	2940      	cmp	r1, #64	@ 0x40
 801e61e:	d013      	beq.n	801e648 <arm_cfft_q31+0x9c>
 801e620:	2980      	cmp	r1, #128	@ 0x80
 801e622:	d1da      	bne.n	801e5da <arm_cfft_q31+0x2e>
 801e624:	6862      	ldr	r2, [r4, #4]
 801e626:	0028      	movs	r0, r5
 801e628:	f7ff fefe 	bl	801e428 <arm_cfft_radix4by2_inverse_q31>
 801e62c:	e7d5      	b.n	801e5da <arm_cfft_q31+0x2e>
 801e62e:	2380      	movs	r3, #128	@ 0x80
 801e630:	00db      	lsls	r3, r3, #3
 801e632:	4299      	cmp	r1, r3
 801e634:	d008      	beq.n	801e648 <arm_cfft_q31+0x9c>
 801e636:	d915      	bls.n	801e664 <arm_cfft_q31+0xb8>
 801e638:	2380      	movs	r3, #128	@ 0x80
 801e63a:	011b      	lsls	r3, r3, #4
 801e63c:	4299      	cmp	r1, r3
 801e63e:	d0f1      	beq.n	801e624 <arm_cfft_q31+0x78>
 801e640:	2380      	movs	r3, #128	@ 0x80
 801e642:	015b      	lsls	r3, r3, #5
 801e644:	4299      	cmp	r1, r3
 801e646:	d1c8      	bne.n	801e5da <arm_cfft_q31+0x2e>
 801e648:	2301      	movs	r3, #1
 801e64a:	6862      	ldr	r2, [r4, #4]
 801e64c:	0028      	movs	r0, r5
 801e64e:	f000 fab7 	bl	801ebc0 <arm_radix4_butterfly_inverse_q31>
 801e652:	e7c2      	b.n	801e5da <arm_cfft_q31+0x2e>
 801e654:	2380      	movs	r3, #128	@ 0x80
 801e656:	009b      	lsls	r3, r3, #2
 801e658:	4299      	cmp	r1, r3
 801e65a:	d0ba      	beq.n	801e5d2 <arm_cfft_q31+0x26>
 801e65c:	e7bd      	b.n	801e5da <arm_cfft_q31+0x2e>
 801e65e:	2910      	cmp	r1, #16
 801e660:	d1bb      	bne.n	801e5da <arm_cfft_q31+0x2e>
 801e662:	e7cf      	b.n	801e604 <arm_cfft_q31+0x58>
 801e664:	2380      	movs	r3, #128	@ 0x80
 801e666:	009b      	lsls	r3, r3, #2
 801e668:	4299      	cmp	r1, r3
 801e66a:	d0db      	beq.n	801e624 <arm_cfft_q31+0x78>
 801e66c:	e7b5      	b.n	801e5da <arm_cfft_q31+0x2e>
 801e66e:	2910      	cmp	r1, #16
 801e670:	d1b3      	bne.n	801e5da <arm_cfft_q31+0x2e>
 801e672:	e7e9      	b.n	801e648 <arm_cfft_q31+0x9c>

0801e674 <arm_radix4_butterfly_q31>:
 801e674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e676:	464d      	mov	r5, r9
 801e678:	4644      	mov	r4, r8
 801e67a:	465f      	mov	r7, fp
 801e67c:	4656      	mov	r6, sl
 801e67e:	469c      	mov	ip, r3
 801e680:	b4f0      	push	{r4, r5, r6, r7}
 801e682:	b0a7      	sub	sp, #156	@ 0x9c
 801e684:	9114      	str	r1, [sp, #80]	@ 0x50
 801e686:	0889      	lsrs	r1, r1, #2
 801e688:	9310      	str	r3, [sp, #64]	@ 0x40
 801e68a:	00cb      	lsls	r3, r1, #3
 801e68c:	0015      	movs	r5, r2
 801e68e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e690:	18c2      	adds	r2, r0, r3
 801e692:	000c      	movs	r4, r1
 801e694:	469a      	mov	sl, r3
 801e696:	9124      	str	r1, [sp, #144]	@ 0x90
 801e698:	18d1      	adds	r1, r2, r3
 801e69a:	4663      	mov	r3, ip
 801e69c:	468b      	mov	fp, r1
 801e69e:	0119      	lsls	r1, r3, #4
 801e6a0:	910d      	str	r1, [sp, #52]	@ 0x34
 801e6a2:	00d9      	lsls	r1, r3, #3
 801e6a4:	005b      	lsls	r3, r3, #1
 801e6a6:	4463      	add	r3, ip
 801e6a8:	910e      	str	r1, [sp, #56]	@ 0x38
 801e6aa:	00d9      	lsls	r1, r3, #3
 801e6ac:	465b      	mov	r3, fp
 801e6ae:	44da      	add	sl, fp
 801e6b0:	4690      	mov	r8, r2
 801e6b2:	4683      	mov	fp, r0
 801e6b4:	4699      	mov	r9, r3
 801e6b6:	9022      	str	r0, [sp, #136]	@ 0x88
 801e6b8:	9025      	str	r0, [sp, #148]	@ 0x94
 801e6ba:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e6bc:	9502      	str	r5, [sp, #8]
 801e6be:	9500      	str	r5, [sp, #0]
 801e6c0:	9501      	str	r5, [sp, #4]
 801e6c2:	9407      	str	r4, [sp, #28]
 801e6c4:	465b      	mov	r3, fp
 801e6c6:	681b      	ldr	r3, [r3, #0]
 801e6c8:	4642      	mov	r2, r8
 801e6ca:	111c      	asrs	r4, r3, #4
 801e6cc:	464b      	mov	r3, r9
 801e6ce:	4658      	mov	r0, fp
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	6812      	ldr	r2, [r2, #0]
 801e6d4:	111b      	asrs	r3, r3, #4
 801e6d6:	18e7      	adds	r7, r4, r3
 801e6d8:	1ae3      	subs	r3, r4, r3
 801e6da:	1114      	asrs	r4, r2, #4
 801e6dc:	4652      	mov	r2, sl
 801e6de:	6840      	ldr	r0, [r0, #4]
 801e6e0:	6812      	ldr	r2, [r2, #0]
 801e6e2:	1105      	asrs	r5, r0, #4
 801e6e4:	4648      	mov	r0, r9
 801e6e6:	9303      	str	r3, [sp, #12]
 801e6e8:	1113      	asrs	r3, r2, #4
 801e6ea:	18e2      	adds	r2, r4, r3
 801e6ec:	465c      	mov	r4, fp
 801e6ee:	6840      	ldr	r0, [r0, #4]
 801e6f0:	1103      	asrs	r3, r0, #4
 801e6f2:	18ee      	adds	r6, r5, r3
 801e6f4:	1ae8      	subs	r0, r5, r3
 801e6f6:	18bb      	adds	r3, r7, r2
 801e6f8:	6023      	str	r3, [r4, #0]
 801e6fa:	4644      	mov	r4, r8
 801e6fc:	6864      	ldr	r4, [r4, #4]
 801e6fe:	9004      	str	r0, [sp, #16]
 801e700:	1125      	asrs	r5, r4, #4
 801e702:	4654      	mov	r4, sl
 801e704:	6864      	ldr	r4, [r4, #4]
 801e706:	1123      	asrs	r3, r4, #4
 801e708:	465c      	mov	r4, fp
 801e70a:	18eb      	adds	r3, r5, r3
 801e70c:	18f1      	adds	r1, r6, r3
 801e70e:	6061      	str	r1, [r4, #4]
 801e710:	4655      	mov	r5, sl
 801e712:	4644      	mov	r4, r8
 801e714:	686d      	ldr	r5, [r5, #4]
 801e716:	6864      	ldr	r4, [r4, #4]
 801e718:	1129      	asrs	r1, r5, #4
 801e71a:	1124      	asrs	r4, r4, #4
 801e71c:	1a64      	subs	r4, r4, r1
 801e71e:	4641      	mov	r1, r8
 801e720:	6809      	ldr	r1, [r1, #0]
 801e722:	9405      	str	r4, [sp, #20]
 801e724:	1108      	asrs	r0, r1, #4
 801e726:	4651      	mov	r1, sl
 801e728:	6809      	ldr	r1, [r1, #0]
 801e72a:	1abc      	subs	r4, r7, r2
 801e72c:	1109      	asrs	r1, r1, #4
 801e72e:	1a41      	subs	r1, r0, r1
 801e730:	17e2      	asrs	r2, r4, #31
 801e732:	9106      	str	r1, [sp, #24]
 801e734:	0011      	movs	r1, r2
 801e736:	9a01      	ldr	r2, [sp, #4]
 801e738:	9108      	str	r1, [sp, #32]
 801e73a:	6817      	ldr	r7, [r2, #0]
 801e73c:	17fd      	asrs	r5, r7, #31
 801e73e:	0028      	movs	r0, r5
 801e740:	1af5      	subs	r5, r6, r3
 801e742:	17ee      	asrs	r6, r5, #31
 801e744:	960a      	str	r6, [sp, #40]	@ 0x28
 801e746:	6856      	ldr	r6, [r2, #4]
 801e748:	9009      	str	r0, [sp, #36]	@ 0x24
 801e74a:	17f3      	asrs	r3, r6, #31
 801e74c:	003a      	movs	r2, r7
 801e74e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e750:	0003      	movs	r3, r0
 801e752:	0020      	movs	r0, r4
 801e754:	f7e1 ff34 	bl	80005c0 <__aeabi_lmul>
 801e758:	0032      	movs	r2, r6
 801e75a:	17f3      	asrs	r3, r6, #31
 801e75c:	910c      	str	r1, [sp, #48]	@ 0x30
 801e75e:	0028      	movs	r0, r5
 801e760:	17e9      	asrs	r1, r5, #31
 801e762:	f7e1 ff2d 	bl	80005c0 <__aeabi_lmul>
 801e766:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e768:	002a      	movs	r2, r5
 801e76a:	4684      	mov	ip, r0
 801e76c:	4640      	mov	r0, r8
 801e76e:	4461      	add	r1, ip
 801e770:	0049      	lsls	r1, r1, #1
 801e772:	6001      	str	r1, [r0, #0]
 801e774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e776:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e778:	0038      	movs	r0, r7
 801e77a:	f7e1 ff21 	bl	80005c0 <__aeabi_lmul>
 801e77e:	0032      	movs	r2, r6
 801e780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e782:	000d      	movs	r5, r1
 801e784:	0020      	movs	r0, r4
 801e786:	9908      	ldr	r1, [sp, #32]
 801e788:	f7e1 ff1a 	bl	80005c0 <__aeabi_lmul>
 801e78c:	4646      	mov	r6, r8
 801e78e:	1a6d      	subs	r5, r5, r1
 801e790:	006d      	lsls	r5, r5, #1
 801e792:	6075      	str	r5, [r6, #4]
 801e794:	9903      	ldr	r1, [sp, #12]
 801e796:	9d05      	ldr	r5, [sp, #20]
 801e798:	000c      	movs	r4, r1
 801e79a:	46ac      	mov	ip, r5
 801e79c:	4464      	add	r4, ip
 801e79e:	17e6      	asrs	r6, r4, #31
 801e7a0:	0031      	movs	r1, r6
 801e7a2:	9b00      	ldr	r3, [sp, #0]
 801e7a4:	9804      	ldr	r0, [sp, #16]
 801e7a6:	681e      	ldr	r6, [r3, #0]
 801e7a8:	17f7      	asrs	r7, r6, #31
 801e7aa:	9709      	str	r7, [sp, #36]	@ 0x24
 801e7ac:	9f06      	ldr	r7, [sp, #24]
 801e7ae:	0032      	movs	r2, r6
 801e7b0:	1bc7      	subs	r7, r0, r7
 801e7b2:	17fd      	asrs	r5, r7, #31
 801e7b4:	950a      	str	r5, [sp, #40]	@ 0x28
 801e7b6:	685d      	ldr	r5, [r3, #4]
 801e7b8:	17f3      	asrs	r3, r6, #31
 801e7ba:	17e8      	asrs	r0, r5, #31
 801e7bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e7be:	0020      	movs	r0, r4
 801e7c0:	9108      	str	r1, [sp, #32]
 801e7c2:	f7e1 fefd 	bl	80005c0 <__aeabi_lmul>
 801e7c6:	002a      	movs	r2, r5
 801e7c8:	17eb      	asrs	r3, r5, #31
 801e7ca:	910c      	str	r1, [sp, #48]	@ 0x30
 801e7cc:	0038      	movs	r0, r7
 801e7ce:	17f9      	asrs	r1, r7, #31
 801e7d0:	f7e1 fef6 	bl	80005c0 <__aeabi_lmul>
 801e7d4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e7d6:	003a      	movs	r2, r7
 801e7d8:	4684      	mov	ip, r0
 801e7da:	4648      	mov	r0, r9
 801e7dc:	4461      	add	r1, ip
 801e7de:	0049      	lsls	r1, r1, #1
 801e7e0:	6001      	str	r1, [r0, #0]
 801e7e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7e4:	0030      	movs	r0, r6
 801e7e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e7e8:	f7e1 feea 	bl	80005c0 <__aeabi_lmul>
 801e7ec:	002a      	movs	r2, r5
 801e7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e7f0:	000e      	movs	r6, r1
 801e7f2:	0020      	movs	r0, r4
 801e7f4:	9908      	ldr	r1, [sp, #32]
 801e7f6:	f7e1 fee3 	bl	80005c0 <__aeabi_lmul>
 801e7fa:	464c      	mov	r4, r9
 801e7fc:	9d05      	ldr	r5, [sp, #20]
 801e7fe:	1a76      	subs	r6, r6, r1
 801e800:	9903      	ldr	r1, [sp, #12]
 801e802:	0076      	lsls	r6, r6, #1
 801e804:	6066      	str	r6, [r4, #4]
 801e806:	1b4c      	subs	r4, r1, r5
 801e808:	9e06      	ldr	r6, [sp, #24]
 801e80a:	17e1      	asrs	r1, r4, #31
 801e80c:	9103      	str	r1, [sp, #12]
 801e80e:	9902      	ldr	r1, [sp, #8]
 801e810:	46b4      	mov	ip, r6
 801e812:	680f      	ldr	r7, [r1, #0]
 801e814:	9804      	ldr	r0, [sp, #16]
 801e816:	17fd      	asrs	r5, r7, #31
 801e818:	002b      	movs	r3, r5
 801e81a:	684e      	ldr	r6, [r1, #4]
 801e81c:	4460      	add	r0, ip
 801e81e:	0005      	movs	r5, r0
 801e820:	17c0      	asrs	r0, r0, #31
 801e822:	9005      	str	r0, [sp, #20]
 801e824:	17f0      	asrs	r0, r6, #31
 801e826:	9006      	str	r0, [sp, #24]
 801e828:	003a      	movs	r2, r7
 801e82a:	0020      	movs	r0, r4
 801e82c:	17e1      	asrs	r1, r4, #31
 801e82e:	9304      	str	r3, [sp, #16]
 801e830:	f7e1 fec6 	bl	80005c0 <__aeabi_lmul>
 801e834:	0032      	movs	r2, r6
 801e836:	9108      	str	r1, [sp, #32]
 801e838:	17f3      	asrs	r3, r6, #31
 801e83a:	0028      	movs	r0, r5
 801e83c:	17e9      	asrs	r1, r5, #31
 801e83e:	f7e1 febf 	bl	80005c0 <__aeabi_lmul>
 801e842:	9808      	ldr	r0, [sp, #32]
 801e844:	002a      	movs	r2, r5
 801e846:	4684      	mov	ip, r0
 801e848:	4650      	mov	r0, sl
 801e84a:	4461      	add	r1, ip
 801e84c:	0049      	lsls	r1, r1, #1
 801e84e:	6001      	str	r1, [r0, #0]
 801e850:	9b05      	ldr	r3, [sp, #20]
 801e852:	9904      	ldr	r1, [sp, #16]
 801e854:	0038      	movs	r0, r7
 801e856:	f7e1 feb3 	bl	80005c0 <__aeabi_lmul>
 801e85a:	0020      	movs	r0, r4
 801e85c:	2408      	movs	r4, #8
 801e85e:	000d      	movs	r5, r1
 801e860:	0032      	movs	r2, r6
 801e862:	9b06      	ldr	r3, [sp, #24]
 801e864:	9903      	ldr	r1, [sp, #12]
 801e866:	f7e1 feab 	bl	80005c0 <__aeabi_lmul>
 801e86a:	46a4      	mov	ip, r4
 801e86c:	4650      	mov	r0, sl
 801e86e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e870:	44e3      	add	fp, ip
 801e872:	44e0      	add	r8, ip
 801e874:	44e1      	add	r9, ip
 801e876:	44e2      	add	sl, ip
 801e878:	46a4      	mov	ip, r4
 801e87a:	1a6d      	subs	r5, r5, r1
 801e87c:	006d      	lsls	r5, r5, #1
 801e87e:	9a01      	ldr	r2, [sp, #4]
 801e880:	6045      	str	r5, [r0, #4]
 801e882:	9807      	ldr	r0, [sp, #28]
 801e884:	4462      	add	r2, ip
 801e886:	3801      	subs	r0, #1
 801e888:	9201      	str	r2, [sp, #4]
 801e88a:	9007      	str	r0, [sp, #28]
 801e88c:	9b00      	ldr	r3, [sp, #0]
 801e88e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e890:	9902      	ldr	r1, [sp, #8]
 801e892:	4694      	mov	ip, r2
 801e894:	4463      	add	r3, ip
 801e896:	9300      	str	r3, [sp, #0]
 801e898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e89a:	469c      	mov	ip, r3
 801e89c:	4461      	add	r1, ip
 801e89e:	9102      	str	r1, [sp, #8]
 801e8a0:	2800      	cmp	r0, #0
 801e8a2:	d000      	beq.n	801e8a6 <arm_radix4_butterfly_q31+0x232>
 801e8a4:	e70e      	b.n	801e6c4 <arm_radix4_butterfly_q31+0x50>
 801e8a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8a8:	009b      	lsls	r3, r3, #2
 801e8aa:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e8ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e8ae:	9320      	str	r3, [sp, #128]	@ 0x80
 801e8b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e8b2:	2b04      	cmp	r3, #4
 801e8b4:	d800      	bhi.n	801e8b8 <arm_radix4_butterfly_q31+0x244>
 801e8b6:	e180      	b.n	801ebba <arm_radix4_butterfly_q31+0x546>
 801e8b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e8ba:	0893      	lsrs	r3, r2, #2
 801e8bc:	1e59      	subs	r1, r3, #1
 801e8be:	9321      	str	r3, [sp, #132]	@ 0x84
 801e8c0:	00db      	lsls	r3, r3, #3
 801e8c2:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e8c4:	00d3      	lsls	r3, r2, #3
 801e8c6:	9300      	str	r3, [sp, #0]
 801e8c8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e8ca:	911a      	str	r1, [sp, #104]	@ 0x68
 801e8cc:	00da      	lsls	r2, r3, #3
 801e8ce:	921e      	str	r2, [sp, #120]	@ 0x78
 801e8d0:	011a      	lsls	r2, r3, #4
 801e8d2:	921d      	str	r2, [sp, #116]	@ 0x74
 801e8d4:	001a      	movs	r2, r3
 801e8d6:	4694      	mov	ip, r2
 801e8d8:	005b      	lsls	r3, r3, #1
 801e8da:	4463      	add	r3, ip
 801e8dc:	00db      	lsls	r3, r3, #3
 801e8de:	931c      	str	r3, [sp, #112]	@ 0x70
 801e8e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e8e2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e8e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e8e6:	9318      	str	r3, [sp, #96]	@ 0x60
 801e8e8:	9319      	str	r3, [sp, #100]	@ 0x64
 801e8ea:	9316      	str	r3, [sp, #88]	@ 0x58
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	9315      	str	r3, [sp, #84]	@ 0x54
 801e8f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e8f2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e8f4:	681a      	ldr	r2, [r3, #0]
 801e8f6:	685b      	ldr	r3, [r3, #4]
 801e8f8:	9205      	str	r2, [sp, #20]
 801e8fa:	9306      	str	r3, [sp, #24]
 801e8fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e8fe:	468c      	mov	ip, r1
 801e900:	681a      	ldr	r2, [r3, #0]
 801e902:	685b      	ldr	r3, [r3, #4]
 801e904:	9207      	str	r2, [sp, #28]
 801e906:	9308      	str	r3, [sp, #32]
 801e908:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e90a:	681a      	ldr	r2, [r3, #0]
 801e90c:	685b      	ldr	r3, [r3, #4]
 801e90e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e910:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e912:	930a      	str	r3, [sp, #40]	@ 0x28
 801e914:	0013      	movs	r3, r2
 801e916:	4463      	add	r3, ip
 801e918:	4698      	mov	r8, r3
 801e91a:	0013      	movs	r3, r2
 801e91c:	4442      	add	r2, r8
 801e91e:	4691      	mov	r9, r2
 801e920:	001a      	movs	r2, r3
 801e922:	444a      	add	r2, r9
 801e924:	4692      	mov	sl, r2
 801e926:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e928:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e92a:	4293      	cmp	r3, r2
 801e92c:	d800      	bhi.n	801e930 <arm_radix4_butterfly_q31+0x2bc>
 801e92e:	e0dd      	b.n	801eaec <arm_radix4_butterfly_q31+0x478>
 801e930:	4694      	mov	ip, r2
 801e932:	468b      	mov	fp, r1
 801e934:	4644      	mov	r4, r8
 801e936:	4655      	mov	r5, sl
 801e938:	9b07      	ldr	r3, [sp, #28]
 801e93a:	17db      	asrs	r3, r3, #31
 801e93c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e93e:	9b08      	ldr	r3, [sp, #32]
 801e940:	17db      	asrs	r3, r3, #31
 801e942:	930d      	str	r3, [sp, #52]	@ 0x34
 801e944:	9b05      	ldr	r3, [sp, #20]
 801e946:	17db      	asrs	r3, r3, #31
 801e948:	930e      	str	r3, [sp, #56]	@ 0x38
 801e94a:	9b06      	ldr	r3, [sp, #24]
 801e94c:	17db      	asrs	r3, r3, #31
 801e94e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e952:	17db      	asrs	r3, r3, #31
 801e954:	9310      	str	r3, [sp, #64]	@ 0x40
 801e956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e958:	17db      	asrs	r3, r3, #31
 801e95a:	9311      	str	r3, [sp, #68]	@ 0x44
 801e95c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e95e:	4463      	add	r3, ip
 801e960:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e962:	465b      	mov	r3, fp
 801e964:	4659      	mov	r1, fp
 801e966:	681a      	ldr	r2, [r3, #0]
 801e968:	464b      	mov	r3, r9
 801e96a:	684f      	ldr	r7, [r1, #4]
 801e96c:	4649      	mov	r1, r9
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	18d6      	adds	r6, r2, r3
 801e972:	1ad3      	subs	r3, r2, r3
 801e974:	9301      	str	r3, [sp, #4]
 801e976:	684b      	ldr	r3, [r1, #4]
 801e978:	18f8      	adds	r0, r7, r3
 801e97a:	1af9      	subs	r1, r7, r3
 801e97c:	6827      	ldr	r7, [r4, #0]
 801e97e:	9102      	str	r1, [sp, #8]
 801e980:	003a      	movs	r2, r7
 801e982:	682f      	ldr	r7, [r5, #0]
 801e984:	46bc      	mov	ip, r7
 801e986:	465f      	mov	r7, fp
 801e988:	4462      	add	r2, ip
 801e98a:	18b3      	adds	r3, r6, r2
 801e98c:	109b      	asrs	r3, r3, #2
 801e98e:	603b      	str	r3, [r7, #0]
 801e990:	6867      	ldr	r7, [r4, #4]
 801e992:	1ab6      	subs	r6, r6, r2
 801e994:	46b8      	mov	r8, r7
 801e996:	686f      	ldr	r7, [r5, #4]
 801e998:	17f2      	asrs	r2, r6, #31
 801e99a:	46bc      	mov	ip, r7
 801e99c:	44e0      	add	r8, ip
 801e99e:	4643      	mov	r3, r8
 801e9a0:	465f      	mov	r7, fp
 801e9a2:	18c1      	adds	r1, r0, r3
 801e9a4:	1089      	asrs	r1, r1, #2
 801e9a6:	6079      	str	r1, [r7, #4]
 801e9a8:	9900      	ldr	r1, [sp, #0]
 801e9aa:	4690      	mov	r8, r2
 801e9ac:	468c      	mov	ip, r1
 801e9ae:	6867      	ldr	r7, [r4, #4]
 801e9b0:	6869      	ldr	r1, [r5, #4]
 801e9b2:	44e3      	add	fp, ip
 801e9b4:	1a7f      	subs	r7, r7, r1
 801e9b6:	9703      	str	r7, [sp, #12]
 801e9b8:	6829      	ldr	r1, [r5, #0]
 801e9ba:	6827      	ldr	r7, [r4, #0]
 801e9bc:	1a7f      	subs	r7, r7, r1
 801e9be:	9704      	str	r7, [sp, #16]
 801e9c0:	1ac7      	subs	r7, r0, r3
 801e9c2:	17fa      	asrs	r2, r7, #31
 801e9c4:	4692      	mov	sl, r2
 801e9c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e9c8:	9a07      	ldr	r2, [sp, #28]
 801e9ca:	0030      	movs	r0, r6
 801e9cc:	4641      	mov	r1, r8
 801e9ce:	f7e1 fdf7 	bl	80005c0 <__aeabi_lmul>
 801e9d2:	9a08      	ldr	r2, [sp, #32]
 801e9d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e9d6:	9112      	str	r1, [sp, #72]	@ 0x48
 801e9d8:	0038      	movs	r0, r7
 801e9da:	4651      	mov	r1, sl
 801e9dc:	f7e1 fdf0 	bl	80005c0 <__aeabi_lmul>
 801e9e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e9e2:	9a07      	ldr	r2, [sp, #28]
 801e9e4:	4684      	mov	ip, r0
 801e9e6:	4461      	add	r1, ip
 801e9e8:	1049      	asrs	r1, r1, #1
 801e9ea:	6021      	str	r1, [r4, #0]
 801e9ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e9ee:	0038      	movs	r0, r7
 801e9f0:	4651      	mov	r1, sl
 801e9f2:	f7e1 fde5 	bl	80005c0 <__aeabi_lmul>
 801e9f6:	9a08      	ldr	r2, [sp, #32]
 801e9f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e9fa:	000f      	movs	r7, r1
 801e9fc:	0030      	movs	r0, r6
 801e9fe:	4641      	mov	r1, r8
 801ea00:	f7e1 fdde 	bl	80005c0 <__aeabi_lmul>
 801ea04:	9b00      	ldr	r3, [sp, #0]
 801ea06:	9a01      	ldr	r2, [sp, #4]
 801ea08:	469c      	mov	ip, r3
 801ea0a:	9803      	ldr	r0, [sp, #12]
 801ea0c:	1a7f      	subs	r7, r7, r1
 801ea0e:	107f      	asrs	r7, r7, #1
 801ea10:	6067      	str	r7, [r4, #4]
 801ea12:	0016      	movs	r6, r2
 801ea14:	4464      	add	r4, ip
 801ea16:	4684      	mov	ip, r0
 801ea18:	4466      	add	r6, ip
 801ea1a:	17f2      	asrs	r2, r6, #31
 801ea1c:	4690      	mov	r8, r2
 801ea1e:	9902      	ldr	r1, [sp, #8]
 801ea20:	9f04      	ldr	r7, [sp, #16]
 801ea22:	0030      	movs	r0, r6
 801ea24:	1bcf      	subs	r7, r1, r7
 801ea26:	17fa      	asrs	r2, r7, #31
 801ea28:	4692      	mov	sl, r2
 801ea2a:	4641      	mov	r1, r8
 801ea2c:	9a05      	ldr	r2, [sp, #20]
 801ea2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea30:	f7e1 fdc6 	bl	80005c0 <__aeabi_lmul>
 801ea34:	9a06      	ldr	r2, [sp, #24]
 801ea36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea38:	9112      	str	r1, [sp, #72]	@ 0x48
 801ea3a:	0038      	movs	r0, r7
 801ea3c:	4651      	mov	r1, sl
 801ea3e:	f7e1 fdbf 	bl	80005c0 <__aeabi_lmul>
 801ea42:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ea44:	9a05      	ldr	r2, [sp, #20]
 801ea46:	4684      	mov	ip, r0
 801ea48:	4648      	mov	r0, r9
 801ea4a:	4461      	add	r1, ip
 801ea4c:	1049      	asrs	r1, r1, #1
 801ea4e:	6001      	str	r1, [r0, #0]
 801ea50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea52:	0038      	movs	r0, r7
 801ea54:	4651      	mov	r1, sl
 801ea56:	f7e1 fdb3 	bl	80005c0 <__aeabi_lmul>
 801ea5a:	9a06      	ldr	r2, [sp, #24]
 801ea5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea5e:	000f      	movs	r7, r1
 801ea60:	0030      	movs	r0, r6
 801ea62:	4641      	mov	r1, r8
 801ea64:	f7e1 fdac 	bl	80005c0 <__aeabi_lmul>
 801ea68:	464e      	mov	r6, r9
 801ea6a:	9a00      	ldr	r2, [sp, #0]
 801ea6c:	9b01      	ldr	r3, [sp, #4]
 801ea6e:	4694      	mov	ip, r2
 801ea70:	9803      	ldr	r0, [sp, #12]
 801ea72:	1a7f      	subs	r7, r7, r1
 801ea74:	107f      	asrs	r7, r7, #1
 801ea76:	6077      	str	r7, [r6, #4]
 801ea78:	1a1e      	subs	r6, r3, r0
 801ea7a:	9b04      	ldr	r3, [sp, #16]
 801ea7c:	44e1      	add	r9, ip
 801ea7e:	469c      	mov	ip, r3
 801ea80:	17f0      	asrs	r0, r6, #31
 801ea82:	4680      	mov	r8, r0
 801ea84:	9902      	ldr	r1, [sp, #8]
 801ea86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea88:	4461      	add	r1, ip
 801ea8a:	17cb      	asrs	r3, r1, #31
 801ea8c:	000f      	movs	r7, r1
 801ea8e:	469a      	mov	sl, r3
 801ea90:	0030      	movs	r0, r6
 801ea92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea94:	4641      	mov	r1, r8
 801ea96:	f7e1 fd93 	bl	80005c0 <__aeabi_lmul>
 801ea9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ea9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ea9e:	9101      	str	r1, [sp, #4]
 801eaa0:	0038      	movs	r0, r7
 801eaa2:	4651      	mov	r1, sl
 801eaa4:	f7e1 fd8c 	bl	80005c0 <__aeabi_lmul>
 801eaa8:	9801      	ldr	r0, [sp, #4]
 801eaaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eaac:	4684      	mov	ip, r0
 801eaae:	4461      	add	r1, ip
 801eab0:	1049      	asrs	r1, r1, #1
 801eab2:	6029      	str	r1, [r5, #0]
 801eab4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eab6:	0038      	movs	r0, r7
 801eab8:	4651      	mov	r1, sl
 801eaba:	f7e1 fd81 	bl	80005c0 <__aeabi_lmul>
 801eabe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801eac0:	000f      	movs	r7, r1
 801eac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eac4:	0030      	movs	r0, r6
 801eac6:	4641      	mov	r1, r8
 801eac8:	f7e1 fd7a 	bl	80005c0 <__aeabi_lmul>
 801eacc:	1a7f      	subs	r7, r7, r1
 801eace:	107f      	asrs	r7, r7, #1
 801ead0:	606f      	str	r7, [r5, #4]
 801ead2:	9a00      	ldr	r2, [sp, #0]
 801ead4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ead6:	4694      	mov	ip, r2
 801ead8:	4465      	add	r5, ip
 801eada:	468c      	mov	ip, r1
 801eadc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eade:	0013      	movs	r3, r2
 801eae0:	4462      	add	r2, ip
 801eae2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801eae4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eae6:	429a      	cmp	r2, r3
 801eae8:	d900      	bls.n	801eaec <arm_radix4_butterfly_q31+0x478>
 801eaea:	e73a      	b.n	801e962 <arm_radix4_butterfly_q31+0x2ee>
 801eaec:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eaee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801eaf0:	468c      	mov	ip, r1
 801eaf2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801eaf4:	4462      	add	r2, ip
 801eaf6:	468c      	mov	ip, r1
 801eaf8:	9216      	str	r2, [sp, #88]	@ 0x58
 801eafa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801eafc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801eafe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801eb00:	4462      	add	r2, ip
 801eb02:	468c      	mov	ip, r1
 801eb04:	9219      	str	r2, [sp, #100]	@ 0x64
 801eb06:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801eb08:	3301      	adds	r3, #1
 801eb0a:	4462      	add	r2, ip
 801eb0c:	9218      	str	r2, [sp, #96]	@ 0x60
 801eb0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801eb10:	9315      	str	r3, [sp, #84]	@ 0x54
 801eb12:	3208      	adds	r2, #8
 801eb14:	9217      	str	r2, [sp, #92]	@ 0x5c
 801eb16:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801eb18:	4293      	cmp	r3, r2
 801eb1a:	d800      	bhi.n	801eb1e <arm_radix4_butterfly_q31+0x4aa>
 801eb1c:	e6e8      	b.n	801e8f0 <arm_radix4_butterfly_q31+0x27c>
 801eb1e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801eb20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801eb22:	009b      	lsls	r3, r3, #2
 801eb24:	931f      	str	r3, [sp, #124]	@ 0x7c
 801eb26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801eb28:	9213      	str	r2, [sp, #76]	@ 0x4c
 801eb2a:	089b      	lsrs	r3, r3, #2
 801eb2c:	9320      	str	r3, [sp, #128]	@ 0x80
 801eb2e:	2b04      	cmp	r3, #4
 801eb30:	d900      	bls.n	801eb34 <arm_radix4_butterfly_q31+0x4c0>
 801eb32:	e6c1      	b.n	801e8b8 <arm_radix4_butterfly_q31+0x244>
 801eb34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eb36:	469a      	mov	sl, r3
 801eb38:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801eb3a:	691c      	ldr	r4, [r3, #16]
 801eb3c:	685a      	ldr	r2, [r3, #4]
 801eb3e:	46a1      	mov	r9, r4
 801eb40:	4690      	mov	r8, r2
 801eb42:	6819      	ldr	r1, [r3, #0]
 801eb44:	689a      	ldr	r2, [r3, #8]
 801eb46:	699f      	ldr	r7, [r3, #24]
 801eb48:	188d      	adds	r5, r1, r2
 801eb4a:	444d      	add	r5, r9
 801eb4c:	19ed      	adds	r5, r5, r7
 801eb4e:	69de      	ldr	r6, [r3, #28]
 801eb50:	601d      	str	r5, [r3, #0]
 801eb52:	4645      	mov	r5, r8
 801eb54:	46b4      	mov	ip, r6
 801eb56:	68d8      	ldr	r0, [r3, #12]
 801eb58:	695c      	ldr	r4, [r3, #20]
 801eb5a:	182d      	adds	r5, r5, r0
 801eb5c:	192d      	adds	r5, r5, r4
 801eb5e:	4465      	add	r5, ip
 801eb60:	605d      	str	r5, [r3, #4]
 801eb62:	1a8d      	subs	r5, r1, r2
 801eb64:	444d      	add	r5, r9
 801eb66:	1bed      	subs	r5, r5, r7
 801eb68:	609d      	str	r5, [r3, #8]
 801eb6a:	4645      	mov	r5, r8
 801eb6c:	1a2d      	subs	r5, r5, r0
 801eb6e:	192d      	adds	r5, r5, r4
 801eb70:	1bad      	subs	r5, r5, r6
 801eb72:	464e      	mov	r6, r9
 801eb74:	60dd      	str	r5, [r3, #12]
 801eb76:	180d      	adds	r5, r1, r0
 801eb78:	1bad      	subs	r5, r5, r6
 801eb7a:	4666      	mov	r6, ip
 801eb7c:	1bad      	subs	r5, r5, r6
 801eb7e:	611d      	str	r5, [r3, #16]
 801eb80:	4645      	mov	r5, r8
 801eb82:	1aad      	subs	r5, r5, r2
 801eb84:	4442      	add	r2, r8
 801eb86:	1b12      	subs	r2, r2, r4
 801eb88:	1bd2      	subs	r2, r2, r7
 801eb8a:	1a08      	subs	r0, r1, r0
 801eb8c:	61da      	str	r2, [r3, #28]
 801eb8e:	4649      	mov	r1, r9
 801eb90:	2201      	movs	r2, #1
 801eb92:	1a41      	subs	r1, r0, r1
 801eb94:	4252      	negs	r2, r2
 801eb96:	4461      	add	r1, ip
 801eb98:	4694      	mov	ip, r2
 801eb9a:	44e2      	add	sl, ip
 801eb9c:	4652      	mov	r2, sl
 801eb9e:	1b2d      	subs	r5, r5, r4
 801eba0:	19ed      	adds	r5, r5, r7
 801eba2:	615d      	str	r5, [r3, #20]
 801eba4:	6199      	str	r1, [r3, #24]
 801eba6:	3320      	adds	r3, #32
 801eba8:	2a00      	cmp	r2, #0
 801ebaa:	d1c6      	bne.n	801eb3a <arm_radix4_butterfly_q31+0x4c6>
 801ebac:	b027      	add	sp, #156	@ 0x9c
 801ebae:	bc3c      	pop	{r2, r3, r4, r5}
 801ebb0:	4690      	mov	r8, r2
 801ebb2:	4699      	mov	r9, r3
 801ebb4:	46a2      	mov	sl, r4
 801ebb6:	46ab      	mov	fp, r5
 801ebb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebba:	469a      	mov	sl, r3
 801ebbc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ebbe:	e7bc      	b.n	801eb3a <arm_radix4_butterfly_q31+0x4c6>

0801ebc0 <arm_radix4_butterfly_inverse_q31>:
 801ebc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebc2:	464d      	mov	r5, r9
 801ebc4:	4644      	mov	r4, r8
 801ebc6:	465f      	mov	r7, fp
 801ebc8:	4656      	mov	r6, sl
 801ebca:	b4f0      	push	{r4, r5, r6, r7}
 801ebcc:	b0a7      	sub	sp, #156	@ 0x9c
 801ebce:	469c      	mov	ip, r3
 801ebd0:	9114      	str	r1, [sp, #80]	@ 0x50
 801ebd2:	0889      	lsrs	r1, r1, #2
 801ebd4:	9310      	str	r3, [sp, #64]	@ 0x40
 801ebd6:	00cb      	lsls	r3, r1, #3
 801ebd8:	0015      	movs	r5, r2
 801ebda:	9223      	str	r2, [sp, #140]	@ 0x8c
 801ebdc:	18c2      	adds	r2, r0, r3
 801ebde:	000c      	movs	r4, r1
 801ebe0:	9124      	str	r1, [sp, #144]	@ 0x90
 801ebe2:	18d1      	adds	r1, r2, r3
 801ebe4:	468b      	mov	fp, r1
 801ebe6:	469a      	mov	sl, r3
 801ebe8:	4663      	mov	r3, ip
 801ebea:	44da      	add	sl, fp
 801ebec:	46d0      	mov	r8, sl
 801ebee:	4681      	mov	r9, r0
 801ebf0:	4692      	mov	sl, r2
 801ebf2:	0119      	lsls	r1, r3, #4
 801ebf4:	910d      	str	r1, [sp, #52]	@ 0x34
 801ebf6:	00d9      	lsls	r1, r3, #3
 801ebf8:	005b      	lsls	r3, r3, #1
 801ebfa:	4463      	add	r3, ip
 801ebfc:	910e      	str	r1, [sp, #56]	@ 0x38
 801ebfe:	00d9      	lsls	r1, r3, #3
 801ec00:	9022      	str	r0, [sp, #136]	@ 0x88
 801ec02:	9025      	str	r0, [sp, #148]	@ 0x94
 801ec04:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ec06:	9502      	str	r5, [sp, #8]
 801ec08:	9500      	str	r5, [sp, #0]
 801ec0a:	9501      	str	r5, [sp, #4]
 801ec0c:	9409      	str	r4, [sp, #36]	@ 0x24
 801ec0e:	464b      	mov	r3, r9
 801ec10:	681b      	ldr	r3, [r3, #0]
 801ec12:	4652      	mov	r2, sl
 801ec14:	111c      	asrs	r4, r3, #4
 801ec16:	465b      	mov	r3, fp
 801ec18:	4648      	mov	r0, r9
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	6812      	ldr	r2, [r2, #0]
 801ec1e:	6840      	ldr	r0, [r0, #4]
 801ec20:	111b      	asrs	r3, r3, #4
 801ec22:	18e7      	adds	r7, r4, r3
 801ec24:	1ae3      	subs	r3, r4, r3
 801ec26:	1114      	asrs	r4, r2, #4
 801ec28:	4642      	mov	r2, r8
 801ec2a:	1105      	asrs	r5, r0, #4
 801ec2c:	4658      	mov	r0, fp
 801ec2e:	6812      	ldr	r2, [r2, #0]
 801ec30:	6840      	ldr	r0, [r0, #4]
 801ec32:	9303      	str	r3, [sp, #12]
 801ec34:	1113      	asrs	r3, r2, #4
 801ec36:	18e2      	adds	r2, r4, r3
 801ec38:	1103      	asrs	r3, r0, #4
 801ec3a:	18ee      	adds	r6, r5, r3
 801ec3c:	1ae8      	subs	r0, r5, r3
 801ec3e:	464d      	mov	r5, r9
 801ec40:	18bb      	adds	r3, r7, r2
 801ec42:	602b      	str	r3, [r5, #0]
 801ec44:	4641      	mov	r1, r8
 801ec46:	4655      	mov	r5, sl
 801ec48:	6849      	ldr	r1, [r1, #4]
 801ec4a:	686d      	ldr	r5, [r5, #4]
 801ec4c:	110b      	asrs	r3, r1, #4
 801ec4e:	112d      	asrs	r5, r5, #4
 801ec50:	18eb      	adds	r3, r5, r3
 801ec52:	464d      	mov	r5, r9
 801ec54:	18f1      	adds	r1, r6, r3
 801ec56:	6069      	str	r1, [r5, #4]
 801ec58:	4655      	mov	r5, sl
 801ec5a:	686d      	ldr	r5, [r5, #4]
 801ec5c:	9004      	str	r0, [sp, #16]
 801ec5e:	112c      	asrs	r4, r5, #4
 801ec60:	4645      	mov	r5, r8
 801ec62:	686d      	ldr	r5, [r5, #4]
 801ec64:	1129      	asrs	r1, r5, #4
 801ec66:	1a65      	subs	r5, r4, r1
 801ec68:	4651      	mov	r1, sl
 801ec6a:	6809      	ldr	r1, [r1, #0]
 801ec6c:	1abc      	subs	r4, r7, r2
 801ec6e:	1108      	asrs	r0, r1, #4
 801ec70:	4641      	mov	r1, r8
 801ec72:	17e2      	asrs	r2, r4, #31
 801ec74:	6809      	ldr	r1, [r1, #0]
 801ec76:	9207      	str	r2, [sp, #28]
 801ec78:	9a01      	ldr	r2, [sp, #4]
 801ec7a:	1109      	asrs	r1, r1, #4
 801ec7c:	6817      	ldr	r7, [r2, #0]
 801ec7e:	1a41      	subs	r1, r0, r1
 801ec80:	9106      	str	r1, [sp, #24]
 801ec82:	0039      	movs	r1, r7
 801ec84:	17ff      	asrs	r7, r7, #31
 801ec86:	0038      	movs	r0, r7
 801ec88:	9505      	str	r5, [sp, #20]
 801ec8a:	1af5      	subs	r5, r6, r3
 801ec8c:	17ef      	asrs	r7, r5, #31
 801ec8e:	970b      	str	r7, [sp, #44]	@ 0x2c
 801ec90:	6857      	ldr	r7, [r2, #4]
 801ec92:	0003      	movs	r3, r0
 801ec94:	17fe      	asrs	r6, r7, #31
 801ec96:	000a      	movs	r2, r1
 801ec98:	9108      	str	r1, [sp, #32]
 801ec9a:	900a      	str	r0, [sp, #40]	@ 0x28
 801ec9c:	17e1      	asrs	r1, r4, #31
 801ec9e:	0020      	movs	r0, r4
 801eca0:	960c      	str	r6, [sp, #48]	@ 0x30
 801eca2:	f7e1 fc8d 	bl	80005c0 <__aeabi_lmul>
 801eca6:	003a      	movs	r2, r7
 801eca8:	17fb      	asrs	r3, r7, #31
 801ecaa:	000e      	movs	r6, r1
 801ecac:	0028      	movs	r0, r5
 801ecae:	17e9      	asrs	r1, r5, #31
 801ecb0:	f7e1 fc86 	bl	80005c0 <__aeabi_lmul>
 801ecb4:	4653      	mov	r3, sl
 801ecb6:	1a76      	subs	r6, r6, r1
 801ecb8:	0076      	lsls	r6, r6, #1
 801ecba:	601e      	str	r6, [r3, #0]
 801ecbc:	002a      	movs	r2, r5
 801ecbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ecc0:	9808      	ldr	r0, [sp, #32]
 801ecc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ecc4:	f7e1 fc7c 	bl	80005c0 <__aeabi_lmul>
 801ecc8:	003a      	movs	r2, r7
 801ecca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eccc:	000d      	movs	r5, r1
 801ecce:	0020      	movs	r0, r4
 801ecd0:	9907      	ldr	r1, [sp, #28]
 801ecd2:	f7e1 fc75 	bl	80005c0 <__aeabi_lmul>
 801ecd6:	4657      	mov	r7, sl
 801ecd8:	186d      	adds	r5, r5, r1
 801ecda:	006d      	lsls	r5, r5, #1
 801ecdc:	607d      	str	r5, [r7, #4]
 801ecde:	9b03      	ldr	r3, [sp, #12]
 801ece0:	9e06      	ldr	r6, [sp, #24]
 801ece2:	9d05      	ldr	r5, [sp, #20]
 801ece4:	46b4      	mov	ip, r6
 801ece6:	1b5d      	subs	r5, r3, r5
 801ece8:	9b00      	ldr	r3, [sp, #0]
 801ecea:	17ef      	asrs	r7, r5, #31
 801ecec:	0039      	movs	r1, r7
 801ecee:	681f      	ldr	r7, [r3, #0]
 801ecf0:	17fc      	asrs	r4, r7, #31
 801ecf2:	0020      	movs	r0, r4
 801ecf4:	9c04      	ldr	r4, [sp, #16]
 801ecf6:	4464      	add	r4, ip
 801ecf8:	17e6      	asrs	r6, r4, #31
 801ecfa:	9407      	str	r4, [sp, #28]
 801ecfc:	9608      	str	r6, [sp, #32]
 801ecfe:	685e      	ldr	r6, [r3, #4]
 801ed00:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ed02:	17f2      	asrs	r2, r6, #31
 801ed04:	0003      	movs	r3, r0
 801ed06:	920c      	str	r2, [sp, #48]	@ 0x30
 801ed08:	0028      	movs	r0, r5
 801ed0a:	003a      	movs	r2, r7
 801ed0c:	910a      	str	r1, [sp, #40]	@ 0x28
 801ed0e:	f7e1 fc57 	bl	80005c0 <__aeabi_lmul>
 801ed12:	0032      	movs	r2, r6
 801ed14:	17f3      	asrs	r3, r6, #31
 801ed16:	9807      	ldr	r0, [sp, #28]
 801ed18:	000c      	movs	r4, r1
 801ed1a:	9908      	ldr	r1, [sp, #32]
 801ed1c:	f7e1 fc50 	bl	80005c0 <__aeabi_lmul>
 801ed20:	4658      	mov	r0, fp
 801ed22:	1a64      	subs	r4, r4, r1
 801ed24:	0064      	lsls	r4, r4, #1
 801ed26:	9a07      	ldr	r2, [sp, #28]
 801ed28:	6004      	str	r4, [r0, #0]
 801ed2a:	9b08      	ldr	r3, [sp, #32]
 801ed2c:	0038      	movs	r0, r7
 801ed2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ed30:	f7e1 fc46 	bl	80005c0 <__aeabi_lmul>
 801ed34:	0032      	movs	r2, r6
 801ed36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed38:	000c      	movs	r4, r1
 801ed3a:	0028      	movs	r0, r5
 801ed3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed3e:	f7e1 fc3f 	bl	80005c0 <__aeabi_lmul>
 801ed42:	9d05      	ldr	r5, [sp, #20]
 801ed44:	465f      	mov	r7, fp
 801ed46:	46ac      	mov	ip, r5
 801ed48:	1864      	adds	r4, r4, r1
 801ed4a:	9903      	ldr	r1, [sp, #12]
 801ed4c:	0064      	lsls	r4, r4, #1
 801ed4e:	4461      	add	r1, ip
 801ed50:	607c      	str	r4, [r7, #4]
 801ed52:	000c      	movs	r4, r1
 801ed54:	17c9      	asrs	r1, r1, #31
 801ed56:	9105      	str	r1, [sp, #20]
 801ed58:	9902      	ldr	r1, [sp, #8]
 801ed5a:	9804      	ldr	r0, [sp, #16]
 801ed5c:	680d      	ldr	r5, [r1, #0]
 801ed5e:	9e06      	ldr	r6, [sp, #24]
 801ed60:	002b      	movs	r3, r5
 801ed62:	17ed      	asrs	r5, r5, #31
 801ed64:	684f      	ldr	r7, [r1, #4]
 801ed66:	9503      	str	r5, [sp, #12]
 801ed68:	1b85      	subs	r5, r0, r6
 801ed6a:	17e8      	asrs	r0, r5, #31
 801ed6c:	001a      	movs	r2, r3
 801ed6e:	9006      	str	r0, [sp, #24]
 801ed70:	17fe      	asrs	r6, r7, #31
 801ed72:	9304      	str	r3, [sp, #16]
 801ed74:	0020      	movs	r0, r4
 801ed76:	9b03      	ldr	r3, [sp, #12]
 801ed78:	17e1      	asrs	r1, r4, #31
 801ed7a:	9607      	str	r6, [sp, #28]
 801ed7c:	f7e1 fc20 	bl	80005c0 <__aeabi_lmul>
 801ed80:	003a      	movs	r2, r7
 801ed82:	000e      	movs	r6, r1
 801ed84:	17fb      	asrs	r3, r7, #31
 801ed86:	0028      	movs	r0, r5
 801ed88:	17e9      	asrs	r1, r5, #31
 801ed8a:	f7e1 fc19 	bl	80005c0 <__aeabi_lmul>
 801ed8e:	4640      	mov	r0, r8
 801ed90:	1a76      	subs	r6, r6, r1
 801ed92:	0076      	lsls	r6, r6, #1
 801ed94:	002a      	movs	r2, r5
 801ed96:	9b06      	ldr	r3, [sp, #24]
 801ed98:	6006      	str	r6, [r0, #0]
 801ed9a:	9903      	ldr	r1, [sp, #12]
 801ed9c:	9804      	ldr	r0, [sp, #16]
 801ed9e:	f7e1 fc0f 	bl	80005c0 <__aeabi_lmul>
 801eda2:	0020      	movs	r0, r4
 801eda4:	2408      	movs	r4, #8
 801eda6:	9b07      	ldr	r3, [sp, #28]
 801eda8:	000d      	movs	r5, r1
 801edaa:	003a      	movs	r2, r7
 801edac:	9905      	ldr	r1, [sp, #20]
 801edae:	f7e1 fc07 	bl	80005c0 <__aeabi_lmul>
 801edb2:	4640      	mov	r0, r8
 801edb4:	46a4      	mov	ip, r4
 801edb6:	186d      	adds	r5, r5, r1
 801edb8:	006d      	lsls	r5, r5, #1
 801edba:	6045      	str	r5, [r0, #4]
 801edbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edbe:	44e1      	add	r9, ip
 801edc0:	3801      	subs	r0, #1
 801edc2:	9009      	str	r0, [sp, #36]	@ 0x24
 801edc4:	9a01      	ldr	r2, [sp, #4]
 801edc6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801edc8:	44e2      	add	sl, ip
 801edca:	44e3      	add	fp, ip
 801edcc:	44e0      	add	r8, ip
 801edce:	46a4      	mov	ip, r4
 801edd0:	4462      	add	r2, ip
 801edd2:	9201      	str	r2, [sp, #4]
 801edd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801edd6:	9b00      	ldr	r3, [sp, #0]
 801edd8:	4694      	mov	ip, r2
 801edda:	4463      	add	r3, ip
 801eddc:	9300      	str	r3, [sp, #0]
 801edde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ede0:	9902      	ldr	r1, [sp, #8]
 801ede2:	469c      	mov	ip, r3
 801ede4:	4461      	add	r1, ip
 801ede6:	9102      	str	r1, [sp, #8]
 801ede8:	2800      	cmp	r0, #0
 801edea:	d000      	beq.n	801edee <arm_radix4_butterfly_inverse_q31+0x22e>
 801edec:	e70f      	b.n	801ec0e <arm_radix4_butterfly_inverse_q31+0x4e>
 801edee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801edf0:	009b      	lsls	r3, r3, #2
 801edf2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801edf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801edf6:	9320      	str	r3, [sp, #128]	@ 0x80
 801edf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801edfa:	2b04      	cmp	r3, #4
 801edfc:	d800      	bhi.n	801ee00 <arm_radix4_butterfly_inverse_q31+0x240>
 801edfe:	e17c      	b.n	801f0fa <arm_radix4_butterfly_inverse_q31+0x53a>
 801ee00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ee02:	0893      	lsrs	r3, r2, #2
 801ee04:	1e59      	subs	r1, r3, #1
 801ee06:	9321      	str	r3, [sp, #132]	@ 0x84
 801ee08:	00db      	lsls	r3, r3, #3
 801ee0a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ee0c:	00d3      	lsls	r3, r2, #3
 801ee0e:	9300      	str	r3, [sp, #0]
 801ee10:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ee12:	911a      	str	r1, [sp, #104]	@ 0x68
 801ee14:	00da      	lsls	r2, r3, #3
 801ee16:	921e      	str	r2, [sp, #120]	@ 0x78
 801ee18:	011a      	lsls	r2, r3, #4
 801ee1a:	921d      	str	r2, [sp, #116]	@ 0x74
 801ee1c:	001a      	movs	r2, r3
 801ee1e:	4694      	mov	ip, r2
 801ee20:	005b      	lsls	r3, r3, #1
 801ee22:	4463      	add	r3, ip
 801ee24:	00db      	lsls	r3, r3, #3
 801ee26:	931c      	str	r3, [sp, #112]	@ 0x70
 801ee28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ee2a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ee2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ee2e:	9318      	str	r3, [sp, #96]	@ 0x60
 801ee30:	9319      	str	r3, [sp, #100]	@ 0x64
 801ee32:	9316      	str	r3, [sp, #88]	@ 0x58
 801ee34:	2300      	movs	r3, #0
 801ee36:	9315      	str	r3, [sp, #84]	@ 0x54
 801ee38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ee3a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ee3c:	681a      	ldr	r2, [r3, #0]
 801ee3e:	685b      	ldr	r3, [r3, #4]
 801ee40:	9205      	str	r2, [sp, #20]
 801ee42:	9306      	str	r3, [sp, #24]
 801ee44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ee46:	468c      	mov	ip, r1
 801ee48:	681a      	ldr	r2, [r3, #0]
 801ee4a:	685b      	ldr	r3, [r3, #4]
 801ee4c:	9207      	str	r2, [sp, #28]
 801ee4e:	9308      	str	r3, [sp, #32]
 801ee50:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ee52:	681a      	ldr	r2, [r3, #0]
 801ee54:	685b      	ldr	r3, [r3, #4]
 801ee56:	9209      	str	r2, [sp, #36]	@ 0x24
 801ee58:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ee5a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee5c:	0013      	movs	r3, r2
 801ee5e:	4463      	add	r3, ip
 801ee60:	4698      	mov	r8, r3
 801ee62:	0013      	movs	r3, r2
 801ee64:	4442      	add	r2, r8
 801ee66:	4691      	mov	r9, r2
 801ee68:	001a      	movs	r2, r3
 801ee6a:	444a      	add	r2, r9
 801ee6c:	4692      	mov	sl, r2
 801ee6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ee70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ee72:	4293      	cmp	r3, r2
 801ee74:	d800      	bhi.n	801ee78 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801ee76:	e0d9      	b.n	801f02c <arm_radix4_butterfly_inverse_q31+0x46c>
 801ee78:	4694      	mov	ip, r2
 801ee7a:	4644      	mov	r4, r8
 801ee7c:	4655      	mov	r5, sl
 801ee7e:	4688      	mov	r8, r1
 801ee80:	9b07      	ldr	r3, [sp, #28]
 801ee82:	17db      	asrs	r3, r3, #31
 801ee84:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee86:	9b08      	ldr	r3, [sp, #32]
 801ee88:	17db      	asrs	r3, r3, #31
 801ee8a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ee8c:	9b05      	ldr	r3, [sp, #20]
 801ee8e:	17db      	asrs	r3, r3, #31
 801ee90:	930e      	str	r3, [sp, #56]	@ 0x38
 801ee92:	9b06      	ldr	r3, [sp, #24]
 801ee94:	17db      	asrs	r3, r3, #31
 801ee96:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ee98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee9a:	17db      	asrs	r3, r3, #31
 801ee9c:	9310      	str	r3, [sp, #64]	@ 0x40
 801ee9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eea0:	17db      	asrs	r3, r3, #31
 801eea2:	9311      	str	r3, [sp, #68]	@ 0x44
 801eea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eea6:	4463      	add	r3, ip
 801eea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eeaa:	4643      	mov	r3, r8
 801eeac:	4641      	mov	r1, r8
 801eeae:	681a      	ldr	r2, [r3, #0]
 801eeb0:	464b      	mov	r3, r9
 801eeb2:	684f      	ldr	r7, [r1, #4]
 801eeb4:	4649      	mov	r1, r9
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	18d6      	adds	r6, r2, r3
 801eeba:	1ad3      	subs	r3, r2, r3
 801eebc:	9301      	str	r3, [sp, #4]
 801eebe:	684b      	ldr	r3, [r1, #4]
 801eec0:	1af9      	subs	r1, r7, r3
 801eec2:	9102      	str	r1, [sp, #8]
 801eec4:	6829      	ldr	r1, [r5, #0]
 801eec6:	18f8      	adds	r0, r7, r3
 801eec8:	468c      	mov	ip, r1
 801eeca:	6827      	ldr	r7, [r4, #0]
 801eecc:	4467      	add	r7, ip
 801eece:	003a      	movs	r2, r7
 801eed0:	19f3      	adds	r3, r6, r7
 801eed2:	4647      	mov	r7, r8
 801eed4:	109b      	asrs	r3, r3, #2
 801eed6:	603b      	str	r3, [r7, #0]
 801eed8:	6869      	ldr	r1, [r5, #4]
 801eeda:	6867      	ldr	r7, [r4, #4]
 801eedc:	468c      	mov	ip, r1
 801eede:	4467      	add	r7, ip
 801eee0:	003b      	movs	r3, r7
 801eee2:	19c1      	adds	r1, r0, r7
 801eee4:	4647      	mov	r7, r8
 801eee6:	1ab6      	subs	r6, r6, r2
 801eee8:	1089      	asrs	r1, r1, #2
 801eeea:	6079      	str	r1, [r7, #4]
 801eeec:	17f2      	asrs	r2, r6, #31
 801eeee:	9900      	ldr	r1, [sp, #0]
 801eef0:	4692      	mov	sl, r2
 801eef2:	468c      	mov	ip, r1
 801eef4:	6867      	ldr	r7, [r4, #4]
 801eef6:	6869      	ldr	r1, [r5, #4]
 801eef8:	44e0      	add	r8, ip
 801eefa:	1a7f      	subs	r7, r7, r1
 801eefc:	9703      	str	r7, [sp, #12]
 801eefe:	6821      	ldr	r1, [r4, #0]
 801ef00:	682f      	ldr	r7, [r5, #0]
 801ef02:	1bc9      	subs	r1, r1, r7
 801ef04:	1ac7      	subs	r7, r0, r3
 801ef06:	17fa      	asrs	r2, r7, #31
 801ef08:	4693      	mov	fp, r2
 801ef0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef0c:	9a07      	ldr	r2, [sp, #28]
 801ef0e:	9104      	str	r1, [sp, #16]
 801ef10:	0030      	movs	r0, r6
 801ef12:	4651      	mov	r1, sl
 801ef14:	f7e1 fb54 	bl	80005c0 <__aeabi_lmul>
 801ef18:	9a08      	ldr	r2, [sp, #32]
 801ef1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef1c:	9112      	str	r1, [sp, #72]	@ 0x48
 801ef1e:	0038      	movs	r0, r7
 801ef20:	4659      	mov	r1, fp
 801ef22:	f7e1 fb4d 	bl	80005c0 <__aeabi_lmul>
 801ef26:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ef28:	9a07      	ldr	r2, [sp, #28]
 801ef2a:	1a41      	subs	r1, r0, r1
 801ef2c:	1049      	asrs	r1, r1, #1
 801ef2e:	6021      	str	r1, [r4, #0]
 801ef30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef32:	0038      	movs	r0, r7
 801ef34:	4659      	mov	r1, fp
 801ef36:	f7e1 fb43 	bl	80005c0 <__aeabi_lmul>
 801ef3a:	9a08      	ldr	r2, [sp, #32]
 801ef3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef3e:	000f      	movs	r7, r1
 801ef40:	0030      	movs	r0, r6
 801ef42:	4651      	mov	r1, sl
 801ef44:	f7e1 fb3c 	bl	80005c0 <__aeabi_lmul>
 801ef48:	9b00      	ldr	r3, [sp, #0]
 801ef4a:	187f      	adds	r7, r7, r1
 801ef4c:	469c      	mov	ip, r3
 801ef4e:	107f      	asrs	r7, r7, #1
 801ef50:	6067      	str	r7, [r4, #4]
 801ef52:	9a01      	ldr	r2, [sp, #4]
 801ef54:	9f03      	ldr	r7, [sp, #12]
 801ef56:	9802      	ldr	r0, [sp, #8]
 801ef58:	1bd7      	subs	r7, r2, r7
 801ef5a:	17fe      	asrs	r6, r7, #31
 801ef5c:	0031      	movs	r1, r6
 801ef5e:	9e04      	ldr	r6, [sp, #16]
 801ef60:	4682      	mov	sl, r0
 801ef62:	4464      	add	r4, ip
 801ef64:	46b4      	mov	ip, r6
 801ef66:	44e2      	add	sl, ip
 801ef68:	4652      	mov	r2, sl
 801ef6a:	17d2      	asrs	r2, r2, #31
 801ef6c:	4693      	mov	fp, r2
 801ef6e:	0038      	movs	r0, r7
 801ef70:	9a05      	ldr	r2, [sp, #20]
 801ef72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef74:	9112      	str	r1, [sp, #72]	@ 0x48
 801ef76:	f7e1 fb23 	bl	80005c0 <__aeabi_lmul>
 801ef7a:	9a06      	ldr	r2, [sp, #24]
 801ef7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef7e:	000e      	movs	r6, r1
 801ef80:	4650      	mov	r0, sl
 801ef82:	4659      	mov	r1, fp
 801ef84:	f7e1 fb1c 	bl	80005c0 <__aeabi_lmul>
 801ef88:	4648      	mov	r0, r9
 801ef8a:	1a76      	subs	r6, r6, r1
 801ef8c:	1076      	asrs	r6, r6, #1
 801ef8e:	6006      	str	r6, [r0, #0]
 801ef90:	9a05      	ldr	r2, [sp, #20]
 801ef92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef94:	4650      	mov	r0, sl
 801ef96:	4659      	mov	r1, fp
 801ef98:	f7e1 fb12 	bl	80005c0 <__aeabi_lmul>
 801ef9c:	9a06      	ldr	r2, [sp, #24]
 801ef9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801efa0:	000e      	movs	r6, r1
 801efa2:	0038      	movs	r0, r7
 801efa4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801efa6:	f7e1 fb0b 	bl	80005c0 <__aeabi_lmul>
 801efaa:	9a00      	ldr	r2, [sp, #0]
 801efac:	9f03      	ldr	r7, [sp, #12]
 801efae:	4694      	mov	ip, r2
 801efb0:	1876      	adds	r6, r6, r1
 801efb2:	4649      	mov	r1, r9
 801efb4:	44e1      	add	r9, ip
 801efb6:	46bc      	mov	ip, r7
 801efb8:	9b01      	ldr	r3, [sp, #4]
 801efba:	1076      	asrs	r6, r6, #1
 801efbc:	4463      	add	r3, ip
 801efbe:	17df      	asrs	r7, r3, #31
 801efc0:	604e      	str	r6, [r1, #4]
 801efc2:	46ba      	mov	sl, r7
 801efc4:	001e      	movs	r6, r3
 801efc6:	9802      	ldr	r0, [sp, #8]
 801efc8:	9b04      	ldr	r3, [sp, #16]
 801efca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801efcc:	1ac7      	subs	r7, r0, r3
 801efce:	17fb      	asrs	r3, r7, #31
 801efd0:	469b      	mov	fp, r3
 801efd2:	0030      	movs	r0, r6
 801efd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801efd6:	4651      	mov	r1, sl
 801efd8:	f7e1 faf2 	bl	80005c0 <__aeabi_lmul>
 801efdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801efde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801efe0:	9101      	str	r1, [sp, #4]
 801efe2:	0038      	movs	r0, r7
 801efe4:	4659      	mov	r1, fp
 801efe6:	f7e1 faeb 	bl	80005c0 <__aeabi_lmul>
 801efea:	9801      	ldr	r0, [sp, #4]
 801efec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801efee:	1a41      	subs	r1, r0, r1
 801eff0:	1049      	asrs	r1, r1, #1
 801eff2:	6029      	str	r1, [r5, #0]
 801eff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eff6:	0038      	movs	r0, r7
 801eff8:	4659      	mov	r1, fp
 801effa:	f7e1 fae1 	bl	80005c0 <__aeabi_lmul>
 801effe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f000:	000f      	movs	r7, r1
 801f002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f004:	0030      	movs	r0, r6
 801f006:	4651      	mov	r1, sl
 801f008:	f7e1 fada 	bl	80005c0 <__aeabi_lmul>
 801f00c:	187f      	adds	r7, r7, r1
 801f00e:	107f      	asrs	r7, r7, #1
 801f010:	606f      	str	r7, [r5, #4]
 801f012:	9a00      	ldr	r2, [sp, #0]
 801f014:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f016:	4694      	mov	ip, r2
 801f018:	4465      	add	r5, ip
 801f01a:	468c      	mov	ip, r1
 801f01c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f01e:	0013      	movs	r3, r2
 801f020:	4462      	add	r2, ip
 801f022:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f024:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f026:	429a      	cmp	r2, r3
 801f028:	d900      	bls.n	801f02c <arm_radix4_butterfly_inverse_q31+0x46c>
 801f02a:	e73e      	b.n	801eeaa <arm_radix4_butterfly_inverse_q31+0x2ea>
 801f02c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f02e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f030:	468c      	mov	ip, r1
 801f032:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801f034:	4462      	add	r2, ip
 801f036:	468c      	mov	ip, r1
 801f038:	9216      	str	r2, [sp, #88]	@ 0x58
 801f03a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801f03c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f03e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f040:	4462      	add	r2, ip
 801f042:	468c      	mov	ip, r1
 801f044:	9219      	str	r2, [sp, #100]	@ 0x64
 801f046:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f048:	3301      	adds	r3, #1
 801f04a:	4462      	add	r2, ip
 801f04c:	9218      	str	r2, [sp, #96]	@ 0x60
 801f04e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801f050:	9315      	str	r3, [sp, #84]	@ 0x54
 801f052:	3208      	adds	r2, #8
 801f054:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f056:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f058:	4293      	cmp	r3, r2
 801f05a:	d800      	bhi.n	801f05e <arm_radix4_butterfly_inverse_q31+0x49e>
 801f05c:	e6ec      	b.n	801ee38 <arm_radix4_butterfly_inverse_q31+0x278>
 801f05e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f060:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f062:	009b      	lsls	r3, r3, #2
 801f064:	931f      	str	r3, [sp, #124]	@ 0x7c
 801f066:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f068:	9213      	str	r2, [sp, #76]	@ 0x4c
 801f06a:	089b      	lsrs	r3, r3, #2
 801f06c:	9320      	str	r3, [sp, #128]	@ 0x80
 801f06e:	2b04      	cmp	r3, #4
 801f070:	d900      	bls.n	801f074 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801f072:	e6c5      	b.n	801ee00 <arm_radix4_butterfly_inverse_q31+0x240>
 801f074:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f076:	469a      	mov	sl, r3
 801f078:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f07a:	681a      	ldr	r2, [r3, #0]
 801f07c:	6918      	ldr	r0, [r3, #16]
 801f07e:	4691      	mov	r9, r2
 801f080:	464c      	mov	r4, r9
 801f082:	4680      	mov	r8, r0
 801f084:	69de      	ldr	r6, [r3, #28]
 801f086:	689d      	ldr	r5, [r3, #8]
 801f088:	46b4      	mov	ip, r6
 801f08a:	6998      	ldr	r0, [r3, #24]
 801f08c:	1964      	adds	r4, r4, r5
 801f08e:	6859      	ldr	r1, [r3, #4]
 801f090:	68da      	ldr	r2, [r3, #12]
 801f092:	4444      	add	r4, r8
 801f094:	695f      	ldr	r7, [r3, #20]
 801f096:	1824      	adds	r4, r4, r0
 801f098:	601c      	str	r4, [r3, #0]
 801f09a:	188c      	adds	r4, r1, r2
 801f09c:	19e4      	adds	r4, r4, r7
 801f09e:	4464      	add	r4, ip
 801f0a0:	605c      	str	r4, [r3, #4]
 801f0a2:	464c      	mov	r4, r9
 801f0a4:	1b64      	subs	r4, r4, r5
 801f0a6:	4444      	add	r4, r8
 801f0a8:	1a24      	subs	r4, r4, r0
 801f0aa:	609c      	str	r4, [r3, #8]
 801f0ac:	1a8c      	subs	r4, r1, r2
 801f0ae:	19e4      	adds	r4, r4, r7
 801f0b0:	1ba4      	subs	r4, r4, r6
 801f0b2:	60dc      	str	r4, [r3, #12]
 801f0b4:	464c      	mov	r4, r9
 801f0b6:	4646      	mov	r6, r8
 801f0b8:	1aa4      	subs	r4, r4, r2
 801f0ba:	1ba4      	subs	r4, r4, r6
 801f0bc:	4464      	add	r4, ip
 801f0be:	611c      	str	r4, [r3, #16]
 801f0c0:	194c      	adds	r4, r1, r5
 801f0c2:	1be4      	subs	r4, r4, r7
 801f0c4:	1a24      	subs	r4, r4, r0
 801f0c6:	615c      	str	r4, [r3, #20]
 801f0c8:	4644      	mov	r4, r8
 801f0ca:	4666      	mov	r6, ip
 801f0cc:	444a      	add	r2, r9
 801f0ce:	1b12      	subs	r2, r2, r4
 801f0d0:	1b92      	subs	r2, r2, r6
 801f0d2:	619a      	str	r2, [r3, #24]
 801f0d4:	1b4a      	subs	r2, r1, r5
 801f0d6:	1bd1      	subs	r1, r2, r7
 801f0d8:	2201      	movs	r2, #1
 801f0da:	4252      	negs	r2, r2
 801f0dc:	4694      	mov	ip, r2
 801f0de:	44e2      	add	sl, ip
 801f0e0:	4652      	mov	r2, sl
 801f0e2:	1809      	adds	r1, r1, r0
 801f0e4:	61d9      	str	r1, [r3, #28]
 801f0e6:	3320      	adds	r3, #32
 801f0e8:	2a00      	cmp	r2, #0
 801f0ea:	d1c6      	bne.n	801f07a <arm_radix4_butterfly_inverse_q31+0x4ba>
 801f0ec:	b027      	add	sp, #156	@ 0x9c
 801f0ee:	bc3c      	pop	{r2, r3, r4, r5}
 801f0f0:	4690      	mov	r8, r2
 801f0f2:	4699      	mov	r9, r3
 801f0f4:	46a2      	mov	sl, r4
 801f0f6:	46ab      	mov	fp, r5
 801f0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f0fa:	469a      	mov	sl, r3
 801f0fc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f0fe:	e7bc      	b.n	801f07a <arm_radix4_butterfly_inverse_q31+0x4ba>

0801f100 <arm_cmplx_mag_squared_q31>:
 801f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f102:	464f      	mov	r7, r9
 801f104:	4646      	mov	r6, r8
 801f106:	0004      	movs	r4, r0
 801f108:	b4c0      	push	{r6, r7}
 801f10a:	0016      	movs	r6, r2
 801f10c:	000f      	movs	r7, r1
 801f10e:	2a00      	cmp	r2, #0
 801f110:	d018      	beq.n	801f144 <arm_cmplx_mag_squared_q31+0x44>
 801f112:	6823      	ldr	r3, [r4, #0]
 801f114:	6822      	ldr	r2, [r4, #0]
 801f116:	17d9      	asrs	r1, r3, #31
 801f118:	6863      	ldr	r3, [r4, #4]
 801f11a:	0010      	movs	r0, r2
 801f11c:	4698      	mov	r8, r3
 801f11e:	17db      	asrs	r3, r3, #31
 801f120:	4699      	mov	r9, r3
 801f122:	000b      	movs	r3, r1
 801f124:	f7e1 fa4c 	bl	80005c0 <__aeabi_lmul>
 801f128:	4642      	mov	r2, r8
 801f12a:	104d      	asrs	r5, r1, #1
 801f12c:	464b      	mov	r3, r9
 801f12e:	4640      	mov	r0, r8
 801f130:	4649      	mov	r1, r9
 801f132:	f7e1 fa45 	bl	80005c0 <__aeabi_lmul>
 801f136:	1049      	asrs	r1, r1, #1
 801f138:	1869      	adds	r1, r5, r1
 801f13a:	3e01      	subs	r6, #1
 801f13c:	c702      	stmia	r7!, {r1}
 801f13e:	3408      	adds	r4, #8
 801f140:	2e00      	cmp	r6, #0
 801f142:	d1e6      	bne.n	801f112 <arm_cmplx_mag_squared_q31+0x12>
 801f144:	bc0c      	pop	{r2, r3}
 801f146:	4690      	mov	r8, r2
 801f148:	4699      	mov	r9, r3
 801f14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f14c <arm_mult_q31>:
 801f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f14e:	4646      	mov	r6, r8
 801f150:	464f      	mov	r7, r9
 801f152:	4690      	mov	r8, r2
 801f154:	b4c0      	push	{r6, r7}
 801f156:	001d      	movs	r5, r3
 801f158:	0006      	movs	r6, r0
 801f15a:	000f      	movs	r7, r1
 801f15c:	2400      	movs	r4, #0
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d020      	beq.n	801f1a4 <arm_mult_q31+0x58>
 801f162:	4b12      	ldr	r3, [pc, #72]	@ (801f1ac <arm_mult_q31+0x60>)
 801f164:	4699      	mov	r9, r3
 801f166:	e007      	b.n	801f178 <arm_mult_q31+0x2c>
 801f168:	464b      	mov	r3, r9
 801f16a:	4059      	eors	r1, r3
 801f16c:	4643      	mov	r3, r8
 801f16e:	3d01      	subs	r5, #1
 801f170:	5119      	str	r1, [r3, r4]
 801f172:	3404      	adds	r4, #4
 801f174:	2d00      	cmp	r5, #0
 801f176:	d015      	beq.n	801f1a4 <arm_mult_q31+0x58>
 801f178:	5933      	ldr	r3, [r6, r4]
 801f17a:	593a      	ldr	r2, [r7, r4]
 801f17c:	17d9      	asrs	r1, r3, #31
 801f17e:	593b      	ldr	r3, [r7, r4]
 801f180:	5930      	ldr	r0, [r6, r4]
 801f182:	17db      	asrs	r3, r3, #31
 801f184:	f7e1 fa1c 	bl	80005c0 <__aeabi_lmul>
 801f188:	004b      	lsls	r3, r1, #1
 801f18a:	0fc0      	lsrs	r0, r0, #31
 801f18c:	4318      	orrs	r0, r3
 801f18e:	17c9      	asrs	r1, r1, #31
 801f190:	17c3      	asrs	r3, r0, #31
 801f192:	428b      	cmp	r3, r1
 801f194:	d1e8      	bne.n	801f168 <arm_mult_q31+0x1c>
 801f196:	0001      	movs	r1, r0
 801f198:	4643      	mov	r3, r8
 801f19a:	3d01      	subs	r5, #1
 801f19c:	5119      	str	r1, [r3, r4]
 801f19e:	3404      	adds	r4, #4
 801f1a0:	2d00      	cmp	r5, #0
 801f1a2:	d1e9      	bne.n	801f178 <arm_mult_q31+0x2c>
 801f1a4:	bc0c      	pop	{r2, r3}
 801f1a6:	4690      	mov	r8, r2
 801f1a8:	4699      	mov	r9, r3
 801f1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1ac:	7fffffff 	.word	0x7fffffff

0801f1b0 <arm_add_q31>:
 801f1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1b2:	465f      	mov	r7, fp
 801f1b4:	4656      	mov	r6, sl
 801f1b6:	464d      	mov	r5, r9
 801f1b8:	4644      	mov	r4, r8
 801f1ba:	b4f0      	push	{r4, r5, r6, r7}
 801f1bc:	4693      	mov	fp, r2
 801f1be:	b083      	sub	sp, #12
 801f1c0:	4681      	mov	r9, r0
 801f1c2:	468a      	mov	sl, r1
 801f1c4:	4698      	mov	r8, r3
 801f1c6:	2200      	movs	r2, #0
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d020      	beq.n	801f20e <arm_add_q31+0x5e>
 801f1cc:	4649      	mov	r1, r9
 801f1ce:	4653      	mov	r3, sl
 801f1d0:	588e      	ldr	r6, [r1, r2]
 801f1d2:	589b      	ldr	r3, [r3, r2]
 801f1d4:	17f7      	asrs	r7, r6, #31
 801f1d6:	001c      	movs	r4, r3
 801f1d8:	0030      	movs	r0, r6
 801f1da:	0039      	movs	r1, r7
 801f1dc:	17dd      	asrs	r5, r3, #31
 801f1de:	46b4      	mov	ip, r6
 801f1e0:	1900      	adds	r0, r0, r4
 801f1e2:	4169      	adcs	r1, r5
 801f1e4:	4463      	add	r3, ip
 801f1e6:	9000      	str	r0, [sp, #0]
 801f1e8:	9101      	str	r1, [sp, #4]
 801f1ea:	17d9      	asrs	r1, r3, #31
 801f1ec:	468c      	mov	ip, r1
 801f1ee:	9901      	ldr	r1, [sp, #4]
 801f1f0:	458c      	cmp	ip, r1
 801f1f2:	d002      	beq.n	801f1fa <arm_add_q31+0x4a>
 801f1f4:	17cb      	asrs	r3, r1, #31
 801f1f6:	4909      	ldr	r1, [pc, #36]	@ (801f21c <arm_add_q31+0x6c>)
 801f1f8:	404b      	eors	r3, r1
 801f1fa:	4659      	mov	r1, fp
 801f1fc:	508b      	str	r3, [r1, r2]
 801f1fe:	2301      	movs	r3, #1
 801f200:	425b      	negs	r3, r3
 801f202:	469c      	mov	ip, r3
 801f204:	44e0      	add	r8, ip
 801f206:	4643      	mov	r3, r8
 801f208:	3204      	adds	r2, #4
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	d1de      	bne.n	801f1cc <arm_add_q31+0x1c>
 801f20e:	b003      	add	sp, #12
 801f210:	bc3c      	pop	{r2, r3, r4, r5}
 801f212:	4690      	mov	r8, r2
 801f214:	4699      	mov	r9, r3
 801f216:	46a2      	mov	sl, r4
 801f218:	46ab      	mov	fp, r5
 801f21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f21c:	7fffffff 	.word	0x7fffffff

0801f220 <atof>:
 801f220:	b510      	push	{r4, lr}
 801f222:	2100      	movs	r1, #0
 801f224:	f000 fe12 	bl	801fe4c <strtod>
 801f228:	bd10      	pop	{r4, pc}

0801f22a <atoi>:
 801f22a:	b510      	push	{r4, lr}
 801f22c:	220a      	movs	r2, #10
 801f22e:	2100      	movs	r1, #0
 801f230:	f000 fea4 	bl	801ff7c <strtol>
 801f234:	bd10      	pop	{r4, pc}
	...

0801f238 <sulp>:
 801f238:	b570      	push	{r4, r5, r6, lr}
 801f23a:	0016      	movs	r6, r2
 801f23c:	000d      	movs	r5, r1
 801f23e:	f003 fd15 	bl	8022c6c <__ulp>
 801f242:	2e00      	cmp	r6, #0
 801f244:	d00d      	beq.n	801f262 <sulp+0x2a>
 801f246:	236b      	movs	r3, #107	@ 0x6b
 801f248:	006a      	lsls	r2, r5, #1
 801f24a:	0d52      	lsrs	r2, r2, #21
 801f24c:	1a9b      	subs	r3, r3, r2
 801f24e:	2b00      	cmp	r3, #0
 801f250:	dd07      	ble.n	801f262 <sulp+0x2a>
 801f252:	2400      	movs	r4, #0
 801f254:	4a03      	ldr	r2, [pc, #12]	@ (801f264 <sulp+0x2c>)
 801f256:	051b      	lsls	r3, r3, #20
 801f258:	189d      	adds	r5, r3, r2
 801f25a:	002b      	movs	r3, r5
 801f25c:	0022      	movs	r2, r4
 801f25e:	f7e3 f9ed 	bl	800263c <__aeabi_dmul>
 801f262:	bd70      	pop	{r4, r5, r6, pc}
 801f264:	3ff00000 	.word	0x3ff00000

0801f268 <_strtod_l>:
 801f268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f26a:	b0a3      	sub	sp, #140	@ 0x8c
 801f26c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801f26e:	2200      	movs	r2, #0
 801f270:	2600      	movs	r6, #0
 801f272:	2700      	movs	r7, #0
 801f274:	9005      	str	r0, [sp, #20]
 801f276:	9109      	str	r1, [sp, #36]	@ 0x24
 801f278:	921e      	str	r2, [sp, #120]	@ 0x78
 801f27a:	911d      	str	r1, [sp, #116]	@ 0x74
 801f27c:	780a      	ldrb	r2, [r1, #0]
 801f27e:	2a2b      	cmp	r2, #43	@ 0x2b
 801f280:	d053      	beq.n	801f32a <_strtod_l+0xc2>
 801f282:	d83f      	bhi.n	801f304 <_strtod_l+0x9c>
 801f284:	2a0d      	cmp	r2, #13
 801f286:	d839      	bhi.n	801f2fc <_strtod_l+0x94>
 801f288:	2a08      	cmp	r2, #8
 801f28a:	d839      	bhi.n	801f300 <_strtod_l+0x98>
 801f28c:	2a00      	cmp	r2, #0
 801f28e:	d042      	beq.n	801f316 <_strtod_l+0xae>
 801f290:	2200      	movs	r2, #0
 801f292:	9212      	str	r2, [sp, #72]	@ 0x48
 801f294:	2100      	movs	r1, #0
 801f296:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f298:	910c      	str	r1, [sp, #48]	@ 0x30
 801f29a:	782a      	ldrb	r2, [r5, #0]
 801f29c:	2a30      	cmp	r2, #48	@ 0x30
 801f29e:	d000      	beq.n	801f2a2 <_strtod_l+0x3a>
 801f2a0:	e083      	b.n	801f3aa <_strtod_l+0x142>
 801f2a2:	786a      	ldrb	r2, [r5, #1]
 801f2a4:	3120      	adds	r1, #32
 801f2a6:	438a      	bics	r2, r1
 801f2a8:	2a58      	cmp	r2, #88	@ 0x58
 801f2aa:	d000      	beq.n	801f2ae <_strtod_l+0x46>
 801f2ac:	e073      	b.n	801f396 <_strtod_l+0x12e>
 801f2ae:	9302      	str	r3, [sp, #8]
 801f2b0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f2b2:	4a95      	ldr	r2, [pc, #596]	@ (801f508 <_strtod_l+0x2a0>)
 801f2b4:	9301      	str	r3, [sp, #4]
 801f2b6:	ab1e      	add	r3, sp, #120	@ 0x78
 801f2b8:	9300      	str	r3, [sp, #0]
 801f2ba:	9805      	ldr	r0, [sp, #20]
 801f2bc:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f2be:	a91d      	add	r1, sp, #116	@ 0x74
 801f2c0:	f002 fd84 	bl	8021dcc <__gethex>
 801f2c4:	230f      	movs	r3, #15
 801f2c6:	0002      	movs	r2, r0
 801f2c8:	401a      	ands	r2, r3
 801f2ca:	0004      	movs	r4, r0
 801f2cc:	9206      	str	r2, [sp, #24]
 801f2ce:	4218      	tst	r0, r3
 801f2d0:	d005      	beq.n	801f2de <_strtod_l+0x76>
 801f2d2:	2a06      	cmp	r2, #6
 801f2d4:	d12b      	bne.n	801f32e <_strtod_l+0xc6>
 801f2d6:	2300      	movs	r3, #0
 801f2d8:	3501      	adds	r5, #1
 801f2da:	951d      	str	r5, [sp, #116]	@ 0x74
 801f2dc:	9312      	str	r3, [sp, #72]	@ 0x48
 801f2de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f2e0:	2b00      	cmp	r3, #0
 801f2e2:	d002      	beq.n	801f2ea <_strtod_l+0x82>
 801f2e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f2e6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f2e8:	6013      	str	r3, [r2, #0]
 801f2ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d019      	beq.n	801f324 <_strtod_l+0xbc>
 801f2f0:	2380      	movs	r3, #128	@ 0x80
 801f2f2:	0030      	movs	r0, r6
 801f2f4:	061b      	lsls	r3, r3, #24
 801f2f6:	18f9      	adds	r1, r7, r3
 801f2f8:	b023      	add	sp, #140	@ 0x8c
 801f2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2fc:	2a20      	cmp	r2, #32
 801f2fe:	d1c7      	bne.n	801f290 <_strtod_l+0x28>
 801f300:	3101      	adds	r1, #1
 801f302:	e7ba      	b.n	801f27a <_strtod_l+0x12>
 801f304:	2a2d      	cmp	r2, #45	@ 0x2d
 801f306:	d1c3      	bne.n	801f290 <_strtod_l+0x28>
 801f308:	3a2c      	subs	r2, #44	@ 0x2c
 801f30a:	9212      	str	r2, [sp, #72]	@ 0x48
 801f30c:	1c4a      	adds	r2, r1, #1
 801f30e:	921d      	str	r2, [sp, #116]	@ 0x74
 801f310:	784a      	ldrb	r2, [r1, #1]
 801f312:	2a00      	cmp	r2, #0
 801f314:	d1be      	bne.n	801f294 <_strtod_l+0x2c>
 801f316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f318:	931d      	str	r3, [sp, #116]	@ 0x74
 801f31a:	2300      	movs	r3, #0
 801f31c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f31e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f320:	2b00      	cmp	r3, #0
 801f322:	d1df      	bne.n	801f2e4 <_strtod_l+0x7c>
 801f324:	0030      	movs	r0, r6
 801f326:	0039      	movs	r1, r7
 801f328:	e7e6      	b.n	801f2f8 <_strtod_l+0x90>
 801f32a:	2200      	movs	r2, #0
 801f32c:	e7ed      	b.n	801f30a <_strtod_l+0xa2>
 801f32e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f330:	2a00      	cmp	r2, #0
 801f332:	d007      	beq.n	801f344 <_strtod_l+0xdc>
 801f334:	2135      	movs	r1, #53	@ 0x35
 801f336:	a820      	add	r0, sp, #128	@ 0x80
 801f338:	f003 fd8e 	bl	8022e58 <__copybits>
 801f33c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f33e:	9805      	ldr	r0, [sp, #20]
 801f340:	f003 f948 	bl	80225d4 <_Bfree>
 801f344:	9806      	ldr	r0, [sp, #24]
 801f346:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f348:	3801      	subs	r0, #1
 801f34a:	2804      	cmp	r0, #4
 801f34c:	d806      	bhi.n	801f35c <_strtod_l+0xf4>
 801f34e:	f7e0 ff15 	bl	800017c <__gnu_thumb1_case_uqi>
 801f352:	0312      	.short	0x0312
 801f354:	1e1c      	.short	0x1e1c
 801f356:	12          	.byte	0x12
 801f357:	00          	.byte	0x00
 801f358:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f35a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801f35c:	05e4      	lsls	r4, r4, #23
 801f35e:	d502      	bpl.n	801f366 <_strtod_l+0xfe>
 801f360:	2380      	movs	r3, #128	@ 0x80
 801f362:	061b      	lsls	r3, r3, #24
 801f364:	431f      	orrs	r7, r3
 801f366:	4b69      	ldr	r3, [pc, #420]	@ (801f50c <_strtod_l+0x2a4>)
 801f368:	423b      	tst	r3, r7
 801f36a:	d1b8      	bne.n	801f2de <_strtod_l+0x76>
 801f36c:	f001 fdb2 	bl	8020ed4 <__errno>
 801f370:	2322      	movs	r3, #34	@ 0x22
 801f372:	6003      	str	r3, [r0, #0]
 801f374:	e7b3      	b.n	801f2de <_strtod_l+0x76>
 801f376:	4966      	ldr	r1, [pc, #408]	@ (801f510 <_strtod_l+0x2a8>)
 801f378:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f37a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f37c:	400a      	ands	r2, r1
 801f37e:	4965      	ldr	r1, [pc, #404]	@ (801f514 <_strtod_l+0x2ac>)
 801f380:	185b      	adds	r3, r3, r1
 801f382:	051b      	lsls	r3, r3, #20
 801f384:	431a      	orrs	r2, r3
 801f386:	0017      	movs	r7, r2
 801f388:	e7e8      	b.n	801f35c <_strtod_l+0xf4>
 801f38a:	4f60      	ldr	r7, [pc, #384]	@ (801f50c <_strtod_l+0x2a4>)
 801f38c:	e7e6      	b.n	801f35c <_strtod_l+0xf4>
 801f38e:	2601      	movs	r6, #1
 801f390:	4f61      	ldr	r7, [pc, #388]	@ (801f518 <_strtod_l+0x2b0>)
 801f392:	4276      	negs	r6, r6
 801f394:	e7e2      	b.n	801f35c <_strtod_l+0xf4>
 801f396:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f398:	1c5a      	adds	r2, r3, #1
 801f39a:	921d      	str	r2, [sp, #116]	@ 0x74
 801f39c:	785b      	ldrb	r3, [r3, #1]
 801f39e:	2b30      	cmp	r3, #48	@ 0x30
 801f3a0:	d0f9      	beq.n	801f396 <_strtod_l+0x12e>
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	d09b      	beq.n	801f2de <_strtod_l+0x76>
 801f3a6:	2301      	movs	r3, #1
 801f3a8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f3aa:	2500      	movs	r5, #0
 801f3ac:	220a      	movs	r2, #10
 801f3ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f3b0:	950d      	str	r5, [sp, #52]	@ 0x34
 801f3b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f3b4:	9508      	str	r5, [sp, #32]
 801f3b6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f3b8:	7804      	ldrb	r4, [r0, #0]
 801f3ba:	0023      	movs	r3, r4
 801f3bc:	3b30      	subs	r3, #48	@ 0x30
 801f3be:	b2d9      	uxtb	r1, r3
 801f3c0:	2909      	cmp	r1, #9
 801f3c2:	d927      	bls.n	801f414 <_strtod_l+0x1ac>
 801f3c4:	2201      	movs	r2, #1
 801f3c6:	4955      	ldr	r1, [pc, #340]	@ (801f51c <_strtod_l+0x2b4>)
 801f3c8:	f001 fcf6 	bl	8020db8 <strncmp>
 801f3cc:	2800      	cmp	r0, #0
 801f3ce:	d031      	beq.n	801f434 <_strtod_l+0x1cc>
 801f3d0:	2000      	movs	r0, #0
 801f3d2:	0023      	movs	r3, r4
 801f3d4:	4684      	mov	ip, r0
 801f3d6:	9a08      	ldr	r2, [sp, #32]
 801f3d8:	900e      	str	r0, [sp, #56]	@ 0x38
 801f3da:	9206      	str	r2, [sp, #24]
 801f3dc:	2220      	movs	r2, #32
 801f3de:	0019      	movs	r1, r3
 801f3e0:	4391      	bics	r1, r2
 801f3e2:	000a      	movs	r2, r1
 801f3e4:	2100      	movs	r1, #0
 801f3e6:	9107      	str	r1, [sp, #28]
 801f3e8:	2a45      	cmp	r2, #69	@ 0x45
 801f3ea:	d000      	beq.n	801f3ee <_strtod_l+0x186>
 801f3ec:	e0c0      	b.n	801f570 <_strtod_l+0x308>
 801f3ee:	9b06      	ldr	r3, [sp, #24]
 801f3f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f3f2:	4303      	orrs	r3, r0
 801f3f4:	4313      	orrs	r3, r2
 801f3f6:	428b      	cmp	r3, r1
 801f3f8:	d08d      	beq.n	801f316 <_strtod_l+0xae>
 801f3fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3fe:	3301      	adds	r3, #1
 801f400:	931d      	str	r3, [sp, #116]	@ 0x74
 801f402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f404:	785b      	ldrb	r3, [r3, #1]
 801f406:	2b2b      	cmp	r3, #43	@ 0x2b
 801f408:	d070      	beq.n	801f4ec <_strtod_l+0x284>
 801f40a:	000c      	movs	r4, r1
 801f40c:	2b2d      	cmp	r3, #45	@ 0x2d
 801f40e:	d173      	bne.n	801f4f8 <_strtod_l+0x290>
 801f410:	2401      	movs	r4, #1
 801f412:	e06c      	b.n	801f4ee <_strtod_l+0x286>
 801f414:	9908      	ldr	r1, [sp, #32]
 801f416:	2908      	cmp	r1, #8
 801f418:	dc09      	bgt.n	801f42e <_strtod_l+0x1c6>
 801f41a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f41c:	4351      	muls	r1, r2
 801f41e:	185b      	adds	r3, r3, r1
 801f420:	930d      	str	r3, [sp, #52]	@ 0x34
 801f422:	9b08      	ldr	r3, [sp, #32]
 801f424:	3001      	adds	r0, #1
 801f426:	3301      	adds	r3, #1
 801f428:	9308      	str	r3, [sp, #32]
 801f42a:	901d      	str	r0, [sp, #116]	@ 0x74
 801f42c:	e7c3      	b.n	801f3b6 <_strtod_l+0x14e>
 801f42e:	4355      	muls	r5, r2
 801f430:	195d      	adds	r5, r3, r5
 801f432:	e7f6      	b.n	801f422 <_strtod_l+0x1ba>
 801f434:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f436:	1c5a      	adds	r2, r3, #1
 801f438:	921d      	str	r2, [sp, #116]	@ 0x74
 801f43a:	9a08      	ldr	r2, [sp, #32]
 801f43c:	785b      	ldrb	r3, [r3, #1]
 801f43e:	2a00      	cmp	r2, #0
 801f440:	d03a      	beq.n	801f4b8 <_strtod_l+0x250>
 801f442:	900e      	str	r0, [sp, #56]	@ 0x38
 801f444:	9206      	str	r2, [sp, #24]
 801f446:	001a      	movs	r2, r3
 801f448:	3a30      	subs	r2, #48	@ 0x30
 801f44a:	2a09      	cmp	r2, #9
 801f44c:	d912      	bls.n	801f474 <_strtod_l+0x20c>
 801f44e:	2201      	movs	r2, #1
 801f450:	4694      	mov	ip, r2
 801f452:	e7c3      	b.n	801f3dc <_strtod_l+0x174>
 801f454:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f456:	3001      	adds	r0, #1
 801f458:	1c5a      	adds	r2, r3, #1
 801f45a:	921d      	str	r2, [sp, #116]	@ 0x74
 801f45c:	785b      	ldrb	r3, [r3, #1]
 801f45e:	2b30      	cmp	r3, #48	@ 0x30
 801f460:	d0f8      	beq.n	801f454 <_strtod_l+0x1ec>
 801f462:	001a      	movs	r2, r3
 801f464:	3a31      	subs	r2, #49	@ 0x31
 801f466:	2a08      	cmp	r2, #8
 801f468:	d83b      	bhi.n	801f4e2 <_strtod_l+0x27a>
 801f46a:	900e      	str	r0, [sp, #56]	@ 0x38
 801f46c:	2000      	movs	r0, #0
 801f46e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801f470:	9006      	str	r0, [sp, #24]
 801f472:	9213      	str	r2, [sp, #76]	@ 0x4c
 801f474:	001a      	movs	r2, r3
 801f476:	1c41      	adds	r1, r0, #1
 801f478:	3a30      	subs	r2, #48	@ 0x30
 801f47a:	2b30      	cmp	r3, #48	@ 0x30
 801f47c:	d016      	beq.n	801f4ac <_strtod_l+0x244>
 801f47e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f480:	185b      	adds	r3, r3, r1
 801f482:	930e      	str	r3, [sp, #56]	@ 0x38
 801f484:	9b06      	ldr	r3, [sp, #24]
 801f486:	210a      	movs	r1, #10
 801f488:	469c      	mov	ip, r3
 801f48a:	4484      	add	ip, r0
 801f48c:	459c      	cmp	ip, r3
 801f48e:	d115      	bne.n	801f4bc <_strtod_l+0x254>
 801f490:	9906      	ldr	r1, [sp, #24]
 801f492:	9b06      	ldr	r3, [sp, #24]
 801f494:	3101      	adds	r1, #1
 801f496:	1809      	adds	r1, r1, r0
 801f498:	181b      	adds	r3, r3, r0
 801f49a:	9106      	str	r1, [sp, #24]
 801f49c:	2b08      	cmp	r3, #8
 801f49e:	dc19      	bgt.n	801f4d4 <_strtod_l+0x26c>
 801f4a0:	230a      	movs	r3, #10
 801f4a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f4a4:	434b      	muls	r3, r1
 801f4a6:	2100      	movs	r1, #0
 801f4a8:	18d3      	adds	r3, r2, r3
 801f4aa:	930d      	str	r3, [sp, #52]	@ 0x34
 801f4ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f4ae:	0008      	movs	r0, r1
 801f4b0:	1c5a      	adds	r2, r3, #1
 801f4b2:	921d      	str	r2, [sp, #116]	@ 0x74
 801f4b4:	785b      	ldrb	r3, [r3, #1]
 801f4b6:	e7c6      	b.n	801f446 <_strtod_l+0x1de>
 801f4b8:	9808      	ldr	r0, [sp, #32]
 801f4ba:	e7d0      	b.n	801f45e <_strtod_l+0x1f6>
 801f4bc:	1c5c      	adds	r4, r3, #1
 801f4be:	2b08      	cmp	r3, #8
 801f4c0:	dc04      	bgt.n	801f4cc <_strtod_l+0x264>
 801f4c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f4c4:	434b      	muls	r3, r1
 801f4c6:	930d      	str	r3, [sp, #52]	@ 0x34
 801f4c8:	0023      	movs	r3, r4
 801f4ca:	e7df      	b.n	801f48c <_strtod_l+0x224>
 801f4cc:	2c10      	cmp	r4, #16
 801f4ce:	dcfb      	bgt.n	801f4c8 <_strtod_l+0x260>
 801f4d0:	434d      	muls	r5, r1
 801f4d2:	e7f9      	b.n	801f4c8 <_strtod_l+0x260>
 801f4d4:	2100      	movs	r1, #0
 801f4d6:	2b0f      	cmp	r3, #15
 801f4d8:	dce8      	bgt.n	801f4ac <_strtod_l+0x244>
 801f4da:	230a      	movs	r3, #10
 801f4dc:	435d      	muls	r5, r3
 801f4de:	1955      	adds	r5, r2, r5
 801f4e0:	e7e4      	b.n	801f4ac <_strtod_l+0x244>
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	920e      	str	r2, [sp, #56]	@ 0x38
 801f4e6:	9206      	str	r2, [sp, #24]
 801f4e8:	3201      	adds	r2, #1
 801f4ea:	e7b1      	b.n	801f450 <_strtod_l+0x1e8>
 801f4ec:	2400      	movs	r4, #0
 801f4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4f0:	3302      	adds	r3, #2
 801f4f2:	931d      	str	r3, [sp, #116]	@ 0x74
 801f4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4f6:	789b      	ldrb	r3, [r3, #2]
 801f4f8:	001a      	movs	r2, r3
 801f4fa:	3a30      	subs	r2, #48	@ 0x30
 801f4fc:	2a09      	cmp	r2, #9
 801f4fe:	d913      	bls.n	801f528 <_strtod_l+0x2c0>
 801f500:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f502:	921d      	str	r2, [sp, #116]	@ 0x74
 801f504:	2200      	movs	r2, #0
 801f506:	e032      	b.n	801f56e <_strtod_l+0x306>
 801f508:	08026d38 	.word	0x08026d38
 801f50c:	7ff00000 	.word	0x7ff00000
 801f510:	ffefffff 	.word	0xffefffff
 801f514:	00000433 	.word	0x00000433
 801f518:	7fffffff 	.word	0x7fffffff
 801f51c:	08026d20 	.word	0x08026d20
 801f520:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f522:	1c5a      	adds	r2, r3, #1
 801f524:	921d      	str	r2, [sp, #116]	@ 0x74
 801f526:	785b      	ldrb	r3, [r3, #1]
 801f528:	2b30      	cmp	r3, #48	@ 0x30
 801f52a:	d0f9      	beq.n	801f520 <_strtod_l+0x2b8>
 801f52c:	2200      	movs	r2, #0
 801f52e:	9207      	str	r2, [sp, #28]
 801f530:	001a      	movs	r2, r3
 801f532:	3a31      	subs	r2, #49	@ 0x31
 801f534:	2a08      	cmp	r2, #8
 801f536:	d81b      	bhi.n	801f570 <_strtod_l+0x308>
 801f538:	3b30      	subs	r3, #48	@ 0x30
 801f53a:	9310      	str	r3, [sp, #64]	@ 0x40
 801f53c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f53e:	9307      	str	r3, [sp, #28]
 801f540:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f542:	1c59      	adds	r1, r3, #1
 801f544:	911d      	str	r1, [sp, #116]	@ 0x74
 801f546:	785b      	ldrb	r3, [r3, #1]
 801f548:	001a      	movs	r2, r3
 801f54a:	3a30      	subs	r2, #48	@ 0x30
 801f54c:	2a09      	cmp	r2, #9
 801f54e:	d93a      	bls.n	801f5c6 <_strtod_l+0x35e>
 801f550:	9a07      	ldr	r2, [sp, #28]
 801f552:	1a8a      	subs	r2, r1, r2
 801f554:	49b4      	ldr	r1, [pc, #720]	@ (801f828 <_strtod_l+0x5c0>)
 801f556:	9107      	str	r1, [sp, #28]
 801f558:	2a08      	cmp	r2, #8
 801f55a:	dc04      	bgt.n	801f566 <_strtod_l+0x2fe>
 801f55c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f55e:	9207      	str	r2, [sp, #28]
 801f560:	428a      	cmp	r2, r1
 801f562:	dd00      	ble.n	801f566 <_strtod_l+0x2fe>
 801f564:	9107      	str	r1, [sp, #28]
 801f566:	2c00      	cmp	r4, #0
 801f568:	d002      	beq.n	801f570 <_strtod_l+0x308>
 801f56a:	9a07      	ldr	r2, [sp, #28]
 801f56c:	4252      	negs	r2, r2
 801f56e:	9207      	str	r2, [sp, #28]
 801f570:	9a06      	ldr	r2, [sp, #24]
 801f572:	2a00      	cmp	r2, #0
 801f574:	d14d      	bne.n	801f612 <_strtod_l+0x3aa>
 801f576:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f578:	4310      	orrs	r0, r2
 801f57a:	d000      	beq.n	801f57e <_strtod_l+0x316>
 801f57c:	e6af      	b.n	801f2de <_strtod_l+0x76>
 801f57e:	4662      	mov	r2, ip
 801f580:	2a00      	cmp	r2, #0
 801f582:	d000      	beq.n	801f586 <_strtod_l+0x31e>
 801f584:	e6c7      	b.n	801f316 <_strtod_l+0xae>
 801f586:	2b69      	cmp	r3, #105	@ 0x69
 801f588:	d027      	beq.n	801f5da <_strtod_l+0x372>
 801f58a:	dc23      	bgt.n	801f5d4 <_strtod_l+0x36c>
 801f58c:	2b49      	cmp	r3, #73	@ 0x49
 801f58e:	d024      	beq.n	801f5da <_strtod_l+0x372>
 801f590:	2b4e      	cmp	r3, #78	@ 0x4e
 801f592:	d000      	beq.n	801f596 <_strtod_l+0x32e>
 801f594:	e6bf      	b.n	801f316 <_strtod_l+0xae>
 801f596:	49a5      	ldr	r1, [pc, #660]	@ (801f82c <_strtod_l+0x5c4>)
 801f598:	a81d      	add	r0, sp, #116	@ 0x74
 801f59a:	f002 fe4d 	bl	8022238 <__match>
 801f59e:	2800      	cmp	r0, #0
 801f5a0:	d100      	bne.n	801f5a4 <_strtod_l+0x33c>
 801f5a2:	e6b8      	b.n	801f316 <_strtod_l+0xae>
 801f5a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f5a6:	781b      	ldrb	r3, [r3, #0]
 801f5a8:	2b28      	cmp	r3, #40	@ 0x28
 801f5aa:	d12c      	bne.n	801f606 <_strtod_l+0x39e>
 801f5ac:	49a0      	ldr	r1, [pc, #640]	@ (801f830 <_strtod_l+0x5c8>)
 801f5ae:	aa20      	add	r2, sp, #128	@ 0x80
 801f5b0:	a81d      	add	r0, sp, #116	@ 0x74
 801f5b2:	f002 fe55 	bl	8022260 <__hexnan>
 801f5b6:	2805      	cmp	r0, #5
 801f5b8:	d125      	bne.n	801f606 <_strtod_l+0x39e>
 801f5ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f5bc:	4a9d      	ldr	r2, [pc, #628]	@ (801f834 <_strtod_l+0x5cc>)
 801f5be:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f5c0:	431a      	orrs	r2, r3
 801f5c2:	0017      	movs	r7, r2
 801f5c4:	e68b      	b.n	801f2de <_strtod_l+0x76>
 801f5c6:	220a      	movs	r2, #10
 801f5c8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f5ca:	434a      	muls	r2, r1
 801f5cc:	18d2      	adds	r2, r2, r3
 801f5ce:	3a30      	subs	r2, #48	@ 0x30
 801f5d0:	9210      	str	r2, [sp, #64]	@ 0x40
 801f5d2:	e7b5      	b.n	801f540 <_strtod_l+0x2d8>
 801f5d4:	2b6e      	cmp	r3, #110	@ 0x6e
 801f5d6:	d0de      	beq.n	801f596 <_strtod_l+0x32e>
 801f5d8:	e69d      	b.n	801f316 <_strtod_l+0xae>
 801f5da:	4997      	ldr	r1, [pc, #604]	@ (801f838 <_strtod_l+0x5d0>)
 801f5dc:	a81d      	add	r0, sp, #116	@ 0x74
 801f5de:	f002 fe2b 	bl	8022238 <__match>
 801f5e2:	2800      	cmp	r0, #0
 801f5e4:	d100      	bne.n	801f5e8 <_strtod_l+0x380>
 801f5e6:	e696      	b.n	801f316 <_strtod_l+0xae>
 801f5e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f5ea:	4994      	ldr	r1, [pc, #592]	@ (801f83c <_strtod_l+0x5d4>)
 801f5ec:	3b01      	subs	r3, #1
 801f5ee:	a81d      	add	r0, sp, #116	@ 0x74
 801f5f0:	931d      	str	r3, [sp, #116]	@ 0x74
 801f5f2:	f002 fe21 	bl	8022238 <__match>
 801f5f6:	2800      	cmp	r0, #0
 801f5f8:	d102      	bne.n	801f600 <_strtod_l+0x398>
 801f5fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f5fc:	3301      	adds	r3, #1
 801f5fe:	931d      	str	r3, [sp, #116]	@ 0x74
 801f600:	2600      	movs	r6, #0
 801f602:	4f8c      	ldr	r7, [pc, #560]	@ (801f834 <_strtod_l+0x5cc>)
 801f604:	e66b      	b.n	801f2de <_strtod_l+0x76>
 801f606:	488e      	ldr	r0, [pc, #568]	@ (801f840 <_strtod_l+0x5d8>)
 801f608:	f001 fca6 	bl	8020f58 <nan>
 801f60c:	0006      	movs	r6, r0
 801f60e:	000f      	movs	r7, r1
 801f610:	e665      	b.n	801f2de <_strtod_l+0x76>
 801f612:	9b07      	ldr	r3, [sp, #28]
 801f614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f616:	1a9b      	subs	r3, r3, r2
 801f618:	930c      	str	r3, [sp, #48]	@ 0x30
 801f61a:	9b08      	ldr	r3, [sp, #32]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d101      	bne.n	801f624 <_strtod_l+0x3bc>
 801f620:	9b06      	ldr	r3, [sp, #24]
 801f622:	9308      	str	r3, [sp, #32]
 801f624:	9c06      	ldr	r4, [sp, #24]
 801f626:	2c10      	cmp	r4, #16
 801f628:	dd00      	ble.n	801f62c <_strtod_l+0x3c4>
 801f62a:	2410      	movs	r4, #16
 801f62c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801f62e:	f7e3 fef5 	bl	800341c <__aeabi_ui2d>
 801f632:	9b06      	ldr	r3, [sp, #24]
 801f634:	0006      	movs	r6, r0
 801f636:	000f      	movs	r7, r1
 801f638:	2b09      	cmp	r3, #9
 801f63a:	dc13      	bgt.n	801f664 <_strtod_l+0x3fc>
 801f63c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d100      	bne.n	801f644 <_strtod_l+0x3dc>
 801f642:	e64c      	b.n	801f2de <_strtod_l+0x76>
 801f644:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f646:	2b00      	cmp	r3, #0
 801f648:	dc00      	bgt.n	801f64c <_strtod_l+0x3e4>
 801f64a:	e07e      	b.n	801f74a <_strtod_l+0x4e2>
 801f64c:	2b16      	cmp	r3, #22
 801f64e:	dc63      	bgt.n	801f718 <_strtod_l+0x4b0>
 801f650:	497c      	ldr	r1, [pc, #496]	@ (801f844 <_strtod_l+0x5dc>)
 801f652:	00db      	lsls	r3, r3, #3
 801f654:	18c9      	adds	r1, r1, r3
 801f656:	0032      	movs	r2, r6
 801f658:	6808      	ldr	r0, [r1, #0]
 801f65a:	6849      	ldr	r1, [r1, #4]
 801f65c:	003b      	movs	r3, r7
 801f65e:	f7e2 ffed 	bl	800263c <__aeabi_dmul>
 801f662:	e7d3      	b.n	801f60c <_strtod_l+0x3a4>
 801f664:	0022      	movs	r2, r4
 801f666:	4b77      	ldr	r3, [pc, #476]	@ (801f844 <_strtod_l+0x5dc>)
 801f668:	3a09      	subs	r2, #9
 801f66a:	00d2      	lsls	r2, r2, #3
 801f66c:	189b      	adds	r3, r3, r2
 801f66e:	681a      	ldr	r2, [r3, #0]
 801f670:	685b      	ldr	r3, [r3, #4]
 801f672:	f7e2 ffe3 	bl	800263c <__aeabi_dmul>
 801f676:	0006      	movs	r6, r0
 801f678:	0028      	movs	r0, r5
 801f67a:	000f      	movs	r7, r1
 801f67c:	f7e3 fece 	bl	800341c <__aeabi_ui2d>
 801f680:	000b      	movs	r3, r1
 801f682:	0002      	movs	r2, r0
 801f684:	0039      	movs	r1, r7
 801f686:	0030      	movs	r0, r6
 801f688:	f7e2 f830 	bl	80016ec <__aeabi_dadd>
 801f68c:	9b06      	ldr	r3, [sp, #24]
 801f68e:	0006      	movs	r6, r0
 801f690:	000f      	movs	r7, r1
 801f692:	2b0f      	cmp	r3, #15
 801f694:	ddd2      	ble.n	801f63c <_strtod_l+0x3d4>
 801f696:	9b06      	ldr	r3, [sp, #24]
 801f698:	1b1c      	subs	r4, r3, r4
 801f69a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f69c:	18e4      	adds	r4, r4, r3
 801f69e:	2c00      	cmp	r4, #0
 801f6a0:	dc00      	bgt.n	801f6a4 <_strtod_l+0x43c>
 801f6a2:	e09b      	b.n	801f7dc <_strtod_l+0x574>
 801f6a4:	220f      	movs	r2, #15
 801f6a6:	0023      	movs	r3, r4
 801f6a8:	4013      	ands	r3, r2
 801f6aa:	4214      	tst	r4, r2
 801f6ac:	d00a      	beq.n	801f6c4 <_strtod_l+0x45c>
 801f6ae:	4965      	ldr	r1, [pc, #404]	@ (801f844 <_strtod_l+0x5dc>)
 801f6b0:	00db      	lsls	r3, r3, #3
 801f6b2:	18c9      	adds	r1, r1, r3
 801f6b4:	0032      	movs	r2, r6
 801f6b6:	6808      	ldr	r0, [r1, #0]
 801f6b8:	6849      	ldr	r1, [r1, #4]
 801f6ba:	003b      	movs	r3, r7
 801f6bc:	f7e2 ffbe 	bl	800263c <__aeabi_dmul>
 801f6c0:	0006      	movs	r6, r0
 801f6c2:	000f      	movs	r7, r1
 801f6c4:	230f      	movs	r3, #15
 801f6c6:	439c      	bics	r4, r3
 801f6c8:	d073      	beq.n	801f7b2 <_strtod_l+0x54a>
 801f6ca:	3326      	adds	r3, #38	@ 0x26
 801f6cc:	33ff      	adds	r3, #255	@ 0xff
 801f6ce:	429c      	cmp	r4, r3
 801f6d0:	dd4b      	ble.n	801f76a <_strtod_l+0x502>
 801f6d2:	2300      	movs	r3, #0
 801f6d4:	9306      	str	r3, [sp, #24]
 801f6d6:	9307      	str	r3, [sp, #28]
 801f6d8:	930d      	str	r3, [sp, #52]	@ 0x34
 801f6da:	9308      	str	r3, [sp, #32]
 801f6dc:	2322      	movs	r3, #34	@ 0x22
 801f6de:	2600      	movs	r6, #0
 801f6e0:	9a05      	ldr	r2, [sp, #20]
 801f6e2:	4f54      	ldr	r7, [pc, #336]	@ (801f834 <_strtod_l+0x5cc>)
 801f6e4:	6013      	str	r3, [r2, #0]
 801f6e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f6e8:	42b3      	cmp	r3, r6
 801f6ea:	d100      	bne.n	801f6ee <_strtod_l+0x486>
 801f6ec:	e5f7      	b.n	801f2de <_strtod_l+0x76>
 801f6ee:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f6f0:	9805      	ldr	r0, [sp, #20]
 801f6f2:	f002 ff6f 	bl	80225d4 <_Bfree>
 801f6f6:	9908      	ldr	r1, [sp, #32]
 801f6f8:	9805      	ldr	r0, [sp, #20]
 801f6fa:	f002 ff6b 	bl	80225d4 <_Bfree>
 801f6fe:	9907      	ldr	r1, [sp, #28]
 801f700:	9805      	ldr	r0, [sp, #20]
 801f702:	f002 ff67 	bl	80225d4 <_Bfree>
 801f706:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f708:	9805      	ldr	r0, [sp, #20]
 801f70a:	f002 ff63 	bl	80225d4 <_Bfree>
 801f70e:	9906      	ldr	r1, [sp, #24]
 801f710:	9805      	ldr	r0, [sp, #20]
 801f712:	f002 ff5f 	bl	80225d4 <_Bfree>
 801f716:	e5e2      	b.n	801f2de <_strtod_l+0x76>
 801f718:	2325      	movs	r3, #37	@ 0x25
 801f71a:	9a06      	ldr	r2, [sp, #24]
 801f71c:	1a9b      	subs	r3, r3, r2
 801f71e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f720:	4293      	cmp	r3, r2
 801f722:	dbb8      	blt.n	801f696 <_strtod_l+0x42e>
 801f724:	240f      	movs	r4, #15
 801f726:	9b06      	ldr	r3, [sp, #24]
 801f728:	4d46      	ldr	r5, [pc, #280]	@ (801f844 <_strtod_l+0x5dc>)
 801f72a:	1ae4      	subs	r4, r4, r3
 801f72c:	00e1      	lsls	r1, r4, #3
 801f72e:	1869      	adds	r1, r5, r1
 801f730:	0032      	movs	r2, r6
 801f732:	6808      	ldr	r0, [r1, #0]
 801f734:	6849      	ldr	r1, [r1, #4]
 801f736:	003b      	movs	r3, r7
 801f738:	f7e2 ff80 	bl	800263c <__aeabi_dmul>
 801f73c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f73e:	1b1c      	subs	r4, r3, r4
 801f740:	00e4      	lsls	r4, r4, #3
 801f742:	192d      	adds	r5, r5, r4
 801f744:	682a      	ldr	r2, [r5, #0]
 801f746:	686b      	ldr	r3, [r5, #4]
 801f748:	e789      	b.n	801f65e <_strtod_l+0x3f6>
 801f74a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f74c:	3316      	adds	r3, #22
 801f74e:	dba2      	blt.n	801f696 <_strtod_l+0x42e>
 801f750:	9907      	ldr	r1, [sp, #28]
 801f752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f754:	4b3b      	ldr	r3, [pc, #236]	@ (801f844 <_strtod_l+0x5dc>)
 801f756:	1a52      	subs	r2, r2, r1
 801f758:	00d2      	lsls	r2, r2, #3
 801f75a:	189b      	adds	r3, r3, r2
 801f75c:	0030      	movs	r0, r6
 801f75e:	681a      	ldr	r2, [r3, #0]
 801f760:	685b      	ldr	r3, [r3, #4]
 801f762:	0039      	movs	r1, r7
 801f764:	f7e2 fb26 	bl	8001db4 <__aeabi_ddiv>
 801f768:	e750      	b.n	801f60c <_strtod_l+0x3a4>
 801f76a:	2300      	movs	r3, #0
 801f76c:	0030      	movs	r0, r6
 801f76e:	0039      	movs	r1, r7
 801f770:	4d35      	ldr	r5, [pc, #212]	@ (801f848 <_strtod_l+0x5e0>)
 801f772:	1124      	asrs	r4, r4, #4
 801f774:	9309      	str	r3, [sp, #36]	@ 0x24
 801f776:	2c01      	cmp	r4, #1
 801f778:	dc1e      	bgt.n	801f7b8 <_strtod_l+0x550>
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	d001      	beq.n	801f782 <_strtod_l+0x51a>
 801f77e:	0006      	movs	r6, r0
 801f780:	000f      	movs	r7, r1
 801f782:	4b32      	ldr	r3, [pc, #200]	@ (801f84c <_strtod_l+0x5e4>)
 801f784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f786:	18ff      	adds	r7, r7, r3
 801f788:	4b2f      	ldr	r3, [pc, #188]	@ (801f848 <_strtod_l+0x5e0>)
 801f78a:	00d5      	lsls	r5, r2, #3
 801f78c:	195d      	adds	r5, r3, r5
 801f78e:	0032      	movs	r2, r6
 801f790:	6828      	ldr	r0, [r5, #0]
 801f792:	6869      	ldr	r1, [r5, #4]
 801f794:	003b      	movs	r3, r7
 801f796:	f7e2 ff51 	bl	800263c <__aeabi_dmul>
 801f79a:	4b26      	ldr	r3, [pc, #152]	@ (801f834 <_strtod_l+0x5cc>)
 801f79c:	4a2c      	ldr	r2, [pc, #176]	@ (801f850 <_strtod_l+0x5e8>)
 801f79e:	0006      	movs	r6, r0
 801f7a0:	400b      	ands	r3, r1
 801f7a2:	4293      	cmp	r3, r2
 801f7a4:	d895      	bhi.n	801f6d2 <_strtod_l+0x46a>
 801f7a6:	4a2b      	ldr	r2, [pc, #172]	@ (801f854 <_strtod_l+0x5ec>)
 801f7a8:	4293      	cmp	r3, r2
 801f7aa:	d913      	bls.n	801f7d4 <_strtod_l+0x56c>
 801f7ac:	2601      	movs	r6, #1
 801f7ae:	4f2a      	ldr	r7, [pc, #168]	@ (801f858 <_strtod_l+0x5f0>)
 801f7b0:	4276      	negs	r6, r6
 801f7b2:	2300      	movs	r3, #0
 801f7b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801f7b6:	e086      	b.n	801f8c6 <_strtod_l+0x65e>
 801f7b8:	2201      	movs	r2, #1
 801f7ba:	4214      	tst	r4, r2
 801f7bc:	d004      	beq.n	801f7c8 <_strtod_l+0x560>
 801f7be:	682a      	ldr	r2, [r5, #0]
 801f7c0:	686b      	ldr	r3, [r5, #4]
 801f7c2:	f7e2 ff3b 	bl	800263c <__aeabi_dmul>
 801f7c6:	2301      	movs	r3, #1
 801f7c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f7ca:	1064      	asrs	r4, r4, #1
 801f7cc:	3201      	adds	r2, #1
 801f7ce:	9209      	str	r2, [sp, #36]	@ 0x24
 801f7d0:	3508      	adds	r5, #8
 801f7d2:	e7d0      	b.n	801f776 <_strtod_l+0x50e>
 801f7d4:	23d4      	movs	r3, #212	@ 0xd4
 801f7d6:	049b      	lsls	r3, r3, #18
 801f7d8:	18cf      	adds	r7, r1, r3
 801f7da:	e7ea      	b.n	801f7b2 <_strtod_l+0x54a>
 801f7dc:	2c00      	cmp	r4, #0
 801f7de:	d0e8      	beq.n	801f7b2 <_strtod_l+0x54a>
 801f7e0:	4264      	negs	r4, r4
 801f7e2:	230f      	movs	r3, #15
 801f7e4:	0022      	movs	r2, r4
 801f7e6:	401a      	ands	r2, r3
 801f7e8:	421c      	tst	r4, r3
 801f7ea:	d00a      	beq.n	801f802 <_strtod_l+0x59a>
 801f7ec:	4b15      	ldr	r3, [pc, #84]	@ (801f844 <_strtod_l+0x5dc>)
 801f7ee:	00d2      	lsls	r2, r2, #3
 801f7f0:	189b      	adds	r3, r3, r2
 801f7f2:	0030      	movs	r0, r6
 801f7f4:	681a      	ldr	r2, [r3, #0]
 801f7f6:	685b      	ldr	r3, [r3, #4]
 801f7f8:	0039      	movs	r1, r7
 801f7fa:	f7e2 fadb 	bl	8001db4 <__aeabi_ddiv>
 801f7fe:	0006      	movs	r6, r0
 801f800:	000f      	movs	r7, r1
 801f802:	1124      	asrs	r4, r4, #4
 801f804:	d0d5      	beq.n	801f7b2 <_strtod_l+0x54a>
 801f806:	2c1f      	cmp	r4, #31
 801f808:	dd28      	ble.n	801f85c <_strtod_l+0x5f4>
 801f80a:	2300      	movs	r3, #0
 801f80c:	9306      	str	r3, [sp, #24]
 801f80e:	9307      	str	r3, [sp, #28]
 801f810:	930d      	str	r3, [sp, #52]	@ 0x34
 801f812:	9308      	str	r3, [sp, #32]
 801f814:	2322      	movs	r3, #34	@ 0x22
 801f816:	9a05      	ldr	r2, [sp, #20]
 801f818:	2600      	movs	r6, #0
 801f81a:	6013      	str	r3, [r2, #0]
 801f81c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f81e:	2700      	movs	r7, #0
 801f820:	2b00      	cmp	r3, #0
 801f822:	d000      	beq.n	801f826 <_strtod_l+0x5be>
 801f824:	e763      	b.n	801f6ee <_strtod_l+0x486>
 801f826:	e55a      	b.n	801f2de <_strtod_l+0x76>
 801f828:	00004e1f 	.word	0x00004e1f
 801f82c:	08026e86 	.word	0x08026e86
 801f830:	08026d24 	.word	0x08026d24
 801f834:	7ff00000 	.word	0x7ff00000
 801f838:	08026e7e 	.word	0x08026e7e
 801f83c:	08026eb8 	.word	0x08026eb8
 801f840:	08027144 	.word	0x08027144
 801f844:	08027030 	.word	0x08027030
 801f848:	08027008 	.word	0x08027008
 801f84c:	fcb00000 	.word	0xfcb00000
 801f850:	7ca00000 	.word	0x7ca00000
 801f854:	7c900000 	.word	0x7c900000
 801f858:	7fefffff 	.word	0x7fefffff
 801f85c:	2310      	movs	r3, #16
 801f85e:	0022      	movs	r2, r4
 801f860:	401a      	ands	r2, r3
 801f862:	9209      	str	r2, [sp, #36]	@ 0x24
 801f864:	421c      	tst	r4, r3
 801f866:	d001      	beq.n	801f86c <_strtod_l+0x604>
 801f868:	335a      	adds	r3, #90	@ 0x5a
 801f86a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f86c:	0030      	movs	r0, r6
 801f86e:	0039      	movs	r1, r7
 801f870:	2300      	movs	r3, #0
 801f872:	4dbf      	ldr	r5, [pc, #764]	@ (801fb70 <_strtod_l+0x908>)
 801f874:	2201      	movs	r2, #1
 801f876:	4214      	tst	r4, r2
 801f878:	d004      	beq.n	801f884 <_strtod_l+0x61c>
 801f87a:	682a      	ldr	r2, [r5, #0]
 801f87c:	686b      	ldr	r3, [r5, #4]
 801f87e:	f7e2 fedd 	bl	800263c <__aeabi_dmul>
 801f882:	2301      	movs	r3, #1
 801f884:	1064      	asrs	r4, r4, #1
 801f886:	3508      	adds	r5, #8
 801f888:	2c00      	cmp	r4, #0
 801f88a:	d1f3      	bne.n	801f874 <_strtod_l+0x60c>
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d001      	beq.n	801f894 <_strtod_l+0x62c>
 801f890:	0006      	movs	r6, r0
 801f892:	000f      	movs	r7, r1
 801f894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f896:	2b00      	cmp	r3, #0
 801f898:	d00d      	beq.n	801f8b6 <_strtod_l+0x64e>
 801f89a:	236b      	movs	r3, #107	@ 0x6b
 801f89c:	007a      	lsls	r2, r7, #1
 801f89e:	0d52      	lsrs	r2, r2, #21
 801f8a0:	0039      	movs	r1, r7
 801f8a2:	1a9b      	subs	r3, r3, r2
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	dd06      	ble.n	801f8b6 <_strtod_l+0x64e>
 801f8a8:	2b1f      	cmp	r3, #31
 801f8aa:	dd5a      	ble.n	801f962 <_strtod_l+0x6fa>
 801f8ac:	2600      	movs	r6, #0
 801f8ae:	2b34      	cmp	r3, #52	@ 0x34
 801f8b0:	dd50      	ble.n	801f954 <_strtod_l+0x6ec>
 801f8b2:	27dc      	movs	r7, #220	@ 0xdc
 801f8b4:	04bf      	lsls	r7, r7, #18
 801f8b6:	2200      	movs	r2, #0
 801f8b8:	2300      	movs	r3, #0
 801f8ba:	0030      	movs	r0, r6
 801f8bc:	0039      	movs	r1, r7
 801f8be:	f7e0 fdf7 	bl	80004b0 <__aeabi_dcmpeq>
 801f8c2:	2800      	cmp	r0, #0
 801f8c4:	d1a1      	bne.n	801f80a <_strtod_l+0x5a2>
 801f8c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f8c8:	9a08      	ldr	r2, [sp, #32]
 801f8ca:	9300      	str	r3, [sp, #0]
 801f8cc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f8ce:	9b06      	ldr	r3, [sp, #24]
 801f8d0:	9805      	ldr	r0, [sp, #20]
 801f8d2:	f002 fee7 	bl	80226a4 <__s2b>
 801f8d6:	900d      	str	r0, [sp, #52]	@ 0x34
 801f8d8:	2800      	cmp	r0, #0
 801f8da:	d100      	bne.n	801f8de <_strtod_l+0x676>
 801f8dc:	e6f9      	b.n	801f6d2 <_strtod_l+0x46a>
 801f8de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8e0:	9907      	ldr	r1, [sp, #28]
 801f8e2:	17da      	asrs	r2, r3, #31
 801f8e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f8e6:	1a5b      	subs	r3, r3, r1
 801f8e8:	401a      	ands	r2, r3
 801f8ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8ec:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f8ee:	43db      	mvns	r3, r3
 801f8f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f8f2:	17db      	asrs	r3, r3, #31
 801f8f4:	401a      	ands	r2, r3
 801f8f6:	2300      	movs	r3, #0
 801f8f8:	921a      	str	r2, [sp, #104]	@ 0x68
 801f8fa:	9306      	str	r3, [sp, #24]
 801f8fc:	9307      	str	r3, [sp, #28]
 801f8fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f900:	9805      	ldr	r0, [sp, #20]
 801f902:	6859      	ldr	r1, [r3, #4]
 801f904:	f002 fe22 	bl	802254c <_Balloc>
 801f908:	9008      	str	r0, [sp, #32]
 801f90a:	2800      	cmp	r0, #0
 801f90c:	d100      	bne.n	801f910 <_strtod_l+0x6a8>
 801f90e:	e6e5      	b.n	801f6dc <_strtod_l+0x474>
 801f910:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f912:	300c      	adds	r0, #12
 801f914:	0019      	movs	r1, r3
 801f916:	691a      	ldr	r2, [r3, #16]
 801f918:	310c      	adds	r1, #12
 801f91a:	3202      	adds	r2, #2
 801f91c:	0092      	lsls	r2, r2, #2
 801f91e:	f001 fb11 	bl	8020f44 <memcpy>
 801f922:	ab20      	add	r3, sp, #128	@ 0x80
 801f924:	9301      	str	r3, [sp, #4]
 801f926:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f928:	9300      	str	r3, [sp, #0]
 801f92a:	0032      	movs	r2, r6
 801f92c:	003b      	movs	r3, r7
 801f92e:	9805      	ldr	r0, [sp, #20]
 801f930:	9610      	str	r6, [sp, #64]	@ 0x40
 801f932:	9711      	str	r7, [sp, #68]	@ 0x44
 801f934:	f003 fa06 	bl	8022d44 <__d2b>
 801f938:	901e      	str	r0, [sp, #120]	@ 0x78
 801f93a:	2800      	cmp	r0, #0
 801f93c:	d100      	bne.n	801f940 <_strtod_l+0x6d8>
 801f93e:	e6cd      	b.n	801f6dc <_strtod_l+0x474>
 801f940:	2101      	movs	r1, #1
 801f942:	9805      	ldr	r0, [sp, #20]
 801f944:	f002 ff4a 	bl	80227dc <__i2b>
 801f948:	9007      	str	r0, [sp, #28]
 801f94a:	2800      	cmp	r0, #0
 801f94c:	d10e      	bne.n	801f96c <_strtod_l+0x704>
 801f94e:	2300      	movs	r3, #0
 801f950:	9307      	str	r3, [sp, #28]
 801f952:	e6c3      	b.n	801f6dc <_strtod_l+0x474>
 801f954:	234b      	movs	r3, #75	@ 0x4b
 801f956:	1a9a      	subs	r2, r3, r2
 801f958:	3b4c      	subs	r3, #76	@ 0x4c
 801f95a:	4093      	lsls	r3, r2
 801f95c:	4019      	ands	r1, r3
 801f95e:	000f      	movs	r7, r1
 801f960:	e7a9      	b.n	801f8b6 <_strtod_l+0x64e>
 801f962:	2201      	movs	r2, #1
 801f964:	4252      	negs	r2, r2
 801f966:	409a      	lsls	r2, r3
 801f968:	4016      	ands	r6, r2
 801f96a:	e7a4      	b.n	801f8b6 <_strtod_l+0x64e>
 801f96c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f96e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f970:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801f972:	1ad4      	subs	r4, r2, r3
 801f974:	2b00      	cmp	r3, #0
 801f976:	db01      	blt.n	801f97c <_strtod_l+0x714>
 801f978:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801f97a:	195d      	adds	r5, r3, r5
 801f97c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f97e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f980:	1a5b      	subs	r3, r3, r1
 801f982:	2136      	movs	r1, #54	@ 0x36
 801f984:	189b      	adds	r3, r3, r2
 801f986:	1a8a      	subs	r2, r1, r2
 801f988:	497a      	ldr	r1, [pc, #488]	@ (801fb74 <_strtod_l+0x90c>)
 801f98a:	2001      	movs	r0, #1
 801f98c:	468c      	mov	ip, r1
 801f98e:	2100      	movs	r1, #0
 801f990:	3b01      	subs	r3, #1
 801f992:	9116      	str	r1, [sp, #88]	@ 0x58
 801f994:	9014      	str	r0, [sp, #80]	@ 0x50
 801f996:	4563      	cmp	r3, ip
 801f998:	da06      	bge.n	801f9a8 <_strtod_l+0x740>
 801f99a:	4661      	mov	r1, ip
 801f99c:	1ac9      	subs	r1, r1, r3
 801f99e:	1a52      	subs	r2, r2, r1
 801f9a0:	291f      	cmp	r1, #31
 801f9a2:	dc3f      	bgt.n	801fa24 <_strtod_l+0x7bc>
 801f9a4:	4088      	lsls	r0, r1
 801f9a6:	9014      	str	r0, [sp, #80]	@ 0x50
 801f9a8:	18ab      	adds	r3, r5, r2
 801f9aa:	930e      	str	r3, [sp, #56]	@ 0x38
 801f9ac:	18a4      	adds	r4, r4, r2
 801f9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f9b2:	191c      	adds	r4, r3, r4
 801f9b4:	002b      	movs	r3, r5
 801f9b6:	4295      	cmp	r5, r2
 801f9b8:	dd00      	ble.n	801f9bc <_strtod_l+0x754>
 801f9ba:	0013      	movs	r3, r2
 801f9bc:	42a3      	cmp	r3, r4
 801f9be:	dd00      	ble.n	801f9c2 <_strtod_l+0x75a>
 801f9c0:	0023      	movs	r3, r4
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	dd04      	ble.n	801f9d0 <_strtod_l+0x768>
 801f9c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f9c8:	1ae4      	subs	r4, r4, r3
 801f9ca:	1ad2      	subs	r2, r2, r3
 801f9cc:	920e      	str	r2, [sp, #56]	@ 0x38
 801f9ce:	1aed      	subs	r5, r5, r3
 801f9d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	dd16      	ble.n	801fa04 <_strtod_l+0x79c>
 801f9d6:	001a      	movs	r2, r3
 801f9d8:	9907      	ldr	r1, [sp, #28]
 801f9da:	9805      	ldr	r0, [sp, #20]
 801f9dc:	f002 ffc8 	bl	8022970 <__pow5mult>
 801f9e0:	9007      	str	r0, [sp, #28]
 801f9e2:	2800      	cmp	r0, #0
 801f9e4:	d0b3      	beq.n	801f94e <_strtod_l+0x6e6>
 801f9e6:	0001      	movs	r1, r0
 801f9e8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f9ea:	9805      	ldr	r0, [sp, #20]
 801f9ec:	f002 ff0e 	bl	802280c <__multiply>
 801f9f0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f9f2:	2800      	cmp	r0, #0
 801f9f4:	d100      	bne.n	801f9f8 <_strtod_l+0x790>
 801f9f6:	e671      	b.n	801f6dc <_strtod_l+0x474>
 801f9f8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f9fa:	9805      	ldr	r0, [sp, #20]
 801f9fc:	f002 fdea 	bl	80225d4 <_Bfree>
 801fa00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa02:	931e      	str	r3, [sp, #120]	@ 0x78
 801fa04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa06:	2b00      	cmp	r3, #0
 801fa08:	dc12      	bgt.n	801fa30 <_strtod_l+0x7c8>
 801fa0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	dd18      	ble.n	801fa42 <_strtod_l+0x7da>
 801fa10:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fa12:	9908      	ldr	r1, [sp, #32]
 801fa14:	9805      	ldr	r0, [sp, #20]
 801fa16:	f002 ffab 	bl	8022970 <__pow5mult>
 801fa1a:	9008      	str	r0, [sp, #32]
 801fa1c:	2800      	cmp	r0, #0
 801fa1e:	d110      	bne.n	801fa42 <_strtod_l+0x7da>
 801fa20:	2300      	movs	r3, #0
 801fa22:	e65a      	b.n	801f6da <_strtod_l+0x472>
 801fa24:	4954      	ldr	r1, [pc, #336]	@ (801fb78 <_strtod_l+0x910>)
 801fa26:	1acb      	subs	r3, r1, r3
 801fa28:	0001      	movs	r1, r0
 801fa2a:	4099      	lsls	r1, r3
 801fa2c:	9116      	str	r1, [sp, #88]	@ 0x58
 801fa2e:	e7ba      	b.n	801f9a6 <_strtod_l+0x73e>
 801fa30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fa32:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801fa34:	9805      	ldr	r0, [sp, #20]
 801fa36:	f002 fff7 	bl	8022a28 <__lshift>
 801fa3a:	901e      	str	r0, [sp, #120]	@ 0x78
 801fa3c:	2800      	cmp	r0, #0
 801fa3e:	d1e4      	bne.n	801fa0a <_strtod_l+0x7a2>
 801fa40:	e64c      	b.n	801f6dc <_strtod_l+0x474>
 801fa42:	2c00      	cmp	r4, #0
 801fa44:	dd07      	ble.n	801fa56 <_strtod_l+0x7ee>
 801fa46:	0022      	movs	r2, r4
 801fa48:	9908      	ldr	r1, [sp, #32]
 801fa4a:	9805      	ldr	r0, [sp, #20]
 801fa4c:	f002 ffec 	bl	8022a28 <__lshift>
 801fa50:	9008      	str	r0, [sp, #32]
 801fa52:	2800      	cmp	r0, #0
 801fa54:	d0e4      	beq.n	801fa20 <_strtod_l+0x7b8>
 801fa56:	2d00      	cmp	r5, #0
 801fa58:	dd08      	ble.n	801fa6c <_strtod_l+0x804>
 801fa5a:	002a      	movs	r2, r5
 801fa5c:	9907      	ldr	r1, [sp, #28]
 801fa5e:	9805      	ldr	r0, [sp, #20]
 801fa60:	f002 ffe2 	bl	8022a28 <__lshift>
 801fa64:	9007      	str	r0, [sp, #28]
 801fa66:	2800      	cmp	r0, #0
 801fa68:	d100      	bne.n	801fa6c <_strtod_l+0x804>
 801fa6a:	e637      	b.n	801f6dc <_strtod_l+0x474>
 801fa6c:	9a08      	ldr	r2, [sp, #32]
 801fa6e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801fa70:	9805      	ldr	r0, [sp, #20]
 801fa72:	f003 f861 	bl	8022b38 <__mdiff>
 801fa76:	9006      	str	r0, [sp, #24]
 801fa78:	2800      	cmp	r0, #0
 801fa7a:	d100      	bne.n	801fa7e <_strtod_l+0x816>
 801fa7c:	e62e      	b.n	801f6dc <_strtod_l+0x474>
 801fa7e:	68c3      	ldr	r3, [r0, #12]
 801fa80:	9907      	ldr	r1, [sp, #28]
 801fa82:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fa84:	2300      	movs	r3, #0
 801fa86:	60c3      	str	r3, [r0, #12]
 801fa88:	f003 f83a 	bl	8022b00 <__mcmp>
 801fa8c:	2800      	cmp	r0, #0
 801fa8e:	da3b      	bge.n	801fb08 <_strtod_l+0x8a0>
 801fa90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa92:	4333      	orrs	r3, r6
 801fa94:	d167      	bne.n	801fb66 <_strtod_l+0x8fe>
 801fa96:	033b      	lsls	r3, r7, #12
 801fa98:	d165      	bne.n	801fb66 <_strtod_l+0x8fe>
 801fa9a:	22d6      	movs	r2, #214	@ 0xd6
 801fa9c:	4b37      	ldr	r3, [pc, #220]	@ (801fb7c <_strtod_l+0x914>)
 801fa9e:	04d2      	lsls	r2, r2, #19
 801faa0:	403b      	ands	r3, r7
 801faa2:	4293      	cmp	r3, r2
 801faa4:	d95f      	bls.n	801fb66 <_strtod_l+0x8fe>
 801faa6:	9b06      	ldr	r3, [sp, #24]
 801faa8:	695b      	ldr	r3, [r3, #20]
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d103      	bne.n	801fab6 <_strtod_l+0x84e>
 801faae:	9b06      	ldr	r3, [sp, #24]
 801fab0:	691b      	ldr	r3, [r3, #16]
 801fab2:	2b01      	cmp	r3, #1
 801fab4:	dd57      	ble.n	801fb66 <_strtod_l+0x8fe>
 801fab6:	9906      	ldr	r1, [sp, #24]
 801fab8:	2201      	movs	r2, #1
 801faba:	9805      	ldr	r0, [sp, #20]
 801fabc:	f002 ffb4 	bl	8022a28 <__lshift>
 801fac0:	9907      	ldr	r1, [sp, #28]
 801fac2:	9006      	str	r0, [sp, #24]
 801fac4:	f003 f81c 	bl	8022b00 <__mcmp>
 801fac8:	2800      	cmp	r0, #0
 801faca:	dd4c      	ble.n	801fb66 <_strtod_l+0x8fe>
 801facc:	4b2b      	ldr	r3, [pc, #172]	@ (801fb7c <_strtod_l+0x914>)
 801face:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fad0:	403b      	ands	r3, r7
 801fad2:	2a00      	cmp	r2, #0
 801fad4:	d074      	beq.n	801fbc0 <_strtod_l+0x958>
 801fad6:	22d6      	movs	r2, #214	@ 0xd6
 801fad8:	04d2      	lsls	r2, r2, #19
 801fada:	4293      	cmp	r3, r2
 801fadc:	d870      	bhi.n	801fbc0 <_strtod_l+0x958>
 801fade:	22dc      	movs	r2, #220	@ 0xdc
 801fae0:	0492      	lsls	r2, r2, #18
 801fae2:	4293      	cmp	r3, r2
 801fae4:	d800      	bhi.n	801fae8 <_strtod_l+0x880>
 801fae6:	e695      	b.n	801f814 <_strtod_l+0x5ac>
 801fae8:	0030      	movs	r0, r6
 801faea:	0039      	movs	r1, r7
 801faec:	4b24      	ldr	r3, [pc, #144]	@ (801fb80 <_strtod_l+0x918>)
 801faee:	2200      	movs	r2, #0
 801faf0:	f7e2 fda4 	bl	800263c <__aeabi_dmul>
 801faf4:	4b21      	ldr	r3, [pc, #132]	@ (801fb7c <_strtod_l+0x914>)
 801faf6:	0006      	movs	r6, r0
 801faf8:	000f      	movs	r7, r1
 801fafa:	420b      	tst	r3, r1
 801fafc:	d000      	beq.n	801fb00 <_strtod_l+0x898>
 801fafe:	e5f6      	b.n	801f6ee <_strtod_l+0x486>
 801fb00:	2322      	movs	r3, #34	@ 0x22
 801fb02:	9a05      	ldr	r2, [sp, #20]
 801fb04:	6013      	str	r3, [r2, #0]
 801fb06:	e5f2      	b.n	801f6ee <_strtod_l+0x486>
 801fb08:	970e      	str	r7, [sp, #56]	@ 0x38
 801fb0a:	2800      	cmp	r0, #0
 801fb0c:	d175      	bne.n	801fbfa <_strtod_l+0x992>
 801fb0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fb10:	033b      	lsls	r3, r7, #12
 801fb12:	0b1b      	lsrs	r3, r3, #12
 801fb14:	2a00      	cmp	r2, #0
 801fb16:	d039      	beq.n	801fb8c <_strtod_l+0x924>
 801fb18:	4a1a      	ldr	r2, [pc, #104]	@ (801fb84 <_strtod_l+0x91c>)
 801fb1a:	4293      	cmp	r3, r2
 801fb1c:	d138      	bne.n	801fb90 <_strtod_l+0x928>
 801fb1e:	2101      	movs	r1, #1
 801fb20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb22:	4249      	negs	r1, r1
 801fb24:	0032      	movs	r2, r6
 801fb26:	0008      	movs	r0, r1
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d00b      	beq.n	801fb44 <_strtod_l+0x8dc>
 801fb2c:	24d4      	movs	r4, #212	@ 0xd4
 801fb2e:	4b13      	ldr	r3, [pc, #76]	@ (801fb7c <_strtod_l+0x914>)
 801fb30:	0008      	movs	r0, r1
 801fb32:	403b      	ands	r3, r7
 801fb34:	04e4      	lsls	r4, r4, #19
 801fb36:	42a3      	cmp	r3, r4
 801fb38:	d804      	bhi.n	801fb44 <_strtod_l+0x8dc>
 801fb3a:	306c      	adds	r0, #108	@ 0x6c
 801fb3c:	0d1b      	lsrs	r3, r3, #20
 801fb3e:	1ac3      	subs	r3, r0, r3
 801fb40:	4099      	lsls	r1, r3
 801fb42:	0008      	movs	r0, r1
 801fb44:	4282      	cmp	r2, r0
 801fb46:	d123      	bne.n	801fb90 <_strtod_l+0x928>
 801fb48:	4b0f      	ldr	r3, [pc, #60]	@ (801fb88 <_strtod_l+0x920>)
 801fb4a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fb4c:	4299      	cmp	r1, r3
 801fb4e:	d102      	bne.n	801fb56 <_strtod_l+0x8ee>
 801fb50:	3201      	adds	r2, #1
 801fb52:	d100      	bne.n	801fb56 <_strtod_l+0x8ee>
 801fb54:	e5c2      	b.n	801f6dc <_strtod_l+0x474>
 801fb56:	4b09      	ldr	r3, [pc, #36]	@ (801fb7c <_strtod_l+0x914>)
 801fb58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fb5a:	2600      	movs	r6, #0
 801fb5c:	401a      	ands	r2, r3
 801fb5e:	0013      	movs	r3, r2
 801fb60:	2280      	movs	r2, #128	@ 0x80
 801fb62:	0352      	lsls	r2, r2, #13
 801fb64:	189f      	adds	r7, r3, r2
 801fb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	d1bd      	bne.n	801fae8 <_strtod_l+0x880>
 801fb6c:	e5bf      	b.n	801f6ee <_strtod_l+0x486>
 801fb6e:	46c0      	nop			@ (mov r8, r8)
 801fb70:	08026d50 	.word	0x08026d50
 801fb74:	fffffc02 	.word	0xfffffc02
 801fb78:	fffffbe2 	.word	0xfffffbe2
 801fb7c:	7ff00000 	.word	0x7ff00000
 801fb80:	39500000 	.word	0x39500000
 801fb84:	000fffff 	.word	0x000fffff
 801fb88:	7fefffff 	.word	0x7fefffff
 801fb8c:	4333      	orrs	r3, r6
 801fb8e:	d09d      	beq.n	801facc <_strtod_l+0x864>
 801fb90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d01c      	beq.n	801fbd0 <_strtod_l+0x968>
 801fb96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb98:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fb9a:	4213      	tst	r3, r2
 801fb9c:	d0e3      	beq.n	801fb66 <_strtod_l+0x8fe>
 801fb9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fba0:	0030      	movs	r0, r6
 801fba2:	0039      	movs	r1, r7
 801fba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	d016      	beq.n	801fbd8 <_strtod_l+0x970>
 801fbaa:	f7ff fb45 	bl	801f238 <sulp>
 801fbae:	0002      	movs	r2, r0
 801fbb0:	000b      	movs	r3, r1
 801fbb2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fbb4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fbb6:	f7e1 fd99 	bl	80016ec <__aeabi_dadd>
 801fbba:	0006      	movs	r6, r0
 801fbbc:	000f      	movs	r7, r1
 801fbbe:	e7d2      	b.n	801fb66 <_strtod_l+0x8fe>
 801fbc0:	2601      	movs	r6, #1
 801fbc2:	4a92      	ldr	r2, [pc, #584]	@ (801fe0c <_strtod_l+0xba4>)
 801fbc4:	4276      	negs	r6, r6
 801fbc6:	189b      	adds	r3, r3, r2
 801fbc8:	4a91      	ldr	r2, [pc, #580]	@ (801fe10 <_strtod_l+0xba8>)
 801fbca:	431a      	orrs	r2, r3
 801fbcc:	0017      	movs	r7, r2
 801fbce:	e7ca      	b.n	801fb66 <_strtod_l+0x8fe>
 801fbd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fbd2:	4233      	tst	r3, r6
 801fbd4:	d0c7      	beq.n	801fb66 <_strtod_l+0x8fe>
 801fbd6:	e7e2      	b.n	801fb9e <_strtod_l+0x936>
 801fbd8:	f7ff fb2e 	bl	801f238 <sulp>
 801fbdc:	0002      	movs	r2, r0
 801fbde:	000b      	movs	r3, r1
 801fbe0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fbe2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fbe4:	f7e2 fff2 	bl	8002bcc <__aeabi_dsub>
 801fbe8:	2200      	movs	r2, #0
 801fbea:	2300      	movs	r3, #0
 801fbec:	0006      	movs	r6, r0
 801fbee:	000f      	movs	r7, r1
 801fbf0:	f7e0 fc5e 	bl	80004b0 <__aeabi_dcmpeq>
 801fbf4:	2800      	cmp	r0, #0
 801fbf6:	d0b6      	beq.n	801fb66 <_strtod_l+0x8fe>
 801fbf8:	e60c      	b.n	801f814 <_strtod_l+0x5ac>
 801fbfa:	9907      	ldr	r1, [sp, #28]
 801fbfc:	9806      	ldr	r0, [sp, #24]
 801fbfe:	f003 f901 	bl	8022e04 <__ratio>
 801fc02:	2380      	movs	r3, #128	@ 0x80
 801fc04:	2200      	movs	r2, #0
 801fc06:	05db      	lsls	r3, r3, #23
 801fc08:	0004      	movs	r4, r0
 801fc0a:	000d      	movs	r5, r1
 801fc0c:	f7e0 fc60 	bl	80004d0 <__aeabi_dcmple>
 801fc10:	2800      	cmp	r0, #0
 801fc12:	d06c      	beq.n	801fcee <_strtod_l+0xa86>
 801fc14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d177      	bne.n	801fd0a <_strtod_l+0xaa2>
 801fc1a:	2e00      	cmp	r6, #0
 801fc1c:	d157      	bne.n	801fcce <_strtod_l+0xa66>
 801fc1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc20:	031b      	lsls	r3, r3, #12
 801fc22:	d15a      	bne.n	801fcda <_strtod_l+0xa72>
 801fc24:	2200      	movs	r2, #0
 801fc26:	0020      	movs	r0, r4
 801fc28:	0029      	movs	r1, r5
 801fc2a:	4b7a      	ldr	r3, [pc, #488]	@ (801fe14 <_strtod_l+0xbac>)
 801fc2c:	f7e0 fc46 	bl	80004bc <__aeabi_dcmplt>
 801fc30:	2800      	cmp	r0, #0
 801fc32:	d159      	bne.n	801fce8 <_strtod_l+0xa80>
 801fc34:	0020      	movs	r0, r4
 801fc36:	0029      	movs	r1, r5
 801fc38:	2200      	movs	r2, #0
 801fc3a:	4b77      	ldr	r3, [pc, #476]	@ (801fe18 <_strtod_l+0xbb0>)
 801fc3c:	f7e2 fcfe 	bl	800263c <__aeabi_dmul>
 801fc40:	0004      	movs	r4, r0
 801fc42:	000d      	movs	r5, r1
 801fc44:	2380      	movs	r3, #128	@ 0x80
 801fc46:	061b      	lsls	r3, r3, #24
 801fc48:	18eb      	adds	r3, r5, r3
 801fc4a:	940a      	str	r4, [sp, #40]	@ 0x28
 801fc4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fc4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fc50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc52:	9214      	str	r2, [sp, #80]	@ 0x50
 801fc54:	9315      	str	r3, [sp, #84]	@ 0x54
 801fc56:	4a71      	ldr	r2, [pc, #452]	@ (801fe1c <_strtod_l+0xbb4>)
 801fc58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc5a:	4013      	ands	r3, r2
 801fc5c:	9316      	str	r3, [sp, #88]	@ 0x58
 801fc5e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fc60:	4b6f      	ldr	r3, [pc, #444]	@ (801fe20 <_strtod_l+0xbb8>)
 801fc62:	429a      	cmp	r2, r3
 801fc64:	d000      	beq.n	801fc68 <_strtod_l+0xa00>
 801fc66:	e087      	b.n	801fd78 <_strtod_l+0xb10>
 801fc68:	4a6e      	ldr	r2, [pc, #440]	@ (801fe24 <_strtod_l+0xbbc>)
 801fc6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc6c:	4694      	mov	ip, r2
 801fc6e:	4463      	add	r3, ip
 801fc70:	001f      	movs	r7, r3
 801fc72:	0030      	movs	r0, r6
 801fc74:	0019      	movs	r1, r3
 801fc76:	f002 fff9 	bl	8022c6c <__ulp>
 801fc7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fc7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc7e:	f7e2 fcdd 	bl	800263c <__aeabi_dmul>
 801fc82:	0032      	movs	r2, r6
 801fc84:	003b      	movs	r3, r7
 801fc86:	f7e1 fd31 	bl	80016ec <__aeabi_dadd>
 801fc8a:	4a64      	ldr	r2, [pc, #400]	@ (801fe1c <_strtod_l+0xbb4>)
 801fc8c:	4b66      	ldr	r3, [pc, #408]	@ (801fe28 <_strtod_l+0xbc0>)
 801fc8e:	0006      	movs	r6, r0
 801fc90:	400a      	ands	r2, r1
 801fc92:	429a      	cmp	r2, r3
 801fc94:	d940      	bls.n	801fd18 <_strtod_l+0xab0>
 801fc96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fc98:	4a64      	ldr	r2, [pc, #400]	@ (801fe2c <_strtod_l+0xbc4>)
 801fc9a:	4293      	cmp	r3, r2
 801fc9c:	d103      	bne.n	801fca6 <_strtod_l+0xa3e>
 801fc9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fca0:	3301      	adds	r3, #1
 801fca2:	d100      	bne.n	801fca6 <_strtod_l+0xa3e>
 801fca4:	e51a      	b.n	801f6dc <_strtod_l+0x474>
 801fca6:	2601      	movs	r6, #1
 801fca8:	4f60      	ldr	r7, [pc, #384]	@ (801fe2c <_strtod_l+0xbc4>)
 801fcaa:	4276      	negs	r6, r6
 801fcac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801fcae:	9805      	ldr	r0, [sp, #20]
 801fcb0:	f002 fc90 	bl	80225d4 <_Bfree>
 801fcb4:	9908      	ldr	r1, [sp, #32]
 801fcb6:	9805      	ldr	r0, [sp, #20]
 801fcb8:	f002 fc8c 	bl	80225d4 <_Bfree>
 801fcbc:	9907      	ldr	r1, [sp, #28]
 801fcbe:	9805      	ldr	r0, [sp, #20]
 801fcc0:	f002 fc88 	bl	80225d4 <_Bfree>
 801fcc4:	9906      	ldr	r1, [sp, #24]
 801fcc6:	9805      	ldr	r0, [sp, #20]
 801fcc8:	f002 fc84 	bl	80225d4 <_Bfree>
 801fccc:	e617      	b.n	801f8fe <_strtod_l+0x696>
 801fcce:	2e01      	cmp	r6, #1
 801fcd0:	d103      	bne.n	801fcda <_strtod_l+0xa72>
 801fcd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d100      	bne.n	801fcda <_strtod_l+0xa72>
 801fcd8:	e59c      	b.n	801f814 <_strtod_l+0x5ac>
 801fcda:	2300      	movs	r3, #0
 801fcdc:	4c54      	ldr	r4, [pc, #336]	@ (801fe30 <_strtod_l+0xbc8>)
 801fcde:	4d4d      	ldr	r5, [pc, #308]	@ (801fe14 <_strtod_l+0xbac>)
 801fce0:	930a      	str	r3, [sp, #40]	@ 0x28
 801fce2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fce4:	2400      	movs	r4, #0
 801fce6:	e7b2      	b.n	801fc4e <_strtod_l+0x9e6>
 801fce8:	2400      	movs	r4, #0
 801fcea:	4d4b      	ldr	r5, [pc, #300]	@ (801fe18 <_strtod_l+0xbb0>)
 801fcec:	e7aa      	b.n	801fc44 <_strtod_l+0x9dc>
 801fcee:	0020      	movs	r0, r4
 801fcf0:	0029      	movs	r1, r5
 801fcf2:	4b49      	ldr	r3, [pc, #292]	@ (801fe18 <_strtod_l+0xbb0>)
 801fcf4:	2200      	movs	r2, #0
 801fcf6:	f7e2 fca1 	bl	800263c <__aeabi_dmul>
 801fcfa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fcfc:	0004      	movs	r4, r0
 801fcfe:	000d      	movs	r5, r1
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	d09f      	beq.n	801fc44 <_strtod_l+0x9dc>
 801fd04:	940a      	str	r4, [sp, #40]	@ 0x28
 801fd06:	950b      	str	r5, [sp, #44]	@ 0x2c
 801fd08:	e7a1      	b.n	801fc4e <_strtod_l+0x9e6>
 801fd0a:	2300      	movs	r3, #0
 801fd0c:	4c41      	ldr	r4, [pc, #260]	@ (801fe14 <_strtod_l+0xbac>)
 801fd0e:	0025      	movs	r5, r4
 801fd10:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd12:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fd14:	001c      	movs	r4, r3
 801fd16:	e79a      	b.n	801fc4e <_strtod_l+0x9e6>
 801fd18:	23d4      	movs	r3, #212	@ 0xd4
 801fd1a:	049b      	lsls	r3, r3, #18
 801fd1c:	18cf      	adds	r7, r1, r3
 801fd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd20:	9710      	str	r7, [sp, #64]	@ 0x40
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	d1c2      	bne.n	801fcac <_strtod_l+0xa44>
 801fd26:	4b3d      	ldr	r3, [pc, #244]	@ (801fe1c <_strtod_l+0xbb4>)
 801fd28:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fd2a:	403b      	ands	r3, r7
 801fd2c:	429a      	cmp	r2, r3
 801fd2e:	d1bd      	bne.n	801fcac <_strtod_l+0xa44>
 801fd30:	0020      	movs	r0, r4
 801fd32:	0029      	movs	r1, r5
 801fd34:	f7e0 fca8 	bl	8000688 <__aeabi_d2lz>
 801fd38:	f7e0 fce0 	bl	80006fc <__aeabi_l2d>
 801fd3c:	0002      	movs	r2, r0
 801fd3e:	000b      	movs	r3, r1
 801fd40:	0020      	movs	r0, r4
 801fd42:	0029      	movs	r1, r5
 801fd44:	f7e2 ff42 	bl	8002bcc <__aeabi_dsub>
 801fd48:	033c      	lsls	r4, r7, #12
 801fd4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fd4c:	0b24      	lsrs	r4, r4, #12
 801fd4e:	4334      	orrs	r4, r6
 801fd50:	900e      	str	r0, [sp, #56]	@ 0x38
 801fd52:	910f      	str	r1, [sp, #60]	@ 0x3c
 801fd54:	4a37      	ldr	r2, [pc, #220]	@ (801fe34 <_strtod_l+0xbcc>)
 801fd56:	431c      	orrs	r4, r3
 801fd58:	d052      	beq.n	801fe00 <_strtod_l+0xb98>
 801fd5a:	4b37      	ldr	r3, [pc, #220]	@ (801fe38 <_strtod_l+0xbd0>)
 801fd5c:	f7e0 fbae 	bl	80004bc <__aeabi_dcmplt>
 801fd60:	2800      	cmp	r0, #0
 801fd62:	d000      	beq.n	801fd66 <_strtod_l+0xafe>
 801fd64:	e4c3      	b.n	801f6ee <_strtod_l+0x486>
 801fd66:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801fd68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fd6a:	4a34      	ldr	r2, [pc, #208]	@ (801fe3c <_strtod_l+0xbd4>)
 801fd6c:	4b2a      	ldr	r3, [pc, #168]	@ (801fe18 <_strtod_l+0xbb0>)
 801fd6e:	f7e0 fbb9 	bl	80004e4 <__aeabi_dcmpgt>
 801fd72:	2800      	cmp	r0, #0
 801fd74:	d09a      	beq.n	801fcac <_strtod_l+0xa44>
 801fd76:	e4ba      	b.n	801f6ee <_strtod_l+0x486>
 801fd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d02a      	beq.n	801fdd4 <_strtod_l+0xb6c>
 801fd7e:	23d4      	movs	r3, #212	@ 0xd4
 801fd80:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fd82:	04db      	lsls	r3, r3, #19
 801fd84:	429a      	cmp	r2, r3
 801fd86:	d825      	bhi.n	801fdd4 <_strtod_l+0xb6c>
 801fd88:	0020      	movs	r0, r4
 801fd8a:	0029      	movs	r1, r5
 801fd8c:	4a2c      	ldr	r2, [pc, #176]	@ (801fe40 <_strtod_l+0xbd8>)
 801fd8e:	4b2d      	ldr	r3, [pc, #180]	@ (801fe44 <_strtod_l+0xbdc>)
 801fd90:	f7e0 fb9e 	bl	80004d0 <__aeabi_dcmple>
 801fd94:	2800      	cmp	r0, #0
 801fd96:	d016      	beq.n	801fdc6 <_strtod_l+0xb5e>
 801fd98:	0020      	movs	r0, r4
 801fd9a:	0029      	movs	r1, r5
 801fd9c:	f7e0 fc56 	bl	800064c <__aeabi_d2uiz>
 801fda0:	2800      	cmp	r0, #0
 801fda2:	d100      	bne.n	801fda6 <_strtod_l+0xb3e>
 801fda4:	3001      	adds	r0, #1
 801fda6:	f7e3 fb39 	bl	800341c <__aeabi_ui2d>
 801fdaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fdac:	0004      	movs	r4, r0
 801fdae:	000d      	movs	r5, r1
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	d122      	bne.n	801fdfa <_strtod_l+0xb92>
 801fdb4:	2380      	movs	r3, #128	@ 0x80
 801fdb6:	061b      	lsls	r3, r3, #24
 801fdb8:	18cb      	adds	r3, r1, r3
 801fdba:	9018      	str	r0, [sp, #96]	@ 0x60
 801fdbc:	9319      	str	r3, [sp, #100]	@ 0x64
 801fdbe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fdc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fdc2:	9214      	str	r2, [sp, #80]	@ 0x50
 801fdc4:	9315      	str	r3, [sp, #84]	@ 0x54
 801fdc6:	22d6      	movs	r2, #214	@ 0xd6
 801fdc8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fdca:	04d2      	lsls	r2, r2, #19
 801fdcc:	189b      	adds	r3, r3, r2
 801fdce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fdd0:	1a9b      	subs	r3, r3, r2
 801fdd2:	9315      	str	r3, [sp, #84]	@ 0x54
 801fdd4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fdd6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fdd8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fdda:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801fddc:	f002 ff46 	bl	8022c6c <__ulp>
 801fde0:	0002      	movs	r2, r0
 801fde2:	000b      	movs	r3, r1
 801fde4:	0030      	movs	r0, r6
 801fde6:	0039      	movs	r1, r7
 801fde8:	f7e2 fc28 	bl	800263c <__aeabi_dmul>
 801fdec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fdee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fdf0:	f7e1 fc7c 	bl	80016ec <__aeabi_dadd>
 801fdf4:	0006      	movs	r6, r0
 801fdf6:	000f      	movs	r7, r1
 801fdf8:	e791      	b.n	801fd1e <_strtod_l+0xab6>
 801fdfa:	9418      	str	r4, [sp, #96]	@ 0x60
 801fdfc:	9519      	str	r5, [sp, #100]	@ 0x64
 801fdfe:	e7de      	b.n	801fdbe <_strtod_l+0xb56>
 801fe00:	4b11      	ldr	r3, [pc, #68]	@ (801fe48 <_strtod_l+0xbe0>)
 801fe02:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801fe04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fe06:	f7e0 fb59 	bl	80004bc <__aeabi_dcmplt>
 801fe0a:	e7b2      	b.n	801fd72 <_strtod_l+0xb0a>
 801fe0c:	fff00000 	.word	0xfff00000
 801fe10:	000fffff 	.word	0x000fffff
 801fe14:	3ff00000 	.word	0x3ff00000
 801fe18:	3fe00000 	.word	0x3fe00000
 801fe1c:	7ff00000 	.word	0x7ff00000
 801fe20:	7fe00000 	.word	0x7fe00000
 801fe24:	fcb00000 	.word	0xfcb00000
 801fe28:	7c9fffff 	.word	0x7c9fffff
 801fe2c:	7fefffff 	.word	0x7fefffff
 801fe30:	bff00000 	.word	0xbff00000
 801fe34:	94a03595 	.word	0x94a03595
 801fe38:	3fdfffff 	.word	0x3fdfffff
 801fe3c:	35afe535 	.word	0x35afe535
 801fe40:	ffc00000 	.word	0xffc00000
 801fe44:	41dfffff 	.word	0x41dfffff
 801fe48:	3fcfffff 	.word	0x3fcfffff

0801fe4c <strtod>:
 801fe4c:	b510      	push	{r4, lr}
 801fe4e:	4c04      	ldr	r4, [pc, #16]	@ (801fe60 <strtod+0x14>)
 801fe50:	000a      	movs	r2, r1
 801fe52:	0001      	movs	r1, r0
 801fe54:	4b03      	ldr	r3, [pc, #12]	@ (801fe64 <strtod+0x18>)
 801fe56:	6820      	ldr	r0, [r4, #0]
 801fe58:	f7ff fa06 	bl	801f268 <_strtod_l>
 801fe5c:	bd10      	pop	{r4, pc}
 801fe5e:	46c0      	nop			@ (mov r8, r8)
 801fe60:	200003cc 	.word	0x200003cc
 801fe64:	20000260 	.word	0x20000260

0801fe68 <_strtol_l.constprop.0>:
 801fe68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe6a:	b085      	sub	sp, #20
 801fe6c:	0017      	movs	r7, r2
 801fe6e:	001e      	movs	r6, r3
 801fe70:	9003      	str	r0, [sp, #12]
 801fe72:	9101      	str	r1, [sp, #4]
 801fe74:	2b24      	cmp	r3, #36	@ 0x24
 801fe76:	d844      	bhi.n	801ff02 <_strtol_l.constprop.0+0x9a>
 801fe78:	000c      	movs	r4, r1
 801fe7a:	2b01      	cmp	r3, #1
 801fe7c:	d041      	beq.n	801ff02 <_strtol_l.constprop.0+0x9a>
 801fe7e:	4b3d      	ldr	r3, [pc, #244]	@ (801ff74 <_strtol_l.constprop.0+0x10c>)
 801fe80:	2208      	movs	r2, #8
 801fe82:	469c      	mov	ip, r3
 801fe84:	0023      	movs	r3, r4
 801fe86:	4661      	mov	r1, ip
 801fe88:	781d      	ldrb	r5, [r3, #0]
 801fe8a:	3401      	adds	r4, #1
 801fe8c:	5d48      	ldrb	r0, [r1, r5]
 801fe8e:	0001      	movs	r1, r0
 801fe90:	4011      	ands	r1, r2
 801fe92:	4210      	tst	r0, r2
 801fe94:	d1f6      	bne.n	801fe84 <_strtol_l.constprop.0+0x1c>
 801fe96:	2d2d      	cmp	r5, #45	@ 0x2d
 801fe98:	d13a      	bne.n	801ff10 <_strtol_l.constprop.0+0xa8>
 801fe9a:	7825      	ldrb	r5, [r4, #0]
 801fe9c:	1c9c      	adds	r4, r3, #2
 801fe9e:	2301      	movs	r3, #1
 801fea0:	9300      	str	r3, [sp, #0]
 801fea2:	2210      	movs	r2, #16
 801fea4:	0033      	movs	r3, r6
 801fea6:	4393      	bics	r3, r2
 801fea8:	d109      	bne.n	801febe <_strtol_l.constprop.0+0x56>
 801feaa:	2d30      	cmp	r5, #48	@ 0x30
 801feac:	d136      	bne.n	801ff1c <_strtol_l.constprop.0+0xb4>
 801feae:	2120      	movs	r1, #32
 801feb0:	7823      	ldrb	r3, [r4, #0]
 801feb2:	438b      	bics	r3, r1
 801feb4:	2b58      	cmp	r3, #88	@ 0x58
 801feb6:	d131      	bne.n	801ff1c <_strtol_l.constprop.0+0xb4>
 801feb8:	0016      	movs	r6, r2
 801feba:	7865      	ldrb	r5, [r4, #1]
 801febc:	3402      	adds	r4, #2
 801febe:	4a2e      	ldr	r2, [pc, #184]	@ (801ff78 <_strtol_l.constprop.0+0x110>)
 801fec0:	9b00      	ldr	r3, [sp, #0]
 801fec2:	4694      	mov	ip, r2
 801fec4:	4463      	add	r3, ip
 801fec6:	0031      	movs	r1, r6
 801fec8:	0018      	movs	r0, r3
 801feca:	9302      	str	r3, [sp, #8]
 801fecc:	f7e0 f9f0 	bl	80002b0 <__aeabi_uidivmod>
 801fed0:	2200      	movs	r2, #0
 801fed2:	4684      	mov	ip, r0
 801fed4:	0010      	movs	r0, r2
 801fed6:	002b      	movs	r3, r5
 801fed8:	3b30      	subs	r3, #48	@ 0x30
 801feda:	2b09      	cmp	r3, #9
 801fedc:	d825      	bhi.n	801ff2a <_strtol_l.constprop.0+0xc2>
 801fede:	001d      	movs	r5, r3
 801fee0:	42ae      	cmp	r6, r5
 801fee2:	dd31      	ble.n	801ff48 <_strtol_l.constprop.0+0xe0>
 801fee4:	1c53      	adds	r3, r2, #1
 801fee6:	d009      	beq.n	801fefc <_strtol_l.constprop.0+0x94>
 801fee8:	2201      	movs	r2, #1
 801feea:	4252      	negs	r2, r2
 801feec:	4584      	cmp	ip, r0
 801feee:	d305      	bcc.n	801fefc <_strtol_l.constprop.0+0x94>
 801fef0:	d101      	bne.n	801fef6 <_strtol_l.constprop.0+0x8e>
 801fef2:	42a9      	cmp	r1, r5
 801fef4:	db25      	blt.n	801ff42 <_strtol_l.constprop.0+0xda>
 801fef6:	2201      	movs	r2, #1
 801fef8:	4370      	muls	r0, r6
 801fefa:	1828      	adds	r0, r5, r0
 801fefc:	7825      	ldrb	r5, [r4, #0]
 801fefe:	3401      	adds	r4, #1
 801ff00:	e7e9      	b.n	801fed6 <_strtol_l.constprop.0+0x6e>
 801ff02:	f000 ffe7 	bl	8020ed4 <__errno>
 801ff06:	2316      	movs	r3, #22
 801ff08:	6003      	str	r3, [r0, #0]
 801ff0a:	2000      	movs	r0, #0
 801ff0c:	b005      	add	sp, #20
 801ff0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff10:	9100      	str	r1, [sp, #0]
 801ff12:	2d2b      	cmp	r5, #43	@ 0x2b
 801ff14:	d1c5      	bne.n	801fea2 <_strtol_l.constprop.0+0x3a>
 801ff16:	7825      	ldrb	r5, [r4, #0]
 801ff18:	1c9c      	adds	r4, r3, #2
 801ff1a:	e7c2      	b.n	801fea2 <_strtol_l.constprop.0+0x3a>
 801ff1c:	2e00      	cmp	r6, #0
 801ff1e:	d1ce      	bne.n	801febe <_strtol_l.constprop.0+0x56>
 801ff20:	3608      	adds	r6, #8
 801ff22:	2d30      	cmp	r5, #48	@ 0x30
 801ff24:	d0cb      	beq.n	801febe <_strtol_l.constprop.0+0x56>
 801ff26:	3602      	adds	r6, #2
 801ff28:	e7c9      	b.n	801febe <_strtol_l.constprop.0+0x56>
 801ff2a:	002b      	movs	r3, r5
 801ff2c:	3b41      	subs	r3, #65	@ 0x41
 801ff2e:	2b19      	cmp	r3, #25
 801ff30:	d801      	bhi.n	801ff36 <_strtol_l.constprop.0+0xce>
 801ff32:	3d37      	subs	r5, #55	@ 0x37
 801ff34:	e7d4      	b.n	801fee0 <_strtol_l.constprop.0+0x78>
 801ff36:	002b      	movs	r3, r5
 801ff38:	3b61      	subs	r3, #97	@ 0x61
 801ff3a:	2b19      	cmp	r3, #25
 801ff3c:	d804      	bhi.n	801ff48 <_strtol_l.constprop.0+0xe0>
 801ff3e:	3d57      	subs	r5, #87	@ 0x57
 801ff40:	e7ce      	b.n	801fee0 <_strtol_l.constprop.0+0x78>
 801ff42:	2201      	movs	r2, #1
 801ff44:	4252      	negs	r2, r2
 801ff46:	e7d9      	b.n	801fefc <_strtol_l.constprop.0+0x94>
 801ff48:	1c53      	adds	r3, r2, #1
 801ff4a:	d108      	bne.n	801ff5e <_strtol_l.constprop.0+0xf6>
 801ff4c:	2322      	movs	r3, #34	@ 0x22
 801ff4e:	9a03      	ldr	r2, [sp, #12]
 801ff50:	9802      	ldr	r0, [sp, #8]
 801ff52:	6013      	str	r3, [r2, #0]
 801ff54:	2f00      	cmp	r7, #0
 801ff56:	d0d9      	beq.n	801ff0c <_strtol_l.constprop.0+0xa4>
 801ff58:	1e63      	subs	r3, r4, #1
 801ff5a:	9301      	str	r3, [sp, #4]
 801ff5c:	e007      	b.n	801ff6e <_strtol_l.constprop.0+0x106>
 801ff5e:	9b00      	ldr	r3, [sp, #0]
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d000      	beq.n	801ff66 <_strtol_l.constprop.0+0xfe>
 801ff64:	4240      	negs	r0, r0
 801ff66:	2f00      	cmp	r7, #0
 801ff68:	d0d0      	beq.n	801ff0c <_strtol_l.constprop.0+0xa4>
 801ff6a:	2a00      	cmp	r2, #0
 801ff6c:	d1f4      	bne.n	801ff58 <_strtol_l.constprop.0+0xf0>
 801ff6e:	9b01      	ldr	r3, [sp, #4]
 801ff70:	603b      	str	r3, [r7, #0]
 801ff72:	e7cb      	b.n	801ff0c <_strtol_l.constprop.0+0xa4>
 801ff74:	08026d79 	.word	0x08026d79
 801ff78:	7fffffff 	.word	0x7fffffff

0801ff7c <strtol>:
 801ff7c:	b510      	push	{r4, lr}
 801ff7e:	4c04      	ldr	r4, [pc, #16]	@ (801ff90 <strtol+0x14>)
 801ff80:	0013      	movs	r3, r2
 801ff82:	000a      	movs	r2, r1
 801ff84:	0001      	movs	r1, r0
 801ff86:	6820      	ldr	r0, [r4, #0]
 801ff88:	f7ff ff6e 	bl	801fe68 <_strtol_l.constprop.0>
 801ff8c:	bd10      	pop	{r4, pc}
 801ff8e:	46c0      	nop			@ (mov r8, r8)
 801ff90:	200003cc 	.word	0x200003cc

0801ff94 <__cvt>:
 801ff94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff96:	001f      	movs	r7, r3
 801ff98:	2300      	movs	r3, #0
 801ff9a:	0016      	movs	r6, r2
 801ff9c:	b08b      	sub	sp, #44	@ 0x2c
 801ff9e:	429f      	cmp	r7, r3
 801ffa0:	da04      	bge.n	801ffac <__cvt+0x18>
 801ffa2:	2180      	movs	r1, #128	@ 0x80
 801ffa4:	0609      	lsls	r1, r1, #24
 801ffa6:	187b      	adds	r3, r7, r1
 801ffa8:	001f      	movs	r7, r3
 801ffaa:	232d      	movs	r3, #45	@ 0x2d
 801ffac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ffae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ffb0:	7013      	strb	r3, [r2, #0]
 801ffb2:	2320      	movs	r3, #32
 801ffb4:	2203      	movs	r2, #3
 801ffb6:	439d      	bics	r5, r3
 801ffb8:	2d46      	cmp	r5, #70	@ 0x46
 801ffba:	d007      	beq.n	801ffcc <__cvt+0x38>
 801ffbc:	002b      	movs	r3, r5
 801ffbe:	3b45      	subs	r3, #69	@ 0x45
 801ffc0:	4259      	negs	r1, r3
 801ffc2:	414b      	adcs	r3, r1
 801ffc4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ffc6:	3a01      	subs	r2, #1
 801ffc8:	18cb      	adds	r3, r1, r3
 801ffca:	9310      	str	r3, [sp, #64]	@ 0x40
 801ffcc:	ab09      	add	r3, sp, #36	@ 0x24
 801ffce:	9304      	str	r3, [sp, #16]
 801ffd0:	ab08      	add	r3, sp, #32
 801ffd2:	9303      	str	r3, [sp, #12]
 801ffd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ffd6:	9200      	str	r2, [sp, #0]
 801ffd8:	9302      	str	r3, [sp, #8]
 801ffda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ffdc:	0032      	movs	r2, r6
 801ffde:	9301      	str	r3, [sp, #4]
 801ffe0:	003b      	movs	r3, r7
 801ffe2:	f001 f84d 	bl	8021080 <_dtoa_r>
 801ffe6:	0004      	movs	r4, r0
 801ffe8:	2d47      	cmp	r5, #71	@ 0x47
 801ffea:	d11b      	bne.n	8020024 <__cvt+0x90>
 801ffec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ffee:	07db      	lsls	r3, r3, #31
 801fff0:	d511      	bpl.n	8020016 <__cvt+0x82>
 801fff2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fff4:	18c3      	adds	r3, r0, r3
 801fff6:	9307      	str	r3, [sp, #28]
 801fff8:	2200      	movs	r2, #0
 801fffa:	2300      	movs	r3, #0
 801fffc:	0030      	movs	r0, r6
 801fffe:	0039      	movs	r1, r7
 8020000:	f7e0 fa56 	bl	80004b0 <__aeabi_dcmpeq>
 8020004:	2800      	cmp	r0, #0
 8020006:	d001      	beq.n	802000c <__cvt+0x78>
 8020008:	9b07      	ldr	r3, [sp, #28]
 802000a:	9309      	str	r3, [sp, #36]	@ 0x24
 802000c:	2230      	movs	r2, #48	@ 0x30
 802000e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020010:	9907      	ldr	r1, [sp, #28]
 8020012:	428b      	cmp	r3, r1
 8020014:	d320      	bcc.n	8020058 <__cvt+0xc4>
 8020016:	0020      	movs	r0, r4
 8020018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802001a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802001c:	1b1b      	subs	r3, r3, r4
 802001e:	6013      	str	r3, [r2, #0]
 8020020:	b00b      	add	sp, #44	@ 0x2c
 8020022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020024:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020026:	18c3      	adds	r3, r0, r3
 8020028:	9307      	str	r3, [sp, #28]
 802002a:	2d46      	cmp	r5, #70	@ 0x46
 802002c:	d1e4      	bne.n	801fff8 <__cvt+0x64>
 802002e:	7803      	ldrb	r3, [r0, #0]
 8020030:	2b30      	cmp	r3, #48	@ 0x30
 8020032:	d10c      	bne.n	802004e <__cvt+0xba>
 8020034:	2200      	movs	r2, #0
 8020036:	2300      	movs	r3, #0
 8020038:	0030      	movs	r0, r6
 802003a:	0039      	movs	r1, r7
 802003c:	f7e0 fa38 	bl	80004b0 <__aeabi_dcmpeq>
 8020040:	2800      	cmp	r0, #0
 8020042:	d104      	bne.n	802004e <__cvt+0xba>
 8020044:	2301      	movs	r3, #1
 8020046:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020048:	1a9b      	subs	r3, r3, r2
 802004a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802004c:	6013      	str	r3, [r2, #0]
 802004e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020050:	9a07      	ldr	r2, [sp, #28]
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	18d3      	adds	r3, r2, r3
 8020056:	e7ce      	b.n	801fff6 <__cvt+0x62>
 8020058:	1c59      	adds	r1, r3, #1
 802005a:	9109      	str	r1, [sp, #36]	@ 0x24
 802005c:	701a      	strb	r2, [r3, #0]
 802005e:	e7d6      	b.n	802000e <__cvt+0x7a>

08020060 <__exponent>:
 8020060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020062:	232b      	movs	r3, #43	@ 0x2b
 8020064:	0005      	movs	r5, r0
 8020066:	000c      	movs	r4, r1
 8020068:	b085      	sub	sp, #20
 802006a:	7002      	strb	r2, [r0, #0]
 802006c:	2900      	cmp	r1, #0
 802006e:	da01      	bge.n	8020074 <__exponent+0x14>
 8020070:	424c      	negs	r4, r1
 8020072:	3302      	adds	r3, #2
 8020074:	706b      	strb	r3, [r5, #1]
 8020076:	2c09      	cmp	r4, #9
 8020078:	dd2c      	ble.n	80200d4 <__exponent+0x74>
 802007a:	ab02      	add	r3, sp, #8
 802007c:	1dde      	adds	r6, r3, #7
 802007e:	0020      	movs	r0, r4
 8020080:	210a      	movs	r1, #10
 8020082:	f7e0 f9ff 	bl	8000484 <__aeabi_idivmod>
 8020086:	0037      	movs	r7, r6
 8020088:	3130      	adds	r1, #48	@ 0x30
 802008a:	3e01      	subs	r6, #1
 802008c:	0020      	movs	r0, r4
 802008e:	7031      	strb	r1, [r6, #0]
 8020090:	210a      	movs	r1, #10
 8020092:	9401      	str	r4, [sp, #4]
 8020094:	f7e0 f910 	bl	80002b8 <__divsi3>
 8020098:	9b01      	ldr	r3, [sp, #4]
 802009a:	0004      	movs	r4, r0
 802009c:	2b63      	cmp	r3, #99	@ 0x63
 802009e:	dcee      	bgt.n	802007e <__exponent+0x1e>
 80200a0:	1eba      	subs	r2, r7, #2
 80200a2:	1ca8      	adds	r0, r5, #2
 80200a4:	0001      	movs	r1, r0
 80200a6:	0013      	movs	r3, r2
 80200a8:	3430      	adds	r4, #48	@ 0x30
 80200aa:	7014      	strb	r4, [r2, #0]
 80200ac:	ac02      	add	r4, sp, #8
 80200ae:	3407      	adds	r4, #7
 80200b0:	429c      	cmp	r4, r3
 80200b2:	d80a      	bhi.n	80200ca <__exponent+0x6a>
 80200b4:	2300      	movs	r3, #0
 80200b6:	42a2      	cmp	r2, r4
 80200b8:	d803      	bhi.n	80200c2 <__exponent+0x62>
 80200ba:	3309      	adds	r3, #9
 80200bc:	aa02      	add	r2, sp, #8
 80200be:	189b      	adds	r3, r3, r2
 80200c0:	1bdb      	subs	r3, r3, r7
 80200c2:	18c0      	adds	r0, r0, r3
 80200c4:	1b40      	subs	r0, r0, r5
 80200c6:	b005      	add	sp, #20
 80200c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80200ca:	781c      	ldrb	r4, [r3, #0]
 80200cc:	3301      	adds	r3, #1
 80200ce:	700c      	strb	r4, [r1, #0]
 80200d0:	3101      	adds	r1, #1
 80200d2:	e7eb      	b.n	80200ac <__exponent+0x4c>
 80200d4:	2330      	movs	r3, #48	@ 0x30
 80200d6:	18e4      	adds	r4, r4, r3
 80200d8:	70ab      	strb	r3, [r5, #2]
 80200da:	1d28      	adds	r0, r5, #4
 80200dc:	70ec      	strb	r4, [r5, #3]
 80200de:	e7f1      	b.n	80200c4 <__exponent+0x64>

080200e0 <_printf_float>:
 80200e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200e2:	b097      	sub	sp, #92	@ 0x5c
 80200e4:	000d      	movs	r5, r1
 80200e6:	920a      	str	r2, [sp, #40]	@ 0x28
 80200e8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80200ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80200ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80200ee:	f000 fe9f 	bl	8020e30 <_localeconv_r>
 80200f2:	6803      	ldr	r3, [r0, #0]
 80200f4:	0018      	movs	r0, r3
 80200f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80200f8:	f7e0 f838 	bl	800016c <strlen>
 80200fc:	2300      	movs	r3, #0
 80200fe:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020100:	9314      	str	r3, [sp, #80]	@ 0x50
 8020102:	7e2b      	ldrb	r3, [r5, #24]
 8020104:	2207      	movs	r2, #7
 8020106:	930c      	str	r3, [sp, #48]	@ 0x30
 8020108:	682b      	ldr	r3, [r5, #0]
 802010a:	930e      	str	r3, [sp, #56]	@ 0x38
 802010c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802010e:	6823      	ldr	r3, [r4, #0]
 8020110:	05c9      	lsls	r1, r1, #23
 8020112:	d545      	bpl.n	80201a0 <_printf_float+0xc0>
 8020114:	189b      	adds	r3, r3, r2
 8020116:	4393      	bics	r3, r2
 8020118:	001a      	movs	r2, r3
 802011a:	3208      	adds	r2, #8
 802011c:	6022      	str	r2, [r4, #0]
 802011e:	2201      	movs	r2, #1
 8020120:	681e      	ldr	r6, [r3, #0]
 8020122:	685f      	ldr	r7, [r3, #4]
 8020124:	007b      	lsls	r3, r7, #1
 8020126:	085b      	lsrs	r3, r3, #1
 8020128:	9311      	str	r3, [sp, #68]	@ 0x44
 802012a:	9610      	str	r6, [sp, #64]	@ 0x40
 802012c:	64ae      	str	r6, [r5, #72]	@ 0x48
 802012e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8020130:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020132:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020134:	4ba7      	ldr	r3, [pc, #668]	@ (80203d4 <_printf_float+0x2f4>)
 8020136:	4252      	negs	r2, r2
 8020138:	f7e3 f8e4 	bl	8003304 <__aeabi_dcmpun>
 802013c:	2800      	cmp	r0, #0
 802013e:	d131      	bne.n	80201a4 <_printf_float+0xc4>
 8020140:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020142:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020144:	2201      	movs	r2, #1
 8020146:	4ba3      	ldr	r3, [pc, #652]	@ (80203d4 <_printf_float+0x2f4>)
 8020148:	4252      	negs	r2, r2
 802014a:	f7e0 f9c1 	bl	80004d0 <__aeabi_dcmple>
 802014e:	2800      	cmp	r0, #0
 8020150:	d128      	bne.n	80201a4 <_printf_float+0xc4>
 8020152:	2200      	movs	r2, #0
 8020154:	2300      	movs	r3, #0
 8020156:	0030      	movs	r0, r6
 8020158:	0039      	movs	r1, r7
 802015a:	f7e0 f9af 	bl	80004bc <__aeabi_dcmplt>
 802015e:	2800      	cmp	r0, #0
 8020160:	d003      	beq.n	802016a <_printf_float+0x8a>
 8020162:	002b      	movs	r3, r5
 8020164:	222d      	movs	r2, #45	@ 0x2d
 8020166:	3343      	adds	r3, #67	@ 0x43
 8020168:	701a      	strb	r2, [r3, #0]
 802016a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802016c:	4f9a      	ldr	r7, [pc, #616]	@ (80203d8 <_printf_float+0x2f8>)
 802016e:	2b47      	cmp	r3, #71	@ 0x47
 8020170:	d900      	bls.n	8020174 <_printf_float+0x94>
 8020172:	4f9a      	ldr	r7, [pc, #616]	@ (80203dc <_printf_float+0x2fc>)
 8020174:	2303      	movs	r3, #3
 8020176:	2400      	movs	r4, #0
 8020178:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802017a:	612b      	str	r3, [r5, #16]
 802017c:	3301      	adds	r3, #1
 802017e:	439a      	bics	r2, r3
 8020180:	602a      	str	r2, [r5, #0]
 8020182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020184:	0029      	movs	r1, r5
 8020186:	9300      	str	r3, [sp, #0]
 8020188:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802018a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802018c:	aa15      	add	r2, sp, #84	@ 0x54
 802018e:	f000 f9e5 	bl	802055c <_printf_common>
 8020192:	3001      	adds	r0, #1
 8020194:	d000      	beq.n	8020198 <_printf_float+0xb8>
 8020196:	e09f      	b.n	80202d8 <_printf_float+0x1f8>
 8020198:	2001      	movs	r0, #1
 802019a:	4240      	negs	r0, r0
 802019c:	b017      	add	sp, #92	@ 0x5c
 802019e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201a0:	3307      	adds	r3, #7
 80201a2:	e7b8      	b.n	8020116 <_printf_float+0x36>
 80201a4:	0032      	movs	r2, r6
 80201a6:	003b      	movs	r3, r7
 80201a8:	0030      	movs	r0, r6
 80201aa:	0039      	movs	r1, r7
 80201ac:	f7e3 f8aa 	bl	8003304 <__aeabi_dcmpun>
 80201b0:	2800      	cmp	r0, #0
 80201b2:	d00b      	beq.n	80201cc <_printf_float+0xec>
 80201b4:	2f00      	cmp	r7, #0
 80201b6:	da03      	bge.n	80201c0 <_printf_float+0xe0>
 80201b8:	002b      	movs	r3, r5
 80201ba:	222d      	movs	r2, #45	@ 0x2d
 80201bc:	3343      	adds	r3, #67	@ 0x43
 80201be:	701a      	strb	r2, [r3, #0]
 80201c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201c2:	4f87      	ldr	r7, [pc, #540]	@ (80203e0 <_printf_float+0x300>)
 80201c4:	2b47      	cmp	r3, #71	@ 0x47
 80201c6:	d9d5      	bls.n	8020174 <_printf_float+0x94>
 80201c8:	4f86      	ldr	r7, [pc, #536]	@ (80203e4 <_printf_float+0x304>)
 80201ca:	e7d3      	b.n	8020174 <_printf_float+0x94>
 80201cc:	2220      	movs	r2, #32
 80201ce:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80201d0:	686b      	ldr	r3, [r5, #4]
 80201d2:	4394      	bics	r4, r2
 80201d4:	1c5a      	adds	r2, r3, #1
 80201d6:	d146      	bne.n	8020266 <_printf_float+0x186>
 80201d8:	3307      	adds	r3, #7
 80201da:	606b      	str	r3, [r5, #4]
 80201dc:	2380      	movs	r3, #128	@ 0x80
 80201de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80201e0:	00db      	lsls	r3, r3, #3
 80201e2:	4313      	orrs	r3, r2
 80201e4:	2200      	movs	r2, #0
 80201e6:	602b      	str	r3, [r5, #0]
 80201e8:	9206      	str	r2, [sp, #24]
 80201ea:	aa14      	add	r2, sp, #80	@ 0x50
 80201ec:	9205      	str	r2, [sp, #20]
 80201ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80201f0:	a90a      	add	r1, sp, #40	@ 0x28
 80201f2:	9204      	str	r2, [sp, #16]
 80201f4:	aa13      	add	r2, sp, #76	@ 0x4c
 80201f6:	9203      	str	r2, [sp, #12]
 80201f8:	2223      	movs	r2, #35	@ 0x23
 80201fa:	1852      	adds	r2, r2, r1
 80201fc:	9202      	str	r2, [sp, #8]
 80201fe:	9301      	str	r3, [sp, #4]
 8020200:	686b      	ldr	r3, [r5, #4]
 8020202:	0032      	movs	r2, r6
 8020204:	9300      	str	r3, [sp, #0]
 8020206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020208:	003b      	movs	r3, r7
 802020a:	f7ff fec3 	bl	801ff94 <__cvt>
 802020e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020210:	0007      	movs	r7, r0
 8020212:	2c47      	cmp	r4, #71	@ 0x47
 8020214:	d12d      	bne.n	8020272 <_printf_float+0x192>
 8020216:	1cd3      	adds	r3, r2, #3
 8020218:	db02      	blt.n	8020220 <_printf_float+0x140>
 802021a:	686b      	ldr	r3, [r5, #4]
 802021c:	429a      	cmp	r2, r3
 802021e:	dd48      	ble.n	80202b2 <_printf_float+0x1d2>
 8020220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020222:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020224:	3b02      	subs	r3, #2
 8020226:	b2db      	uxtb	r3, r3
 8020228:	930c      	str	r3, [sp, #48]	@ 0x30
 802022a:	0028      	movs	r0, r5
 802022c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802022e:	3901      	subs	r1, #1
 8020230:	3050      	adds	r0, #80	@ 0x50
 8020232:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020234:	f7ff ff14 	bl	8020060 <__exponent>
 8020238:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802023a:	0004      	movs	r4, r0
 802023c:	1813      	adds	r3, r2, r0
 802023e:	612b      	str	r3, [r5, #16]
 8020240:	2a01      	cmp	r2, #1
 8020242:	dc02      	bgt.n	802024a <_printf_float+0x16a>
 8020244:	682a      	ldr	r2, [r5, #0]
 8020246:	07d2      	lsls	r2, r2, #31
 8020248:	d501      	bpl.n	802024e <_printf_float+0x16e>
 802024a:	3301      	adds	r3, #1
 802024c:	612b      	str	r3, [r5, #16]
 802024e:	2323      	movs	r3, #35	@ 0x23
 8020250:	aa0a      	add	r2, sp, #40	@ 0x28
 8020252:	189b      	adds	r3, r3, r2
 8020254:	781b      	ldrb	r3, [r3, #0]
 8020256:	2b00      	cmp	r3, #0
 8020258:	d100      	bne.n	802025c <_printf_float+0x17c>
 802025a:	e792      	b.n	8020182 <_printf_float+0xa2>
 802025c:	002b      	movs	r3, r5
 802025e:	222d      	movs	r2, #45	@ 0x2d
 8020260:	3343      	adds	r3, #67	@ 0x43
 8020262:	701a      	strb	r2, [r3, #0]
 8020264:	e78d      	b.n	8020182 <_printf_float+0xa2>
 8020266:	2c47      	cmp	r4, #71	@ 0x47
 8020268:	d1b8      	bne.n	80201dc <_printf_float+0xfc>
 802026a:	2b00      	cmp	r3, #0
 802026c:	d1b6      	bne.n	80201dc <_printf_float+0xfc>
 802026e:	3301      	adds	r3, #1
 8020270:	e7b3      	b.n	80201da <_printf_float+0xfa>
 8020272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020274:	0011      	movs	r1, r2
 8020276:	2b65      	cmp	r3, #101	@ 0x65
 8020278:	d9d7      	bls.n	802022a <_printf_float+0x14a>
 802027a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802027c:	2b66      	cmp	r3, #102	@ 0x66
 802027e:	d11a      	bne.n	80202b6 <_printf_float+0x1d6>
 8020280:	686b      	ldr	r3, [r5, #4]
 8020282:	2a00      	cmp	r2, #0
 8020284:	dd09      	ble.n	802029a <_printf_float+0x1ba>
 8020286:	612a      	str	r2, [r5, #16]
 8020288:	2b00      	cmp	r3, #0
 802028a:	d102      	bne.n	8020292 <_printf_float+0x1b2>
 802028c:	6829      	ldr	r1, [r5, #0]
 802028e:	07c9      	lsls	r1, r1, #31
 8020290:	d50b      	bpl.n	80202aa <_printf_float+0x1ca>
 8020292:	3301      	adds	r3, #1
 8020294:	189b      	adds	r3, r3, r2
 8020296:	612b      	str	r3, [r5, #16]
 8020298:	e007      	b.n	80202aa <_printf_float+0x1ca>
 802029a:	2b00      	cmp	r3, #0
 802029c:	d103      	bne.n	80202a6 <_printf_float+0x1c6>
 802029e:	2201      	movs	r2, #1
 80202a0:	6829      	ldr	r1, [r5, #0]
 80202a2:	4211      	tst	r1, r2
 80202a4:	d000      	beq.n	80202a8 <_printf_float+0x1c8>
 80202a6:	1c9a      	adds	r2, r3, #2
 80202a8:	612a      	str	r2, [r5, #16]
 80202aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80202ac:	2400      	movs	r4, #0
 80202ae:	65ab      	str	r3, [r5, #88]	@ 0x58
 80202b0:	e7cd      	b.n	802024e <_printf_float+0x16e>
 80202b2:	2367      	movs	r3, #103	@ 0x67
 80202b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80202b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80202b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80202ba:	4299      	cmp	r1, r3
 80202bc:	db06      	blt.n	80202cc <_printf_float+0x1ec>
 80202be:	682b      	ldr	r3, [r5, #0]
 80202c0:	6129      	str	r1, [r5, #16]
 80202c2:	07db      	lsls	r3, r3, #31
 80202c4:	d5f1      	bpl.n	80202aa <_printf_float+0x1ca>
 80202c6:	3101      	adds	r1, #1
 80202c8:	6129      	str	r1, [r5, #16]
 80202ca:	e7ee      	b.n	80202aa <_printf_float+0x1ca>
 80202cc:	2201      	movs	r2, #1
 80202ce:	2900      	cmp	r1, #0
 80202d0:	dce0      	bgt.n	8020294 <_printf_float+0x1b4>
 80202d2:	1892      	adds	r2, r2, r2
 80202d4:	1a52      	subs	r2, r2, r1
 80202d6:	e7dd      	b.n	8020294 <_printf_float+0x1b4>
 80202d8:	682a      	ldr	r2, [r5, #0]
 80202da:	0553      	lsls	r3, r2, #21
 80202dc:	d408      	bmi.n	80202f0 <_printf_float+0x210>
 80202de:	692b      	ldr	r3, [r5, #16]
 80202e0:	003a      	movs	r2, r7
 80202e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80202e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80202e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80202e8:	47a0      	blx	r4
 80202ea:	3001      	adds	r0, #1
 80202ec:	d129      	bne.n	8020342 <_printf_float+0x262>
 80202ee:	e753      	b.n	8020198 <_printf_float+0xb8>
 80202f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80202f2:	2b65      	cmp	r3, #101	@ 0x65
 80202f4:	d800      	bhi.n	80202f8 <_printf_float+0x218>
 80202f6:	e0da      	b.n	80204ae <_printf_float+0x3ce>
 80202f8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80202fa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80202fc:	2200      	movs	r2, #0
 80202fe:	2300      	movs	r3, #0
 8020300:	f7e0 f8d6 	bl	80004b0 <__aeabi_dcmpeq>
 8020304:	2800      	cmp	r0, #0
 8020306:	d033      	beq.n	8020370 <_printf_float+0x290>
 8020308:	2301      	movs	r3, #1
 802030a:	4a37      	ldr	r2, [pc, #220]	@ (80203e8 <_printf_float+0x308>)
 802030c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802030e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020310:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020312:	47a0      	blx	r4
 8020314:	3001      	adds	r0, #1
 8020316:	d100      	bne.n	802031a <_printf_float+0x23a>
 8020318:	e73e      	b.n	8020198 <_printf_float+0xb8>
 802031a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802031c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802031e:	42b3      	cmp	r3, r6
 8020320:	db02      	blt.n	8020328 <_printf_float+0x248>
 8020322:	682b      	ldr	r3, [r5, #0]
 8020324:	07db      	lsls	r3, r3, #31
 8020326:	d50c      	bpl.n	8020342 <_printf_float+0x262>
 8020328:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802032a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802032c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802032e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020330:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020332:	47a0      	blx	r4
 8020334:	2400      	movs	r4, #0
 8020336:	3001      	adds	r0, #1
 8020338:	d100      	bne.n	802033c <_printf_float+0x25c>
 802033a:	e72d      	b.n	8020198 <_printf_float+0xb8>
 802033c:	1e73      	subs	r3, r6, #1
 802033e:	42a3      	cmp	r3, r4
 8020340:	dc0a      	bgt.n	8020358 <_printf_float+0x278>
 8020342:	682b      	ldr	r3, [r5, #0]
 8020344:	079b      	lsls	r3, r3, #30
 8020346:	d500      	bpl.n	802034a <_printf_float+0x26a>
 8020348:	e105      	b.n	8020556 <_printf_float+0x476>
 802034a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802034c:	68e8      	ldr	r0, [r5, #12]
 802034e:	4298      	cmp	r0, r3
 8020350:	db00      	blt.n	8020354 <_printf_float+0x274>
 8020352:	e723      	b.n	802019c <_printf_float+0xbc>
 8020354:	0018      	movs	r0, r3
 8020356:	e721      	b.n	802019c <_printf_float+0xbc>
 8020358:	002a      	movs	r2, r5
 802035a:	2301      	movs	r3, #1
 802035c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802035e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020360:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020362:	321a      	adds	r2, #26
 8020364:	47b8      	blx	r7
 8020366:	3001      	adds	r0, #1
 8020368:	d100      	bne.n	802036c <_printf_float+0x28c>
 802036a:	e715      	b.n	8020198 <_printf_float+0xb8>
 802036c:	3401      	adds	r4, #1
 802036e:	e7e5      	b.n	802033c <_printf_float+0x25c>
 8020370:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020372:	2b00      	cmp	r3, #0
 8020374:	dc3a      	bgt.n	80203ec <_printf_float+0x30c>
 8020376:	2301      	movs	r3, #1
 8020378:	4a1b      	ldr	r2, [pc, #108]	@ (80203e8 <_printf_float+0x308>)
 802037a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802037c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802037e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020380:	47a0      	blx	r4
 8020382:	3001      	adds	r0, #1
 8020384:	d100      	bne.n	8020388 <_printf_float+0x2a8>
 8020386:	e707      	b.n	8020198 <_printf_float+0xb8>
 8020388:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802038a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802038c:	4333      	orrs	r3, r6
 802038e:	d102      	bne.n	8020396 <_printf_float+0x2b6>
 8020390:	682b      	ldr	r3, [r5, #0]
 8020392:	07db      	lsls	r3, r3, #31
 8020394:	d5d5      	bpl.n	8020342 <_printf_float+0x262>
 8020396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020398:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802039a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802039c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802039e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80203a0:	47a0      	blx	r4
 80203a2:	2300      	movs	r3, #0
 80203a4:	3001      	adds	r0, #1
 80203a6:	d100      	bne.n	80203aa <_printf_float+0x2ca>
 80203a8:	e6f6      	b.n	8020198 <_printf_float+0xb8>
 80203aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80203ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80203ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80203b0:	425b      	negs	r3, r3
 80203b2:	4293      	cmp	r3, r2
 80203b4:	dc01      	bgt.n	80203ba <_printf_float+0x2da>
 80203b6:	0033      	movs	r3, r6
 80203b8:	e792      	b.n	80202e0 <_printf_float+0x200>
 80203ba:	002a      	movs	r2, r5
 80203bc:	2301      	movs	r3, #1
 80203be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80203c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80203c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80203c4:	321a      	adds	r2, #26
 80203c6:	47a0      	blx	r4
 80203c8:	3001      	adds	r0, #1
 80203ca:	d100      	bne.n	80203ce <_printf_float+0x2ee>
 80203cc:	e6e4      	b.n	8020198 <_printf_float+0xb8>
 80203ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203d0:	3301      	adds	r3, #1
 80203d2:	e7ea      	b.n	80203aa <_printf_float+0x2ca>
 80203d4:	7fefffff 	.word	0x7fefffff
 80203d8:	08026e79 	.word	0x08026e79
 80203dc:	08026e7d 	.word	0x08026e7d
 80203e0:	08026e81 	.word	0x08026e81
 80203e4:	08026e85 	.word	0x08026e85
 80203e8:	08026e89 	.word	0x08026e89
 80203ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80203ee:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80203f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80203f2:	429e      	cmp	r6, r3
 80203f4:	dd00      	ble.n	80203f8 <_printf_float+0x318>
 80203f6:	001e      	movs	r6, r3
 80203f8:	2e00      	cmp	r6, #0
 80203fa:	dc31      	bgt.n	8020460 <_printf_float+0x380>
 80203fc:	43f3      	mvns	r3, r6
 80203fe:	2400      	movs	r4, #0
 8020400:	17db      	asrs	r3, r3, #31
 8020402:	4033      	ands	r3, r6
 8020404:	930e      	str	r3, [sp, #56]	@ 0x38
 8020406:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8020408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802040a:	1af3      	subs	r3, r6, r3
 802040c:	42a3      	cmp	r3, r4
 802040e:	dc30      	bgt.n	8020472 <_printf_float+0x392>
 8020410:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020412:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020414:	429a      	cmp	r2, r3
 8020416:	dc38      	bgt.n	802048a <_printf_float+0x3aa>
 8020418:	682b      	ldr	r3, [r5, #0]
 802041a:	07db      	lsls	r3, r3, #31
 802041c:	d435      	bmi.n	802048a <_printf_float+0x3aa>
 802041e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020422:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020424:	1b9b      	subs	r3, r3, r6
 8020426:	1b14      	subs	r4, r2, r4
 8020428:	429c      	cmp	r4, r3
 802042a:	dd00      	ble.n	802042e <_printf_float+0x34e>
 802042c:	001c      	movs	r4, r3
 802042e:	2c00      	cmp	r4, #0
 8020430:	dc34      	bgt.n	802049c <_printf_float+0x3bc>
 8020432:	43e3      	mvns	r3, r4
 8020434:	2600      	movs	r6, #0
 8020436:	17db      	asrs	r3, r3, #31
 8020438:	401c      	ands	r4, r3
 802043a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802043c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802043e:	1ad3      	subs	r3, r2, r3
 8020440:	1b1b      	subs	r3, r3, r4
 8020442:	42b3      	cmp	r3, r6
 8020444:	dc00      	bgt.n	8020448 <_printf_float+0x368>
 8020446:	e77c      	b.n	8020342 <_printf_float+0x262>
 8020448:	002a      	movs	r2, r5
 802044a:	2301      	movs	r3, #1
 802044c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802044e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020450:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020452:	321a      	adds	r2, #26
 8020454:	47b8      	blx	r7
 8020456:	3001      	adds	r0, #1
 8020458:	d100      	bne.n	802045c <_printf_float+0x37c>
 802045a:	e69d      	b.n	8020198 <_printf_float+0xb8>
 802045c:	3601      	adds	r6, #1
 802045e:	e7ec      	b.n	802043a <_printf_float+0x35a>
 8020460:	0033      	movs	r3, r6
 8020462:	003a      	movs	r2, r7
 8020464:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020468:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802046a:	47a0      	blx	r4
 802046c:	3001      	adds	r0, #1
 802046e:	d1c5      	bne.n	80203fc <_printf_float+0x31c>
 8020470:	e692      	b.n	8020198 <_printf_float+0xb8>
 8020472:	002a      	movs	r2, r5
 8020474:	2301      	movs	r3, #1
 8020476:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020478:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802047a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802047c:	321a      	adds	r2, #26
 802047e:	47b0      	blx	r6
 8020480:	3001      	adds	r0, #1
 8020482:	d100      	bne.n	8020486 <_printf_float+0x3a6>
 8020484:	e688      	b.n	8020198 <_printf_float+0xb8>
 8020486:	3401      	adds	r4, #1
 8020488:	e7bd      	b.n	8020406 <_printf_float+0x326>
 802048a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802048c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802048e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020490:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020492:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020494:	47a0      	blx	r4
 8020496:	3001      	adds	r0, #1
 8020498:	d1c1      	bne.n	802041e <_printf_float+0x33e>
 802049a:	e67d      	b.n	8020198 <_printf_float+0xb8>
 802049c:	19ba      	adds	r2, r7, r6
 802049e:	0023      	movs	r3, r4
 80204a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80204a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80204a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80204a6:	47b0      	blx	r6
 80204a8:	3001      	adds	r0, #1
 80204aa:	d1c2      	bne.n	8020432 <_printf_float+0x352>
 80204ac:	e674      	b.n	8020198 <_printf_float+0xb8>
 80204ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80204b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80204b2:	2b01      	cmp	r3, #1
 80204b4:	dc02      	bgt.n	80204bc <_printf_float+0x3dc>
 80204b6:	2301      	movs	r3, #1
 80204b8:	421a      	tst	r2, r3
 80204ba:	d039      	beq.n	8020530 <_printf_float+0x450>
 80204bc:	2301      	movs	r3, #1
 80204be:	003a      	movs	r2, r7
 80204c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80204c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80204c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80204c6:	47b0      	blx	r6
 80204c8:	3001      	adds	r0, #1
 80204ca:	d100      	bne.n	80204ce <_printf_float+0x3ee>
 80204cc:	e664      	b.n	8020198 <_printf_float+0xb8>
 80204ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80204d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80204d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80204d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80204d6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80204d8:	47b0      	blx	r6
 80204da:	3001      	adds	r0, #1
 80204dc:	d100      	bne.n	80204e0 <_printf_float+0x400>
 80204de:	e65b      	b.n	8020198 <_printf_float+0xb8>
 80204e0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80204e2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80204e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80204e6:	2200      	movs	r2, #0
 80204e8:	3b01      	subs	r3, #1
 80204ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80204ec:	2300      	movs	r3, #0
 80204ee:	f7df ffdf 	bl	80004b0 <__aeabi_dcmpeq>
 80204f2:	2800      	cmp	r0, #0
 80204f4:	d11a      	bne.n	802052c <_printf_float+0x44c>
 80204f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80204f8:	1c7a      	adds	r2, r7, #1
 80204fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80204fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80204fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020500:	47b0      	blx	r6
 8020502:	3001      	adds	r0, #1
 8020504:	d10e      	bne.n	8020524 <_printf_float+0x444>
 8020506:	e647      	b.n	8020198 <_printf_float+0xb8>
 8020508:	002a      	movs	r2, r5
 802050a:	2301      	movs	r3, #1
 802050c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802050e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020510:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020512:	321a      	adds	r2, #26
 8020514:	47b8      	blx	r7
 8020516:	3001      	adds	r0, #1
 8020518:	d100      	bne.n	802051c <_printf_float+0x43c>
 802051a:	e63d      	b.n	8020198 <_printf_float+0xb8>
 802051c:	3601      	adds	r6, #1
 802051e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020520:	429e      	cmp	r6, r3
 8020522:	dbf1      	blt.n	8020508 <_printf_float+0x428>
 8020524:	002a      	movs	r2, r5
 8020526:	0023      	movs	r3, r4
 8020528:	3250      	adds	r2, #80	@ 0x50
 802052a:	e6da      	b.n	80202e2 <_printf_float+0x202>
 802052c:	2600      	movs	r6, #0
 802052e:	e7f6      	b.n	802051e <_printf_float+0x43e>
 8020530:	003a      	movs	r2, r7
 8020532:	e7e2      	b.n	80204fa <_printf_float+0x41a>
 8020534:	002a      	movs	r2, r5
 8020536:	2301      	movs	r3, #1
 8020538:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802053a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802053c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802053e:	3219      	adds	r2, #25
 8020540:	47b0      	blx	r6
 8020542:	3001      	adds	r0, #1
 8020544:	d100      	bne.n	8020548 <_printf_float+0x468>
 8020546:	e627      	b.n	8020198 <_printf_float+0xb8>
 8020548:	3401      	adds	r4, #1
 802054a:	68eb      	ldr	r3, [r5, #12]
 802054c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802054e:	1a9b      	subs	r3, r3, r2
 8020550:	42a3      	cmp	r3, r4
 8020552:	dcef      	bgt.n	8020534 <_printf_float+0x454>
 8020554:	e6f9      	b.n	802034a <_printf_float+0x26a>
 8020556:	2400      	movs	r4, #0
 8020558:	e7f7      	b.n	802054a <_printf_float+0x46a>
 802055a:	46c0      	nop			@ (mov r8, r8)

0802055c <_printf_common>:
 802055c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802055e:	0016      	movs	r6, r2
 8020560:	9301      	str	r3, [sp, #4]
 8020562:	688a      	ldr	r2, [r1, #8]
 8020564:	690b      	ldr	r3, [r1, #16]
 8020566:	000c      	movs	r4, r1
 8020568:	9000      	str	r0, [sp, #0]
 802056a:	4293      	cmp	r3, r2
 802056c:	da00      	bge.n	8020570 <_printf_common+0x14>
 802056e:	0013      	movs	r3, r2
 8020570:	0022      	movs	r2, r4
 8020572:	6033      	str	r3, [r6, #0]
 8020574:	3243      	adds	r2, #67	@ 0x43
 8020576:	7812      	ldrb	r2, [r2, #0]
 8020578:	2a00      	cmp	r2, #0
 802057a:	d001      	beq.n	8020580 <_printf_common+0x24>
 802057c:	3301      	adds	r3, #1
 802057e:	6033      	str	r3, [r6, #0]
 8020580:	6823      	ldr	r3, [r4, #0]
 8020582:	069b      	lsls	r3, r3, #26
 8020584:	d502      	bpl.n	802058c <_printf_common+0x30>
 8020586:	6833      	ldr	r3, [r6, #0]
 8020588:	3302      	adds	r3, #2
 802058a:	6033      	str	r3, [r6, #0]
 802058c:	6822      	ldr	r2, [r4, #0]
 802058e:	2306      	movs	r3, #6
 8020590:	0015      	movs	r5, r2
 8020592:	401d      	ands	r5, r3
 8020594:	421a      	tst	r2, r3
 8020596:	d027      	beq.n	80205e8 <_printf_common+0x8c>
 8020598:	0023      	movs	r3, r4
 802059a:	3343      	adds	r3, #67	@ 0x43
 802059c:	781b      	ldrb	r3, [r3, #0]
 802059e:	1e5a      	subs	r2, r3, #1
 80205a0:	4193      	sbcs	r3, r2
 80205a2:	6822      	ldr	r2, [r4, #0]
 80205a4:	0692      	lsls	r2, r2, #26
 80205a6:	d430      	bmi.n	802060a <_printf_common+0xae>
 80205a8:	0022      	movs	r2, r4
 80205aa:	9901      	ldr	r1, [sp, #4]
 80205ac:	9800      	ldr	r0, [sp, #0]
 80205ae:	9d08      	ldr	r5, [sp, #32]
 80205b0:	3243      	adds	r2, #67	@ 0x43
 80205b2:	47a8      	blx	r5
 80205b4:	3001      	adds	r0, #1
 80205b6:	d025      	beq.n	8020604 <_printf_common+0xa8>
 80205b8:	2206      	movs	r2, #6
 80205ba:	6823      	ldr	r3, [r4, #0]
 80205bc:	2500      	movs	r5, #0
 80205be:	4013      	ands	r3, r2
 80205c0:	2b04      	cmp	r3, #4
 80205c2:	d105      	bne.n	80205d0 <_printf_common+0x74>
 80205c4:	6833      	ldr	r3, [r6, #0]
 80205c6:	68e5      	ldr	r5, [r4, #12]
 80205c8:	1aed      	subs	r5, r5, r3
 80205ca:	43eb      	mvns	r3, r5
 80205cc:	17db      	asrs	r3, r3, #31
 80205ce:	401d      	ands	r5, r3
 80205d0:	68a3      	ldr	r3, [r4, #8]
 80205d2:	6922      	ldr	r2, [r4, #16]
 80205d4:	4293      	cmp	r3, r2
 80205d6:	dd01      	ble.n	80205dc <_printf_common+0x80>
 80205d8:	1a9b      	subs	r3, r3, r2
 80205da:	18ed      	adds	r5, r5, r3
 80205dc:	2600      	movs	r6, #0
 80205de:	42b5      	cmp	r5, r6
 80205e0:	d120      	bne.n	8020624 <_printf_common+0xc8>
 80205e2:	2000      	movs	r0, #0
 80205e4:	e010      	b.n	8020608 <_printf_common+0xac>
 80205e6:	3501      	adds	r5, #1
 80205e8:	68e3      	ldr	r3, [r4, #12]
 80205ea:	6832      	ldr	r2, [r6, #0]
 80205ec:	1a9b      	subs	r3, r3, r2
 80205ee:	42ab      	cmp	r3, r5
 80205f0:	ddd2      	ble.n	8020598 <_printf_common+0x3c>
 80205f2:	0022      	movs	r2, r4
 80205f4:	2301      	movs	r3, #1
 80205f6:	9901      	ldr	r1, [sp, #4]
 80205f8:	9800      	ldr	r0, [sp, #0]
 80205fa:	9f08      	ldr	r7, [sp, #32]
 80205fc:	3219      	adds	r2, #25
 80205fe:	47b8      	blx	r7
 8020600:	3001      	adds	r0, #1
 8020602:	d1f0      	bne.n	80205e6 <_printf_common+0x8a>
 8020604:	2001      	movs	r0, #1
 8020606:	4240      	negs	r0, r0
 8020608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802060a:	2030      	movs	r0, #48	@ 0x30
 802060c:	18e1      	adds	r1, r4, r3
 802060e:	3143      	adds	r1, #67	@ 0x43
 8020610:	7008      	strb	r0, [r1, #0]
 8020612:	0021      	movs	r1, r4
 8020614:	1c5a      	adds	r2, r3, #1
 8020616:	3145      	adds	r1, #69	@ 0x45
 8020618:	7809      	ldrb	r1, [r1, #0]
 802061a:	18a2      	adds	r2, r4, r2
 802061c:	3243      	adds	r2, #67	@ 0x43
 802061e:	3302      	adds	r3, #2
 8020620:	7011      	strb	r1, [r2, #0]
 8020622:	e7c1      	b.n	80205a8 <_printf_common+0x4c>
 8020624:	0022      	movs	r2, r4
 8020626:	2301      	movs	r3, #1
 8020628:	9901      	ldr	r1, [sp, #4]
 802062a:	9800      	ldr	r0, [sp, #0]
 802062c:	9f08      	ldr	r7, [sp, #32]
 802062e:	321a      	adds	r2, #26
 8020630:	47b8      	blx	r7
 8020632:	3001      	adds	r0, #1
 8020634:	d0e6      	beq.n	8020604 <_printf_common+0xa8>
 8020636:	3601      	adds	r6, #1
 8020638:	e7d1      	b.n	80205de <_printf_common+0x82>
	...

0802063c <_printf_i>:
 802063c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802063e:	b08b      	sub	sp, #44	@ 0x2c
 8020640:	9206      	str	r2, [sp, #24]
 8020642:	000a      	movs	r2, r1
 8020644:	3243      	adds	r2, #67	@ 0x43
 8020646:	9307      	str	r3, [sp, #28]
 8020648:	9005      	str	r0, [sp, #20]
 802064a:	9203      	str	r2, [sp, #12]
 802064c:	7e0a      	ldrb	r2, [r1, #24]
 802064e:	000c      	movs	r4, r1
 8020650:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020652:	2a78      	cmp	r2, #120	@ 0x78
 8020654:	d809      	bhi.n	802066a <_printf_i+0x2e>
 8020656:	2a62      	cmp	r2, #98	@ 0x62
 8020658:	d80b      	bhi.n	8020672 <_printf_i+0x36>
 802065a:	2a00      	cmp	r2, #0
 802065c:	d100      	bne.n	8020660 <_printf_i+0x24>
 802065e:	e0bc      	b.n	80207da <_printf_i+0x19e>
 8020660:	497b      	ldr	r1, [pc, #492]	@ (8020850 <_printf_i+0x214>)
 8020662:	9104      	str	r1, [sp, #16]
 8020664:	2a58      	cmp	r2, #88	@ 0x58
 8020666:	d100      	bne.n	802066a <_printf_i+0x2e>
 8020668:	e090      	b.n	802078c <_printf_i+0x150>
 802066a:	0025      	movs	r5, r4
 802066c:	3542      	adds	r5, #66	@ 0x42
 802066e:	702a      	strb	r2, [r5, #0]
 8020670:	e022      	b.n	80206b8 <_printf_i+0x7c>
 8020672:	0010      	movs	r0, r2
 8020674:	3863      	subs	r0, #99	@ 0x63
 8020676:	2815      	cmp	r0, #21
 8020678:	d8f7      	bhi.n	802066a <_printf_i+0x2e>
 802067a:	f7df fd89 	bl	8000190 <__gnu_thumb1_case_shi>
 802067e:	0016      	.short	0x0016
 8020680:	fff6001f 	.word	0xfff6001f
 8020684:	fff6fff6 	.word	0xfff6fff6
 8020688:	001ffff6 	.word	0x001ffff6
 802068c:	fff6fff6 	.word	0xfff6fff6
 8020690:	fff6fff6 	.word	0xfff6fff6
 8020694:	003600a1 	.word	0x003600a1
 8020698:	fff60080 	.word	0xfff60080
 802069c:	00b2fff6 	.word	0x00b2fff6
 80206a0:	0036fff6 	.word	0x0036fff6
 80206a4:	fff6fff6 	.word	0xfff6fff6
 80206a8:	0084      	.short	0x0084
 80206aa:	0025      	movs	r5, r4
 80206ac:	681a      	ldr	r2, [r3, #0]
 80206ae:	3542      	adds	r5, #66	@ 0x42
 80206b0:	1d11      	adds	r1, r2, #4
 80206b2:	6019      	str	r1, [r3, #0]
 80206b4:	6813      	ldr	r3, [r2, #0]
 80206b6:	702b      	strb	r3, [r5, #0]
 80206b8:	2301      	movs	r3, #1
 80206ba:	e0a0      	b.n	80207fe <_printf_i+0x1c2>
 80206bc:	6818      	ldr	r0, [r3, #0]
 80206be:	6809      	ldr	r1, [r1, #0]
 80206c0:	1d02      	adds	r2, r0, #4
 80206c2:	060d      	lsls	r5, r1, #24
 80206c4:	d50b      	bpl.n	80206de <_printf_i+0xa2>
 80206c6:	6806      	ldr	r6, [r0, #0]
 80206c8:	601a      	str	r2, [r3, #0]
 80206ca:	2e00      	cmp	r6, #0
 80206cc:	da03      	bge.n	80206d6 <_printf_i+0x9a>
 80206ce:	232d      	movs	r3, #45	@ 0x2d
 80206d0:	9a03      	ldr	r2, [sp, #12]
 80206d2:	4276      	negs	r6, r6
 80206d4:	7013      	strb	r3, [r2, #0]
 80206d6:	4b5e      	ldr	r3, [pc, #376]	@ (8020850 <_printf_i+0x214>)
 80206d8:	270a      	movs	r7, #10
 80206da:	9304      	str	r3, [sp, #16]
 80206dc:	e018      	b.n	8020710 <_printf_i+0xd4>
 80206de:	6806      	ldr	r6, [r0, #0]
 80206e0:	601a      	str	r2, [r3, #0]
 80206e2:	0649      	lsls	r1, r1, #25
 80206e4:	d5f1      	bpl.n	80206ca <_printf_i+0x8e>
 80206e6:	b236      	sxth	r6, r6
 80206e8:	e7ef      	b.n	80206ca <_printf_i+0x8e>
 80206ea:	6808      	ldr	r0, [r1, #0]
 80206ec:	6819      	ldr	r1, [r3, #0]
 80206ee:	c940      	ldmia	r1!, {r6}
 80206f0:	0605      	lsls	r5, r0, #24
 80206f2:	d402      	bmi.n	80206fa <_printf_i+0xbe>
 80206f4:	0640      	lsls	r0, r0, #25
 80206f6:	d500      	bpl.n	80206fa <_printf_i+0xbe>
 80206f8:	b2b6      	uxth	r6, r6
 80206fa:	6019      	str	r1, [r3, #0]
 80206fc:	4b54      	ldr	r3, [pc, #336]	@ (8020850 <_printf_i+0x214>)
 80206fe:	270a      	movs	r7, #10
 8020700:	9304      	str	r3, [sp, #16]
 8020702:	2a6f      	cmp	r2, #111	@ 0x6f
 8020704:	d100      	bne.n	8020708 <_printf_i+0xcc>
 8020706:	3f02      	subs	r7, #2
 8020708:	0023      	movs	r3, r4
 802070a:	2200      	movs	r2, #0
 802070c:	3343      	adds	r3, #67	@ 0x43
 802070e:	701a      	strb	r2, [r3, #0]
 8020710:	6863      	ldr	r3, [r4, #4]
 8020712:	60a3      	str	r3, [r4, #8]
 8020714:	2b00      	cmp	r3, #0
 8020716:	db03      	blt.n	8020720 <_printf_i+0xe4>
 8020718:	2104      	movs	r1, #4
 802071a:	6822      	ldr	r2, [r4, #0]
 802071c:	438a      	bics	r2, r1
 802071e:	6022      	str	r2, [r4, #0]
 8020720:	2e00      	cmp	r6, #0
 8020722:	d102      	bne.n	802072a <_printf_i+0xee>
 8020724:	9d03      	ldr	r5, [sp, #12]
 8020726:	2b00      	cmp	r3, #0
 8020728:	d00c      	beq.n	8020744 <_printf_i+0x108>
 802072a:	9d03      	ldr	r5, [sp, #12]
 802072c:	0030      	movs	r0, r6
 802072e:	0039      	movs	r1, r7
 8020730:	f7df fdbe 	bl	80002b0 <__aeabi_uidivmod>
 8020734:	9b04      	ldr	r3, [sp, #16]
 8020736:	3d01      	subs	r5, #1
 8020738:	5c5b      	ldrb	r3, [r3, r1]
 802073a:	702b      	strb	r3, [r5, #0]
 802073c:	0033      	movs	r3, r6
 802073e:	0006      	movs	r6, r0
 8020740:	429f      	cmp	r7, r3
 8020742:	d9f3      	bls.n	802072c <_printf_i+0xf0>
 8020744:	2f08      	cmp	r7, #8
 8020746:	d109      	bne.n	802075c <_printf_i+0x120>
 8020748:	6823      	ldr	r3, [r4, #0]
 802074a:	07db      	lsls	r3, r3, #31
 802074c:	d506      	bpl.n	802075c <_printf_i+0x120>
 802074e:	6862      	ldr	r2, [r4, #4]
 8020750:	6923      	ldr	r3, [r4, #16]
 8020752:	429a      	cmp	r2, r3
 8020754:	dc02      	bgt.n	802075c <_printf_i+0x120>
 8020756:	2330      	movs	r3, #48	@ 0x30
 8020758:	3d01      	subs	r5, #1
 802075a:	702b      	strb	r3, [r5, #0]
 802075c:	9b03      	ldr	r3, [sp, #12]
 802075e:	1b5b      	subs	r3, r3, r5
 8020760:	6123      	str	r3, [r4, #16]
 8020762:	9b07      	ldr	r3, [sp, #28]
 8020764:	0021      	movs	r1, r4
 8020766:	9300      	str	r3, [sp, #0]
 8020768:	9805      	ldr	r0, [sp, #20]
 802076a:	9b06      	ldr	r3, [sp, #24]
 802076c:	aa09      	add	r2, sp, #36	@ 0x24
 802076e:	f7ff fef5 	bl	802055c <_printf_common>
 8020772:	3001      	adds	r0, #1
 8020774:	d148      	bne.n	8020808 <_printf_i+0x1cc>
 8020776:	2001      	movs	r0, #1
 8020778:	4240      	negs	r0, r0
 802077a:	b00b      	add	sp, #44	@ 0x2c
 802077c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802077e:	2220      	movs	r2, #32
 8020780:	6809      	ldr	r1, [r1, #0]
 8020782:	430a      	orrs	r2, r1
 8020784:	6022      	str	r2, [r4, #0]
 8020786:	2278      	movs	r2, #120	@ 0x78
 8020788:	4932      	ldr	r1, [pc, #200]	@ (8020854 <_printf_i+0x218>)
 802078a:	9104      	str	r1, [sp, #16]
 802078c:	0021      	movs	r1, r4
 802078e:	3145      	adds	r1, #69	@ 0x45
 8020790:	700a      	strb	r2, [r1, #0]
 8020792:	6819      	ldr	r1, [r3, #0]
 8020794:	6822      	ldr	r2, [r4, #0]
 8020796:	c940      	ldmia	r1!, {r6}
 8020798:	0610      	lsls	r0, r2, #24
 802079a:	d402      	bmi.n	80207a2 <_printf_i+0x166>
 802079c:	0650      	lsls	r0, r2, #25
 802079e:	d500      	bpl.n	80207a2 <_printf_i+0x166>
 80207a0:	b2b6      	uxth	r6, r6
 80207a2:	6019      	str	r1, [r3, #0]
 80207a4:	07d3      	lsls	r3, r2, #31
 80207a6:	d502      	bpl.n	80207ae <_printf_i+0x172>
 80207a8:	2320      	movs	r3, #32
 80207aa:	4313      	orrs	r3, r2
 80207ac:	6023      	str	r3, [r4, #0]
 80207ae:	2e00      	cmp	r6, #0
 80207b0:	d001      	beq.n	80207b6 <_printf_i+0x17a>
 80207b2:	2710      	movs	r7, #16
 80207b4:	e7a8      	b.n	8020708 <_printf_i+0xcc>
 80207b6:	2220      	movs	r2, #32
 80207b8:	6823      	ldr	r3, [r4, #0]
 80207ba:	4393      	bics	r3, r2
 80207bc:	6023      	str	r3, [r4, #0]
 80207be:	e7f8      	b.n	80207b2 <_printf_i+0x176>
 80207c0:	681a      	ldr	r2, [r3, #0]
 80207c2:	680d      	ldr	r5, [r1, #0]
 80207c4:	1d10      	adds	r0, r2, #4
 80207c6:	6949      	ldr	r1, [r1, #20]
 80207c8:	6018      	str	r0, [r3, #0]
 80207ca:	6813      	ldr	r3, [r2, #0]
 80207cc:	062e      	lsls	r6, r5, #24
 80207ce:	d501      	bpl.n	80207d4 <_printf_i+0x198>
 80207d0:	6019      	str	r1, [r3, #0]
 80207d2:	e002      	b.n	80207da <_printf_i+0x19e>
 80207d4:	066d      	lsls	r5, r5, #25
 80207d6:	d5fb      	bpl.n	80207d0 <_printf_i+0x194>
 80207d8:	8019      	strh	r1, [r3, #0]
 80207da:	2300      	movs	r3, #0
 80207dc:	9d03      	ldr	r5, [sp, #12]
 80207de:	6123      	str	r3, [r4, #16]
 80207e0:	e7bf      	b.n	8020762 <_printf_i+0x126>
 80207e2:	681a      	ldr	r2, [r3, #0]
 80207e4:	1d11      	adds	r1, r2, #4
 80207e6:	6019      	str	r1, [r3, #0]
 80207e8:	6815      	ldr	r5, [r2, #0]
 80207ea:	2100      	movs	r1, #0
 80207ec:	0028      	movs	r0, r5
 80207ee:	6862      	ldr	r2, [r4, #4]
 80207f0:	f000 fb9d 	bl	8020f2e <memchr>
 80207f4:	2800      	cmp	r0, #0
 80207f6:	d001      	beq.n	80207fc <_printf_i+0x1c0>
 80207f8:	1b40      	subs	r0, r0, r5
 80207fa:	6060      	str	r0, [r4, #4]
 80207fc:	6863      	ldr	r3, [r4, #4]
 80207fe:	6123      	str	r3, [r4, #16]
 8020800:	2300      	movs	r3, #0
 8020802:	9a03      	ldr	r2, [sp, #12]
 8020804:	7013      	strb	r3, [r2, #0]
 8020806:	e7ac      	b.n	8020762 <_printf_i+0x126>
 8020808:	002a      	movs	r2, r5
 802080a:	6923      	ldr	r3, [r4, #16]
 802080c:	9906      	ldr	r1, [sp, #24]
 802080e:	9805      	ldr	r0, [sp, #20]
 8020810:	9d07      	ldr	r5, [sp, #28]
 8020812:	47a8      	blx	r5
 8020814:	3001      	adds	r0, #1
 8020816:	d0ae      	beq.n	8020776 <_printf_i+0x13a>
 8020818:	6823      	ldr	r3, [r4, #0]
 802081a:	079b      	lsls	r3, r3, #30
 802081c:	d415      	bmi.n	802084a <_printf_i+0x20e>
 802081e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020820:	68e0      	ldr	r0, [r4, #12]
 8020822:	4298      	cmp	r0, r3
 8020824:	daa9      	bge.n	802077a <_printf_i+0x13e>
 8020826:	0018      	movs	r0, r3
 8020828:	e7a7      	b.n	802077a <_printf_i+0x13e>
 802082a:	0022      	movs	r2, r4
 802082c:	2301      	movs	r3, #1
 802082e:	9906      	ldr	r1, [sp, #24]
 8020830:	9805      	ldr	r0, [sp, #20]
 8020832:	9e07      	ldr	r6, [sp, #28]
 8020834:	3219      	adds	r2, #25
 8020836:	47b0      	blx	r6
 8020838:	3001      	adds	r0, #1
 802083a:	d09c      	beq.n	8020776 <_printf_i+0x13a>
 802083c:	3501      	adds	r5, #1
 802083e:	68e3      	ldr	r3, [r4, #12]
 8020840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020842:	1a9b      	subs	r3, r3, r2
 8020844:	42ab      	cmp	r3, r5
 8020846:	dcf0      	bgt.n	802082a <_printf_i+0x1ee>
 8020848:	e7e9      	b.n	802081e <_printf_i+0x1e2>
 802084a:	2500      	movs	r5, #0
 802084c:	e7f7      	b.n	802083e <_printf_i+0x202>
 802084e:	46c0      	nop			@ (mov r8, r8)
 8020850:	08026e8b 	.word	0x08026e8b
 8020854:	08026e9c 	.word	0x08026e9c

08020858 <std>:
 8020858:	2300      	movs	r3, #0
 802085a:	b510      	push	{r4, lr}
 802085c:	0004      	movs	r4, r0
 802085e:	6003      	str	r3, [r0, #0]
 8020860:	6043      	str	r3, [r0, #4]
 8020862:	6083      	str	r3, [r0, #8]
 8020864:	8181      	strh	r1, [r0, #12]
 8020866:	6643      	str	r3, [r0, #100]	@ 0x64
 8020868:	81c2      	strh	r2, [r0, #14]
 802086a:	6103      	str	r3, [r0, #16]
 802086c:	6143      	str	r3, [r0, #20]
 802086e:	6183      	str	r3, [r0, #24]
 8020870:	0019      	movs	r1, r3
 8020872:	2208      	movs	r2, #8
 8020874:	305c      	adds	r0, #92	@ 0x5c
 8020876:	f000 fa89 	bl	8020d8c <memset>
 802087a:	4b0b      	ldr	r3, [pc, #44]	@ (80208a8 <std+0x50>)
 802087c:	6224      	str	r4, [r4, #32]
 802087e:	6263      	str	r3, [r4, #36]	@ 0x24
 8020880:	4b0a      	ldr	r3, [pc, #40]	@ (80208ac <std+0x54>)
 8020882:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020884:	4b0a      	ldr	r3, [pc, #40]	@ (80208b0 <std+0x58>)
 8020886:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020888:	4b0a      	ldr	r3, [pc, #40]	@ (80208b4 <std+0x5c>)
 802088a:	6323      	str	r3, [r4, #48]	@ 0x30
 802088c:	4b0a      	ldr	r3, [pc, #40]	@ (80208b8 <std+0x60>)
 802088e:	429c      	cmp	r4, r3
 8020890:	d005      	beq.n	802089e <std+0x46>
 8020892:	4b0a      	ldr	r3, [pc, #40]	@ (80208bc <std+0x64>)
 8020894:	429c      	cmp	r4, r3
 8020896:	d002      	beq.n	802089e <std+0x46>
 8020898:	4b09      	ldr	r3, [pc, #36]	@ (80208c0 <std+0x68>)
 802089a:	429c      	cmp	r4, r3
 802089c:	d103      	bne.n	80208a6 <std+0x4e>
 802089e:	0020      	movs	r0, r4
 80208a0:	3058      	adds	r0, #88	@ 0x58
 80208a2:	f000 fb41 	bl	8020f28 <__retarget_lock_init_recursive>
 80208a6:	bd10      	pop	{r4, pc}
 80208a8:	08020b01 	.word	0x08020b01
 80208ac:	08020b29 	.word	0x08020b29
 80208b0:	08020b61 	.word	0x08020b61
 80208b4:	08020b8d 	.word	0x08020b8d
 80208b8:	200033b0 	.word	0x200033b0
 80208bc:	20003418 	.word	0x20003418
 80208c0:	20003480 	.word	0x20003480

080208c4 <stdio_exit_handler>:
 80208c4:	b510      	push	{r4, lr}
 80208c6:	4a03      	ldr	r2, [pc, #12]	@ (80208d4 <stdio_exit_handler+0x10>)
 80208c8:	4903      	ldr	r1, [pc, #12]	@ (80208d8 <stdio_exit_handler+0x14>)
 80208ca:	4804      	ldr	r0, [pc, #16]	@ (80208dc <stdio_exit_handler+0x18>)
 80208cc:	f000 f86c 	bl	80209a8 <_fwalk_sglue>
 80208d0:	bd10      	pop	{r4, pc}
 80208d2:	46c0      	nop			@ (mov r8, r8)
 80208d4:	20000254 	.word	0x20000254
 80208d8:	0802354d 	.word	0x0802354d
 80208dc:	200003d0 	.word	0x200003d0

080208e0 <cleanup_stdio>:
 80208e0:	6841      	ldr	r1, [r0, #4]
 80208e2:	4b0b      	ldr	r3, [pc, #44]	@ (8020910 <cleanup_stdio+0x30>)
 80208e4:	b510      	push	{r4, lr}
 80208e6:	0004      	movs	r4, r0
 80208e8:	4299      	cmp	r1, r3
 80208ea:	d001      	beq.n	80208f0 <cleanup_stdio+0x10>
 80208ec:	f002 fe2e 	bl	802354c <_fflush_r>
 80208f0:	68a1      	ldr	r1, [r4, #8]
 80208f2:	4b08      	ldr	r3, [pc, #32]	@ (8020914 <cleanup_stdio+0x34>)
 80208f4:	4299      	cmp	r1, r3
 80208f6:	d002      	beq.n	80208fe <cleanup_stdio+0x1e>
 80208f8:	0020      	movs	r0, r4
 80208fa:	f002 fe27 	bl	802354c <_fflush_r>
 80208fe:	68e1      	ldr	r1, [r4, #12]
 8020900:	4b05      	ldr	r3, [pc, #20]	@ (8020918 <cleanup_stdio+0x38>)
 8020902:	4299      	cmp	r1, r3
 8020904:	d002      	beq.n	802090c <cleanup_stdio+0x2c>
 8020906:	0020      	movs	r0, r4
 8020908:	f002 fe20 	bl	802354c <_fflush_r>
 802090c:	bd10      	pop	{r4, pc}
 802090e:	46c0      	nop			@ (mov r8, r8)
 8020910:	200033b0 	.word	0x200033b0
 8020914:	20003418 	.word	0x20003418
 8020918:	20003480 	.word	0x20003480

0802091c <global_stdio_init.part.0>:
 802091c:	b510      	push	{r4, lr}
 802091e:	4b09      	ldr	r3, [pc, #36]	@ (8020944 <global_stdio_init.part.0+0x28>)
 8020920:	4a09      	ldr	r2, [pc, #36]	@ (8020948 <global_stdio_init.part.0+0x2c>)
 8020922:	2104      	movs	r1, #4
 8020924:	601a      	str	r2, [r3, #0]
 8020926:	4809      	ldr	r0, [pc, #36]	@ (802094c <global_stdio_init.part.0+0x30>)
 8020928:	2200      	movs	r2, #0
 802092a:	f7ff ff95 	bl	8020858 <std>
 802092e:	2201      	movs	r2, #1
 8020930:	2109      	movs	r1, #9
 8020932:	4807      	ldr	r0, [pc, #28]	@ (8020950 <global_stdio_init.part.0+0x34>)
 8020934:	f7ff ff90 	bl	8020858 <std>
 8020938:	2202      	movs	r2, #2
 802093a:	2112      	movs	r1, #18
 802093c:	4805      	ldr	r0, [pc, #20]	@ (8020954 <global_stdio_init.part.0+0x38>)
 802093e:	f7ff ff8b 	bl	8020858 <std>
 8020942:	bd10      	pop	{r4, pc}
 8020944:	200034e8 	.word	0x200034e8
 8020948:	080208c5 	.word	0x080208c5
 802094c:	200033b0 	.word	0x200033b0
 8020950:	20003418 	.word	0x20003418
 8020954:	20003480 	.word	0x20003480

08020958 <__sfp_lock_acquire>:
 8020958:	b510      	push	{r4, lr}
 802095a:	4802      	ldr	r0, [pc, #8]	@ (8020964 <__sfp_lock_acquire+0xc>)
 802095c:	f000 fae5 	bl	8020f2a <__retarget_lock_acquire_recursive>
 8020960:	bd10      	pop	{r4, pc}
 8020962:	46c0      	nop			@ (mov r8, r8)
 8020964:	200034f1 	.word	0x200034f1

08020968 <__sfp_lock_release>:
 8020968:	b510      	push	{r4, lr}
 802096a:	4802      	ldr	r0, [pc, #8]	@ (8020974 <__sfp_lock_release+0xc>)
 802096c:	f000 fade 	bl	8020f2c <__retarget_lock_release_recursive>
 8020970:	bd10      	pop	{r4, pc}
 8020972:	46c0      	nop			@ (mov r8, r8)
 8020974:	200034f1 	.word	0x200034f1

08020978 <__sinit>:
 8020978:	b510      	push	{r4, lr}
 802097a:	0004      	movs	r4, r0
 802097c:	f7ff ffec 	bl	8020958 <__sfp_lock_acquire>
 8020980:	6a23      	ldr	r3, [r4, #32]
 8020982:	2b00      	cmp	r3, #0
 8020984:	d002      	beq.n	802098c <__sinit+0x14>
 8020986:	f7ff ffef 	bl	8020968 <__sfp_lock_release>
 802098a:	bd10      	pop	{r4, pc}
 802098c:	4b04      	ldr	r3, [pc, #16]	@ (80209a0 <__sinit+0x28>)
 802098e:	6223      	str	r3, [r4, #32]
 8020990:	4b04      	ldr	r3, [pc, #16]	@ (80209a4 <__sinit+0x2c>)
 8020992:	681b      	ldr	r3, [r3, #0]
 8020994:	2b00      	cmp	r3, #0
 8020996:	d1f6      	bne.n	8020986 <__sinit+0xe>
 8020998:	f7ff ffc0 	bl	802091c <global_stdio_init.part.0>
 802099c:	e7f3      	b.n	8020986 <__sinit+0xe>
 802099e:	46c0      	nop			@ (mov r8, r8)
 80209a0:	080208e1 	.word	0x080208e1
 80209a4:	200034e8 	.word	0x200034e8

080209a8 <_fwalk_sglue>:
 80209a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80209aa:	0014      	movs	r4, r2
 80209ac:	2600      	movs	r6, #0
 80209ae:	9000      	str	r0, [sp, #0]
 80209b0:	9101      	str	r1, [sp, #4]
 80209b2:	68a5      	ldr	r5, [r4, #8]
 80209b4:	6867      	ldr	r7, [r4, #4]
 80209b6:	3f01      	subs	r7, #1
 80209b8:	d504      	bpl.n	80209c4 <_fwalk_sglue+0x1c>
 80209ba:	6824      	ldr	r4, [r4, #0]
 80209bc:	2c00      	cmp	r4, #0
 80209be:	d1f8      	bne.n	80209b2 <_fwalk_sglue+0xa>
 80209c0:	0030      	movs	r0, r6
 80209c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80209c4:	89ab      	ldrh	r3, [r5, #12]
 80209c6:	2b01      	cmp	r3, #1
 80209c8:	d908      	bls.n	80209dc <_fwalk_sglue+0x34>
 80209ca:	220e      	movs	r2, #14
 80209cc:	5eab      	ldrsh	r3, [r5, r2]
 80209ce:	3301      	adds	r3, #1
 80209d0:	d004      	beq.n	80209dc <_fwalk_sglue+0x34>
 80209d2:	0029      	movs	r1, r5
 80209d4:	9800      	ldr	r0, [sp, #0]
 80209d6:	9b01      	ldr	r3, [sp, #4]
 80209d8:	4798      	blx	r3
 80209da:	4306      	orrs	r6, r0
 80209dc:	3568      	adds	r5, #104	@ 0x68
 80209de:	e7ea      	b.n	80209b6 <_fwalk_sglue+0xe>

080209e0 <iprintf>:
 80209e0:	b40f      	push	{r0, r1, r2, r3}
 80209e2:	b507      	push	{r0, r1, r2, lr}
 80209e4:	4905      	ldr	r1, [pc, #20]	@ (80209fc <iprintf+0x1c>)
 80209e6:	ab04      	add	r3, sp, #16
 80209e8:	6808      	ldr	r0, [r1, #0]
 80209ea:	cb04      	ldmia	r3!, {r2}
 80209ec:	6881      	ldr	r1, [r0, #8]
 80209ee:	9301      	str	r3, [sp, #4]
 80209f0:	f002 fc0a 	bl	8023208 <_vfiprintf_r>
 80209f4:	b003      	add	sp, #12
 80209f6:	bc08      	pop	{r3}
 80209f8:	b004      	add	sp, #16
 80209fa:	4718      	bx	r3
 80209fc:	200003cc 	.word	0x200003cc

08020a00 <_puts_r>:
 8020a00:	6a03      	ldr	r3, [r0, #32]
 8020a02:	b570      	push	{r4, r5, r6, lr}
 8020a04:	0005      	movs	r5, r0
 8020a06:	000e      	movs	r6, r1
 8020a08:	6884      	ldr	r4, [r0, #8]
 8020a0a:	2b00      	cmp	r3, #0
 8020a0c:	d101      	bne.n	8020a12 <_puts_r+0x12>
 8020a0e:	f7ff ffb3 	bl	8020978 <__sinit>
 8020a12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020a14:	07db      	lsls	r3, r3, #31
 8020a16:	d405      	bmi.n	8020a24 <_puts_r+0x24>
 8020a18:	89a3      	ldrh	r3, [r4, #12]
 8020a1a:	059b      	lsls	r3, r3, #22
 8020a1c:	d402      	bmi.n	8020a24 <_puts_r+0x24>
 8020a1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020a20:	f000 fa83 	bl	8020f2a <__retarget_lock_acquire_recursive>
 8020a24:	89a3      	ldrh	r3, [r4, #12]
 8020a26:	071b      	lsls	r3, r3, #28
 8020a28:	d502      	bpl.n	8020a30 <_puts_r+0x30>
 8020a2a:	6923      	ldr	r3, [r4, #16]
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d11f      	bne.n	8020a70 <_puts_r+0x70>
 8020a30:	0021      	movs	r1, r4
 8020a32:	0028      	movs	r0, r5
 8020a34:	f000 f94c 	bl	8020cd0 <__swsetup_r>
 8020a38:	2800      	cmp	r0, #0
 8020a3a:	d019      	beq.n	8020a70 <_puts_r+0x70>
 8020a3c:	2501      	movs	r5, #1
 8020a3e:	426d      	negs	r5, r5
 8020a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020a42:	07db      	lsls	r3, r3, #31
 8020a44:	d405      	bmi.n	8020a52 <_puts_r+0x52>
 8020a46:	89a3      	ldrh	r3, [r4, #12]
 8020a48:	059b      	lsls	r3, r3, #22
 8020a4a:	d402      	bmi.n	8020a52 <_puts_r+0x52>
 8020a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020a4e:	f000 fa6d 	bl	8020f2c <__retarget_lock_release_recursive>
 8020a52:	0028      	movs	r0, r5
 8020a54:	bd70      	pop	{r4, r5, r6, pc}
 8020a56:	3601      	adds	r6, #1
 8020a58:	60a3      	str	r3, [r4, #8]
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	da04      	bge.n	8020a68 <_puts_r+0x68>
 8020a5e:	69a2      	ldr	r2, [r4, #24]
 8020a60:	429a      	cmp	r2, r3
 8020a62:	dc16      	bgt.n	8020a92 <_puts_r+0x92>
 8020a64:	290a      	cmp	r1, #10
 8020a66:	d014      	beq.n	8020a92 <_puts_r+0x92>
 8020a68:	6823      	ldr	r3, [r4, #0]
 8020a6a:	1c5a      	adds	r2, r3, #1
 8020a6c:	6022      	str	r2, [r4, #0]
 8020a6e:	7019      	strb	r1, [r3, #0]
 8020a70:	68a3      	ldr	r3, [r4, #8]
 8020a72:	7831      	ldrb	r1, [r6, #0]
 8020a74:	3b01      	subs	r3, #1
 8020a76:	2900      	cmp	r1, #0
 8020a78:	d1ed      	bne.n	8020a56 <_puts_r+0x56>
 8020a7a:	60a3      	str	r3, [r4, #8]
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	da0f      	bge.n	8020aa0 <_puts_r+0xa0>
 8020a80:	0022      	movs	r2, r4
 8020a82:	0028      	movs	r0, r5
 8020a84:	310a      	adds	r1, #10
 8020a86:	f000 f8e1 	bl	8020c4c <__swbuf_r>
 8020a8a:	3001      	adds	r0, #1
 8020a8c:	d0d6      	beq.n	8020a3c <_puts_r+0x3c>
 8020a8e:	250a      	movs	r5, #10
 8020a90:	e7d6      	b.n	8020a40 <_puts_r+0x40>
 8020a92:	0022      	movs	r2, r4
 8020a94:	0028      	movs	r0, r5
 8020a96:	f000 f8d9 	bl	8020c4c <__swbuf_r>
 8020a9a:	3001      	adds	r0, #1
 8020a9c:	d1e8      	bne.n	8020a70 <_puts_r+0x70>
 8020a9e:	e7cd      	b.n	8020a3c <_puts_r+0x3c>
 8020aa0:	6823      	ldr	r3, [r4, #0]
 8020aa2:	1c5a      	adds	r2, r3, #1
 8020aa4:	6022      	str	r2, [r4, #0]
 8020aa6:	220a      	movs	r2, #10
 8020aa8:	701a      	strb	r2, [r3, #0]
 8020aaa:	e7f0      	b.n	8020a8e <_puts_r+0x8e>

08020aac <puts>:
 8020aac:	b510      	push	{r4, lr}
 8020aae:	4b03      	ldr	r3, [pc, #12]	@ (8020abc <puts+0x10>)
 8020ab0:	0001      	movs	r1, r0
 8020ab2:	6818      	ldr	r0, [r3, #0]
 8020ab4:	f7ff ffa4 	bl	8020a00 <_puts_r>
 8020ab8:	bd10      	pop	{r4, pc}
 8020aba:	46c0      	nop			@ (mov r8, r8)
 8020abc:	200003cc 	.word	0x200003cc

08020ac0 <siprintf>:
 8020ac0:	b40e      	push	{r1, r2, r3}
 8020ac2:	b500      	push	{lr}
 8020ac4:	490b      	ldr	r1, [pc, #44]	@ (8020af4 <siprintf+0x34>)
 8020ac6:	b09c      	sub	sp, #112	@ 0x70
 8020ac8:	ab1d      	add	r3, sp, #116	@ 0x74
 8020aca:	9002      	str	r0, [sp, #8]
 8020acc:	9006      	str	r0, [sp, #24]
 8020ace:	9107      	str	r1, [sp, #28]
 8020ad0:	9104      	str	r1, [sp, #16]
 8020ad2:	4809      	ldr	r0, [pc, #36]	@ (8020af8 <siprintf+0x38>)
 8020ad4:	4909      	ldr	r1, [pc, #36]	@ (8020afc <siprintf+0x3c>)
 8020ad6:	cb04      	ldmia	r3!, {r2}
 8020ad8:	9105      	str	r1, [sp, #20]
 8020ada:	6800      	ldr	r0, [r0, #0]
 8020adc:	a902      	add	r1, sp, #8
 8020ade:	9301      	str	r3, [sp, #4]
 8020ae0:	f002 fa6c 	bl	8022fbc <_svfiprintf_r>
 8020ae4:	2200      	movs	r2, #0
 8020ae6:	9b02      	ldr	r3, [sp, #8]
 8020ae8:	701a      	strb	r2, [r3, #0]
 8020aea:	b01c      	add	sp, #112	@ 0x70
 8020aec:	bc08      	pop	{r3}
 8020aee:	b003      	add	sp, #12
 8020af0:	4718      	bx	r3
 8020af2:	46c0      	nop			@ (mov r8, r8)
 8020af4:	7fffffff 	.word	0x7fffffff
 8020af8:	200003cc 	.word	0x200003cc
 8020afc:	ffff0208 	.word	0xffff0208

08020b00 <__sread>:
 8020b00:	b570      	push	{r4, r5, r6, lr}
 8020b02:	000c      	movs	r4, r1
 8020b04:	250e      	movs	r5, #14
 8020b06:	5f49      	ldrsh	r1, [r1, r5]
 8020b08:	f000 f9bc 	bl	8020e84 <_read_r>
 8020b0c:	2800      	cmp	r0, #0
 8020b0e:	db03      	blt.n	8020b18 <__sread+0x18>
 8020b10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8020b12:	181b      	adds	r3, r3, r0
 8020b14:	6563      	str	r3, [r4, #84]	@ 0x54
 8020b16:	bd70      	pop	{r4, r5, r6, pc}
 8020b18:	89a3      	ldrh	r3, [r4, #12]
 8020b1a:	4a02      	ldr	r2, [pc, #8]	@ (8020b24 <__sread+0x24>)
 8020b1c:	4013      	ands	r3, r2
 8020b1e:	81a3      	strh	r3, [r4, #12]
 8020b20:	e7f9      	b.n	8020b16 <__sread+0x16>
 8020b22:	46c0      	nop			@ (mov r8, r8)
 8020b24:	ffffefff 	.word	0xffffefff

08020b28 <__swrite>:
 8020b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b2a:	001f      	movs	r7, r3
 8020b2c:	898b      	ldrh	r3, [r1, #12]
 8020b2e:	0005      	movs	r5, r0
 8020b30:	000c      	movs	r4, r1
 8020b32:	0016      	movs	r6, r2
 8020b34:	05db      	lsls	r3, r3, #23
 8020b36:	d505      	bpl.n	8020b44 <__swrite+0x1c>
 8020b38:	230e      	movs	r3, #14
 8020b3a:	5ec9      	ldrsh	r1, [r1, r3]
 8020b3c:	2200      	movs	r2, #0
 8020b3e:	2302      	movs	r3, #2
 8020b40:	f000 f98c 	bl	8020e5c <_lseek_r>
 8020b44:	89a3      	ldrh	r3, [r4, #12]
 8020b46:	4a05      	ldr	r2, [pc, #20]	@ (8020b5c <__swrite+0x34>)
 8020b48:	0028      	movs	r0, r5
 8020b4a:	4013      	ands	r3, r2
 8020b4c:	81a3      	strh	r3, [r4, #12]
 8020b4e:	0032      	movs	r2, r6
 8020b50:	230e      	movs	r3, #14
 8020b52:	5ee1      	ldrsh	r1, [r4, r3]
 8020b54:	003b      	movs	r3, r7
 8020b56:	f000 f9a9 	bl	8020eac <_write_r>
 8020b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b5c:	ffffefff 	.word	0xffffefff

08020b60 <__sseek>:
 8020b60:	b570      	push	{r4, r5, r6, lr}
 8020b62:	000c      	movs	r4, r1
 8020b64:	250e      	movs	r5, #14
 8020b66:	5f49      	ldrsh	r1, [r1, r5]
 8020b68:	f000 f978 	bl	8020e5c <_lseek_r>
 8020b6c:	89a3      	ldrh	r3, [r4, #12]
 8020b6e:	1c42      	adds	r2, r0, #1
 8020b70:	d103      	bne.n	8020b7a <__sseek+0x1a>
 8020b72:	4a05      	ldr	r2, [pc, #20]	@ (8020b88 <__sseek+0x28>)
 8020b74:	4013      	ands	r3, r2
 8020b76:	81a3      	strh	r3, [r4, #12]
 8020b78:	bd70      	pop	{r4, r5, r6, pc}
 8020b7a:	2280      	movs	r2, #128	@ 0x80
 8020b7c:	0152      	lsls	r2, r2, #5
 8020b7e:	4313      	orrs	r3, r2
 8020b80:	81a3      	strh	r3, [r4, #12]
 8020b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8020b84:	e7f8      	b.n	8020b78 <__sseek+0x18>
 8020b86:	46c0      	nop			@ (mov r8, r8)
 8020b88:	ffffefff 	.word	0xffffefff

08020b8c <__sclose>:
 8020b8c:	b510      	push	{r4, lr}
 8020b8e:	230e      	movs	r3, #14
 8020b90:	5ec9      	ldrsh	r1, [r1, r3]
 8020b92:	f000 f951 	bl	8020e38 <_close_r>
 8020b96:	bd10      	pop	{r4, pc}

08020b98 <_vsniprintf_r>:
 8020b98:	b530      	push	{r4, r5, lr}
 8020b9a:	0014      	movs	r4, r2
 8020b9c:	0005      	movs	r5, r0
 8020b9e:	001a      	movs	r2, r3
 8020ba0:	b09b      	sub	sp, #108	@ 0x6c
 8020ba2:	2c00      	cmp	r4, #0
 8020ba4:	da05      	bge.n	8020bb2 <_vsniprintf_r+0x1a>
 8020ba6:	238b      	movs	r3, #139	@ 0x8b
 8020ba8:	6003      	str	r3, [r0, #0]
 8020baa:	2001      	movs	r0, #1
 8020bac:	4240      	negs	r0, r0
 8020bae:	b01b      	add	sp, #108	@ 0x6c
 8020bb0:	bd30      	pop	{r4, r5, pc}
 8020bb2:	2382      	movs	r3, #130	@ 0x82
 8020bb4:	4668      	mov	r0, sp
 8020bb6:	009b      	lsls	r3, r3, #2
 8020bb8:	8183      	strh	r3, [r0, #12]
 8020bba:	2300      	movs	r3, #0
 8020bbc:	9100      	str	r1, [sp, #0]
 8020bbe:	9104      	str	r1, [sp, #16]
 8020bc0:	429c      	cmp	r4, r3
 8020bc2:	d000      	beq.n	8020bc6 <_vsniprintf_r+0x2e>
 8020bc4:	1e63      	subs	r3, r4, #1
 8020bc6:	9302      	str	r3, [sp, #8]
 8020bc8:	9305      	str	r3, [sp, #20]
 8020bca:	2301      	movs	r3, #1
 8020bcc:	4669      	mov	r1, sp
 8020bce:	425b      	negs	r3, r3
 8020bd0:	81cb      	strh	r3, [r1, #14]
 8020bd2:	0028      	movs	r0, r5
 8020bd4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020bd6:	f002 f9f1 	bl	8022fbc <_svfiprintf_r>
 8020bda:	1c43      	adds	r3, r0, #1
 8020bdc:	da01      	bge.n	8020be2 <_vsniprintf_r+0x4a>
 8020bde:	238b      	movs	r3, #139	@ 0x8b
 8020be0:	602b      	str	r3, [r5, #0]
 8020be2:	2c00      	cmp	r4, #0
 8020be4:	d0e3      	beq.n	8020bae <_vsniprintf_r+0x16>
 8020be6:	2200      	movs	r2, #0
 8020be8:	9b00      	ldr	r3, [sp, #0]
 8020bea:	701a      	strb	r2, [r3, #0]
 8020bec:	e7df      	b.n	8020bae <_vsniprintf_r+0x16>
	...

08020bf0 <vsniprintf>:
 8020bf0:	b513      	push	{r0, r1, r4, lr}
 8020bf2:	4c04      	ldr	r4, [pc, #16]	@ (8020c04 <vsniprintf+0x14>)
 8020bf4:	9300      	str	r3, [sp, #0]
 8020bf6:	0013      	movs	r3, r2
 8020bf8:	000a      	movs	r2, r1
 8020bfa:	0001      	movs	r1, r0
 8020bfc:	6820      	ldr	r0, [r4, #0]
 8020bfe:	f7ff ffcb 	bl	8020b98 <_vsniprintf_r>
 8020c02:	bd16      	pop	{r1, r2, r4, pc}
 8020c04:	200003cc 	.word	0x200003cc

08020c08 <_vsiprintf_r>:
 8020c08:	b500      	push	{lr}
 8020c0a:	b09b      	sub	sp, #108	@ 0x6c
 8020c0c:	9100      	str	r1, [sp, #0]
 8020c0e:	9104      	str	r1, [sp, #16]
 8020c10:	4906      	ldr	r1, [pc, #24]	@ (8020c2c <_vsiprintf_r+0x24>)
 8020c12:	9105      	str	r1, [sp, #20]
 8020c14:	9102      	str	r1, [sp, #8]
 8020c16:	4906      	ldr	r1, [pc, #24]	@ (8020c30 <_vsiprintf_r+0x28>)
 8020c18:	9103      	str	r1, [sp, #12]
 8020c1a:	4669      	mov	r1, sp
 8020c1c:	f002 f9ce 	bl	8022fbc <_svfiprintf_r>
 8020c20:	2200      	movs	r2, #0
 8020c22:	9b00      	ldr	r3, [sp, #0]
 8020c24:	701a      	strb	r2, [r3, #0]
 8020c26:	b01b      	add	sp, #108	@ 0x6c
 8020c28:	bd00      	pop	{pc}
 8020c2a:	46c0      	nop			@ (mov r8, r8)
 8020c2c:	7fffffff 	.word	0x7fffffff
 8020c30:	ffff0208 	.word	0xffff0208

08020c34 <vsiprintf>:
 8020c34:	b510      	push	{r4, lr}
 8020c36:	4c04      	ldr	r4, [pc, #16]	@ (8020c48 <vsiprintf+0x14>)
 8020c38:	0013      	movs	r3, r2
 8020c3a:	000a      	movs	r2, r1
 8020c3c:	0001      	movs	r1, r0
 8020c3e:	6820      	ldr	r0, [r4, #0]
 8020c40:	f7ff ffe2 	bl	8020c08 <_vsiprintf_r>
 8020c44:	bd10      	pop	{r4, pc}
 8020c46:	46c0      	nop			@ (mov r8, r8)
 8020c48:	200003cc 	.word	0x200003cc

08020c4c <__swbuf_r>:
 8020c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c4e:	0006      	movs	r6, r0
 8020c50:	000d      	movs	r5, r1
 8020c52:	0014      	movs	r4, r2
 8020c54:	2800      	cmp	r0, #0
 8020c56:	d004      	beq.n	8020c62 <__swbuf_r+0x16>
 8020c58:	6a03      	ldr	r3, [r0, #32]
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d101      	bne.n	8020c62 <__swbuf_r+0x16>
 8020c5e:	f7ff fe8b 	bl	8020978 <__sinit>
 8020c62:	69a3      	ldr	r3, [r4, #24]
 8020c64:	60a3      	str	r3, [r4, #8]
 8020c66:	89a3      	ldrh	r3, [r4, #12]
 8020c68:	071b      	lsls	r3, r3, #28
 8020c6a:	d502      	bpl.n	8020c72 <__swbuf_r+0x26>
 8020c6c:	6923      	ldr	r3, [r4, #16]
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d109      	bne.n	8020c86 <__swbuf_r+0x3a>
 8020c72:	0021      	movs	r1, r4
 8020c74:	0030      	movs	r0, r6
 8020c76:	f000 f82b 	bl	8020cd0 <__swsetup_r>
 8020c7a:	2800      	cmp	r0, #0
 8020c7c:	d003      	beq.n	8020c86 <__swbuf_r+0x3a>
 8020c7e:	2501      	movs	r5, #1
 8020c80:	426d      	negs	r5, r5
 8020c82:	0028      	movs	r0, r5
 8020c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c86:	6923      	ldr	r3, [r4, #16]
 8020c88:	6820      	ldr	r0, [r4, #0]
 8020c8a:	b2ef      	uxtb	r7, r5
 8020c8c:	1ac0      	subs	r0, r0, r3
 8020c8e:	6963      	ldr	r3, [r4, #20]
 8020c90:	b2ed      	uxtb	r5, r5
 8020c92:	4283      	cmp	r3, r0
 8020c94:	dc05      	bgt.n	8020ca2 <__swbuf_r+0x56>
 8020c96:	0021      	movs	r1, r4
 8020c98:	0030      	movs	r0, r6
 8020c9a:	f002 fc57 	bl	802354c <_fflush_r>
 8020c9e:	2800      	cmp	r0, #0
 8020ca0:	d1ed      	bne.n	8020c7e <__swbuf_r+0x32>
 8020ca2:	68a3      	ldr	r3, [r4, #8]
 8020ca4:	3001      	adds	r0, #1
 8020ca6:	3b01      	subs	r3, #1
 8020ca8:	60a3      	str	r3, [r4, #8]
 8020caa:	6823      	ldr	r3, [r4, #0]
 8020cac:	1c5a      	adds	r2, r3, #1
 8020cae:	6022      	str	r2, [r4, #0]
 8020cb0:	701f      	strb	r7, [r3, #0]
 8020cb2:	6963      	ldr	r3, [r4, #20]
 8020cb4:	4283      	cmp	r3, r0
 8020cb6:	d004      	beq.n	8020cc2 <__swbuf_r+0x76>
 8020cb8:	89a3      	ldrh	r3, [r4, #12]
 8020cba:	07db      	lsls	r3, r3, #31
 8020cbc:	d5e1      	bpl.n	8020c82 <__swbuf_r+0x36>
 8020cbe:	2d0a      	cmp	r5, #10
 8020cc0:	d1df      	bne.n	8020c82 <__swbuf_r+0x36>
 8020cc2:	0021      	movs	r1, r4
 8020cc4:	0030      	movs	r0, r6
 8020cc6:	f002 fc41 	bl	802354c <_fflush_r>
 8020cca:	2800      	cmp	r0, #0
 8020ccc:	d0d9      	beq.n	8020c82 <__swbuf_r+0x36>
 8020cce:	e7d6      	b.n	8020c7e <__swbuf_r+0x32>

08020cd0 <__swsetup_r>:
 8020cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8020d88 <__swsetup_r+0xb8>)
 8020cd2:	b570      	push	{r4, r5, r6, lr}
 8020cd4:	0005      	movs	r5, r0
 8020cd6:	6818      	ldr	r0, [r3, #0]
 8020cd8:	000c      	movs	r4, r1
 8020cda:	2800      	cmp	r0, #0
 8020cdc:	d004      	beq.n	8020ce8 <__swsetup_r+0x18>
 8020cde:	6a03      	ldr	r3, [r0, #32]
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	d101      	bne.n	8020ce8 <__swsetup_r+0x18>
 8020ce4:	f7ff fe48 	bl	8020978 <__sinit>
 8020ce8:	230c      	movs	r3, #12
 8020cea:	5ee2      	ldrsh	r2, [r4, r3]
 8020cec:	0713      	lsls	r3, r2, #28
 8020cee:	d423      	bmi.n	8020d38 <__swsetup_r+0x68>
 8020cf0:	06d3      	lsls	r3, r2, #27
 8020cf2:	d407      	bmi.n	8020d04 <__swsetup_r+0x34>
 8020cf4:	2309      	movs	r3, #9
 8020cf6:	602b      	str	r3, [r5, #0]
 8020cf8:	2340      	movs	r3, #64	@ 0x40
 8020cfa:	2001      	movs	r0, #1
 8020cfc:	4313      	orrs	r3, r2
 8020cfe:	81a3      	strh	r3, [r4, #12]
 8020d00:	4240      	negs	r0, r0
 8020d02:	e03a      	b.n	8020d7a <__swsetup_r+0xaa>
 8020d04:	0752      	lsls	r2, r2, #29
 8020d06:	d513      	bpl.n	8020d30 <__swsetup_r+0x60>
 8020d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020d0a:	2900      	cmp	r1, #0
 8020d0c:	d008      	beq.n	8020d20 <__swsetup_r+0x50>
 8020d0e:	0023      	movs	r3, r4
 8020d10:	3344      	adds	r3, #68	@ 0x44
 8020d12:	4299      	cmp	r1, r3
 8020d14:	d002      	beq.n	8020d1c <__swsetup_r+0x4c>
 8020d16:	0028      	movs	r0, r5
 8020d18:	f000 ffa6 	bl	8021c68 <_free_r>
 8020d1c:	2300      	movs	r3, #0
 8020d1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8020d20:	2224      	movs	r2, #36	@ 0x24
 8020d22:	89a3      	ldrh	r3, [r4, #12]
 8020d24:	4393      	bics	r3, r2
 8020d26:	81a3      	strh	r3, [r4, #12]
 8020d28:	2300      	movs	r3, #0
 8020d2a:	6063      	str	r3, [r4, #4]
 8020d2c:	6923      	ldr	r3, [r4, #16]
 8020d2e:	6023      	str	r3, [r4, #0]
 8020d30:	2308      	movs	r3, #8
 8020d32:	89a2      	ldrh	r2, [r4, #12]
 8020d34:	4313      	orrs	r3, r2
 8020d36:	81a3      	strh	r3, [r4, #12]
 8020d38:	6923      	ldr	r3, [r4, #16]
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	d10b      	bne.n	8020d56 <__swsetup_r+0x86>
 8020d3e:	21a0      	movs	r1, #160	@ 0xa0
 8020d40:	2280      	movs	r2, #128	@ 0x80
 8020d42:	89a3      	ldrh	r3, [r4, #12]
 8020d44:	0089      	lsls	r1, r1, #2
 8020d46:	0092      	lsls	r2, r2, #2
 8020d48:	400b      	ands	r3, r1
 8020d4a:	4293      	cmp	r3, r2
 8020d4c:	d003      	beq.n	8020d56 <__swsetup_r+0x86>
 8020d4e:	0021      	movs	r1, r4
 8020d50:	0028      	movs	r0, r5
 8020d52:	f002 fc51 	bl	80235f8 <__smakebuf_r>
 8020d56:	230c      	movs	r3, #12
 8020d58:	5ee2      	ldrsh	r2, [r4, r3]
 8020d5a:	2101      	movs	r1, #1
 8020d5c:	0013      	movs	r3, r2
 8020d5e:	400b      	ands	r3, r1
 8020d60:	420a      	tst	r2, r1
 8020d62:	d00b      	beq.n	8020d7c <__swsetup_r+0xac>
 8020d64:	2300      	movs	r3, #0
 8020d66:	60a3      	str	r3, [r4, #8]
 8020d68:	6963      	ldr	r3, [r4, #20]
 8020d6a:	425b      	negs	r3, r3
 8020d6c:	61a3      	str	r3, [r4, #24]
 8020d6e:	2000      	movs	r0, #0
 8020d70:	6923      	ldr	r3, [r4, #16]
 8020d72:	4283      	cmp	r3, r0
 8020d74:	d101      	bne.n	8020d7a <__swsetup_r+0xaa>
 8020d76:	0613      	lsls	r3, r2, #24
 8020d78:	d4be      	bmi.n	8020cf8 <__swsetup_r+0x28>
 8020d7a:	bd70      	pop	{r4, r5, r6, pc}
 8020d7c:	0791      	lsls	r1, r2, #30
 8020d7e:	d400      	bmi.n	8020d82 <__swsetup_r+0xb2>
 8020d80:	6963      	ldr	r3, [r4, #20]
 8020d82:	60a3      	str	r3, [r4, #8]
 8020d84:	e7f3      	b.n	8020d6e <__swsetup_r+0x9e>
 8020d86:	46c0      	nop			@ (mov r8, r8)
 8020d88:	200003cc 	.word	0x200003cc

08020d8c <memset>:
 8020d8c:	0003      	movs	r3, r0
 8020d8e:	1882      	adds	r2, r0, r2
 8020d90:	4293      	cmp	r3, r2
 8020d92:	d100      	bne.n	8020d96 <memset+0xa>
 8020d94:	4770      	bx	lr
 8020d96:	7019      	strb	r1, [r3, #0]
 8020d98:	3301      	adds	r3, #1
 8020d9a:	e7f9      	b.n	8020d90 <memset+0x4>

08020d9c <strchr>:
 8020d9c:	b2c9      	uxtb	r1, r1
 8020d9e:	7803      	ldrb	r3, [r0, #0]
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	d004      	beq.n	8020dae <strchr+0x12>
 8020da4:	428b      	cmp	r3, r1
 8020da6:	d100      	bne.n	8020daa <strchr+0xe>
 8020da8:	4770      	bx	lr
 8020daa:	3001      	adds	r0, #1
 8020dac:	e7f7      	b.n	8020d9e <strchr+0x2>
 8020dae:	424b      	negs	r3, r1
 8020db0:	4159      	adcs	r1, r3
 8020db2:	4249      	negs	r1, r1
 8020db4:	4008      	ands	r0, r1
 8020db6:	e7f7      	b.n	8020da8 <strchr+0xc>

08020db8 <strncmp>:
 8020db8:	b530      	push	{r4, r5, lr}
 8020dba:	0005      	movs	r5, r0
 8020dbc:	1e10      	subs	r0, r2, #0
 8020dbe:	d00b      	beq.n	8020dd8 <strncmp+0x20>
 8020dc0:	2400      	movs	r4, #0
 8020dc2:	3a01      	subs	r2, #1
 8020dc4:	5d2b      	ldrb	r3, [r5, r4]
 8020dc6:	5d08      	ldrb	r0, [r1, r4]
 8020dc8:	4283      	cmp	r3, r0
 8020dca:	d104      	bne.n	8020dd6 <strncmp+0x1e>
 8020dcc:	42a2      	cmp	r2, r4
 8020dce:	d002      	beq.n	8020dd6 <strncmp+0x1e>
 8020dd0:	3401      	adds	r4, #1
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d1f6      	bne.n	8020dc4 <strncmp+0xc>
 8020dd6:	1a18      	subs	r0, r3, r0
 8020dd8:	bd30      	pop	{r4, r5, pc}

08020dda <strncpy>:
 8020dda:	0003      	movs	r3, r0
 8020ddc:	b530      	push	{r4, r5, lr}
 8020dde:	001d      	movs	r5, r3
 8020de0:	2a00      	cmp	r2, #0
 8020de2:	d006      	beq.n	8020df2 <strncpy+0x18>
 8020de4:	780c      	ldrb	r4, [r1, #0]
 8020de6:	3a01      	subs	r2, #1
 8020de8:	3301      	adds	r3, #1
 8020dea:	702c      	strb	r4, [r5, #0]
 8020dec:	3101      	adds	r1, #1
 8020dee:	2c00      	cmp	r4, #0
 8020df0:	d1f5      	bne.n	8020dde <strncpy+0x4>
 8020df2:	2100      	movs	r1, #0
 8020df4:	189a      	adds	r2, r3, r2
 8020df6:	4293      	cmp	r3, r2
 8020df8:	d100      	bne.n	8020dfc <strncpy+0x22>
 8020dfa:	bd30      	pop	{r4, r5, pc}
 8020dfc:	7019      	strb	r1, [r3, #0]
 8020dfe:	3301      	adds	r3, #1
 8020e00:	e7f9      	b.n	8020df6 <strncpy+0x1c>

08020e02 <strstr>:
 8020e02:	780a      	ldrb	r2, [r1, #0]
 8020e04:	b530      	push	{r4, r5, lr}
 8020e06:	2a00      	cmp	r2, #0
 8020e08:	d10c      	bne.n	8020e24 <strstr+0x22>
 8020e0a:	bd30      	pop	{r4, r5, pc}
 8020e0c:	429a      	cmp	r2, r3
 8020e0e:	d108      	bne.n	8020e22 <strstr+0x20>
 8020e10:	2301      	movs	r3, #1
 8020e12:	5ccc      	ldrb	r4, [r1, r3]
 8020e14:	2c00      	cmp	r4, #0
 8020e16:	d0f8      	beq.n	8020e0a <strstr+0x8>
 8020e18:	5cc5      	ldrb	r5, [r0, r3]
 8020e1a:	42a5      	cmp	r5, r4
 8020e1c:	d101      	bne.n	8020e22 <strstr+0x20>
 8020e1e:	3301      	adds	r3, #1
 8020e20:	e7f7      	b.n	8020e12 <strstr+0x10>
 8020e22:	3001      	adds	r0, #1
 8020e24:	7803      	ldrb	r3, [r0, #0]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d1f0      	bne.n	8020e0c <strstr+0xa>
 8020e2a:	0018      	movs	r0, r3
 8020e2c:	e7ed      	b.n	8020e0a <strstr+0x8>
	...

08020e30 <_localeconv_r>:
 8020e30:	4800      	ldr	r0, [pc, #0]	@ (8020e34 <_localeconv_r+0x4>)
 8020e32:	4770      	bx	lr
 8020e34:	20000350 	.word	0x20000350

08020e38 <_close_r>:
 8020e38:	2300      	movs	r3, #0
 8020e3a:	b570      	push	{r4, r5, r6, lr}
 8020e3c:	4d06      	ldr	r5, [pc, #24]	@ (8020e58 <_close_r+0x20>)
 8020e3e:	0004      	movs	r4, r0
 8020e40:	0008      	movs	r0, r1
 8020e42:	602b      	str	r3, [r5, #0]
 8020e44:	f7ed fc86 	bl	800e754 <_close>
 8020e48:	1c43      	adds	r3, r0, #1
 8020e4a:	d103      	bne.n	8020e54 <_close_r+0x1c>
 8020e4c:	682b      	ldr	r3, [r5, #0]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d000      	beq.n	8020e54 <_close_r+0x1c>
 8020e52:	6023      	str	r3, [r4, #0]
 8020e54:	bd70      	pop	{r4, r5, r6, pc}
 8020e56:	46c0      	nop			@ (mov r8, r8)
 8020e58:	200034ec 	.word	0x200034ec

08020e5c <_lseek_r>:
 8020e5c:	b570      	push	{r4, r5, r6, lr}
 8020e5e:	0004      	movs	r4, r0
 8020e60:	0008      	movs	r0, r1
 8020e62:	0011      	movs	r1, r2
 8020e64:	001a      	movs	r2, r3
 8020e66:	2300      	movs	r3, #0
 8020e68:	4d05      	ldr	r5, [pc, #20]	@ (8020e80 <_lseek_r+0x24>)
 8020e6a:	602b      	str	r3, [r5, #0]
 8020e6c:	f7ed fc93 	bl	800e796 <_lseek>
 8020e70:	1c43      	adds	r3, r0, #1
 8020e72:	d103      	bne.n	8020e7c <_lseek_r+0x20>
 8020e74:	682b      	ldr	r3, [r5, #0]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	d000      	beq.n	8020e7c <_lseek_r+0x20>
 8020e7a:	6023      	str	r3, [r4, #0]
 8020e7c:	bd70      	pop	{r4, r5, r6, pc}
 8020e7e:	46c0      	nop			@ (mov r8, r8)
 8020e80:	200034ec 	.word	0x200034ec

08020e84 <_read_r>:
 8020e84:	b570      	push	{r4, r5, r6, lr}
 8020e86:	0004      	movs	r4, r0
 8020e88:	0008      	movs	r0, r1
 8020e8a:	0011      	movs	r1, r2
 8020e8c:	001a      	movs	r2, r3
 8020e8e:	2300      	movs	r3, #0
 8020e90:	4d05      	ldr	r5, [pc, #20]	@ (8020ea8 <_read_r+0x24>)
 8020e92:	602b      	str	r3, [r5, #0]
 8020e94:	f7ed fc41 	bl	800e71a <_read>
 8020e98:	1c43      	adds	r3, r0, #1
 8020e9a:	d103      	bne.n	8020ea4 <_read_r+0x20>
 8020e9c:	682b      	ldr	r3, [r5, #0]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d000      	beq.n	8020ea4 <_read_r+0x20>
 8020ea2:	6023      	str	r3, [r4, #0]
 8020ea4:	bd70      	pop	{r4, r5, r6, pc}
 8020ea6:	46c0      	nop			@ (mov r8, r8)
 8020ea8:	200034ec 	.word	0x200034ec

08020eac <_write_r>:
 8020eac:	b570      	push	{r4, r5, r6, lr}
 8020eae:	0004      	movs	r4, r0
 8020eb0:	0008      	movs	r0, r1
 8020eb2:	0011      	movs	r1, r2
 8020eb4:	001a      	movs	r2, r3
 8020eb6:	2300      	movs	r3, #0
 8020eb8:	4d05      	ldr	r5, [pc, #20]	@ (8020ed0 <_write_r+0x24>)
 8020eba:	602b      	str	r3, [r5, #0]
 8020ebc:	f7ee f8fe 	bl	800f0bc <_write>
 8020ec0:	1c43      	adds	r3, r0, #1
 8020ec2:	d103      	bne.n	8020ecc <_write_r+0x20>
 8020ec4:	682b      	ldr	r3, [r5, #0]
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d000      	beq.n	8020ecc <_write_r+0x20>
 8020eca:	6023      	str	r3, [r4, #0]
 8020ecc:	bd70      	pop	{r4, r5, r6, pc}
 8020ece:	46c0      	nop			@ (mov r8, r8)
 8020ed0:	200034ec 	.word	0x200034ec

08020ed4 <__errno>:
 8020ed4:	4b01      	ldr	r3, [pc, #4]	@ (8020edc <__errno+0x8>)
 8020ed6:	6818      	ldr	r0, [r3, #0]
 8020ed8:	4770      	bx	lr
 8020eda:	46c0      	nop			@ (mov r8, r8)
 8020edc:	200003cc 	.word	0x200003cc

08020ee0 <__libc_init_array>:
 8020ee0:	b570      	push	{r4, r5, r6, lr}
 8020ee2:	2600      	movs	r6, #0
 8020ee4:	4c0c      	ldr	r4, [pc, #48]	@ (8020f18 <__libc_init_array+0x38>)
 8020ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8020f1c <__libc_init_array+0x3c>)
 8020ee8:	1b64      	subs	r4, r4, r5
 8020eea:	10a4      	asrs	r4, r4, #2
 8020eec:	42a6      	cmp	r6, r4
 8020eee:	d109      	bne.n	8020f04 <__libc_init_array+0x24>
 8020ef0:	2600      	movs	r6, #0
 8020ef2:	f002 fee9 	bl	8023cc8 <_init>
 8020ef6:	4c0a      	ldr	r4, [pc, #40]	@ (8020f20 <__libc_init_array+0x40>)
 8020ef8:	4d0a      	ldr	r5, [pc, #40]	@ (8020f24 <__libc_init_array+0x44>)
 8020efa:	1b64      	subs	r4, r4, r5
 8020efc:	10a4      	asrs	r4, r4, #2
 8020efe:	42a6      	cmp	r6, r4
 8020f00:	d105      	bne.n	8020f0e <__libc_init_array+0x2e>
 8020f02:	bd70      	pop	{r4, r5, r6, pc}
 8020f04:	00b3      	lsls	r3, r6, #2
 8020f06:	58eb      	ldr	r3, [r5, r3]
 8020f08:	4798      	blx	r3
 8020f0a:	3601      	adds	r6, #1
 8020f0c:	e7ee      	b.n	8020eec <__libc_init_array+0xc>
 8020f0e:	00b3      	lsls	r3, r6, #2
 8020f10:	58eb      	ldr	r3, [r5, r3]
 8020f12:	4798      	blx	r3
 8020f14:	3601      	adds	r6, #1
 8020f16:	e7f2      	b.n	8020efe <__libc_init_array+0x1e>
 8020f18:	08027168 	.word	0x08027168
 8020f1c:	08027168 	.word	0x08027168
 8020f20:	0802716c 	.word	0x0802716c
 8020f24:	08027168 	.word	0x08027168

08020f28 <__retarget_lock_init_recursive>:
 8020f28:	4770      	bx	lr

08020f2a <__retarget_lock_acquire_recursive>:
 8020f2a:	4770      	bx	lr

08020f2c <__retarget_lock_release_recursive>:
 8020f2c:	4770      	bx	lr

08020f2e <memchr>:
 8020f2e:	b2c9      	uxtb	r1, r1
 8020f30:	1882      	adds	r2, r0, r2
 8020f32:	4290      	cmp	r0, r2
 8020f34:	d101      	bne.n	8020f3a <memchr+0xc>
 8020f36:	2000      	movs	r0, #0
 8020f38:	4770      	bx	lr
 8020f3a:	7803      	ldrb	r3, [r0, #0]
 8020f3c:	428b      	cmp	r3, r1
 8020f3e:	d0fb      	beq.n	8020f38 <memchr+0xa>
 8020f40:	3001      	adds	r0, #1
 8020f42:	e7f6      	b.n	8020f32 <memchr+0x4>

08020f44 <memcpy>:
 8020f44:	2300      	movs	r3, #0
 8020f46:	b510      	push	{r4, lr}
 8020f48:	429a      	cmp	r2, r3
 8020f4a:	d100      	bne.n	8020f4e <memcpy+0xa>
 8020f4c:	bd10      	pop	{r4, pc}
 8020f4e:	5ccc      	ldrb	r4, [r1, r3]
 8020f50:	54c4      	strb	r4, [r0, r3]
 8020f52:	3301      	adds	r3, #1
 8020f54:	e7f8      	b.n	8020f48 <memcpy+0x4>
	...

08020f58 <nan>:
 8020f58:	2000      	movs	r0, #0
 8020f5a:	4901      	ldr	r1, [pc, #4]	@ (8020f60 <nan+0x8>)
 8020f5c:	4770      	bx	lr
 8020f5e:	46c0      	nop			@ (mov r8, r8)
 8020f60:	7ff80000 	.word	0x7ff80000

08020f64 <quorem>:
 8020f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f66:	6902      	ldr	r2, [r0, #16]
 8020f68:	690f      	ldr	r7, [r1, #16]
 8020f6a:	b087      	sub	sp, #28
 8020f6c:	0006      	movs	r6, r0
 8020f6e:	000b      	movs	r3, r1
 8020f70:	2000      	movs	r0, #0
 8020f72:	9102      	str	r1, [sp, #8]
 8020f74:	42ba      	cmp	r2, r7
 8020f76:	db6d      	blt.n	8021054 <quorem+0xf0>
 8020f78:	3f01      	subs	r7, #1
 8020f7a:	00bc      	lsls	r4, r7, #2
 8020f7c:	3314      	adds	r3, #20
 8020f7e:	9305      	str	r3, [sp, #20]
 8020f80:	191b      	adds	r3, r3, r4
 8020f82:	9303      	str	r3, [sp, #12]
 8020f84:	0033      	movs	r3, r6
 8020f86:	3314      	adds	r3, #20
 8020f88:	191c      	adds	r4, r3, r4
 8020f8a:	9301      	str	r3, [sp, #4]
 8020f8c:	6823      	ldr	r3, [r4, #0]
 8020f8e:	9304      	str	r3, [sp, #16]
 8020f90:	9b03      	ldr	r3, [sp, #12]
 8020f92:	9804      	ldr	r0, [sp, #16]
 8020f94:	681d      	ldr	r5, [r3, #0]
 8020f96:	3501      	adds	r5, #1
 8020f98:	0029      	movs	r1, r5
 8020f9a:	f7df f903 	bl	80001a4 <__udivsi3>
 8020f9e:	9b04      	ldr	r3, [sp, #16]
 8020fa0:	9000      	str	r0, [sp, #0]
 8020fa2:	42ab      	cmp	r3, r5
 8020fa4:	d32b      	bcc.n	8020ffe <quorem+0x9a>
 8020fa6:	9b05      	ldr	r3, [sp, #20]
 8020fa8:	9d01      	ldr	r5, [sp, #4]
 8020faa:	469c      	mov	ip, r3
 8020fac:	2300      	movs	r3, #0
 8020fae:	9305      	str	r3, [sp, #20]
 8020fb0:	9304      	str	r3, [sp, #16]
 8020fb2:	4662      	mov	r2, ip
 8020fb4:	ca08      	ldmia	r2!, {r3}
 8020fb6:	6828      	ldr	r0, [r5, #0]
 8020fb8:	4694      	mov	ip, r2
 8020fba:	9a00      	ldr	r2, [sp, #0]
 8020fbc:	b299      	uxth	r1, r3
 8020fbe:	4351      	muls	r1, r2
 8020fc0:	9a05      	ldr	r2, [sp, #20]
 8020fc2:	0c1b      	lsrs	r3, r3, #16
 8020fc4:	1889      	adds	r1, r1, r2
 8020fc6:	9a00      	ldr	r2, [sp, #0]
 8020fc8:	4353      	muls	r3, r2
 8020fca:	0c0a      	lsrs	r2, r1, #16
 8020fcc:	189b      	adds	r3, r3, r2
 8020fce:	0c1a      	lsrs	r2, r3, #16
 8020fd0:	b289      	uxth	r1, r1
 8020fd2:	9205      	str	r2, [sp, #20]
 8020fd4:	b282      	uxth	r2, r0
 8020fd6:	1a52      	subs	r2, r2, r1
 8020fd8:	9904      	ldr	r1, [sp, #16]
 8020fda:	0c00      	lsrs	r0, r0, #16
 8020fdc:	1852      	adds	r2, r2, r1
 8020fde:	b29b      	uxth	r3, r3
 8020fe0:	1411      	asrs	r1, r2, #16
 8020fe2:	1ac3      	subs	r3, r0, r3
 8020fe4:	185b      	adds	r3, r3, r1
 8020fe6:	1419      	asrs	r1, r3, #16
 8020fe8:	b292      	uxth	r2, r2
 8020fea:	041b      	lsls	r3, r3, #16
 8020fec:	431a      	orrs	r2, r3
 8020fee:	9b03      	ldr	r3, [sp, #12]
 8020ff0:	9104      	str	r1, [sp, #16]
 8020ff2:	c504      	stmia	r5!, {r2}
 8020ff4:	4563      	cmp	r3, ip
 8020ff6:	d2dc      	bcs.n	8020fb2 <quorem+0x4e>
 8020ff8:	6823      	ldr	r3, [r4, #0]
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d030      	beq.n	8021060 <quorem+0xfc>
 8020ffe:	0030      	movs	r0, r6
 8021000:	9902      	ldr	r1, [sp, #8]
 8021002:	f001 fd7d 	bl	8022b00 <__mcmp>
 8021006:	2800      	cmp	r0, #0
 8021008:	db23      	blt.n	8021052 <quorem+0xee>
 802100a:	0034      	movs	r4, r6
 802100c:	2500      	movs	r5, #0
 802100e:	9902      	ldr	r1, [sp, #8]
 8021010:	3414      	adds	r4, #20
 8021012:	3114      	adds	r1, #20
 8021014:	6823      	ldr	r3, [r4, #0]
 8021016:	c901      	ldmia	r1!, {r0}
 8021018:	9302      	str	r3, [sp, #8]
 802101a:	466b      	mov	r3, sp
 802101c:	891b      	ldrh	r3, [r3, #8]
 802101e:	b282      	uxth	r2, r0
 8021020:	1a9a      	subs	r2, r3, r2
 8021022:	9b02      	ldr	r3, [sp, #8]
 8021024:	1952      	adds	r2, r2, r5
 8021026:	0c00      	lsrs	r0, r0, #16
 8021028:	0c1b      	lsrs	r3, r3, #16
 802102a:	1a1b      	subs	r3, r3, r0
 802102c:	1410      	asrs	r0, r2, #16
 802102e:	181b      	adds	r3, r3, r0
 8021030:	141d      	asrs	r5, r3, #16
 8021032:	b292      	uxth	r2, r2
 8021034:	041b      	lsls	r3, r3, #16
 8021036:	431a      	orrs	r2, r3
 8021038:	9b03      	ldr	r3, [sp, #12]
 802103a:	c404      	stmia	r4!, {r2}
 802103c:	428b      	cmp	r3, r1
 802103e:	d2e9      	bcs.n	8021014 <quorem+0xb0>
 8021040:	9a01      	ldr	r2, [sp, #4]
 8021042:	00bb      	lsls	r3, r7, #2
 8021044:	18d3      	adds	r3, r2, r3
 8021046:	681a      	ldr	r2, [r3, #0]
 8021048:	2a00      	cmp	r2, #0
 802104a:	d013      	beq.n	8021074 <quorem+0x110>
 802104c:	9b00      	ldr	r3, [sp, #0]
 802104e:	3301      	adds	r3, #1
 8021050:	9300      	str	r3, [sp, #0]
 8021052:	9800      	ldr	r0, [sp, #0]
 8021054:	b007      	add	sp, #28
 8021056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021058:	6823      	ldr	r3, [r4, #0]
 802105a:	2b00      	cmp	r3, #0
 802105c:	d104      	bne.n	8021068 <quorem+0x104>
 802105e:	3f01      	subs	r7, #1
 8021060:	9b01      	ldr	r3, [sp, #4]
 8021062:	3c04      	subs	r4, #4
 8021064:	42a3      	cmp	r3, r4
 8021066:	d3f7      	bcc.n	8021058 <quorem+0xf4>
 8021068:	6137      	str	r7, [r6, #16]
 802106a:	e7c8      	b.n	8020ffe <quorem+0x9a>
 802106c:	681a      	ldr	r2, [r3, #0]
 802106e:	2a00      	cmp	r2, #0
 8021070:	d104      	bne.n	802107c <quorem+0x118>
 8021072:	3f01      	subs	r7, #1
 8021074:	9a01      	ldr	r2, [sp, #4]
 8021076:	3b04      	subs	r3, #4
 8021078:	429a      	cmp	r2, r3
 802107a:	d3f7      	bcc.n	802106c <quorem+0x108>
 802107c:	6137      	str	r7, [r6, #16]
 802107e:	e7e5      	b.n	802104c <quorem+0xe8>

08021080 <_dtoa_r>:
 8021080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021082:	0014      	movs	r4, r2
 8021084:	001d      	movs	r5, r3
 8021086:	69c6      	ldr	r6, [r0, #28]
 8021088:	b09d      	sub	sp, #116	@ 0x74
 802108a:	940a      	str	r4, [sp, #40]	@ 0x28
 802108c:	950b      	str	r5, [sp, #44]	@ 0x2c
 802108e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8021090:	9003      	str	r0, [sp, #12]
 8021092:	2e00      	cmp	r6, #0
 8021094:	d10f      	bne.n	80210b6 <_dtoa_r+0x36>
 8021096:	2010      	movs	r0, #16
 8021098:	f001 f98a 	bl	80223b0 <malloc>
 802109c:	9b03      	ldr	r3, [sp, #12]
 802109e:	1e02      	subs	r2, r0, #0
 80210a0:	61d8      	str	r0, [r3, #28]
 80210a2:	d104      	bne.n	80210ae <_dtoa_r+0x2e>
 80210a4:	21ef      	movs	r1, #239	@ 0xef
 80210a6:	4bc7      	ldr	r3, [pc, #796]	@ (80213c4 <_dtoa_r+0x344>)
 80210a8:	48c7      	ldr	r0, [pc, #796]	@ (80213c8 <_dtoa_r+0x348>)
 80210aa:	f002 fb2f 	bl	802370c <__assert_func>
 80210ae:	6046      	str	r6, [r0, #4]
 80210b0:	6086      	str	r6, [r0, #8]
 80210b2:	6006      	str	r6, [r0, #0]
 80210b4:	60c6      	str	r6, [r0, #12]
 80210b6:	9b03      	ldr	r3, [sp, #12]
 80210b8:	69db      	ldr	r3, [r3, #28]
 80210ba:	6819      	ldr	r1, [r3, #0]
 80210bc:	2900      	cmp	r1, #0
 80210be:	d00b      	beq.n	80210d8 <_dtoa_r+0x58>
 80210c0:	685a      	ldr	r2, [r3, #4]
 80210c2:	2301      	movs	r3, #1
 80210c4:	4093      	lsls	r3, r2
 80210c6:	604a      	str	r2, [r1, #4]
 80210c8:	608b      	str	r3, [r1, #8]
 80210ca:	9803      	ldr	r0, [sp, #12]
 80210cc:	f001 fa82 	bl	80225d4 <_Bfree>
 80210d0:	2200      	movs	r2, #0
 80210d2:	9b03      	ldr	r3, [sp, #12]
 80210d4:	69db      	ldr	r3, [r3, #28]
 80210d6:	601a      	str	r2, [r3, #0]
 80210d8:	2d00      	cmp	r5, #0
 80210da:	da1e      	bge.n	802111a <_dtoa_r+0x9a>
 80210dc:	2301      	movs	r3, #1
 80210de:	603b      	str	r3, [r7, #0]
 80210e0:	006b      	lsls	r3, r5, #1
 80210e2:	085b      	lsrs	r3, r3, #1
 80210e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80210e6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80210e8:	4bb8      	ldr	r3, [pc, #736]	@ (80213cc <_dtoa_r+0x34c>)
 80210ea:	4ab8      	ldr	r2, [pc, #736]	@ (80213cc <_dtoa_r+0x34c>)
 80210ec:	403b      	ands	r3, r7
 80210ee:	4293      	cmp	r3, r2
 80210f0:	d116      	bne.n	8021120 <_dtoa_r+0xa0>
 80210f2:	4bb7      	ldr	r3, [pc, #732]	@ (80213d0 <_dtoa_r+0x350>)
 80210f4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80210f6:	6013      	str	r3, [r2, #0]
 80210f8:	033b      	lsls	r3, r7, #12
 80210fa:	0b1b      	lsrs	r3, r3, #12
 80210fc:	4323      	orrs	r3, r4
 80210fe:	d101      	bne.n	8021104 <_dtoa_r+0x84>
 8021100:	f000 fd83 	bl	8021c0a <_dtoa_r+0xb8a>
 8021104:	4bb3      	ldr	r3, [pc, #716]	@ (80213d4 <_dtoa_r+0x354>)
 8021106:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021108:	9308      	str	r3, [sp, #32]
 802110a:	2a00      	cmp	r2, #0
 802110c:	d002      	beq.n	8021114 <_dtoa_r+0x94>
 802110e:	4bb2      	ldr	r3, [pc, #712]	@ (80213d8 <_dtoa_r+0x358>)
 8021110:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021112:	6013      	str	r3, [r2, #0]
 8021114:	9808      	ldr	r0, [sp, #32]
 8021116:	b01d      	add	sp, #116	@ 0x74
 8021118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802111a:	2300      	movs	r3, #0
 802111c:	603b      	str	r3, [r7, #0]
 802111e:	e7e2      	b.n	80210e6 <_dtoa_r+0x66>
 8021120:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021122:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021124:	9212      	str	r2, [sp, #72]	@ 0x48
 8021126:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021128:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802112a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802112c:	2200      	movs	r2, #0
 802112e:	2300      	movs	r3, #0
 8021130:	f7df f9be 	bl	80004b0 <__aeabi_dcmpeq>
 8021134:	1e06      	subs	r6, r0, #0
 8021136:	d00b      	beq.n	8021150 <_dtoa_r+0xd0>
 8021138:	2301      	movs	r3, #1
 802113a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802113c:	6013      	str	r3, [r2, #0]
 802113e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021140:	2b00      	cmp	r3, #0
 8021142:	d002      	beq.n	802114a <_dtoa_r+0xca>
 8021144:	4ba5      	ldr	r3, [pc, #660]	@ (80213dc <_dtoa_r+0x35c>)
 8021146:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021148:	6013      	str	r3, [r2, #0]
 802114a:	4ba5      	ldr	r3, [pc, #660]	@ (80213e0 <_dtoa_r+0x360>)
 802114c:	9308      	str	r3, [sp, #32]
 802114e:	e7e1      	b.n	8021114 <_dtoa_r+0x94>
 8021150:	ab1a      	add	r3, sp, #104	@ 0x68
 8021152:	9301      	str	r3, [sp, #4]
 8021154:	ab1b      	add	r3, sp, #108	@ 0x6c
 8021156:	9300      	str	r3, [sp, #0]
 8021158:	9803      	ldr	r0, [sp, #12]
 802115a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802115c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802115e:	f001 fdf1 	bl	8022d44 <__d2b>
 8021162:	007a      	lsls	r2, r7, #1
 8021164:	9005      	str	r0, [sp, #20]
 8021166:	0d52      	lsrs	r2, r2, #21
 8021168:	d100      	bne.n	802116c <_dtoa_r+0xec>
 802116a:	e07b      	b.n	8021264 <_dtoa_r+0x1e4>
 802116c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802116e:	9618      	str	r6, [sp, #96]	@ 0x60
 8021170:	0319      	lsls	r1, r3, #12
 8021172:	4b9c      	ldr	r3, [pc, #624]	@ (80213e4 <_dtoa_r+0x364>)
 8021174:	0b09      	lsrs	r1, r1, #12
 8021176:	430b      	orrs	r3, r1
 8021178:	499b      	ldr	r1, [pc, #620]	@ (80213e8 <_dtoa_r+0x368>)
 802117a:	1857      	adds	r7, r2, r1
 802117c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802117e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021180:	0019      	movs	r1, r3
 8021182:	2200      	movs	r2, #0
 8021184:	4b99      	ldr	r3, [pc, #612]	@ (80213ec <_dtoa_r+0x36c>)
 8021186:	f7e1 fd21 	bl	8002bcc <__aeabi_dsub>
 802118a:	4a99      	ldr	r2, [pc, #612]	@ (80213f0 <_dtoa_r+0x370>)
 802118c:	4b99      	ldr	r3, [pc, #612]	@ (80213f4 <_dtoa_r+0x374>)
 802118e:	f7e1 fa55 	bl	800263c <__aeabi_dmul>
 8021192:	4a99      	ldr	r2, [pc, #612]	@ (80213f8 <_dtoa_r+0x378>)
 8021194:	4b99      	ldr	r3, [pc, #612]	@ (80213fc <_dtoa_r+0x37c>)
 8021196:	f7e0 faa9 	bl	80016ec <__aeabi_dadd>
 802119a:	0004      	movs	r4, r0
 802119c:	0038      	movs	r0, r7
 802119e:	000d      	movs	r5, r1
 80211a0:	f7e2 f90e 	bl	80033c0 <__aeabi_i2d>
 80211a4:	4a96      	ldr	r2, [pc, #600]	@ (8021400 <_dtoa_r+0x380>)
 80211a6:	4b97      	ldr	r3, [pc, #604]	@ (8021404 <_dtoa_r+0x384>)
 80211a8:	f7e1 fa48 	bl	800263c <__aeabi_dmul>
 80211ac:	0002      	movs	r2, r0
 80211ae:	000b      	movs	r3, r1
 80211b0:	0020      	movs	r0, r4
 80211b2:	0029      	movs	r1, r5
 80211b4:	f7e0 fa9a 	bl	80016ec <__aeabi_dadd>
 80211b8:	0004      	movs	r4, r0
 80211ba:	000d      	movs	r5, r1
 80211bc:	f7e2 f8c4 	bl	8003348 <__aeabi_d2iz>
 80211c0:	2200      	movs	r2, #0
 80211c2:	9004      	str	r0, [sp, #16]
 80211c4:	2300      	movs	r3, #0
 80211c6:	0020      	movs	r0, r4
 80211c8:	0029      	movs	r1, r5
 80211ca:	f7df f977 	bl	80004bc <__aeabi_dcmplt>
 80211ce:	2800      	cmp	r0, #0
 80211d0:	d00b      	beq.n	80211ea <_dtoa_r+0x16a>
 80211d2:	9804      	ldr	r0, [sp, #16]
 80211d4:	f7e2 f8f4 	bl	80033c0 <__aeabi_i2d>
 80211d8:	002b      	movs	r3, r5
 80211da:	0022      	movs	r2, r4
 80211dc:	f7df f968 	bl	80004b0 <__aeabi_dcmpeq>
 80211e0:	4243      	negs	r3, r0
 80211e2:	4158      	adcs	r0, r3
 80211e4:	9b04      	ldr	r3, [sp, #16]
 80211e6:	1a1b      	subs	r3, r3, r0
 80211e8:	9304      	str	r3, [sp, #16]
 80211ea:	2301      	movs	r3, #1
 80211ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80211ee:	9b04      	ldr	r3, [sp, #16]
 80211f0:	2b16      	cmp	r3, #22
 80211f2:	d810      	bhi.n	8021216 <_dtoa_r+0x196>
 80211f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80211f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80211f8:	9a04      	ldr	r2, [sp, #16]
 80211fa:	4b83      	ldr	r3, [pc, #524]	@ (8021408 <_dtoa_r+0x388>)
 80211fc:	00d2      	lsls	r2, r2, #3
 80211fe:	189b      	adds	r3, r3, r2
 8021200:	681a      	ldr	r2, [r3, #0]
 8021202:	685b      	ldr	r3, [r3, #4]
 8021204:	f7df f95a 	bl	80004bc <__aeabi_dcmplt>
 8021208:	2800      	cmp	r0, #0
 802120a:	d047      	beq.n	802129c <_dtoa_r+0x21c>
 802120c:	9b04      	ldr	r3, [sp, #16]
 802120e:	3b01      	subs	r3, #1
 8021210:	9304      	str	r3, [sp, #16]
 8021212:	2300      	movs	r3, #0
 8021214:	9315      	str	r3, [sp, #84]	@ 0x54
 8021216:	2200      	movs	r2, #0
 8021218:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802121a:	9206      	str	r2, [sp, #24]
 802121c:	1bdb      	subs	r3, r3, r7
 802121e:	1e5a      	subs	r2, r3, #1
 8021220:	d53e      	bpl.n	80212a0 <_dtoa_r+0x220>
 8021222:	2201      	movs	r2, #1
 8021224:	1ad3      	subs	r3, r2, r3
 8021226:	9306      	str	r3, [sp, #24]
 8021228:	2300      	movs	r3, #0
 802122a:	930d      	str	r3, [sp, #52]	@ 0x34
 802122c:	9b04      	ldr	r3, [sp, #16]
 802122e:	2b00      	cmp	r3, #0
 8021230:	db38      	blt.n	80212a4 <_dtoa_r+0x224>
 8021232:	9a04      	ldr	r2, [sp, #16]
 8021234:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021236:	4694      	mov	ip, r2
 8021238:	4463      	add	r3, ip
 802123a:	930d      	str	r3, [sp, #52]	@ 0x34
 802123c:	2300      	movs	r3, #0
 802123e:	9214      	str	r2, [sp, #80]	@ 0x50
 8021240:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021242:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021244:	2401      	movs	r4, #1
 8021246:	2b09      	cmp	r3, #9
 8021248:	d867      	bhi.n	802131a <_dtoa_r+0x29a>
 802124a:	2b05      	cmp	r3, #5
 802124c:	dd02      	ble.n	8021254 <_dtoa_r+0x1d4>
 802124e:	2400      	movs	r4, #0
 8021250:	3b04      	subs	r3, #4
 8021252:	9322      	str	r3, [sp, #136]	@ 0x88
 8021254:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021256:	1e98      	subs	r0, r3, #2
 8021258:	2803      	cmp	r0, #3
 802125a:	d867      	bhi.n	802132c <_dtoa_r+0x2ac>
 802125c:	f7de ff8e 	bl	800017c <__gnu_thumb1_case_uqi>
 8021260:	5b383a2b 	.word	0x5b383a2b
 8021264:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021266:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021268:	18f6      	adds	r6, r6, r3
 802126a:	4b68      	ldr	r3, [pc, #416]	@ (802140c <_dtoa_r+0x38c>)
 802126c:	18f2      	adds	r2, r6, r3
 802126e:	2a20      	cmp	r2, #32
 8021270:	dd0f      	ble.n	8021292 <_dtoa_r+0x212>
 8021272:	2340      	movs	r3, #64	@ 0x40
 8021274:	1a9b      	subs	r3, r3, r2
 8021276:	409f      	lsls	r7, r3
 8021278:	4b65      	ldr	r3, [pc, #404]	@ (8021410 <_dtoa_r+0x390>)
 802127a:	0038      	movs	r0, r7
 802127c:	18f3      	adds	r3, r6, r3
 802127e:	40dc      	lsrs	r4, r3
 8021280:	4320      	orrs	r0, r4
 8021282:	f7e2 f8cb 	bl	800341c <__aeabi_ui2d>
 8021286:	2201      	movs	r2, #1
 8021288:	4b62      	ldr	r3, [pc, #392]	@ (8021414 <_dtoa_r+0x394>)
 802128a:	1e77      	subs	r7, r6, #1
 802128c:	18cb      	adds	r3, r1, r3
 802128e:	9218      	str	r2, [sp, #96]	@ 0x60
 8021290:	e776      	b.n	8021180 <_dtoa_r+0x100>
 8021292:	2320      	movs	r3, #32
 8021294:	0020      	movs	r0, r4
 8021296:	1a9b      	subs	r3, r3, r2
 8021298:	4098      	lsls	r0, r3
 802129a:	e7f2      	b.n	8021282 <_dtoa_r+0x202>
 802129c:	9015      	str	r0, [sp, #84]	@ 0x54
 802129e:	e7ba      	b.n	8021216 <_dtoa_r+0x196>
 80212a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80212a2:	e7c3      	b.n	802122c <_dtoa_r+0x1ac>
 80212a4:	9b06      	ldr	r3, [sp, #24]
 80212a6:	9a04      	ldr	r2, [sp, #16]
 80212a8:	1a9b      	subs	r3, r3, r2
 80212aa:	9306      	str	r3, [sp, #24]
 80212ac:	4253      	negs	r3, r2
 80212ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80212b0:	2300      	movs	r3, #0
 80212b2:	9314      	str	r3, [sp, #80]	@ 0x50
 80212b4:	e7c5      	b.n	8021242 <_dtoa_r+0x1c2>
 80212b6:	2300      	movs	r3, #0
 80212b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80212ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80212bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80212be:	9309      	str	r3, [sp, #36]	@ 0x24
 80212c0:	2b00      	cmp	r3, #0
 80212c2:	dc13      	bgt.n	80212ec <_dtoa_r+0x26c>
 80212c4:	2301      	movs	r3, #1
 80212c6:	001a      	movs	r2, r3
 80212c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80212ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80212cc:	9223      	str	r2, [sp, #140]	@ 0x8c
 80212ce:	e00d      	b.n	80212ec <_dtoa_r+0x26c>
 80212d0:	2301      	movs	r3, #1
 80212d2:	e7f1      	b.n	80212b8 <_dtoa_r+0x238>
 80212d4:	2300      	movs	r3, #0
 80212d6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80212d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80212da:	4694      	mov	ip, r2
 80212dc:	9b04      	ldr	r3, [sp, #16]
 80212de:	4463      	add	r3, ip
 80212e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80212e2:	3301      	adds	r3, #1
 80212e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	dc00      	bgt.n	80212ec <_dtoa_r+0x26c>
 80212ea:	2301      	movs	r3, #1
 80212ec:	9a03      	ldr	r2, [sp, #12]
 80212ee:	2100      	movs	r1, #0
 80212f0:	69d0      	ldr	r0, [r2, #28]
 80212f2:	2204      	movs	r2, #4
 80212f4:	0015      	movs	r5, r2
 80212f6:	3514      	adds	r5, #20
 80212f8:	429d      	cmp	r5, r3
 80212fa:	d91b      	bls.n	8021334 <_dtoa_r+0x2b4>
 80212fc:	6041      	str	r1, [r0, #4]
 80212fe:	9803      	ldr	r0, [sp, #12]
 8021300:	f001 f924 	bl	802254c <_Balloc>
 8021304:	9008      	str	r0, [sp, #32]
 8021306:	2800      	cmp	r0, #0
 8021308:	d117      	bne.n	802133a <_dtoa_r+0x2ba>
 802130a:	21b0      	movs	r1, #176	@ 0xb0
 802130c:	4b42      	ldr	r3, [pc, #264]	@ (8021418 <_dtoa_r+0x398>)
 802130e:	482e      	ldr	r0, [pc, #184]	@ (80213c8 <_dtoa_r+0x348>)
 8021310:	9a08      	ldr	r2, [sp, #32]
 8021312:	31ff      	adds	r1, #255	@ 0xff
 8021314:	e6c9      	b.n	80210aa <_dtoa_r+0x2a>
 8021316:	2301      	movs	r3, #1
 8021318:	e7dd      	b.n	80212d6 <_dtoa_r+0x256>
 802131a:	2300      	movs	r3, #0
 802131c:	9410      	str	r4, [sp, #64]	@ 0x40
 802131e:	9322      	str	r3, [sp, #136]	@ 0x88
 8021320:	3b01      	subs	r3, #1
 8021322:	930e      	str	r3, [sp, #56]	@ 0x38
 8021324:	9309      	str	r3, [sp, #36]	@ 0x24
 8021326:	2200      	movs	r2, #0
 8021328:	3313      	adds	r3, #19
 802132a:	e7cf      	b.n	80212cc <_dtoa_r+0x24c>
 802132c:	2301      	movs	r3, #1
 802132e:	9310      	str	r3, [sp, #64]	@ 0x40
 8021330:	3b02      	subs	r3, #2
 8021332:	e7f6      	b.n	8021322 <_dtoa_r+0x2a2>
 8021334:	3101      	adds	r1, #1
 8021336:	0052      	lsls	r2, r2, #1
 8021338:	e7dc      	b.n	80212f4 <_dtoa_r+0x274>
 802133a:	9b03      	ldr	r3, [sp, #12]
 802133c:	9a08      	ldr	r2, [sp, #32]
 802133e:	69db      	ldr	r3, [r3, #28]
 8021340:	601a      	str	r2, [r3, #0]
 8021342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021344:	2b0e      	cmp	r3, #14
 8021346:	d900      	bls.n	802134a <_dtoa_r+0x2ca>
 8021348:	e0d9      	b.n	80214fe <_dtoa_r+0x47e>
 802134a:	2c00      	cmp	r4, #0
 802134c:	d100      	bne.n	8021350 <_dtoa_r+0x2d0>
 802134e:	e0d6      	b.n	80214fe <_dtoa_r+0x47e>
 8021350:	9b04      	ldr	r3, [sp, #16]
 8021352:	2b00      	cmp	r3, #0
 8021354:	dd64      	ble.n	8021420 <_dtoa_r+0x3a0>
 8021356:	210f      	movs	r1, #15
 8021358:	9a04      	ldr	r2, [sp, #16]
 802135a:	4b2b      	ldr	r3, [pc, #172]	@ (8021408 <_dtoa_r+0x388>)
 802135c:	400a      	ands	r2, r1
 802135e:	00d2      	lsls	r2, r2, #3
 8021360:	189b      	adds	r3, r3, r2
 8021362:	681e      	ldr	r6, [r3, #0]
 8021364:	685f      	ldr	r7, [r3, #4]
 8021366:	9b04      	ldr	r3, [sp, #16]
 8021368:	2402      	movs	r4, #2
 802136a:	111d      	asrs	r5, r3, #4
 802136c:	05db      	lsls	r3, r3, #23
 802136e:	d50a      	bpl.n	8021386 <_dtoa_r+0x306>
 8021370:	4b2a      	ldr	r3, [pc, #168]	@ (802141c <_dtoa_r+0x39c>)
 8021372:	400d      	ands	r5, r1
 8021374:	6a1a      	ldr	r2, [r3, #32]
 8021376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021378:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802137a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802137c:	f7e0 fd1a 	bl	8001db4 <__aeabi_ddiv>
 8021380:	900a      	str	r0, [sp, #40]	@ 0x28
 8021382:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021384:	3401      	adds	r4, #1
 8021386:	4b25      	ldr	r3, [pc, #148]	@ (802141c <_dtoa_r+0x39c>)
 8021388:	930c      	str	r3, [sp, #48]	@ 0x30
 802138a:	2d00      	cmp	r5, #0
 802138c:	d108      	bne.n	80213a0 <_dtoa_r+0x320>
 802138e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021392:	0032      	movs	r2, r6
 8021394:	003b      	movs	r3, r7
 8021396:	f7e0 fd0d 	bl	8001db4 <__aeabi_ddiv>
 802139a:	900a      	str	r0, [sp, #40]	@ 0x28
 802139c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802139e:	e05a      	b.n	8021456 <_dtoa_r+0x3d6>
 80213a0:	2301      	movs	r3, #1
 80213a2:	421d      	tst	r5, r3
 80213a4:	d009      	beq.n	80213ba <_dtoa_r+0x33a>
 80213a6:	18e4      	adds	r4, r4, r3
 80213a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80213aa:	0030      	movs	r0, r6
 80213ac:	681a      	ldr	r2, [r3, #0]
 80213ae:	685b      	ldr	r3, [r3, #4]
 80213b0:	0039      	movs	r1, r7
 80213b2:	f7e1 f943 	bl	800263c <__aeabi_dmul>
 80213b6:	0006      	movs	r6, r0
 80213b8:	000f      	movs	r7, r1
 80213ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80213bc:	106d      	asrs	r5, r5, #1
 80213be:	3308      	adds	r3, #8
 80213c0:	e7e2      	b.n	8021388 <_dtoa_r+0x308>
 80213c2:	46c0      	nop			@ (mov r8, r8)
 80213c4:	08026ec2 	.word	0x08026ec2
 80213c8:	08026ed9 	.word	0x08026ed9
 80213cc:	7ff00000 	.word	0x7ff00000
 80213d0:	0000270f 	.word	0x0000270f
 80213d4:	08026ebe 	.word	0x08026ebe
 80213d8:	08026ec1 	.word	0x08026ec1
 80213dc:	08026e8a 	.word	0x08026e8a
 80213e0:	08026e89 	.word	0x08026e89
 80213e4:	3ff00000 	.word	0x3ff00000
 80213e8:	fffffc01 	.word	0xfffffc01
 80213ec:	3ff80000 	.word	0x3ff80000
 80213f0:	636f4361 	.word	0x636f4361
 80213f4:	3fd287a7 	.word	0x3fd287a7
 80213f8:	8b60c8b3 	.word	0x8b60c8b3
 80213fc:	3fc68a28 	.word	0x3fc68a28
 8021400:	509f79fb 	.word	0x509f79fb
 8021404:	3fd34413 	.word	0x3fd34413
 8021408:	08027030 	.word	0x08027030
 802140c:	00000432 	.word	0x00000432
 8021410:	00000412 	.word	0x00000412
 8021414:	fe100000 	.word	0xfe100000
 8021418:	08026f31 	.word	0x08026f31
 802141c:	08027008 	.word	0x08027008
 8021420:	9b04      	ldr	r3, [sp, #16]
 8021422:	2402      	movs	r4, #2
 8021424:	2b00      	cmp	r3, #0
 8021426:	d016      	beq.n	8021456 <_dtoa_r+0x3d6>
 8021428:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802142a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802142c:	220f      	movs	r2, #15
 802142e:	425d      	negs	r5, r3
 8021430:	402a      	ands	r2, r5
 8021432:	4bd7      	ldr	r3, [pc, #860]	@ (8021790 <_dtoa_r+0x710>)
 8021434:	00d2      	lsls	r2, r2, #3
 8021436:	189b      	adds	r3, r3, r2
 8021438:	681a      	ldr	r2, [r3, #0]
 802143a:	685b      	ldr	r3, [r3, #4]
 802143c:	f7e1 f8fe 	bl	800263c <__aeabi_dmul>
 8021440:	2701      	movs	r7, #1
 8021442:	2300      	movs	r3, #0
 8021444:	900a      	str	r0, [sp, #40]	@ 0x28
 8021446:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021448:	4ed2      	ldr	r6, [pc, #840]	@ (8021794 <_dtoa_r+0x714>)
 802144a:	112d      	asrs	r5, r5, #4
 802144c:	2d00      	cmp	r5, #0
 802144e:	d000      	beq.n	8021452 <_dtoa_r+0x3d2>
 8021450:	e0ba      	b.n	80215c8 <_dtoa_r+0x548>
 8021452:	2b00      	cmp	r3, #0
 8021454:	d1a1      	bne.n	802139a <_dtoa_r+0x31a>
 8021456:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8021458:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802145a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802145c:	2b00      	cmp	r3, #0
 802145e:	d100      	bne.n	8021462 <_dtoa_r+0x3e2>
 8021460:	e0bd      	b.n	80215de <_dtoa_r+0x55e>
 8021462:	2200      	movs	r2, #0
 8021464:	0030      	movs	r0, r6
 8021466:	0039      	movs	r1, r7
 8021468:	4bcb      	ldr	r3, [pc, #812]	@ (8021798 <_dtoa_r+0x718>)
 802146a:	f7df f827 	bl	80004bc <__aeabi_dcmplt>
 802146e:	2800      	cmp	r0, #0
 8021470:	d100      	bne.n	8021474 <_dtoa_r+0x3f4>
 8021472:	e0b4      	b.n	80215de <_dtoa_r+0x55e>
 8021474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021476:	2b00      	cmp	r3, #0
 8021478:	d100      	bne.n	802147c <_dtoa_r+0x3fc>
 802147a:	e0b0      	b.n	80215de <_dtoa_r+0x55e>
 802147c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802147e:	2b00      	cmp	r3, #0
 8021480:	dd39      	ble.n	80214f6 <_dtoa_r+0x476>
 8021482:	9b04      	ldr	r3, [sp, #16]
 8021484:	2200      	movs	r2, #0
 8021486:	3b01      	subs	r3, #1
 8021488:	930c      	str	r3, [sp, #48]	@ 0x30
 802148a:	0030      	movs	r0, r6
 802148c:	4bc3      	ldr	r3, [pc, #780]	@ (802179c <_dtoa_r+0x71c>)
 802148e:	0039      	movs	r1, r7
 8021490:	f7e1 f8d4 	bl	800263c <__aeabi_dmul>
 8021494:	900a      	str	r0, [sp, #40]	@ 0x28
 8021496:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021498:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802149a:	3401      	adds	r4, #1
 802149c:	0020      	movs	r0, r4
 802149e:	9311      	str	r3, [sp, #68]	@ 0x44
 80214a0:	f7e1 ff8e 	bl	80033c0 <__aeabi_i2d>
 80214a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80214a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80214a8:	f7e1 f8c8 	bl	800263c <__aeabi_dmul>
 80214ac:	4bbc      	ldr	r3, [pc, #752]	@ (80217a0 <_dtoa_r+0x720>)
 80214ae:	2200      	movs	r2, #0
 80214b0:	f7e0 f91c 	bl	80016ec <__aeabi_dadd>
 80214b4:	4bbb      	ldr	r3, [pc, #748]	@ (80217a4 <_dtoa_r+0x724>)
 80214b6:	0006      	movs	r6, r0
 80214b8:	18cf      	adds	r7, r1, r3
 80214ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80214bc:	2b00      	cmp	r3, #0
 80214be:	d000      	beq.n	80214c2 <_dtoa_r+0x442>
 80214c0:	e091      	b.n	80215e6 <_dtoa_r+0x566>
 80214c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80214c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80214c6:	2200      	movs	r2, #0
 80214c8:	4bb7      	ldr	r3, [pc, #732]	@ (80217a8 <_dtoa_r+0x728>)
 80214ca:	f7e1 fb7f 	bl	8002bcc <__aeabi_dsub>
 80214ce:	0032      	movs	r2, r6
 80214d0:	003b      	movs	r3, r7
 80214d2:	0004      	movs	r4, r0
 80214d4:	000d      	movs	r5, r1
 80214d6:	f7df f805 	bl	80004e4 <__aeabi_dcmpgt>
 80214da:	2800      	cmp	r0, #0
 80214dc:	d000      	beq.n	80214e0 <_dtoa_r+0x460>
 80214de:	e29d      	b.n	8021a1c <_dtoa_r+0x99c>
 80214e0:	2180      	movs	r1, #128	@ 0x80
 80214e2:	0609      	lsls	r1, r1, #24
 80214e4:	187b      	adds	r3, r7, r1
 80214e6:	0032      	movs	r2, r6
 80214e8:	0020      	movs	r0, r4
 80214ea:	0029      	movs	r1, r5
 80214ec:	f7de ffe6 	bl	80004bc <__aeabi_dcmplt>
 80214f0:	2800      	cmp	r0, #0
 80214f2:	d000      	beq.n	80214f6 <_dtoa_r+0x476>
 80214f4:	e130      	b.n	8021758 <_dtoa_r+0x6d8>
 80214f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80214f8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80214fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80214fc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80214fe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021500:	2b00      	cmp	r3, #0
 8021502:	da00      	bge.n	8021506 <_dtoa_r+0x486>
 8021504:	e177      	b.n	80217f6 <_dtoa_r+0x776>
 8021506:	9a04      	ldr	r2, [sp, #16]
 8021508:	2a0e      	cmp	r2, #14
 802150a:	dd00      	ble.n	802150e <_dtoa_r+0x48e>
 802150c:	e173      	b.n	80217f6 <_dtoa_r+0x776>
 802150e:	4ba0      	ldr	r3, [pc, #640]	@ (8021790 <_dtoa_r+0x710>)
 8021510:	00d2      	lsls	r2, r2, #3
 8021512:	189b      	adds	r3, r3, r2
 8021514:	685c      	ldr	r4, [r3, #4]
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	9306      	str	r3, [sp, #24]
 802151a:	9407      	str	r4, [sp, #28]
 802151c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802151e:	2b00      	cmp	r3, #0
 8021520:	da03      	bge.n	802152a <_dtoa_r+0x4aa>
 8021522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021524:	2b00      	cmp	r3, #0
 8021526:	dc00      	bgt.n	802152a <_dtoa_r+0x4aa>
 8021528:	e106      	b.n	8021738 <_dtoa_r+0x6b8>
 802152a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802152c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802152e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021530:	9d08      	ldr	r5, [sp, #32]
 8021532:	3b01      	subs	r3, #1
 8021534:	195b      	adds	r3, r3, r5
 8021536:	930a      	str	r3, [sp, #40]	@ 0x28
 8021538:	9a06      	ldr	r2, [sp, #24]
 802153a:	9b07      	ldr	r3, [sp, #28]
 802153c:	0030      	movs	r0, r6
 802153e:	0039      	movs	r1, r7
 8021540:	f7e0 fc38 	bl	8001db4 <__aeabi_ddiv>
 8021544:	f7e1 ff00 	bl	8003348 <__aeabi_d2iz>
 8021548:	9009      	str	r0, [sp, #36]	@ 0x24
 802154a:	f7e1 ff39 	bl	80033c0 <__aeabi_i2d>
 802154e:	9a06      	ldr	r2, [sp, #24]
 8021550:	9b07      	ldr	r3, [sp, #28]
 8021552:	f7e1 f873 	bl	800263c <__aeabi_dmul>
 8021556:	0002      	movs	r2, r0
 8021558:	000b      	movs	r3, r1
 802155a:	0030      	movs	r0, r6
 802155c:	0039      	movs	r1, r7
 802155e:	f7e1 fb35 	bl	8002bcc <__aeabi_dsub>
 8021562:	002b      	movs	r3, r5
 8021564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021566:	3501      	adds	r5, #1
 8021568:	3230      	adds	r2, #48	@ 0x30
 802156a:	701a      	strb	r2, [r3, #0]
 802156c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802156e:	002c      	movs	r4, r5
 8021570:	429a      	cmp	r2, r3
 8021572:	d000      	beq.n	8021576 <_dtoa_r+0x4f6>
 8021574:	e131      	b.n	80217da <_dtoa_r+0x75a>
 8021576:	0002      	movs	r2, r0
 8021578:	000b      	movs	r3, r1
 802157a:	f7e0 f8b7 	bl	80016ec <__aeabi_dadd>
 802157e:	9a06      	ldr	r2, [sp, #24]
 8021580:	9b07      	ldr	r3, [sp, #28]
 8021582:	0006      	movs	r6, r0
 8021584:	000f      	movs	r7, r1
 8021586:	f7de ffad 	bl	80004e4 <__aeabi_dcmpgt>
 802158a:	2800      	cmp	r0, #0
 802158c:	d000      	beq.n	8021590 <_dtoa_r+0x510>
 802158e:	e10f      	b.n	80217b0 <_dtoa_r+0x730>
 8021590:	9a06      	ldr	r2, [sp, #24]
 8021592:	9b07      	ldr	r3, [sp, #28]
 8021594:	0030      	movs	r0, r6
 8021596:	0039      	movs	r1, r7
 8021598:	f7de ff8a 	bl	80004b0 <__aeabi_dcmpeq>
 802159c:	2800      	cmp	r0, #0
 802159e:	d003      	beq.n	80215a8 <_dtoa_r+0x528>
 80215a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215a2:	07dd      	lsls	r5, r3, #31
 80215a4:	d500      	bpl.n	80215a8 <_dtoa_r+0x528>
 80215a6:	e103      	b.n	80217b0 <_dtoa_r+0x730>
 80215a8:	9905      	ldr	r1, [sp, #20]
 80215aa:	9803      	ldr	r0, [sp, #12]
 80215ac:	f001 f812 	bl	80225d4 <_Bfree>
 80215b0:	2300      	movs	r3, #0
 80215b2:	7023      	strb	r3, [r4, #0]
 80215b4:	9b04      	ldr	r3, [sp, #16]
 80215b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80215b8:	3301      	adds	r3, #1
 80215ba:	6013      	str	r3, [r2, #0]
 80215bc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80215be:	2b00      	cmp	r3, #0
 80215c0:	d100      	bne.n	80215c4 <_dtoa_r+0x544>
 80215c2:	e5a7      	b.n	8021114 <_dtoa_r+0x94>
 80215c4:	601c      	str	r4, [r3, #0]
 80215c6:	e5a5      	b.n	8021114 <_dtoa_r+0x94>
 80215c8:	423d      	tst	r5, r7
 80215ca:	d005      	beq.n	80215d8 <_dtoa_r+0x558>
 80215cc:	6832      	ldr	r2, [r6, #0]
 80215ce:	6873      	ldr	r3, [r6, #4]
 80215d0:	f7e1 f834 	bl	800263c <__aeabi_dmul>
 80215d4:	003b      	movs	r3, r7
 80215d6:	3401      	adds	r4, #1
 80215d8:	106d      	asrs	r5, r5, #1
 80215da:	3608      	adds	r6, #8
 80215dc:	e736      	b.n	802144c <_dtoa_r+0x3cc>
 80215de:	9b04      	ldr	r3, [sp, #16]
 80215e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80215e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215e4:	e75a      	b.n	802149c <_dtoa_r+0x41c>
 80215e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80215e8:	4b69      	ldr	r3, [pc, #420]	@ (8021790 <_dtoa_r+0x710>)
 80215ea:	3a01      	subs	r2, #1
 80215ec:	00d2      	lsls	r2, r2, #3
 80215ee:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80215f0:	189b      	adds	r3, r3, r2
 80215f2:	681a      	ldr	r2, [r3, #0]
 80215f4:	685b      	ldr	r3, [r3, #4]
 80215f6:	2900      	cmp	r1, #0
 80215f8:	d04c      	beq.n	8021694 <_dtoa_r+0x614>
 80215fa:	2000      	movs	r0, #0
 80215fc:	496b      	ldr	r1, [pc, #428]	@ (80217ac <_dtoa_r+0x72c>)
 80215fe:	f7e0 fbd9 	bl	8001db4 <__aeabi_ddiv>
 8021602:	0032      	movs	r2, r6
 8021604:	003b      	movs	r3, r7
 8021606:	f7e1 fae1 	bl	8002bcc <__aeabi_dsub>
 802160a:	9a08      	ldr	r2, [sp, #32]
 802160c:	0006      	movs	r6, r0
 802160e:	4694      	mov	ip, r2
 8021610:	000f      	movs	r7, r1
 8021612:	9b08      	ldr	r3, [sp, #32]
 8021614:	9316      	str	r3, [sp, #88]	@ 0x58
 8021616:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021618:	4463      	add	r3, ip
 802161a:	9311      	str	r3, [sp, #68]	@ 0x44
 802161c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802161e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021620:	f7e1 fe92 	bl	8003348 <__aeabi_d2iz>
 8021624:	0005      	movs	r5, r0
 8021626:	f7e1 fecb 	bl	80033c0 <__aeabi_i2d>
 802162a:	0002      	movs	r2, r0
 802162c:	000b      	movs	r3, r1
 802162e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021630:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021632:	f7e1 facb 	bl	8002bcc <__aeabi_dsub>
 8021636:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021638:	3530      	adds	r5, #48	@ 0x30
 802163a:	1c5c      	adds	r4, r3, #1
 802163c:	701d      	strb	r5, [r3, #0]
 802163e:	0032      	movs	r2, r6
 8021640:	003b      	movs	r3, r7
 8021642:	900a      	str	r0, [sp, #40]	@ 0x28
 8021644:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021646:	f7de ff39 	bl	80004bc <__aeabi_dcmplt>
 802164a:	2800      	cmp	r0, #0
 802164c:	d16a      	bne.n	8021724 <_dtoa_r+0x6a4>
 802164e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021650:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021652:	2000      	movs	r0, #0
 8021654:	4950      	ldr	r1, [pc, #320]	@ (8021798 <_dtoa_r+0x718>)
 8021656:	f7e1 fab9 	bl	8002bcc <__aeabi_dsub>
 802165a:	0032      	movs	r2, r6
 802165c:	003b      	movs	r3, r7
 802165e:	f7de ff2d 	bl	80004bc <__aeabi_dcmplt>
 8021662:	2800      	cmp	r0, #0
 8021664:	d000      	beq.n	8021668 <_dtoa_r+0x5e8>
 8021666:	e0a5      	b.n	80217b4 <_dtoa_r+0x734>
 8021668:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802166a:	42a3      	cmp	r3, r4
 802166c:	d100      	bne.n	8021670 <_dtoa_r+0x5f0>
 802166e:	e742      	b.n	80214f6 <_dtoa_r+0x476>
 8021670:	2200      	movs	r2, #0
 8021672:	0030      	movs	r0, r6
 8021674:	0039      	movs	r1, r7
 8021676:	4b49      	ldr	r3, [pc, #292]	@ (802179c <_dtoa_r+0x71c>)
 8021678:	f7e0 ffe0 	bl	800263c <__aeabi_dmul>
 802167c:	2200      	movs	r2, #0
 802167e:	0006      	movs	r6, r0
 8021680:	000f      	movs	r7, r1
 8021682:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021686:	4b45      	ldr	r3, [pc, #276]	@ (802179c <_dtoa_r+0x71c>)
 8021688:	f7e0 ffd8 	bl	800263c <__aeabi_dmul>
 802168c:	9416      	str	r4, [sp, #88]	@ 0x58
 802168e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021690:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021692:	e7c3      	b.n	802161c <_dtoa_r+0x59c>
 8021694:	0030      	movs	r0, r6
 8021696:	0039      	movs	r1, r7
 8021698:	f7e0 ffd0 	bl	800263c <__aeabi_dmul>
 802169c:	9d08      	ldr	r5, [sp, #32]
 802169e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80216a0:	002b      	movs	r3, r5
 80216a2:	4694      	mov	ip, r2
 80216a4:	9016      	str	r0, [sp, #88]	@ 0x58
 80216a6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80216a8:	4463      	add	r3, ip
 80216aa:	9319      	str	r3, [sp, #100]	@ 0x64
 80216ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80216ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80216b0:	f7e1 fe4a 	bl	8003348 <__aeabi_d2iz>
 80216b4:	0004      	movs	r4, r0
 80216b6:	f7e1 fe83 	bl	80033c0 <__aeabi_i2d>
 80216ba:	000b      	movs	r3, r1
 80216bc:	0002      	movs	r2, r0
 80216be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80216c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80216c2:	f7e1 fa83 	bl	8002bcc <__aeabi_dsub>
 80216c6:	3430      	adds	r4, #48	@ 0x30
 80216c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80216ca:	702c      	strb	r4, [r5, #0]
 80216cc:	3501      	adds	r5, #1
 80216ce:	0006      	movs	r6, r0
 80216d0:	000f      	movs	r7, r1
 80216d2:	42ab      	cmp	r3, r5
 80216d4:	d129      	bne.n	802172a <_dtoa_r+0x6aa>
 80216d6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80216d8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80216da:	9b08      	ldr	r3, [sp, #32]
 80216dc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80216de:	469c      	mov	ip, r3
 80216e0:	2200      	movs	r2, #0
 80216e2:	4b32      	ldr	r3, [pc, #200]	@ (80217ac <_dtoa_r+0x72c>)
 80216e4:	4464      	add	r4, ip
 80216e6:	f7e0 f801 	bl	80016ec <__aeabi_dadd>
 80216ea:	0002      	movs	r2, r0
 80216ec:	000b      	movs	r3, r1
 80216ee:	0030      	movs	r0, r6
 80216f0:	0039      	movs	r1, r7
 80216f2:	f7de fef7 	bl	80004e4 <__aeabi_dcmpgt>
 80216f6:	2800      	cmp	r0, #0
 80216f8:	d15c      	bne.n	80217b4 <_dtoa_r+0x734>
 80216fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80216fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80216fe:	2000      	movs	r0, #0
 8021700:	492a      	ldr	r1, [pc, #168]	@ (80217ac <_dtoa_r+0x72c>)
 8021702:	f7e1 fa63 	bl	8002bcc <__aeabi_dsub>
 8021706:	0002      	movs	r2, r0
 8021708:	000b      	movs	r3, r1
 802170a:	0030      	movs	r0, r6
 802170c:	0039      	movs	r1, r7
 802170e:	f7de fed5 	bl	80004bc <__aeabi_dcmplt>
 8021712:	2800      	cmp	r0, #0
 8021714:	d100      	bne.n	8021718 <_dtoa_r+0x698>
 8021716:	e6ee      	b.n	80214f6 <_dtoa_r+0x476>
 8021718:	0023      	movs	r3, r4
 802171a:	3c01      	subs	r4, #1
 802171c:	7822      	ldrb	r2, [r4, #0]
 802171e:	2a30      	cmp	r2, #48	@ 0x30
 8021720:	d0fa      	beq.n	8021718 <_dtoa_r+0x698>
 8021722:	001c      	movs	r4, r3
 8021724:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021726:	9304      	str	r3, [sp, #16]
 8021728:	e73e      	b.n	80215a8 <_dtoa_r+0x528>
 802172a:	2200      	movs	r2, #0
 802172c:	4b1b      	ldr	r3, [pc, #108]	@ (802179c <_dtoa_r+0x71c>)
 802172e:	f7e0 ff85 	bl	800263c <__aeabi_dmul>
 8021732:	900a      	str	r0, [sp, #40]	@ 0x28
 8021734:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021736:	e7b9      	b.n	80216ac <_dtoa_r+0x62c>
 8021738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802173a:	2b00      	cmp	r3, #0
 802173c:	d10c      	bne.n	8021758 <_dtoa_r+0x6d8>
 802173e:	9806      	ldr	r0, [sp, #24]
 8021740:	9907      	ldr	r1, [sp, #28]
 8021742:	2200      	movs	r2, #0
 8021744:	4b18      	ldr	r3, [pc, #96]	@ (80217a8 <_dtoa_r+0x728>)
 8021746:	f7e0 ff79 	bl	800263c <__aeabi_dmul>
 802174a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802174c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802174e:	f7de fed3 	bl	80004f8 <__aeabi_dcmpge>
 8021752:	2800      	cmp	r0, #0
 8021754:	d100      	bne.n	8021758 <_dtoa_r+0x6d8>
 8021756:	e164      	b.n	8021a22 <_dtoa_r+0x9a2>
 8021758:	2600      	movs	r6, #0
 802175a:	0037      	movs	r7, r6
 802175c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802175e:	9c08      	ldr	r4, [sp, #32]
 8021760:	43db      	mvns	r3, r3
 8021762:	930c      	str	r3, [sp, #48]	@ 0x30
 8021764:	2300      	movs	r3, #0
 8021766:	9304      	str	r3, [sp, #16]
 8021768:	0031      	movs	r1, r6
 802176a:	9803      	ldr	r0, [sp, #12]
 802176c:	f000 ff32 	bl	80225d4 <_Bfree>
 8021770:	2f00      	cmp	r7, #0
 8021772:	d0d7      	beq.n	8021724 <_dtoa_r+0x6a4>
 8021774:	9b04      	ldr	r3, [sp, #16]
 8021776:	2b00      	cmp	r3, #0
 8021778:	d005      	beq.n	8021786 <_dtoa_r+0x706>
 802177a:	42bb      	cmp	r3, r7
 802177c:	d003      	beq.n	8021786 <_dtoa_r+0x706>
 802177e:	0019      	movs	r1, r3
 8021780:	9803      	ldr	r0, [sp, #12]
 8021782:	f000 ff27 	bl	80225d4 <_Bfree>
 8021786:	0039      	movs	r1, r7
 8021788:	9803      	ldr	r0, [sp, #12]
 802178a:	f000 ff23 	bl	80225d4 <_Bfree>
 802178e:	e7c9      	b.n	8021724 <_dtoa_r+0x6a4>
 8021790:	08027030 	.word	0x08027030
 8021794:	08027008 	.word	0x08027008
 8021798:	3ff00000 	.word	0x3ff00000
 802179c:	40240000 	.word	0x40240000
 80217a0:	401c0000 	.word	0x401c0000
 80217a4:	fcc00000 	.word	0xfcc00000
 80217a8:	40140000 	.word	0x40140000
 80217ac:	3fe00000 	.word	0x3fe00000
 80217b0:	9b04      	ldr	r3, [sp, #16]
 80217b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80217b4:	0023      	movs	r3, r4
 80217b6:	001c      	movs	r4, r3
 80217b8:	3b01      	subs	r3, #1
 80217ba:	781a      	ldrb	r2, [r3, #0]
 80217bc:	2a39      	cmp	r2, #57	@ 0x39
 80217be:	d108      	bne.n	80217d2 <_dtoa_r+0x752>
 80217c0:	9a08      	ldr	r2, [sp, #32]
 80217c2:	429a      	cmp	r2, r3
 80217c4:	d1f7      	bne.n	80217b6 <_dtoa_r+0x736>
 80217c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80217c8:	9908      	ldr	r1, [sp, #32]
 80217ca:	3201      	adds	r2, #1
 80217cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80217ce:	2230      	movs	r2, #48	@ 0x30
 80217d0:	700a      	strb	r2, [r1, #0]
 80217d2:	781a      	ldrb	r2, [r3, #0]
 80217d4:	3201      	adds	r2, #1
 80217d6:	701a      	strb	r2, [r3, #0]
 80217d8:	e7a4      	b.n	8021724 <_dtoa_r+0x6a4>
 80217da:	2200      	movs	r2, #0
 80217dc:	4bc6      	ldr	r3, [pc, #792]	@ (8021af8 <_dtoa_r+0xa78>)
 80217de:	f7e0 ff2d 	bl	800263c <__aeabi_dmul>
 80217e2:	2200      	movs	r2, #0
 80217e4:	2300      	movs	r3, #0
 80217e6:	0006      	movs	r6, r0
 80217e8:	000f      	movs	r7, r1
 80217ea:	f7de fe61 	bl	80004b0 <__aeabi_dcmpeq>
 80217ee:	2800      	cmp	r0, #0
 80217f0:	d100      	bne.n	80217f4 <_dtoa_r+0x774>
 80217f2:	e6a1      	b.n	8021538 <_dtoa_r+0x4b8>
 80217f4:	e6d8      	b.n	80215a8 <_dtoa_r+0x528>
 80217f6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80217f8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80217fa:	9c06      	ldr	r4, [sp, #24]
 80217fc:	2f00      	cmp	r7, #0
 80217fe:	d014      	beq.n	802182a <_dtoa_r+0x7aa>
 8021800:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8021802:	2a01      	cmp	r2, #1
 8021804:	dd00      	ble.n	8021808 <_dtoa_r+0x788>
 8021806:	e0c8      	b.n	802199a <_dtoa_r+0x91a>
 8021808:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802180a:	2a00      	cmp	r2, #0
 802180c:	d100      	bne.n	8021810 <_dtoa_r+0x790>
 802180e:	e0be      	b.n	802198e <_dtoa_r+0x90e>
 8021810:	4aba      	ldr	r2, [pc, #744]	@ (8021afc <_dtoa_r+0xa7c>)
 8021812:	189b      	adds	r3, r3, r2
 8021814:	9a06      	ldr	r2, [sp, #24]
 8021816:	2101      	movs	r1, #1
 8021818:	18d2      	adds	r2, r2, r3
 802181a:	9206      	str	r2, [sp, #24]
 802181c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802181e:	9803      	ldr	r0, [sp, #12]
 8021820:	18d3      	adds	r3, r2, r3
 8021822:	930d      	str	r3, [sp, #52]	@ 0x34
 8021824:	f000 ffda 	bl	80227dc <__i2b>
 8021828:	0007      	movs	r7, r0
 802182a:	2c00      	cmp	r4, #0
 802182c:	d00e      	beq.n	802184c <_dtoa_r+0x7cc>
 802182e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021830:	2b00      	cmp	r3, #0
 8021832:	dd0b      	ble.n	802184c <_dtoa_r+0x7cc>
 8021834:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021836:	0023      	movs	r3, r4
 8021838:	4294      	cmp	r4, r2
 802183a:	dd00      	ble.n	802183e <_dtoa_r+0x7be>
 802183c:	0013      	movs	r3, r2
 802183e:	9a06      	ldr	r2, [sp, #24]
 8021840:	1ae4      	subs	r4, r4, r3
 8021842:	1ad2      	subs	r2, r2, r3
 8021844:	9206      	str	r2, [sp, #24]
 8021846:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021848:	1ad3      	subs	r3, r2, r3
 802184a:	930d      	str	r3, [sp, #52]	@ 0x34
 802184c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802184e:	2b00      	cmp	r3, #0
 8021850:	d01f      	beq.n	8021892 <_dtoa_r+0x812>
 8021852:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021854:	2b00      	cmp	r3, #0
 8021856:	d100      	bne.n	802185a <_dtoa_r+0x7da>
 8021858:	e0b5      	b.n	80219c6 <_dtoa_r+0x946>
 802185a:	2d00      	cmp	r5, #0
 802185c:	d010      	beq.n	8021880 <_dtoa_r+0x800>
 802185e:	0039      	movs	r1, r7
 8021860:	002a      	movs	r2, r5
 8021862:	9803      	ldr	r0, [sp, #12]
 8021864:	f001 f884 	bl	8022970 <__pow5mult>
 8021868:	9a05      	ldr	r2, [sp, #20]
 802186a:	0001      	movs	r1, r0
 802186c:	0007      	movs	r7, r0
 802186e:	9803      	ldr	r0, [sp, #12]
 8021870:	f000 ffcc 	bl	802280c <__multiply>
 8021874:	0006      	movs	r6, r0
 8021876:	9905      	ldr	r1, [sp, #20]
 8021878:	9803      	ldr	r0, [sp, #12]
 802187a:	f000 feab 	bl	80225d4 <_Bfree>
 802187e:	9605      	str	r6, [sp, #20]
 8021880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021882:	1b5a      	subs	r2, r3, r5
 8021884:	42ab      	cmp	r3, r5
 8021886:	d004      	beq.n	8021892 <_dtoa_r+0x812>
 8021888:	9905      	ldr	r1, [sp, #20]
 802188a:	9803      	ldr	r0, [sp, #12]
 802188c:	f001 f870 	bl	8022970 <__pow5mult>
 8021890:	9005      	str	r0, [sp, #20]
 8021892:	2101      	movs	r1, #1
 8021894:	9803      	ldr	r0, [sp, #12]
 8021896:	f000 ffa1 	bl	80227dc <__i2b>
 802189a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802189c:	0006      	movs	r6, r0
 802189e:	2b00      	cmp	r3, #0
 80218a0:	d100      	bne.n	80218a4 <_dtoa_r+0x824>
 80218a2:	e1bc      	b.n	8021c1e <_dtoa_r+0xb9e>
 80218a4:	001a      	movs	r2, r3
 80218a6:	0001      	movs	r1, r0
 80218a8:	9803      	ldr	r0, [sp, #12]
 80218aa:	f001 f861 	bl	8022970 <__pow5mult>
 80218ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80218b0:	0006      	movs	r6, r0
 80218b2:	2500      	movs	r5, #0
 80218b4:	2b01      	cmp	r3, #1
 80218b6:	dc16      	bgt.n	80218e6 <_dtoa_r+0x866>
 80218b8:	2500      	movs	r5, #0
 80218ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80218bc:	42ab      	cmp	r3, r5
 80218be:	d10e      	bne.n	80218de <_dtoa_r+0x85e>
 80218c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80218c2:	031b      	lsls	r3, r3, #12
 80218c4:	42ab      	cmp	r3, r5
 80218c6:	d10a      	bne.n	80218de <_dtoa_r+0x85e>
 80218c8:	4b8d      	ldr	r3, [pc, #564]	@ (8021b00 <_dtoa_r+0xa80>)
 80218ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80218cc:	4213      	tst	r3, r2
 80218ce:	d006      	beq.n	80218de <_dtoa_r+0x85e>
 80218d0:	9b06      	ldr	r3, [sp, #24]
 80218d2:	3501      	adds	r5, #1
 80218d4:	3301      	adds	r3, #1
 80218d6:	9306      	str	r3, [sp, #24]
 80218d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80218da:	3301      	adds	r3, #1
 80218dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80218de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80218e0:	2001      	movs	r0, #1
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	d008      	beq.n	80218f8 <_dtoa_r+0x878>
 80218e6:	6933      	ldr	r3, [r6, #16]
 80218e8:	3303      	adds	r3, #3
 80218ea:	009b      	lsls	r3, r3, #2
 80218ec:	18f3      	adds	r3, r6, r3
 80218ee:	6858      	ldr	r0, [r3, #4]
 80218f0:	f000 ff24 	bl	802273c <__hi0bits>
 80218f4:	2320      	movs	r3, #32
 80218f6:	1a18      	subs	r0, r3, r0
 80218f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80218fa:	1818      	adds	r0, r3, r0
 80218fc:	0002      	movs	r2, r0
 80218fe:	231f      	movs	r3, #31
 8021900:	401a      	ands	r2, r3
 8021902:	4218      	tst	r0, r3
 8021904:	d065      	beq.n	80219d2 <_dtoa_r+0x952>
 8021906:	3301      	adds	r3, #1
 8021908:	1a9b      	subs	r3, r3, r2
 802190a:	2b04      	cmp	r3, #4
 802190c:	dd5d      	ble.n	80219ca <_dtoa_r+0x94a>
 802190e:	231c      	movs	r3, #28
 8021910:	1a9b      	subs	r3, r3, r2
 8021912:	9a06      	ldr	r2, [sp, #24]
 8021914:	18e4      	adds	r4, r4, r3
 8021916:	18d2      	adds	r2, r2, r3
 8021918:	9206      	str	r2, [sp, #24]
 802191a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802191c:	18d3      	adds	r3, r2, r3
 802191e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021920:	9b06      	ldr	r3, [sp, #24]
 8021922:	2b00      	cmp	r3, #0
 8021924:	dd05      	ble.n	8021932 <_dtoa_r+0x8b2>
 8021926:	001a      	movs	r2, r3
 8021928:	9905      	ldr	r1, [sp, #20]
 802192a:	9803      	ldr	r0, [sp, #12]
 802192c:	f001 f87c 	bl	8022a28 <__lshift>
 8021930:	9005      	str	r0, [sp, #20]
 8021932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021934:	2b00      	cmp	r3, #0
 8021936:	dd05      	ble.n	8021944 <_dtoa_r+0x8c4>
 8021938:	0031      	movs	r1, r6
 802193a:	001a      	movs	r2, r3
 802193c:	9803      	ldr	r0, [sp, #12]
 802193e:	f001 f873 	bl	8022a28 <__lshift>
 8021942:	0006      	movs	r6, r0
 8021944:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021946:	2b00      	cmp	r3, #0
 8021948:	d045      	beq.n	80219d6 <_dtoa_r+0x956>
 802194a:	0031      	movs	r1, r6
 802194c:	9805      	ldr	r0, [sp, #20]
 802194e:	f001 f8d7 	bl	8022b00 <__mcmp>
 8021952:	2800      	cmp	r0, #0
 8021954:	da3f      	bge.n	80219d6 <_dtoa_r+0x956>
 8021956:	9b04      	ldr	r3, [sp, #16]
 8021958:	220a      	movs	r2, #10
 802195a:	3b01      	subs	r3, #1
 802195c:	930c      	str	r3, [sp, #48]	@ 0x30
 802195e:	9905      	ldr	r1, [sp, #20]
 8021960:	2300      	movs	r3, #0
 8021962:	9803      	ldr	r0, [sp, #12]
 8021964:	f000 fe5a 	bl	802261c <__multadd>
 8021968:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802196a:	9005      	str	r0, [sp, #20]
 802196c:	2b00      	cmp	r3, #0
 802196e:	d100      	bne.n	8021972 <_dtoa_r+0x8f2>
 8021970:	e15c      	b.n	8021c2c <_dtoa_r+0xbac>
 8021972:	2300      	movs	r3, #0
 8021974:	0039      	movs	r1, r7
 8021976:	220a      	movs	r2, #10
 8021978:	9803      	ldr	r0, [sp, #12]
 802197a:	f000 fe4f 	bl	802261c <__multadd>
 802197e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021980:	0007      	movs	r7, r0
 8021982:	2b00      	cmp	r3, #0
 8021984:	dc55      	bgt.n	8021a32 <_dtoa_r+0x9b2>
 8021986:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021988:	2b02      	cmp	r3, #2
 802198a:	dc2d      	bgt.n	80219e8 <_dtoa_r+0x968>
 802198c:	e051      	b.n	8021a32 <_dtoa_r+0x9b2>
 802198e:	2336      	movs	r3, #54	@ 0x36
 8021990:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021992:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021994:	9c06      	ldr	r4, [sp, #24]
 8021996:	1a9b      	subs	r3, r3, r2
 8021998:	e73c      	b.n	8021814 <_dtoa_r+0x794>
 802199a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802199c:	1e5d      	subs	r5, r3, #1
 802199e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80219a0:	42ab      	cmp	r3, r5
 80219a2:	db08      	blt.n	80219b6 <_dtoa_r+0x936>
 80219a4:	1b5d      	subs	r5, r3, r5
 80219a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219a8:	9c06      	ldr	r4, [sp, #24]
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	db00      	blt.n	80219b0 <_dtoa_r+0x930>
 80219ae:	e731      	b.n	8021814 <_dtoa_r+0x794>
 80219b0:	1ae4      	subs	r4, r4, r3
 80219b2:	2300      	movs	r3, #0
 80219b4:	e72e      	b.n	8021814 <_dtoa_r+0x794>
 80219b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80219b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80219ba:	1aeb      	subs	r3, r5, r3
 80219bc:	18d3      	adds	r3, r2, r3
 80219be:	950f      	str	r5, [sp, #60]	@ 0x3c
 80219c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80219c2:	2500      	movs	r5, #0
 80219c4:	e7ef      	b.n	80219a6 <_dtoa_r+0x926>
 80219c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80219c8:	e75e      	b.n	8021888 <_dtoa_r+0x808>
 80219ca:	2b04      	cmp	r3, #4
 80219cc:	d0a8      	beq.n	8021920 <_dtoa_r+0x8a0>
 80219ce:	331c      	adds	r3, #28
 80219d0:	e79f      	b.n	8021912 <_dtoa_r+0x892>
 80219d2:	0013      	movs	r3, r2
 80219d4:	e7fb      	b.n	80219ce <_dtoa_r+0x94e>
 80219d6:	9b04      	ldr	r3, [sp, #16]
 80219d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80219da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80219de:	2b00      	cmp	r3, #0
 80219e0:	dc23      	bgt.n	8021a2a <_dtoa_r+0x9aa>
 80219e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80219e4:	2b02      	cmp	r3, #2
 80219e6:	dd20      	ble.n	8021a2a <_dtoa_r+0x9aa>
 80219e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80219ea:	2b00      	cmp	r3, #0
 80219ec:	d000      	beq.n	80219f0 <_dtoa_r+0x970>
 80219ee:	e6b5      	b.n	802175c <_dtoa_r+0x6dc>
 80219f0:	0031      	movs	r1, r6
 80219f2:	2205      	movs	r2, #5
 80219f4:	9803      	ldr	r0, [sp, #12]
 80219f6:	f000 fe11 	bl	802261c <__multadd>
 80219fa:	0006      	movs	r6, r0
 80219fc:	0001      	movs	r1, r0
 80219fe:	9805      	ldr	r0, [sp, #20]
 8021a00:	f001 f87e 	bl	8022b00 <__mcmp>
 8021a04:	2800      	cmp	r0, #0
 8021a06:	dc00      	bgt.n	8021a0a <_dtoa_r+0x98a>
 8021a08:	e6a8      	b.n	802175c <_dtoa_r+0x6dc>
 8021a0a:	9b08      	ldr	r3, [sp, #32]
 8021a0c:	9a08      	ldr	r2, [sp, #32]
 8021a0e:	1c5c      	adds	r4, r3, #1
 8021a10:	2331      	movs	r3, #49	@ 0x31
 8021a12:	7013      	strb	r3, [r2, #0]
 8021a14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021a16:	3301      	adds	r3, #1
 8021a18:	930c      	str	r3, [sp, #48]	@ 0x30
 8021a1a:	e6a3      	b.n	8021764 <_dtoa_r+0x6e4>
 8021a1c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8021a1e:	0037      	movs	r7, r6
 8021a20:	e7f3      	b.n	8021a0a <_dtoa_r+0x98a>
 8021a22:	9b04      	ldr	r3, [sp, #16]
 8021a24:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021a26:	930c      	str	r3, [sp, #48]	@ 0x30
 8021a28:	e7f9      	b.n	8021a1e <_dtoa_r+0x99e>
 8021a2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d100      	bne.n	8021a32 <_dtoa_r+0x9b2>
 8021a30:	e100      	b.n	8021c34 <_dtoa_r+0xbb4>
 8021a32:	2c00      	cmp	r4, #0
 8021a34:	dd05      	ble.n	8021a42 <_dtoa_r+0x9c2>
 8021a36:	0039      	movs	r1, r7
 8021a38:	0022      	movs	r2, r4
 8021a3a:	9803      	ldr	r0, [sp, #12]
 8021a3c:	f000 fff4 	bl	8022a28 <__lshift>
 8021a40:	0007      	movs	r7, r0
 8021a42:	0038      	movs	r0, r7
 8021a44:	2d00      	cmp	r5, #0
 8021a46:	d018      	beq.n	8021a7a <_dtoa_r+0x9fa>
 8021a48:	6879      	ldr	r1, [r7, #4]
 8021a4a:	9803      	ldr	r0, [sp, #12]
 8021a4c:	f000 fd7e 	bl	802254c <_Balloc>
 8021a50:	1e04      	subs	r4, r0, #0
 8021a52:	d105      	bne.n	8021a60 <_dtoa_r+0x9e0>
 8021a54:	0022      	movs	r2, r4
 8021a56:	4b2b      	ldr	r3, [pc, #172]	@ (8021b04 <_dtoa_r+0xa84>)
 8021a58:	482b      	ldr	r0, [pc, #172]	@ (8021b08 <_dtoa_r+0xa88>)
 8021a5a:	492c      	ldr	r1, [pc, #176]	@ (8021b0c <_dtoa_r+0xa8c>)
 8021a5c:	f7ff fb25 	bl	80210aa <_dtoa_r+0x2a>
 8021a60:	0039      	movs	r1, r7
 8021a62:	693a      	ldr	r2, [r7, #16]
 8021a64:	310c      	adds	r1, #12
 8021a66:	3202      	adds	r2, #2
 8021a68:	0092      	lsls	r2, r2, #2
 8021a6a:	300c      	adds	r0, #12
 8021a6c:	f7ff fa6a 	bl	8020f44 <memcpy>
 8021a70:	2201      	movs	r2, #1
 8021a72:	0021      	movs	r1, r4
 8021a74:	9803      	ldr	r0, [sp, #12]
 8021a76:	f000 ffd7 	bl	8022a28 <__lshift>
 8021a7a:	9b08      	ldr	r3, [sp, #32]
 8021a7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021a7e:	9306      	str	r3, [sp, #24]
 8021a80:	3b01      	subs	r3, #1
 8021a82:	189b      	adds	r3, r3, r2
 8021a84:	2201      	movs	r2, #1
 8021a86:	9704      	str	r7, [sp, #16]
 8021a88:	0007      	movs	r7, r0
 8021a8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021a8e:	4013      	ands	r3, r2
 8021a90:	930e      	str	r3, [sp, #56]	@ 0x38
 8021a92:	0031      	movs	r1, r6
 8021a94:	9805      	ldr	r0, [sp, #20]
 8021a96:	f7ff fa65 	bl	8020f64 <quorem>
 8021a9a:	9904      	ldr	r1, [sp, #16]
 8021a9c:	0005      	movs	r5, r0
 8021a9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021aa0:	9805      	ldr	r0, [sp, #20]
 8021aa2:	f001 f82d 	bl	8022b00 <__mcmp>
 8021aa6:	003a      	movs	r2, r7
 8021aa8:	900d      	str	r0, [sp, #52]	@ 0x34
 8021aaa:	0031      	movs	r1, r6
 8021aac:	9803      	ldr	r0, [sp, #12]
 8021aae:	f001 f843 	bl	8022b38 <__mdiff>
 8021ab2:	2201      	movs	r2, #1
 8021ab4:	68c3      	ldr	r3, [r0, #12]
 8021ab6:	0004      	movs	r4, r0
 8021ab8:	3530      	adds	r5, #48	@ 0x30
 8021aba:	9209      	str	r2, [sp, #36]	@ 0x24
 8021abc:	2b00      	cmp	r3, #0
 8021abe:	d104      	bne.n	8021aca <_dtoa_r+0xa4a>
 8021ac0:	0001      	movs	r1, r0
 8021ac2:	9805      	ldr	r0, [sp, #20]
 8021ac4:	f001 f81c 	bl	8022b00 <__mcmp>
 8021ac8:	9009      	str	r0, [sp, #36]	@ 0x24
 8021aca:	0021      	movs	r1, r4
 8021acc:	9803      	ldr	r0, [sp, #12]
 8021ace:	f000 fd81 	bl	80225d4 <_Bfree>
 8021ad2:	9b06      	ldr	r3, [sp, #24]
 8021ad4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021ad6:	1c5c      	adds	r4, r3, #1
 8021ad8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021ada:	4313      	orrs	r3, r2
 8021adc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021ade:	4313      	orrs	r3, r2
 8021ae0:	d116      	bne.n	8021b10 <_dtoa_r+0xa90>
 8021ae2:	2d39      	cmp	r5, #57	@ 0x39
 8021ae4:	d02f      	beq.n	8021b46 <_dtoa_r+0xac6>
 8021ae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	dd01      	ble.n	8021af0 <_dtoa_r+0xa70>
 8021aec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021aee:	3531      	adds	r5, #49	@ 0x31
 8021af0:	9b06      	ldr	r3, [sp, #24]
 8021af2:	701d      	strb	r5, [r3, #0]
 8021af4:	e638      	b.n	8021768 <_dtoa_r+0x6e8>
 8021af6:	46c0      	nop			@ (mov r8, r8)
 8021af8:	40240000 	.word	0x40240000
 8021afc:	00000433 	.word	0x00000433
 8021b00:	7ff00000 	.word	0x7ff00000
 8021b04:	08026f31 	.word	0x08026f31
 8021b08:	08026ed9 	.word	0x08026ed9
 8021b0c:	000002ef 	.word	0x000002ef
 8021b10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	db04      	blt.n	8021b20 <_dtoa_r+0xaa0>
 8021b16:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8021b18:	4313      	orrs	r3, r2
 8021b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021b1c:	4313      	orrs	r3, r2
 8021b1e:	d11e      	bne.n	8021b5e <_dtoa_r+0xade>
 8021b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	dde4      	ble.n	8021af0 <_dtoa_r+0xa70>
 8021b26:	9905      	ldr	r1, [sp, #20]
 8021b28:	2201      	movs	r2, #1
 8021b2a:	9803      	ldr	r0, [sp, #12]
 8021b2c:	f000 ff7c 	bl	8022a28 <__lshift>
 8021b30:	0031      	movs	r1, r6
 8021b32:	9005      	str	r0, [sp, #20]
 8021b34:	f000 ffe4 	bl	8022b00 <__mcmp>
 8021b38:	2800      	cmp	r0, #0
 8021b3a:	dc02      	bgt.n	8021b42 <_dtoa_r+0xac2>
 8021b3c:	d1d8      	bne.n	8021af0 <_dtoa_r+0xa70>
 8021b3e:	07eb      	lsls	r3, r5, #31
 8021b40:	d5d6      	bpl.n	8021af0 <_dtoa_r+0xa70>
 8021b42:	2d39      	cmp	r5, #57	@ 0x39
 8021b44:	d1d2      	bne.n	8021aec <_dtoa_r+0xa6c>
 8021b46:	2339      	movs	r3, #57	@ 0x39
 8021b48:	9a06      	ldr	r2, [sp, #24]
 8021b4a:	7013      	strb	r3, [r2, #0]
 8021b4c:	0023      	movs	r3, r4
 8021b4e:	001c      	movs	r4, r3
 8021b50:	3b01      	subs	r3, #1
 8021b52:	781a      	ldrb	r2, [r3, #0]
 8021b54:	2a39      	cmp	r2, #57	@ 0x39
 8021b56:	d04f      	beq.n	8021bf8 <_dtoa_r+0xb78>
 8021b58:	3201      	adds	r2, #1
 8021b5a:	701a      	strb	r2, [r3, #0]
 8021b5c:	e604      	b.n	8021768 <_dtoa_r+0x6e8>
 8021b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b60:	2b00      	cmp	r3, #0
 8021b62:	dd03      	ble.n	8021b6c <_dtoa_r+0xaec>
 8021b64:	2d39      	cmp	r5, #57	@ 0x39
 8021b66:	d0ee      	beq.n	8021b46 <_dtoa_r+0xac6>
 8021b68:	3501      	adds	r5, #1
 8021b6a:	e7c1      	b.n	8021af0 <_dtoa_r+0xa70>
 8021b6c:	9b06      	ldr	r3, [sp, #24]
 8021b6e:	9a06      	ldr	r2, [sp, #24]
 8021b70:	701d      	strb	r5, [r3, #0]
 8021b72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021b74:	4293      	cmp	r3, r2
 8021b76:	d02a      	beq.n	8021bce <_dtoa_r+0xb4e>
 8021b78:	2300      	movs	r3, #0
 8021b7a:	220a      	movs	r2, #10
 8021b7c:	9905      	ldr	r1, [sp, #20]
 8021b7e:	9803      	ldr	r0, [sp, #12]
 8021b80:	f000 fd4c 	bl	802261c <__multadd>
 8021b84:	9b04      	ldr	r3, [sp, #16]
 8021b86:	9005      	str	r0, [sp, #20]
 8021b88:	42bb      	cmp	r3, r7
 8021b8a:	d109      	bne.n	8021ba0 <_dtoa_r+0xb20>
 8021b8c:	2300      	movs	r3, #0
 8021b8e:	220a      	movs	r2, #10
 8021b90:	9904      	ldr	r1, [sp, #16]
 8021b92:	9803      	ldr	r0, [sp, #12]
 8021b94:	f000 fd42 	bl	802261c <__multadd>
 8021b98:	9004      	str	r0, [sp, #16]
 8021b9a:	0007      	movs	r7, r0
 8021b9c:	9406      	str	r4, [sp, #24]
 8021b9e:	e778      	b.n	8021a92 <_dtoa_r+0xa12>
 8021ba0:	9904      	ldr	r1, [sp, #16]
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	220a      	movs	r2, #10
 8021ba6:	9803      	ldr	r0, [sp, #12]
 8021ba8:	f000 fd38 	bl	802261c <__multadd>
 8021bac:	2300      	movs	r3, #0
 8021bae:	9004      	str	r0, [sp, #16]
 8021bb0:	220a      	movs	r2, #10
 8021bb2:	0039      	movs	r1, r7
 8021bb4:	9803      	ldr	r0, [sp, #12]
 8021bb6:	f000 fd31 	bl	802261c <__multadd>
 8021bba:	e7ee      	b.n	8021b9a <_dtoa_r+0xb1a>
 8021bbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021bbe:	2401      	movs	r4, #1
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	dd00      	ble.n	8021bc6 <_dtoa_r+0xb46>
 8021bc4:	001c      	movs	r4, r3
 8021bc6:	9b08      	ldr	r3, [sp, #32]
 8021bc8:	191c      	adds	r4, r3, r4
 8021bca:	2300      	movs	r3, #0
 8021bcc:	9304      	str	r3, [sp, #16]
 8021bce:	9905      	ldr	r1, [sp, #20]
 8021bd0:	2201      	movs	r2, #1
 8021bd2:	9803      	ldr	r0, [sp, #12]
 8021bd4:	f000 ff28 	bl	8022a28 <__lshift>
 8021bd8:	0031      	movs	r1, r6
 8021bda:	9005      	str	r0, [sp, #20]
 8021bdc:	f000 ff90 	bl	8022b00 <__mcmp>
 8021be0:	2800      	cmp	r0, #0
 8021be2:	dcb3      	bgt.n	8021b4c <_dtoa_r+0xacc>
 8021be4:	d101      	bne.n	8021bea <_dtoa_r+0xb6a>
 8021be6:	07ed      	lsls	r5, r5, #31
 8021be8:	d4b0      	bmi.n	8021b4c <_dtoa_r+0xacc>
 8021bea:	0023      	movs	r3, r4
 8021bec:	001c      	movs	r4, r3
 8021bee:	3b01      	subs	r3, #1
 8021bf0:	781a      	ldrb	r2, [r3, #0]
 8021bf2:	2a30      	cmp	r2, #48	@ 0x30
 8021bf4:	d0fa      	beq.n	8021bec <_dtoa_r+0xb6c>
 8021bf6:	e5b7      	b.n	8021768 <_dtoa_r+0x6e8>
 8021bf8:	9a08      	ldr	r2, [sp, #32]
 8021bfa:	429a      	cmp	r2, r3
 8021bfc:	d1a7      	bne.n	8021b4e <_dtoa_r+0xace>
 8021bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c00:	3301      	adds	r3, #1
 8021c02:	930c      	str	r3, [sp, #48]	@ 0x30
 8021c04:	2331      	movs	r3, #49	@ 0x31
 8021c06:	7013      	strb	r3, [r2, #0]
 8021c08:	e5ae      	b.n	8021768 <_dtoa_r+0x6e8>
 8021c0a:	4b15      	ldr	r3, [pc, #84]	@ (8021c60 <_dtoa_r+0xbe0>)
 8021c0c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021c0e:	9308      	str	r3, [sp, #32]
 8021c10:	4b14      	ldr	r3, [pc, #80]	@ (8021c64 <_dtoa_r+0xbe4>)
 8021c12:	2a00      	cmp	r2, #0
 8021c14:	d001      	beq.n	8021c1a <_dtoa_r+0xb9a>
 8021c16:	f7ff fa7b 	bl	8021110 <_dtoa_r+0x90>
 8021c1a:	f7ff fa7b 	bl	8021114 <_dtoa_r+0x94>
 8021c1e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021c20:	2b01      	cmp	r3, #1
 8021c22:	dc00      	bgt.n	8021c26 <_dtoa_r+0xba6>
 8021c24:	e648      	b.n	80218b8 <_dtoa_r+0x838>
 8021c26:	2001      	movs	r0, #1
 8021c28:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021c2a:	e665      	b.n	80218f8 <_dtoa_r+0x878>
 8021c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	dc00      	bgt.n	8021c34 <_dtoa_r+0xbb4>
 8021c32:	e6d6      	b.n	80219e2 <_dtoa_r+0x962>
 8021c34:	2400      	movs	r4, #0
 8021c36:	0031      	movs	r1, r6
 8021c38:	9805      	ldr	r0, [sp, #20]
 8021c3a:	f7ff f993 	bl	8020f64 <quorem>
 8021c3e:	9b08      	ldr	r3, [sp, #32]
 8021c40:	3030      	adds	r0, #48	@ 0x30
 8021c42:	5518      	strb	r0, [r3, r4]
 8021c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021c46:	3401      	adds	r4, #1
 8021c48:	0005      	movs	r5, r0
 8021c4a:	429c      	cmp	r4, r3
 8021c4c:	dab6      	bge.n	8021bbc <_dtoa_r+0xb3c>
 8021c4e:	2300      	movs	r3, #0
 8021c50:	220a      	movs	r2, #10
 8021c52:	9905      	ldr	r1, [sp, #20]
 8021c54:	9803      	ldr	r0, [sp, #12]
 8021c56:	f000 fce1 	bl	802261c <__multadd>
 8021c5a:	9005      	str	r0, [sp, #20]
 8021c5c:	e7eb      	b.n	8021c36 <_dtoa_r+0xbb6>
 8021c5e:	46c0      	nop			@ (mov r8, r8)
 8021c60:	08026eb5 	.word	0x08026eb5
 8021c64:	08026ebd 	.word	0x08026ebd

08021c68 <_free_r>:
 8021c68:	b570      	push	{r4, r5, r6, lr}
 8021c6a:	0005      	movs	r5, r0
 8021c6c:	1e0c      	subs	r4, r1, #0
 8021c6e:	d010      	beq.n	8021c92 <_free_r+0x2a>
 8021c70:	3c04      	subs	r4, #4
 8021c72:	6823      	ldr	r3, [r4, #0]
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	da00      	bge.n	8021c7a <_free_r+0x12>
 8021c78:	18e4      	adds	r4, r4, r3
 8021c7a:	0028      	movs	r0, r5
 8021c7c:	f000 fc56 	bl	802252c <__malloc_lock>
 8021c80:	4a1d      	ldr	r2, [pc, #116]	@ (8021cf8 <_free_r+0x90>)
 8021c82:	6813      	ldr	r3, [r2, #0]
 8021c84:	2b00      	cmp	r3, #0
 8021c86:	d105      	bne.n	8021c94 <_free_r+0x2c>
 8021c88:	6063      	str	r3, [r4, #4]
 8021c8a:	6014      	str	r4, [r2, #0]
 8021c8c:	0028      	movs	r0, r5
 8021c8e:	f000 fc55 	bl	802253c <__malloc_unlock>
 8021c92:	bd70      	pop	{r4, r5, r6, pc}
 8021c94:	42a3      	cmp	r3, r4
 8021c96:	d908      	bls.n	8021caa <_free_r+0x42>
 8021c98:	6820      	ldr	r0, [r4, #0]
 8021c9a:	1821      	adds	r1, r4, r0
 8021c9c:	428b      	cmp	r3, r1
 8021c9e:	d1f3      	bne.n	8021c88 <_free_r+0x20>
 8021ca0:	6819      	ldr	r1, [r3, #0]
 8021ca2:	685b      	ldr	r3, [r3, #4]
 8021ca4:	1809      	adds	r1, r1, r0
 8021ca6:	6021      	str	r1, [r4, #0]
 8021ca8:	e7ee      	b.n	8021c88 <_free_r+0x20>
 8021caa:	001a      	movs	r2, r3
 8021cac:	685b      	ldr	r3, [r3, #4]
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d001      	beq.n	8021cb6 <_free_r+0x4e>
 8021cb2:	42a3      	cmp	r3, r4
 8021cb4:	d9f9      	bls.n	8021caa <_free_r+0x42>
 8021cb6:	6811      	ldr	r1, [r2, #0]
 8021cb8:	1850      	adds	r0, r2, r1
 8021cba:	42a0      	cmp	r0, r4
 8021cbc:	d10b      	bne.n	8021cd6 <_free_r+0x6e>
 8021cbe:	6820      	ldr	r0, [r4, #0]
 8021cc0:	1809      	adds	r1, r1, r0
 8021cc2:	1850      	adds	r0, r2, r1
 8021cc4:	6011      	str	r1, [r2, #0]
 8021cc6:	4283      	cmp	r3, r0
 8021cc8:	d1e0      	bne.n	8021c8c <_free_r+0x24>
 8021cca:	6818      	ldr	r0, [r3, #0]
 8021ccc:	685b      	ldr	r3, [r3, #4]
 8021cce:	1841      	adds	r1, r0, r1
 8021cd0:	6011      	str	r1, [r2, #0]
 8021cd2:	6053      	str	r3, [r2, #4]
 8021cd4:	e7da      	b.n	8021c8c <_free_r+0x24>
 8021cd6:	42a0      	cmp	r0, r4
 8021cd8:	d902      	bls.n	8021ce0 <_free_r+0x78>
 8021cda:	230c      	movs	r3, #12
 8021cdc:	602b      	str	r3, [r5, #0]
 8021cde:	e7d5      	b.n	8021c8c <_free_r+0x24>
 8021ce0:	6820      	ldr	r0, [r4, #0]
 8021ce2:	1821      	adds	r1, r4, r0
 8021ce4:	428b      	cmp	r3, r1
 8021ce6:	d103      	bne.n	8021cf0 <_free_r+0x88>
 8021ce8:	6819      	ldr	r1, [r3, #0]
 8021cea:	685b      	ldr	r3, [r3, #4]
 8021cec:	1809      	adds	r1, r1, r0
 8021cee:	6021      	str	r1, [r4, #0]
 8021cf0:	6063      	str	r3, [r4, #4]
 8021cf2:	6054      	str	r4, [r2, #4]
 8021cf4:	e7ca      	b.n	8021c8c <_free_r+0x24>
 8021cf6:	46c0      	nop			@ (mov r8, r8)
 8021cf8:	200034f8 	.word	0x200034f8

08021cfc <rshift>:
 8021cfc:	0002      	movs	r2, r0
 8021cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d00:	6904      	ldr	r4, [r0, #16]
 8021d02:	b085      	sub	sp, #20
 8021d04:	3214      	adds	r2, #20
 8021d06:	114b      	asrs	r3, r1, #5
 8021d08:	0016      	movs	r6, r2
 8021d0a:	9302      	str	r3, [sp, #8]
 8021d0c:	429c      	cmp	r4, r3
 8021d0e:	dd31      	ble.n	8021d74 <rshift+0x78>
 8021d10:	261f      	movs	r6, #31
 8021d12:	000f      	movs	r7, r1
 8021d14:	009b      	lsls	r3, r3, #2
 8021d16:	00a5      	lsls	r5, r4, #2
 8021d18:	18d3      	adds	r3, r2, r3
 8021d1a:	4037      	ands	r7, r6
 8021d1c:	1955      	adds	r5, r2, r5
 8021d1e:	9300      	str	r3, [sp, #0]
 8021d20:	9701      	str	r7, [sp, #4]
 8021d22:	4231      	tst	r1, r6
 8021d24:	d10d      	bne.n	8021d42 <rshift+0x46>
 8021d26:	0016      	movs	r6, r2
 8021d28:	0019      	movs	r1, r3
 8021d2a:	428d      	cmp	r5, r1
 8021d2c:	d836      	bhi.n	8021d9c <rshift+0xa0>
 8021d2e:	9b00      	ldr	r3, [sp, #0]
 8021d30:	2600      	movs	r6, #0
 8021d32:	3b03      	subs	r3, #3
 8021d34:	429d      	cmp	r5, r3
 8021d36:	d302      	bcc.n	8021d3e <rshift+0x42>
 8021d38:	9b02      	ldr	r3, [sp, #8]
 8021d3a:	1ae4      	subs	r4, r4, r3
 8021d3c:	00a6      	lsls	r6, r4, #2
 8021d3e:	1996      	adds	r6, r2, r6
 8021d40:	e018      	b.n	8021d74 <rshift+0x78>
 8021d42:	2120      	movs	r1, #32
 8021d44:	9e01      	ldr	r6, [sp, #4]
 8021d46:	9f01      	ldr	r7, [sp, #4]
 8021d48:	1b89      	subs	r1, r1, r6
 8021d4a:	9e00      	ldr	r6, [sp, #0]
 8021d4c:	9103      	str	r1, [sp, #12]
 8021d4e:	ce02      	ldmia	r6!, {r1}
 8021d50:	4694      	mov	ip, r2
 8021d52:	40f9      	lsrs	r1, r7
 8021d54:	42b5      	cmp	r5, r6
 8021d56:	d816      	bhi.n	8021d86 <rshift+0x8a>
 8021d58:	9b00      	ldr	r3, [sp, #0]
 8021d5a:	2600      	movs	r6, #0
 8021d5c:	3301      	adds	r3, #1
 8021d5e:	429d      	cmp	r5, r3
 8021d60:	d303      	bcc.n	8021d6a <rshift+0x6e>
 8021d62:	9b02      	ldr	r3, [sp, #8]
 8021d64:	1ae4      	subs	r4, r4, r3
 8021d66:	00a6      	lsls	r6, r4, #2
 8021d68:	3e04      	subs	r6, #4
 8021d6a:	1996      	adds	r6, r2, r6
 8021d6c:	6031      	str	r1, [r6, #0]
 8021d6e:	2900      	cmp	r1, #0
 8021d70:	d000      	beq.n	8021d74 <rshift+0x78>
 8021d72:	3604      	adds	r6, #4
 8021d74:	1ab1      	subs	r1, r6, r2
 8021d76:	1089      	asrs	r1, r1, #2
 8021d78:	6101      	str	r1, [r0, #16]
 8021d7a:	4296      	cmp	r6, r2
 8021d7c:	d101      	bne.n	8021d82 <rshift+0x86>
 8021d7e:	2300      	movs	r3, #0
 8021d80:	6143      	str	r3, [r0, #20]
 8021d82:	b005      	add	sp, #20
 8021d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d86:	6837      	ldr	r7, [r6, #0]
 8021d88:	9b03      	ldr	r3, [sp, #12]
 8021d8a:	409f      	lsls	r7, r3
 8021d8c:	430f      	orrs	r7, r1
 8021d8e:	4661      	mov	r1, ip
 8021d90:	c180      	stmia	r1!, {r7}
 8021d92:	468c      	mov	ip, r1
 8021d94:	9b01      	ldr	r3, [sp, #4]
 8021d96:	ce02      	ldmia	r6!, {r1}
 8021d98:	40d9      	lsrs	r1, r3
 8021d9a:	e7db      	b.n	8021d54 <rshift+0x58>
 8021d9c:	c980      	ldmia	r1!, {r7}
 8021d9e:	c680      	stmia	r6!, {r7}
 8021da0:	e7c3      	b.n	8021d2a <rshift+0x2e>

08021da2 <__hexdig_fun>:
 8021da2:	0002      	movs	r2, r0
 8021da4:	3a30      	subs	r2, #48	@ 0x30
 8021da6:	0003      	movs	r3, r0
 8021da8:	2a09      	cmp	r2, #9
 8021daa:	d802      	bhi.n	8021db2 <__hexdig_fun+0x10>
 8021dac:	3b20      	subs	r3, #32
 8021dae:	b2d8      	uxtb	r0, r3
 8021db0:	4770      	bx	lr
 8021db2:	0002      	movs	r2, r0
 8021db4:	3a61      	subs	r2, #97	@ 0x61
 8021db6:	2a05      	cmp	r2, #5
 8021db8:	d801      	bhi.n	8021dbe <__hexdig_fun+0x1c>
 8021dba:	3b47      	subs	r3, #71	@ 0x47
 8021dbc:	e7f7      	b.n	8021dae <__hexdig_fun+0xc>
 8021dbe:	001a      	movs	r2, r3
 8021dc0:	3a41      	subs	r2, #65	@ 0x41
 8021dc2:	2000      	movs	r0, #0
 8021dc4:	2a05      	cmp	r2, #5
 8021dc6:	d8f3      	bhi.n	8021db0 <__hexdig_fun+0xe>
 8021dc8:	3b27      	subs	r3, #39	@ 0x27
 8021dca:	e7f0      	b.n	8021dae <__hexdig_fun+0xc>

08021dcc <__gethex>:
 8021dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021dce:	b089      	sub	sp, #36	@ 0x24
 8021dd0:	9307      	str	r3, [sp, #28]
 8021dd2:	680b      	ldr	r3, [r1, #0]
 8021dd4:	9201      	str	r2, [sp, #4]
 8021dd6:	9003      	str	r0, [sp, #12]
 8021dd8:	9106      	str	r1, [sp, #24]
 8021dda:	1c9a      	adds	r2, r3, #2
 8021ddc:	0011      	movs	r1, r2
 8021dde:	3201      	adds	r2, #1
 8021de0:	1e50      	subs	r0, r2, #1
 8021de2:	7800      	ldrb	r0, [r0, #0]
 8021de4:	2830      	cmp	r0, #48	@ 0x30
 8021de6:	d0f9      	beq.n	8021ddc <__gethex+0x10>
 8021de8:	1acb      	subs	r3, r1, r3
 8021dea:	3b02      	subs	r3, #2
 8021dec:	9305      	str	r3, [sp, #20]
 8021dee:	9100      	str	r1, [sp, #0]
 8021df0:	f7ff ffd7 	bl	8021da2 <__hexdig_fun>
 8021df4:	2300      	movs	r3, #0
 8021df6:	001d      	movs	r5, r3
 8021df8:	9302      	str	r3, [sp, #8]
 8021dfa:	4298      	cmp	r0, r3
 8021dfc:	d11e      	bne.n	8021e3c <__gethex+0x70>
 8021dfe:	2201      	movs	r2, #1
 8021e00:	49a6      	ldr	r1, [pc, #664]	@ (802209c <__gethex+0x2d0>)
 8021e02:	9800      	ldr	r0, [sp, #0]
 8021e04:	f7fe ffd8 	bl	8020db8 <strncmp>
 8021e08:	0007      	movs	r7, r0
 8021e0a:	42a8      	cmp	r0, r5
 8021e0c:	d000      	beq.n	8021e10 <__gethex+0x44>
 8021e0e:	e06a      	b.n	8021ee6 <__gethex+0x11a>
 8021e10:	9b00      	ldr	r3, [sp, #0]
 8021e12:	7858      	ldrb	r0, [r3, #1]
 8021e14:	1c5c      	adds	r4, r3, #1
 8021e16:	f7ff ffc4 	bl	8021da2 <__hexdig_fun>
 8021e1a:	2301      	movs	r3, #1
 8021e1c:	9302      	str	r3, [sp, #8]
 8021e1e:	42a8      	cmp	r0, r5
 8021e20:	d02f      	beq.n	8021e82 <__gethex+0xb6>
 8021e22:	9400      	str	r4, [sp, #0]
 8021e24:	9b00      	ldr	r3, [sp, #0]
 8021e26:	7818      	ldrb	r0, [r3, #0]
 8021e28:	2830      	cmp	r0, #48	@ 0x30
 8021e2a:	d009      	beq.n	8021e40 <__gethex+0x74>
 8021e2c:	f7ff ffb9 	bl	8021da2 <__hexdig_fun>
 8021e30:	4242      	negs	r2, r0
 8021e32:	4142      	adcs	r2, r0
 8021e34:	2301      	movs	r3, #1
 8021e36:	0025      	movs	r5, r4
 8021e38:	9202      	str	r2, [sp, #8]
 8021e3a:	9305      	str	r3, [sp, #20]
 8021e3c:	9c00      	ldr	r4, [sp, #0]
 8021e3e:	e004      	b.n	8021e4a <__gethex+0x7e>
 8021e40:	9b00      	ldr	r3, [sp, #0]
 8021e42:	3301      	adds	r3, #1
 8021e44:	9300      	str	r3, [sp, #0]
 8021e46:	e7ed      	b.n	8021e24 <__gethex+0x58>
 8021e48:	3401      	adds	r4, #1
 8021e4a:	7820      	ldrb	r0, [r4, #0]
 8021e4c:	f7ff ffa9 	bl	8021da2 <__hexdig_fun>
 8021e50:	1e07      	subs	r7, r0, #0
 8021e52:	d1f9      	bne.n	8021e48 <__gethex+0x7c>
 8021e54:	2201      	movs	r2, #1
 8021e56:	0020      	movs	r0, r4
 8021e58:	4990      	ldr	r1, [pc, #576]	@ (802209c <__gethex+0x2d0>)
 8021e5a:	f7fe ffad 	bl	8020db8 <strncmp>
 8021e5e:	2800      	cmp	r0, #0
 8021e60:	d10d      	bne.n	8021e7e <__gethex+0xb2>
 8021e62:	2d00      	cmp	r5, #0
 8021e64:	d106      	bne.n	8021e74 <__gethex+0xa8>
 8021e66:	3401      	adds	r4, #1
 8021e68:	0025      	movs	r5, r4
 8021e6a:	7820      	ldrb	r0, [r4, #0]
 8021e6c:	f7ff ff99 	bl	8021da2 <__hexdig_fun>
 8021e70:	2800      	cmp	r0, #0
 8021e72:	d102      	bne.n	8021e7a <__gethex+0xae>
 8021e74:	1b2d      	subs	r5, r5, r4
 8021e76:	00af      	lsls	r7, r5, #2
 8021e78:	e003      	b.n	8021e82 <__gethex+0xb6>
 8021e7a:	3401      	adds	r4, #1
 8021e7c:	e7f5      	b.n	8021e6a <__gethex+0x9e>
 8021e7e:	2d00      	cmp	r5, #0
 8021e80:	d1f8      	bne.n	8021e74 <__gethex+0xa8>
 8021e82:	2220      	movs	r2, #32
 8021e84:	7823      	ldrb	r3, [r4, #0]
 8021e86:	0026      	movs	r6, r4
 8021e88:	4393      	bics	r3, r2
 8021e8a:	2b50      	cmp	r3, #80	@ 0x50
 8021e8c:	d11d      	bne.n	8021eca <__gethex+0xfe>
 8021e8e:	7863      	ldrb	r3, [r4, #1]
 8021e90:	2b2b      	cmp	r3, #43	@ 0x2b
 8021e92:	d02d      	beq.n	8021ef0 <__gethex+0x124>
 8021e94:	2b2d      	cmp	r3, #45	@ 0x2d
 8021e96:	d02f      	beq.n	8021ef8 <__gethex+0x12c>
 8021e98:	2300      	movs	r3, #0
 8021e9a:	1c66      	adds	r6, r4, #1
 8021e9c:	9304      	str	r3, [sp, #16]
 8021e9e:	7830      	ldrb	r0, [r6, #0]
 8021ea0:	f7ff ff7f 	bl	8021da2 <__hexdig_fun>
 8021ea4:	1e43      	subs	r3, r0, #1
 8021ea6:	b2db      	uxtb	r3, r3
 8021ea8:	0005      	movs	r5, r0
 8021eaa:	2b18      	cmp	r3, #24
 8021eac:	d82a      	bhi.n	8021f04 <__gethex+0x138>
 8021eae:	7870      	ldrb	r0, [r6, #1]
 8021eb0:	f7ff ff77 	bl	8021da2 <__hexdig_fun>
 8021eb4:	1e43      	subs	r3, r0, #1
 8021eb6:	b2db      	uxtb	r3, r3
 8021eb8:	3601      	adds	r6, #1
 8021eba:	3d10      	subs	r5, #16
 8021ebc:	2b18      	cmp	r3, #24
 8021ebe:	d91d      	bls.n	8021efc <__gethex+0x130>
 8021ec0:	9b04      	ldr	r3, [sp, #16]
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d000      	beq.n	8021ec8 <__gethex+0xfc>
 8021ec6:	426d      	negs	r5, r5
 8021ec8:	197f      	adds	r7, r7, r5
 8021eca:	9b06      	ldr	r3, [sp, #24]
 8021ecc:	601e      	str	r6, [r3, #0]
 8021ece:	9b02      	ldr	r3, [sp, #8]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d019      	beq.n	8021f08 <__gethex+0x13c>
 8021ed4:	9b05      	ldr	r3, [sp, #20]
 8021ed6:	2606      	movs	r6, #6
 8021ed8:	425a      	negs	r2, r3
 8021eda:	4153      	adcs	r3, r2
 8021edc:	425b      	negs	r3, r3
 8021ede:	401e      	ands	r6, r3
 8021ee0:	0030      	movs	r0, r6
 8021ee2:	b009      	add	sp, #36	@ 0x24
 8021ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ee6:	2301      	movs	r3, #1
 8021ee8:	2700      	movs	r7, #0
 8021eea:	9c00      	ldr	r4, [sp, #0]
 8021eec:	9302      	str	r3, [sp, #8]
 8021eee:	e7c8      	b.n	8021e82 <__gethex+0xb6>
 8021ef0:	2300      	movs	r3, #0
 8021ef2:	9304      	str	r3, [sp, #16]
 8021ef4:	1ca6      	adds	r6, r4, #2
 8021ef6:	e7d2      	b.n	8021e9e <__gethex+0xd2>
 8021ef8:	2301      	movs	r3, #1
 8021efa:	e7fa      	b.n	8021ef2 <__gethex+0x126>
 8021efc:	230a      	movs	r3, #10
 8021efe:	435d      	muls	r5, r3
 8021f00:	182d      	adds	r5, r5, r0
 8021f02:	e7d4      	b.n	8021eae <__gethex+0xe2>
 8021f04:	0026      	movs	r6, r4
 8021f06:	e7e0      	b.n	8021eca <__gethex+0xfe>
 8021f08:	9b00      	ldr	r3, [sp, #0]
 8021f0a:	9902      	ldr	r1, [sp, #8]
 8021f0c:	1ae3      	subs	r3, r4, r3
 8021f0e:	3b01      	subs	r3, #1
 8021f10:	2b07      	cmp	r3, #7
 8021f12:	dc0a      	bgt.n	8021f2a <__gethex+0x15e>
 8021f14:	9803      	ldr	r0, [sp, #12]
 8021f16:	f000 fb19 	bl	802254c <_Balloc>
 8021f1a:	1e05      	subs	r5, r0, #0
 8021f1c:	d108      	bne.n	8021f30 <__gethex+0x164>
 8021f1e:	002a      	movs	r2, r5
 8021f20:	21e4      	movs	r1, #228	@ 0xe4
 8021f22:	4b5f      	ldr	r3, [pc, #380]	@ (80220a0 <__gethex+0x2d4>)
 8021f24:	485f      	ldr	r0, [pc, #380]	@ (80220a4 <__gethex+0x2d8>)
 8021f26:	f001 fbf1 	bl	802370c <__assert_func>
 8021f2a:	3101      	adds	r1, #1
 8021f2c:	105b      	asrs	r3, r3, #1
 8021f2e:	e7ef      	b.n	8021f10 <__gethex+0x144>
 8021f30:	0003      	movs	r3, r0
 8021f32:	3314      	adds	r3, #20
 8021f34:	9302      	str	r3, [sp, #8]
 8021f36:	9305      	str	r3, [sp, #20]
 8021f38:	2300      	movs	r3, #0
 8021f3a:	001e      	movs	r6, r3
 8021f3c:	9304      	str	r3, [sp, #16]
 8021f3e:	9b00      	ldr	r3, [sp, #0]
 8021f40:	42a3      	cmp	r3, r4
 8021f42:	d338      	bcc.n	8021fb6 <__gethex+0x1ea>
 8021f44:	9c05      	ldr	r4, [sp, #20]
 8021f46:	9b02      	ldr	r3, [sp, #8]
 8021f48:	c440      	stmia	r4!, {r6}
 8021f4a:	1ae4      	subs	r4, r4, r3
 8021f4c:	10a4      	asrs	r4, r4, #2
 8021f4e:	0030      	movs	r0, r6
 8021f50:	612c      	str	r4, [r5, #16]
 8021f52:	f000 fbf3 	bl	802273c <__hi0bits>
 8021f56:	9b01      	ldr	r3, [sp, #4]
 8021f58:	0164      	lsls	r4, r4, #5
 8021f5a:	681b      	ldr	r3, [r3, #0]
 8021f5c:	1a26      	subs	r6, r4, r0
 8021f5e:	9300      	str	r3, [sp, #0]
 8021f60:	429e      	cmp	r6, r3
 8021f62:	dd52      	ble.n	802200a <__gethex+0x23e>
 8021f64:	1af6      	subs	r6, r6, r3
 8021f66:	0031      	movs	r1, r6
 8021f68:	0028      	movs	r0, r5
 8021f6a:	f000 ff96 	bl	8022e9a <__any_on>
 8021f6e:	1e04      	subs	r4, r0, #0
 8021f70:	d00f      	beq.n	8021f92 <__gethex+0x1c6>
 8021f72:	2401      	movs	r4, #1
 8021f74:	231f      	movs	r3, #31
 8021f76:	0020      	movs	r0, r4
 8021f78:	1e72      	subs	r2, r6, #1
 8021f7a:	4013      	ands	r3, r2
 8021f7c:	4098      	lsls	r0, r3
 8021f7e:	0003      	movs	r3, r0
 8021f80:	1151      	asrs	r1, r2, #5
 8021f82:	9802      	ldr	r0, [sp, #8]
 8021f84:	0089      	lsls	r1, r1, #2
 8021f86:	5809      	ldr	r1, [r1, r0]
 8021f88:	4219      	tst	r1, r3
 8021f8a:	d002      	beq.n	8021f92 <__gethex+0x1c6>
 8021f8c:	42a2      	cmp	r2, r4
 8021f8e:	dc34      	bgt.n	8021ffa <__gethex+0x22e>
 8021f90:	2402      	movs	r4, #2
 8021f92:	0031      	movs	r1, r6
 8021f94:	0028      	movs	r0, r5
 8021f96:	f7ff feb1 	bl	8021cfc <rshift>
 8021f9a:	19bf      	adds	r7, r7, r6
 8021f9c:	9b01      	ldr	r3, [sp, #4]
 8021f9e:	689b      	ldr	r3, [r3, #8]
 8021fa0:	42bb      	cmp	r3, r7
 8021fa2:	da42      	bge.n	802202a <__gethex+0x25e>
 8021fa4:	0029      	movs	r1, r5
 8021fa6:	9803      	ldr	r0, [sp, #12]
 8021fa8:	f000 fb14 	bl	80225d4 <_Bfree>
 8021fac:	2300      	movs	r3, #0
 8021fae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021fb0:	26a3      	movs	r6, #163	@ 0xa3
 8021fb2:	6013      	str	r3, [r2, #0]
 8021fb4:	e794      	b.n	8021ee0 <__gethex+0x114>
 8021fb6:	3c01      	subs	r4, #1
 8021fb8:	7823      	ldrb	r3, [r4, #0]
 8021fba:	2b2e      	cmp	r3, #46	@ 0x2e
 8021fbc:	d012      	beq.n	8021fe4 <__gethex+0x218>
 8021fbe:	9b04      	ldr	r3, [sp, #16]
 8021fc0:	2b20      	cmp	r3, #32
 8021fc2:	d104      	bne.n	8021fce <__gethex+0x202>
 8021fc4:	9b05      	ldr	r3, [sp, #20]
 8021fc6:	c340      	stmia	r3!, {r6}
 8021fc8:	2600      	movs	r6, #0
 8021fca:	9305      	str	r3, [sp, #20]
 8021fcc:	9604      	str	r6, [sp, #16]
 8021fce:	7820      	ldrb	r0, [r4, #0]
 8021fd0:	f7ff fee7 	bl	8021da2 <__hexdig_fun>
 8021fd4:	230f      	movs	r3, #15
 8021fd6:	4018      	ands	r0, r3
 8021fd8:	9b04      	ldr	r3, [sp, #16]
 8021fda:	4098      	lsls	r0, r3
 8021fdc:	3304      	adds	r3, #4
 8021fde:	4306      	orrs	r6, r0
 8021fe0:	9304      	str	r3, [sp, #16]
 8021fe2:	e7ac      	b.n	8021f3e <__gethex+0x172>
 8021fe4:	9b00      	ldr	r3, [sp, #0]
 8021fe6:	42a3      	cmp	r3, r4
 8021fe8:	d8e9      	bhi.n	8021fbe <__gethex+0x1f2>
 8021fea:	2201      	movs	r2, #1
 8021fec:	0020      	movs	r0, r4
 8021fee:	492b      	ldr	r1, [pc, #172]	@ (802209c <__gethex+0x2d0>)
 8021ff0:	f7fe fee2 	bl	8020db8 <strncmp>
 8021ff4:	2800      	cmp	r0, #0
 8021ff6:	d1e2      	bne.n	8021fbe <__gethex+0x1f2>
 8021ff8:	e7a1      	b.n	8021f3e <__gethex+0x172>
 8021ffa:	0028      	movs	r0, r5
 8021ffc:	1eb1      	subs	r1, r6, #2
 8021ffe:	f000 ff4c 	bl	8022e9a <__any_on>
 8022002:	2800      	cmp	r0, #0
 8022004:	d0c4      	beq.n	8021f90 <__gethex+0x1c4>
 8022006:	2403      	movs	r4, #3
 8022008:	e7c3      	b.n	8021f92 <__gethex+0x1c6>
 802200a:	9b00      	ldr	r3, [sp, #0]
 802200c:	2400      	movs	r4, #0
 802200e:	429e      	cmp	r6, r3
 8022010:	dac4      	bge.n	8021f9c <__gethex+0x1d0>
 8022012:	1b9e      	subs	r6, r3, r6
 8022014:	0029      	movs	r1, r5
 8022016:	0032      	movs	r2, r6
 8022018:	9803      	ldr	r0, [sp, #12]
 802201a:	f000 fd05 	bl	8022a28 <__lshift>
 802201e:	0003      	movs	r3, r0
 8022020:	3314      	adds	r3, #20
 8022022:	0005      	movs	r5, r0
 8022024:	1bbf      	subs	r7, r7, r6
 8022026:	9302      	str	r3, [sp, #8]
 8022028:	e7b8      	b.n	8021f9c <__gethex+0x1d0>
 802202a:	9b01      	ldr	r3, [sp, #4]
 802202c:	685e      	ldr	r6, [r3, #4]
 802202e:	42be      	cmp	r6, r7
 8022030:	dd6f      	ble.n	8022112 <__gethex+0x346>
 8022032:	9b00      	ldr	r3, [sp, #0]
 8022034:	1bf6      	subs	r6, r6, r7
 8022036:	42b3      	cmp	r3, r6
 8022038:	dc36      	bgt.n	80220a8 <__gethex+0x2dc>
 802203a:	9b01      	ldr	r3, [sp, #4]
 802203c:	68db      	ldr	r3, [r3, #12]
 802203e:	2b02      	cmp	r3, #2
 8022040:	d024      	beq.n	802208c <__gethex+0x2c0>
 8022042:	2b03      	cmp	r3, #3
 8022044:	d026      	beq.n	8022094 <__gethex+0x2c8>
 8022046:	2b01      	cmp	r3, #1
 8022048:	d117      	bne.n	802207a <__gethex+0x2ae>
 802204a:	9b00      	ldr	r3, [sp, #0]
 802204c:	42b3      	cmp	r3, r6
 802204e:	d114      	bne.n	802207a <__gethex+0x2ae>
 8022050:	2b01      	cmp	r3, #1
 8022052:	d10b      	bne.n	802206c <__gethex+0x2a0>
 8022054:	9b01      	ldr	r3, [sp, #4]
 8022056:	9a07      	ldr	r2, [sp, #28]
 8022058:	685b      	ldr	r3, [r3, #4]
 802205a:	2662      	movs	r6, #98	@ 0x62
 802205c:	6013      	str	r3, [r2, #0]
 802205e:	2301      	movs	r3, #1
 8022060:	9a02      	ldr	r2, [sp, #8]
 8022062:	612b      	str	r3, [r5, #16]
 8022064:	6013      	str	r3, [r2, #0]
 8022066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022068:	601d      	str	r5, [r3, #0]
 802206a:	e739      	b.n	8021ee0 <__gethex+0x114>
 802206c:	9900      	ldr	r1, [sp, #0]
 802206e:	0028      	movs	r0, r5
 8022070:	3901      	subs	r1, #1
 8022072:	f000 ff12 	bl	8022e9a <__any_on>
 8022076:	2800      	cmp	r0, #0
 8022078:	d1ec      	bne.n	8022054 <__gethex+0x288>
 802207a:	0029      	movs	r1, r5
 802207c:	9803      	ldr	r0, [sp, #12]
 802207e:	f000 faa9 	bl	80225d4 <_Bfree>
 8022082:	2300      	movs	r3, #0
 8022084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022086:	2650      	movs	r6, #80	@ 0x50
 8022088:	6013      	str	r3, [r2, #0]
 802208a:	e729      	b.n	8021ee0 <__gethex+0x114>
 802208c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802208e:	2b00      	cmp	r3, #0
 8022090:	d1f3      	bne.n	802207a <__gethex+0x2ae>
 8022092:	e7df      	b.n	8022054 <__gethex+0x288>
 8022094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022096:	2b00      	cmp	r3, #0
 8022098:	d1dc      	bne.n	8022054 <__gethex+0x288>
 802209a:	e7ee      	b.n	802207a <__gethex+0x2ae>
 802209c:	08026d20 	.word	0x08026d20
 80220a0:	08026f31 	.word	0x08026f31
 80220a4:	08026f42 	.word	0x08026f42
 80220a8:	1e77      	subs	r7, r6, #1
 80220aa:	2c00      	cmp	r4, #0
 80220ac:	d12f      	bne.n	802210e <__gethex+0x342>
 80220ae:	2f00      	cmp	r7, #0
 80220b0:	d004      	beq.n	80220bc <__gethex+0x2f0>
 80220b2:	0039      	movs	r1, r7
 80220b4:	0028      	movs	r0, r5
 80220b6:	f000 fef0 	bl	8022e9a <__any_on>
 80220ba:	0004      	movs	r4, r0
 80220bc:	231f      	movs	r3, #31
 80220be:	117a      	asrs	r2, r7, #5
 80220c0:	401f      	ands	r7, r3
 80220c2:	3b1e      	subs	r3, #30
 80220c4:	40bb      	lsls	r3, r7
 80220c6:	9902      	ldr	r1, [sp, #8]
 80220c8:	0092      	lsls	r2, r2, #2
 80220ca:	5852      	ldr	r2, [r2, r1]
 80220cc:	421a      	tst	r2, r3
 80220ce:	d001      	beq.n	80220d4 <__gethex+0x308>
 80220d0:	2302      	movs	r3, #2
 80220d2:	431c      	orrs	r4, r3
 80220d4:	9b00      	ldr	r3, [sp, #0]
 80220d6:	0031      	movs	r1, r6
 80220d8:	1b9b      	subs	r3, r3, r6
 80220da:	2602      	movs	r6, #2
 80220dc:	0028      	movs	r0, r5
 80220de:	9300      	str	r3, [sp, #0]
 80220e0:	f7ff fe0c 	bl	8021cfc <rshift>
 80220e4:	9b01      	ldr	r3, [sp, #4]
 80220e6:	685f      	ldr	r7, [r3, #4]
 80220e8:	2c00      	cmp	r4, #0
 80220ea:	d03f      	beq.n	802216c <__gethex+0x3a0>
 80220ec:	9b01      	ldr	r3, [sp, #4]
 80220ee:	68db      	ldr	r3, [r3, #12]
 80220f0:	2b02      	cmp	r3, #2
 80220f2:	d010      	beq.n	8022116 <__gethex+0x34a>
 80220f4:	2b03      	cmp	r3, #3
 80220f6:	d012      	beq.n	802211e <__gethex+0x352>
 80220f8:	2b01      	cmp	r3, #1
 80220fa:	d106      	bne.n	802210a <__gethex+0x33e>
 80220fc:	07a2      	lsls	r2, r4, #30
 80220fe:	d504      	bpl.n	802210a <__gethex+0x33e>
 8022100:	9a02      	ldr	r2, [sp, #8]
 8022102:	6812      	ldr	r2, [r2, #0]
 8022104:	4314      	orrs	r4, r2
 8022106:	421c      	tst	r4, r3
 8022108:	d10c      	bne.n	8022124 <__gethex+0x358>
 802210a:	2310      	movs	r3, #16
 802210c:	e02d      	b.n	802216a <__gethex+0x39e>
 802210e:	2401      	movs	r4, #1
 8022110:	e7d4      	b.n	80220bc <__gethex+0x2f0>
 8022112:	2601      	movs	r6, #1
 8022114:	e7e8      	b.n	80220e8 <__gethex+0x31c>
 8022116:	2301      	movs	r3, #1
 8022118:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802211a:	1a9b      	subs	r3, r3, r2
 802211c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802211e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022120:	2b00      	cmp	r3, #0
 8022122:	d0f2      	beq.n	802210a <__gethex+0x33e>
 8022124:	692b      	ldr	r3, [r5, #16]
 8022126:	2000      	movs	r0, #0
 8022128:	9302      	str	r3, [sp, #8]
 802212a:	009b      	lsls	r3, r3, #2
 802212c:	9304      	str	r3, [sp, #16]
 802212e:	002b      	movs	r3, r5
 8022130:	9a04      	ldr	r2, [sp, #16]
 8022132:	3314      	adds	r3, #20
 8022134:	1899      	adds	r1, r3, r2
 8022136:	681a      	ldr	r2, [r3, #0]
 8022138:	1c54      	adds	r4, r2, #1
 802213a:	d01c      	beq.n	8022176 <__gethex+0x3aa>
 802213c:	3201      	adds	r2, #1
 802213e:	601a      	str	r2, [r3, #0]
 8022140:	002b      	movs	r3, r5
 8022142:	3314      	adds	r3, #20
 8022144:	2e02      	cmp	r6, #2
 8022146:	d13f      	bne.n	80221c8 <__gethex+0x3fc>
 8022148:	9a01      	ldr	r2, [sp, #4]
 802214a:	9900      	ldr	r1, [sp, #0]
 802214c:	6812      	ldr	r2, [r2, #0]
 802214e:	3a01      	subs	r2, #1
 8022150:	428a      	cmp	r2, r1
 8022152:	d109      	bne.n	8022168 <__gethex+0x39c>
 8022154:	000a      	movs	r2, r1
 8022156:	201f      	movs	r0, #31
 8022158:	4010      	ands	r0, r2
 802215a:	2201      	movs	r2, #1
 802215c:	4082      	lsls	r2, r0
 802215e:	1149      	asrs	r1, r1, #5
 8022160:	0089      	lsls	r1, r1, #2
 8022162:	58cb      	ldr	r3, [r1, r3]
 8022164:	4213      	tst	r3, r2
 8022166:	d13d      	bne.n	80221e4 <__gethex+0x418>
 8022168:	2320      	movs	r3, #32
 802216a:	431e      	orrs	r6, r3
 802216c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802216e:	601d      	str	r5, [r3, #0]
 8022170:	9b07      	ldr	r3, [sp, #28]
 8022172:	601f      	str	r7, [r3, #0]
 8022174:	e6b4      	b.n	8021ee0 <__gethex+0x114>
 8022176:	c301      	stmia	r3!, {r0}
 8022178:	4299      	cmp	r1, r3
 802217a:	d8dc      	bhi.n	8022136 <__gethex+0x36a>
 802217c:	68ab      	ldr	r3, [r5, #8]
 802217e:	9a02      	ldr	r2, [sp, #8]
 8022180:	429a      	cmp	r2, r3
 8022182:	db18      	blt.n	80221b6 <__gethex+0x3ea>
 8022184:	6869      	ldr	r1, [r5, #4]
 8022186:	9803      	ldr	r0, [sp, #12]
 8022188:	3101      	adds	r1, #1
 802218a:	f000 f9df 	bl	802254c <_Balloc>
 802218e:	1e04      	subs	r4, r0, #0
 8022190:	d104      	bne.n	802219c <__gethex+0x3d0>
 8022192:	0022      	movs	r2, r4
 8022194:	2184      	movs	r1, #132	@ 0x84
 8022196:	4b1d      	ldr	r3, [pc, #116]	@ (802220c <__gethex+0x440>)
 8022198:	481d      	ldr	r0, [pc, #116]	@ (8022210 <__gethex+0x444>)
 802219a:	e6c4      	b.n	8021f26 <__gethex+0x15a>
 802219c:	0029      	movs	r1, r5
 802219e:	692a      	ldr	r2, [r5, #16]
 80221a0:	310c      	adds	r1, #12
 80221a2:	3202      	adds	r2, #2
 80221a4:	0092      	lsls	r2, r2, #2
 80221a6:	300c      	adds	r0, #12
 80221a8:	f7fe fecc 	bl	8020f44 <memcpy>
 80221ac:	0029      	movs	r1, r5
 80221ae:	9803      	ldr	r0, [sp, #12]
 80221b0:	f000 fa10 	bl	80225d4 <_Bfree>
 80221b4:	0025      	movs	r5, r4
 80221b6:	692b      	ldr	r3, [r5, #16]
 80221b8:	1c5a      	adds	r2, r3, #1
 80221ba:	612a      	str	r2, [r5, #16]
 80221bc:	2201      	movs	r2, #1
 80221be:	3304      	adds	r3, #4
 80221c0:	009b      	lsls	r3, r3, #2
 80221c2:	18eb      	adds	r3, r5, r3
 80221c4:	605a      	str	r2, [r3, #4]
 80221c6:	e7bb      	b.n	8022140 <__gethex+0x374>
 80221c8:	692a      	ldr	r2, [r5, #16]
 80221ca:	9902      	ldr	r1, [sp, #8]
 80221cc:	428a      	cmp	r2, r1
 80221ce:	dd0b      	ble.n	80221e8 <__gethex+0x41c>
 80221d0:	2101      	movs	r1, #1
 80221d2:	0028      	movs	r0, r5
 80221d4:	f7ff fd92 	bl	8021cfc <rshift>
 80221d8:	9b01      	ldr	r3, [sp, #4]
 80221da:	3701      	adds	r7, #1
 80221dc:	689b      	ldr	r3, [r3, #8]
 80221de:	42bb      	cmp	r3, r7
 80221e0:	da00      	bge.n	80221e4 <__gethex+0x418>
 80221e2:	e6df      	b.n	8021fa4 <__gethex+0x1d8>
 80221e4:	2601      	movs	r6, #1
 80221e6:	e7bf      	b.n	8022168 <__gethex+0x39c>
 80221e8:	221f      	movs	r2, #31
 80221ea:	9c00      	ldr	r4, [sp, #0]
 80221ec:	9900      	ldr	r1, [sp, #0]
 80221ee:	4014      	ands	r4, r2
 80221f0:	4211      	tst	r1, r2
 80221f2:	d0f7      	beq.n	80221e4 <__gethex+0x418>
 80221f4:	9a04      	ldr	r2, [sp, #16]
 80221f6:	189b      	adds	r3, r3, r2
 80221f8:	3b04      	subs	r3, #4
 80221fa:	6818      	ldr	r0, [r3, #0]
 80221fc:	f000 fa9e 	bl	802273c <__hi0bits>
 8022200:	2320      	movs	r3, #32
 8022202:	1b1b      	subs	r3, r3, r4
 8022204:	4298      	cmp	r0, r3
 8022206:	dbe3      	blt.n	80221d0 <__gethex+0x404>
 8022208:	e7ec      	b.n	80221e4 <__gethex+0x418>
 802220a:	46c0      	nop			@ (mov r8, r8)
 802220c:	08026f31 	.word	0x08026f31
 8022210:	08026f42 	.word	0x08026f42

08022214 <L_shift>:
 8022214:	2308      	movs	r3, #8
 8022216:	b570      	push	{r4, r5, r6, lr}
 8022218:	2520      	movs	r5, #32
 802221a:	1a9a      	subs	r2, r3, r2
 802221c:	0092      	lsls	r2, r2, #2
 802221e:	1aad      	subs	r5, r5, r2
 8022220:	6843      	ldr	r3, [r0, #4]
 8022222:	6804      	ldr	r4, [r0, #0]
 8022224:	001e      	movs	r6, r3
 8022226:	40ae      	lsls	r6, r5
 8022228:	40d3      	lsrs	r3, r2
 802222a:	4334      	orrs	r4, r6
 802222c:	6004      	str	r4, [r0, #0]
 802222e:	6043      	str	r3, [r0, #4]
 8022230:	3004      	adds	r0, #4
 8022232:	4288      	cmp	r0, r1
 8022234:	d3f4      	bcc.n	8022220 <L_shift+0xc>
 8022236:	bd70      	pop	{r4, r5, r6, pc}

08022238 <__match>:
 8022238:	b530      	push	{r4, r5, lr}
 802223a:	6803      	ldr	r3, [r0, #0]
 802223c:	780c      	ldrb	r4, [r1, #0]
 802223e:	3301      	adds	r3, #1
 8022240:	2c00      	cmp	r4, #0
 8022242:	d102      	bne.n	802224a <__match+0x12>
 8022244:	6003      	str	r3, [r0, #0]
 8022246:	2001      	movs	r0, #1
 8022248:	bd30      	pop	{r4, r5, pc}
 802224a:	781a      	ldrb	r2, [r3, #0]
 802224c:	0015      	movs	r5, r2
 802224e:	3d41      	subs	r5, #65	@ 0x41
 8022250:	2d19      	cmp	r5, #25
 8022252:	d800      	bhi.n	8022256 <__match+0x1e>
 8022254:	3220      	adds	r2, #32
 8022256:	3101      	adds	r1, #1
 8022258:	42a2      	cmp	r2, r4
 802225a:	d0ef      	beq.n	802223c <__match+0x4>
 802225c:	2000      	movs	r0, #0
 802225e:	e7f3      	b.n	8022248 <__match+0x10>

08022260 <__hexnan>:
 8022260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022262:	680b      	ldr	r3, [r1, #0]
 8022264:	b08b      	sub	sp, #44	@ 0x2c
 8022266:	9201      	str	r2, [sp, #4]
 8022268:	9901      	ldr	r1, [sp, #4]
 802226a:	115a      	asrs	r2, r3, #5
 802226c:	0092      	lsls	r2, r2, #2
 802226e:	188a      	adds	r2, r1, r2
 8022270:	9202      	str	r2, [sp, #8]
 8022272:	0019      	movs	r1, r3
 8022274:	221f      	movs	r2, #31
 8022276:	4011      	ands	r1, r2
 8022278:	9008      	str	r0, [sp, #32]
 802227a:	9106      	str	r1, [sp, #24]
 802227c:	4213      	tst	r3, r2
 802227e:	d002      	beq.n	8022286 <__hexnan+0x26>
 8022280:	9b02      	ldr	r3, [sp, #8]
 8022282:	3304      	adds	r3, #4
 8022284:	9302      	str	r3, [sp, #8]
 8022286:	9b02      	ldr	r3, [sp, #8]
 8022288:	2500      	movs	r5, #0
 802228a:	1f1f      	subs	r7, r3, #4
 802228c:	003e      	movs	r6, r7
 802228e:	003c      	movs	r4, r7
 8022290:	9b08      	ldr	r3, [sp, #32]
 8022292:	603d      	str	r5, [r7, #0]
 8022294:	681b      	ldr	r3, [r3, #0]
 8022296:	9507      	str	r5, [sp, #28]
 8022298:	9305      	str	r3, [sp, #20]
 802229a:	9503      	str	r5, [sp, #12]
 802229c:	9b05      	ldr	r3, [sp, #20]
 802229e:	3301      	adds	r3, #1
 80222a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80222a2:	9b05      	ldr	r3, [sp, #20]
 80222a4:	785b      	ldrb	r3, [r3, #1]
 80222a6:	9304      	str	r3, [sp, #16]
 80222a8:	2b00      	cmp	r3, #0
 80222aa:	d028      	beq.n	80222fe <__hexnan+0x9e>
 80222ac:	9804      	ldr	r0, [sp, #16]
 80222ae:	f7ff fd78 	bl	8021da2 <__hexdig_fun>
 80222b2:	2800      	cmp	r0, #0
 80222b4:	d155      	bne.n	8022362 <__hexnan+0x102>
 80222b6:	9b04      	ldr	r3, [sp, #16]
 80222b8:	2b20      	cmp	r3, #32
 80222ba:	d819      	bhi.n	80222f0 <__hexnan+0x90>
 80222bc:	9b03      	ldr	r3, [sp, #12]
 80222be:	9a07      	ldr	r2, [sp, #28]
 80222c0:	4293      	cmp	r3, r2
 80222c2:	dd12      	ble.n	80222ea <__hexnan+0x8a>
 80222c4:	42b4      	cmp	r4, r6
 80222c6:	d206      	bcs.n	80222d6 <__hexnan+0x76>
 80222c8:	2d07      	cmp	r5, #7
 80222ca:	dc04      	bgt.n	80222d6 <__hexnan+0x76>
 80222cc:	002a      	movs	r2, r5
 80222ce:	0031      	movs	r1, r6
 80222d0:	0020      	movs	r0, r4
 80222d2:	f7ff ff9f 	bl	8022214 <L_shift>
 80222d6:	9b01      	ldr	r3, [sp, #4]
 80222d8:	2508      	movs	r5, #8
 80222da:	429c      	cmp	r4, r3
 80222dc:	d905      	bls.n	80222ea <__hexnan+0x8a>
 80222de:	1f26      	subs	r6, r4, #4
 80222e0:	2500      	movs	r5, #0
 80222e2:	0034      	movs	r4, r6
 80222e4:	9b03      	ldr	r3, [sp, #12]
 80222e6:	6035      	str	r5, [r6, #0]
 80222e8:	9307      	str	r3, [sp, #28]
 80222ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222ec:	9305      	str	r3, [sp, #20]
 80222ee:	e7d5      	b.n	802229c <__hexnan+0x3c>
 80222f0:	9b04      	ldr	r3, [sp, #16]
 80222f2:	2b29      	cmp	r3, #41	@ 0x29
 80222f4:	d15a      	bne.n	80223ac <__hexnan+0x14c>
 80222f6:	9b05      	ldr	r3, [sp, #20]
 80222f8:	9a08      	ldr	r2, [sp, #32]
 80222fa:	3302      	adds	r3, #2
 80222fc:	6013      	str	r3, [r2, #0]
 80222fe:	9b03      	ldr	r3, [sp, #12]
 8022300:	2b00      	cmp	r3, #0
 8022302:	d053      	beq.n	80223ac <__hexnan+0x14c>
 8022304:	42b4      	cmp	r4, r6
 8022306:	d206      	bcs.n	8022316 <__hexnan+0xb6>
 8022308:	2d07      	cmp	r5, #7
 802230a:	dc04      	bgt.n	8022316 <__hexnan+0xb6>
 802230c:	002a      	movs	r2, r5
 802230e:	0031      	movs	r1, r6
 8022310:	0020      	movs	r0, r4
 8022312:	f7ff ff7f 	bl	8022214 <L_shift>
 8022316:	9b01      	ldr	r3, [sp, #4]
 8022318:	429c      	cmp	r4, r3
 802231a:	d936      	bls.n	802238a <__hexnan+0x12a>
 802231c:	001a      	movs	r2, r3
 802231e:	0023      	movs	r3, r4
 8022320:	cb02      	ldmia	r3!, {r1}
 8022322:	c202      	stmia	r2!, {r1}
 8022324:	429f      	cmp	r7, r3
 8022326:	d2fb      	bcs.n	8022320 <__hexnan+0xc0>
 8022328:	9b02      	ldr	r3, [sp, #8]
 802232a:	1c61      	adds	r1, r4, #1
 802232c:	1eda      	subs	r2, r3, #3
 802232e:	2304      	movs	r3, #4
 8022330:	4291      	cmp	r1, r2
 8022332:	d805      	bhi.n	8022340 <__hexnan+0xe0>
 8022334:	9b02      	ldr	r3, [sp, #8]
 8022336:	3b04      	subs	r3, #4
 8022338:	1b1b      	subs	r3, r3, r4
 802233a:	089b      	lsrs	r3, r3, #2
 802233c:	3301      	adds	r3, #1
 802233e:	009b      	lsls	r3, r3, #2
 8022340:	9a01      	ldr	r2, [sp, #4]
 8022342:	18d3      	adds	r3, r2, r3
 8022344:	2200      	movs	r2, #0
 8022346:	c304      	stmia	r3!, {r2}
 8022348:	429f      	cmp	r7, r3
 802234a:	d2fc      	bcs.n	8022346 <__hexnan+0xe6>
 802234c:	683b      	ldr	r3, [r7, #0]
 802234e:	2b00      	cmp	r3, #0
 8022350:	d104      	bne.n	802235c <__hexnan+0xfc>
 8022352:	9b01      	ldr	r3, [sp, #4]
 8022354:	429f      	cmp	r7, r3
 8022356:	d127      	bne.n	80223a8 <__hexnan+0x148>
 8022358:	2301      	movs	r3, #1
 802235a:	603b      	str	r3, [r7, #0]
 802235c:	2005      	movs	r0, #5
 802235e:	b00b      	add	sp, #44	@ 0x2c
 8022360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022362:	9b03      	ldr	r3, [sp, #12]
 8022364:	3501      	adds	r5, #1
 8022366:	3301      	adds	r3, #1
 8022368:	9303      	str	r3, [sp, #12]
 802236a:	2d08      	cmp	r5, #8
 802236c:	dd06      	ble.n	802237c <__hexnan+0x11c>
 802236e:	9b01      	ldr	r3, [sp, #4]
 8022370:	429c      	cmp	r4, r3
 8022372:	d9ba      	bls.n	80222ea <__hexnan+0x8a>
 8022374:	2300      	movs	r3, #0
 8022376:	2501      	movs	r5, #1
 8022378:	3c04      	subs	r4, #4
 802237a:	6023      	str	r3, [r4, #0]
 802237c:	220f      	movs	r2, #15
 802237e:	6823      	ldr	r3, [r4, #0]
 8022380:	4010      	ands	r0, r2
 8022382:	011b      	lsls	r3, r3, #4
 8022384:	4303      	orrs	r3, r0
 8022386:	6023      	str	r3, [r4, #0]
 8022388:	e7af      	b.n	80222ea <__hexnan+0x8a>
 802238a:	9b06      	ldr	r3, [sp, #24]
 802238c:	2b00      	cmp	r3, #0
 802238e:	d0dd      	beq.n	802234c <__hexnan+0xec>
 8022390:	2320      	movs	r3, #32
 8022392:	9a06      	ldr	r2, [sp, #24]
 8022394:	9902      	ldr	r1, [sp, #8]
 8022396:	1a9b      	subs	r3, r3, r2
 8022398:	2201      	movs	r2, #1
 802239a:	4252      	negs	r2, r2
 802239c:	40da      	lsrs	r2, r3
 802239e:	3904      	subs	r1, #4
 80223a0:	680b      	ldr	r3, [r1, #0]
 80223a2:	4013      	ands	r3, r2
 80223a4:	600b      	str	r3, [r1, #0]
 80223a6:	e7d1      	b.n	802234c <__hexnan+0xec>
 80223a8:	3f04      	subs	r7, #4
 80223aa:	e7cf      	b.n	802234c <__hexnan+0xec>
 80223ac:	2004      	movs	r0, #4
 80223ae:	e7d6      	b.n	802235e <__hexnan+0xfe>

080223b0 <malloc>:
 80223b0:	b510      	push	{r4, lr}
 80223b2:	4b03      	ldr	r3, [pc, #12]	@ (80223c0 <malloc+0x10>)
 80223b4:	0001      	movs	r1, r0
 80223b6:	6818      	ldr	r0, [r3, #0]
 80223b8:	f000 f826 	bl	8022408 <_malloc_r>
 80223bc:	bd10      	pop	{r4, pc}
 80223be:	46c0      	nop			@ (mov r8, r8)
 80223c0:	200003cc 	.word	0x200003cc

080223c4 <sbrk_aligned>:
 80223c4:	b570      	push	{r4, r5, r6, lr}
 80223c6:	4e0f      	ldr	r6, [pc, #60]	@ (8022404 <sbrk_aligned+0x40>)
 80223c8:	000d      	movs	r5, r1
 80223ca:	6831      	ldr	r1, [r6, #0]
 80223cc:	0004      	movs	r4, r0
 80223ce:	2900      	cmp	r1, #0
 80223d0:	d102      	bne.n	80223d8 <sbrk_aligned+0x14>
 80223d2:	f001 f989 	bl	80236e8 <_sbrk_r>
 80223d6:	6030      	str	r0, [r6, #0]
 80223d8:	0029      	movs	r1, r5
 80223da:	0020      	movs	r0, r4
 80223dc:	f001 f984 	bl	80236e8 <_sbrk_r>
 80223e0:	1c43      	adds	r3, r0, #1
 80223e2:	d103      	bne.n	80223ec <sbrk_aligned+0x28>
 80223e4:	2501      	movs	r5, #1
 80223e6:	426d      	negs	r5, r5
 80223e8:	0028      	movs	r0, r5
 80223ea:	bd70      	pop	{r4, r5, r6, pc}
 80223ec:	2303      	movs	r3, #3
 80223ee:	1cc5      	adds	r5, r0, #3
 80223f0:	439d      	bics	r5, r3
 80223f2:	42a8      	cmp	r0, r5
 80223f4:	d0f8      	beq.n	80223e8 <sbrk_aligned+0x24>
 80223f6:	1a29      	subs	r1, r5, r0
 80223f8:	0020      	movs	r0, r4
 80223fa:	f001 f975 	bl	80236e8 <_sbrk_r>
 80223fe:	3001      	adds	r0, #1
 8022400:	d1f2      	bne.n	80223e8 <sbrk_aligned+0x24>
 8022402:	e7ef      	b.n	80223e4 <sbrk_aligned+0x20>
 8022404:	200034f4 	.word	0x200034f4

08022408 <_malloc_r>:
 8022408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802240a:	2203      	movs	r2, #3
 802240c:	1ccb      	adds	r3, r1, #3
 802240e:	4393      	bics	r3, r2
 8022410:	3308      	adds	r3, #8
 8022412:	0005      	movs	r5, r0
 8022414:	001f      	movs	r7, r3
 8022416:	2b0c      	cmp	r3, #12
 8022418:	d234      	bcs.n	8022484 <_malloc_r+0x7c>
 802241a:	270c      	movs	r7, #12
 802241c:	42b9      	cmp	r1, r7
 802241e:	d833      	bhi.n	8022488 <_malloc_r+0x80>
 8022420:	0028      	movs	r0, r5
 8022422:	f000 f883 	bl	802252c <__malloc_lock>
 8022426:	4e37      	ldr	r6, [pc, #220]	@ (8022504 <_malloc_r+0xfc>)
 8022428:	6833      	ldr	r3, [r6, #0]
 802242a:	001c      	movs	r4, r3
 802242c:	2c00      	cmp	r4, #0
 802242e:	d12f      	bne.n	8022490 <_malloc_r+0x88>
 8022430:	0039      	movs	r1, r7
 8022432:	0028      	movs	r0, r5
 8022434:	f7ff ffc6 	bl	80223c4 <sbrk_aligned>
 8022438:	0004      	movs	r4, r0
 802243a:	1c43      	adds	r3, r0, #1
 802243c:	d15f      	bne.n	80224fe <_malloc_r+0xf6>
 802243e:	6834      	ldr	r4, [r6, #0]
 8022440:	9400      	str	r4, [sp, #0]
 8022442:	9b00      	ldr	r3, [sp, #0]
 8022444:	2b00      	cmp	r3, #0
 8022446:	d14a      	bne.n	80224de <_malloc_r+0xd6>
 8022448:	2c00      	cmp	r4, #0
 802244a:	d052      	beq.n	80224f2 <_malloc_r+0xea>
 802244c:	6823      	ldr	r3, [r4, #0]
 802244e:	0028      	movs	r0, r5
 8022450:	18e3      	adds	r3, r4, r3
 8022452:	9900      	ldr	r1, [sp, #0]
 8022454:	9301      	str	r3, [sp, #4]
 8022456:	f001 f947 	bl	80236e8 <_sbrk_r>
 802245a:	9b01      	ldr	r3, [sp, #4]
 802245c:	4283      	cmp	r3, r0
 802245e:	d148      	bne.n	80224f2 <_malloc_r+0xea>
 8022460:	6823      	ldr	r3, [r4, #0]
 8022462:	0028      	movs	r0, r5
 8022464:	1aff      	subs	r7, r7, r3
 8022466:	0039      	movs	r1, r7
 8022468:	f7ff ffac 	bl	80223c4 <sbrk_aligned>
 802246c:	3001      	adds	r0, #1
 802246e:	d040      	beq.n	80224f2 <_malloc_r+0xea>
 8022470:	6823      	ldr	r3, [r4, #0]
 8022472:	19db      	adds	r3, r3, r7
 8022474:	6023      	str	r3, [r4, #0]
 8022476:	6833      	ldr	r3, [r6, #0]
 8022478:	685a      	ldr	r2, [r3, #4]
 802247a:	2a00      	cmp	r2, #0
 802247c:	d133      	bne.n	80224e6 <_malloc_r+0xde>
 802247e:	9b00      	ldr	r3, [sp, #0]
 8022480:	6033      	str	r3, [r6, #0]
 8022482:	e019      	b.n	80224b8 <_malloc_r+0xb0>
 8022484:	2b00      	cmp	r3, #0
 8022486:	dac9      	bge.n	802241c <_malloc_r+0x14>
 8022488:	230c      	movs	r3, #12
 802248a:	602b      	str	r3, [r5, #0]
 802248c:	2000      	movs	r0, #0
 802248e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022490:	6821      	ldr	r1, [r4, #0]
 8022492:	1bc9      	subs	r1, r1, r7
 8022494:	d420      	bmi.n	80224d8 <_malloc_r+0xd0>
 8022496:	290b      	cmp	r1, #11
 8022498:	d90a      	bls.n	80224b0 <_malloc_r+0xa8>
 802249a:	19e2      	adds	r2, r4, r7
 802249c:	6027      	str	r7, [r4, #0]
 802249e:	42a3      	cmp	r3, r4
 80224a0:	d104      	bne.n	80224ac <_malloc_r+0xa4>
 80224a2:	6032      	str	r2, [r6, #0]
 80224a4:	6863      	ldr	r3, [r4, #4]
 80224a6:	6011      	str	r1, [r2, #0]
 80224a8:	6053      	str	r3, [r2, #4]
 80224aa:	e005      	b.n	80224b8 <_malloc_r+0xb0>
 80224ac:	605a      	str	r2, [r3, #4]
 80224ae:	e7f9      	b.n	80224a4 <_malloc_r+0x9c>
 80224b0:	6862      	ldr	r2, [r4, #4]
 80224b2:	42a3      	cmp	r3, r4
 80224b4:	d10e      	bne.n	80224d4 <_malloc_r+0xcc>
 80224b6:	6032      	str	r2, [r6, #0]
 80224b8:	0028      	movs	r0, r5
 80224ba:	f000 f83f 	bl	802253c <__malloc_unlock>
 80224be:	0020      	movs	r0, r4
 80224c0:	2207      	movs	r2, #7
 80224c2:	300b      	adds	r0, #11
 80224c4:	1d23      	adds	r3, r4, #4
 80224c6:	4390      	bics	r0, r2
 80224c8:	1ac2      	subs	r2, r0, r3
 80224ca:	4298      	cmp	r0, r3
 80224cc:	d0df      	beq.n	802248e <_malloc_r+0x86>
 80224ce:	1a1b      	subs	r3, r3, r0
 80224d0:	50a3      	str	r3, [r4, r2]
 80224d2:	e7dc      	b.n	802248e <_malloc_r+0x86>
 80224d4:	605a      	str	r2, [r3, #4]
 80224d6:	e7ef      	b.n	80224b8 <_malloc_r+0xb0>
 80224d8:	0023      	movs	r3, r4
 80224da:	6864      	ldr	r4, [r4, #4]
 80224dc:	e7a6      	b.n	802242c <_malloc_r+0x24>
 80224de:	9c00      	ldr	r4, [sp, #0]
 80224e0:	6863      	ldr	r3, [r4, #4]
 80224e2:	9300      	str	r3, [sp, #0]
 80224e4:	e7ad      	b.n	8022442 <_malloc_r+0x3a>
 80224e6:	001a      	movs	r2, r3
 80224e8:	685b      	ldr	r3, [r3, #4]
 80224ea:	42a3      	cmp	r3, r4
 80224ec:	d1fb      	bne.n	80224e6 <_malloc_r+0xde>
 80224ee:	2300      	movs	r3, #0
 80224f0:	e7da      	b.n	80224a8 <_malloc_r+0xa0>
 80224f2:	230c      	movs	r3, #12
 80224f4:	0028      	movs	r0, r5
 80224f6:	602b      	str	r3, [r5, #0]
 80224f8:	f000 f820 	bl	802253c <__malloc_unlock>
 80224fc:	e7c6      	b.n	802248c <_malloc_r+0x84>
 80224fe:	6007      	str	r7, [r0, #0]
 8022500:	e7da      	b.n	80224b8 <_malloc_r+0xb0>
 8022502:	46c0      	nop			@ (mov r8, r8)
 8022504:	200034f8 	.word	0x200034f8

08022508 <__ascii_mbtowc>:
 8022508:	b082      	sub	sp, #8
 802250a:	2900      	cmp	r1, #0
 802250c:	d100      	bne.n	8022510 <__ascii_mbtowc+0x8>
 802250e:	a901      	add	r1, sp, #4
 8022510:	1e10      	subs	r0, r2, #0
 8022512:	d006      	beq.n	8022522 <__ascii_mbtowc+0x1a>
 8022514:	2b00      	cmp	r3, #0
 8022516:	d006      	beq.n	8022526 <__ascii_mbtowc+0x1e>
 8022518:	7813      	ldrb	r3, [r2, #0]
 802251a:	600b      	str	r3, [r1, #0]
 802251c:	7810      	ldrb	r0, [r2, #0]
 802251e:	1e43      	subs	r3, r0, #1
 8022520:	4198      	sbcs	r0, r3
 8022522:	b002      	add	sp, #8
 8022524:	4770      	bx	lr
 8022526:	2002      	movs	r0, #2
 8022528:	4240      	negs	r0, r0
 802252a:	e7fa      	b.n	8022522 <__ascii_mbtowc+0x1a>

0802252c <__malloc_lock>:
 802252c:	b510      	push	{r4, lr}
 802252e:	4802      	ldr	r0, [pc, #8]	@ (8022538 <__malloc_lock+0xc>)
 8022530:	f7fe fcfb 	bl	8020f2a <__retarget_lock_acquire_recursive>
 8022534:	bd10      	pop	{r4, pc}
 8022536:	46c0      	nop			@ (mov r8, r8)
 8022538:	200034f0 	.word	0x200034f0

0802253c <__malloc_unlock>:
 802253c:	b510      	push	{r4, lr}
 802253e:	4802      	ldr	r0, [pc, #8]	@ (8022548 <__malloc_unlock+0xc>)
 8022540:	f7fe fcf4 	bl	8020f2c <__retarget_lock_release_recursive>
 8022544:	bd10      	pop	{r4, pc}
 8022546:	46c0      	nop			@ (mov r8, r8)
 8022548:	200034f0 	.word	0x200034f0

0802254c <_Balloc>:
 802254c:	b570      	push	{r4, r5, r6, lr}
 802254e:	69c5      	ldr	r5, [r0, #28]
 8022550:	0006      	movs	r6, r0
 8022552:	000c      	movs	r4, r1
 8022554:	2d00      	cmp	r5, #0
 8022556:	d10e      	bne.n	8022576 <_Balloc+0x2a>
 8022558:	2010      	movs	r0, #16
 802255a:	f7ff ff29 	bl	80223b0 <malloc>
 802255e:	1e02      	subs	r2, r0, #0
 8022560:	61f0      	str	r0, [r6, #28]
 8022562:	d104      	bne.n	802256e <_Balloc+0x22>
 8022564:	216b      	movs	r1, #107	@ 0x6b
 8022566:	4b19      	ldr	r3, [pc, #100]	@ (80225cc <_Balloc+0x80>)
 8022568:	4819      	ldr	r0, [pc, #100]	@ (80225d0 <_Balloc+0x84>)
 802256a:	f001 f8cf 	bl	802370c <__assert_func>
 802256e:	6045      	str	r5, [r0, #4]
 8022570:	6085      	str	r5, [r0, #8]
 8022572:	6005      	str	r5, [r0, #0]
 8022574:	60c5      	str	r5, [r0, #12]
 8022576:	69f5      	ldr	r5, [r6, #28]
 8022578:	68eb      	ldr	r3, [r5, #12]
 802257a:	2b00      	cmp	r3, #0
 802257c:	d013      	beq.n	80225a6 <_Balloc+0x5a>
 802257e:	69f3      	ldr	r3, [r6, #28]
 8022580:	00a2      	lsls	r2, r4, #2
 8022582:	68db      	ldr	r3, [r3, #12]
 8022584:	189b      	adds	r3, r3, r2
 8022586:	6818      	ldr	r0, [r3, #0]
 8022588:	2800      	cmp	r0, #0
 802258a:	d118      	bne.n	80225be <_Balloc+0x72>
 802258c:	2101      	movs	r1, #1
 802258e:	000d      	movs	r5, r1
 8022590:	40a5      	lsls	r5, r4
 8022592:	1d6a      	adds	r2, r5, #5
 8022594:	0030      	movs	r0, r6
 8022596:	0092      	lsls	r2, r2, #2
 8022598:	f001 f8d6 	bl	8023748 <_calloc_r>
 802259c:	2800      	cmp	r0, #0
 802259e:	d00c      	beq.n	80225ba <_Balloc+0x6e>
 80225a0:	6044      	str	r4, [r0, #4]
 80225a2:	6085      	str	r5, [r0, #8]
 80225a4:	e00d      	b.n	80225c2 <_Balloc+0x76>
 80225a6:	2221      	movs	r2, #33	@ 0x21
 80225a8:	2104      	movs	r1, #4
 80225aa:	0030      	movs	r0, r6
 80225ac:	f001 f8cc 	bl	8023748 <_calloc_r>
 80225b0:	69f3      	ldr	r3, [r6, #28]
 80225b2:	60e8      	str	r0, [r5, #12]
 80225b4:	68db      	ldr	r3, [r3, #12]
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d1e1      	bne.n	802257e <_Balloc+0x32>
 80225ba:	2000      	movs	r0, #0
 80225bc:	bd70      	pop	{r4, r5, r6, pc}
 80225be:	6802      	ldr	r2, [r0, #0]
 80225c0:	601a      	str	r2, [r3, #0]
 80225c2:	2300      	movs	r3, #0
 80225c4:	6103      	str	r3, [r0, #16]
 80225c6:	60c3      	str	r3, [r0, #12]
 80225c8:	e7f8      	b.n	80225bc <_Balloc+0x70>
 80225ca:	46c0      	nop			@ (mov r8, r8)
 80225cc:	08026ec2 	.word	0x08026ec2
 80225d0:	08026fa2 	.word	0x08026fa2

080225d4 <_Bfree>:
 80225d4:	b570      	push	{r4, r5, r6, lr}
 80225d6:	69c6      	ldr	r6, [r0, #28]
 80225d8:	0005      	movs	r5, r0
 80225da:	000c      	movs	r4, r1
 80225dc:	2e00      	cmp	r6, #0
 80225de:	d10e      	bne.n	80225fe <_Bfree+0x2a>
 80225e0:	2010      	movs	r0, #16
 80225e2:	f7ff fee5 	bl	80223b0 <malloc>
 80225e6:	1e02      	subs	r2, r0, #0
 80225e8:	61e8      	str	r0, [r5, #28]
 80225ea:	d104      	bne.n	80225f6 <_Bfree+0x22>
 80225ec:	218f      	movs	r1, #143	@ 0x8f
 80225ee:	4b09      	ldr	r3, [pc, #36]	@ (8022614 <_Bfree+0x40>)
 80225f0:	4809      	ldr	r0, [pc, #36]	@ (8022618 <_Bfree+0x44>)
 80225f2:	f001 f88b 	bl	802370c <__assert_func>
 80225f6:	6046      	str	r6, [r0, #4]
 80225f8:	6086      	str	r6, [r0, #8]
 80225fa:	6006      	str	r6, [r0, #0]
 80225fc:	60c6      	str	r6, [r0, #12]
 80225fe:	2c00      	cmp	r4, #0
 8022600:	d007      	beq.n	8022612 <_Bfree+0x3e>
 8022602:	69eb      	ldr	r3, [r5, #28]
 8022604:	6862      	ldr	r2, [r4, #4]
 8022606:	68db      	ldr	r3, [r3, #12]
 8022608:	0092      	lsls	r2, r2, #2
 802260a:	189b      	adds	r3, r3, r2
 802260c:	681a      	ldr	r2, [r3, #0]
 802260e:	6022      	str	r2, [r4, #0]
 8022610:	601c      	str	r4, [r3, #0]
 8022612:	bd70      	pop	{r4, r5, r6, pc}
 8022614:	08026ec2 	.word	0x08026ec2
 8022618:	08026fa2 	.word	0x08026fa2

0802261c <__multadd>:
 802261c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802261e:	000f      	movs	r7, r1
 8022620:	9001      	str	r0, [sp, #4]
 8022622:	000c      	movs	r4, r1
 8022624:	001e      	movs	r6, r3
 8022626:	2000      	movs	r0, #0
 8022628:	690d      	ldr	r5, [r1, #16]
 802262a:	3714      	adds	r7, #20
 802262c:	683b      	ldr	r3, [r7, #0]
 802262e:	3001      	adds	r0, #1
 8022630:	b299      	uxth	r1, r3
 8022632:	4351      	muls	r1, r2
 8022634:	0c1b      	lsrs	r3, r3, #16
 8022636:	4353      	muls	r3, r2
 8022638:	1989      	adds	r1, r1, r6
 802263a:	0c0e      	lsrs	r6, r1, #16
 802263c:	199b      	adds	r3, r3, r6
 802263e:	0c1e      	lsrs	r6, r3, #16
 8022640:	b289      	uxth	r1, r1
 8022642:	041b      	lsls	r3, r3, #16
 8022644:	185b      	adds	r3, r3, r1
 8022646:	c708      	stmia	r7!, {r3}
 8022648:	4285      	cmp	r5, r0
 802264a:	dcef      	bgt.n	802262c <__multadd+0x10>
 802264c:	2e00      	cmp	r6, #0
 802264e:	d022      	beq.n	8022696 <__multadd+0x7a>
 8022650:	68a3      	ldr	r3, [r4, #8]
 8022652:	42ab      	cmp	r3, r5
 8022654:	dc19      	bgt.n	802268a <__multadd+0x6e>
 8022656:	6861      	ldr	r1, [r4, #4]
 8022658:	9801      	ldr	r0, [sp, #4]
 802265a:	3101      	adds	r1, #1
 802265c:	f7ff ff76 	bl	802254c <_Balloc>
 8022660:	1e07      	subs	r7, r0, #0
 8022662:	d105      	bne.n	8022670 <__multadd+0x54>
 8022664:	003a      	movs	r2, r7
 8022666:	21ba      	movs	r1, #186	@ 0xba
 8022668:	4b0c      	ldr	r3, [pc, #48]	@ (802269c <__multadd+0x80>)
 802266a:	480d      	ldr	r0, [pc, #52]	@ (80226a0 <__multadd+0x84>)
 802266c:	f001 f84e 	bl	802370c <__assert_func>
 8022670:	0021      	movs	r1, r4
 8022672:	6922      	ldr	r2, [r4, #16]
 8022674:	310c      	adds	r1, #12
 8022676:	3202      	adds	r2, #2
 8022678:	0092      	lsls	r2, r2, #2
 802267a:	300c      	adds	r0, #12
 802267c:	f7fe fc62 	bl	8020f44 <memcpy>
 8022680:	0021      	movs	r1, r4
 8022682:	9801      	ldr	r0, [sp, #4]
 8022684:	f7ff ffa6 	bl	80225d4 <_Bfree>
 8022688:	003c      	movs	r4, r7
 802268a:	1d2b      	adds	r3, r5, #4
 802268c:	009b      	lsls	r3, r3, #2
 802268e:	18e3      	adds	r3, r4, r3
 8022690:	3501      	adds	r5, #1
 8022692:	605e      	str	r6, [r3, #4]
 8022694:	6125      	str	r5, [r4, #16]
 8022696:	0020      	movs	r0, r4
 8022698:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802269a:	46c0      	nop			@ (mov r8, r8)
 802269c:	08026f31 	.word	0x08026f31
 80226a0:	08026fa2 	.word	0x08026fa2

080226a4 <__s2b>:
 80226a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80226a6:	0007      	movs	r7, r0
 80226a8:	0018      	movs	r0, r3
 80226aa:	000c      	movs	r4, r1
 80226ac:	3008      	adds	r0, #8
 80226ae:	2109      	movs	r1, #9
 80226b0:	9301      	str	r3, [sp, #4]
 80226b2:	0015      	movs	r5, r2
 80226b4:	f7dd fe00 	bl	80002b8 <__divsi3>
 80226b8:	2301      	movs	r3, #1
 80226ba:	2100      	movs	r1, #0
 80226bc:	4283      	cmp	r3, r0
 80226be:	db0a      	blt.n	80226d6 <__s2b+0x32>
 80226c0:	0038      	movs	r0, r7
 80226c2:	f7ff ff43 	bl	802254c <_Balloc>
 80226c6:	1e01      	subs	r1, r0, #0
 80226c8:	d108      	bne.n	80226dc <__s2b+0x38>
 80226ca:	000a      	movs	r2, r1
 80226cc:	4b19      	ldr	r3, [pc, #100]	@ (8022734 <__s2b+0x90>)
 80226ce:	481a      	ldr	r0, [pc, #104]	@ (8022738 <__s2b+0x94>)
 80226d0:	31d3      	adds	r1, #211	@ 0xd3
 80226d2:	f001 f81b 	bl	802370c <__assert_func>
 80226d6:	005b      	lsls	r3, r3, #1
 80226d8:	3101      	adds	r1, #1
 80226da:	e7ef      	b.n	80226bc <__s2b+0x18>
 80226dc:	9b08      	ldr	r3, [sp, #32]
 80226de:	6143      	str	r3, [r0, #20]
 80226e0:	2301      	movs	r3, #1
 80226e2:	6103      	str	r3, [r0, #16]
 80226e4:	2d09      	cmp	r5, #9
 80226e6:	dd18      	ble.n	802271a <__s2b+0x76>
 80226e8:	0023      	movs	r3, r4
 80226ea:	3309      	adds	r3, #9
 80226ec:	001e      	movs	r6, r3
 80226ee:	9300      	str	r3, [sp, #0]
 80226f0:	1964      	adds	r4, r4, r5
 80226f2:	7833      	ldrb	r3, [r6, #0]
 80226f4:	220a      	movs	r2, #10
 80226f6:	0038      	movs	r0, r7
 80226f8:	3b30      	subs	r3, #48	@ 0x30
 80226fa:	f7ff ff8f 	bl	802261c <__multadd>
 80226fe:	3601      	adds	r6, #1
 8022700:	0001      	movs	r1, r0
 8022702:	42a6      	cmp	r6, r4
 8022704:	d1f5      	bne.n	80226f2 <__s2b+0x4e>
 8022706:	002c      	movs	r4, r5
 8022708:	9b00      	ldr	r3, [sp, #0]
 802270a:	3c08      	subs	r4, #8
 802270c:	191c      	adds	r4, r3, r4
 802270e:	002e      	movs	r6, r5
 8022710:	9b01      	ldr	r3, [sp, #4]
 8022712:	429e      	cmp	r6, r3
 8022714:	db04      	blt.n	8022720 <__s2b+0x7c>
 8022716:	0008      	movs	r0, r1
 8022718:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802271a:	2509      	movs	r5, #9
 802271c:	340a      	adds	r4, #10
 802271e:	e7f6      	b.n	802270e <__s2b+0x6a>
 8022720:	1b63      	subs	r3, r4, r5
 8022722:	5d9b      	ldrb	r3, [r3, r6]
 8022724:	220a      	movs	r2, #10
 8022726:	0038      	movs	r0, r7
 8022728:	3b30      	subs	r3, #48	@ 0x30
 802272a:	f7ff ff77 	bl	802261c <__multadd>
 802272e:	3601      	adds	r6, #1
 8022730:	0001      	movs	r1, r0
 8022732:	e7ed      	b.n	8022710 <__s2b+0x6c>
 8022734:	08026f31 	.word	0x08026f31
 8022738:	08026fa2 	.word	0x08026fa2

0802273c <__hi0bits>:
 802273c:	2280      	movs	r2, #128	@ 0x80
 802273e:	0003      	movs	r3, r0
 8022740:	0252      	lsls	r2, r2, #9
 8022742:	2000      	movs	r0, #0
 8022744:	4293      	cmp	r3, r2
 8022746:	d201      	bcs.n	802274c <__hi0bits+0x10>
 8022748:	041b      	lsls	r3, r3, #16
 802274a:	3010      	adds	r0, #16
 802274c:	2280      	movs	r2, #128	@ 0x80
 802274e:	0452      	lsls	r2, r2, #17
 8022750:	4293      	cmp	r3, r2
 8022752:	d201      	bcs.n	8022758 <__hi0bits+0x1c>
 8022754:	3008      	adds	r0, #8
 8022756:	021b      	lsls	r3, r3, #8
 8022758:	2280      	movs	r2, #128	@ 0x80
 802275a:	0552      	lsls	r2, r2, #21
 802275c:	4293      	cmp	r3, r2
 802275e:	d201      	bcs.n	8022764 <__hi0bits+0x28>
 8022760:	3004      	adds	r0, #4
 8022762:	011b      	lsls	r3, r3, #4
 8022764:	2280      	movs	r2, #128	@ 0x80
 8022766:	05d2      	lsls	r2, r2, #23
 8022768:	4293      	cmp	r3, r2
 802276a:	d201      	bcs.n	8022770 <__hi0bits+0x34>
 802276c:	3002      	adds	r0, #2
 802276e:	009b      	lsls	r3, r3, #2
 8022770:	2b00      	cmp	r3, #0
 8022772:	db03      	blt.n	802277c <__hi0bits+0x40>
 8022774:	3001      	adds	r0, #1
 8022776:	4213      	tst	r3, r2
 8022778:	d100      	bne.n	802277c <__hi0bits+0x40>
 802277a:	2020      	movs	r0, #32
 802277c:	4770      	bx	lr

0802277e <__lo0bits>:
 802277e:	6803      	ldr	r3, [r0, #0]
 8022780:	0001      	movs	r1, r0
 8022782:	2207      	movs	r2, #7
 8022784:	0018      	movs	r0, r3
 8022786:	4010      	ands	r0, r2
 8022788:	4213      	tst	r3, r2
 802278a:	d00d      	beq.n	80227a8 <__lo0bits+0x2a>
 802278c:	3a06      	subs	r2, #6
 802278e:	2000      	movs	r0, #0
 8022790:	4213      	tst	r3, r2
 8022792:	d105      	bne.n	80227a0 <__lo0bits+0x22>
 8022794:	3002      	adds	r0, #2
 8022796:	4203      	tst	r3, r0
 8022798:	d003      	beq.n	80227a2 <__lo0bits+0x24>
 802279a:	40d3      	lsrs	r3, r2
 802279c:	0010      	movs	r0, r2
 802279e:	600b      	str	r3, [r1, #0]
 80227a0:	4770      	bx	lr
 80227a2:	089b      	lsrs	r3, r3, #2
 80227a4:	600b      	str	r3, [r1, #0]
 80227a6:	e7fb      	b.n	80227a0 <__lo0bits+0x22>
 80227a8:	b29a      	uxth	r2, r3
 80227aa:	2a00      	cmp	r2, #0
 80227ac:	d101      	bne.n	80227b2 <__lo0bits+0x34>
 80227ae:	2010      	movs	r0, #16
 80227b0:	0c1b      	lsrs	r3, r3, #16
 80227b2:	b2da      	uxtb	r2, r3
 80227b4:	2a00      	cmp	r2, #0
 80227b6:	d101      	bne.n	80227bc <__lo0bits+0x3e>
 80227b8:	3008      	adds	r0, #8
 80227ba:	0a1b      	lsrs	r3, r3, #8
 80227bc:	071a      	lsls	r2, r3, #28
 80227be:	d101      	bne.n	80227c4 <__lo0bits+0x46>
 80227c0:	3004      	adds	r0, #4
 80227c2:	091b      	lsrs	r3, r3, #4
 80227c4:	079a      	lsls	r2, r3, #30
 80227c6:	d101      	bne.n	80227cc <__lo0bits+0x4e>
 80227c8:	3002      	adds	r0, #2
 80227ca:	089b      	lsrs	r3, r3, #2
 80227cc:	07da      	lsls	r2, r3, #31
 80227ce:	d4e9      	bmi.n	80227a4 <__lo0bits+0x26>
 80227d0:	3001      	adds	r0, #1
 80227d2:	085b      	lsrs	r3, r3, #1
 80227d4:	d1e6      	bne.n	80227a4 <__lo0bits+0x26>
 80227d6:	2020      	movs	r0, #32
 80227d8:	e7e2      	b.n	80227a0 <__lo0bits+0x22>
	...

080227dc <__i2b>:
 80227dc:	b510      	push	{r4, lr}
 80227de:	000c      	movs	r4, r1
 80227e0:	2101      	movs	r1, #1
 80227e2:	f7ff feb3 	bl	802254c <_Balloc>
 80227e6:	2800      	cmp	r0, #0
 80227e8:	d107      	bne.n	80227fa <__i2b+0x1e>
 80227ea:	2146      	movs	r1, #70	@ 0x46
 80227ec:	4c05      	ldr	r4, [pc, #20]	@ (8022804 <__i2b+0x28>)
 80227ee:	0002      	movs	r2, r0
 80227f0:	4b05      	ldr	r3, [pc, #20]	@ (8022808 <__i2b+0x2c>)
 80227f2:	0020      	movs	r0, r4
 80227f4:	31ff      	adds	r1, #255	@ 0xff
 80227f6:	f000 ff89 	bl	802370c <__assert_func>
 80227fa:	2301      	movs	r3, #1
 80227fc:	6144      	str	r4, [r0, #20]
 80227fe:	6103      	str	r3, [r0, #16]
 8022800:	bd10      	pop	{r4, pc}
 8022802:	46c0      	nop			@ (mov r8, r8)
 8022804:	08026fa2 	.word	0x08026fa2
 8022808:	08026f31 	.word	0x08026f31

0802280c <__multiply>:
 802280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802280e:	0014      	movs	r4, r2
 8022810:	690a      	ldr	r2, [r1, #16]
 8022812:	6923      	ldr	r3, [r4, #16]
 8022814:	000d      	movs	r5, r1
 8022816:	b08b      	sub	sp, #44	@ 0x2c
 8022818:	429a      	cmp	r2, r3
 802281a:	db02      	blt.n	8022822 <__multiply+0x16>
 802281c:	0023      	movs	r3, r4
 802281e:	000c      	movs	r4, r1
 8022820:	001d      	movs	r5, r3
 8022822:	6927      	ldr	r7, [r4, #16]
 8022824:	692e      	ldr	r6, [r5, #16]
 8022826:	6861      	ldr	r1, [r4, #4]
 8022828:	19bb      	adds	r3, r7, r6
 802282a:	9303      	str	r3, [sp, #12]
 802282c:	68a3      	ldr	r3, [r4, #8]
 802282e:	19ba      	adds	r2, r7, r6
 8022830:	4293      	cmp	r3, r2
 8022832:	da00      	bge.n	8022836 <__multiply+0x2a>
 8022834:	3101      	adds	r1, #1
 8022836:	f7ff fe89 	bl	802254c <_Balloc>
 802283a:	9002      	str	r0, [sp, #8]
 802283c:	2800      	cmp	r0, #0
 802283e:	d106      	bne.n	802284e <__multiply+0x42>
 8022840:	21b1      	movs	r1, #177	@ 0xb1
 8022842:	4b49      	ldr	r3, [pc, #292]	@ (8022968 <__multiply+0x15c>)
 8022844:	4849      	ldr	r0, [pc, #292]	@ (802296c <__multiply+0x160>)
 8022846:	9a02      	ldr	r2, [sp, #8]
 8022848:	0049      	lsls	r1, r1, #1
 802284a:	f000 ff5f 	bl	802370c <__assert_func>
 802284e:	9b02      	ldr	r3, [sp, #8]
 8022850:	2200      	movs	r2, #0
 8022852:	3314      	adds	r3, #20
 8022854:	469c      	mov	ip, r3
 8022856:	19bb      	adds	r3, r7, r6
 8022858:	009b      	lsls	r3, r3, #2
 802285a:	4463      	add	r3, ip
 802285c:	9304      	str	r3, [sp, #16]
 802285e:	4663      	mov	r3, ip
 8022860:	9904      	ldr	r1, [sp, #16]
 8022862:	428b      	cmp	r3, r1
 8022864:	d32a      	bcc.n	80228bc <__multiply+0xb0>
 8022866:	0023      	movs	r3, r4
 8022868:	00bf      	lsls	r7, r7, #2
 802286a:	3314      	adds	r3, #20
 802286c:	3514      	adds	r5, #20
 802286e:	9308      	str	r3, [sp, #32]
 8022870:	00b6      	lsls	r6, r6, #2
 8022872:	19db      	adds	r3, r3, r7
 8022874:	9305      	str	r3, [sp, #20]
 8022876:	19ab      	adds	r3, r5, r6
 8022878:	9309      	str	r3, [sp, #36]	@ 0x24
 802287a:	2304      	movs	r3, #4
 802287c:	9306      	str	r3, [sp, #24]
 802287e:	0023      	movs	r3, r4
 8022880:	9a05      	ldr	r2, [sp, #20]
 8022882:	3315      	adds	r3, #21
 8022884:	9501      	str	r5, [sp, #4]
 8022886:	429a      	cmp	r2, r3
 8022888:	d305      	bcc.n	8022896 <__multiply+0x8a>
 802288a:	1b13      	subs	r3, r2, r4
 802288c:	3b15      	subs	r3, #21
 802288e:	089b      	lsrs	r3, r3, #2
 8022890:	3301      	adds	r3, #1
 8022892:	009b      	lsls	r3, r3, #2
 8022894:	9306      	str	r3, [sp, #24]
 8022896:	9b01      	ldr	r3, [sp, #4]
 8022898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802289a:	4293      	cmp	r3, r2
 802289c:	d310      	bcc.n	80228c0 <__multiply+0xb4>
 802289e:	9b03      	ldr	r3, [sp, #12]
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	dd05      	ble.n	80228b0 <__multiply+0xa4>
 80228a4:	9b04      	ldr	r3, [sp, #16]
 80228a6:	3b04      	subs	r3, #4
 80228a8:	9304      	str	r3, [sp, #16]
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	d056      	beq.n	802295e <__multiply+0x152>
 80228b0:	9b02      	ldr	r3, [sp, #8]
 80228b2:	9a03      	ldr	r2, [sp, #12]
 80228b4:	0018      	movs	r0, r3
 80228b6:	611a      	str	r2, [r3, #16]
 80228b8:	b00b      	add	sp, #44	@ 0x2c
 80228ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80228bc:	c304      	stmia	r3!, {r2}
 80228be:	e7cf      	b.n	8022860 <__multiply+0x54>
 80228c0:	9b01      	ldr	r3, [sp, #4]
 80228c2:	6818      	ldr	r0, [r3, #0]
 80228c4:	b280      	uxth	r0, r0
 80228c6:	2800      	cmp	r0, #0
 80228c8:	d01e      	beq.n	8022908 <__multiply+0xfc>
 80228ca:	4667      	mov	r7, ip
 80228cc:	2500      	movs	r5, #0
 80228ce:	9e08      	ldr	r6, [sp, #32]
 80228d0:	ce02      	ldmia	r6!, {r1}
 80228d2:	683b      	ldr	r3, [r7, #0]
 80228d4:	9307      	str	r3, [sp, #28]
 80228d6:	b28b      	uxth	r3, r1
 80228d8:	4343      	muls	r3, r0
 80228da:	001a      	movs	r2, r3
 80228dc:	466b      	mov	r3, sp
 80228de:	0c09      	lsrs	r1, r1, #16
 80228e0:	8b9b      	ldrh	r3, [r3, #28]
 80228e2:	4341      	muls	r1, r0
 80228e4:	18d3      	adds	r3, r2, r3
 80228e6:	9a07      	ldr	r2, [sp, #28]
 80228e8:	195b      	adds	r3, r3, r5
 80228ea:	0c12      	lsrs	r2, r2, #16
 80228ec:	1889      	adds	r1, r1, r2
 80228ee:	0c1a      	lsrs	r2, r3, #16
 80228f0:	188a      	adds	r2, r1, r2
 80228f2:	b29b      	uxth	r3, r3
 80228f4:	0c15      	lsrs	r5, r2, #16
 80228f6:	0412      	lsls	r2, r2, #16
 80228f8:	431a      	orrs	r2, r3
 80228fa:	9b05      	ldr	r3, [sp, #20]
 80228fc:	c704      	stmia	r7!, {r2}
 80228fe:	42b3      	cmp	r3, r6
 8022900:	d8e6      	bhi.n	80228d0 <__multiply+0xc4>
 8022902:	4663      	mov	r3, ip
 8022904:	9a06      	ldr	r2, [sp, #24]
 8022906:	509d      	str	r5, [r3, r2]
 8022908:	9b01      	ldr	r3, [sp, #4]
 802290a:	6818      	ldr	r0, [r3, #0]
 802290c:	0c00      	lsrs	r0, r0, #16
 802290e:	d020      	beq.n	8022952 <__multiply+0x146>
 8022910:	4663      	mov	r3, ip
 8022912:	0025      	movs	r5, r4
 8022914:	4661      	mov	r1, ip
 8022916:	2700      	movs	r7, #0
 8022918:	681b      	ldr	r3, [r3, #0]
 802291a:	3514      	adds	r5, #20
 802291c:	682a      	ldr	r2, [r5, #0]
 802291e:	680e      	ldr	r6, [r1, #0]
 8022920:	b292      	uxth	r2, r2
 8022922:	4342      	muls	r2, r0
 8022924:	0c36      	lsrs	r6, r6, #16
 8022926:	1992      	adds	r2, r2, r6
 8022928:	19d2      	adds	r2, r2, r7
 802292a:	0416      	lsls	r6, r2, #16
 802292c:	b29b      	uxth	r3, r3
 802292e:	431e      	orrs	r6, r3
 8022930:	600e      	str	r6, [r1, #0]
 8022932:	cd40      	ldmia	r5!, {r6}
 8022934:	684b      	ldr	r3, [r1, #4]
 8022936:	0c36      	lsrs	r6, r6, #16
 8022938:	4346      	muls	r6, r0
 802293a:	b29b      	uxth	r3, r3
 802293c:	0c12      	lsrs	r2, r2, #16
 802293e:	18f3      	adds	r3, r6, r3
 8022940:	189b      	adds	r3, r3, r2
 8022942:	9a05      	ldr	r2, [sp, #20]
 8022944:	0c1f      	lsrs	r7, r3, #16
 8022946:	3104      	adds	r1, #4
 8022948:	42aa      	cmp	r2, r5
 802294a:	d8e7      	bhi.n	802291c <__multiply+0x110>
 802294c:	4662      	mov	r2, ip
 802294e:	9906      	ldr	r1, [sp, #24]
 8022950:	5053      	str	r3, [r2, r1]
 8022952:	9b01      	ldr	r3, [sp, #4]
 8022954:	3304      	adds	r3, #4
 8022956:	9301      	str	r3, [sp, #4]
 8022958:	2304      	movs	r3, #4
 802295a:	449c      	add	ip, r3
 802295c:	e79b      	b.n	8022896 <__multiply+0x8a>
 802295e:	9b03      	ldr	r3, [sp, #12]
 8022960:	3b01      	subs	r3, #1
 8022962:	9303      	str	r3, [sp, #12]
 8022964:	e79b      	b.n	802289e <__multiply+0x92>
 8022966:	46c0      	nop			@ (mov r8, r8)
 8022968:	08026f31 	.word	0x08026f31
 802296c:	08026fa2 	.word	0x08026fa2

08022970 <__pow5mult>:
 8022970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022972:	2303      	movs	r3, #3
 8022974:	0015      	movs	r5, r2
 8022976:	0007      	movs	r7, r0
 8022978:	000e      	movs	r6, r1
 802297a:	401a      	ands	r2, r3
 802297c:	421d      	tst	r5, r3
 802297e:	d008      	beq.n	8022992 <__pow5mult+0x22>
 8022980:	4925      	ldr	r1, [pc, #148]	@ (8022a18 <__pow5mult+0xa8>)
 8022982:	3a01      	subs	r2, #1
 8022984:	0092      	lsls	r2, r2, #2
 8022986:	5852      	ldr	r2, [r2, r1]
 8022988:	2300      	movs	r3, #0
 802298a:	0031      	movs	r1, r6
 802298c:	f7ff fe46 	bl	802261c <__multadd>
 8022990:	0006      	movs	r6, r0
 8022992:	10ad      	asrs	r5, r5, #2
 8022994:	d03d      	beq.n	8022a12 <__pow5mult+0xa2>
 8022996:	69fc      	ldr	r4, [r7, #28]
 8022998:	2c00      	cmp	r4, #0
 802299a:	d10f      	bne.n	80229bc <__pow5mult+0x4c>
 802299c:	2010      	movs	r0, #16
 802299e:	f7ff fd07 	bl	80223b0 <malloc>
 80229a2:	1e02      	subs	r2, r0, #0
 80229a4:	61f8      	str	r0, [r7, #28]
 80229a6:	d105      	bne.n	80229b4 <__pow5mult+0x44>
 80229a8:	21b4      	movs	r1, #180	@ 0xb4
 80229aa:	4b1c      	ldr	r3, [pc, #112]	@ (8022a1c <__pow5mult+0xac>)
 80229ac:	481c      	ldr	r0, [pc, #112]	@ (8022a20 <__pow5mult+0xb0>)
 80229ae:	31ff      	adds	r1, #255	@ 0xff
 80229b0:	f000 feac 	bl	802370c <__assert_func>
 80229b4:	6044      	str	r4, [r0, #4]
 80229b6:	6084      	str	r4, [r0, #8]
 80229b8:	6004      	str	r4, [r0, #0]
 80229ba:	60c4      	str	r4, [r0, #12]
 80229bc:	69fb      	ldr	r3, [r7, #28]
 80229be:	689c      	ldr	r4, [r3, #8]
 80229c0:	9301      	str	r3, [sp, #4]
 80229c2:	2c00      	cmp	r4, #0
 80229c4:	d108      	bne.n	80229d8 <__pow5mult+0x68>
 80229c6:	0038      	movs	r0, r7
 80229c8:	4916      	ldr	r1, [pc, #88]	@ (8022a24 <__pow5mult+0xb4>)
 80229ca:	f7ff ff07 	bl	80227dc <__i2b>
 80229ce:	9b01      	ldr	r3, [sp, #4]
 80229d0:	0004      	movs	r4, r0
 80229d2:	6098      	str	r0, [r3, #8]
 80229d4:	2300      	movs	r3, #0
 80229d6:	6003      	str	r3, [r0, #0]
 80229d8:	2301      	movs	r3, #1
 80229da:	421d      	tst	r5, r3
 80229dc:	d00a      	beq.n	80229f4 <__pow5mult+0x84>
 80229de:	0031      	movs	r1, r6
 80229e0:	0022      	movs	r2, r4
 80229e2:	0038      	movs	r0, r7
 80229e4:	f7ff ff12 	bl	802280c <__multiply>
 80229e8:	0031      	movs	r1, r6
 80229ea:	9001      	str	r0, [sp, #4]
 80229ec:	0038      	movs	r0, r7
 80229ee:	f7ff fdf1 	bl	80225d4 <_Bfree>
 80229f2:	9e01      	ldr	r6, [sp, #4]
 80229f4:	106d      	asrs	r5, r5, #1
 80229f6:	d00c      	beq.n	8022a12 <__pow5mult+0xa2>
 80229f8:	6820      	ldr	r0, [r4, #0]
 80229fa:	2800      	cmp	r0, #0
 80229fc:	d107      	bne.n	8022a0e <__pow5mult+0x9e>
 80229fe:	0022      	movs	r2, r4
 8022a00:	0021      	movs	r1, r4
 8022a02:	0038      	movs	r0, r7
 8022a04:	f7ff ff02 	bl	802280c <__multiply>
 8022a08:	2300      	movs	r3, #0
 8022a0a:	6020      	str	r0, [r4, #0]
 8022a0c:	6003      	str	r3, [r0, #0]
 8022a0e:	0004      	movs	r4, r0
 8022a10:	e7e2      	b.n	80229d8 <__pow5mult+0x68>
 8022a12:	0030      	movs	r0, r6
 8022a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022a16:	46c0      	nop			@ (mov r8, r8)
 8022a18:	08026ffc 	.word	0x08026ffc
 8022a1c:	08026ec2 	.word	0x08026ec2
 8022a20:	08026fa2 	.word	0x08026fa2
 8022a24:	00000271 	.word	0x00000271

08022a28 <__lshift>:
 8022a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a2a:	000c      	movs	r4, r1
 8022a2c:	0016      	movs	r6, r2
 8022a2e:	6923      	ldr	r3, [r4, #16]
 8022a30:	1157      	asrs	r7, r2, #5
 8022a32:	b085      	sub	sp, #20
 8022a34:	18fb      	adds	r3, r7, r3
 8022a36:	9301      	str	r3, [sp, #4]
 8022a38:	3301      	adds	r3, #1
 8022a3a:	9300      	str	r3, [sp, #0]
 8022a3c:	6849      	ldr	r1, [r1, #4]
 8022a3e:	68a3      	ldr	r3, [r4, #8]
 8022a40:	9002      	str	r0, [sp, #8]
 8022a42:	9a00      	ldr	r2, [sp, #0]
 8022a44:	4293      	cmp	r3, r2
 8022a46:	db10      	blt.n	8022a6a <__lshift+0x42>
 8022a48:	9802      	ldr	r0, [sp, #8]
 8022a4a:	f7ff fd7f 	bl	802254c <_Balloc>
 8022a4e:	2300      	movs	r3, #0
 8022a50:	0001      	movs	r1, r0
 8022a52:	0005      	movs	r5, r0
 8022a54:	001a      	movs	r2, r3
 8022a56:	3114      	adds	r1, #20
 8022a58:	4298      	cmp	r0, r3
 8022a5a:	d10c      	bne.n	8022a76 <__lshift+0x4e>
 8022a5c:	21ef      	movs	r1, #239	@ 0xef
 8022a5e:	002a      	movs	r2, r5
 8022a60:	4b25      	ldr	r3, [pc, #148]	@ (8022af8 <__lshift+0xd0>)
 8022a62:	4826      	ldr	r0, [pc, #152]	@ (8022afc <__lshift+0xd4>)
 8022a64:	0049      	lsls	r1, r1, #1
 8022a66:	f000 fe51 	bl	802370c <__assert_func>
 8022a6a:	3101      	adds	r1, #1
 8022a6c:	005b      	lsls	r3, r3, #1
 8022a6e:	e7e8      	b.n	8022a42 <__lshift+0x1a>
 8022a70:	0098      	lsls	r0, r3, #2
 8022a72:	500a      	str	r2, [r1, r0]
 8022a74:	3301      	adds	r3, #1
 8022a76:	42bb      	cmp	r3, r7
 8022a78:	dbfa      	blt.n	8022a70 <__lshift+0x48>
 8022a7a:	43fb      	mvns	r3, r7
 8022a7c:	17db      	asrs	r3, r3, #31
 8022a7e:	401f      	ands	r7, r3
 8022a80:	00bf      	lsls	r7, r7, #2
 8022a82:	0023      	movs	r3, r4
 8022a84:	201f      	movs	r0, #31
 8022a86:	19c9      	adds	r1, r1, r7
 8022a88:	0037      	movs	r7, r6
 8022a8a:	6922      	ldr	r2, [r4, #16]
 8022a8c:	3314      	adds	r3, #20
 8022a8e:	0092      	lsls	r2, r2, #2
 8022a90:	189a      	adds	r2, r3, r2
 8022a92:	4007      	ands	r7, r0
 8022a94:	4206      	tst	r6, r0
 8022a96:	d029      	beq.n	8022aec <__lshift+0xc4>
 8022a98:	3001      	adds	r0, #1
 8022a9a:	1bc0      	subs	r0, r0, r7
 8022a9c:	9003      	str	r0, [sp, #12]
 8022a9e:	468c      	mov	ip, r1
 8022aa0:	2000      	movs	r0, #0
 8022aa2:	681e      	ldr	r6, [r3, #0]
 8022aa4:	40be      	lsls	r6, r7
 8022aa6:	4306      	orrs	r6, r0
 8022aa8:	4660      	mov	r0, ip
 8022aaa:	c040      	stmia	r0!, {r6}
 8022aac:	4684      	mov	ip, r0
 8022aae:	9e03      	ldr	r6, [sp, #12]
 8022ab0:	cb01      	ldmia	r3!, {r0}
 8022ab2:	40f0      	lsrs	r0, r6
 8022ab4:	429a      	cmp	r2, r3
 8022ab6:	d8f4      	bhi.n	8022aa2 <__lshift+0x7a>
 8022ab8:	0026      	movs	r6, r4
 8022aba:	3615      	adds	r6, #21
 8022abc:	2304      	movs	r3, #4
 8022abe:	42b2      	cmp	r2, r6
 8022ac0:	d304      	bcc.n	8022acc <__lshift+0xa4>
 8022ac2:	1b13      	subs	r3, r2, r4
 8022ac4:	3b15      	subs	r3, #21
 8022ac6:	089b      	lsrs	r3, r3, #2
 8022ac8:	3301      	adds	r3, #1
 8022aca:	009b      	lsls	r3, r3, #2
 8022acc:	50c8      	str	r0, [r1, r3]
 8022ace:	2800      	cmp	r0, #0
 8022ad0:	d002      	beq.n	8022ad8 <__lshift+0xb0>
 8022ad2:	9b01      	ldr	r3, [sp, #4]
 8022ad4:	3302      	adds	r3, #2
 8022ad6:	9300      	str	r3, [sp, #0]
 8022ad8:	9b00      	ldr	r3, [sp, #0]
 8022ada:	9802      	ldr	r0, [sp, #8]
 8022adc:	3b01      	subs	r3, #1
 8022ade:	0021      	movs	r1, r4
 8022ae0:	612b      	str	r3, [r5, #16]
 8022ae2:	f7ff fd77 	bl	80225d4 <_Bfree>
 8022ae6:	0028      	movs	r0, r5
 8022ae8:	b005      	add	sp, #20
 8022aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022aec:	cb01      	ldmia	r3!, {r0}
 8022aee:	c101      	stmia	r1!, {r0}
 8022af0:	429a      	cmp	r2, r3
 8022af2:	d8fb      	bhi.n	8022aec <__lshift+0xc4>
 8022af4:	e7f0      	b.n	8022ad8 <__lshift+0xb0>
 8022af6:	46c0      	nop			@ (mov r8, r8)
 8022af8:	08026f31 	.word	0x08026f31
 8022afc:	08026fa2 	.word	0x08026fa2

08022b00 <__mcmp>:
 8022b00:	b530      	push	{r4, r5, lr}
 8022b02:	690b      	ldr	r3, [r1, #16]
 8022b04:	6904      	ldr	r4, [r0, #16]
 8022b06:	0002      	movs	r2, r0
 8022b08:	1ae0      	subs	r0, r4, r3
 8022b0a:	429c      	cmp	r4, r3
 8022b0c:	d10f      	bne.n	8022b2e <__mcmp+0x2e>
 8022b0e:	3214      	adds	r2, #20
 8022b10:	009b      	lsls	r3, r3, #2
 8022b12:	3114      	adds	r1, #20
 8022b14:	0014      	movs	r4, r2
 8022b16:	18c9      	adds	r1, r1, r3
 8022b18:	18d2      	adds	r2, r2, r3
 8022b1a:	3a04      	subs	r2, #4
 8022b1c:	3904      	subs	r1, #4
 8022b1e:	6815      	ldr	r5, [r2, #0]
 8022b20:	680b      	ldr	r3, [r1, #0]
 8022b22:	429d      	cmp	r5, r3
 8022b24:	d004      	beq.n	8022b30 <__mcmp+0x30>
 8022b26:	2001      	movs	r0, #1
 8022b28:	429d      	cmp	r5, r3
 8022b2a:	d200      	bcs.n	8022b2e <__mcmp+0x2e>
 8022b2c:	3802      	subs	r0, #2
 8022b2e:	bd30      	pop	{r4, r5, pc}
 8022b30:	4294      	cmp	r4, r2
 8022b32:	d3f2      	bcc.n	8022b1a <__mcmp+0x1a>
 8022b34:	e7fb      	b.n	8022b2e <__mcmp+0x2e>
	...

08022b38 <__mdiff>:
 8022b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b3a:	000c      	movs	r4, r1
 8022b3c:	b087      	sub	sp, #28
 8022b3e:	9000      	str	r0, [sp, #0]
 8022b40:	0011      	movs	r1, r2
 8022b42:	0020      	movs	r0, r4
 8022b44:	0017      	movs	r7, r2
 8022b46:	f7ff ffdb 	bl	8022b00 <__mcmp>
 8022b4a:	1e05      	subs	r5, r0, #0
 8022b4c:	d110      	bne.n	8022b70 <__mdiff+0x38>
 8022b4e:	0001      	movs	r1, r0
 8022b50:	9800      	ldr	r0, [sp, #0]
 8022b52:	f7ff fcfb 	bl	802254c <_Balloc>
 8022b56:	1e02      	subs	r2, r0, #0
 8022b58:	d104      	bne.n	8022b64 <__mdiff+0x2c>
 8022b5a:	4b40      	ldr	r3, [pc, #256]	@ (8022c5c <__mdiff+0x124>)
 8022b5c:	4840      	ldr	r0, [pc, #256]	@ (8022c60 <__mdiff+0x128>)
 8022b5e:	4941      	ldr	r1, [pc, #260]	@ (8022c64 <__mdiff+0x12c>)
 8022b60:	f000 fdd4 	bl	802370c <__assert_func>
 8022b64:	2301      	movs	r3, #1
 8022b66:	6145      	str	r5, [r0, #20]
 8022b68:	6103      	str	r3, [r0, #16]
 8022b6a:	0010      	movs	r0, r2
 8022b6c:	b007      	add	sp, #28
 8022b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b70:	2600      	movs	r6, #0
 8022b72:	42b0      	cmp	r0, r6
 8022b74:	da03      	bge.n	8022b7e <__mdiff+0x46>
 8022b76:	0023      	movs	r3, r4
 8022b78:	003c      	movs	r4, r7
 8022b7a:	001f      	movs	r7, r3
 8022b7c:	3601      	adds	r6, #1
 8022b7e:	6861      	ldr	r1, [r4, #4]
 8022b80:	9800      	ldr	r0, [sp, #0]
 8022b82:	f7ff fce3 	bl	802254c <_Balloc>
 8022b86:	1e02      	subs	r2, r0, #0
 8022b88:	d103      	bne.n	8022b92 <__mdiff+0x5a>
 8022b8a:	4b34      	ldr	r3, [pc, #208]	@ (8022c5c <__mdiff+0x124>)
 8022b8c:	4834      	ldr	r0, [pc, #208]	@ (8022c60 <__mdiff+0x128>)
 8022b8e:	4936      	ldr	r1, [pc, #216]	@ (8022c68 <__mdiff+0x130>)
 8022b90:	e7e6      	b.n	8022b60 <__mdiff+0x28>
 8022b92:	6923      	ldr	r3, [r4, #16]
 8022b94:	3414      	adds	r4, #20
 8022b96:	9300      	str	r3, [sp, #0]
 8022b98:	009b      	lsls	r3, r3, #2
 8022b9a:	18e3      	adds	r3, r4, r3
 8022b9c:	0021      	movs	r1, r4
 8022b9e:	9401      	str	r4, [sp, #4]
 8022ba0:	003c      	movs	r4, r7
 8022ba2:	9302      	str	r3, [sp, #8]
 8022ba4:	693b      	ldr	r3, [r7, #16]
 8022ba6:	3414      	adds	r4, #20
 8022ba8:	009b      	lsls	r3, r3, #2
 8022baa:	18e3      	adds	r3, r4, r3
 8022bac:	9303      	str	r3, [sp, #12]
 8022bae:	0003      	movs	r3, r0
 8022bb0:	60c6      	str	r6, [r0, #12]
 8022bb2:	468c      	mov	ip, r1
 8022bb4:	2000      	movs	r0, #0
 8022bb6:	3314      	adds	r3, #20
 8022bb8:	9304      	str	r3, [sp, #16]
 8022bba:	9305      	str	r3, [sp, #20]
 8022bbc:	4663      	mov	r3, ip
 8022bbe:	cb20      	ldmia	r3!, {r5}
 8022bc0:	b2a9      	uxth	r1, r5
 8022bc2:	000e      	movs	r6, r1
 8022bc4:	469c      	mov	ip, r3
 8022bc6:	cc08      	ldmia	r4!, {r3}
 8022bc8:	0c2d      	lsrs	r5, r5, #16
 8022bca:	b299      	uxth	r1, r3
 8022bcc:	1a71      	subs	r1, r6, r1
 8022bce:	1809      	adds	r1, r1, r0
 8022bd0:	0c1b      	lsrs	r3, r3, #16
 8022bd2:	1408      	asrs	r0, r1, #16
 8022bd4:	1aeb      	subs	r3, r5, r3
 8022bd6:	181b      	adds	r3, r3, r0
 8022bd8:	1418      	asrs	r0, r3, #16
 8022bda:	b289      	uxth	r1, r1
 8022bdc:	041b      	lsls	r3, r3, #16
 8022bde:	4319      	orrs	r1, r3
 8022be0:	9b05      	ldr	r3, [sp, #20]
 8022be2:	c302      	stmia	r3!, {r1}
 8022be4:	9305      	str	r3, [sp, #20]
 8022be6:	9b03      	ldr	r3, [sp, #12]
 8022be8:	42a3      	cmp	r3, r4
 8022bea:	d8e7      	bhi.n	8022bbc <__mdiff+0x84>
 8022bec:	0039      	movs	r1, r7
 8022bee:	9c03      	ldr	r4, [sp, #12]
 8022bf0:	3115      	adds	r1, #21
 8022bf2:	2304      	movs	r3, #4
 8022bf4:	428c      	cmp	r4, r1
 8022bf6:	d304      	bcc.n	8022c02 <__mdiff+0xca>
 8022bf8:	1be3      	subs	r3, r4, r7
 8022bfa:	3b15      	subs	r3, #21
 8022bfc:	089b      	lsrs	r3, r3, #2
 8022bfe:	3301      	adds	r3, #1
 8022c00:	009b      	lsls	r3, r3, #2
 8022c02:	9901      	ldr	r1, [sp, #4]
 8022c04:	18cd      	adds	r5, r1, r3
 8022c06:	9904      	ldr	r1, [sp, #16]
 8022c08:	002e      	movs	r6, r5
 8022c0a:	18cb      	adds	r3, r1, r3
 8022c0c:	001f      	movs	r7, r3
 8022c0e:	9902      	ldr	r1, [sp, #8]
 8022c10:	428e      	cmp	r6, r1
 8022c12:	d311      	bcc.n	8022c38 <__mdiff+0x100>
 8022c14:	9c02      	ldr	r4, [sp, #8]
 8022c16:	1ee9      	subs	r1, r5, #3
 8022c18:	2000      	movs	r0, #0
 8022c1a:	428c      	cmp	r4, r1
 8022c1c:	d304      	bcc.n	8022c28 <__mdiff+0xf0>
 8022c1e:	0021      	movs	r1, r4
 8022c20:	3103      	adds	r1, #3
 8022c22:	1b49      	subs	r1, r1, r5
 8022c24:	0889      	lsrs	r1, r1, #2
 8022c26:	0088      	lsls	r0, r1, #2
 8022c28:	181b      	adds	r3, r3, r0
 8022c2a:	3b04      	subs	r3, #4
 8022c2c:	6819      	ldr	r1, [r3, #0]
 8022c2e:	2900      	cmp	r1, #0
 8022c30:	d010      	beq.n	8022c54 <__mdiff+0x11c>
 8022c32:	9b00      	ldr	r3, [sp, #0]
 8022c34:	6113      	str	r3, [r2, #16]
 8022c36:	e798      	b.n	8022b6a <__mdiff+0x32>
 8022c38:	4684      	mov	ip, r0
 8022c3a:	ce02      	ldmia	r6!, {r1}
 8022c3c:	b288      	uxth	r0, r1
 8022c3e:	4460      	add	r0, ip
 8022c40:	1400      	asrs	r0, r0, #16
 8022c42:	0c0c      	lsrs	r4, r1, #16
 8022c44:	1904      	adds	r4, r0, r4
 8022c46:	4461      	add	r1, ip
 8022c48:	1420      	asrs	r0, r4, #16
 8022c4a:	b289      	uxth	r1, r1
 8022c4c:	0424      	lsls	r4, r4, #16
 8022c4e:	4321      	orrs	r1, r4
 8022c50:	c702      	stmia	r7!, {r1}
 8022c52:	e7dc      	b.n	8022c0e <__mdiff+0xd6>
 8022c54:	9900      	ldr	r1, [sp, #0]
 8022c56:	3901      	subs	r1, #1
 8022c58:	9100      	str	r1, [sp, #0]
 8022c5a:	e7e6      	b.n	8022c2a <__mdiff+0xf2>
 8022c5c:	08026f31 	.word	0x08026f31
 8022c60:	08026fa2 	.word	0x08026fa2
 8022c64:	00000237 	.word	0x00000237
 8022c68:	00000245 	.word	0x00000245

08022c6c <__ulp>:
 8022c6c:	b510      	push	{r4, lr}
 8022c6e:	2400      	movs	r4, #0
 8022c70:	4b0c      	ldr	r3, [pc, #48]	@ (8022ca4 <__ulp+0x38>)
 8022c72:	4a0d      	ldr	r2, [pc, #52]	@ (8022ca8 <__ulp+0x3c>)
 8022c74:	400b      	ands	r3, r1
 8022c76:	189b      	adds	r3, r3, r2
 8022c78:	42a3      	cmp	r3, r4
 8022c7a:	dc06      	bgt.n	8022c8a <__ulp+0x1e>
 8022c7c:	425b      	negs	r3, r3
 8022c7e:	151a      	asrs	r2, r3, #20
 8022c80:	2a13      	cmp	r2, #19
 8022c82:	dc05      	bgt.n	8022c90 <__ulp+0x24>
 8022c84:	2380      	movs	r3, #128	@ 0x80
 8022c86:	031b      	lsls	r3, r3, #12
 8022c88:	4113      	asrs	r3, r2
 8022c8a:	0019      	movs	r1, r3
 8022c8c:	0020      	movs	r0, r4
 8022c8e:	bd10      	pop	{r4, pc}
 8022c90:	3a14      	subs	r2, #20
 8022c92:	2401      	movs	r4, #1
 8022c94:	2a1e      	cmp	r2, #30
 8022c96:	dc02      	bgt.n	8022c9e <__ulp+0x32>
 8022c98:	2480      	movs	r4, #128	@ 0x80
 8022c9a:	0624      	lsls	r4, r4, #24
 8022c9c:	40d4      	lsrs	r4, r2
 8022c9e:	2300      	movs	r3, #0
 8022ca0:	e7f3      	b.n	8022c8a <__ulp+0x1e>
 8022ca2:	46c0      	nop			@ (mov r8, r8)
 8022ca4:	7ff00000 	.word	0x7ff00000
 8022ca8:	fcc00000 	.word	0xfcc00000

08022cac <__b2d>:
 8022cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022cae:	0006      	movs	r6, r0
 8022cb0:	6903      	ldr	r3, [r0, #16]
 8022cb2:	3614      	adds	r6, #20
 8022cb4:	009b      	lsls	r3, r3, #2
 8022cb6:	18f3      	adds	r3, r6, r3
 8022cb8:	1f1d      	subs	r5, r3, #4
 8022cba:	682c      	ldr	r4, [r5, #0]
 8022cbc:	000f      	movs	r7, r1
 8022cbe:	0020      	movs	r0, r4
 8022cc0:	9301      	str	r3, [sp, #4]
 8022cc2:	f7ff fd3b 	bl	802273c <__hi0bits>
 8022cc6:	2220      	movs	r2, #32
 8022cc8:	1a12      	subs	r2, r2, r0
 8022cca:	603a      	str	r2, [r7, #0]
 8022ccc:	0003      	movs	r3, r0
 8022cce:	4a1c      	ldr	r2, [pc, #112]	@ (8022d40 <__b2d+0x94>)
 8022cd0:	280a      	cmp	r0, #10
 8022cd2:	dc15      	bgt.n	8022d00 <__b2d+0x54>
 8022cd4:	210b      	movs	r1, #11
 8022cd6:	0027      	movs	r7, r4
 8022cd8:	1a09      	subs	r1, r1, r0
 8022cda:	40cf      	lsrs	r7, r1
 8022cdc:	433a      	orrs	r2, r7
 8022cde:	468c      	mov	ip, r1
 8022ce0:	0011      	movs	r1, r2
 8022ce2:	2200      	movs	r2, #0
 8022ce4:	42ae      	cmp	r6, r5
 8022ce6:	d202      	bcs.n	8022cee <__b2d+0x42>
 8022ce8:	9a01      	ldr	r2, [sp, #4]
 8022cea:	3a08      	subs	r2, #8
 8022cec:	6812      	ldr	r2, [r2, #0]
 8022cee:	3315      	adds	r3, #21
 8022cf0:	409c      	lsls	r4, r3
 8022cf2:	4663      	mov	r3, ip
 8022cf4:	0027      	movs	r7, r4
 8022cf6:	40da      	lsrs	r2, r3
 8022cf8:	4317      	orrs	r7, r2
 8022cfa:	0038      	movs	r0, r7
 8022cfc:	b003      	add	sp, #12
 8022cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d00:	2700      	movs	r7, #0
 8022d02:	42ae      	cmp	r6, r5
 8022d04:	d202      	bcs.n	8022d0c <__b2d+0x60>
 8022d06:	9d01      	ldr	r5, [sp, #4]
 8022d08:	3d08      	subs	r5, #8
 8022d0a:	682f      	ldr	r7, [r5, #0]
 8022d0c:	210b      	movs	r1, #11
 8022d0e:	4249      	negs	r1, r1
 8022d10:	468c      	mov	ip, r1
 8022d12:	449c      	add	ip, r3
 8022d14:	2b0b      	cmp	r3, #11
 8022d16:	d010      	beq.n	8022d3a <__b2d+0x8e>
 8022d18:	4661      	mov	r1, ip
 8022d1a:	2320      	movs	r3, #32
 8022d1c:	408c      	lsls	r4, r1
 8022d1e:	1a5b      	subs	r3, r3, r1
 8022d20:	0039      	movs	r1, r7
 8022d22:	40d9      	lsrs	r1, r3
 8022d24:	430c      	orrs	r4, r1
 8022d26:	4322      	orrs	r2, r4
 8022d28:	0011      	movs	r1, r2
 8022d2a:	2200      	movs	r2, #0
 8022d2c:	42b5      	cmp	r5, r6
 8022d2e:	d901      	bls.n	8022d34 <__b2d+0x88>
 8022d30:	3d04      	subs	r5, #4
 8022d32:	682a      	ldr	r2, [r5, #0]
 8022d34:	4664      	mov	r4, ip
 8022d36:	40a7      	lsls	r7, r4
 8022d38:	e7dd      	b.n	8022cf6 <__b2d+0x4a>
 8022d3a:	4322      	orrs	r2, r4
 8022d3c:	0011      	movs	r1, r2
 8022d3e:	e7dc      	b.n	8022cfa <__b2d+0x4e>
 8022d40:	3ff00000 	.word	0x3ff00000

08022d44 <__d2b>:
 8022d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d46:	2101      	movs	r1, #1
 8022d48:	0016      	movs	r6, r2
 8022d4a:	001f      	movs	r7, r3
 8022d4c:	f7ff fbfe 	bl	802254c <_Balloc>
 8022d50:	1e04      	subs	r4, r0, #0
 8022d52:	d105      	bne.n	8022d60 <__d2b+0x1c>
 8022d54:	0022      	movs	r2, r4
 8022d56:	4b25      	ldr	r3, [pc, #148]	@ (8022dec <__d2b+0xa8>)
 8022d58:	4825      	ldr	r0, [pc, #148]	@ (8022df0 <__d2b+0xac>)
 8022d5a:	4926      	ldr	r1, [pc, #152]	@ (8022df4 <__d2b+0xb0>)
 8022d5c:	f000 fcd6 	bl	802370c <__assert_func>
 8022d60:	033b      	lsls	r3, r7, #12
 8022d62:	007d      	lsls	r5, r7, #1
 8022d64:	0b1b      	lsrs	r3, r3, #12
 8022d66:	0d6d      	lsrs	r5, r5, #21
 8022d68:	d002      	beq.n	8022d70 <__d2b+0x2c>
 8022d6a:	2280      	movs	r2, #128	@ 0x80
 8022d6c:	0352      	lsls	r2, r2, #13
 8022d6e:	4313      	orrs	r3, r2
 8022d70:	9301      	str	r3, [sp, #4]
 8022d72:	2e00      	cmp	r6, #0
 8022d74:	d025      	beq.n	8022dc2 <__d2b+0x7e>
 8022d76:	4668      	mov	r0, sp
 8022d78:	9600      	str	r6, [sp, #0]
 8022d7a:	f7ff fd00 	bl	802277e <__lo0bits>
 8022d7e:	9b01      	ldr	r3, [sp, #4]
 8022d80:	9900      	ldr	r1, [sp, #0]
 8022d82:	2800      	cmp	r0, #0
 8022d84:	d01b      	beq.n	8022dbe <__d2b+0x7a>
 8022d86:	2220      	movs	r2, #32
 8022d88:	001e      	movs	r6, r3
 8022d8a:	1a12      	subs	r2, r2, r0
 8022d8c:	4096      	lsls	r6, r2
 8022d8e:	0032      	movs	r2, r6
 8022d90:	40c3      	lsrs	r3, r0
 8022d92:	430a      	orrs	r2, r1
 8022d94:	6162      	str	r2, [r4, #20]
 8022d96:	9301      	str	r3, [sp, #4]
 8022d98:	9e01      	ldr	r6, [sp, #4]
 8022d9a:	61a6      	str	r6, [r4, #24]
 8022d9c:	1e73      	subs	r3, r6, #1
 8022d9e:	419e      	sbcs	r6, r3
 8022da0:	3601      	adds	r6, #1
 8022da2:	6126      	str	r6, [r4, #16]
 8022da4:	2d00      	cmp	r5, #0
 8022da6:	d014      	beq.n	8022dd2 <__d2b+0x8e>
 8022da8:	2635      	movs	r6, #53	@ 0x35
 8022daa:	4b13      	ldr	r3, [pc, #76]	@ (8022df8 <__d2b+0xb4>)
 8022dac:	18ed      	adds	r5, r5, r3
 8022dae:	9b08      	ldr	r3, [sp, #32]
 8022db0:	182d      	adds	r5, r5, r0
 8022db2:	601d      	str	r5, [r3, #0]
 8022db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022db6:	1a36      	subs	r6, r6, r0
 8022db8:	601e      	str	r6, [r3, #0]
 8022dba:	0020      	movs	r0, r4
 8022dbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022dbe:	6161      	str	r1, [r4, #20]
 8022dc0:	e7ea      	b.n	8022d98 <__d2b+0x54>
 8022dc2:	a801      	add	r0, sp, #4
 8022dc4:	f7ff fcdb 	bl	802277e <__lo0bits>
 8022dc8:	9b01      	ldr	r3, [sp, #4]
 8022dca:	2601      	movs	r6, #1
 8022dcc:	6163      	str	r3, [r4, #20]
 8022dce:	3020      	adds	r0, #32
 8022dd0:	e7e7      	b.n	8022da2 <__d2b+0x5e>
 8022dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8022dfc <__d2b+0xb8>)
 8022dd4:	18c0      	adds	r0, r0, r3
 8022dd6:	9b08      	ldr	r3, [sp, #32]
 8022dd8:	6018      	str	r0, [r3, #0]
 8022dda:	4b09      	ldr	r3, [pc, #36]	@ (8022e00 <__d2b+0xbc>)
 8022ddc:	18f3      	adds	r3, r6, r3
 8022dde:	009b      	lsls	r3, r3, #2
 8022de0:	18e3      	adds	r3, r4, r3
 8022de2:	6958      	ldr	r0, [r3, #20]
 8022de4:	f7ff fcaa 	bl	802273c <__hi0bits>
 8022de8:	0176      	lsls	r6, r6, #5
 8022dea:	e7e3      	b.n	8022db4 <__d2b+0x70>
 8022dec:	08026f31 	.word	0x08026f31
 8022df0:	08026fa2 	.word	0x08026fa2
 8022df4:	0000030f 	.word	0x0000030f
 8022df8:	fffffbcd 	.word	0xfffffbcd
 8022dfc:	fffffbce 	.word	0xfffffbce
 8022e00:	3fffffff 	.word	0x3fffffff

08022e04 <__ratio>:
 8022e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e06:	b087      	sub	sp, #28
 8022e08:	000f      	movs	r7, r1
 8022e0a:	a904      	add	r1, sp, #16
 8022e0c:	0006      	movs	r6, r0
 8022e0e:	f7ff ff4d 	bl	8022cac <__b2d>
 8022e12:	9000      	str	r0, [sp, #0]
 8022e14:	9101      	str	r1, [sp, #4]
 8022e16:	9b00      	ldr	r3, [sp, #0]
 8022e18:	9c01      	ldr	r4, [sp, #4]
 8022e1a:	0038      	movs	r0, r7
 8022e1c:	a905      	add	r1, sp, #20
 8022e1e:	9302      	str	r3, [sp, #8]
 8022e20:	9403      	str	r4, [sp, #12]
 8022e22:	f7ff ff43 	bl	8022cac <__b2d>
 8022e26:	000d      	movs	r5, r1
 8022e28:	0002      	movs	r2, r0
 8022e2a:	000b      	movs	r3, r1
 8022e2c:	6930      	ldr	r0, [r6, #16]
 8022e2e:	6939      	ldr	r1, [r7, #16]
 8022e30:	9e04      	ldr	r6, [sp, #16]
 8022e32:	1a40      	subs	r0, r0, r1
 8022e34:	9905      	ldr	r1, [sp, #20]
 8022e36:	0140      	lsls	r0, r0, #5
 8022e38:	1a71      	subs	r1, r6, r1
 8022e3a:	1841      	adds	r1, r0, r1
 8022e3c:	0508      	lsls	r0, r1, #20
 8022e3e:	2900      	cmp	r1, #0
 8022e40:	dd08      	ble.n	8022e54 <__ratio+0x50>
 8022e42:	9901      	ldr	r1, [sp, #4]
 8022e44:	1841      	adds	r1, r0, r1
 8022e46:	9103      	str	r1, [sp, #12]
 8022e48:	9802      	ldr	r0, [sp, #8]
 8022e4a:	9903      	ldr	r1, [sp, #12]
 8022e4c:	f7de ffb2 	bl	8001db4 <__aeabi_ddiv>
 8022e50:	b007      	add	sp, #28
 8022e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e54:	1a2b      	subs	r3, r5, r0
 8022e56:	e7f7      	b.n	8022e48 <__ratio+0x44>

08022e58 <__copybits>:
 8022e58:	b570      	push	{r4, r5, r6, lr}
 8022e5a:	0014      	movs	r4, r2
 8022e5c:	0005      	movs	r5, r0
 8022e5e:	3901      	subs	r1, #1
 8022e60:	6913      	ldr	r3, [r2, #16]
 8022e62:	1149      	asrs	r1, r1, #5
 8022e64:	3101      	adds	r1, #1
 8022e66:	0089      	lsls	r1, r1, #2
 8022e68:	3414      	adds	r4, #20
 8022e6a:	009b      	lsls	r3, r3, #2
 8022e6c:	1841      	adds	r1, r0, r1
 8022e6e:	18e3      	adds	r3, r4, r3
 8022e70:	42a3      	cmp	r3, r4
 8022e72:	d80d      	bhi.n	8022e90 <__copybits+0x38>
 8022e74:	0014      	movs	r4, r2
 8022e76:	3411      	adds	r4, #17
 8022e78:	2500      	movs	r5, #0
 8022e7a:	429c      	cmp	r4, r3
 8022e7c:	d803      	bhi.n	8022e86 <__copybits+0x2e>
 8022e7e:	1a9b      	subs	r3, r3, r2
 8022e80:	3b11      	subs	r3, #17
 8022e82:	089b      	lsrs	r3, r3, #2
 8022e84:	009d      	lsls	r5, r3, #2
 8022e86:	2300      	movs	r3, #0
 8022e88:	1940      	adds	r0, r0, r5
 8022e8a:	4281      	cmp	r1, r0
 8022e8c:	d803      	bhi.n	8022e96 <__copybits+0x3e>
 8022e8e:	bd70      	pop	{r4, r5, r6, pc}
 8022e90:	cc40      	ldmia	r4!, {r6}
 8022e92:	c540      	stmia	r5!, {r6}
 8022e94:	e7ec      	b.n	8022e70 <__copybits+0x18>
 8022e96:	c008      	stmia	r0!, {r3}
 8022e98:	e7f7      	b.n	8022e8a <__copybits+0x32>

08022e9a <__any_on>:
 8022e9a:	0002      	movs	r2, r0
 8022e9c:	6900      	ldr	r0, [r0, #16]
 8022e9e:	b510      	push	{r4, lr}
 8022ea0:	3214      	adds	r2, #20
 8022ea2:	114b      	asrs	r3, r1, #5
 8022ea4:	4298      	cmp	r0, r3
 8022ea6:	db13      	blt.n	8022ed0 <__any_on+0x36>
 8022ea8:	dd0c      	ble.n	8022ec4 <__any_on+0x2a>
 8022eaa:	241f      	movs	r4, #31
 8022eac:	0008      	movs	r0, r1
 8022eae:	4020      	ands	r0, r4
 8022eb0:	4221      	tst	r1, r4
 8022eb2:	d007      	beq.n	8022ec4 <__any_on+0x2a>
 8022eb4:	0099      	lsls	r1, r3, #2
 8022eb6:	588c      	ldr	r4, [r1, r2]
 8022eb8:	0021      	movs	r1, r4
 8022eba:	40c1      	lsrs	r1, r0
 8022ebc:	4081      	lsls	r1, r0
 8022ebe:	2001      	movs	r0, #1
 8022ec0:	428c      	cmp	r4, r1
 8022ec2:	d104      	bne.n	8022ece <__any_on+0x34>
 8022ec4:	009b      	lsls	r3, r3, #2
 8022ec6:	18d3      	adds	r3, r2, r3
 8022ec8:	4293      	cmp	r3, r2
 8022eca:	d803      	bhi.n	8022ed4 <__any_on+0x3a>
 8022ecc:	2000      	movs	r0, #0
 8022ece:	bd10      	pop	{r4, pc}
 8022ed0:	0003      	movs	r3, r0
 8022ed2:	e7f7      	b.n	8022ec4 <__any_on+0x2a>
 8022ed4:	3b04      	subs	r3, #4
 8022ed6:	6819      	ldr	r1, [r3, #0]
 8022ed8:	2900      	cmp	r1, #0
 8022eda:	d0f5      	beq.n	8022ec8 <__any_on+0x2e>
 8022edc:	2001      	movs	r0, #1
 8022ede:	e7f6      	b.n	8022ece <__any_on+0x34>

08022ee0 <__ascii_wctomb>:
 8022ee0:	0003      	movs	r3, r0
 8022ee2:	1e08      	subs	r0, r1, #0
 8022ee4:	d005      	beq.n	8022ef2 <__ascii_wctomb+0x12>
 8022ee6:	2aff      	cmp	r2, #255	@ 0xff
 8022ee8:	d904      	bls.n	8022ef4 <__ascii_wctomb+0x14>
 8022eea:	228a      	movs	r2, #138	@ 0x8a
 8022eec:	2001      	movs	r0, #1
 8022eee:	601a      	str	r2, [r3, #0]
 8022ef0:	4240      	negs	r0, r0
 8022ef2:	4770      	bx	lr
 8022ef4:	2001      	movs	r0, #1
 8022ef6:	700a      	strb	r2, [r1, #0]
 8022ef8:	e7fb      	b.n	8022ef2 <__ascii_wctomb+0x12>
	...

08022efc <__ssputs_r>:
 8022efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022efe:	688e      	ldr	r6, [r1, #8]
 8022f00:	b085      	sub	sp, #20
 8022f02:	001f      	movs	r7, r3
 8022f04:	000c      	movs	r4, r1
 8022f06:	680b      	ldr	r3, [r1, #0]
 8022f08:	9002      	str	r0, [sp, #8]
 8022f0a:	9203      	str	r2, [sp, #12]
 8022f0c:	42be      	cmp	r6, r7
 8022f0e:	d830      	bhi.n	8022f72 <__ssputs_r+0x76>
 8022f10:	210c      	movs	r1, #12
 8022f12:	5e62      	ldrsh	r2, [r4, r1]
 8022f14:	2190      	movs	r1, #144	@ 0x90
 8022f16:	00c9      	lsls	r1, r1, #3
 8022f18:	420a      	tst	r2, r1
 8022f1a:	d028      	beq.n	8022f6e <__ssputs_r+0x72>
 8022f1c:	2003      	movs	r0, #3
 8022f1e:	6921      	ldr	r1, [r4, #16]
 8022f20:	1a5b      	subs	r3, r3, r1
 8022f22:	9301      	str	r3, [sp, #4]
 8022f24:	6963      	ldr	r3, [r4, #20]
 8022f26:	4343      	muls	r3, r0
 8022f28:	9801      	ldr	r0, [sp, #4]
 8022f2a:	0fdd      	lsrs	r5, r3, #31
 8022f2c:	18ed      	adds	r5, r5, r3
 8022f2e:	1c7b      	adds	r3, r7, #1
 8022f30:	181b      	adds	r3, r3, r0
 8022f32:	106d      	asrs	r5, r5, #1
 8022f34:	42ab      	cmp	r3, r5
 8022f36:	d900      	bls.n	8022f3a <__ssputs_r+0x3e>
 8022f38:	001d      	movs	r5, r3
 8022f3a:	0552      	lsls	r2, r2, #21
 8022f3c:	d528      	bpl.n	8022f90 <__ssputs_r+0x94>
 8022f3e:	0029      	movs	r1, r5
 8022f40:	9802      	ldr	r0, [sp, #8]
 8022f42:	f7ff fa61 	bl	8022408 <_malloc_r>
 8022f46:	1e06      	subs	r6, r0, #0
 8022f48:	d02c      	beq.n	8022fa4 <__ssputs_r+0xa8>
 8022f4a:	9a01      	ldr	r2, [sp, #4]
 8022f4c:	6921      	ldr	r1, [r4, #16]
 8022f4e:	f7fd fff9 	bl	8020f44 <memcpy>
 8022f52:	89a2      	ldrh	r2, [r4, #12]
 8022f54:	4b18      	ldr	r3, [pc, #96]	@ (8022fb8 <__ssputs_r+0xbc>)
 8022f56:	401a      	ands	r2, r3
 8022f58:	2380      	movs	r3, #128	@ 0x80
 8022f5a:	4313      	orrs	r3, r2
 8022f5c:	81a3      	strh	r3, [r4, #12]
 8022f5e:	9b01      	ldr	r3, [sp, #4]
 8022f60:	6126      	str	r6, [r4, #16]
 8022f62:	18f6      	adds	r6, r6, r3
 8022f64:	6026      	str	r6, [r4, #0]
 8022f66:	003e      	movs	r6, r7
 8022f68:	6165      	str	r5, [r4, #20]
 8022f6a:	1aed      	subs	r5, r5, r3
 8022f6c:	60a5      	str	r5, [r4, #8]
 8022f6e:	42be      	cmp	r6, r7
 8022f70:	d900      	bls.n	8022f74 <__ssputs_r+0x78>
 8022f72:	003e      	movs	r6, r7
 8022f74:	0032      	movs	r2, r6
 8022f76:	9903      	ldr	r1, [sp, #12]
 8022f78:	6820      	ldr	r0, [r4, #0]
 8022f7a:	f000 fb7e 	bl	802367a <memmove>
 8022f7e:	2000      	movs	r0, #0
 8022f80:	68a3      	ldr	r3, [r4, #8]
 8022f82:	1b9b      	subs	r3, r3, r6
 8022f84:	60a3      	str	r3, [r4, #8]
 8022f86:	6823      	ldr	r3, [r4, #0]
 8022f88:	199b      	adds	r3, r3, r6
 8022f8a:	6023      	str	r3, [r4, #0]
 8022f8c:	b005      	add	sp, #20
 8022f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f90:	002a      	movs	r2, r5
 8022f92:	9802      	ldr	r0, [sp, #8]
 8022f94:	f000 fc05 	bl	80237a2 <_realloc_r>
 8022f98:	1e06      	subs	r6, r0, #0
 8022f9a:	d1e0      	bne.n	8022f5e <__ssputs_r+0x62>
 8022f9c:	6921      	ldr	r1, [r4, #16]
 8022f9e:	9802      	ldr	r0, [sp, #8]
 8022fa0:	f7fe fe62 	bl	8021c68 <_free_r>
 8022fa4:	230c      	movs	r3, #12
 8022fa6:	2001      	movs	r0, #1
 8022fa8:	9a02      	ldr	r2, [sp, #8]
 8022faa:	4240      	negs	r0, r0
 8022fac:	6013      	str	r3, [r2, #0]
 8022fae:	89a2      	ldrh	r2, [r4, #12]
 8022fb0:	3334      	adds	r3, #52	@ 0x34
 8022fb2:	4313      	orrs	r3, r2
 8022fb4:	81a3      	strh	r3, [r4, #12]
 8022fb6:	e7e9      	b.n	8022f8c <__ssputs_r+0x90>
 8022fb8:	fffffb7f 	.word	0xfffffb7f

08022fbc <_svfiprintf_r>:
 8022fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022fbe:	b0a1      	sub	sp, #132	@ 0x84
 8022fc0:	9003      	str	r0, [sp, #12]
 8022fc2:	001d      	movs	r5, r3
 8022fc4:	898b      	ldrh	r3, [r1, #12]
 8022fc6:	000f      	movs	r7, r1
 8022fc8:	0016      	movs	r6, r2
 8022fca:	061b      	lsls	r3, r3, #24
 8022fcc:	d511      	bpl.n	8022ff2 <_svfiprintf_r+0x36>
 8022fce:	690b      	ldr	r3, [r1, #16]
 8022fd0:	2b00      	cmp	r3, #0
 8022fd2:	d10e      	bne.n	8022ff2 <_svfiprintf_r+0x36>
 8022fd4:	2140      	movs	r1, #64	@ 0x40
 8022fd6:	f7ff fa17 	bl	8022408 <_malloc_r>
 8022fda:	6038      	str	r0, [r7, #0]
 8022fdc:	6138      	str	r0, [r7, #16]
 8022fde:	2800      	cmp	r0, #0
 8022fe0:	d105      	bne.n	8022fee <_svfiprintf_r+0x32>
 8022fe2:	230c      	movs	r3, #12
 8022fe4:	9a03      	ldr	r2, [sp, #12]
 8022fe6:	6013      	str	r3, [r2, #0]
 8022fe8:	2001      	movs	r0, #1
 8022fea:	4240      	negs	r0, r0
 8022fec:	e0cf      	b.n	802318e <_svfiprintf_r+0x1d2>
 8022fee:	2340      	movs	r3, #64	@ 0x40
 8022ff0:	617b      	str	r3, [r7, #20]
 8022ff2:	2300      	movs	r3, #0
 8022ff4:	ac08      	add	r4, sp, #32
 8022ff6:	6163      	str	r3, [r4, #20]
 8022ff8:	3320      	adds	r3, #32
 8022ffa:	7663      	strb	r3, [r4, #25]
 8022ffc:	3310      	adds	r3, #16
 8022ffe:	76a3      	strb	r3, [r4, #26]
 8023000:	9507      	str	r5, [sp, #28]
 8023002:	0035      	movs	r5, r6
 8023004:	782b      	ldrb	r3, [r5, #0]
 8023006:	2b00      	cmp	r3, #0
 8023008:	d001      	beq.n	802300e <_svfiprintf_r+0x52>
 802300a:	2b25      	cmp	r3, #37	@ 0x25
 802300c:	d148      	bne.n	80230a0 <_svfiprintf_r+0xe4>
 802300e:	1bab      	subs	r3, r5, r6
 8023010:	9305      	str	r3, [sp, #20]
 8023012:	42b5      	cmp	r5, r6
 8023014:	d00b      	beq.n	802302e <_svfiprintf_r+0x72>
 8023016:	0032      	movs	r2, r6
 8023018:	0039      	movs	r1, r7
 802301a:	9803      	ldr	r0, [sp, #12]
 802301c:	f7ff ff6e 	bl	8022efc <__ssputs_r>
 8023020:	3001      	adds	r0, #1
 8023022:	d100      	bne.n	8023026 <_svfiprintf_r+0x6a>
 8023024:	e0ae      	b.n	8023184 <_svfiprintf_r+0x1c8>
 8023026:	6963      	ldr	r3, [r4, #20]
 8023028:	9a05      	ldr	r2, [sp, #20]
 802302a:	189b      	adds	r3, r3, r2
 802302c:	6163      	str	r3, [r4, #20]
 802302e:	782b      	ldrb	r3, [r5, #0]
 8023030:	2b00      	cmp	r3, #0
 8023032:	d100      	bne.n	8023036 <_svfiprintf_r+0x7a>
 8023034:	e0a6      	b.n	8023184 <_svfiprintf_r+0x1c8>
 8023036:	2201      	movs	r2, #1
 8023038:	2300      	movs	r3, #0
 802303a:	4252      	negs	r2, r2
 802303c:	6062      	str	r2, [r4, #4]
 802303e:	a904      	add	r1, sp, #16
 8023040:	3254      	adds	r2, #84	@ 0x54
 8023042:	1852      	adds	r2, r2, r1
 8023044:	1c6e      	adds	r6, r5, #1
 8023046:	6023      	str	r3, [r4, #0]
 8023048:	60e3      	str	r3, [r4, #12]
 802304a:	60a3      	str	r3, [r4, #8]
 802304c:	7013      	strb	r3, [r2, #0]
 802304e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8023050:	4b54      	ldr	r3, [pc, #336]	@ (80231a4 <_svfiprintf_r+0x1e8>)
 8023052:	2205      	movs	r2, #5
 8023054:	0018      	movs	r0, r3
 8023056:	7831      	ldrb	r1, [r6, #0]
 8023058:	9305      	str	r3, [sp, #20]
 802305a:	f7fd ff68 	bl	8020f2e <memchr>
 802305e:	1c75      	adds	r5, r6, #1
 8023060:	2800      	cmp	r0, #0
 8023062:	d11f      	bne.n	80230a4 <_svfiprintf_r+0xe8>
 8023064:	6822      	ldr	r2, [r4, #0]
 8023066:	06d3      	lsls	r3, r2, #27
 8023068:	d504      	bpl.n	8023074 <_svfiprintf_r+0xb8>
 802306a:	2353      	movs	r3, #83	@ 0x53
 802306c:	a904      	add	r1, sp, #16
 802306e:	185b      	adds	r3, r3, r1
 8023070:	2120      	movs	r1, #32
 8023072:	7019      	strb	r1, [r3, #0]
 8023074:	0713      	lsls	r3, r2, #28
 8023076:	d504      	bpl.n	8023082 <_svfiprintf_r+0xc6>
 8023078:	2353      	movs	r3, #83	@ 0x53
 802307a:	a904      	add	r1, sp, #16
 802307c:	185b      	adds	r3, r3, r1
 802307e:	212b      	movs	r1, #43	@ 0x2b
 8023080:	7019      	strb	r1, [r3, #0]
 8023082:	7833      	ldrb	r3, [r6, #0]
 8023084:	2b2a      	cmp	r3, #42	@ 0x2a
 8023086:	d016      	beq.n	80230b6 <_svfiprintf_r+0xfa>
 8023088:	0035      	movs	r5, r6
 802308a:	2100      	movs	r1, #0
 802308c:	200a      	movs	r0, #10
 802308e:	68e3      	ldr	r3, [r4, #12]
 8023090:	782a      	ldrb	r2, [r5, #0]
 8023092:	1c6e      	adds	r6, r5, #1
 8023094:	3a30      	subs	r2, #48	@ 0x30
 8023096:	2a09      	cmp	r2, #9
 8023098:	d950      	bls.n	802313c <_svfiprintf_r+0x180>
 802309a:	2900      	cmp	r1, #0
 802309c:	d111      	bne.n	80230c2 <_svfiprintf_r+0x106>
 802309e:	e017      	b.n	80230d0 <_svfiprintf_r+0x114>
 80230a0:	3501      	adds	r5, #1
 80230a2:	e7af      	b.n	8023004 <_svfiprintf_r+0x48>
 80230a4:	9b05      	ldr	r3, [sp, #20]
 80230a6:	6822      	ldr	r2, [r4, #0]
 80230a8:	1ac0      	subs	r0, r0, r3
 80230aa:	2301      	movs	r3, #1
 80230ac:	4083      	lsls	r3, r0
 80230ae:	4313      	orrs	r3, r2
 80230b0:	002e      	movs	r6, r5
 80230b2:	6023      	str	r3, [r4, #0]
 80230b4:	e7cc      	b.n	8023050 <_svfiprintf_r+0x94>
 80230b6:	9b07      	ldr	r3, [sp, #28]
 80230b8:	1d19      	adds	r1, r3, #4
 80230ba:	681b      	ldr	r3, [r3, #0]
 80230bc:	9107      	str	r1, [sp, #28]
 80230be:	2b00      	cmp	r3, #0
 80230c0:	db01      	blt.n	80230c6 <_svfiprintf_r+0x10a>
 80230c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80230c4:	e004      	b.n	80230d0 <_svfiprintf_r+0x114>
 80230c6:	425b      	negs	r3, r3
 80230c8:	60e3      	str	r3, [r4, #12]
 80230ca:	2302      	movs	r3, #2
 80230cc:	4313      	orrs	r3, r2
 80230ce:	6023      	str	r3, [r4, #0]
 80230d0:	782b      	ldrb	r3, [r5, #0]
 80230d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80230d4:	d10c      	bne.n	80230f0 <_svfiprintf_r+0x134>
 80230d6:	786b      	ldrb	r3, [r5, #1]
 80230d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80230da:	d134      	bne.n	8023146 <_svfiprintf_r+0x18a>
 80230dc:	9b07      	ldr	r3, [sp, #28]
 80230de:	3502      	adds	r5, #2
 80230e0:	1d1a      	adds	r2, r3, #4
 80230e2:	681b      	ldr	r3, [r3, #0]
 80230e4:	9207      	str	r2, [sp, #28]
 80230e6:	2b00      	cmp	r3, #0
 80230e8:	da01      	bge.n	80230ee <_svfiprintf_r+0x132>
 80230ea:	2301      	movs	r3, #1
 80230ec:	425b      	negs	r3, r3
 80230ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80230f0:	4e2d      	ldr	r6, [pc, #180]	@ (80231a8 <_svfiprintf_r+0x1ec>)
 80230f2:	2203      	movs	r2, #3
 80230f4:	0030      	movs	r0, r6
 80230f6:	7829      	ldrb	r1, [r5, #0]
 80230f8:	f7fd ff19 	bl	8020f2e <memchr>
 80230fc:	2800      	cmp	r0, #0
 80230fe:	d006      	beq.n	802310e <_svfiprintf_r+0x152>
 8023100:	2340      	movs	r3, #64	@ 0x40
 8023102:	1b80      	subs	r0, r0, r6
 8023104:	4083      	lsls	r3, r0
 8023106:	6822      	ldr	r2, [r4, #0]
 8023108:	3501      	adds	r5, #1
 802310a:	4313      	orrs	r3, r2
 802310c:	6023      	str	r3, [r4, #0]
 802310e:	7829      	ldrb	r1, [r5, #0]
 8023110:	2206      	movs	r2, #6
 8023112:	4826      	ldr	r0, [pc, #152]	@ (80231ac <_svfiprintf_r+0x1f0>)
 8023114:	1c6e      	adds	r6, r5, #1
 8023116:	7621      	strb	r1, [r4, #24]
 8023118:	f7fd ff09 	bl	8020f2e <memchr>
 802311c:	2800      	cmp	r0, #0
 802311e:	d038      	beq.n	8023192 <_svfiprintf_r+0x1d6>
 8023120:	4b23      	ldr	r3, [pc, #140]	@ (80231b0 <_svfiprintf_r+0x1f4>)
 8023122:	2b00      	cmp	r3, #0
 8023124:	d122      	bne.n	802316c <_svfiprintf_r+0x1b0>
 8023126:	2207      	movs	r2, #7
 8023128:	9b07      	ldr	r3, [sp, #28]
 802312a:	3307      	adds	r3, #7
 802312c:	4393      	bics	r3, r2
 802312e:	3308      	adds	r3, #8
 8023130:	9307      	str	r3, [sp, #28]
 8023132:	6963      	ldr	r3, [r4, #20]
 8023134:	9a04      	ldr	r2, [sp, #16]
 8023136:	189b      	adds	r3, r3, r2
 8023138:	6163      	str	r3, [r4, #20]
 802313a:	e762      	b.n	8023002 <_svfiprintf_r+0x46>
 802313c:	4343      	muls	r3, r0
 802313e:	0035      	movs	r5, r6
 8023140:	2101      	movs	r1, #1
 8023142:	189b      	adds	r3, r3, r2
 8023144:	e7a4      	b.n	8023090 <_svfiprintf_r+0xd4>
 8023146:	2300      	movs	r3, #0
 8023148:	200a      	movs	r0, #10
 802314a:	0019      	movs	r1, r3
 802314c:	3501      	adds	r5, #1
 802314e:	6063      	str	r3, [r4, #4]
 8023150:	782a      	ldrb	r2, [r5, #0]
 8023152:	1c6e      	adds	r6, r5, #1
 8023154:	3a30      	subs	r2, #48	@ 0x30
 8023156:	2a09      	cmp	r2, #9
 8023158:	d903      	bls.n	8023162 <_svfiprintf_r+0x1a6>
 802315a:	2b00      	cmp	r3, #0
 802315c:	d0c8      	beq.n	80230f0 <_svfiprintf_r+0x134>
 802315e:	9109      	str	r1, [sp, #36]	@ 0x24
 8023160:	e7c6      	b.n	80230f0 <_svfiprintf_r+0x134>
 8023162:	4341      	muls	r1, r0
 8023164:	0035      	movs	r5, r6
 8023166:	2301      	movs	r3, #1
 8023168:	1889      	adds	r1, r1, r2
 802316a:	e7f1      	b.n	8023150 <_svfiprintf_r+0x194>
 802316c:	aa07      	add	r2, sp, #28
 802316e:	9200      	str	r2, [sp, #0]
 8023170:	0021      	movs	r1, r4
 8023172:	003a      	movs	r2, r7
 8023174:	4b0f      	ldr	r3, [pc, #60]	@ (80231b4 <_svfiprintf_r+0x1f8>)
 8023176:	9803      	ldr	r0, [sp, #12]
 8023178:	f7fc ffb2 	bl	80200e0 <_printf_float>
 802317c:	9004      	str	r0, [sp, #16]
 802317e:	9b04      	ldr	r3, [sp, #16]
 8023180:	3301      	adds	r3, #1
 8023182:	d1d6      	bne.n	8023132 <_svfiprintf_r+0x176>
 8023184:	89bb      	ldrh	r3, [r7, #12]
 8023186:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023188:	065b      	lsls	r3, r3, #25
 802318a:	d500      	bpl.n	802318e <_svfiprintf_r+0x1d2>
 802318c:	e72c      	b.n	8022fe8 <_svfiprintf_r+0x2c>
 802318e:	b021      	add	sp, #132	@ 0x84
 8023190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023192:	aa07      	add	r2, sp, #28
 8023194:	9200      	str	r2, [sp, #0]
 8023196:	0021      	movs	r1, r4
 8023198:	003a      	movs	r2, r7
 802319a:	4b06      	ldr	r3, [pc, #24]	@ (80231b4 <_svfiprintf_r+0x1f8>)
 802319c:	9803      	ldr	r0, [sp, #12]
 802319e:	f7fd fa4d 	bl	802063c <_printf_i>
 80231a2:	e7eb      	b.n	802317c <_svfiprintf_r+0x1c0>
 80231a4:	080270f8 	.word	0x080270f8
 80231a8:	080270fe 	.word	0x080270fe
 80231ac:	08027102 	.word	0x08027102
 80231b0:	080200e1 	.word	0x080200e1
 80231b4:	08022efd 	.word	0x08022efd

080231b8 <__sfputc_r>:
 80231b8:	6893      	ldr	r3, [r2, #8]
 80231ba:	b510      	push	{r4, lr}
 80231bc:	3b01      	subs	r3, #1
 80231be:	6093      	str	r3, [r2, #8]
 80231c0:	2b00      	cmp	r3, #0
 80231c2:	da04      	bge.n	80231ce <__sfputc_r+0x16>
 80231c4:	6994      	ldr	r4, [r2, #24]
 80231c6:	42a3      	cmp	r3, r4
 80231c8:	db07      	blt.n	80231da <__sfputc_r+0x22>
 80231ca:	290a      	cmp	r1, #10
 80231cc:	d005      	beq.n	80231da <__sfputc_r+0x22>
 80231ce:	6813      	ldr	r3, [r2, #0]
 80231d0:	1c58      	adds	r0, r3, #1
 80231d2:	6010      	str	r0, [r2, #0]
 80231d4:	7019      	strb	r1, [r3, #0]
 80231d6:	0008      	movs	r0, r1
 80231d8:	bd10      	pop	{r4, pc}
 80231da:	f7fd fd37 	bl	8020c4c <__swbuf_r>
 80231de:	0001      	movs	r1, r0
 80231e0:	e7f9      	b.n	80231d6 <__sfputc_r+0x1e>

080231e2 <__sfputs_r>:
 80231e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231e4:	0006      	movs	r6, r0
 80231e6:	000f      	movs	r7, r1
 80231e8:	0014      	movs	r4, r2
 80231ea:	18d5      	adds	r5, r2, r3
 80231ec:	42ac      	cmp	r4, r5
 80231ee:	d101      	bne.n	80231f4 <__sfputs_r+0x12>
 80231f0:	2000      	movs	r0, #0
 80231f2:	e007      	b.n	8023204 <__sfputs_r+0x22>
 80231f4:	7821      	ldrb	r1, [r4, #0]
 80231f6:	003a      	movs	r2, r7
 80231f8:	0030      	movs	r0, r6
 80231fa:	f7ff ffdd 	bl	80231b8 <__sfputc_r>
 80231fe:	3401      	adds	r4, #1
 8023200:	1c43      	adds	r3, r0, #1
 8023202:	d1f3      	bne.n	80231ec <__sfputs_r+0xa>
 8023204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023208 <_vfiprintf_r>:
 8023208:	b5f0      	push	{r4, r5, r6, r7, lr}
 802320a:	b0a1      	sub	sp, #132	@ 0x84
 802320c:	000f      	movs	r7, r1
 802320e:	0015      	movs	r5, r2
 8023210:	001e      	movs	r6, r3
 8023212:	9003      	str	r0, [sp, #12]
 8023214:	2800      	cmp	r0, #0
 8023216:	d004      	beq.n	8023222 <_vfiprintf_r+0x1a>
 8023218:	6a03      	ldr	r3, [r0, #32]
 802321a:	2b00      	cmp	r3, #0
 802321c:	d101      	bne.n	8023222 <_vfiprintf_r+0x1a>
 802321e:	f7fd fbab 	bl	8020978 <__sinit>
 8023222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023224:	07db      	lsls	r3, r3, #31
 8023226:	d405      	bmi.n	8023234 <_vfiprintf_r+0x2c>
 8023228:	89bb      	ldrh	r3, [r7, #12]
 802322a:	059b      	lsls	r3, r3, #22
 802322c:	d402      	bmi.n	8023234 <_vfiprintf_r+0x2c>
 802322e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8023230:	f7fd fe7b 	bl	8020f2a <__retarget_lock_acquire_recursive>
 8023234:	89bb      	ldrh	r3, [r7, #12]
 8023236:	071b      	lsls	r3, r3, #28
 8023238:	d502      	bpl.n	8023240 <_vfiprintf_r+0x38>
 802323a:	693b      	ldr	r3, [r7, #16]
 802323c:	2b00      	cmp	r3, #0
 802323e:	d113      	bne.n	8023268 <_vfiprintf_r+0x60>
 8023240:	0039      	movs	r1, r7
 8023242:	9803      	ldr	r0, [sp, #12]
 8023244:	f7fd fd44 	bl	8020cd0 <__swsetup_r>
 8023248:	2800      	cmp	r0, #0
 802324a:	d00d      	beq.n	8023268 <_vfiprintf_r+0x60>
 802324c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802324e:	07db      	lsls	r3, r3, #31
 8023250:	d503      	bpl.n	802325a <_vfiprintf_r+0x52>
 8023252:	2001      	movs	r0, #1
 8023254:	4240      	negs	r0, r0
 8023256:	b021      	add	sp, #132	@ 0x84
 8023258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802325a:	89bb      	ldrh	r3, [r7, #12]
 802325c:	059b      	lsls	r3, r3, #22
 802325e:	d4f8      	bmi.n	8023252 <_vfiprintf_r+0x4a>
 8023260:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8023262:	f7fd fe63 	bl	8020f2c <__retarget_lock_release_recursive>
 8023266:	e7f4      	b.n	8023252 <_vfiprintf_r+0x4a>
 8023268:	2300      	movs	r3, #0
 802326a:	ac08      	add	r4, sp, #32
 802326c:	6163      	str	r3, [r4, #20]
 802326e:	3320      	adds	r3, #32
 8023270:	7663      	strb	r3, [r4, #25]
 8023272:	3310      	adds	r3, #16
 8023274:	76a3      	strb	r3, [r4, #26]
 8023276:	9607      	str	r6, [sp, #28]
 8023278:	002e      	movs	r6, r5
 802327a:	7833      	ldrb	r3, [r6, #0]
 802327c:	2b00      	cmp	r3, #0
 802327e:	d001      	beq.n	8023284 <_vfiprintf_r+0x7c>
 8023280:	2b25      	cmp	r3, #37	@ 0x25
 8023282:	d148      	bne.n	8023316 <_vfiprintf_r+0x10e>
 8023284:	1b73      	subs	r3, r6, r5
 8023286:	9305      	str	r3, [sp, #20]
 8023288:	42ae      	cmp	r6, r5
 802328a:	d00b      	beq.n	80232a4 <_vfiprintf_r+0x9c>
 802328c:	002a      	movs	r2, r5
 802328e:	0039      	movs	r1, r7
 8023290:	9803      	ldr	r0, [sp, #12]
 8023292:	f7ff ffa6 	bl	80231e2 <__sfputs_r>
 8023296:	3001      	adds	r0, #1
 8023298:	d100      	bne.n	802329c <_vfiprintf_r+0x94>
 802329a:	e0ae      	b.n	80233fa <_vfiprintf_r+0x1f2>
 802329c:	6963      	ldr	r3, [r4, #20]
 802329e:	9a05      	ldr	r2, [sp, #20]
 80232a0:	189b      	adds	r3, r3, r2
 80232a2:	6163      	str	r3, [r4, #20]
 80232a4:	7833      	ldrb	r3, [r6, #0]
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	d100      	bne.n	80232ac <_vfiprintf_r+0xa4>
 80232aa:	e0a6      	b.n	80233fa <_vfiprintf_r+0x1f2>
 80232ac:	2201      	movs	r2, #1
 80232ae:	2300      	movs	r3, #0
 80232b0:	4252      	negs	r2, r2
 80232b2:	6062      	str	r2, [r4, #4]
 80232b4:	a904      	add	r1, sp, #16
 80232b6:	3254      	adds	r2, #84	@ 0x54
 80232b8:	1852      	adds	r2, r2, r1
 80232ba:	1c75      	adds	r5, r6, #1
 80232bc:	6023      	str	r3, [r4, #0]
 80232be:	60e3      	str	r3, [r4, #12]
 80232c0:	60a3      	str	r3, [r4, #8]
 80232c2:	7013      	strb	r3, [r2, #0]
 80232c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80232c6:	4b59      	ldr	r3, [pc, #356]	@ (802342c <_vfiprintf_r+0x224>)
 80232c8:	2205      	movs	r2, #5
 80232ca:	0018      	movs	r0, r3
 80232cc:	7829      	ldrb	r1, [r5, #0]
 80232ce:	9305      	str	r3, [sp, #20]
 80232d0:	f7fd fe2d 	bl	8020f2e <memchr>
 80232d4:	1c6e      	adds	r6, r5, #1
 80232d6:	2800      	cmp	r0, #0
 80232d8:	d11f      	bne.n	802331a <_vfiprintf_r+0x112>
 80232da:	6822      	ldr	r2, [r4, #0]
 80232dc:	06d3      	lsls	r3, r2, #27
 80232de:	d504      	bpl.n	80232ea <_vfiprintf_r+0xe2>
 80232e0:	2353      	movs	r3, #83	@ 0x53
 80232e2:	a904      	add	r1, sp, #16
 80232e4:	185b      	adds	r3, r3, r1
 80232e6:	2120      	movs	r1, #32
 80232e8:	7019      	strb	r1, [r3, #0]
 80232ea:	0713      	lsls	r3, r2, #28
 80232ec:	d504      	bpl.n	80232f8 <_vfiprintf_r+0xf0>
 80232ee:	2353      	movs	r3, #83	@ 0x53
 80232f0:	a904      	add	r1, sp, #16
 80232f2:	185b      	adds	r3, r3, r1
 80232f4:	212b      	movs	r1, #43	@ 0x2b
 80232f6:	7019      	strb	r1, [r3, #0]
 80232f8:	782b      	ldrb	r3, [r5, #0]
 80232fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80232fc:	d016      	beq.n	802332c <_vfiprintf_r+0x124>
 80232fe:	002e      	movs	r6, r5
 8023300:	2100      	movs	r1, #0
 8023302:	200a      	movs	r0, #10
 8023304:	68e3      	ldr	r3, [r4, #12]
 8023306:	7832      	ldrb	r2, [r6, #0]
 8023308:	1c75      	adds	r5, r6, #1
 802330a:	3a30      	subs	r2, #48	@ 0x30
 802330c:	2a09      	cmp	r2, #9
 802330e:	d950      	bls.n	80233b2 <_vfiprintf_r+0x1aa>
 8023310:	2900      	cmp	r1, #0
 8023312:	d111      	bne.n	8023338 <_vfiprintf_r+0x130>
 8023314:	e017      	b.n	8023346 <_vfiprintf_r+0x13e>
 8023316:	3601      	adds	r6, #1
 8023318:	e7af      	b.n	802327a <_vfiprintf_r+0x72>
 802331a:	9b05      	ldr	r3, [sp, #20]
 802331c:	6822      	ldr	r2, [r4, #0]
 802331e:	1ac0      	subs	r0, r0, r3
 8023320:	2301      	movs	r3, #1
 8023322:	4083      	lsls	r3, r0
 8023324:	4313      	orrs	r3, r2
 8023326:	0035      	movs	r5, r6
 8023328:	6023      	str	r3, [r4, #0]
 802332a:	e7cc      	b.n	80232c6 <_vfiprintf_r+0xbe>
 802332c:	9b07      	ldr	r3, [sp, #28]
 802332e:	1d19      	adds	r1, r3, #4
 8023330:	681b      	ldr	r3, [r3, #0]
 8023332:	9107      	str	r1, [sp, #28]
 8023334:	2b00      	cmp	r3, #0
 8023336:	db01      	blt.n	802333c <_vfiprintf_r+0x134>
 8023338:	930b      	str	r3, [sp, #44]	@ 0x2c
 802333a:	e004      	b.n	8023346 <_vfiprintf_r+0x13e>
 802333c:	425b      	negs	r3, r3
 802333e:	60e3      	str	r3, [r4, #12]
 8023340:	2302      	movs	r3, #2
 8023342:	4313      	orrs	r3, r2
 8023344:	6023      	str	r3, [r4, #0]
 8023346:	7833      	ldrb	r3, [r6, #0]
 8023348:	2b2e      	cmp	r3, #46	@ 0x2e
 802334a:	d10c      	bne.n	8023366 <_vfiprintf_r+0x15e>
 802334c:	7873      	ldrb	r3, [r6, #1]
 802334e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023350:	d134      	bne.n	80233bc <_vfiprintf_r+0x1b4>
 8023352:	9b07      	ldr	r3, [sp, #28]
 8023354:	3602      	adds	r6, #2
 8023356:	1d1a      	adds	r2, r3, #4
 8023358:	681b      	ldr	r3, [r3, #0]
 802335a:	9207      	str	r2, [sp, #28]
 802335c:	2b00      	cmp	r3, #0
 802335e:	da01      	bge.n	8023364 <_vfiprintf_r+0x15c>
 8023360:	2301      	movs	r3, #1
 8023362:	425b      	negs	r3, r3
 8023364:	9309      	str	r3, [sp, #36]	@ 0x24
 8023366:	4d32      	ldr	r5, [pc, #200]	@ (8023430 <_vfiprintf_r+0x228>)
 8023368:	2203      	movs	r2, #3
 802336a:	0028      	movs	r0, r5
 802336c:	7831      	ldrb	r1, [r6, #0]
 802336e:	f7fd fdde 	bl	8020f2e <memchr>
 8023372:	2800      	cmp	r0, #0
 8023374:	d006      	beq.n	8023384 <_vfiprintf_r+0x17c>
 8023376:	2340      	movs	r3, #64	@ 0x40
 8023378:	1b40      	subs	r0, r0, r5
 802337a:	4083      	lsls	r3, r0
 802337c:	6822      	ldr	r2, [r4, #0]
 802337e:	3601      	adds	r6, #1
 8023380:	4313      	orrs	r3, r2
 8023382:	6023      	str	r3, [r4, #0]
 8023384:	7831      	ldrb	r1, [r6, #0]
 8023386:	2206      	movs	r2, #6
 8023388:	482a      	ldr	r0, [pc, #168]	@ (8023434 <_vfiprintf_r+0x22c>)
 802338a:	1c75      	adds	r5, r6, #1
 802338c:	7621      	strb	r1, [r4, #24]
 802338e:	f7fd fdce 	bl	8020f2e <memchr>
 8023392:	2800      	cmp	r0, #0
 8023394:	d040      	beq.n	8023418 <_vfiprintf_r+0x210>
 8023396:	4b28      	ldr	r3, [pc, #160]	@ (8023438 <_vfiprintf_r+0x230>)
 8023398:	2b00      	cmp	r3, #0
 802339a:	d122      	bne.n	80233e2 <_vfiprintf_r+0x1da>
 802339c:	2207      	movs	r2, #7
 802339e:	9b07      	ldr	r3, [sp, #28]
 80233a0:	3307      	adds	r3, #7
 80233a2:	4393      	bics	r3, r2
 80233a4:	3308      	adds	r3, #8
 80233a6:	9307      	str	r3, [sp, #28]
 80233a8:	6963      	ldr	r3, [r4, #20]
 80233aa:	9a04      	ldr	r2, [sp, #16]
 80233ac:	189b      	adds	r3, r3, r2
 80233ae:	6163      	str	r3, [r4, #20]
 80233b0:	e762      	b.n	8023278 <_vfiprintf_r+0x70>
 80233b2:	4343      	muls	r3, r0
 80233b4:	002e      	movs	r6, r5
 80233b6:	2101      	movs	r1, #1
 80233b8:	189b      	adds	r3, r3, r2
 80233ba:	e7a4      	b.n	8023306 <_vfiprintf_r+0xfe>
 80233bc:	2300      	movs	r3, #0
 80233be:	200a      	movs	r0, #10
 80233c0:	0019      	movs	r1, r3
 80233c2:	3601      	adds	r6, #1
 80233c4:	6063      	str	r3, [r4, #4]
 80233c6:	7832      	ldrb	r2, [r6, #0]
 80233c8:	1c75      	adds	r5, r6, #1
 80233ca:	3a30      	subs	r2, #48	@ 0x30
 80233cc:	2a09      	cmp	r2, #9
 80233ce:	d903      	bls.n	80233d8 <_vfiprintf_r+0x1d0>
 80233d0:	2b00      	cmp	r3, #0
 80233d2:	d0c8      	beq.n	8023366 <_vfiprintf_r+0x15e>
 80233d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80233d6:	e7c6      	b.n	8023366 <_vfiprintf_r+0x15e>
 80233d8:	4341      	muls	r1, r0
 80233da:	002e      	movs	r6, r5
 80233dc:	2301      	movs	r3, #1
 80233de:	1889      	adds	r1, r1, r2
 80233e0:	e7f1      	b.n	80233c6 <_vfiprintf_r+0x1be>
 80233e2:	aa07      	add	r2, sp, #28
 80233e4:	9200      	str	r2, [sp, #0]
 80233e6:	0021      	movs	r1, r4
 80233e8:	003a      	movs	r2, r7
 80233ea:	4b14      	ldr	r3, [pc, #80]	@ (802343c <_vfiprintf_r+0x234>)
 80233ec:	9803      	ldr	r0, [sp, #12]
 80233ee:	f7fc fe77 	bl	80200e0 <_printf_float>
 80233f2:	9004      	str	r0, [sp, #16]
 80233f4:	9b04      	ldr	r3, [sp, #16]
 80233f6:	3301      	adds	r3, #1
 80233f8:	d1d6      	bne.n	80233a8 <_vfiprintf_r+0x1a0>
 80233fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80233fc:	07db      	lsls	r3, r3, #31
 80233fe:	d405      	bmi.n	802340c <_vfiprintf_r+0x204>
 8023400:	89bb      	ldrh	r3, [r7, #12]
 8023402:	059b      	lsls	r3, r3, #22
 8023404:	d402      	bmi.n	802340c <_vfiprintf_r+0x204>
 8023406:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8023408:	f7fd fd90 	bl	8020f2c <__retarget_lock_release_recursive>
 802340c:	89bb      	ldrh	r3, [r7, #12]
 802340e:	065b      	lsls	r3, r3, #25
 8023410:	d500      	bpl.n	8023414 <_vfiprintf_r+0x20c>
 8023412:	e71e      	b.n	8023252 <_vfiprintf_r+0x4a>
 8023414:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023416:	e71e      	b.n	8023256 <_vfiprintf_r+0x4e>
 8023418:	aa07      	add	r2, sp, #28
 802341a:	9200      	str	r2, [sp, #0]
 802341c:	0021      	movs	r1, r4
 802341e:	003a      	movs	r2, r7
 8023420:	4b06      	ldr	r3, [pc, #24]	@ (802343c <_vfiprintf_r+0x234>)
 8023422:	9803      	ldr	r0, [sp, #12]
 8023424:	f7fd f90a 	bl	802063c <_printf_i>
 8023428:	e7e3      	b.n	80233f2 <_vfiprintf_r+0x1ea>
 802342a:	46c0      	nop			@ (mov r8, r8)
 802342c:	080270f8 	.word	0x080270f8
 8023430:	080270fe 	.word	0x080270fe
 8023434:	08027102 	.word	0x08027102
 8023438:	080200e1 	.word	0x080200e1
 802343c:	080231e3 	.word	0x080231e3

08023440 <__sflush_r>:
 8023440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023442:	220c      	movs	r2, #12
 8023444:	5e8b      	ldrsh	r3, [r1, r2]
 8023446:	0005      	movs	r5, r0
 8023448:	000c      	movs	r4, r1
 802344a:	071a      	lsls	r2, r3, #28
 802344c:	d456      	bmi.n	80234fc <__sflush_r+0xbc>
 802344e:	684a      	ldr	r2, [r1, #4]
 8023450:	2a00      	cmp	r2, #0
 8023452:	dc02      	bgt.n	802345a <__sflush_r+0x1a>
 8023454:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8023456:	2a00      	cmp	r2, #0
 8023458:	dd4e      	ble.n	80234f8 <__sflush_r+0xb8>
 802345a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 802345c:	2f00      	cmp	r7, #0
 802345e:	d04b      	beq.n	80234f8 <__sflush_r+0xb8>
 8023460:	2200      	movs	r2, #0
 8023462:	2080      	movs	r0, #128	@ 0x80
 8023464:	682e      	ldr	r6, [r5, #0]
 8023466:	602a      	str	r2, [r5, #0]
 8023468:	001a      	movs	r2, r3
 802346a:	0140      	lsls	r0, r0, #5
 802346c:	6a21      	ldr	r1, [r4, #32]
 802346e:	4002      	ands	r2, r0
 8023470:	4203      	tst	r3, r0
 8023472:	d033      	beq.n	80234dc <__sflush_r+0x9c>
 8023474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023476:	89a3      	ldrh	r3, [r4, #12]
 8023478:	075b      	lsls	r3, r3, #29
 802347a:	d506      	bpl.n	802348a <__sflush_r+0x4a>
 802347c:	6863      	ldr	r3, [r4, #4]
 802347e:	1ad2      	subs	r2, r2, r3
 8023480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023482:	2b00      	cmp	r3, #0
 8023484:	d001      	beq.n	802348a <__sflush_r+0x4a>
 8023486:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023488:	1ad2      	subs	r2, r2, r3
 802348a:	2300      	movs	r3, #0
 802348c:	0028      	movs	r0, r5
 802348e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8023490:	6a21      	ldr	r1, [r4, #32]
 8023492:	47b8      	blx	r7
 8023494:	89a2      	ldrh	r2, [r4, #12]
 8023496:	1c43      	adds	r3, r0, #1
 8023498:	d106      	bne.n	80234a8 <__sflush_r+0x68>
 802349a:	6829      	ldr	r1, [r5, #0]
 802349c:	291d      	cmp	r1, #29
 802349e:	d846      	bhi.n	802352e <__sflush_r+0xee>
 80234a0:	4b29      	ldr	r3, [pc, #164]	@ (8023548 <__sflush_r+0x108>)
 80234a2:	410b      	asrs	r3, r1
 80234a4:	07db      	lsls	r3, r3, #31
 80234a6:	d442      	bmi.n	802352e <__sflush_r+0xee>
 80234a8:	2300      	movs	r3, #0
 80234aa:	6063      	str	r3, [r4, #4]
 80234ac:	6923      	ldr	r3, [r4, #16]
 80234ae:	6023      	str	r3, [r4, #0]
 80234b0:	04d2      	lsls	r2, r2, #19
 80234b2:	d505      	bpl.n	80234c0 <__sflush_r+0x80>
 80234b4:	1c43      	adds	r3, r0, #1
 80234b6:	d102      	bne.n	80234be <__sflush_r+0x7e>
 80234b8:	682b      	ldr	r3, [r5, #0]
 80234ba:	2b00      	cmp	r3, #0
 80234bc:	d100      	bne.n	80234c0 <__sflush_r+0x80>
 80234be:	6560      	str	r0, [r4, #84]	@ 0x54
 80234c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80234c2:	602e      	str	r6, [r5, #0]
 80234c4:	2900      	cmp	r1, #0
 80234c6:	d017      	beq.n	80234f8 <__sflush_r+0xb8>
 80234c8:	0023      	movs	r3, r4
 80234ca:	3344      	adds	r3, #68	@ 0x44
 80234cc:	4299      	cmp	r1, r3
 80234ce:	d002      	beq.n	80234d6 <__sflush_r+0x96>
 80234d0:	0028      	movs	r0, r5
 80234d2:	f7fe fbc9 	bl	8021c68 <_free_r>
 80234d6:	2300      	movs	r3, #0
 80234d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80234da:	e00d      	b.n	80234f8 <__sflush_r+0xb8>
 80234dc:	2301      	movs	r3, #1
 80234de:	0028      	movs	r0, r5
 80234e0:	47b8      	blx	r7
 80234e2:	0002      	movs	r2, r0
 80234e4:	1c43      	adds	r3, r0, #1
 80234e6:	d1c6      	bne.n	8023476 <__sflush_r+0x36>
 80234e8:	682b      	ldr	r3, [r5, #0]
 80234ea:	2b00      	cmp	r3, #0
 80234ec:	d0c3      	beq.n	8023476 <__sflush_r+0x36>
 80234ee:	2b1d      	cmp	r3, #29
 80234f0:	d001      	beq.n	80234f6 <__sflush_r+0xb6>
 80234f2:	2b16      	cmp	r3, #22
 80234f4:	d11a      	bne.n	802352c <__sflush_r+0xec>
 80234f6:	602e      	str	r6, [r5, #0]
 80234f8:	2000      	movs	r0, #0
 80234fa:	e01e      	b.n	802353a <__sflush_r+0xfa>
 80234fc:	690e      	ldr	r6, [r1, #16]
 80234fe:	2e00      	cmp	r6, #0
 8023500:	d0fa      	beq.n	80234f8 <__sflush_r+0xb8>
 8023502:	680f      	ldr	r7, [r1, #0]
 8023504:	600e      	str	r6, [r1, #0]
 8023506:	1bba      	subs	r2, r7, r6
 8023508:	9201      	str	r2, [sp, #4]
 802350a:	2200      	movs	r2, #0
 802350c:	079b      	lsls	r3, r3, #30
 802350e:	d100      	bne.n	8023512 <__sflush_r+0xd2>
 8023510:	694a      	ldr	r2, [r1, #20]
 8023512:	60a2      	str	r2, [r4, #8]
 8023514:	9b01      	ldr	r3, [sp, #4]
 8023516:	2b00      	cmp	r3, #0
 8023518:	ddee      	ble.n	80234f8 <__sflush_r+0xb8>
 802351a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802351c:	0032      	movs	r2, r6
 802351e:	001f      	movs	r7, r3
 8023520:	0028      	movs	r0, r5
 8023522:	9b01      	ldr	r3, [sp, #4]
 8023524:	6a21      	ldr	r1, [r4, #32]
 8023526:	47b8      	blx	r7
 8023528:	2800      	cmp	r0, #0
 802352a:	dc07      	bgt.n	802353c <__sflush_r+0xfc>
 802352c:	89a2      	ldrh	r2, [r4, #12]
 802352e:	2340      	movs	r3, #64	@ 0x40
 8023530:	2001      	movs	r0, #1
 8023532:	4313      	orrs	r3, r2
 8023534:	b21b      	sxth	r3, r3
 8023536:	81a3      	strh	r3, [r4, #12]
 8023538:	4240      	negs	r0, r0
 802353a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802353c:	9b01      	ldr	r3, [sp, #4]
 802353e:	1836      	adds	r6, r6, r0
 8023540:	1a1b      	subs	r3, r3, r0
 8023542:	9301      	str	r3, [sp, #4]
 8023544:	e7e6      	b.n	8023514 <__sflush_r+0xd4>
 8023546:	46c0      	nop			@ (mov r8, r8)
 8023548:	dfbffffe 	.word	0xdfbffffe

0802354c <_fflush_r>:
 802354c:	690b      	ldr	r3, [r1, #16]
 802354e:	b570      	push	{r4, r5, r6, lr}
 8023550:	0005      	movs	r5, r0
 8023552:	000c      	movs	r4, r1
 8023554:	2b00      	cmp	r3, #0
 8023556:	d102      	bne.n	802355e <_fflush_r+0x12>
 8023558:	2500      	movs	r5, #0
 802355a:	0028      	movs	r0, r5
 802355c:	bd70      	pop	{r4, r5, r6, pc}
 802355e:	2800      	cmp	r0, #0
 8023560:	d004      	beq.n	802356c <_fflush_r+0x20>
 8023562:	6a03      	ldr	r3, [r0, #32]
 8023564:	2b00      	cmp	r3, #0
 8023566:	d101      	bne.n	802356c <_fflush_r+0x20>
 8023568:	f7fd fa06 	bl	8020978 <__sinit>
 802356c:	220c      	movs	r2, #12
 802356e:	5ea3      	ldrsh	r3, [r4, r2]
 8023570:	2b00      	cmp	r3, #0
 8023572:	d0f1      	beq.n	8023558 <_fflush_r+0xc>
 8023574:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023576:	07d2      	lsls	r2, r2, #31
 8023578:	d404      	bmi.n	8023584 <_fflush_r+0x38>
 802357a:	059b      	lsls	r3, r3, #22
 802357c:	d402      	bmi.n	8023584 <_fflush_r+0x38>
 802357e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023580:	f7fd fcd3 	bl	8020f2a <__retarget_lock_acquire_recursive>
 8023584:	0028      	movs	r0, r5
 8023586:	0021      	movs	r1, r4
 8023588:	f7ff ff5a 	bl	8023440 <__sflush_r>
 802358c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802358e:	0005      	movs	r5, r0
 8023590:	07db      	lsls	r3, r3, #31
 8023592:	d4e2      	bmi.n	802355a <_fflush_r+0xe>
 8023594:	89a3      	ldrh	r3, [r4, #12]
 8023596:	059b      	lsls	r3, r3, #22
 8023598:	d4df      	bmi.n	802355a <_fflush_r+0xe>
 802359a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802359c:	f7fd fcc6 	bl	8020f2c <__retarget_lock_release_recursive>
 80235a0:	e7db      	b.n	802355a <_fflush_r+0xe>
	...

080235a4 <__swhatbuf_r>:
 80235a4:	b570      	push	{r4, r5, r6, lr}
 80235a6:	000e      	movs	r6, r1
 80235a8:	001d      	movs	r5, r3
 80235aa:	230e      	movs	r3, #14
 80235ac:	5ec9      	ldrsh	r1, [r1, r3]
 80235ae:	0014      	movs	r4, r2
 80235b0:	b096      	sub	sp, #88	@ 0x58
 80235b2:	2900      	cmp	r1, #0
 80235b4:	da0c      	bge.n	80235d0 <__swhatbuf_r+0x2c>
 80235b6:	89b2      	ldrh	r2, [r6, #12]
 80235b8:	2380      	movs	r3, #128	@ 0x80
 80235ba:	0011      	movs	r1, r2
 80235bc:	4019      	ands	r1, r3
 80235be:	421a      	tst	r2, r3
 80235c0:	d114      	bne.n	80235ec <__swhatbuf_r+0x48>
 80235c2:	2380      	movs	r3, #128	@ 0x80
 80235c4:	00db      	lsls	r3, r3, #3
 80235c6:	2000      	movs	r0, #0
 80235c8:	6029      	str	r1, [r5, #0]
 80235ca:	6023      	str	r3, [r4, #0]
 80235cc:	b016      	add	sp, #88	@ 0x58
 80235ce:	bd70      	pop	{r4, r5, r6, pc}
 80235d0:	466a      	mov	r2, sp
 80235d2:	f000 f865 	bl	80236a0 <_fstat_r>
 80235d6:	2800      	cmp	r0, #0
 80235d8:	dbed      	blt.n	80235b6 <__swhatbuf_r+0x12>
 80235da:	23f0      	movs	r3, #240	@ 0xf0
 80235dc:	9901      	ldr	r1, [sp, #4]
 80235de:	021b      	lsls	r3, r3, #8
 80235e0:	4019      	ands	r1, r3
 80235e2:	4b04      	ldr	r3, [pc, #16]	@ (80235f4 <__swhatbuf_r+0x50>)
 80235e4:	18c9      	adds	r1, r1, r3
 80235e6:	424b      	negs	r3, r1
 80235e8:	4159      	adcs	r1, r3
 80235ea:	e7ea      	b.n	80235c2 <__swhatbuf_r+0x1e>
 80235ec:	2100      	movs	r1, #0
 80235ee:	2340      	movs	r3, #64	@ 0x40
 80235f0:	e7e9      	b.n	80235c6 <__swhatbuf_r+0x22>
 80235f2:	46c0      	nop			@ (mov r8, r8)
 80235f4:	ffffe000 	.word	0xffffe000

080235f8 <__smakebuf_r>:
 80235f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80235fa:	2602      	movs	r6, #2
 80235fc:	898b      	ldrh	r3, [r1, #12]
 80235fe:	0005      	movs	r5, r0
 8023600:	000c      	movs	r4, r1
 8023602:	b085      	sub	sp, #20
 8023604:	4233      	tst	r3, r6
 8023606:	d007      	beq.n	8023618 <__smakebuf_r+0x20>
 8023608:	0023      	movs	r3, r4
 802360a:	3347      	adds	r3, #71	@ 0x47
 802360c:	6023      	str	r3, [r4, #0]
 802360e:	6123      	str	r3, [r4, #16]
 8023610:	2301      	movs	r3, #1
 8023612:	6163      	str	r3, [r4, #20]
 8023614:	b005      	add	sp, #20
 8023616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023618:	ab03      	add	r3, sp, #12
 802361a:	aa02      	add	r2, sp, #8
 802361c:	f7ff ffc2 	bl	80235a4 <__swhatbuf_r>
 8023620:	9f02      	ldr	r7, [sp, #8]
 8023622:	9001      	str	r0, [sp, #4]
 8023624:	0039      	movs	r1, r7
 8023626:	0028      	movs	r0, r5
 8023628:	f7fe feee 	bl	8022408 <_malloc_r>
 802362c:	2800      	cmp	r0, #0
 802362e:	d108      	bne.n	8023642 <__smakebuf_r+0x4a>
 8023630:	220c      	movs	r2, #12
 8023632:	5ea3      	ldrsh	r3, [r4, r2]
 8023634:	059a      	lsls	r2, r3, #22
 8023636:	d4ed      	bmi.n	8023614 <__smakebuf_r+0x1c>
 8023638:	2203      	movs	r2, #3
 802363a:	4393      	bics	r3, r2
 802363c:	431e      	orrs	r6, r3
 802363e:	81a6      	strh	r6, [r4, #12]
 8023640:	e7e2      	b.n	8023608 <__smakebuf_r+0x10>
 8023642:	2380      	movs	r3, #128	@ 0x80
 8023644:	89a2      	ldrh	r2, [r4, #12]
 8023646:	6020      	str	r0, [r4, #0]
 8023648:	4313      	orrs	r3, r2
 802364a:	81a3      	strh	r3, [r4, #12]
 802364c:	9b03      	ldr	r3, [sp, #12]
 802364e:	6120      	str	r0, [r4, #16]
 8023650:	6167      	str	r7, [r4, #20]
 8023652:	2b00      	cmp	r3, #0
 8023654:	d00c      	beq.n	8023670 <__smakebuf_r+0x78>
 8023656:	0028      	movs	r0, r5
 8023658:	230e      	movs	r3, #14
 802365a:	5ee1      	ldrsh	r1, [r4, r3]
 802365c:	f000 f832 	bl	80236c4 <_isatty_r>
 8023660:	2800      	cmp	r0, #0
 8023662:	d005      	beq.n	8023670 <__smakebuf_r+0x78>
 8023664:	2303      	movs	r3, #3
 8023666:	89a2      	ldrh	r2, [r4, #12]
 8023668:	439a      	bics	r2, r3
 802366a:	3b02      	subs	r3, #2
 802366c:	4313      	orrs	r3, r2
 802366e:	81a3      	strh	r3, [r4, #12]
 8023670:	89a3      	ldrh	r3, [r4, #12]
 8023672:	9a01      	ldr	r2, [sp, #4]
 8023674:	4313      	orrs	r3, r2
 8023676:	81a3      	strh	r3, [r4, #12]
 8023678:	e7cc      	b.n	8023614 <__smakebuf_r+0x1c>

0802367a <memmove>:
 802367a:	b510      	push	{r4, lr}
 802367c:	4288      	cmp	r0, r1
 802367e:	d806      	bhi.n	802368e <memmove+0x14>
 8023680:	2300      	movs	r3, #0
 8023682:	429a      	cmp	r2, r3
 8023684:	d008      	beq.n	8023698 <memmove+0x1e>
 8023686:	5ccc      	ldrb	r4, [r1, r3]
 8023688:	54c4      	strb	r4, [r0, r3]
 802368a:	3301      	adds	r3, #1
 802368c:	e7f9      	b.n	8023682 <memmove+0x8>
 802368e:	188b      	adds	r3, r1, r2
 8023690:	4298      	cmp	r0, r3
 8023692:	d2f5      	bcs.n	8023680 <memmove+0x6>
 8023694:	3a01      	subs	r2, #1
 8023696:	d200      	bcs.n	802369a <memmove+0x20>
 8023698:	bd10      	pop	{r4, pc}
 802369a:	5c8b      	ldrb	r3, [r1, r2]
 802369c:	5483      	strb	r3, [r0, r2]
 802369e:	e7f9      	b.n	8023694 <memmove+0x1a>

080236a0 <_fstat_r>:
 80236a0:	2300      	movs	r3, #0
 80236a2:	b570      	push	{r4, r5, r6, lr}
 80236a4:	4d06      	ldr	r5, [pc, #24]	@ (80236c0 <_fstat_r+0x20>)
 80236a6:	0004      	movs	r4, r0
 80236a8:	0008      	movs	r0, r1
 80236aa:	0011      	movs	r1, r2
 80236ac:	602b      	str	r3, [r5, #0]
 80236ae:	f7eb f85b 	bl	800e768 <_fstat>
 80236b2:	1c43      	adds	r3, r0, #1
 80236b4:	d103      	bne.n	80236be <_fstat_r+0x1e>
 80236b6:	682b      	ldr	r3, [r5, #0]
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	d000      	beq.n	80236be <_fstat_r+0x1e>
 80236bc:	6023      	str	r3, [r4, #0]
 80236be:	bd70      	pop	{r4, r5, r6, pc}
 80236c0:	200034ec 	.word	0x200034ec

080236c4 <_isatty_r>:
 80236c4:	2300      	movs	r3, #0
 80236c6:	b570      	push	{r4, r5, r6, lr}
 80236c8:	4d06      	ldr	r5, [pc, #24]	@ (80236e4 <_isatty_r+0x20>)
 80236ca:	0004      	movs	r4, r0
 80236cc:	0008      	movs	r0, r1
 80236ce:	602b      	str	r3, [r5, #0]
 80236d0:	f7eb f858 	bl	800e784 <_isatty>
 80236d4:	1c43      	adds	r3, r0, #1
 80236d6:	d103      	bne.n	80236e0 <_isatty_r+0x1c>
 80236d8:	682b      	ldr	r3, [r5, #0]
 80236da:	2b00      	cmp	r3, #0
 80236dc:	d000      	beq.n	80236e0 <_isatty_r+0x1c>
 80236de:	6023      	str	r3, [r4, #0]
 80236e0:	bd70      	pop	{r4, r5, r6, pc}
 80236e2:	46c0      	nop			@ (mov r8, r8)
 80236e4:	200034ec 	.word	0x200034ec

080236e8 <_sbrk_r>:
 80236e8:	2300      	movs	r3, #0
 80236ea:	b570      	push	{r4, r5, r6, lr}
 80236ec:	4d06      	ldr	r5, [pc, #24]	@ (8023708 <_sbrk_r+0x20>)
 80236ee:	0004      	movs	r4, r0
 80236f0:	0008      	movs	r0, r1
 80236f2:	602b      	str	r3, [r5, #0]
 80236f4:	f7eb f85a 	bl	800e7ac <_sbrk>
 80236f8:	1c43      	adds	r3, r0, #1
 80236fa:	d103      	bne.n	8023704 <_sbrk_r+0x1c>
 80236fc:	682b      	ldr	r3, [r5, #0]
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d000      	beq.n	8023704 <_sbrk_r+0x1c>
 8023702:	6023      	str	r3, [r4, #0]
 8023704:	bd70      	pop	{r4, r5, r6, pc}
 8023706:	46c0      	nop			@ (mov r8, r8)
 8023708:	200034ec 	.word	0x200034ec

0802370c <__assert_func>:
 802370c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802370e:	0014      	movs	r4, r2
 8023710:	001a      	movs	r2, r3
 8023712:	4b09      	ldr	r3, [pc, #36]	@ (8023738 <__assert_func+0x2c>)
 8023714:	0005      	movs	r5, r0
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	000e      	movs	r6, r1
 802371a:	68d8      	ldr	r0, [r3, #12]
 802371c:	4b07      	ldr	r3, [pc, #28]	@ (802373c <__assert_func+0x30>)
 802371e:	2c00      	cmp	r4, #0
 8023720:	d101      	bne.n	8023726 <__assert_func+0x1a>
 8023722:	4b07      	ldr	r3, [pc, #28]	@ (8023740 <__assert_func+0x34>)
 8023724:	001c      	movs	r4, r3
 8023726:	4907      	ldr	r1, [pc, #28]	@ (8023744 <__assert_func+0x38>)
 8023728:	9301      	str	r3, [sp, #4]
 802372a:	9402      	str	r4, [sp, #8]
 802372c:	002b      	movs	r3, r5
 802372e:	9600      	str	r6, [sp, #0]
 8023730:	f000 f866 	bl	8023800 <fiprintf>
 8023734:	f000 f874 	bl	8023820 <abort>
 8023738:	200003cc 	.word	0x200003cc
 802373c:	08027109 	.word	0x08027109
 8023740:	08027144 	.word	0x08027144
 8023744:	08027116 	.word	0x08027116

08023748 <_calloc_r>:
 8023748:	b570      	push	{r4, r5, r6, lr}
 802374a:	0c0b      	lsrs	r3, r1, #16
 802374c:	0c15      	lsrs	r5, r2, #16
 802374e:	2b00      	cmp	r3, #0
 8023750:	d11e      	bne.n	8023790 <_calloc_r+0x48>
 8023752:	2d00      	cmp	r5, #0
 8023754:	d10c      	bne.n	8023770 <_calloc_r+0x28>
 8023756:	b289      	uxth	r1, r1
 8023758:	b294      	uxth	r4, r2
 802375a:	434c      	muls	r4, r1
 802375c:	0021      	movs	r1, r4
 802375e:	f7fe fe53 	bl	8022408 <_malloc_r>
 8023762:	1e05      	subs	r5, r0, #0
 8023764:	d01a      	beq.n	802379c <_calloc_r+0x54>
 8023766:	0022      	movs	r2, r4
 8023768:	2100      	movs	r1, #0
 802376a:	f7fd fb0f 	bl	8020d8c <memset>
 802376e:	e016      	b.n	802379e <_calloc_r+0x56>
 8023770:	1c2b      	adds	r3, r5, #0
 8023772:	1c0c      	adds	r4, r1, #0
 8023774:	b289      	uxth	r1, r1
 8023776:	b292      	uxth	r2, r2
 8023778:	434a      	muls	r2, r1
 802377a:	b29b      	uxth	r3, r3
 802377c:	b2a1      	uxth	r1, r4
 802377e:	4359      	muls	r1, r3
 8023780:	0c14      	lsrs	r4, r2, #16
 8023782:	190c      	adds	r4, r1, r4
 8023784:	0c23      	lsrs	r3, r4, #16
 8023786:	d107      	bne.n	8023798 <_calloc_r+0x50>
 8023788:	0424      	lsls	r4, r4, #16
 802378a:	b292      	uxth	r2, r2
 802378c:	4314      	orrs	r4, r2
 802378e:	e7e5      	b.n	802375c <_calloc_r+0x14>
 8023790:	2d00      	cmp	r5, #0
 8023792:	d101      	bne.n	8023798 <_calloc_r+0x50>
 8023794:	1c14      	adds	r4, r2, #0
 8023796:	e7ed      	b.n	8023774 <_calloc_r+0x2c>
 8023798:	230c      	movs	r3, #12
 802379a:	6003      	str	r3, [r0, #0]
 802379c:	2500      	movs	r5, #0
 802379e:	0028      	movs	r0, r5
 80237a0:	bd70      	pop	{r4, r5, r6, pc}

080237a2 <_realloc_r>:
 80237a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80237a4:	0006      	movs	r6, r0
 80237a6:	000c      	movs	r4, r1
 80237a8:	0015      	movs	r5, r2
 80237aa:	2900      	cmp	r1, #0
 80237ac:	d105      	bne.n	80237ba <_realloc_r+0x18>
 80237ae:	0011      	movs	r1, r2
 80237b0:	f7fe fe2a 	bl	8022408 <_malloc_r>
 80237b4:	0004      	movs	r4, r0
 80237b6:	0020      	movs	r0, r4
 80237b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80237ba:	2a00      	cmp	r2, #0
 80237bc:	d103      	bne.n	80237c6 <_realloc_r+0x24>
 80237be:	f7fe fa53 	bl	8021c68 <_free_r>
 80237c2:	2400      	movs	r4, #0
 80237c4:	e7f7      	b.n	80237b6 <_realloc_r+0x14>
 80237c6:	f000 f832 	bl	802382e <_malloc_usable_size_r>
 80237ca:	0007      	movs	r7, r0
 80237cc:	4285      	cmp	r5, r0
 80237ce:	d802      	bhi.n	80237d6 <_realloc_r+0x34>
 80237d0:	0843      	lsrs	r3, r0, #1
 80237d2:	42ab      	cmp	r3, r5
 80237d4:	d3ef      	bcc.n	80237b6 <_realloc_r+0x14>
 80237d6:	0029      	movs	r1, r5
 80237d8:	0030      	movs	r0, r6
 80237da:	f7fe fe15 	bl	8022408 <_malloc_r>
 80237de:	9001      	str	r0, [sp, #4]
 80237e0:	2800      	cmp	r0, #0
 80237e2:	d0ee      	beq.n	80237c2 <_realloc_r+0x20>
 80237e4:	002a      	movs	r2, r5
 80237e6:	42bd      	cmp	r5, r7
 80237e8:	d900      	bls.n	80237ec <_realloc_r+0x4a>
 80237ea:	003a      	movs	r2, r7
 80237ec:	0021      	movs	r1, r4
 80237ee:	9801      	ldr	r0, [sp, #4]
 80237f0:	f7fd fba8 	bl	8020f44 <memcpy>
 80237f4:	0021      	movs	r1, r4
 80237f6:	0030      	movs	r0, r6
 80237f8:	f7fe fa36 	bl	8021c68 <_free_r>
 80237fc:	9c01      	ldr	r4, [sp, #4]
 80237fe:	e7da      	b.n	80237b6 <_realloc_r+0x14>

08023800 <fiprintf>:
 8023800:	b40e      	push	{r1, r2, r3}
 8023802:	b517      	push	{r0, r1, r2, r4, lr}
 8023804:	4c05      	ldr	r4, [pc, #20]	@ (802381c <fiprintf+0x1c>)
 8023806:	ab05      	add	r3, sp, #20
 8023808:	cb04      	ldmia	r3!, {r2}
 802380a:	0001      	movs	r1, r0
 802380c:	6820      	ldr	r0, [r4, #0]
 802380e:	9301      	str	r3, [sp, #4]
 8023810:	f7ff fcfa 	bl	8023208 <_vfiprintf_r>
 8023814:	bc1e      	pop	{r1, r2, r3, r4}
 8023816:	bc08      	pop	{r3}
 8023818:	b003      	add	sp, #12
 802381a:	4718      	bx	r3
 802381c:	200003cc 	.word	0x200003cc

08023820 <abort>:
 8023820:	2006      	movs	r0, #6
 8023822:	b510      	push	{r4, lr}
 8023824:	f000 f834 	bl	8023890 <raise>
 8023828:	2001      	movs	r0, #1
 802382a:	f7ea ff69 	bl	800e700 <_exit>

0802382e <_malloc_usable_size_r>:
 802382e:	1f0b      	subs	r3, r1, #4
 8023830:	681b      	ldr	r3, [r3, #0]
 8023832:	1f18      	subs	r0, r3, #4
 8023834:	2b00      	cmp	r3, #0
 8023836:	da01      	bge.n	802383c <_malloc_usable_size_r+0xe>
 8023838:	580b      	ldr	r3, [r1, r0]
 802383a:	18c0      	adds	r0, r0, r3
 802383c:	4770      	bx	lr

0802383e <_raise_r>:
 802383e:	b570      	push	{r4, r5, r6, lr}
 8023840:	0004      	movs	r4, r0
 8023842:	000d      	movs	r5, r1
 8023844:	291f      	cmp	r1, #31
 8023846:	d904      	bls.n	8023852 <_raise_r+0x14>
 8023848:	2316      	movs	r3, #22
 802384a:	6003      	str	r3, [r0, #0]
 802384c:	2001      	movs	r0, #1
 802384e:	4240      	negs	r0, r0
 8023850:	bd70      	pop	{r4, r5, r6, pc}
 8023852:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8023854:	2b00      	cmp	r3, #0
 8023856:	d004      	beq.n	8023862 <_raise_r+0x24>
 8023858:	008a      	lsls	r2, r1, #2
 802385a:	189b      	adds	r3, r3, r2
 802385c:	681a      	ldr	r2, [r3, #0]
 802385e:	2a00      	cmp	r2, #0
 8023860:	d108      	bne.n	8023874 <_raise_r+0x36>
 8023862:	0020      	movs	r0, r4
 8023864:	f000 f830 	bl	80238c8 <_getpid_r>
 8023868:	002a      	movs	r2, r5
 802386a:	0001      	movs	r1, r0
 802386c:	0020      	movs	r0, r4
 802386e:	f000 f819 	bl	80238a4 <_kill_r>
 8023872:	e7ed      	b.n	8023850 <_raise_r+0x12>
 8023874:	2a01      	cmp	r2, #1
 8023876:	d009      	beq.n	802388c <_raise_r+0x4e>
 8023878:	1c51      	adds	r1, r2, #1
 802387a:	d103      	bne.n	8023884 <_raise_r+0x46>
 802387c:	2316      	movs	r3, #22
 802387e:	6003      	str	r3, [r0, #0]
 8023880:	2001      	movs	r0, #1
 8023882:	e7e5      	b.n	8023850 <_raise_r+0x12>
 8023884:	2100      	movs	r1, #0
 8023886:	0028      	movs	r0, r5
 8023888:	6019      	str	r1, [r3, #0]
 802388a:	4790      	blx	r2
 802388c:	2000      	movs	r0, #0
 802388e:	e7df      	b.n	8023850 <_raise_r+0x12>

08023890 <raise>:
 8023890:	b510      	push	{r4, lr}
 8023892:	4b03      	ldr	r3, [pc, #12]	@ (80238a0 <raise+0x10>)
 8023894:	0001      	movs	r1, r0
 8023896:	6818      	ldr	r0, [r3, #0]
 8023898:	f7ff ffd1 	bl	802383e <_raise_r>
 802389c:	bd10      	pop	{r4, pc}
 802389e:	46c0      	nop			@ (mov r8, r8)
 80238a0:	200003cc 	.word	0x200003cc

080238a4 <_kill_r>:
 80238a4:	2300      	movs	r3, #0
 80238a6:	b570      	push	{r4, r5, r6, lr}
 80238a8:	4d06      	ldr	r5, [pc, #24]	@ (80238c4 <_kill_r+0x20>)
 80238aa:	0004      	movs	r4, r0
 80238ac:	0008      	movs	r0, r1
 80238ae:	0011      	movs	r1, r2
 80238b0:	602b      	str	r3, [r5, #0]
 80238b2:	f7ea ff15 	bl	800e6e0 <_kill>
 80238b6:	1c43      	adds	r3, r0, #1
 80238b8:	d103      	bne.n	80238c2 <_kill_r+0x1e>
 80238ba:	682b      	ldr	r3, [r5, #0]
 80238bc:	2b00      	cmp	r3, #0
 80238be:	d000      	beq.n	80238c2 <_kill_r+0x1e>
 80238c0:	6023      	str	r3, [r4, #0]
 80238c2:	bd70      	pop	{r4, r5, r6, pc}
 80238c4:	200034ec 	.word	0x200034ec

080238c8 <_getpid_r>:
 80238c8:	b510      	push	{r4, lr}
 80238ca:	f7ea ff03 	bl	800e6d4 <_getpid>
 80238ce:	bd10      	pop	{r4, pc}

080238d0 <expf>:
 80238d0:	b570      	push	{r4, r5, r6, lr}
 80238d2:	1c04      	adds	r4, r0, #0
 80238d4:	f000 f8e6 	bl	8023aa4 <__ieee754_expf>
 80238d8:	1c05      	adds	r5, r0, #0
 80238da:	1c20      	adds	r0, r4, #0
 80238dc:	f000 f83c 	bl	8023958 <finitef>
 80238e0:	2800      	cmp	r0, #0
 80238e2:	d00b      	beq.n	80238fc <expf+0x2c>
 80238e4:	490c      	ldr	r1, [pc, #48]	@ (8023918 <expf+0x48>)
 80238e6:	1c20      	adds	r0, r4, #0
 80238e8:	f7dc fe36 	bl	8000558 <__aeabi_fcmpgt>
 80238ec:	2800      	cmp	r0, #0
 80238ee:	d007      	beq.n	8023900 <expf+0x30>
 80238f0:	f7fd faf0 	bl	8020ed4 <__errno>
 80238f4:	25ff      	movs	r5, #255	@ 0xff
 80238f6:	2322      	movs	r3, #34	@ 0x22
 80238f8:	05ed      	lsls	r5, r5, #23
 80238fa:	6003      	str	r3, [r0, #0]
 80238fc:	1c28      	adds	r0, r5, #0
 80238fe:	bd70      	pop	{r4, r5, r6, pc}
 8023900:	4906      	ldr	r1, [pc, #24]	@ (802391c <expf+0x4c>)
 8023902:	1c20      	adds	r0, r4, #0
 8023904:	f7dc fe14 	bl	8000530 <__aeabi_fcmplt>
 8023908:	2800      	cmp	r0, #0
 802390a:	d0f7      	beq.n	80238fc <expf+0x2c>
 802390c:	f7fd fae2 	bl	8020ed4 <__errno>
 8023910:	2322      	movs	r3, #34	@ 0x22
 8023912:	2500      	movs	r5, #0
 8023914:	6003      	str	r3, [r0, #0]
 8023916:	e7f1      	b.n	80238fc <expf+0x2c>
 8023918:	42b17217 	.word	0x42b17217
 802391c:	c2cff1b5 	.word	0xc2cff1b5

08023920 <sqrtf>:
 8023920:	b570      	push	{r4, r5, r6, lr}
 8023922:	1c05      	adds	r5, r0, #0
 8023924:	f000 f822 	bl	802396c <__ieee754_sqrtf>
 8023928:	1c29      	adds	r1, r5, #0
 802392a:	1c04      	adds	r4, r0, #0
 802392c:	1c28      	adds	r0, r5, #0
 802392e:	f7dd fe19 	bl	8001564 <__aeabi_fcmpun>
 8023932:	2800      	cmp	r0, #0
 8023934:	d10e      	bne.n	8023954 <sqrtf+0x34>
 8023936:	2100      	movs	r1, #0
 8023938:	1c28      	adds	r0, r5, #0
 802393a:	f7dc fdf9 	bl	8000530 <__aeabi_fcmplt>
 802393e:	2800      	cmp	r0, #0
 8023940:	d008      	beq.n	8023954 <sqrtf+0x34>
 8023942:	f7fd fac7 	bl	8020ed4 <__errno>
 8023946:	2321      	movs	r3, #33	@ 0x21
 8023948:	2100      	movs	r1, #0
 802394a:	6003      	str	r3, [r0, #0]
 802394c:	1c08      	adds	r0, r1, #0
 802394e:	f7dd f941 	bl	8000bd4 <__aeabi_fdiv>
 8023952:	1c04      	adds	r4, r0, #0
 8023954:	1c20      	adds	r0, r4, #0
 8023956:	bd70      	pop	{r4, r5, r6, pc}

08023958 <finitef>:
 8023958:	22ff      	movs	r2, #255	@ 0xff
 802395a:	0043      	lsls	r3, r0, #1
 802395c:	085b      	lsrs	r3, r3, #1
 802395e:	2001      	movs	r0, #1
 8023960:	05d2      	lsls	r2, r2, #23
 8023962:	4293      	cmp	r3, r2
 8023964:	db00      	blt.n	8023968 <finitef+0x10>
 8023966:	2000      	movs	r0, #0
 8023968:	4770      	bx	lr
	...

0802396c <__ieee754_sqrtf>:
 802396c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802396e:	0003      	movs	r3, r0
 8023970:	0042      	lsls	r2, r0, #1
 8023972:	1c04      	adds	r4, r0, #0
 8023974:	20ff      	movs	r0, #255	@ 0xff
 8023976:	0852      	lsrs	r2, r2, #1
 8023978:	05c0      	lsls	r0, r0, #23
 802397a:	4282      	cmp	r2, r0
 802397c:	d30a      	bcc.n	8023994 <__ieee754_sqrtf+0x28>
 802397e:	1c21      	adds	r1, r4, #0
 8023980:	1c20      	adds	r0, r4, #0
 8023982:	f7dd fb0d 	bl	8000fa0 <__aeabi_fmul>
 8023986:	1c01      	adds	r1, r0, #0
 8023988:	1c20      	adds	r0, r4, #0
 802398a:	f7dc ff99 	bl	80008c0 <__aeabi_fadd>
 802398e:	1c04      	adds	r4, r0, #0
 8023990:	1c20      	adds	r0, r4, #0
 8023992:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023994:	2a00      	cmp	r2, #0
 8023996:	d0fb      	beq.n	8023990 <__ieee754_sqrtf+0x24>
 8023998:	2c00      	cmp	r4, #0
 802399a:	da07      	bge.n	80239ac <__ieee754_sqrtf+0x40>
 802399c:	1c21      	adds	r1, r4, #0
 802399e:	1c20      	adds	r0, r4, #0
 80239a0:	f7dd fc3c 	bl	800121c <__aeabi_fsub>
 80239a4:	1c01      	adds	r1, r0, #0
 80239a6:	f7dd f915 	bl	8000bd4 <__aeabi_fdiv>
 80239aa:	e7f0      	b.n	802398e <__ieee754_sqrtf+0x22>
 80239ac:	0022      	movs	r2, r4
 80239ae:	15e1      	asrs	r1, r4, #23
 80239b0:	4002      	ands	r2, r0
 80239b2:	4204      	tst	r4, r0
 80239b4:	d046      	beq.n	8023a44 <__ieee754_sqrtf+0xd8>
 80239b6:	2280      	movs	r2, #128	@ 0x80
 80239b8:	000f      	movs	r7, r1
 80239ba:	025b      	lsls	r3, r3, #9
 80239bc:	0a5b      	lsrs	r3, r3, #9
 80239be:	0412      	lsls	r2, r2, #16
 80239c0:	3f7f      	subs	r7, #127	@ 0x7f
 80239c2:	4313      	orrs	r3, r2
 80239c4:	07c9      	lsls	r1, r1, #31
 80239c6:	d400      	bmi.n	80239ca <__ieee754_sqrtf+0x5e>
 80239c8:	005b      	lsls	r3, r3, #1
 80239ca:	2400      	movs	r4, #0
 80239cc:	2180      	movs	r1, #128	@ 0x80
 80239ce:	2019      	movs	r0, #25
 80239d0:	0026      	movs	r6, r4
 80239d2:	107f      	asrs	r7, r7, #1
 80239d4:	005b      	lsls	r3, r3, #1
 80239d6:	0449      	lsls	r1, r1, #17
 80239d8:	1875      	adds	r5, r6, r1
 80239da:	001a      	movs	r2, r3
 80239dc:	429d      	cmp	r5, r3
 80239de:	dc02      	bgt.n	80239e6 <__ieee754_sqrtf+0x7a>
 80239e0:	186e      	adds	r6, r5, r1
 80239e2:	1b5a      	subs	r2, r3, r5
 80239e4:	1864      	adds	r4, r4, r1
 80239e6:	3801      	subs	r0, #1
 80239e8:	0053      	lsls	r3, r2, #1
 80239ea:	0849      	lsrs	r1, r1, #1
 80239ec:	2800      	cmp	r0, #0
 80239ee:	d1f3      	bne.n	80239d8 <__ieee754_sqrtf+0x6c>
 80239f0:	2a00      	cmp	r2, #0
 80239f2:	d019      	beq.n	8023a28 <__ieee754_sqrtf+0xbc>
 80239f4:	4d17      	ldr	r5, [pc, #92]	@ (8023a54 <__ieee754_sqrtf+0xe8>)
 80239f6:	4e18      	ldr	r6, [pc, #96]	@ (8023a58 <__ieee754_sqrtf+0xec>)
 80239f8:	6828      	ldr	r0, [r5, #0]
 80239fa:	6831      	ldr	r1, [r6, #0]
 80239fc:	682b      	ldr	r3, [r5, #0]
 80239fe:	9301      	str	r3, [sp, #4]
 8023a00:	f7dd fc0c 	bl	800121c <__aeabi_fsub>
 8023a04:	1c01      	adds	r1, r0, #0
 8023a06:	9801      	ldr	r0, [sp, #4]
 8023a08:	f7dc fd9c 	bl	8000544 <__aeabi_fcmple>
 8023a0c:	2800      	cmp	r0, #0
 8023a0e:	d00b      	beq.n	8023a28 <__ieee754_sqrtf+0xbc>
 8023a10:	6828      	ldr	r0, [r5, #0]
 8023a12:	6831      	ldr	r1, [r6, #0]
 8023a14:	f7dc ff54 	bl	80008c0 <__aeabi_fadd>
 8023a18:	682d      	ldr	r5, [r5, #0]
 8023a1a:	1c01      	adds	r1, r0, #0
 8023a1c:	1c28      	adds	r0, r5, #0
 8023a1e:	f7dc fd87 	bl	8000530 <__aeabi_fcmplt>
 8023a22:	2800      	cmp	r0, #0
 8023a24:	d011      	beq.n	8023a4a <__ieee754_sqrtf+0xde>
 8023a26:	3402      	adds	r4, #2
 8023a28:	23fc      	movs	r3, #252	@ 0xfc
 8023a2a:	1064      	asrs	r4, r4, #1
 8023a2c:	059b      	lsls	r3, r3, #22
 8023a2e:	18e3      	adds	r3, r4, r3
 8023a30:	05fc      	lsls	r4, r7, #23
 8023a32:	18e4      	adds	r4, r4, r3
 8023a34:	e7ac      	b.n	8023990 <__ieee754_sqrtf+0x24>
 8023a36:	005b      	lsls	r3, r3, #1
 8023a38:	3201      	adds	r2, #1
 8023a3a:	4203      	tst	r3, r0
 8023a3c:	d0fb      	beq.n	8023a36 <__ieee754_sqrtf+0xca>
 8023a3e:	3a01      	subs	r2, #1
 8023a40:	1a89      	subs	r1, r1, r2
 8023a42:	e7b8      	b.n	80239b6 <__ieee754_sqrtf+0x4a>
 8023a44:	2080      	movs	r0, #128	@ 0x80
 8023a46:	0400      	lsls	r0, r0, #16
 8023a48:	e7f7      	b.n	8023a3a <__ieee754_sqrtf+0xce>
 8023a4a:	2301      	movs	r3, #1
 8023a4c:	3401      	adds	r4, #1
 8023a4e:	439c      	bics	r4, r3
 8023a50:	e7ea      	b.n	8023a28 <__ieee754_sqrtf+0xbc>
 8023a52:	46c0      	nop			@ (mov r8, r8)
 8023a54:	20000420 	.word	0x20000420
 8023a58:	2000041c 	.word	0x2000041c

08023a5c <roundf>:
 8023a5c:	0dc3      	lsrs	r3, r0, #23
 8023a5e:	b2db      	uxtb	r3, r3
 8023a60:	3b7f      	subs	r3, #127	@ 0x7f
 8023a62:	0002      	movs	r2, r0
 8023a64:	b510      	push	{r4, lr}
 8023a66:	2b16      	cmp	r3, #22
 8023a68:	dc13      	bgt.n	8023a92 <roundf+0x36>
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	da07      	bge.n	8023a7e <roundf+0x22>
 8023a6e:	0fc2      	lsrs	r2, r0, #31
 8023a70:	07d0      	lsls	r0, r2, #31
 8023a72:	3301      	adds	r3, #1
 8023a74:	d102      	bne.n	8023a7c <roundf+0x20>
 8023a76:	23fe      	movs	r3, #254	@ 0xfe
 8023a78:	059b      	lsls	r3, r3, #22
 8023a7a:	4318      	orrs	r0, r3
 8023a7c:	bd10      	pop	{r4, pc}
 8023a7e:	4908      	ldr	r1, [pc, #32]	@ (8023aa0 <roundf+0x44>)
 8023a80:	4119      	asrs	r1, r3
 8023a82:	4208      	tst	r0, r1
 8023a84:	d0fa      	beq.n	8023a7c <roundf+0x20>
 8023a86:	2080      	movs	r0, #128	@ 0x80
 8023a88:	03c0      	lsls	r0, r0, #15
 8023a8a:	4118      	asrs	r0, r3
 8023a8c:	1880      	adds	r0, r0, r2
 8023a8e:	4388      	bics	r0, r1
 8023a90:	e7f4      	b.n	8023a7c <roundf+0x20>
 8023a92:	2b80      	cmp	r3, #128	@ 0x80
 8023a94:	d1f2      	bne.n	8023a7c <roundf+0x20>
 8023a96:	1c01      	adds	r1, r0, #0
 8023a98:	f7dc ff12 	bl	80008c0 <__aeabi_fadd>
 8023a9c:	e7ee      	b.n	8023a7c <roundf+0x20>
 8023a9e:	46c0      	nop			@ (mov r8, r8)
 8023aa0:	007fffff 	.word	0x007fffff

08023aa4 <__ieee754_expf>:
 8023aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023aa6:	21ff      	movs	r1, #255	@ 0xff
 8023aa8:	0043      	lsls	r3, r0, #1
 8023aaa:	1c04      	adds	r4, r0, #0
 8023aac:	085b      	lsrs	r3, r3, #1
 8023aae:	05c9      	lsls	r1, r1, #23
 8023ab0:	428b      	cmp	r3, r1
 8023ab2:	d904      	bls.n	8023abe <__ieee754_expf+0x1a>
 8023ab4:	1c01      	adds	r1, r0, #0
 8023ab6:	1c20      	adds	r0, r4, #0
 8023ab8:	f7dc ff02 	bl	80008c0 <__aeabi_fadd>
 8023abc:	e00d      	b.n	8023ada <__ieee754_expf+0x36>
 8023abe:	0fc6      	lsrs	r6, r0, #31
 8023ac0:	428b      	cmp	r3, r1
 8023ac2:	d104      	bne.n	8023ace <__ieee754_expf+0x2a>
 8023ac4:	2e00      	cmp	r6, #0
 8023ac6:	d000      	beq.n	8023aca <__ieee754_expf+0x26>
 8023ac8:	e0ba      	b.n	8023c40 <__ieee754_expf+0x19c>
 8023aca:	1c20      	adds	r0, r4, #0
 8023acc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023ace:	495d      	ldr	r1, [pc, #372]	@ (8023c44 <__ieee754_expf+0x1a0>)
 8023ad0:	4288      	cmp	r0, r1
 8023ad2:	dd04      	ble.n	8023ade <__ieee754_expf+0x3a>
 8023ad4:	2000      	movs	r0, #0
 8023ad6:	f000 f8f1 	bl	8023cbc <__math_oflowf>
 8023ada:	1c04      	adds	r4, r0, #0
 8023adc:	e7f5      	b.n	8023aca <__ieee754_expf+0x26>
 8023ade:	2800      	cmp	r0, #0
 8023ae0:	da06      	bge.n	8023af0 <__ieee754_expf+0x4c>
 8023ae2:	4a59      	ldr	r2, [pc, #356]	@ (8023c48 <__ieee754_expf+0x1a4>)
 8023ae4:	4293      	cmp	r3, r2
 8023ae6:	d903      	bls.n	8023af0 <__ieee754_expf+0x4c>
 8023ae8:	2000      	movs	r0, #0
 8023aea:	f000 f8e1 	bl	8023cb0 <__math_uflowf>
 8023aee:	e7f4      	b.n	8023ada <__ieee754_expf+0x36>
 8023af0:	4a56      	ldr	r2, [pc, #344]	@ (8023c4c <__ieee754_expf+0x1a8>)
 8023af2:	4293      	cmp	r3, r2
 8023af4:	d96e      	bls.n	8023bd4 <__ieee754_expf+0x130>
 8023af6:	4a56      	ldr	r2, [pc, #344]	@ (8023c50 <__ieee754_expf+0x1ac>)
 8023af8:	00b5      	lsls	r5, r6, #2
 8023afa:	4293      	cmp	r3, r2
 8023afc:	d84e      	bhi.n	8023b9c <__ieee754_expf+0xf8>
 8023afe:	4b55      	ldr	r3, [pc, #340]	@ (8023c54 <__ieee754_expf+0x1b0>)
 8023b00:	1c20      	adds	r0, r4, #0
 8023b02:	5959      	ldr	r1, [r3, r5]
 8023b04:	f7dd fb8a 	bl	800121c <__aeabi_fsub>
 8023b08:	4b53      	ldr	r3, [pc, #332]	@ (8023c58 <__ieee754_expf+0x1b4>)
 8023b0a:	1c07      	adds	r7, r0, #0
 8023b0c:	595b      	ldr	r3, [r3, r5]
 8023b0e:	2501      	movs	r5, #1
 8023b10:	1bad      	subs	r5, r5, r6
 8023b12:	9300      	str	r3, [sp, #0]
 8023b14:	1bad      	subs	r5, r5, r6
 8023b16:	9900      	ldr	r1, [sp, #0]
 8023b18:	1c38      	adds	r0, r7, #0
 8023b1a:	f7dd fb7f 	bl	800121c <__aeabi_fsub>
 8023b1e:	1c04      	adds	r4, r0, #0
 8023b20:	1c21      	adds	r1, r4, #0
 8023b22:	1c20      	adds	r0, r4, #0
 8023b24:	f7dd fa3c 	bl	8000fa0 <__aeabi_fmul>
 8023b28:	494c      	ldr	r1, [pc, #304]	@ (8023c5c <__ieee754_expf+0x1b8>)
 8023b2a:	1c06      	adds	r6, r0, #0
 8023b2c:	f7dd fa38 	bl	8000fa0 <__aeabi_fmul>
 8023b30:	494b      	ldr	r1, [pc, #300]	@ (8023c60 <__ieee754_expf+0x1bc>)
 8023b32:	f7dd fb73 	bl	800121c <__aeabi_fsub>
 8023b36:	1c31      	adds	r1, r6, #0
 8023b38:	f7dd fa32 	bl	8000fa0 <__aeabi_fmul>
 8023b3c:	4949      	ldr	r1, [pc, #292]	@ (8023c64 <__ieee754_expf+0x1c0>)
 8023b3e:	f7dc febf 	bl	80008c0 <__aeabi_fadd>
 8023b42:	1c31      	adds	r1, r6, #0
 8023b44:	f7dd fa2c 	bl	8000fa0 <__aeabi_fmul>
 8023b48:	4947      	ldr	r1, [pc, #284]	@ (8023c68 <__ieee754_expf+0x1c4>)
 8023b4a:	f7dd fb67 	bl	800121c <__aeabi_fsub>
 8023b4e:	1c31      	adds	r1, r6, #0
 8023b50:	f7dd fa26 	bl	8000fa0 <__aeabi_fmul>
 8023b54:	4945      	ldr	r1, [pc, #276]	@ (8023c6c <__ieee754_expf+0x1c8>)
 8023b56:	f7dc feb3 	bl	80008c0 <__aeabi_fadd>
 8023b5a:	1c31      	adds	r1, r6, #0
 8023b5c:	f7dd fa20 	bl	8000fa0 <__aeabi_fmul>
 8023b60:	1c01      	adds	r1, r0, #0
 8023b62:	1c20      	adds	r0, r4, #0
 8023b64:	f7dd fb5a 	bl	800121c <__aeabi_fsub>
 8023b68:	1c01      	adds	r1, r0, #0
 8023b6a:	1c06      	adds	r6, r0, #0
 8023b6c:	1c20      	adds	r0, r4, #0
 8023b6e:	f7dd fa17 	bl	8000fa0 <__aeabi_fmul>
 8023b72:	9001      	str	r0, [sp, #4]
 8023b74:	2d00      	cmp	r5, #0
 8023b76:	d140      	bne.n	8023bfa <__ieee754_expf+0x156>
 8023b78:	2180      	movs	r1, #128	@ 0x80
 8023b7a:	1c30      	adds	r0, r6, #0
 8023b7c:	05c9      	lsls	r1, r1, #23
 8023b7e:	f7dd fb4d 	bl	800121c <__aeabi_fsub>
 8023b82:	1c01      	adds	r1, r0, #0
 8023b84:	9801      	ldr	r0, [sp, #4]
 8023b86:	f7dd f825 	bl	8000bd4 <__aeabi_fdiv>
 8023b8a:	1c21      	adds	r1, r4, #0
 8023b8c:	f7dd fb46 	bl	800121c <__aeabi_fsub>
 8023b90:	1c01      	adds	r1, r0, #0
 8023b92:	20fe      	movs	r0, #254	@ 0xfe
 8023b94:	0580      	lsls	r0, r0, #22
 8023b96:	f7dd fb41 	bl	800121c <__aeabi_fsub>
 8023b9a:	e79e      	b.n	8023ada <__ieee754_expf+0x36>
 8023b9c:	4934      	ldr	r1, [pc, #208]	@ (8023c70 <__ieee754_expf+0x1cc>)
 8023b9e:	1c20      	adds	r0, r4, #0
 8023ba0:	f7dd f9fe 	bl	8000fa0 <__aeabi_fmul>
 8023ba4:	4b33      	ldr	r3, [pc, #204]	@ (8023c74 <__ieee754_expf+0x1d0>)
 8023ba6:	5959      	ldr	r1, [r3, r5]
 8023ba8:	f7dc fe8a 	bl	80008c0 <__aeabi_fadd>
 8023bac:	f7dd fcf0 	bl	8001590 <__aeabi_f2iz>
 8023bb0:	0005      	movs	r5, r0
 8023bb2:	f7dd fd0d 	bl	80015d0 <__aeabi_i2f>
 8023bb6:	4930      	ldr	r1, [pc, #192]	@ (8023c78 <__ieee754_expf+0x1d4>)
 8023bb8:	1c06      	adds	r6, r0, #0
 8023bba:	f7dd f9f1 	bl	8000fa0 <__aeabi_fmul>
 8023bbe:	1c01      	adds	r1, r0, #0
 8023bc0:	1c20      	adds	r0, r4, #0
 8023bc2:	f7dd fb2b 	bl	800121c <__aeabi_fsub>
 8023bc6:	492d      	ldr	r1, [pc, #180]	@ (8023c7c <__ieee754_expf+0x1d8>)
 8023bc8:	1c07      	adds	r7, r0, #0
 8023bca:	1c30      	adds	r0, r6, #0
 8023bcc:	f7dd f9e8 	bl	8000fa0 <__aeabi_fmul>
 8023bd0:	9000      	str	r0, [sp, #0]
 8023bd2:	e7a0      	b.n	8023b16 <__ieee754_expf+0x72>
 8023bd4:	22d0      	movs	r2, #208	@ 0xd0
 8023bd6:	0592      	lsls	r2, r2, #22
 8023bd8:	4293      	cmp	r3, r2
 8023bda:	d20c      	bcs.n	8023bf6 <__ieee754_expf+0x152>
 8023bdc:	4928      	ldr	r1, [pc, #160]	@ (8023c80 <__ieee754_expf+0x1dc>)
 8023bde:	1c20      	adds	r0, r4, #0
 8023be0:	f7dc fe6e 	bl	80008c0 <__aeabi_fadd>
 8023be4:	21fe      	movs	r1, #254	@ 0xfe
 8023be6:	0589      	lsls	r1, r1, #22
 8023be8:	f7dc fcb6 	bl	8000558 <__aeabi_fcmpgt>
 8023bec:	1e05      	subs	r5, r0, #0
 8023bee:	d097      	beq.n	8023b20 <__ieee754_expf+0x7c>
 8023bf0:	21fe      	movs	r1, #254	@ 0xfe
 8023bf2:	0589      	lsls	r1, r1, #22
 8023bf4:	e75f      	b.n	8023ab6 <__ieee754_expf+0x12>
 8023bf6:	2500      	movs	r5, #0
 8023bf8:	e792      	b.n	8023b20 <__ieee754_expf+0x7c>
 8023bfa:	2080      	movs	r0, #128	@ 0x80
 8023bfc:	1c31      	adds	r1, r6, #0
 8023bfe:	05c0      	lsls	r0, r0, #23
 8023c00:	f7dd fb0c 	bl	800121c <__aeabi_fsub>
 8023c04:	1c01      	adds	r1, r0, #0
 8023c06:	9801      	ldr	r0, [sp, #4]
 8023c08:	f7dc ffe4 	bl	8000bd4 <__aeabi_fdiv>
 8023c0c:	1c01      	adds	r1, r0, #0
 8023c0e:	9800      	ldr	r0, [sp, #0]
 8023c10:	f7dd fb04 	bl	800121c <__aeabi_fsub>
 8023c14:	1c39      	adds	r1, r7, #0
 8023c16:	f7dd fb01 	bl	800121c <__aeabi_fsub>
 8023c1a:	1c01      	adds	r1, r0, #0
 8023c1c:	20fe      	movs	r0, #254	@ 0xfe
 8023c1e:	0580      	lsls	r0, r0, #22
 8023c20:	f7dd fafc 	bl	800121c <__aeabi_fsub>
 8023c24:	002b      	movs	r3, r5
 8023c26:	337d      	adds	r3, #125	@ 0x7d
 8023c28:	db02      	blt.n	8023c30 <__ieee754_expf+0x18c>
 8023c2a:	05ec      	lsls	r4, r5, #23
 8023c2c:	1824      	adds	r4, r4, r0
 8023c2e:	e74c      	b.n	8023aca <__ieee754_expf+0x26>
 8023c30:	21d8      	movs	r1, #216	@ 0xd8
 8023c32:	3564      	adds	r5, #100	@ 0x64
 8023c34:	05ed      	lsls	r5, r5, #23
 8023c36:	1828      	adds	r0, r5, r0
 8023c38:	0509      	lsls	r1, r1, #20
 8023c3a:	f7dd f9b1 	bl	8000fa0 <__aeabi_fmul>
 8023c3e:	e74c      	b.n	8023ada <__ieee754_expf+0x36>
 8023c40:	2400      	movs	r4, #0
 8023c42:	e742      	b.n	8023aca <__ieee754_expf+0x26>
 8023c44:	42b17217 	.word	0x42b17217
 8023c48:	42cff1b5 	.word	0x42cff1b5
 8023c4c:	3eb17218 	.word	0x3eb17218
 8023c50:	3f851591 	.word	0x3f851591
 8023c54:	08027150 	.word	0x08027150
 8023c58:	08027148 	.word	0x08027148
 8023c5c:	3331bb4c 	.word	0x3331bb4c
 8023c60:	35ddea0e 	.word	0x35ddea0e
 8023c64:	388ab355 	.word	0x388ab355
 8023c68:	3b360b61 	.word	0x3b360b61
 8023c6c:	3e2aaaab 	.word	0x3e2aaaab
 8023c70:	3fb8aa3b 	.word	0x3fb8aa3b
 8023c74:	08027158 	.word	0x08027158
 8023c78:	3f317180 	.word	0x3f317180
 8023c7c:	3717f7d1 	.word	0x3717f7d1
 8023c80:	7149f2ca 	.word	0x7149f2ca

08023c84 <with_errnof>:
 8023c84:	b570      	push	{r4, r5, r6, lr}
 8023c86:	000d      	movs	r5, r1
 8023c88:	1c04      	adds	r4, r0, #0
 8023c8a:	f7fd f923 	bl	8020ed4 <__errno>
 8023c8e:	6005      	str	r5, [r0, #0]
 8023c90:	1c20      	adds	r0, r4, #0
 8023c92:	bd70      	pop	{r4, r5, r6, pc}

08023c94 <xflowf>:
 8023c94:	b510      	push	{r4, lr}
 8023c96:	1c0b      	adds	r3, r1, #0
 8023c98:	2800      	cmp	r0, #0
 8023c9a:	d002      	beq.n	8023ca2 <xflowf+0xe>
 8023c9c:	2380      	movs	r3, #128	@ 0x80
 8023c9e:	061b      	lsls	r3, r3, #24
 8023ca0:	18cb      	adds	r3, r1, r3
 8023ca2:	1c18      	adds	r0, r3, #0
 8023ca4:	f7dd f97c 	bl	8000fa0 <__aeabi_fmul>
 8023ca8:	2122      	movs	r1, #34	@ 0x22
 8023caa:	f7ff ffeb 	bl	8023c84 <with_errnof>
 8023cae:	bd10      	pop	{r4, pc}

08023cb0 <__math_uflowf>:
 8023cb0:	2180      	movs	r1, #128	@ 0x80
 8023cb2:	b510      	push	{r4, lr}
 8023cb4:	0549      	lsls	r1, r1, #21
 8023cb6:	f7ff ffed 	bl	8023c94 <xflowf>
 8023cba:	bd10      	pop	{r4, pc}

08023cbc <__math_oflowf>:
 8023cbc:	21e0      	movs	r1, #224	@ 0xe0
 8023cbe:	b510      	push	{r4, lr}
 8023cc0:	05c9      	lsls	r1, r1, #23
 8023cc2:	f7ff ffe7 	bl	8023c94 <xflowf>
 8023cc6:	bd10      	pop	{r4, pc}

08023cc8 <_init>:
 8023cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023cca:	46c0      	nop			@ (mov r8, r8)
 8023ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023cce:	bc08      	pop	{r3}
 8023cd0:	469e      	mov	lr, r3
 8023cd2:	4770      	bx	lr

08023cd4 <_fini>:
 8023cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023cd6:	46c0      	nop			@ (mov r8, r8)
 8023cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023cda:	bc08      	pop	{r3}
 8023cdc:	469e      	mov	lr, r3
 8023cde:	4770      	bx	lr
