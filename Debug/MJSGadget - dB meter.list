
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029e04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e10  08029ec8  08029ec8  0002aec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ecd8  0802ecd8  00030434  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802ecd8  0802ecd8  0002fcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ece0  0802ece0  00030434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ece0  0802ece0  0002fce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802ece4  0802ece4  0002fce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000434  20000000  0802ece8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003228  20000434  0802f11c  00030434  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000365c  0802f11c  0003065c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036d78  00000000  00000000  0003045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009df9  00000000  00000000  000671d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002db8  00000000  00000000  00070fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000221f  00000000  00000000  00073d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002433d  00000000  00000000  00075fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046645  00000000  00000000  0009a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a31e2  00000000  00000000  000e0929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00183b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbfc  00000000  00000000  00183bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018f825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00191da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000434 	.word	0x20000434
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08029eac 	.word	0x08029eac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000438 	.word	0x20000438
 8000104:	08029eac 	.word	0x08029eac

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802ddd8 	.word	0x0802ddd8
 8000ec8:	0802de18 	.word	0x0802de18
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802de54 	.word	0x0802de54
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000460 	.word	0x20000460
 8003ad8:	20000490 	.word	0x20000490

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	2000045c 	.word	0x2000045c
 8003b38:	20000490 	.word	0x20000490

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000458 	.word	0x20000458

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 fa0c 	bl	8013f74 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	20000454 	.word	0x20000454

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	2000045c 	.word	0x2000045c
 8003b98:	20000460 	.word	0x20000460

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 f9e3 	bl	8013f88 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f00f fc19 	bl	8013470 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000450 	.word	0x20000450
 8003c80:	08029ec8 	.word	0x08029ec8
 8003c84:	08029ed4 	.word	0x08029ed4
 8003c88:	08029ed8 	.word	0x08029ed8
 8003c8c:	08029ee4 	.word	0x08029ee4
 8003c90:	08029f04 	.word	0x08029f04
 8003c94:	20000490 	.word	0x20000490

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 f968 	bl	8013f88 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 f954 	bl	8013f88 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f00f fba5 	bl	8013470 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 f92e 	bl	8013f88 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000498 	.word	0x20000498
 8003d40:	20000499 	.word	0x20000499
 8003d44:	20000450 	.word	0x20000450
 8003d48:	08029f08 	.word	0x08029f08
 8003d4c:	08029ed4 	.word	0x08029ed4
 8003d50:	08029f0c 	.word	0x08029f0c
 8003d54:	08029f04 	.word	0x08029f04

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 f910 	bl	8013f88 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 f904 	bl	8013f88 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f fb47 	bl	8013470 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 f8d0 	bl	8013f88 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000490 	.word	0x20000490
 8003e00:	20000450 	.word	0x20000450
 8003e04:	08029f38 	.word	0x08029f38
 8003e08:	08029f04 	.word	0x08029f04

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 f89d 	bl	8013f88 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000490 	.word	0x20000490

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f fad4 	bl	8013470 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f fa95 	bl	8013470 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000490 	.word	0x20000490
 8003f58:	08029f54 	.word	0x08029f54
 8003f5c:	08029f74 	.word	0x08029f74
 8003f60:	20000450 	.word	0x20000450
 8003f64:	08029f78 	.word	0x08029f78
 8003f68:	08029f04 	.word	0x08029f04

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f fa6e 	bl	8013470 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000450 	.word	0x20000450
 8003fa4:	08029fac 	.word	0x08029fac
 8003fa8:	08029f04 	.word	0x08029f04

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f fa4e 	bl	8013470 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f00f ffd3 	bl	8013f88 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f00f ffc2 	bl	8013f88 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000450 	.word	0x20000450
 8004094:	08029fc0 	.word	0x08029fc0
 8004098:	08029f04 	.word	0x08029f04
 800409c:	20000488 	.word	0x20000488
 80040a0:	20000490 	.word	0x20000490

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f f9d2 	bl	8013470 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f00f ff57 	bl	8013f88 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 fbff 	bl	8028938 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 fbdb 	bl	8028938 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 fbb7 	bl	8028938 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 fb93 	bl	8028938 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 fb69 	bl	8028938 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 fb45 	bl	8028938 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 fb21 	bl	8028938 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 fafd 	bl	8028938 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000450 	.word	0x20000450
 8004378:	08029fdc 	.word	0x08029fdc
 800437c:	08029f04 	.word	0x08029f04
 8004380:	20000464 	.word	0x20000464

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bce      	ldr	r3, [pc, #824]	@ (8004798 <ENS_Upkeep+0x340>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00e ffae 	bl	80133c4 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc9      	ldr	r3, [pc, #804]	@ (800479c <ENS_Upkeep+0x344>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e22e      	b.n	80048da <ENS_Upkeep+0x482>
  }
  switch(ENSState) {
 800447c:	4bc7      	ldr	r3, [pc, #796]	@ (800479c <ENS_Upkeep+0x344>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e210      	b.n	80048a8 <ENS_Upkeep+0x450>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bc5      	ldr	r3, [pc, #788]	@ (80047a0 <ENS_Upkeep+0x348>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4ac4      	ldr	r2, [pc, #784]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004492:	4bc5      	ldr	r3, [pc, #788]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00e ffea 	bl	8013470 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f00f fd6a 	bl	8013f74 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ac2      	ldr	r2, [pc, #776]	@ (80047ac <ENS_Upkeep+0x354>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bbc      	ldr	r3, [pc, #752]	@ (8004798 <ENS_Upkeep+0x340>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bc1      	ldr	r3, [pc, #772]	@ (80047b0 <ENS_Upkeep+0x358>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bc1      	ldr	r3, [pc, #772]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e203      	b.n	80048c0 <ENS_Upkeep+0x468>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4bb8      	ldr	r3, [pc, #736]	@ (800479c <ENS_Upkeep+0x344>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1ff      	b.n	80048c0 <ENS_Upkeep+0x468>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 f83a 	bl	800d538 <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1fc      	b.n	80048c4 <ENS_Upkeep+0x46c>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 f820 	bl	800d510 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bb4      	ldr	r3, [pc, #720]	@ (80047b8 <ENS_Upkeep+0x360>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bb4      	ldr	r3, [pc, #720]	@ (80047bc <ENS_Upkeep+0x364>)
 80044ea:	4ab5      	ldr	r2, [pc, #724]	@ (80047c0 <ENS_Upkeep+0x368>)
 80044ec:	49ae      	ldr	r1, [pc, #696]	@ (80047a8 <ENS_Upkeep+0x350>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00e ffbe 	bl	8013470 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f00f fd47 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 f808 	bl	800d510 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4ba6      	ldr	r3, [pc, #664]	@ (800479c <ENS_Upkeep+0x344>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f00f fd35 	bl	8013f74 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4ba1      	ldr	r3, [pc, #644]	@ (8004798 <ENS_Upkeep+0x340>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1de      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 f80e 	bl	800d538 <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e1d2      	b.n	80048c8 <ENS_Upkeep+0x470>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f008 fff4 	bl	800d510 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f00f fd28 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f008 ffe9 	bl	800d510 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a98      	ldr	r2, [pc, #608]	@ (80047c4 <ENS_Upkeep+0x36c>)
 8004562:	4b91      	ldr	r3, [pc, #580]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00e ff82 	bl	8013470 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a96      	ldr	r2, [pc, #600]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004570:	4b8d      	ldr	r3, [pc, #564]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00e ff7b 	bl	8013470 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a93      	ldr	r2, [pc, #588]	@ (80047cc <ENS_Upkeep+0x374>)
 800457e:	4b8a      	ldr	r3, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00e ff74 	bl	8013470 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f00f fcee 	bl	8013f74 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004798 <ENS_Upkeep+0x340>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e197      	b.n	80048d6 <ENS_Upkeep+0x47e>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b7d      	ldr	r3, [pc, #500]	@ (800479c <ENS_Upkeep+0x344>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e193      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f008 ffc3 	bl	800d538 <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f008 ffbf 	bl	800d538 <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f008 ffb9 	bl	800d538 <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b77      	ldr	r3, [pc, #476]	@ (80047d0 <ENS_Upkeep+0x378>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b77      	ldr	r3, [pc, #476]	@ (80047d4 <ENS_Upkeep+0x37c>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b77      	ldr	r3, [pc, #476]	@ (80047d8 <ENS_Upkeep+0x380>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b77      	ldr	r3, [pc, #476]	@ (80047dc <ENS_Upkeep+0x384>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b77      	ldr	r3, [pc, #476]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b77      	ldr	r3, [pc, #476]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004608:	4a77      	ldr	r2, [pc, #476]	@ (80047e8 <ENS_Upkeep+0x390>)
 800460a:	4967      	ldr	r1, [pc, #412]	@ (80047a8 <ENS_Upkeep+0x350>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00e ff2f 	bl	8013470 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f00f fcaf 	bl	8013f74 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b5e      	ldr	r3, [pc, #376]	@ (8004798 <ENS_Upkeep+0x340>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e158      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f008 ff73 	bl	800d510 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f00f fc99 	bl	8013f74 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b53      	ldr	r3, [pc, #332]	@ (8004798 <ENS_Upkeep+0x340>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f00f fc9a 	bl	8013f88 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f008 ff5b 	bl	800d510 <setSensorLock>
      break;
 800465a:	e13c      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f00f fc90 	bl	8013f88 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f00f fc8a 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f008 ff4b 	bl	800d510 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b48      	ldr	r3, [pc, #288]	@ (800479c <ENS_Upkeep+0x344>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e129      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b5a      	ldr	r3, [pc, #360]	@ (80047ec <ENS_Upkeep+0x394>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d13b      	bne.n	8004702 <ENS_Upkeep+0x2aa>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b59      	ldr	r3, [pc, #356]	@ (80047f0 <ENS_Upkeep+0x398>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b57      	ldr	r3, [pc, #348]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b56      	ldr	r3, [pc, #344]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a56      	ldr	r2, [pc, #344]	@ (80047f4 <ENS_Upkeep+0x39c>)
 800469c:	4956      	ldr	r1, [pc, #344]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00e fee3 	bl	8013470 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 80046aa:	4b54      	ldr	r3, [pc, #336]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4a53      	ldr	r2, [pc, #332]	@ (8004800 <ENS_Upkeep+0x3a8>)
 80046b4:	4950      	ldr	r1, [pc, #320]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	0003      	movs	r3, r0
 80046ba:	2002      	movs	r0, #2
 80046bc:	f00e fed8 	bl	8013470 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046c0:	4b4e      	ldr	r3, [pc, #312]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c2:	6898      	ldr	r0, [r3, #8]
 80046c4:	4b4d      	ldr	r3, [pc, #308]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004804 <ENS_Upkeep+0x3ac>)
 80046ca:	494b      	ldr	r1, [pc, #300]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	0003      	movs	r3, r0
 80046d0:	2002      	movs	r0, #2
 80046d2:	f00e fecd 	bl	8013470 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046d6:	4b49      	ldr	r3, [pc, #292]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046d8:	6918      	ldr	r0, [r3, #16]
 80046da:	4b48      	ldr	r3, [pc, #288]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4a4a      	ldr	r2, [pc, #296]	@ (8004808 <ENS_Upkeep+0x3b0>)
 80046e0:	4945      	ldr	r1, [pc, #276]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	0003      	movs	r3, r0
 80046e6:	2002      	movs	r0, #2
 80046e8:	f00e fec2 	bl	8013470 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046ec:	4b43      	ldr	r3, [pc, #268]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ee:	6998      	ldr	r0, [r3, #24]
 80046f0:	4b42      	ldr	r3, [pc, #264]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a45      	ldr	r2, [pc, #276]	@ (800480c <ENS_Upkeep+0x3b4>)
 80046f6:	4940      	ldr	r1, [pc, #256]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	0003      	movs	r3, r0
 80046fc:	2002      	movs	r0, #2
 80046fe:	f00e feb7 	bl	8013470 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 8004702:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <ENS_Upkeep+0x394>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d103      	bne.n	8004712 <ENS_Upkeep+0x2ba>
 800470a:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <ENS_Upkeep+0x394>)
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e005      	b.n	800471e <ENS_Upkeep+0x2c6>
 8004712:	4b36      	ldr	r3, [pc, #216]	@ (80047ec <ENS_Upkeep+0x394>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <ENS_Upkeep+0x394>)
 800471c:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004720:	7818      	ldrb	r0, [r3, #0]
 8004722:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004724:	8859      	ldrh	r1, [r3, #2]
 8004726:	4b32      	ldr	r3, [pc, #200]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004728:	889b      	ldrh	r3, [r3, #4]
 800472a:	001a      	movs	r2, r3
 800472c:	f000 f9e0 	bl	8004af0 <setENS160>
    ENSState = ENS_LOW_POWER;
 8004730:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <ENS_Upkeep+0x344>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
    break;
 8004736:	e0ce      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004738:	f00f fc1c 	bl	8013f74 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	22fa      	movs	r2, #250	@ 0xfa
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	189a      	adds	r2, r3, r2
 8004744:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <ENS_Upkeep+0x340>)
 8004746:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004748:	4b31      	ldr	r3, [pc, #196]	@ (8004810 <ENS_Upkeep+0x3b8>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2201      	movs	r2, #1
 800474e:	4053      	eors	r3, r2
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d100      	bne.n	8004758 <ENS_Upkeep+0x300>
 8004756:	e076      	b.n	8004846 <ENS_Upkeep+0x3ee>
 8004758:	4b2e      	ldr	r3, [pc, #184]	@ (8004814 <ENS_Upkeep+0x3bc>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4053      	eors	r3, r2
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06f      	beq.n	8004846 <ENS_Upkeep+0x3ee>
 8004766:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <ENS_Upkeep+0x394>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d96b      	bls.n	8004846 <ENS_Upkeep+0x3ee>
      if (getSensorLock() != FREE) {
 800476e:	f008 fee3 	bl	800d538 <getSensorLock>
 8004772:	1e03      	subs	r3, r0, #0
 8004774:	d000      	beq.n	8004778 <ENS_Upkeep+0x320>
 8004776:	e0a9      	b.n	80048cc <ENS_Upkeep+0x474>
        break;
      }
      setSensorLock(ENS160);
 8004778:	2004      	movs	r0, #4
 800477a:	f008 fec9 	bl	800d510 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 800477e:	1cfc      	adds	r4, r7, #3
 8004780:	2000      	movs	r0, #0
 8004782:	f7ff fb43 	bl	8003e0c <ENS160_setMode>
 8004786:	0003      	movs	r3, r0
 8004788:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 800478a:	1cfb      	adds	r3, r7, #3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d042      	beq.n	8004818 <ENS_Upkeep+0x3c0>
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004794:	e041      	b.n	800481a <ENS_Upkeep+0x3c2>
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	20000454 	.word	0x20000454
 800479c:	20000000 	.word	0x20000000
 80047a0:	0802de94 	.word	0x0802de94
 80047a4:	08029ffc 	.word	0x08029ffc
 80047a8:	08029f04 	.word	0x08029f04
 80047ac:	000be6e0 	.word	0x000be6e0
 80047b0:	20000b62 	.word	0x20000b62
 80047b4:	20000459 	.word	0x20000459
 80047b8:	0802a030 	.word	0x0802a030
 80047bc:	0802a038 	.word	0x0802a038
 80047c0:	0802a040 	.word	0x0802a040
 80047c4:	0802a064 	.word	0x0802a064
 80047c8:	0802a07c 	.word	0x0802a07c
 80047cc:	0802a09c 	.word	0x0802a09c
 80047d0:	0802a0b4 	.word	0x0802a0b4
 80047d4:	0802a0bc 	.word	0x0802a0bc
 80047d8:	0802a0c4 	.word	0x0802a0c4
 80047dc:	0802a0cc 	.word	0x0802a0cc
 80047e0:	0802a0d4 	.word	0x0802a0d4
 80047e4:	0802a0dc 	.word	0x0802a0dc
 80047e8:	0802a0e4 	.word	0x0802a0e4
 80047ec:	20000458 	.word	0x20000458
 80047f0:	20000488 	.word	0x20000488
 80047f4:	0802a10c 	.word	0x0802a10c
 80047f8:	08029f74 	.word	0x08029f74
 80047fc:	20000464 	.word	0x20000464
 8004800:	0802a138 	.word	0x0802a138
 8004804:	0802a154 	.word	0x0802a154
 8004808:	0802a170 	.word	0x0802a170
 800480c:	0802a18c 	.word	0x0802a18c
 8004810:	20001e71 	.word	0x20001e71
 8004814:	20001e72 	.word	0x20001e72
 8004818:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800481a:	4a33      	ldr	r2, [pc, #204]	@ (80048e8 <ENS_Upkeep+0x490>)
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	0010      	movs	r0, r2
 8004820:	4a32      	ldr	r2, [pc, #200]	@ (80048ec <ENS_Upkeep+0x494>)
 8004822:	4933      	ldr	r1, [pc, #204]	@ (80048f0 <ENS_Upkeep+0x498>)
 8004824:	9000      	str	r0, [sp, #0]
 8004826:	2003      	movs	r0, #3
 8004828:	f00e fe22 	bl	8013470 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800482c:	200a      	movs	r0, #10
 800482e:	f00f fbab 	bl	8013f88 <HAL_Delay>
      setSensorLock(FREE);
 8004832:	2000      	movs	r0, #0
 8004834:	f008 fe6c 	bl	800d510 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004838:	f00f fb9c 	bl	8013f74 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <ENS_Upkeep+0x49c>)
 8004840:	189a      	adds	r2, r3, r2
 8004842:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <ENS_Upkeep+0x4a0>)
 8004844:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <ENS_Upkeep+0x4a4>)
 8004848:	2208      	movs	r2, #8
 800484a:	701a      	strb	r2, [r3, #0]
    break;
 800484c:	e043      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800484e:	f008 fe73 	bl	800d538 <getSensorLock>
 8004852:	1e03      	subs	r3, r0, #0
 8004854:	d13c      	bne.n	80048d0 <ENS_Upkeep+0x478>
        break;
      }
      setSensorLock(ENS160);
 8004856:	2004      	movs	r0, #4
 8004858:	f008 fe5a 	bl	800d510 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800485c:	1cba      	adds	r2, r7, #2
 800485e:	2301      	movs	r3, #1
 8004860:	2101      	movs	r1, #1
 8004862:	2010      	movs	r0, #16
 8004864:	f7ff f93a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004868:	1cbb      	adds	r3, r7, #2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <ENS_Upkeep+0x43c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004870:	1dfc      	adds	r4, r7, #7
 8004872:	2002      	movs	r0, #2
 8004874:	f7ff faca 	bl	8003e0c <ENS160_setMode>
 8004878:	0003      	movs	r3, r0
 800487a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800487c:	1dfb      	adds	r3, r7, #7
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <ENS_Upkeep+0x430>
 8004884:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <ENS_Upkeep+0x4a8>)
 8004886:	e000      	b.n	800488a <ENS_Upkeep+0x432>
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800488a:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <ENS_Upkeep+0x4ac>)
 800488c:	4918      	ldr	r1, [pc, #96]	@ (80048f0 <ENS_Upkeep+0x498>)
 800488e:	2003      	movs	r0, #3
 8004890:	f00e fdee 	bl	8013470 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004894:	200a      	movs	r0, #10
 8004896:	f00f fb77 	bl	8013f88 <HAL_Delay>
      setSensorLock(FREE);
 800489a:	2000      	movs	r0, #0
 800489c:	f008 fe38 	bl	800d510 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 80048a0:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048a2:	2203      	movs	r2, #3
 80048a4:	701a      	strb	r2, [r3, #0]
    break;
 80048a6:	e016      	b.n	80048d6 <ENS_Upkeep+0x47e>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 80048a8:	4b14      	ldr	r3, [pc, #80]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048aa:	2202      	movs	r2, #2
 80048ac:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 80048ae:	f008 fe43 	bl	800d538 <getSensorLock>
 80048b2:	0003      	movs	r3, r0
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d00d      	beq.n	80048d4 <ENS_Upkeep+0x47c>
      setSensorLock(FREE);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f008 fe29 	bl	800d510 <setSensorLock>
    }
    break;
 80048be:	e009      	b.n	80048d4 <ENS_Upkeep+0x47c>
    break;
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	e008      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	e006      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	e004      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	e002      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	e000      	b.n	80048d6 <ENS_Upkeep+0x47e>
    break;
 80048d4:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b003      	add	sp, #12
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	0802a038 	.word	0x0802a038
 80048e8:	20000458 	.word	0x20000458
 80048ec:	0802a1a8 	.word	0x0802a1a8
 80048f0:	08029f04 	.word	0x08029f04
 80048f4:	0000afc8 	.word	0x0000afc8
 80048f8:	20000454 	.word	0x20000454
 80048fc:	20000000 	.word	0x20000000
 8004900:	0802a030 	.word	0x0802a030
 8004904:	0802a1e0 	.word	0x0802a1e0

08004908 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 800490c:	4b02      	ldr	r3, [pc, #8]	@ (8004918 <forceNTPupdate+0x10>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000674 	.word	0x20000674

0800491c <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004924:	f00f fb26 	bl	8013f74 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	18d2      	adds	r2, r2, r3
 800492e:	4b03      	ldr	r3, [pc, #12]	@ (800493c <setESPTimeStamp+0x20>)
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	20000670 	.word	0x20000670

08004940 <setCharges>:

void setCharges(){
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004944:	f004 fbe0 	bl	8009108 <ReadBatteryVoltage>
 8004948:	1c02      	adds	r2, r0, #0
 800494a:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <setCharges+0x3c>)
 800494c:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800494e:	f004 fc3d 	bl	80091cc <ReadSolarVoltage>
 8004952:	0003      	movs	r3, r0
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe ff4b 	bl	80037f0 <__aeabi_i2d>
 800495a:	2200      	movs	r2, #0
 800495c:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <setCharges+0x40>)
 800495e:	f7fd fbbf 	bl	80020e0 <__aeabi_ddiv>
 8004962:	0002      	movs	r2, r0
 8004964:	000b      	movs	r3, r1
 8004966:	0010      	movs	r0, r2
 8004968:	0019      	movs	r1, r3
 800496a:	f7fe ffdb 	bl	8003924 <__aeabi_d2f>
 800496e:	1c02      	adds	r2, r0, #0
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <setCharges+0x44>)
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	200005c8 	.word	0x200005c8
 8004980:	408f4000 	.word	0x408f4000
 8004984:	200005cc 	.word	0x200005cc

08004988 <checkEEprom>:

bool checkEEprom(){
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800498e:	4b15      	ldr	r3, [pc, #84]	@ (80049e4 <checkEEprom+0x5c>)
 8004990:	4815      	ldr	r0, [pc, #84]	@ (80049e8 <checkEEprom+0x60>)
 8004992:	220c      	movs	r2, #12
 8004994:	0019      	movs	r1, r3
 8004996:	f006 ffcb 	bl	800b930 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800499a:	1dfb      	adds	r3, r7, #7
 800499c:	2200      	movs	r2, #0
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e00e      	b.n	80049c0 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80049a2:	1dfb      	adds	r3, r7, #7
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	@ (80049e4 <checkEEprom+0x5c>)
 80049a8:	5cd3      	ldrb	r3, [r2, r3]
 80049aa:	001a      	movs	r2, r3
 80049ac:	4b0f      	ldr	r3, [pc, #60]	@ (80049ec <checkEEprom+0x64>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	18d2      	adds	r2, r2, r3
 80049b2:	4b0e      	ldr	r3, [pc, #56]	@ (80049ec <checkEEprom+0x64>)
 80049b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	1dfb      	adds	r3, r7, #7
 80049bc:	3201      	adds	r2, #1
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b0b      	cmp	r3, #11
 80049c6:	d9ec      	bls.n	80049a2 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80049c8:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <checkEEprom+0x64>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	425a      	negs	r2, r3
 80049ce:	4153      	adcs	r3, r2
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <checkEEprom+0x68>)
 80049d4:	701a      	strb	r2, [r3, #0]
  return test;
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <checkEEprom+0x68>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b002      	add	sp, #8
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	200006e4 	.word	0x200006e4
 80049e8:	0808000c 	.word	0x0808000c
 80049ec:	200006f0 	.word	0x200006f0
 80049f0:	200006f4 	.word	0x200006f4

080049f4 <checkName>:

bool checkName(){
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80049fa:	4b15      	ldr	r3, [pc, #84]	@ (8004a50 <checkName+0x5c>)
 80049fc:	4815      	ldr	r0, [pc, #84]	@ (8004a54 <checkName+0x60>)
 80049fe:	2220      	movs	r2, #32
 8004a00:	0019      	movs	r1, r3
 8004a02:	f006 ff95 	bl	800b930 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004a06:	1dfb      	adds	r3, r7, #7
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e00e      	b.n	8004a2c <checkName+0x38>
    configSum += nameConfig[i];
 8004a0e:	1dfb      	adds	r3, r7, #7
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	4a0f      	ldr	r2, [pc, #60]	@ (8004a50 <checkName+0x5c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	001a      	movs	r2, r3
 8004a18:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <checkName+0x64>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	18d2      	adds	r2, r2, r3
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <checkName+0x64>)
 8004a20:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	1dfb      	adds	r3, r7, #7
 8004a28:	3201      	adds	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	1dfb      	adds	r3, r7, #7
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b0b      	cmp	r3, #11
 8004a32:	d9ec      	bls.n	8004a0e <checkName+0x1a>
  }
  test = (configSum != 0);
 8004a34:	4b08      	ldr	r3, [pc, #32]	@ (8004a58 <checkName+0x64>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	4193      	sbcs	r3, r2
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <checkName+0x68>)
 8004a40:	701a      	strb	r2, [r3, #0]
  return test;
 8004a42:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <checkName+0x68>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b002      	add	sp, #8
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	200006f8 	.word	0x200006f8
 8004a54:	08080090 	.word	0x08080090
 8004a58:	20000718 	.word	0x20000718
 8004a5c:	2000071c 	.word	0x2000071c

08004a60 <setHIDS>:

void setHIDS(float temp, float humid){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a6a:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <setHIDS+0x20>)
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004a70:	4b03      	ldr	r3, [pc, #12]	@ (8004a80 <setHIDS+0x20>)
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	20000680 	.word	0x20000680

08004a84 <setVOC>:

void setVOC(uint16_t voc) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	0002      	movs	r2, r0
 8004a8c:	1dbb      	adds	r3, r7, #6
 8004a8e:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004a90:	4b04      	ldr	r3, [pc, #16]	@ (8004aa4 <setVOC+0x20>)
 8004a92:	1dba      	adds	r2, r7, #6
 8004a94:	2148      	movs	r1, #72	@ 0x48
 8004a96:	8812      	ldrh	r2, [r2, #0]
 8004a98:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	20000680 	.word	0x20000680

08004aa8 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004ab2:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <setAHT2x+0x20>)
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	639a      	str	r2, [r3, #56]	@ 0x38
//  if (airhum > MeasVal.AHT2x_humiditymax) {
//    MeasVal.AHT2x_humiditymax = airhum;
//  }
  MeasVal.AHT2x_temperature = airtemp;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	@ (8004ac8 <setAHT2x+0x20>)
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	63da      	str	r2, [r3, #60]	@ 0x3c
//  if (airtemp > MeasVal.AHT2x_temperaturemax) {
//    MeasVal.AHT2x_temperaturemax = airtemp;
//  }
}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b002      	add	sp, #8
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	20000680 	.word	0x20000680

08004acc <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004ad6:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <setBMP280+0x20>)
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40
//  if (airtemp > MeasVal.BMP280_temperaturemax) {
//    MeasVal.BMP280_temperaturemax = airtemp;
//  }
  MeasVal.BMP280_airpressure = airhpa;
 8004adc:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <setBMP280+0x20>)
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	645a      	str	r2, [r3, #68]	@ 0x44
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b002      	add	sp, #8
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	20000680 	.word	0x20000680

08004af0 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	0004      	movs	r4, r0
 8004af8:	0008      	movs	r0, r1
 8004afa:	0011      	movs	r1, r2
 8004afc:	1dfb      	adds	r3, r7, #7
 8004afe:	1c22      	adds	r2, r4, #0
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	1c02      	adds	r2, r0, #0
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	1cbb      	adds	r3, r7, #2
 8004b0a:	1c0a      	adds	r2, r1, #0
 8004b0c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b0e:	4b15      	ldr	r3, [pc, #84]	@ (8004b64 <setENS160+0x74>)
 8004b10:	1dfa      	adds	r2, r7, #7
 8004b12:	2154      	movs	r1, #84	@ 0x54
 8004b14:	7812      	ldrb	r2, [r2, #0]
 8004b16:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b18:	4b12      	ldr	r3, [pc, #72]	@ (8004b64 <setENS160+0x74>)
 8004b1a:	2255      	movs	r2, #85	@ 0x55
 8004b1c:	5c9b      	ldrb	r3, [r3, r2]
 8004b1e:	1dfa      	adds	r2, r7, #7
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d904      	bls.n	8004b30 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b26:	4b0f      	ldr	r3, [pc, #60]	@ (8004b64 <setENS160+0x74>)
 8004b28:	1dfa      	adds	r2, r7, #7
 8004b2a:	2155      	movs	r1, #85	@ 0x55
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b30:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <setENS160+0x74>)
 8004b32:	1d3a      	adds	r2, r7, #4
 8004b34:	214a      	movs	r1, #74	@ 0x4a
 8004b36:	8812      	ldrh	r2, [r2, #0]
 8004b38:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <setENS160+0x74>)
 8004b3c:	1cba      	adds	r2, r7, #2
 8004b3e:	2150      	movs	r1, #80	@ 0x50
 8004b40:	8812      	ldrh	r2, [r2, #0]
 8004b42:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <setENS160+0x74>)
 8004b46:	2252      	movs	r2, #82	@ 0x52
 8004b48:	5a9b      	ldrh	r3, [r3, r2]
 8004b4a:	1cba      	adds	r2, r7, #2
 8004b4c:	8812      	ldrh	r2, [r2, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d904      	bls.n	8004b5c <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b52:	4b04      	ldr	r3, [pc, #16]	@ (8004b64 <setENS160+0x74>)
 8004b54:	1cba      	adds	r2, r7, #2
 8004b56:	2152      	movs	r1, #82	@ 0x52
 8004b58:	8812      	ldrh	r2, [r2, #0]
 8004b5a:	525a      	strh	r2, [r3, r1]
  }
}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b003      	add	sp, #12
 8004b62:	bd90      	pop	{r4, r7, pc}
 8004b64:	20000680 	.word	0x20000680

08004b68 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <setMic+0x28>)
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004b7a:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <setMic+0x28>)
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004b80:	4b03      	ldr	r3, [pc, #12]	@ (8004b90 <setMic+0x28>)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b004      	add	sp, #16
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	20000680 	.word	0x20000680

08004b94 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	0002      	movs	r2, r0
 8004b9c:	1dbb      	adds	r3, r7, #6
 8004b9e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004ba0:	1dbb      	adds	r3, r7, #6
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7fc fe3f 	bl	8001828 <__aeabi_i2f>
 8004baa:	1c03      	adds	r3, r0, #0
 8004bac:	490d      	ldr	r1, [pc, #52]	@ (8004be4 <setPM1p0+0x50>)
 8004bae:	1c18      	adds	r0, r3, #0
 8004bb0:	f7fc f878 	bl	8000ca4 <__aeabi_fdiv>
 8004bb4:	1c03      	adds	r3, r0, #0
 8004bb6:	1c1a      	adds	r2, r3, #0
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <setPM1p0+0x54>)
 8004bba:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <setPM1p0+0x54>)
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <setPM1p0+0x54>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	1c19      	adds	r1, r3, #0
 8004bc6:	1c10      	adds	r0, r2, #0
 8004bc8:	f7fb fcc6 	bl	8000558 <__aeabi_fcmpgt>
 8004bcc:	1e03      	subs	r3, r0, #0
 8004bce:	d100      	bne.n	8004bd2 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004bd0:	e003      	b.n	8004bda <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004bd2:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <setPM1p0+0x54>)
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <setPM1p0+0x54>)
 8004bd8:	60da      	str	r2, [r3, #12]
}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b002      	add	sp, #8
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	41200000 	.word	0x41200000
 8004be8:	20000680 	.word	0x20000680

08004bec <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	1dbb      	adds	r3, r7, #6
 8004bf6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004bf8:	1dbb      	adds	r3, r7, #6
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7fc fe13 	bl	8001828 <__aeabi_i2f>
 8004c02:	1c03      	adds	r3, r0, #0
 8004c04:	490d      	ldr	r1, [pc, #52]	@ (8004c3c <setPM2p5+0x50>)
 8004c06:	1c18      	adds	r0, r3, #0
 8004c08:	f7fc f84c 	bl	8000ca4 <__aeabi_fdiv>
 8004c0c:	1c03      	adds	r3, r0, #0
 8004c0e:	1c1a      	adds	r2, r3, #0
 8004c10:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <setPM2p5+0x54>)
 8004c12:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c14:	4b0a      	ldr	r3, [pc, #40]	@ (8004c40 <setPM2p5+0x54>)
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	4b09      	ldr	r3, [pc, #36]	@ (8004c40 <setPM2p5+0x54>)
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	1c19      	adds	r1, r3, #0
 8004c1e:	1c10      	adds	r0, r2, #0
 8004c20:	f7fb fc9a 	bl	8000558 <__aeabi_fcmpgt>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d100      	bne.n	8004c2a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c28:	e003      	b.n	8004c32 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c2a:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <setPM2p5+0x54>)
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <setPM2p5+0x54>)
 8004c30:	615a      	str	r2, [r3, #20]
}
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b002      	add	sp, #8
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	41200000 	.word	0x41200000
 8004c40:	20000680 	.word	0x20000680

08004c44 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	1dbb      	adds	r3, r7, #6
 8004c4e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004c50:	1dbb      	adds	r3, r7, #6
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7fc fde7 	bl	8001828 <__aeabi_i2f>
 8004c5a:	1c03      	adds	r3, r0, #0
 8004c5c:	490d      	ldr	r1, [pc, #52]	@ (8004c94 <setPM4p0+0x50>)
 8004c5e:	1c18      	adds	r0, r3, #0
 8004c60:	f7fc f820 	bl	8000ca4 <__aeabi_fdiv>
 8004c64:	1c03      	adds	r3, r0, #0
 8004c66:	1c1a      	adds	r2, r3, #0
 8004c68:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <setPM4p0+0x54>)
 8004c6a:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <setPM4p0+0x54>)
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <setPM4p0+0x54>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	1c19      	adds	r1, r3, #0
 8004c76:	1c10      	adds	r0, r2, #0
 8004c78:	f7fb fc6e 	bl	8000558 <__aeabi_fcmpgt>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d100      	bne.n	8004c82 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004c80:	e003      	b.n	8004c8a <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004c82:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <setPM4p0+0x54>)
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	4b04      	ldr	r3, [pc, #16]	@ (8004c98 <setPM4p0+0x54>)
 8004c88:	61da      	str	r2, [r3, #28]
}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	41200000 	.word	0x41200000
 8004c98:	20000680 	.word	0x20000680

08004c9c <setPM10>:

void setPM10(uint16_t PM10) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	1dbb      	adds	r3, r7, #6
 8004ca6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fc fdbb 	bl	8001828 <__aeabi_i2f>
 8004cb2:	1c03      	adds	r3, r0, #0
 8004cb4:	490d      	ldr	r1, [pc, #52]	@ (8004cec <setPM10+0x50>)
 8004cb6:	1c18      	adds	r0, r3, #0
 8004cb8:	f7fb fff4 	bl	8000ca4 <__aeabi_fdiv>
 8004cbc:	1c03      	adds	r3, r0, #0
 8004cbe:	1c1a      	adds	r2, r3, #0
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <setPM10+0x54>)
 8004cc2:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <setPM10+0x54>)
 8004cc6:	6a1a      	ldr	r2, [r3, #32]
 8004cc8:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <setPM10+0x54>)
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	1c19      	adds	r1, r3, #0
 8004cce:	1c10      	adds	r0, r2, #0
 8004cd0:	f7fb fc42 	bl	8000558 <__aeabi_fcmpgt>
 8004cd4:	1e03      	subs	r3, r0, #0
 8004cd6:	d100      	bne.n	8004cda <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004cd8:	e003      	b.n	8004ce2 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004cda:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <setPM10+0x54>)
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	4b04      	ldr	r3, [pc, #16]	@ (8004cf0 <setPM10+0x54>)
 8004ce0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004ce2:	46c0      	nop			@ (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b002      	add	sp, #8
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	41200000 	.word	0x41200000
 8004cf0:	20000680 	.word	0x20000680

08004cf4 <setNOx>:

void setNOx(uint16_t nox) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	0002      	movs	r2, r0
 8004cfc:	1dbb      	adds	r3, r7, #6
 8004cfe:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004d00:	4b0a      	ldr	r3, [pc, #40]	@ (8004d2c <setNOx+0x38>)
 8004d02:	1dba      	adds	r2, r7, #6
 8004d04:	214c      	movs	r1, #76	@ 0x4c
 8004d06:	8812      	ldrh	r2, [r2, #0]
 8004d08:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d0a:	4b08      	ldr	r3, [pc, #32]	@ (8004d2c <setNOx+0x38>)
 8004d0c:	224e      	movs	r2, #78	@ 0x4e
 8004d0e:	5a9b      	ldrh	r3, [r3, r2]
 8004d10:	1dba      	adds	r2, r7, #6
 8004d12:	8812      	ldrh	r2, [r2, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d904      	bls.n	8004d22 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d18:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <setNOx+0x38>)
 8004d1a:	1dba      	adds	r2, r7, #6
 8004d1c:	214e      	movs	r1, #78	@ 0x4e
 8004d1e:	8812      	ldrh	r2, [r2, #0]
 8004d20:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b002      	add	sp, #8
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	20000680 	.word	0x20000680

08004d30 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004d3a:	490a      	ldr	r1, [pc, #40]	@ (8004d64 <SetSEN545temphum+0x34>)
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fb ffb1 	bl	8000ca4 <__aeabi_fdiv>
 8004d42:	1c03      	adds	r3, r0, #0
 8004d44:	1c1a      	adds	r2, r3, #0
 8004d46:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <SetSEN545temphum+0x38>)
 8004d48:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004d4a:	4908      	ldr	r1, [pc, #32]	@ (8004d6c <SetSEN545temphum+0x3c>)
 8004d4c:	6838      	ldr	r0, [r7, #0]
 8004d4e:	f7fb ffa9 	bl	8000ca4 <__aeabi_fdiv>
 8004d52:	1c03      	adds	r3, r0, #0
 8004d54:	1c1a      	adds	r2, r3, #0
 8004d56:	4b04      	ldr	r3, [pc, #16]	@ (8004d68 <SetSEN545temphum+0x38>)
 8004d58:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	43480000 	.word	0x43480000
 8004d68:	20000680 	.word	0x20000680
 8004d6c:	42c80000 	.word	0x42c80000

08004d70 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004d74:	f008 ff96 	bl	800dca4 <sen5x_Get_sen5x_enable_state>
 8004d78:	1e03      	subs	r3, r0, #0
 8004d7a:	d00f      	beq.n	8004d9c <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <resetMaxMeasurementValues+0x44>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004d82:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <resetMaxMeasurementValues+0x44>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004d88:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <resetMaxMeasurementValues+0x44>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004d8e:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <resetMaxMeasurementValues+0x44>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004d94:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <resetMaxMeasurementValues+0x44>)
 8004d96:	224e      	movs	r2, #78	@ 0x4e
 8004d98:	2100      	movs	r1, #0
 8004d9a:	5299      	strh	r1, [r3, r2]
  }
//  MeasVal.AHT2x_humiditymax = 0.0;
//  MeasVal.AHT2x_temperaturemax = 0.0;
//  MeasVal.BMP280_temperaturemax = 0.0;
//  MeasVal.BMP280_airpressuremax = 0.0;
  MeasVal.eCO2Indexmax = 0;
 8004d9c:	4b05      	ldr	r3, [pc, #20]	@ (8004db4 <resetMaxMeasurementValues+0x44>)
 8004d9e:	2252      	movs	r2, #82	@ 0x52
 8004da0:	2100      	movs	r1, #0
 8004da2:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004da4:	4b03      	ldr	r3, [pc, #12]	@ (8004db4 <resetMaxMeasurementValues+0x44>)
 8004da6:	2255      	movs	r2, #85	@ 0x55
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]
}
 8004dac:	46c0      	nop			@ (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	20000680 	.word	0x20000680

08004db8 <SetConfigMode>:

void SetConfigMode(){
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <SetConfigMode+0x30>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	4053      	eors	r3, r2
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004dca:	4a08      	ldr	r2, [pc, #32]	@ (8004dec <SetConfigMode+0x34>)
 8004dcc:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <SetConfigMode+0x38>)
 8004dce:	0019      	movs	r1, r3
 8004dd0:	2003      	movs	r0, #3
 8004dd2:	f00e fb4d 	bl	8013470 <CreateLine>
  }
  ReconfigSet = true;
 8004dd6:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <SetConfigMode+0x30>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <SetConfigMode+0x3c>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	200005a7 	.word	0x200005a7
 8004dec:	0802a210 	.word	0x0802a210
 8004df0:	0802a230 	.word	0x0802a230
 8004df4:	2000020b 	.word	0x2000020b

08004df8 <GetReconfigMode>:

bool GetReconfigMode() {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004dfc:	4b02      	ldr	r3, [pc, #8]	@ (8004e08 <GetReconfigMode+0x10>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	200005a7 	.word	0x200005a7

08004e0c <ESP_GetUID>:

void ESP_GetUID(){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004e10:	f00f f8fa 	bl	8014008 <HAL_GetUIDw0>
 8004e14:	0002      	movs	r2, r0
 8004e16:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <ESP_GetUID+0x28>)
 8004e18:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004e1a:	f00f f8ff 	bl	801401c <HAL_GetUIDw1>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <ESP_GetUID+0x28>)
 8004e22:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004e24:	f00f f904 	bl	8014030 <HAL_GetUIDw2>
 8004e28:	0002      	movs	r2, r0
 8004e2a:	4b02      	ldr	r3, [pc, #8]	@ (8004e34 <ESP_GetUID+0x28>)
 8004e2c:	609a      	str	r2, [r3, #8]
}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200005b0 	.word	0x200005b0

08004e38 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004e40:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <ESP_Init+0x2c>)
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004e46:	4b08      	ldr	r3, [pc, #32]	@ (8004e68 <ESP_Init+0x30>)
 8004e48:	2202      	movs	r2, #2
 8004e4a:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004e4c:	f7ff ffde 	bl	8004e0c <ESP_GetUID>
  beurs = checkEEprom();
 8004e50:	f7ff fd9a 	bl	8004988 <checkEEprom>
 8004e54:	0003      	movs	r3, r0
 8004e56:	001a      	movs	r2, r3
 8004e58:	4b04      	ldr	r3, [pc, #16]	@ (8004e6c <ESP_Init+0x34>)
 8004e5a:	701a      	strb	r2, [r3, #0]
}
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	2000049c 	.word	0x2000049c
 8004e68:	2000002c 	.word	0x2000002c
 8004e6c:	200005aa 	.word	0x200005aa

08004e70 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004e70:	b5b0      	push	{r4, r5, r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	000a      	movs	r2, r1
 8004e7a:	1cbb      	adds	r3, r7, #2
 8004e7c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004e7e:	4b11      	ldr	r3, [pc, #68]	@ (8004ec4 <ESP_Send+0x54>)
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	250f      	movs	r5, #15
 8004e84:	197c      	adds	r4, r7, r5
 8004e86:	1cbb      	adds	r3, r7, #2
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	f017 fec5 	bl	801cc1c <HAL_UART_Transmit_DMA>
 8004e92:	0003      	movs	r3, r0
 8004e94:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004e96:	197b      	adds	r3, r7, r5
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <ESP_Send+0x58>)
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <ESP_Send+0x5c>)
 8004ea2:	0019      	movs	r1, r3
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f00e fae3 	bl	8013470 <CreateLine>
    return false;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e006      	b.n	8004ebc <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4b07      	ldr	r3, [pc, #28]	@ (8004ed0 <ESP_Send+0x60>)
 8004eb2:	0011      	movs	r1, r2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f020 fd9f 	bl	80259f8 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004eba:	2301      	movs	r3, #1
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b004      	add	sp, #16
 8004ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec4:	2000049c 	.word	0x2000049c
 8004ec8:	0802a234 	.word	0x0802a234
 8004ecc:	0802a254 	.word	0x0802a254
 8004ed0:	0802a258 	.word	0x0802a258

08004ed4 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	000a      	movs	r2, r1
 8004ede:	1cbb      	adds	r3, r7, #2
 8004ee0:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8005054 <ESP_Receive+0x180>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004ee8:	260f      	movs	r6, #15
 8004eea:	19bb      	adds	r3, r7, r6
 8004eec:	2200      	movs	r2, #0
 8004eee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004ef0:	4b59      	ldr	r3, [pc, #356]	@ (8005058 <ESP_Receive+0x184>)
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	250d      	movs	r5, #13
 8004ef6:	197c      	adds	r4, r7, r5
 8004ef8:	1cbb      	adds	r3, r7, #2
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	0019      	movs	r1, r3
 8004f00:	f017 ff1c 	bl	801cd3c <HAL_UART_Receive_DMA>
 8004f04:	0003      	movs	r3, r0
 8004f06:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f08:	002c      	movs	r4, r5
 8004f0a:	193b      	adds	r3, r7, r4
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d100      	bne.n	8004f14 <ESP_Receive+0x40>
 8004f12:	e09a      	b.n	800504a <ESP_Receive+0x176>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f14:	4b50      	ldr	r3, [pc, #320]	@ (8005058 <ESP_Receive+0x184>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2284      	movs	r2, #132	@ 0x84
 8004f1a:	589b      	ldr	r3, [r3, r2]
 8004f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800505c <ESP_Receive+0x188>)
 8004f1e:	4950      	ldr	r1, [pc, #320]	@ (8005060 <ESP_Receive+0x18c>)
 8004f20:	2001      	movs	r0, #1
 8004f22:	f00e faa5 	bl	8013470 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004f26:	193b      	adds	r3, r7, r4
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d008      	beq.n	8004f42 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004f30:	4a4c      	ldr	r2, [pc, #304]	@ (8005064 <ESP_Receive+0x190>)
 8004f32:	4b4b      	ldr	r3, [pc, #300]	@ (8005060 <ESP_Receive+0x18c>)
 8004f34:	0019      	movs	r1, r3
 8004f36:	2001      	movs	r0, #1
 8004f38:	f00e fa9a 	bl	8013470 <CreateLine>
      reset = true;
 8004f3c:	19bb      	adds	r3, r7, r6
 8004f3e:	2201      	movs	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004f42:	230d      	movs	r3, #13
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d005      	beq.n	8004f5a <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004f4e:	4a46      	ldr	r2, [pc, #280]	@ (8005068 <ESP_Receive+0x194>)
 8004f50:	4b43      	ldr	r3, [pc, #268]	@ (8005060 <ESP_Receive+0x18c>)
 8004f52:	0019      	movs	r1, r3
 8004f54:	2001      	movs	r0, #1
 8004f56:	f00e fa8b 	bl	8013470 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004f5a:	230d      	movs	r3, #13
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2204      	movs	r2, #4
 8004f62:	4013      	ands	r3, r2
 8004f64:	d005      	beq.n	8004f72 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004f66:	4a41      	ldr	r2, [pc, #260]	@ (800506c <ESP_Receive+0x198>)
 8004f68:	4b3d      	ldr	r3, [pc, #244]	@ (8005060 <ESP_Receive+0x18c>)
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f00e fa7f 	bl	8013470 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004f72:	230d      	movs	r3, #13
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d005      	beq.n	8004f8a <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8005070 <ESP_Receive+0x19c>)
 8004f80:	4b37      	ldr	r3, [pc, #220]	@ (8005060 <ESP_Receive+0x18c>)
 8004f82:	0019      	movs	r1, r3
 8004f84:	2001      	movs	r0, #1
 8004f86:	f00e fa73 	bl	8013470 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004f8a:	230d      	movs	r3, #13
 8004f8c:	18fb      	adds	r3, r7, r3
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	4013      	ands	r3, r2
 8004f94:	d005      	beq.n	8004fa2 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8004f96:	4a37      	ldr	r2, [pc, #220]	@ (8005074 <ESP_Receive+0x1a0>)
 8004f98:	4b31      	ldr	r3, [pc, #196]	@ (8005060 <ESP_Receive+0x18c>)
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f00e fa67 	bl	8013470 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8004fa2:	230d      	movs	r3, #13
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	4013      	ands	r3, r2
 8004fac:	d005      	beq.n	8004fba <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004fae:	4a32      	ldr	r2, [pc, #200]	@ (8005078 <ESP_Receive+0x1a4>)
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005060 <ESP_Receive+0x18c>)
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	f00e fa5b 	bl	8013470 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004fba:	230d      	movs	r3, #13
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2240      	movs	r2, #64	@ 0x40
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d005      	beq.n	8004fd2 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8004fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800507c <ESP_Receive+0x1a8>)
 8004fc8:	4b25      	ldr	r3, [pc, #148]	@ (8005060 <ESP_Receive+0x18c>)
 8004fca:	0019      	movs	r1, r3
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f00e fa4f 	bl	8013470 <CreateLine>
    }
#endif
    if (reset) {
 8004fd2:	230f      	movs	r3, #15
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d031      	beq.n	8005040 <ESP_Receive+0x16c>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004fdc:	4b28      	ldr	r3, [pc, #160]	@ (8005080 <ESP_Receive+0x1ac>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f010 fa57 	bl	8015496 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f00e ffcd 	bl	8013f88 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004fee:	2380      	movs	r3, #128	@ 0x80
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	4824      	ldr	r0, [pc, #144]	@ (8005084 <ESP_Receive+0x1b0>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	f010 fa4d 	bl	8015496 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	f00e ffc3 	bl	8013f88 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005002:	4b1f      	ldr	r3, [pc, #124]	@ (8005080 <ESP_Receive+0x1ac>)
 8005004:	2200      	movs	r2, #0
 8005006:	2102      	movs	r1, #2
 8005008:	0018      	movs	r0, r3
 800500a:	f010 fa44 	bl	8015496 <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 800500e:	230e      	movs	r3, #14
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e00c      	b.n	8005032 <ESP_Receive+0x15e>
        SetAllREDLED();
 8005018:	f00d f8f8 	bl	801220c <SetAllREDLED>
        HAL_Delay(500);
 800501c:	23fa      	movs	r3, #250	@ 0xfa
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	0018      	movs	r0, r3
 8005022:	f00e ffb1 	bl	8013f88 <HAL_Delay>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8005026:	210e      	movs	r1, #14
 8005028:	187b      	adds	r3, r7, r1
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	187b      	adds	r3, r7, r1
 800502e:	3201      	adds	r2, #1
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	230e      	movs	r3, #14
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b05      	cmp	r3, #5
 800503a:	d9ed      	bls.n	8005018 <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 800503c:	f00f fc63 	bl	8014906 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8005040:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <ESP_Receive+0x180>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
    return false;
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <ESP_Receive+0x178>
  }
  return true;
 800504a:	2301      	movs	r3, #1
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b005      	add	sp, #20
 8005052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005054:	200004a0 	.word	0x200004a0
 8005058:	2000049c 	.word	0x2000049c
 800505c:	0802a268 	.word	0x0802a268
 8005060:	0802a254 	.word	0x0802a254
 8005064:	0802a298 	.word	0x0802a298
 8005068:	0802a2bc 	.word	0x0802a2bc
 800506c:	0802a2e0 	.word	0x0802a2e0
 8005070:	0802a304 	.word	0x0802a304
 8005074:	0802a328 	.word	0x0802a328
 8005078:	0802a354 	.word	0x0802a354
 800507c:	0802a384 	.word	0x0802a384
 8005080:	50001c00 	.word	0x50001c00
 8005084:	50000800 	.word	0x50000800

08005088 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8005090:	4b39      	ldr	r3, [pc, #228]	@ (8005178 <HAL_UART_ErrorCallback+0xf0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d16b      	bne.n	8005172 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2284      	movs	r2, #132	@ 0x84
 800509e:	589b      	ldr	r3, [r3, r2]
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d065      	beq.n	8005170 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2284      	movs	r2, #132	@ 0x84
 80050a8:	589b      	ldr	r3, [r3, r2]
 80050aa:	4a34      	ldr	r2, [pc, #208]	@ (800517c <HAL_UART_ErrorCallback+0xf4>)
 80050ac:	4934      	ldr	r1, [pc, #208]	@ (8005180 <HAL_UART_ErrorCallback+0xf8>)
 80050ae:	2003      	movs	r0, #3
 80050b0:	f00e f9de 	bl	8013470 <CreateLine>
    switch (huart->ErrorCode) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2284      	movs	r2, #132	@ 0x84
 80050b8:	589b      	ldr	r3, [r3, r2]
 80050ba:	2b0c      	cmp	r3, #12
 80050bc:	d851      	bhi.n	8005162 <HAL_UART_ErrorCallback+0xda>
 80050be:	009a      	lsls	r2, r3, #2
 80050c0:	4b30      	ldr	r3, [pc, #192]	@ (8005184 <HAL_UART_ErrorCallback+0xfc>)
 80050c2:	18d3      	adds	r3, r2, r3
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 80050c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005188 <HAL_UART_ErrorCallback+0x100>)
 80050ca:	4b30      	ldr	r3, [pc, #192]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 80050cc:	0019      	movs	r1, r3
 80050ce:	2001      	movs	r0, #1
 80050d0:	f00e f9ce 	bl	8013470 <CreateLine>
        break;
 80050d4:	e04d      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 80050d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005190 <HAL_UART_ErrorCallback+0x108>)
 80050d8:	4b2c      	ldr	r3, [pc, #176]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 80050da:	0019      	movs	r1, r3
 80050dc:	2001      	movs	r0, #1
 80050de:	f00e f9c7 	bl	8013470 <CreateLine>
        break;
 80050e2:	e046      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 80050e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005194 <HAL_UART_ErrorCallback+0x10c>)
 80050e6:	4b29      	ldr	r3, [pc, #164]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 80050e8:	0019      	movs	r1, r3
 80050ea:	2001      	movs	r0, #1
 80050ec:	f00e f9c0 	bl	8013470 <CreateLine>
        break;
 80050f0:	e03f      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 80050f2:	4a29      	ldr	r2, [pc, #164]	@ (8005198 <HAL_UART_ErrorCallback+0x110>)
 80050f4:	4b25      	ldr	r3, [pc, #148]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 80050f6:	0019      	movs	r1, r3
 80050f8:	2001      	movs	r0, #1
 80050fa:	f00e f9b9 	bl	8013470 <CreateLine>
        break;
 80050fe:	e038      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8005100:	4a26      	ldr	r2, [pc, #152]	@ (800519c <HAL_UART_ErrorCallback+0x114>)
 8005102:	4b22      	ldr	r3, [pc, #136]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 8005104:	0019      	movs	r1, r3
 8005106:	2001      	movs	r0, #1
 8005108:	f00e f9b2 	bl	8013470 <CreateLine>
        break;
 800510c:	e031      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 800510e:	4a24      	ldr	r2, [pc, #144]	@ (80051a0 <HAL_UART_ErrorCallback+0x118>)
 8005110:	4b1e      	ldr	r3, [pc, #120]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 8005112:	0019      	movs	r1, r3
 8005114:	2001      	movs	r0, #1
 8005116:	f00e f9ab 	bl	8013470 <CreateLine>
        break;
 800511a:	e02a      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 800511c:	4a21      	ldr	r2, [pc, #132]	@ (80051a4 <HAL_UART_ErrorCallback+0x11c>)
 800511e:	4b1b      	ldr	r3, [pc, #108]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 8005120:	0019      	movs	r1, r3
 8005122:	2001      	movs	r0, #1
 8005124:	f00e f9a4 	bl	8013470 <CreateLine>
        break;
 8005128:	e023      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 800512a:	4a1f      	ldr	r2, [pc, #124]	@ (80051a8 <HAL_UART_ErrorCallback+0x120>)
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 800512e:	0019      	movs	r1, r3
 8005130:	2001      	movs	r0, #1
 8005132:	f00e f99d 	bl	8013470 <CreateLine>
        break;
 8005136:	e01c      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8005138:	4a1c      	ldr	r2, [pc, #112]	@ (80051ac <HAL_UART_ErrorCallback+0x124>)
 800513a:	4b14      	ldr	r3, [pc, #80]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 800513c:	0019      	movs	r1, r3
 800513e:	2001      	movs	r0, #1
 8005140:	f00e f996 	bl	8013470 <CreateLine>
        break;
 8005144:	e015      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8005146:	4a1a      	ldr	r2, [pc, #104]	@ (80051b0 <HAL_UART_ErrorCallback+0x128>)
 8005148:	4b10      	ldr	r3, [pc, #64]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 800514a:	0019      	movs	r1, r3
 800514c:	2001      	movs	r0, #1
 800514e:	f00e f98f 	bl	8013470 <CreateLine>
        break;
 8005152:	e00e      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8005154:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <HAL_UART_ErrorCallback+0x12c>)
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 8005158:	0019      	movs	r1, r3
 800515a:	2001      	movs	r0, #1
 800515c:	f00e f988 	bl	8013470 <CreateLine>
        break;
 8005160:	e007      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8005162:	4a15      	ldr	r2, [pc, #84]	@ (80051b8 <HAL_UART_ErrorCallback+0x130>)
 8005164:	4b09      	ldr	r3, [pc, #36]	@ (800518c <HAL_UART_ErrorCallback+0x104>)
 8005166:	0019      	movs	r1, r3
 8005168:	2001      	movs	r0, #1
 800516a:	f00e f981 	bl	8013470 <CreateLine>
 800516e:	e000      	b.n	8005172 <HAL_UART_ErrorCallback+0xea>
      return;
 8005170:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}
 8005178:	2000049c 	.word	0x2000049c
 800517c:	0802a3b4 	.word	0x0802a3b4
 8005180:	0802a230 	.word	0x0802a230
 8005184:	0802df44 	.word	0x0802df44
 8005188:	0802a3e4 	.word	0x0802a3e4
 800518c:	0802a254 	.word	0x0802a254
 8005190:	0802a418 	.word	0x0802a418
 8005194:	0802a444 	.word	0x0802a444
 8005198:	0802a478 	.word	0x0802a478
 800519c:	0802a4a4 	.word	0x0802a4a4
 80051a0:	0802a4cc 	.word	0x0802a4cc
 80051a4:	0802a4fc 	.word	0x0802a4fc
 80051a8:	0802a534 	.word	0x0802a534
 80051ac:	0802a56c 	.word	0x0802a56c
 80051b0:	0802a594 	.word	0x0802a594
 80051b4:	0802a5bc 	.word	0x0802a5bc
 80051b8:	0802a5e8 	.word	0x0802a5e8

080051bc <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b42      	cmp	r3, #66	@ 0x42
 80051ce:	d905      	bls.n	80051dc <isKeyValid+0x20>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2bff      	cmp	r3, #255	@ 0xff
 80051d6:	d001      	beq.n	80051dc <isKeyValid+0x20>
    return true;
 80051d8:	2301      	movs	r3, #1
 80051da:	e01d      	b.n	8005218 <isKeyValid+0x5c>
  else {
    printf("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005220 <isKeyValid+0x64>)
 80051e2:	0018      	movs	r0, r3
 80051e4:	f020 fc08 	bl	80259f8 <iprintf>
    for (int i = 0; i < 12; i++) {
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e00c      	b.n	8005208 <isKeyValid+0x4c>
      printf("%02x", data[i]);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	18d3      	adds	r3, r2, r3
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	001a      	movs	r2, r3
 80051f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005224 <isKeyValid+0x68>)
 80051fa:	0011      	movs	r1, r2
 80051fc:	0018      	movs	r0, r3
 80051fe:	f020 fbfb 	bl	80259f8 <iprintf>
    for (int i = 0; i < 12; i++) {
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3301      	adds	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b0b      	cmp	r3, #11
 800520c:	ddef      	ble.n	80051ee <isKeyValid+0x32>
    }
    printf("\r\n");
 800520e:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <isKeyValid+0x6c>)
 8005210:	0018      	movs	r0, r3
 8005212:	f020 fc57 	bl	8025ac4 <puts>
    return false;
 8005216:	2300      	movs	r3, #0
  }
}
 8005218:	0018      	movs	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	b006      	add	sp, #24
 800521e:	bd80      	pop	{r7, pc}
 8005220:	0802a60c 	.word	0x0802a60c
 8005224:	0802a644 	.word	0x0802a644
 8005228:	0802a64c 	.word	0x0802a64c

0800522c <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e010      	b.n	800525e <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	001a      	movs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1898      	adds	r0, r3, r2
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	18d3      	adds	r3, r2, r3
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	001a      	movs	r2, r3
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <uint8ArrayToString+0x44>)
 8005252:	0019      	movs	r1, r3
 8005254:	f020 fc40 	bl	8025ad8 <siprintf>
  for (int i = 0; i < 12; i++) {
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b0b      	cmp	r3, #11
 8005262:	ddeb      	ble.n	800523c <uint8ArrayToString+0x10>
  }
}
 8005264:	46c0      	nop			@ (mov r8, r8)
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	46bd      	mov	sp, r7
 800526a:	b004      	add	sp, #16
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	0802a644 	.word	0x0802a644

08005274 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8005274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005276:	b089      	sub	sp, #36	@ 0x24
 8005278:	af04      	add	r7, sp, #16
 800527a:	6039      	str	r1, [r7, #0]
 800527c:	0011      	movs	r1, r2
 800527e:	1dfb      	adds	r3, r7, #7
 8005280:	1c02      	adds	r2, r0, #0
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	1dbb      	adds	r3, r7, #6
 8005286:	1c0a      	adds	r2, r1, #0
 8005288:	701a      	strb	r2, [r3, #0]
#endif
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 800528a:	f7ff fbb3 	bl	80049f4 <checkName>
 800528e:	1e03      	subs	r3, r0, #0
 8005290:	d00a      	beq.n	80052a8 <CreateMessage+0x34>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005292:	4b03      	ldr	r3, [pc, #12]	@ (80052a0 <CreateMessage+0x2c>)
 8005294:	4803      	ldr	r0, [pc, #12]	@ (80052a4 <CreateMessage+0x30>)
 8005296:	2220      	movs	r2, #32
 8005298:	0019      	movs	r1, r3
 800529a:	f006 fb49 	bl	800b930 <ReadUint8ArrayEEprom>
 800529e:	e009      	b.n	80052b4 <CreateMessage+0x40>
 80052a0:	20000720 	.word	0x20000720
 80052a4:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 80052a8:	4bed      	ldr	r3, [pc, #948]	@ (8005660 <CreateMessage+0x3ec>)
 80052aa:	4aee      	ldr	r2, [pc, #952]	@ (8005664 <CreateMessage+0x3f0>)
 80052ac:	6811      	ldr	r1, [r2, #0]
 80052ae:	6019      	str	r1, [r3, #0]
 80052b0:	7912      	ldrb	r2, [r2, #4]
 80052b2:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80052b4:	f7ff fb44 	bl	8004940 <setCharges>
  uint16_t index = 0;
 80052b8:	260e      	movs	r6, #14
 80052ba:	19bb      	adds	r3, r7, r6
 80052bc:	2200      	movs	r2, #0
 80052be:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80052c0:	19bb      	adds	r3, r7, r6
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	4be8      	ldr	r3, [pc, #928]	@ (8005668 <CreateMessage+0x3f4>)
 80052c6:	18d3      	adds	r3, r2, r3
 80052c8:	4ae8      	ldr	r2, [pc, #928]	@ (800566c <CreateMessage+0x3f8>)
 80052ca:	0011      	movs	r1, r2
 80052cc:	0018      	movs	r0, r3
 80052ce:	f020 fc03 	bl	8025ad8 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80052d2:	4be7      	ldr	r3, [pc, #924]	@ (8005670 <CreateMessage+0x3fc>)
 80052d4:	48e7      	ldr	r0, [pc, #924]	@ (8005674 <CreateMessage+0x400>)
 80052d6:	220c      	movs	r2, #12
 80052d8:	0019      	movs	r1, r3
 80052da:	f006 fb29 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80052de:	4ae4      	ldr	r2, [pc, #912]	@ (8005670 <CreateMessage+0x3fc>)
 80052e0:	4be5      	ldr	r3, [pc, #916]	@ (8005678 <CreateMessage+0x404>)
 80052e2:	0011      	movs	r1, r2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7ff ffa1 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 80052ea:	4be4      	ldr	r3, [pc, #912]	@ (800567c <CreateMessage+0x408>)
 80052ec:	689c      	ldr	r4, [r3, #8]
 80052ee:	4be4      	ldr	r3, [pc, #912]	@ (8005680 <CreateMessage+0x40c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	1c18      	adds	r0, r3, #0
 80052f4:	f7fe face 	bl	8003894 <__aeabi_f2d>
 80052f8:	0002      	movs	r2, r0
 80052fa:	000b      	movs	r3, r1
 80052fc:	4dd8      	ldr	r5, [pc, #864]	@ (8005660 <CreateMessage+0x3ec>)
 80052fe:	49e1      	ldr	r1, [pc, #900]	@ (8005684 <CreateMessage+0x410>)
 8005300:	48e1      	ldr	r0, [pc, #900]	@ (8005688 <CreateMessage+0x414>)
 8005302:	9202      	str	r2, [sp, #8]
 8005304:	9303      	str	r3, [sp, #12]
 8005306:	4bdc      	ldr	r3, [pc, #880]	@ (8005678 <CreateMessage+0x404>)
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	002b      	movs	r3, r5
 800530c:	0022      	movs	r2, r4
 800530e:	f020 fbe3 	bl	8025ad8 <siprintf>
#endif
index = strlen(message);
 8005312:	4bd5      	ldr	r3, [pc, #852]	@ (8005668 <CreateMessage+0x3f4>)
 8005314:	0018      	movs	r0, r3
 8005316:	f7fa ff29 	bl	800016c <strlen>
 800531a:	0002      	movs	r2, r0
 800531c:	19bb      	adds	r3, r7, r6
 800531e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005320:	1dbb      	adds	r3, r7, #6
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d019      	beq.n	800535c <CreateMessage+0xe8>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005328:	4bcf      	ldr	r3, [pc, #828]	@ (8005668 <CreateMessage+0x3f4>)
 800532a:	0018      	movs	r0, r3
 800532c:	f7fa ff1e 	bl	800016c <strlen>
 8005330:	0003      	movs	r3, r0
 8005332:	b29a      	uxth	r2, r3
 8005334:	4bcc      	ldr	r3, [pc, #816]	@ (8005668 <CreateMessage+0x3f4>)
 8005336:	0011      	movs	r1, r2
 8005338:	0018      	movs	r0, r3
 800533a:	f7ff fd99 	bl	8004e70 <ESP_Send>
 800533e:	0003      	movs	r3, r0
 8005340:	001a      	movs	r2, r3
 8005342:	4bd2      	ldr	r3, [pc, #840]	@ (800568c <CreateMessage+0x418>)
 8005344:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005346:	4bd2      	ldr	r3, [pc, #840]	@ (8005690 <CreateMessage+0x41c>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	001a      	movs	r2, r3
 800534c:	4bcf      	ldr	r3, [pc, #828]	@ (800568c <CreateMessage+0x418>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	4013      	ands	r3, r2
 8005352:	1e5a      	subs	r2, r3, #1
 8005354:	4193      	sbcs	r3, r2
 8005356:	b2da      	uxtb	r2, r3
 8005358:	4bcd      	ldr	r3, [pc, #820]	@ (8005690 <CreateMessage+0x41c>)
 800535a:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 800535c:	4bc4      	ldr	r3, [pc, #784]	@ (8005670 <CreateMessage+0x3fc>)
 800535e:	48cd      	ldr	r0, [pc, #820]	@ (8005694 <CreateMessage+0x420>)
 8005360:	220c      	movs	r2, #12
 8005362:	0019      	movs	r1, r3
 8005364:	f006 fae4 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005368:	4ac1      	ldr	r2, [pc, #772]	@ (8005670 <CreateMessage+0x3fc>)
 800536a:	4bc3      	ldr	r3, [pc, #780]	@ (8005678 <CreateMessage+0x404>)
 800536c:	0011      	movs	r1, r2
 800536e:	0018      	movs	r0, r3
 8005370:	f7ff ff5c 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8005374:	4bc1      	ldr	r3, [pc, #772]	@ (800567c <CreateMessage+0x408>)
 8005376:	689c      	ldr	r4, [r3, #8]
 8005378:	4bc1      	ldr	r3, [pc, #772]	@ (8005680 <CreateMessage+0x40c>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	1c18      	adds	r0, r3, #0
 800537e:	f7fe fa89 	bl	8003894 <__aeabi_f2d>
 8005382:	0002      	movs	r2, r0
 8005384:	000b      	movs	r3, r1
 8005386:	4db6      	ldr	r5, [pc, #728]	@ (8005660 <CreateMessage+0x3ec>)
 8005388:	49c3      	ldr	r1, [pc, #780]	@ (8005698 <CreateMessage+0x424>)
 800538a:	48b7      	ldr	r0, [pc, #732]	@ (8005668 <CreateMessage+0x3f4>)
 800538c:	9202      	str	r2, [sp, #8]
 800538e:	9303      	str	r3, [sp, #12]
 8005390:	4bb9      	ldr	r3, [pc, #740]	@ (8005678 <CreateMessage+0x404>)
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	002b      	movs	r3, r5
 8005396:	0022      	movs	r2, r4
 8005398:	f020 fb9e 	bl	8025ad8 <siprintf>
#endif
  index += strlen(message);
 800539c:	4bb2      	ldr	r3, [pc, #712]	@ (8005668 <CreateMessage+0x3f4>)
 800539e:	0018      	movs	r0, r3
 80053a0:	f7fa fee4 	bl	800016c <strlen>
 80053a4:	0003      	movs	r3, r0
 80053a6:	b299      	uxth	r1, r3
 80053a8:	220e      	movs	r2, #14
 80053aa:	18bb      	adds	r3, r7, r2
 80053ac:	18ba      	adds	r2, r7, r2
 80053ae:	8812      	ldrh	r2, [r2, #0]
 80053b0:	188a      	adds	r2, r1, r2
 80053b2:	801a      	strh	r2, [r3, #0]
  if (send) {
 80053b4:	1dbb      	adds	r3, r7, #6
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d019      	beq.n	80053f0 <CreateMessage+0x17c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80053bc:	4baa      	ldr	r3, [pc, #680]	@ (8005668 <CreateMessage+0x3f4>)
 80053be:	0018      	movs	r0, r3
 80053c0:	f7fa fed4 	bl	800016c <strlen>
 80053c4:	0003      	movs	r3, r0
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	4ba7      	ldr	r3, [pc, #668]	@ (8005668 <CreateMessage+0x3f4>)
 80053ca:	0011      	movs	r1, r2
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7ff fd4f 	bl	8004e70 <ESP_Send>
 80053d2:	0003      	movs	r3, r0
 80053d4:	001a      	movs	r2, r3
 80053d6:	4bad      	ldr	r3, [pc, #692]	@ (800568c <CreateMessage+0x418>)
 80053d8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053da:	4bad      	ldr	r3, [pc, #692]	@ (8005690 <CreateMessage+0x41c>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	001a      	movs	r2, r3
 80053e0:	4baa      	ldr	r3, [pc, #680]	@ (800568c <CreateMessage+0x418>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	4013      	ands	r3, r2
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	4193      	sbcs	r3, r2
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	4ba8      	ldr	r3, [pc, #672]	@ (8005690 <CreateMessage+0x41c>)
 80053ee:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80053f0:	4b9f      	ldr	r3, [pc, #636]	@ (8005670 <CreateMessage+0x3fc>)
 80053f2:	48aa      	ldr	r0, [pc, #680]	@ (800569c <CreateMessage+0x428>)
 80053f4:	220c      	movs	r2, #12
 80053f6:	0019      	movs	r1, r3
 80053f8:	f006 fa9a 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80053fc:	4a9c      	ldr	r2, [pc, #624]	@ (8005670 <CreateMessage+0x3fc>)
 80053fe:	4b9e      	ldr	r3, [pc, #632]	@ (8005678 <CreateMessage+0x404>)
 8005400:	0011      	movs	r1, r2
 8005402:	0018      	movs	r0, r3
 8005404:	f7ff ff12 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 8005408:	4b9c      	ldr	r3, [pc, #624]	@ (800567c <CreateMessage+0x408>)
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	4b9c      	ldr	r3, [pc, #624]	@ (8005680 <CreateMessage+0x40c>)
 800540e:	2148      	movs	r1, #72	@ 0x48
 8005410:	5a5b      	ldrh	r3, [r3, r1]
 8005412:	4c93      	ldr	r4, [pc, #588]	@ (8005660 <CreateMessage+0x3ec>)
 8005414:	49a2      	ldr	r1, [pc, #648]	@ (80056a0 <CreateMessage+0x42c>)
 8005416:	4894      	ldr	r0, [pc, #592]	@ (8005668 <CreateMessage+0x3f4>)
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	4b97      	ldr	r3, [pc, #604]	@ (8005678 <CreateMessage+0x404>)
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	0023      	movs	r3, r4
 8005420:	f020 fb5a 	bl	8025ad8 <siprintf>
#endif
  index += strlen(message);
 8005424:	4b90      	ldr	r3, [pc, #576]	@ (8005668 <CreateMessage+0x3f4>)
 8005426:	0018      	movs	r0, r3
 8005428:	f7fa fea0 	bl	800016c <strlen>
 800542c:	0003      	movs	r3, r0
 800542e:	b299      	uxth	r1, r3
 8005430:	220e      	movs	r2, #14
 8005432:	18bb      	adds	r3, r7, r2
 8005434:	18ba      	adds	r2, r7, r2
 8005436:	8812      	ldrh	r2, [r2, #0]
 8005438:	188a      	adds	r2, r1, r2
 800543a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800543c:	1dbb      	adds	r3, r7, #6
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d019      	beq.n	8005478 <CreateMessage+0x204>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005444:	4b88      	ldr	r3, [pc, #544]	@ (8005668 <CreateMessage+0x3f4>)
 8005446:	0018      	movs	r0, r3
 8005448:	f7fa fe90 	bl	800016c <strlen>
 800544c:	0003      	movs	r3, r0
 800544e:	b29a      	uxth	r2, r3
 8005450:	4b85      	ldr	r3, [pc, #532]	@ (8005668 <CreateMessage+0x3f4>)
 8005452:	0011      	movs	r1, r2
 8005454:	0018      	movs	r0, r3
 8005456:	f7ff fd0b 	bl	8004e70 <ESP_Send>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	4b8b      	ldr	r3, [pc, #556]	@ (800568c <CreateMessage+0x418>)
 8005460:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005462:	4b8b      	ldr	r3, [pc, #556]	@ (8005690 <CreateMessage+0x41c>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	001a      	movs	r2, r3
 8005468:	4b88      	ldr	r3, [pc, #544]	@ (800568c <CreateMessage+0x418>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	4013      	ands	r3, r2
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	4193      	sbcs	r3, r2
 8005472:	b2da      	uxtb	r2, r3
 8005474:	4b86      	ldr	r3, [pc, #536]	@ (8005690 <CreateMessage+0x41c>)
 8005476:	701a      	strb	r2, [r3, #0]
      retstat &= status;
    }
  }
#endif

  if (IsBMP280SensorPresent()) {
 8005478:	f007 fbd6 	bl	800cc28 <IsBMP280SensorPresent>
 800547c:	1e03      	subs	r3, r0, #0
 800547e:	d100      	bne.n	8005482 <CreateMessage+0x20e>
 8005480:	e0ab      	b.n	80055da <CreateMessage+0x366>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 8005482:	4b7b      	ldr	r3, [pc, #492]	@ (8005670 <CreateMessage+0x3fc>)
 8005484:	4887      	ldr	r0, [pc, #540]	@ (80056a4 <CreateMessage+0x430>)
 8005486:	220c      	movs	r2, #12
 8005488:	0019      	movs	r1, r3
 800548a:	f006 fa51 	bl	800b930 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 800548e:	4a86      	ldr	r2, [pc, #536]	@ (80056a8 <CreateMessage+0x434>)
 8005490:	4986      	ldr	r1, [pc, #536]	@ (80056ac <CreateMessage+0x438>)
 8005492:	4b77      	ldr	r3, [pc, #476]	@ (8005670 <CreateMessage+0x3fc>)
 8005494:	0018      	movs	r0, r3
 8005496:	f7ff fe91 	bl	80051bc <isKeyValid>
 800549a:	1e03      	subs	r3, r0, #0
 800549c:	d04b      	beq.n	8005536 <CreateMessage+0x2c2>
 800549e:	4b78      	ldr	r3, [pc, #480]	@ (8005680 <CreateMessage+0x40c>)
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	2100      	movs	r1, #0
 80054a4:	1c18      	adds	r0, r3, #0
 80054a6:	f7fb f83d 	bl	8000524 <__aeabi_fcmpeq>
 80054aa:	1e03      	subs	r3, r0, #0
 80054ac:	d143      	bne.n	8005536 <CreateMessage+0x2c2>
      uint8ArrayToString(Buffer, keybuffer);
 80054ae:	4a70      	ldr	r2, [pc, #448]	@ (8005670 <CreateMessage+0x3fc>)
 80054b0:	4b71      	ldr	r3, [pc, #452]	@ (8005678 <CreateMessage+0x404>)
 80054b2:	0011      	movs	r1, r2
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7ff feb9 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
 80054ba:	4b70      	ldr	r3, [pc, #448]	@ (800567c <CreateMessage+0x408>)
 80054bc:	689c      	ldr	r4, [r3, #8]
 80054be:	4b70      	ldr	r3, [pc, #448]	@ (8005680 <CreateMessage+0x40c>)
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	1c18      	adds	r0, r3, #0
 80054c4:	f7fe f9e6 	bl	8003894 <__aeabi_f2d>
 80054c8:	0002      	movs	r2, r0
 80054ca:	000b      	movs	r3, r1
 80054cc:	4d64      	ldr	r5, [pc, #400]	@ (8005660 <CreateMessage+0x3ec>)
 80054ce:	4978      	ldr	r1, [pc, #480]	@ (80056b0 <CreateMessage+0x43c>)
 80054d0:	4865      	ldr	r0, [pc, #404]	@ (8005668 <CreateMessage+0x3f4>)
 80054d2:	9202      	str	r2, [sp, #8]
 80054d4:	9303      	str	r3, [sp, #12]
 80054d6:	4b68      	ldr	r3, [pc, #416]	@ (8005678 <CreateMessage+0x404>)
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	002b      	movs	r3, r5
 80054dc:	0022      	movs	r2, r4
 80054de:	f020 fafb 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 80054e2:	4b61      	ldr	r3, [pc, #388]	@ (8005668 <CreateMessage+0x3f4>)
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fa fe41 	bl	800016c <strlen>
 80054ea:	0003      	movs	r3, r0
 80054ec:	b299      	uxth	r1, r3
 80054ee:	220e      	movs	r2, #14
 80054f0:	18bb      	adds	r3, r7, r2
 80054f2:	18ba      	adds	r2, r7, r2
 80054f4:	8812      	ldrh	r2, [r2, #0]
 80054f6:	188a      	adds	r2, r1, r2
 80054f8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80054fa:	1dbb      	adds	r3, r7, #6
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d019      	beq.n	8005536 <CreateMessage+0x2c2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005502:	4b59      	ldr	r3, [pc, #356]	@ (8005668 <CreateMessage+0x3f4>)
 8005504:	0018      	movs	r0, r3
 8005506:	f7fa fe31 	bl	800016c <strlen>
 800550a:	0003      	movs	r3, r0
 800550c:	b29a      	uxth	r2, r3
 800550e:	4b56      	ldr	r3, [pc, #344]	@ (8005668 <CreateMessage+0x3f4>)
 8005510:	0011      	movs	r1, r2
 8005512:	0018      	movs	r0, r3
 8005514:	f7ff fcac 	bl	8004e70 <ESP_Send>
 8005518:	0003      	movs	r3, r0
 800551a:	001a      	movs	r2, r3
 800551c:	4b5b      	ldr	r3, [pc, #364]	@ (800568c <CreateMessage+0x418>)
 800551e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005520:	4b5b      	ldr	r3, [pc, #364]	@ (8005690 <CreateMessage+0x41c>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	001a      	movs	r2, r3
 8005526:	4b59      	ldr	r3, [pc, #356]	@ (800568c <CreateMessage+0x418>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	4013      	ands	r3, r2
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	4193      	sbcs	r3, r2
 8005530:	b2da      	uxtb	r2, r3
 8005532:	4b57      	ldr	r3, [pc, #348]	@ (8005690 <CreateMessage+0x41c>)
 8005534:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 8005536:	4b4e      	ldr	r3, [pc, #312]	@ (8005670 <CreateMessage+0x3fc>)
 8005538:	485e      	ldr	r0, [pc, #376]	@ (80056b4 <CreateMessage+0x440>)
 800553a:	220c      	movs	r2, #12
 800553c:	0019      	movs	r1, r3
 800553e:	f006 f9f7 	bl	800b930 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 8005542:	4a5d      	ldr	r2, [pc, #372]	@ (80056b8 <CreateMessage+0x444>)
 8005544:	4959      	ldr	r1, [pc, #356]	@ (80056ac <CreateMessage+0x438>)
 8005546:	4b4a      	ldr	r3, [pc, #296]	@ (8005670 <CreateMessage+0x3fc>)
 8005548:	0018      	movs	r0, r3
 800554a:	f7ff fe37 	bl	80051bc <isKeyValid>
 800554e:	1e03      	subs	r3, r0, #0
 8005550:	d043      	beq.n	80055da <CreateMessage+0x366>
      uint8ArrayToString(Buffer, keybuffer);
 8005552:	4a47      	ldr	r2, [pc, #284]	@ (8005670 <CreateMessage+0x3fc>)
 8005554:	4b48      	ldr	r3, [pc, #288]	@ (8005678 <CreateMessage+0x404>)
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fe67 	bl	800522c <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
 800555e:	4b47      	ldr	r3, [pc, #284]	@ (800567c <CreateMessage+0x408>)
 8005560:	689c      	ldr	r4, [r3, #8]
 8005562:	4b47      	ldr	r3, [pc, #284]	@ (8005680 <CreateMessage+0x40c>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	1c18      	adds	r0, r3, #0
 8005568:	f7fe f994 	bl	8003894 <__aeabi_f2d>
 800556c:	0002      	movs	r2, r0
 800556e:	000b      	movs	r3, r1
 8005570:	4d3b      	ldr	r5, [pc, #236]	@ (8005660 <CreateMessage+0x3ec>)
 8005572:	4952      	ldr	r1, [pc, #328]	@ (80056bc <CreateMessage+0x448>)
 8005574:	483c      	ldr	r0, [pc, #240]	@ (8005668 <CreateMessage+0x3f4>)
 8005576:	9202      	str	r2, [sp, #8]
 8005578:	9303      	str	r3, [sp, #12]
 800557a:	4b3f      	ldr	r3, [pc, #252]	@ (8005678 <CreateMessage+0x404>)
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	002b      	movs	r3, r5
 8005580:	0022      	movs	r2, r4
 8005582:	f020 faa9 	bl	8025ad8 <siprintf>
  #endif
      index += strlen(message);
 8005586:	4b38      	ldr	r3, [pc, #224]	@ (8005668 <CreateMessage+0x3f4>)
 8005588:	0018      	movs	r0, r3
 800558a:	f7fa fdef 	bl	800016c <strlen>
 800558e:	0003      	movs	r3, r0
 8005590:	b299      	uxth	r1, r3
 8005592:	220e      	movs	r2, #14
 8005594:	18bb      	adds	r3, r7, r2
 8005596:	18ba      	adds	r2, r7, r2
 8005598:	8812      	ldrh	r2, [r2, #0]
 800559a:	188a      	adds	r2, r1, r2
 800559c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800559e:	1dbb      	adds	r3, r7, #6
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d019      	beq.n	80055da <CreateMessage+0x366>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80055a6:	4b30      	ldr	r3, [pc, #192]	@ (8005668 <CreateMessage+0x3f4>)
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7fa fddf 	bl	800016c <strlen>
 80055ae:	0003      	movs	r3, r0
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005668 <CreateMessage+0x3f4>)
 80055b4:	0011      	movs	r1, r2
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7ff fc5a 	bl	8004e70 <ESP_Send>
 80055bc:	0003      	movs	r3, r0
 80055be:	001a      	movs	r2, r3
 80055c0:	4b32      	ldr	r3, [pc, #200]	@ (800568c <CreateMessage+0x418>)
 80055c2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80055c4:	4b32      	ldr	r3, [pc, #200]	@ (8005690 <CreateMessage+0x41c>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	001a      	movs	r2, r3
 80055ca:	4b30      	ldr	r3, [pc, #192]	@ (800568c <CreateMessage+0x418>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4013      	ands	r3, r2
 80055d0:	1e5a      	subs	r2, r3, #1
 80055d2:	4193      	sbcs	r3, r2
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005690 <CreateMessage+0x41c>)
 80055d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 80055da:	4b25      	ldr	r3, [pc, #148]	@ (8005670 <CreateMessage+0x3fc>)
 80055dc:	4838      	ldr	r0, [pc, #224]	@ (80056c0 <CreateMessage+0x44c>)
 80055de:	220c      	movs	r2, #12
 80055e0:	0019      	movs	r1, r3
 80055e2:	f006 f9a5 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055e6:	4a22      	ldr	r2, [pc, #136]	@ (8005670 <CreateMessage+0x3fc>)
 80055e8:	4b23      	ldr	r3, [pc, #140]	@ (8005678 <CreateMessage+0x404>)
 80055ea:	0011      	movs	r1, r2
 80055ec:	0018      	movs	r0, r3
 80055ee:	f7ff fe1d 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 80055f2:	4b22      	ldr	r3, [pc, #136]	@ (800567c <CreateMessage+0x408>)
 80055f4:	689c      	ldr	r4, [r3, #8]
 80055f6:	4b22      	ldr	r3, [pc, #136]	@ (8005680 <CreateMessage+0x40c>)
 80055f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fa:	1c18      	adds	r0, r3, #0
 80055fc:	f7fe f94a 	bl	8003894 <__aeabi_f2d>
 8005600:	0002      	movs	r2, r0
 8005602:	000b      	movs	r3, r1
 8005604:	4d16      	ldr	r5, [pc, #88]	@ (8005660 <CreateMessage+0x3ec>)
 8005606:	492f      	ldr	r1, [pc, #188]	@ (80056c4 <CreateMessage+0x450>)
 8005608:	4817      	ldr	r0, [pc, #92]	@ (8005668 <CreateMessage+0x3f4>)
 800560a:	9202      	str	r2, [sp, #8]
 800560c:	9303      	str	r3, [sp, #12]
 800560e:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <CreateMessage+0x404>)
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	002b      	movs	r3, r5
 8005614:	0022      	movs	r2, r4
 8005616:	f020 fa5f 	bl	8025ad8 <siprintf>
#endif
  index += strlen(message);
 800561a:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <CreateMessage+0x3f4>)
 800561c:	0018      	movs	r0, r3
 800561e:	f7fa fda5 	bl	800016c <strlen>
 8005622:	0003      	movs	r3, r0
 8005624:	b299      	uxth	r1, r3
 8005626:	220e      	movs	r2, #14
 8005628:	18bb      	adds	r3, r7, r2
 800562a:	18ba      	adds	r2, r7, r2
 800562c:	8812      	ldrh	r2, [r2, #0]
 800562e:	188a      	adds	r2, r1, r2
 8005630:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005632:	1dbb      	adds	r3, r7, #6
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d04e      	beq.n	80056d8 <CreateMessage+0x464>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800563a:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <CreateMessage+0x3f4>)
 800563c:	0018      	movs	r0, r3
 800563e:	f7fa fd95 	bl	800016c <strlen>
 8005642:	0003      	movs	r3, r0
 8005644:	b29a      	uxth	r2, r3
 8005646:	4b08      	ldr	r3, [pc, #32]	@ (8005668 <CreateMessage+0x3f4>)
 8005648:	0011      	movs	r1, r2
 800564a:	0018      	movs	r0, r3
 800564c:	f7ff fc10 	bl	8004e70 <ESP_Send>
 8005650:	0003      	movs	r3, r0
 8005652:	001a      	movs	r2, r3
 8005654:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <CreateMessage+0x418>)
 8005656:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005658:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <CreateMessage+0x41c>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	001a      	movs	r2, r3
 800565e:	e033      	b.n	80056c8 <CreateMessage+0x454>
 8005660:	20000720 	.word	0x20000720
 8005664:	0802ded8 	.word	0x0802ded8
 8005668:	200005d0 	.word	0x200005d0
 800566c:	0802a650 	.word	0x0802a650
 8005670:	20000740 	.word	0x20000740
 8005674:	0808000c 	.word	0x0808000c
 8005678:	2000074c 	.word	0x2000074c
 800567c:	200005b0 	.word	0x200005b0
 8005680:	20000680 	.word	0x20000680
 8005684:	0802a654 	.word	0x0802a654
 8005688:	200005d1 	.word	0x200005d1
 800568c:	20000765 	.word	0x20000765
 8005690:	2000002d 	.word	0x2000002d
 8005694:	08080018 	.word	0x08080018
 8005698:	0802a6a8 	.word	0x0802a6a8
 800569c:	08080030 	.word	0x08080030
 80056a0:	0802a700 	.word	0x0802a700
 80056a4:	0808003c 	.word	0x0808003c
 80056a8:	0802a754 	.word	0x0802a754
 80056ac:	0802a758 	.word	0x0802a758
 80056b0:	0802a760 	.word	0x0802a760
 80056b4:	080800e0 	.word	0x080800e0
 80056b8:	0802a7bc 	.word	0x0802a7bc
 80056bc:	0802a7c8 	.word	0x0802a7c8
 80056c0:	08080048 	.word	0x08080048
 80056c4:	0802a824 	.word	0x0802a824
 80056c8:	4be8      	ldr	r3, [pc, #928]	@ (8005a6c <CreateMessage+0x7f8>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	4013      	ands	r3, r2
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	4193      	sbcs	r3, r2
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4be6      	ldr	r3, [pc, #920]	@ (8005a70 <CreateMessage+0x7fc>)
 80056d6:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	4053      	eors	r3, r2
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d100      	bne.n	80056e8 <CreateMessage+0x474>
 80056e6:	e2bd      	b.n	8005c64 <CreateMessage+0x9f0>
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 80056e8:	4be2      	ldr	r3, [pc, #904]	@ (8005a74 <CreateMessage+0x800>)
 80056ea:	48e3      	ldr	r0, [pc, #908]	@ (8005a78 <CreateMessage+0x804>)
 80056ec:	220c      	movs	r2, #12
 80056ee:	0019      	movs	r1, r3
 80056f0:	f006 f91e 	bl	800b930 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 80056f4:	4adf      	ldr	r2, [pc, #892]	@ (8005a74 <CreateMessage+0x800>)
 80056f6:	4be1      	ldr	r3, [pc, #900]	@ (8005a7c <CreateMessage+0x808>)
 80056f8:	0011      	movs	r1, r2
 80056fa:	0018      	movs	r0, r3
 80056fc:	f7ff fd96 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8005700:	4bdf      	ldr	r3, [pc, #892]	@ (8005a80 <CreateMessage+0x80c>)
 8005702:	689c      	ldr	r4, [r3, #8]
 8005704:	4bdf      	ldr	r3, [pc, #892]	@ (8005a84 <CreateMessage+0x810>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	1c18      	adds	r0, r3, #0
 800570a:	f7fe f8c3 	bl	8003894 <__aeabi_f2d>
 800570e:	0002      	movs	r2, r0
 8005710:	000b      	movs	r3, r1
 8005712:	4ddd      	ldr	r5, [pc, #884]	@ (8005a88 <CreateMessage+0x814>)
 8005714:	49dd      	ldr	r1, [pc, #884]	@ (8005a8c <CreateMessage+0x818>)
 8005716:	48de      	ldr	r0, [pc, #888]	@ (8005a90 <CreateMessage+0x81c>)
 8005718:	9202      	str	r2, [sp, #8]
 800571a:	9303      	str	r3, [sp, #12]
 800571c:	4bd7      	ldr	r3, [pc, #860]	@ (8005a7c <CreateMessage+0x808>)
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	002b      	movs	r3, r5
 8005722:	0022      	movs	r2, r4
 8005724:	f020 f9d8 	bl	8025ad8 <siprintf>
#endif
    index += strlen(message);
 8005728:	4bd9      	ldr	r3, [pc, #868]	@ (8005a90 <CreateMessage+0x81c>)
 800572a:	0018      	movs	r0, r3
 800572c:	f7fa fd1e 	bl	800016c <strlen>
 8005730:	0003      	movs	r3, r0
 8005732:	b299      	uxth	r1, r3
 8005734:	220e      	movs	r2, #14
 8005736:	18bb      	adds	r3, r7, r2
 8005738:	18ba      	adds	r2, r7, r2
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	188a      	adds	r2, r1, r2
 800573e:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005740:	1dbb      	adds	r3, r7, #6
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d019      	beq.n	800577c <CreateMessage+0x508>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8005748:	4bd1      	ldr	r3, [pc, #836]	@ (8005a90 <CreateMessage+0x81c>)
 800574a:	0018      	movs	r0, r3
 800574c:	f7fa fd0e 	bl	800016c <strlen>
 8005750:	0003      	movs	r3, r0
 8005752:	b29a      	uxth	r2, r3
 8005754:	4bce      	ldr	r3, [pc, #824]	@ (8005a90 <CreateMessage+0x81c>)
 8005756:	0011      	movs	r1, r2
 8005758:	0018      	movs	r0, r3
 800575a:	f7ff fb89 	bl	8004e70 <ESP_Send>
 800575e:	0003      	movs	r3, r0
 8005760:	001a      	movs	r2, r3
 8005762:	4bc2      	ldr	r3, [pc, #776]	@ (8005a6c <CreateMessage+0x7f8>)
 8005764:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8005766:	4bc2      	ldr	r3, [pc, #776]	@ (8005a70 <CreateMessage+0x7fc>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	001a      	movs	r2, r3
 800576c:	4bbf      	ldr	r3, [pc, #764]	@ (8005a6c <CreateMessage+0x7f8>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	4013      	ands	r3, r2
 8005772:	1e5a      	subs	r2, r3, #1
 8005774:	4193      	sbcs	r3, r2
 8005776:	b2da      	uxtb	r2, r3
 8005778:	4bbd      	ldr	r3, [pc, #756]	@ (8005a70 <CreateMessage+0x7fc>)
 800577a:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 800577c:	4bc5      	ldr	r3, [pc, #788]	@ (8005a94 <CreateMessage+0x820>)
 800577e:	791b      	ldrb	r3, [r3, #4]
 8005780:	2b35      	cmp	r3, #53	@ 0x35
 8005782:	d147      	bne.n	8005814 <CreateMessage+0x5a0>
 8005784:	f003 fd76 	bl	8009274 <Check_USB_PowerOn>
 8005788:	1e03      	subs	r3, r0, #0
 800578a:	d043      	beq.n	8005814 <CreateMessage+0x5a0>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 800578c:	4bb9      	ldr	r3, [pc, #740]	@ (8005a74 <CreateMessage+0x800>)
 800578e:	48c2      	ldr	r0, [pc, #776]	@ (8005a98 <CreateMessage+0x824>)
 8005790:	220c      	movs	r2, #12
 8005792:	0019      	movs	r1, r3
 8005794:	f006 f8cc 	bl	800b930 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005798:	4ab6      	ldr	r2, [pc, #728]	@ (8005a74 <CreateMessage+0x800>)
 800579a:	4bb8      	ldr	r3, [pc, #736]	@ (8005a7c <CreateMessage+0x808>)
 800579c:	0011      	movs	r1, r2
 800579e:	0018      	movs	r0, r3
 80057a0:	f7ff fd44 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 80057a4:	4bb6      	ldr	r3, [pc, #728]	@ (8005a80 <CreateMessage+0x80c>)
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	4bbc      	ldr	r3, [pc, #752]	@ (8005a9c <CreateMessage+0x828>)
 80057aa:	214e      	movs	r1, #78	@ 0x4e
 80057ac:	5a5b      	ldrh	r3, [r3, r1]
 80057ae:	4cb6      	ldr	r4, [pc, #728]	@ (8005a88 <CreateMessage+0x814>)
 80057b0:	49bb      	ldr	r1, [pc, #748]	@ (8005aa0 <CreateMessage+0x82c>)
 80057b2:	48b7      	ldr	r0, [pc, #732]	@ (8005a90 <CreateMessage+0x81c>)
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	4bb1      	ldr	r3, [pc, #708]	@ (8005a7c <CreateMessage+0x808>)
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	0023      	movs	r3, r4
 80057bc:	f020 f98c 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 80057c0:	4bb3      	ldr	r3, [pc, #716]	@ (8005a90 <CreateMessage+0x81c>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7fa fcd2 	bl	800016c <strlen>
 80057c8:	0003      	movs	r3, r0
 80057ca:	b299      	uxth	r1, r3
 80057cc:	220e      	movs	r2, #14
 80057ce:	18bb      	adds	r3, r7, r2
 80057d0:	18ba      	adds	r2, r7, r2
 80057d2:	8812      	ldrh	r2, [r2, #0]
 80057d4:	188a      	adds	r2, r1, r2
 80057d6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80057d8:	1dbb      	adds	r3, r7, #6
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d019      	beq.n	8005814 <CreateMessage+0x5a0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80057e0:	4bab      	ldr	r3, [pc, #684]	@ (8005a90 <CreateMessage+0x81c>)
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7fa fcc2 	bl	800016c <strlen>
 80057e8:	0003      	movs	r3, r0
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	4ba8      	ldr	r3, [pc, #672]	@ (8005a90 <CreateMessage+0x81c>)
 80057ee:	0011      	movs	r1, r2
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7ff fb3d 	bl	8004e70 <ESP_Send>
 80057f6:	0003      	movs	r3, r0
 80057f8:	001a      	movs	r2, r3
 80057fa:	4b9c      	ldr	r3, [pc, #624]	@ (8005a6c <CreateMessage+0x7f8>)
 80057fc:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80057fe:	4b9c      	ldr	r3, [pc, #624]	@ (8005a70 <CreateMessage+0x7fc>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	001a      	movs	r2, r3
 8005804:	4b99      	ldr	r3, [pc, #612]	@ (8005a6c <CreateMessage+0x7f8>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	4013      	ands	r3, r2
 800580a:	1e5a      	subs	r2, r3, #1
 800580c:	4193      	sbcs	r3, r2
 800580e:	b2da      	uxtb	r2, r3
 8005810:	4b97      	ldr	r3, [pc, #604]	@ (8005a70 <CreateMessage+0x7fc>)
 8005812:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005814:	4b97      	ldr	r3, [pc, #604]	@ (8005a74 <CreateMessage+0x800>)
 8005816:	48a3      	ldr	r0, [pc, #652]	@ (8005aa4 <CreateMessage+0x830>)
 8005818:	220c      	movs	r2, #12
 800581a:	0019      	movs	r1, r3
 800581c:	f006 f888 	bl	800b930 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005820:	4b9c      	ldr	r3, [pc, #624]	@ (8005a94 <CreateMessage+0x820>)
 8005822:	791b      	ldrb	r3, [r3, #4]
 8005824:	2b34      	cmp	r3, #52	@ 0x34
 8005826:	d003      	beq.n	8005830 <CreateMessage+0x5bc>
 8005828:	4b9a      	ldr	r3, [pc, #616]	@ (8005a94 <CreateMessage+0x820>)
 800582a:	791b      	ldrb	r3, [r3, #4]
 800582c:	2b35      	cmp	r3, #53	@ 0x35
 800582e:	d14b      	bne.n	80058c8 <CreateMessage+0x654>
 8005830:	4a9d      	ldr	r2, [pc, #628]	@ (8005aa8 <CreateMessage+0x834>)
 8005832:	499e      	ldr	r1, [pc, #632]	@ (8005aac <CreateMessage+0x838>)
 8005834:	4b8f      	ldr	r3, [pc, #572]	@ (8005a74 <CreateMessage+0x800>)
 8005836:	0018      	movs	r0, r3
 8005838:	f7ff fcc0 	bl	80051bc <isKeyValid>
 800583c:	1e03      	subs	r3, r0, #0
 800583e:	d043      	beq.n	80058c8 <CreateMessage+0x654>
      uint8ArrayToString(Buffer, keybuffer);
 8005840:	4a8c      	ldr	r2, [pc, #560]	@ (8005a74 <CreateMessage+0x800>)
 8005842:	4b8e      	ldr	r3, [pc, #568]	@ (8005a7c <CreateMessage+0x808>)
 8005844:	0011      	movs	r1, r2
 8005846:	0018      	movs	r0, r3
 8005848:	f7ff fcf0 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
 800584c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a80 <CreateMessage+0x80c>)
 800584e:	689c      	ldr	r4, [r3, #8]
 8005850:	4b92      	ldr	r3, [pc, #584]	@ (8005a9c <CreateMessage+0x828>)
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	1c18      	adds	r0, r3, #0
 8005856:	f7fe f81d 	bl	8003894 <__aeabi_f2d>
 800585a:	0002      	movs	r2, r0
 800585c:	000b      	movs	r3, r1
 800585e:	4d8a      	ldr	r5, [pc, #552]	@ (8005a88 <CreateMessage+0x814>)
 8005860:	4993      	ldr	r1, [pc, #588]	@ (8005ab0 <CreateMessage+0x83c>)
 8005862:	488b      	ldr	r0, [pc, #556]	@ (8005a90 <CreateMessage+0x81c>)
 8005864:	9202      	str	r2, [sp, #8]
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	4b84      	ldr	r3, [pc, #528]	@ (8005a7c <CreateMessage+0x808>)
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	002b      	movs	r3, r5
 800586e:	0022      	movs	r2, r4
 8005870:	f020 f932 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 8005874:	4b86      	ldr	r3, [pc, #536]	@ (8005a90 <CreateMessage+0x81c>)
 8005876:	0018      	movs	r0, r3
 8005878:	f7fa fc78 	bl	800016c <strlen>
 800587c:	0003      	movs	r3, r0
 800587e:	b299      	uxth	r1, r3
 8005880:	220e      	movs	r2, #14
 8005882:	18bb      	adds	r3, r7, r2
 8005884:	18ba      	adds	r2, r7, r2
 8005886:	8812      	ldrh	r2, [r2, #0]
 8005888:	188a      	adds	r2, r1, r2
 800588a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800588c:	1dbb      	adds	r3, r7, #6
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d019      	beq.n	80058c8 <CreateMessage+0x654>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005894:	4b7e      	ldr	r3, [pc, #504]	@ (8005a90 <CreateMessage+0x81c>)
 8005896:	0018      	movs	r0, r3
 8005898:	f7fa fc68 	bl	800016c <strlen>
 800589c:	0003      	movs	r3, r0
 800589e:	b29a      	uxth	r2, r3
 80058a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005a90 <CreateMessage+0x81c>)
 80058a2:	0011      	movs	r1, r2
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff fae3 	bl	8004e70 <ESP_Send>
 80058aa:	0003      	movs	r3, r0
 80058ac:	001a      	movs	r2, r3
 80058ae:	4b6f      	ldr	r3, [pc, #444]	@ (8005a6c <CreateMessage+0x7f8>)
 80058b0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80058b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005a70 <CreateMessage+0x7fc>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	001a      	movs	r2, r3
 80058b8:	4b6c      	ldr	r3, [pc, #432]	@ (8005a6c <CreateMessage+0x7f8>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	4013      	ands	r3, r2
 80058be:	1e5a      	subs	r2, r3, #1
 80058c0:	4193      	sbcs	r3, r2
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a70 <CreateMessage+0x7fc>)
 80058c6:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 80058c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a74 <CreateMessage+0x800>)
 80058ca:	487a      	ldr	r0, [pc, #488]	@ (8005ab4 <CreateMessage+0x840>)
 80058cc:	220c      	movs	r2, #12
 80058ce:	0019      	movs	r1, r3
 80058d0:	f006 f82e 	bl	800b930 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 80058d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005a94 <CreateMessage+0x820>)
 80058d6:	791b      	ldrb	r3, [r3, #4]
 80058d8:	2b34      	cmp	r3, #52	@ 0x34
 80058da:	d003      	beq.n	80058e4 <CreateMessage+0x670>
 80058dc:	4b6d      	ldr	r3, [pc, #436]	@ (8005a94 <CreateMessage+0x820>)
 80058de:	791b      	ldrb	r3, [r3, #4]
 80058e0:	2b35      	cmp	r3, #53	@ 0x35
 80058e2:	d14b      	bne.n	800597c <CreateMessage+0x708>
 80058e4:	4a74      	ldr	r2, [pc, #464]	@ (8005ab8 <CreateMessage+0x844>)
 80058e6:	4971      	ldr	r1, [pc, #452]	@ (8005aac <CreateMessage+0x838>)
 80058e8:	4b62      	ldr	r3, [pc, #392]	@ (8005a74 <CreateMessage+0x800>)
 80058ea:	0018      	movs	r0, r3
 80058ec:	f7ff fc66 	bl	80051bc <isKeyValid>
 80058f0:	1e03      	subs	r3, r0, #0
 80058f2:	d043      	beq.n	800597c <CreateMessage+0x708>
      uint8ArrayToString(Buffer, keybuffer);
 80058f4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a74 <CreateMessage+0x800>)
 80058f6:	4b61      	ldr	r3, [pc, #388]	@ (8005a7c <CreateMessage+0x808>)
 80058f8:	0011      	movs	r1, r2
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7ff fc96 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_humidity);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
 8005900:	4b5f      	ldr	r3, [pc, #380]	@ (8005a80 <CreateMessage+0x80c>)
 8005902:	689c      	ldr	r4, [r3, #8]
 8005904:	4b65      	ldr	r3, [pc, #404]	@ (8005a9c <CreateMessage+0x828>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	1c18      	adds	r0, r3, #0
 800590a:	f7fd ffc3 	bl	8003894 <__aeabi_f2d>
 800590e:	0002      	movs	r2, r0
 8005910:	000b      	movs	r3, r1
 8005912:	4d5d      	ldr	r5, [pc, #372]	@ (8005a88 <CreateMessage+0x814>)
 8005914:	4969      	ldr	r1, [pc, #420]	@ (8005abc <CreateMessage+0x848>)
 8005916:	485e      	ldr	r0, [pc, #376]	@ (8005a90 <CreateMessage+0x81c>)
 8005918:	9202      	str	r2, [sp, #8]
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	4b57      	ldr	r3, [pc, #348]	@ (8005a7c <CreateMessage+0x808>)
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	002b      	movs	r3, r5
 8005922:	0022      	movs	r2, r4
 8005924:	f020 f8d8 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 8005928:	4b59      	ldr	r3, [pc, #356]	@ (8005a90 <CreateMessage+0x81c>)
 800592a:	0018      	movs	r0, r3
 800592c:	f7fa fc1e 	bl	800016c <strlen>
 8005930:	0003      	movs	r3, r0
 8005932:	b299      	uxth	r1, r3
 8005934:	220e      	movs	r2, #14
 8005936:	18bb      	adds	r3, r7, r2
 8005938:	18ba      	adds	r2, r7, r2
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	188a      	adds	r2, r1, r2
 800593e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005940:	1dbb      	adds	r3, r7, #6
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <CreateMessage+0x708>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005948:	4b51      	ldr	r3, [pc, #324]	@ (8005a90 <CreateMessage+0x81c>)
 800594a:	0018      	movs	r0, r3
 800594c:	f7fa fc0e 	bl	800016c <strlen>
 8005950:	0003      	movs	r3, r0
 8005952:	b29a      	uxth	r2, r3
 8005954:	4b4e      	ldr	r3, [pc, #312]	@ (8005a90 <CreateMessage+0x81c>)
 8005956:	0011      	movs	r1, r2
 8005958:	0018      	movs	r0, r3
 800595a:	f7ff fa89 	bl	8004e70 <ESP_Send>
 800595e:	0003      	movs	r3, r0
 8005960:	001a      	movs	r2, r3
 8005962:	4b42      	ldr	r3, [pc, #264]	@ (8005a6c <CreateMessage+0x7f8>)
 8005964:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005966:	4b42      	ldr	r3, [pc, #264]	@ (8005a70 <CreateMessage+0x7fc>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	001a      	movs	r2, r3
 800596c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a6c <CreateMessage+0x7f8>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	4013      	ands	r3, r2
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	4193      	sbcs	r3, r2
 8005976:	b2da      	uxtb	r2, r3
 8005978:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <CreateMessage+0x7fc>)
 800597a:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 800597c:	f008 f992 	bl	800dca4 <sen5x_Get_sen5x_enable_state>
 8005980:	1e03      	subs	r3, r0, #0
 8005982:	d100      	bne.n	8005986 <CreateMessage+0x712>
 8005984:	e16e      	b.n	8005c64 <CreateMessage+0x9f0>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005986:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <CreateMessage+0x800>)
 8005988:	484d      	ldr	r0, [pc, #308]	@ (8005ac0 <CreateMessage+0x84c>)
 800598a:	220c      	movs	r2, #12
 800598c:	0019      	movs	r1, r3
 800598e:	f005 ffcf 	bl	800b930 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005992:	4a4c      	ldr	r2, [pc, #304]	@ (8005ac4 <CreateMessage+0x850>)
 8005994:	494c      	ldr	r1, [pc, #304]	@ (8005ac8 <CreateMessage+0x854>)
 8005996:	4b37      	ldr	r3, [pc, #220]	@ (8005a74 <CreateMessage+0x800>)
 8005998:	0018      	movs	r0, r3
 800599a:	f7ff fc0f 	bl	80051bc <isKeyValid>
 800599e:	1e03      	subs	r3, r0, #0
 80059a0:	d043      	beq.n	8005a2a <CreateMessage+0x7b6>
        uint8ArrayToString(Buffer, keybuffer);
 80059a2:	4a34      	ldr	r2, [pc, #208]	@ (8005a74 <CreateMessage+0x800>)
 80059a4:	4b35      	ldr	r3, [pc, #212]	@ (8005a7c <CreateMessage+0x808>)
 80059a6:	0011      	movs	r1, r2
 80059a8:	0018      	movs	r0, r3
 80059aa:	f7ff fc3f 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
 80059ae:	4b34      	ldr	r3, [pc, #208]	@ (8005a80 <CreateMessage+0x80c>)
 80059b0:	689c      	ldr	r4, [r3, #8]
 80059b2:	4b3a      	ldr	r3, [pc, #232]	@ (8005a9c <CreateMessage+0x828>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	1c18      	adds	r0, r3, #0
 80059b8:	f7fd ff6c 	bl	8003894 <__aeabi_f2d>
 80059bc:	0002      	movs	r2, r0
 80059be:	000b      	movs	r3, r1
 80059c0:	4d31      	ldr	r5, [pc, #196]	@ (8005a88 <CreateMessage+0x814>)
 80059c2:	4942      	ldr	r1, [pc, #264]	@ (8005acc <CreateMessage+0x858>)
 80059c4:	4832      	ldr	r0, [pc, #200]	@ (8005a90 <CreateMessage+0x81c>)
 80059c6:	9202      	str	r2, [sp, #8]
 80059c8:	9303      	str	r3, [sp, #12]
 80059ca:	4b2c      	ldr	r3, [pc, #176]	@ (8005a7c <CreateMessage+0x808>)
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	002b      	movs	r3, r5
 80059d0:	0022      	movs	r2, r4
 80059d2:	f020 f881 	bl	8025ad8 <siprintf>
#endif
        index += strlen(message);
 80059d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005a90 <CreateMessage+0x81c>)
 80059d8:	0018      	movs	r0, r3
 80059da:	f7fa fbc7 	bl	800016c <strlen>
 80059de:	0003      	movs	r3, r0
 80059e0:	b299      	uxth	r1, r3
 80059e2:	220e      	movs	r2, #14
 80059e4:	18bb      	adds	r3, r7, r2
 80059e6:	18ba      	adds	r2, r7, r2
 80059e8:	8812      	ldrh	r2, [r2, #0]
 80059ea:	188a      	adds	r2, r1, r2
 80059ec:	801a      	strh	r2, [r3, #0]
        if (send) {
 80059ee:	1dbb      	adds	r3, r7, #6
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d019      	beq.n	8005a2a <CreateMessage+0x7b6>
          status = ESP_Send((uint8_t*)message, strlen(message));
 80059f6:	4b26      	ldr	r3, [pc, #152]	@ (8005a90 <CreateMessage+0x81c>)
 80059f8:	0018      	movs	r0, r3
 80059fa:	f7fa fbb7 	bl	800016c <strlen>
 80059fe:	0003      	movs	r3, r0
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	4b23      	ldr	r3, [pc, #140]	@ (8005a90 <CreateMessage+0x81c>)
 8005a04:	0011      	movs	r1, r2
 8005a06:	0018      	movs	r0, r3
 8005a08:	f7ff fa32 	bl	8004e70 <ESP_Send>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	001a      	movs	r2, r3
 8005a10:	4b16      	ldr	r3, [pc, #88]	@ (8005a6c <CreateMessage+0x7f8>)
 8005a12:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005a14:	4b16      	ldr	r3, [pc, #88]	@ (8005a70 <CreateMessage+0x7fc>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	001a      	movs	r2, r3
 8005a1a:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <CreateMessage+0x7f8>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	4193      	sbcs	r3, r2
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <CreateMessage+0x7fc>)
 8005a28:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005a2a:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <CreateMessage+0x800>)
 8005a2c:	4828      	ldr	r0, [pc, #160]	@ (8005ad0 <CreateMessage+0x85c>)
 8005a2e:	220c      	movs	r2, #12
 8005a30:	0019      	movs	r1, r3
 8005a32:	f005 ff7d 	bl	800b930 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005a36:	4a0f      	ldr	r2, [pc, #60]	@ (8005a74 <CreateMessage+0x800>)
 8005a38:	4b10      	ldr	r3, [pc, #64]	@ (8005a7c <CreateMessage+0x808>)
 8005a3a:	0011      	movs	r1, r2
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f7ff fbf5 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8005a42:	4b0f      	ldr	r3, [pc, #60]	@ (8005a80 <CreateMessage+0x80c>)
 8005a44:	689c      	ldr	r4, [r3, #8]
 8005a46:	4b15      	ldr	r3, [pc, #84]	@ (8005a9c <CreateMessage+0x828>)
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	1c18      	adds	r0, r3, #0
 8005a4c:	f7fd ff22 	bl	8003894 <__aeabi_f2d>
 8005a50:	0002      	movs	r2, r0
 8005a52:	000b      	movs	r3, r1
 8005a54:	4d0c      	ldr	r5, [pc, #48]	@ (8005a88 <CreateMessage+0x814>)
 8005a56:	491f      	ldr	r1, [pc, #124]	@ (8005ad4 <CreateMessage+0x860>)
 8005a58:	480d      	ldr	r0, [pc, #52]	@ (8005a90 <CreateMessage+0x81c>)
 8005a5a:	9202      	str	r2, [sp, #8]
 8005a5c:	9303      	str	r3, [sp, #12]
 8005a5e:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <CreateMessage+0x808>)
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	002b      	movs	r3, r5
 8005a64:	0022      	movs	r2, r4
 8005a66:	f020 f837 	bl	8025ad8 <siprintf>
 8005a6a:	e035      	b.n	8005ad8 <CreateMessage+0x864>
 8005a6c:	20000765 	.word	0x20000765
 8005a70:	2000002d 	.word	0x2000002d
 8005a74:	20000740 	.word	0x20000740
 8005a78:	08080078 	.word	0x08080078
 8005a7c:	2000074c 	.word	0x2000074c
 8005a80:	200005b0 	.word	0x200005b0
 8005a84:	200005cc 	.word	0x200005cc
 8005a88:	20000720 	.word	0x20000720
 8005a8c:	0802a880 	.word	0x0802a880
 8005a90:	200005d0 	.word	0x200005d0
 8005a94:	20000ee4 	.word	0x20000ee4
 8005a98:	08080024 	.word	0x08080024
 8005a9c:	20000680 	.word	0x20000680
 8005aa0:	0802a8e0 	.word	0x0802a8e0
 8005aa4:	08080170 	.word	0x08080170
 8005aa8:	0802a934 	.word	0x0802a934
 8005aac:	0802a940 	.word	0x0802a940
 8005ab0:	0802a948 	.word	0x0802a948
 8005ab4:	0808017c 	.word	0x0808017c
 8005ab8:	0802a9a4 	.word	0x0802a9a4
 8005abc:	0802a9b0 	.word	0x0802a9b0
 8005ac0:	080800b0 	.word	0x080800b0
 8005ac4:	0802aa10 	.word	0x0802aa10
 8005ac8:	0802aa1c 	.word	0x0802aa1c
 8005acc:	0802aa20 	.word	0x0802aa20
 8005ad0:	08080054 	.word	0x08080054
 8005ad4:	0802aa78 	.word	0x0802aa78
#endif
      index += strlen(message);
 8005ad8:	4beb      	ldr	r3, [pc, #940]	@ (8005e88 <CreateMessage+0xc14>)
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7fa fb46 	bl	800016c <strlen>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	b299      	uxth	r1, r3
 8005ae4:	220e      	movs	r2, #14
 8005ae6:	18bb      	adds	r3, r7, r2
 8005ae8:	18ba      	adds	r2, r7, r2
 8005aea:	8812      	ldrh	r2, [r2, #0]
 8005aec:	188a      	adds	r2, r1, r2
 8005aee:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005af0:	1dbb      	adds	r3, r7, #6
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d019      	beq.n	8005b2c <CreateMessage+0x8b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005af8:	4be3      	ldr	r3, [pc, #908]	@ (8005e88 <CreateMessage+0xc14>)
 8005afa:	0018      	movs	r0, r3
 8005afc:	f7fa fb36 	bl	800016c <strlen>
 8005b00:	0003      	movs	r3, r0
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	4be0      	ldr	r3, [pc, #896]	@ (8005e88 <CreateMessage+0xc14>)
 8005b06:	0011      	movs	r1, r2
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f7ff f9b1 	bl	8004e70 <ESP_Send>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	001a      	movs	r2, r3
 8005b12:	4bde      	ldr	r3, [pc, #888]	@ (8005e8c <CreateMessage+0xc18>)
 8005b14:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005b16:	4bde      	ldr	r3, [pc, #888]	@ (8005e90 <CreateMessage+0xc1c>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	001a      	movs	r2, r3
 8005b1c:	4bdb      	ldr	r3, [pc, #876]	@ (8005e8c <CreateMessage+0xc18>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	4013      	ands	r3, r2
 8005b22:	1e5a      	subs	r2, r3, #1
 8005b24:	4193      	sbcs	r3, r2
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	4bd9      	ldr	r3, [pc, #868]	@ (8005e90 <CreateMessage+0xc1c>)
 8005b2a:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005b2c:	4bd9      	ldr	r3, [pc, #868]	@ (8005e94 <CreateMessage+0xc20>)
 8005b2e:	48da      	ldr	r0, [pc, #872]	@ (8005e98 <CreateMessage+0xc24>)
 8005b30:	220c      	movs	r2, #12
 8005b32:	0019      	movs	r1, r3
 8005b34:	f005 fefc 	bl	800b930 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005b38:	4ad8      	ldr	r2, [pc, #864]	@ (8005e9c <CreateMessage+0xc28>)
 8005b3a:	49d9      	ldr	r1, [pc, #868]	@ (8005ea0 <CreateMessage+0xc2c>)
 8005b3c:	4bd5      	ldr	r3, [pc, #852]	@ (8005e94 <CreateMessage+0xc20>)
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f7ff fb3c 	bl	80051bc <isKeyValid>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	d043      	beq.n	8005bd0 <CreateMessage+0x95c>
        uint8ArrayToString(Buffer, keybuffer);
 8005b48:	4ad2      	ldr	r2, [pc, #840]	@ (8005e94 <CreateMessage+0xc20>)
 8005b4a:	4bd6      	ldr	r3, [pc, #856]	@ (8005ea4 <CreateMessage+0xc30>)
 8005b4c:	0011      	movs	r1, r2
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f7ff fb6c 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
 8005b54:	4bd4      	ldr	r3, [pc, #848]	@ (8005ea8 <CreateMessage+0xc34>)
 8005b56:	689c      	ldr	r4, [r3, #8]
 8005b58:	4bd4      	ldr	r3, [pc, #848]	@ (8005eac <CreateMessage+0xc38>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	1c18      	adds	r0, r3, #0
 8005b5e:	f7fd fe99 	bl	8003894 <__aeabi_f2d>
 8005b62:	0002      	movs	r2, r0
 8005b64:	000b      	movs	r3, r1
 8005b66:	4dd2      	ldr	r5, [pc, #840]	@ (8005eb0 <CreateMessage+0xc3c>)
 8005b68:	49d2      	ldr	r1, [pc, #840]	@ (8005eb4 <CreateMessage+0xc40>)
 8005b6a:	48c7      	ldr	r0, [pc, #796]	@ (8005e88 <CreateMessage+0xc14>)
 8005b6c:	9202      	str	r2, [sp, #8]
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	4bcc      	ldr	r3, [pc, #816]	@ (8005ea4 <CreateMessage+0xc30>)
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	002b      	movs	r3, r5
 8005b76:	0022      	movs	r2, r4
 8005b78:	f01f ffae 	bl	8025ad8 <siprintf>
#endif
        index += strlen(message);
 8005b7c:	4bc2      	ldr	r3, [pc, #776]	@ (8005e88 <CreateMessage+0xc14>)
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f7fa faf4 	bl	800016c <strlen>
 8005b84:	0003      	movs	r3, r0
 8005b86:	b299      	uxth	r1, r3
 8005b88:	220e      	movs	r2, #14
 8005b8a:	18bb      	adds	r3, r7, r2
 8005b8c:	18ba      	adds	r2, r7, r2
 8005b8e:	8812      	ldrh	r2, [r2, #0]
 8005b90:	188a      	adds	r2, r1, r2
 8005b92:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005b94:	1dbb      	adds	r3, r7, #6
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d019      	beq.n	8005bd0 <CreateMessage+0x95c>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005b9c:	4bba      	ldr	r3, [pc, #744]	@ (8005e88 <CreateMessage+0xc14>)
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7fa fae4 	bl	800016c <strlen>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	4bb7      	ldr	r3, [pc, #732]	@ (8005e88 <CreateMessage+0xc14>)
 8005baa:	0011      	movs	r1, r2
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7ff f95f 	bl	8004e70 <ESP_Send>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	001a      	movs	r2, r3
 8005bb6:	4bb5      	ldr	r3, [pc, #724]	@ (8005e8c <CreateMessage+0xc18>)
 8005bb8:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005bba:	4bb5      	ldr	r3, [pc, #724]	@ (8005e90 <CreateMessage+0xc1c>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	001a      	movs	r2, r3
 8005bc0:	4bb2      	ldr	r3, [pc, #712]	@ (8005e8c <CreateMessage+0xc18>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	4193      	sbcs	r3, r2
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	4bb0      	ldr	r3, [pc, #704]	@ (8005e90 <CreateMessage+0xc1c>)
 8005bce:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005bd0:	4bb0      	ldr	r3, [pc, #704]	@ (8005e94 <CreateMessage+0xc20>)
 8005bd2:	48b9      	ldr	r0, [pc, #740]	@ (8005eb8 <CreateMessage+0xc44>)
 8005bd4:	220c      	movs	r2, #12
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	f005 feaa 	bl	800b930 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005bdc:	4aad      	ldr	r2, [pc, #692]	@ (8005e94 <CreateMessage+0xc20>)
 8005bde:	4bb1      	ldr	r3, [pc, #708]	@ (8005ea4 <CreateMessage+0xc30>)
 8005be0:	0011      	movs	r1, r2
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7ff fb22 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8005be8:	4baf      	ldr	r3, [pc, #700]	@ (8005ea8 <CreateMessage+0xc34>)
 8005bea:	689c      	ldr	r4, [r3, #8]
 8005bec:	4baf      	ldr	r3, [pc, #700]	@ (8005eac <CreateMessage+0xc38>)
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	1c18      	adds	r0, r3, #0
 8005bf2:	f7fd fe4f 	bl	8003894 <__aeabi_f2d>
 8005bf6:	0002      	movs	r2, r0
 8005bf8:	000b      	movs	r3, r1
 8005bfa:	4dad      	ldr	r5, [pc, #692]	@ (8005eb0 <CreateMessage+0xc3c>)
 8005bfc:	49af      	ldr	r1, [pc, #700]	@ (8005ebc <CreateMessage+0xc48>)
 8005bfe:	48a2      	ldr	r0, [pc, #648]	@ (8005e88 <CreateMessage+0xc14>)
 8005c00:	9202      	str	r2, [sp, #8]
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	4ba7      	ldr	r3, [pc, #668]	@ (8005ea4 <CreateMessage+0xc30>)
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	002b      	movs	r3, r5
 8005c0a:	0022      	movs	r2, r4
 8005c0c:	f01f ff64 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 8005c10:	4b9d      	ldr	r3, [pc, #628]	@ (8005e88 <CreateMessage+0xc14>)
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7fa faaa 	bl	800016c <strlen>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	b299      	uxth	r1, r3
 8005c1c:	220e      	movs	r2, #14
 8005c1e:	18bb      	adds	r3, r7, r2
 8005c20:	18ba      	adds	r2, r7, r2
 8005c22:	8812      	ldrh	r2, [r2, #0]
 8005c24:	188a      	adds	r2, r1, r2
 8005c26:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c28:	1dbb      	adds	r3, r7, #6
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d019      	beq.n	8005c64 <CreateMessage+0x9f0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c30:	4b95      	ldr	r3, [pc, #596]	@ (8005e88 <CreateMessage+0xc14>)
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7fa fa9a 	bl	800016c <strlen>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	4b92      	ldr	r3, [pc, #584]	@ (8005e88 <CreateMessage+0xc14>)
 8005c3e:	0011      	movs	r1, r2
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7ff f915 	bl	8004e70 <ESP_Send>
 8005c46:	0003      	movs	r3, r0
 8005c48:	001a      	movs	r2, r3
 8005c4a:	4b90      	ldr	r3, [pc, #576]	@ (8005e8c <CreateMessage+0xc18>)
 8005c4c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c4e:	4b90      	ldr	r3, [pc, #576]	@ (8005e90 <CreateMessage+0xc1c>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	001a      	movs	r2, r3
 8005c54:	4b8d      	ldr	r3, [pc, #564]	@ (8005e8c <CreateMessage+0xc18>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	1e5a      	subs	r2, r3, #1
 8005c5c:	4193      	sbcs	r3, r2
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	4b8b      	ldr	r3, [pc, #556]	@ (8005e90 <CreateMessage+0xc1c>)
 8005c62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005c64:	f006 ffd6 	bl	800cc14 <IsAHT20SensorPresent>
 8005c68:	1e03      	subs	r3, r0, #0
 8005c6a:	d100      	bne.n	8005c6e <CreateMessage+0x9fa>
 8005c6c:	e0a3      	b.n	8005db6 <CreateMessage+0xb42>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005c6e:	4b89      	ldr	r3, [pc, #548]	@ (8005e94 <CreateMessage+0xc20>)
 8005c70:	4893      	ldr	r0, [pc, #588]	@ (8005ec0 <CreateMessage+0xc4c>)
 8005c72:	220c      	movs	r2, #12
 8005c74:	0019      	movs	r1, r3
 8005c76:	f005 fe5b 	bl	800b930 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005c7a:	4a92      	ldr	r2, [pc, #584]	@ (8005ec4 <CreateMessage+0xc50>)
 8005c7c:	4992      	ldr	r1, [pc, #584]	@ (8005ec8 <CreateMessage+0xc54>)
 8005c7e:	4b85      	ldr	r3, [pc, #532]	@ (8005e94 <CreateMessage+0xc20>)
 8005c80:	0018      	movs	r0, r3
 8005c82:	f7ff fa9b 	bl	80051bc <isKeyValid>
 8005c86:	1e03      	subs	r3, r0, #0
 8005c88:	d043      	beq.n	8005d12 <CreateMessage+0xa9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005c8a:	4a82      	ldr	r2, [pc, #520]	@ (8005e94 <CreateMessage+0xc20>)
 8005c8c:	4b85      	ldr	r3, [pc, #532]	@ (8005ea4 <CreateMessage+0xc30>)
 8005c8e:	0011      	movs	r1, r2
 8005c90:	0018      	movs	r0, r3
 8005c92:	f7ff facb 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
 8005c96:	4b84      	ldr	r3, [pc, #528]	@ (8005ea8 <CreateMessage+0xc34>)
 8005c98:	689c      	ldr	r4, [r3, #8]
 8005c9a:	4b84      	ldr	r3, [pc, #528]	@ (8005eac <CreateMessage+0xc38>)
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	1c18      	adds	r0, r3, #0
 8005ca0:	f7fd fdf8 	bl	8003894 <__aeabi_f2d>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	000b      	movs	r3, r1
 8005ca8:	4d81      	ldr	r5, [pc, #516]	@ (8005eb0 <CreateMessage+0xc3c>)
 8005caa:	4988      	ldr	r1, [pc, #544]	@ (8005ecc <CreateMessage+0xc58>)
 8005cac:	4876      	ldr	r0, [pc, #472]	@ (8005e88 <CreateMessage+0xc14>)
 8005cae:	9202      	str	r2, [sp, #8]
 8005cb0:	9303      	str	r3, [sp, #12]
 8005cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8005ea4 <CreateMessage+0xc30>)
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	002b      	movs	r3, r5
 8005cb8:	0022      	movs	r2, r4
 8005cba:	f01f ff0d 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 8005cbe:	4b72      	ldr	r3, [pc, #456]	@ (8005e88 <CreateMessage+0xc14>)
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f7fa fa53 	bl	800016c <strlen>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	b299      	uxth	r1, r3
 8005cca:	220e      	movs	r2, #14
 8005ccc:	18bb      	adds	r3, r7, r2
 8005cce:	18ba      	adds	r2, r7, r2
 8005cd0:	8812      	ldrh	r2, [r2, #0]
 8005cd2:	188a      	adds	r2, r1, r2
 8005cd4:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005cd6:	1dbb      	adds	r3, r7, #6
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d019      	beq.n	8005d12 <CreateMessage+0xa9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cde:	4b6a      	ldr	r3, [pc, #424]	@ (8005e88 <CreateMessage+0xc14>)
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f7fa fa43 	bl	800016c <strlen>
 8005ce6:	0003      	movs	r3, r0
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	4b67      	ldr	r3, [pc, #412]	@ (8005e88 <CreateMessage+0xc14>)
 8005cec:	0011      	movs	r1, r2
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7ff f8be 	bl	8004e70 <ESP_Send>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	001a      	movs	r2, r3
 8005cf8:	4b64      	ldr	r3, [pc, #400]	@ (8005e8c <CreateMessage+0xc18>)
 8005cfa:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cfc:	4b64      	ldr	r3, [pc, #400]	@ (8005e90 <CreateMessage+0xc1c>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	001a      	movs	r2, r3
 8005d02:	4b62      	ldr	r3, [pc, #392]	@ (8005e8c <CreateMessage+0xc18>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	4013      	ands	r3, r2
 8005d08:	1e5a      	subs	r2, r3, #1
 8005d0a:	4193      	sbcs	r3, r2
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4b60      	ldr	r3, [pc, #384]	@ (8005e90 <CreateMessage+0xc1c>)
 8005d10:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005d12:	4b60      	ldr	r3, [pc, #384]	@ (8005e94 <CreateMessage+0xc20>)
 8005d14:	486e      	ldr	r0, [pc, #440]	@ (8005ed0 <CreateMessage+0xc5c>)
 8005d16:	220c      	movs	r2, #12
 8005d18:	0019      	movs	r1, r3
 8005d1a:	f005 fe09 	bl	800b930 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8005ed4 <CreateMessage+0xc60>)
 8005d20:	4969      	ldr	r1, [pc, #420]	@ (8005ec8 <CreateMessage+0xc54>)
 8005d22:	4b5c      	ldr	r3, [pc, #368]	@ (8005e94 <CreateMessage+0xc20>)
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7ff fa49 	bl	80051bc <isKeyValid>
 8005d2a:	1e03      	subs	r3, r0, #0
 8005d2c:	d043      	beq.n	8005db6 <CreateMessage+0xb42>
      uint8ArrayToString(Buffer, keybuffer);
 8005d2e:	4a59      	ldr	r2, [pc, #356]	@ (8005e94 <CreateMessage+0xc20>)
 8005d30:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea4 <CreateMessage+0xc30>)
 8005d32:	0011      	movs	r1, r2
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7ff fa79 	bl	800522c <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
 8005d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ea8 <CreateMessage+0xc34>)
 8005d3c:	689c      	ldr	r4, [r3, #8]
 8005d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005eac <CreateMessage+0xc38>)
 8005d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d42:	1c18      	adds	r0, r3, #0
 8005d44:	f7fd fda6 	bl	8003894 <__aeabi_f2d>
 8005d48:	0002      	movs	r2, r0
 8005d4a:	000b      	movs	r3, r1
 8005d4c:	4d58      	ldr	r5, [pc, #352]	@ (8005eb0 <CreateMessage+0xc3c>)
 8005d4e:	4962      	ldr	r1, [pc, #392]	@ (8005ed8 <CreateMessage+0xc64>)
 8005d50:	484d      	ldr	r0, [pc, #308]	@ (8005e88 <CreateMessage+0xc14>)
 8005d52:	9202      	str	r2, [sp, #8]
 8005d54:	9303      	str	r3, [sp, #12]
 8005d56:	4b53      	ldr	r3, [pc, #332]	@ (8005ea4 <CreateMessage+0xc30>)
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	002b      	movs	r3, r5
 8005d5c:	0022      	movs	r2, r4
 8005d5e:	f01f febb 	bl	8025ad8 <siprintf>
  #endif
      index += strlen(message);
 8005d62:	4b49      	ldr	r3, [pc, #292]	@ (8005e88 <CreateMessage+0xc14>)
 8005d64:	0018      	movs	r0, r3
 8005d66:	f7fa fa01 	bl	800016c <strlen>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	b299      	uxth	r1, r3
 8005d6e:	220e      	movs	r2, #14
 8005d70:	18bb      	adds	r3, r7, r2
 8005d72:	18ba      	adds	r2, r7, r2
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	188a      	adds	r2, r1, r2
 8005d78:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d7a:	1dbb      	adds	r3, r7, #6
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d019      	beq.n	8005db6 <CreateMessage+0xb42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d82:	4b41      	ldr	r3, [pc, #260]	@ (8005e88 <CreateMessage+0xc14>)
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7fa f9f1 	bl	800016c <strlen>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e88 <CreateMessage+0xc14>)
 8005d90:	0011      	movs	r1, r2
 8005d92:	0018      	movs	r0, r3
 8005d94:	f7ff f86c 	bl	8004e70 <ESP_Send>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	001a      	movs	r2, r3
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e8c <CreateMessage+0xc18>)
 8005d9e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005da0:	4b3b      	ldr	r3, [pc, #236]	@ (8005e90 <CreateMessage+0xc1c>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	001a      	movs	r2, r3
 8005da6:	4b39      	ldr	r3, [pc, #228]	@ (8005e8c <CreateMessage+0xc18>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	4013      	ands	r3, r2
 8005dac:	1e5a      	subs	r2, r3, #1
 8005dae:	4193      	sbcs	r3, r2
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	4b37      	ldr	r3, [pc, #220]	@ (8005e90 <CreateMessage+0xc1c>)
 8005db4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005db6:	f006 ff41 	bl	800cc3c <IsENS160SensorPresent>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d100      	bne.n	8005dc0 <CreateMessage+0xb4c>
 8005dbe:	e11b      	b.n	8005ff8 <CreateMessage+0xd84>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005dc0:	4b34      	ldr	r3, [pc, #208]	@ (8005e94 <CreateMessage+0xc20>)
 8005dc2:	4846      	ldr	r0, [pc, #280]	@ (8005edc <CreateMessage+0xc68>)
 8005dc4:	220c      	movs	r2, #12
 8005dc6:	0019      	movs	r1, r3
 8005dc8:	f005 fdb2 	bl	800b930 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005dcc:	4a44      	ldr	r2, [pc, #272]	@ (8005ee0 <CreateMessage+0xc6c>)
 8005dce:	4945      	ldr	r1, [pc, #276]	@ (8005ee4 <CreateMessage+0xc70>)
 8005dd0:	4b30      	ldr	r3, [pc, #192]	@ (8005e94 <CreateMessage+0xc20>)
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7ff f9f2 	bl	80051bc <isKeyValid>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d03d      	beq.n	8005e58 <CreateMessage+0xbe4>
      uint8ArrayToString(Buffer, keybuffer);
 8005ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e94 <CreateMessage+0xc20>)
 8005dde:	4b31      	ldr	r3, [pc, #196]	@ (8005ea4 <CreateMessage+0xc30>)
 8005de0:	0011      	movs	r1, r2
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7ff fa22 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
 8005de8:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea8 <CreateMessage+0xc34>)
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	4b2f      	ldr	r3, [pc, #188]	@ (8005eac <CreateMessage+0xc38>)
 8005dee:	2155      	movs	r1, #85	@ 0x55
 8005df0:	5c5b      	ldrb	r3, [r3, r1]
 8005df2:	4c2f      	ldr	r4, [pc, #188]	@ (8005eb0 <CreateMessage+0xc3c>)
 8005df4:	493c      	ldr	r1, [pc, #240]	@ (8005ee8 <CreateMessage+0xc74>)
 8005df6:	4824      	ldr	r0, [pc, #144]	@ (8005e88 <CreateMessage+0xc14>)
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea4 <CreateMessage+0xc30>)
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	0023      	movs	r3, r4
 8005e00:	f01f fe6a 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 8005e04:	4b20      	ldr	r3, [pc, #128]	@ (8005e88 <CreateMessage+0xc14>)
 8005e06:	0018      	movs	r0, r3
 8005e08:	f7fa f9b0 	bl	800016c <strlen>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	b299      	uxth	r1, r3
 8005e10:	220e      	movs	r2, #14
 8005e12:	18bb      	adds	r3, r7, r2
 8005e14:	18ba      	adds	r2, r7, r2
 8005e16:	8812      	ldrh	r2, [r2, #0]
 8005e18:	188a      	adds	r2, r1, r2
 8005e1a:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e1c:	1dbb      	adds	r3, r7, #6
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d019      	beq.n	8005e58 <CreateMessage+0xbe4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e24:	4b18      	ldr	r3, [pc, #96]	@ (8005e88 <CreateMessage+0xc14>)
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7fa f9a0 	bl	800016c <strlen>
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	4b15      	ldr	r3, [pc, #84]	@ (8005e88 <CreateMessage+0xc14>)
 8005e32:	0011      	movs	r1, r2
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7ff f81b 	bl	8004e70 <ESP_Send>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	001a      	movs	r2, r3
 8005e3e:	4b13      	ldr	r3, [pc, #76]	@ (8005e8c <CreateMessage+0xc18>)
 8005e40:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e42:	4b13      	ldr	r3, [pc, #76]	@ (8005e90 <CreateMessage+0xc1c>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	001a      	movs	r2, r3
 8005e48:	4b10      	ldr	r3, [pc, #64]	@ (8005e8c <CreateMessage+0xc18>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	1e5a      	subs	r2, r3, #1
 8005e50:	4193      	sbcs	r3, r2
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	4b0e      	ldr	r3, [pc, #56]	@ (8005e90 <CreateMessage+0xc1c>)
 8005e56:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8005e58:	4b0e      	ldr	r3, [pc, #56]	@ (8005e94 <CreateMessage+0xc20>)
 8005e5a:	4824      	ldr	r0, [pc, #144]	@ (8005eec <CreateMessage+0xc78>)
 8005e5c:	220c      	movs	r2, #12
 8005e5e:	0019      	movs	r1, r3
 8005e60:	f005 fd66 	bl	800b930 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8005e64:	4a22      	ldr	r2, [pc, #136]	@ (8005ef0 <CreateMessage+0xc7c>)
 8005e66:	491f      	ldr	r1, [pc, #124]	@ (8005ee4 <CreateMessage+0xc70>)
 8005e68:	4b0a      	ldr	r3, [pc, #40]	@ (8005e94 <CreateMessage+0xc20>)
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f7ff f9a6 	bl	80051bc <isKeyValid>
 8005e70:	1e03      	subs	r3, r0, #0
 8005e72:	d075      	beq.n	8005f60 <CreateMessage+0xcec>
      uint8ArrayToString(Buffer, keybuffer);
 8005e74:	4a07      	ldr	r2, [pc, #28]	@ (8005e94 <CreateMessage+0xc20>)
 8005e76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea4 <CreateMessage+0xc30>)
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f7ff f9d6 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
 8005e80:	4b09      	ldr	r3, [pc, #36]	@ (8005ea8 <CreateMessage+0xc34>)
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	e036      	b.n	8005ef4 <CreateMessage+0xc80>
 8005e86:	46c0      	nop			@ (mov r8, r8)
 8005e88:	200005d0 	.word	0x200005d0
 8005e8c:	20000765 	.word	0x20000765
 8005e90:	2000002d 	.word	0x2000002d
 8005e94:	20000740 	.word	0x20000740
 8005e98:	080800bc 	.word	0x080800bc
 8005e9c:	0802aa10 	.word	0x0802aa10
 8005ea0:	0802aad4 	.word	0x0802aad4
 8005ea4:	2000074c 	.word	0x2000074c
 8005ea8:	200005b0 	.word	0x200005b0
 8005eac:	20000680 	.word	0x20000680
 8005eb0:	20000720 	.word	0x20000720
 8005eb4:	0802aad8 	.word	0x0802aad8
 8005eb8:	08080060 	.word	0x08080060
 8005ebc:	0802ab30 	.word	0x0802ab30
 8005ec0:	080800c8 	.word	0x080800c8
 8005ec4:	0802a934 	.word	0x0802a934
 8005ec8:	0802ab8c 	.word	0x0802ab8c
 8005ecc:	0802ab94 	.word	0x0802ab94
 8005ed0:	080800d4 	.word	0x080800d4
 8005ed4:	0802a9a4 	.word	0x0802a9a4
 8005ed8:	0802abf0 	.word	0x0802abf0
 8005edc:	080800ec 	.word	0x080800ec
 8005ee0:	0802ac4c 	.word	0x0802ac4c
 8005ee4:	0802ac60 	.word	0x0802ac60
 8005ee8:	0802ac68 	.word	0x0802ac68
 8005eec:	080800f8 	.word	0x080800f8
 8005ef0:	0802acc0 	.word	0x0802acc0
 8005ef4:	4b71      	ldr	r3, [pc, #452]	@ (80060bc <CreateMessage+0xe48>)
 8005ef6:	214a      	movs	r1, #74	@ 0x4a
 8005ef8:	5a5b      	ldrh	r3, [r3, r1]
 8005efa:	4c71      	ldr	r4, [pc, #452]	@ (80060c0 <CreateMessage+0xe4c>)
 8005efc:	4971      	ldr	r1, [pc, #452]	@ (80060c4 <CreateMessage+0xe50>)
 8005efe:	4872      	ldr	r0, [pc, #456]	@ (80060c8 <CreateMessage+0xe54>)
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	4b72      	ldr	r3, [pc, #456]	@ (80060cc <CreateMessage+0xe58>)
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	0023      	movs	r3, r4
 8005f08:	f01f fde6 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 8005f0c:	4b6e      	ldr	r3, [pc, #440]	@ (80060c8 <CreateMessage+0xe54>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7fa f92c 	bl	800016c <strlen>
 8005f14:	0003      	movs	r3, r0
 8005f16:	b299      	uxth	r1, r3
 8005f18:	220e      	movs	r2, #14
 8005f1a:	18bb      	adds	r3, r7, r2
 8005f1c:	18ba      	adds	r2, r7, r2
 8005f1e:	8812      	ldrh	r2, [r2, #0]
 8005f20:	188a      	adds	r2, r1, r2
 8005f22:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f24:	1dbb      	adds	r3, r7, #6
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d019      	beq.n	8005f60 <CreateMessage+0xcec>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f2c:	4b66      	ldr	r3, [pc, #408]	@ (80060c8 <CreateMessage+0xe54>)
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f7fa f91c 	bl	800016c <strlen>
 8005f34:	0003      	movs	r3, r0
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	4b63      	ldr	r3, [pc, #396]	@ (80060c8 <CreateMessage+0xe54>)
 8005f3a:	0011      	movs	r1, r2
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f7fe ff97 	bl	8004e70 <ESP_Send>
 8005f42:	0003      	movs	r3, r0
 8005f44:	001a      	movs	r2, r3
 8005f46:	4b62      	ldr	r3, [pc, #392]	@ (80060d0 <CreateMessage+0xe5c>)
 8005f48:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f4a:	4b62      	ldr	r3, [pc, #392]	@ (80060d4 <CreateMessage+0xe60>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	001a      	movs	r2, r3
 8005f50:	4b5f      	ldr	r3, [pc, #380]	@ (80060d0 <CreateMessage+0xe5c>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	4013      	ands	r3, r2
 8005f56:	1e5a      	subs	r2, r3, #1
 8005f58:	4193      	sbcs	r3, r2
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4b5d      	ldr	r3, [pc, #372]	@ (80060d4 <CreateMessage+0xe60>)
 8005f5e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005f60:	4b5d      	ldr	r3, [pc, #372]	@ (80060d8 <CreateMessage+0xe64>)
 8005f62:	485e      	ldr	r0, [pc, #376]	@ (80060dc <CreateMessage+0xe68>)
 8005f64:	220c      	movs	r2, #12
 8005f66:	0019      	movs	r1, r3
 8005f68:	f005 fce2 	bl	800b930 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8005f6c:	4a5c      	ldr	r2, [pc, #368]	@ (80060e0 <CreateMessage+0xe6c>)
 8005f6e:	495d      	ldr	r1, [pc, #372]	@ (80060e4 <CreateMessage+0xe70>)
 8005f70:	4b59      	ldr	r3, [pc, #356]	@ (80060d8 <CreateMessage+0xe64>)
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7ff f922 	bl	80051bc <isKeyValid>
 8005f78:	1e03      	subs	r3, r0, #0
 8005f7a:	d03d      	beq.n	8005ff8 <CreateMessage+0xd84>
      uint8ArrayToString(Buffer, keybuffer);
 8005f7c:	4a56      	ldr	r2, [pc, #344]	@ (80060d8 <CreateMessage+0xe64>)
 8005f7e:	4b53      	ldr	r3, [pc, #332]	@ (80060cc <CreateMessage+0xe58>)
 8005f80:	0011      	movs	r1, r2
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7ff f952 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
 8005f88:	4b57      	ldr	r3, [pc, #348]	@ (80060e8 <CreateMessage+0xe74>)
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80060bc <CreateMessage+0xe48>)
 8005f8e:	2152      	movs	r1, #82	@ 0x52
 8005f90:	5a5b      	ldrh	r3, [r3, r1]
 8005f92:	4c4b      	ldr	r4, [pc, #300]	@ (80060c0 <CreateMessage+0xe4c>)
 8005f94:	4955      	ldr	r1, [pc, #340]	@ (80060ec <CreateMessage+0xe78>)
 8005f96:	484c      	ldr	r0, [pc, #304]	@ (80060c8 <CreateMessage+0xe54>)
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80060cc <CreateMessage+0xe58>)
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	0023      	movs	r3, r4
 8005fa0:	f01f fd9a 	bl	8025ad8 <siprintf>
#endif
      index += strlen(message);
 8005fa4:	4b48      	ldr	r3, [pc, #288]	@ (80060c8 <CreateMessage+0xe54>)
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fa f8e0 	bl	800016c <strlen>
 8005fac:	0003      	movs	r3, r0
 8005fae:	b299      	uxth	r1, r3
 8005fb0:	220e      	movs	r2, #14
 8005fb2:	18bb      	adds	r3, r7, r2
 8005fb4:	18ba      	adds	r2, r7, r2
 8005fb6:	8812      	ldrh	r2, [r2, #0]
 8005fb8:	188a      	adds	r2, r1, r2
 8005fba:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fbc:	1dbb      	adds	r3, r7, #6
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d019      	beq.n	8005ff8 <CreateMessage+0xd84>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fc4:	4b40      	ldr	r3, [pc, #256]	@ (80060c8 <CreateMessage+0xe54>)
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7fa f8d0 	bl	800016c <strlen>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80060c8 <CreateMessage+0xe54>)
 8005fd2:	0011      	movs	r1, r2
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f7fe ff4b 	bl	8004e70 <ESP_Send>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	001a      	movs	r2, r3
 8005fde:	4b3c      	ldr	r3, [pc, #240]	@ (80060d0 <CreateMessage+0xe5c>)
 8005fe0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80060d4 <CreateMessage+0xe60>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	001a      	movs	r2, r3
 8005fe8:	4b39      	ldr	r3, [pc, #228]	@ (80060d0 <CreateMessage+0xe5c>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	4013      	ands	r3, r2
 8005fee:	1e5a      	subs	r2, r3, #1
 8005ff0:	4193      	sbcs	r3, r2
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <CreateMessage+0xe60>)
 8005ff6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8005ff8:	4b37      	ldr	r3, [pc, #220]	@ (80060d8 <CreateMessage+0xe64>)
 8005ffa:	483d      	ldr	r0, [pc, #244]	@ (80060f0 <CreateMessage+0xe7c>)
 8005ffc:	220c      	movs	r2, #12
 8005ffe:	0019      	movs	r1, r3
 8006000:	f005 fc96 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8006004:	4a34      	ldr	r2, [pc, #208]	@ (80060d8 <CreateMessage+0xe64>)
 8006006:	4b31      	ldr	r3, [pc, #196]	@ (80060cc <CreateMessage+0xe58>)
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f7ff f90e 	bl	800522c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8006010:	4b35      	ldr	r3, [pc, #212]	@ (80060e8 <CreateMessage+0xe74>)
 8006012:	689c      	ldr	r4, [r3, #8]
 8006014:	4b37      	ldr	r3, [pc, #220]	@ (80060f4 <CreateMessage+0xe80>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	1c18      	adds	r0, r3, #0
 800601a:	f7fd fc3b 	bl	8003894 <__aeabi_f2d>
 800601e:	0002      	movs	r2, r0
 8006020:	000b      	movs	r3, r1
 8006022:	4d27      	ldr	r5, [pc, #156]	@ (80060c0 <CreateMessage+0xe4c>)
 8006024:	4934      	ldr	r1, [pc, #208]	@ (80060f8 <CreateMessage+0xe84>)
 8006026:	4828      	ldr	r0, [pc, #160]	@ (80060c8 <CreateMessage+0xe54>)
 8006028:	9202      	str	r2, [sp, #8]
 800602a:	9303      	str	r3, [sp, #12]
 800602c:	4b27      	ldr	r3, [pc, #156]	@ (80060cc <CreateMessage+0xe58>)
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	002b      	movs	r3, r5
 8006032:	0022      	movs	r2, r4
 8006034:	f01f fd50 	bl	8025ad8 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8006038:	4b23      	ldr	r3, [pc, #140]	@ (80060c8 <CreateMessage+0xe54>)
 800603a:	0018      	movs	r0, r3
 800603c:	f7fa f896 	bl	800016c <strlen>
 8006040:	0002      	movs	r2, r0
 8006042:	4b21      	ldr	r3, [pc, #132]	@ (80060c8 <CreateMessage+0xe54>)
 8006044:	18d3      	adds	r3, r2, r3
 8006046:	4a2d      	ldr	r2, [pc, #180]	@ (80060fc <CreateMessage+0xe88>)
 8006048:	0011      	movs	r1, r2
 800604a:	0018      	movs	r0, r3
 800604c:	f01f fd44 	bl	8025ad8 <siprintf>
  index += strlen(message);
 8006050:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <CreateMessage+0xe54>)
 8006052:	0018      	movs	r0, r3
 8006054:	f7fa f88a 	bl	800016c <strlen>
 8006058:	0003      	movs	r3, r0
 800605a:	b299      	uxth	r1, r3
 800605c:	220e      	movs	r2, #14
 800605e:	18bb      	adds	r3, r7, r2
 8006060:	18ba      	adds	r2, r7, r2
 8006062:	8812      	ldrh	r2, [r2, #0]
 8006064:	188a      	adds	r2, r1, r2
 8006066:	801a      	strh	r2, [r3, #0]
  if (send) {
 8006068:	1dbb      	adds	r3, r7, #6
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d019      	beq.n	80060a4 <CreateMessage+0xe30>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006070:	4b15      	ldr	r3, [pc, #84]	@ (80060c8 <CreateMessage+0xe54>)
 8006072:	0018      	movs	r0, r3
 8006074:	f7fa f87a 	bl	800016c <strlen>
 8006078:	0003      	movs	r3, r0
 800607a:	b29a      	uxth	r2, r3
 800607c:	4b12      	ldr	r3, [pc, #72]	@ (80060c8 <CreateMessage+0xe54>)
 800607e:	0011      	movs	r1, r2
 8006080:	0018      	movs	r0, r3
 8006082:	f7fe fef5 	bl	8004e70 <ESP_Send>
 8006086:	0003      	movs	r3, r0
 8006088:	001a      	movs	r2, r3
 800608a:	4b11      	ldr	r3, [pc, #68]	@ (80060d0 <CreateMessage+0xe5c>)
 800608c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800608e:	4b11      	ldr	r3, [pc, #68]	@ (80060d4 <CreateMessage+0xe60>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	001a      	movs	r2, r3
 8006094:	4b0e      	ldr	r3, [pc, #56]	@ (80060d0 <CreateMessage+0xe5c>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	4013      	ands	r3, r2
 800609a:	1e5a      	subs	r2, r3, #1
 800609c:	4193      	sbcs	r3, r2
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <CreateMessage+0xe60>)
 80060a2:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80060a4:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <CreateMessage+0xe60>)
 80060a6:	781a      	ldrb	r2, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	701a      	strb	r2, [r3, #0]
  return index;
 80060ac:	230e      	movs	r3, #14
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	881b      	ldrh	r3, [r3, #0]
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b005      	add	sp, #20
 80060b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	20000680 	.word	0x20000680
 80060c0:	20000720 	.word	0x20000720
 80060c4:	0802acc8 	.word	0x0802acc8
 80060c8:	200005d0 	.word	0x200005d0
 80060cc:	2000074c 	.word	0x2000074c
 80060d0:	20000765 	.word	0x20000765
 80060d4:	2000002d 	.word	0x2000002d
 80060d8:	20000740 	.word	0x20000740
 80060dc:	08080104 	.word	0x08080104
 80060e0:	0802ad24 	.word	0x0802ad24
 80060e4:	0802ac60 	.word	0x0802ac60
 80060e8:	200005b0 	.word	0x200005b0
 80060ec:	0802ad2c 	.word	0x0802ad2c
 80060f0:	0808006c 	.word	0x0808006c
 80060f4:	200005c8 	.word	0x200005c8
 80060f8:	0802ad88 	.word	0x0802ad88
 80060fc:	0802ade0 	.word	0x0802ade0

08006100 <StartProg>:

void StartProg(){
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8006104:	2064      	movs	r0, #100	@ 0x64
 8006106:	f00d ff3f 	bl	8013f88 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800610a:	4b15      	ldr	r3, [pc, #84]	@ (8006160 <StartProg+0x60>)
 800610c:	2200      	movs	r2, #0
 800610e:	2101      	movs	r1, #1
 8006110:	0018      	movs	r0, r3
 8006112:	f00f f9c0 	bl	8015496 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8006116:	2064      	movs	r0, #100	@ 0x64
 8006118:	f00d ff36 	bl	8013f88 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800611c:	4b10      	ldr	r3, [pc, #64]	@ (8006160 <StartProg+0x60>)
 800611e:	2200      	movs	r2, #0
 8006120:	2102      	movs	r1, #2
 8006122:	0018      	movs	r0, r3
 8006124:	f00f f9b7 	bl	8015496 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8006128:	23fa      	movs	r3, #250	@ 0xfa
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	0018      	movs	r0, r3
 800612e:	f00d ff2b 	bl	8013f88 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006132:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <StartProg+0x60>)
 8006134:	2201      	movs	r2, #1
 8006136:	2101      	movs	r1, #1
 8006138:	0018      	movs	r0, r3
 800613a:	f00f f9ac 	bl	8015496 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800613e:	23fa      	movs	r3, #250	@ 0xfa
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	0018      	movs	r0, r3
 8006144:	f00d ff20 	bl	8013f88 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <StartProg+0x60>)
 800614a:	2201      	movs	r2, #1
 800614c:	2102      	movs	r1, #2
 800614e:	0018      	movs	r0, r3
 8006150:	f00f f9a1 	bl	8015496 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8006154:	2028      	movs	r0, #40	@ 0x28
 8006156:	f00d ff17 	bl	8013f88 <HAL_Delay>
}
 800615a:	46c0      	nop			@ (mov r8, r8)
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	50001c00 	.word	0x50001c00

08006164 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8006164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006166:	b0d9      	sub	sp, #356	@ 0x164
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	0008      	movs	r0, r1
 800616e:	0011      	movs	r1, r2
 8006170:	4ba3      	ldr	r3, [pc, #652]	@ (8006400 <ParseBuffer+0x29c>)
 8006172:	24b0      	movs	r4, #176	@ 0xb0
 8006174:	0064      	lsls	r4, r4, #1
 8006176:	191b      	adds	r3, r3, r4
 8006178:	19db      	adds	r3, r3, r7
 800617a:	1c02      	adds	r2, r0, #0
 800617c:	801a      	strh	r2, [r3, #0]
 800617e:	4ba1      	ldr	r3, [pc, #644]	@ (8006404 <ParseBuffer+0x2a0>)
 8006180:	191b      	adds	r3, r3, r4
 8006182:	19db      	adds	r3, r3, r7
 8006184:	1c0a      	adds	r2, r1, #0
 8006186:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	005a      	lsls	r2, r3, #1
 800618c:	2348      	movs	r3, #72	@ 0x48
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2100      	movs	r1, #0
 8006192:	0018      	movs	r0, r3
 8006194:	f01f fe0a 	bl	8025dac <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006198:	2360      	movs	r3, #96	@ 0x60
 800619a:	33ff      	adds	r3, #255	@ 0xff
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	2203      	movs	r2, #3
 80061a0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80061a2:	23ae      	movs	r3, #174	@ 0xae
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	2200      	movs	r2, #0
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e013      	b.n	80061d6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80061ae:	20ae      	movs	r0, #174	@ 0xae
 80061b0:	0040      	lsls	r0, r0, #1
 80061b2:	183b      	adds	r3, r7, r0
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	18d2      	adds	r2, r2, r3
 80061ba:	183b      	adds	r3, r7, r0
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	7811      	ldrb	r1, [r2, #0]
 80061c0:	4a91      	ldr	r2, [pc, #580]	@ (8006408 <ParseBuffer+0x2a4>)
 80061c2:	24b0      	movs	r4, #176	@ 0xb0
 80061c4:	0064      	lsls	r4, r4, #1
 80061c6:	1912      	adds	r2, r2, r4
 80061c8:	19d2      	adds	r2, r2, r7
 80061ca:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80061cc:	183b      	adds	r3, r7, r0
 80061ce:	881a      	ldrh	r2, [r3, #0]
 80061d0:	183b      	adds	r3, r7, r0
 80061d2:	3201      	adds	r2, #1
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	23ae      	movs	r3, #174	@ 0xae
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	18fa      	adds	r2, r7, r3
 80061dc:	4b88      	ldr	r3, [pc, #544]	@ (8006400 <ParseBuffer+0x29c>)
 80061de:	21b0      	movs	r1, #176	@ 0xb0
 80061e0:	0049      	lsls	r1, r1, #1
 80061e2:	185b      	adds	r3, r3, r1
 80061e4:	19db      	adds	r3, r3, r7
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d3df      	bcc.n	80061ae <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80061ee:	4b84      	ldr	r3, [pc, #528]	@ (8006400 <ParseBuffer+0x29c>)
 80061f0:	185b      	adds	r3, r3, r1
 80061f2:	19db      	adds	r3, r3, r7
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	4a84      	ldr	r2, [pc, #528]	@ (8006408 <ParseBuffer+0x2a4>)
 80061f8:	1852      	adds	r2, r2, r1
 80061fa:	19d2      	adds	r2, r2, r7
 80061fc:	2100      	movs	r1, #0
 80061fe:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8006200:	f00d f9f2 	bl	80135e8 <GetVerboseLevel>
 8006204:	0003      	movs	r3, r0
 8006206:	2b03      	cmp	r3, #3
 8006208:	d106      	bne.n	8006218 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 800620a:	2348      	movs	r3, #72	@ 0x48
 800620c:	18fa      	adds	r2, r7, r3
 800620e:	4b7f      	ldr	r3, [pc, #508]	@ (800640c <ParseBuffer+0x2a8>)
 8006210:	0011      	movs	r1, r2
 8006212:	0018      	movs	r0, r3
 8006214:	f01f fbf0 	bl	80259f8 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	26ac      	movs	r6, #172	@ 0xac
 800621c:	0076      	lsls	r6, r6, #1
 800621e:	19ba      	adds	r2, r7, r6
 8006220:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8006222:	4b7b      	ldr	r3, [pc, #492]	@ (8006410 <ParseBuffer+0x2ac>)
 8006224:	25b0      	movs	r5, #176	@ 0xb0
 8006226:	006d      	lsls	r5, r5, #1
 8006228:	195b      	adds	r3, r3, r5
 800622a:	19db      	adds	r3, r3, r7
 800622c:	4a79      	ldr	r2, [pc, #484]	@ (8006414 <ParseBuffer+0x2b0>)
 800622e:	8811      	ldrh	r1, [r2, #0]
 8006230:	8019      	strh	r1, [r3, #0]
 8006232:	7892      	ldrb	r2, [r2, #2]
 8006234:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8006236:	4b78      	ldr	r3, [pc, #480]	@ (8006418 <ParseBuffer+0x2b4>)
 8006238:	195b      	adds	r3, r3, r5
 800623a:	19db      	adds	r3, r3, r7
 800623c:	4a77      	ldr	r2, [pc, #476]	@ (800641c <ParseBuffer+0x2b8>)
 800623e:	6811      	ldr	r1, [r2, #0]
 8006240:	6019      	str	r1, [r3, #0]
 8006242:	8892      	ldrh	r2, [r2, #4]
 8006244:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8006246:	4b76      	ldr	r3, [pc, #472]	@ (8006420 <ParseBuffer+0x2bc>)
 8006248:	195b      	adds	r3, r3, r5
 800624a:	19db      	adds	r3, r3, r7
 800624c:	4a75      	ldr	r2, [pc, #468]	@ (8006424 <ParseBuffer+0x2c0>)
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	2200      	movs	r2, #0
 8006252:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8006254:	4b74      	ldr	r3, [pc, #464]	@ (8006428 <ParseBuffer+0x2c4>)
 8006256:	195b      	adds	r3, r3, r5
 8006258:	19db      	adds	r3, r3, r7
 800625a:	4a74      	ldr	r2, [pc, #464]	@ (800642c <ParseBuffer+0x2c8>)
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	6019      	str	r1, [r3, #0]
 8006260:	8892      	ldrh	r2, [r2, #4]
 8006262:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8006264:	4b72      	ldr	r3, [pc, #456]	@ (8006430 <ParseBuffer+0x2cc>)
 8006266:	195b      	adds	r3, r3, r5
 8006268:	19db      	adds	r3, r3, r7
 800626a:	223e      	movs	r2, #62	@ 0x3e
 800626c:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800626e:	4b71      	ldr	r3, [pc, #452]	@ (8006434 <ParseBuffer+0x2d0>)
 8006270:	195b      	adds	r3, r3, r5
 8006272:	19db      	adds	r3, r3, r7
 8006274:	4a70      	ldr	r2, [pc, #448]	@ (8006438 <ParseBuffer+0x2d4>)
 8006276:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006278:	c313      	stmia	r3!, {r0, r1, r4}
 800627a:	8811      	ldrh	r1, [r2, #0]
 800627c:	8019      	strh	r1, [r3, #0]
 800627e:	7892      	ldrb	r2, [r2, #2]
 8006280:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8006282:	4b6e      	ldr	r3, [pc, #440]	@ (800643c <ParseBuffer+0x2d8>)
 8006284:	195b      	adds	r3, r3, r5
 8006286:	19db      	adds	r3, r3, r7
 8006288:	4a6d      	ldr	r2, [pc, #436]	@ (8006440 <ParseBuffer+0x2dc>)
 800628a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800628c:	c313      	stmia	r3!, {r0, r1, r4}
 800628e:	8812      	ldrh	r2, [r2, #0]
 8006290:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8006292:	4b5c      	ldr	r3, [pc, #368]	@ (8006404 <ParseBuffer+0x2a0>)
 8006294:	195b      	adds	r3, r3, r5
 8006296:	19db      	adds	r3, r3, r7
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 800629e:	2344      	movs	r3, #68	@ 0x44
 80062a0:	18fa      	adds	r2, r7, r3
 80062a2:	2348      	movs	r3, #72	@ 0x48
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	0011      	movs	r1, r2
 80062a8:	0018      	movs	r0, r3
 80062aa:	f01f fdba 	bl	8025e22 <strstr>
 80062ae:	0003      	movs	r3, r0
 80062b0:	19ba      	adds	r2, r7, r6
 80062b2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80062b4:	4b53      	ldr	r3, [pc, #332]	@ (8006404 <ParseBuffer+0x2a0>)
 80062b6:	22b0      	movs	r2, #176	@ 0xb0
 80062b8:	0052      	lsls	r2, r2, #1
 80062ba:	189b      	adds	r3, r3, r2
 80062bc:	19db      	adds	r3, r3, r7
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d10c      	bne.n	80062de <ParseBuffer+0x17a>
    ParsePoint = strstr(tempBuf, ready);
 80062c4:	232c      	movs	r3, #44	@ 0x2c
 80062c6:	18fa      	adds	r2, r7, r3
 80062c8:	2348      	movs	r3, #72	@ 0x48
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	0011      	movs	r1, r2
 80062ce:	0018      	movs	r0, r3
 80062d0:	f01f fda7 	bl	8025e22 <strstr>
 80062d4:	0003      	movs	r3, r0
 80062d6:	22ac      	movs	r2, #172	@ 0xac
 80062d8:	0052      	lsls	r2, r2, #1
 80062da:	18ba      	adds	r2, r7, r2
 80062dc:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80062de:	4b49      	ldr	r3, [pc, #292]	@ (8006404 <ParseBuffer+0x2a0>)
 80062e0:	22b0      	movs	r2, #176	@ 0xb0
 80062e2:	0052      	lsls	r2, r2, #1
 80062e4:	189b      	adds	r3, r3, r2
 80062e6:	19db      	adds	r3, r3, r7
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d10c      	bne.n	8006308 <ParseBuffer+0x1a4>
    ParsePoint = strstr(tempBuf, start);
 80062ee:	2328      	movs	r3, #40	@ 0x28
 80062f0:	18fa      	adds	r2, r7, r3
 80062f2:	2348      	movs	r3, #72	@ 0x48
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	0011      	movs	r1, r2
 80062f8:	0018      	movs	r0, r3
 80062fa:	f01f fd92 	bl	8025e22 <strstr>
 80062fe:	0003      	movs	r3, r0
 8006300:	22ac      	movs	r2, #172	@ 0xac
 8006302:	0052      	lsls	r2, r2, #1
 8006304:	18ba      	adds	r2, r7, r2
 8006306:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8006308:	4b3e      	ldr	r3, [pc, #248]	@ (8006404 <ParseBuffer+0x2a0>)
 800630a:	22b0      	movs	r2, #176	@ 0xb0
 800630c:	0052      	lsls	r2, r2, #1
 800630e:	189b      	adds	r3, r3, r2
 8006310:	19db      	adds	r3, r3, r7
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b05      	cmp	r3, #5
 8006316:	d10c      	bne.n	8006332 <ParseBuffer+0x1ce>
    ParsePoint = strstr(tempBuf, TIME);
 8006318:	2308      	movs	r3, #8
 800631a:	18fa      	adds	r2, r7, r3
 800631c:	2348      	movs	r3, #72	@ 0x48
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	0011      	movs	r1, r2
 8006322:	0018      	movs	r0, r3
 8006324:	f01f fd7d 	bl	8025e22 <strstr>
 8006328:	0003      	movs	r3, r0
 800632a:	22ac      	movs	r2, #172	@ 0xac
 800632c:	0052      	lsls	r2, r2, #1
 800632e:	18ba      	adds	r2, r7, r2
 8006330:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006332:	233c      	movs	r3, #60	@ 0x3c
 8006334:	18fa      	adds	r2, r7, r3
 8006336:	2448      	movs	r4, #72	@ 0x48
 8006338:	193b      	adds	r3, r7, r4
 800633a:	0011      	movs	r1, r2
 800633c:	0018      	movs	r0, r3
 800633e:	f01f fd70 	bl	8025e22 <strstr>
 8006342:	0003      	movs	r3, r0
 8006344:	22aa      	movs	r2, #170	@ 0xaa
 8006346:	0052      	lsls	r2, r2, #1
 8006348:	18ba      	adds	r2, r7, r2
 800634a:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800634c:	2318      	movs	r3, #24
 800634e:	18fa      	adds	r2, r7, r3
 8006350:	193b      	adds	r3, r7, r4
 8006352:	0011      	movs	r1, r2
 8006354:	0018      	movs	r0, r3
 8006356:	f01f fd64 	bl	8025e22 <strstr>
 800635a:	0003      	movs	r3, r0
 800635c:	22a8      	movs	r2, #168	@ 0xa8
 800635e:	0052      	lsls	r2, r2, #1
 8006360:	18ba      	adds	r2, r7, r2
 8006362:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8006364:	4a37      	ldr	r2, [pc, #220]	@ (8006444 <ParseBuffer+0x2e0>)
 8006366:	193b      	adds	r3, r7, r4
 8006368:	0011      	movs	r1, r2
 800636a:	0018      	movs	r0, r3
 800636c:	f01f fd59 	bl	8025e22 <strstr>
 8006370:	0003      	movs	r3, r0
 8006372:	22a6      	movs	r2, #166	@ 0xa6
 8006374:	0052      	lsls	r2, r2, #1
 8006376:	18ba      	adds	r2, r7, r2
 8006378:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800637a:	2334      	movs	r3, #52	@ 0x34
 800637c:	18fa      	adds	r2, r7, r3
 800637e:	193b      	adds	r3, r7, r4
 8006380:	0011      	movs	r1, r2
 8006382:	0018      	movs	r0, r3
 8006384:	f01f fd4d 	bl	8025e22 <strstr>
 8006388:	0003      	movs	r3, r0
 800638a:	22a4      	movs	r2, #164	@ 0xa4
 800638c:	0052      	lsls	r2, r2, #1
 800638e:	18ba      	adds	r2, r7, r2
 8006390:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8006392:	4b1b      	ldr	r3, [pc, #108]	@ (8006400 <ParseBuffer+0x29c>)
 8006394:	21b0      	movs	r1, #176	@ 0xb0
 8006396:	0049      	lsls	r1, r1, #1
 8006398:	185b      	adds	r3, r3, r1
 800639a:	19db      	adds	r3, r3, r7
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d800      	bhi.n	80063a4 <ParseBuffer+0x240>
 80063a2:	e0be      	b.n	8006522 <ParseBuffer+0x3be>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80063a4:	22ac      	movs	r2, #172	@ 0xac
 80063a6:	0052      	lsls	r2, r2, #1
 80063a8:	18bb      	adds	r3, r7, r2
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d051      	beq.n	8006454 <ParseBuffer+0x2f0>
 80063b0:	18bb      	adds	r3, r7, r2
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b4f      	cmp	r3, #79	@ 0x4f
 80063b8:	d14c      	bne.n	8006454 <ParseBuffer+0x2f0>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80063ba:	2360      	movs	r3, #96	@ 0x60
 80063bc:	33ff      	adds	r3, #255	@ 0xff
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80063c4:	4b20      	ldr	r3, [pc, #128]	@ (8006448 <ParseBuffer+0x2e4>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b12      	cmp	r3, #18
 80063ca:	d143      	bne.n	8006454 <ParseBuffer+0x2f0>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80063cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006400 <ParseBuffer+0x29c>)
 80063ce:	185b      	adds	r3, r3, r1
 80063d0:	19db      	adds	r3, r3, r7
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	2b2b      	cmp	r3, #43	@ 0x2b
 80063d6:	d10b      	bne.n	80063f0 <ParseBuffer+0x28c>
 80063d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <ParseBuffer+0x2a4>)
 80063da:	185b      	adds	r3, r3, r1
 80063dc:	19db      	adds	r3, r3, r7
 80063de:	2221      	movs	r2, #33	@ 0x21
 80063e0:	5c9b      	ldrb	r3, [r3, r2]
 80063e2:	2b32      	cmp	r3, #50	@ 0x32
 80063e4:	d104      	bne.n	80063f0 <ParseBuffer+0x28c>
          ParseTime(tempBuf);
 80063e6:	193b      	adds	r3, r7, r4
 80063e8:	0018      	movs	r0, r3
 80063ea:	f003 f955 	bl	8009698 <ParseTime>
 80063ee:	e031      	b.n	8006454 <ParseBuffer+0x2f0>
        }
        else {
          Error("Error getting time");
 80063f0:	4a16      	ldr	r2, [pc, #88]	@ (800644c <ParseBuffer+0x2e8>)
 80063f2:	4b17      	ldr	r3, [pc, #92]	@ (8006450 <ParseBuffer+0x2ec>)
 80063f4:	0019      	movs	r1, r3
 80063f6:	2001      	movs	r0, #1
 80063f8:	f00d f83a 	bl	8013470 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80063fc:	2306      	movs	r3, #6
 80063fe:	e094      	b.n	800652a <ParseBuffer+0x3c6>
 8006400:	fffffea2 	.word	0xfffffea2
 8006404:	fffffea1 	.word	0xfffffea1
 8006408:	fffffee8 	.word	0xfffffee8
 800640c:	0802ade4 	.word	0x0802ade4
 8006410:	fffffee4 	.word	0xfffffee4
 8006414:	0802ae10 	.word	0x0802ae10
 8006418:	fffffedc 	.word	0xfffffedc
 800641c:	0802ae14 	.word	0x0802ae14
 8006420:	fffffed4 	.word	0xfffffed4
 8006424:	4c494146 	.word	0x4c494146
 8006428:	fffffecc 	.word	0xfffffecc
 800642c:	0802ae1c 	.word	0x0802ae1c
 8006430:	fffffec8 	.word	0xfffffec8
 8006434:	fffffeb8 	.word	0xfffffeb8
 8006438:	0802ae24 	.word	0x0802ae24
 800643c:	fffffea8 	.word	0xfffffea8
 8006440:	0802ae34 	.word	0x0802ae34
 8006444:	0802deb8 	.word	0x0802deb8
 8006448:	2000067a 	.word	0x2000067a
 800644c:	0802adfc 	.word	0x0802adfc
 8006450:	0802a254 	.word	0x0802a254
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006454:	22ac      	movs	r2, #172	@ 0xac
 8006456:	0052      	lsls	r2, r2, #1
 8006458:	18bb      	adds	r3, r7, r2
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <ParseBuffer+0x310>
 8006460:	18bb      	adds	r3, r7, r2
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b72      	cmp	r3, #114	@ 0x72
 8006468:	d104      	bne.n	8006474 <ParseBuffer+0x310>
      status = RECEIVE_STATUS_READY;
 800646a:	2360      	movs	r3, #96	@ 0x60
 800646c:	33ff      	adds	r3, #255	@ 0xff
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2202      	movs	r2, #2
 8006472:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8006474:	22ac      	movs	r2, #172	@ 0xac
 8006476:	0052      	lsls	r2, r2, #1
 8006478:	18bb      	adds	r3, r7, r2
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <ParseBuffer+0x330>
 8006480:	18bb      	adds	r3, r7, r2
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b3e      	cmp	r3, #62	@ 0x3e
 8006488:	d104      	bne.n	8006494 <ParseBuffer+0x330>
      status = RECEIVE_STATUS_START;
 800648a:	2360      	movs	r3, #96	@ 0x60
 800648c:	33ff      	adds	r3, #255	@ 0xff
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	2205      	movs	r2, #5
 8006492:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8006494:	22ac      	movs	r2, #172	@ 0xac
 8006496:	0052      	lsls	r2, r2, #1
 8006498:	18bb      	adds	r3, r7, r2
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <ParseBuffer+0x350>
 80064a0:	18bb      	adds	r3, r7, r2
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80064a8:	d104      	bne.n	80064b4 <ParseBuffer+0x350>
      status = RECEIVE_STATUS_TIME;
 80064aa:	2360      	movs	r3, #96	@ 0x60
 80064ac:	33ff      	adds	r3, #255	@ 0xff
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	220b      	movs	r2, #11
 80064b2:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80064b4:	22aa      	movs	r2, #170	@ 0xaa
 80064b6:	0052      	lsls	r2, r2, #1
 80064b8:	18bb      	adds	r3, r7, r2
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <ParseBuffer+0x366>
 80064c0:	18bb      	adds	r3, r7, r2
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b45      	cmp	r3, #69	@ 0x45
 80064c8:	d00a      	beq.n	80064e0 <ParseBuffer+0x37c>
 80064ca:	22a4      	movs	r2, #164	@ 0xa4
 80064cc:	0052      	lsls	r2, r2, #1
 80064ce:	18bb      	adds	r3, r7, r2
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <ParseBuffer+0x386>
 80064d6:	18bb      	adds	r3, r7, r2
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b46      	cmp	r3, #70	@ 0x46
 80064de:	d104      	bne.n	80064ea <ParseBuffer+0x386>
      status = RECEIVE_STATUS_ERROR;
 80064e0:	2360      	movs	r3, #96	@ 0x60
 80064e2:	33ff      	adds	r3, #255	@ 0xff
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80064ea:	22a8      	movs	r2, #168	@ 0xa8
 80064ec:	0052      	lsls	r2, r2, #1
 80064ee:	18bb      	adds	r3, r7, r2
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d007      	beq.n	8006506 <ParseBuffer+0x3a2>
 80064f6:	18bb      	adds	r3, r7, r2
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b57      	cmp	r3, #87	@ 0x57
 80064fe:	d102      	bne.n	8006506 <ParseBuffer+0x3a2>
      ConnectionMade = true;
 8006500:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <ParseBuffer+0x3d0>)
 8006502:	2201      	movs	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 8006506:	22a6      	movs	r2, #166	@ 0xa6
 8006508:	0052      	lsls	r2, r2, #1
 800650a:	18bb      	adds	r3, r7, r2
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <ParseBuffer+0x3be>
 8006512:	18bb      	adds	r3, r7, r2
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b32      	cmp	r3, #50	@ 0x32
 800651a:	d102      	bne.n	8006522 <ParseBuffer+0x3be>
      beurs = true;
 800651c:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <ParseBuffer+0x3d4>)
 800651e:	2201      	movs	r2, #1
 8006520:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8006522:	2360      	movs	r3, #96	@ 0x60
 8006524:	33ff      	adds	r3, #255	@ 0xff
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	781b      	ldrb	r3, [r3, #0]

}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	b059      	add	sp, #356	@ 0x164
 8006530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	200005a8 	.word	0x200005a8
 8006538:	200005aa 	.word	0x200005aa

0800653c <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <PollAwake+0x34>)
 8006544:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0018      	movs	r0, r3
 800654a:	f7f9 fe0f 	bl	800016c <strlen>
 800654e:	0003      	movs	r3, r0
 8006550:	b29a      	uxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	0011      	movs	r1, r2
 8006556:	0018      	movs	r0, r3
 8006558:	f7fe fc8a 	bl	8004e70 <ESP_Send>
 800655c:	1e03      	subs	r3, r0, #0
 800655e:	d001      	beq.n	8006564 <PollAwake+0x28>
    return true;
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <PollAwake+0x2a>
  }
  else{
    return false;
 8006564:	2300      	movs	r3, #0
  }
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b002      	add	sp, #8
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	0802ae44 	.word	0x0802ae44

08006574 <RFPower>:

bool RFPower(){
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <RFPower+0x34>)
 800657c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	0018      	movs	r0, r3
 8006582:	f7f9 fdf3 	bl	800016c <strlen>
 8006586:	0003      	movs	r3, r0
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0011      	movs	r1, r2
 800658e:	0018      	movs	r0, r3
 8006590:	f7fe fc6e 	bl	8004e70 <ESP_Send>
 8006594:	1e03      	subs	r3, r0, #0
 8006596:	d001      	beq.n	800659c <RFPower+0x28>
    return true;
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <RFPower+0x2a>
  }
  else{
    return false;
 800659c:	2300      	movs	r3, #0
  }
}
 800659e:	0018      	movs	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b002      	add	sp, #8
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	0802ae4c 	.word	0x0802ae4c

080065ac <CheckRFPower>:

bool CheckRFPower(){
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80065b2:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <CheckRFPower+0x34>)
 80065b4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7f9 fdd7 	bl	800016c <strlen>
 80065be:	0003      	movs	r3, r0
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	0011      	movs	r1, r2
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7fe fc52 	bl	8004e70 <ESP_Send>
 80065cc:	1e03      	subs	r3, r0, #0
 80065ce:	d001      	beq.n	80065d4 <CheckRFPower+0x28>
    return true;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80065d4:	2300      	movs	r3, #0
  }
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	46c0      	nop			@ (mov r8, r8)
 80065e0:	0802ae5c 	.word	0x0802ae5c

080065e4 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80065ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006618 <ATRestore+0x34>)
 80065ec:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7f9 fdbb 	bl	800016c <strlen>
 80065f6:	0003      	movs	r3, r0
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	0011      	movs	r1, r2
 80065fe:	0018      	movs	r0, r3
 8006600:	f7fe fc36 	bl	8004e70 <ESP_Send>
 8006604:	1e03      	subs	r3, r0, #0
 8006606:	d001      	beq.n	800660c <ATRestore+0x28>
    return true;
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <ATRestore+0x2a>
  }
  else{
    return false;
 800660c:	2300      	movs	r3, #0
  }
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	0802ae6c 	.word	0x0802ae6c

0800661c <CWINIT>:

bool CWINIT(){
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8006622:	4b0b      	ldr	r3, [pc, #44]	@ (8006650 <CWINIT+0x34>)
 8006624:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	0018      	movs	r0, r3
 800662a:	f7f9 fd9f 	bl	800016c <strlen>
 800662e:	0003      	movs	r3, r0
 8006630:	b29a      	uxth	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	0011      	movs	r1, r2
 8006636:	0018      	movs	r0, r3
 8006638:	f7fe fc1a 	bl	8004e70 <ESP_Send>
 800663c:	1e03      	subs	r3, r0, #0
 800663e:	d001      	beq.n	8006644 <CWINIT+0x28>
    return true;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <CWINIT+0x2a>
  }
  else{
    return false;
 8006644:	2300      	movs	r3, #0
  }
}
 8006646:	0018      	movs	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	b002      	add	sp, #8
 800664c:	bd80      	pop	{r7, pc}
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	0802ae7c 	.word	0x0802ae7c

08006654 <CWMODE1>:

bool CWMODE1(){
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800665a:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <CWMODE1+0x34>)
 800665c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	0018      	movs	r0, r3
 8006662:	f7f9 fd83 	bl	800016c <strlen>
 8006666:	0003      	movs	r3, r0
 8006668:	b29a      	uxth	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	0011      	movs	r1, r2
 800666e:	0018      	movs	r0, r3
 8006670:	f7fe fbfe 	bl	8004e70 <ESP_Send>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d001      	beq.n	800667c <CWMODE1+0x28>
    return true;
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <CWMODE1+0x2a>
  }
  else{
    return false;
 800667c:	2300      	movs	r3, #0
  }
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	b002      	add	sp, #8
 8006684:	bd80      	pop	{r7, pc}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	0802ae8c 	.word	0x0802ae8c

0800668c <CWMODE2>:

bool CWMODE2(){
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8006692:	4b0b      	ldr	r3, [pc, #44]	@ (80066c0 <CWMODE2+0x34>)
 8006694:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0018      	movs	r0, r3
 800669a:	f7f9 fd67 	bl	800016c <strlen>
 800669e:	0003      	movs	r3, r0
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0011      	movs	r1, r2
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7fe fbe2 	bl	8004e70 <ESP_Send>
 80066ac:	1e03      	subs	r3, r0, #0
 80066ae:	d001      	beq.n	80066b4 <CWMODE2+0x28>
    return true;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <CWMODE2+0x2a>
  }
  else{
    return false;
 80066b4:	2300      	movs	r3, #0
  }
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b002      	add	sp, #8
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	46c0      	nop			@ (mov r8, r8)
 80066c0:	0802ae9c 	.word	0x0802ae9c

080066c4 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80066ca:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <CWAUTOCONN+0x34>)
 80066cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	0018      	movs	r0, r3
 80066d2:	f7f9 fd4b 	bl	800016c <strlen>
 80066d6:	0003      	movs	r3, r0
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	0011      	movs	r1, r2
 80066de:	0018      	movs	r0, r3
 80066e0:	f7fe fbc6 	bl	8004e70 <ESP_Send>
 80066e4:	1e03      	subs	r3, r0, #0
 80066e6:	d001      	beq.n	80066ec <CWAUTOCONN+0x28>
    return true;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80066ec:	2300      	movs	r3, #0
  }
}
 80066ee:	0018      	movs	r0, r3
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b002      	add	sp, #8
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	46c0      	nop			@ (mov r8, r8)
 80066f8:	0802aeac 	.word	0x0802aeac

080066fc <CWJAP>:

bool CWJAP(){
 80066fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066fe:	46c6      	mov	lr, r8
 8006700:	b500      	push	{lr}
 8006702:	b0a2      	sub	sp, #136	@ 0x88
 8006704:	af00      	add	r7, sp, #0
 8006706:	466b      	mov	r3, sp
 8006708:	4698      	mov	r8, r3
  beursTest = true;
 800670a:	4b39      	ldr	r3, [pc, #228]	@ (80067f0 <CWJAP+0xf4>)
 800670c:	2201      	movs	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8006710:	2618      	movs	r6, #24
 8006712:	19bb      	adds	r3, r7, r6
 8006714:	2264      	movs	r2, #100	@ 0x64
 8006716:	2100      	movs	r1, #0
 8006718:	0018      	movs	r0, r3
 800671a:	f01f fb47 	bl	8025dac <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800671e:	4b35      	ldr	r3, [pc, #212]	@ (80067f4 <CWJAP+0xf8>)
 8006720:	4a35      	ldr	r2, [pc, #212]	@ (80067f8 <CWJAP+0xfc>)
 8006722:	4936      	ldr	r1, [pc, #216]	@ (80067fc <CWJAP+0x100>)
 8006724:	19b8      	adds	r0, r7, r6
 8006726:	f01f f9d7 	bl	8025ad8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800672a:	19bb      	adds	r3, r7, r6
 800672c:	0018      	movs	r0, r3
 800672e:	f7f9 fd1d 	bl	800016c <strlen>
 8006732:	0002      	movs	r2, r0
 8006734:	216f      	movs	r1, #111	@ 0x6f
 8006736:	0030      	movs	r0, r6
 8006738:	180b      	adds	r3, r1, r0
 800673a:	19db      	adds	r3, r3, r7
 800673c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800673e:	180b      	adds	r3, r1, r0
 8006740:	19db      	adds	r3, r3, r7
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	1e5a      	subs	r2, r3, #1
 8006748:	2180      	movs	r1, #128	@ 0x80
 800674a:	1879      	adds	r1, r7, r1
 800674c:	600a      	str	r2, [r1, #0]
 800674e:	001a      	movs	r2, r3
 8006750:	60ba      	str	r2, [r7, #8]
 8006752:	2200      	movs	r2, #0
 8006754:	60fa      	str	r2, [r7, #12]
 8006756:	68b8      	ldr	r0, [r7, #8]
 8006758:	68f9      	ldr	r1, [r7, #12]
 800675a:	0002      	movs	r2, r0
 800675c:	0f52      	lsrs	r2, r2, #29
 800675e:	000e      	movs	r6, r1
 8006760:	00f6      	lsls	r6, r6, #3
 8006762:	617e      	str	r6, [r7, #20]
 8006764:	697e      	ldr	r6, [r7, #20]
 8006766:	4316      	orrs	r6, r2
 8006768:	617e      	str	r6, [r7, #20]
 800676a:	0002      	movs	r2, r0
 800676c:	00d2      	lsls	r2, r2, #3
 800676e:	613a      	str	r2, [r7, #16]
 8006770:	001a      	movs	r2, r3
 8006772:	603a      	str	r2, [r7, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	6838      	ldr	r0, [r7, #0]
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	0002      	movs	r2, r0
 800677e:	0f52      	lsrs	r2, r2, #29
 8006780:	000e      	movs	r6, r1
 8006782:	00f5      	lsls	r5, r6, #3
 8006784:	4315      	orrs	r5, r2
 8006786:	0002      	movs	r2, r0
 8006788:	00d4      	lsls	r4, r2, #3
 800678a:	3307      	adds	r3, #7
 800678c:	08db      	lsrs	r3, r3, #3
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	466a      	mov	r2, sp
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	469d      	mov	sp, r3
 8006796:	466b      	mov	r3, sp
 8006798:	3300      	adds	r3, #0
 800679a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 800679c:	246f      	movs	r4, #111	@ 0x6f
 800679e:	2518      	movs	r5, #24
 80067a0:	1963      	adds	r3, r4, r5
 80067a2:	19db      	adds	r3, r3, r7
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	001a      	movs	r2, r3
 80067aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067ac:	2100      	movs	r1, #0
 80067ae:	0018      	movs	r0, r3
 80067b0:	f01f fafc 	bl	8025dac <memset>
  strncpy(atCommand, atCommandBuff, len);
 80067b4:	1963      	adds	r3, r4, r5
 80067b6:	19db      	adds	r3, r3, r7
 80067b8:	781a      	ldrb	r2, [r3, #0]
 80067ba:	1979      	adds	r1, r7, r5
 80067bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067be:	0018      	movs	r0, r3
 80067c0:	f01f fb1b 	bl	8025dfa <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80067c4:	1963      	adds	r3, r4, r5
 80067c6:	19db      	adds	r3, r3, r7
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067ce:	0011      	movs	r1, r2
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7fe fb4d 	bl	8004e70 <ESP_Send>
 80067d6:	1e03      	subs	r3, r0, #0
 80067d8:	d001      	beq.n	80067de <CWJAP+0xe2>
    return true;
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <CWJAP+0xe4>
  }
  else{
    return false;
 80067de:	2300      	movs	r3, #0
 80067e0:	46c5      	mov	sp, r8
  }
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b022      	add	sp, #136	@ 0x88
 80067e8:	bc80      	pop	{r7}
 80067ea:	46b8      	mov	r8, r7
 80067ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	200005a9 	.word	0x200005a9
 80067f4:	0802dec4 	.word	0x0802dec4
 80067f8:	0802deb8 	.word	0x0802deb8
 80067fc:	0802aec0 	.word	0x0802aec0

08006800 <CWMODE3>:

bool CWMODE3(){
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006806:	4b0b      	ldr	r3, [pc, #44]	@ (8006834 <CWMODE3+0x34>)
 8006808:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f7f9 fcad 	bl	800016c <strlen>
 8006812:	0003      	movs	r3, r0
 8006814:	b29a      	uxth	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	0011      	movs	r1, r2
 800681a:	0018      	movs	r0, r3
 800681c:	f7fe fb28 	bl	8004e70 <ESP_Send>
 8006820:	1e03      	subs	r3, r0, #0
 8006822:	d001      	beq.n	8006828 <CWMODE3+0x28>
    return true;
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <CWMODE3+0x2a>
  }
  else{
    return false;
 8006828:	2300      	movs	r3, #0
  }
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			@ (mov r8, r8)
 8006834:	0802aed8 	.word	0x0802aed8

08006838 <CWSTATE>:

bool CWSTATE(){
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800683e:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <CWSTATE+0x34>)
 8006840:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	0018      	movs	r0, r3
 8006846:	f7f9 fc91 	bl	800016c <strlen>
 800684a:	0003      	movs	r3, r0
 800684c:	b29a      	uxth	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	0011      	movs	r1, r2
 8006852:	0018      	movs	r0, r3
 8006854:	f7fe fb0c 	bl	8004e70 <ESP_Send>
 8006858:	1e03      	subs	r3, r0, #0
 800685a:	d001      	beq.n	8006860 <CWSTATE+0x28>
    return true;
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006860:	2300      	movs	r3, #0
  }
}
 8006862:	0018      	movs	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	b002      	add	sp, #8
 8006868:	bd80      	pop	{r7, pc}
 800686a:	46c0      	nop			@ (mov r8, r8)
 800686c:	0802aee8 	.word	0x0802aee8

08006870 <CWSAP>:

bool CWSAP(){
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006876:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <CWSAP+0x34>)
 8006878:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0018      	movs	r0, r3
 800687e:	f7f9 fc75 	bl	800016c <strlen>
 8006882:	0003      	movs	r3, r0
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	0011      	movs	r1, r2
 800688a:	0018      	movs	r0, r3
 800688c:	f7fe faf0 	bl	8004e70 <ESP_Send>
 8006890:	1e03      	subs	r3, r0, #0
 8006892:	d001      	beq.n	8006898 <CWSAP+0x28>
    return true;
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <CWSAP+0x2a>
  }
  else{
    return false;
 8006898:	2300      	movs	r3, #0
  }
}
 800689a:	0018      	movs	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	b002      	add	sp, #8
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			@ (mov r8, r8)
 80068a4:	0802aef8 	.word	0x0802aef8

080068a8 <CIPMUX>:

bool CIPMUX(){
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80068ae:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <CIPMUX+0x34>)
 80068b0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7f9 fc59 	bl	800016c <strlen>
 80068ba:	0003      	movs	r3, r0
 80068bc:	b29a      	uxth	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0011      	movs	r1, r2
 80068c2:	0018      	movs	r0, r3
 80068c4:	f7fe fad4 	bl	8004e70 <ESP_Send>
 80068c8:	1e03      	subs	r3, r0, #0
 80068ca:	d001      	beq.n	80068d0 <CIPMUX+0x28>
    return true;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <CIPMUX+0x2a>
  }
  else{
    return false;
 80068d0:	2300      	movs	r3, #0
  }
}
 80068d2:	0018      	movs	r0, r3
 80068d4:	46bd      	mov	sp, r7
 80068d6:	b002      	add	sp, #8
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	46c0      	nop			@ (mov r8, r8)
 80068dc:	0802af1c 	.word	0x0802af1c

080068e0 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80068e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006914 <WEBSERVER+0x34>)
 80068e8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7f9 fc3d 	bl	800016c <strlen>
 80068f2:	0003      	movs	r3, r0
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0011      	movs	r1, r2
 80068fa:	0018      	movs	r0, r3
 80068fc:	f7fe fab8 	bl	8004e70 <ESP_Send>
 8006900:	1e03      	subs	r3, r0, #0
 8006902:	d001      	beq.n	8006908 <WEBSERVER+0x28>
    return true;
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006908:	2300      	movs	r3, #0
  }
}
 800690a:	0018      	movs	r0, r3
 800690c:	46bd      	mov	sp, r7
 800690e:	b002      	add	sp, #8
 8006910:	bd80      	pop	{r7, pc}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	0802af2c 	.word	0x0802af2c

08006918 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006918:	b590      	push	{r4, r7, lr}
 800691a:	b085      	sub	sp, #20
 800691c:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 800691e:	1cfb      	adds	r3, r7, #3
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8006924:	4b26      	ldr	r3, [pc, #152]	@ (80069c0 <HTTPCPOST+0xa8>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	1dbc      	adds	r4, r7, #6
 800692a:	1cf9      	adds	r1, r7, #3
 800692c:	2200      	movs	r2, #0
 800692e:	0018      	movs	r0, r3
 8006930:	f7fe fca0 	bl	8005274 <CreateMessage>
 8006934:	0003      	movs	r3, r0
 8006936:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8006938:	4b21      	ldr	r3, [pc, #132]	@ (80069c0 <HTTPCPOST+0xa8>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8006940:	1dbb      	adds	r3, r7, #6
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <HTTPCPOST+0xac>)
 8006946:	4920      	ldr	r1, [pc, #128]	@ (80069c8 <HTTPCPOST+0xb0>)
 8006948:	4820      	ldr	r0, [pc, #128]	@ (80069cc <HTTPCPOST+0xb4>)
 800694a:	f01f f8c5 	bl	8025ad8 <siprintf>
 800694e:	e015      	b.n	800697c <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006950:	4b1f      	ldr	r3, [pc, #124]	@ (80069d0 <HTTPCPOST+0xb8>)
 8006952:	4820      	ldr	r0, [pc, #128]	@ (80069d4 <HTTPCPOST+0xbc>)
 8006954:	220c      	movs	r2, #12
 8006956:	0019      	movs	r1, r3
 8006958:	f004 ffea 	bl	800b930 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 800695c:	4a1c      	ldr	r2, [pc, #112]	@ (80069d0 <HTTPCPOST+0xb8>)
 800695e:	4b1e      	ldr	r3, [pc, #120]	@ (80069d8 <HTTPCPOST+0xc0>)
 8006960:	0011      	movs	r1, r2
 8006962:	0018      	movs	r0, r3
 8006964:	f7fe fc62 	bl	800522c <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8006968:	1dbb      	adds	r3, r7, #6
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	4c1a      	ldr	r4, [pc, #104]	@ (80069d8 <HTTPCPOST+0xc0>)
 800696e:	4a1b      	ldr	r2, [pc, #108]	@ (80069dc <HTTPCPOST+0xc4>)
 8006970:	491b      	ldr	r1, [pc, #108]	@ (80069e0 <HTTPCPOST+0xc8>)
 8006972:	4816      	ldr	r0, [pc, #88]	@ (80069cc <HTTPCPOST+0xb4>)
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	0023      	movs	r3, r4
 8006978:	f01f f8ae 	bl	8025ad8 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 800697c:	4b13      	ldr	r3, [pc, #76]	@ (80069cc <HTTPCPOST+0xb4>)
 800697e:	0018      	movs	r0, r3
 8006980:	f7f9 fbf4 	bl	800016c <strlen>
 8006984:	0002      	movs	r2, r0
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	8818      	ldrh	r0, [r3, #0]
 800698e:	1cfb      	adds	r3, r7, #3
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	4a14      	ldr	r2, [pc, #80]	@ (80069e4 <HTTPCPOST+0xcc>)
 8006994:	4914      	ldr	r1, [pc, #80]	@ (80069e8 <HTTPCPOST+0xd0>)
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	0003      	movs	r3, r0
 800699a:	2003      	movs	r0, #3
 800699c:	f00c fd68 	bl	8013470 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 80069a0:	1d3b      	adds	r3, r7, #4
 80069a2:	881a      	ldrh	r2, [r3, #0]
 80069a4:	4b09      	ldr	r3, [pc, #36]	@ (80069cc <HTTPCPOST+0xb4>)
 80069a6:	0011      	movs	r1, r2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7fe fa61 	bl	8004e70 <ESP_Send>
 80069ae:	1e03      	subs	r3, r0, #0
 80069b0:	d001      	beq.n	80069b6 <HTTPCPOST+0x9e>
    return true;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 80069b6:	2300      	movs	r3, #0
  }
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b003      	add	sp, #12
 80069be:	bd90      	pop	{r4, r7, pc}
 80069c0:	200005aa 	.word	0x200005aa
 80069c4:	0802dee0 	.word	0x0802dee0
 80069c8:	0802af44 	.word	0x0802af44
 80069cc:	200005d0 	.word	0x200005d0
 80069d0:	20000768 	.word	0x20000768
 80069d4:	08080000 	.word	0x08080000
 80069d8:	20000774 	.word	0x20000774
 80069dc:	0802df1c 	.word	0x0802df1c
 80069e0:	0802af7c 	.word	0x0802af7c
 80069e4:	0802afbc 	.word	0x0802afbc
 80069e8:	0802a230 	.word	0x0802a230

080069ec <SENDDATA>:

bool SENDDATA(){
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af02      	add	r7, sp, #8
  bool result = false;
 80069f2:	1dfb      	adds	r3, r7, #7
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 80069f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006a34 <SENDDATA+0x48>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	1df9      	adds	r1, r7, #7
 80069fe:	2201      	movs	r2, #1
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7fe fc37 	bl	8005274 <CreateMessage>
 8006a06:	0003      	movs	r3, r0
 8006a08:	001a      	movs	r2, r3
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <SENDDATA+0x4c>)
 8006a0c:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006a0e:	1dfb      	adds	r3, r7, #7
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	0018      	movs	r0, r3
 8006a14:	4b08      	ldr	r3, [pc, #32]	@ (8006a38 <SENDDATA+0x4c>)
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	4a08      	ldr	r2, [pc, #32]	@ (8006a3c <SENDDATA+0x50>)
 8006a1a:	4909      	ldr	r1, [pc, #36]	@ (8006a40 <SENDDATA+0x54>)
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	0003      	movs	r3, r0
 8006a20:	2003      	movs	r0, #3
 8006a22:	f00c fd25 	bl	8013470 <CreateLine>
  return result;
 8006a26:	1dfb      	adds	r3, r7, #7
 8006a28:	781b      	ldrb	r3, [r3, #0]
}
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b002      	add	sp, #8
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	200005aa 	.word	0x200005aa
 8006a38:	200005c4 	.word	0x200005c4
 8006a3c:	0802b018 	.word	0x0802b018
 8006a40:	0802a230 	.word	0x0802a230

08006a44 <SLEEP>:

bool SLEEP(){
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a78 <SLEEP+0x34>)
 8006a4c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7f9 fb8b 	bl	800016c <strlen>
 8006a56:	0003      	movs	r3, r0
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	0011      	movs	r1, r2
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f7fe fa06 	bl	8004e70 <ESP_Send>
 8006a64:	1e03      	subs	r3, r0, #0
 8006a66:	d001      	beq.n	8006a6c <SLEEP+0x28>
    return true;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <SLEEP+0x2a>
  }
  else{
    return false;
 8006a6c:	2300      	movs	r3, #0
  }
}
 8006a6e:	0018      	movs	r0, r3
 8006a70:	46bd      	mov	sp, r7
 8006a72:	b002      	add	sp, #8
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	46c0      	nop			@ (mov r8, r8)
 8006a78:	0802b054 	.word	0x0802b054

08006a7c <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006a82:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <CIPSNTPCFG+0x3c>)
 8006a84:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7f9 fb6f 	bl	800016c <strlen>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	0011      	movs	r1, r2
 8006a96:	0018      	movs	r0, r3
 8006a98:	f7fe f9ea 	bl	8004e70 <ESP_Send>
 8006a9c:	1e03      	subs	r3, r0, #0
 8006a9e:	d006      	beq.n	8006aae <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006aa0:	23fa      	movs	r3, #250	@ 0xfa
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f00d fa6f 	bl	8013f88 <HAL_Delay>
    return true;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006aae:	2300      	movs	r3, #0
  }
}
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	0802b064 	.word	0x0802b064

08006abc <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <CIPSNTPTIME+0x34>)
 8006ac4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f7f9 fb4f 	bl	800016c <strlen>
 8006ace:	0003      	movs	r3, r0
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0011      	movs	r1, r2
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f7fe f9ca 	bl	8004e70 <ESP_Send>
 8006adc:	1e03      	subs	r3, r0, #0
 8006ade:	d001      	beq.n	8006ae4 <CIPSNTPTIME+0x28>
    return true;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006ae4:	2300      	movs	r3, #0
  }
}
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b002      	add	sp, #8
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	0802b0b4 	.word	0x0802b0b4

08006af4 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006afa:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <CIPSNTPINTV+0x34>)
 8006afc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	0018      	movs	r0, r3
 8006b02:	f7f9 fb33 	bl	800016c <strlen>
 8006b06:	0003      	movs	r3, r0
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0011      	movs	r1, r2
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f7fe f9ae 	bl	8004e70 <ESP_Send>
 8006b14:	1e03      	subs	r3, r0, #0
 8006b16:	d001      	beq.n	8006b1c <CIPSNTPINTV+0x28>
    return true;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006b1c:	2300      	movs	r3, #0
  }
}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b002      	add	sp, #8
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			@ (mov r8, r8)
 8006b28:	0802b0c8 	.word	0x0802b0c8

08006b2c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	0002      	movs	r2, r0
 8006b34:	1dfb      	adds	r3, r7, #7
 8006b36:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006b38:	4b6c      	ldr	r3, [pc, #432]	@ (8006cec <DMA_ProcessBuffer+0x1c0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	200e      	movs	r0, #14
 8006b42:	183b      	adds	r3, r7, r0
 8006b44:	2180      	movs	r1, #128	@ 0x80
 8006b46:	0049      	lsls	r1, r1, #1
 8006b48:	1a8a      	subs	r2, r1, r2
 8006b4a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006b4c:	230d      	movs	r3, #13
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	2203      	movs	r2, #3
 8006b52:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006b54:	183b      	adds	r3, r7, r0
 8006b56:	881a      	ldrh	r2, [r3, #0]
 8006b58:	2380      	movs	r3, #128	@ 0x80
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d903      	bls.n	8006b68 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006b60:	183b      	adds	r3, r7, r0
 8006b62:	2280      	movs	r2, #128	@ 0x80
 8006b64:	0052      	lsls	r2, r2, #1
 8006b66:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006b68:	4b61      	ldr	r3, [pc, #388]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	001a      	movs	r2, r3
 8006b70:	230e      	movs	r3, #14
 8006b72:	18fb      	adds	r3, r7, r3
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d131      	bne.n	8006bde <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8006cf4 <DMA_ProcessBuffer+0x1c8>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b14      	cmp	r3, #20
 8006b80:	d91b      	bls.n	8006bba <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006b82:	4b5c      	ldr	r3, [pc, #368]	@ (8006cf4 <DMA_ProcessBuffer+0x1c8>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006b88:	4b5b      	ldr	r3, [pc, #364]	@ (8006cf8 <DMA_ProcessBuffer+0x1cc>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d107      	bne.n	8006ba0 <DMA_ProcessBuffer+0x74>
 8006b90:	4b5a      	ldr	r3, [pc, #360]	@ (8006cfc <DMA_ProcessBuffer+0x1d0>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006b98:	230d      	movs	r3, #13
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	2207      	movs	r2, #7
 8006b9e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006ba0:	4b55      	ldr	r3, [pc, #340]	@ (8006cf8 <DMA_ProcessBuffer+0x1cc>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d103      	bne.n	8006bb0 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006ba8:	4b55      	ldr	r3, [pc, #340]	@ (8006d00 <DMA_ProcessBuffer+0x1d4>)
 8006baa:	220b      	movs	r2, #11
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e016      	b.n	8006bde <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006bb0:	230d      	movs	r3, #13
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	2206      	movs	r2, #6
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e011      	b.n	8006bde <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006bba:	4b4e      	ldr	r3, [pc, #312]	@ (8006cf4 <DMA_ProcessBuffer+0x1c8>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8006cf4 <DMA_ProcessBuffer+0x1c8>)
 8006bc4:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006bc6:	f00d f9d5 	bl	8013f74 <HAL_GetTick>
 8006bca:	0003      	movs	r3, r0
 8006bcc:	33f5      	adds	r3, #245	@ 0xf5
 8006bce:	33ff      	adds	r3, #255	@ 0xff
 8006bd0:	001a      	movs	r2, r3
 8006bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8006d04 <DMA_ProcessBuffer+0x1d8>)
 8006bd4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006bd6:	230d      	movs	r3, #13
 8006bd8:	18fb      	adds	r3, r7, r3
 8006bda:	2204      	movs	r2, #4
 8006bdc:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006bde:	4b44      	ldr	r3, [pc, #272]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	001a      	movs	r2, r3
 8006be6:	210e      	movs	r1, #14
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d100      	bne.n	8006bf2 <DMA_ProcessBuffer+0xc6>
 8006bf0:	e075      	b.n	8006cde <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006bf2:	4b40      	ldr	r3, [pc, #256]	@ (8006cf4 <DMA_ProcessBuffer+0x1c8>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006bf8:	4b43      	ldr	r3, [pc, #268]	@ (8006d08 <DMA_ProcessBuffer+0x1dc>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d109      	bne.n	8006c1c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006c08:	187b      	adds	r3, r7, r1
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006d08 <DMA_ProcessBuffer+0x1dc>)
 8006c10:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006c12:	230d      	movs	r3, #13
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	220a      	movs	r2, #10
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	e060      	b.n	8006cde <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d08 <DMA_ProcessBuffer+0x1dc>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	001a      	movs	r2, r3
 8006c24:	210e      	movs	r1, #14
 8006c26:	187b      	adds	r3, r7, r1
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006c2e:	187b      	adds	r3, r7, r1
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	4b34      	ldr	r3, [pc, #208]	@ (8006d08 <DMA_ProcessBuffer+0x1dc>)
 8006c36:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006c38:	230d      	movs	r3, #13
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	e04d      	b.n	8006cde <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006c42:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	001a      	movs	r2, r3
 8006c4a:	210e      	movs	r1, #14
 8006c4c:	187b      	adds	r3, r7, r1
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d917      	bls.n	8006c84 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006c54:	4b26      	ldr	r3, [pc, #152]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	001a      	movs	r2, r3
 8006c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d0c <DMA_ProcessBuffer+0x1e0>)
 8006c5e:	18d0      	adds	r0, r2, r3
 8006c60:	4b23      	ldr	r3, [pc, #140]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	001a      	movs	r2, r3
 8006c68:	187b      	adds	r3, r7, r1
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	b299      	uxth	r1, r3
 8006c70:	230d      	movs	r3, #13
 8006c72:	18fc      	adds	r4, r7, r3
 8006c74:	1dfb      	adds	r3, r7, #7
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	001a      	movs	r2, r3
 8006c7a:	f7ff fa73 	bl	8006164 <ParseBuffer>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	7023      	strb	r3, [r4, #0]
 8006c82:	e026      	b.n	8006cd2 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006c84:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	001a      	movs	r2, r3
 8006c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8006d0c <DMA_ProcessBuffer+0x1e0>)
 8006c8e:	18d0      	adds	r0, r2, r3
 8006c90:	4b17      	ldr	r3, [pc, #92]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	001a      	movs	r2, r3
 8006c98:	2380      	movs	r3, #128	@ 0x80
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	b299      	uxth	r1, r3
 8006ca0:	250d      	movs	r5, #13
 8006ca2:	197c      	adds	r4, r7, r5
 8006ca4:	1dfb      	adds	r3, r7, #7
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	001a      	movs	r2, r3
 8006caa:	f7ff fa5b 	bl	8006164 <ParseBuffer>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006cb2:	210e      	movs	r1, #14
 8006cb4:	187b      	adds	r3, r7, r1
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006cbc:	197c      	adds	r4, r7, r5
 8006cbe:	1dfb      	adds	r3, r7, #7
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	187b      	adds	r3, r7, r1
 8006cc4:	8819      	ldrh	r1, [r3, #0]
 8006cc6:	4b11      	ldr	r3, [pc, #68]	@ (8006d0c <DMA_ProcessBuffer+0x1e0>)
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7ff fa4b 	bl	8006164 <ParseBuffer>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8006cd2:	230e      	movs	r3, #14
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4b05      	ldr	r3, [pc, #20]	@ (8006cf0 <DMA_ProcessBuffer+0x1c4>)
 8006cdc:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006cde:	230d      	movs	r3, #13
 8006ce0:	18fb      	adds	r3, r7, r3
 8006ce2:	781b      	ldrb	r3, [r3, #0]
}
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b004      	add	sp, #16
 8006cea:	bdb0      	pop	{r4, r5, r7, pc}
 8006cec:	20002178 	.word	0x20002178
 8006cf0:	2000078d 	.word	0x2000078d
 8006cf4:	20000678 	.word	0x20000678
 8006cf8:	2000067a 	.word	0x2000067a
 8006cfc:	20000001 	.word	0x20000001
 8006d00:	2000002c 	.word	0x2000002c
 8006d04:	20000670 	.word	0x20000670
 8006d08:	2000078e 	.word	0x2000078e
 8006d0c:	200004a4 	.word	0x200004a4

08006d10 <clearDMABuffer>:

void clearDMABuffer(){
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	005a      	lsls	r2, r3, #1
 8006d18:	4b03      	ldr	r3, [pc, #12]	@ (8006d28 <clearDMABuffer+0x18>)
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f01f f845 	bl	8025dac <memset>
}
 8006d22:	46c0      	nop			@ (mov r8, r8)
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200004a4 	.word	0x200004a4

08006d2c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	0002      	movs	r2, r0
 8006d34:	1dfb      	adds	r3, r7, #7
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	1dbb      	adds	r3, r7, #6
 8006d3a:	1c0a      	adds	r2, r1, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8006d3e:	210f      	movs	r1, #15
 8006d40:	187b      	adds	r3, r7, r1
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8006d46:	1dbb      	adds	r3, r7, #6
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d105      	bne.n	8006d5a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8006d4e:	187b      	adds	r3, r7, r1
 8006d50:	1dfa      	adds	r2, r7, #7
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	4251      	negs	r1, r2
 8006d56:	414a      	adcs	r2, r1
 8006d58:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8006d5a:	1dbb      	adds	r3, r7, #6
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d107      	bne.n	8006d72 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8006d62:	230f      	movs	r3, #15
 8006d64:	18fb      	adds	r3, r7, r3
 8006d66:	1dfa      	adds	r2, r7, #7
 8006d68:	7812      	ldrb	r2, [r2, #0]
 8006d6a:	3a02      	subs	r2, #2
 8006d6c:	4251      	negs	r1, r2
 8006d6e:	414a      	adcs	r2, r1
 8006d70:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8006d72:	1dbb      	adds	r3, r7, #6
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d107      	bne.n	8006d8a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8006d7a:	230f      	movs	r3, #15
 8006d7c:	18fb      	adds	r3, r7, r3
 8006d7e:	1dfa      	adds	r2, r7, #7
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	3a05      	subs	r2, #5
 8006d84:	4251      	negs	r1, r2
 8006d86:	414a      	adcs	r2, r1
 8006d88:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8006d8a:	1dbb      	adds	r3, r7, #6
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b05      	cmp	r3, #5
 8006d90:	d107      	bne.n	8006da2 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8006d92:	230f      	movs	r3, #15
 8006d94:	18fb      	adds	r3, r7, r3
 8006d96:	1dfa      	adds	r2, r7, #7
 8006d98:	7812      	ldrb	r2, [r2, #0]
 8006d9a:	3a0b      	subs	r2, #11
 8006d9c:	4251      	negs	r1, r2
 8006d9e:	414a      	adcs	r2, r1
 8006da0:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8006da2:	230f      	movs	r3, #15
 8006da4:	18fb      	adds	r3, r7, r3
 8006da6:	781b      	ldrb	r3, [r3, #0]
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b004      	add	sp, #16
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <AT_Send>:

bool AT_Send(AT_Commands state){
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	0002      	movs	r2, r0
 8006db8:	1dfb      	adds	r3, r7, #7
 8006dba:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8006dbc:	230f      	movs	r3, #15
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
  switch (state){
 8006dc4:	1dfb      	adds	r3, r7, #7
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b14      	cmp	r3, #20
 8006dca:	d900      	bls.n	8006dce <AT_Send+0x1e>
 8006dcc:	e19e      	b.n	800710c <AT_Send+0x35c>
 8006dce:	009a      	lsls	r2, r3, #2
 8006dd0:	4bd2      	ldr	r3, [pc, #840]	@ (800711c <AT_Send+0x36c>)
 8006dd2:	18d3      	adds	r3, r2, r3
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8006dd8:	4bd1      	ldr	r3, [pc, #836]	@ (8007120 <AT_Send+0x370>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f00c faf1 	bl	80133c4 <TimestampIsReached>
 8006de2:	1e03      	subs	r3, r0, #0
 8006de4:	d100      	bne.n	8006de8 <AT_Send+0x38>
 8006de6:	e190      	b.n	800710a <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8006de8:	4ace      	ldr	r2, [pc, #824]	@ (8007124 <AT_Send+0x374>)
 8006dea:	4bcf      	ldr	r3, [pc, #828]	@ (8007128 <AT_Send+0x378>)
 8006dec:	0019      	movs	r1, r3
 8006dee:	2003      	movs	r0, #3
 8006df0:	f00c fb3e 	bl	8013470 <CreateLine>
    ATCommandSend = PollAwake();
 8006df4:	230f      	movs	r3, #15
 8006df6:	18fc      	adds	r4, r7, r3
 8006df8:	f7ff fba0 	bl	800653c <PollAwake>
 8006dfc:	0003      	movs	r3, r0
 8006dfe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006e00:	f00d f8b8 	bl	8013f74 <HAL_GetTick>
 8006e04:	0003      	movs	r3, r0
 8006e06:	3332      	adds	r3, #50	@ 0x32
 8006e08:	001a      	movs	r2, r3
 8006e0a:	4bc5      	ldr	r3, [pc, #788]	@ (8007120 <AT_Send+0x370>)
 8006e0c:	601a      	str	r2, [r3, #0]
  }
  break;
 8006e0e:	e17c      	b.n	800710a <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8006e10:	4ac6      	ldr	r2, [pc, #792]	@ (800712c <AT_Send+0x37c>)
 8006e12:	4bc5      	ldr	r3, [pc, #788]	@ (8007128 <AT_Send+0x378>)
 8006e14:	0019      	movs	r1, r3
 8006e16:	2003      	movs	r0, #3
 8006e18:	f00c fb2a 	bl	8013470 <CreateLine>
    ATCommandSend = RFPower();
 8006e1c:	230f      	movs	r3, #15
 8006e1e:	18fc      	adds	r4, r7, r3
 8006e20:	f7ff fba8 	bl	8006574 <RFPower>
 8006e24:	0003      	movs	r3, r0
 8006e26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006e28:	f00d f8a4 	bl	8013f74 <HAL_GetTick>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	330a      	adds	r3, #10
 8006e30:	001a      	movs	r2, r3
 8006e32:	4bbb      	ldr	r3, [pc, #748]	@ (8007120 <AT_Send+0x370>)
 8006e34:	601a      	str	r2, [r3, #0]
    break;
 8006e36:	e169      	b.n	800710c <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006e38:	4abd      	ldr	r2, [pc, #756]	@ (8007130 <AT_Send+0x380>)
 8006e3a:	4bbb      	ldr	r3, [pc, #748]	@ (8007128 <AT_Send+0x378>)
 8006e3c:	0019      	movs	r1, r3
 8006e3e:	2003      	movs	r0, #3
 8006e40:	f00c fb16 	bl	8013470 <CreateLine>
    ATCommandSend = CheckRFPower();
 8006e44:	230f      	movs	r3, #15
 8006e46:	18fc      	adds	r4, r7, r3
 8006e48:	f7ff fbb0 	bl	80065ac <CheckRFPower>
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006e50:	f00d f890 	bl	8013f74 <HAL_GetTick>
 8006e54:	0003      	movs	r3, r0
 8006e56:	330a      	adds	r3, #10
 8006e58:	001a      	movs	r2, r3
 8006e5a:	4bb1      	ldr	r3, [pc, #708]	@ (8007120 <AT_Send+0x370>)
 8006e5c:	601a      	str	r2, [r3, #0]
    break;
 8006e5e:	e155      	b.n	800710c <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006e60:	4ab4      	ldr	r2, [pc, #720]	@ (8007134 <AT_Send+0x384>)
 8006e62:	4bb1      	ldr	r3, [pc, #708]	@ (8007128 <AT_Send+0x378>)
 8006e64:	0019      	movs	r1, r3
 8006e66:	2003      	movs	r0, #3
 8006e68:	f00c fb02 	bl	8013470 <CreateLine>
    ATCommandSend = ATRestore();
 8006e6c:	230f      	movs	r3, #15
 8006e6e:	18fc      	adds	r4, r7, r3
 8006e70:	f7ff fbb8 	bl	80065e4 <ATRestore>
 8006e74:	0003      	movs	r3, r0
 8006e76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006e78:	f00d f87c 	bl	8013f74 <HAL_GetTick>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	3332      	adds	r3, #50	@ 0x32
 8006e80:	001a      	movs	r2, r3
 8006e82:	4ba7      	ldr	r3, [pc, #668]	@ (8007120 <AT_Send+0x370>)
 8006e84:	601a      	str	r2, [r3, #0]
    break;
 8006e86:	e141      	b.n	800710c <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006e88:	4aab      	ldr	r2, [pc, #684]	@ (8007138 <AT_Send+0x388>)
 8006e8a:	4ba7      	ldr	r3, [pc, #668]	@ (8007128 <AT_Send+0x378>)
 8006e8c:	0019      	movs	r1, r3
 8006e8e:	2003      	movs	r0, #3
 8006e90:	f00c faee 	bl	8013470 <CreateLine>
    ATCommandSend = CWINIT();
 8006e94:	230f      	movs	r3, #15
 8006e96:	18fc      	adds	r4, r7, r3
 8006e98:	f7ff fbc0 	bl	800661c <CWINIT>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006ea0:	f00d f868 	bl	8013f74 <HAL_GetTick>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	33f5      	adds	r3, #245	@ 0xf5
 8006ea8:	33ff      	adds	r3, #255	@ 0xff
 8006eaa:	001a      	movs	r2, r3
 8006eac:	4b9c      	ldr	r3, [pc, #624]	@ (8007120 <AT_Send+0x370>)
 8006eae:	601a      	str	r2, [r3, #0]
    break;
 8006eb0:	e12c      	b.n	800710c <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006eb2:	4aa2      	ldr	r2, [pc, #648]	@ (800713c <AT_Send+0x38c>)
 8006eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8007128 <AT_Send+0x378>)
 8006eb6:	0019      	movs	r1, r3
 8006eb8:	2003      	movs	r0, #3
 8006eba:	f00c fad9 	bl	8013470 <CreateLine>
    ATCommandSend = CWSTATE();
 8006ebe:	230f      	movs	r3, #15
 8006ec0:	18fc      	adds	r4, r7, r3
 8006ec2:	f7ff fcb9 	bl	8006838 <CWSTATE>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006eca:	f00d f853 	bl	8013f74 <HAL_GetTick>
 8006ece:	0003      	movs	r3, r0
 8006ed0:	33f5      	adds	r3, #245	@ 0xf5
 8006ed2:	33ff      	adds	r3, #255	@ 0xff
 8006ed4:	001a      	movs	r2, r3
 8006ed6:	4b92      	ldr	r3, [pc, #584]	@ (8007120 <AT_Send+0x370>)
 8006ed8:	601a      	str	r2, [r3, #0]
    break;
 8006eda:	e117      	b.n	800710c <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8006edc:	4a98      	ldr	r2, [pc, #608]	@ (8007140 <AT_Send+0x390>)
 8006ede:	4b92      	ldr	r3, [pc, #584]	@ (8007128 <AT_Send+0x378>)
 8006ee0:	0019      	movs	r1, r3
 8006ee2:	2003      	movs	r0, #3
 8006ee4:	f00c fac4 	bl	8013470 <CreateLine>
    ATCommandSend = CWMODE1();
 8006ee8:	230f      	movs	r3, #15
 8006eea:	18fc      	adds	r4, r7, r3
 8006eec:	f7ff fbb2 	bl	8006654 <CWMODE1>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006ef4:	f00d f83e 	bl	8013f74 <HAL_GetTick>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	330a      	adds	r3, #10
 8006efc:	001a      	movs	r2, r3
 8006efe:	4b88      	ldr	r3, [pc, #544]	@ (8007120 <AT_Send+0x370>)
 8006f00:	601a      	str	r2, [r3, #0]
    break;
 8006f02:	e103      	b.n	800710c <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8006f04:	4a8e      	ldr	r2, [pc, #568]	@ (8007140 <AT_Send+0x390>)
 8006f06:	4b88      	ldr	r3, [pc, #544]	@ (8007128 <AT_Send+0x378>)
 8006f08:	0019      	movs	r1, r3
 8006f0a:	2003      	movs	r0, #3
 8006f0c:	f00c fab0 	bl	8013470 <CreateLine>
    ATCommandSend = CWMODE2();
 8006f10:	230f      	movs	r3, #15
 8006f12:	18fc      	adds	r4, r7, r3
 8006f14:	f7ff fbba 	bl	800668c <CWMODE2>
 8006f18:	0003      	movs	r3, r0
 8006f1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f1c:	f00d f82a 	bl	8013f74 <HAL_GetTick>
 8006f20:	0003      	movs	r3, r0
 8006f22:	330a      	adds	r3, #10
 8006f24:	001a      	movs	r2, r3
 8006f26:	4b7e      	ldr	r3, [pc, #504]	@ (8007120 <AT_Send+0x370>)
 8006f28:	601a      	str	r2, [r3, #0]
    break;
 8006f2a:	e0ef      	b.n	800710c <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8006f2c:	4a85      	ldr	r2, [pc, #532]	@ (8007144 <AT_Send+0x394>)
 8006f2e:	4b7e      	ldr	r3, [pc, #504]	@ (8007128 <AT_Send+0x378>)
 8006f30:	0019      	movs	r1, r3
 8006f32:	2003      	movs	r0, #3
 8006f34:	f00c fa9c 	bl	8013470 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006f38:	230f      	movs	r3, #15
 8006f3a:	18fc      	adds	r4, r7, r3
 8006f3c:	f7ff fbc2 	bl	80066c4 <CWAUTOCONN>
 8006f40:	0003      	movs	r3, r0
 8006f42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f44:	f00d f816 	bl	8013f74 <HAL_GetTick>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	330a      	adds	r3, #10
 8006f4c:	001a      	movs	r2, r3
 8006f4e:	4b74      	ldr	r3, [pc, #464]	@ (8007120 <AT_Send+0x370>)
 8006f50:	601a      	str	r2, [r3, #0]
    break;
 8006f52:	e0db      	b.n	800710c <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006f54:	4a7c      	ldr	r2, [pc, #496]	@ (8007148 <AT_Send+0x398>)
 8006f56:	4b74      	ldr	r3, [pc, #464]	@ (8007128 <AT_Send+0x378>)
 8006f58:	0019      	movs	r1, r3
 8006f5a:	2003      	movs	r0, #3
 8006f5c:	f00c fa88 	bl	8013470 <CreateLine>
    ATCommandSend = CWJAP();
 8006f60:	230f      	movs	r3, #15
 8006f62:	18fc      	adds	r4, r7, r3
 8006f64:	f7ff fbca 	bl	80066fc <CWJAP>
 8006f68:	0003      	movs	r3, r0
 8006f6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006f6c:	f00d f802 	bl	8013f74 <HAL_GetTick>
 8006f70:	0003      	movs	r3, r0
 8006f72:	3332      	adds	r3, #50	@ 0x32
 8006f74:	001a      	movs	r2, r3
 8006f76:	4b6a      	ldr	r3, [pc, #424]	@ (8007120 <AT_Send+0x370>)
 8006f78:	601a      	str	r2, [r3, #0]
    break;
 8006f7a:	e0c7      	b.n	800710c <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8006f7c:	4a73      	ldr	r2, [pc, #460]	@ (800714c <AT_Send+0x39c>)
 8006f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007128 <AT_Send+0x378>)
 8006f80:	0019      	movs	r1, r3
 8006f82:	2003      	movs	r0, #3
 8006f84:	f00c fa74 	bl	8013470 <CreateLine>
    ATCommandSend = CWMODE3();
 8006f88:	230f      	movs	r3, #15
 8006f8a:	18fc      	adds	r4, r7, r3
 8006f8c:	f7ff fc38 	bl	8006800 <CWMODE3>
 8006f90:	0003      	movs	r3, r0
 8006f92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f94:	f00c ffee 	bl	8013f74 <HAL_GetTick>
 8006f98:	0003      	movs	r3, r0
 8006f9a:	330a      	adds	r3, #10
 8006f9c:	001a      	movs	r2, r3
 8006f9e:	4b60      	ldr	r3, [pc, #384]	@ (8007120 <AT_Send+0x370>)
 8006fa0:	601a      	str	r2, [r3, #0]
    break;
 8006fa2:	e0b3      	b.n	800710c <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006fa4:	4a6a      	ldr	r2, [pc, #424]	@ (8007150 <AT_Send+0x3a0>)
 8006fa6:	4b60      	ldr	r3, [pc, #384]	@ (8007128 <AT_Send+0x378>)
 8006fa8:	0019      	movs	r1, r3
 8006faa:	2003      	movs	r0, #3
 8006fac:	f00c fa60 	bl	8013470 <CreateLine>
    ATCommandSend = CWSAP();
 8006fb0:	230f      	movs	r3, #15
 8006fb2:	18fc      	adds	r4, r7, r3
 8006fb4:	f7ff fc5c 	bl	8006870 <CWSAP>
 8006fb8:	0003      	movs	r3, r0
 8006fba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fbc:	f00c ffda 	bl	8013f74 <HAL_GetTick>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	330a      	adds	r3, #10
 8006fc4:	001a      	movs	r2, r3
 8006fc6:	4b56      	ldr	r3, [pc, #344]	@ (8007120 <AT_Send+0x370>)
 8006fc8:	601a      	str	r2, [r3, #0]
    break;
 8006fca:	e09f      	b.n	800710c <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8006fcc:	4a61      	ldr	r2, [pc, #388]	@ (8007154 <AT_Send+0x3a4>)
 8006fce:	4b56      	ldr	r3, [pc, #344]	@ (8007128 <AT_Send+0x378>)
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	2003      	movs	r0, #3
 8006fd4:	f00c fa4c 	bl	8013470 <CreateLine>
    ATCommandSend = CIPMUX();
 8006fd8:	230f      	movs	r3, #15
 8006fda:	18fc      	adds	r4, r7, r3
 8006fdc:	f7ff fc64 	bl	80068a8 <CIPMUX>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fe4:	f00c ffc6 	bl	8013f74 <HAL_GetTick>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	330a      	adds	r3, #10
 8006fec:	001a      	movs	r2, r3
 8006fee:	4b4c      	ldr	r3, [pc, #304]	@ (8007120 <AT_Send+0x370>)
 8006ff0:	601a      	str	r2, [r3, #0]
    break;
 8006ff2:	e08b      	b.n	800710c <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8006ff4:	4a58      	ldr	r2, [pc, #352]	@ (8007158 <AT_Send+0x3a8>)
 8006ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8007128 <AT_Send+0x378>)
 8006ff8:	0019      	movs	r1, r3
 8006ffa:	2003      	movs	r0, #3
 8006ffc:	f00c fa38 	bl	8013470 <CreateLine>
    ATCommandSend = WEBSERVER();
 8007000:	230f      	movs	r3, #15
 8007002:	18fc      	adds	r4, r7, r3
 8007004:	f7ff fc6c 	bl	80068e0 <WEBSERVER>
 8007008:	0003      	movs	r3, r0
 800700a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800700c:	f00c ffb2 	bl	8013f74 <HAL_GetTick>
 8007010:	0003      	movs	r3, r0
 8007012:	330a      	adds	r3, #10
 8007014:	001a      	movs	r2, r3
 8007016:	4b42      	ldr	r3, [pc, #264]	@ (8007120 <AT_Send+0x370>)
 8007018:	601a      	str	r2, [r3, #0]
    break;
 800701a:	e077      	b.n	800710c <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 800701c:	230f      	movs	r3, #15
 800701e:	18fc      	adds	r4, r7, r3
 8007020:	f7ff fc7a 	bl	8006918 <HTTPCPOST>
 8007024:	0003      	movs	r3, r0
 8007026:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007028:	f00c ffa4 	bl	8013f74 <HAL_GetTick>
 800702c:	0003      	movs	r3, r0
 800702e:	33f5      	adds	r3, #245	@ 0xf5
 8007030:	33ff      	adds	r3, #255	@ 0xff
 8007032:	001a      	movs	r2, r3
 8007034:	4b3a      	ldr	r3, [pc, #232]	@ (8007120 <AT_Send+0x370>)
 8007036:	601a      	str	r2, [r3, #0]
    break;
 8007038:	e068      	b.n	800710c <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800703a:	4a48      	ldr	r2, [pc, #288]	@ (800715c <AT_Send+0x3ac>)
 800703c:	4b3a      	ldr	r3, [pc, #232]	@ (8007128 <AT_Send+0x378>)
 800703e:	0019      	movs	r1, r3
 8007040:	2003      	movs	r0, #3
 8007042:	f00c fa15 	bl	8013470 <CreateLine>
    ATCommandSend = SENDDATA();
 8007046:	230f      	movs	r3, #15
 8007048:	18fc      	adds	r4, r7, r3
 800704a:	f7ff fccf 	bl	80069ec <SENDDATA>
 800704e:	0003      	movs	r3, r0
 8007050:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007052:	f00c ff8f 	bl	8013f74 <HAL_GetTick>
 8007056:	0003      	movs	r3, r0
 8007058:	33f5      	adds	r3, #245	@ 0xf5
 800705a:	33ff      	adds	r3, #255	@ 0xff
 800705c:	001a      	movs	r2, r3
 800705e:	4b30      	ldr	r3, [pc, #192]	@ (8007120 <AT_Send+0x370>)
 8007060:	601a      	str	r2, [r3, #0]
    break;
 8007062:	e053      	b.n	800710c <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007064:	4a3e      	ldr	r2, [pc, #248]	@ (8007160 <AT_Send+0x3b0>)
 8007066:	4b30      	ldr	r3, [pc, #192]	@ (8007128 <AT_Send+0x378>)
 8007068:	0019      	movs	r1, r3
 800706a:	2003      	movs	r0, #3
 800706c:	f00c fa00 	bl	8013470 <CreateLine>
    ATCommandSend = SLEEP();
 8007070:	230f      	movs	r3, #15
 8007072:	18fc      	adds	r4, r7, r3
 8007074:	f7ff fce6 	bl	8006a44 <SLEEP>
 8007078:	0003      	movs	r3, r0
 800707a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800707c:	f00c ff7a 	bl	8013f74 <HAL_GetTick>
 8007080:	0003      	movs	r3, r0
 8007082:	330a      	adds	r3, #10
 8007084:	001a      	movs	r2, r3
 8007086:	4b26      	ldr	r3, [pc, #152]	@ (8007120 <AT_Send+0x370>)
 8007088:	601a      	str	r2, [r3, #0]
    break;
 800708a:	e03f      	b.n	800710c <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800708c:	4a35      	ldr	r2, [pc, #212]	@ (8007164 <AT_Send+0x3b4>)
 800708e:	4b26      	ldr	r3, [pc, #152]	@ (8007128 <AT_Send+0x378>)
 8007090:	0019      	movs	r1, r3
 8007092:	2003      	movs	r0, #3
 8007094:	f00c f9ec 	bl	8013470 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8007098:	230f      	movs	r3, #15
 800709a:	18fc      	adds	r4, r7, r3
 800709c:	f7ff fcee 	bl	8006a7c <CIPSNTPCFG>
 80070a0:	0003      	movs	r3, r0
 80070a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80070a4:	f00c ff66 	bl	8013f74 <HAL_GetTick>
 80070a8:	0003      	movs	r3, r0
 80070aa:	330a      	adds	r3, #10
 80070ac:	001a      	movs	r2, r3
 80070ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007120 <AT_Send+0x370>)
 80070b0:	601a      	str	r2, [r3, #0]
    break;
 80070b2:	e02b      	b.n	800710c <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80070b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007168 <AT_Send+0x3b8>)
 80070b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007128 <AT_Send+0x378>)
 80070b8:	0019      	movs	r1, r3
 80070ba:	2003      	movs	r0, #3
 80070bc:	f00c f9d8 	bl	8013470 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80070c0:	230f      	movs	r3, #15
 80070c2:	18fc      	adds	r4, r7, r3
 80070c4:	f7ff fcfa 	bl	8006abc <CIPSNTPTIME>
 80070c8:	0003      	movs	r3, r0
 80070ca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80070cc:	f00c ff52 	bl	8013f74 <HAL_GetTick>
 80070d0:	0003      	movs	r3, r0
 80070d2:	33f5      	adds	r3, #245	@ 0xf5
 80070d4:	33ff      	adds	r3, #255	@ 0xff
 80070d6:	001a      	movs	r2, r3
 80070d8:	4b11      	ldr	r3, [pc, #68]	@ (8007120 <AT_Send+0x370>)
 80070da:	601a      	str	r2, [r3, #0]
    break;
 80070dc:	e016      	b.n	800710c <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80070de:	4a23      	ldr	r2, [pc, #140]	@ (800716c <AT_Send+0x3bc>)
 80070e0:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <AT_Send+0x378>)
 80070e2:	0019      	movs	r1, r3
 80070e4:	2003      	movs	r0, #3
 80070e6:	f00c f9c3 	bl	8013470 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80070ea:	230f      	movs	r3, #15
 80070ec:	18fc      	adds	r4, r7, r3
 80070ee:	f7ff fd01 	bl	8006af4 <CIPSNTPINTV>
 80070f2:	0003      	movs	r3, r0
 80070f4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80070f6:	f00c ff3d 	bl	8013f74 <HAL_GetTick>
 80070fa:	0003      	movs	r3, r0
 80070fc:	330a      	adds	r3, #10
 80070fe:	001a      	movs	r2, r3
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <AT_Send+0x370>)
 8007102:	601a      	str	r2, [r3, #0]
    break;
 8007104:	e002      	b.n	800710c <AT_Send+0x35c>

  case AT_END:
    break;
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	e000      	b.n	800710c <AT_Send+0x35c>
  break;
 800710a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800710c:	230f      	movs	r3, #15
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	781b      	ldrb	r3, [r3, #0]
}
 8007112:	0018      	movs	r0, r3
 8007114:	46bd      	mov	sp, r7
 8007116:	b005      	add	sp, #20
 8007118:	bd90      	pop	{r4, r7, pc}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	0802df78 	.word	0x0802df78
 8007120:	20000670 	.word	0x20000670
 8007124:	0802b0e0 	.word	0x0802b0e0
 8007128:	0802a230 	.word	0x0802a230
 800712c:	0802b0ec 	.word	0x0802b0ec
 8007130:	0802b100 	.word	0x0802b100
 8007134:	0802b114 	.word	0x0802b114
 8007138:	0802b124 	.word	0x0802b124
 800713c:	0802b138 	.word	0x0802b138
 8007140:	0802b150 	.word	0x0802b150
 8007144:	0802b168 	.word	0x0802b168
 8007148:	0802b180 	.word	0x0802b180
 800714c:	0802b194 	.word	0x0802b194
 8007150:	0802b1b0 	.word	0x0802b1b0
 8007154:	0802b1cc 	.word	0x0802b1cc
 8007158:	0802b1e8 	.word	0x0802b1e8
 800715c:	0802b204 	.word	0x0802b204
 8007160:	0802b214 	.word	0x0802b214
 8007164:	0802b238 	.word	0x0802b238
 8007168:	0802b24c 	.word	0x0802b24c
 800716c:	0802b264 	.word	0x0802b264

08007170 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007170:	b590      	push	{r4, r7, lr}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8007176:	1dfb      	adds	r3, r7, #7
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 800717c:	4b7d      	ldr	r3, [pc, #500]	@ (8007374 <ESP_WakeTest+0x204>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b05      	cmp	r3, #5
 8007182:	d900      	bls.n	8007186 <ESP_WakeTest+0x16>
 8007184:	e0d9      	b.n	800733a <ESP_WakeTest+0x1ca>
 8007186:	009a      	lsls	r2, r3, #2
 8007188:	4b7b      	ldr	r3, [pc, #492]	@ (8007378 <ESP_WakeTest+0x208>)
 800718a:	18d3      	adds	r3, r2, r3
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007190:	4b7a      	ldr	r3, [pc, #488]	@ (800737c <ESP_WakeTest+0x20c>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2201      	movs	r2, #1
 8007196:	4053      	eors	r3, r2
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d036      	beq.n	800720c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800719e:	2380      	movs	r3, #128	@ 0x80
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	4877      	ldr	r0, [pc, #476]	@ (8007380 <ESP_WakeTest+0x210>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	0019      	movs	r1, r3
 80071a8:	f00e f975 	bl	8015496 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80071ac:	2032      	movs	r0, #50	@ 0x32
 80071ae:	f00c feeb 	bl	8013f88 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80071b2:	2380      	movs	r3, #128	@ 0x80
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	4872      	ldr	r0, [pc, #456]	@ (8007380 <ESP_WakeTest+0x210>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	0019      	movs	r1, r3
 80071bc:	f00e f96b 	bl	8015496 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071c0:	200a      	movs	r0, #10
 80071c2:	f00c fee1 	bl	8013f88 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80071c6:	4b6f      	ldr	r3, [pc, #444]	@ (8007384 <ESP_WakeTest+0x214>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	2101      	movs	r1, #1
 80071cc:	0018      	movs	r0, r3
 80071ce:	f00e f962 	bl	8015496 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071d2:	200a      	movs	r0, #10
 80071d4:	f00c fed8 	bl	8013f88 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80071d8:	4b6a      	ldr	r3, [pc, #424]	@ (8007384 <ESP_WakeTest+0x214>)
 80071da:	2201      	movs	r2, #1
 80071dc:	2102      	movs	r1, #2
 80071de:	0018      	movs	r0, r3
 80071e0:	f00e f959 	bl	8015496 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80071e4:	200a      	movs	r0, #10
 80071e6:	f00c fecf 	bl	8013f88 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80071ea:	4b66      	ldr	r3, [pc, #408]	@ (8007384 <ESP_WakeTest+0x214>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	2101      	movs	r1, #1
 80071f0:	0018      	movs	r0, r3
 80071f2:	f00e f950 	bl	8015496 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80071f6:	f00c febd 	bl	8013f74 <HAL_GetTick>
 80071fa:	0003      	movs	r3, r0
 80071fc:	22af      	movs	r2, #175	@ 0xaf
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	189a      	adds	r2, r3, r2
 8007202:	4b61      	ldr	r3, [pc, #388]	@ (8007388 <ESP_WakeTest+0x218>)
 8007204:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007206:	4b5d      	ldr	r3, [pc, #372]	@ (800737c <ESP_WakeTest+0x20c>)
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800720c:	2380      	movs	r3, #128	@ 0x80
 800720e:	005a      	lsls	r2, r3, #1
 8007210:	4b5e      	ldr	r3, [pc, #376]	@ (800738c <ESP_WakeTest+0x21c>)
 8007212:	0011      	movs	r1, r2
 8007214:	0018      	movs	r0, r3
 8007216:	f7fd fe5d 	bl	8004ed4 <ESP_Receive>
 800721a:	1e03      	subs	r3, r0, #0
 800721c:	d100      	bne.n	8007220 <ESP_WakeTest+0xb0>
 800721e:	e09f      	b.n	8007360 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8007220:	4b54      	ldr	r3, [pc, #336]	@ (8007374 <ESP_WakeTest+0x204>)
 8007222:	2201      	movs	r2, #1
 8007224:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007226:	e09b      	b.n	8007360 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007228:	4b57      	ldr	r3, [pc, #348]	@ (8007388 <ESP_WakeTest+0x218>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	0018      	movs	r0, r3
 800722e:	f00c f8c9 	bl	80133c4 <TimestampIsReached>
 8007232:	1e03      	subs	r3, r0, #0
 8007234:	d100      	bne.n	8007238 <ESP_WakeTest+0xc8>
 8007236:	e095      	b.n	8007364 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8007238:	4b55      	ldr	r3, [pc, #340]	@ (8007390 <ESP_WakeTest+0x220>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	1dfc      	adds	r4, r7, #7
 800723e:	0018      	movs	r0, r3
 8007240:	f7ff fdb6 	bl	8006db0 <AT_Send>
 8007244:	0003      	movs	r3, r0
 8007246:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007248:	1dfb      	adds	r3, r7, #7
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d100      	bne.n	8007252 <ESP_WakeTest+0xe2>
 8007250:	e088      	b.n	8007364 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8007252:	4b48      	ldr	r3, [pc, #288]	@ (8007374 <ESP_WakeTest+0x204>)
 8007254:	2202      	movs	r2, #2
 8007256:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007258:	e084      	b.n	8007364 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800725a:	4b4b      	ldr	r3, [pc, #300]	@ (8007388 <ESP_WakeTest+0x218>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	0018      	movs	r0, r3
 8007260:	f00c f8b0 	bl	80133c4 <TimestampIsReached>
 8007264:	1e03      	subs	r3, r0, #0
 8007266:	d100      	bne.n	800726a <ESP_WakeTest+0xfa>
 8007268:	e07e      	b.n	8007368 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800726a:	4b4a      	ldr	r3, [pc, #296]	@ (8007394 <ESP_WakeTest+0x224>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	0018      	movs	r0, r3
 8007270:	f7ff fc5c 	bl	8006b2c <DMA_ProcessBuffer>
 8007274:	0003      	movs	r3, r0
 8007276:	001a      	movs	r2, r3
 8007278:	4b47      	ldr	r3, [pc, #284]	@ (8007398 <ESP_WakeTest+0x228>)
 800727a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800727c:	4b46      	ldr	r3, [pc, #280]	@ (8007398 <ESP_WakeTest+0x228>)
 800727e:	781a      	ldrb	r2, [r3, #0]
 8007280:	4b44      	ldr	r3, [pc, #272]	@ (8007394 <ESP_WakeTest+0x224>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	1dbc      	adds	r4, r7, #6
 8007286:	0019      	movs	r1, r3
 8007288:	0010      	movs	r0, r2
 800728a:	f7ff fd4f 	bl	8006d2c <ATCompare>
 800728e:	0003      	movs	r3, r0
 8007290:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007292:	4b41      	ldr	r3, [pc, #260]	@ (8007398 <ESP_WakeTest+0x228>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d102      	bne.n	80072a0 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800729a:	4b36      	ldr	r3, [pc, #216]	@ (8007374 <ESP_WakeTest+0x204>)
 800729c:	2201      	movs	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80072a0:	4b3d      	ldr	r3, [pc, #244]	@ (8007398 <ESP_WakeTest+0x228>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b07      	cmp	r3, #7
 80072a6:	d104      	bne.n	80072b2 <ESP_WakeTest+0x142>
          StartProg();
 80072a8:	f7fe ff2a 	bl	8006100 <StartProg>
          TestState = ESP_TEST_BOOT;
 80072ac:	4b31      	ldr	r3, [pc, #196]	@ (8007374 <ESP_WakeTest+0x204>)
 80072ae:	2205      	movs	r2, #5
 80072b0:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80072b2:	4b39      	ldr	r3, [pc, #228]	@ (8007398 <ESP_WakeTest+0x228>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d109      	bne.n	80072ce <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80072ba:	f00c fe5b 	bl	8013f74 <HAL_GetTick>
 80072be:	0003      	movs	r3, r0
 80072c0:	3332      	adds	r3, #50	@ 0x32
 80072c2:	001a      	movs	r2, r3
 80072c4:	4b30      	ldr	r3, [pc, #192]	@ (8007388 <ESP_WakeTest+0x218>)
 80072c6:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80072c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007374 <ESP_WakeTest+0x204>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80072ce:	1dbb      	adds	r3, r7, #6
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d048      	beq.n	8007368 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80072d6:	4b27      	ldr	r3, [pc, #156]	@ (8007374 <ESP_WakeTest+0x204>)
 80072d8:	2203      	movs	r2, #3
 80072da:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80072dc:	e044      	b.n	8007368 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80072de:	4b2f      	ldr	r3, [pc, #188]	@ (800739c <ESP_WakeTest+0x22c>)
 80072e0:	22fa      	movs	r2, #250	@ 0xfa
 80072e2:	0112      	lsls	r2, r2, #4
 80072e4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80072e6:	f00a fd6f 	bl	8011dc8 <Calculate_LED_ON>
 80072ea:	0003      	movs	r3, r0
 80072ec:	001a      	movs	r2, r3
 80072ee:	4b2b      	ldr	r3, [pc, #172]	@ (800739c <ESP_WakeTest+0x22c>)
 80072f0:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80072f2:	4b2a      	ldr	r3, [pc, #168]	@ (800739c <ESP_WakeTest+0x22c>)
 80072f4:	22fa      	movs	r2, #250	@ 0xfa
 80072f6:	0112      	lsls	r2, r2, #4
 80072f8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80072fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007374 <ESP_WakeTest+0x204>)
 80072fc:	2204      	movs	r2, #4
 80072fe:	701a      	strb	r2, [r3, #0]

      break;
 8007300:	e033      	b.n	800736a <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007302:	4b27      	ldr	r3, [pc, #156]	@ (80073a0 <ESP_WakeTest+0x230>)
 8007304:	2200      	movs	r2, #0
 8007306:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8007308:	4b1c      	ldr	r3, [pc, #112]	@ (800737c <ESP_WakeTest+0x20c>)
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800730e:	4b1d      	ldr	r3, [pc, #116]	@ (8007384 <ESP_WakeTest+0x214>)
 8007310:	2200      	movs	r2, #0
 8007312:	2101      	movs	r1, #1
 8007314:	0018      	movs	r0, r3
 8007316:	f00e f8be 	bl	8015496 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800731a:	2380      	movs	r3, #128	@ 0x80
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	4818      	ldr	r0, [pc, #96]	@ (8007380 <ESP_WakeTest+0x210>)
 8007320:	2200      	movs	r2, #0
 8007322:	0019      	movs	r1, r3
 8007324:	f00e f8b7 	bl	8015496 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007328:	4b16      	ldr	r3, [pc, #88]	@ (8007384 <ESP_WakeTest+0x214>)
 800732a:	2200      	movs	r2, #0
 800732c:	2102      	movs	r1, #2
 800732e:	0018      	movs	r0, r3
 8007330:	f00e f8b1 	bl	8015496 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8007334:	f005 fcf0 	bl	800cd18 <SetESPMeasurementDone>
      break;
 8007338:	e017      	b.n	800736a <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800733a:	4b0e      	ldr	r3, [pc, #56]	@ (8007374 <ESP_WakeTest+0x204>)
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
      break;
 8007340:	e013      	b.n	800736a <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007342:	4b16      	ldr	r3, [pc, #88]	@ (800739c <ESP_WakeTest+0x22c>)
 8007344:	22fa      	movs	r2, #250	@ 0xfa
 8007346:	0112      	lsls	r2, r2, #4
 8007348:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800734a:	4b14      	ldr	r3, [pc, #80]	@ (800739c <ESP_WakeTest+0x22c>)
 800734c:	22fa      	movs	r2, #250	@ 0xfa
 800734e:	0112      	lsls	r2, r2, #4
 8007350:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007352:	f00a fd39 	bl	8011dc8 <Calculate_LED_ON>
 8007356:	0003      	movs	r3, r0
 8007358:	001a      	movs	r2, r3
 800735a:	4b10      	ldr	r3, [pc, #64]	@ (800739c <ESP_WakeTest+0x22c>)
 800735c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800735e:	e004      	b.n	800736a <ESP_WakeTest+0x1fa>
      break;
 8007360:	46c0      	nop			@ (mov r8, r8)
 8007362:	e002      	b.n	800736a <ESP_WakeTest+0x1fa>
      break;
 8007364:	46c0      	nop			@ (mov r8, r8)
 8007366:	e000      	b.n	800736a <ESP_WakeTest+0x1fa>
      break;
 8007368:	46c0      	nop			@ (mov r8, r8)
  }
}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	46bd      	mov	sp, r7
 800736e:	b003      	add	sp, #12
 8007370:	bd90      	pop	{r4, r7, pc}
 8007372:	46c0      	nop			@ (mov r8, r8)
 8007374:	2000067c 	.word	0x2000067c
 8007378:	0802dfcc 	.word	0x0802dfcc
 800737c:	200005a4 	.word	0x200005a4
 8007380:	50000800 	.word	0x50000800
 8007384:	50001c00 	.word	0x50001c00
 8007388:	20000670 	.word	0x20000670
 800738c:	200004a4 	.word	0x200004a4
 8007390:	2000067a 	.word	0x2000067a
 8007394:	20000679 	.word	0x20000679
 8007398:	2000002e 	.word	0x2000002e
 800739c:	40000400 	.word	0x40000400
 80073a0:	20000001 	.word	0x20000001

080073a4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80073a4:	b5b0      	push	{r4, r5, r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80073aa:	1dfb      	adds	r3, r7, #7
 80073ac:	2200      	movs	r2, #0
 80073ae:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80073b0:	4bdf      	ldr	r3, [pc, #892]	@ (8007730 <ESP_Upkeep+0x38c>)
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	4bdf      	ldr	r3, [pc, #892]	@ (8007734 <ESP_Upkeep+0x390>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d024      	beq.n	8007406 <ESP_Upkeep+0x62>
 80073bc:	f00c f914 	bl	80135e8 <GetVerboseLevel>
 80073c0:	0003      	movs	r3, r0
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d11f      	bne.n	8007406 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80073c6:	4bda      	ldr	r3, [pc, #872]	@ (8007730 <ESP_Upkeep+0x38c>)
 80073c8:	781a      	ldrb	r2, [r3, #0]
 80073ca:	4bda      	ldr	r3, [pc, #872]	@ (8007734 <ESP_Upkeep+0x390>)
 80073cc:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80073ce:	4bd9      	ldr	r3, [pc, #868]	@ (8007734 <ESP_Upkeep+0x390>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d103      	bne.n	80073de <ESP_Upkeep+0x3a>
 80073d6:	4bd8      	ldr	r3, [pc, #864]	@ (8007738 <ESP_Upkeep+0x394>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b0e      	cmp	r3, #14
 80073dc:	d013      	beq.n	8007406 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80073de:	4bd5      	ldr	r3, [pc, #852]	@ (8007734 <ESP_Upkeep+0x390>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	001d      	movs	r5, r3
 80073e4:	4bd4      	ldr	r3, [pc, #848]	@ (8007738 <ESP_Upkeep+0x394>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	0018      	movs	r0, r3
 80073ea:	4bd4      	ldr	r3, [pc, #848]	@ (800773c <ESP_Upkeep+0x398>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	001c      	movs	r4, r3
 80073f0:	4bd3      	ldr	r3, [pc, #844]	@ (8007740 <ESP_Upkeep+0x39c>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	4ad3      	ldr	r2, [pc, #844]	@ (8007744 <ESP_Upkeep+0x3a0>)
 80073f6:	49d4      	ldr	r1, [pc, #848]	@ (8007748 <ESP_Upkeep+0x3a4>)
 80073f8:	9302      	str	r3, [sp, #8]
 80073fa:	9401      	str	r4, [sp, #4]
 80073fc:	9000      	str	r0, [sp, #0]
 80073fe:	002b      	movs	r3, r5
 8007400:	2003      	movs	r0, #3
 8007402:	f00c f835 	bl	8013470 <CreateLine>
    }
  }
  switch (EspState) {
 8007406:	4bca      	ldr	r3, [pc, #808]	@ (8007730 <ESP_Upkeep+0x38c>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b0f      	cmp	r3, #15
 800740c:	d901      	bls.n	8007412 <ESP_Upkeep+0x6e>
 800740e:	f000 fc5e 	bl	8007cce <ESP_Upkeep+0x92a>
 8007412:	009a      	lsls	r2, r3, #2
 8007414:	4bcd      	ldr	r3, [pc, #820]	@ (800774c <ESP_Upkeep+0x3a8>)
 8007416:	18d3      	adds	r3, r2, r3
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 800741c:	4bc4      	ldr	r3, [pc, #784]	@ (8007730 <ESP_Upkeep+0x38c>)
 800741e:	2201      	movs	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
      break;
 8007422:	f000 fc6f 	bl	8007d04 <ESP_Upkeep+0x960>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 8007426:	4bca      	ldr	r3, [pc, #808]	@ (8007750 <ESP_Upkeep+0x3ac>)
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 800742c:	f005 fed4 	bl	800d1d8 <AllDevicesReady>
 8007430:	0003      	movs	r3, r0
 8007432:	001a      	movs	r2, r3
 8007434:	2301      	movs	r3, #1
 8007436:	4053      	eors	r3, r2
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <ESP_Upkeep+0x9e>
 800743e:	f000 fc52 	bl	8007ce6 <ESP_Upkeep+0x942>
        break;
      }
      SetESPIndicator();
 8007442:	f00a fe53 	bl	80120ec <SetESPIndicator>
      if(!EspTurnedOn){
 8007446:	4bc3      	ldr	r3, [pc, #780]	@ (8007754 <ESP_Upkeep+0x3b0>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2201      	movs	r2, #1
 800744c:	4053      	eors	r3, r2
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d036      	beq.n	80074c2 <ESP_Upkeep+0x11e>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007454:	2380      	movs	r3, #128	@ 0x80
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	48bf      	ldr	r0, [pc, #764]	@ (8007758 <ESP_Upkeep+0x3b4>)
 800745a:	2200      	movs	r2, #0
 800745c:	0019      	movs	r1, r3
 800745e:	f00e f81a 	bl	8015496 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007462:	2001      	movs	r0, #1
 8007464:	f00c fd90 	bl	8013f88 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007468:	2380      	movs	r3, #128	@ 0x80
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	48ba      	ldr	r0, [pc, #744]	@ (8007758 <ESP_Upkeep+0x3b4>)
 800746e:	2201      	movs	r2, #1
 8007470:	0019      	movs	r1, r3
 8007472:	f00e f810 	bl	8015496 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007476:	2001      	movs	r0, #1
 8007478:	f00c fd86 	bl	8013f88 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800747c:	4bb7      	ldr	r3, [pc, #732]	@ (800775c <ESP_Upkeep+0x3b8>)
 800747e:	2200      	movs	r2, #0
 8007480:	2101      	movs	r1, #1
 8007482:	0018      	movs	r0, r3
 8007484:	f00e f807 	bl	8015496 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007488:	2001      	movs	r0, #1
 800748a:	f00c fd7d 	bl	8013f88 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800748e:	4bb3      	ldr	r3, [pc, #716]	@ (800775c <ESP_Upkeep+0x3b8>)
 8007490:	2201      	movs	r2, #1
 8007492:	2102      	movs	r1, #2
 8007494:	0018      	movs	r0, r3
 8007496:	f00d fffe 	bl	8015496 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800749a:	2001      	movs	r0, #1
 800749c:	f00c fd74 	bl	8013f88 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074a0:	4bae      	ldr	r3, [pc, #696]	@ (800775c <ESP_Upkeep+0x3b8>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	2101      	movs	r1, #1
 80074a6:	0018      	movs	r0, r3
 80074a8:	f00d fff5 	bl	8015496 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80074ac:	f00c fd62 	bl	8013f74 <HAL_GetTick>
 80074b0:	0003      	movs	r3, r0
 80074b2:	22af      	movs	r2, #175	@ 0xaf
 80074b4:	0092      	lsls	r2, r2, #2
 80074b6:	189a      	adds	r2, r3, r2
 80074b8:	4ba9      	ldr	r3, [pc, #676]	@ (8007760 <ESP_Upkeep+0x3bc>)
 80074ba:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80074bc:	4ba5      	ldr	r3, [pc, #660]	@ (8007754 <ESP_Upkeep+0x3b0>)
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80074c2:	2380      	movs	r3, #128	@ 0x80
 80074c4:	005a      	lsls	r2, r3, #1
 80074c6:	4ba7      	ldr	r3, [pc, #668]	@ (8007764 <ESP_Upkeep+0x3c0>)
 80074c8:	0011      	movs	r1, r2
 80074ca:	0018      	movs	r0, r3
 80074cc:	f7fd fd02 	bl	8004ed4 <ESP_Receive>
 80074d0:	1e03      	subs	r3, r0, #0
 80074d2:	d101      	bne.n	80074d8 <ESP_Upkeep+0x134>
 80074d4:	f000 fc09 	bl	8007cea <ESP_Upkeep+0x946>
        EspState = ESP_STATE_WAIT_AWAKE;
 80074d8:	4b95      	ldr	r3, [pc, #596]	@ (8007730 <ESP_Upkeep+0x38c>)
 80074da:	220f      	movs	r2, #15
 80074dc:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80074de:	f00c fd49 	bl	8013f74 <HAL_GetTick>
 80074e2:	0003      	movs	r3, r0
 80074e4:	22fa      	movs	r2, #250	@ 0xfa
 80074e6:	00d2      	lsls	r2, r2, #3
 80074e8:	189a      	adds	r2, r3, r2
 80074ea:	4b9f      	ldr	r3, [pc, #636]	@ (8007768 <ESP_Upkeep+0x3c4>)
 80074ec:	601a      	str	r2, [r3, #0]
      }
      break;
 80074ee:	f000 fbfc 	bl	8007cea <ESP_Upkeep+0x946>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80074f2:	2001      	movs	r0, #1
 80074f4:	f7ff fb1a 	bl	8006b2c <DMA_ProcessBuffer>
 80074f8:	0003      	movs	r3, r0
 80074fa:	001a      	movs	r2, r3
 80074fc:	4b9b      	ldr	r3, [pc, #620]	@ (800776c <ESP_Upkeep+0x3c8>)
 80074fe:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007500:	4b9a      	ldr	r3, [pc, #616]	@ (800776c <ESP_Upkeep+0x3c8>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	1dbc      	adds	r4, r7, #6
 8007506:	2101      	movs	r1, #1
 8007508:	0018      	movs	r0, r3
 800750a:	f7ff fc0f 	bl	8006d2c <ATCompare>
 800750e:	0003      	movs	r3, r0
 8007510:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8007512:	1dbb      	adds	r3, r7, #6
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <ESP_Upkeep+0x188>
 800751a:	4b93      	ldr	r3, [pc, #588]	@ (8007768 <ESP_Upkeep+0x3c4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	0018      	movs	r0, r3
 8007520:	f00b ff50 	bl	80133c4 <TimestampIsReached>
 8007524:	1e03      	subs	r3, r0, #0
 8007526:	d101      	bne.n	800752c <ESP_Upkeep+0x188>
 8007528:	f000 fbe1 	bl	8007cee <ESP_Upkeep+0x94a>
          EspState = ESP_STATE_MODE_SELECT;
 800752c:	4b80      	ldr	r3, [pc, #512]	@ (8007730 <ESP_Upkeep+0x38c>)
 800752e:	220b      	movs	r2, #11
 8007530:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007532:	f000 fbdc 	bl	8007cee <ESP_Upkeep+0x94a>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8007536:	4b8e      	ldr	r3, [pc, #568]	@ (8007770 <ESP_Upkeep+0x3cc>)
 8007538:	2209      	movs	r2, #9
 800753a:	2114      	movs	r1, #20
 800753c:	0018      	movs	r0, r3
 800753e:	f01e fc35 	bl	8025dac <memset>
      if(!InitIsDone || WifiReset){
 8007542:	4b8c      	ldr	r3, [pc, #560]	@ (8007774 <ESP_Upkeep+0x3d0>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2201      	movs	r2, #1
 8007548:	4053      	eors	r3, r2
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <ESP_Upkeep+0x1b4>
 8007550:	4b89      	ldr	r3, [pc, #548]	@ (8007778 <ESP_Upkeep+0x3d4>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01a      	beq.n	800758e <ESP_Upkeep+0x1ea>
        memcpy(ATCommandArray, AT_INIT, 7);
 8007558:	4b85      	ldr	r3, [pc, #532]	@ (8007770 <ESP_Upkeep+0x3cc>)
 800755a:	4a88      	ldr	r2, [pc, #544]	@ (800777c <ESP_Upkeep+0x3d8>)
 800755c:	6811      	ldr	r1, [r2, #0]
 800755e:	6019      	str	r1, [r3, #0]
 8007560:	8891      	ldrh	r1, [r2, #4]
 8007562:	8099      	strh	r1, [r3, #4]
 8007564:	7992      	ldrb	r2, [r2, #6]
 8007566:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8007568:	4b71      	ldr	r3, [pc, #452]	@ (8007730 <ESP_Upkeep+0x38c>)
 800756a:	2204      	movs	r2, #4
 800756c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800756e:	4b84      	ldr	r3, [pc, #528]	@ (8007780 <ESP_Upkeep+0x3dc>)
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8007574:	4b71      	ldr	r3, [pc, #452]	@ (800773c <ESP_Upkeep+0x398>)
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800757a:	4b81      	ldr	r3, [pc, #516]	@ (8007780 <ESP_Upkeep+0x3dc>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	001a      	movs	r2, r3
 8007580:	4b7b      	ldr	r3, [pc, #492]	@ (8007770 <ESP_Upkeep+0x3cc>)
 8007582:	5c9a      	ldrb	r2, [r3, r2]
 8007584:	4b6c      	ldr	r3, [pc, #432]	@ (8007738 <ESP_Upkeep+0x394>)
 8007586:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007588:	4b6d      	ldr	r3, [pc, #436]	@ (8007740 <ESP_Upkeep+0x39c>)
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800758e:	4b79      	ldr	r3, [pc, #484]	@ (8007774 <ESP_Upkeep+0x3d0>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01f      	beq.n	80075d6 <ESP_Upkeep+0x232>
 8007596:	4b7b      	ldr	r3, [pc, #492]	@ (8007784 <ESP_Upkeep+0x3e0>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2201      	movs	r2, #1
 800759c:	4053      	eors	r3, r2
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d018      	beq.n	80075d6 <ESP_Upkeep+0x232>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80075a4:	4b72      	ldr	r3, [pc, #456]	@ (8007770 <ESP_Upkeep+0x3cc>)
 80075a6:	4a78      	ldr	r2, [pc, #480]	@ (8007788 <ESP_Upkeep+0x3e4>)
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	6019      	str	r1, [r3, #0]
 80075ac:	8892      	ldrh	r2, [r2, #4]
 80075ae:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80075b0:	4b5f      	ldr	r3, [pc, #380]	@ (8007730 <ESP_Upkeep+0x38c>)
 80075b2:	2204      	movs	r2, #4
 80075b4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80075b6:	4b72      	ldr	r3, [pc, #456]	@ (8007780 <ESP_Upkeep+0x3dc>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80075bc:	4b5f      	ldr	r3, [pc, #380]	@ (800773c <ESP_Upkeep+0x398>)
 80075be:	2201      	movs	r2, #1
 80075c0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80075c2:	4b6f      	ldr	r3, [pc, #444]	@ (8007780 <ESP_Upkeep+0x3dc>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	001a      	movs	r2, r3
 80075c8:	4b69      	ldr	r3, [pc, #420]	@ (8007770 <ESP_Upkeep+0x3cc>)
 80075ca:	5c9a      	ldrb	r2, [r3, r2]
 80075cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007738 <ESP_Upkeep+0x394>)
 80075ce:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80075d0:	4b5b      	ldr	r3, [pc, #364]	@ (8007740 <ESP_Upkeep+0x39c>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80075d6:	4b67      	ldr	r3, [pc, #412]	@ (8007774 <ESP_Upkeep+0x3d0>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d021      	beq.n	8007622 <ESP_Upkeep+0x27e>
 80075de:	4b69      	ldr	r3, [pc, #420]	@ (8007784 <ESP_Upkeep+0x3e0>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01d      	beq.n	8007622 <ESP_Upkeep+0x27e>
 80075e6:	4b69      	ldr	r3, [pc, #420]	@ (800778c <ESP_Upkeep+0x3e8>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2201      	movs	r2, #1
 80075ec:	4053      	eors	r3, r2
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d016      	beq.n	8007622 <ESP_Upkeep+0x27e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80075f4:	4b66      	ldr	r3, [pc, #408]	@ (8007790 <ESP_Upkeep+0x3ec>)
 80075f6:	881a      	ldrh	r2, [r3, #0]
 80075f8:	4b5d      	ldr	r3, [pc, #372]	@ (8007770 <ESP_Upkeep+0x3cc>)
 80075fa:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80075fc:	4b4c      	ldr	r3, [pc, #304]	@ (8007730 <ESP_Upkeep+0x38c>)
 80075fe:	2204      	movs	r2, #4
 8007600:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007602:	4b5f      	ldr	r3, [pc, #380]	@ (8007780 <ESP_Upkeep+0x3dc>)
 8007604:	2200      	movs	r2, #0
 8007606:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8007608:	4b4c      	ldr	r3, [pc, #304]	@ (800773c <ESP_Upkeep+0x398>)
 800760a:	2204      	movs	r2, #4
 800760c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800760e:	4b5c      	ldr	r3, [pc, #368]	@ (8007780 <ESP_Upkeep+0x3dc>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	001a      	movs	r2, r3
 8007614:	4b56      	ldr	r3, [pc, #344]	@ (8007770 <ESP_Upkeep+0x3cc>)
 8007616:	5c9a      	ldrb	r2, [r3, r2]
 8007618:	4b47      	ldr	r3, [pc, #284]	@ (8007738 <ESP_Upkeep+0x394>)
 800761a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800761c:	4b48      	ldr	r3, [pc, #288]	@ (8007740 <ESP_Upkeep+0x39c>)
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8007622:	4b54      	ldr	r3, [pc, #336]	@ (8007774 <ESP_Upkeep+0x3d0>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d02c      	beq.n	8007684 <ESP_Upkeep+0x2e0>
 800762a:	4b56      	ldr	r3, [pc, #344]	@ (8007784 <ESP_Upkeep+0x3e0>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d028      	beq.n	8007684 <ESP_Upkeep+0x2e0>
 8007632:	4b56      	ldr	r3, [pc, #344]	@ (800778c <ESP_Upkeep+0x3e8>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d024      	beq.n	8007684 <ESP_Upkeep+0x2e0>
 800763a:	4b56      	ldr	r3, [pc, #344]	@ (8007794 <ESP_Upkeep+0x3f0>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2201      	movs	r2, #1
 8007640:	4053      	eors	r3, r2
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01d      	beq.n	8007684 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007648:	4b49      	ldr	r3, [pc, #292]	@ (8007770 <ESP_Upkeep+0x3cc>)
 800764a:	4a53      	ldr	r2, [pc, #332]	@ (8007798 <ESP_Upkeep+0x3f4>)
 800764c:	8811      	ldrh	r1, [r2, #0]
 800764e:	8019      	strh	r1, [r3, #0]
 8007650:	7892      	ldrb	r2, [r2, #2]
 8007652:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007654:	4b36      	ldr	r3, [pc, #216]	@ (8007730 <ESP_Upkeep+0x38c>)
 8007656:	2204      	movs	r2, #4
 8007658:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800765a:	4b49      	ldr	r3, [pc, #292]	@ (8007780 <ESP_Upkeep+0x3dc>)
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007660:	4b36      	ldr	r3, [pc, #216]	@ (800773c <ESP_Upkeep+0x398>)
 8007662:	2202      	movs	r2, #2
 8007664:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007666:	f00c fc85 	bl	8013f74 <HAL_GetTick>
 800766a:	0002      	movs	r2, r0
 800766c:	4b4b      	ldr	r3, [pc, #300]	@ (800779c <ESP_Upkeep+0x3f8>)
 800766e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007670:	4b43      	ldr	r3, [pc, #268]	@ (8007780 <ESP_Upkeep+0x3dc>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	001a      	movs	r2, r3
 8007676:	4b3e      	ldr	r3, [pc, #248]	@ (8007770 <ESP_Upkeep+0x3cc>)
 8007678:	5c9a      	ldrb	r2, [r3, r2]
 800767a:	4b2f      	ldr	r3, [pc, #188]	@ (8007738 <ESP_Upkeep+0x394>)
 800767c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800767e:	4b30      	ldr	r3, [pc, #192]	@ (8007740 <ESP_Upkeep+0x39c>)
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8007684:	4b3b      	ldr	r3, [pc, #236]	@ (8007774 <ESP_Upkeep+0x3d0>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d027      	beq.n	80076dc <ESP_Upkeep+0x338>
 800768c:	4b3d      	ldr	r3, [pc, #244]	@ (8007784 <ESP_Upkeep+0x3e0>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d023      	beq.n	80076dc <ESP_Upkeep+0x338>
 8007694:	4b3d      	ldr	r3, [pc, #244]	@ (800778c <ESP_Upkeep+0x3e8>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01f      	beq.n	80076dc <ESP_Upkeep+0x338>
 800769c:	4b3d      	ldr	r3, [pc, #244]	@ (8007794 <ESP_Upkeep+0x3f0>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01b      	beq.n	80076dc <ESP_Upkeep+0x338>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80076a4:	4b3e      	ldr	r3, [pc, #248]	@ (80077a0 <ESP_Upkeep+0x3fc>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	4b31      	ldr	r3, [pc, #196]	@ (8007770 <ESP_Upkeep+0x3cc>)
 80076aa:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80076ac:	4b20      	ldr	r3, [pc, #128]	@ (8007730 <ESP_Upkeep+0x38c>)
 80076ae:	2204      	movs	r2, #4
 80076b0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80076b2:	4b33      	ldr	r3, [pc, #204]	@ (8007780 <ESP_Upkeep+0x3dc>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80076b8:	4b20      	ldr	r3, [pc, #128]	@ (800773c <ESP_Upkeep+0x398>)
 80076ba:	2205      	movs	r2, #5
 80076bc:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80076be:	f00c fc59 	bl	8013f74 <HAL_GetTick>
 80076c2:	0002      	movs	r2, r0
 80076c4:	4b35      	ldr	r3, [pc, #212]	@ (800779c <ESP_Upkeep+0x3f8>)
 80076c6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80076c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007780 <ESP_Upkeep+0x3dc>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	001a      	movs	r2, r3
 80076ce:	4b28      	ldr	r3, [pc, #160]	@ (8007770 <ESP_Upkeep+0x3cc>)
 80076d0:	5c9a      	ldrb	r2, [r3, r2]
 80076d2:	4b19      	ldr	r3, [pc, #100]	@ (8007738 <ESP_Upkeep+0x394>)
 80076d4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80076d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007740 <ESP_Upkeep+0x39c>)
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80076dc:	4b31      	ldr	r3, [pc, #196]	@ (80077a4 <ESP_Upkeep+0x400>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d100      	bne.n	80076e6 <ESP_Upkeep+0x342>
 80076e4:	e305      	b.n	8007cf2 <ESP_Upkeep+0x94e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80076e6:	4b22      	ldr	r3, [pc, #136]	@ (8007770 <ESP_Upkeep+0x3cc>)
 80076e8:	4a2f      	ldr	r2, [pc, #188]	@ (80077a8 <ESP_Upkeep+0x404>)
 80076ea:	6811      	ldr	r1, [r2, #0]
 80076ec:	6019      	str	r1, [r3, #0]
 80076ee:	7912      	ldrb	r2, [r2, #4]
 80076f0:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80076f2:	4a2e      	ldr	r2, [pc, #184]	@ (80077ac <ESP_Upkeep+0x408>)
 80076f4:	4b14      	ldr	r3, [pc, #80]	@ (8007748 <ESP_Upkeep+0x3a4>)
 80076f6:	0019      	movs	r1, r3
 80076f8:	2003      	movs	r0, #3
 80076fa:	f00b feb9 	bl	8013470 <CreateLine>
        DisableConnectedDevices();
 80076fe:	f005 fee1 	bl	800d4c4 <DisableConnectedDevices>
        usblog = false;
 8007702:	4b2b      	ldr	r3, [pc, #172]	@ (80077b0 <ESP_Upkeep+0x40c>)
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007708:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <ESP_Upkeep+0x38c>)
 800770a:	2204      	movs	r2, #4
 800770c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800770e:	4b1c      	ldr	r3, [pc, #112]	@ (8007780 <ESP_Upkeep+0x3dc>)
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007714:	4b09      	ldr	r3, [pc, #36]	@ (800773c <ESP_Upkeep+0x398>)
 8007716:	2203      	movs	r2, #3
 8007718:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800771a:	4b19      	ldr	r3, [pc, #100]	@ (8007780 <ESP_Upkeep+0x3dc>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	001a      	movs	r2, r3
 8007720:	4b13      	ldr	r3, [pc, #76]	@ (8007770 <ESP_Upkeep+0x3cc>)
 8007722:	5c9a      	ldrb	r2, [r3, r2]
 8007724:	4b04      	ldr	r3, [pc, #16]	@ (8007738 <ESP_Upkeep+0x394>)
 8007726:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007728:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <ESP_Upkeep+0x39c>)
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]
      }
    break;
 800772e:	e2e0      	b.n	8007cf2 <ESP_Upkeep+0x94e>
 8007730:	2000002c 	.word	0x2000002c
 8007734:	20000003 	.word	0x20000003
 8007738:	2000067a 	.word	0x2000067a
 800773c:	2000067b 	.word	0x2000067b
 8007740:	20000679 	.word	0x20000679
 8007744:	0802b284 	.word	0x0802b284
 8007748:	0802a230 	.word	0x0802a230
 800774c:	0802dfe4 	.word	0x0802dfe4
 8007750:	20000e38 	.word	0x20000e38
 8007754:	200005a4 	.word	0x200005a4
 8007758:	50000800 	.word	0x50000800
 800775c:	50001c00 	.word	0x50001c00
 8007760:	20000670 	.word	0x20000670
 8007764:	200004a4 	.word	0x200004a4
 8007768:	20000790 	.word	0x20000790
 800776c:	2000002f 	.word	0x2000002f
 8007770:	20000660 	.word	0x20000660
 8007774:	200005a5 	.word	0x200005a5
 8007778:	200005a6 	.word	0x200005a6
 800777c:	20000004 	.word	0x20000004
 8007780:	2000066a 	.word	0x2000066a
 8007784:	200005a8 	.word	0x200005a8
 8007788:	20000014 	.word	0x20000014
 800778c:	200005a9 	.word	0x200005a9
 8007790:	20000010 	.word	0x20000010
 8007794:	20000002 	.word	0x20000002
 8007798:	2000000c 	.word	0x2000000c
 800779c:	200005bc 	.word	0x200005bc
 80077a0:	20000024 	.word	0x20000024
 80077a4:	200005a7 	.word	0x200005a7
 80077a8:	2000001c 	.word	0x2000001c
 80077ac:	0802b2b0 	.word	0x0802b2b0
 80077b0:	2000020b 	.word	0x2000020b

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80077b4:	4bdd      	ldr	r3, [pc, #884]	@ (8007b2c <ESP_Upkeep+0x788>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	1dfc      	adds	r4, r7, #7
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7ff faf8 	bl	8006db0 <AT_Send>
 80077c0:	0003      	movs	r3, r0
 80077c2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80077c4:	1dfb      	adds	r3, r7, #7
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d100      	bne.n	80077ce <ESP_Upkeep+0x42a>
 80077cc:	e293      	b.n	8007cf6 <ESP_Upkeep+0x952>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80077ce:	4bd8      	ldr	r3, [pc, #864]	@ (8007b30 <ESP_Upkeep+0x78c>)
 80077d0:	2203      	movs	r2, #3
 80077d2:	701a      	strb	r2, [r3, #0]
        }
    break;
 80077d4:	e28f      	b.n	8007cf6 <ESP_Upkeep+0x952>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80077d6:	4bd7      	ldr	r3, [pc, #860]	@ (8007b34 <ESP_Upkeep+0x790>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <ESP_Upkeep+0x44a>
 80077de:	4bd6      	ldr	r3, [pc, #856]	@ (8007b38 <ESP_Upkeep+0x794>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d003      	beq.n	80077ee <ESP_Upkeep+0x44a>
        EspState = ESP_STATE_MODE_SELECT;
 80077e6:	4bd2      	ldr	r3, [pc, #840]	@ (8007b30 <ESP_Upkeep+0x78c>)
 80077e8:	220b      	movs	r2, #11
 80077ea:	701a      	strb	r2, [r3, #0]
        break;
 80077ec:	e28a      	b.n	8007d04 <ESP_Upkeep+0x960>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80077ee:	4bd3      	ldr	r3, [pc, #844]	@ (8007b3c <ESP_Upkeep+0x798>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	0018      	movs	r0, r3
 80077f4:	f00b fde6 	bl	80133c4 <TimestampIsReached>
 80077f8:	1e03      	subs	r3, r0, #0
 80077fa:	d100      	bne.n	80077fe <ESP_Upkeep+0x45a>
 80077fc:	e27d      	b.n	8007cfa <ESP_Upkeep+0x956>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80077fe:	4bd0      	ldr	r3, [pc, #832]	@ (8007b40 <ESP_Upkeep+0x79c>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	0018      	movs	r0, r3
 8007804:	f7ff f992 	bl	8006b2c <DMA_ProcessBuffer>
 8007808:	0003      	movs	r3, r0
 800780a:	001a      	movs	r2, r3
 800780c:	4bcd      	ldr	r3, [pc, #820]	@ (8007b44 <ESP_Upkeep+0x7a0>)
 800780e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007810:	4bcc      	ldr	r3, [pc, #816]	@ (8007b44 <ESP_Upkeep+0x7a0>)
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	4bca      	ldr	r3, [pc, #808]	@ (8007b40 <ESP_Upkeep+0x79c>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	1d7c      	adds	r4, r7, #5
 800781a:	0019      	movs	r1, r3
 800781c:	0010      	movs	r0, r2
 800781e:	f7ff fa85 	bl	8006d2c <ATCompare>
 8007822:	0003      	movs	r3, r0
 8007824:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007826:	4bc7      	ldr	r3, [pc, #796]	@ (8007b44 <ESP_Upkeep+0x7a0>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d138      	bne.n	80078a0 <ESP_Upkeep+0x4fc>
          if(ATCommand == AT_SENDDATA){
 800782e:	4bbf      	ldr	r3, [pc, #764]	@ (8007b2c <ESP_Upkeep+0x788>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b0f      	cmp	r3, #15
 8007834:	d108      	bne.n	8007848 <ESP_Upkeep+0x4a4>
            ATCommand = AT_HTTPCPOST;
 8007836:	4bbd      	ldr	r3, [pc, #756]	@ (8007b2c <ESP_Upkeep+0x788>)
 8007838:	220e      	movs	r2, #14
 800783a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800783c:	4bc0      	ldr	r3, [pc, #768]	@ (8007b40 <ESP_Upkeep+0x79c>)
 800783e:	2202      	movs	r2, #2
 8007840:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007842:	4bc1      	ldr	r3, [pc, #772]	@ (8007b48 <ESP_Upkeep+0x7a4>)
 8007844:	2201      	movs	r2, #1
 8007846:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007848:	4bb9      	ldr	r3, [pc, #740]	@ (8007b30 <ESP_Upkeep+0x78c>)
 800784a:	2204      	movs	r2, #4
 800784c:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800784e:	4bbf      	ldr	r3, [pc, #764]	@ (8007b4c <ESP_Upkeep+0x7a8>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	3301      	adds	r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	4bbd      	ldr	r3, [pc, #756]	@ (8007b4c <ESP_Upkeep+0x7a8>)
 8007858:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 800785a:	4bbc      	ldr	r3, [pc, #752]	@ (8007b4c <ESP_Upkeep+0x7a8>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d91e      	bls.n	80078a0 <ESP_Upkeep+0x4fc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007862:	f00c fb87 	bl	8013f74 <HAL_GetTick>
 8007866:	0003      	movs	r3, r0
 8007868:	4ab9      	ldr	r2, [pc, #740]	@ (8007b50 <ESP_Upkeep+0x7ac>)
 800786a:	189a      	adds	r2, r3, r2
 800786c:	4bb3      	ldr	r3, [pc, #716]	@ (8007b3c <ESP_Upkeep+0x798>)
 800786e:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007870:	4bb8      	ldr	r3, [pc, #736]	@ (8007b54 <ESP_Upkeep+0x7b0>)
 8007872:	2201      	movs	r2, #1
 8007874:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007876:	f7ff fa4b 	bl	8006d10 <clearDMABuffer>
            stop = HAL_GetTick();
 800787a:	f00c fb7b 	bl	8013f74 <HAL_GetTick>
 800787e:	0002      	movs	r2, r0
 8007880:	4bb5      	ldr	r3, [pc, #724]	@ (8007b58 <ESP_Upkeep+0x7b4>)
 8007882:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007884:	4bb4      	ldr	r3, [pc, #720]	@ (8007b58 <ESP_Upkeep+0x7b4>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	4bb4      	ldr	r3, [pc, #720]	@ (8007b5c <ESP_Upkeep+0x7b8>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	4ab4      	ldr	r2, [pc, #720]	@ (8007b60 <ESP_Upkeep+0x7bc>)
 8007890:	49b4      	ldr	r1, [pc, #720]	@ (8007b64 <ESP_Upkeep+0x7c0>)
 8007892:	2001      	movs	r0, #1
 8007894:	f00b fdec 	bl	8013470 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007898:	4ba5      	ldr	r3, [pc, #660]	@ (8007b30 <ESP_Upkeep+0x78c>)
 800789a:	220d      	movs	r2, #13
 800789c:	701a      	strb	r2, [r3, #0]
            break;
 800789e:	e231      	b.n	8007d04 <ESP_Upkeep+0x960>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80078a0:	4ba8      	ldr	r3, [pc, #672]	@ (8007b44 <ESP_Upkeep+0x7a0>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d106      	bne.n	80078b6 <ESP_Upkeep+0x512>
          ESPTimeStamp = HAL_GetTick() + 10;
 80078a8:	f00c fb64 	bl	8013f74 <HAL_GetTick>
 80078ac:	0003      	movs	r3, r0
 80078ae:	330a      	adds	r3, #10
 80078b0:	001a      	movs	r2, r3
 80078b2:	4ba2      	ldr	r3, [pc, #648]	@ (8007b3c <ESP_Upkeep+0x798>)
 80078b4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80078b6:	4ba3      	ldr	r3, [pc, #652]	@ (8007b44 <ESP_Upkeep+0x7a0>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b0a      	cmp	r3, #10
 80078bc:	d106      	bne.n	80078cc <ESP_Upkeep+0x528>
          ESPTimeStamp = HAL_GetTick() + 10;
 80078be:	f00c fb59 	bl	8013f74 <HAL_GetTick>
 80078c2:	0003      	movs	r3, r0
 80078c4:	330a      	adds	r3, #10
 80078c6:	001a      	movs	r2, r3
 80078c8:	4b9c      	ldr	r3, [pc, #624]	@ (8007b3c <ESP_Upkeep+0x798>)
 80078ca:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80078cc:	4b9d      	ldr	r3, [pc, #628]	@ (8007b44 <ESP_Upkeep+0x7a0>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b06      	cmp	r3, #6
 80078d2:	d14b      	bne.n	800796c <ESP_Upkeep+0x5c8>
          timeoutcntr++;
 80078d4:	4ba4      	ldr	r3, [pc, #656]	@ (8007b68 <ESP_Upkeep+0x7c4>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	4ba2      	ldr	r3, [pc, #648]	@ (8007b68 <ESP_Upkeep+0x7c4>)
 80078de:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80078e0:	4aa2      	ldr	r2, [pc, #648]	@ (8007b6c <ESP_Upkeep+0x7c8>)
 80078e2:	4ba0      	ldr	r3, [pc, #640]	@ (8007b64 <ESP_Upkeep+0x7c0>)
 80078e4:	0019      	movs	r1, r3
 80078e6:	2001      	movs	r0, #1
 80078e8:	f00b fdc2 	bl	8013470 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80078ec:	4b9e      	ldr	r3, [pc, #632]	@ (8007b68 <ESP_Upkeep+0x7c4>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d924      	bls.n	800793e <ESP_Upkeep+0x59a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80078f4:	f00c fb3e 	bl	8013f74 <HAL_GetTick>
 80078f8:	0003      	movs	r3, r0
 80078fa:	4a9d      	ldr	r2, [pc, #628]	@ (8007b70 <ESP_Upkeep+0x7cc>)
 80078fc:	189a      	adds	r2, r3, r2
 80078fe:	4b8f      	ldr	r3, [pc, #572]	@ (8007b3c <ESP_Upkeep+0x798>)
 8007900:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007902:	4b94      	ldr	r3, [pc, #592]	@ (8007b54 <ESP_Upkeep+0x7b0>)
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007908:	f7ff fa02 	bl	8006d10 <clearDMABuffer>
            stop = HAL_GetTick();
 800790c:	f00c fb32 	bl	8013f74 <HAL_GetTick>
 8007910:	0002      	movs	r2, r0
 8007912:	4b91      	ldr	r3, [pc, #580]	@ (8007b58 <ESP_Upkeep+0x7b4>)
 8007914:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007916:	4b90      	ldr	r3, [pc, #576]	@ (8007b58 <ESP_Upkeep+0x7b4>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b90      	ldr	r3, [pc, #576]	@ (8007b5c <ESP_Upkeep+0x7b8>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	4a94      	ldr	r2, [pc, #592]	@ (8007b74 <ESP_Upkeep+0x7d0>)
 8007922:	4990      	ldr	r1, [pc, #576]	@ (8007b64 <ESP_Upkeep+0x7c0>)
 8007924:	2001      	movs	r0, #1
 8007926:	f00b fda3 	bl	8013470 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800792a:	4b81      	ldr	r3, [pc, #516]	@ (8007b30 <ESP_Upkeep+0x78c>)
 800792c:	220d      	movs	r2, #13
 800792e:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007930:	4b7e      	ldr	r3, [pc, #504]	@ (8007b2c <ESP_Upkeep+0x788>)
 8007932:	2214      	movs	r2, #20
 8007934:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007936:	4b82      	ldr	r3, [pc, #520]	@ (8007b40 <ESP_Upkeep+0x79c>)
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
            break;
 800793c:	e1e2      	b.n	8007d04 <ESP_Upkeep+0x960>
          }
          if(ATCommand != AT_SENDDATA){
 800793e:	4b7b      	ldr	r3, [pc, #492]	@ (8007b2c <ESP_Upkeep+0x788>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b0f      	cmp	r3, #15
 8007944:	d003      	beq.n	800794e <ESP_Upkeep+0x5aa>
            EspState = ESP_STATE_SEND;
 8007946:	4b7a      	ldr	r3, [pc, #488]	@ (8007b30 <ESP_Upkeep+0x78c>)
 8007948:	2204      	movs	r2, #4
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	e00e      	b.n	800796c <ESP_Upkeep+0x5c8>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 800794e:	4b77      	ldr	r3, [pc, #476]	@ (8007b2c <ESP_Upkeep+0x788>)
 8007950:	220e      	movs	r2, #14
 8007952:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007954:	4b7c      	ldr	r3, [pc, #496]	@ (8007b48 <ESP_Upkeep+0x7a4>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	3b01      	subs	r3, #1
 800795a:	b2da      	uxtb	r2, r3
 800795c:	4b7a      	ldr	r3, [pc, #488]	@ (8007b48 <ESP_Upkeep+0x7a4>)
 800795e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007960:	4b77      	ldr	r3, [pc, #476]	@ (8007b40 <ESP_Upkeep+0x79c>)
 8007962:	2202      	movs	r2, #2
 8007964:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007966:	4b72      	ldr	r3, [pc, #456]	@ (8007b30 <ESP_Upkeep+0x78c>)
 8007968:	2204      	movs	r2, #4
 800796a:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800796c:	1d7b      	adds	r3, r7, #5
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d100      	bne.n	8007976 <ESP_Upkeep+0x5d2>
 8007974:	e1c1      	b.n	8007cfa <ESP_Upkeep+0x956>
          EspState = ESP_STATE_NEXT_AT;
 8007976:	4b6e      	ldr	r3, [pc, #440]	@ (8007b30 <ESP_Upkeep+0x78c>)
 8007978:	2205      	movs	r2, #5
 800797a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800797c:	e1bd      	b.n	8007cfa <ESP_Upkeep+0x956>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 800797e:	4b72      	ldr	r3, [pc, #456]	@ (8007b48 <ESP_Upkeep+0x7a4>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	4b70      	ldr	r3, [pc, #448]	@ (8007b48 <ESP_Upkeep+0x7a4>)
 8007988:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 800798a:	4b6f      	ldr	r3, [pc, #444]	@ (8007b48 <ESP_Upkeep+0x7a4>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	001a      	movs	r2, r3
 8007990:	4b79      	ldr	r3, [pc, #484]	@ (8007b78 <ESP_Upkeep+0x7d4>)
 8007992:	5c9a      	ldrb	r2, [r3, r2]
 8007994:	4b65      	ldr	r3, [pc, #404]	@ (8007b2c <ESP_Upkeep+0x788>)
 8007996:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007998:	4b64      	ldr	r3, [pc, #400]	@ (8007b2c <ESP_Upkeep+0x788>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b03      	cmp	r3, #3
 800799e:	d102      	bne.n	80079a6 <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80079a0:	4b67      	ldr	r3, [pc, #412]	@ (8007b40 <ESP_Upkeep+0x79c>)
 80079a2:	2201      	movs	r2, #1
 80079a4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80079a6:	4b61      	ldr	r3, [pc, #388]	@ (8007b2c <ESP_Upkeep+0x788>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b0e      	cmp	r3, #14
 80079ac:	d102      	bne.n	80079b4 <ESP_Upkeep+0x610>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80079ae:	4b64      	ldr	r3, [pc, #400]	@ (8007b40 <ESP_Upkeep+0x79c>)
 80079b0:	2202      	movs	r2, #2
 80079b2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80079b4:	4b5d      	ldr	r3, [pc, #372]	@ (8007b2c <ESP_Upkeep+0x788>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b0e      	cmp	r3, #14
 80079ba:	d006      	beq.n	80079ca <ESP_Upkeep+0x626>
 80079bc:	4b5b      	ldr	r3, [pc, #364]	@ (8007b2c <ESP_Upkeep+0x788>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d002      	beq.n	80079ca <ESP_Upkeep+0x626>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079c4:	4b5e      	ldr	r3, [pc, #376]	@ (8007b40 <ESP_Upkeep+0x79c>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80079ca:	4b58      	ldr	r3, [pc, #352]	@ (8007b2c <ESP_Upkeep+0x788>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b11      	cmp	r3, #17
 80079d0:	d102      	bne.n	80079d8 <ESP_Upkeep+0x634>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80079d2:	4b5b      	ldr	r3, [pc, #364]	@ (8007b40 <ESP_Upkeep+0x79c>)
 80079d4:	2205      	movs	r2, #5
 80079d6:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80079d8:	4b55      	ldr	r3, [pc, #340]	@ (8007b30 <ESP_Upkeep+0x78c>)
 80079da:	2204      	movs	r2, #4
 80079dc:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80079de:	4b53      	ldr	r3, [pc, #332]	@ (8007b2c <ESP_Upkeep+0x788>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b14      	cmp	r3, #20
 80079e4:	d000      	beq.n	80079e8 <ESP_Upkeep+0x644>
 80079e6:	e18a      	b.n	8007cfe <ESP_Upkeep+0x95a>
        if(Mode == AT_MODE_SEND){
 80079e8:	4b53      	ldr	r3, [pc, #332]	@ (8007b38 <ESP_Upkeep+0x794>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d124      	bne.n	8007a3a <ESP_Upkeep+0x696>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80079f0:	f00c fac0 	bl	8013f74 <HAL_GetTick>
 80079f4:	0003      	movs	r3, r0
 80079f6:	4a56      	ldr	r2, [pc, #344]	@ (8007b50 <ESP_Upkeep+0x7ac>)
 80079f8:	189a      	adds	r2, r3, r2
 80079fa:	4b50      	ldr	r3, [pc, #320]	@ (8007b3c <ESP_Upkeep+0x798>)
 80079fc:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 80079fe:	f7ff f987 	bl	8006d10 <clearDMABuffer>
          stop = HAL_GetTick();
 8007a02:	f00c fab7 	bl	8013f74 <HAL_GetTick>
 8007a06:	0002      	movs	r2, r0
 8007a08:	4b53      	ldr	r3, [pc, #332]	@ (8007b58 <ESP_Upkeep+0x7b4>)
 8007a0a:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007a0c:	4b52      	ldr	r3, [pc, #328]	@ (8007b58 <ESP_Upkeep+0x7b4>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	4b52      	ldr	r3, [pc, #328]	@ (8007b5c <ESP_Upkeep+0x7b8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	4a59      	ldr	r2, [pc, #356]	@ (8007b7c <ESP_Upkeep+0x7d8>)
 8007a18:	4959      	ldr	r1, [pc, #356]	@ (8007b80 <ESP_Upkeep+0x7dc>)
 8007a1a:	2002      	movs	r0, #2
 8007a1c:	f00b fd28 	bl	8013470 <CreateLine>
          ResetdBAmax();
 8007a20:	f005 fdd8 	bl	800d5d4 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007a24:	f7fd f9a4 	bl	8004d70 <resetMaxMeasurementValues>
          showTime();
 8007a28:	f001 fcb2 	bl	8009390 <showTime>
          ESPTransmitDone = true;
 8007a2c:	4b49      	ldr	r3, [pc, #292]	@ (8007b54 <ESP_Upkeep+0x7b0>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007a32:	4b3f      	ldr	r3, [pc, #252]	@ (8007b30 <ESP_Upkeep+0x78c>)
 8007a34:	220d      	movs	r2, #13
 8007a36:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007a38:	e161      	b.n	8007cfe <ESP_Upkeep+0x95a>
        else if (Mode == AT_MODE_GETTIME) {
 8007a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8007b38 <ESP_Upkeep+0x794>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b05      	cmp	r3, #5
 8007a40:	d13a      	bne.n	8007ab8 <ESP_Upkeep+0x714>
            setTime = false;
 8007a42:	4b50      	ldr	r3, [pc, #320]	@ (8007b84 <ESP_Upkeep+0x7e0>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007a48:	f001 fd28 	bl	800949c <calculateNextNTPTime>
 8007a4c:	0002      	movs	r2, r0
 8007a4e:	4b4e      	ldr	r3, [pc, #312]	@ (8007b88 <ESP_Upkeep+0x7e4>)
 8007a50:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007a52:	4b4d      	ldr	r3, [pc, #308]	@ (8007b88 <ESP_Upkeep+0x7e4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a4d      	ldr	r2, [pc, #308]	@ (8007b8c <ESP_Upkeep+0x7e8>)
 8007a58:	189a      	adds	r2, r3, r2
 8007a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b88 <ESP_Upkeep+0x7e4>)
 8007a5c:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8007b8c <ESP_Upkeep+0x7e8>)
 8007a60:	4a4b      	ldr	r2, [pc, #300]	@ (8007b90 <ESP_Upkeep+0x7ec>)
 8007a62:	4947      	ldr	r1, [pc, #284]	@ (8007b80 <ESP_Upkeep+0x7dc>)
 8007a64:	2002      	movs	r0, #2
 8007a66:	f00b fd03 	bl	8013470 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b94 <ESP_Upkeep+0x7f0>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	4b33      	ldr	r3, [pc, #204]	@ (8007b3c <ESP_Upkeep+0x798>)
 8007a70:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007a72:	f7ff f94d 	bl	8006d10 <clearDMABuffer>
            stop = HAL_GetTick();
 8007a76:	f00c fa7d 	bl	8013f74 <HAL_GetTick>
 8007a7a:	0002      	movs	r2, r0
 8007a7c:	4b36      	ldr	r3, [pc, #216]	@ (8007b58 <ESP_Upkeep+0x7b4>)
 8007a7e:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007a80:	4b35      	ldr	r3, [pc, #212]	@ (8007b58 <ESP_Upkeep+0x7b4>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	4b35      	ldr	r3, [pc, #212]	@ (8007b5c <ESP_Upkeep+0x7b8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	4a43      	ldr	r2, [pc, #268]	@ (8007b98 <ESP_Upkeep+0x7f4>)
 8007a8c:	493c      	ldr	r1, [pc, #240]	@ (8007b80 <ESP_Upkeep+0x7dc>)
 8007a8e:	2002      	movs	r0, #2
 8007a90:	f00b fcee 	bl	8013470 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007a94:	f00c fa6e 	bl	8013f74 <HAL_GetTick>
 8007a98:	0003      	movs	r3, r0
 8007a9a:	4a40      	ldr	r2, [pc, #256]	@ (8007b9c <ESP_Upkeep+0x7f8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d804      	bhi.n	8007aaa <ESP_Upkeep+0x706>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ba0 <ESP_Upkeep+0x7fc>)
 8007aa2:	4a40      	ldr	r2, [pc, #256]	@ (8007ba4 <ESP_Upkeep+0x800>)
 8007aa4:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007aa6:	f005 fcad 	bl	800d404 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007aaa:	4b21      	ldr	r3, [pc, #132]	@ (8007b30 <ESP_Upkeep+0x78c>)
 8007aac:	220d      	movs	r2, #13
 8007aae:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007ab0:	4b21      	ldr	r3, [pc, #132]	@ (8007b38 <ESP_Upkeep+0x794>)
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	701a      	strb	r2, [r3, #0]
    break;
 8007ab6:	e122      	b.n	8007cfe <ESP_Upkeep+0x95a>
          EspState = ESP_STATE_RESET;
 8007ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8007b30 <ESP_Upkeep+0x78c>)
 8007aba:	2209      	movs	r2, #9
 8007abc:	701a      	strb	r2, [r3, #0]
    break;
 8007abe:	e11e      	b.n	8007cfe <ESP_Upkeep+0x95a>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007ac0:	4b39      	ldr	r3, [pc, #228]	@ (8007ba8 <ESP_Upkeep+0x804>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007ac6:	4b39      	ldr	r3, [pc, #228]	@ (8007bac <ESP_Upkeep+0x808>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2101      	movs	r1, #1
 8007acc:	0018      	movs	r0, r3
 8007ace:	f00d fce2 	bl	8015496 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	f00c fa58 	bl	8013f88 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007ad8:	2380      	movs	r3, #128	@ 0x80
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	4834      	ldr	r0, [pc, #208]	@ (8007bb0 <ESP_Upkeep+0x80c>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	0019      	movs	r1, r3
 8007ae2:	f00d fcd8 	bl	8015496 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	f00c fa4e 	bl	8013f88 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007aec:	4b2f      	ldr	r3, [pc, #188]	@ (8007bac <ESP_Upkeep+0x808>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	2102      	movs	r1, #2
 8007af2:	0018      	movs	r0, r3
 8007af4:	f00d fccf 	bl	8015496 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007af8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b30 <ESP_Upkeep+0x78c>)
 8007afa:	2209      	movs	r2, #9
 8007afc:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007afe:	2001      	movs	r0, #1
 8007b00:	f00c fa42 	bl	8013f88 <HAL_Delay>
      ResetESPIndicator();
 8007b04:	f00a fb0a 	bl	801211c <ResetESPIndicator>
      if (Check_USB_PowerOn() || userToggle) {
 8007b08:	f001 fbb4 	bl	8009274 <Check_USB_PowerOn>
 8007b0c:	1e03      	subs	r3, r0, #0
 8007b0e:	d103      	bne.n	8007b18 <ESP_Upkeep+0x774>
 8007b10:	4b28      	ldr	r3, [pc, #160]	@ (8007bb4 <ESP_Upkeep+0x810>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <ESP_Upkeep+0x778>
        EnabledConnectedDevices();
 8007b18:	f005 fc74 	bl	800d404 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b4c <ESP_Upkeep+0x7a8>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007b22:	4b11      	ldr	r3, [pc, #68]	@ (8007b68 <ESP_Upkeep+0x7c4>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]
      break;
 8007b28:	e0ec      	b.n	8007d04 <ESP_Upkeep+0x960>
 8007b2a:	46c0      	nop			@ (mov r8, r8)
 8007b2c:	2000067a 	.word	0x2000067a
 8007b30:	2000002c 	.word	0x2000002c
 8007b34:	200005a7 	.word	0x200005a7
 8007b38:	2000067b 	.word	0x2000067b
 8007b3c:	20000670 	.word	0x20000670
 8007b40:	20000679 	.word	0x20000679
 8007b44:	2000002f 	.word	0x2000002f
 8007b48:	2000066a 	.word	0x2000066a
 8007b4c:	2000066b 	.word	0x2000066b
 8007b50:	0003a980 	.word	0x0003a980
 8007b54:	200005ac 	.word	0x200005ac
 8007b58:	200005c0 	.word	0x200005c0
 8007b5c:	200005bc 	.word	0x200005bc
 8007b60:	0802b2e0 	.word	0x0802b2e0
 8007b64:	0802a254 	.word	0x0802a254
 8007b68:	2000066c 	.word	0x2000066c
 8007b6c:	0802b314 	.word	0x0802b314
 8007b70:	0000c350 	.word	0x0000c350
 8007b74:	0802b350 	.word	0x0802b350
 8007b78:	20000660 	.word	0x20000660
 8007b7c:	0802b380 	.word	0x0802b380
 8007b80:	0802b398 	.word	0x0802b398
 8007b84:	20000002 	.word	0x20000002
 8007b88:	20000674 	.word	0x20000674
 8007b8c:	00012686 	.word	0x00012686
 8007b90:	0802b39c 	.word	0x0802b39c
 8007b94:	20000028 	.word	0x20000028
 8007b98:	0802b3e0 	.word	0x0802b3e0
 8007b9c:	000061a7 	.word	0x000061a7
 8007ba0:	20000e38 	.word	0x20000e38
 8007ba4:	000061a8 	.word	0x000061a8
 8007ba8:	200005a4 	.word	0x200005a4
 8007bac:	50001c00 	.word	0x50001c00
 8007bb0:	50000800 	.word	0x50000800
 8007bb4:	20001e72 	.word	0x20001e72

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007bb8:	4b55      	ldr	r3, [pc, #340]	@ (8007d10 <ESP_Upkeep+0x96c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f00b fc01 	bl	80133c4 <TimestampIsReached>
 8007bc2:	1e03      	subs	r3, r0, #0
 8007bc4:	d103      	bne.n	8007bce <ESP_Upkeep+0x82a>
 8007bc6:	4b53      	ldr	r3, [pc, #332]	@ (8007d14 <ESP_Upkeep+0x970>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d043      	beq.n	8007c56 <ESP_Upkeep+0x8b2>
        ESPTransmitDone = false;
 8007bce:	4b52      	ldr	r3, [pc, #328]	@ (8007d18 <ESP_Upkeep+0x974>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007bd4:	4b51      	ldr	r3, [pc, #324]	@ (8007d1c <ESP_Upkeep+0x978>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <ESP_Upkeep+0x844>
          InitIsDone = true;
 8007bdc:	4b50      	ldr	r3, [pc, #320]	@ (8007d20 <ESP_Upkeep+0x97c>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007be2:	4b50      	ldr	r3, [pc, #320]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007be4:	220b      	movs	r2, #11
 8007be6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007be8:	4b4c      	ldr	r3, [pc, #304]	@ (8007d1c <ESP_Upkeep+0x978>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d108      	bne.n	8007c02 <ESP_Upkeep+0x85e>
          ConnectionMade = true;
 8007bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8007d28 <ESP_Upkeep+0x984>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8007bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8007d2c <ESP_Upkeep+0x988>)
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007bfc:	4b49      	ldr	r3, [pc, #292]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007bfe:	220b      	movs	r2, #11
 8007c00:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8007c02:	4b46      	ldr	r3, [pc, #280]	@ (8007d1c <ESP_Upkeep+0x978>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d102      	bne.n	8007c10 <ESP_Upkeep+0x86c>
          EspState = ESP_STATE_INIT;
 8007c0a:	4b46      	ldr	r3, [pc, #280]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8007c10:	4b42      	ldr	r3, [pc, #264]	@ (8007d1c <ESP_Upkeep+0x978>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d108      	bne.n	8007c2a <ESP_Upkeep+0x886>
          EspState = ESP_STATE_CONFIG;
 8007c18:	4b42      	ldr	r3, [pc, #264]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007c1a:	220e      	movs	r2, #14
 8007c1c:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8007c1e:	4a44      	ldr	r2, [pc, #272]	@ (8007d30 <ESP_Upkeep+0x98c>)
 8007c20:	4b44      	ldr	r3, [pc, #272]	@ (8007d34 <ESP_Upkeep+0x990>)
 8007c22:	0019      	movs	r1, r3
 8007c24:	2002      	movs	r0, #2
 8007c26:	f00b fc23 	bl	8013470 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8007c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8007d1c <ESP_Upkeep+0x978>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d105      	bne.n	8007c3e <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_MODE_SELECT;
 8007c32:	4b3c      	ldr	r3, [pc, #240]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007c34:	220b      	movs	r2, #11
 8007c36:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8007c38:	4b3f      	ldr	r3, [pc, #252]	@ (8007d38 <ESP_Upkeep+0x994>)
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c3e:	4b35      	ldr	r3, [pc, #212]	@ (8007d14 <ESP_Upkeep+0x970>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d020      	beq.n	8007c88 <ESP_Upkeep+0x8e4>
 8007c46:	4b35      	ldr	r3, [pc, #212]	@ (8007d1c <ESP_Upkeep+0x978>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d01c      	beq.n	8007c88 <ESP_Upkeep+0x8e4>
          EspState = ESP_STATE_INIT;
 8007c4e:	4b35      	ldr	r3, [pc, #212]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007c50:	2202      	movs	r2, #2
 8007c52:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c54:	e018      	b.n	8007c88 <ESP_Upkeep+0x8e4>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8007c56:	f001 fc21 	bl	800949c <calculateNextNTPTime>
 8007c5a:	0002      	movs	r2, r0
 8007c5c:	4b37      	ldr	r3, [pc, #220]	@ (8007d3c <ESP_Upkeep+0x998>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d94e      	bls.n	8007d02 <ESP_Upkeep+0x95e>
        if(Mode == AT_MODE_SEND ) {
 8007c64:	4b2d      	ldr	r3, [pc, #180]	@ (8007d1c <ESP_Upkeep+0x978>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d14a      	bne.n	8007d02 <ESP_Upkeep+0x95e>
           Mode = AT_MODE_GETTIME;
 8007c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d1c <ESP_Upkeep+0x978>)
 8007c6e:	2205      	movs	r2, #5
 8007c70:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8007c72:	4b2c      	ldr	r3, [pc, #176]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007c74:	2202      	movs	r2, #2
 8007c76:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8007c78:	4b25      	ldr	r3, [pc, #148]	@ (8007d10 <ESP_Upkeep+0x96c>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	4b30      	ldr	r3, [pc, #192]	@ (8007d40 <ESP_Upkeep+0x99c>)
 8007c7e:	601a      	str	r2, [r3, #0]
           setTime = true;
 8007c80:	4b30      	ldr	r3, [pc, #192]	@ (8007d44 <ESP_Upkeep+0x9a0>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007c86:	e03c      	b.n	8007d02 <ESP_Upkeep+0x95e>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007c88:	46c0      	nop			@ (mov r8, r8)
      break;
 8007c8a:	e03a      	b.n	8007d02 <ESP_Upkeep+0x95e>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8007c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8007d48 <ESP_Upkeep+0x9a4>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2201      	movs	r2, #1
 8007c92:	4053      	eors	r3, r2
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d008      	beq.n	8007cac <ESP_Upkeep+0x908>
        Info("Do nothing until reset");
 8007c9a:	4a25      	ldr	r2, [pc, #148]	@ (8007d30 <ESP_Upkeep+0x98c>)
 8007c9c:	4b25      	ldr	r3, [pc, #148]	@ (8007d34 <ESP_Upkeep+0x990>)
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	2002      	movs	r0, #2
 8007ca2:	f00b fbe5 	bl	8013470 <CreateLine>
        msgdone = true;
 8007ca6:	4b28      	ldr	r3, [pc, #160]	@ (8007d48 <ESP_Upkeep+0x9a4>)
 8007ca8:	2201      	movs	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8007cac:	f01a fd18 	bl	80226e0 <GetUsbRxPointer>
 8007cb0:	0003      	movs	r3, r0
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f000 f980 	bl	8007fb8 <Process_PC_Config>
      break;
 8007cb8:	e024      	b.n	8007d04 <ESP_Upkeep+0x960>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8007cba:	4a24      	ldr	r2, [pc, #144]	@ (8007d4c <ESP_Upkeep+0x9a8>)
 8007cbc:	4b24      	ldr	r3, [pc, #144]	@ (8007d50 <ESP_Upkeep+0x9ac>)
 8007cbe:	0019      	movs	r1, r3
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	f00b fbd5 	bl	8013470 <CreateLine>
      EspState = ESP_STATE_INIT;
 8007cc6:	4b17      	ldr	r3, [pc, #92]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007cc8:	2202      	movs	r2, #2
 8007cca:	701a      	strb	r2, [r3, #0]
      break;
 8007ccc:	e01a      	b.n	8007d04 <ESP_Upkeep+0x960>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8007cce:	4a21      	ldr	r2, [pc, #132]	@ (8007d54 <ESP_Upkeep+0x9b0>)
 8007cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8007d50 <ESP_Upkeep+0x9ac>)
 8007cd2:	0019      	movs	r1, r3
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f00b fbcb 	bl	8013470 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8007cda:	4b12      	ldr	r3, [pc, #72]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007cdc:	2207      	movs	r2, #7
 8007cde:	701a      	strb	r2, [r3, #0]
      break;
 8007ce0:	e010      	b.n	8007d04 <ESP_Upkeep+0x960>
      break;
 8007ce2:	46c0      	nop			@ (mov r8, r8)
 8007ce4:	e00e      	b.n	8007d04 <ESP_Upkeep+0x960>
        break;
 8007ce6:	46c0      	nop			@ (mov r8, r8)
 8007ce8:	e00c      	b.n	8007d04 <ESP_Upkeep+0x960>
      break;
 8007cea:	46c0      	nop			@ (mov r8, r8)
 8007cec:	e00a      	b.n	8007d04 <ESP_Upkeep+0x960>
        break;
 8007cee:	46c0      	nop			@ (mov r8, r8)
 8007cf0:	e008      	b.n	8007d04 <ESP_Upkeep+0x960>
    break;
 8007cf2:	46c0      	nop			@ (mov r8, r8)
 8007cf4:	e006      	b.n	8007d04 <ESP_Upkeep+0x960>
    break;
 8007cf6:	46c0      	nop			@ (mov r8, r8)
 8007cf8:	e004      	b.n	8007d04 <ESP_Upkeep+0x960>
      break;
 8007cfa:	46c0      	nop			@ (mov r8, r8)
 8007cfc:	e002      	b.n	8007d04 <ESP_Upkeep+0x960>
    break;
 8007cfe:	46c0      	nop			@ (mov r8, r8)
 8007d00:	e000      	b.n	8007d04 <ESP_Upkeep+0x960>
      break;
 8007d02:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8007d04:	4b07      	ldr	r3, [pc, #28]	@ (8007d24 <ESP_Upkeep+0x980>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
}
 8007d08:	0018      	movs	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	b002      	add	sp, #8
 8007d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d10:	20000670 	.word	0x20000670
 8007d14:	200005a7 	.word	0x200005a7
 8007d18:	200005ac 	.word	0x200005ac
 8007d1c:	2000067b 	.word	0x2000067b
 8007d20:	200005a5 	.word	0x200005a5
 8007d24:	2000002c 	.word	0x2000002c
 8007d28:	200005a8 	.word	0x200005a8
 8007d2c:	200005aa 	.word	0x200005aa
 8007d30:	0802b400 	.word	0x0802b400
 8007d34:	0802b398 	.word	0x0802b398
 8007d38:	200005a9 	.word	0x200005a9
 8007d3c:	20000674 	.word	0x20000674
 8007d40:	20000028 	.word	0x20000028
 8007d44:	20000002 	.word	0x20000002
 8007d48:	200005ab 	.word	0x200005ab
 8007d4c:	0802b418 	.word	0x0802b418
 8007d50:	0802a254 	.word	0x0802a254
 8007d54:	0802b42c 	.word	0x0802b42c

08007d58 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8007d60:	4b12      	ldr	r3, [pc, #72]	@ (8007dac <I2CSensors_Init+0x54>)
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8007d66:	4a12      	ldr	r2, [pc, #72]	@ (8007db0 <I2CSensors_Init+0x58>)
 8007d68:	4b12      	ldr	r3, [pc, #72]	@ (8007db4 <I2CSensors_Init+0x5c>)
 8007d6a:	0011      	movs	r1, r2
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f00b fdbf 	bl	80138f0 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8007d72:	4a0f      	ldr	r2, [pc, #60]	@ (8007db0 <I2CSensors_Init+0x58>)
 8007d74:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <I2CSensors_Init+0x5c>)
 8007d76:	0011      	movs	r1, r2
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f008 fb91 	bl	80104a0 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8007d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8007db8 <I2CSensors_Init+0x60>)
 8007d80:	490b      	ldr	r1, [pc, #44]	@ (8007db0 <I2CSensors_Init+0x58>)
 8007d82:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <I2CSensors_Init+0x5c>)
 8007d84:	0018      	movs	r0, r3
 8007d86:	f002 fb37 	bl	800a3f8 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8007d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dbc <I2CSensors_Init+0x64>)
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc0 <I2CSensors_Init+0x68>)
 8007d8e:	0011      	movs	r1, r2
 8007d90:	0018      	movs	r0, r3
 8007d92:	f003 f93f 	bl	800b014 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8007d96:	4a09      	ldr	r2, [pc, #36]	@ (8007dbc <I2CSensors_Init+0x64>)
 8007d98:	4b09      	ldr	r3, [pc, #36]	@ (8007dc0 <I2CSensors_Init+0x68>)
 8007d9a:	0011      	movs	r1, r2
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	f7fb fee9 	bl	8003b74 <ENS_Init>
}
 8007da2:	46c0      	nop			@ (mov r8, r8)
 8007da4:	46bd      	mov	sp, r7
 8007da6:	b002      	add	sp, #8
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	46c0      	nop			@ (mov r8, r8)
 8007dac:	20000794 	.word	0x20000794
 8007db0:	08007e71 	.word	0x08007e71
 8007db4:	08007e1d 	.word	0x08007e1d
 8007db8:	08007dc5 	.word	0x08007dc5
 8007dbc:	08007f41 	.word	0x08007f41
 8007dc0:	08007ec5 	.word	0x08007ec5

08007dc4 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	6039      	str	r1, [r7, #0]
 8007dcc:	0011      	movs	r1, r2
 8007dce:	1dfb      	adds	r3, r7, #7
 8007dd0:	1c02      	adds	r2, r0, #0
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	1dbb      	adds	r3, r7, #6
 8007dd6:	1c0a      	adds	r2, r1, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8007dda:	4b0f      	ldr	r3, [pc, #60]	@ (8007e18 <ReadI2CDirect+0x54>)
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	1dfb      	adds	r3, r7, #7
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	18db      	adds	r3, r3, r3
 8007de6:	b299      	uxth	r1, r3
 8007de8:	1dbb      	adds	r3, r7, #6
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	260f      	movs	r6, #15
 8007df0:	19bc      	adds	r4, r7, r6
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	25fa      	movs	r5, #250	@ 0xfa
 8007df6:	9500      	str	r5, [sp, #0]
 8007df8:	f00d fd24 	bl	8015844 <HAL_I2C_Master_Receive>
 8007dfc:	0003      	movs	r3, r0
 8007dfe:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007e00:	19bb      	adds	r3, r7, r6
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <ReadI2CDirect+0x48>
        return false;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e000      	b.n	8007e0e <ReadI2CDirect+0x4a>
    }
    return true;
 8007e0c:	2301      	movs	r3, #1
}
 8007e0e:	0018      	movs	r0, r3
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b005      	add	sp, #20
 8007e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e16:	46c0      	nop			@ (mov r8, r8)
 8007e18:	20000794 	.word	0x20000794

08007e1c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007e1c:	b5b0      	push	{r4, r5, r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6039      	str	r1, [r7, #0]
 8007e24:	0011      	movs	r1, r2
 8007e26:	1dfb      	adds	r3, r7, #7
 8007e28:	1c02      	adds	r2, r0, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	1dbb      	adds	r3, r7, #6
 8007e2e:	1c0a      	adds	r2, r1, #0
 8007e30:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007e32:	4b0e      	ldr	r3, [pc, #56]	@ (8007e6c <ReadI2C+0x50>)
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	1dfb      	adds	r3, r7, #7
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	18db      	adds	r3, r3, r3
 8007e3e:	b299      	uxth	r1, r3
 8007e40:	1dbb      	adds	r3, r7, #6
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	250f      	movs	r5, #15
 8007e48:	197c      	adds	r4, r7, r5
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	f00d ff08 	bl	8015c60 <HAL_I2C_Master_Receive_DMA>
 8007e50:	0003      	movs	r3, r0
 8007e52:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007e54:	197b      	adds	r3, r7, r5
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <ReadI2C+0x44>
        return false;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e000      	b.n	8007e62 <ReadI2C+0x46>
    }
    return true;
 8007e60:	2301      	movs	r3, #1
}
 8007e62:	0018      	movs	r0, r3
 8007e64:	46bd      	mov	sp, r7
 8007e66:	b004      	add	sp, #16
 8007e68:	bdb0      	pop	{r4, r5, r7, pc}
 8007e6a:	46c0      	nop			@ (mov r8, r8)
 8007e6c:	20000794 	.word	0x20000794

08007e70 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007e70:	b5b0      	push	{r4, r5, r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6039      	str	r1, [r7, #0]
 8007e78:	0011      	movs	r1, r2
 8007e7a:	1dfb      	adds	r3, r7, #7
 8007e7c:	1c02      	adds	r2, r0, #0
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	1dbb      	adds	r3, r7, #6
 8007e82:	1c0a      	adds	r2, r1, #0
 8007e84:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007e86:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec0 <WriteI2C+0x50>)
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	1dfb      	adds	r3, r7, #7
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	18db      	adds	r3, r3, r3
 8007e92:	b299      	uxth	r1, r3
 8007e94:	1dbb      	adds	r3, r7, #6
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	250f      	movs	r5, #15
 8007e9c:	197c      	adds	r4, r7, r5
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	f00d fdd8 	bl	8015a54 <HAL_I2C_Master_Transmit_DMA>
 8007ea4:	0003      	movs	r3, r0
 8007ea6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007ea8:	197b      	adds	r3, r7, r5
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <WriteI2C+0x44>
        return false;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e000      	b.n	8007eb6 <WriteI2C+0x46>
    }
    return true;
 8007eb4:	2301      	movs	r3, #1
}
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b004      	add	sp, #16
 8007ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8007ebe:	46c0      	nop			@ (mov r8, r8)
 8007ec0:	20000794 	.word	0x20000794

08007ec4 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec6:	b08b      	sub	sp, #44	@ 0x2c
 8007ec8:	af04      	add	r7, sp, #16
 8007eca:	0004      	movs	r4, r0
 8007ecc:	0008      	movs	r0, r1
 8007ece:	0011      	movs	r1, r2
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	250f      	movs	r5, #15
 8007ed4:	197b      	adds	r3, r7, r5
 8007ed6:	1c22      	adds	r2, r4, #0
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	260c      	movs	r6, #12
 8007edc:	19bb      	adds	r3, r7, r6
 8007ede:	1c02      	adds	r2, r0, #0
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	230a      	movs	r3, #10
 8007ee4:	18fb      	adds	r3, r7, r3
 8007ee6:	1c0a      	adds	r2, r1, #0
 8007ee8:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007eea:	4b14      	ldr	r3, [pc, #80]	@ (8007f3c <ReadI2CMem+0x78>)
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	197b      	adds	r3, r7, r5
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	18db      	adds	r3, r3, r3
 8007ef6:	b299      	uxth	r1, r3
 8007ef8:	2217      	movs	r2, #23
 8007efa:	18bc      	adds	r4, r7, r2
 8007efc:	230a      	movs	r3, #10
 8007efe:	18fb      	adds	r3, r7, r3
 8007f00:	881d      	ldrh	r5, [r3, #0]
 8007f02:	19bb      	adds	r3, r7, r6
 8007f04:	881a      	ldrh	r2, [r3, #0]
 8007f06:	2364      	movs	r3, #100	@ 0x64
 8007f08:	9302      	str	r3, [sp, #8]
 8007f0a:	2328      	movs	r3, #40	@ 0x28
 8007f0c:	2608      	movs	r6, #8
 8007f0e:	199b      	adds	r3, r3, r6
 8007f10:	19db      	adds	r3, r3, r7
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	002b      	movs	r3, r5
 8007f1c:	f00d ffa6 	bl	8015e6c <HAL_I2C_Mem_Read>
 8007f20:	0003      	movs	r3, r0
 8007f22:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007f24:	2217      	movs	r2, #23
 8007f26:	18bb      	adds	r3, r7, r2
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <ReadI2CMem+0x6e>
     return false;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e000      	b.n	8007f34 <ReadI2CMem+0x70>
   }
   return true;
 8007f32:	2301      	movs	r3, #1
}
 8007f34:	0018      	movs	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b007      	add	sp, #28
 8007f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f3c:	20000794 	.word	0x20000794

08007f40 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f42:	b089      	sub	sp, #36	@ 0x24
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	0004      	movs	r4, r0
 8007f48:	0008      	movs	r0, r1
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	607b      	str	r3, [r7, #4]
 8007f4e:	250f      	movs	r5, #15
 8007f50:	197b      	adds	r3, r7, r5
 8007f52:	1c22      	adds	r2, r4, #0
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	260c      	movs	r6, #12
 8007f58:	19bb      	adds	r3, r7, r6
 8007f5a:	1c02      	adds	r2, r0, #0
 8007f5c:	801a      	strh	r2, [r3, #0]
 8007f5e:	230a      	movs	r3, #10
 8007f60:	18fb      	adds	r3, r7, r3
 8007f62:	1c0a      	adds	r2, r1, #0
 8007f64:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8007f66:	4b13      	ldr	r3, [pc, #76]	@ (8007fb4 <WriteI2CMem+0x74>)
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	197b      	adds	r3, r7, r5
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	18db      	adds	r3, r3, r3
 8007f72:	b299      	uxth	r1, r3
 8007f74:	2217      	movs	r2, #23
 8007f76:	18bc      	adds	r4, r7, r2
 8007f78:	230a      	movs	r3, #10
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	881d      	ldrh	r5, [r3, #0]
 8007f7e:	19bb      	adds	r3, r7, r6
 8007f80:	881a      	ldrh	r2, [r3, #0]
 8007f82:	2328      	movs	r3, #40	@ 0x28
 8007f84:	2608      	movs	r6, #8
 8007f86:	199b      	adds	r3, r3, r6
 8007f88:	19db      	adds	r3, r3, r7
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	002b      	movs	r3, r5
 8007f94:	f00e f89e 	bl	80160d4 <HAL_I2C_Mem_Write_DMA>
 8007f98:	0003      	movs	r3, r0
 8007f9a:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007f9c:	2217      	movs	r2, #23
 8007f9e:	18bb      	adds	r3, r7, r2
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <WriteI2CMem+0x6a>
     return false;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e000      	b.n	8007fac <WriteI2CMem+0x6c>
   }
   return true;
 8007faa:	2301      	movs	r3, #1
}
 8007fac:	0018      	movs	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b007      	add	sp, #28
 8007fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fb4:	20000794 	.word	0x20000794

08007fb8 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8007fb8:	b590      	push	{r4, r7, lr}
 8007fba:	b0c3      	sub	sp, #268	@ 0x10c
 8007fbc:	af3e      	add	r7, sp, #248	@ 0xf8
 8007fbe:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8007fc0:	f01a fbae 	bl	8022720 <GetUsbRxDataSize>
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d972      	bls.n	80080b4 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2123      	movs	r1, #35	@ 0x23
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	f01d fef2 	bl	8025dbc <strchr>
 8007fd8:	0003      	movs	r3, r0
 8007fda:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d066      	beq.n	80080b0 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	785a      	ldrb	r2, [r3, #1]
 8007fe6:	4b35      	ldr	r3, [pc, #212]	@ (80080bc <Process_PC_Config+0x104>)
 8007fe8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	789a      	ldrb	r2, [r3, #2]
 8007fee:	4b33      	ldr	r3, [pc, #204]	@ (80080bc <Process_PC_Config+0x104>)
 8007ff0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8007ff2:	4b32      	ldr	r3, [pc, #200]	@ (80080bc <Process_PC_Config+0x104>)
 8007ff4:	785b      	ldrb	r3, [r3, #1]
 8007ff6:	3305      	adds	r3, #5
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d352      	bcc.n	80080a6 <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	1cd9      	adds	r1, r3, #3
 8008004:	4b2d      	ldr	r3, [pc, #180]	@ (80080bc <Process_PC_Config+0x104>)
 8008006:	785b      	ldrb	r3, [r3, #1]
 8008008:	001a      	movs	r2, r3
 800800a:	4b2d      	ldr	r3, [pc, #180]	@ (80080c0 <Process_PC_Config+0x108>)
 800800c:	0018      	movs	r0, r3
 800800e:	f01d ffa9 	bl	8025f64 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8008012:	4b2a      	ldr	r3, [pc, #168]	@ (80080bc <Process_PC_Config+0x104>)
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	3303      	adds	r3, #3
 8008018:	001a      	movs	r2, r3
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	189b      	adds	r3, r3, r2
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b21b      	sxth	r3, r3
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	b21a      	sxth	r2, r3
 8008026:	4b25      	ldr	r3, [pc, #148]	@ (80080bc <Process_PC_Config+0x104>)
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	3304      	adds	r3, #4
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	18cb      	adds	r3, r1, r3
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b21b      	sxth	r3, r3
 8008034:	4313      	orrs	r3, r2
 8008036:	b21b      	sxth	r3, r3
 8008038:	b299      	uxth	r1, r3
 800803a:	4a20      	ldr	r2, [pc, #128]	@ (80080bc <Process_PC_Config+0x104>)
 800803c:	2381      	movs	r3, #129	@ 0x81
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8008042:	4a1e      	ldr	r2, [pc, #120]	@ (80080bc <Process_PC_Config+0x104>)
 8008044:	2381      	movs	r3, #129	@ 0x81
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	5ad4      	ldrh	r4, [r2, r3]
 800804a:	4b1c      	ldr	r3, [pc, #112]	@ (80080bc <Process_PC_Config+0x104>)
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	3303      	adds	r3, #3
 8008050:	b29a      	uxth	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	0011      	movs	r1, r2
 8008056:	0018      	movs	r0, r3
 8008058:	f000 fa14 	bl	8008484 <CRC16_ARC>
 800805c:	0003      	movs	r3, r0
 800805e:	429c      	cmp	r4, r3
 8008060:	d007      	beq.n	8008072 <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8008062:	4b16      	ldr	r3, [pc, #88]	@ (80080bc <Process_PC_Config+0x104>)
 8008064:	785a      	ldrb	r2, [r3, #1]
 8008066:	4b16      	ldr	r3, [pc, #88]	@ (80080c0 <Process_PC_Config+0x108>)
 8008068:	0019      	movs	r1, r3
 800806a:	2001      	movs	r0, #1
 800806c:	f000 f9b8 	bl	80083e0 <Create_Message>
 8008070:	e016      	b.n	80080a0 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8008072:	4c12      	ldr	r4, [pc, #72]	@ (80080bc <Process_PC_Config+0x104>)
 8008074:	466b      	mov	r3, sp
 8008076:	0018      	movs	r0, r3
 8008078:	0023      	movs	r3, r4
 800807a:	3310      	adds	r3, #16
 800807c:	22f4      	movs	r2, #244	@ 0xf4
 800807e:	0019      	movs	r1, r3
 8008080:	f01d ff70 	bl	8025f64 <memcpy>
 8008084:	6820      	ldr	r0, [r4, #0]
 8008086:	6861      	ldr	r1, [r4, #4]
 8008088:	68a2      	ldr	r2, [r4, #8]
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	f000 f81a 	bl	80080c4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8008090:	4b0a      	ldr	r3, [pc, #40]	@ (80080bc <Process_PC_Config+0x104>)
 8008092:	7818      	ldrb	r0, [r3, #0]
 8008094:	4b09      	ldr	r3, [pc, #36]	@ (80080bc <Process_PC_Config+0x104>)
 8008096:	785a      	ldrb	r2, [r3, #1]
 8008098:	4b09      	ldr	r3, [pc, #36]	@ (80080c0 <Process_PC_Config+0x108>)
 800809a:	0019      	movs	r1, r3
 800809c:	f000 f9a0 	bl	80083e0 <Create_Message>
                }
                ResetUsbRxDataSize();
 80080a0:	f01a fb26 	bl	80226f0 <ResetUsbRxDataSize>
                return;
 80080a4:	e006      	b.n	80080b4 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	0018      	movs	r0, r3
 80080aa:	f01a fb43 	bl	8022734 <GetUsbRxNextChunk>
 80080ae:	e001      	b.n	80080b4 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 80080b0:	f01a fb1e 	bl	80226f0 <ResetUsbRxDataSize>
        }
    }
}
 80080b4:	46bd      	mov	sp, r7
 80080b6:	b005      	add	sp, #20
 80080b8:	bd90      	pop	{r4, r7, pc}
 80080ba:	46c0      	nop			@ (mov r8, r8)
 80080bc:	20000798 	.word	0x20000798
 80080c0:	2000079a 	.word	0x2000079a

080080c4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80080c4:	b084      	sub	sp, #16
 80080c6:	b5b0      	push	{r4, r5, r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	2518      	movs	r5, #24
 80080ce:	197c      	adds	r4, r7, r5
 80080d0:	6020      	str	r0, [r4, #0]
 80080d2:	6061      	str	r1, [r4, #4]
 80080d4:	60a2      	str	r2, [r4, #8]
 80080d6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80080d8:	197b      	adds	r3, r7, r5
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80080de:	d100      	bne.n	80080e2 <ProcessCmd+0x1e>
 80080e0:	e122      	b.n	8008328 <ProcessCmd+0x264>
 80080e2:	dd00      	ble.n	80080e6 <ProcessCmd+0x22>
 80080e4:	e143      	b.n	800836e <ProcessCmd+0x2aa>
 80080e6:	2b18      	cmp	r3, #24
 80080e8:	dc0a      	bgt.n	8008100 <ProcessCmd+0x3c>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	da00      	bge.n	80080f0 <ProcessCmd+0x2c>
 80080ee:	e13e      	b.n	800836e <ProcessCmd+0x2aa>
 80080f0:	2b18      	cmp	r3, #24
 80080f2:	d900      	bls.n	80080f6 <ProcessCmd+0x32>
 80080f4:	e13b      	b.n	800836e <ProcessCmd+0x2aa>
 80080f6:	009a      	lsls	r2, r3, #2
 80080f8:	4ba0      	ldr	r3, [pc, #640]	@ (800837c <ProcessCmd+0x2b8>)
 80080fa:	18d3      	adds	r3, r2, r3
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	469f      	mov	pc, r3
 8008100:	2bfd      	cmp	r3, #253	@ 0xfd
 8008102:	d100      	bne.n	8008106 <ProcessCmd+0x42>
 8008104:	e108      	b.n	8008318 <ProcessCmd+0x254>
            }
            break;
        }
    }

}
 8008106:	e132      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008108:	2118      	movs	r1, #24
 800810a:	187b      	adds	r3, r7, r1
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	001a      	movs	r2, r3
 8008110:	187b      	adds	r3, r7, r1
 8008112:	1c99      	adds	r1, r3, #2
 8008114:	489a      	ldr	r0, [pc, #616]	@ (8008380 <ProcessCmd+0x2bc>)
 8008116:	230c      	movs	r3, #12
 8008118:	f003 fbee 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 800811c:	e127      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800811e:	2118      	movs	r1, #24
 8008120:	187b      	adds	r3, r7, r1
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	001a      	movs	r2, r3
 8008126:	187b      	adds	r3, r7, r1
 8008128:	1c99      	adds	r1, r3, #2
 800812a:	4896      	ldr	r0, [pc, #600]	@ (8008384 <ProcessCmd+0x2c0>)
 800812c:	230c      	movs	r3, #12
 800812e:	f003 fbe3 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008132:	e11c      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008134:	2118      	movs	r1, #24
 8008136:	187b      	adds	r3, r7, r1
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	001a      	movs	r2, r3
 800813c:	187b      	adds	r3, r7, r1
 800813e:	1c99      	adds	r1, r3, #2
 8008140:	4891      	ldr	r0, [pc, #580]	@ (8008388 <ProcessCmd+0x2c4>)
 8008142:	230c      	movs	r3, #12
 8008144:	f003 fbd8 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008148:	e111      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800814a:	2118      	movs	r1, #24
 800814c:	187b      	adds	r3, r7, r1
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	001a      	movs	r2, r3
 8008152:	187b      	adds	r3, r7, r1
 8008154:	1c99      	adds	r1, r3, #2
 8008156:	488d      	ldr	r0, [pc, #564]	@ (800838c <ProcessCmd+0x2c8>)
 8008158:	230c      	movs	r3, #12
 800815a:	f003 fbcd 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 800815e:	e106      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008160:	2118      	movs	r1, #24
 8008162:	187b      	adds	r3, r7, r1
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	001a      	movs	r2, r3
 8008168:	187b      	adds	r3, r7, r1
 800816a:	1c99      	adds	r1, r3, #2
 800816c:	4888      	ldr	r0, [pc, #544]	@ (8008390 <ProcessCmd+0x2cc>)
 800816e:	230c      	movs	r3, #12
 8008170:	f003 fbc2 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008174:	e0fb      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008176:	2118      	movs	r1, #24
 8008178:	187b      	adds	r3, r7, r1
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	001a      	movs	r2, r3
 800817e:	187b      	adds	r3, r7, r1
 8008180:	1c99      	adds	r1, r3, #2
 8008182:	4884      	ldr	r0, [pc, #528]	@ (8008394 <ProcessCmd+0x2d0>)
 8008184:	230c      	movs	r3, #12
 8008186:	f003 fbb7 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 800818a:	e0f0      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800818c:	2118      	movs	r1, #24
 800818e:	187b      	adds	r3, r7, r1
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	001a      	movs	r2, r3
 8008194:	187b      	adds	r3, r7, r1
 8008196:	1c99      	adds	r1, r3, #2
 8008198:	487f      	ldr	r0, [pc, #508]	@ (8008398 <ProcessCmd+0x2d4>)
 800819a:	230c      	movs	r3, #12
 800819c:	f003 fbac 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80081a0:	e0e5      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081a2:	2118      	movs	r1, #24
 80081a4:	187b      	adds	r3, r7, r1
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	001a      	movs	r2, r3
 80081aa:	187b      	adds	r3, r7, r1
 80081ac:	1c99      	adds	r1, r3, #2
 80081ae:	487b      	ldr	r0, [pc, #492]	@ (800839c <ProcessCmd+0x2d8>)
 80081b0:	230c      	movs	r3, #12
 80081b2:	f003 fba1 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80081b6:	e0da      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081b8:	2118      	movs	r1, #24
 80081ba:	187b      	adds	r3, r7, r1
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	001a      	movs	r2, r3
 80081c0:	187b      	adds	r3, r7, r1
 80081c2:	1c99      	adds	r1, r3, #2
 80081c4:	4876      	ldr	r0, [pc, #472]	@ (80083a0 <ProcessCmd+0x2dc>)
 80081c6:	230c      	movs	r3, #12
 80081c8:	f003 fb96 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80081cc:	e0cf      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081ce:	2118      	movs	r1, #24
 80081d0:	187b      	adds	r3, r7, r1
 80081d2:	785b      	ldrb	r3, [r3, #1]
 80081d4:	001a      	movs	r2, r3
 80081d6:	187b      	adds	r3, r7, r1
 80081d8:	1c99      	adds	r1, r3, #2
 80081da:	4872      	ldr	r0, [pc, #456]	@ (80083a4 <ProcessCmd+0x2e0>)
 80081dc:	230c      	movs	r3, #12
 80081de:	f003 fb8b 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80081e2:	e0c4      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081e4:	2118      	movs	r1, #24
 80081e6:	187b      	adds	r3, r7, r1
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	001a      	movs	r2, r3
 80081ec:	187b      	adds	r3, r7, r1
 80081ee:	1c99      	adds	r1, r3, #2
 80081f0:	486d      	ldr	r0, [pc, #436]	@ (80083a8 <ProcessCmd+0x2e4>)
 80081f2:	230c      	movs	r3, #12
 80081f4:	f003 fb80 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80081f8:	e0b9      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80081fa:	2118      	movs	r1, #24
 80081fc:	187b      	adds	r3, r7, r1
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	001a      	movs	r2, r3
 8008202:	187b      	adds	r3, r7, r1
 8008204:	1c99      	adds	r1, r3, #2
 8008206:	4869      	ldr	r0, [pc, #420]	@ (80083ac <ProcessCmd+0x2e8>)
 8008208:	2320      	movs	r3, #32
 800820a:	f003 fb75 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 800820e:	e0ae      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008210:	2118      	movs	r1, #24
 8008212:	187b      	adds	r3, r7, r1
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	001a      	movs	r2, r3
 8008218:	187b      	adds	r3, r7, r1
 800821a:	1c99      	adds	r1, r3, #2
 800821c:	4864      	ldr	r0, [pc, #400]	@ (80083b0 <ProcessCmd+0x2ec>)
 800821e:	230c      	movs	r3, #12
 8008220:	f003 fb6a 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008224:	e0a3      	b.n	800836e <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008226:	2118      	movs	r1, #24
 8008228:	187b      	adds	r3, r7, r1
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	001a      	movs	r2, r3
 800822e:	187b      	adds	r3, r7, r1
 8008230:	1c99      	adds	r1, r3, #2
 8008232:	4860      	ldr	r0, [pc, #384]	@ (80083b4 <ProcessCmd+0x2f0>)
 8008234:	230c      	movs	r3, #12
 8008236:	f003 fb5f 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 800823a:	e098      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800823c:	2118      	movs	r1, #24
 800823e:	187b      	adds	r3, r7, r1
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	001a      	movs	r2, r3
 8008244:	187b      	adds	r3, r7, r1
 8008246:	1c99      	adds	r1, r3, #2
 8008248:	485b      	ldr	r0, [pc, #364]	@ (80083b8 <ProcessCmd+0x2f4>)
 800824a:	230c      	movs	r3, #12
 800824c:	f003 fb54 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008250:	e08d      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008252:	2118      	movs	r1, #24
 8008254:	187b      	adds	r3, r7, r1
 8008256:	785b      	ldrb	r3, [r3, #1]
 8008258:	001a      	movs	r2, r3
 800825a:	187b      	adds	r3, r7, r1
 800825c:	1c99      	adds	r1, r3, #2
 800825e:	4857      	ldr	r0, [pc, #348]	@ (80083bc <ProcessCmd+0x2f8>)
 8008260:	230c      	movs	r3, #12
 8008262:	f003 fb49 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008266:	e082      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008268:	2118      	movs	r1, #24
 800826a:	187b      	adds	r3, r7, r1
 800826c:	785b      	ldrb	r3, [r3, #1]
 800826e:	001a      	movs	r2, r3
 8008270:	187b      	adds	r3, r7, r1
 8008272:	1c99      	adds	r1, r3, #2
 8008274:	4852      	ldr	r0, [pc, #328]	@ (80083c0 <ProcessCmd+0x2fc>)
 8008276:	230c      	movs	r3, #12
 8008278:	f003 fb3e 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 800827c:	e077      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800827e:	2118      	movs	r1, #24
 8008280:	187b      	adds	r3, r7, r1
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	001a      	movs	r2, r3
 8008286:	187b      	adds	r3, r7, r1
 8008288:	1c99      	adds	r1, r3, #2
 800828a:	484e      	ldr	r0, [pc, #312]	@ (80083c4 <ProcessCmd+0x300>)
 800828c:	230c      	movs	r3, #12
 800828e:	f003 fb33 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008292:	e06c      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008294:	2118      	movs	r1, #24
 8008296:	187b      	adds	r3, r7, r1
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	001a      	movs	r2, r3
 800829c:	187b      	adds	r3, r7, r1
 800829e:	1c99      	adds	r1, r3, #2
 80082a0:	4849      	ldr	r0, [pc, #292]	@ (80083c8 <ProcessCmd+0x304>)
 80082a2:	230c      	movs	r3, #12
 80082a4:	f003 fb28 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80082a8:	e061      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082aa:	2118      	movs	r1, #24
 80082ac:	187b      	adds	r3, r7, r1
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	001a      	movs	r2, r3
 80082b2:	187b      	adds	r3, r7, r1
 80082b4:	1c99      	adds	r1, r3, #2
 80082b6:	4845      	ldr	r0, [pc, #276]	@ (80083cc <ProcessCmd+0x308>)
 80082b8:	230c      	movs	r3, #12
 80082ba:	f003 fb1d 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80082be:	e056      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082c0:	2118      	movs	r1, #24
 80082c2:	187b      	adds	r3, r7, r1
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	001a      	movs	r2, r3
 80082c8:	187b      	adds	r3, r7, r1
 80082ca:	1c99      	adds	r1, r3, #2
 80082cc:	4840      	ldr	r0, [pc, #256]	@ (80083d0 <ProcessCmd+0x30c>)
 80082ce:	230c      	movs	r3, #12
 80082d0:	f003 fb12 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80082d4:	e04b      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082d6:	2118      	movs	r1, #24
 80082d8:	187b      	adds	r3, r7, r1
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	001a      	movs	r2, r3
 80082de:	187b      	adds	r3, r7, r1
 80082e0:	1c99      	adds	r1, r3, #2
 80082e2:	483c      	ldr	r0, [pc, #240]	@ (80083d4 <ProcessCmd+0x310>)
 80082e4:	230c      	movs	r3, #12
 80082e6:	f003 fb07 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 80082ea:	e040      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082ec:	2118      	movs	r1, #24
 80082ee:	187b      	adds	r3, r7, r1
 80082f0:	785b      	ldrb	r3, [r3, #1]
 80082f2:	001a      	movs	r2, r3
 80082f4:	187b      	adds	r3, r7, r1
 80082f6:	1c99      	adds	r1, r3, #2
 80082f8:	4837      	ldr	r0, [pc, #220]	@ (80083d8 <ProcessCmd+0x314>)
 80082fa:	230c      	movs	r3, #12
 80082fc:	f003 fafc 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008300:	e035      	b.n	800836e <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008302:	2118      	movs	r1, #24
 8008304:	187b      	adds	r3, r7, r1
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	001a      	movs	r2, r3
 800830a:	187b      	adds	r3, r7, r1
 800830c:	1c99      	adds	r1, r3, #2
 800830e:	4833      	ldr	r0, [pc, #204]	@ (80083dc <ProcessCmd+0x318>)
 8008310:	230c      	movs	r3, #12
 8008312:	f003 faf1 	bl	800b8f8 <WriteUint8ArrayEepromSafe>
        break;
 8008316:	e02a      	b.n	800836e <ProcessCmd+0x2aa>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8008318:	23ca      	movs	r3, #202	@ 0xca
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	4a18      	ldr	r2, [pc, #96]	@ (8008380 <ProcessCmd+0x2bc>)
 800831e:	0019      	movs	r1, r3
 8008320:	0010      	movs	r0, r2
 8008322:	f003 fb2e 	bl	800b982 <ClearEEprom>
        break;
 8008326:	e022      	b.n	800836e <ProcessCmd+0x2aa>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8008328:	2118      	movs	r1, #24
 800832a:	187b      	adds	r3, r7, r1
 800832c:	789b      	ldrb	r3, [r3, #2]
 800832e:	b21b      	sxth	r3, r3
 8008330:	021b      	lsls	r3, r3, #8
 8008332:	b21a      	sxth	r2, r3
 8008334:	187b      	adds	r3, r7, r1
 8008336:	78db      	ldrb	r3, [r3, #3]
 8008338:	b21b      	sxth	r3, r3
 800833a:	4313      	orrs	r3, r2
 800833c:	b21a      	sxth	r2, r3
 800833e:	1dbb      	adds	r3, r7, #6
 8008340:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8008342:	1dbb      	adds	r3, r7, #6
 8008344:	881a      	ldrh	r2, [r3, #0]
 8008346:	23c0      	movs	r3, #192	@ 0xc0
 8008348:	015b      	lsls	r3, r3, #5
 800834a:	429a      	cmp	r2, r3
 800834c:	d207      	bcs.n	800835e <ProcessCmd+0x29a>
                ClearEEprom(EEPromStartAddr, size);
 800834e:	1dbb      	adds	r3, r7, #6
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	4a0b      	ldr	r2, [pc, #44]	@ (8008380 <ProcessCmd+0x2bc>)
 8008354:	0019      	movs	r1, r3
 8008356:	0010      	movs	r0, r2
 8008358:	f003 fb13 	bl	800b982 <ClearEEprom>
            break;
 800835c:	e006      	b.n	800836c <ProcessCmd+0x2a8>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800835e:	23c0      	movs	r3, #192	@ 0xc0
 8008360:	015b      	lsls	r3, r3, #5
 8008362:	4a07      	ldr	r2, [pc, #28]	@ (8008380 <ProcessCmd+0x2bc>)
 8008364:	0019      	movs	r1, r3
 8008366:	0010      	movs	r0, r2
 8008368:	f003 fb0b 	bl	800b982 <ClearEEprom>
            break;
 800836c:	46c0      	nop			@ (mov r8, r8)
}
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	46bd      	mov	sp, r7
 8008372:	b002      	add	sp, #8
 8008374:	bcb0      	pop	{r4, r5, r7}
 8008376:	bc08      	pop	{r3}
 8008378:	b004      	add	sp, #16
 800837a:	4718      	bx	r3
 800837c:	0802e024 	.word	0x0802e024
 8008380:	08080000 	.word	0x08080000
 8008384:	0808000c 	.word	0x0808000c
 8008388:	08080018 	.word	0x08080018
 800838c:	08080024 	.word	0x08080024
 8008390:	08080030 	.word	0x08080030
 8008394:	0808003c 	.word	0x0808003c
 8008398:	08080048 	.word	0x08080048
 800839c:	08080054 	.word	0x08080054
 80083a0:	08080060 	.word	0x08080060
 80083a4:	0808006c 	.word	0x0808006c
 80083a8:	08080078 	.word	0x08080078
 80083ac:	08080090 	.word	0x08080090
 80083b0:	080800b0 	.word	0x080800b0
 80083b4:	080800bc 	.word	0x080800bc
 80083b8:	080800c8 	.word	0x080800c8
 80083bc:	080800d4 	.word	0x080800d4
 80083c0:	080800e0 	.word	0x080800e0
 80083c4:	080800ec 	.word	0x080800ec
 80083c8:	080800f8 	.word	0x080800f8
 80083cc:	08080104 	.word	0x08080104
 80083d0:	08080110 	.word	0x08080110
 80083d4:	08080130 	.word	0x08080130
 80083d8:	08080170 	.word	0x08080170
 80083dc:	0808017c 	.word	0x0808017c

080083e0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80083e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6039      	str	r1, [r7, #0]
 80083e8:	0011      	movs	r1, r2
 80083ea:	1dfb      	adds	r3, r7, #7
 80083ec:	1c02      	adds	r2, r0, #0
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	1dbb      	adds	r3, r7, #6
 80083f2:	1c0a      	adds	r2, r1, #0
 80083f4:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80083f6:	2223      	movs	r2, #35	@ 0x23
 80083f8:	4b20      	ldr	r3, [pc, #128]	@ (800847c <Create_Message+0x9c>)
 80083fa:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80083fc:	4b1f      	ldr	r3, [pc, #124]	@ (800847c <Create_Message+0x9c>)
 80083fe:	1dfa      	adds	r2, r7, #7
 8008400:	7812      	ldrb	r2, [r2, #0]
 8008402:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8008404:	4b1d      	ldr	r3, [pc, #116]	@ (800847c <Create_Message+0x9c>)
 8008406:	1dba      	adds	r2, r7, #6
 8008408:	7812      	ldrb	r2, [r2, #0]
 800840a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800840c:	1dbb      	adds	r3, r7, #6
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	4b1b      	ldr	r3, [pc, #108]	@ (8008480 <Create_Message+0xa0>)
 8008414:	0018      	movs	r0, r3
 8008416:	f01d fda5 	bl	8025f64 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800841a:	1dbb      	adds	r3, r7, #6
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b29a      	uxth	r2, r3
 8008420:	250e      	movs	r5, #14
 8008422:	197b      	adds	r3, r7, r5
 8008424:	3203      	adds	r2, #3
 8008426:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008428:	260c      	movs	r6, #12
 800842a:	19bc      	adds	r4, r7, r6
 800842c:	197b      	adds	r3, r7, r5
 800842e:	881a      	ldrh	r2, [r3, #0]
 8008430:	4b12      	ldr	r3, [pc, #72]	@ (800847c <Create_Message+0x9c>)
 8008432:	0011      	movs	r1, r2
 8008434:	0018      	movs	r0, r3
 8008436:	f000 f825 	bl	8008484 <CRC16_ARC>
 800843a:	0003      	movs	r3, r0
 800843c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800843e:	0030      	movs	r0, r6
 8008440:	183b      	adds	r3, r7, r0
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	b29a      	uxth	r2, r3
 8008448:	197b      	adds	r3, r7, r5
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b2d1      	uxtb	r1, r2
 800844e:	4a0b      	ldr	r2, [pc, #44]	@ (800847c <Create_Message+0x9c>)
 8008450:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008452:	197b      	adds	r3, r7, r5
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	3301      	adds	r3, #1
 8008458:	183a      	adds	r2, r7, r0
 800845a:	8812      	ldrh	r2, [r2, #0]
 800845c:	b2d1      	uxtb	r1, r2
 800845e:	4a07      	ldr	r2, [pc, #28]	@ (800847c <Create_Message+0x9c>)
 8008460:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8008462:	197b      	adds	r3, r7, r5
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	3302      	adds	r3, #2
 8008468:	b29a      	uxth	r2, r3
 800846a:	4b04      	ldr	r3, [pc, #16]	@ (800847c <Create_Message+0x9c>)
 800846c:	0011      	movs	r1, r2
 800846e:	0018      	movs	r0, r3
 8008470:	f01a f8fc 	bl	802266c <CDC_Transmit_FS>
}
 8008474:	46c0      	nop			@ (mov r8, r8)
 8008476:	46bd      	mov	sp, r7
 8008478:	b005      	add	sp, #20
 800847a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847c:	200008a4 	.word	0x200008a4
 8008480:	200008a7 	.word	0x200008a7

08008484 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	000a      	movs	r2, r1
 800848e:	1cbb      	adds	r3, r7, #2
 8008490:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8008492:	2316      	movs	r3, #22
 8008494:	18fb      	adds	r3, r7, r3
 8008496:	2200      	movs	r2, #0
 8008498:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800849a:	2300      	movs	r3, #0
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	e02e      	b.n	80084fe <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	18d3      	adds	r3, r2, r3
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	0019      	movs	r1, r3
 80084aa:	2216      	movs	r2, #22
 80084ac:	18bb      	adds	r3, r7, r2
 80084ae:	18ba      	adds	r2, r7, r2
 80084b0:	8812      	ldrh	r2, [r2, #0]
 80084b2:	404a      	eors	r2, r1
 80084b4:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	e01a      	b.n	80084f2 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80084bc:	2116      	movs	r1, #22
 80084be:	187b      	adds	r3, r7, r1
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	2201      	movs	r2, #1
 80084c4:	4013      	ands	r3, r2
 80084c6:	d00b      	beq.n	80084e0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80084c8:	187b      	adds	r3, r7, r1
 80084ca:	187a      	adds	r2, r7, r1
 80084cc:	8812      	ldrh	r2, [r2, #0]
 80084ce:	0852      	lsrs	r2, r2, #1
 80084d0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80084d2:	187b      	adds	r3, r7, r1
 80084d4:	187a      	adds	r2, r7, r1
 80084d6:	8812      	ldrh	r2, [r2, #0]
 80084d8:	490f      	ldr	r1, [pc, #60]	@ (8008518 <CRC16_ARC+0x94>)
 80084da:	404a      	eors	r2, r1
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e005      	b.n	80084ec <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80084e0:	2216      	movs	r2, #22
 80084e2:	18bb      	adds	r3, r7, r2
 80084e4:	18ba      	adds	r2, r7, r2
 80084e6:	8812      	ldrh	r2, [r2, #0]
 80084e8:	0852      	lsrs	r2, r2, #1
 80084ea:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3301      	adds	r3, #1
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b07      	cmp	r3, #7
 80084f6:	dde1      	ble.n	80084bc <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	3301      	adds	r3, #1
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	1cbb      	adds	r3, r7, #2
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	429a      	cmp	r2, r3
 8008506:	dbcb      	blt.n	80084a0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008508:	2316      	movs	r3, #22
 800850a:	18fb      	adds	r3, r7, r3
 800850c:	881b      	ldrh	r3, [r3, #0]
}
 800850e:	0018      	movs	r0, r3
 8008510:	46bd      	mov	sp, r7
 8008512:	b006      	add	sp, #24
 8008514:	bd80      	pop	{r7, pc}
 8008516:	46c0      	nop			@ (mov r8, r8)
 8008518:	ffffa001 	.word	0xffffa001

0800851c <printf_USB>:

void printf_USB(const char* message, ...)
{
 800851c:	b40f      	push	{r0, r1, r2, r3}
 800851e:	b590      	push	{r4, r7, lr}
 8008520:	b0a9      	sub	sp, #164	@ 0xa4
 8008522:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008524:	23ac      	movs	r3, #172	@ 0xac
 8008526:	2108      	movs	r1, #8
 8008528:	185b      	adds	r3, r3, r1
 800852a:	19db      	adds	r3, r3, r7
 800852c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	23a8      	movs	r3, #168	@ 0xa8
 8008532:	185b      	adds	r3, r3, r1
 8008534:	19db      	adds	r3, r3, r7
 8008536:	6819      	ldr	r1, [r3, #0]
 8008538:	2408      	movs	r4, #8
 800853a:	193b      	adds	r3, r7, r4
 800853c:	0018      	movs	r0, r3
 800853e:	f01d fb89 	bl	8025c54 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008542:	193b      	adds	r3, r7, r4
 8008544:	0018      	movs	r0, r3
 8008546:	f7f7 fe11 	bl	800016c <strlen>
 800854a:	0003      	movs	r3, r0
 800854c:	b29a      	uxth	r2, r3
 800854e:	193b      	adds	r3, r7, r4
 8008550:	0011      	movs	r1, r2
 8008552:	0018      	movs	r0, r3
 8008554:	f01a f88a 	bl	802266c <CDC_Transmit_FS>
}
 8008558:	46c0      	nop			@ (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b029      	add	sp, #164	@ 0xa4
 800855e:	bc90      	pop	{r4, r7}
 8008560:	bc08      	pop	{r3}
 8008562:	b004      	add	sp, #16
 8008564:	4718      	bx	r3

08008566 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	000a      	movs	r2, r1
 8008570:	1cfb      	adds	r3, r7, #3
 8008572:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008574:	1cfb      	adds	r3, r7, #3
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <PC_selectout+0x1e>
    printf_USB(msg);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	0018      	movs	r0, r3
 8008580:	f7ff ffcc 	bl	800851c <printf_USB>
  }
//  else {
    printf(msg);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	0018      	movs	r0, r3
 8008588:	f01d fa36 	bl	80259f8 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 800858c:	200a      	movs	r0, #10
 800858e:	f00b fcfb 	bl	8013f88 <HAL_Delay>
}
 8008592:	46c0      	nop			@ (mov r8, r8)
 8008594:	46bd      	mov	sp, r7
 8008596:	b002      	add	sp, #8
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <PC_show_Keys>:

void PC_show_Keys() {
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  static uint8_t UptimeConfig[IdSize];            // 25
#endif

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 80085a0:	f000 fe68 	bl	8009274 <Check_USB_PowerOn>
 80085a4:	1e03      	subs	r3, r0, #0
 80085a6:	d005      	beq.n	80085b4 <PC_show_Keys+0x18>
    usb_out = true;
 80085a8:	4b01      	ldr	r3, [pc, #4]	@ (80085b0 <PC_show_Keys+0x14>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e004      	b.n	80085ba <PC_show_Keys+0x1e>
 80085b0:	200009a9 	.word	0x200009a9
  }
  else {
    usb_out = false;
 80085b4:	4bfd      	ldr	r3, [pc, #1012]	@ (80089ac <PC_show_Keys+0x410>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80085ba:	4afd      	ldr	r2, [pc, #1012]	@ (80089b0 <PC_show_Keys+0x414>)
 80085bc:	4bfd      	ldr	r3, [pc, #1012]	@ (80089b4 <PC_show_Keys+0x418>)
 80085be:	0011      	movs	r1, r2
 80085c0:	0018      	movs	r0, r3
 80085c2:	f01d fa89 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80085c6:	4bf9      	ldr	r3, [pc, #996]	@ (80089ac <PC_show_Keys+0x410>)
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	4bfa      	ldr	r3, [pc, #1000]	@ (80089b4 <PC_show_Keys+0x418>)
 80085cc:	0011      	movs	r1, r2
 80085ce:	0018      	movs	r0, r3
 80085d0:	f7ff ffc9 	bl	8008566 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80085d4:	4bf8      	ldr	r3, [pc, #992]	@ (80089b8 <PC_show_Keys+0x41c>)
 80085d6:	48f9      	ldr	r0, [pc, #996]	@ (80089bc <PC_show_Keys+0x420>)
 80085d8:	220c      	movs	r2, #12
 80085da:	0019      	movs	r1, r3
 80085dc:	f003 f9a8 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80085e0:	4af5      	ldr	r2, [pc, #980]	@ (80089b8 <PC_show_Keys+0x41c>)
 80085e2:	4bf7      	ldr	r3, [pc, #988]	@ (80089c0 <PC_show_Keys+0x424>)
 80085e4:	0011      	movs	r1, r2
 80085e6:	0018      	movs	r0, r3
 80085e8:	f7fc fe20 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "Box id -----------------------------: %s\r\n", Buffer);
 80085ec:	4af4      	ldr	r2, [pc, #976]	@ (80089c0 <PC_show_Keys+0x424>)
 80085ee:	49f5      	ldr	r1, [pc, #980]	@ (80089c4 <PC_show_Keys+0x428>)
 80085f0:	4bf0      	ldr	r3, [pc, #960]	@ (80089b4 <PC_show_Keys+0x418>)
 80085f2:	0018      	movs	r0, r3
 80085f4:	f01d fa70 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80085f8:	4bec      	ldr	r3, [pc, #944]	@ (80089ac <PC_show_Keys+0x410>)
 80085fa:	781a      	ldrb	r2, [r3, #0]
 80085fc:	4bed      	ldr	r3, [pc, #948]	@ (80089b4 <PC_show_Keys+0x418>)
 80085fe:	0011      	movs	r1, r2
 8008600:	0018      	movs	r0, r3
 8008602:	f7ff ffb0 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008606:	4bf0      	ldr	r3, [pc, #960]	@ (80089c8 <PC_show_Keys+0x42c>)
 8008608:	48f0      	ldr	r0, [pc, #960]	@ (80089cc <PC_show_Keys+0x430>)
 800860a:	220c      	movs	r2, #12
 800860c:	0019      	movs	r1, r3
 800860e:	f003 f98f 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008612:	4aed      	ldr	r2, [pc, #948]	@ (80089c8 <PC_show_Keys+0x42c>)
 8008614:	4bea      	ldr	r3, [pc, #936]	@ (80089c0 <PC_show_Keys+0x424>)
 8008616:	0011      	movs	r1, r2
 8008618:	0018      	movs	r0, r3
 800861a:	f7fc fe07 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: --------: %s\r\n", Buffer);
 800861e:	4ae8      	ldr	r2, [pc, #928]	@ (80089c0 <PC_show_Keys+0x424>)
 8008620:	49eb      	ldr	r1, [pc, #940]	@ (80089d0 <PC_show_Keys+0x434>)
 8008622:	4be4      	ldr	r3, [pc, #912]	@ (80089b4 <PC_show_Keys+0x418>)
 8008624:	0018      	movs	r0, r3
 8008626:	f01d fa57 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800862a:	4be0      	ldr	r3, [pc, #896]	@ (80089ac <PC_show_Keys+0x410>)
 800862c:	781a      	ldrb	r2, [r3, #0]
 800862e:	4be1      	ldr	r3, [pc, #900]	@ (80089b4 <PC_show_Keys+0x418>)
 8008630:	0011      	movs	r1, r2
 8008632:	0018      	movs	r0, r3
 8008634:	f7ff ff97 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008638:	4be6      	ldr	r3, [pc, #920]	@ (80089d4 <PC_show_Keys+0x438>)
 800863a:	48e7      	ldr	r0, [pc, #924]	@ (80089d8 <PC_show_Keys+0x43c>)
 800863c:	220c      	movs	r2, #12
 800863e:	0019      	movs	r1, r3
 8008640:	f003 f976 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008644:	4ae3      	ldr	r2, [pc, #908]	@ (80089d4 <PC_show_Keys+0x438>)
 8008646:	4bde      	ldr	r3, [pc, #888]	@ (80089c0 <PC_show_Keys+0x424>)
 8008648:	0011      	movs	r1, r2
 800864a:	0018      	movs	r0, r3
 800864c:	f7fc fdee 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ------------: %s\r\n", Buffer);
 8008650:	4adb      	ldr	r2, [pc, #876]	@ (80089c0 <PC_show_Keys+0x424>)
 8008652:	49e2      	ldr	r1, [pc, #904]	@ (80089dc <PC_show_Keys+0x440>)
 8008654:	4bd7      	ldr	r3, [pc, #860]	@ (80089b4 <PC_show_Keys+0x418>)
 8008656:	0018      	movs	r0, r3
 8008658:	f01d fa3e 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800865c:	4bd3      	ldr	r3, [pc, #844]	@ (80089ac <PC_show_Keys+0x410>)
 800865e:	781a      	ldrb	r2, [r3, #0]
 8008660:	4bd4      	ldr	r3, [pc, #848]	@ (80089b4 <PC_show_Keys+0x418>)
 8008662:	0011      	movs	r1, r2
 8008664:	0018      	movs	r0, r3
 8008666:	f7ff ff7e 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 800866a:	4bdd      	ldr	r3, [pc, #884]	@ (80089e0 <PC_show_Keys+0x444>)
 800866c:	48dd      	ldr	r0, [pc, #884]	@ (80089e4 <PC_show_Keys+0x448>)
 800866e:	220c      	movs	r2, #12
 8008670:	0019      	movs	r1, r3
 8008672:	f003 f95d 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008676:	4ada      	ldr	r2, [pc, #872]	@ (80089e0 <PC_show_Keys+0x444>)
 8008678:	4bd1      	ldr	r3, [pc, #836]	@ (80089c0 <PC_show_Keys+0x424>)
 800867a:	0011      	movs	r1, r2
 800867c:	0018      	movs	r0, r3
 800867e:	f7fc fdd5 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id -----------------: %s\r\n", Buffer);
 8008682:	4acf      	ldr	r2, [pc, #828]	@ (80089c0 <PC_show_Keys+0x424>)
 8008684:	49d8      	ldr	r1, [pc, #864]	@ (80089e8 <PC_show_Keys+0x44c>)
 8008686:	4bcb      	ldr	r3, [pc, #812]	@ (80089b4 <PC_show_Keys+0x418>)
 8008688:	0018      	movs	r0, r3
 800868a:	f01d fa25 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800868e:	4bc7      	ldr	r3, [pc, #796]	@ (80089ac <PC_show_Keys+0x410>)
 8008690:	781a      	ldrb	r2, [r3, #0]
 8008692:	4bc8      	ldr	r3, [pc, #800]	@ (80089b4 <PC_show_Keys+0x418>)
 8008694:	0011      	movs	r1, r2
 8008696:	0018      	movs	r0, r3
 8008698:	f7ff ff65 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 800869c:	4bd3      	ldr	r3, [pc, #844]	@ (80089ec <PC_show_Keys+0x450>)
 800869e:	48d4      	ldr	r0, [pc, #848]	@ (80089f0 <PC_show_Keys+0x454>)
 80086a0:	220c      	movs	r2, #12
 80086a2:	0019      	movs	r1, r3
 80086a4:	f003 f944 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 80086a8:	4ad0      	ldr	r2, [pc, #832]	@ (80089ec <PC_show_Keys+0x450>)
 80086aa:	4bc5      	ldr	r3, [pc, #788]	@ (80089c0 <PC_show_Keys+0x424>)
 80086ac:	0011      	movs	r1, r2
 80086ae:	0018      	movs	r0, r3
 80086b0:	f7fc fdbc 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id -----------------: %s\r\n", Buffer);
 80086b4:	4ac2      	ldr	r2, [pc, #776]	@ (80089c0 <PC_show_Keys+0x424>)
 80086b6:	49cf      	ldr	r1, [pc, #828]	@ (80089f4 <PC_show_Keys+0x458>)
 80086b8:	4bbe      	ldr	r3, [pc, #760]	@ (80089b4 <PC_show_Keys+0x418>)
 80086ba:	0018      	movs	r0, r3
 80086bc:	f01d fa0c 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086c0:	4bba      	ldr	r3, [pc, #744]	@ (80089ac <PC_show_Keys+0x410>)
 80086c2:	781a      	ldrb	r2, [r3, #0]
 80086c4:	4bbb      	ldr	r3, [pc, #748]	@ (80089b4 <PC_show_Keys+0x418>)
 80086c6:	0011      	movs	r1, r2
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7ff ff4c 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 80086ce:	4bca      	ldr	r3, [pc, #808]	@ (80089f8 <PC_show_Keys+0x45c>)
 80086d0:	48ca      	ldr	r0, [pc, #808]	@ (80089fc <PC_show_Keys+0x460>)
 80086d2:	220c      	movs	r2, #12
 80086d4:	0019      	movs	r1, r3
 80086d6:	f003 f92b 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80086da:	4ac7      	ldr	r2, [pc, #796]	@ (80089f8 <PC_show_Keys+0x45c>)
 80086dc:	4bb8      	ldr	r3, [pc, #736]	@ (80089c0 <PC_show_Keys+0x424>)
 80086de:	0011      	movs	r1, r2
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7fc fda3 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 80086e6:	4ac6      	ldr	r2, [pc, #792]	@ (8008a00 <PC_show_Keys+0x464>)
 80086e8:	4bb2      	ldr	r3, [pc, #712]	@ (80089b4 <PC_show_Keys+0x418>)
 80086ea:	0011      	movs	r1, r2
 80086ec:	0018      	movs	r0, r3
 80086ee:	f01d f9f3 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086f2:	4bae      	ldr	r3, [pc, #696]	@ (80089ac <PC_show_Keys+0x410>)
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	4baf      	ldr	r3, [pc, #700]	@ (80089b4 <PC_show_Keys+0x418>)
 80086f8:	0011      	movs	r1, r2
 80086fa:	0018      	movs	r0, r3
 80086fc:	f7ff ff33 	bl	8008566 <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id --------: %s\r\n", Buffer);
 8008700:	4aaf      	ldr	r2, [pc, #700]	@ (80089c0 <PC_show_Keys+0x424>)
 8008702:	49c0      	ldr	r1, [pc, #768]	@ (8008a04 <PC_show_Keys+0x468>)
 8008704:	4bab      	ldr	r3, [pc, #684]	@ (80089b4 <PC_show_Keys+0x418>)
 8008706:	0018      	movs	r0, r3
 8008708:	f01d f9e6 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800870c:	4ba7      	ldr	r3, [pc, #668]	@ (80089ac <PC_show_Keys+0x410>)
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	4ba8      	ldr	r3, [pc, #672]	@ (80089b4 <PC_show_Keys+0x418>)
 8008712:	0011      	movs	r1, r2
 8008714:	0018      	movs	r0, r3
 8008716:	f7ff ff26 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 800871a:	4bbb      	ldr	r3, [pc, #748]	@ (8008a08 <PC_show_Keys+0x46c>)
 800871c:	48bb      	ldr	r0, [pc, #748]	@ (8008a0c <PC_show_Keys+0x470>)
 800871e:	220c      	movs	r2, #12
 8008720:	0019      	movs	r1, r3
 8008722:	f003 f905 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008726:	4ab8      	ldr	r2, [pc, #736]	@ (8008a08 <PC_show_Keys+0x46c>)
 8008728:	4ba5      	ldr	r3, [pc, #660]	@ (80089c0 <PC_show_Keys+0x424>)
 800872a:	0011      	movs	r1, r2
 800872c:	0018      	movs	r0, r3
 800872e:	f7fc fd7d 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 8008732:	4ab7      	ldr	r2, [pc, #732]	@ (8008a10 <PC_show_Keys+0x474>)
 8008734:	4b9f      	ldr	r3, [pc, #636]	@ (80089b4 <PC_show_Keys+0x418>)
 8008736:	0011      	movs	r1, r2
 8008738:	0018      	movs	r0, r3
 800873a:	f01d f9cd 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800873e:	4b9b      	ldr	r3, [pc, #620]	@ (80089ac <PC_show_Keys+0x410>)
 8008740:	781a      	ldrb	r2, [r3, #0]
 8008742:	4b9c      	ldr	r3, [pc, #624]	@ (80089b4 <PC_show_Keys+0x418>)
 8008744:	0011      	movs	r1, r2
 8008746:	0018      	movs	r0, r3
 8008748:	f7ff ff0d 	bl	8008566 <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id -----------: %s\r\n", Buffer);
 800874c:	4a9c      	ldr	r2, [pc, #624]	@ (80089c0 <PC_show_Keys+0x424>)
 800874e:	49b1      	ldr	r1, [pc, #708]	@ (8008a14 <PC_show_Keys+0x478>)
 8008750:	4b98      	ldr	r3, [pc, #608]	@ (80089b4 <PC_show_Keys+0x418>)
 8008752:	0018      	movs	r0, r3
 8008754:	f01d f9c0 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008758:	4b94      	ldr	r3, [pc, #592]	@ (80089ac <PC_show_Keys+0x410>)
 800875a:	781a      	ldrb	r2, [r3, #0]
 800875c:	4b95      	ldr	r3, [pc, #596]	@ (80089b4 <PC_show_Keys+0x418>)
 800875e:	0011      	movs	r1, r2
 8008760:	0018      	movs	r0, r3
 8008762:	f7ff ff00 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008766:	4bac      	ldr	r3, [pc, #688]	@ (8008a18 <PC_show_Keys+0x47c>)
 8008768:	48ac      	ldr	r0, [pc, #688]	@ (8008a1c <PC_show_Keys+0x480>)
 800876a:	220c      	movs	r2, #12
 800876c:	0019      	movs	r1, r3
 800876e:	f003 f8df 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008772:	4aa9      	ldr	r2, [pc, #676]	@ (8008a18 <PC_show_Keys+0x47c>)
 8008774:	4b92      	ldr	r3, [pc, #584]	@ (80089c0 <PC_show_Keys+0x424>)
 8008776:	0011      	movs	r1, r2
 8008778:	0018      	movs	r0, r3
 800877a:	f7fc fd57 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ---------------: %s\r\n", Buffer);
 800877e:	4a90      	ldr	r2, [pc, #576]	@ (80089c0 <PC_show_Keys+0x424>)
 8008780:	49a7      	ldr	r1, [pc, #668]	@ (8008a20 <PC_show_Keys+0x484>)
 8008782:	4b8c      	ldr	r3, [pc, #560]	@ (80089b4 <PC_show_Keys+0x418>)
 8008784:	0018      	movs	r0, r3
 8008786:	f01d f9a7 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800878a:	4b88      	ldr	r3, [pc, #544]	@ (80089ac <PC_show_Keys+0x410>)
 800878c:	781a      	ldrb	r2, [r3, #0]
 800878e:	4b89      	ldr	r3, [pc, #548]	@ (80089b4 <PC_show_Keys+0x418>)
 8008790:	0011      	movs	r1, r2
 8008792:	0018      	movs	r0, r3
 8008794:	f7ff fee7 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008798:	4ba2      	ldr	r3, [pc, #648]	@ (8008a24 <PC_show_Keys+0x488>)
 800879a:	48a3      	ldr	r0, [pc, #652]	@ (8008a28 <PC_show_Keys+0x48c>)
 800879c:	220c      	movs	r2, #12
 800879e:	0019      	movs	r1, r3
 80087a0:	f003 f8c6 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 80087a4:	4a9f      	ldr	r2, [pc, #636]	@ (8008a24 <PC_show_Keys+0x488>)
 80087a6:	4b86      	ldr	r3, [pc, #536]	@ (80089c0 <PC_show_Keys+0x424>)
 80087a8:	0011      	movs	r1, r2
 80087aa:	0018      	movs	r0, r3
 80087ac:	f7fc fd3e 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id ----------------: %s\r\n", Buffer);
 80087b0:	4a83      	ldr	r2, [pc, #524]	@ (80089c0 <PC_show_Keys+0x424>)
 80087b2:	499e      	ldr	r1, [pc, #632]	@ (8008a2c <PC_show_Keys+0x490>)
 80087b4:	4b7f      	ldr	r3, [pc, #508]	@ (80089b4 <PC_show_Keys+0x418>)
 80087b6:	0018      	movs	r0, r3
 80087b8:	f01d f98e 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087bc:	4b7b      	ldr	r3, [pc, #492]	@ (80089ac <PC_show_Keys+0x410>)
 80087be:	781a      	ldrb	r2, [r3, #0]
 80087c0:	4b7c      	ldr	r3, [pc, #496]	@ (80089b4 <PC_show_Keys+0x418>)
 80087c2:	0011      	movs	r1, r2
 80087c4:	0018      	movs	r0, r3
 80087c6:	f7ff fece 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80087ca:	4b99      	ldr	r3, [pc, #612]	@ (8008a30 <PC_show_Keys+0x494>)
 80087cc:	4899      	ldr	r0, [pc, #612]	@ (8008a34 <PC_show_Keys+0x498>)
 80087ce:	220c      	movs	r2, #12
 80087d0:	0019      	movs	r1, r3
 80087d2:	f003 f8ad 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80087d6:	4a96      	ldr	r2, [pc, #600]	@ (8008a30 <PC_show_Keys+0x494>)
 80087d8:	4b79      	ldr	r3, [pc, #484]	@ (80089c0 <PC_show_Keys+0x424>)
 80087da:	0011      	movs	r1, r2
 80087dc:	0018      	movs	r0, r3
 80087de:	f7fc fd25 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id -----: %s\r\n", Buffer);
 80087e2:	4a77      	ldr	r2, [pc, #476]	@ (80089c0 <PC_show_Keys+0x424>)
 80087e4:	4994      	ldr	r1, [pc, #592]	@ (8008a38 <PC_show_Keys+0x49c>)
 80087e6:	4b73      	ldr	r3, [pc, #460]	@ (80089b4 <PC_show_Keys+0x418>)
 80087e8:	0018      	movs	r0, r3
 80087ea:	f01d f975 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087ee:	4b6f      	ldr	r3, [pc, #444]	@ (80089ac <PC_show_Keys+0x410>)
 80087f0:	781a      	ldrb	r2, [r3, #0]
 80087f2:	4b70      	ldr	r3, [pc, #448]	@ (80089b4 <PC_show_Keys+0x418>)
 80087f4:	0011      	movs	r1, r2
 80087f6:	0018      	movs	r0, r3
 80087f8:	f7ff feb5 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 80087fc:	4b8f      	ldr	r3, [pc, #572]	@ (8008a3c <PC_show_Keys+0x4a0>)
 80087fe:	4890      	ldr	r0, [pc, #576]	@ (8008a40 <PC_show_Keys+0x4a4>)
 8008800:	220c      	movs	r2, #12
 8008802:	0019      	movs	r1, r3
 8008804:	f003 f894 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008808:	4a8c      	ldr	r2, [pc, #560]	@ (8008a3c <PC_show_Keys+0x4a0>)
 800880a:	4b6d      	ldr	r3, [pc, #436]	@ (80089c0 <PC_show_Keys+0x424>)
 800880c:	0011      	movs	r1, r2
 800880e:	0018      	movs	r0, r3
 8008810:	f7fc fd0c 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id -------: %s\r\n", Buffer);
 8008814:	4a6a      	ldr	r2, [pc, #424]	@ (80089c0 <PC_show_Keys+0x424>)
 8008816:	498b      	ldr	r1, [pc, #556]	@ (8008a44 <PC_show_Keys+0x4a8>)
 8008818:	4b66      	ldr	r3, [pc, #408]	@ (80089b4 <PC_show_Keys+0x418>)
 800881a:	0018      	movs	r0, r3
 800881c:	f01d f95c 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008820:	4b62      	ldr	r3, [pc, #392]	@ (80089ac <PC_show_Keys+0x410>)
 8008822:	781a      	ldrb	r2, [r3, #0]
 8008824:	4b63      	ldr	r3, [pc, #396]	@ (80089b4 <PC_show_Keys+0x418>)
 8008826:	0011      	movs	r1, r2
 8008828:	0018      	movs	r0, r3
 800882a:	f7ff fe9c 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 800882e:	4b86      	ldr	r3, [pc, #536]	@ (8008a48 <PC_show_Keys+0x4ac>)
 8008830:	4886      	ldr	r0, [pc, #536]	@ (8008a4c <PC_show_Keys+0x4b0>)
 8008832:	220c      	movs	r2, #12
 8008834:	0019      	movs	r1, r3
 8008836:	f003 f87b 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 800883a:	4a83      	ldr	r2, [pc, #524]	@ (8008a48 <PC_show_Keys+0x4ac>)
 800883c:	4b60      	ldr	r3, [pc, #384]	@ (80089c0 <PC_show_Keys+0x424>)
 800883e:	0011      	movs	r1, r2
 8008840:	0018      	movs	r0, r3
 8008842:	f7fc fcf3 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) -----: %s\r\n", Buffer);
 8008846:	4a5e      	ldr	r2, [pc, #376]	@ (80089c0 <PC_show_Keys+0x424>)
 8008848:	4981      	ldr	r1, [pc, #516]	@ (8008a50 <PC_show_Keys+0x4b4>)
 800884a:	4b5a      	ldr	r3, [pc, #360]	@ (80089b4 <PC_show_Keys+0x418>)
 800884c:	0018      	movs	r0, r3
 800884e:	f01d f943 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008852:	4b56      	ldr	r3, [pc, #344]	@ (80089ac <PC_show_Keys+0x410>)
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	4b57      	ldr	r3, [pc, #348]	@ (80089b4 <PC_show_Keys+0x418>)
 8008858:	0011      	movs	r1, r2
 800885a:	0018      	movs	r0, r3
 800885c:	f7ff fe83 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008860:	4b7c      	ldr	r3, [pc, #496]	@ (8008a54 <PC_show_Keys+0x4b8>)
 8008862:	487d      	ldr	r0, [pc, #500]	@ (8008a58 <PC_show_Keys+0x4bc>)
 8008864:	2220      	movs	r2, #32
 8008866:	0019      	movs	r1, r3
 8008868:	f003 f862 	bl	800b930 <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name -------------------: ");
 800886c:	4a7b      	ldr	r2, [pc, #492]	@ (8008a5c <PC_show_Keys+0x4c0>)
 800886e:	4b51      	ldr	r3, [pc, #324]	@ (80089b4 <PC_show_Keys+0x418>)
 8008870:	0011      	movs	r1, r2
 8008872:	0018      	movs	r0, r3
 8008874:	f01d f930 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008878:	4b4c      	ldr	r3, [pc, #304]	@ (80089ac <PC_show_Keys+0x410>)
 800887a:	781a      	ldrb	r2, [r3, #0]
 800887c:	4b4d      	ldr	r3, [pc, #308]	@ (80089b4 <PC_show_Keys+0x418>)
 800887e:	0011      	movs	r1, r2
 8008880:	0018      	movs	r0, r3
 8008882:	f7ff fe70 	bl	8008566 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008886:	4a73      	ldr	r2, [pc, #460]	@ (8008a54 <PC_show_Keys+0x4b8>)
 8008888:	4975      	ldr	r1, [pc, #468]	@ (8008a60 <PC_show_Keys+0x4c4>)
 800888a:	4b4a      	ldr	r3, [pc, #296]	@ (80089b4 <PC_show_Keys+0x418>)
 800888c:	0018      	movs	r0, r3
 800888e:	f01d f923 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008892:	4b46      	ldr	r3, [pc, #280]	@ (80089ac <PC_show_Keys+0x410>)
 8008894:	781a      	ldrb	r2, [r3, #0]
 8008896:	4b47      	ldr	r3, [pc, #284]	@ (80089b4 <PC_show_Keys+0x418>)
 8008898:	0011      	movs	r1, r2
 800889a:	0018      	movs	r0, r3
 800889c:	f7ff fe63 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 80088a0:	4b70      	ldr	r3, [pc, #448]	@ (8008a64 <PC_show_Keys+0x4c8>)
 80088a2:	4871      	ldr	r0, [pc, #452]	@ (8008a68 <PC_show_Keys+0x4cc>)
 80088a4:	220c      	movs	r2, #12
 80088a6:	0019      	movs	r1, r3
 80088a8:	f003 f842 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 80088ac:	4a6d      	ldr	r2, [pc, #436]	@ (8008a64 <PC_show_Keys+0x4c8>)
 80088ae:	4b44      	ldr	r3, [pc, #272]	@ (80089c0 <PC_show_Keys+0x424>)
 80088b0:	0011      	movs	r1, r2
 80088b2:	0018      	movs	r0, r3
 80088b4:	f7fc fcba 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ---------------: %s\r\n", Buffer);
 80088b8:	4a41      	ldr	r2, [pc, #260]	@ (80089c0 <PC_show_Keys+0x424>)
 80088ba:	496c      	ldr	r1, [pc, #432]	@ (8008a6c <PC_show_Keys+0x4d0>)
 80088bc:	4b3d      	ldr	r3, [pc, #244]	@ (80089b4 <PC_show_Keys+0x418>)
 80088be:	0018      	movs	r0, r3
 80088c0:	f01d f90a 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088c4:	4b39      	ldr	r3, [pc, #228]	@ (80089ac <PC_show_Keys+0x410>)
 80088c6:	781a      	ldrb	r2, [r3, #0]
 80088c8:	4b3a      	ldr	r3, [pc, #232]	@ (80089b4 <PC_show_Keys+0x418>)
 80088ca:	0011      	movs	r1, r2
 80088cc:	0018      	movs	r0, r3
 80088ce:	f7ff fe4a 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 80088d2:	4b67      	ldr	r3, [pc, #412]	@ (8008a70 <PC_show_Keys+0x4d4>)
 80088d4:	4867      	ldr	r0, [pc, #412]	@ (8008a74 <PC_show_Keys+0x4d8>)
 80088d6:	220c      	movs	r2, #12
 80088d8:	0019      	movs	r1, r3
 80088da:	f003 f829 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 80088de:	4a64      	ldr	r2, [pc, #400]	@ (8008a70 <PC_show_Keys+0x4d4>)
 80088e0:	4b37      	ldr	r3, [pc, #220]	@ (80089c0 <PC_show_Keys+0x424>)
 80088e2:	0011      	movs	r1, r2
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7fc fca1 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ---------------: %s\r\n", Buffer);
 80088ea:	4a35      	ldr	r2, [pc, #212]	@ (80089c0 <PC_show_Keys+0x424>)
 80088ec:	4962      	ldr	r1, [pc, #392]	@ (8008a78 <PC_show_Keys+0x4dc>)
 80088ee:	4b31      	ldr	r3, [pc, #196]	@ (80089b4 <PC_show_Keys+0x418>)
 80088f0:	0018      	movs	r0, r3
 80088f2:	f01d f8f1 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088f6:	4b2d      	ldr	r3, [pc, #180]	@ (80089ac <PC_show_Keys+0x410>)
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	4b2e      	ldr	r3, [pc, #184]	@ (80089b4 <PC_show_Keys+0x418>)
 80088fc:	0011      	movs	r1, r2
 80088fe:	0018      	movs	r0, r3
 8008900:	f7ff fe31 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008904:	4b5d      	ldr	r3, [pc, #372]	@ (8008a7c <PC_show_Keys+0x4e0>)
 8008906:	485e      	ldr	r0, [pc, #376]	@ (8008a80 <PC_show_Keys+0x4e4>)
 8008908:	220c      	movs	r2, #12
 800890a:	0019      	movs	r1, r3
 800890c:	f003 f810 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008910:	4a5a      	ldr	r2, [pc, #360]	@ (8008a7c <PC_show_Keys+0x4e0>)
 8008912:	4b2b      	ldr	r3, [pc, #172]	@ (80089c0 <PC_show_Keys+0x424>)
 8008914:	0011      	movs	r1, r2
 8008916:	0018      	movs	r0, r3
 8008918:	f7fc fc88 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id ---: %s\r\n", Buffer);
 800891c:	4a28      	ldr	r2, [pc, #160]	@ (80089c0 <PC_show_Keys+0x424>)
 800891e:	4959      	ldr	r1, [pc, #356]	@ (8008a84 <PC_show_Keys+0x4e8>)
 8008920:	4b24      	ldr	r3, [pc, #144]	@ (80089b4 <PC_show_Keys+0x418>)
 8008922:	0018      	movs	r0, r3
 8008924:	f01d f8d8 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008928:	4b20      	ldr	r3, [pc, #128]	@ (80089ac <PC_show_Keys+0x410>)
 800892a:	781a      	ldrb	r2, [r3, #0]
 800892c:	4b21      	ldr	r3, [pc, #132]	@ (80089b4 <PC_show_Keys+0x418>)
 800892e:	0011      	movs	r1, r2
 8008930:	0018      	movs	r0, r3
 8008932:	f7ff fe18 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008936:	4b54      	ldr	r3, [pc, #336]	@ (8008a88 <PC_show_Keys+0x4ec>)
 8008938:	4854      	ldr	r0, [pc, #336]	@ (8008a8c <PC_show_Keys+0x4f0>)
 800893a:	220c      	movs	r2, #12
 800893c:	0019      	movs	r1, r3
 800893e:	f002 fff7 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008942:	4a51      	ldr	r2, [pc, #324]	@ (8008a88 <PC_show_Keys+0x4ec>)
 8008944:	4b1e      	ldr	r3, [pc, #120]	@ (80089c0 <PC_show_Keys+0x424>)
 8008946:	0011      	movs	r1, r2
 8008948:	0018      	movs	r0, r3
 800894a:	f7fc fc6f 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ------: %s\r\n", Buffer);
 800894e:	4a1c      	ldr	r2, [pc, #112]	@ (80089c0 <PC_show_Keys+0x424>)
 8008950:	494f      	ldr	r1, [pc, #316]	@ (8008a90 <PC_show_Keys+0x4f4>)
 8008952:	4b18      	ldr	r3, [pc, #96]	@ (80089b4 <PC_show_Keys+0x418>)
 8008954:	0018      	movs	r0, r3
 8008956:	f01d f8bf 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800895a:	4b14      	ldr	r3, [pc, #80]	@ (80089ac <PC_show_Keys+0x410>)
 800895c:	781a      	ldrb	r2, [r3, #0]
 800895e:	4b15      	ldr	r3, [pc, #84]	@ (80089b4 <PC_show_Keys+0x418>)
 8008960:	0011      	movs	r1, r2
 8008962:	0018      	movs	r0, r3
 8008964:	f7ff fdff 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008968:	4b4a      	ldr	r3, [pc, #296]	@ (8008a94 <PC_show_Keys+0x4f8>)
 800896a:	484b      	ldr	r0, [pc, #300]	@ (8008a98 <PC_show_Keys+0x4fc>)
 800896c:	220c      	movs	r2, #12
 800896e:	0019      	movs	r1, r3
 8008970:	f002 ffde 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008974:	4a47      	ldr	r2, [pc, #284]	@ (8008a94 <PC_show_Keys+0x4f8>)
 8008976:	4b12      	ldr	r3, [pc, #72]	@ (80089c0 <PC_show_Keys+0x424>)
 8008978:	0011      	movs	r1, r2
 800897a:	0018      	movs	r0, r3
 800897c:	f7fc fc56 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id --: %s\r\n", Buffer);
 8008980:	4a0f      	ldr	r2, [pc, #60]	@ (80089c0 <PC_show_Keys+0x424>)
 8008982:	4946      	ldr	r1, [pc, #280]	@ (8008a9c <PC_show_Keys+0x500>)
 8008984:	4b0b      	ldr	r3, [pc, #44]	@ (80089b4 <PC_show_Keys+0x418>)
 8008986:	0018      	movs	r0, r3
 8008988:	f01d f8a6 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800898c:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <PC_show_Keys+0x410>)
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	4b08      	ldr	r3, [pc, #32]	@ (80089b4 <PC_show_Keys+0x418>)
 8008992:	0011      	movs	r1, r2
 8008994:	0018      	movs	r0, r3
 8008996:	f7ff fde6 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 800899a:	4b41      	ldr	r3, [pc, #260]	@ (8008aa0 <PC_show_Keys+0x504>)
 800899c:	4841      	ldr	r0, [pc, #260]	@ (8008aa4 <PC_show_Keys+0x508>)
 800899e:	220c      	movs	r2, #12
 80089a0:	0019      	movs	r1, r3
 80089a2:	f002 ffc5 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 80089a6:	4a3e      	ldr	r2, [pc, #248]	@ (8008aa0 <PC_show_Keys+0x504>)
 80089a8:	e07e      	b.n	8008aa8 <PC_show_Keys+0x50c>
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	200009a9 	.word	0x200009a9
 80089b0:	0802b45c 	.word	0x0802b45c
 80089b4:	200009ac 	.word	0x200009ac
 80089b8:	200009f4 	.word	0x200009f4
 80089bc:	08080000 	.word	0x08080000
 80089c0:	20000a00 	.word	0x20000a00
 80089c4:	0802b478 	.word	0x0802b478
 80089c8:	20000a1c 	.word	0x20000a1c
 80089cc:	0808000c 	.word	0x0808000c
 80089d0:	0802b4a4 	.word	0x0802b4a4
 80089d4:	20000a28 	.word	0x20000a28
 80089d8:	08080018 	.word	0x08080018
 80089dc:	0802b4d0 	.word	0x0802b4d0
 80089e0:	20000a34 	.word	0x20000a34
 80089e4:	08080024 	.word	0x08080024
 80089e8:	0802b4fc 	.word	0x0802b4fc
 80089ec:	20000a40 	.word	0x20000a40
 80089f0:	08080030 	.word	0x08080030
 80089f4:	0802b528 	.word	0x0802b528
 80089f8:	20000a4c 	.word	0x20000a4c
 80089fc:	0808003c 	.word	0x0808003c
 8008a00:	0802b554 	.word	0x0802b554
 8008a04:	0802b570 	.word	0x0802b570
 8008a08:	20000a58 	.word	0x20000a58
 8008a0c:	08080048 	.word	0x08080048
 8008a10:	0802b59c 	.word	0x0802b59c
 8008a14:	0802b5b0 	.word	0x0802b5b0
 8008a18:	20000a64 	.word	0x20000a64
 8008a1c:	08080054 	.word	0x08080054
 8008a20:	0802b5dc 	.word	0x0802b5dc
 8008a24:	20000a70 	.word	0x20000a70
 8008a28:	08080060 	.word	0x08080060
 8008a2c:	0802b608 	.word	0x0802b608
 8008a30:	20000a7c 	.word	0x20000a7c
 8008a34:	0808006c 	.word	0x0808006c
 8008a38:	0802b634 	.word	0x0802b634
 8008a3c:	20000a88 	.word	0x20000a88
 8008a40:	08080078 	.word	0x08080078
 8008a44:	0802b660 	.word	0x0802b660
 8008a48:	20000a94 	.word	0x20000a94
 8008a4c:	08080084 	.word	0x08080084
 8008a50:	0802b68c 	.word	0x0802b68c
 8008a54:	20000aa0 	.word	0x20000aa0
 8008a58:	08080090 	.word	0x08080090
 8008a5c:	0802b6b8 	.word	0x0802b6b8
 8008a60:	0802b6e0 	.word	0x0802b6e0
 8008a64:	20000ac0 	.word	0x20000ac0
 8008a68:	080800b0 	.word	0x080800b0
 8008a6c:	0802b6e8 	.word	0x0802b6e8
 8008a70:	20000acc 	.word	0x20000acc
 8008a74:	080800bc 	.word	0x080800bc
 8008a78:	0802b714 	.word	0x0802b714
 8008a7c:	20000ad8 	.word	0x20000ad8
 8008a80:	080800c8 	.word	0x080800c8
 8008a84:	0802b740 	.word	0x0802b740
 8008a88:	20000ae4 	.word	0x20000ae4
 8008a8c:	080800d4 	.word	0x080800d4
 8008a90:	0802b76c 	.word	0x0802b76c
 8008a94:	20000af0 	.word	0x20000af0
 8008a98:	080800e0 	.word	0x080800e0
 8008a9c:	0802b798 	.word	0x0802b798
 8008aa0:	20000afc 	.word	0x20000afc
 8008aa4:	080800ec 	.word	0x080800ec
 8008aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8008c20 <PC_show_Keys+0x684>)
 8008aaa:	0011      	movs	r1, r2
 8008aac:	0018      	movs	r0, r3
 8008aae:	f7fc fbbd 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id ----------: %s\r\n", Buffer);
 8008ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8008c20 <PC_show_Keys+0x684>)
 8008ab4:	495b      	ldr	r1, [pc, #364]	@ (8008c24 <PC_show_Keys+0x688>)
 8008ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008ab8:	0018      	movs	r0, r3
 8008aba:	f01d f80d 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008abe:	4b5b      	ldr	r3, [pc, #364]	@ (8008c2c <PC_show_Keys+0x690>)
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	4b59      	ldr	r3, [pc, #356]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008ac4:	0011      	movs	r1, r2
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f7ff fd4d 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008acc:	4b58      	ldr	r3, [pc, #352]	@ (8008c30 <PC_show_Keys+0x694>)
 8008ace:	4859      	ldr	r0, [pc, #356]	@ (8008c34 <PC_show_Keys+0x698>)
 8008ad0:	220c      	movs	r2, #12
 8008ad2:	0019      	movs	r1, r3
 8008ad4:	f002 ff2c 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008ad8:	4a55      	ldr	r2, [pc, #340]	@ (8008c30 <PC_show_Keys+0x694>)
 8008ada:	4b51      	ldr	r3, [pc, #324]	@ (8008c20 <PC_show_Keys+0x684>)
 8008adc:	0011      	movs	r1, r2
 8008ade:	0018      	movs	r0, r3
 8008ae0:	f7fc fba4 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ---------: %s\r\n", Buffer);
 8008ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8008c20 <PC_show_Keys+0x684>)
 8008ae6:	4954      	ldr	r1, [pc, #336]	@ (8008c38 <PC_show_Keys+0x69c>)
 8008ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008aea:	0018      	movs	r0, r3
 8008aec:	f01c fff4 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008af0:	4b4e      	ldr	r3, [pc, #312]	@ (8008c2c <PC_show_Keys+0x690>)
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	4b4c      	ldr	r3, [pc, #304]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008af6:	0011      	movs	r1, r2
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7ff fd34 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8008afe:	4b4f      	ldr	r3, [pc, #316]	@ (8008c3c <PC_show_Keys+0x6a0>)
 8008b00:	484f      	ldr	r0, [pc, #316]	@ (8008c40 <PC_show_Keys+0x6a4>)
 8008b02:	220c      	movs	r2, #12
 8008b04:	0019      	movs	r1, r3
 8008b06:	f002 ff13 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8008b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8008c3c <PC_show_Keys+0x6a0>)
 8008b0c:	4b44      	ldr	r3, [pc, #272]	@ (8008c20 <PC_show_Keys+0x684>)
 8008b0e:	0011      	movs	r1, r2
 8008b10:	0018      	movs	r0, r3
 8008b12:	f7fc fb8b 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ---------: %s\r\n", Buffer);
 8008b16:	4a42      	ldr	r2, [pc, #264]	@ (8008c20 <PC_show_Keys+0x684>)
 8008b18:	494a      	ldr	r1, [pc, #296]	@ (8008c44 <PC_show_Keys+0x6a8>)
 8008b1a:	4b43      	ldr	r3, [pc, #268]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f01c ffdb 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b22:	4b42      	ldr	r3, [pc, #264]	@ (8008c2c <PC_show_Keys+0x690>)
 8008b24:	781a      	ldrb	r2, [r3, #0]
 8008b26:	4b40      	ldr	r3, [pc, #256]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008b28:	0011      	movs	r1, r2
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f7ff fd1b 	bl	8008566 <PC_selectout>

  sprintf(msg, "21 & 22 - Are interactive not supported\r\n");
 8008b30:	4a45      	ldr	r2, [pc, #276]	@ (8008c48 <PC_show_Keys+0x6ac>)
 8008b32:	4b3d      	ldr	r3, [pc, #244]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008b34:	0011      	movs	r1, r2
 8008b36:	0018      	movs	r0, r3
 8008b38:	f01c ffce 	bl	8025ad8 <siprintf>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8008b3c:	4b43      	ldr	r3, [pc, #268]	@ (8008c4c <PC_show_Keys+0x6b0>)
 8008b3e:	4844      	ldr	r0, [pc, #272]	@ (8008c50 <PC_show_Keys+0x6b4>)
 8008b40:	220c      	movs	r2, #12
 8008b42:	0019      	movs	r1, r3
 8008b44:	f002 fef4 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 8008b48:	4a40      	ldr	r2, [pc, #256]	@ (8008c4c <PC_show_Keys+0x6b0>)
 8008b4a:	4b35      	ldr	r3, [pc, #212]	@ (8008c20 <PC_show_Keys+0x684>)
 8008b4c:	0011      	movs	r1, r2
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f7fc fb6c 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "23 - SEN54/55 Temperature sensor id : %s\r\n", Buffer);
 8008b54:	4a32      	ldr	r2, [pc, #200]	@ (8008c20 <PC_show_Keys+0x684>)
 8008b56:	493f      	ldr	r1, [pc, #252]	@ (8008c54 <PC_show_Keys+0x6b8>)
 8008b58:	4b33      	ldr	r3, [pc, #204]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f01c ffbc 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b60:	4b32      	ldr	r3, [pc, #200]	@ (8008c2c <PC_show_Keys+0x690>)
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	4b30      	ldr	r3, [pc, #192]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008b66:	0011      	movs	r1, r2
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f7ff fcfc 	bl	8008566 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8008b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c58 <PC_show_Keys+0x6bc>)
 8008b70:	483a      	ldr	r0, [pc, #232]	@ (8008c5c <PC_show_Keys+0x6c0>)
 8008b72:	220c      	movs	r2, #12
 8008b74:	0019      	movs	r1, r3
 8008b76:	f002 fedb 	bl	800b930 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8008b7a:	4a37      	ldr	r2, [pc, #220]	@ (8008c58 <PC_show_Keys+0x6bc>)
 8008b7c:	4b28      	ldr	r3, [pc, #160]	@ (8008c20 <PC_show_Keys+0x684>)
 8008b7e:	0011      	movs	r1, r2
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7fc fb53 	bl	800522c <uint8ArrayToString>
  sprintf(msg, "24 - SEN54/55 Humidity sensor id ---: %s\r\n", Buffer);
 8008b86:	4a26      	ldr	r2, [pc, #152]	@ (8008c20 <PC_show_Keys+0x684>)
 8008b88:	4935      	ldr	r1, [pc, #212]	@ (8008c60 <PC_show_Keys+0x6c4>)
 8008b8a:	4b27      	ldr	r3, [pc, #156]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f01c ffa3 	bl	8025ad8 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b92:	4b26      	ldr	r3, [pc, #152]	@ (8008c2c <PC_show_Keys+0x690>)
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	4b24      	ldr	r3, [pc, #144]	@ (8008c28 <PC_show_Keys+0x68c>)
 8008b98:	0011      	movs	r1, r2
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f7ff fce3 	bl	8008566 <PC_selectout>
  uint8ArrayToString(Buffer, UptimeConfig);
  sprintf(msg, "25 - Uptime sensor id --------------: %s\r\n", Buffer);
  PC_selectout(&msg[0], usb_out);
#endif

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8008ba0:	4b30      	ldr	r3, [pc, #192]	@ (8008c64 <PC_show_Keys+0x6c8>)
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7ff fcba 	bl	800851c <printf_USB>
  HAL_Delay(10);
 8008ba8:	200a      	movs	r0, #10
 8008baa:	f00b f9ed 	bl	8013f88 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8008bae:	4b2e      	ldr	r3, [pc, #184]	@ (8008c68 <PC_show_Keys+0x6cc>)
 8008bb0:	0018      	movs	r0, r3
 8008bb2:	f7ff fcb3 	bl	800851c <printf_USB>
  HAL_Delay(10);
 8008bb6:	200a      	movs	r0, #10
 8008bb8:	f00b f9e6 	bl	8013f88 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 8008bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8008c6c <PC_show_Keys+0x6d0>)
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f7ff fcac 	bl	800851c <printf_USB>
  HAL_Delay(10);
 8008bc4:	200a      	movs	r0, #10
 8008bc6:	f00b f9df 	bl	8013f88 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8008bca:	4b29      	ldr	r3, [pc, #164]	@ (8008c70 <PC_show_Keys+0x6d4>)
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f7ff fca5 	bl	800851c <printf_USB>
  HAL_Delay(10);
 8008bd2:	200a      	movs	r0, #10
 8008bd4:	f00b f9d8 	bl	8013f88 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8008bd8:	4b26      	ldr	r3, [pc, #152]	@ (8008c74 <PC_show_Keys+0x6d8>)
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f7ff fc9e 	bl	800851c <printf_USB>
  HAL_Delay(10);
 8008be0:	200a      	movs	r0, #10
 8008be2:	f00b f9d1 	bl	8013f88 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8008be6:	4b24      	ldr	r3, [pc, #144]	@ (8008c78 <PC_show_Keys+0x6dc>)
 8008be8:	0018      	movs	r0, r3
 8008bea:	f7ff fc97 	bl	800851c <printf_USB>
  HAL_Delay(10);
 8008bee:	200a      	movs	r0, #10
 8008bf0:	f00b f9ca 	bl	8013f88 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 8008bf4:	4b21      	ldr	r3, [pc, #132]	@ (8008c7c <PC_show_Keys+0x6e0>)
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	f7ff fc90 	bl	800851c <printf_USB>
  HAL_Delay(10);
 8008bfc:	200a      	movs	r0, #10
 8008bfe:	f00b f9c3 	bl	8013f88 <HAL_Delay>
  if (!usb_out) {
 8008c02:	4b0a      	ldr	r3, [pc, #40]	@ (8008c2c <PC_show_Keys+0x690>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2201      	movs	r2, #1
 8008c08:	4053      	eors	r3, r2
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <PC_show_Keys+0x67c>
    printf("A key can only be changed by USB input or the by configuration programm.\r\n");
 8008c10:	4b1b      	ldr	r3, [pc, #108]	@ (8008c80 <PC_show_Keys+0x6e4>)
 8008c12:	0018      	movs	r0, r3
 8008c14:	f01c ff56 	bl	8025ac4 <puts>
  }
}
 8008c18:	46c0      	nop			@ (mov r8, r8)
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	46c0      	nop			@ (mov r8, r8)
 8008c20:	20000a00 	.word	0x20000a00
 8008c24:	0802b7c4 	.word	0x0802b7c4
 8008c28:	200009ac 	.word	0x200009ac
 8008c2c:	200009a9 	.word	0x200009a9
 8008c30:	20000b08 	.word	0x20000b08
 8008c34:	080800f8 	.word	0x080800f8
 8008c38:	0802b7f0 	.word	0x0802b7f0
 8008c3c:	20000b14 	.word	0x20000b14
 8008c40:	08080104 	.word	0x08080104
 8008c44:	0802b81c 	.word	0x0802b81c
 8008c48:	0802b848 	.word	0x0802b848
 8008c4c:	20000b20 	.word	0x20000b20
 8008c50:	08080170 	.word	0x08080170
 8008c54:	0802b874 	.word	0x0802b874
 8008c58:	20000b2c 	.word	0x20000b2c
 8008c5c:	0808017c 	.word	0x0808017c
 8008c60:	0802b8a0 	.word	0x0802b8a0
 8008c64:	0802b8cc 	.word	0x0802b8cc
 8008c68:	0802b8e4 	.word	0x0802b8e4
 8008c6c:	0802b910 	.word	0x0802b910
 8008c70:	0802b940 	.word	0x0802b940
 8008c74:	0802b97c 	.word	0x0802b97c
 8008c78:	0802b9b4 	.word	0x0802b9b4
 8008c7c:	0802b9e8 	.word	0x0802b9e8
 8008c80:	0802ba08 	.word	0x0802ba08

08008c84 <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	4b20      	ldr	r3, [pc, #128]	@ (8008d14 <ascii_to_uint8+0x90>)
 8008c94:	18d3      	adds	r3, r2, r3
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	001a      	movs	r2, r3
 8008c9a:	2304      	movs	r3, #4
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	d00a      	beq.n	8008cb6 <ascii_to_uint8+0x32>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d14 <ascii_to_uint8+0x90>)
 8008caa:	18d3      	adds	r3, r2, r3
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	001a      	movs	r2, r3
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	d105      	bne.n	8008cc2 <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 8008cb6:	4b18      	ldr	r3, [pc, #96]	@ (8008d18 <ascii_to_uint8+0x94>)
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7ff fc2f 	bl	800851c <printf_USB>
    return 100;
 8008cbe:	2364      	movs	r3, #100	@ 0x64
 8008cc0:	e024      	b.n	8008d0c <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	1c1a      	adds	r2, r3, #0
 8008cc8:	0092      	lsls	r2, r2, #2
 8008cca:	18d3      	adds	r3, r2, r3
 8008ccc:	18db      	adds	r3, r3, r3
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	18d3      	adds	r3, r2, r3
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	210f      	movs	r1, #15
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	3a10      	subs	r2, #16
 8008ce0:	701a      	strb	r2, [r3, #0]
#ifndef PUBLIC
  if (value > 25 || value == 21 || value == 22) {
#else
  if (value > 24 || value == 21 || value == 22) {
 8008ce2:	187b      	adds	r3, r7, r1
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b18      	cmp	r3, #24
 8008ce8:	d807      	bhi.n	8008cfa <ascii_to_uint8+0x76>
 8008cea:	187b      	adds	r3, r7, r1
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	2b15      	cmp	r3, #21
 8008cf0:	d003      	beq.n	8008cfa <ascii_to_uint8+0x76>
 8008cf2:	187b      	adds	r3, r7, r1
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b16      	cmp	r3, #22
 8008cf8:	d105      	bne.n	8008d06 <ascii_to_uint8+0x82>
#endif
    printf_USB("Error: value out of range\r\n");
 8008cfa:	4b08      	ldr	r3, [pc, #32]	@ (8008d1c <ascii_to_uint8+0x98>)
 8008cfc:	0018      	movs	r0, r3
 8008cfe:	f7ff fc0d 	bl	800851c <printf_USB>
    return 100;
 8008d02:	2364      	movs	r3, #100	@ 0x64
 8008d04:	e002      	b.n	8008d0c <ascii_to_uint8+0x88>
  }
  return (uint8_t)value;
 8008d06:	230f      	movs	r3, #15
 8008d08:	18fb      	adds	r3, r7, r3
 8008d0a:	781b      	ldrb	r3, [r3, #0]
}
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	b004      	add	sp, #16
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	0802ea78 	.word	0x0802ea78
 8008d18:	0802ba54 	.word	0x0802ba54
 8008d1c:	0802ba7c 	.word	0x0802ba7c

08008d20 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8008d20:	b590      	push	{r4, r7, lr}
 8008d22:	b0d1      	sub	sp, #324	@ 0x144
 8008d24:	af3e      	add	r7, sp, #248	@ 0xf8
 8008d26:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8008d28:	f019 fcfa 	bl	8022720 <GetUsbRxDataSize>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t r = 0;
 8008d30:	2347      	movs	r3, #71	@ 0x47
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	2200      	movs	r2, #0
 8008d36:	701a      	strb	r2, [r3, #0]
  char Buffer[25];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2124      	movs	r1, #36	@ 0x24
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f01d f83d 	bl	8025dbc <strchr>
 8008d42:	0003      	movs	r3, r0
 8008d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((length == 1) && (message != NULL) && (len != 28)){
 8008d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d10f      	bne.n	8008d6c <Process_USB_input+0x4c>
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00c      	beq.n	8008d6c <Process_USB_input+0x4c>
 8008d52:	4bdb      	ldr	r3, [pc, #876]	@ (80090c0 <Process_USB_input+0x3a0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b1c      	cmp	r3, #28
 8008d58:	d008      	beq.n	8008d6c <Process_USB_input+0x4c>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 8008d5a:	4ada      	ldr	r2, [pc, #872]	@ (80090c4 <Process_USB_input+0x3a4>)
 8008d5c:	4bda      	ldr	r3, [pc, #872]	@ (80090c8 <Process_USB_input+0x3a8>)
 8008d5e:	0019      	movs	r1, r3
 8008d60:	2003      	movs	r0, #3
 8008d62:	f00a fb85 	bl	8013470 <CreateLine>
      len = 28;
 8008d66:	4bd6      	ldr	r3, [pc, #856]	@ (80090c0 <Process_USB_input+0x3a0>)
 8008d68:	221c      	movs	r2, #28
 8008d6a:	601a      	str	r2, [r3, #0]
  }
  if (length >= len) {
 8008d6c:	4bd4      	ldr	r3, [pc, #848]	@ (80090c0 <Process_USB_input+0x3a0>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d200      	bcs.n	8008d78 <Process_USB_input+0x58>
 8008d76:	e18c      	b.n	8009092 <Process_USB_input+0x372>
//    HAL_Delay(20);
    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4bd4      	ldr	r3, [pc, #848]	@ (80090cc <Process_USB_input+0x3ac>)
 8008d7c:	0011      	movs	r1, r2
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f7ff fbcc 	bl	800851c <printf_USB>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	4bd2      	ldr	r3, [pc, #840]	@ (80090d0 <Process_USB_input+0x3b0>)
 8008d88:	0011      	movs	r1, r2
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f7ff fbc6 	bl	800851c <printf_USB>
//    message = (unsigned char*)data;
//    message = data;
    if (data[0] == '$') {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b24      	cmp	r3, #36	@ 0x24
 8008d96:	d102      	bne.n	8008d9e <Process_USB_input+0x7e>
      len = 28;
 8008d98:	4bc9      	ldr	r3, [pc, #804]	@ (80090c0 <Process_USB_input+0x3a0>)
 8008d9a:	221c      	movs	r2, #28
 8008d9c:	601a      	str	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$')) {
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b23      	cmp	r3, #35	@ 0x23
 8008da4:	d004      	beq.n	8008db0 <Process_USB_input+0x90>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b24      	cmp	r3, #36	@ 0x24
 8008dac:	d000      	beq.n	8008db0 <Process_USB_input+0x90>
 8008dae:	e153      	b.n	8009058 <Process_USB_input+0x338>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3301      	adds	r3, #1
 8008db4:	0018      	movs	r0, r3
 8008db6:	f7ff ff65 	bl	8008c84 <ascii_to_uint8>
 8008dba:	0003      	movs	r3, r0
 8008dbc:	001a      	movs	r2, r3
 8008dbe:	4bc5      	ldr	r3, [pc, #788]	@ (80090d4 <Process_USB_input+0x3b4>)
 8008dc0:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 8008dc2:	4bc4      	ldr	r3, [pc, #784]	@ (80090d4 <Process_USB_input+0x3b4>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b64      	cmp	r3, #100	@ 0x64
 8008dc8:	d101      	bne.n	8008dce <Process_USB_input+0xae>
        return false; // value out of range
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e174      	b.n	80090b8 <Process_USB_input+0x398>
      }
      if (data[3] == ',') {
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3303      	adds	r3, #3
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b2c      	cmp	r3, #44	@ 0x2c
 8008dd6:	d000      	beq.n	8008dda <Process_USB_input+0xba>
 8008dd8:	e122      	b.n	8009020 <Process_USB_input+0x300>
        for (uint8_t i=4; i < len; i++) {
 8008dda:	2346      	movs	r3, #70	@ 0x46
 8008ddc:	18fb      	adds	r3, r7, r3
 8008dde:	2204      	movs	r2, #4
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	e0aa      	b.n	8008f3a <Process_USB_input+0x21a>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", data[i], i, r);
          HAL_Delay(10);
 8008de4:	200a      	movs	r0, #10
 8008de6:	f00b f8cf 	bl	8013f88 <HAL_Delay>
          if (isxdigit(data[i])) {
 8008dea:	2146      	movs	r1, #70	@ 0x46
 8008dec:	187b      	adds	r3, r7, r1
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	18d3      	adds	r3, r2, r3
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	4bb7      	ldr	r3, [pc, #732]	@ (80090d8 <Process_USB_input+0x3b8>)
 8008dfa:	18d3      	adds	r3, r2, r3
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	001a      	movs	r2, r3
 8008e00:	2344      	movs	r3, #68	@ 0x44
 8008e02:	4013      	ands	r3, r2
 8008e04:	d06a      	beq.n	8008edc <Process_USB_input+0x1bc>
            result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8008e06:	4bb5      	ldr	r3, [pc, #724]	@ (80090dc <Process_USB_input+0x3bc>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b25b      	sxtb	r3, r3
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	b25a      	sxtb	r2, r3
 8008e10:	0008      	movs	r0, r1
 8008e12:	187b      	adds	r3, r7, r1
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	18cb      	adds	r3, r1, r3
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	1c59      	adds	r1, r3, #1
 8008e1e:	4bae      	ldr	r3, [pc, #696]	@ (80090d8 <Process_USB_input+0x3b8>)
 8008e20:	18cb      	adds	r3, r1, r3
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	0019      	movs	r1, r3
 8008e26:	2304      	movs	r3, #4
 8008e28:	400b      	ands	r3, r1
 8008e2a:	d008      	beq.n	8008e3e <Process_USB_input+0x11e>
 8008e2c:	183b      	adds	r3, r7, r0
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	18cb      	adds	r3, r1, r3
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	3b30      	subs	r3, #48	@ 0x30
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	e01e      	b.n	8008e7c <Process_USB_input+0x15c>
 8008e3e:	2346      	movs	r3, #70	@ 0x46
 8008e40:	18fb      	adds	r3, r7, r3
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	18c9      	adds	r1, r1, r3
 8008e48:	2037      	movs	r0, #55	@ 0x37
 8008e4a:	183b      	adds	r3, r7, r0
 8008e4c:	7809      	ldrb	r1, [r1, #0]
 8008e4e:	7019      	strb	r1, [r3, #0]
 8008e50:	183b      	adds	r3, r7, r0
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	1c59      	adds	r1, r3, #1
 8008e56:	4ba0      	ldr	r3, [pc, #640]	@ (80090d8 <Process_USB_input+0x3b8>)
 8008e58:	18cb      	adds	r3, r1, r3
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	0019      	movs	r1, r3
 8008e5e:	2303      	movs	r3, #3
 8008e60:	400b      	ands	r3, r1
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d103      	bne.n	8008e6e <Process_USB_input+0x14e>
 8008e66:	183b      	adds	r3, r7, r0
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	3b20      	subs	r3, #32
 8008e6c:	e002      	b.n	8008e74 <Process_USB_input+0x154>
 8008e6e:	2337      	movs	r3, #55	@ 0x37
 8008e70:	18fb      	adds	r3, r7, r3
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	3b37      	subs	r3, #55	@ 0x37
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	b25b      	sxtb	r3, r3
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	b25b      	sxtb	r3, r3
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	4b96      	ldr	r3, [pc, #600]	@ (80090dc <Process_USB_input+0x3bc>)
 8008e84:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%02X\r\n", result);
            HAL_Delay(10);
 8008e86:	200a      	movs	r0, #10
 8008e88:	f00b f87e 	bl	8013f88 <HAL_Delay>
            if (len == 28) {
 8008e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80090c0 <Process_USB_input+0x3a0>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b1c      	cmp	r3, #28
 8008e92:	d14c      	bne.n	8008f2e <Process_USB_input+0x20e>
              if ((i % 2) == 1) {
 8008e94:	2346      	movs	r3, #70	@ 0x46
 8008e96:	18fb      	adds	r3, r7, r3
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d044      	beq.n	8008f2e <Process_USB_input+0x20e>
                data[r] = result;
 8008ea4:	2447      	movs	r4, #71	@ 0x47
 8008ea6:	193b      	adds	r3, r7, r4
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	18d3      	adds	r3, r2, r3
 8008eae:	4a8b      	ldr	r2, [pc, #556]	@ (80090dc <Process_USB_input+0x3bc>)
 8008eb0:	7812      	ldrb	r2, [r2, #0]
 8008eb2:	701a      	strb	r2, [r3, #0]
                Debug("data[%d] = 0x%02X",r, data[r]);
 8008eb4:	193b      	adds	r3, r7, r4
 8008eb6:	7818      	ldrb	r0, [r3, #0]
 8008eb8:	193b      	adds	r3, r7, r4
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	18d3      	adds	r3, r2, r3
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	4a87      	ldr	r2, [pc, #540]	@ (80090e0 <Process_USB_input+0x3c0>)
 8008ec4:	4980      	ldr	r1, [pc, #512]	@ (80090c8 <Process_USB_input+0x3a8>)
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	0003      	movs	r3, r0
 8008eca:	2003      	movs	r0, #3
 8008ecc:	f00a fad0 	bl	8013470 <CreateLine>
                r++;
 8008ed0:	193b      	adds	r3, r7, r4
 8008ed2:	781a      	ldrb	r2, [r3, #0]
 8008ed4:	193b      	adds	r3, r7, r4
 8008ed6:	3201      	adds	r2, #1
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e028      	b.n	8008f2e <Process_USB_input+0x20e>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", data[i], i);
 8008edc:	2046      	movs	r0, #70	@ 0x46
 8008ede:	183b      	adds	r3, r7, r0
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	18d3      	adds	r3, r2, r3
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	0019      	movs	r1, r3
 8008eea:	183b      	adds	r3, r7, r0
 8008eec:	781a      	ldrb	r2, [r3, #0]
 8008eee:	4b7d      	ldr	r3, [pc, #500]	@ (80090e4 <Process_USB_input+0x3c4>)
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f7ff fb13 	bl	800851c <printf_USB>
            ResetUsbRxDataSize();
 8008ef6:	f019 fbfb 	bl	80226f0 <ResetUsbRxDataSize>
            PC_show_Keys();
 8008efa:	f7ff fb4f 	bl	800859c <PC_show_Keys>
            for (uint8_t i=0; i < 32; i++) {
 8008efe:	2345      	movs	r3, #69	@ 0x45
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e00b      	b.n	8008f20 <Process_USB_input+0x200>
              data[i] = '\0';
 8008f08:	2145      	movs	r1, #69	@ 0x45
 8008f0a:	187b      	adds	r3, r7, r1
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	18d3      	adds	r3, r2, r3
 8008f12:	2200      	movs	r2, #0
 8008f14:	701a      	strb	r2, [r3, #0]
            for (uint8_t i=0; i < 32; i++) {
 8008f16:	187b      	adds	r3, r7, r1
 8008f18:	781a      	ldrb	r2, [r3, #0]
 8008f1a:	187b      	adds	r3, r7, r1
 8008f1c:	3201      	adds	r2, #1
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	2345      	movs	r3, #69	@ 0x45
 8008f22:	18fb      	adds	r3, r7, r3
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b1f      	cmp	r3, #31
 8008f28:	d9ee      	bls.n	8008f08 <Process_USB_input+0x1e8>
            }
            return false; // Of een andere foutwaarde
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e0c4      	b.n	80090b8 <Process_USB_input+0x398>
        for (uint8_t i=4; i < len; i++) {
 8008f2e:	2146      	movs	r1, #70	@ 0x46
 8008f30:	187b      	adds	r3, r7, r1
 8008f32:	781a      	ldrb	r2, [r3, #0]
 8008f34:	187b      	adds	r3, r7, r1
 8008f36:	3201      	adds	r2, #1
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	2346      	movs	r3, #70	@ 0x46
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	781a      	ldrb	r2, [r3, #0]
 8008f40:	4b5f      	ldr	r3, [pc, #380]	@ (80090c0 <Process_USB_input+0x3a0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d200      	bcs.n	8008f4a <Process_USB_input+0x22a>
 8008f48:	e74c      	b.n	8008de4 <Process_USB_input+0xc4>
          }
        }
        if (len == 6) {
 8008f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80090c0 <Process_USB_input+0x3a0>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	d114      	bne.n	8008f7c <Process_USB_input+0x25c>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008f52:	2428      	movs	r4, #40	@ 0x28
 8008f54:	193b      	adds	r3, r7, r4
 8008f56:	4864      	ldr	r0, [pc, #400]	@ (80090e8 <Process_USB_input+0x3c8>)
 8008f58:	220c      	movs	r2, #12
 8008f5a:	0019      	movs	r1, r3
 8008f5c:	f002 fce8 	bl	800b930 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte of the key
 8008f60:	4b5e      	ldr	r3, [pc, #376]	@ (80090dc <Process_USB_input+0x3bc>)
 8008f62:	781a      	ldrb	r2, [r3, #0]
 8008f64:	0021      	movs	r1, r4
 8008f66:	187b      	adds	r3, r7, r1
 8008f68:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8008f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80090d4 <Process_USB_input+0x3b4>)
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	1879      	adds	r1, r7, r1
 8008f70:	189b      	adds	r3, r3, r2
 8008f72:	220c      	movs	r2, #12
 8008f74:	0018      	movs	r0, r3
 8008f76:	f01c fff5 	bl	8025f64 <memcpy>
 8008f7a:	e005      	b.n	8008f88 <Process_USB_input+0x268>
        }
        else {
          memcpy(received.Payload, data, IdSize);
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80090ec <Process_USB_input+0x3cc>)
 8008f80:	220c      	movs	r2, #12
 8008f82:	0018      	movs	r0, r3
 8008f84:	f01c ffee 	bl	8025f64 <memcpy>
        }
        received.Payload[12] = '\0';
 8008f88:	4b52      	ldr	r3, [pc, #328]	@ (80090d4 <Process_USB_input+0x3b4>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	739a      	strb	r2, [r3, #14]
        received.PayloadLength = IdSize;
 8008f8e:	4b51      	ldr	r3, [pc, #324]	@ (80090d4 <Process_USB_input+0x3b4>)
 8008f90:	220c      	movs	r2, #12
 8008f92:	705a      	strb	r2, [r3, #1]
        Debug("first char of payload before conversion: %c", received.Payload[0]);
 8008f94:	4b4f      	ldr	r3, [pc, #316]	@ (80090d4 <Process_USB_input+0x3b4>)
 8008f96:	789b      	ldrb	r3, [r3, #2]
 8008f98:	4a55      	ldr	r2, [pc, #340]	@ (80090f0 <Process_USB_input+0x3d0>)
 8008f9a:	494b      	ldr	r1, [pc, #300]	@ (80090c8 <Process_USB_input+0x3a8>)
 8008f9c:	2003      	movs	r0, #3
 8008f9e:	f00a fa67 	bl	8013470 <CreateLine>
        uint8ArrayToString(Buffer, received.Payload);
 8008fa2:	4a52      	ldr	r2, [pc, #328]	@ (80090ec <Process_USB_input+0x3cc>)
 8008fa4:	240c      	movs	r4, #12
 8008fa6:	193b      	adds	r3, r7, r4
 8008fa8:	0011      	movs	r1, r2
 8008faa:	0018      	movs	r0, r3
 8008fac:	f7fc f93e 	bl	800522c <uint8ArrayToString>
        Debug("received Payload to write key %s", Buffer);
 8008fb0:	193b      	adds	r3, r7, r4
 8008fb2:	4a50      	ldr	r2, [pc, #320]	@ (80090f4 <Process_USB_input+0x3d4>)
 8008fb4:	4944      	ldr	r1, [pc, #272]	@ (80090c8 <Process_USB_input+0x3a8>)
 8008fb6:	2003      	movs	r0, #3
 8008fb8:	f00a fa5a 	bl	8013470 <CreateLine>
        Debug("first char of payload after conversion: %c", received.Payload[0]);
 8008fbc:	4b45      	ldr	r3, [pc, #276]	@ (80090d4 <Process_USB_input+0x3b4>)
 8008fbe:	789b      	ldrb	r3, [r3, #2]
 8008fc0:	4a4d      	ldr	r2, [pc, #308]	@ (80090f8 <Process_USB_input+0x3d8>)
 8008fc2:	4941      	ldr	r1, [pc, #260]	@ (80090c8 <Process_USB_input+0x3a8>)
 8008fc4:	2003      	movs	r0, #3
 8008fc6:	f00a fa53 	bl	8013470 <CreateLine>
        ProcessCmd(received);
 8008fca:	4c42      	ldr	r4, [pc, #264]	@ (80090d4 <Process_USB_input+0x3b4>)
 8008fcc:	466b      	mov	r3, sp
 8008fce:	0018      	movs	r0, r3
 8008fd0:	0023      	movs	r3, r4
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	22f4      	movs	r2, #244	@ 0xf4
 8008fd6:	0019      	movs	r1, r3
 8008fd8:	f01c ffc4 	bl	8025f64 <memcpy>
 8008fdc:	6820      	ldr	r0, [r4, #0]
 8008fde:	6861      	ldr	r1, [r4, #4]
 8008fe0:	68a2      	ldr	r2, [r4, #8]
 8008fe2:	68e3      	ldr	r3, [r4, #12]
 8008fe4:	f7ff f86e 	bl	80080c4 <ProcessCmd>
        ResetUsbRxDataSize();
 8008fe8:	f019 fb82 	bl	80226f0 <ResetUsbRxDataSize>
        PC_show_Keys();
 8008fec:	f7ff fad6 	bl	800859c <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8008ff0:	2344      	movs	r3, #68	@ 0x44
 8008ff2:	18fb      	adds	r3, r7, r3
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	701a      	strb	r2, [r3, #0]
 8008ff8:	e00b      	b.n	8009012 <Process_USB_input+0x2f2>
          data[i] = '\0';
 8008ffa:	2144      	movs	r1, #68	@ 0x44
 8008ffc:	187b      	adds	r3, r7, r1
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	18d3      	adds	r3, r2, r3
 8009004:	2200      	movs	r2, #0
 8009006:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009008:	187b      	adds	r3, r7, r1
 800900a:	781a      	ldrb	r2, [r3, #0]
 800900c:	187b      	adds	r3, r7, r1
 800900e:	3201      	adds	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	2344      	movs	r3, #68	@ 0x44
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b1f      	cmp	r3, #31
 800901a:	d9ee      	bls.n	8008ffa <Process_USB_input+0x2da>
        }
        return true;
 800901c:	2301      	movs	r3, #1
 800901e:	e04b      	b.n	80090b8 <Process_USB_input+0x398>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8009020:	4b36      	ldr	r3, [pc, #216]	@ (80090fc <Process_USB_input+0x3dc>)
 8009022:	0018      	movs	r0, r3
 8009024:	f7ff fa7a 	bl	800851c <printf_USB>
        ResetUsbRxDataSize();
 8009028:	f019 fb62 	bl	80226f0 <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 800902c:	2343      	movs	r3, #67	@ 0x43
 800902e:	18fb      	adds	r3, r7, r3
 8009030:	2200      	movs	r2, #0
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	e00b      	b.n	800904e <Process_USB_input+0x32e>
          data[i] = '\0';
 8009036:	2143      	movs	r1, #67	@ 0x43
 8009038:	187b      	adds	r3, r7, r1
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	18d3      	adds	r3, r2, r3
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009044:	187b      	adds	r3, r7, r1
 8009046:	781a      	ldrb	r2, [r3, #0]
 8009048:	187b      	adds	r3, r7, r1
 800904a:	3201      	adds	r2, #1
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	2343      	movs	r3, #67	@ 0x43
 8009050:	18fb      	adds	r3, r7, r3
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b1f      	cmp	r3, #31
 8009056:	d9ee      	bls.n	8009036 <Process_USB_input+0x316>
        }
      }
    }
//    else {
    len = 6;
 8009058:	4b19      	ldr	r3, [pc, #100]	@ (80090c0 <Process_USB_input+0x3a0>)
 800905a:	2206      	movs	r2, #6
 800905c:	601a      	str	r2, [r3, #0]
    PC_show_Keys();
 800905e:	f7ff fa9d 	bl	800859c <PC_show_Keys>
    ResetUsbRxDataSize();
 8009062:	f019 fb45 	bl	80226f0 <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < 32; i++) {
 8009066:	2342      	movs	r3, #66	@ 0x42
 8009068:	18fb      	adds	r3, r7, r3
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
 800906e:	e00b      	b.n	8009088 <Process_USB_input+0x368>
      data[i] = '\0';
 8009070:	2142      	movs	r1, #66	@ 0x42
 8009072:	187b      	adds	r3, r7, r1
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	18d3      	adds	r3, r2, r3
 800907a:	2200      	movs	r2, #0
 800907c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 800907e:	187b      	adds	r3, r7, r1
 8009080:	781a      	ldrb	r2, [r3, #0]
 8009082:	187b      	adds	r3, r7, r1
 8009084:	3201      	adds	r2, #1
 8009086:	701a      	strb	r2, [r3, #0]
 8009088:	2342      	movs	r3, #66	@ 0x42
 800908a:	18fb      	adds	r3, r7, r3
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b1f      	cmp	r3, #31
 8009090:	d9ee      	bls.n	8009070 <Process_USB_input+0x350>
    }
  }
  if (formerlength != length) {
 8009092:	4b1b      	ldr	r3, [pc, #108]	@ (8009100 <Process_USB_input+0x3e0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009098:	429a      	cmp	r2, r3
 800909a:	d008      	beq.n	80090ae <Process_USB_input+0x38e>
    printf_USB("USB input: %s\r", (const char*)data);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	4b19      	ldr	r3, [pc, #100]	@ (8009104 <Process_USB_input+0x3e4>)
 80090a0:	0011      	movs	r1, r2
 80090a2:	0018      	movs	r0, r3
 80090a4:	f7ff fa3a 	bl	800851c <printf_USB>
    formerlength = length;
 80090a8:	4b15      	ldr	r3, [pc, #84]	@ (8009100 <Process_USB_input+0x3e0>)
 80090aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090ac:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 80090ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b0:	0018      	movs	r0, r3
 80090b2:	f019 fb3f 	bl	8022734 <GetUsbRxNextChunk>

  return false;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	0018      	movs	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b013      	add	sp, #76	@ 0x4c
 80090be:	bd90      	pop	{r4, r7, pc}
 80090c0:	20000030 	.word	0x20000030
 80090c4:	0802ba98 	.word	0x0802ba98
 80090c8:	0802bad8 	.word	0x0802bad8
 80090cc:	0802badc 	.word	0x0802badc
 80090d0:	0802bb08 	.word	0x0802bb08
 80090d4:	20000798 	.word	0x20000798
 80090d8:	0802ea78 	.word	0x0802ea78
 80090dc:	2000089c 	.word	0x2000089c
 80090e0:	0802bb18 	.word	0x0802bb18
 80090e4:	0802bb2c 	.word	0x0802bb2c
 80090e8:	08080000 	.word	0x08080000
 80090ec:	2000079a 	.word	0x2000079a
 80090f0:	0802bb64 	.word	0x0802bb64
 80090f4:	0802bb90 	.word	0x0802bb90
 80090f8:	0802bbb4 	.word	0x0802bbb4
 80090fc:	0802bbe0 	.word	0x0802bbe0
 8009100:	200008a0 	.word	0x200008a0
 8009104:	0802bc0c 	.word	0x0802bc0c

08009108 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 800910c:	4b26      	ldr	r3, [pc, #152]	@ (80091a8 <ReadBatteryVoltage+0xa0>)
 800910e:	4a27      	ldr	r2, [pc, #156]	@ (80091ac <ReadBatteryVoltage+0xa4>)
 8009110:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009112:	4b25      	ldr	r3, [pc, #148]	@ (80091a8 <ReadBatteryVoltage+0xa0>)
 8009114:	2280      	movs	r2, #128	@ 0x80
 8009116:	0152      	lsls	r2, r2, #5
 8009118:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800911a:	4a23      	ldr	r2, [pc, #140]	@ (80091a8 <ReadBatteryVoltage+0xa0>)
 800911c:	4b24      	ldr	r3, [pc, #144]	@ (80091b0 <ReadBatteryVoltage+0xa8>)
 800911e:	0011      	movs	r1, r2
 8009120:	0018      	movs	r0, r3
 8009122:	f00b f9ff 	bl	8014524 <HAL_ADC_ConfigChannel>
 8009126:	1e03      	subs	r3, r0, #0
 8009128:	d001      	beq.n	800912e <ReadBatteryVoltage+0x26>
    Error_Handler();
 800912a:	f003 fd0d 	bl	800cb48 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800912e:	4b20      	ldr	r3, [pc, #128]	@ (80091b0 <ReadBatteryVoltage+0xa8>)
 8009130:	0018      	movs	r0, r3
 8009132:	f00b f8fb 	bl	801432c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009136:	4b1e      	ldr	r3, [pc, #120]	@ (80091b0 <ReadBatteryVoltage+0xa8>)
 8009138:	2101      	movs	r1, #1
 800913a:	0018      	movs	r0, r3
 800913c:	f00b f94a 	bl	80143d4 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009140:	4b1b      	ldr	r3, [pc, #108]	@ (80091b0 <ReadBatteryVoltage+0xa8>)
 8009142:	0018      	movs	r0, r3
 8009144:	f00b f9e2 	bl	801450c <HAL_ADC_GetValue>
 8009148:	0002      	movs	r2, r0
 800914a:	4b1a      	ldr	r3, [pc, #104]	@ (80091b4 <ReadBatteryVoltage+0xac>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4353      	muls	r3, r2
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	4919      	ldr	r1, [pc, #100]	@ (80091b8 <ReadBatteryVoltage+0xb0>)
 8009154:	0018      	movs	r0, r3
 8009156:	f7f7 f825 	bl	80001a4 <__udivsi3>
 800915a:	0003      	movs	r3, r0
 800915c:	001a      	movs	r2, r3
 800915e:	4b17      	ldr	r3, [pc, #92]	@ (80091bc <ReadBatteryVoltage+0xb4>)
 8009160:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009162:	4b16      	ldr	r3, [pc, #88]	@ (80091bc <ReadBatteryVoltage+0xb4>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	0018      	movs	r0, r3
 8009168:	f7f8 fbae 	bl	80018c8 <__aeabi_ui2f>
 800916c:	1c03      	adds	r3, r0, #0
 800916e:	4914      	ldr	r1, [pc, #80]	@ (80091c0 <ReadBatteryVoltage+0xb8>)
 8009170:	1c18      	adds	r0, r3, #0
 8009172:	f7f7 fd97 	bl	8000ca4 <__aeabi_fdiv>
 8009176:	1c03      	adds	r3, r0, #0
 8009178:	1c1a      	adds	r2, r3, #0
 800917a:	4b12      	ldr	r3, [pc, #72]	@ (80091c4 <ReadBatteryVoltage+0xbc>)
 800917c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800917e:	4b0a      	ldr	r3, [pc, #40]	@ (80091a8 <ReadBatteryVoltage+0xa0>)
 8009180:	4a0a      	ldr	r2, [pc, #40]	@ (80091ac <ReadBatteryVoltage+0xa4>)
 8009182:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009184:	4b08      	ldr	r3, [pc, #32]	@ (80091a8 <ReadBatteryVoltage+0xa0>)
 8009186:	4a10      	ldr	r2, [pc, #64]	@ (80091c8 <ReadBatteryVoltage+0xc0>)
 8009188:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800918a:	4a07      	ldr	r2, [pc, #28]	@ (80091a8 <ReadBatteryVoltage+0xa0>)
 800918c:	4b08      	ldr	r3, [pc, #32]	@ (80091b0 <ReadBatteryVoltage+0xa8>)
 800918e:	0011      	movs	r1, r2
 8009190:	0018      	movs	r0, r3
 8009192:	f00b f9c7 	bl	8014524 <HAL_ADC_ConfigChannel>
 8009196:	1e03      	subs	r3, r0, #0
 8009198:	d001      	beq.n	800919e <ReadBatteryVoltage+0x96>
    Error_Handler();
 800919a:	f003 fcd5 	bl	800cb48 <Error_Handler>
  }
  return trueValue;
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <ReadBatteryVoltage+0xbc>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 }
 80091a2:	1c18      	adds	r0, r3, #0
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20000b38 	.word	0x20000b38
 80091ac:	38004000 	.word	0x38004000
 80091b0:	20000b8c 	.word	0x20000b8c
 80091b4:	20000034 	.word	0x20000034
 80091b8:	00000fff 	.word	0x00000fff
 80091bc:	20000b54 	.word	0x20000b54
 80091c0:	447a0000 	.word	0x447a0000
 80091c4:	20000b58 	.word	0x20000b58
 80091c8:	00001001 	.word	0x00001001

080091cc <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80091cc:	b580      	push	{r7, lr}
 80091ce:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80091d0:	4b21      	ldr	r3, [pc, #132]	@ (8009258 <ReadSolarVoltage+0x8c>)
 80091d2:	4a22      	ldr	r2, [pc, #136]	@ (800925c <ReadSolarVoltage+0x90>)
 80091d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80091d6:	4b20      	ldr	r3, [pc, #128]	@ (8009258 <ReadSolarVoltage+0x8c>)
 80091d8:	2280      	movs	r2, #128	@ 0x80
 80091da:	0152      	lsls	r2, r2, #5
 80091dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80091de:	4a1e      	ldr	r2, [pc, #120]	@ (8009258 <ReadSolarVoltage+0x8c>)
 80091e0:	4b1f      	ldr	r3, [pc, #124]	@ (8009260 <ReadSolarVoltage+0x94>)
 80091e2:	0011      	movs	r1, r2
 80091e4:	0018      	movs	r0, r3
 80091e6:	f00b f99d 	bl	8014524 <HAL_ADC_ConfigChannel>
 80091ea:	1e03      	subs	r3, r0, #0
 80091ec:	d001      	beq.n	80091f2 <ReadSolarVoltage+0x26>
    Error_Handler();
 80091ee:	f003 fcab 	bl	800cb48 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80091f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009260 <ReadSolarVoltage+0x94>)
 80091f4:	0018      	movs	r0, r3
 80091f6:	f00b f899 	bl	801432c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80091fa:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <ReadSolarVoltage+0x94>)
 80091fc:	2101      	movs	r1, #1
 80091fe:	0018      	movs	r0, r3
 8009200:	f00b f8e8 	bl	80143d4 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009204:	4b16      	ldr	r3, [pc, #88]	@ (8009260 <ReadSolarVoltage+0x94>)
 8009206:	0018      	movs	r0, r3
 8009208:	f00b f980 	bl	801450c <HAL_ADC_GetValue>
 800920c:	0002      	movs	r2, r0
 800920e:	4b15      	ldr	r3, [pc, #84]	@ (8009264 <ReadSolarVoltage+0x98>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	435a      	muls	r2, r3
 8009214:	0013      	movs	r3, r2
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	189b      	adds	r3, r3, r2
 800921a:	4913      	ldr	r1, [pc, #76]	@ (8009268 <ReadSolarVoltage+0x9c>)
 800921c:	0018      	movs	r0, r3
 800921e:	f7f6 ffc1 	bl	80001a4 <__udivsi3>
 8009222:	0003      	movs	r3, r0
 8009224:	001a      	movs	r2, r3
 8009226:	4b11      	ldr	r3, [pc, #68]	@ (800926c <ReadSolarVoltage+0xa0>)
 8009228:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800922a:	4b0b      	ldr	r3, [pc, #44]	@ (8009258 <ReadSolarVoltage+0x8c>)
 800922c:	4a0b      	ldr	r2, [pc, #44]	@ (800925c <ReadSolarVoltage+0x90>)
 800922e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009230:	4b09      	ldr	r3, [pc, #36]	@ (8009258 <ReadSolarVoltage+0x8c>)
 8009232:	4a0f      	ldr	r2, [pc, #60]	@ (8009270 <ReadSolarVoltage+0xa4>)
 8009234:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009236:	4a08      	ldr	r2, [pc, #32]	@ (8009258 <ReadSolarVoltage+0x8c>)
 8009238:	4b09      	ldr	r3, [pc, #36]	@ (8009260 <ReadSolarVoltage+0x94>)
 800923a:	0011      	movs	r1, r2
 800923c:	0018      	movs	r0, r3
 800923e:	f00b f971 	bl	8014524 <HAL_ADC_ConfigChannel>
 8009242:	1e03      	subs	r3, r0, #0
 8009244:	d001      	beq.n	800924a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009246:	f003 fc7f 	bl	800cb48 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800924a:	4b08      	ldr	r3, [pc, #32]	@ (800926c <ReadSolarVoltage+0xa0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	b29b      	uxth	r3, r3
 }
 8009250:	0018      	movs	r0, r3
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	46c0      	nop			@ (mov r8, r8)
 8009258:	20000b38 	.word	0x20000b38
 800925c:	3c008000 	.word	0x3c008000
 8009260:	20000b8c 	.word	0x20000b8c
 8009264:	20000034 	.word	0x20000034
 8009268:	00000fff 	.word	0x00000fff
 800926c:	20000b5c 	.word	0x20000b5c
 8009270:	00001001 	.word	0x00001001

08009274 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8009278:	23a0      	movs	r3, #160	@ 0xa0
 800927a:	05db      	lsls	r3, r3, #23
 800927c:	2180      	movs	r1, #128	@ 0x80
 800927e:	0018      	movs	r0, r3
 8009280:	f00c f8ec 	bl	801545c <HAL_GPIO_ReadPin>
 8009284:	0003      	movs	r3, r0
 8009286:	1e5a      	subs	r2, r3, #1
 8009288:	4193      	sbcs	r3, r2
 800928a:	b2db      	uxtb	r3, r3
}
 800928c:	0018      	movs	r0, r3
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 800929a:	1dfb      	adds	r3, r7, #7
 800929c:	2201      	movs	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 80092a0:	1dbb      	adds	r3, r7, #6
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80092a6:	4b27      	ldr	r3, [pc, #156]	@ (8009344 <Read_Charge_Status+0xb0>)
 80092a8:	2280      	movs	r2, #128	@ 0x80
 80092aa:	0092      	lsls	r2, r2, #2
 80092ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092ae:	4b25      	ldr	r3, [pc, #148]	@ (8009344 <Read_Charge_Status+0xb0>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092b4:	4b23      	ldr	r3, [pc, #140]	@ (8009344 <Read_Charge_Status+0xb0>)
 80092b6:	2201      	movs	r2, #1
 80092b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80092ba:	4b22      	ldr	r3, [pc, #136]	@ (8009344 <Read_Charge_Status+0xb0>)
 80092bc:	4a22      	ldr	r2, [pc, #136]	@ (8009348 <Read_Charge_Status+0xb4>)
 80092be:	0019      	movs	r1, r3
 80092c0:	0010      	movs	r0, r2
 80092c2:	f00b ff4d 	bl	8015160 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 80092c6:	2380      	movs	r3, #128	@ 0x80
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009348 <Read_Charge_Status+0xb4>)
 80092cc:	0019      	movs	r1, r3
 80092ce:	0010      	movs	r0, r2
 80092d0:	f00c f8c4 	bl	801545c <HAL_GPIO_ReadPin>
 80092d4:	0003      	movs	r3, r0
 80092d6:	001a      	movs	r2, r3
 80092d8:	1dfb      	adds	r3, r7, #7
 80092da:	1e51      	subs	r1, r2, #1
 80092dc:	418a      	sbcs	r2, r1
 80092de:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80092e0:	4b18      	ldr	r3, [pc, #96]	@ (8009344 <Read_Charge_Status+0xb0>)
 80092e2:	2280      	movs	r2, #128	@ 0x80
 80092e4:	0092      	lsls	r2, r2, #2
 80092e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092e8:	4b16      	ldr	r3, [pc, #88]	@ (8009344 <Read_Charge_Status+0xb0>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80092ee:	4b15      	ldr	r3, [pc, #84]	@ (8009344 <Read_Charge_Status+0xb0>)
 80092f0:	2202      	movs	r2, #2
 80092f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80092f4:	4b13      	ldr	r3, [pc, #76]	@ (8009344 <Read_Charge_Status+0xb0>)
 80092f6:	4a14      	ldr	r2, [pc, #80]	@ (8009348 <Read_Charge_Status+0xb4>)
 80092f8:	0019      	movs	r1, r3
 80092fa:	0010      	movs	r0, r2
 80092fc:	f00b ff30 	bl	8015160 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009300:	2380      	movs	r3, #128	@ 0x80
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4a10      	ldr	r2, [pc, #64]	@ (8009348 <Read_Charge_Status+0xb4>)
 8009306:	0019      	movs	r1, r3
 8009308:	0010      	movs	r0, r2
 800930a:	f00c f8a7 	bl	801545c <HAL_GPIO_ReadPin>
 800930e:	0003      	movs	r3, r0
 8009310:	001a      	movs	r2, r3
 8009312:	1dbb      	adds	r3, r7, #6
 8009314:	1e51      	subs	r1, r2, #1
 8009316:	418a      	sbcs	r2, r1
 8009318:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 800931a:	1dfb      	adds	r3, r7, #7
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2201      	movs	r2, #1
 8009320:	4053      	eors	r3, r2
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009328:	2301      	movs	r3, #1
 800932a:	e006      	b.n	800933a <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 800932c:	1dbb      	adds	r3, r7, #6
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009334:	2302      	movs	r3, #2
 8009336:	e000      	b.n	800933a <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009338:	2300      	movs	r3, #0
}
 800933a:	0018      	movs	r0, r3
 800933c:	46bd      	mov	sp, r7
 800933e:	b002      	add	sp, #8
 8009340:	bd80      	pop	{r7, pc}
 8009342:	46c0      	nop			@ (mov r8, r8)
 8009344:	20000b40 	.word	0x20000b40
 8009348:	50000800 	.word	0x50000800

0800934c <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009350:	2380      	movs	r3, #128	@ 0x80
 8009352:	021a      	lsls	r2, r3, #8
 8009354:	23a0      	movs	r3, #160	@ 0xa0
 8009356:	05db      	lsls	r3, r3, #23
 8009358:	0011      	movs	r1, r2
 800935a:	0018      	movs	r0, r3
 800935c:	f00c f87e 	bl	801545c <HAL_GPIO_ReadPin>
 8009360:	0003      	movs	r3, r0
 8009362:	1e5a      	subs	r2, r3, #1
 8009364:	4193      	sbcs	r3, r2
 8009366:	b2db      	uxtb	r3, r3
}
 8009368:	0018      	movs	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009374:	4b05      	ldr	r3, [pc, #20]	@ (800938c <UserButton_Pressed+0x1c>)
 8009376:	2104      	movs	r1, #4
 8009378:	0018      	movs	r0, r3
 800937a:	f00c f86f 	bl	801545c <HAL_GPIO_ReadPin>
 800937e:	0003      	movs	r3, r0
 8009380:	425a      	negs	r2, r3
 8009382:	4153      	adcs	r3, r2
 8009384:	b2db      	uxtb	r3, r3
}
 8009386:	0018      	movs	r0, r3
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	50000c00 	.word	0x50000c00

08009390 <showTime>:
void getUptime(char* uptbuffer) {
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
}
#endif

void showTime() {
 8009390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009392:	46d6      	mov	lr, sl
 8009394:	464f      	mov	r7, r9
 8009396:	4646      	mov	r6, r8
 8009398:	b5c0      	push	{r6, r7, lr}
 800939a:	b08e      	sub	sp, #56	@ 0x38
 800939c:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 800939e:	4b38      	ldr	r3, [pc, #224]	@ (8009480 <showTime+0xf0>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d063      	beq.n	800946e <showTime+0xde>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80093a6:	003a      	movs	r2, r7
 80093a8:	1d3b      	adds	r3, r7, #4
 80093aa:	0011      	movs	r1, r2
 80093ac:	0018      	movs	r0, r3
 80093ae:	f000 faeb 	bl	8009988 <RTC_GetTime>
  lasthour = currentTime.Hours;
 80093b2:	1d3b      	adds	r3, r7, #4
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	4b33      	ldr	r3, [pc, #204]	@ (8009484 <showTime+0xf4>)
 80093b8:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 80093ba:	003b      	movs	r3, r7
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	4b32      	ldr	r3, [pc, #200]	@ (8009488 <showTime+0xf8>)
 80093c0:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 80093c2:	f000 f87f 	bl	80094c4 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093c6:	003b      	movs	r3, r7
 80093c8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093ca:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093cc:	003b      	movs	r3, r7
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093d2:	4b2e      	ldr	r3, [pc, #184]	@ (800948c <showTime+0xfc>)
 80093d4:	0092      	lsls	r2, r2, #2
 80093d6:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093d8:	003b      	movs	r3, r7
 80093da:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093dc:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093de:	1d3b      	adds	r3, r7, #4
 80093e0:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093e2:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093e4:	1d3b      	adds	r3, r7, #4
 80093e6:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093e8:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093ea:	1d3b      	adds	r3, r7, #4
 80093ec:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093ee:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093f0:	4b27      	ldr	r3, [pc, #156]	@ (8009490 <showTime+0x100>)
 80093f2:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093f4:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093f6:	4b26      	ldr	r3, [pc, #152]	@ (8009490 <showTime+0x100>)
 80093f8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093fa:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093fc:	4b24      	ldr	r3, [pc, #144]	@ (8009490 <showTime+0x100>)
 80093fe:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009400:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8009402:	4b23      	ldr	r3, [pc, #140]	@ (8009490 <showTime+0x100>)
 8009404:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009406:	4823      	ldr	r0, [pc, #140]	@ (8009494 <showTime+0x104>)
 8009408:	9306      	str	r3, [sp, #24]
 800940a:	4643      	mov	r3, r8
 800940c:	9305      	str	r3, [sp, #20]
 800940e:	4663      	mov	r3, ip
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	9603      	str	r6, [sp, #12]
 8009414:	9502      	str	r5, [sp, #8]
 8009416:	9401      	str	r4, [sp, #4]
 8009418:	9100      	str	r1, [sp, #0]
 800941a:	4653      	mov	r3, sl
 800941c:	4649      	mov	r1, r9
 800941e:	f01c faeb 	bl	80259f8 <iprintf>
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009422:	4b19      	ldr	r3, [pc, #100]	@ (8009488 <showTime+0xf8>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b07      	cmp	r3, #7
 8009428:	d122      	bne.n	8009470 <showTime+0xe0>
 800942a:	4b16      	ldr	r3, [pc, #88]	@ (8009484 <showTime+0xf4>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b03      	cmp	r3, #3
 8009430:	d11e      	bne.n	8009470 <showTime+0xe0>
 8009432:	1d3b      	adds	r3, r7, #4
 8009434:	785b      	ldrb	r3, [r3, #1]
 8009436:	2b10      	cmp	r3, #16
 8009438:	d81a      	bhi.n	8009470 <showTime+0xe0>
 800943a:	4b17      	ldr	r3, [pc, #92]	@ (8009498 <showTime+0x108>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2201      	movs	r2, #1
 8009440:	4053      	eors	r3, r2
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d013      	beq.n	8009470 <showTime+0xe0>
 8009448:	003b      	movs	r3, r7
 800944a:	789b      	ldrb	r3, [r3, #2]
 800944c:	2b18      	cmp	r3, #24
 800944e:	d90f      	bls.n	8009470 <showTime+0xe0>
 8009450:	003b      	movs	r3, r7
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b03      	cmp	r3, #3
 8009456:	d003      	beq.n	8009460 <showTime+0xd0>
 8009458:	003b      	movs	r3, r7
 800945a:	785b      	ldrb	r3, [r3, #1]
 800945c:	2b0a      	cmp	r3, #10
 800945e:	d107      	bne.n	8009470 <showTime+0xe0>
    dstchkd = true;
 8009460:	4b0d      	ldr	r3, [pc, #52]	@ (8009498 <showTime+0x108>)
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009466:	2000      	movs	r0, #0
 8009468:	f7fb fa58 	bl	800491c <setESPTimeStamp>
 800946c:	e000      	b.n	8009470 <showTime+0xe0>
    return;
 800946e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009470:	46bd      	mov	sp, r7
 8009472:	b006      	add	sp, #24
 8009474:	bce0      	pop	{r5, r6, r7}
 8009476:	46ba      	mov	sl, r7
 8009478:	46b1      	mov	r9, r6
 800947a:	46a8      	mov	r8, r5
 800947c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800947e:	46c0      	nop			@ (mov r8, r8)
 8009480:	20000b70 	.word	0x20000b70
 8009484:	20000b61 	.word	0x20000b61
 8009488:	20000b62 	.word	0x20000b62
 800948c:	20000054 	.word	0x20000054
 8009490:	20000b64 	.word	0x20000b64
 8009494:	0802bc68 	.word	0x0802bc68
 8009498:	20000b60 	.word	0x20000b60

0800949c <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80094a2:	003a      	movs	r2, r7
 80094a4:	1d3b      	adds	r3, r7, #4
 80094a6:	0011      	movs	r1, r2
 80094a8:	0018      	movs	r0, r3
 80094aa:	f000 fa6d 	bl	8009988 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 80094ae:	1d3a      	adds	r2, r7, #4
 80094b0:	003b      	movs	r3, r7
 80094b2:	0011      	movs	r1, r2
 80094b4:	0018      	movs	r0, r3
 80094b6:	f000 fc31 	bl	8009d1c <makeTime>
 80094ba:	0003      	movs	r3, r0
}
 80094bc:	0018      	movs	r0, r3
 80094be:	46bd      	mov	sp, r7
 80094c0:	b006      	add	sp, #24
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80094ca:	003a      	movs	r2, r7
 80094cc:	1d3b      	adds	r3, r7, #4
 80094ce:	0011      	movs	r1, r2
 80094d0:	0018      	movs	r0, r3
 80094d2:	f000 fa59 	bl	8009988 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80094d6:	1d3a      	adds	r2, r7, #4
 80094d8:	003b      	movs	r3, r7
 80094da:	0011      	movs	r1, r2
 80094dc:	0018      	movs	r0, r3
 80094de:	f000 fc1d 	bl	8009d1c <makeTime>
 80094e2:	0002      	movs	r2, r0
 80094e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009560 <UpdateSystemUptime+0x9c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	213c      	movs	r1, #60	@ 0x3c
 80094f4:	0018      	movs	r0, r3
 80094f6:	f7f6 fedb 	bl	80002b0 <__aeabi_uidivmod>
 80094fa:	000b      	movs	r3, r1
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	4b19      	ldr	r3, [pc, #100]	@ (8009564 <UpdateSystemUptime+0xa0>)
 8009500:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	213c      	movs	r1, #60	@ 0x3c
 8009506:	0018      	movs	r0, r3
 8009508:	f7f6 fe4c 	bl	80001a4 <__udivsi3>
 800950c:	0003      	movs	r3, r0
 800950e:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	213c      	movs	r1, #60	@ 0x3c
 8009514:	0018      	movs	r0, r3
 8009516:	f7f6 fecb 	bl	80002b0 <__aeabi_uidivmod>
 800951a:	000b      	movs	r3, r1
 800951c:	b2da      	uxtb	r2, r3
 800951e:	4b11      	ldr	r3, [pc, #68]	@ (8009564 <UpdateSystemUptime+0xa0>)
 8009520:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	213c      	movs	r1, #60	@ 0x3c
 8009526:	0018      	movs	r0, r3
 8009528:	f7f6 fe3c 	bl	80001a4 <__udivsi3>
 800952c:	0003      	movs	r3, r0
 800952e:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2118      	movs	r1, #24
 8009534:	0018      	movs	r0, r3
 8009536:	f7f6 febb 	bl	80002b0 <__aeabi_uidivmod>
 800953a:	000b      	movs	r3, r1
 800953c:	b2da      	uxtb	r2, r3
 800953e:	4b09      	ldr	r3, [pc, #36]	@ (8009564 <UpdateSystemUptime+0xa0>)
 8009540:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2118      	movs	r1, #24
 8009546:	0018      	movs	r0, r3
 8009548:	f7f6 fe2c 	bl	80001a4 <__udivsi3>
 800954c:	0003      	movs	r3, r0
 800954e:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	b29a      	uxth	r2, r3
 8009554:	4b03      	ldr	r3, [pc, #12]	@ (8009564 <UpdateSystemUptime+0xa0>)
 8009556:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8009558:	46c0      	nop			@ (mov r8, r8)
 800955a:	46bd      	mov	sp, r7
 800955c:	b008      	add	sp, #32
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20000b70 	.word	0x20000b70
 8009564:	20000b64 	.word	0x20000b64

08009568 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8009568:	b590      	push	{r4, r7, lr}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	0008      	movs	r0, r1
 8009572:	0011      	movs	r1, r2
 8009574:	1cfb      	adds	r3, r7, #3
 8009576:	1c02      	adds	r2, r0, #0
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	1cbb      	adds	r3, r7, #2
 800957c:	1c0a      	adds	r2, r1, #0
 800957e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8009580:	230e      	movs	r3, #14
 8009582:	18fb      	adds	r3, r7, r3
 8009584:	2200      	movs	r2, #0
 8009586:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009588:	230f      	movs	r3, #15
 800958a:	18fb      	adds	r3, r7, r3
 800958c:	1cfa      	adds	r2, r7, #3
 800958e:	7812      	ldrb	r2, [r2, #0]
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	e015      	b.n	80095c0 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8009594:	200f      	movs	r0, #15
 8009596:	183b      	adds	r3, r7, r0
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	18d2      	adds	r2, r2, r3
 800959e:	240e      	movs	r4, #14
 80095a0:	193b      	adds	r3, r7, r4
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	7811      	ldrb	r1, [r2, #0]
 80095a6:	2208      	movs	r2, #8
 80095a8:	18ba      	adds	r2, r7, r2
 80095aa:	54d1      	strb	r1, [r2, r3]
    pos++;
 80095ac:	193b      	adds	r3, r7, r4
 80095ae:	781a      	ldrb	r2, [r3, #0]
 80095b0:	193b      	adds	r3, r7, r4
 80095b2:	3201      	adds	r2, #1
 80095b4:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80095b6:	183b      	adds	r3, r7, r0
 80095b8:	781a      	ldrb	r2, [r3, #0]
 80095ba:	183b      	adds	r3, r7, r0
 80095bc:	3201      	adds	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	200f      	movs	r0, #15
 80095c2:	183a      	adds	r2, r7, r0
 80095c4:	1cbb      	adds	r3, r7, #2
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d9e2      	bls.n	8009594 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80095ce:	230e      	movs	r3, #14
 80095d0:	18fb      	adds	r3, r7, r3
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2208      	movs	r2, #8
 80095d6:	18ba      	adds	r2, r7, r2
 80095d8:	2100      	movs	r1, #0
 80095da:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80095dc:	1cfb      	adds	r3, r7, #3
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b13      	cmp	r3, #19
 80095e2:	d849      	bhi.n	8009678 <aBuff2int+0x110>
    if (start == 17) { //month
 80095e4:	1cfb      	adds	r3, r7, #3
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b11      	cmp	r3, #17
 80095ea:	d122      	bne.n	8009632 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80095ec:	183b      	adds	r3, r7, r0
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e018      	b.n	8009626 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80095f4:	240f      	movs	r4, #15
 80095f6:	193b      	adds	r3, r7, r4
 80095f8:	781a      	ldrb	r2, [r3, #0]
 80095fa:	4b25      	ldr	r3, [pc, #148]	@ (8009690 <aBuff2int+0x128>)
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	58d2      	ldr	r2, [r2, r3]
 8009600:	2308      	movs	r3, #8
 8009602:	18fb      	adds	r3, r7, r3
 8009604:	0011      	movs	r1, r2
 8009606:	0018      	movs	r0, r3
 8009608:	f7f6 fda6 	bl	8000158 <strcmp>
 800960c:	1e03      	subs	r3, r0, #0
 800960e:	d104      	bne.n	800961a <aBuff2int+0xb2>
          return i+1;
 8009610:	193b      	adds	r3, r7, r4
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	3301      	adds	r3, #1
 8009616:	b2db      	uxtb	r3, r3
 8009618:	e035      	b.n	8009686 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800961a:	210f      	movs	r1, #15
 800961c:	187b      	adds	r3, r7, r1
 800961e:	781a      	ldrb	r2, [r3, #0]
 8009620:	187b      	adds	r3, r7, r1
 8009622:	3201      	adds	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	230f      	movs	r3, #15
 8009628:	18fb      	adds	r3, r7, r3
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b0b      	cmp	r3, #11
 800962e:	d9e1      	bls.n	80095f4 <aBuff2int+0x8c>
 8009630:	e022      	b.n	8009678 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8009632:	230f      	movs	r3, #15
 8009634:	18fb      	adds	r3, r7, r3
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
 800963a:	e018      	b.n	800966e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 800963c:	240f      	movs	r4, #15
 800963e:	193b      	adds	r3, r7, r4
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	4b14      	ldr	r3, [pc, #80]	@ (8009694 <aBuff2int+0x12c>)
 8009644:	0092      	lsls	r2, r2, #2
 8009646:	58d2      	ldr	r2, [r2, r3]
 8009648:	2308      	movs	r3, #8
 800964a:	18fb      	adds	r3, r7, r3
 800964c:	0011      	movs	r1, r2
 800964e:	0018      	movs	r0, r3
 8009650:	f7f6 fd82 	bl	8000158 <strcmp>
 8009654:	1e03      	subs	r3, r0, #0
 8009656:	d104      	bne.n	8009662 <aBuff2int+0xfa>
          return i+1;
 8009658:	193b      	adds	r3, r7, r4
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	b2db      	uxtb	r3, r3
 8009660:	e011      	b.n	8009686 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8009662:	210f      	movs	r1, #15
 8009664:	187b      	adds	r3, r7, r1
 8009666:	781a      	ldrb	r2, [r3, #0]
 8009668:	187b      	adds	r3, r7, r1
 800966a:	3201      	adds	r2, #1
 800966c:	701a      	strb	r2, [r3, #0]
 800966e:	230f      	movs	r3, #15
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b06      	cmp	r3, #6
 8009676:	d9e1      	bls.n	800963c <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8009678:	2308      	movs	r3, #8
 800967a:	18fb      	adds	r3, r7, r3
 800967c:	0018      	movs	r0, r3
 800967e:	f01a fdd6 	bl	802422e <atoi>
 8009682:	0003      	movs	r3, r0
 8009684:	b2db      	uxtb	r3, r3
}
 8009686:	0018      	movs	r0, r3
 8009688:	46bd      	mov	sp, r7
 800968a:	b005      	add	sp, #20
 800968c:	bd90      	pop	{r4, r7, pc}
 800968e:	46c0      	nop			@ (mov r8, r8)
 8009690:	20000054 	.word	0x20000054
 8009694:	20000038 	.word	0x20000038

08009698 <ParseTime>:

void ParseTime(char* buffer) {
 8009698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800969a:	b08d      	sub	sp, #52	@ 0x34
 800969c:	af02      	add	r7, sp, #8
 800969e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80096a0:	2408      	movs	r4, #8
 80096a2:	193a      	adds	r2, r7, r4
 80096a4:	260c      	movs	r6, #12
 80096a6:	19bb      	adds	r3, r7, r6
 80096a8:	0011      	movs	r1, r2
 80096aa:	0018      	movs	r0, r3
 80096ac:	f000 f96c 	bl	8009988 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2219      	movs	r2, #25
 80096b4:	2118      	movs	r1, #24
 80096b6:	0018      	movs	r0, r3
 80096b8:	f7ff ff56 	bl	8009568 <aBuff2int>
 80096bc:	0003      	movs	r3, r0
 80096be:	001a      	movs	r2, r3
 80096c0:	19bb      	adds	r3, r7, r6
 80096c2:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	221c      	movs	r2, #28
 80096c8:	211b      	movs	r1, #27
 80096ca:	0018      	movs	r0, r3
 80096cc:	f7ff ff4c 	bl	8009568 <aBuff2int>
 80096d0:	0003      	movs	r3, r0
 80096d2:	001a      	movs	r2, r3
 80096d4:	19bb      	adds	r3, r7, r6
 80096d6:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	221f      	movs	r2, #31
 80096dc:	211e      	movs	r1, #30
 80096de:	0018      	movs	r0, r3
 80096e0:	f7ff ff42 	bl	8009568 <aBuff2int>
 80096e4:	0003      	movs	r3, r0
 80096e6:	001a      	movs	r2, r3
 80096e8:	19bb      	adds	r3, r7, r6
 80096ea:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2224      	movs	r2, #36	@ 0x24
 80096f0:	2123      	movs	r1, #35	@ 0x23
 80096f2:	0018      	movs	r0, r3
 80096f4:	f7ff ff38 	bl	8009568 <aBuff2int>
 80096f8:	0003      	movs	r3, r0
 80096fa:	001a      	movs	r2, r3
 80096fc:	0025      	movs	r5, r4
 80096fe:	197b      	adds	r3, r7, r5
 8009700:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2213      	movs	r2, #19
 8009706:	2111      	movs	r1, #17
 8009708:	0018      	movs	r0, r3
 800970a:	f7ff ff2d 	bl	8009568 <aBuff2int>
 800970e:	0003      	movs	r3, r0
 8009710:	001a      	movs	r2, r3
 8009712:	197b      	adds	r3, r7, r5
 8009714:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2216      	movs	r2, #22
 800971a:	2115      	movs	r1, #21
 800971c:	0018      	movs	r0, r3
 800971e:	f7ff ff23 	bl	8009568 <aBuff2int>
 8009722:	0003      	movs	r3, r0
 8009724:	001a      	movs	r2, r3
 8009726:	197b      	adds	r3, r7, r5
 8009728:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	220f      	movs	r2, #15
 800972e:	210d      	movs	r1, #13
 8009730:	0018      	movs	r0, r3
 8009732:	f7ff ff19 	bl	8009568 <aBuff2int>
 8009736:	0003      	movs	r3, r0
 8009738:	001a      	movs	r2, r3
 800973a:	197b      	adds	r3, r7, r5
 800973c:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800973e:	19bb      	adds	r3, r7, r6
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	001c      	movs	r4, r3
 8009744:	19bb      	adds	r3, r7, r6
 8009746:	785b      	ldrb	r3, [r3, #1]
 8009748:	0018      	movs	r0, r3
 800974a:	19bb      	adds	r3, r7, r6
 800974c:	789b      	ldrb	r3, [r3, #2]
 800974e:	4a53      	ldr	r2, [pc, #332]	@ (800989c <ParseTime+0x204>)
 8009750:	4953      	ldr	r1, [pc, #332]	@ (80098a0 <ParseTime+0x208>)
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	9000      	str	r0, [sp, #0]
 8009756:	0023      	movs	r3, r4
 8009758:	2003      	movs	r0, #3
 800975a:	f009 fe89 	bl	8013470 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800975e:	197b      	adds	r3, r7, r5
 8009760:	789b      	ldrb	r3, [r3, #2]
 8009762:	001c      	movs	r4, r3
 8009764:	197b      	adds	r3, r7, r5
 8009766:	785b      	ldrb	r3, [r3, #1]
 8009768:	0018      	movs	r0, r3
 800976a:	197b      	adds	r3, r7, r5
 800976c:	78db      	ldrb	r3, [r3, #3]
 800976e:	4a4d      	ldr	r2, [pc, #308]	@ (80098a4 <ParseTime+0x20c>)
 8009770:	494b      	ldr	r1, [pc, #300]	@ (80098a0 <ParseTime+0x208>)
 8009772:	9301      	str	r3, [sp, #4]
 8009774:	9000      	str	r0, [sp, #0]
 8009776:	0023      	movs	r3, r4
 8009778:	2003      	movs	r0, #3
 800977a:	f009 fe79 	bl	8013470 <CreateLine>
  RTC_SetTime(&currentTime);
 800977e:	19bb      	adds	r3, r7, r6
 8009780:	0018      	movs	r0, r3
 8009782:	f000 f89d 	bl	80098c0 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8009786:	197b      	adds	r3, r7, r5
 8009788:	0018      	movs	r0, r3
 800978a:	f000 f8bf 	bl	800990c <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800978e:	2327      	movs	r3, #39	@ 0x27
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 8009796:	197b      	adds	r3, r7, r5
 8009798:	785b      	ldrb	r3, [r3, #1]
 800979a:	623b      	str	r3, [r7, #32]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	2b02      	cmp	r3, #2
 80097a0:	dd04      	ble.n	80097ac <ParseTime+0x114>
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	2b0a      	cmp	r3, #10
 80097a6:	dc01      	bgt.n	80097ac <ParseTime+0x114>
 80097a8:	2201      	movs	r2, #1
 80097aa:	e000      	b.n	80097ae <ParseTime+0x116>
 80097ac:	2200      	movs	r2, #0
 80097ae:	2027      	movs	r0, #39	@ 0x27
 80097b0:	183b      	adds	r3, r7, r0
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	781a      	ldrb	r2, [r3, #0]
 80097b6:	2101      	movs	r1, #1
 80097b8:	400a      	ands	r2, r1
 80097ba:	701a      	strb	r2, [r3, #0]
  if (dst)
 80097bc:	0002      	movs	r2, r0
 80097be:	18bb      	adds	r3, r7, r2
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01f      	beq.n	8009806 <ParseTime+0x16e>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d10c      	bne.n	80097e6 <ParseTime+0x14e>
 80097cc:	2108      	movs	r1, #8
 80097ce:	187b      	adds	r3, r7, r1
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	2b07      	cmp	r3, #7
 80097d4:	d107      	bne.n	80097e6 <ParseTime+0x14e>
 80097d6:	187b      	adds	r3, r7, r1
 80097d8:	789b      	ldrb	r3, [r3, #2]
 80097da:	2b18      	cmp	r3, #24
 80097dc:	d803      	bhi.n	80097e6 <ParseTime+0x14e>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 80097de:	18bb      	adds	r3, r7, r2
 80097e0:	2200      	movs	r2, #0
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	e00f      	b.n	8009806 <ParseTime+0x16e>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	2b0a      	cmp	r3, #10
 80097ea:	d10c      	bne.n	8009806 <ParseTime+0x16e>
 80097ec:	2208      	movs	r2, #8
 80097ee:	18bb      	adds	r3, r7, r2
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b07      	cmp	r3, #7
 80097f4:	d107      	bne.n	8009806 <ParseTime+0x16e>
 80097f6:	18bb      	adds	r3, r7, r2
 80097f8:	789b      	ldrb	r3, [r3, #2]
 80097fa:	2b18      	cmp	r3, #24
 80097fc:	d803      	bhi.n	8009806 <ParseTime+0x16e>
    {
        dst = false;
 80097fe:	2327      	movs	r3, #39	@ 0x27
 8009800:	18fb      	adds	r3, r7, r3
 8009802:	2200      	movs	r2, #0
 8009804:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 8009806:	2327      	movs	r3, #39	@ 0x27
 8009808:	18fb      	adds	r3, r7, r3
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d028      	beq.n	8009862 <ParseTime+0x1ca>
    Info("Daylight Saving Time active");
 8009810:	4a25      	ldr	r2, [pc, #148]	@ (80098a8 <ParseTime+0x210>)
 8009812:	4b26      	ldr	r3, [pc, #152]	@ (80098ac <ParseTime+0x214>)
 8009814:	0019      	movs	r1, r3
 8009816:	2002      	movs	r0, #2
 8009818:	f009 fe2a 	bl	8013470 <CreateLine>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800981c:	4b24      	ldr	r3, [pc, #144]	@ (80098b0 <ParseTime+0x218>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	0018      	movs	r0, r3
 8009822:	f012 f9e7 	bl	801bbf4 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(500);
 8009826:	23fa      	movs	r3, #250	@ 0xfa
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	0018      	movs	r0, r3
 800982c:	f00a fbac 	bl	8013f88 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 8009830:	2308      	movs	r3, #8
 8009832:	18fa      	adds	r2, r7, r3
 8009834:	240c      	movs	r4, #12
 8009836:	193b      	adds	r3, r7, r4
 8009838:	0011      	movs	r1, r2
 800983a:	0018      	movs	r0, r3
 800983c:	f000 f8a4 	bl	8009988 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8009840:	0022      	movs	r2, r4
 8009842:	18bb      	adds	r3, r7, r2
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	001c      	movs	r4, r3
 8009848:	18bb      	adds	r3, r7, r2
 800984a:	785b      	ldrb	r3, [r3, #1]
 800984c:	0018      	movs	r0, r3
 800984e:	18bb      	adds	r3, r7, r2
 8009850:	789b      	ldrb	r3, [r3, #2]
 8009852:	4a18      	ldr	r2, [pc, #96]	@ (80098b4 <ParseTime+0x21c>)
 8009854:	4912      	ldr	r1, [pc, #72]	@ (80098a0 <ParseTime+0x208>)
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	9000      	str	r0, [sp, #0]
 800985a:	0023      	movs	r3, r4
 800985c:	2003      	movs	r0, #3
 800985e:	f009 fe07 	bl	8013470 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 8009862:	2308      	movs	r3, #8
 8009864:	18fb      	adds	r3, r7, r3
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d104      	bne.n	8009876 <ParseTime+0x1de>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800986c:	f004 fb0e 	bl	800de8c <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 8009870:	4b11      	ldr	r3, [pc, #68]	@ (80098b8 <ParseTime+0x220>)
 8009872:	2200      	movs	r2, #0
 8009874:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 8009876:	4b11      	ldr	r3, [pc, #68]	@ (80098bc <ParseTime+0x224>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <ParseTime+0x1fc>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800987e:	230c      	movs	r3, #12
 8009880:	18fa      	adds	r2, r7, r3
 8009882:	2308      	movs	r3, #8
 8009884:	18fb      	adds	r3, r7, r3
 8009886:	0011      	movs	r1, r2
 8009888:	0018      	movs	r0, r3
 800988a:	f000 fa47 	bl	8009d1c <makeTime>
 800988e:	0002      	movs	r2, r0
 8009890:	4b0a      	ldr	r3, [pc, #40]	@ (80098bc <ParseTime+0x224>)
 8009892:	601a      	str	r2, [r3, #0]
  }
}
 8009894:	46c0      	nop			@ (mov r8, r8)
 8009896:	46bd      	mov	sp, r7
 8009898:	b00b      	add	sp, #44	@ 0x2c
 800989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800989c:	0802bcc0 	.word	0x0802bcc0
 80098a0:	0802bcf8 	.word	0x0802bcf8
 80098a4:	0802bcfc 	.word	0x0802bcfc
 80098a8:	0802bd30 	.word	0x0802bd30
 80098ac:	0802bd4c 	.word	0x0802bd4c
 80098b0:	20000b6c 	.word	0x20000b6c
 80098b4:	0802bd50 	.word	0x0802bd50
 80098b8:	20000b60 	.word	0x20000b60
 80098bc:	20000b70 	.word	0x20000b70

080098c0 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80098da:	4b09      	ldr	r3, [pc, #36]	@ (8009900 <RTC_SetTime+0x40>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	0018      	movs	r0, r3
 80098e4:	f011 ff72 	bl	801b7cc <HAL_RTC_SetTime>
 80098e8:	1e03      	subs	r3, r0, #0
 80098ea:	d005      	beq.n	80098f8 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80098ec:	4a05      	ldr	r2, [pc, #20]	@ (8009904 <RTC_SetTime+0x44>)
 80098ee:	4b06      	ldr	r3, [pc, #24]	@ (8009908 <RTC_SetTime+0x48>)
 80098f0:	0019      	movs	r1, r3
 80098f2:	2001      	movs	r0, #1
 80098f4:	f009 fdbc 	bl	8013470 <CreateLine>
    }
}
 80098f8:	46c0      	nop			@ (mov r8, r8)
 80098fa:	46bd      	mov	sp, r7
 80098fc:	b002      	add	sp, #8
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000b6c 	.word	0x20000b6c
 8009904:	0802bd84 	.word	0x0802bd84
 8009908:	0802bda0 	.word	0x0802bda0

0800990c <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009914:	4b16      	ldr	r3, [pc, #88]	@ (8009970 <RTC_SetDate+0x64>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	0018      	movs	r0, r3
 800991e:	f012 f85d 	bl	801b9dc <HAL_RTC_SetDate>
 8009922:	1e03      	subs	r3, r0, #0
 8009924:	d005      	beq.n	8009932 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8009926:	4a13      	ldr	r2, [pc, #76]	@ (8009974 <RTC_SetDate+0x68>)
 8009928:	4b13      	ldr	r3, [pc, #76]	@ (8009978 <RTC_SetDate+0x6c>)
 800992a:	0019      	movs	r1, r3
 800992c:	2001      	movs	r0, #1
 800992e:	f009 fd9f 	bl	8013470 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8009932:	4b0f      	ldr	r3, [pc, #60]	@ (8009970 <RTC_SetDate+0x64>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2101      	movs	r1, #1
 8009938:	0018      	movs	r0, r3
 800993a:	f012 fbb3 	bl	801c0a4 <HAL_RTCEx_BKUPRead>
 800993e:	0003      	movs	r3, r0
 8009940:	4a0e      	ldr	r2, [pc, #56]	@ (800997c <RTC_SetDate+0x70>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d010      	beq.n	8009968 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8009946:	4a0e      	ldr	r2, [pc, #56]	@ (8009980 <RTC_SetDate+0x74>)
 8009948:	4b0e      	ldr	r3, [pc, #56]	@ (8009984 <RTC_SetDate+0x78>)
 800994a:	0019      	movs	r1, r3
 800994c:	2003      	movs	r0, #3
 800994e:	f009 fd8f 	bl	8013470 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8009952:	f010 febb 	bl	801a6cc <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8009956:	4b06      	ldr	r3, [pc, #24]	@ (8009970 <RTC_SetDate+0x64>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a08      	ldr	r2, [pc, #32]	@ (800997c <RTC_SetDate+0x70>)
 800995c:	2101      	movs	r1, #1
 800995e:	0018      	movs	r0, r3
 8009960:	f012 fb88 	bl	801c074 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8009964:	f010 fec0 	bl	801a6e8 <HAL_PWR_DisableBkUpAccess>
    }
}
 8009968:	46c0      	nop			@ (mov r8, r8)
 800996a:	46bd      	mov	sp, r7
 800996c:	b002      	add	sp, #8
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20000b6c 	.word	0x20000b6c
 8009974:	0802bda4 	.word	0x0802bda4
 8009978:	0802bda0 	.word	0x0802bda0
 800997c:	0000bebe 	.word	0x0000bebe
 8009980:	0802bdc0 	.word	0x0802bdc0
 8009984:	0802bcf8 	.word	0x0802bcf8

08009988 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8009988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8009992:	250f      	movs	r5, #15
 8009994:	197b      	adds	r3, r7, r5
 8009996:	2201      	movs	r2, #1
 8009998:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800999a:	230e      	movs	r3, #14
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	2200      	movs	r2, #0
 80099a0:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 80099a2:	260c      	movs	r6, #12
 80099a4:	19bc      	adds	r4, r7, r6
 80099a6:	f008 fdb5 	bl	8012514 <powerCheck>
 80099aa:	0003      	movs	r3, r0
 80099ac:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 80099ae:	19bb      	adds	r3, r7, r6
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d104      	bne.n	80099c0 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 80099b6:	197b      	adds	r3, r7, r5
 80099b8:	781a      	ldrb	r2, [r3, #0]
 80099ba:	197b      	adds	r3, r7, r5
 80099bc:	3201      	adds	r2, #1
 80099be:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 80099c0:	230d      	movs	r3, #13
 80099c2:	18fb      	adds	r3, r7, r3
 80099c4:	2200      	movs	r2, #0
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	e039      	b.n	8009a3e <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80099ca:	4b23      	ldr	r3, [pc, #140]	@ (8009a58 <RTC_GetTime+0xd0>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	0018      	movs	r0, r3
 80099d4:	f011 ffa4 	bl	801b920 <HAL_RTC_GetTime>
 80099d8:	1e03      	subs	r3, r0, #0
 80099da:	d005      	beq.n	80099e8 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80099dc:	4a1f      	ldr	r2, [pc, #124]	@ (8009a5c <RTC_GetTime+0xd4>)
 80099de:	4b20      	ldr	r3, [pc, #128]	@ (8009a60 <RTC_GetTime+0xd8>)
 80099e0:	0019      	movs	r1, r3
 80099e2:	2001      	movs	r0, #1
 80099e4:	f009 fd44 	bl	8013470 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80099e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a58 <RTC_GetTime+0xd0>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	2200      	movs	r2, #0
 80099f0:	0018      	movs	r0, r3
 80099f2:	f012 f887 	bl	801bb04 <HAL_RTC_GetDate>
 80099f6:	1e03      	subs	r3, r0, #0
 80099f8:	d005      	beq.n	8009a06 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80099fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009a64 <RTC_GetTime+0xdc>)
 80099fc:	4b18      	ldr	r3, [pc, #96]	@ (8009a60 <RTC_GetTime+0xd8>)
 80099fe:	0019      	movs	r1, r3
 8009a00:	2001      	movs	r0, #1
 8009a02:	f009 fd35 	bl	8013470 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8009a06:	230c      	movs	r3, #12
 8009a08:	18fb      	adds	r3, r7, r3
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d110      	bne.n	8009a32 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	210e      	movs	r1, #14
 8009a16:	187a      	adds	r2, r7, r1
 8009a18:	7812      	ldrb	r2, [r2, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d018      	beq.n	8009a50 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8009a1e:	187b      	adds	r3, r7, r1
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	7812      	ldrb	r2, [r2, #0]
 8009a24:	701a      	strb	r2, [r3, #0]
        t++;
 8009a26:	210f      	movs	r1, #15
 8009a28:	187b      	adds	r3, r7, r1
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	187b      	adds	r3, r7, r1
 8009a2e:	3201      	adds	r2, #1
 8009a30:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8009a32:	210d      	movs	r1, #13
 8009a34:	187b      	adds	r3, r7, r1
 8009a36:	781a      	ldrb	r2, [r3, #0]
 8009a38:	187b      	adds	r3, r7, r1
 8009a3a:	3201      	adds	r2, #1
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	230d      	movs	r3, #13
 8009a40:	18fa      	adds	r2, r7, r3
 8009a42:	230f      	movs	r3, #15
 8009a44:	18fb      	adds	r3, r7, r3
 8009a46:	7812      	ldrb	r2, [r2, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d3bd      	bcc.n	80099ca <RTC_GetTime+0x42>
 8009a4e:	e000      	b.n	8009a52 <RTC_GetTime+0xca>
      }
      else {
        return;
 8009a50:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b005      	add	sp, #20
 8009a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a58:	20000b6c 	.word	0x20000b6c
 8009a5c:	0802bdd8 	.word	0x0802bdd8
 8009a60:	0802bda0 	.word	0x0802bda0
 8009a64:	0802bdf4 	.word	0x0802bdf4

08009a68 <getPosixTime>:

uint32_t getPosixTime(void) {
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009a6e:	003a      	movs	r2, r7
 8009a70:	1d3b      	adds	r3, r7, #4
 8009a72:	0011      	movs	r1, r2
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7ff ff87 	bl	8009988 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009a7a:	1d3a      	adds	r2, r7, #4
 8009a7c:	003b      	movs	r3, r7
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0018      	movs	r0, r3
 8009a82:	f000 f94b 	bl	8009d1c <makeTime>
 8009a86:	0003      	movs	r3, r0
}
 8009a88:	0018      	movs	r0, r3
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	b006      	add	sp, #24
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8009a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a92:	b08d      	sub	sp, #52	@ 0x34
 8009a94:	af04      	add	r7, sp, #16
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8009a9a:	240c      	movs	r4, #12
 8009a9c:	193a      	adds	r2, r7, r4
 8009a9e:	2508      	movs	r5, #8
 8009aa0:	1979      	adds	r1, r7, r5
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	f000 fa03 	bl	8009eb0 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009aaa:	002a      	movs	r2, r5
 8009aac:	18bb      	adds	r3, r7, r2
 8009aae:	789b      	ldrb	r3, [r3, #2]
 8009ab0:	001e      	movs	r6, r3
 8009ab2:	18bb      	adds	r3, r7, r2
 8009ab4:	785b      	ldrb	r3, [r3, #1]
 8009ab6:	469c      	mov	ip, r3
 8009ab8:	18bb      	adds	r3, r7, r2
 8009aba:	78db      	ldrb	r3, [r3, #3]
 8009abc:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009abe:	0021      	movs	r1, r4
 8009ac0:	187b      	adds	r3, r7, r1
 8009ac2:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009ac4:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009ac6:	187b      	adds	r3, r7, r1
 8009ac8:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009aca:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009acc:	187b      	adds	r3, r7, r1
 8009ace:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009ad0:	4906      	ldr	r1, [pc, #24]	@ (8009aec <getUTCfromPosixTime+0x5c>)
 8009ad2:	6838      	ldr	r0, [r7, #0]
 8009ad4:	9303      	str	r3, [sp, #12]
 8009ad6:	9502      	str	r5, [sp, #8]
 8009ad8:	9401      	str	r4, [sp, #4]
 8009ada:	9200      	str	r2, [sp, #0]
 8009adc:	4663      	mov	r3, ip
 8009ade:	0032      	movs	r2, r6
 8009ae0:	f01b fffa 	bl	8025ad8 <siprintf>
}
 8009ae4:	46c0      	nop			@ (mov r8, r8)
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	b009      	add	sp, #36	@ 0x24
 8009aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aec:	0802be10 	.word	0x0802be10

08009af0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009af8:	4b10      	ldr	r3, [pc, #64]	@ (8009b3c <RTC_SetWakeUpTimer+0x4c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	0018      	movs	r0, r3
 8009afe:	f012 fa1d 	bl	801bf3c <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8009b02:	4b0e      	ldr	r3, [pc, #56]	@ (8009b3c <RTC_SetWakeUpTimer+0x4c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	22ff      	movs	r2, #255	@ 0xff
 8009b0c:	401a      	ands	r2, r3
 8009b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b3c <RTC_SetWakeUpTimer+0x4c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	490a      	ldr	r1, [pc, #40]	@ (8009b40 <RTC_SetWakeUpTimer+0x50>)
 8009b16:	430a      	orrs	r2, r1
 8009b18:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8009b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <RTC_SetWakeUpTimer+0x54>)
 8009b1c:	2280      	movs	r2, #128	@ 0x80
 8009b1e:	0352      	lsls	r2, r2, #13
 8009b20:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8009b22:	4b06      	ldr	r3, [pc, #24]	@ (8009b3c <RTC_SetWakeUpTimer+0x4c>)
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	0019      	movs	r1, r3
 8009b2e:	f012 f92d 	bl	801bd8c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8009b32:	46c0      	nop			@ (mov r8, r8)
 8009b34:	46bd      	mov	sp, r7
 8009b36:	b002      	add	sp, #8
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	46c0      	nop			@ (mov r8, r8)
 8009b3c:	20000b6c 	.word	0x20000b6c
 8009b40:	fffffb7f 	.word	0xfffffb7f
 8009b44:	40010400 	.word	0x40010400

08009b48 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8009b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8009b7c <Enter_Standby_Mode+0x34>)
 8009b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b80 <Enter_Standby_Mode+0x38>)
 8009b50:	0019      	movs	r1, r3
 8009b52:	2003      	movs	r0, #3
 8009b54:	f009 fc8c 	bl	8013470 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8009b58:	2064      	movs	r0, #100	@ 0x64
 8009b5a:	f00a fa15 	bl	8013f88 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009b5e:	4b09      	ldr	r3, [pc, #36]	@ (8009b84 <Enter_Standby_Mode+0x3c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	0018      	movs	r0, r3
 8009b64:	f012 f9ea 	bl	801bf3c <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8009b68:	f002 f9bc 	bl	800bee4 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8009b6c:	f00a fa30 	bl	8013fd0 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8009b70:	f010 fe26 	bl	801a7c0 <HAL_PWR_EnterSTANDBYMode>
}
 8009b74:	46c0      	nop			@ (mov r8, r8)
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	46c0      	nop			@ (mov r8, r8)
 8009b7c:	0802be64 	.word	0x0802be64
 8009b80:	0802bcf8 	.word	0x0802bcf8
 8009b84:	20000b6c 	.word	0x20000b6c

08009b88 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	0002      	movs	r2, r0
 8009b90:	1dbb      	adds	r3, r7, #6
 8009b92:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8009b94:	4b4f      	ldr	r3, [pc, #316]	@ (8009cd4 <Enter_Stop_Mode+0x14c>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8009b9c:	f004 f94a 	bl	800de34 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8009ba0:	f7ff fab2 	bl	8009108 <ReadBatteryVoltage>
 8009ba4:	1c03      	adds	r3, r0, #0
 8009ba6:	1c18      	adds	r0, r3, #0
 8009ba8:	f7f9 fe74 	bl	8003894 <__aeabi_f2d>
 8009bac:	0002      	movs	r2, r0
 8009bae:	000b      	movs	r3, r1
 8009bb0:	4849      	ldr	r0, [pc, #292]	@ (8009cd8 <Enter_Stop_Mode+0x150>)
 8009bb2:	494a      	ldr	r1, [pc, #296]	@ (8009cdc <Enter_Stop_Mode+0x154>)
 8009bb4:	9200      	str	r2, [sp, #0]
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	0002      	movs	r2, r0
 8009bba:	2002      	movs	r0, #2
 8009bbc:	f009 fc58 	bl	8013470 <CreateLine>
  powerDisplay(powerCheck());
 8009bc0:	f008 fca8 	bl	8012514 <powerCheck>
 8009bc4:	0003      	movs	r3, r0
 8009bc6:	0018      	movs	r0, r3
 8009bc8:	f008 fcc0 	bl	801254c <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8009bcc:	1dbb      	adds	r3, r7, #6
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	4a43      	ldr	r2, [pc, #268]	@ (8009ce0 <Enter_Stop_Mode+0x158>)
 8009bd2:	4944      	ldr	r1, [pc, #272]	@ (8009ce4 <Enter_Stop_Mode+0x15c>)
 8009bd4:	2003      	movs	r0, #3
 8009bd6:	f009 fc4b 	bl	8013470 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8009bda:	f7ff ff45 	bl	8009a68 <getPosixTime>
 8009bde:	0002      	movs	r2, r0
 8009be0:	1dbb      	adds	r3, r7, #6
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	18d3      	adds	r3, r2, r3
 8009be6:	4a40      	ldr	r2, [pc, #256]	@ (8009ce8 <Enter_Stop_Mode+0x160>)
 8009be8:	0011      	movs	r1, r2
 8009bea:	0018      	movs	r0, r3
 8009bec:	f7ff ff50 	bl	8009a90 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8009bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8009ce8 <Enter_Stop_Mode+0x160>)
 8009bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8009cec <Enter_Stop_Mode+0x164>)
 8009bf4:	4939      	ldr	r1, [pc, #228]	@ (8009cdc <Enter_Stop_Mode+0x154>)
 8009bf6:	2002      	movs	r0, #2
 8009bf8:	f009 fc3a 	bl	8013470 <CreateLine>
  HAL_Delay(100);
 8009bfc:	2064      	movs	r0, #100	@ 0x64
 8009bfe:	f00a f9c3 	bl	8013f88 <HAL_Delay>
  HAL_SuspendTick();
 8009c02:	f00a f9e5 	bl	8013fd0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8009c06:	1dbb      	adds	r3, r7, #6
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	f7ff ff70 	bl	8009af0 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009c10:	2101      	movs	r1, #1
 8009c12:	2001      	movs	r0, #1
 8009c14:	f010 fd78 	bl	801a708 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8009c18:	f002 fe26 	bl	800c868 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8009c1c:	f00a f9e6 	bl	8013fec <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8009c20:	1dbb      	adds	r3, r7, #6
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	0018      	movs	r0, r3
 8009c26:	f004 f879 	bl	800dd1c <sen5x_enable>
 8009c2a:	1e03      	subs	r3, r0, #0
 8009c2c:	d01e      	beq.n	8009c6c <Enter_Stop_Mode+0xe4>
    showTime();
 8009c2e:	f7ff fbaf 	bl	8009390 <showTime>
    set_light_on_state();
 8009c32:	f004 fdb3 	bl	800e79c <set_light_on_state>
    if (!userToggle) {
 8009c36:	4b2e      	ldr	r3, [pc, #184]	@ (8009cf0 <Enter_Stop_Mode+0x168>)
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	4053      	eors	r3, r2
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d013      	beq.n	8009c6c <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8009c44:	201c      	movs	r0, #28
 8009c46:	f7ff ff53 	bl	8009af0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8009c4a:	4a25      	ldr	r2, [pc, #148]	@ (8009ce0 <Enter_Stop_Mode+0x158>)
 8009c4c:	4925      	ldr	r1, [pc, #148]	@ (8009ce4 <Enter_Stop_Mode+0x15c>)
 8009c4e:	231c      	movs	r3, #28
 8009c50:	2003      	movs	r0, #3
 8009c52:	f009 fc0d 	bl	8013470 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009c56:	2101      	movs	r1, #1
 8009c58:	2001      	movs	r0, #1
 8009c5a:	f010 fd55 	bl	801a708 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8009c5e:	f002 fe03 	bl	800c868 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8009c62:	f00a f9c3 	bl	8013fec <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8009c66:	2000      	movs	r0, #0
 8009c68:	f004 f836 	bl	800dcd8 <setsen5xReadTimer>
    }
  }
  showTime();
 8009c6c:	f7ff fb90 	bl	8009390 <showTime>
  EnabledConnectedDevices();
 8009c70:	f003 fbc8 	bl	800d404 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 8009c74:	f003 fcca 	bl	800d60c <ResetDBACalculator>
  ResetBMP280samplecounter();
 8009c78:	f000 ffa2 	bl	800abc0 <ResetBMP280samplecounter>
  ResetSGP40samplecounter();
 8009c7c:	f006 fc06 	bl	801048c <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 8009c80:	f7f9 ff5c 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 8009c84:	2000      	movs	r0, #0
 8009c86:	f004 f839 	bl	800dcfc <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8009c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8009cf4 <Enter_Stop_Mode+0x16c>)
 8009c8c:	0018      	movs	r0, r3
 8009c8e:	f7fa fe45 	bl	800491c <setESPTimeStamp>
  setSGP40TimeStamp(30);
 8009c92:	201e      	movs	r0, #30
 8009c94:	f006 fbe8 	bl	8010468 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 8009c98:	205a      	movs	r0, #90	@ 0x5a
 8009c9a:	f009 fe89 	bl	80139b0 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 8009c9e:	203c      	movs	r0, #60	@ 0x3c
 8009ca0:	f000 fb98 	bl	800a3d4 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8009ca4:	205a      	movs	r0, #90	@ 0x5a
 8009ca6:	f000 ff79 	bl	800ab9c <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 8009caa:	2000      	movs	r0, #0
 8009cac:	f7f9 ff50 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	f003 fc99 	bl	800d5e8 <setMICTimeStamp>
  ESPTransmitDone = false;
 8009cb6:	4b10      	ldr	r3, [pc, #64]	@ (8009cf8 <Enter_Stop_Mode+0x170>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8009cbc:	f00a f95a 	bl	8013f74 <HAL_GetTick>
 8009cc0:	0003      	movs	r3, r0
 8009cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8009cf4 <Enter_Stop_Mode+0x16c>)
 8009cc4:	189a      	adds	r2, r3, r2
 8009cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cfc <Enter_Stop_Mode+0x174>)
 8009cc8:	601a      	str	r2, [r3, #0]
}
 8009cca:	46c0      	nop			@ (mov r8, r8)
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	b002      	add	sp, #8
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	46c0      	nop			@ (mov r8, r8)
 8009cd4:	20000ee1 	.word	0x20000ee1
 8009cd8:	0802be88 	.word	0x0802be88
 8009cdc:	0802bd4c 	.word	0x0802bd4c
 8009ce0:	0802bea0 	.word	0x0802bea0
 8009ce4:	0802bcf8 	.word	0x0802bcf8
 8009ce8:	20000b74 	.word	0x20000b74
 8009cec:	0802bec4 	.word	0x0802bec4
 8009cf0:	20001e72 	.word	0x20001e72
 8009cf4:	00001194 	.word	0x00001194
 8009cf8:	200005ac 	.word	0x200005ac
 8009cfc:	20000e38 	.word	0x20000e38

08009d00 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8009d08:	4b03      	ldr	r3, [pc, #12]	@ (8009d18 <InitClock+0x18>)
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	601a      	str	r2, [r3, #0]
}
 8009d0e:	46c0      	nop			@ (mov r8, r8)
 8009d10:	46bd      	mov	sp, r7
 8009d12:	b002      	add	sp, #8
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	46c0      	nop			@ (mov r8, r8)
 8009d18:	20000b6c 	.word	0x20000b6c

08009d1c <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	78db      	ldrb	r3, [r3, #3]
 8009d2a:	001a      	movs	r2, r3
 8009d2c:	0013      	movs	r3, r2
 8009d2e:	025b      	lsls	r3, r3, #9
 8009d30:	189b      	adds	r3, r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	189b      	adds	r3, r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	189b      	adds	r3, r3, r2
 8009d3a:	011a      	lsls	r2, r3, #4
 8009d3c:	1ad2      	subs	r2, r2, r3
 8009d3e:	01d3      	lsls	r3, r2, #7
 8009d40:	001a      	movs	r2, r3
 8009d42:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009d44:	2300      	movs	r3, #0
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	e028      	b.n	8009d9c <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4a53      	ldr	r2, [pc, #332]	@ (8009e9c <makeTime+0x180>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	db21      	blt.n	8009d96 <makeTime+0x7a>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4a52      	ldr	r2, [pc, #328]	@ (8009ea0 <makeTime+0x184>)
 8009d56:	4694      	mov	ip, r2
 8009d58:	4463      	add	r3, ip
 8009d5a:	001a      	movs	r2, r3
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	4013      	ands	r3, r2
 8009d60:	d119      	bne.n	8009d96 <makeTime+0x7a>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4a4e      	ldr	r2, [pc, #312]	@ (8009ea0 <makeTime+0x184>)
 8009d66:	4694      	mov	ip, r2
 8009d68:	4463      	add	r3, ip
 8009d6a:	2164      	movs	r1, #100	@ 0x64
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f7f6 fb89 	bl	8000484 <__aeabi_idivmod>
 8009d72:	1e0b      	subs	r3, r1, #0
 8009d74:	d10a      	bne.n	8009d8c <makeTime+0x70>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4a49      	ldr	r2, [pc, #292]	@ (8009ea0 <makeTime+0x184>)
 8009d7a:	4694      	mov	ip, r2
 8009d7c:	4463      	add	r3, ip
 8009d7e:	22c8      	movs	r2, #200	@ 0xc8
 8009d80:	0051      	lsls	r1, r2, #1
 8009d82:	0018      	movs	r0, r3
 8009d84:	f7f6 fb7e 	bl	8000484 <__aeabi_idivmod>
 8009d88:	1e0b      	subs	r3, r1, #0
 8009d8a:	d104      	bne.n	8009d96 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	4a45      	ldr	r2, [pc, #276]	@ (8009ea4 <makeTime+0x188>)
 8009d90:	4694      	mov	ip, r2
 8009d92:	4463      	add	r3, ip
 8009d94:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	78db      	ldrb	r3, [r3, #3]
 8009da0:	001a      	movs	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	dbd0      	blt.n	8009d4a <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8009da8:	2301      	movs	r3, #1
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	e03c      	b.n	8009e28 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d125      	bne.n	8009e00 <makeTime+0xe4>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	78db      	ldrb	r3, [r3, #3]
 8009db8:	4a39      	ldr	r2, [pc, #228]	@ (8009ea0 <makeTime+0x184>)
 8009dba:	4694      	mov	ip, r2
 8009dbc:	4463      	add	r3, ip
 8009dbe:	001a      	movs	r2, r3
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	d11c      	bne.n	8009e00 <makeTime+0xe4>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	78db      	ldrb	r3, [r3, #3]
 8009dca:	4a35      	ldr	r2, [pc, #212]	@ (8009ea0 <makeTime+0x184>)
 8009dcc:	4694      	mov	ip, r2
 8009dce:	4463      	add	r3, ip
 8009dd0:	2164      	movs	r1, #100	@ 0x64
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f7f6 fb56 	bl	8000484 <__aeabi_idivmod>
 8009dd8:	1e0b      	subs	r3, r1, #0
 8009dda:	d10b      	bne.n	8009df4 <makeTime+0xd8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	78db      	ldrb	r3, [r3, #3]
 8009de0:	4a2f      	ldr	r2, [pc, #188]	@ (8009ea0 <makeTime+0x184>)
 8009de2:	4694      	mov	ip, r2
 8009de4:	4463      	add	r3, ip
 8009de6:	22c8      	movs	r2, #200	@ 0xc8
 8009de8:	0051      	lsls	r1, r2, #1
 8009dea:	0018      	movs	r0, r3
 8009dec:	f7f6 fb4a 	bl	8000484 <__aeabi_idivmod>
 8009df0:	1e0b      	subs	r3, r1, #0
 8009df2:	d105      	bne.n	8009e00 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	4a2c      	ldr	r2, [pc, #176]	@ (8009ea8 <makeTime+0x18c>)
 8009df8:	4694      	mov	ip, r2
 8009dfa:	4463      	add	r3, ip
 8009dfc:	60bb      	str	r3, [r7, #8]
 8009dfe:	e010      	b.n	8009e22 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3b01      	subs	r3, #1
 8009e04:	4a29      	ldr	r2, [pc, #164]	@ (8009eac <makeTime+0x190>)
 8009e06:	5cd3      	ldrb	r3, [r2, r3]
 8009e08:	001a      	movs	r2, r3
 8009e0a:	0013      	movs	r3, r2
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	189b      	adds	r3, r3, r2
 8009e10:	011a      	lsls	r2, r3, #4
 8009e12:	1ad2      	subs	r2, r2, r3
 8009e14:	0113      	lsls	r3, r2, #4
 8009e16:	1a9b      	subs	r3, r3, r2
 8009e18:	01db      	lsls	r3, r3, #7
 8009e1a:	001a      	movs	r2, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3301      	adds	r3, #1
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	001a      	movs	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4293      	cmp	r3, r2
 8009e32:	dbbc      	blt.n	8009dae <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	789b      	ldrb	r3, [r3, #2]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	001a      	movs	r2, r3
 8009e3c:	0013      	movs	r3, r2
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	189b      	adds	r3, r3, r2
 8009e42:	011a      	lsls	r2, r3, #4
 8009e44:	1ad2      	subs	r2, r2, r3
 8009e46:	0113      	lsls	r3, r2, #4
 8009e48:	1a9b      	subs	r3, r3, r2
 8009e4a:	01db      	lsls	r3, r3, #7
 8009e4c:	001a      	movs	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	189b      	adds	r3, r3, r2
 8009e52:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	001a      	movs	r2, r3
 8009e5a:	0013      	movs	r3, r2
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	1a9b      	subs	r3, r3, r2
 8009e60:	011a      	lsls	r2, r3, #4
 8009e62:	1ad2      	subs	r2, r2, r3
 8009e64:	0113      	lsls	r3, r2, #4
 8009e66:	001a      	movs	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	189b      	adds	r3, r3, r2
 8009e6c:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	785b      	ldrb	r3, [r3, #1]
 8009e72:	001a      	movs	r2, r3
 8009e74:	0013      	movs	r3, r2
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	001a      	movs	r2, r3
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	189b      	adds	r3, r3, r2
 8009e82:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	789b      	ldrb	r3, [r3, #2]
 8009e88:	001a      	movs	r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	189b      	adds	r3, r3, r2
 8009e8e:	60bb      	str	r3, [r7, #8]
  return seconds;
 8009e90:	68bb      	ldr	r3, [r7, #8]
}
 8009e92:	0018      	movs	r0, r3
 8009e94:	46bd      	mov	sp, r7
 8009e96:	b004      	add	sp, #16
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	46c0      	nop			@ (mov r8, r8)
 8009e9c:	fffff84f 	.word	0xfffff84f
 8009ea0:	000007b2 	.word	0x000007b2
 8009ea4:	00015180 	.word	0x00015180
 8009ea8:	00263b80 	.word	0x00263b80
 8009eac:	0802e088 	.word	0x0802e088

08009eb0 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009eb0:	b590      	push	{r4, r7, lr}
 8009eb2:	b089      	sub	sp, #36	@ 0x24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	213c      	movs	r1, #60	@ 0x3c
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f7f6 f9f3 	bl	80002b0 <__aeabi_uidivmod>
 8009eca:	000b      	movs	r3, r1
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	213c      	movs	r1, #60	@ 0x3c
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f7f6 f964 	bl	80001a4 <__udivsi3>
 8009edc:	0003      	movs	r3, r0
 8009ede:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	213c      	movs	r1, #60	@ 0x3c
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f7f6 f9e3 	bl	80002b0 <__aeabi_uidivmod>
 8009eea:	000b      	movs	r3, r1
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	213c      	movs	r1, #60	@ 0x3c
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f7f6 f954 	bl	80001a4 <__udivsi3>
 8009efc:	0003      	movs	r3, r0
 8009efe:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2118      	movs	r1, #24
 8009f04:	0018      	movs	r0, r3
 8009f06:	f7f6 f9d3 	bl	80002b0 <__aeabi_uidivmod>
 8009f0a:	000b      	movs	r3, r1
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	2118      	movs	r1, #24
 8009f16:	0018      	movs	r0, r3
 8009f18:	f7f6 f944 	bl	80001a4 <__udivsi3>
 8009f1c:	0003      	movs	r3, r0
 8009f1e:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	2107      	movs	r1, #7
 8009f26:	0018      	movs	r0, r3
 8009f28:	f7f6 f9c2 	bl	80002b0 <__aeabi_uidivmod>
 8009f2c:	000b      	movs	r3, r1
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	3301      	adds	r3, #1
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	701a      	strb	r2, [r3, #0]
  year = 0;
 8009f38:	231f      	movs	r3, #31
 8009f3a:	18fb      	adds	r3, r7, r3
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
  days = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009f44:	e005      	b.n	8009f52 <breakPosixTime+0xa2>
    year++;
 8009f46:	211f      	movs	r1, #31
 8009f48:	187b      	adds	r3, r7, r1
 8009f4a:	781a      	ldrb	r2, [r3, #0]
 8009f4c:	187b      	adds	r3, r7, r1
 8009f4e:	3201      	adds	r2, #1
 8009f50:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009f52:	241f      	movs	r4, #31
 8009f54:	193b      	adds	r3, r7, r4
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	4a64      	ldr	r2, [pc, #400]	@ (800a0ec <breakPosixTime+0x23c>)
 8009f5a:	4694      	mov	ip, r2
 8009f5c:	4463      	add	r3, ip
 8009f5e:	001a      	movs	r2, r3
 8009f60:	2303      	movs	r3, #3
 8009f62:	4013      	ands	r3, r2
 8009f64:	d119      	bne.n	8009f9a <breakPosixTime+0xea>
 8009f66:	193b      	adds	r3, r7, r4
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	4a60      	ldr	r2, [pc, #384]	@ (800a0ec <breakPosixTime+0x23c>)
 8009f6c:	4694      	mov	ip, r2
 8009f6e:	4463      	add	r3, ip
 8009f70:	2164      	movs	r1, #100	@ 0x64
 8009f72:	0018      	movs	r0, r3
 8009f74:	f7f6 fa86 	bl	8000484 <__aeabi_idivmod>
 8009f78:	1e0b      	subs	r3, r1, #0
 8009f7a:	d10b      	bne.n	8009f94 <breakPosixTime+0xe4>
 8009f7c:	193b      	adds	r3, r7, r4
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	4a5a      	ldr	r2, [pc, #360]	@ (800a0ec <breakPosixTime+0x23c>)
 8009f82:	4694      	mov	ip, r2
 8009f84:	4463      	add	r3, ip
 8009f86:	22c8      	movs	r2, #200	@ 0xc8
 8009f88:	0051      	lsls	r1, r2, #1
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f7f6 fa7a 	bl	8000484 <__aeabi_idivmod>
 8009f90:	1e0b      	subs	r3, r1, #0
 8009f92:	d102      	bne.n	8009f9a <breakPosixTime+0xea>
 8009f94:	23b7      	movs	r3, #183	@ 0xb7
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	e001      	b.n	8009f9e <breakPosixTime+0xee>
 8009f9a:	236e      	movs	r3, #110	@ 0x6e
 8009f9c:	33ff      	adds	r3, #255	@ 0xff
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	18d3      	adds	r3, r2, r3
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d9cc      	bls.n	8009f46 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	241f      	movs	r4, #31
 8009fb0:	193a      	adds	r2, r7, r4
 8009fb2:	7812      	ldrb	r2, [r2, #0]
 8009fb4:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8009fb6:	193b      	adds	r3, r7, r4
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	4a4c      	ldr	r2, [pc, #304]	@ (800a0ec <breakPosixTime+0x23c>)
 8009fbc:	4694      	mov	ip, r2
 8009fbe:	4463      	add	r3, ip
 8009fc0:	001a      	movs	r2, r3
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	d119      	bne.n	8009ffc <breakPosixTime+0x14c>
 8009fc8:	193b      	adds	r3, r7, r4
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	4a47      	ldr	r2, [pc, #284]	@ (800a0ec <breakPosixTime+0x23c>)
 8009fce:	4694      	mov	ip, r2
 8009fd0:	4463      	add	r3, ip
 8009fd2:	2164      	movs	r1, #100	@ 0x64
 8009fd4:	0018      	movs	r0, r3
 8009fd6:	f7f6 fa55 	bl	8000484 <__aeabi_idivmod>
 8009fda:	1e0b      	subs	r3, r1, #0
 8009fdc:	d10b      	bne.n	8009ff6 <breakPosixTime+0x146>
 8009fde:	193b      	adds	r3, r7, r4
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	4a42      	ldr	r2, [pc, #264]	@ (800a0ec <breakPosixTime+0x23c>)
 8009fe4:	4694      	mov	ip, r2
 8009fe6:	4463      	add	r3, ip
 8009fe8:	22c8      	movs	r2, #200	@ 0xc8
 8009fea:	0051      	lsls	r1, r2, #1
 8009fec:	0018      	movs	r0, r3
 8009fee:	f7f6 fa49 	bl	8000484 <__aeabi_idivmod>
 8009ff2:	1e0b      	subs	r3, r1, #0
 8009ff4:	d102      	bne.n	8009ffc <breakPosixTime+0x14c>
 8009ff6:	23b7      	movs	r3, #183	@ 0xb7
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	e001      	b.n	800a000 <breakPosixTime+0x150>
 8009ffc:	236e      	movs	r3, #110	@ 0x6e
 8009ffe:	33ff      	adds	r3, #255	@ 0xff
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	61bb      	str	r3, [r7, #24]

  days=0;
 800a00e:	2300      	movs	r3, #0
 800a010:	617b      	str	r3, [r7, #20]
  month=0;
 800a012:	211e      	movs	r1, #30
 800a014:	187b      	adds	r3, r7, r1
 800a016:	2200      	movs	r2, #0
 800a018:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800a01a:	231d      	movs	r3, #29
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	2200      	movs	r2, #0
 800a020:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800a022:	187b      	adds	r3, r7, r1
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
 800a028:	e048      	b.n	800a0bc <breakPosixTime+0x20c>
    if (month==1) { // february
 800a02a:	231e      	movs	r3, #30
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d12a      	bne.n	800a08a <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800a034:	241f      	movs	r4, #31
 800a036:	193b      	adds	r3, r7, r4
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	4a2c      	ldr	r2, [pc, #176]	@ (800a0ec <breakPosixTime+0x23c>)
 800a03c:	4694      	mov	ip, r2
 800a03e:	4463      	add	r3, ip
 800a040:	001a      	movs	r2, r3
 800a042:	2303      	movs	r3, #3
 800a044:	4013      	ands	r3, r2
 800a046:	d11b      	bne.n	800a080 <breakPosixTime+0x1d0>
 800a048:	193b      	adds	r3, r7, r4
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	4a27      	ldr	r2, [pc, #156]	@ (800a0ec <breakPosixTime+0x23c>)
 800a04e:	4694      	mov	ip, r2
 800a050:	4463      	add	r3, ip
 800a052:	2164      	movs	r1, #100	@ 0x64
 800a054:	0018      	movs	r0, r3
 800a056:	f7f6 fa15 	bl	8000484 <__aeabi_idivmod>
 800a05a:	1e0b      	subs	r3, r1, #0
 800a05c:	d10b      	bne.n	800a076 <breakPosixTime+0x1c6>
 800a05e:	193b      	adds	r3, r7, r4
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	4a22      	ldr	r2, [pc, #136]	@ (800a0ec <breakPosixTime+0x23c>)
 800a064:	4694      	mov	ip, r2
 800a066:	4463      	add	r3, ip
 800a068:	22c8      	movs	r2, #200	@ 0xc8
 800a06a:	0051      	lsls	r1, r2, #1
 800a06c:	0018      	movs	r0, r3
 800a06e:	f7f6 fa09 	bl	8000484 <__aeabi_idivmod>
 800a072:	1e0b      	subs	r3, r1, #0
 800a074:	d104      	bne.n	800a080 <breakPosixTime+0x1d0>
        monthLength=29;
 800a076:	231d      	movs	r3, #29
 800a078:	18fb      	adds	r3, r7, r3
 800a07a:	221d      	movs	r2, #29
 800a07c:	701a      	strb	r2, [r3, #0]
 800a07e:	e00c      	b.n	800a09a <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800a080:	231d      	movs	r3, #29
 800a082:	18fb      	adds	r3, r7, r3
 800a084:	221c      	movs	r2, #28
 800a086:	701a      	strb	r2, [r3, #0]
 800a088:	e007      	b.n	800a09a <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800a08a:	231e      	movs	r3, #30
 800a08c:	18fb      	adds	r3, r7, r3
 800a08e:	781a      	ldrb	r2, [r3, #0]
 800a090:	231d      	movs	r3, #29
 800a092:	18fb      	adds	r3, r7, r3
 800a094:	4916      	ldr	r1, [pc, #88]	@ (800a0f0 <breakPosixTime+0x240>)
 800a096:	5c8a      	ldrb	r2, [r1, r2]
 800a098:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800a09a:	211d      	movs	r1, #29
 800a09c:	187b      	adds	r3, r7, r1
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d310      	bcc.n	800a0c8 <breakPosixTime+0x218>
      time -= monthLength;
 800a0a6:	187b      	adds	r3, r7, r1
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800a0b0:	211e      	movs	r1, #30
 800a0b2:	187b      	adds	r3, r7, r1
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	187b      	adds	r3, r7, r1
 800a0b8:	3201      	adds	r2, #1
 800a0ba:	701a      	strb	r2, [r3, #0]
 800a0bc:	231e      	movs	r3, #30
 800a0be:	18fb      	adds	r3, r7, r3
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b0b      	cmp	r3, #11
 800a0c4:	d9b1      	bls.n	800a02a <breakPosixTime+0x17a>
 800a0c6:	e000      	b.n	800a0ca <breakPosixTime+0x21a>
    } else {
        break;
 800a0c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800a0ca:	231e      	movs	r3, #30
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	3301      	adds	r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	709a      	strb	r2, [r3, #2]
}
 800a0e4:	46c0      	nop			@ (mov r8, r8)
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	b009      	add	sp, #36	@ 0x24
 800a0ea:	bd90      	pop	{r4, r7, pc}
 800a0ec:	000007b2 	.word	0x000007b2
 800a0f0:	0802e088 	.word	0x0802e088

0800a0f4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a0fa:	003b      	movs	r3, r7
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	2308      	movs	r3, #8
 800a100:	001a      	movs	r2, r3
 800a102:	2100      	movs	r1, #0
 800a104:	f01b fe52 	bl	8025dac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800a108:	4b30      	ldr	r3, [pc, #192]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a10a:	4a31      	ldr	r2, [pc, #196]	@ (800a1d0 <MX_ADC_Init+0xdc>)
 800a10c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800a10e:	4b2f      	ldr	r3, [pc, #188]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a110:	2200      	movs	r2, #0
 800a112:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800a114:	4b2d      	ldr	r3, [pc, #180]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a116:	22c0      	movs	r2, #192	@ 0xc0
 800a118:	0612      	lsls	r2, r2, #24
 800a11a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800a11c:	4b2b      	ldr	r3, [pc, #172]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a11e:	2200      	movs	r2, #0
 800a120:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a122:	4b2a      	ldr	r3, [pc, #168]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a124:	2200      	movs	r2, #0
 800a126:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800a128:	4b28      	ldr	r3, [pc, #160]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a12e:	4b27      	ldr	r3, [pc, #156]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a130:	2200      	movs	r2, #0
 800a132:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800a134:	4b25      	ldr	r3, [pc, #148]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a136:	2220      	movs	r2, #32
 800a138:	2100      	movs	r1, #0
 800a13a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800a13c:	4b23      	ldr	r3, [pc, #140]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a13e:	2221      	movs	r2, #33	@ 0x21
 800a140:	2101      	movs	r1, #1
 800a142:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a144:	4b21      	ldr	r3, [pc, #132]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a146:	2200      	movs	r2, #0
 800a148:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a14a:	4b20      	ldr	r3, [pc, #128]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a14c:	22c2      	movs	r2, #194	@ 0xc2
 800a14e:	32ff      	adds	r2, #255	@ 0xff
 800a150:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800a152:	4b1e      	ldr	r3, [pc, #120]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a154:	222c      	movs	r2, #44	@ 0x2c
 800a156:	2100      	movs	r1, #0
 800a158:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a15a:	4b1c      	ldr	r3, [pc, #112]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a15c:	2204      	movs	r2, #4
 800a15e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a160:	4b1a      	ldr	r3, [pc, #104]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a162:	2200      	movs	r2, #0
 800a164:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800a166:	4b19      	ldr	r3, [pc, #100]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a168:	2200      	movs	r2, #0
 800a16a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800a16c:	4b17      	ldr	r3, [pc, #92]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a16e:	2200      	movs	r2, #0
 800a170:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800a172:	4b16      	ldr	r3, [pc, #88]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a174:	2200      	movs	r2, #0
 800a176:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800a178:	4b14      	ldr	r3, [pc, #80]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a17a:	0018      	movs	r0, r3
 800a17c:	f009 ff62 	bl	8014044 <HAL_ADC_Init>
 800a180:	1e03      	subs	r3, r0, #0
 800a182:	d001      	beq.n	800a188 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800a184:	f002 fce0 	bl	800cb48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a188:	003b      	movs	r3, r7
 800a18a:	4a12      	ldr	r2, [pc, #72]	@ (800a1d4 <MX_ADC_Init+0xe0>)
 800a18c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a18e:	003b      	movs	r3, r7
 800a190:	2280      	movs	r2, #128	@ 0x80
 800a192:	0152      	lsls	r2, r2, #5
 800a194:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a196:	003a      	movs	r2, r7
 800a198:	4b0c      	ldr	r3, [pc, #48]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a19a:	0011      	movs	r1, r2
 800a19c:	0018      	movs	r0, r3
 800a19e:	f00a f9c1 	bl	8014524 <HAL_ADC_ConfigChannel>
 800a1a2:	1e03      	subs	r3, r0, #0
 800a1a4:	d001      	beq.n	800a1aa <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800a1a6:	f002 fccf 	bl	800cb48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a1aa:	003b      	movs	r3, r7
 800a1ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a1d8 <MX_ADC_Init+0xe4>)
 800a1ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a1b0:	003a      	movs	r2, r7
 800a1b2:	4b06      	ldr	r3, [pc, #24]	@ (800a1cc <MX_ADC_Init+0xd8>)
 800a1b4:	0011      	movs	r1, r2
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f00a f9b4 	bl	8014524 <HAL_ADC_ConfigChannel>
 800a1bc:	1e03      	subs	r3, r0, #0
 800a1be:	d001      	beq.n	800a1c4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800a1c0:	f002 fcc2 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800a1c4:	46c0      	nop			@ (mov r8, r8)
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	b002      	add	sp, #8
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000b8c 	.word	0x20000b8c
 800a1d0:	40012400 	.word	0x40012400
 800a1d4:	38004000 	.word	0x38004000
 800a1d8:	3c008000 	.word	0x3c008000

0800a1dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a1dc:	b590      	push	{r4, r7, lr}
 800a1de:	b089      	sub	sp, #36	@ 0x24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1e4:	240c      	movs	r4, #12
 800a1e6:	193b      	adds	r3, r7, r4
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	2314      	movs	r3, #20
 800a1ec:	001a      	movs	r2, r3
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	f01b fddc 	bl	8025dac <memset>
  if(adcHandle->Instance==ADC1)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a14      	ldr	r2, [pc, #80]	@ (800a24c <HAL_ADC_MspInit+0x70>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d121      	bne.n	800a242 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a1fe:	4b14      	ldr	r3, [pc, #80]	@ (800a250 <HAL_ADC_MspInit+0x74>)
 800a200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a202:	4b13      	ldr	r3, [pc, #76]	@ (800a250 <HAL_ADC_MspInit+0x74>)
 800a204:	2180      	movs	r1, #128	@ 0x80
 800a206:	0089      	lsls	r1, r1, #2
 800a208:	430a      	orrs	r2, r1
 800a20a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a20c:	4b10      	ldr	r3, [pc, #64]	@ (800a250 <HAL_ADC_MspInit+0x74>)
 800a20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a210:	4b0f      	ldr	r3, [pc, #60]	@ (800a250 <HAL_ADC_MspInit+0x74>)
 800a212:	2104      	movs	r1, #4
 800a214:	430a      	orrs	r2, r1
 800a216:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a218:	4b0d      	ldr	r3, [pc, #52]	@ (800a250 <HAL_ADC_MspInit+0x74>)
 800a21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21c:	2204      	movs	r2, #4
 800a21e:	4013      	ands	r3, r2
 800a220:	60bb      	str	r3, [r7, #8]
 800a222:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800a224:	193b      	adds	r3, r7, r4
 800a226:	2230      	movs	r2, #48	@ 0x30
 800a228:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a22a:	193b      	adds	r3, r7, r4
 800a22c:	2203      	movs	r2, #3
 800a22e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a230:	193b      	adds	r3, r7, r4
 800a232:	2200      	movs	r2, #0
 800a234:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a236:	193b      	adds	r3, r7, r4
 800a238:	4a06      	ldr	r2, [pc, #24]	@ (800a254 <HAL_ADC_MspInit+0x78>)
 800a23a:	0019      	movs	r1, r3
 800a23c:	0010      	movs	r0, r2
 800a23e:	f00a ff8f 	bl	8015160 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a242:	46c0      	nop			@ (mov r8, r8)
 800a244:	46bd      	mov	sp, r7
 800a246:	b009      	add	sp, #36	@ 0x24
 800a248:	bd90      	pop	{r4, r7, pc}
 800a24a:	46c0      	nop			@ (mov r8, r8)
 800a24c:	40012400 	.word	0x40012400
 800a250:	40021000 	.word	0x40021000
 800a254:	50000800 	.word	0x50000800

0800a258 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a258:	b590      	push	{r4, r7, lr}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6039      	str	r1, [r7, #0]
 800a260:	0011      	movs	r1, r2
 800a262:	1dfb      	adds	r3, r7, #7
 800a264:	1c02      	adds	r2, r0, #0
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	1dbb      	adds	r3, r7, #6
 800a26a:	1c0a      	adds	r2, r1, #0
 800a26c:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800a26e:	4b0a      	ldr	r3, [pc, #40]	@ (800a298 <ReadDirRegister+0x40>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800a276:	4b08      	ldr	r3, [pc, #32]	@ (800a298 <ReadDirRegister+0x40>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	1dba      	adds	r2, r7, #6
 800a27c:	7814      	ldrb	r4, [r2, #0]
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	1dfa      	adds	r2, r7, #7
 800a282:	7810      	ldrb	r0, [r2, #0]
 800a284:	0022      	movs	r2, r4
 800a286:	4798      	blx	r3
 800a288:	0003      	movs	r3, r0
 800a28a:	e000      	b.n	800a28e <ReadDirRegister+0x36>
  }
  return false;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	0018      	movs	r0, r3
 800a290:	46bd      	mov	sp, r7
 800a292:	b003      	add	sp, #12
 800a294:	bd90      	pop	{r4, r7, pc}
 800a296:	46c0      	nop			@ (mov r8, r8)
 800a298:	20000bf8 	.word	0x20000bf8

0800a29c <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a29c:	b590      	push	{r4, r7, lr}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6039      	str	r1, [r7, #0]
 800a2a4:	0011      	movs	r1, r2
 800a2a6:	1dfb      	adds	r3, r7, #7
 800a2a8:	1c02      	adds	r2, r0, #0
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	1dbb      	adds	r3, r7, #6
 800a2ae:	1c0a      	adds	r2, r1, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800a2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a2dc <ReadRegister+0x40>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800a2ba:	4b08      	ldr	r3, [pc, #32]	@ (800a2dc <ReadRegister+0x40>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	1dba      	adds	r2, r7, #6
 800a2c0:	7814      	ldrb	r4, [r2, #0]
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	1dfa      	adds	r2, r7, #7
 800a2c6:	7810      	ldrb	r0, [r2, #0]
 800a2c8:	0022      	movs	r2, r4
 800a2ca:	4798      	blx	r3
 800a2cc:	0003      	movs	r3, r0
 800a2ce:	e000      	b.n	800a2d2 <ReadRegister+0x36>
  }
  return false;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	b003      	add	sp, #12
 800a2d8:	bd90      	pop	{r4, r7, pc}
 800a2da:	46c0      	nop			@ (mov r8, r8)
 800a2dc:	20000bf0 	.word	0x20000bf0

0800a2e0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a2e0:	b590      	push	{r4, r7, lr}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6039      	str	r1, [r7, #0]
 800a2e8:	0011      	movs	r1, r2
 800a2ea:	1dfb      	adds	r3, r7, #7
 800a2ec:	1c02      	adds	r2, r0, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
 800a2f0:	1dbb      	adds	r3, r7, #6
 800a2f2:	1c0a      	adds	r2, r1, #0
 800a2f4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800a2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a320 <WriteRegister+0x40>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800a2fe:	4b08      	ldr	r3, [pc, #32]	@ (800a320 <WriteRegister+0x40>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	1dba      	adds	r2, r7, #6
 800a304:	7814      	ldrb	r4, [r2, #0]
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	1dfa      	adds	r2, r7, #7
 800a30a:	7810      	ldrb	r0, [r2, #0]
 800a30c:	0022      	movs	r2, r4
 800a30e:	4798      	blx	r3
 800a310:	0003      	movs	r3, r0
 800a312:	e000      	b.n	800a316 <WriteRegister+0x36>
  }
  return false;
 800a314:	2300      	movs	r3, #0
}
 800a316:	0018      	movs	r0, r3
 800a318:	46bd      	mov	sp, r7
 800a31a:	b003      	add	sp, #12
 800a31c:	bd90      	pop	{r4, r7, pc}
 800a31e:	46c0      	nop			@ (mov r8, r8)
 800a320:	20000bf4 	.word	0x20000bf4

0800a324 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	000a      	movs	r2, r1
 800a32e:	1cfb      	adds	r3, r7, #3
 800a330:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800a332:	230f      	movs	r3, #15
 800a334:	18fb      	adds	r3, r7, r3
 800a336:	22ff      	movs	r2, #255	@ 0xff
 800a338:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800a33a:	230e      	movs	r3, #14
 800a33c:	18fb      	adds	r3, r7, r3
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	e038      	b.n	800a3b6 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800a344:	230e      	movs	r3, #14
 800a346:	18fb      	adds	r3, r7, r3
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	18d3      	adds	r3, r2, r3
 800a34e:	7819      	ldrb	r1, [r3, #0]
 800a350:	220f      	movs	r2, #15
 800a352:	18bb      	adds	r3, r7, r2
 800a354:	18ba      	adds	r2, r7, r2
 800a356:	7812      	ldrb	r2, [r2, #0]
 800a358:	404a      	eors	r2, r1
 800a35a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800a35c:	230d      	movs	r3, #13
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	2200      	movs	r2, #0
 800a362:	701a      	strb	r2, [r3, #0]
 800a364:	e01c      	b.n	800a3a0 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800a366:	210f      	movs	r1, #15
 800a368:	187b      	adds	r3, r7, r1
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	b25b      	sxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	da0a      	bge.n	800a388 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800a372:	187b      	adds	r3, r7, r1
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	b25b      	sxtb	r3, r3
 800a378:	18db      	adds	r3, r3, r3
 800a37a:	b25b      	sxtb	r3, r3
 800a37c:	2231      	movs	r2, #49	@ 0x31
 800a37e:	4053      	eors	r3, r2
 800a380:	b25a      	sxtb	r2, r3
 800a382:	187b      	adds	r3, r7, r1
 800a384:	701a      	strb	r2, [r3, #0]
 800a386:	e005      	b.n	800a394 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800a388:	230f      	movs	r3, #15
 800a38a:	18fa      	adds	r2, r7, r3
 800a38c:	18fb      	adds	r3, r7, r3
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	18db      	adds	r3, r3, r3
 800a392:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800a394:	210d      	movs	r1, #13
 800a396:	187b      	adds	r3, r7, r1
 800a398:	781a      	ldrb	r2, [r3, #0]
 800a39a:	187b      	adds	r3, r7, r1
 800a39c:	3201      	adds	r2, #1
 800a39e:	701a      	strb	r2, [r3, #0]
 800a3a0:	230d      	movs	r3, #13
 800a3a2:	18fb      	adds	r3, r7, r3
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b07      	cmp	r3, #7
 800a3a8:	d9dd      	bls.n	800a366 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800a3aa:	210e      	movs	r1, #14
 800a3ac:	187b      	adds	r3, r7, r1
 800a3ae:	781a      	ldrb	r2, [r3, #0]
 800a3b0:	187b      	adds	r3, r7, r1
 800a3b2:	3201      	adds	r2, #1
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	230e      	movs	r3, #14
 800a3b8:	18fa      	adds	r2, r7, r3
 800a3ba:	1cfb      	adds	r3, r7, #3
 800a3bc:	7812      	ldrb	r2, [r2, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d3bf      	bcc.n	800a344 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800a3c4:	230f      	movs	r3, #15
 800a3c6:	18fb      	adds	r3, r7, r3
 800a3c8:	781b      	ldrb	r3, [r3, #0]
}
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	b004      	add	sp, #16
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800a3dc:	f009 fdca 	bl	8013f74 <HAL_GetTick>
 800a3e0:	0002      	movs	r2, r0
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	18d2      	adds	r2, r2, r3
 800a3e6:	4b03      	ldr	r3, [pc, #12]	@ (800a3f4 <setAHT20TimeStamp+0x20>)
 800a3e8:	601a      	str	r2, [r3, #0]
}
 800a3ea:	46c0      	nop			@ (mov r8, r8)
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	b002      	add	sp, #8
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	46c0      	nop			@ (mov r8, r8)
 800a3f4:	20000be8 	.word	0x20000be8

0800a3f8 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800a404:	4b06      	ldr	r3, [pc, #24]	@ (800a420 <AHT_Init+0x28>)
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800a40a:	4b06      	ldr	r3, [pc, #24]	@ (800a424 <AHT_Init+0x2c>)
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800a410:	4b05      	ldr	r3, [pc, #20]	@ (800a428 <AHT_Init+0x30>)
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	601a      	str	r2, [r3, #0]
}
 800a416:	46c0      	nop			@ (mov r8, r8)
 800a418:	46bd      	mov	sp, r7
 800a41a:	b004      	add	sp, #16
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	46c0      	nop			@ (mov r8, r8)
 800a420:	20000bf8 	.word	0x20000bf8
 800a424:	20000bf0 	.word	0x20000bf0
 800a428:	20000bf4 	.word	0x20000bf4

0800a42c <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af02      	add	r7, sp, #8
 800a432:	0002      	movs	r2, r0
 800a434:	1dfb      	adds	r3, r7, #7
 800a436:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800a438:	4b18      	ldr	r3, [pc, #96]	@ (800a49c <AHT20_register_reset+0x70>)
 800a43a:	1dfa      	adds	r2, r7, #7
 800a43c:	7812      	ldrb	r2, [r2, #0]
 800a43e:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800a440:	4b16      	ldr	r3, [pc, #88]	@ (800a49c <AHT20_register_reset+0x70>)
 800a442:	2203      	movs	r2, #3
 800a444:	0019      	movs	r1, r3
 800a446:	2038      	movs	r0, #56	@ 0x38
 800a448:	f7ff ff4a 	bl	800a2e0 <WriteRegister>
  HAL_Delay(15);
 800a44c:	200f      	movs	r0, #15
 800a44e:	f009 fd9b 	bl	8013f88 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a452:	4b13      	ldr	r3, [pc, #76]	@ (800a4a0 <AHT20_register_reset+0x74>)
 800a454:	2203      	movs	r2, #3
 800a456:	0019      	movs	r1, r3
 800a458:	2038      	movs	r0, #56	@ 0x38
 800a45a:	f7ff ff1f 	bl	800a29c <ReadRegister>
  HAL_Delay(15);
 800a45e:	200f      	movs	r0, #15
 800a460:	f009 fd92 	bl	8013f88 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800a464:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a0 <AHT20_register_reset+0x74>)
 800a466:	22b0      	movs	r2, #176	@ 0xb0
 800a468:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800a46a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a0 <AHT20_register_reset+0x74>)
 800a46c:	789b      	ldrb	r3, [r3, #2]
 800a46e:	0018      	movs	r0, r3
 800a470:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a0 <AHT20_register_reset+0x74>)
 800a472:	78db      	ldrb	r3, [r3, #3]
 800a474:	4a0b      	ldr	r2, [pc, #44]	@ (800a4a4 <AHT20_register_reset+0x78>)
 800a476:	490c      	ldr	r1, [pc, #48]	@ (800a4a8 <AHT20_register_reset+0x7c>)
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	0003      	movs	r3, r0
 800a47c:	2003      	movs	r0, #3
 800a47e:	f008 fff7 	bl	8013470 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a482:	4b07      	ldr	r3, [pc, #28]	@ (800a4a0 <AHT20_register_reset+0x74>)
 800a484:	2203      	movs	r2, #3
 800a486:	0019      	movs	r1, r3
 800a488:	2038      	movs	r0, #56	@ 0x38
 800a48a:	f7ff ff29 	bl	800a2e0 <WriteRegister>
  HAL_Delay(15);
 800a48e:	200f      	movs	r0, #15
 800a490:	f009 fd7a 	bl	8013f88 <HAL_Delay>
}
 800a494:	46c0      	nop			@ (mov r8, r8)
 800a496:	46bd      	mov	sp, r7
 800a498:	b002      	add	sp, #8
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	20000094 	.word	0x20000094
 800a4a0:	20000bfc 	.word	0x20000bfc
 800a4a4:	0802bee4 	.word	0x0802bee4
 800a4a8:	0802bf34 	.word	0x0802bf34

0800a4ac <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800a4b0:	201b      	movs	r0, #27
 800a4b2:	f7ff ffbb 	bl	800a42c <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800a4b6:	201c      	movs	r0, #28
 800a4b8:	f7ff ffb8 	bl	800a42c <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800a4bc:	201e      	movs	r0, #30
 800a4be:	f7ff ffb5 	bl	800a42c <AHT20_register_reset>
}
 800a4c2:	46c0      	nop			@ (mov r8, r8)
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <AHT20_read_status+0x38>)
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	0019      	movs	r1, r3
 800a4d2:	2038      	movs	r0, #56	@ 0x38
 800a4d4:	f7ff ff04 	bl	800a2e0 <WriteRegister>
  HAL_Delay(10);
 800a4d8:	200a      	movs	r0, #10
 800a4da:	f009 fd55 	bl	8013f88 <HAL_Delay>
  airtemphumraw[0] = 0;
 800a4de:	4b09      	ldr	r3, [pc, #36]	@ (800a504 <AHT20_read_status+0x3c>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800a4e4:	4b07      	ldr	r3, [pc, #28]	@ (800a504 <AHT20_read_status+0x3c>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	0019      	movs	r1, r3
 800a4ea:	2038      	movs	r0, #56	@ 0x38
 800a4ec:	f7ff fed6 	bl	800a29c <ReadRegister>
  HAL_Delay(10);
 800a4f0:	200a      	movs	r0, #10
 800a4f2:	f009 fd49 	bl	8013f88 <HAL_Delay>
  return airtemphumraw[0];
 800a4f6:	4b03      	ldr	r3, [pc, #12]	@ (800a504 <AHT20_read_status+0x3c>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
}
 800a4fa:	0018      	movs	r0, r3
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20000090 	.word	0x20000090
 800a504:	20000bfc 	.word	0x20000bfc

0800a508 <AHT20_init>:

bool AHT20_init(void) {
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800a50e:	f009 fd31 	bl	8013f74 <HAL_GetTick>
 800a512:	0003      	movs	r3, r0
 800a514:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b77      	cmp	r3, #119	@ 0x77
 800a51a:	d805      	bhi.n	800a528 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2278      	movs	r2, #120	@ 0x78
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	0018      	movs	r0, r3
 800a524:	f009 fd30 	bl	8013f88 <HAL_Delay>
  }
  AHT20_read_status();
 800a528:	f7ff ffce 	bl	800a4c8 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800a52c:	4b0e      	ldr	r3, [pc, #56]	@ (800a568 <AHT20_init+0x60>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	4a0e      	ldr	r2, [pc, #56]	@ (800a56c <AHT20_init+0x64>)
 800a532:	490f      	ldr	r1, [pc, #60]	@ (800a570 <AHT20_init+0x68>)
 800a534:	2003      	movs	r0, #3
 800a536:	f008 ff9b 	bl	8013470 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800a53a:	4b0b      	ldr	r3, [pc, #44]	@ (800a568 <AHT20_init+0x60>)
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	001a      	movs	r2, r3
 800a540:	2318      	movs	r3, #24
 800a542:	4013      	ands	r3, r2
 800a544:	2b18      	cmp	r3, #24
 800a546:	d00a      	beq.n	800a55e <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800a548:	4b0a      	ldr	r3, [pc, #40]	@ (800a574 <AHT20_init+0x6c>)
 800a54a:	2203      	movs	r2, #3
 800a54c:	0019      	movs	r1, r3
 800a54e:	2038      	movs	r0, #56	@ 0x38
 800a550:	f7ff fec6 	bl	800a2e0 <WriteRegister>
    HAL_Delay(10);
 800a554:	200a      	movs	r0, #10
 800a556:	f009 fd17 	bl	8013f88 <HAL_Delay>
    AHT20_Start_Init();
 800a55a:	f7ff ffa7 	bl	800a4ac <AHT20_Start_Init>
  }
  return true;
 800a55e:	2301      	movs	r3, #1
}
 800a560:	0018      	movs	r0, r3
 800a562:	46bd      	mov	sp, r7
 800a564:	b002      	add	sp, #8
 800a566:	bd80      	pop	{r7, pc}
 800a568:	20000bfc 	.word	0x20000bfc
 800a56c:	0802bf38 	.word	0x0802bf38
 800a570:	0802bf34 	.word	0x0802bf34
 800a574:	20000084 	.word	0x20000084

0800a578 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800a578:	b590      	push	{r4, r7, lr}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a57e:	1dfc      	adds	r4, r7, #7
 800a580:	4b10      	ldr	r3, [pc, #64]	@ (800a5c4 <AHT20_calibrate+0x4c>)
 800a582:	2201      	movs	r2, #1
 800a584:	0019      	movs	r1, r3
 800a586:	2038      	movs	r0, #56	@ 0x38
 800a588:	f7ff feaa 	bl	800a2e0 <WriteRegister>
 800a58c:	0003      	movs	r3, r0
 800a58e:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800a590:	1dfb      	adds	r3, r7, #7
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2201      	movs	r2, #1
 800a596:	4053      	eors	r3, r2
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d005      	beq.n	800a5aa <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800a59e:	4a0a      	ldr	r2, [pc, #40]	@ (800a5c8 <AHT20_calibrate+0x50>)
 800a5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5cc <AHT20_calibrate+0x54>)
 800a5a2:	0019      	movs	r1, r3
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	f008 ff63 	bl	8013470 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800a5aa:	f009 fce3 	bl	8013f74 <HAL_GetTick>
 800a5ae:	0003      	movs	r3, r0
 800a5b0:	3332      	adds	r3, #50	@ 0x32
 800a5b2:	001a      	movs	r2, r3
 800a5b4:	4b06      	ldr	r3, [pc, #24]	@ (800a5d0 <AHT20_calibrate+0x58>)
 800a5b6:	601a      	str	r2, [r3, #0]
  return response;
 800a5b8:	1dfb      	adds	r3, r7, #7
 800a5ba:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800a5bc:	0018      	movs	r0, r3
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	b003      	add	sp, #12
 800a5c2:	bd90      	pop	{r4, r7, pc}
 800a5c4:	20000090 	.word	0x20000090
 800a5c8:	0802bf60 	.word	0x0802bf60
 800a5cc:	0802bf98 	.word	0x0802bf98
 800a5d0:	20000be8 	.word	0x20000be8

0800a5d4 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800a5d8:	4a0a      	ldr	r2, [pc, #40]	@ (800a604 <AHT20_DeviceConnected+0x30>)
 800a5da:	4b0b      	ldr	r3, [pc, #44]	@ (800a608 <AHT20_DeviceConnected+0x34>)
 800a5dc:	0019      	movs	r1, r3
 800a5de:	2003      	movs	r0, #3
 800a5e0:	f008 ff46 	bl	8013470 <CreateLine>
   AHT20_init();
 800a5e4:	f7ff ff90 	bl	800a508 <AHT20_init>
   HAL_Delay(10);
 800a5e8:	200a      	movs	r0, #10
 800a5ea:	f009 fccd 	bl	8013f88 <HAL_Delay>
   AHT20_calibrate();
 800a5ee:	f7ff ffc3 	bl	800a578 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800a5f2:	f7ff ff69 	bl	800a4c8 <AHT20_read_status>
 800a5f6:	0003      	movs	r3, r0
 800a5f8:	1e5a      	subs	r2, r3, #1
 800a5fa:	4193      	sbcs	r3, r2
 800a5fc:	b2db      	uxtb	r3, r3
 }
 800a5fe:	0018      	movs	r0, r3
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	0802bf9c 	.word	0x0802bf9c
 800a608:	0802bf34 	.word	0x0802bf34

0800a60c <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800a60c:	b590      	push	{r4, r7, lr}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800a612:	1dfc      	adds	r4, r7, #7
 800a614:	4b10      	ldr	r3, [pc, #64]	@ (800a658 <AHT20_StartMeasurement+0x4c>)
 800a616:	2203      	movs	r2, #3
 800a618:	0019      	movs	r1, r3
 800a61a:	2038      	movs	r0, #56	@ 0x38
 800a61c:	f7ff fe60 	bl	800a2e0 <WriteRegister>
 800a620:	0003      	movs	r3, r0
 800a622:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800a624:	1dfb      	adds	r3, r7, #7
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2201      	movs	r2, #1
 800a62a:	4053      	eors	r3, r2
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d005      	beq.n	800a63e <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800a632:	4a0a      	ldr	r2, [pc, #40]	@ (800a65c <AHT20_StartMeasurement+0x50>)
 800a634:	4b0a      	ldr	r3, [pc, #40]	@ (800a660 <AHT20_StartMeasurement+0x54>)
 800a636:	0019      	movs	r1, r3
 800a638:	2001      	movs	r0, #1
 800a63a:	f008 ff19 	bl	8013470 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800a63e:	f009 fc99 	bl	8013f74 <HAL_GetTick>
 800a642:	0003      	movs	r3, r0
 800a644:	33fa      	adds	r3, #250	@ 0xfa
 800a646:	001a      	movs	r2, r3
 800a648:	4b06      	ldr	r3, [pc, #24]	@ (800a664 <AHT20_StartMeasurement+0x58>)
 800a64a:	601a      	str	r2, [r3, #0]
  return response;
 800a64c:	1dfb      	adds	r3, r7, #7
 800a64e:	781b      	ldrb	r3, [r3, #0]
}
 800a650:	0018      	movs	r0, r3
 800a652:	46bd      	mov	sp, r7
 800a654:	b003      	add	sp, #12
 800a656:	bd90      	pop	{r4, r7, pc}
 800a658:	2000008c 	.word	0x2000008c
 800a65c:	0802bfb4 	.word	0x0802bfb4
 800a660:	0802bf98 	.word	0x0802bf98
 800a664:	20000be8 	.word	0x20000be8

0800a668 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800a66e:	f009 fc81 	bl	8013f74 <HAL_GetTick>
 800a672:	0003      	movs	r3, r0
 800a674:	22fa      	movs	r2, #250	@ 0xfa
 800a676:	0092      	lsls	r2, r2, #2
 800a678:	189a      	adds	r2, r3, r2
 800a67a:	4b2c      	ldr	r3, [pc, #176]	@ (800a72c <AHT20_GetMeasurementValues+0xc4>)
 800a67c:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a67e:	e01f      	b.n	800a6c0 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800a680:	4a2b      	ldr	r2, [pc, #172]	@ (800a730 <AHT20_GetMeasurementValues+0xc8>)
 800a682:	4b2c      	ldr	r3, [pc, #176]	@ (800a734 <AHT20_GetMeasurementValues+0xcc>)
 800a684:	0019      	movs	r1, r3
 800a686:	2002      	movs	r0, #2
 800a688:	f008 fef2 	bl	8013470 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800a68c:	4b27      	ldr	r3, [pc, #156]	@ (800a72c <AHT20_GetMeasurementValues+0xc4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	0018      	movs	r0, r3
 800a692:	f008 fe97 	bl	80133c4 <TimestampIsReached>
 800a696:	1e03      	subs	r3, r0, #0
 800a698:	d00f      	beq.n	800a6ba <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800a69a:	4a27      	ldr	r2, [pc, #156]	@ (800a738 <AHT20_GetMeasurementValues+0xd0>)
 800a69c:	4b27      	ldr	r3, [pc, #156]	@ (800a73c <AHT20_GetMeasurementValues+0xd4>)
 800a69e:	0019      	movs	r1, r3
 800a6a0:	2001      	movs	r0, #1
 800a6a2:	f008 fee5 	bl	8013470 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800a6a6:	f009 fc65 	bl	8013f74 <HAL_GetTick>
 800a6aa:	0003      	movs	r3, r0
 800a6ac:	22fa      	movs	r2, #250	@ 0xfa
 800a6ae:	00d2      	lsls	r2, r2, #3
 800a6b0:	189a      	adds	r2, r3, r2
 800a6b2:	4b1e      	ldr	r3, [pc, #120]	@ (800a72c <AHT20_GetMeasurementValues+0xc4>)
 800a6b4:	601a      	str	r2, [r3, #0]
      return false;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e034      	b.n	800a724 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800a6ba:	200a      	movs	r0, #10
 800a6bc:	f009 fc64 	bl	8013f88 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a6c0:	f7ff ff02 	bl	800a4c8 <AHT20_read_status>
 800a6c4:	0003      	movs	r3, r0
 800a6c6:	001a      	movs	r2, r3
 800a6c8:	2380      	movs	r3, #128	@ 0x80
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	2b80      	cmp	r3, #128	@ 0x80
 800a6ce:	d0d7      	beq.n	800a680 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800a6d0:	200a      	movs	r0, #10
 800a6d2:	f009 fc59 	bl	8013f88 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800a6d6:	1dfb      	adds	r3, r7, #7
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
 800a6dc:	e009      	b.n	800a6f2 <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800a6de:	1dfb      	adds	r3, r7, #7
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	4a17      	ldr	r2, [pc, #92]	@ (800a740 <AHT20_GetMeasurementValues+0xd8>)
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800a6e8:	1dfb      	adds	r3, r7, #7
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	1dfb      	adds	r3, r7, #7
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	1dfb      	adds	r3, r7, #7
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b06      	cmp	r3, #6
 800a6f8:	d9f1      	bls.n	800a6de <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800a6fa:	1dbc      	adds	r4, r7, #6
 800a6fc:	4b10      	ldr	r3, [pc, #64]	@ (800a740 <AHT20_GetMeasurementValues+0xd8>)
 800a6fe:	2207      	movs	r2, #7
 800a700:	0019      	movs	r1, r3
 800a702:	2038      	movs	r0, #56	@ 0x38
 800a704:	f7ff fda8 	bl	800a258 <ReadDirRegister>
 800a708:	0003      	movs	r3, r0
 800a70a:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800a70c:	200a      	movs	r0, #10
 800a70e:	f009 fc3b 	bl	8013f88 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800a712:	f009 fc2f 	bl	8013f74 <HAL_GetTick>
 800a716:	0003      	movs	r3, r0
 800a718:	3364      	adds	r3, #100	@ 0x64
 800a71a:	001a      	movs	r2, r3
 800a71c:	4b03      	ldr	r3, [pc, #12]	@ (800a72c <AHT20_GetMeasurementValues+0xc4>)
 800a71e:	601a      	str	r2, [r3, #0]
  return response;
 800a720:	1dbb      	adds	r3, r7, #6
 800a722:	781b      	ldrb	r3, [r3, #0]
}
 800a724:	0018      	movs	r0, r3
 800a726:	46bd      	mov	sp, r7
 800a728:	b003      	add	sp, #12
 800a72a:	bd90      	pop	{r4, r7, pc}
 800a72c:	20000be8 	.word	0x20000be8
 800a730:	0802bfe0 	.word	0x0802bfe0
 800a734:	0802c008 	.word	0x0802c008
 800a738:	0802c00c 	.word	0x0802c00c
 800a73c:	0802bf98 	.word	0x0802bf98
 800a740:	20000bfc 	.word	0x20000bfc

0800a744 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800a744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a746:	46c6      	mov	lr, r8
 800a748:	b500      	push	{lr}
 800a74a:	b08a      	sub	sp, #40	@ 0x28
 800a74c:	af06      	add	r7, sp, #24
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800a752:	4b5a      	ldr	r3, [pc, #360]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a754:	799c      	ldrb	r4, [r3, #6]
 800a756:	4b59      	ldr	r3, [pc, #356]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a758:	2106      	movs	r1, #6
 800a75a:	0018      	movs	r0, r3
 800a75c:	f7ff fde2 	bl	800a324 <CalculateCRC>
 800a760:	0003      	movs	r3, r0
 800a762:	429c      	cmp	r4, r3
 800a764:	d044      	beq.n	800a7f0 <AHT20_Calculate+0xac>
 800a766:	4b55      	ldr	r3, [pc, #340]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a768:	799b      	ldrb	r3, [r3, #6]
 800a76a:	2bff      	cmp	r3, #255	@ 0xff
 800a76c:	d040      	beq.n	800a7f0 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800a76e:	4b53      	ldr	r3, [pc, #332]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	4698      	mov	r8, r3
 800a774:	4b51      	ldr	r3, [pc, #324]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	0018      	movs	r0, r3
 800a77a:	4b50      	ldr	r3, [pc, #320]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a77c:	789b      	ldrb	r3, [r3, #2]
 800a77e:	001c      	movs	r4, r3
 800a780:	4b4e      	ldr	r3, [pc, #312]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a782:	78db      	ldrb	r3, [r3, #3]
 800a784:	001d      	movs	r5, r3
 800a786:	4b4d      	ldr	r3, [pc, #308]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a788:	791b      	ldrb	r3, [r3, #4]
 800a78a:	001e      	movs	r6, r3
 800a78c:	4b4b      	ldr	r3, [pc, #300]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a78e:	795b      	ldrb	r3, [r3, #5]
 800a790:	469c      	mov	ip, r3
 800a792:	4b4a      	ldr	r3, [pc, #296]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a794:	799b      	ldrb	r3, [r3, #6]
 800a796:	4a4a      	ldr	r2, [pc, #296]	@ (800a8c0 <AHT20_Calculate+0x17c>)
 800a798:	494a      	ldr	r1, [pc, #296]	@ (800a8c4 <AHT20_Calculate+0x180>)
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	4663      	mov	r3, ip
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	9603      	str	r6, [sp, #12]
 800a7a2:	9502      	str	r5, [sp, #8]
 800a7a4:	9401      	str	r4, [sp, #4]
 800a7a6:	9000      	str	r0, [sp, #0]
 800a7a8:	4643      	mov	r3, r8
 800a7aa:	2003      	movs	r0, #3
 800a7ac:	f008 fe60 	bl	8013470 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800a7b0:	4b42      	ldr	r3, [pc, #264]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a7b2:	799b      	ldrb	r3, [r3, #6]
 800a7b4:	001c      	movs	r4, r3
 800a7b6:	4b41      	ldr	r3, [pc, #260]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a7b8:	2106      	movs	r1, #6
 800a7ba:	0018      	movs	r0, r3
 800a7bc:	f7ff fdb2 	bl	800a324 <CalculateCRC>
 800a7c0:	0003      	movs	r3, r0
 800a7c2:	4a41      	ldr	r2, [pc, #260]	@ (800a8c8 <AHT20_Calculate+0x184>)
 800a7c4:	4941      	ldr	r1, [pc, #260]	@ (800a8cc <AHT20_Calculate+0x188>)
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	0023      	movs	r3, r4
 800a7ca:	2001      	movs	r0, #1
 800a7cc:	f008 fe50 	bl	8013470 <CreateLine>
    *airtemp = 0.0;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800a7dc:	f009 fbca 	bl	8013f74 <HAL_GetTick>
 800a7e0:	0003      	movs	r3, r0
 800a7e2:	22fa      	movs	r2, #250	@ 0xfa
 800a7e4:	00d2      	lsls	r2, r2, #3
 800a7e6:	189a      	adds	r2, r3, r2
 800a7e8:	4b39      	ldr	r3, [pc, #228]	@ (800a8d0 <AHT20_Calculate+0x18c>)
 800a7ea:	601a      	str	r2, [r3, #0]
    return false;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e05f      	b.n	800a8b0 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800a7f0:	4b38      	ldr	r3, [pc, #224]	@ (800a8d4 <AHT20_Calculate+0x190>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800a7f6:	4b31      	ldr	r3, [pc, #196]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a7f8:	78db      	ldrb	r3, [r3, #3]
 800a7fa:	041a      	lsls	r2, r3, #16
 800a7fc:	23f0      	movs	r3, #240	@ 0xf0
 800a7fe:	031b      	lsls	r3, r3, #12
 800a800:	401a      	ands	r2, r3
 800a802:	4b2e      	ldr	r3, [pc, #184]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a804:	791b      	ldrb	r3, [r3, #4]
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	18d3      	adds	r3, r2, r3
 800a80a:	4a2c      	ldr	r2, [pc, #176]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a80c:	7952      	ldrb	r2, [r2, #5]
 800a80e:	189b      	adds	r3, r3, r2
 800a810:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f7f7 f858 	bl	80018c8 <__aeabi_ui2f>
 800a818:	1c03      	adds	r3, r0, #0
 800a81a:	2193      	movs	r1, #147	@ 0x93
 800a81c:	05c9      	lsls	r1, r1, #23
 800a81e:	1c18      	adds	r0, r3, #0
 800a820:	f7f6 fa40 	bl	8000ca4 <__aeabi_fdiv>
 800a824:	1c03      	adds	r3, r0, #0
 800a826:	492c      	ldr	r1, [pc, #176]	@ (800a8d8 <AHT20_Calculate+0x194>)
 800a828:	1c18      	adds	r0, r3, #0
 800a82a:	f7f6 fc09 	bl	8001040 <__aeabi_fmul>
 800a82e:	1c03      	adds	r3, r0, #0
 800a830:	492a      	ldr	r1, [pc, #168]	@ (800a8dc <AHT20_Calculate+0x198>)
 800a832:	1c18      	adds	r0, r3, #0
 800a834:	f7f6 fd5e 	bl	80012f4 <__aeabi_fsub>
 800a838:	1c03      	adds	r3, r0, #0
 800a83a:	1c1a      	adds	r2, r3, #0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800a840:	4b1e      	ldr	r3, [pc, #120]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a842:	785b      	ldrb	r3, [r3, #1]
 800a844:	031a      	lsls	r2, r3, #12
 800a846:	4b1d      	ldr	r3, [pc, #116]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a848:	789b      	ldrb	r3, [r3, #2]
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	18d3      	adds	r3, r2, r3
 800a84e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8bc <AHT20_Calculate+0x178>)
 800a850:	78d2      	ldrb	r2, [r2, #3]
 800a852:	0912      	lsrs	r2, r2, #4
 800a854:	b2d2      	uxtb	r2, r2
 800a856:	189b      	adds	r3, r3, r2
 800a858:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800a85a:	68b8      	ldr	r0, [r7, #8]
 800a85c:	f7f7 f834 	bl	80018c8 <__aeabi_ui2f>
 800a860:	1c03      	adds	r3, r0, #0
 800a862:	2193      	movs	r1, #147	@ 0x93
 800a864:	05c9      	lsls	r1, r1, #23
 800a866:	1c18      	adds	r0, r3, #0
 800a868:	f7f6 fa1c 	bl	8000ca4 <__aeabi_fdiv>
 800a86c:	1c03      	adds	r3, r0, #0
 800a86e:	491c      	ldr	r1, [pc, #112]	@ (800a8e0 <AHT20_Calculate+0x19c>)
 800a870:	1c18      	adds	r0, r3, #0
 800a872:	f7f6 fbe5 	bl	8001040 <__aeabi_fmul>
 800a876:	1c03      	adds	r3, r0, #0
 800a878:	1c1a      	adds	r2, r3, #0
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	1c18      	adds	r0, r3, #0
 800a884:	f7f9 f806 	bl	8003894 <__aeabi_f2d>
 800a888:	0004      	movs	r4, r0
 800a88a:	000d      	movs	r5, r1
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	1c18      	adds	r0, r3, #0
 800a892:	f7f8 ffff 	bl	8003894 <__aeabi_f2d>
 800a896:	0002      	movs	r2, r0
 800a898:	000b      	movs	r3, r1
 800a89a:	4812      	ldr	r0, [pc, #72]	@ (800a8e4 <AHT20_Calculate+0x1a0>)
 800a89c:	4909      	ldr	r1, [pc, #36]	@ (800a8c4 <AHT20_Calculate+0x180>)
 800a89e:	9202      	str	r2, [sp, #8]
 800a8a0:	9303      	str	r3, [sp, #12]
 800a8a2:	9400      	str	r4, [sp, #0]
 800a8a4:	9501      	str	r5, [sp, #4]
 800a8a6:	0002      	movs	r2, r0
 800a8a8:	2003      	movs	r0, #3
 800a8aa:	f008 fde1 	bl	8013470 <CreateLine>
  return true;
 800a8ae:	2301      	movs	r3, #1
}
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	b004      	add	sp, #16
 800a8b6:	bc80      	pop	{r7}
 800a8b8:	46b8      	mov	r8, r7
 800a8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8bc:	20000bfc 	.word	0x20000bfc
 800a8c0:	0802c030 	.word	0x0802c030
 800a8c4:	0802bf34 	.word	0x0802bf34
 800a8c8:	0802c0b0 	.word	0x0802c0b0
 800a8cc:	0802bf98 	.word	0x0802bf98
 800a8d0:	20000be8 	.word	0x20000be8
 800a8d4:	20000c03 	.word	0x20000c03
 800a8d8:	43480000 	.word	0x43480000
 800a8dc:	42480000 	.word	0x42480000
 800a8e0:	42c80000 	.word	0x42c80000
 800a8e4:	0802c0d8 	.word	0x0802c0d8

0800a8e8 <AHT20_reset>:

bool AHT20_reset(void) {
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800a8ec:	f009 fb42 	bl	8013f74 <HAL_GetTick>
 800a8f0:	0003      	movs	r3, r0
 800a8f2:	3332      	adds	r3, #50	@ 0x32
 800a8f4:	001a      	movs	r2, r3
 800a8f6:	4b07      	ldr	r3, [pc, #28]	@ (800a914 <AHT20_reset+0x2c>)
 800a8f8:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800a8fa:	4b07      	ldr	r3, [pc, #28]	@ (800a918 <AHT20_reset+0x30>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800a900:	4b06      	ldr	r3, [pc, #24]	@ (800a91c <AHT20_reset+0x34>)
 800a902:	2201      	movs	r2, #1
 800a904:	0019      	movs	r1, r3
 800a906:	2038      	movs	r0, #56	@ 0x38
 800a908:	f7ff fcea 	bl	800a2e0 <WriteRegister>
 800a90c:	0003      	movs	r3, r0
}
 800a90e:	0018      	movs	r0, r3
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	20000be8 	.word	0x20000be8
 800a918:	20000bec 	.word	0x20000bec
 800a91c:	20000088 	.word	0x20000088

0800a920 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800a926:	4b61      	ldr	r3, [pc, #388]	@ (800aaac <AHT_Upkeep+0x18c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	0018      	movs	r0, r3
 800a92c:	f008 fd4a 	bl	80133c4 <TimestampIsReached>
 800a930:	0003      	movs	r3, r0
 800a932:	001a      	movs	r2, r3
 800a934:	2301      	movs	r3, #1
 800a936:	4053      	eors	r3, r2
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <AHT_Upkeep+0x24>
    return AHTState;
 800a93e:	4b5c      	ldr	r3, [pc, #368]	@ (800aab0 <AHT_Upkeep+0x190>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	e0ae      	b.n	800aaa2 <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800a944:	4b5a      	ldr	r3, [pc, #360]	@ (800aab0 <AHT_Upkeep+0x190>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b05      	cmp	r3, #5
 800a94a:	d900      	bls.n	800a94e <AHT_Upkeep+0x2e>
 800a94c:	e07d      	b.n	800aa4a <AHT_Upkeep+0x12a>
 800a94e:	009a      	lsls	r2, r3, #2
 800a950:	4b58      	ldr	r3, [pc, #352]	@ (800aab4 <AHT_Upkeep+0x194>)
 800a952:	18d3      	adds	r3, r2, r3
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800a958:	4a57      	ldr	r2, [pc, #348]	@ (800aab8 <AHT_Upkeep+0x198>)
 800a95a:	4b58      	ldr	r3, [pc, #352]	@ (800aabc <AHT_Upkeep+0x19c>)
 800a95c:	0019      	movs	r1, r3
 800a95e:	2003      	movs	r0, #3
 800a960:	f008 fd86 	bl	8013470 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800a964:	f009 fb06 	bl	8013f74 <HAL_GetTick>
 800a968:	0003      	movs	r3, r0
 800a96a:	4a55      	ldr	r2, [pc, #340]	@ (800aac0 <AHT_Upkeep+0x1a0>)
 800a96c:	189a      	adds	r2, r3, r2
 800a96e:	4b4f      	ldr	r3, [pc, #316]	@ (800aaac <AHT_Upkeep+0x18c>)
 800a970:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800a972:	4b54      	ldr	r3, [pc, #336]	@ (800aac4 <AHT_Upkeep+0x1a4>)
 800a974:	781a      	ldrb	r2, [r3, #0]
 800a976:	4b54      	ldr	r3, [pc, #336]	@ (800aac8 <AHT_Upkeep+0x1a8>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d100      	bne.n	800a980 <AHT_Upkeep+0x60>
 800a97e:	e087      	b.n	800aa90 <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800a980:	4b4b      	ldr	r3, [pc, #300]	@ (800aab0 <AHT_Upkeep+0x190>)
 800a982:	2205      	movs	r2, #5
 800a984:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a986:	e083      	b.n	800aa90 <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800a988:	f002 fdd6 	bl	800d538 <getSensorLock>
 800a98c:	1e03      	subs	r3, r0, #0
 800a98e:	d000      	beq.n	800a992 <AHT_Upkeep+0x72>
 800a990:	e080      	b.n	800aa94 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800a992:	2002      	movs	r0, #2
 800a994:	f002 fdbc 	bl	800d510 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800a998:	f7ff fe38 	bl	800a60c <AHT20_StartMeasurement>
 800a99c:	0003      	movs	r3, r0
 800a99e:	001a      	movs	r2, r3
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	4053      	eors	r3, r2
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00c      	beq.n	800a9c4 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800a9aa:	f7ff ff9d 	bl	800a8e8 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800a9ae:	f009 fae1 	bl	8013f74 <HAL_GetTick>
 800a9b2:	0003      	movs	r3, r0
 800a9b4:	33c8      	adds	r3, #200	@ 0xc8
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	4b3c      	ldr	r3, [pc, #240]	@ (800aaac <AHT_Upkeep+0x18c>)
 800a9ba:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800a9bc:	4b3c      	ldr	r3, [pc, #240]	@ (800aab0 <AHT_Upkeep+0x190>)
 800a9be:	22ff      	movs	r2, #255	@ 0xff
 800a9c0:	701a      	strb	r2, [r3, #0]
 800a9c2:	e002      	b.n	800a9ca <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800a9c4:	4b3a      	ldr	r3, [pc, #232]	@ (800aab0 <AHT_Upkeep+0x190>)
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800a9ca:	200a      	movs	r0, #10
 800a9cc:	f009 fadc 	bl	8013f88 <HAL_Delay>
    break;
 800a9d0:	e065      	b.n	800aa9e <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800a9d2:	f7ff fe49 	bl	800a668 <AHT20_GetMeasurementValues>
 800a9d6:	1e03      	subs	r3, r0, #0
 800a9d8:	d05e      	beq.n	800aa98 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800a9da:	200a      	movs	r0, #10
 800a9dc:	f009 fad4 	bl	8013f88 <HAL_Delay>
      setSensorLock(FREE);
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	f002 fd95 	bl	800d510 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800a9e6:	4b32      	ldr	r3, [pc, #200]	@ (800aab0 <AHT_Upkeep+0x190>)
 800a9e8:	2203      	movs	r2, #3
 800a9ea:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800a9ec:	e054      	b.n	800aa98 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800a9ee:	003a      	movs	r2, r7
 800a9f0:	1d3b      	adds	r3, r7, #4
 800a9f2:	0011      	movs	r1, r2
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	f7ff fea5 	bl	800a744 <AHT20_Calculate>
 800a9fa:	0003      	movs	r3, r0
 800a9fc:	001a      	movs	r2, r3
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4053      	eors	r3, r2
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800aa08:	4b29      	ldr	r3, [pc, #164]	@ (800aab0 <AHT_Upkeep+0x190>)
 800aa0a:	22ff      	movs	r2, #255	@ 0xff
 800aa0c:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800aa0e:	4b28      	ldr	r3, [pc, #160]	@ (800aab0 <AHT_Upkeep+0x190>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	e046      	b.n	800aaa2 <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	1c11      	adds	r1, r2, #0
 800aa1a:	1c18      	adds	r0, r3, #0
 800aa1c:	f7fa f844 	bl	8004aa8 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	1c11      	adds	r1, r2, #0
 800aa26:	1c18      	adds	r0, r3, #0
 800aa28:	f7f9 fce2 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800aa2c:	4b20      	ldr	r3, [pc, #128]	@ (800aab0 <AHT_Upkeep+0x190>)
 800aa2e:	2205      	movs	r2, #5
 800aa30:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800aa32:	f009 fa9f 	bl	8013f74 <HAL_GetTick>
 800aa36:	0003      	movs	r3, r0
 800aa38:	4a24      	ldr	r2, [pc, #144]	@ (800aacc <AHT_Upkeep+0x1ac>)
 800aa3a:	189a      	adds	r2, r3, r2
 800aa3c:	4b1b      	ldr	r3, [pc, #108]	@ (800aaac <AHT_Upkeep+0x18c>)
 800aa3e:	601a      	str	r2, [r3, #0]
    break;
 800aa40:	e02d      	b.n	800aa9e <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800aa42:	4b1b      	ldr	r3, [pc, #108]	@ (800aab0 <AHT_Upkeep+0x190>)
 800aa44:	2201      	movs	r2, #1
 800aa46:	701a      	strb	r2, [r3, #0]
  break;
 800aa48:	e029      	b.n	800aa9e <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800aa4a:	4b19      	ldr	r3, [pc, #100]	@ (800aab0 <AHT_Upkeep+0x190>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800aa50:	f002 fd72 	bl	800d538 <getSensorLock>
 800aa54:	0003      	movs	r3, r0
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d102      	bne.n	800aa60 <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	f002 fd58 	bl	800d510 <setSensorLock>
    }
    AHTerrors++;
 800aa60:	4b1b      	ldr	r3, [pc, #108]	@ (800aad0 <AHT_Upkeep+0x1b0>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	3301      	adds	r3, #1
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	4b19      	ldr	r3, [pc, #100]	@ (800aad0 <AHT_Upkeep+0x1b0>)
 800aa6a:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800aa6c:	4b18      	ldr	r3, [pc, #96]	@ (800aad0 <AHT_Upkeep+0x1b0>)
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	2b19      	cmp	r3, #25
 800aa72:	d913      	bls.n	800aa9c <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800aa74:	4a17      	ldr	r2, [pc, #92]	@ (800aad4 <AHT_Upkeep+0x1b4>)
 800aa76:	4b18      	ldr	r3, [pc, #96]	@ (800aad8 <AHT_Upkeep+0x1b8>)
 800aa78:	0019      	movs	r1, r3
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	f008 fcf8 	bl	8013470 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800aa80:	4b0b      	ldr	r3, [pc, #44]	@ (800aab0 <AHT_Upkeep+0x190>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800aa86:	4b0f      	ldr	r3, [pc, #60]	@ (800aac4 <AHT_Upkeep+0x1a4>)
 800aa88:	781a      	ldrb	r2, [r3, #0]
 800aa8a:	4b0f      	ldr	r3, [pc, #60]	@ (800aac8 <AHT_Upkeep+0x1a8>)
 800aa8c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800aa8e:	e005      	b.n	800aa9c <AHT_Upkeep+0x17c>
    break;
 800aa90:	46c0      	nop			@ (mov r8, r8)
 800aa92:	e004      	b.n	800aa9e <AHT_Upkeep+0x17e>
      break;
 800aa94:	46c0      	nop			@ (mov r8, r8)
 800aa96:	e002      	b.n	800aa9e <AHT_Upkeep+0x17e>
    break;
 800aa98:	46c0      	nop			@ (mov r8, r8)
 800aa9a:	e000      	b.n	800aa9e <AHT_Upkeep+0x17e>
    break;
 800aa9c:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800aa9e:	4b04      	ldr	r3, [pc, #16]	@ (800aab0 <AHT_Upkeep+0x190>)
 800aaa0:	781b      	ldrb	r3, [r3, #0]
}
 800aaa2:	0018      	movs	r0, r3
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	b002      	add	sp, #8
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	46c0      	nop			@ (mov r8, r8)
 800aaac:	20000be8 	.word	0x20000be8
 800aab0:	20000097 	.word	0x20000097
 800aab4:	0802e094 	.word	0x0802e094
 800aab8:	0802c10c 	.word	0x0802c10c
 800aabc:	0802bf34 	.word	0x0802bf34
 800aac0:	000dbba0 	.word	0x000dbba0
 800aac4:	20000b62 	.word	0x20000b62
 800aac8:	20000c04 	.word	0x20000c04
 800aacc:	0000ea60 	.word	0x0000ea60
 800aad0:	20000c03 	.word	0x20000c03
 800aad4:	0802c134 	.word	0x0802c134
 800aad8:	0802bf98 	.word	0x0802bf98

0800aadc <WriteMemRegister>:
static uint32_t BMP280TimeStamp;
static uint8_t offday;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aade:	b087      	sub	sp, #28
 800aae0:	af02      	add	r7, sp, #8
 800aae2:	0004      	movs	r4, r0
 800aae4:	0008      	movs	r0, r1
 800aae6:	60ba      	str	r2, [r7, #8]
 800aae8:	0019      	movs	r1, r3
 800aaea:	260e      	movs	r6, #14
 800aaec:	19bb      	adds	r3, r7, r6
 800aaee:	1c22      	adds	r2, r4, #0
 800aaf0:	801a      	strh	r2, [r3, #0]
 800aaf2:	230c      	movs	r3, #12
 800aaf4:	18fb      	adds	r3, r7, r3
 800aaf6:	1c02      	adds	r2, r0, #0
 800aaf8:	801a      	strh	r2, [r3, #0]
 800aafa:	1dbb      	adds	r3, r7, #6
 800aafc:	1c0a      	adds	r2, r1, #0
 800aafe:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800ab00:	4b0c      	ldr	r3, [pc, #48]	@ (800ab34 <WriteMemRegister+0x58>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d010      	beq.n	800ab2a <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800ab08:	4b0a      	ldr	r3, [pc, #40]	@ (800ab34 <WriteMemRegister+0x58>)
 800ab0a:	681c      	ldr	r4, [r3, #0]
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab38 <WriteMemRegister+0x5c>)
 800ab0e:	7818      	ldrb	r0, [r3, #0]
 800ab10:	68bd      	ldr	r5, [r7, #8]
 800ab12:	230c      	movs	r3, #12
 800ab14:	18fb      	adds	r3, r7, r3
 800ab16:	881a      	ldrh	r2, [r3, #0]
 800ab18:	19bb      	adds	r3, r7, r6
 800ab1a:	8819      	ldrh	r1, [r3, #0]
 800ab1c:	1dbb      	adds	r3, r7, #6
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	002b      	movs	r3, r5
 800ab24:	47a0      	blx	r4
 800ab26:	0003      	movs	r3, r0
 800ab28:	e000      	b.n	800ab2c <WriteMemRegister+0x50>
  }
  return false;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	b005      	add	sp, #20
 800ab32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab34:	20000c08 	.word	0x20000c08
 800ab38:	20000098 	.word	0x20000098

0800ab3c <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af02      	add	r7, sp, #8
 800ab42:	0004      	movs	r4, r0
 800ab44:	0008      	movs	r0, r1
 800ab46:	60ba      	str	r2, [r7, #8]
 800ab48:	0019      	movs	r1, r3
 800ab4a:	260e      	movs	r6, #14
 800ab4c:	19bb      	adds	r3, r7, r6
 800ab4e:	1c22      	adds	r2, r4, #0
 800ab50:	801a      	strh	r2, [r3, #0]
 800ab52:	230c      	movs	r3, #12
 800ab54:	18fb      	adds	r3, r7, r3
 800ab56:	1c02      	adds	r2, r0, #0
 800ab58:	801a      	strh	r2, [r3, #0]
 800ab5a:	1dbb      	adds	r3, r7, #6
 800ab5c:	1c0a      	adds	r2, r1, #0
 800ab5e:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800ab60:	4b0c      	ldr	r3, [pc, #48]	@ (800ab94 <ReadMemRegister+0x58>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d010      	beq.n	800ab8a <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800ab68:	4b0a      	ldr	r3, [pc, #40]	@ (800ab94 <ReadMemRegister+0x58>)
 800ab6a:	681c      	ldr	r4, [r3, #0]
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab98 <ReadMemRegister+0x5c>)
 800ab6e:	7818      	ldrb	r0, [r3, #0]
 800ab70:	68bd      	ldr	r5, [r7, #8]
 800ab72:	230c      	movs	r3, #12
 800ab74:	18fb      	adds	r3, r7, r3
 800ab76:	881a      	ldrh	r2, [r3, #0]
 800ab78:	19bb      	adds	r3, r7, r6
 800ab7a:	8819      	ldrh	r1, [r3, #0]
 800ab7c:	1dbb      	adds	r3, r7, #6
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	002b      	movs	r3, r5
 800ab84:	47a0      	blx	r4
 800ab86:	0003      	movs	r3, r0
 800ab88:	e000      	b.n	800ab8c <ReadMemRegister+0x50>
  }
  return false;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	b005      	add	sp, #20
 800ab92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab94:	20000c0c 	.word	0x20000c0c
 800ab98:	20000098 	.word	0x20000098

0800ab9c <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800aba4:	f009 f9e6 	bl	8013f74 <HAL_GetTick>
 800aba8:	0002      	movs	r2, r0
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	18d2      	adds	r2, r2, r3
 800abae:	4b03      	ldr	r3, [pc, #12]	@ (800abbc <setBMP280TimeStamp+0x20>)
 800abb0:	601a      	str	r2, [r3, #0]
}
 800abb2:	46c0      	nop			@ (mov r8, r8)
 800abb4:	46bd      	mov	sp, r7
 800abb6:	b002      	add	sp, #8
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	46c0      	nop			@ (mov r8, r8)
 800abbc:	20000c38 	.word	0x20000c38

0800abc0 <ResetBMP280samplecounter>:

void ResetBMP280samplecounter() {
 800abc0:	b580      	push	{r7, lr}
 800abc2:	af00      	add	r7, sp, #0
  bmp280samplecounter = 0;
 800abc4:	4b02      	ldr	r3, [pc, #8]	@ (800abd0 <ResetBMP280samplecounter+0x10>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	701a      	strb	r2, [r3, #0]
}
 800abca:	46c0      	nop			@ (mov r8, r8)
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20000c28 	.word	0x20000c28

0800abd4 <BMP280_reset>:


static void BMP280_reset() {
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800abda:	1dfb      	adds	r3, r7, #7
 800abdc:	22b6      	movs	r2, #182	@ 0xb6
 800abde:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800abe0:	1dfa      	adds	r2, r7, #7
 800abe2:	2301      	movs	r3, #1
 800abe4:	2101      	movs	r1, #1
 800abe6:	20e0      	movs	r0, #224	@ 0xe0
 800abe8:	f7ff ff78 	bl	800aadc <WriteMemRegister>
  Info("BMP280 has been reset");
 800abec:	4a06      	ldr	r2, [pc, #24]	@ (800ac08 <BMP280_reset+0x34>)
 800abee:	4b07      	ldr	r3, [pc, #28]	@ (800ac0c <BMP280_reset+0x38>)
 800abf0:	0019      	movs	r1, r3
 800abf2:	2002      	movs	r0, #2
 800abf4:	f008 fc3c 	bl	8013470 <CreateLine>
  HAL_Delay(100);
 800abf8:	2064      	movs	r0, #100	@ 0x64
 800abfa:	f009 f9c5 	bl	8013f88 <HAL_Delay>
}
 800abfe:	46c0      	nop			@ (mov r8, r8)
 800ac00:	46bd      	mov	sp, r7
 800ac02:	b002      	add	sp, #8
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	46c0      	nop			@ (mov r8, r8)
 800ac08:	0802c178 	.word	0x0802c178
 800ac0c:	0802c190 	.word	0x0802c190

0800ac10 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800ac16:	4aae      	ldr	r2, [pc, #696]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac18:	231a      	movs	r3, #26
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	2088      	movs	r0, #136	@ 0x88
 800ac1e:	f7ff ff8d 	bl	800ab3c <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800ac22:	4bab      	ldr	r3, [pc, #684]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac24:	785b      	ldrb	r3, [r3, #1]
 800ac26:	021b      	lsls	r3, r3, #8
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	4aa9      	ldr	r2, [pc, #676]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac2c:	7812      	ldrb	r2, [r2, #0]
 800ac2e:	189b      	adds	r3, r3, r2
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	4ba8      	ldr	r3, [pc, #672]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ac34:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800ac36:	4ba6      	ldr	r3, [pc, #664]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac38:	78db      	ldrb	r3, [r3, #3]
 800ac3a:	021b      	lsls	r3, r3, #8
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	4aa4      	ldr	r2, [pc, #656]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac40:	7892      	ldrb	r2, [r2, #2]
 800ac42:	189b      	adds	r3, r3, r2
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	b21a      	sxth	r2, r3
 800ac48:	4ba2      	ldr	r3, [pc, #648]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ac4a:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800ac4c:	4ba0      	ldr	r3, [pc, #640]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac4e:	795b      	ldrb	r3, [r3, #5]
 800ac50:	021b      	lsls	r3, r3, #8
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	4a9e      	ldr	r2, [pc, #632]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac56:	7912      	ldrb	r2, [r2, #4]
 800ac58:	189b      	adds	r3, r3, r2
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	b21a      	sxth	r2, r3
 800ac5e:	4b9d      	ldr	r3, [pc, #628]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ac60:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800ac62:	4b9b      	ldr	r3, [pc, #620]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac64:	79db      	ldrb	r3, [r3, #7]
 800ac66:	021b      	lsls	r3, r3, #8
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	4a99      	ldr	r2, [pc, #612]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac6c:	7992      	ldrb	r2, [r2, #6]
 800ac6e:	189b      	adds	r3, r3, r2
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	4b98      	ldr	r3, [pc, #608]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ac74:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800ac76:	4b96      	ldr	r3, [pc, #600]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac78:	7a5b      	ldrb	r3, [r3, #9]
 800ac7a:	021b      	lsls	r3, r3, #8
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4a94      	ldr	r2, [pc, #592]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac80:	7a12      	ldrb	r2, [r2, #8]
 800ac82:	189b      	adds	r3, r3, r2
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	b21a      	sxth	r2, r3
 800ac88:	4b92      	ldr	r3, [pc, #584]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ac8a:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800ac8c:	4b90      	ldr	r3, [pc, #576]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac8e:	7adb      	ldrb	r3, [r3, #11]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	4a8e      	ldr	r2, [pc, #568]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ac96:	7a92      	ldrb	r2, [r2, #10]
 800ac98:	189b      	adds	r3, r3, r2
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	b21a      	sxth	r2, r3
 800ac9e:	4b8d      	ldr	r3, [pc, #564]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800aca0:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800aca2:	4b8b      	ldr	r3, [pc, #556]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800aca4:	7b5b      	ldrb	r3, [r3, #13]
 800aca6:	021b      	lsls	r3, r3, #8
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	4a89      	ldr	r2, [pc, #548]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800acac:	7b12      	ldrb	r2, [r2, #12]
 800acae:	189b      	adds	r3, r3, r2
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	b21a      	sxth	r2, r3
 800acb4:	4b87      	ldr	r3, [pc, #540]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800acb6:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800acb8:	4b85      	ldr	r3, [pc, #532]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800acba:	7bdb      	ldrb	r3, [r3, #15]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	4a83      	ldr	r2, [pc, #524]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800acc2:	7b92      	ldrb	r2, [r2, #14]
 800acc4:	189b      	adds	r3, r3, r2
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	b21a      	sxth	r2, r3
 800acca:	4b82      	ldr	r3, [pc, #520]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800accc:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800acce:	4b80      	ldr	r3, [pc, #512]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800acd0:	7c5b      	ldrb	r3, [r3, #17]
 800acd2:	021b      	lsls	r3, r3, #8
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	4a7e      	ldr	r2, [pc, #504]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800acd8:	7c12      	ldrb	r2, [r2, #16]
 800acda:	189b      	adds	r3, r3, r2
 800acdc:	b29b      	uxth	r3, r3
 800acde:	b21a      	sxth	r2, r3
 800ace0:	4b7c      	ldr	r3, [pc, #496]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ace2:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800ace4:	4b7a      	ldr	r3, [pc, #488]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ace6:	7cdb      	ldrb	r3, [r3, #19]
 800ace8:	021b      	lsls	r3, r3, #8
 800acea:	b29b      	uxth	r3, r3
 800acec:	4a78      	ldr	r2, [pc, #480]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800acee:	7c92      	ldrb	r2, [r2, #18]
 800acf0:	189b      	adds	r3, r3, r2
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	b21a      	sxth	r2, r3
 800acf6:	4b77      	ldr	r3, [pc, #476]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800acf8:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800acfa:	4b75      	ldr	r3, [pc, #468]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800acfc:	7d5b      	ldrb	r3, [r3, #21]
 800acfe:	021b      	lsls	r3, r3, #8
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	4a73      	ldr	r2, [pc, #460]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad04:	7d12      	ldrb	r2, [r2, #20]
 800ad06:	189b      	adds	r3, r3, r2
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	b21a      	sxth	r2, r3
 800ad0c:	4b71      	ldr	r3, [pc, #452]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ad0e:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800ad10:	4b6f      	ldr	r3, [pc, #444]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad12:	7ddb      	ldrb	r3, [r3, #23]
 800ad14:	021b      	lsls	r3, r3, #8
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	4a6d      	ldr	r2, [pc, #436]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad1a:	7d92      	ldrb	r2, [r2, #22]
 800ad1c:	189b      	adds	r3, r3, r2
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	b21a      	sxth	r2, r3
 800ad22:	4b6c      	ldr	r3, [pc, #432]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ad24:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800ad26:	4a6c      	ldr	r2, [pc, #432]	@ (800aed8 <BMP280_get_calibration+0x2c8>)
 800ad28:	4b6c      	ldr	r3, [pc, #432]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ad2a:	0019      	movs	r1, r3
 800ad2c:	2003      	movs	r0, #3
 800ad2e:	f008 fb9f 	bl	8013470 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800ad32:	4b67      	ldr	r3, [pc, #412]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad34:	785b      	ldrb	r3, [r3, #1]
 800ad36:	001c      	movs	r4, r3
 800ad38:	4b65      	ldr	r3, [pc, #404]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	0018      	movs	r0, r3
 800ad3e:	4b65      	ldr	r3, [pc, #404]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	4a67      	ldr	r2, [pc, #412]	@ (800aee0 <BMP280_get_calibration+0x2d0>)
 800ad44:	4965      	ldr	r1, [pc, #404]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	9000      	str	r0, [sp, #0]
 800ad4a:	0023      	movs	r3, r4
 800ad4c:	2003      	movs	r0, #3
 800ad4e:	f008 fb8f 	bl	8013470 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800ad52:	4b5f      	ldr	r3, [pc, #380]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad54:	78db      	ldrb	r3, [r3, #3]
 800ad56:	001c      	movs	r4, r3
 800ad58:	4b5d      	ldr	r3, [pc, #372]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad5a:	789b      	ldrb	r3, [r3, #2]
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	4b5d      	ldr	r3, [pc, #372]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ad60:	2202      	movs	r2, #2
 800ad62:	5e9b      	ldrsh	r3, [r3, r2]
 800ad64:	4a5f      	ldr	r2, [pc, #380]	@ (800aee4 <BMP280_get_calibration+0x2d4>)
 800ad66:	495d      	ldr	r1, [pc, #372]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ad68:	9301      	str	r3, [sp, #4]
 800ad6a:	9000      	str	r0, [sp, #0]
 800ad6c:	0023      	movs	r3, r4
 800ad6e:	2003      	movs	r0, #3
 800ad70:	f008 fb7e 	bl	8013470 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800ad74:	4b56      	ldr	r3, [pc, #344]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad76:	795b      	ldrb	r3, [r3, #5]
 800ad78:	001c      	movs	r4, r3
 800ad7a:	4b55      	ldr	r3, [pc, #340]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad7c:	791b      	ldrb	r3, [r3, #4]
 800ad7e:	0018      	movs	r0, r3
 800ad80:	4b54      	ldr	r3, [pc, #336]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ad82:	2204      	movs	r2, #4
 800ad84:	5e9b      	ldrsh	r3, [r3, r2]
 800ad86:	4a58      	ldr	r2, [pc, #352]	@ (800aee8 <BMP280_get_calibration+0x2d8>)
 800ad88:	4954      	ldr	r1, [pc, #336]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	9000      	str	r0, [sp, #0]
 800ad8e:	0023      	movs	r3, r4
 800ad90:	2003      	movs	r0, #3
 800ad92:	f008 fb6d 	bl	8013470 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800ad96:	4b4e      	ldr	r3, [pc, #312]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad98:	79db      	ldrb	r3, [r3, #7]
 800ad9a:	001c      	movs	r4, r3
 800ad9c:	4b4c      	ldr	r3, [pc, #304]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ad9e:	799b      	ldrb	r3, [r3, #6]
 800ada0:	0018      	movs	r0, r3
 800ada2:	4b4c      	ldr	r3, [pc, #304]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ada4:	88db      	ldrh	r3, [r3, #6]
 800ada6:	4a51      	ldr	r2, [pc, #324]	@ (800aeec <BMP280_get_calibration+0x2dc>)
 800ada8:	494c      	ldr	r1, [pc, #304]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	9000      	str	r0, [sp, #0]
 800adae:	0023      	movs	r3, r4
 800adb0:	2003      	movs	r0, #3
 800adb2:	f008 fb5d 	bl	8013470 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800adb6:	4b46      	ldr	r3, [pc, #280]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800adb8:	7a5b      	ldrb	r3, [r3, #9]
 800adba:	001c      	movs	r4, r3
 800adbc:	4b44      	ldr	r3, [pc, #272]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800adbe:	7a1b      	ldrb	r3, [r3, #8]
 800adc0:	0018      	movs	r0, r3
 800adc2:	4b44      	ldr	r3, [pc, #272]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800adc4:	2208      	movs	r2, #8
 800adc6:	5e9b      	ldrsh	r3, [r3, r2]
 800adc8:	4a49      	ldr	r2, [pc, #292]	@ (800aef0 <BMP280_get_calibration+0x2e0>)
 800adca:	4944      	ldr	r1, [pc, #272]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	9000      	str	r0, [sp, #0]
 800add0:	0023      	movs	r3, r4
 800add2:	2003      	movs	r0, #3
 800add4:	f008 fb4c 	bl	8013470 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800add8:	4b3d      	ldr	r3, [pc, #244]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800adda:	7adb      	ldrb	r3, [r3, #11]
 800addc:	001c      	movs	r4, r3
 800adde:	4b3c      	ldr	r3, [pc, #240]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ade0:	7a9b      	ldrb	r3, [r3, #10]
 800ade2:	0018      	movs	r0, r3
 800ade4:	4b3b      	ldr	r3, [pc, #236]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ade6:	220a      	movs	r2, #10
 800ade8:	5e9b      	ldrsh	r3, [r3, r2]
 800adea:	4a42      	ldr	r2, [pc, #264]	@ (800aef4 <BMP280_get_calibration+0x2e4>)
 800adec:	493b      	ldr	r1, [pc, #236]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	9000      	str	r0, [sp, #0]
 800adf2:	0023      	movs	r3, r4
 800adf4:	2003      	movs	r0, #3
 800adf6:	f008 fb3b 	bl	8013470 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800adfa:	4b35      	ldr	r3, [pc, #212]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800adfc:	7b5b      	ldrb	r3, [r3, #13]
 800adfe:	001c      	movs	r4, r3
 800ae00:	4b33      	ldr	r3, [pc, #204]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae02:	7b1b      	ldrb	r3, [r3, #12]
 800ae04:	0018      	movs	r0, r3
 800ae06:	4b33      	ldr	r3, [pc, #204]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ae08:	220c      	movs	r2, #12
 800ae0a:	5e9b      	ldrsh	r3, [r3, r2]
 800ae0c:	4a3a      	ldr	r2, [pc, #232]	@ (800aef8 <BMP280_get_calibration+0x2e8>)
 800ae0e:	4933      	ldr	r1, [pc, #204]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	9000      	str	r0, [sp, #0]
 800ae14:	0023      	movs	r3, r4
 800ae16:	2003      	movs	r0, #3
 800ae18:	f008 fb2a 	bl	8013470 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800ae1c:	4b2c      	ldr	r3, [pc, #176]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae1e:	7bdb      	ldrb	r3, [r3, #15]
 800ae20:	001c      	movs	r4, r3
 800ae22:	4b2b      	ldr	r3, [pc, #172]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae24:	7b9b      	ldrb	r3, [r3, #14]
 800ae26:	0018      	movs	r0, r3
 800ae28:	4b2a      	ldr	r3, [pc, #168]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ae2a:	220e      	movs	r2, #14
 800ae2c:	5e9b      	ldrsh	r3, [r3, r2]
 800ae2e:	4a33      	ldr	r2, [pc, #204]	@ (800aefc <BMP280_get_calibration+0x2ec>)
 800ae30:	492a      	ldr	r1, [pc, #168]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	9000      	str	r0, [sp, #0]
 800ae36:	0023      	movs	r3, r4
 800ae38:	2003      	movs	r0, #3
 800ae3a:	f008 fb19 	bl	8013470 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800ae3e:	4b24      	ldr	r3, [pc, #144]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae40:	7c5b      	ldrb	r3, [r3, #17]
 800ae42:	001c      	movs	r4, r3
 800ae44:	4b22      	ldr	r3, [pc, #136]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae46:	7c1b      	ldrb	r3, [r3, #16]
 800ae48:	0018      	movs	r0, r3
 800ae4a:	4b22      	ldr	r3, [pc, #136]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ae4c:	2210      	movs	r2, #16
 800ae4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ae50:	4a2b      	ldr	r2, [pc, #172]	@ (800af00 <BMP280_get_calibration+0x2f0>)
 800ae52:	4922      	ldr	r1, [pc, #136]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	9000      	str	r0, [sp, #0]
 800ae58:	0023      	movs	r3, r4
 800ae5a:	2003      	movs	r0, #3
 800ae5c:	f008 fb08 	bl	8013470 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800ae60:	4b1b      	ldr	r3, [pc, #108]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae62:	7cdb      	ldrb	r3, [r3, #19]
 800ae64:	001c      	movs	r4, r3
 800ae66:	4b1a      	ldr	r3, [pc, #104]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae68:	7c9b      	ldrb	r3, [r3, #18]
 800ae6a:	0018      	movs	r0, r3
 800ae6c:	4b19      	ldr	r3, [pc, #100]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ae6e:	2212      	movs	r2, #18
 800ae70:	5e9b      	ldrsh	r3, [r3, r2]
 800ae72:	4a24      	ldr	r2, [pc, #144]	@ (800af04 <BMP280_get_calibration+0x2f4>)
 800ae74:	4919      	ldr	r1, [pc, #100]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	9000      	str	r0, [sp, #0]
 800ae7a:	0023      	movs	r3, r4
 800ae7c:	2003      	movs	r0, #3
 800ae7e:	f008 faf7 	bl	8013470 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800ae82:	4b13      	ldr	r3, [pc, #76]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae84:	7d5b      	ldrb	r3, [r3, #21]
 800ae86:	001c      	movs	r4, r3
 800ae88:	4b11      	ldr	r3, [pc, #68]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800ae8a:	7d1b      	ldrb	r3, [r3, #20]
 800ae8c:	0018      	movs	r0, r3
 800ae8e:	4b11      	ldr	r3, [pc, #68]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800ae90:	2214      	movs	r2, #20
 800ae92:	5e9b      	ldrsh	r3, [r3, r2]
 800ae94:	4a1c      	ldr	r2, [pc, #112]	@ (800af08 <BMP280_get_calibration+0x2f8>)
 800ae96:	4911      	ldr	r1, [pc, #68]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	9000      	str	r0, [sp, #0]
 800ae9c:	0023      	movs	r3, r4
 800ae9e:	2003      	movs	r0, #3
 800aea0:	f008 fae6 	bl	8013470 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800aea4:	4b0a      	ldr	r3, [pc, #40]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800aea6:	7ddb      	ldrb	r3, [r3, #23]
 800aea8:	001c      	movs	r4, r3
 800aeaa:	4b09      	ldr	r3, [pc, #36]	@ (800aed0 <BMP280_get_calibration+0x2c0>)
 800aeac:	7d9b      	ldrb	r3, [r3, #22]
 800aeae:	0018      	movs	r0, r3
 800aeb0:	4b08      	ldr	r3, [pc, #32]	@ (800aed4 <BMP280_get_calibration+0x2c4>)
 800aeb2:	2216      	movs	r2, #22
 800aeb4:	5e9b      	ldrsh	r3, [r3, r2]
 800aeb6:	4a15      	ldr	r2, [pc, #84]	@ (800af0c <BMP280_get_calibration+0x2fc>)
 800aeb8:	4908      	ldr	r1, [pc, #32]	@ (800aedc <BMP280_get_calibration+0x2cc>)
 800aeba:	9301      	str	r3, [sp, #4]
 800aebc:	9000      	str	r0, [sp, #0]
 800aebe:	0023      	movs	r3, r4
 800aec0:	2003      	movs	r0, #3
 800aec2:	f008 fad5 	bl	8013470 <CreateLine>
}
 800aec6:	46c0      	nop			@ (mov r8, r8)
 800aec8:	46bd      	mov	sp, r7
 800aeca:	b001      	add	sp, #4
 800aecc:	bd90      	pop	{r4, r7, pc}
 800aece:	46c0      	nop			@ (mov r8, r8)
 800aed0:	20000c40 	.word	0x20000c40
 800aed4:	20000c10 	.word	0x20000c10
 800aed8:	0802c194 	.word	0x0802c194
 800aedc:	0802c1b0 	.word	0x0802c1b0
 800aee0:	0802c1b4 	.word	0x0802c1b4
 800aee4:	0802c1e8 	.word	0x0802c1e8
 800aee8:	0802c21c 	.word	0x0802c21c
 800aeec:	0802c250 	.word	0x0802c250
 800aef0:	0802c284 	.word	0x0802c284
 800aef4:	0802c2b8 	.word	0x0802c2b8
 800aef8:	0802c2ec 	.word	0x0802c2ec
 800aefc:	0802c320 	.word	0x0802c320
 800af00:	0802c354 	.word	0x0802c354
 800af04:	0802c388 	.word	0x0802c388
 800af08:	0802c3bc 	.word	0x0802c3bc
 800af0c:	0802c3f0 	.word	0x0802c3f0

0800af10 <BMP280_probe>:

static bool BMP280_probe() {
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800af16:	4b34      	ldr	r3, [pc, #208]	@ (800afe8 <BMP280_probe+0xd8>)
 800af18:	2276      	movs	r2, #118	@ 0x76
 800af1a:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800af1c:	1dba      	adds	r2, r7, #6
 800af1e:	2301      	movs	r3, #1
 800af20:	2101      	movs	r1, #1
 800af22:	20d0      	movs	r0, #208	@ 0xd0
 800af24:	f7ff fe0a 	bl	800ab3c <ReadMemRegister>
 800af28:	0003      	movs	r3, r0
 800af2a:	001a      	movs	r2, r3
 800af2c:	1dfb      	adds	r3, r7, #7
 800af2e:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800af30:	1dfb      	adds	r3, r7, #7
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	b25b      	sxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <BMP280_probe+0x40>
 800af3a:	1dbb      	adds	r3, r7, #6
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d006      	beq.n	800af50 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800af42:	1dbb      	adds	r3, r7, #6
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	4a29      	ldr	r2, [pc, #164]	@ (800afec <BMP280_probe+0xdc>)
 800af48:	4929      	ldr	r1, [pc, #164]	@ (800aff0 <BMP280_probe+0xe0>)
 800af4a:	2003      	movs	r0, #3
 800af4c:	f008 fa90 	bl	8013470 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800af50:	1dbb      	adds	r3, r7, #6
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b58      	cmp	r3, #88	@ 0x58
 800af56:	d01f      	beq.n	800af98 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800af58:	4b23      	ldr	r3, [pc, #140]	@ (800afe8 <BMP280_probe+0xd8>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	4b21      	ldr	r3, [pc, #132]	@ (800afe8 <BMP280_probe+0xd8>)
 800af62:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800af64:	1dba      	adds	r2, r7, #6
 800af66:	2301      	movs	r3, #1
 800af68:	2101      	movs	r1, #1
 800af6a:	20d0      	movs	r0, #208	@ 0xd0
 800af6c:	f7ff fde6 	bl	800ab3c <ReadMemRegister>
 800af70:	0003      	movs	r3, r0
 800af72:	001a      	movs	r2, r3
 800af74:	1dfb      	adds	r3, r7, #7
 800af76:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800af78:	1dfb      	adds	r3, r7, #7
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	b25b      	sxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <BMP280_probe+0x88>
 800af82:	1dbb      	adds	r3, r7, #6
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d006      	beq.n	800af98 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800af8a:	1dbb      	adds	r3, r7, #6
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	4a17      	ldr	r2, [pc, #92]	@ (800afec <BMP280_probe+0xdc>)
 800af90:	4917      	ldr	r1, [pc, #92]	@ (800aff0 <BMP280_probe+0xe0>)
 800af92:	2003      	movs	r0, #3
 800af94:	f008 fa6c 	bl	8013470 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800af98:	1dbb      	adds	r3, r7, #6
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b58      	cmp	r3, #88	@ 0x58
 800af9e:	d110      	bne.n	800afc2 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800afa0:	1dbb      	adds	r3, r7, #6
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	0018      	movs	r0, r3
 800afa6:	4b10      	ldr	r3, [pc, #64]	@ (800afe8 <BMP280_probe+0xd8>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	4a12      	ldr	r2, [pc, #72]	@ (800aff4 <BMP280_probe+0xe4>)
 800afac:	4912      	ldr	r1, [pc, #72]	@ (800aff8 <BMP280_probe+0xe8>)
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	0003      	movs	r3, r0
 800afb2:	2002      	movs	r0, #2
 800afb4:	f008 fa5c 	bl	8013470 <CreateLine>
      BMP280_reset(); // get an initial state
 800afb8:	f7ff fe0c 	bl	800abd4 <BMP280_reset>
      BMP280_get_calibration();
 800afbc:	f7ff fe28 	bl	800ac10 <BMP280_get_calibration>
 800afc0:	e008      	b.n	800afd4 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800afc2:	4b09      	ldr	r3, [pc, #36]	@ (800afe8 <BMP280_probe+0xd8>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800afc8:	4a0c      	ldr	r2, [pc, #48]	@ (800affc <BMP280_probe+0xec>)
 800afca:	4b0d      	ldr	r3, [pc, #52]	@ (800b000 <BMP280_probe+0xf0>)
 800afcc:	0019      	movs	r1, r3
 800afce:	2001      	movs	r0, #1
 800afd0:	f008 fa4e 	bl	8013470 <CreateLine>
    }
    return bmp280I2Caddr;
 800afd4:	4b04      	ldr	r3, [pc, #16]	@ (800afe8 <BMP280_probe+0xd8>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	1e5a      	subs	r2, r3, #1
 800afda:	4193      	sbcs	r3, r2
 800afdc:	b2db      	uxtb	r3, r3
}
 800afde:	0018      	movs	r0, r3
 800afe0:	46bd      	mov	sp, r7
 800afe2:	b002      	add	sp, #8
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	46c0      	nop			@ (mov r8, r8)
 800afe8:	20000098 	.word	0x20000098
 800afec:	0802c424 	.word	0x0802c424
 800aff0:	0802c1b0 	.word	0x0802c1b0
 800aff4:	0802c454 	.word	0x0802c454
 800aff8:	0802c190 	.word	0x0802c190
 800affc:	0802c48c 	.word	0x0802c48c
 800b000:	0802c4a0 	.word	0x0802c4a0

0800b004 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800b008:	f7ff ff82 	bl	800af10 <BMP280_probe>
 800b00c:	0003      	movs	r3, r0
}
 800b00e:	0018      	movs	r0, r3
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800b01e:	4b05      	ldr	r3, [pc, #20]	@ (800b034 <BMP_Init+0x20>)
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800b024:	4b04      	ldr	r3, [pc, #16]	@ (800b038 <BMP_Init+0x24>)
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	601a      	str	r2, [r3, #0]
}
 800b02a:	46c0      	nop			@ (mov r8, r8)
 800b02c:	46bd      	mov	sp, r7
 800b02e:	b002      	add	sp, #8
 800b030:	bd80      	pop	{r7, pc}
 800b032:	46c0      	nop			@ (mov r8, r8)
 800b034:	20000c0c 	.word	0x20000c0c
 800b038:	20000c08 	.word	0x20000c08

0800b03c <BMP280_set_config>:


static bool BMP280_set_config() {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800b042:	1dbb      	adds	r3, r7, #6
 800b044:	228c      	movs	r2, #140	@ 0x8c
 800b046:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800b048:	1dba      	adds	r2, r7, #6
 800b04a:	2301      	movs	r3, #1
 800b04c:	2101      	movs	r1, #1
 800b04e:	20f5      	movs	r0, #245	@ 0xf5
 800b050:	f7ff fd44 	bl	800aadc <WriteMemRegister>
 800b054:	0003      	movs	r3, r0
 800b056:	001a      	movs	r2, r3
 800b058:	1dfb      	adds	r3, r7, #7
 800b05a:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800b05c:	f008 ff8a 	bl	8013f74 <HAL_GetTick>
 800b060:	0003      	movs	r3, r0
 800b062:	330a      	adds	r3, #10
 800b064:	001a      	movs	r2, r3
 800b066:	4b06      	ldr	r3, [pc, #24]	@ (800b080 <BMP280_set_config+0x44>)
 800b068:	601a      	str	r2, [r3, #0]
  return rslt;
 800b06a:	1dfb      	adds	r3, r7, #7
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	b25b      	sxtb	r3, r3
 800b070:	1e5a      	subs	r2, r3, #1
 800b072:	4193      	sbcs	r3, r2
 800b074:	b2db      	uxtb	r3, r3
}
 800b076:	0018      	movs	r0, r3
 800b078:	46bd      	mov	sp, r7
 800b07a:	b002      	add	sp, #8
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	46c0      	nop			@ (mov r8, r8)
 800b080:	20000c38 	.word	0x20000c38

0800b084 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800b08a:	1dbb      	adds	r3, r7, #6
 800b08c:	2208      	movs	r2, #8
 800b08e:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800b090:	4b22      	ldr	r3, [pc, #136]	@ (800b11c <BMP280_set_mode+0x98>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	224c      	movs	r2, #76	@ 0x4c
 800b096:	4313      	orrs	r3, r2
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	1d7b      	adds	r3, r7, #5
 800b09c:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800b09e:	1d7a      	adds	r2, r7, #5
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	20f4      	movs	r0, #244	@ 0xf4
 800b0a6:	f7ff fd19 	bl	800aadc <WriteMemRegister>
 800b0aa:	0003      	movs	r3, r0
 800b0ac:	001a      	movs	r2, r3
 800b0ae:	1dfb      	adds	r3, r7, #7
 800b0b0:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800b0b2:	f008 ff5f 	bl	8013f74 <HAL_GetTick>
 800b0b6:	0003      	movs	r3, r0
 800b0b8:	22fa      	movs	r2, #250	@ 0xfa
 800b0ba:	0092      	lsls	r2, r2, #2
 800b0bc:	189a      	adds	r2, r3, r2
 800b0be:	4b18      	ldr	r3, [pc, #96]	@ (800b120 <BMP280_set_mode+0x9c>)
 800b0c0:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800b0c2:	e016      	b.n	800b0f2 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800b0c4:	1dba      	adds	r2, r7, #6
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	20f3      	movs	r0, #243	@ 0xf3
 800b0cc:	f7ff fd36 	bl	800ab3c <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800b0d0:	4b13      	ldr	r3, [pc, #76]	@ (800b120 <BMP280_set_mode+0x9c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	f008 f975 	bl	80133c4 <TimestampIsReached>
 800b0da:	1e03      	subs	r3, r0, #0
 800b0dc:	d006      	beq.n	800b0ec <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800b0de:	4a11      	ldr	r2, [pc, #68]	@ (800b124 <BMP280_set_mode+0xa0>)
 800b0e0:	4b11      	ldr	r3, [pc, #68]	@ (800b128 <BMP280_set_mode+0xa4>)
 800b0e2:	0019      	movs	r1, r3
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	f008 f9c3 	bl	8013470 <CreateLine>
      break;
 800b0ea:	e008      	b.n	800b0fe <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	f008 ff4b 	bl	8013f88 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800b0f2:	1dbb      	adds	r3, r7, #6
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	001a      	movs	r2, r3
 800b0f8:	2308      	movs	r3, #8
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	d1e2      	bne.n	800b0c4 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800b0fe:	f008 ff39 	bl	8013f74 <HAL_GetTick>
 800b102:	0002      	movs	r2, r0
 800b104:	4b06      	ldr	r3, [pc, #24]	@ (800b120 <BMP280_set_mode+0x9c>)
 800b106:	601a      	str	r2, [r3, #0]
  return rslt;
 800b108:	1dfb      	adds	r3, r7, #7
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	b25b      	sxtb	r3, r3
 800b10e:	1e5a      	subs	r2, r3, #1
 800b110:	4193      	sbcs	r3, r2
 800b112:	b2db      	uxtb	r3, r3
}
 800b114:	0018      	movs	r0, r3
 800b116:	46bd      	mov	sp, r7
 800b118:	b002      	add	sp, #8
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20000099 	.word	0x20000099
 800b120:	20000c38 	.word	0x20000c38
 800b124:	0802c4a4 	.word	0x0802c4a4
 800b128:	0802c4a0 	.word	0x0802c4a0

0800b12c <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800b132:	1dba      	adds	r2, r7, #6
 800b134:	2301      	movs	r3, #1
 800b136:	2101      	movs	r1, #1
 800b138:	20f4      	movs	r0, #244	@ 0xf4
 800b13a:	f7ff fcff 	bl	800ab3c <ReadMemRegister>
 800b13e:	0003      	movs	r3, r0
 800b140:	001a      	movs	r2, r3
 800b142:	1dfb      	adds	r3, r7, #7
 800b144:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800b146:	1dbb      	adds	r3, r7, #6
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2203      	movs	r2, #3
 800b14c:	4013      	ands	r3, r2
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	1dbb      	adds	r3, r7, #6
 800b152:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800b154:	f008 ff0e 	bl	8013f74 <HAL_GetTick>
 800b158:	0003      	movs	r3, r0
 800b15a:	330a      	adds	r3, #10
 800b15c:	001a      	movs	r2, r3
 800b15e:	4b08      	ldr	r3, [pc, #32]	@ (800b180 <BMP280_get_mode+0x54>)
 800b160:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800b162:	1dfb      	adds	r3, r7, #7
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	b25b      	sxtb	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d102      	bne.n	800b172 <BMP280_get_mode+0x46>
    bmpData = 255;
 800b16c:	1dbb      	adds	r3, r7, #6
 800b16e:	22ff      	movs	r2, #255	@ 0xff
 800b170:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800b172:	1dbb      	adds	r3, r7, #6
 800b174:	781b      	ldrb	r3, [r3, #0]
}
 800b176:	0018      	movs	r0, r3
 800b178:	46bd      	mov	sp, r7
 800b17a:	b002      	add	sp, #8
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	46c0      	nop			@ (mov r8, r8)
 800b180:	20000c38 	.word	0x20000c38

0800b184 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800b184:	b5b0      	push	{r4, r5, r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800b18a:	1d3a      	adds	r2, r7, #4
 800b18c:	2306      	movs	r3, #6
 800b18e:	2101      	movs	r1, #1
 800b190:	20f7      	movs	r0, #247	@ 0xf7
 800b192:	f7ff fcd3 	bl	800ab3c <ReadMemRegister>
 800b196:	0003      	movs	r3, r0
 800b198:	001a      	movs	r2, r3
 800b19a:	230f      	movs	r3, #15
 800b19c:	18fb      	adds	r3, r7, r3
 800b19e:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800b1a0:	1d3b      	adds	r3, r7, #4
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b80      	cmp	r3, #128	@ 0x80
 800b1a6:	d013      	beq.n	800b1d0 <BMP280_get_measurement_values+0x4c>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800b1a8:	1d3b      	adds	r3, r7, #4
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	031a      	lsls	r2, r3, #12
 800b1ae:	1d3b      	adds	r3, r7, #4
 800b1b0:	785b      	ldrb	r3, [r3, #1]
 800b1b2:	011b      	lsls	r3, r3, #4
 800b1b4:	18d3      	adds	r3, r2, r3
 800b1b6:	1d3a      	adds	r2, r7, #4
 800b1b8:	7892      	ldrb	r2, [r2, #2]
 800b1ba:	0912      	lsrs	r2, r2, #4
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	189b      	adds	r3, r3, r2
 800b1c0:	001a      	movs	r2, r3
 800b1c2:	4b2e      	ldr	r3, [pc, #184]	@ (800b27c <BMP280_get_measurement_values+0xf8>)
 800b1c4:	601a      	str	r2, [r3, #0]
    Error("BMP280 Invalid read of barometric pressure.");
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
    SetAllBlueLED();
    return false;
  }
  if (bmpData[3] != 0x80) {
 800b1c6:	1d3b      	adds	r3, r7, #4
 800b1c8:	78db      	ldrb	r3, [r3, #3]
 800b1ca:	2b80      	cmp	r3, #128	@ 0x80
 800b1cc:	d035      	beq.n	800b23a <BMP280_get_measurement_values+0xb6>
 800b1ce:	e01d      	b.n	800b20c <BMP280_get_measurement_values+0x88>
    Error("BMP280 Invalid read of barometric pressure.");
 800b1d0:	4a2b      	ldr	r2, [pc, #172]	@ (800b280 <BMP280_get_measurement_values+0xfc>)
 800b1d2:	4b2c      	ldr	r3, [pc, #176]	@ (800b284 <BMP280_get_measurement_values+0x100>)
 800b1d4:	0019      	movs	r1, r3
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	f008 f94a 	bl	8013470 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800b1dc:	1d3b      	adds	r3, r7, #4
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	001d      	movs	r5, r3
 800b1e2:	1d3b      	adds	r3, r7, #4
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	0018      	movs	r0, r3
 800b1e8:	1d3b      	adds	r3, r7, #4
 800b1ea:	789b      	ldrb	r3, [r3, #2]
 800b1ec:	001c      	movs	r4, r3
 800b1ee:	4b23      	ldr	r3, [pc, #140]	@ (800b27c <BMP280_get_measurement_values+0xf8>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a25      	ldr	r2, [pc, #148]	@ (800b288 <BMP280_get_measurement_values+0x104>)
 800b1f4:	4925      	ldr	r1, [pc, #148]	@ (800b28c <BMP280_get_measurement_values+0x108>)
 800b1f6:	9302      	str	r3, [sp, #8]
 800b1f8:	9401      	str	r4, [sp, #4]
 800b1fa:	9000      	str	r0, [sp, #0]
 800b1fc:	002b      	movs	r3, r5
 800b1fe:	2003      	movs	r0, #3
 800b200:	f008 f936 	bl	8013470 <CreateLine>
    SetAllBlueLED();
 800b204:	f007 f842 	bl	801228c <SetAllBlueLED>
    return false;
 800b208:	2300      	movs	r3, #0
 800b20a:	e033      	b.n	800b274 <BMP280_get_measurement_values+0xf0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800b20c:	1d3b      	adds	r3, r7, #4
 800b20e:	78db      	ldrb	r3, [r3, #3]
 800b210:	031a      	lsls	r2, r3, #12
 800b212:	1d3b      	adds	r3, r7, #4
 800b214:	791b      	ldrb	r3, [r3, #4]
 800b216:	011b      	lsls	r3, r3, #4
 800b218:	18d3      	adds	r3, r2, r3
 800b21a:	1d3a      	adds	r2, r7, #4
 800b21c:	7952      	ldrb	r2, [r2, #5]
 800b21e:	0912      	lsrs	r2, r2, #4
 800b220:	b2d2      	uxtb	r2, r2
 800b222:	189b      	adds	r3, r3, r2
 800b224:	001a      	movs	r2, r3
 800b226:	4b1a      	ldr	r3, [pc, #104]	@ (800b290 <BMP280_get_measurement_values+0x10c>)
 800b228:	601a      	str	r2, [r3, #0]
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
    SetAllBlueLED();
    return false;
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800b22a:	230f      	movs	r3, #15
 800b22c:	18fb      	adds	r3, r7, r3
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	b25b      	sxtb	r3, r3
 800b232:	1e5a      	subs	r2, r3, #1
 800b234:	4193      	sbcs	r3, r2
 800b236:	b2db      	uxtb	r3, r3
 800b238:	e01c      	b.n	800b274 <BMP280_get_measurement_values+0xf0>
    Error("BMP280 Invalid read of temperature.");
 800b23a:	4a16      	ldr	r2, [pc, #88]	@ (800b294 <BMP280_get_measurement_values+0x110>)
 800b23c:	4b11      	ldr	r3, [pc, #68]	@ (800b284 <BMP280_get_measurement_values+0x100>)
 800b23e:	0019      	movs	r1, r3
 800b240:	2001      	movs	r0, #1
 800b242:	f008 f915 	bl	8013470 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800b246:	1d3b      	adds	r3, r7, #4
 800b248:	78db      	ldrb	r3, [r3, #3]
 800b24a:	001d      	movs	r5, r3
 800b24c:	1d3b      	adds	r3, r7, #4
 800b24e:	791b      	ldrb	r3, [r3, #4]
 800b250:	0018      	movs	r0, r3
 800b252:	1d3b      	adds	r3, r7, #4
 800b254:	795b      	ldrb	r3, [r3, #5]
 800b256:	001c      	movs	r4, r3
 800b258:	4b0d      	ldr	r3, [pc, #52]	@ (800b290 <BMP280_get_measurement_values+0x10c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a0e      	ldr	r2, [pc, #56]	@ (800b298 <BMP280_get_measurement_values+0x114>)
 800b25e:	490b      	ldr	r1, [pc, #44]	@ (800b28c <BMP280_get_measurement_values+0x108>)
 800b260:	9302      	str	r3, [sp, #8]
 800b262:	9401      	str	r4, [sp, #4]
 800b264:	9000      	str	r0, [sp, #0]
 800b266:	002b      	movs	r3, r5
 800b268:	2003      	movs	r0, #3
 800b26a:	f008 f901 	bl	8013470 <CreateLine>
    SetAllBlueLED();
 800b26e:	f007 f80d 	bl	801228c <SetAllBlueLED>
    return false;
 800b272:	2300      	movs	r3, #0
}
 800b274:	0018      	movs	r0, r3
 800b276:	46bd      	mov	sp, r7
 800b278:	b004      	add	sp, #16
 800b27a:	bdb0      	pop	{r4, r5, r7, pc}
 800b27c:	20000c34 	.word	0x20000c34
 800b280:	0802c4d0 	.word	0x0802c4d0
 800b284:	0802c4a0 	.word	0x0802c4a0
 800b288:	0802c4fc 	.word	0x0802c4fc
 800b28c:	0802c1b0 	.word	0x0802c1b0
 800b290:	20000c30 	.word	0x20000c30
 800b294:	0802c544 	.word	0x0802c544
 800b298:	0802c568 	.word	0x0802c568

0800b29c <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800b2a2:	4b1e      	ldr	r3, [pc, #120]	@ (800b31c <BMP280_calc_temperature+0x80>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	10da      	asrs	r2, r3, #3
 800b2ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b320 <BMP280_calc_temperature+0x84>)
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	005b      	lsls	r3, r3, #1
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	4a1a      	ldr	r2, [pc, #104]	@ (800b320 <BMP280_calc_temperature+0x84>)
 800b2b6:	2102      	movs	r1, #2
 800b2b8:	5e52      	ldrsh	r2, [r2, r1]
 800b2ba:	4353      	muls	r3, r2
 800b2bc:	12db      	asrs	r3, r3, #11
 800b2be:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	111b      	asrs	r3, r3, #4
 800b2c4:	4a16      	ldr	r2, [pc, #88]	@ (800b320 <BMP280_calc_temperature+0x84>)
 800b2c6:	8812      	ldrh	r2, [r2, #0]
 800b2c8:	1a9b      	subs	r3, r3, r2
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	1112      	asrs	r2, r2, #4
 800b2ce:	4914      	ldr	r1, [pc, #80]	@ (800b320 <BMP280_calc_temperature+0x84>)
 800b2d0:	8809      	ldrh	r1, [r1, #0]
 800b2d2:	1a52      	subs	r2, r2, r1
 800b2d4:	4353      	muls	r3, r2
 800b2d6:	131b      	asrs	r3, r3, #12
 800b2d8:	4a11      	ldr	r2, [pc, #68]	@ (800b320 <BMP280_calc_temperature+0x84>)
 800b2da:	2104      	movs	r1, #4
 800b2dc:	5e52      	ldrsh	r2, [r2, r1]
 800b2de:	4353      	muls	r3, r2
 800b2e0:	139b      	asrs	r3, r3, #14
 800b2e2:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	18d2      	adds	r2, r2, r3
 800b2ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b324 <BMP280_calc_temperature+0x88>)
 800b2ec:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800b2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b324 <BMP280_calc_temperature+0x88>)
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	0013      	movs	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	189b      	adds	r3, r3, r2
 800b2f8:	3380      	adds	r3, #128	@ 0x80
 800b2fa:	121b      	asrs	r3, r3, #8
 800b2fc:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800b2fe:	68b8      	ldr	r0, [r7, #8]
 800b300:	f7f6 fa92 	bl	8001828 <__aeabi_i2f>
 800b304:	1c03      	adds	r3, r0, #0
 800b306:	4908      	ldr	r1, [pc, #32]	@ (800b328 <BMP280_calc_temperature+0x8c>)
 800b308:	1c18      	adds	r0, r3, #0
 800b30a:	f7f5 fccb 	bl	8000ca4 <__aeabi_fdiv>
 800b30e:	1c03      	adds	r3, r0, #0
 800b310:	607b      	str	r3, [r7, #4]
  return airTemp;
 800b312:	687b      	ldr	r3, [r7, #4]
}
 800b314:	1c18      	adds	r0, r3, #0
 800b316:	46bd      	mov	sp, r7
 800b318:	b006      	add	sp, #24
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	20000c30 	.word	0x20000c30
 800b320:	20000c10 	.word	0x20000c10
 800b324:	20000c2c 	.word	0x20000c2c
 800b328:	42c80000 	.word	0x42c80000

0800b32c <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b086      	sub	sp, #24
 800b330:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800b332:	4b4e      	ldr	r3, [pc, #312]	@ (800b46c <BMP280_calc_pressure+0x140>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800b338:	4b4d      	ldr	r3, [pc, #308]	@ (800b470 <BMP280_calc_pressure+0x144>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	105b      	asrs	r3, r3, #1
 800b33e:	4a4d      	ldr	r2, [pc, #308]	@ (800b474 <BMP280_calc_pressure+0x148>)
 800b340:	4694      	mov	ip, r2
 800b342:	4463      	add	r3, ip
 800b344:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	109b      	asrs	r3, r3, #2
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	1092      	asrs	r2, r2, #2
 800b34e:	4353      	muls	r3, r2
 800b350:	12db      	asrs	r3, r3, #11
 800b352:	4a49      	ldr	r2, [pc, #292]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b354:	2110      	movs	r1, #16
 800b356:	5e52      	ldrsh	r2, [r2, r1]
 800b358:	4353      	muls	r3, r2
 800b35a:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800b35c:	4b46      	ldr	r3, [pc, #280]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b35e:	220e      	movs	r2, #14
 800b360:	5e9b      	ldrsh	r3, [r3, r2]
 800b362:	001a      	movs	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4353      	muls	r3, r2
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	18d3      	adds	r3, r2, r3
 800b36e:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	109a      	asrs	r2, r3, #2
 800b374:	4b40      	ldr	r3, [pc, #256]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b376:	210c      	movs	r1, #12
 800b378:	5e5b      	ldrsh	r3, [r3, r1]
 800b37a:	041b      	lsls	r3, r3, #16
 800b37c:	18d3      	adds	r3, r2, r3
 800b37e:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800b380:	4b3d      	ldr	r3, [pc, #244]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b382:	220a      	movs	r2, #10
 800b384:	5e9b      	ldrsh	r3, [r3, r2]
 800b386:	0019      	movs	r1, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	109b      	asrs	r3, r3, #2
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	1092      	asrs	r2, r2, #2
 800b390:	4353      	muls	r3, r2
 800b392:	135b      	asrs	r3, r3, #13
 800b394:	434b      	muls	r3, r1
 800b396:	10da      	asrs	r2, r3, #3
 800b398:	4b37      	ldr	r3, [pc, #220]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b39a:	2108      	movs	r1, #8
 800b39c:	5e5b      	ldrsh	r3, [r3, r1]
 800b39e:	0019      	movs	r1, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	434b      	muls	r3, r1
 800b3a4:	105b      	asrs	r3, r3, #1
 800b3a6:	18d3      	adds	r3, r2, r3
 800b3a8:	149b      	asrs	r3, r3, #18
 800b3aa:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2280      	movs	r2, #128	@ 0x80
 800b3b0:	0212      	lsls	r2, r2, #8
 800b3b2:	4694      	mov	ip, r2
 800b3b4:	4463      	add	r3, ip
 800b3b6:	4a30      	ldr	r2, [pc, #192]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b3b8:	88d2      	ldrh	r2, [r2, #6]
 800b3ba:	4353      	muls	r3, r2
 800b3bc:	13db      	asrs	r3, r3, #15
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <BMP280_calc_pressure+0x9e>
    return 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e04b      	b.n	800b462 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2280      	movs	r2, #128	@ 0x80
 800b3ce:	0352      	lsls	r2, r2, #13
 800b3d0:	1ad2      	subs	r2, r2, r3
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	131b      	asrs	r3, r3, #12
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	001a      	movs	r2, r3
 800b3da:	4b28      	ldr	r3, [pc, #160]	@ (800b47c <BMP280_calc_pressure+0x150>)
 800b3dc:	4353      	muls	r3, r2
 800b3de:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	db09      	blt.n	800b3fa <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	005b      	lsls	r3, r3, #1
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	0011      	movs	r1, r2
 800b3ee:	0018      	movs	r0, r3
 800b3f0:	f7f4 fed8 	bl	80001a4 <__udivsi3>
 800b3f4:	0003      	movs	r3, r0
 800b3f6:	617b      	str	r3, [r7, #20]
 800b3f8:	e007      	b.n	800b40a <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	0019      	movs	r1, r3
 800b3fe:	6978      	ldr	r0, [r7, #20]
 800b400:	f7f4 fed0 	bl	80001a4 <__udivsi3>
 800b404:	0003      	movs	r3, r0
 800b406:	005b      	lsls	r3, r3, #1
 800b408:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800b40a:	4b1b      	ldr	r3, [pc, #108]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b40c:	2216      	movs	r2, #22
 800b40e:	5e9b      	ldrsh	r3, [r3, r2]
 800b410:	0019      	movs	r1, r3
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	08db      	lsrs	r3, r3, #3
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	08d2      	lsrs	r2, r2, #3
 800b41a:	4353      	muls	r3, r2
 800b41c:	0b5b      	lsrs	r3, r3, #13
 800b41e:	434b      	muls	r3, r1
 800b420:	131b      	asrs	r3, r3, #12
 800b422:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	089b      	lsrs	r3, r3, #2
 800b428:	001a      	movs	r2, r3
 800b42a:	4b13      	ldr	r3, [pc, #76]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b42c:	2114      	movs	r1, #20
 800b42e:	5e5b      	ldrsh	r3, [r3, r1]
 800b430:	4353      	muls	r3, r2
 800b432:	135b      	asrs	r3, r3, #13
 800b434:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	18d3      	adds	r3, r2, r3
 800b43c:	4a0e      	ldr	r2, [pc, #56]	@ (800b478 <BMP280_calc_pressure+0x14c>)
 800b43e:	2112      	movs	r1, #18
 800b440:	5e52      	ldrsh	r2, [r2, r1]
 800b442:	189b      	adds	r3, r3, r2
 800b444:	111a      	asrs	r2, r3, #4
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	18d3      	adds	r3, r2, r3
 800b44a:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800b44c:	6978      	ldr	r0, [r7, #20]
 800b44e:	f7f6 fa3b 	bl	80018c8 <__aeabi_ui2f>
 800b452:	1c03      	adds	r3, r0, #0
 800b454:	490a      	ldr	r1, [pc, #40]	@ (800b480 <BMP280_calc_pressure+0x154>)
 800b456:	1c18      	adds	r0, r3, #0
 800b458:	f7f5 fc24 	bl	8000ca4 <__aeabi_fdiv>
 800b45c:	1c03      	adds	r3, r0, #0
 800b45e:	607b      	str	r3, [r7, #4]
  return airhPa;
 800b460:	687b      	ldr	r3, [r7, #4]
}
 800b462:	1c18      	adds	r0, r3, #0
 800b464:	46bd      	mov	sp, r7
 800b466:	b006      	add	sp, #24
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	46c0      	nop			@ (mov r8, r8)
 800b46c:	20000c34 	.word	0x20000c34
 800b470:	20000c2c 	.word	0x20000c2c
 800b474:	ffff0600 	.word	0xffff0600
 800b478:	20000c10 	.word	0x20000c10
 800b47c:	00000c35 	.word	0x00000c35
 800b480:	42c80000 	.word	0x42c80000

0800b484 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800b484:	b5b0      	push	{r4, r5, r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800b48a:	4bcc      	ldr	r3, [pc, #816]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	0018      	movs	r0, r3
 800b490:	f007 ff98 	bl	80133c4 <TimestampIsReached>
 800b494:	0003      	movs	r3, r0
 800b496:	001a      	movs	r2, r3
 800b498:	2301      	movs	r3, #1
 800b49a:	4053      	eors	r3, r2
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <BMP_Upkeep+0x24>
    return BMPState;
 800b4a2:	4bc7      	ldr	r3, [pc, #796]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	e1c2      	b.n	800b82e <BMP_Upkeep+0x3aa>
  }
  switch(BMPState) {
 800b4a8:	4bc5      	ldr	r3, [pc, #788]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	2b09      	cmp	r3, #9
 800b4ae:	d900      	bls.n	800b4b2 <BMP_Upkeep+0x2e>
 800b4b0:	e16d      	b.n	800b78e <BMP_Upkeep+0x30a>
 800b4b2:	009a      	lsls	r2, r3, #2
 800b4b4:	4bc3      	ldr	r3, [pc, #780]	@ (800b7c4 <BMP_Upkeep+0x340>)
 800b4b6:	18d3      	adds	r3, r2, r3
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800b4bc:	4ac2      	ldr	r2, [pc, #776]	@ (800b7c8 <BMP_Upkeep+0x344>)
 800b4be:	4bc3      	ldr	r3, [pc, #780]	@ (800b7cc <BMP_Upkeep+0x348>)
 800b4c0:	0019      	movs	r1, r3
 800b4c2:	2003      	movs	r0, #3
 800b4c4:	f007 ffd4 	bl	8013470 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 780000;  // about 4 times an hour if powered
 800b4c8:	f008 fd54 	bl	8013f74 <HAL_GetTick>
 800b4cc:	0003      	movs	r3, r0
 800b4ce:	4ac0      	ldr	r2, [pc, #768]	@ (800b7d0 <BMP_Upkeep+0x34c>)
 800b4d0:	189a      	adds	r2, r3, r2
 800b4d2:	4bba      	ldr	r3, [pc, #744]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b4d4:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b4d6:	4bbf      	ldr	r3, [pc, #764]	@ (800b7d4 <BMP_Upkeep+0x350>)
 800b4d8:	781a      	ldrb	r2, [r3, #0]
 800b4da:	4bbf      	ldr	r3, [pc, #764]	@ (800b7d8 <BMP_Upkeep+0x354>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d100      	bne.n	800b4e4 <BMP_Upkeep+0x60>
 800b4e2:	e160      	b.n	800b7a6 <BMP_Upkeep+0x322>
      BMPState = BMP_STATE_WAIT;
 800b4e4:	4bb6      	ldr	r3, [pc, #728]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b4e6:	2208      	movs	r2, #8
 800b4e8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b4ea:	e15c      	b.n	800b7a6 <BMP_Upkeep+0x322>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800b4ec:	f002 f824 	bl	800d538 <getSensorLock>
 800b4f0:	1e03      	subs	r3, r0, #0
 800b4f2:	d000      	beq.n	800b4f6 <BMP_Upkeep+0x72>
 800b4f4:	e159      	b.n	800b7aa <BMP_Upkeep+0x326>
      break;
    }
    setSensorLock(BMP280);
 800b4f6:	2003      	movs	r0, #3
 800b4f8:	f002 f80a 	bl	800d510 <setSensorLock>
    BMP280_reset();
 800b4fc:	f7ff fb6a 	bl	800abd4 <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800b500:	200a      	movs	r0, #10
 800b502:	f008 fd41 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 800b506:	2000      	movs	r0, #0
 800b508:	f002 f802 	bl	800d510 <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800b50c:	4bac      	ldr	r3, [pc, #688]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b50e:	2201      	movs	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
    break;
 800b512:	e18a      	b.n	800b82a <BMP_Upkeep+0x3a6>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800b514:	f002 f810 	bl	800d538 <getSensorLock>
 800b518:	1e03      	subs	r3, r0, #0
 800b51a:	d000      	beq.n	800b51e <BMP_Upkeep+0x9a>
 800b51c:	e147      	b.n	800b7ae <BMP_Upkeep+0x32a>
      break;
    }
    setSensorLock(BMP280);
 800b51e:	2003      	movs	r0, #3
 800b520:	f001 fff6 	bl	800d510 <setSensorLock>
    if (BMP280_set_config()) {
 800b524:	f7ff fd8a 	bl	800b03c <BMP280_set_config>
 800b528:	1e03      	subs	r3, r0, #0
 800b52a:	d003      	beq.n	800b534 <BMP_Upkeep+0xb0>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b52c:	4ba4      	ldr	r3, [pc, #656]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b52e:	2202      	movs	r2, #2
 800b530:	701a      	strb	r2, [r3, #0]
 800b532:	e00f      	b.n	800b554 <BMP_Upkeep+0xd0>
    }
    else {
      Error("Error while configuring BMP280");
 800b534:	4aa9      	ldr	r2, [pc, #676]	@ (800b7dc <BMP_Upkeep+0x358>)
 800b536:	4baa      	ldr	r3, [pc, #680]	@ (800b7e0 <BMP_Upkeep+0x35c>)
 800b538:	0019      	movs	r1, r3
 800b53a:	2001      	movs	r0, #1
 800b53c:	f007 ff98 	bl	8013470 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b540:	f008 fd18 	bl	8013f74 <HAL_GetTick>
 800b544:	0003      	movs	r3, r0
 800b546:	4aa7      	ldr	r2, [pc, #668]	@ (800b7e4 <BMP_Upkeep+0x360>)
 800b548:	189a      	adds	r2, r3, r2
 800b54a:	4b9c      	ldr	r3, [pc, #624]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b54c:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b54e:	4b9c      	ldr	r3, [pc, #624]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b550:	2208      	movs	r2, #8
 800b552:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b554:	200a      	movs	r0, #10
 800b556:	f008 fd17 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 800b55a:	2000      	movs	r0, #0
 800b55c:	f001 ffd8 	bl	800d510 <setSensorLock>
  break;
 800b560:	e163      	b.n	800b82a <BMP_Upkeep+0x3a6>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b562:	f001 ffe9 	bl	800d538 <getSensorLock>
 800b566:	1e03      	subs	r3, r0, #0
 800b568:	d030      	beq.n	800b5cc <BMP_Upkeep+0x148>
      uint8_t locktype = getSensorLock();
 800b56a:	1dfc      	adds	r4, r7, #7
 800b56c:	f001 ffe4 	bl	800d538 <getSensorLock>
 800b570:	0003      	movs	r3, r0
 800b572:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800b574:	1dfb      	adds	r3, r7, #7
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d019      	beq.n	800b5b0 <BMP_Upkeep+0x12c>
 800b57c:	1dfb      	adds	r3, r7, #7
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d013      	beq.n	800b5ac <BMP_Upkeep+0x128>
 800b584:	1dfb      	adds	r3, r7, #7
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	2b05      	cmp	r3, #5
 800b58a:	d00d      	beq.n	800b5a8 <BMP_Upkeep+0x124>
 800b58c:	1dfb      	adds	r3, r7, #7
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d007      	beq.n	800b5a4 <BMP_Upkeep+0x120>
 800b594:	1dfb      	adds	r3, r7, #7
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d101      	bne.n	800b5a0 <BMP_Upkeep+0x11c>
 800b59c:	4b92      	ldr	r3, [pc, #584]	@ (800b7e8 <BMP_Upkeep+0x364>)
 800b59e:	e008      	b.n	800b5b2 <BMP_Upkeep+0x12e>
 800b5a0:	4b92      	ldr	r3, [pc, #584]	@ (800b7ec <BMP_Upkeep+0x368>)
 800b5a2:	e006      	b.n	800b5b2 <BMP_Upkeep+0x12e>
 800b5a4:	4b92      	ldr	r3, [pc, #584]	@ (800b7f0 <BMP_Upkeep+0x36c>)
 800b5a6:	e004      	b.n	800b5b2 <BMP_Upkeep+0x12e>
 800b5a8:	4b92      	ldr	r3, [pc, #584]	@ (800b7f4 <BMP_Upkeep+0x370>)
 800b5aa:	e002      	b.n	800b5b2 <BMP_Upkeep+0x12e>
 800b5ac:	4b92      	ldr	r3, [pc, #584]	@ (800b7f8 <BMP_Upkeep+0x374>)
 800b5ae:	e000      	b.n	800b5b2 <BMP_Upkeep+0x12e>
 800b5b0:	4b92      	ldr	r3, [pc, #584]	@ (800b7fc <BMP_Upkeep+0x378>)
 800b5b2:	4a93      	ldr	r2, [pc, #588]	@ (800b800 <BMP_Upkeep+0x37c>)
 800b5b4:	4985      	ldr	r1, [pc, #532]	@ (800b7cc <BMP_Upkeep+0x348>)
 800b5b6:	2003      	movs	r0, #3
 800b5b8:	f007 ff5a 	bl	8013470 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800b5bc:	f008 fcda 	bl	8013f74 <HAL_GetTick>
 800b5c0:	0003      	movs	r3, r0
 800b5c2:	3361      	adds	r3, #97	@ 0x61
 800b5c4:	001a      	movs	r2, r3
 800b5c6:	4b7d      	ldr	r3, [pc, #500]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b5c8:	601a      	str	r2, [r3, #0]
      break;
 800b5ca:	e12e      	b.n	800b82a <BMP_Upkeep+0x3a6>
    }
    if (getSensorLock() == FREE) {
 800b5cc:	f001 ffb4 	bl	800d538 <getSensorLock>
 800b5d0:	1e03      	subs	r3, r0, #0
 800b5d2:	d105      	bne.n	800b5e0 <BMP_Upkeep+0x15c>
      HAL_Delay(10);
 800b5d4:	200a      	movs	r0, #10
 800b5d6:	f008 fcd7 	bl	8013f88 <HAL_Delay>
      setSensorLock(BMP280);
 800b5da:	2003      	movs	r0, #3
 800b5dc:	f001 ff98 	bl	800d510 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800b5e0:	f7ff fd50 	bl	800b084 <BMP280_set_mode>
 800b5e4:	1e03      	subs	r3, r0, #0
 800b5e6:	d003      	beq.n	800b5f0 <BMP_Upkeep+0x16c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b5e8:	4b75      	ldr	r3, [pc, #468]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	701a      	strb	r2, [r3, #0]
 800b5ee:	e00f      	b.n	800b610 <BMP_Upkeep+0x18c>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800b5f0:	4a84      	ldr	r2, [pc, #528]	@ (800b804 <BMP_Upkeep+0x380>)
 800b5f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b7e0 <BMP_Upkeep+0x35c>)
 800b5f4:	0019      	movs	r1, r3
 800b5f6:	2001      	movs	r0, #1
 800b5f8:	f007 ff3a 	bl	8013470 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b5fc:	f008 fcba 	bl	8013f74 <HAL_GetTick>
 800b600:	0003      	movs	r3, r0
 800b602:	4a78      	ldr	r2, [pc, #480]	@ (800b7e4 <BMP_Upkeep+0x360>)
 800b604:	189a      	adds	r2, r3, r2
 800b606:	4b6d      	ldr	r3, [pc, #436]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b608:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b60a:	4b6d      	ldr	r3, [pc, #436]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b60c:	2208      	movs	r2, #8
 800b60e:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b610:	200a      	movs	r0, #10
 800b612:	f008 fcb9 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 800b616:	2000      	movs	r0, #0
 800b618:	f001 ff7a 	bl	800d510 <setSensorLock>
    break;
 800b61c:	e105      	b.n	800b82a <BMP_Upkeep+0x3a6>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800b61e:	f001 ff8b 	bl	800d538 <getSensorLock>
 800b622:	1e03      	subs	r3, r0, #0
 800b624:	d000      	beq.n	800b628 <BMP_Upkeep+0x1a4>
 800b626:	e0c4      	b.n	800b7b2 <BMP_Upkeep+0x32e>
      break;
    }
    HAL_Delay(10);
 800b628:	200a      	movs	r0, #10
 800b62a:	f008 fcad 	bl	8013f88 <HAL_Delay>
    setSensorLock(BMP280);
 800b62e:	2003      	movs	r0, #3
 800b630:	f001 ff6e 	bl	800d510 <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800b634:	f7ff fda6 	bl	800b184 <BMP280_get_measurement_values>
 800b638:	1e03      	subs	r3, r0, #0
 800b63a:	d003      	beq.n	800b644 <BMP_Upkeep+0x1c0>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800b63c:	4b60      	ldr	r3, [pc, #384]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b63e:	2203      	movs	r2, #3
 800b640:	701a      	strb	r2, [r3, #0]
 800b642:	e00f      	b.n	800b664 <BMP_Upkeep+0x1e0>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800b644:	4a70      	ldr	r2, [pc, #448]	@ (800b808 <BMP_Upkeep+0x384>)
 800b646:	4b66      	ldr	r3, [pc, #408]	@ (800b7e0 <BMP_Upkeep+0x35c>)
 800b648:	0019      	movs	r1, r3
 800b64a:	2001      	movs	r0, #1
 800b64c:	f007 ff10 	bl	8013470 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b650:	f008 fc90 	bl	8013f74 <HAL_GetTick>
 800b654:	0003      	movs	r3, r0
 800b656:	4a63      	ldr	r2, [pc, #396]	@ (800b7e4 <BMP_Upkeep+0x360>)
 800b658:	189a      	adds	r2, r3, r2
 800b65a:	4b58      	ldr	r3, [pc, #352]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b65c:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b65e:	4b58      	ldr	r3, [pc, #352]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b660:	2208      	movs	r2, #8
 800b662:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b664:	200a      	movs	r0, #10
 800b666:	f008 fc8f 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 800b66a:	2000      	movs	r0, #0
 800b66c:	f001 ff50 	bl	800d510 <setSensorLock>
  break;
 800b670:	e0db      	b.n	800b82a <BMP_Upkeep+0x3a6>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800b672:	f7ff fe13 	bl	800b29c <BMP280_calc_temperature>
 800b676:	1c03      	adds	r3, r0, #0
 800b678:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800b67a:	f7ff fe57 	bl	800b32c <BMP280_calc_pressure>
 800b67e:	1c03      	adds	r3, r0, #0
 800b680:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800b682:	4962      	ldr	r1, [pc, #392]	@ (800b80c <BMP_Upkeep+0x388>)
 800b684:	68b8      	ldr	r0, [r7, #8]
 800b686:	f7f4 ff67 	bl	8000558 <__aeabi_fcmpgt>
 800b68a:	1e03      	subs	r3, r0, #0
 800b68c:	d049      	beq.n	800b722 <BMP_Upkeep+0x29e>
 800b68e:	4960      	ldr	r1, [pc, #384]	@ (800b810 <BMP_Upkeep+0x38c>)
 800b690:	68b8      	ldr	r0, [r7, #8]
 800b692:	f7f4 ff4d 	bl	8000530 <__aeabi_fcmplt>
 800b696:	1e03      	subs	r3, r0, #0
 800b698:	d043      	beq.n	800b722 <BMP_Upkeep+0x29e>
      bmp280samplecounter++;
 800b69a:	4b5e      	ldr	r3, [pc, #376]	@ (800b814 <BMP_Upkeep+0x390>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	4b5c      	ldr	r3, [pc, #368]	@ (800b814 <BMP_Upkeep+0x390>)
 800b6a4:	701a      	strb	r2, [r3, #0]
      if (bmp280samplecounter == 2) {
 800b6a6:	4b5b      	ldr	r3, [pc, #364]	@ (800b814 <BMP_Upkeep+0x390>)
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d114      	bne.n	800b6d8 <BMP_Upkeep+0x254>
        Info("BMP280 barometric value: %.2fhPa  airtemperature: %2.2fC", airhpa, airtemp);
 800b6ae:	68b8      	ldr	r0, [r7, #8]
 800b6b0:	f7f8 f8f0 	bl	8003894 <__aeabi_f2d>
 800b6b4:	0004      	movs	r4, r0
 800b6b6:	000d      	movs	r5, r1
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f7f8 f8eb 	bl	8003894 <__aeabi_f2d>
 800b6be:	0002      	movs	r2, r0
 800b6c0:	000b      	movs	r3, r1
 800b6c2:	4855      	ldr	r0, [pc, #340]	@ (800b818 <BMP_Upkeep+0x394>)
 800b6c4:	4955      	ldr	r1, [pc, #340]	@ (800b81c <BMP_Upkeep+0x398>)
 800b6c6:	9202      	str	r2, [sp, #8]
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	9400      	str	r4, [sp, #0]
 800b6cc:	9501      	str	r5, [sp, #4]
 800b6ce:	0002      	movs	r2, r0
 800b6d0:	2002      	movs	r0, #2
 800b6d2:	f007 fecd 	bl	8013470 <CreateLine>
 800b6d6:	e006      	b.n	800b6e6 <BMP_Upkeep+0x262>
      }
      else {
        if (bmp280samplecounter == 11) {
 800b6d8:	4b4e      	ldr	r3, [pc, #312]	@ (800b814 <BMP_Upkeep+0x390>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b0b      	cmp	r3, #11
 800b6de:	d102      	bne.n	800b6e6 <BMP_Upkeep+0x262>
          bmp280samplecounter = 0;
 800b6e0:	4b4c      	ldr	r3, [pc, #304]	@ (800b814 <BMP_Upkeep+0x390>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	701a      	strb	r2, [r3, #0]
        }
      }


      setBMP280(airtemp, airhpa);
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	1c11      	adds	r1, r2, #0
 800b6ec:	1c18      	adds	r0, r3, #0
 800b6ee:	f7f9 f9ed 	bl	8004acc <setBMP280>
      if (Check_USB_PowerOn()) {
 800b6f2:	f7fd fdbf 	bl	8009274 <Check_USB_PowerOn>
 800b6f6:	1e03      	subs	r3, r0, #0
 800b6f8:	d00a      	beq.n	800b710 <BMP_Upkeep+0x28c>
        BMP280TimeStamp = HAL_GetTick() + 60000;
 800b6fa:	f008 fc3b 	bl	8013f74 <HAL_GetTick>
 800b6fe:	0003      	movs	r3, r0
 800b700:	4a47      	ldr	r2, [pc, #284]	@ (800b820 <BMP_Upkeep+0x39c>)
 800b702:	189a      	adds	r2, r3, r2
 800b704:	4b2d      	ldr	r3, [pc, #180]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b706:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800b708:	4b42      	ldr	r3, [pc, #264]	@ (800b814 <BMP_Upkeep+0x390>)
 800b70a:	2201      	movs	r2, #1
 800b70c:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800b70e:	e015      	b.n	800b73c <BMP_Upkeep+0x2b8>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 1000;
 800b710:	f008 fc30 	bl	8013f74 <HAL_GetTick>
 800b714:	0003      	movs	r3, r0
 800b716:	22fa      	movs	r2, #250	@ 0xfa
 800b718:	0092      	lsls	r2, r2, #2
 800b71a:	189a      	adds	r2, r3, r2
 800b71c:	4b27      	ldr	r3, [pc, #156]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b71e:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800b720:	e00c      	b.n	800b73c <BMP_Upkeep+0x2b8>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800b722:	4a40      	ldr	r2, [pc, #256]	@ (800b824 <BMP_Upkeep+0x3a0>)
 800b724:	4b2e      	ldr	r3, [pc, #184]	@ (800b7e0 <BMP_Upkeep+0x35c>)
 800b726:	0019      	movs	r1, r3
 800b728:	2001      	movs	r0, #1
 800b72a:	f007 fea1 	bl	8013470 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b72e:	f008 fc21 	bl	8013f74 <HAL_GetTick>
 800b732:	0003      	movs	r3, r0
 800b734:	4a2b      	ldr	r2, [pc, #172]	@ (800b7e4 <BMP_Upkeep+0x360>)
 800b736:	189a      	adds	r2, r3, r2
 800b738:	4b20      	ldr	r3, [pc, #128]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b73a:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800b73c:	4b20      	ldr	r3, [pc, #128]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b73e:	2208      	movs	r2, #8
 800b740:	701a      	strb	r2, [r3, #0]
    break;
 800b742:	e072      	b.n	800b82a <BMP_Upkeep+0x3a6>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800b744:	4b1e      	ldr	r3, [pc, #120]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b746:	2209      	movs	r2, #9
 800b748:	701a      	strb	r2, [r3, #0]
    break;
 800b74a:	e06e      	b.n	800b82a <BMP_Upkeep+0x3a6>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800b74c:	f001 fef4 	bl	800d538 <getSensorLock>
 800b750:	1e03      	subs	r3, r0, #0
 800b752:	d130      	bne.n	800b7b6 <BMP_Upkeep+0x332>
      break;
    }
    setSensorLock(BMP280);
 800b754:	2003      	movs	r0, #3
 800b756:	f001 fedb 	bl	800d510 <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800b75a:	f7ff fce7 	bl	800b12c <BMP280_get_mode>
 800b75e:	0003      	movs	r3, r0
 800b760:	2b03      	cmp	r3, #3
 800b762:	d103      	bne.n	800b76c <BMP_Upkeep+0x2e8>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b764:	4b16      	ldr	r3, [pc, #88]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b766:	2205      	movs	r2, #5
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	e002      	b.n	800b772 <BMP_Upkeep+0x2ee>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b76c:	4b14      	ldr	r3, [pc, #80]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b76e:	2202      	movs	r2, #2
 800b770:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b772:	200a      	movs	r0, #10
 800b774:	f008 fc08 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 800b778:	2000      	movs	r0, #0
 800b77a:	f001 fec9 	bl	800d510 <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800b77e:	f008 fbf9 	bl	8013f74 <HAL_GetTick>
 800b782:	0003      	movs	r3, r0
 800b784:	3317      	adds	r3, #23
 800b786:	001a      	movs	r2, r3
 800b788:	4b0c      	ldr	r3, [pc, #48]	@ (800b7bc <BMP_Upkeep+0x338>)
 800b78a:	601a      	str	r2, [r3, #0]
    break;
 800b78c:	e04d      	b.n	800b82a <BMP_Upkeep+0x3a6>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800b78e:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c0 <BMP_Upkeep+0x33c>)
 800b790:	2200      	movs	r2, #0
 800b792:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800b794:	f001 fed0 	bl	800d538 <getSensorLock>
 800b798:	0003      	movs	r3, r0
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d144      	bne.n	800b828 <BMP_Upkeep+0x3a4>
      setSensorLock(FREE);
 800b79e:	2000      	movs	r0, #0
 800b7a0:	f001 feb6 	bl	800d510 <setSensorLock>
    }
    break;
 800b7a4:	e040      	b.n	800b828 <BMP_Upkeep+0x3a4>
    break;
 800b7a6:	46c0      	nop			@ (mov r8, r8)
 800b7a8:	e03f      	b.n	800b82a <BMP_Upkeep+0x3a6>
      break;
 800b7aa:	46c0      	nop			@ (mov r8, r8)
 800b7ac:	e03d      	b.n	800b82a <BMP_Upkeep+0x3a6>
      break;
 800b7ae:	46c0      	nop			@ (mov r8, r8)
 800b7b0:	e03b      	b.n	800b82a <BMP_Upkeep+0x3a6>
      break;
 800b7b2:	46c0      	nop			@ (mov r8, r8)
 800b7b4:	e039      	b.n	800b82a <BMP_Upkeep+0x3a6>
      break;
 800b7b6:	46c0      	nop			@ (mov r8, r8)
 800b7b8:	e037      	b.n	800b82a <BMP_Upkeep+0x3a6>
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	20000c38 	.word	0x20000c38
 800b7c0:	2000009a 	.word	0x2000009a
 800b7c4:	0802e0ac 	.word	0x0802e0ac
 800b7c8:	0802c5b0 	.word	0x0802c5b0
 800b7cc:	0802c1b0 	.word	0x0802c1b0
 800b7d0:	000be6e0 	.word	0x000be6e0
 800b7d4:	20000b62 	.word	0x20000b62
 800b7d8:	20000c3c 	.word	0x20000c3c
 800b7dc:	0802c5ec 	.word	0x0802c5ec
 800b7e0:	0802c4a0 	.word	0x0802c4a0
 800b7e4:	00002710 	.word	0x00002710
 800b7e8:	0802c60c 	.word	0x0802c60c
 800b7ec:	0802c614 	.word	0x0802c614
 800b7f0:	0802c61c 	.word	0x0802c61c
 800b7f4:	0802c624 	.word	0x0802c624
 800b7f8:	0802c62c 	.word	0x0802c62c
 800b7fc:	0802c634 	.word	0x0802c634
 800b800:	0802c63c 	.word	0x0802c63c
 800b804:	0802c664 	.word	0x0802c664
 800b808:	0802c690 	.word	0x0802c690
 800b80c:	44548000 	.word	0x44548000
 800b810:	44898000 	.word	0x44898000
 800b814:	20000c28 	.word	0x20000c28
 800b818:	0802c6c8 	.word	0x0802c6c8
 800b81c:	0802c190 	.word	0x0802c190
 800b820:	0000ea60 	.word	0x0000ea60
 800b824:	0802c704 	.word	0x0802c704
    break;
 800b828:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800b82a:	4b03      	ldr	r3, [pc, #12]	@ (800b838 <BMP_Upkeep+0x3b4>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
}
 800b82e:	0018      	movs	r0, r3
 800b830:	46bd      	mov	sp, r7
 800b832:	b004      	add	sp, #16
 800b834:	bdb0      	pop	{r4, r5, r7, pc}
 800b836:	46c0      	nop			@ (mov r8, r8)
 800b838:	2000009a 	.word	0x2000009a

0800b83c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b842:	4b10      	ldr	r3, [pc, #64]	@ (800b884 <MX_DMA_Init+0x48>)
 800b844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b846:	4b0f      	ldr	r3, [pc, #60]	@ (800b884 <MX_DMA_Init+0x48>)
 800b848:	2101      	movs	r1, #1
 800b84a:	430a      	orrs	r2, r1
 800b84c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b84e:	4b0d      	ldr	r3, [pc, #52]	@ (800b884 <MX_DMA_Init+0x48>)
 800b850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b852:	2201      	movs	r2, #1
 800b854:	4013      	ands	r3, r2
 800b856:	607b      	str	r3, [r7, #4]
 800b858:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800b85a:	2200      	movs	r2, #0
 800b85c:	2100      	movs	r1, #0
 800b85e:	200a      	movs	r0, #10
 800b860:	f009 f82c 	bl	80148bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800b864:	200a      	movs	r0, #10
 800b866:	f009 f83e 	bl	80148e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800b86a:	2200      	movs	r2, #0
 800b86c:	2103      	movs	r1, #3
 800b86e:	200b      	movs	r0, #11
 800b870:	f009 f824 	bl	80148bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800b874:	200b      	movs	r0, #11
 800b876:	f009 f836 	bl	80148e6 <HAL_NVIC_EnableIRQ>

}
 800b87a:	46c0      	nop			@ (mov r8, r8)
 800b87c:	46bd      	mov	sp, r7
 800b87e:	b002      	add	sp, #8
 800b880:	bd80      	pop	{r7, pc}
 800b882:	46c0      	nop			@ (mov r8, r8)
 800b884:	40021000 	.word	0x40021000

0800b888 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	1dbb      	adds	r3, r7, #6
 800b894:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800b896:	4b17      	ldr	r3, [pc, #92]	@ (800b8f4 <WriteUint8ArrayEeprom+0x6c>)
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b89c:	f009 fba0 	bl	8014fe0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800b8a0:	2316      	movs	r3, #22
 800b8a2:	18fb      	adds	r3, r7, r3
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	801a      	strh	r2, [r3, #0]
 800b8a8:	e015      	b.n	800b8d6 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800b8aa:	4b12      	ldr	r3, [pc, #72]	@ (800b8f4 <WriteUint8ArrayEeprom+0x6c>)
 800b8ac:	6819      	ldr	r1, [r3, #0]
 800b8ae:	2416      	movs	r4, #22
 800b8b0:	193b      	adds	r3, r7, r4
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	18d3      	adds	r3, r2, r3
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	001a      	movs	r2, r3
 800b8bc:	2000      	movs	r0, #0
 800b8be:	f009 fbf7 	bl	80150b0 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800b8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f4 <WriteUint8ArrayEeprom+0x6c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f4 <WriteUint8ArrayEeprom+0x6c>)
 800b8ca:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b8cc:	193b      	adds	r3, r7, r4
 800b8ce:	881a      	ldrh	r2, [r3, #0]
 800b8d0:	193b      	adds	r3, r7, r4
 800b8d2:	3201      	adds	r2, #1
 800b8d4:	801a      	strh	r2, [r3, #0]
 800b8d6:	2316      	movs	r3, #22
 800b8d8:	18fa      	adds	r2, r7, r3
 800b8da:	1dbb      	adds	r3, r7, #6
 800b8dc:	8812      	ldrh	r2, [r2, #0]
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d3e2      	bcc.n	800b8aa <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b8e4:	f009 fbaa 	bl	801503c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800b8e8:	4b02      	ldr	r3, [pc, #8]	@ (800b8f4 <WriteUint8ArrayEeprom+0x6c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
}
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	b007      	add	sp, #28
 800b8f2:	bd90      	pop	{r4, r7, pc}
 800b8f4:	20000c60 	.word	0x20000c60

0800b8f8 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	0019      	movs	r1, r3
 800b904:	1dbb      	adds	r3, r7, #6
 800b906:	801a      	strh	r2, [r3, #0]
 800b908:	1d3b      	adds	r3, r7, #4
 800b90a:	1c0a      	adds	r2, r1, #0
 800b90c:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800b90e:	1dba      	adds	r2, r7, #6
 800b910:	1d3b      	adds	r3, r7, #4
 800b912:	8812      	ldrh	r2, [r2, #0]
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	429a      	cmp	r2, r3
 800b918:	d806      	bhi.n	800b928 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800b91a:	1dbb      	adds	r3, r7, #6
 800b91c:	881a      	ldrh	r2, [r3, #0]
 800b91e:	68b9      	ldr	r1, [r7, #8]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	0018      	movs	r0, r3
 800b924:	f7ff ffb0 	bl	800b888 <WriteUint8ArrayEeprom>
    }
}
 800b928:	46c0      	nop			@ (mov r8, r8)
 800b92a:	46bd      	mov	sp, r7
 800b92c:	b004      	add	sp, #16
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	1dbb      	adds	r3, r7, #6
 800b93c:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b93e:	2316      	movs	r3, #22
 800b940:	18fb      	adds	r3, r7, r3
 800b942:	2200      	movs	r2, #0
 800b944:	801a      	strh	r2, [r3, #0]
 800b946:	e010      	b.n	800b96a <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800b948:	2016      	movs	r0, #22
 800b94a:	183b      	adds	r3, r7, r0
 800b94c:	881a      	ldrh	r2, [r3, #0]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	18d3      	adds	r3, r2, r3
 800b952:	0019      	movs	r1, r3
 800b954:	183b      	adds	r3, r7, r0
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	18d3      	adds	r3, r2, r3
 800b95c:	780a      	ldrb	r2, [r1, #0]
 800b95e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b960:	183b      	adds	r3, r7, r0
 800b962:	881a      	ldrh	r2, [r3, #0]
 800b964:	183b      	adds	r3, r7, r0
 800b966:	3201      	adds	r2, #1
 800b968:	801a      	strh	r2, [r3, #0]
 800b96a:	2316      	movs	r3, #22
 800b96c:	18fa      	adds	r2, r7, r3
 800b96e:	1dbb      	adds	r3, r7, #6
 800b970:	8812      	ldrh	r2, [r2, #0]
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	429a      	cmp	r2, r3
 800b976:	d3e7      	bcc.n	800b948 <ReadUint8ArrayEEprom+0x18>
    }
}
 800b978:	46c0      	nop			@ (mov r8, r8)
 800b97a:	46c0      	nop			@ (mov r8, r8)
 800b97c:	46bd      	mov	sp, r7
 800b97e:	b006      	add	sp, #24
 800b980:	bd80      	pop	{r7, pc}

0800b982 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800b982:	b590      	push	{r4, r7, lr}
 800b984:	b085      	sub	sp, #20
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	000a      	movs	r2, r1
 800b98c:	1cbb      	adds	r3, r7, #2
 800b98e:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b990:	f009 fb26 	bl	8014fe0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800b994:	230e      	movs	r3, #14
 800b996:	18fb      	adds	r3, r7, r3
 800b998:	2200      	movs	r2, #0
 800b99a:	801a      	strh	r2, [r3, #0]
 800b99c:	e00c      	b.n	800b9b8 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800b99e:	240e      	movs	r4, #14
 800b9a0:	193b      	adds	r3, r7, r4
 800b9a2:	881a      	ldrh	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	18d3      	adds	r3, r2, r3
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f009 fb55 	bl	8015058 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800b9ae:	193b      	adds	r3, r7, r4
 800b9b0:	193a      	adds	r2, r7, r4
 800b9b2:	8812      	ldrh	r2, [r2, #0]
 800b9b4:	3204      	adds	r2, #4
 800b9b6:	801a      	strh	r2, [r3, #0]
 800b9b8:	230e      	movs	r3, #14
 800b9ba:	18fa      	adds	r2, r7, r3
 800b9bc:	1cbb      	adds	r3, r7, #2
 800b9be:	8812      	ldrh	r2, [r2, #0]
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d3eb      	bcc.n	800b99e <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b9c6:	f009 fb39 	bl	801503c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800b9ca:	46c0      	nop			@ (mov r8, r8)
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	b005      	add	sp, #20
 800b9d0:	bd90      	pop	{r4, r7, pc}
	...

0800b9d4 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b9e4:	d901      	bls.n	800b9ea <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800b9e6:	237f      	movs	r3, #127	@ 0x7f
 800b9e8:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800b9ea:	2017      	movs	r0, #23
 800b9ec:	183b      	adds	r3, r7, r0
 800b9ee:	490d      	ldr	r1, [pc, #52]	@ (800ba24 <accessLUT10log10+0x50>)
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	188a      	adds	r2, r1, r2
 800b9f4:	7812      	ldrb	r2, [r2, #0]
 800b9f6:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800b9f8:	0001      	movs	r1, r0
 800b9fa:	187b      	adds	r3, r7, r1
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	2206      	movs	r2, #6
 800ba00:	4113      	asrs	r3, r2
 800ba02:	001a      	movs	r2, r3
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800ba08:	187b      	adds	r3, r7, r1
 800ba0a:	781a      	ldrb	r2, [r3, #0]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2106      	movs	r1, #6
 800ba12:	408b      	lsls	r3, r1
 800ba14:	1ad2      	subs	r2, r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	601a      	str	r2, [r3, #0]
}
 800ba1a:	46c0      	nop			@ (mov r8, r8)
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	b006      	add	sp, #24
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	46c0      	nop			@ (mov r8, r8)
 800ba24:	0802e0d4 	.word	0x0802e0d4

0800ba28 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800ba28:	b5b0      	push	{r4, r5, r7, lr}
 800ba2a:	b090      	sub	sp, #64	@ 0x40
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6138      	str	r0, [r7, #16]
 800ba30:	6179      	str	r1, [r7, #20]
 800ba32:	60fa      	str	r2, [r7, #12]
 800ba34:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800ba36:	2308      	movs	r3, #8
 800ba38:	001a      	movs	r2, r3
 800ba3a:	3a20      	subs	r2, #32
 800ba3c:	2a00      	cmp	r2, #0
 800ba3e:	db03      	blt.n	800ba48 <efficient10log10+0x20>
 800ba40:	2101      	movs	r1, #1
 800ba42:	4091      	lsls	r1, r2
 800ba44:	000d      	movs	r5, r1
 800ba46:	e008      	b.n	800ba5a <efficient10log10+0x32>
 800ba48:	2220      	movs	r2, #32
 800ba4a:	1ad2      	subs	r2, r2, r3
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	40d1      	lsrs	r1, r2
 800ba50:	000a      	movs	r2, r1
 800ba52:	2100      	movs	r1, #0
 800ba54:	4099      	lsls	r1, r3
 800ba56:	000d      	movs	r5, r1
 800ba58:	4315      	orrs	r5, r2
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	409a      	lsls	r2, r3
 800ba5e:	0014      	movs	r4, r2
 800ba60:	2201      	movs	r2, #1
 800ba62:	4252      	negs	r2, r2
 800ba64:	17d3      	asrs	r3, r2, #31
 800ba66:	1912      	adds	r2, r2, r4
 800ba68:	416b      	adcs	r3, r5
 800ba6a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba6c:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800ba6e:	2336      	movs	r3, #54	@ 0x36
 800ba70:	2208      	movs	r2, #8
 800ba72:	189b      	adds	r3, r3, r2
 800ba74:	19db      	adds	r3, r3, r7
 800ba76:	2200      	movs	r2, #0
 800ba78:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800ba7a:	e017      	b.n	800baac <efficient10log10+0x84>
    {
        P = P >> 1;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	07db      	lsls	r3, r3, #31
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	0852      	lsrs	r2, r2, #1
 800ba84:	603a      	str	r2, [r7, #0]
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	431a      	orrs	r2, r3
 800ba8a:	603a      	str	r2, [r7, #0]
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	085b      	lsrs	r3, r3, #1
 800ba90:	607b      	str	r3, [r7, #4]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	687c      	ldr	r4, [r7, #4]
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	617c      	str	r4, [r7, #20]
        bShift++;
 800ba9a:	2136      	movs	r1, #54	@ 0x36
 800ba9c:	2008      	movs	r0, #8
 800ba9e:	180b      	adds	r3, r1, r0
 800baa0:	19db      	adds	r3, r3, r7
 800baa2:	881a      	ldrh	r2, [r3, #0]
 800baa4:	180b      	adds	r3, r1, r0
 800baa6:	19db      	adds	r3, r3, r7
 800baa8:	3201      	adds	r2, #1
 800baaa:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d8e3      	bhi.n	800ba7c <efficient10log10+0x54>
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab8:	429a      	cmp	r2, r3
 800baba:	d103      	bne.n	800bac4 <efficient10log10+0x9c>
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d8db      	bhi.n	800ba7c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	2308      	movs	r3, #8
 800bac8:	3b01      	subs	r3, #1
 800baca:	2101      	movs	r1, #1
 800bacc:	4099      	lsls	r1, r3
 800bace:	000b      	movs	r3, r1
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800bad4:	2300      	movs	r3, #0
 800bad6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800badc:	231c      	movs	r3, #28
 800bade:	2408      	movs	r4, #8
 800bae0:	191b      	adds	r3, r3, r4
 800bae2:	19da      	adds	r2, r3, r7
 800bae4:	2320      	movs	r3, #32
 800bae6:	191b      	adds	r3, r3, r4
 800bae8:	19d9      	adds	r1, r3, r7
 800baea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baec:	0018      	movs	r0, r3
 800baee:	f7ff ff71 	bl	800b9d4 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800baf2:	2215      	movs	r2, #21
 800baf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf6:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800baf8:	2036      	movs	r0, #54	@ 0x36
 800bafa:	1902      	adds	r2, r0, r4
 800bafc:	19d2      	adds	r2, r2, r7
 800bafe:	8812      	ldrh	r2, [r2, #0]
 800bb00:	2103      	movs	r1, #3
 800bb02:	434a      	muls	r2, r1
 800bb04:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800bb06:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800bb08:	0021      	movs	r1, r4
 800bb0a:	1843      	adds	r3, r0, r1
 800bb0c:	19db      	adds	r3, r3, r7
 800bb0e:	881b      	ldrh	r3, [r3, #0]
 800bb10:	2201      	movs	r2, #1
 800bb12:	4353      	muls	r3, r2
 800bb14:	2203      	movs	r2, #3
 800bb16:	4113      	asrs	r3, r2
 800bb18:	001a      	movs	r2, r3
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800bb1e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800bb20:	2314      	movs	r3, #20
 800bb22:	185b      	adds	r3, r3, r1
 800bb24:	19da      	adds	r2, r3, r7
 800bb26:	2318      	movs	r3, #24
 800bb28:	185b      	adds	r3, r3, r1
 800bb2a:	19db      	adds	r3, r3, r7
 800bb2c:	0011      	movs	r1, r2
 800bb2e:	0018      	movs	r0, r3
 800bb30:	f000 f80a 	bl	800bb48 <correctIntFracNumber>
    integerPart[0] = intPart;
 800bb34:	6a3a      	ldr	r2, [r7, #32]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800bb3a:	69fa      	ldr	r2, [r7, #28]
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	601a      	str	r2, [r3, #0]
}
 800bb40:	46c0      	nop			@ (mov r8, r8)
 800bb42:	46bd      	mov	sp, r7
 800bb44:	b010      	add	sp, #64	@ 0x40
 800bb46:	bdb0      	pop	{r4, r5, r7, pc}

0800bb48 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800bb52:	e00a      	b.n	800bb6a <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3b0a      	subs	r3, #10
 800bb64:	001a      	movs	r2, r3
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b09      	cmp	r3, #9
 800bb70:	dcf0      	bgt.n	800bb54 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800bb72:	e00a      	b.n	800bb8a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	1e5a      	subs	r2, r3, #1
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	330a      	adds	r3, #10
 800bb84:	001a      	movs	r2, r3
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	3309      	adds	r3, #9
 800bb90:	dbf0      	blt.n	800bb74 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	da0f      	bge.n	800bbba <correctIntFracNumber+0x72>
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	dd0b      	ble.n	800bbba <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3b0a      	subs	r3, #10
 800bbb2:	001a      	movs	r2, r3
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800bbb8:	e012      	b.n	800bbe0 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dd0e      	ble.n	800bbe0 <correctIntFracNumber+0x98>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	da0a      	bge.n	800bbe0 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	1e5a      	subs	r2, r3, #1
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	330a      	adds	r3, #10
 800bbda:	001a      	movs	r2, r3
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	601a      	str	r2, [r3, #0]
}
 800bbe0:	46c0      	nop			@ (mov r8, r8)
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	b002      	add	sp, #8
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800bbe8:	b590      	push	{r4, r7, lr}
 800bbea:	b08b      	sub	sp, #44	@ 0x2c
 800bbec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbee:	2414      	movs	r4, #20
 800bbf0:	193b      	adds	r3, r7, r4
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	2314      	movs	r3, #20
 800bbf6:	001a      	movs	r2, r3
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	f01a f8d7 	bl	8025dac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bbfe:	4b8a      	ldr	r3, [pc, #552]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc02:	4b89      	ldr	r3, [pc, #548]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc04:	2104      	movs	r1, #4
 800bc06:	430a      	orrs	r2, r1
 800bc08:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bc0a:	4b87      	ldr	r3, [pc, #540]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0e:	2204      	movs	r2, #4
 800bc10:	4013      	ands	r3, r2
 800bc12:	613b      	str	r3, [r7, #16]
 800bc14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bc16:	4b84      	ldr	r3, [pc, #528]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1a:	4b83      	ldr	r3, [pc, #524]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc1c:	2180      	movs	r1, #128	@ 0x80
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bc22:	4b81      	ldr	r3, [pc, #516]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc26:	2280      	movs	r2, #128	@ 0x80
 800bc28:	4013      	ands	r3, r2
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc2e:	4b7e      	ldr	r3, [pc, #504]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc32:	4b7d      	ldr	r3, [pc, #500]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc34:	2101      	movs	r1, #1
 800bc36:	430a      	orrs	r2, r1
 800bc38:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bc3a:	4b7b      	ldr	r3, [pc, #492]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3e:	2201      	movs	r2, #1
 800bc40:	4013      	ands	r3, r2
 800bc42:	60bb      	str	r3, [r7, #8]
 800bc44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc46:	4b78      	ldr	r3, [pc, #480]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc4a:	4b77      	ldr	r3, [pc, #476]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc4c:	2102      	movs	r1, #2
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bc52:	4b75      	ldr	r3, [pc, #468]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc56:	2202      	movs	r2, #2
 800bc58:	4013      	ands	r3, r2
 800bc5a:	607b      	str	r3, [r7, #4]
 800bc5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bc5e:	4b72      	ldr	r3, [pc, #456]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc62:	4b71      	ldr	r3, [pc, #452]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc64:	2108      	movs	r1, #8
 800bc66:	430a      	orrs	r2, r1
 800bc68:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bc6a:	4b6f      	ldr	r3, [pc, #444]	@ (800be28 <MX_GPIO_Init+0x240>)
 800bc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6e:	2208      	movs	r2, #8
 800bc70:	4013      	ands	r3, r2
 800bc72:	603b      	str	r3, [r7, #0]
 800bc74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800bc76:	4b6d      	ldr	r3, [pc, #436]	@ (800be2c <MX_GPIO_Init+0x244>)
 800bc78:	2201      	movs	r2, #1
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	0018      	movs	r0, r3
 800bc7e:	f009 fc0a 	bl	8015496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800bc82:	4b6a      	ldr	r3, [pc, #424]	@ (800be2c <MX_GPIO_Init+0x244>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	2102      	movs	r1, #2
 800bc88:	0018      	movs	r0, r3
 800bc8a:	f009 fc04 	bl	8015496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800bc8e:	4968      	ldr	r1, [pc, #416]	@ (800be30 <MX_GPIO_Init+0x248>)
 800bc90:	4b68      	ldr	r3, [pc, #416]	@ (800be34 <MX_GPIO_Init+0x24c>)
 800bc92:	2201      	movs	r2, #1
 800bc94:	0018      	movs	r0, r3
 800bc96:	f009 fbfe 	bl	8015496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800bc9a:	2380      	movs	r3, #128	@ 0x80
 800bc9c:	011b      	lsls	r3, r3, #4
 800bc9e:	4866      	ldr	r0, [pc, #408]	@ (800be38 <MX_GPIO_Init+0x250>)
 800bca0:	2201      	movs	r2, #1
 800bca2:	0019      	movs	r1, r3
 800bca4:	f009 fbf7 	bl	8015496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800bca8:	2380      	movs	r3, #128	@ 0x80
 800bcaa:	015b      	lsls	r3, r3, #5
 800bcac:	4862      	ldr	r0, [pc, #392]	@ (800be38 <MX_GPIO_Init+0x250>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	0019      	movs	r1, r3
 800bcb2:	f009 fbf0 	bl	8015496 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800bcb6:	193b      	adds	r3, r7, r4
 800bcb8:	4a60      	ldr	r2, [pc, #384]	@ (800be3c <MX_GPIO_Init+0x254>)
 800bcba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bcbc:	193b      	adds	r3, r7, r4
 800bcbe:	2203      	movs	r2, #3
 800bcc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcc2:	193b      	adds	r3, r7, r4
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bcc8:	193b      	adds	r3, r7, r4
 800bcca:	4a5b      	ldr	r2, [pc, #364]	@ (800be38 <MX_GPIO_Init+0x250>)
 800bccc:	0019      	movs	r1, r3
 800bcce:	0010      	movs	r0, r2
 800bcd0:	f009 fa46 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800bcd4:	193b      	adds	r3, r7, r4
 800bcd6:	2203      	movs	r2, #3
 800bcd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bcda:	193b      	adds	r3, r7, r4
 800bcdc:	2201      	movs	r2, #1
 800bcde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bce0:	193b      	adds	r3, r7, r4
 800bce2:	2200      	movs	r2, #0
 800bce4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bce6:	193b      	adds	r3, r7, r4
 800bce8:	2200      	movs	r2, #0
 800bcea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bcec:	193b      	adds	r3, r7, r4
 800bcee:	4a4f      	ldr	r2, [pc, #316]	@ (800be2c <MX_GPIO_Init+0x244>)
 800bcf0:	0019      	movs	r1, r3
 800bcf2:	0010      	movs	r0, r2
 800bcf4:	f009 fa34 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800bcf8:	193b      	adds	r3, r7, r4
 800bcfa:	2270      	movs	r2, #112	@ 0x70
 800bcfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bcfe:	193b      	adds	r3, r7, r4
 800bd00:	2203      	movs	r2, #3
 800bd02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd04:	193b      	adds	r3, r7, r4
 800bd06:	2200      	movs	r2, #0
 800bd08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd0a:	193a      	adds	r2, r7, r4
 800bd0c:	23a0      	movs	r3, #160	@ 0xa0
 800bd0e:	05db      	lsls	r3, r3, #23
 800bd10:	0011      	movs	r1, r2
 800bd12:	0018      	movs	r0, r3
 800bd14:	f009 fa24 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800bd18:	193b      	adds	r3, r7, r4
 800bd1a:	22c0      	movs	r2, #192	@ 0xc0
 800bd1c:	0052      	lsls	r2, r2, #1
 800bd1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd20:	193b      	adds	r3, r7, r4
 800bd22:	2200      	movs	r2, #0
 800bd24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd26:	193b      	adds	r3, r7, r4
 800bd28:	2200      	movs	r2, #0
 800bd2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd2c:	193a      	adds	r2, r7, r4
 800bd2e:	23a0      	movs	r3, #160	@ 0xa0
 800bd30:	05db      	lsls	r3, r3, #23
 800bd32:	0011      	movs	r1, r2
 800bd34:	0018      	movs	r0, r3
 800bd36:	f009 fa13 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800bd3a:	193b      	adds	r3, r7, r4
 800bd3c:	4a3c      	ldr	r2, [pc, #240]	@ (800be30 <MX_GPIO_Init+0x248>)
 800bd3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd40:	193b      	adds	r3, r7, r4
 800bd42:	2201      	movs	r2, #1
 800bd44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd46:	193b      	adds	r3, r7, r4
 800bd48:	2200      	movs	r2, #0
 800bd4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd4c:	193b      	adds	r3, r7, r4
 800bd4e:	2200      	movs	r2, #0
 800bd50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd52:	193b      	adds	r3, r7, r4
 800bd54:	4a37      	ldr	r2, [pc, #220]	@ (800be34 <MX_GPIO_Init+0x24c>)
 800bd56:	0019      	movs	r1, r3
 800bd58:	0010      	movs	r0, r2
 800bd5a:	f009 fa01 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800bd5e:	193b      	adds	r3, r7, r4
 800bd60:	4a37      	ldr	r2, [pc, #220]	@ (800be40 <MX_GPIO_Init+0x258>)
 800bd62:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bd64:	193b      	adds	r3, r7, r4
 800bd66:	2203      	movs	r2, #3
 800bd68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd6a:	193b      	adds	r3, r7, r4
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd70:	193b      	adds	r3, r7, r4
 800bd72:	4a30      	ldr	r2, [pc, #192]	@ (800be34 <MX_GPIO_Init+0x24c>)
 800bd74:	0019      	movs	r1, r3
 800bd76:	0010      	movs	r0, r2
 800bd78:	f009 f9f2 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800bd7c:	0021      	movs	r1, r4
 800bd7e:	187b      	adds	r3, r7, r1
 800bd80:	2280      	movs	r2, #128	@ 0x80
 800bd82:	0092      	lsls	r2, r2, #2
 800bd84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd86:	000c      	movs	r4, r1
 800bd88:	193b      	adds	r3, r7, r4
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd8e:	193b      	adds	r3, r7, r4
 800bd90:	2200      	movs	r2, #0
 800bd92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800bd94:	193b      	adds	r3, r7, r4
 800bd96:	4a28      	ldr	r2, [pc, #160]	@ (800be38 <MX_GPIO_Init+0x250>)
 800bd98:	0019      	movs	r1, r3
 800bd9a:	0010      	movs	r0, r2
 800bd9c:	f009 f9e0 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800bda0:	193b      	adds	r3, r7, r4
 800bda2:	2280      	movs	r2, #128	@ 0x80
 800bda4:	0212      	lsls	r2, r2, #8
 800bda6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bda8:	193b      	adds	r3, r7, r4
 800bdaa:	2288      	movs	r2, #136	@ 0x88
 800bdac:	0352      	lsls	r2, r2, #13
 800bdae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdb0:	193b      	adds	r3, r7, r4
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800bdb6:	193a      	adds	r2, r7, r4
 800bdb8:	23a0      	movs	r3, #160	@ 0xa0
 800bdba:	05db      	lsls	r3, r3, #23
 800bdbc:	0011      	movs	r1, r2
 800bdbe:	0018      	movs	r0, r3
 800bdc0:	f009 f9ce 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800bdc4:	0021      	movs	r1, r4
 800bdc6:	187b      	adds	r3, r7, r1
 800bdc8:	22c0      	movs	r2, #192	@ 0xc0
 800bdca:	0152      	lsls	r2, r2, #5
 800bdcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bdce:	000c      	movs	r4, r1
 800bdd0:	193b      	adds	r3, r7, r4
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdd6:	193b      	adds	r3, r7, r4
 800bdd8:	2200      	movs	r2, #0
 800bdda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bddc:	193b      	adds	r3, r7, r4
 800bdde:	2200      	movs	r2, #0
 800bde0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bde2:	193b      	adds	r3, r7, r4
 800bde4:	4a14      	ldr	r2, [pc, #80]	@ (800be38 <MX_GPIO_Init+0x250>)
 800bde6:	0019      	movs	r1, r3
 800bde8:	0010      	movs	r0, r2
 800bdea:	f009 f9b9 	bl	8015160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800bdee:	0021      	movs	r1, r4
 800bdf0:	187b      	adds	r3, r7, r1
 800bdf2:	2204      	movs	r2, #4
 800bdf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdf6:	187b      	adds	r3, r7, r1
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bdfc:	187b      	adds	r3, r7, r1
 800bdfe:	2201      	movs	r2, #1
 800be00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800be02:	187b      	adds	r3, r7, r1
 800be04:	4a0f      	ldr	r2, [pc, #60]	@ (800be44 <MX_GPIO_Init+0x25c>)
 800be06:	0019      	movs	r1, r3
 800be08:	0010      	movs	r0, r2
 800be0a:	f009 f9a9 	bl	8015160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800be0e:	2200      	movs	r2, #0
 800be10:	2100      	movs	r1, #0
 800be12:	2007      	movs	r0, #7
 800be14:	f008 fd52 	bl	80148bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800be18:	2007      	movs	r0, #7
 800be1a:	f008 fd64 	bl	80148e6 <HAL_NVIC_EnableIRQ>

}
 800be1e:	46c0      	nop			@ (mov r8, r8)
 800be20:	46bd      	mov	sp, r7
 800be22:	b00b      	add	sp, #44	@ 0x2c
 800be24:	bd90      	pop	{r4, r7, pc}
 800be26:	46c0      	nop			@ (mov r8, r8)
 800be28:	40021000 	.word	0x40021000
 800be2c:	50001c00 	.word	0x50001c00
 800be30:	00000301 	.word	0x00000301
 800be34:	50000400 	.word	0x50000400
 800be38:	50000800 	.word	0x50000800
 800be3c:	0000200c 	.word	0x0000200c
 800be40:	0000403e 	.word	0x0000403e
 800be44:	50000c00 	.word	0x50000c00

0800be48 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2100      	movs	r1, #0
 800be56:	0018      	movs	r0, r3
 800be58:	f010 fa22 	bl	801c2a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2108      	movs	r1, #8
 800be60:	0018      	movs	r0, r3
 800be62:	f010 fa1d 	bl	801c2a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	210c      	movs	r1, #12
 800be6a:	0018      	movs	r0, r3
 800be6c:	f010 fa18 	bl	801c2a0 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800be70:	2380      	movs	r3, #128	@ 0x80
 800be72:	05db      	lsls	r3, r3, #23
 800be74:	22fa      	movs	r2, #250	@ 0xfa
 800be76:	0112      	lsls	r2, r2, #4
 800be78:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800be7a:	2380      	movs	r3, #128	@ 0x80
 800be7c:	05db      	lsls	r3, r3, #23
 800be7e:	22fa      	movs	r2, #250	@ 0xfa
 800be80:	0112      	lsls	r2, r2, #4
 800be82:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800be84:	2380      	movs	r3, #128	@ 0x80
 800be86:	05db      	lsls	r3, r3, #23
 800be88:	22fa      	movs	r2, #250	@ 0xfa
 800be8a:	0112      	lsls	r2, r2, #4
 800be8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800be8e:	2380      	movs	r3, #128	@ 0x80
 800be90:	05db      	lsls	r3, r3, #23
 800be92:	22fa      	movs	r2, #250	@ 0xfa
 800be94:	0112      	lsls	r2, r2, #4
 800be96:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2100      	movs	r1, #0
 800be9c:	0018      	movs	r0, r3
 800be9e:	f010 f9ff 	bl	801c2a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2104      	movs	r1, #4
 800bea6:	0018      	movs	r0, r3
 800bea8:	f010 f9fa 	bl	801c2a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2108      	movs	r1, #8
 800beb0:	0018      	movs	r0, r3
 800beb2:	f010 f9f5 	bl	801c2a0 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800beb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bee0 <GPIO_InitPWMLEDs+0x98>)
 800beb8:	22fa      	movs	r2, #250	@ 0xfa
 800beba:	0112      	lsls	r2, r2, #4
 800bebc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800bebe:	4b08      	ldr	r3, [pc, #32]	@ (800bee0 <GPIO_InitPWMLEDs+0x98>)
 800bec0:	22fa      	movs	r2, #250	@ 0xfa
 800bec2:	0112      	lsls	r2, r2, #4
 800bec4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800bec6:	4b06      	ldr	r3, [pc, #24]	@ (800bee0 <GPIO_InitPWMLEDs+0x98>)
 800bec8:	22fa      	movs	r2, #250	@ 0xfa
 800beca:	0112      	lsls	r2, r2, #4
 800becc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800bece:	4b04      	ldr	r3, [pc, #16]	@ (800bee0 <GPIO_InitPWMLEDs+0x98>)
 800bed0:	22fa      	movs	r2, #250	@ 0xfa
 800bed2:	0112      	lsls	r2, r2, #4
 800bed4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800bed6:	46c0      	nop			@ (mov r8, r8)
 800bed8:	46bd      	mov	sp, r7
 800beda:	b002      	add	sp, #8
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	46c0      	nop			@ (mov r8, r8)
 800bee0:	40000400 	.word	0x40000400

0800bee4 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800beea:	1d3b      	adds	r3, r7, #4
 800beec:	0018      	movs	r0, r3
 800beee:	2314      	movs	r3, #20
 800bef0:	001a      	movs	r2, r3
 800bef2:	2100      	movs	r1, #0
 800bef4:	f019 ff5a 	bl	8025dac <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800bef8:	1d3b      	adds	r3, r7, #4
 800befa:	2205      	movs	r2, #5
 800befc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800befe:	1d3b      	adds	r3, r7, #4
 800bf00:	2203      	movs	r2, #3
 800bf02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf04:	1d3b      	adds	r3, r7, #4
 800bf06:	2200      	movs	r2, #0
 800bf08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf0a:	1d3a      	adds	r2, r7, #4
 800bf0c:	23a0      	movs	r3, #160	@ 0xa0
 800bf0e:	05db      	lsls	r3, r3, #23
 800bf10:	0011      	movs	r1, r2
 800bf12:	0018      	movs	r0, r3
 800bf14:	f009 f924 	bl	8015160 <HAL_GPIO_Init>
}
 800bf18:	46c0      	nop			@ (mov r8, r8)
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	b006      	add	sp, #24
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bf24:	4b1b      	ldr	r3, [pc, #108]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf26:	4a1c      	ldr	r2, [pc, #112]	@ (800bf98 <MX_I2C1_Init+0x78>)
 800bf28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800bf2a:	4b1a      	ldr	r3, [pc, #104]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf2c:	4a1b      	ldr	r2, [pc, #108]	@ (800bf9c <MX_I2C1_Init+0x7c>)
 800bf2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bf30:	4b18      	ldr	r3, [pc, #96]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bf36:	4b17      	ldr	r3, [pc, #92]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf38:	2201      	movs	r2, #1
 800bf3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bf3c:	4b15      	ldr	r3, [pc, #84]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bf42:	4b14      	ldr	r3, [pc, #80]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bf48:	4b12      	ldr	r3, [pc, #72]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bf4e:	4b11      	ldr	r3, [pc, #68]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bf54:	4b0f      	ldr	r3, [pc, #60]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bf5a:	4b0e      	ldr	r3, [pc, #56]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf5c:	0018      	movs	r0, r3
 800bf5e:	f009 fad3 	bl	8015508 <HAL_I2C_Init>
 800bf62:	1e03      	subs	r3, r0, #0
 800bf64:	d001      	beq.n	800bf6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800bf66:	f000 fdef 	bl	800cb48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bf6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	0018      	movs	r0, r3
 800bf70:	f00c f9b0 	bl	80182d4 <HAL_I2CEx_ConfigAnalogFilter>
 800bf74:	1e03      	subs	r3, r0, #0
 800bf76:	d001      	beq.n	800bf7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800bf78:	f000 fde6 	bl	800cb48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bf7c:	4b05      	ldr	r3, [pc, #20]	@ (800bf94 <MX_I2C1_Init+0x74>)
 800bf7e:	2100      	movs	r1, #0
 800bf80:	0018      	movs	r0, r3
 800bf82:	f00c f9f3 	bl	801836c <HAL_I2CEx_ConfigDigitalFilter>
 800bf86:	1e03      	subs	r3, r0, #0
 800bf88:	d001      	beq.n	800bf8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800bf8a:	f000 fddd 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bf8e:	46c0      	nop			@ (mov r8, r8)
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	20000c64 	.word	0x20000c64
 800bf98:	40005400 	.word	0x40005400
 800bf9c:	00503d58 	.word	0x00503d58

0800bfa0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bfa4:	4b1b      	ldr	r3, [pc, #108]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfa6:	4a1c      	ldr	r2, [pc, #112]	@ (800c018 <MX_I2C2_Init+0x78>)
 800bfa8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800bfaa:	4b1a      	ldr	r3, [pc, #104]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfac:	4a1b      	ldr	r2, [pc, #108]	@ (800c01c <MX_I2C2_Init+0x7c>)
 800bfae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800bfb0:	4b18      	ldr	r3, [pc, #96]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bfb6:	4b17      	ldr	r3, [pc, #92]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfb8:	2201      	movs	r2, #1
 800bfba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bfbc:	4b15      	ldr	r3, [pc, #84]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800bfc2:	4b14      	ldr	r3, [pc, #80]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bfc8:	4b12      	ldr	r3, [pc, #72]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bfce:	4b11      	ldr	r3, [pc, #68]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bfd4:	4b0f      	ldr	r3, [pc, #60]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bfda:	4b0e      	ldr	r3, [pc, #56]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfdc:	0018      	movs	r0, r3
 800bfde:	f009 fa93 	bl	8015508 <HAL_I2C_Init>
 800bfe2:	1e03      	subs	r3, r0, #0
 800bfe4:	d001      	beq.n	800bfea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800bfe6:	f000 fdaf 	bl	800cb48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bfea:	4b0a      	ldr	r3, [pc, #40]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bfec:	2100      	movs	r1, #0
 800bfee:	0018      	movs	r0, r3
 800bff0:	f00c f970 	bl	80182d4 <HAL_I2CEx_ConfigAnalogFilter>
 800bff4:	1e03      	subs	r3, r0, #0
 800bff6:	d001      	beq.n	800bffc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800bff8:	f000 fda6 	bl	800cb48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800bffc:	4b05      	ldr	r3, [pc, #20]	@ (800c014 <MX_I2C2_Init+0x74>)
 800bffe:	2100      	movs	r1, #0
 800c000:	0018      	movs	r0, r3
 800c002:	f00c f9b3 	bl	801836c <HAL_I2CEx_ConfigDigitalFilter>
 800c006:	1e03      	subs	r3, r0, #0
 800c008:	d001      	beq.n	800c00e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800c00a:	f000 fd9d 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800c00e:	46c0      	nop			@ (mov r8, r8)
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20000cb8 	.word	0x20000cb8
 800c018:	40005800 	.word	0x40005800
 800c01c:	00503d58 	.word	0x00503d58

0800c020 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b08b      	sub	sp, #44	@ 0x2c
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c028:	2414      	movs	r4, #20
 800c02a:	193b      	adds	r3, r7, r4
 800c02c:	0018      	movs	r0, r3
 800c02e:	2314      	movs	r3, #20
 800c030:	001a      	movs	r2, r3
 800c032:	2100      	movs	r1, #0
 800c034:	f019 feba 	bl	8025dac <memset>
  if(i2cHandle->Instance==I2C1)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a5d      	ldr	r2, [pc, #372]	@ (800c1b4 <HAL_I2C_MspInit+0x194>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d000      	beq.n	800c044 <HAL_I2C_MspInit+0x24>
 800c042:	e083      	b.n	800c14c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c044:	4b5c      	ldr	r3, [pc, #368]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c048:	4b5b      	ldr	r3, [pc, #364]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c04a:	2102      	movs	r1, #2
 800c04c:	430a      	orrs	r2, r1
 800c04e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c050:	4b59      	ldr	r3, [pc, #356]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c054:	2202      	movs	r2, #2
 800c056:	4013      	ands	r3, r2
 800c058:	613b      	str	r3, [r7, #16]
 800c05a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c05c:	0021      	movs	r1, r4
 800c05e:	187b      	adds	r3, r7, r1
 800c060:	22c0      	movs	r2, #192	@ 0xc0
 800c062:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c064:	187b      	adds	r3, r7, r1
 800c066:	2212      	movs	r2, #18
 800c068:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c06a:	187b      	adds	r3, r7, r1
 800c06c:	2200      	movs	r2, #0
 800c06e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c070:	187b      	adds	r3, r7, r1
 800c072:	2203      	movs	r2, #3
 800c074:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800c076:	187b      	adds	r3, r7, r1
 800c078:	2201      	movs	r2, #1
 800c07a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c07c:	187b      	adds	r3, r7, r1
 800c07e:	4a4f      	ldr	r2, [pc, #316]	@ (800c1bc <HAL_I2C_MspInit+0x19c>)
 800c080:	0019      	movs	r1, r3
 800c082:	0010      	movs	r0, r2
 800c084:	f009 f86c 	bl	8015160 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c088:	4b4b      	ldr	r3, [pc, #300]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c08a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c08c:	4b4a      	ldr	r3, [pc, #296]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c08e:	2180      	movs	r1, #128	@ 0x80
 800c090:	0389      	lsls	r1, r1, #14
 800c092:	430a      	orrs	r2, r1
 800c094:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800c096:	4b4a      	ldr	r3, [pc, #296]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c098:	4a4a      	ldr	r2, [pc, #296]	@ (800c1c4 <HAL_I2C_MspInit+0x1a4>)
 800c09a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800c09c:	4b48      	ldr	r3, [pc, #288]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c09e:	2206      	movs	r2, #6
 800c0a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c0a2:	4b47      	ldr	r3, [pc, #284]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c0a8:	4b45      	ldr	r3, [pc, #276]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c0ae:	4b44      	ldr	r3, [pc, #272]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0b0:	2280      	movs	r2, #128	@ 0x80
 800c0b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c0b4:	4b42      	ldr	r3, [pc, #264]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c0ba:	4b41      	ldr	r3, [pc, #260]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800c0c0:	4b3f      	ldr	r3, [pc, #252]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c0c6:	4b3e      	ldr	r3, [pc, #248]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800c0cc:	4b3c      	ldr	r3, [pc, #240]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	f008 fc2a 	bl	8014928 <HAL_DMA_Init>
 800c0d4:	1e03      	subs	r3, r0, #0
 800c0d6:	d001      	beq.n	800c0dc <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800c0d8:	f000 fd36 	bl	800cb48 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a38      	ldr	r2, [pc, #224]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c0e2:	4b37      	ldr	r3, [pc, #220]	@ (800c1c0 <HAL_I2C_MspInit+0x1a0>)
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800c0e8:	4b37      	ldr	r3, [pc, #220]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c0ea:	4a38      	ldr	r2, [pc, #224]	@ (800c1cc <HAL_I2C_MspInit+0x1ac>)
 800c0ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800c0ee:	4b36      	ldr	r3, [pc, #216]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c0f0:	2206      	movs	r2, #6
 800c0f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c0f4:	4b34      	ldr	r3, [pc, #208]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c0f6:	2210      	movs	r2, #16
 800c0f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c0fa:	4b33      	ldr	r3, [pc, #204]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c100:	4b31      	ldr	r3, [pc, #196]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c102:	2280      	movs	r2, #128	@ 0x80
 800c104:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c106:	4b30      	ldr	r3, [pc, #192]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c108:	2200      	movs	r2, #0
 800c10a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c10c:	4b2e      	ldr	r3, [pc, #184]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c10e:	2200      	movs	r2, #0
 800c110:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800c112:	4b2d      	ldr	r3, [pc, #180]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c114:	2200      	movs	r2, #0
 800c116:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c118:	4b2b      	ldr	r3, [pc, #172]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800c11e:	4b2a      	ldr	r3, [pc, #168]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c120:	0018      	movs	r0, r3
 800c122:	f008 fc01 	bl	8014928 <HAL_DMA_Init>
 800c126:	1e03      	subs	r3, r0, #0
 800c128:	d001      	beq.n	800c12e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800c12a:	f000 fd0d 	bl	800cb48 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a25      	ldr	r2, [pc, #148]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c132:	639a      	str	r2, [r3, #56]	@ 0x38
 800c134:	4b24      	ldr	r3, [pc, #144]	@ (800c1c8 <HAL_I2C_MspInit+0x1a8>)
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800c13a:	2200      	movs	r2, #0
 800c13c:	2100      	movs	r1, #0
 800c13e:	2017      	movs	r0, #23
 800c140:	f008 fbbc 	bl	80148bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800c144:	2017      	movs	r0, #23
 800c146:	f008 fbce 	bl	80148e6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800c14a:	e02e      	b.n	800c1aa <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a1f      	ldr	r2, [pc, #124]	@ (800c1d0 <HAL_I2C_MspInit+0x1b0>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d129      	bne.n	800c1aa <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c156:	4b18      	ldr	r3, [pc, #96]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c15a:	4b17      	ldr	r3, [pc, #92]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c15c:	2102      	movs	r1, #2
 800c15e:	430a      	orrs	r2, r1
 800c160:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c162:	4b15      	ldr	r3, [pc, #84]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c166:	2202      	movs	r2, #2
 800c168:	4013      	ands	r3, r2
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c16e:	2114      	movs	r1, #20
 800c170:	187b      	adds	r3, r7, r1
 800c172:	22c0      	movs	r2, #192	@ 0xc0
 800c174:	0112      	lsls	r2, r2, #4
 800c176:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c178:	187b      	adds	r3, r7, r1
 800c17a:	2212      	movs	r2, #18
 800c17c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c17e:	187b      	adds	r3, r7, r1
 800c180:	2200      	movs	r2, #0
 800c182:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c184:	187b      	adds	r3, r7, r1
 800c186:	2203      	movs	r2, #3
 800c188:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800c18a:	187b      	adds	r3, r7, r1
 800c18c:	2206      	movs	r2, #6
 800c18e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c190:	187b      	adds	r3, r7, r1
 800c192:	4a0a      	ldr	r2, [pc, #40]	@ (800c1bc <HAL_I2C_MspInit+0x19c>)
 800c194:	0019      	movs	r1, r3
 800c196:	0010      	movs	r0, r2
 800c198:	f008 ffe2 	bl	8015160 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c19c:	4b06      	ldr	r3, [pc, #24]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c19e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1a0:	4b05      	ldr	r3, [pc, #20]	@ (800c1b8 <HAL_I2C_MspInit+0x198>)
 800c1a2:	2180      	movs	r1, #128	@ 0x80
 800c1a4:	03c9      	lsls	r1, r1, #15
 800c1a6:	430a      	orrs	r2, r1
 800c1a8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c1aa:	46c0      	nop			@ (mov r8, r8)
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	b00b      	add	sp, #44	@ 0x2c
 800c1b0:	bd90      	pop	{r4, r7, pc}
 800c1b2:	46c0      	nop			@ (mov r8, r8)
 800c1b4:	40005400 	.word	0x40005400
 800c1b8:	40021000 	.word	0x40021000
 800c1bc:	50000400 	.word	0x50000400
 800c1c0:	20000d0c 	.word	0x20000d0c
 800c1c4:	40020030 	.word	0x40020030
 800c1c8:	20000d54 	.word	0x20000d54
 800c1cc:	4002001c 	.word	0x4002001c
 800c1d0:	40005800 	.word	0x40005800

0800c1d4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800c1d8:	4b10      	ldr	r3, [pc, #64]	@ (800c21c <MX_I2S2_Init+0x48>)
 800c1da:	4a11      	ldr	r2, [pc, #68]	@ (800c220 <MX_I2S2_Init+0x4c>)
 800c1dc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800c1de:	4b0f      	ldr	r3, [pc, #60]	@ (800c21c <MX_I2S2_Init+0x48>)
 800c1e0:	22c0      	movs	r2, #192	@ 0xc0
 800c1e2:	0092      	lsls	r2, r2, #2
 800c1e4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c21c <MX_I2S2_Init+0x48>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800c1ec:	4b0b      	ldr	r3, [pc, #44]	@ (800c21c <MX_I2S2_Init+0x48>)
 800c1ee:	2203      	movs	r2, #3
 800c1f0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c21c <MX_I2S2_Init+0x48>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800c1f8:	4b08      	ldr	r3, [pc, #32]	@ (800c21c <MX_I2S2_Init+0x48>)
 800c1fa:	22fa      	movs	r2, #250	@ 0xfa
 800c1fc:	0192      	lsls	r2, r2, #6
 800c1fe:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800c200:	4b06      	ldr	r3, [pc, #24]	@ (800c21c <MX_I2S2_Init+0x48>)
 800c202:	2200      	movs	r2, #0
 800c204:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800c206:	4b05      	ldr	r3, [pc, #20]	@ (800c21c <MX_I2S2_Init+0x48>)
 800c208:	0018      	movs	r0, r3
 800c20a:	f00c f8fb 	bl	8018404 <HAL_I2S_Init>
 800c20e:	1e03      	subs	r3, r0, #0
 800c210:	d001      	beq.n	800c216 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800c212:	f000 fc99 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800c216:	46c0      	nop			@ (mov r8, r8)
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	20000d9c 	.word	0x20000d9c
 800c220:	40003800 	.word	0x40003800

0800c224 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800c224:	b590      	push	{r4, r7, lr}
 800c226:	b089      	sub	sp, #36	@ 0x24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c22c:	240c      	movs	r4, #12
 800c22e:	193b      	adds	r3, r7, r4
 800c230:	0018      	movs	r0, r3
 800c232:	2314      	movs	r3, #20
 800c234:	001a      	movs	r2, r3
 800c236:	2100      	movs	r1, #0
 800c238:	f019 fdb8 	bl	8025dac <memset>
  if(i2sHandle->Instance==SPI2)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a2d      	ldr	r2, [pc, #180]	@ (800c2f8 <HAL_I2S_MspInit+0xd4>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d154      	bne.n	800c2f0 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c246:	4b2d      	ldr	r3, [pc, #180]	@ (800c2fc <HAL_I2S_MspInit+0xd8>)
 800c248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c24a:	4b2c      	ldr	r3, [pc, #176]	@ (800c2fc <HAL_I2S_MspInit+0xd8>)
 800c24c:	2180      	movs	r1, #128	@ 0x80
 800c24e:	01c9      	lsls	r1, r1, #7
 800c250:	430a      	orrs	r2, r1
 800c252:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c254:	4b29      	ldr	r3, [pc, #164]	@ (800c2fc <HAL_I2S_MspInit+0xd8>)
 800c256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c258:	4b28      	ldr	r3, [pc, #160]	@ (800c2fc <HAL_I2S_MspInit+0xd8>)
 800c25a:	2102      	movs	r1, #2
 800c25c:	430a      	orrs	r2, r1
 800c25e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c260:	4b26      	ldr	r3, [pc, #152]	@ (800c2fc <HAL_I2S_MspInit+0xd8>)
 800c262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c264:	2202      	movs	r2, #2
 800c266:	4013      	ands	r3, r2
 800c268:	60bb      	str	r3, [r7, #8]
 800c26a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c26c:	193b      	adds	r3, r7, r4
 800c26e:	22b0      	movs	r2, #176	@ 0xb0
 800c270:	0212      	lsls	r2, r2, #8
 800c272:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c274:	0021      	movs	r1, r4
 800c276:	187b      	adds	r3, r7, r1
 800c278:	2202      	movs	r2, #2
 800c27a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c27c:	187b      	adds	r3, r7, r1
 800c27e:	2200      	movs	r2, #0
 800c280:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c282:	187b      	adds	r3, r7, r1
 800c284:	2200      	movs	r2, #0
 800c286:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800c288:	187b      	adds	r3, r7, r1
 800c28a:	2200      	movs	r2, #0
 800c28c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c28e:	187b      	adds	r3, r7, r1
 800c290:	4a1b      	ldr	r2, [pc, #108]	@ (800c300 <HAL_I2S_MspInit+0xdc>)
 800c292:	0019      	movs	r1, r3
 800c294:	0010      	movs	r0, r2
 800c296:	f008 ff63 	bl	8015160 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800c29a:	4b1a      	ldr	r3, [pc, #104]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c29c:	4a1a      	ldr	r2, [pc, #104]	@ (800c308 <HAL_I2S_MspInit+0xe4>)
 800c29e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800c2a0:	4b18      	ldr	r3, [pc, #96]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c2a6:	4b17      	ldr	r3, [pc, #92]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c2ac:	4b15      	ldr	r3, [pc, #84]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c2b2:	4b14      	ldr	r3, [pc, #80]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2b4:	2280      	movs	r2, #128	@ 0x80
 800c2b6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c2b8:	4b12      	ldr	r3, [pc, #72]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2ba:	2280      	movs	r2, #128	@ 0x80
 800c2bc:	0052      	lsls	r2, r2, #1
 800c2be:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c2c0:	4b10      	ldr	r3, [pc, #64]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2c2:	2280      	movs	r2, #128	@ 0x80
 800c2c4:	00d2      	lsls	r2, r2, #3
 800c2c6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800c2c8:	4b0e      	ldr	r3, [pc, #56]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2ca:	2220      	movs	r2, #32
 800c2cc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c2d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	f008 fb26 	bl	8014928 <HAL_DMA_Init>
 800c2dc:	1e03      	subs	r3, r0, #0
 800c2de:	d001      	beq.n	800c2e4 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800c2e0:	f000 fc32 	bl	800cb48 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a07      	ldr	r2, [pc, #28]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2e8:	631a      	str	r2, [r3, #48]	@ 0x30
 800c2ea:	4b06      	ldr	r3, [pc, #24]	@ (800c304 <HAL_I2S_MspInit+0xe0>)
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c2f0:	46c0      	nop			@ (mov r8, r8)
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	b009      	add	sp, #36	@ 0x24
 800c2f6:	bd90      	pop	{r4, r7, pc}
 800c2f8:	40003800 	.word	0x40003800
 800c2fc:	40021000 	.word	0x40021000
 800c300:	50000400 	.word	0x50000400
 800c304:	20000dd8 	.word	0x20000dd8
 800c308:	40020044 	.word	0x40020044

0800c30c <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
  testDone = true;
 800c310:	4b14      	ldr	r3, [pc, #80]	@ (800c364 <SetTestDone+0x58>)
 800c312:	2201      	movs	r2, #1
 800c314:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800c316:	23fa      	movs	r3, #250	@ 0xfa
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	0018      	movs	r0, r3
 800c31c:	f007 fe34 	bl	8013f88 <HAL_Delay>
  SetDBLED(false, false, true);
 800c320:	2201      	movs	r2, #1
 800c322:	2100      	movs	r1, #0
 800c324:	2000      	movs	r0, #0
 800c326:	f005 fdcb 	bl	8011ec0 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c32a:	4a0f      	ldr	r2, [pc, #60]	@ (800c368 <SetTestDone+0x5c>)
 800c32c:	23fa      	movs	r3, #250	@ 0xfa
 800c32e:	0119      	lsls	r1, r3, #4
 800c330:	23fa      	movs	r3, #250	@ 0xfa
 800c332:	011b      	lsls	r3, r3, #4
 800c334:	0018      	movs	r0, r3
 800c336:	f005 fd8f 	bl	8011e58 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c33a:	4a0b      	ldr	r2, [pc, #44]	@ (800c368 <SetTestDone+0x5c>)
 800c33c:	23fa      	movs	r3, #250	@ 0xfa
 800c33e:	0119      	lsls	r1, r3, #4
 800c340:	23fa      	movs	r3, #250	@ 0xfa
 800c342:	011b      	lsls	r3, r3, #4
 800c344:	0018      	movs	r0, r3
 800c346:	f005 fe05 	bl	8011f54 <SetVocLED>
  HAL_Delay(500);
 800c34a:	23fa      	movs	r3, #250	@ 0xfa
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	0018      	movs	r0, r3
 800c350:	f007 fe1a 	bl	8013f88 <HAL_Delay>
  SetLEDsOff();
 800c354:	f005 ff3e 	bl	80121d4 <SetLEDsOff>
  InitDone();
 800c358:	f005 fcd2 	bl	8011d00 <InitDone>
}
 800c35c:	46c0      	nop			@ (mov r8, r8)
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	46c0      	nop			@ (mov r8, r8)
 800c364:	20000e20 	.word	0x20000e20
 800c368:	00000bb8 	.word	0x00000bb8

0800c36c <FlashLEDs>:

void FlashLEDs(){
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800c372:	1dfb      	adds	r3, r7, #7
 800c374:	2200      	movs	r2, #0
 800c376:	701a      	strb	r2, [r3, #0]
 800c378:	e021      	b.n	800c3be <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800c37a:	2201      	movs	r2, #1
 800c37c:	2101      	movs	r1, #1
 800c37e:	2001      	movs	r0, #1
 800c380:	f005 fd9e 	bl	8011ec0 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c384:	4a12      	ldr	r2, [pc, #72]	@ (800c3d0 <FlashLEDs+0x64>)
 800c386:	23fa      	movs	r3, #250	@ 0xfa
 800c388:	0119      	lsls	r1, r3, #4
 800c38a:	23fa      	movs	r3, #250	@ 0xfa
 800c38c:	011b      	lsls	r3, r3, #4
 800c38e:	0018      	movs	r0, r3
 800c390:	f005 fd62 	bl	8011e58 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c394:	4a0e      	ldr	r2, [pc, #56]	@ (800c3d0 <FlashLEDs+0x64>)
 800c396:	23fa      	movs	r3, #250	@ 0xfa
 800c398:	0119      	lsls	r1, r3, #4
 800c39a:	23fa      	movs	r3, #250	@ 0xfa
 800c39c:	011b      	lsls	r3, r3, #4
 800c39e:	0018      	movs	r0, r3
 800c3a0:	f005 fdd8 	bl	8011f54 <SetVocLED>
    HAL_Delay(250);
 800c3a4:	20fa      	movs	r0, #250	@ 0xfa
 800c3a6:	f007 fdef 	bl	8013f88 <HAL_Delay>
    SetLEDsOff();
 800c3aa:	f005 ff13 	bl	80121d4 <SetLEDsOff>
    HAL_Delay(250);
 800c3ae:	20fa      	movs	r0, #250	@ 0xfa
 800c3b0:	f007 fdea 	bl	8013f88 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800c3b4:	1dfb      	adds	r3, r7, #7
 800c3b6:	781a      	ldrb	r2, [r3, #0]
 800c3b8:	1dfb      	adds	r3, r7, #7
 800c3ba:	3201      	adds	r2, #1
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	1dfb      	adds	r3, r7, #7
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b04      	cmp	r3, #4
 800c3c4:	d9d9      	bls.n	800c37a <FlashLEDs+0xe>
  }
}
 800c3c6:	46c0      	nop			@ (mov r8, r8)
 800c3c8:	46c0      	nop			@ (mov r8, r8)
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	b002      	add	sp, #8
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	00000bb8 	.word	0x00000bb8

0800c3d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c3da:	f007 fd65 	bl	8013ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c3de:	f000 fa43 	bl	800c868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c3e2:	f7ff fc01 	bl	800bbe8 <MX_GPIO_Init>
  MX_DMA_Init();
 800c3e6:	f7ff fa29 	bl	800b83c <MX_DMA_Init>
  MX_I2C1_Init();
 800c3ea:	f7ff fd99 	bl	800bf20 <MX_I2C1_Init>
  MX_I2S2_Init();
 800c3ee:	f7ff fef1 	bl	800c1d4 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800c3f2:	f006 fe4f 	bl	8013094 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800c3f6:	f7ff fdd3 	bl	800bfa0 <MX_I2C2_Init>
  MX_TIM2_Init();
 800c3fa:	f006 fc43 	bl	8012c84 <MX_TIM2_Init>
  MX_TIM3_Init();
 800c3fe:	f006 fcb5 	bl	8012d6c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800c402:	f006 fe77 	bl	80130f4 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800c406:	f7fd fe75 	bl	800a0f4 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800c40a:	f016 f845 	bl	8022498 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800c40e:	f001 fbbb 	bl	800db88 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800c412:	f006 fe09 	bl	8013028 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800c416:	f006 fd27 	bl	8012e68 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
#ifdef USBLOGGING
  vcp_init();
 800c41a:	f016 f9a3 	bl	8022764 <vcp_init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800c41e:	4ad1      	ldr	r2, [pc, #836]	@ (800c764 <main+0x390>)
 800c420:	4bd1      	ldr	r3, [pc, #836]	@ (800c768 <main+0x394>)
 800c422:	0011      	movs	r1, r2
 800c424:	0018      	movs	r0, r3
 800c426:	f7ff fd0f 	bl	800be48 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800c42a:	f007 f8e7 	bl	80135fc <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800c42e:	f006 faaf 	bl	8012990 <Battery_Upkeep>
 800c432:	0003      	movs	r3, r0
 800c434:	001a      	movs	r2, r3
 800c436:	4bcd      	ldr	r3, [pc, #820]	@ (800c76c <main+0x398>)
 800c438:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800c43a:	4bcc      	ldr	r3, [pc, #816]	@ (800c76c <main+0x398>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d113      	bne.n	800c46a <main+0x96>
    SetAllREDLED();
 800c442:	f005 fee3 	bl	801220c <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800c446:	f7fc fe5f 	bl	8009108 <ReadBatteryVoltage>
 800c44a:	1c03      	adds	r3, r0, #0
 800c44c:	1c18      	adds	r0, r3, #0
 800c44e:	f7f7 fa21 	bl	8003894 <__aeabi_f2d>
 800c452:	0002      	movs	r2, r0
 800c454:	000b      	movs	r3, r1
 800c456:	48c6      	ldr	r0, [pc, #792]	@ (800c770 <main+0x39c>)
 800c458:	49c6      	ldr	r1, [pc, #792]	@ (800c774 <main+0x3a0>)
 800c45a:	9200      	str	r2, [sp, #0]
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	0002      	movs	r2, r0
 800c460:	2002      	movs	r0, #2
 800c462:	f007 f805 	bl	8013470 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800c466:	f7fd fb6f 	bl	8009b48 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800c46a:	f7fc ff81 	bl	8009370 <UserButton_Pressed>
 800c46e:	1e03      	subs	r3, r0, #0
 800c470:	d004      	beq.n	800c47c <main+0xa8>
    EnableESPProg();
 800c472:	f016 f92b 	bl	80226cc <EnableESPProg>
    ESP_Programming = true;
 800c476:	4bc0      	ldr	r3, [pc, #768]	@ (800c778 <main+0x3a4>)
 800c478:	2201      	movs	r2, #1
 800c47a:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800c47c:	2003      	movs	r0, #3
 800c47e:	f007 f8a3 	bl	80135c8 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c482:	49be      	ldr	r1, [pc, #760]	@ (800c77c <main+0x3a8>)
 800c484:	4bbe      	ldr	r3, [pc, #760]	@ (800c780 <main+0x3ac>)
 800c486:	2201      	movs	r2, #1
 800c488:	0018      	movs	r0, r3
 800c48a:	f010 fb69 	bl	801cb60 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800c48e:	4bbd      	ldr	r3, [pc, #756]	@ (800c784 <main+0x3b0>)
 800c490:	0018      	movs	r0, r3
 800c492:	f7fd fc35 	bl	8009d00 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800c496:	4abc      	ldr	r2, [pc, #752]	@ (800c788 <main+0x3b4>)
 800c498:	49bc      	ldr	r1, [pc, #752]	@ (800c78c <main+0x3b8>)
 800c49a:	48bd      	ldr	r0, [pc, #756]	@ (800c790 <main+0x3bc>)
 800c49c:	230b      	movs	r3, #11
 800c49e:	f004 fda5 	bl	8010fec <soundInit>
 800c4a2:	0003      	movs	r3, r0
 800c4a4:	001a      	movs	r2, r3
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	4053      	eors	r3, r2
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d005      	beq.n	800c4bc <main+0xe8>
    errorHandler(__func__, __LINE__, __FILE__);
 800c4b0:	4ab8      	ldr	r2, [pc, #736]	@ (800c794 <main+0x3c0>)
 800c4b2:	4bb9      	ldr	r3, [pc, #740]	@ (800c798 <main+0x3c4>)
 800c4b4:	21f9      	movs	r1, #249	@ 0xf9
 800c4b6:	0018      	movs	r0, r3
 800c4b8:	f007 f8d4 	bl	8013664 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800c4bc:	4bb7      	ldr	r3, [pc, #732]	@ (800c79c <main+0x3c8>)
 800c4be:	4ab8      	ldr	r2, [pc, #736]	@ (800c7a0 <main+0x3cc>)
 800c4c0:	49b2      	ldr	r1, [pc, #712]	@ (800c78c <main+0x3b8>)
 800c4c2:	48b8      	ldr	r0, [pc, #736]	@ (800c7a4 <main+0x3d0>)
 800c4c4:	f000 fc32 	bl	800cd2c <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800c4c8:	f007 fd54 	bl	8013f74 <HAL_GetTick>
 800c4cc:	0003      	movs	r3, r0
 800c4ce:	4ab6      	ldr	r2, [pc, #728]	@ (800c7a8 <main+0x3d4>)
 800c4d0:	189a      	adds	r2, r3, r2
 800c4d2:	4bb6      	ldr	r3, [pc, #728]	@ (800c7ac <main+0x3d8>)
 800c4d4:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800c4d6:	f7fc fecd 	bl	8009274 <Check_USB_PowerOn>
 800c4da:	0003      	movs	r3, r0
 800c4dc:	1e5a      	subs	r2, r3, #1
 800c4de:	4193      	sbcs	r3, r2
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	4053      	eors	r3, r2
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	1c1a      	adds	r2, r3, #0
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	4baf      	ldr	r3, [pc, #700]	@ (800c7b0 <main+0x3dc>)
 800c4f2:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800c4f4:	f7fc febe 	bl	8009274 <Check_USB_PowerOn>
 800c4f8:	1e03      	subs	r3, r0, #0
 800c4fa:	d003      	beq.n	800c504 <main+0x130>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800c4fc:	4bad      	ldr	r3, [pc, #692]	@ (800c7b4 <main+0x3e0>)
 800c4fe:	0018      	movs	r0, r3
 800c500:	f7fc f80c 	bl	800851c <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800c504:	4bac      	ldr	r3, [pc, #688]	@ (800c7b8 <main+0x3e4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	0018      	movs	r0, r3
 800c50a:	f006 ff5b 	bl	80133c4 <TimestampIsReached>
 800c50e:	1e03      	subs	r3, r0, #0
 800c510:	d00e      	beq.n	800c530 <main+0x15c>
      charge = Battery_Upkeep();
 800c512:	f006 fa3d 	bl	8012990 <Battery_Upkeep>
 800c516:	0003      	movs	r3, r0
 800c518:	001a      	movs	r2, r3
 800c51a:	4b94      	ldr	r3, [pc, #592]	@ (800c76c <main+0x398>)
 800c51c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800c51e:	f007 fd29 	bl	8013f74 <HAL_GetTick>
 800c522:	0003      	movs	r3, r0
 800c524:	4aa5      	ldr	r2, [pc, #660]	@ (800c7bc <main+0x3e8>)
 800c526:	189a      	adds	r2, r3, r2
 800c528:	4ba3      	ldr	r3, [pc, #652]	@ (800c7b8 <main+0x3e4>)
 800c52a:	601a      	str	r2, [r3, #0]
      showTime();
 800c52c:	f7fc ff30 	bl	8009390 <showTime>

    }
    configCheck();
 800c530:	f006 f88a 	bl	8012648 <configCheck>
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800c534:	4ba2      	ldr	r3, [pc, #648]	@ (800c7c0 <main+0x3ec>)
 800c536:	2200      	movs	r2, #0
 800c538:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800c53a:	4b8c      	ldr	r3, [pc, #560]	@ (800c76c <main+0x398>)
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d003      	beq.n	800c54a <main+0x176>
 800c542:	4b8a      	ldr	r3, [pc, #552]	@ (800c76c <main+0x398>)
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d104      	bne.n	800c554 <main+0x180>
      FlashLEDs();
 800c54a:	f7ff ff0f 	bl	800c36c <FlashLEDs>
      Sensor.PM_measurementEnabled = false;
 800c54e:	4b9d      	ldr	r3, [pc, #628]	@ (800c7c4 <main+0x3f0>)
 800c550:	2200      	movs	r2, #0
 800c552:	709a      	strb	r2, [r3, #2]
    }
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800c554:	4b85      	ldr	r3, [pc, #532]	@ (800c76c <main+0x398>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d109      	bne.n	800c570 <main+0x19c>
 800c55c:	4b9a      	ldr	r3, [pc, #616]	@ (800c7c8 <main+0x3f4>)
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b09      	cmp	r3, #9
 800c562:	d105      	bne.n	800c570 <main+0x19c>
       batteryEmpty = true;
 800c564:	4b99      	ldr	r3, [pc, #612]	@ (800c7cc <main+0x3f8>)
 800c566:	2201      	movs	r2, #1
 800c568:	701a      	strb	r2, [r3, #0]
       Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800c56a:	f7fd faed 	bl	8009b48 <Enter_Standby_Mode>
 800c56e:	e002      	b.n	800c576 <main+0x1a2>
    }
    else{
      batteryEmpty = false;
 800c570:	4b96      	ldr	r3, [pc, #600]	@ (800c7cc <main+0x3f8>)
 800c572:	2200      	movs	r2, #0
 800c574:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800c576:	4b96      	ldr	r3, [pc, #600]	@ (800c7d0 <main+0x3fc>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d100      	bne.n	800c580 <main+0x1ac>
 800c57e:	e0a2      	b.n	800c6c6 <main+0x2f2>
 800c580:	4b7d      	ldr	r3, [pc, #500]	@ (800c778 <main+0x3a4>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2201      	movs	r2, #1
 800c586:	4053      	eors	r3, r2
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d100      	bne.n	800c590 <main+0x1bc>
 800c58e:	e09a      	b.n	800c6c6 <main+0x2f2>
 800c590:	4b8e      	ldr	r3, [pc, #568]	@ (800c7cc <main+0x3f8>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2201      	movs	r2, #1
 800c596:	4053      	eors	r3, r2
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d100      	bne.n	800c5a0 <main+0x1cc>
 800c59e:	e092      	b.n	800c6c6 <main+0x2f2>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800c5a0:	4b83      	ldr	r3, [pc, #524]	@ (800c7b0 <main+0x3dc>)
 800c5a2:	781a      	ldrb	r2, [r3, #0]
 800c5a4:	4b8b      	ldr	r3, [pc, #556]	@ (800c7d4 <main+0x400>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d03a      	beq.n	800c622 <main+0x24e>
        if (IsSGPPresent() && !usbPluggedIn) {
 800c5ac:	f000 fb50 	bl	800cc50 <IsSGPPresent>
 800c5b0:	1e03      	subs	r3, r0, #0
 800c5b2:	d009      	beq.n	800c5c8 <main+0x1f4>
 800c5b4:	4b87      	ldr	r3, [pc, #540]	@ (800c7d4 <main+0x400>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	4053      	eors	r3, r2
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d002      	beq.n	800c5c8 <main+0x1f4>
          SetVOCSensorDIS_ENA(true);
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	f000 fb4e 	bl	800cc64 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800c5c8:	4b83      	ldr	r3, [pc, #524]	@ (800c7d8 <main+0x404>)
 800c5ca:	791b      	ldrb	r3, [r3, #4]
 800c5cc:	2b34      	cmp	r3, #52	@ 0x34
 800c5ce:	d003      	beq.n	800c5d8 <main+0x204>
 800c5d0:	4b81      	ldr	r3, [pc, #516]	@ (800c7d8 <main+0x404>)
 800c5d2:	791b      	ldrb	r3, [r3, #4]
 800c5d4:	2b35      	cmp	r3, #53	@ 0x35
 800c5d6:	d106      	bne.n	800c5e6 <main+0x212>
 800c5d8:	4b7e      	ldr	r3, [pc, #504]	@ (800c7d4 <main+0x400>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <main+0x212>
          SetVOCSensorDIS_ENA(false);
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	f000 fb3f 	bl	800cc64 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800c5e6:	4b7b      	ldr	r3, [pc, #492]	@ (800c7d4 <main+0x400>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	4053      	eors	r3, r2
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d012      	beq.n	800c61a <main+0x246>
 800c5f4:	f007 fcbe 	bl	8013f74 <HAL_GetTick>
 800c5f8:	0003      	movs	r3, r0
 800c5fa:	4a6b      	ldr	r2, [pc, #428]	@ (800c7a8 <main+0x3d4>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d90c      	bls.n	800c61a <main+0x246>
          Debug("Device time out set in main due to powerstatus shift");
 800c600:	4a76      	ldr	r2, [pc, #472]	@ (800c7dc <main+0x408>)
 800c602:	4b77      	ldr	r3, [pc, #476]	@ (800c7e0 <main+0x40c>)
 800c604:	0019      	movs	r1, r3
 800c606:	2003      	movs	r0, #3
 800c608:	f006 ff32 	bl	8013470 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800c60c:	f007 fcb2 	bl	8013f74 <HAL_GetTick>
 800c610:	0003      	movs	r3, r0
 800c612:	4a74      	ldr	r2, [pc, #464]	@ (800c7e4 <main+0x410>)
 800c614:	189a      	adds	r2, r3, r2
 800c616:	4b65      	ldr	r3, [pc, #404]	@ (800c7ac <main+0x3d8>)
 800c618:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800c61a:	4b6e      	ldr	r3, [pc, #440]	@ (800c7d4 <main+0x400>)
 800c61c:	781a      	ldrb	r2, [r3, #0]
 800c61e:	4b64      	ldr	r3, [pc, #400]	@ (800c7b0 <main+0x3dc>)
 800c620:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800c622:	f000 ff93 	bl	800d54c <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800c626:	4b67      	ldr	r3, [pc, #412]	@ (800c7c4 <main+0x3f0>)
 800c628:	78db      	ldrb	r3, [r3, #3]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d005      	beq.n	800c63a <main+0x266>
        MICstate = Mic_Upkeep();
 800c62e:	f001 f997 	bl	800d960 <Mic_Upkeep>
 800c632:	0003      	movs	r3, r0
 800c634:	001a      	movs	r2, r3
 800c636:	4b6c      	ldr	r3, [pc, #432]	@ (800c7e8 <main+0x414>)
 800c638:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800c63a:	4b4c      	ldr	r3, [pc, #304]	@ (800c76c <main+0x398>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d803      	bhi.n	800c64a <main+0x276>
 800c642:	4b5f      	ldr	r3, [pc, #380]	@ (800c7c0 <main+0x3ec>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d016      	beq.n	800c678 <main+0x2a4>
 800c64a:	4b5e      	ldr	r3, [pc, #376]	@ (800c7c4 <main+0x3f0>)
 800c64c:	789b      	ldrb	r3, [r3, #2]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d012      	beq.n	800c678 <main+0x2a4>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800c652:	f001 fb27 	bl	800dca4 <sen5x_Get_sen5x_enable_state>
 800c656:	0003      	movs	r3, r0
 800c658:	001a      	movs	r2, r3
 800c65a:	2301      	movs	r3, #1
 800c65c:	4053      	eors	r3, r2
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b00      	cmp	r3, #0
 800c662:	d006      	beq.n	800c672 <main+0x29e>
 800c664:	4b5b      	ldr	r3, [pc, #364]	@ (800c7d4 <main+0x400>)
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <main+0x29e>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800c66c:	2000      	movs	r0, #0
 800c66e:	f001 fb55 	bl	800dd1c <sen5x_enable>
        }
        sen5x_statemachine();
 800c672:	f002 f8d1 	bl	800e818 <sen5x_statemachine>
 800c676:	e020      	b.n	800c6ba <main+0x2e6>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800c678:	4b3c      	ldr	r3, [pc, #240]	@ (800c76c <main+0x398>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d81c      	bhi.n	800c6ba <main+0x2e6>
 800c680:	4b4f      	ldr	r3, [pc, #316]	@ (800c7c0 <main+0x3ec>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2201      	movs	r2, #1
 800c686:	4053      	eors	r3, r2
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d015      	beq.n	800c6ba <main+0x2e6>
 800c68e:	4b4d      	ldr	r3, [pc, #308]	@ (800c7c4 <main+0x3f0>)
 800c690:	789b      	ldrb	r3, [r3, #2]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d011      	beq.n	800c6ba <main+0x2e6>
        Info("Battery level insufficient for sen5x operation");
 800c696:	4a55      	ldr	r2, [pc, #340]	@ (800c7ec <main+0x418>)
 800c698:	4b36      	ldr	r3, [pc, #216]	@ (800c774 <main+0x3a0>)
 800c69a:	0019      	movs	r1, r3
 800c69c:	2002      	movs	r0, #2
 800c69e:	f006 fee7 	bl	8013470 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800c6a2:	4b48      	ldr	r3, [pc, #288]	@ (800c7c4 <main+0x3f0>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800c6a8:	4b51      	ldr	r3, [pc, #324]	@ (800c7f0 <main+0x41c>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800c6ae:	4b51      	ldr	r3, [pc, #324]	@ (800c7f4 <main+0x420>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <main+0x2e6>
          sen5x_Power_Off();
 800c6b6:	f001 fbbd 	bl	800de34 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800c6ba:	f7fa fe73 	bl	80073a4 <ESP_Upkeep>
 800c6be:	0003      	movs	r3, r0
 800c6c0:	001a      	movs	r2, r3
 800c6c2:	4b41      	ldr	r3, [pc, #260]	@ (800c7c8 <main+0x3f4>)
 800c6c4:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800c6c6:	4b42      	ldr	r3, [pc, #264]	@ (800c7d0 <main+0x3fc>)
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	4053      	eors	r3, r2
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00f      	beq.n	800c6f4 <main+0x320>
 800c6d4:	4b28      	ldr	r3, [pc, #160]	@ (800c778 <main+0x3a4>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	4053      	eors	r3, r2
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d008      	beq.n	800c6f4 <main+0x320>
 800c6e2:	4b3a      	ldr	r3, [pc, #232]	@ (800c7cc <main+0x3f8>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	4053      	eors	r3, r2
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <main+0x320>
      Device_Test();  // for device with startup time
 800c6f0:	f000 fcf4 	bl	800d0dc <Device_Test>
    }
    if (!usbPluggedIn) {
 800c6f4:	4b37      	ldr	r3, [pc, #220]	@ (800c7d4 <main+0x400>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	4053      	eors	r3, r2
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d100      	bne.n	800c704 <main+0x330>
 800c702:	e086      	b.n	800c812 <main+0x43e>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800c704:	4b3c      	ldr	r3, [pc, #240]	@ (800c7f8 <main+0x424>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2201      	movs	r2, #1
 800c70a:	4053      	eors	r3, r2
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d100      	bne.n	800c714 <main+0x340>
 800c712:	e07e      	b.n	800c812 <main+0x43e>
 800c714:	f000 fd60 	bl	800d1d8 <AllDevicesReady>
 800c718:	1e03      	subs	r3, r0, #0
 800c71a:	d100      	bne.n	800c71e <main+0x34a>
 800c71c:	e079      	b.n	800c812 <main+0x43e>
 800c71e:	4b37      	ldr	r3, [pc, #220]	@ (800c7fc <main+0x428>)
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d100      	bne.n	800c728 <main+0x354>
 800c726:	e074      	b.n	800c812 <main+0x43e>
        EnabledConnectedDevices();
 800c728:	f000 fe6c 	bl	800d404 <EnabledConnectedDevices>
        if (ReadSolarVoltage() > 4900) {  // if battery is fully charged and sun is shining wake-up about every 5 minutes
 800c72c:	f7fc fd4e 	bl	80091cc <ReadSolarVoltage>
 800c730:	0003      	movs	r3, r0
 800c732:	001a      	movs	r2, r3
 800c734:	4b32      	ldr	r3, [pc, #200]	@ (800c800 <main+0x42c>)
 800c736:	429a      	cmp	r2, r3
 800c738:	d90c      	bls.n	800c754 <main+0x380>
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM_SUN:WAIT_WITHOUT_PM_SUN);
 800c73a:	4b32      	ldr	r3, [pc, #200]	@ (800c804 <main+0x430>)
 800c73c:	795b      	ldrb	r3, [r3, #5]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <main+0x374>
 800c742:	2382      	movs	r3, #130	@ 0x82
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	e001      	b.n	800c74c <main+0x378>
 800c748:	238c      	movs	r3, #140	@ 0x8c
 800c74a:	005b      	lsls	r3, r3, #1
 800c74c:	0018      	movs	r0, r3
 800c74e:	f7fd fa1b 	bl	8009b88 <Enter_Stop_Mode>
 800c752:	e05e      	b.n	800c812 <main+0x43e>
        }
        else {
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800c754:	4b2b      	ldr	r3, [pc, #172]	@ (800c804 <main+0x430>)
 800c756:	795b      	ldrb	r3, [r3, #5]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d055      	beq.n	800c808 <main+0x434>
 800c75c:	23d7      	movs	r3, #215	@ 0xd7
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	e054      	b.n	800c80c <main+0x438>
 800c762:	46c0      	nop			@ (mov r8, r8)
 800c764:	20001ed0 	.word	0x20001ed0
 800c768:	20001e90 	.word	0x20001e90
 800c76c:	20000e3c 	.word	0x20000e3c
 800c770:	0802c738 	.word	0x0802c738
 800c774:	0802c75c 	.word	0x0802c75c
 800c778:	20000e21 	.word	0x20000e21
 800c77c:	20000e28 	.word	0x20000e28
 800c780:	20002008 	.word	0x20002008
 800c784:	20000ebc 	.word	0x20000ebc
 800c788:	20001f10 	.word	0x20001f10
 800c78c:	20000d9c 	.word	0x20000d9c
 800c790:	20000dd8 	.word	0x20000dd8
 800c794:	0802c760 	.word	0x0802c760
 800c798:	0802e1ac 	.word	0x0802e1ac
 800c79c:	200020c0 	.word	0x200020c0
 800c7a0:	20000b8c 	.word	0x20000b8c
 800c7a4:	20000c64 	.word	0x20000c64
 800c7a8:	000061a8 	.word	0x000061a8
 800c7ac:	20000e38 	.word	0x20000e38
 800c7b0:	20000e23 	.word	0x20000e23
 800c7b4:	0802c774 	.word	0x0802c774
 800c7b8:	2000009c 	.word	0x2000009c
 800c7bc:	0000c350 	.word	0x0000c350
 800c7c0:	2000009b 	.word	0x2000009b
 800c7c4:	20000e40 	.word	0x20000e40
 800c7c8:	20000e25 	.word	0x20000e25
 800c7cc:	20000e22 	.word	0x20000e22
 800c7d0:	20000e20 	.word	0x20000e20
 800c7d4:	20001e71 	.word	0x20001e71
 800c7d8:	20000ee4 	.word	0x20000ee4
 800c7dc:	0802c7a8 	.word	0x0802c7a8
 800c7e0:	0802c7e0 	.word	0x0802c7e0
 800c7e4:	00001194 	.word	0x00001194
 800c7e8:	20000e24 	.word	0x20000e24
 800c7ec:	0802c7e4 	.word	0x0802c7e4
 800c7f0:	20000ee2 	.word	0x20000ee2
 800c7f4:	20000ee1 	.word	0x20000ee1
 800c7f8:	20001e72 	.word	0x20001e72
 800c7fc:	200005ac 	.word	0x200005ac
 800c800:	00001324 	.word	0x00001324
 800c804:	20000e48 	.word	0x20000e48
 800c808:	23dc      	movs	r3, #220	@ 0xdc
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	0018      	movs	r0, r3
 800c80e:	f7fd f9bb 	bl	8009b88 <Enter_Stop_Mode>
        }
      }
    }
#ifdef USBLOGGING

    int len = vcp_recv (u1_rx_buff, 3);
 800c812:	4b13      	ldr	r3, [pc, #76]	@ (800c860 <main+0x48c>)
 800c814:	2103      	movs	r1, #3
 800c816:	0018      	movs	r0, r3
 800c818:	f016 f820 	bl	802285c <vcp_recv>
 800c81c:	0003      	movs	r3, r0
 800c81e:	607b      	str	r3, [r7, #4]
    if (len > 0) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	dd01      	ble.n	800c82a <main+0x456>
      check_cli_command();
 800c826:	f000 f8a9 	bl	800c97c <check_cli_command>
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800c82a:	4b0d      	ldr	r3, [pc, #52]	@ (800c860 <main+0x48c>)
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d001      	beq.n	800c836 <main+0x462>
      check_cli_command();
 800c832:	f000 f8a3 	bl	800c97c <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800c836:	f7fc fd1d 	bl	8009274 <Check_USB_PowerOn>
 800c83a:	1e03      	subs	r3, r0, #0
 800c83c:	d100      	bne.n	800c840 <main+0x46c>
 800c83e:	e661      	b.n	800c504 <main+0x130>
 800c840:	4b08      	ldr	r3, [pc, #32]	@ (800c864 <main+0x490>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	2201      	movs	r2, #1
 800c846:	4053      	eors	r3, r2
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d100      	bne.n	800c850 <main+0x47c>
 800c84e:	e659      	b.n	800c504 <main+0x130>
      Process_USB_input(GetUsbRxPointer());
 800c850:	f015 ff46 	bl	80226e0 <GetUsbRxPointer>
 800c854:	0003      	movs	r3, r0
 800c856:	0018      	movs	r0, r3
 800c858:	f7fc fa62 	bl	8008d20 <Process_USB_input>
  while (1) {
 800c85c:	e652      	b.n	800c504 <main+0x130>
 800c85e:	46c0      	nop			@ (mov r8, r8)
 800c860:	20000e28 	.word	0x20000e28
 800c864:	200005a7 	.word	0x200005a7

0800c868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c868:	b590      	push	{r4, r7, lr}
 800c86a:	b09d      	sub	sp, #116	@ 0x74
 800c86c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c86e:	2438      	movs	r4, #56	@ 0x38
 800c870:	193b      	adds	r3, r7, r4
 800c872:	0018      	movs	r0, r3
 800c874:	2338      	movs	r3, #56	@ 0x38
 800c876:	001a      	movs	r2, r3
 800c878:	2100      	movs	r1, #0
 800c87a:	f019 fa97 	bl	8025dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c87e:	2324      	movs	r3, #36	@ 0x24
 800c880:	18fb      	adds	r3, r7, r3
 800c882:	0018      	movs	r0, r3
 800c884:	2314      	movs	r3, #20
 800c886:	001a      	movs	r2, r3
 800c888:	2100      	movs	r1, #0
 800c88a:	f019 fa8f 	bl	8025dac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c88e:	003b      	movs	r3, r7
 800c890:	0018      	movs	r0, r3
 800c892:	2324      	movs	r3, #36	@ 0x24
 800c894:	001a      	movs	r2, r3
 800c896:	2100      	movs	r1, #0
 800c898:	f019 fa88 	bl	8025dac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c89c:	4b34      	ldr	r3, [pc, #208]	@ (800c970 <SystemClock_Config+0x108>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a34      	ldr	r2, [pc, #208]	@ (800c974 <SystemClock_Config+0x10c>)
 800c8a2:	401a      	ands	r2, r3
 800c8a4:	4b32      	ldr	r3, [pc, #200]	@ (800c970 <SystemClock_Config+0x108>)
 800c8a6:	2180      	movs	r1, #128	@ 0x80
 800c8a8:	0109      	lsls	r1, r1, #4
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c8ae:	f00d ff0d 	bl	801a6cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800c8b2:	4b31      	ldr	r3, [pc, #196]	@ (800c978 <SystemClock_Config+0x110>)
 800c8b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8b6:	4a2f      	ldr	r2, [pc, #188]	@ (800c974 <SystemClock_Config+0x10c>)
 800c8b8:	401a      	ands	r2, r3
 800c8ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c978 <SystemClock_Config+0x110>)
 800c8bc:	2180      	movs	r1, #128	@ 0x80
 800c8be:	0149      	lsls	r1, r1, #5
 800c8c0:	430a      	orrs	r2, r1
 800c8c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800c8c4:	193b      	adds	r3, r7, r4
 800c8c6:	2226      	movs	r2, #38	@ 0x26
 800c8c8:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c8ca:	193b      	adds	r3, r7, r4
 800c8cc:	2280      	movs	r2, #128	@ 0x80
 800c8ce:	0052      	lsls	r2, r2, #1
 800c8d0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c8d2:	0021      	movs	r1, r4
 800c8d4:	187b      	adds	r3, r7, r1
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c8da:	187b      	adds	r3, r7, r1
 800c8dc:	2210      	movs	r2, #16
 800c8de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c8e0:	187b      	adds	r3, r7, r1
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c8e6:	187b      	adds	r3, r7, r1
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c8ec:	187b      	adds	r3, r7, r1
 800c8ee:	0018      	movs	r0, r3
 800c8f0:	f00d ff7c 	bl	801a7ec <HAL_RCC_OscConfig>
 800c8f4:	1e03      	subs	r3, r0, #0
 800c8f6:	d001      	beq.n	800c8fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c8f8:	f000 f926 	bl	800cb48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c8fc:	2124      	movs	r1, #36	@ 0x24
 800c8fe:	187b      	adds	r3, r7, r1
 800c900:	220f      	movs	r2, #15
 800c902:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c904:	187b      	adds	r3, r7, r1
 800c906:	2201      	movs	r2, #1
 800c908:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c90a:	187b      	adds	r3, r7, r1
 800c90c:	2200      	movs	r2, #0
 800c90e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c910:	187b      	adds	r3, r7, r1
 800c912:	2200      	movs	r2, #0
 800c914:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c916:	187b      	adds	r3, r7, r1
 800c918:	2200      	movs	r2, #0
 800c91a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c91c:	187b      	adds	r3, r7, r1
 800c91e:	2100      	movs	r1, #0
 800c920:	0018      	movs	r0, r3
 800c922:	f00e fb37 	bl	801af94 <HAL_RCC_ClockConfig>
 800c926:	1e03      	subs	r3, r0, #0
 800c928:	d001      	beq.n	800c92e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800c92a:	f000 f90d 	bl	800cb48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800c92e:	003b      	movs	r3, r7
 800c930:	226d      	movs	r2, #109	@ 0x6d
 800c932:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c934:	003b      	movs	r3, r7
 800c936:	2200      	movs	r2, #0
 800c938:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c93a:	003b      	movs	r3, r7
 800c93c:	2200      	movs	r2, #0
 800c93e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c940:	003b      	movs	r3, r7
 800c942:	2200      	movs	r2, #0
 800c944:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c946:	003b      	movs	r3, r7
 800c948:	2280      	movs	r2, #128	@ 0x80
 800c94a:	0252      	lsls	r2, r2, #9
 800c94c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c94e:	003b      	movs	r3, r7
 800c950:	2280      	movs	r2, #128	@ 0x80
 800c952:	04d2      	lsls	r2, r2, #19
 800c954:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c956:	003b      	movs	r3, r7
 800c958:	0018      	movs	r0, r3
 800c95a:	f00e fd3f 	bl	801b3dc <HAL_RCCEx_PeriphCLKConfig>
 800c95e:	1e03      	subs	r3, r0, #0
 800c960:	d001      	beq.n	800c966 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800c962:	f000 f8f1 	bl	800cb48 <Error_Handler>
  }
}
 800c966:	46c0      	nop			@ (mov r8, r8)
 800c968:	46bd      	mov	sp, r7
 800c96a:	b01d      	add	sp, #116	@ 0x74
 800c96c:	bd90      	pop	{r4, r7, pc}
 800c96e:	46c0      	nop			@ (mov r8, r8)
 800c970:	40007000 	.word	0x40007000
 800c974:	ffffe7ff 	.word	0xffffe7ff
 800c978:	40021000 	.word	0x40021000

0800c97c <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800c980:	4b41      	ldr	r3, [pc, #260]	@ (800ca88 <check_cli_command+0x10c>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	3b61      	subs	r3, #97	@ 0x61
 800c986:	2b15      	cmp	r3, #21
 800c988:	d845      	bhi.n	800ca16 <check_cli_command+0x9a>
 800c98a:	009a      	lsls	r2, r3, #2
 800c98c:	4b3f      	ldr	r3, [pc, #252]	@ (800ca8c <check_cli_command+0x110>)
 800c98e:	18d3      	adds	r3, r2, r3
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800c994:	4b3e      	ldr	r3, [pc, #248]	@ (800ca90 <check_cli_command+0x114>)
 800c996:	0018      	movs	r0, r3
 800c998:	f019 f894 	bl	8025ac4 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800c99c:	2003      	movs	r0, #3
 800c99e:	f006 fe13 	bl	80135c8 <SetVerboseLevel>
      break;
 800c9a2:	e06b      	b.n	800ca7c <check_cli_command+0x100>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800c9a4:	f7fb fdfa 	bl	800859c <PC_show_Keys>
    break;
 800c9a8:	e068      	b.n	800ca7c <check_cli_command+0x100>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800c9aa:	f7f7 ffad 	bl	8004908 <forceNTPupdate>
    break;
 800c9ae:	e065      	b.n	800ca7c <check_cli_command+0x100>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800c9b0:	4b38      	ldr	r3, [pc, #224]	@ (800ca94 <check_cli_command+0x118>)
 800c9b2:	0018      	movs	r0, r3
 800c9b4:	f019 f886 	bl	8025ac4 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800c9b8:	2002      	movs	r0, #2
 800c9ba:	f006 fe05 	bl	80135c8 <SetVerboseLevel>
      break;
 800c9be:	e05d      	b.n	800ca7c <check_cli_command+0x100>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800c9c0:	4b35      	ldr	r3, [pc, #212]	@ (800ca98 <check_cli_command+0x11c>)
 800c9c2:	0018      	movs	r0, r3
 800c9c4:	f019 f87e 	bl	8025ac4 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800c9c8:	2001      	movs	r0, #1
 800c9ca:	f006 fdfd 	bl	80135c8 <SetVerboseLevel>
      break;
 800c9ce:	e055      	b.n	800ca7c <check_cli_command+0x100>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800c9d0:	4b32      	ldr	r3, [pc, #200]	@ (800ca9c <check_cli_command+0x120>)
 800c9d2:	0018      	movs	r0, r3
 800c9d4:	f019 f876 	bl	8025ac4 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800c9d8:	2000      	movs	r0, #0
 800c9da:	f006 fdf5 	bl	80135c8 <SetVerboseLevel>
      break;
 800c9de:	e04d      	b.n	800ca7c <check_cli_command+0x100>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800c9e0:	f007 fac8 	bl	8013f74 <HAL_GetTick>
 800c9e4:	0002      	movs	r2, r0
 800c9e6:	4b2e      	ldr	r3, [pc, #184]	@ (800caa0 <check_cli_command+0x124>)
 800c9e8:	601a      	str	r2, [r3, #0]
      break;
 800c9ea:	e047      	b.n	800ca7c <check_cli_command+0x100>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800c9ec:	f7fc fcd0 	bl	8009390 <showTime>
      break;
 800c9f0:	e044      	b.n	800ca7c <check_cli_command+0x100>
#ifdef USBLOGGING
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800c9f2:	4b2c      	ldr	r3, [pc, #176]	@ (800caa4 <check_cli_command+0x128>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	1e5a      	subs	r2, r3, #1
 800c9f8:	4193      	sbcs	r3, r2
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	4053      	eors	r3, r2
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	1c1a      	adds	r2, r3, #0
 800ca04:	2301      	movs	r3, #1
 800ca06:	4013      	ands	r3, r2
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	4b26      	ldr	r3, [pc, #152]	@ (800caa4 <check_cli_command+0x128>)
 800ca0c:	701a      	strb	r2, [r3, #0]
      break;
 800ca0e:	e035      	b.n	800ca7c <check_cli_command+0x100>
#endif
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800ca10:	f006 fdf4 	bl	80135fc <BinaryReleaseInfo>
      break;
 800ca14:	e032      	b.n	800ca7c <check_cli_command+0x100>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800ca16:	4a24      	ldr	r2, [pc, #144]	@ (800caa8 <check_cli_command+0x12c>)
 800ca18:	4b24      	ldr	r3, [pc, #144]	@ (800caac <check_cli_command+0x130>)
 800ca1a:	0019      	movs	r1, r3
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	f006 fd27 	bl	8013470 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800ca22:	4b23      	ldr	r3, [pc, #140]	@ (800cab0 <check_cli_command+0x134>)
 800ca24:	0018      	movs	r0, r3
 800ca26:	f019 f84d 	bl	8025ac4 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800ca2a:	4b22      	ldr	r3, [pc, #136]	@ (800cab4 <check_cli_command+0x138>)
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f019 f849 	bl	8025ac4 <puts>
      printf("e - show EEPROM\r\n");
 800ca32:	4b21      	ldr	r3, [pc, #132]	@ (800cab8 <check_cli_command+0x13c>)
 800ca34:	0018      	movs	r0, r3
 800ca36:	f019 f845 	bl	8025ac4 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800ca3a:	4b20      	ldr	r3, [pc, #128]	@ (800cabc <check_cli_command+0x140>)
 800ca3c:	0018      	movs	r0, r3
 800ca3e:	f019 f841 	bl	8025ac4 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800ca42:	4b1f      	ldr	r3, [pc, #124]	@ (800cac0 <check_cli_command+0x144>)
 800ca44:	0018      	movs	r0, r3
 800ca46:	f019 f83d 	bl	8025ac4 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800ca4a:	4b1e      	ldr	r3, [pc, #120]	@ (800cac4 <check_cli_command+0x148>)
 800ca4c:	0018      	movs	r0, r3
 800ca4e:	f019 f839 	bl	8025ac4 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800ca52:	4b1d      	ldr	r3, [pc, #116]	@ (800cac8 <check_cli_command+0x14c>)
 800ca54:	0018      	movs	r0, r3
 800ca56:	f019 f835 	bl	8025ac4 <puts>
      printf("s - Start particle measurement\r\n");
 800ca5a:	4b1c      	ldr	r3, [pc, #112]	@ (800cacc <check_cli_command+0x150>)
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	f019 f831 	bl	8025ac4 <puts>
      printf("t - Show actual system time\r\n");
 800ca62:	4b1b      	ldr	r3, [pc, #108]	@ (800cad0 <check_cli_command+0x154>)
 800ca64:	0018      	movs	r0, r3
 800ca66:	f019 f82d 	bl	8025ac4 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
 800ca6a:	4b1a      	ldr	r3, [pc, #104]	@ (800cad4 <check_cli_command+0x158>)
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f019 f829 	bl	8025ac4 <puts>
#endif
      printf("v - Show system version\r\n");
 800ca72:	4b19      	ldr	r3, [pc, #100]	@ (800cad8 <check_cli_command+0x15c>)
 800ca74:	0018      	movs	r0, r3
 800ca76:	f019 f825 	bl	8025ac4 <puts>
  break;
 800ca7a:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800ca7c:	4b02      	ldr	r3, [pc, #8]	@ (800ca88 <check_cli_command+0x10c>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	701a      	strb	r2, [r3, #0]
}
 800ca82:	46c0      	nop			@ (mov r8, r8)
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	20000e28 	.word	0x20000e28
 800ca8c:	0802e154 	.word	0x0802e154
 800ca90:	0802c814 	.word	0x0802c814
 800ca94:	0802c830 	.word	0x0802c830
 800ca98:	0802c84c 	.word	0x0802c84c
 800ca9c:	0802c86c 	.word	0x0802c86c
 800caa0:	20000ef0 	.word	0x20000ef0
 800caa4:	2000020b 	.word	0x2000020b
 800caa8:	0802c888 	.word	0x0802c888
 800caac:	0802c8b8 	.word	0x0802c8b8
 800cab0:	0802c8bc 	.word	0x0802c8bc
 800cab4:	0802c8d4 	.word	0x0802c8d4
 800cab8:	0802c8f4 	.word	0x0802c8f4
 800cabc:	0802c908 	.word	0x0802c908
 800cac0:	0802c92c 	.word	0x0802c92c
 800cac4:	0802c94c 	.word	0x0802c94c
 800cac8:	0802c970 	.word	0x0802c970
 800cacc:	0802c990 	.word	0x0802c990
 800cad0:	0802c9b0 	.word	0x0802c9b0
 800cad4:	0802c9d0 	.word	0x0802c9d0
 800cad8:	0802c9e8 	.word	0x0802c9e8

0800cadc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800cae4:	4907      	ldr	r1, [pc, #28]	@ (800cb04 <HAL_UART_RxCpltCallback+0x28>)
 800cae6:	4b08      	ldr	r3, [pc, #32]	@ (800cb08 <HAL_UART_RxCpltCallback+0x2c>)
 800cae8:	2201      	movs	r2, #1
 800caea:	0018      	movs	r0, r3
 800caec:	f010 f838 	bl	801cb60 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800caf0:	4904      	ldr	r1, [pc, #16]	@ (800cb04 <HAL_UART_RxCpltCallback+0x28>)
 800caf2:	4b05      	ldr	r3, [pc, #20]	@ (800cb08 <HAL_UART_RxCpltCallback+0x2c>)
 800caf4:	2201      	movs	r2, #1
 800caf6:	0018      	movs	r0, r3
 800caf8:	f010 f832 	bl	801cb60 <HAL_UART_Receive_IT>
}
 800cafc:	46c0      	nop			@ (mov r8, r8)
 800cafe:	46bd      	mov	sp, r7
 800cb00:	b002      	add	sp, #8
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	20000e28 	.word	0x20000e28
 800cb08:	20002008 	.word	0x20002008

0800cb0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	0002      	movs	r2, r0
 800cb14:	1dbb      	adds	r3, r7, #6
 800cb16:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800cb18:	1dbb      	adds	r3, r7, #6
 800cb1a:	881a      	ldrh	r2, [r3, #0]
 800cb1c:	2380      	movs	r3, #128	@ 0x80
 800cb1e:	021b      	lsls	r3, r3, #8
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d10b      	bne.n	800cb3c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800cb24:	f005 ff48 	bl	80129b8 <setuserToggle>
    if (GetPMSensorPresence()) {
 800cb28:	f000 f860 	bl	800cbec <GetPMSensorPresence>
 800cb2c:	1e03      	subs	r3, r0, #0
 800cb2e:	d005      	beq.n	800cb3c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800cb30:	4b04      	ldr	r3, [pc, #16]	@ (800cb44 <HAL_GPIO_EXTI_Callback+0x38>)
 800cb32:	2201      	movs	r2, #1
 800cb34:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800cb36:	2000      	movs	r0, #0
 800cb38:	f001 f8be 	bl	800dcb8 <sen5x_Set_sen5x_state>
    }
  }
}
 800cb3c:	46c0      	nop			@ (mov r8, r8)
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	b002      	add	sp, #8
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	20000e40 	.word	0x20000e40

0800cb48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800cb4c:	f005 fb5e 	bl	801220c <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800cb50:	b672      	cpsid	i
}
 800cb52:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800cb54:	4a05      	ldr	r2, [pc, #20]	@ (800cb6c <Error_Handler+0x24>)
 800cb56:	4b06      	ldr	r3, [pc, #24]	@ (800cb70 <Error_Handler+0x28>)
 800cb58:	0019      	movs	r1, r3
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	f006 fc88 	bl	8013470 <CreateLine>

    HAL_Delay(2500);
 800cb60:	4b04      	ldr	r3, [pc, #16]	@ (800cb74 <Error_Handler+0x2c>)
 800cb62:	0018      	movs	r0, r3
 800cb64:	f007 fa10 	bl	8013f88 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800cb68:	46c0      	nop			@ (mov r8, r8)
 800cb6a:	e7f3      	b.n	800cb54 <Error_Handler+0xc>
 800cb6c:	0802ca04 	.word	0x0802ca04
 800cb70:	0802c8b8 	.word	0x0802c8b8
 800cb74:	000009c4 	.word	0x000009c4

0800cb78 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800cb7c:	4b19      	ldr	r3, [pc, #100]	@ (800cbe4 <testInit+0x6c>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800cb82:	4b18      	ldr	r3, [pc, #96]	@ (800cbe4 <testInit+0x6c>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800cb88:	4b16      	ldr	r3, [pc, #88]	@ (800cbe4 <testInit+0x6c>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800cb8e:	4b15      	ldr	r3, [pc, #84]	@ (800cbe4 <testInit+0x6c>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800cb94:	4b13      	ldr	r3, [pc, #76]	@ (800cbe4 <testInit+0x6c>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800cb9a:	4b12      	ldr	r3, [pc, #72]	@ (800cbe4 <testInit+0x6c>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800cba0:	4b10      	ldr	r3, [pc, #64]	@ (800cbe4 <testInit+0x6c>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800cba6:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe4 <testInit+0x6c>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800cbac:	4b0d      	ldr	r3, [pc, #52]	@ (800cbe4 <testInit+0x6c>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800cbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cbe8 <testInit+0x70>)
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800cbb8:	4b0b      	ldr	r3, [pc, #44]	@ (800cbe8 <testInit+0x70>)
 800cbba:	2201      	movs	r2, #1
 800cbbc:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800cbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe8 <testInit+0x70>)
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800cbc4:	4b08      	ldr	r3, [pc, #32]	@ (800cbe8 <testInit+0x70>)
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800cbca:	4b07      	ldr	r3, [pc, #28]	@ (800cbe8 <testInit+0x70>)
 800cbcc:	2201      	movs	r2, #1
 800cbce:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800cbd0:	4b05      	ldr	r3, [pc, #20]	@ (800cbe8 <testInit+0x70>)
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800cbd6:	4b04      	ldr	r3, [pc, #16]	@ (800cbe8 <testInit+0x70>)
 800cbd8:	2201      	movs	r2, #1
 800cbda:	719a      	strb	r2, [r3, #6]
}
 800cbdc:	46c0      	nop			@ (mov r8, r8)
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	46c0      	nop			@ (mov r8, r8)
 800cbe4:	20000e48 	.word	0x20000e48
 800cbe8:	20000e40 	.word	0x20000e40

0800cbec <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800cbf0:	4b02      	ldr	r3, [pc, #8]	@ (800cbfc <GetPMSensorPresence+0x10>)
 800cbf2:	795b      	ldrb	r3, [r3, #5]
}
 800cbf4:	0018      	movs	r0, r3
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	46c0      	nop			@ (mov r8, r8)
 800cbfc:	20000e48 	.word	0x20000e48

0800cc00 <DisablePMSensor>:

void DisablePMSensor() {
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800cc04:	4b02      	ldr	r3, [pc, #8]	@ (800cc10 <DisablePMSensor+0x10>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	715a      	strb	r2, [r3, #5]
}
 800cc0a:	46c0      	nop			@ (mov r8, r8)
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	20000e48 	.word	0x20000e48

0800cc14 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800cc18:	4b02      	ldr	r3, [pc, #8]	@ (800cc24 <IsAHT20SensorPresent+0x10>)
 800cc1a:	789b      	ldrb	r3, [r3, #2]
}
 800cc1c:	0018      	movs	r0, r3
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	46c0      	nop			@ (mov r8, r8)
 800cc24:	20000e48 	.word	0x20000e48

0800cc28 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800cc2c:	4b02      	ldr	r3, [pc, #8]	@ (800cc38 <IsBMP280SensorPresent+0x10>)
 800cc2e:	791b      	ldrb	r3, [r3, #4]
}
 800cc30:	0018      	movs	r0, r3
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	46c0      	nop			@ (mov r8, r8)
 800cc38:	20000e48 	.word	0x20000e48

0800cc3c <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800cc40:	4b02      	ldr	r3, [pc, #8]	@ (800cc4c <IsENS160SensorPresent+0x10>)
 800cc42:	78db      	ldrb	r3, [r3, #3]
}
 800cc44:	0018      	movs	r0, r3
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	46c0      	nop			@ (mov r8, r8)
 800cc4c:	20000e48 	.word	0x20000e48

0800cc50 <IsSGPPresent>:

bool IsSGPPresent() {
 800cc50:	b580      	push	{r7, lr}
 800cc52:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800cc54:	4b02      	ldr	r3, [pc, #8]	@ (800cc60 <IsSGPPresent+0x10>)
 800cc56:	785b      	ldrb	r3, [r3, #1]
}
 800cc58:	0018      	movs	r0, r3
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	46c0      	nop			@ (mov r8, r8)
 800cc60:	20000e48 	.word	0x20000e48

0800cc64 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	0002      	movs	r2, r0
 800cc6c:	1dfb      	adds	r3, r7, #7
 800cc6e:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800cc70:	4b0b      	ldr	r3, [pc, #44]	@ (800cca0 <SetVOCSensorDIS_ENA+0x3c>)
 800cc72:	1dfa      	adds	r2, r7, #7
 800cc74:	7812      	ldrb	r2, [r2, #0]
 800cc76:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800cc78:	4b0a      	ldr	r3, [pc, #40]	@ (800cca4 <SetVOCSensorDIS_ENA+0x40>)
 800cc7a:	1dfa      	adds	r2, r7, #7
 800cc7c:	7812      	ldrb	r2, [r2, #0]
 800cc7e:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800cc80:	1dfb      	adds	r3, r7, #7
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d001      	beq.n	800cc8c <SetVOCSensorDIS_ENA+0x28>
 800cc88:	4b07      	ldr	r3, [pc, #28]	@ (800cca8 <SetVOCSensorDIS_ENA+0x44>)
 800cc8a:	e000      	b.n	800cc8e <SetVOCSensorDIS_ENA+0x2a>
 800cc8c:	4b07      	ldr	r3, [pc, #28]	@ (800ccac <SetVOCSensorDIS_ENA+0x48>)
 800cc8e:	4a08      	ldr	r2, [pc, #32]	@ (800ccb0 <SetVOCSensorDIS_ENA+0x4c>)
 800cc90:	4908      	ldr	r1, [pc, #32]	@ (800ccb4 <SetVOCSensorDIS_ENA+0x50>)
 800cc92:	2003      	movs	r0, #3
 800cc94:	f006 fbec 	bl	8013470 <CreateLine>
}
 800cc98:	46c0      	nop			@ (mov r8, r8)
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	b002      	add	sp, #8
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	20000e48 	.word	0x20000e48
 800cca4:	20000e40 	.word	0x20000e40
 800cca8:	0802ca30 	.word	0x0802ca30
 800ccac:	0802ca38 	.word	0x0802ca38
 800ccb0:	0802ca44 	.word	0x0802ca44
 800ccb4:	0802ca58 	.word	0x0802ca58

0800ccb8 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800ccbc:	4b02      	ldr	r3, [pc, #8]	@ (800ccc8 <IsPMSensorEnabled+0x10>)
 800ccbe:	789b      	ldrb	r3, [r3, #2]
}
 800ccc0:	0018      	movs	r0, r3
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	46c0      	nop			@ (mov r8, r8)
 800ccc8:	20000e40 	.word	0x20000e40

0800cccc <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	0002      	movs	r2, r0
 800ccd4:	1dfb      	adds	r3, r7, #7
 800ccd6:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800ccd8:	4b05      	ldr	r3, [pc, #20]	@ (800ccf0 <SetVOCSensorStatus+0x24>)
 800ccda:	7a1b      	ldrb	r3, [r3, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800cce0:	4b04      	ldr	r3, [pc, #16]	@ (800ccf4 <SetVOCSensorStatus+0x28>)
 800cce2:	1dfa      	adds	r2, r7, #7
 800cce4:	7812      	ldrb	r2, [r2, #0]
 800cce6:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800cce8:	46c0      	nop			@ (mov r8, r8)
 800ccea:	46bd      	mov	sp, r7
 800ccec:	b002      	add	sp, #8
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	20000e48 	.word	0x20000e48
 800ccf4:	20000e40 	.word	0x20000e40

0800ccf8 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	0002      	movs	r2, r0
 800cd00:	1dfb      	adds	r3, r7, #7
 800cd02:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800cd04:	4b03      	ldr	r3, [pc, #12]	@ (800cd14 <SetPMSensorStatus+0x1c>)
 800cd06:	1dfa      	adds	r2, r7, #7
 800cd08:	7812      	ldrb	r2, [r2, #0]
 800cd0a:	709a      	strb	r2, [r3, #2]
}
 800cd0c:	46c0      	nop			@ (mov r8, r8)
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	b002      	add	sp, #8
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20000e40 	.word	0x20000e40

0800cd18 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800cd1c:	4b02      	ldr	r3, [pc, #8]	@ (800cd28 <SetESPMeasurementDone+0x10>)
 800cd1e:	2201      	movs	r2, #1
 800cd20:	71da      	strb	r2, [r3, #7]
}
 800cd22:	46c0      	nop			@ (mov r8, r8)
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20000e48 	.word	0x20000e48

0800cd2c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	603b      	str	r3, [r7, #0]
  testInit();
 800cd3a:	f7ff ff1d 	bl	800cb78 <testInit>
  I2CSensors_Init(sensorI2C);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	0018      	movs	r0, r3
 800cd42:	f7fb f809 	bl	8007d58 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800cd46:	f006 fea1 	bl	8013a8c <HIDS_DeviceConnected>
 800cd4a:	0003      	movs	r3, r0
 800cd4c:	001a      	movs	r2, r3
 800cd4e:	2301      	movs	r3, #1
 800cd50:	4053      	eors	r3, r2
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00c      	beq.n	800cd72 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800cd58:	4abf      	ldr	r2, [pc, #764]	@ (800d058 <Device_Init+0x32c>)
 800cd5a:	4bc0      	ldr	r3, [pc, #768]	@ (800d05c <Device_Init+0x330>)
 800cd5c:	0019      	movs	r1, r3
 800cd5e:	2001      	movs	r0, #1
 800cd60:	f006 fb86 	bl	8013470 <CreateLine>
     SensorProbe.HT_Present = false;
 800cd64:	4bbe      	ldr	r3, [pc, #760]	@ (800d060 <Device_Init+0x334>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800cd6a:	4bbe      	ldr	r3, [pc, #760]	@ (800d064 <Device_Init+0x338>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	701a      	strb	r2, [r3, #0]
 800cd70:	e008      	b.n	800cd84 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800cd72:	4bbb      	ldr	r3, [pc, #748]	@ (800d060 <Device_Init+0x334>)
 800cd74:	2201      	movs	r2, #1
 800cd76:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800cd78:	4abb      	ldr	r2, [pc, #748]	@ (800d068 <Device_Init+0x33c>)
 800cd7a:	4bbc      	ldr	r3, [pc, #752]	@ (800d06c <Device_Init+0x340>)
 800cd7c:	0019      	movs	r1, r3
 800cd7e:	2003      	movs	r0, #3
 800cd80:	f006 fb76 	bl	8013470 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800cd84:	f7fe f93e 	bl	800b004 <BMP280_DeviceConnected>
 800cd88:	0003      	movs	r3, r0
 800cd8a:	001a      	movs	r2, r3
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	4053      	eors	r3, r2
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00c      	beq.n	800cdb0 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800cd96:	4ab6      	ldr	r2, [pc, #728]	@ (800d070 <Device_Init+0x344>)
 800cd98:	4bb0      	ldr	r3, [pc, #704]	@ (800d05c <Device_Init+0x330>)
 800cd9a:	0019      	movs	r1, r3
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	f006 fb67 	bl	8013470 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800cda2:	4baf      	ldr	r3, [pc, #700]	@ (800d060 <Device_Init+0x334>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800cda8:	4bae      	ldr	r3, [pc, #696]	@ (800d064 <Device_Init+0x338>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	715a      	strb	r2, [r3, #5]
 800cdae:	e008      	b.n	800cdc2 <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800cdb0:	4bab      	ldr	r3, [pc, #684]	@ (800d060 <Device_Init+0x334>)
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800cdb6:	4aaf      	ldr	r2, [pc, #700]	@ (800d074 <Device_Init+0x348>)
 800cdb8:	4bac      	ldr	r3, [pc, #688]	@ (800d06c <Device_Init+0x340>)
 800cdba:	0019      	movs	r1, r3
 800cdbc:	2003      	movs	r0, #3
 800cdbe:	f006 fb57 	bl	8013470 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800cdc2:	f003 fd45 	bl	8010850 <SGP_DeviceConnected>
 800cdc6:	0003      	movs	r3, r0
 800cdc8:	001a      	movs	r2, r3
 800cdca:	2301      	movs	r3, #1
 800cdcc:	4053      	eors	r3, r2
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00c      	beq.n	800cdee <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800cdd4:	4ba2      	ldr	r3, [pc, #648]	@ (800d060 <Device_Init+0x334>)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800cdda:	4aa7      	ldr	r2, [pc, #668]	@ (800d078 <Device_Init+0x34c>)
 800cddc:	4b9f      	ldr	r3, [pc, #636]	@ (800d05c <Device_Init+0x330>)
 800cdde:	0019      	movs	r1, r3
 800cde0:	2001      	movs	r0, #1
 800cde2:	f006 fb45 	bl	8013470 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800cde6:	4b9f      	ldr	r3, [pc, #636]	@ (800d064 <Device_Init+0x338>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	705a      	strb	r2, [r3, #1]
 800cdec:	e00b      	b.n	800ce06 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800cdee:	4b9c      	ldr	r3, [pc, #624]	@ (800d060 <Device_Init+0x334>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800cdf4:	4b9a      	ldr	r3, [pc, #616]	@ (800d060 <Device_Init+0x334>)
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800cdfa:	4aa0      	ldr	r2, [pc, #640]	@ (800d07c <Device_Init+0x350>)
 800cdfc:	4b9b      	ldr	r3, [pc, #620]	@ (800d06c <Device_Init+0x340>)
 800cdfe:	0019      	movs	r1, r3
 800ce00:	2003      	movs	r0, #3
 800ce02:	f006 fb35 	bl	8013470 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800ce06:	f7f7 f82f 	bl	8003e68 <ENS_DeviceConnected>
 800ce0a:	0003      	movs	r3, r0
 800ce0c:	001a      	movs	r2, r3
 800ce0e:	2301      	movs	r3, #1
 800ce10:	4053      	eors	r3, r2
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00c      	beq.n	800ce32 <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800ce18:	4b91      	ldr	r3, [pc, #580]	@ (800d060 <Device_Init+0x334>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800ce1e:	4a98      	ldr	r2, [pc, #608]	@ (800d080 <Device_Init+0x354>)
 800ce20:	4b8e      	ldr	r3, [pc, #568]	@ (800d05c <Device_Init+0x330>)
 800ce22:	0019      	movs	r1, r3
 800ce24:	2001      	movs	r0, #1
 800ce26:	f006 fb23 	bl	8013470 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800ce2a:	4b8e      	ldr	r3, [pc, #568]	@ (800d064 <Device_Init+0x338>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	719a      	strb	r2, [r3, #6]
 800ce30:	e008      	b.n	800ce44 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800ce32:	4b8b      	ldr	r3, [pc, #556]	@ (800d060 <Device_Init+0x334>)
 800ce34:	2201      	movs	r2, #1
 800ce36:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800ce38:	4a92      	ldr	r2, [pc, #584]	@ (800d084 <Device_Init+0x358>)
 800ce3a:	4b8c      	ldr	r3, [pc, #560]	@ (800d06c <Device_Init+0x340>)
 800ce3c:	0019      	movs	r1, r3
 800ce3e:	2003      	movs	r0, #3
 800ce40:	f006 fb16 	bl	8013470 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800ce44:	f7fd fbc6 	bl	800a5d4 <AHT20_DeviceConnected>
 800ce48:	0003      	movs	r3, r0
 800ce4a:	001a      	movs	r2, r3
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	4053      	eors	r3, r2
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00c      	beq.n	800ce70 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800ce56:	4a8c      	ldr	r2, [pc, #560]	@ (800d088 <Device_Init+0x35c>)
 800ce58:	4b80      	ldr	r3, [pc, #512]	@ (800d05c <Device_Init+0x330>)
 800ce5a:	0019      	movs	r1, r3
 800ce5c:	2001      	movs	r0, #1
 800ce5e:	f006 fb07 	bl	8013470 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800ce62:	4b7f      	ldr	r3, [pc, #508]	@ (800d060 <Device_Init+0x334>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800ce68:	4b7e      	ldr	r3, [pc, #504]	@ (800d064 <Device_Init+0x338>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	711a      	strb	r2, [r3, #4]
 800ce6e:	e008      	b.n	800ce82 <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800ce70:	4b7b      	ldr	r3, [pc, #492]	@ (800d060 <Device_Init+0x334>)
 800ce72:	2201      	movs	r2, #1
 800ce74:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800ce76:	4a85      	ldr	r2, [pc, #532]	@ (800d08c <Device_Init+0x360>)
 800ce78:	4b7c      	ldr	r3, [pc, #496]	@ (800d06c <Device_Init+0x340>)
 800ce7a:	0019      	movs	r1, r3
 800ce7c:	2003      	movs	r0, #3
 800ce7e:	f006 faf7 	bl	8013470 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800ce82:	4b77      	ldr	r3, [pc, #476]	@ (800d060 <Device_Init+0x334>)
 800ce84:	785b      	ldrb	r3, [r3, #1]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d009      	beq.n	800ce9e <Device_Init+0x172>
 800ce8a:	4b75      	ldr	r3, [pc, #468]	@ (800d060 <Device_Init+0x334>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d005      	beq.n	800ce9e <Device_Init+0x172>
    SetDBLED(false, true, false);
 800ce92:	2200      	movs	r2, #0
 800ce94:	2101      	movs	r1, #1
 800ce96:	2000      	movs	r0, #0
 800ce98:	f005 f812 	bl	8011ec0 <SetDBLED>
 800ce9c:	e018      	b.n	800ced0 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2100      	movs	r1, #0
 800cea2:	2001      	movs	r0, #1
 800cea4:	f005 f80c 	bl	8011ec0 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800cea8:	4b79      	ldr	r3, [pc, #484]	@ (800d090 <Device_Init+0x364>)
 800ceaa:	2200      	movs	r2, #0
 800ceac:	2101      	movs	r1, #1
 800ceae:	0018      	movs	r0, r3
 800ceb0:	f008 faf1 	bl	8015496 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800ceb4:	2380      	movs	r3, #128	@ 0x80
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	4875      	ldr	r0, [pc, #468]	@ (800d090 <Device_Init+0x364>)
 800ceba:	2201      	movs	r2, #1
 800cebc:	0019      	movs	r1, r3
 800cebe:	f008 faea 	bl	8015496 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800cec2:	2380      	movs	r3, #128	@ 0x80
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4872      	ldr	r0, [pc, #456]	@ (800d090 <Device_Init+0x364>)
 800cec8:	2201      	movs	r2, #1
 800ceca:	0019      	movs	r1, r3
 800cecc:	f008 fae3 	bl	8015496 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800ced0:	4b64      	ldr	r3, [pc, #400]	@ (800d064 <Device_Init+0x338>)
 800ced2:	78db      	ldrb	r3, [r3, #3]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d028      	beq.n	800cf2a <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800ced8:	4a6e      	ldr	r2, [pc, #440]	@ (800d094 <Device_Init+0x368>)
 800ceda:	4b6f      	ldr	r3, [pc, #444]	@ (800d098 <Device_Init+0x36c>)
 800cedc:	0019      	movs	r1, r3
 800cede:	2002      	movs	r0, #2
 800cee0:	f006 fac6 	bl	8013470 <CreateLine>
    if (!enableMicrophone(true)) {
 800cee4:	2001      	movs	r0, #1
 800cee6:	f004 f8e9 	bl	80110bc <enableMicrophone>
 800ceea:	0003      	movs	r3, r0
 800ceec:	001a      	movs	r2, r3
 800ceee:	2301      	movs	r3, #1
 800cef0:	4053      	eors	r3, r2
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00c      	beq.n	800cf12 <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800cef8:	4a68      	ldr	r2, [pc, #416]	@ (800d09c <Device_Init+0x370>)
 800cefa:	4b58      	ldr	r3, [pc, #352]	@ (800d05c <Device_Init+0x330>)
 800cefc:	0019      	movs	r1, r3
 800cefe:	2001      	movs	r0, #1
 800cf00:	f006 fab6 	bl	8013470 <CreateLine>
      SensorProbe.MIC_Present = false;
 800cf04:	4b56      	ldr	r3, [pc, #344]	@ (800d060 <Device_Init+0x334>)
 800cf06:	2200      	movs	r2, #0
 800cf08:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800cf0a:	4b56      	ldr	r3, [pc, #344]	@ (800d064 <Device_Init+0x338>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	70da      	strb	r2, [r3, #3]
 800cf10:	e00b      	b.n	800cf2a <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800cf12:	4b53      	ldr	r3, [pc, #332]	@ (800d060 <Device_Init+0x334>)
 800cf14:	2201      	movs	r2, #1
 800cf16:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800cf18:	4b52      	ldr	r3, [pc, #328]	@ (800d064 <Device_Init+0x338>)
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800cf1e:	4a60      	ldr	r2, [pc, #384]	@ (800d0a0 <Device_Init+0x374>)
 800cf20:	4b52      	ldr	r3, [pc, #328]	@ (800d06c <Device_Init+0x340>)
 800cf22:	0019      	movs	r1, r3
 800cf24:	2003      	movs	r0, #3
 800cf26:	f006 faa3 	bl	8013470 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800cf2a:	f000 ffb9 	bl	800dea0 <probe_sen5x>
 800cf2e:	1e03      	subs	r3, r0, #0
 800cf30:	d122      	bne.n	800cf78 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800cf32:	4a5c      	ldr	r2, [pc, #368]	@ (800d0a4 <Device_Init+0x378>)
 800cf34:	4b4d      	ldr	r3, [pc, #308]	@ (800d06c <Device_Init+0x340>)
 800cf36:	0019      	movs	r1, r3
 800cf38:	2003      	movs	r0, #3
 800cf3a:	f006 fa99 	bl	8013470 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800cf3e:	4b48      	ldr	r3, [pc, #288]	@ (800d060 <Device_Init+0x334>)
 800cf40:	2201      	movs	r2, #1
 800cf42:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800cf44:	4b47      	ldr	r3, [pc, #284]	@ (800d064 <Device_Init+0x338>)
 800cf46:	2201      	movs	r2, #1
 800cf48:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800cf4a:	4b57      	ldr	r3, [pc, #348]	@ (800d0a8 <Device_Init+0x37c>)
 800cf4c:	791b      	ldrb	r3, [r3, #4]
 800cf4e:	2b34      	cmp	r3, #52	@ 0x34
 800cf50:	d003      	beq.n	800cf5a <Device_Init+0x22e>
 800cf52:	4b55      	ldr	r3, [pc, #340]	@ (800d0a8 <Device_Init+0x37c>)
 800cf54:	791b      	ldrb	r3, [r3, #4]
 800cf56:	2b35      	cmp	r3, #53	@ 0x35
 800cf58:	d11c      	bne.n	800cf94 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800cf5a:	4a54      	ldr	r2, [pc, #336]	@ (800d0ac <Device_Init+0x380>)
 800cf5c:	4b4e      	ldr	r3, [pc, #312]	@ (800d098 <Device_Init+0x36c>)
 800cf5e:	0019      	movs	r1, r3
 800cf60:	2002      	movs	r0, #2
 800cf62:	f006 fa85 	bl	8013470 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800cf66:	4b3f      	ldr	r3, [pc, #252]	@ (800d064 <Device_Init+0x338>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800cf6c:	4b3c      	ldr	r3, [pc, #240]	@ (800d060 <Device_Init+0x334>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800cf72:	f003 fe53 	bl	8010c1c <SGP_SoftReset>
 800cf76:	e00d      	b.n	800cf94 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800cf78:	f000 ff5c 	bl	800de34 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800cf7c:	4a4c      	ldr	r2, [pc, #304]	@ (800d0b0 <Device_Init+0x384>)
 800cf7e:	4b3b      	ldr	r3, [pc, #236]	@ (800d06c <Device_Init+0x340>)
 800cf80:	0019      	movs	r1, r3
 800cf82:	2003      	movs	r0, #3
 800cf84:	f006 fa74 	bl	8013470 <CreateLine>
    SensorProbe.PM_Present = false;
 800cf88:	4b35      	ldr	r3, [pc, #212]	@ (800d060 <Device_Init+0x334>)
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800cf8e:	4b35      	ldr	r3, [pc, #212]	@ (800d064 <Device_Init+0x338>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800cf94:	4b32      	ldr	r3, [pc, #200]	@ (800d060 <Device_Init+0x334>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d001      	beq.n	800cfa0 <Device_Init+0x274>
 800cf9c:	4b45      	ldr	r3, [pc, #276]	@ (800d0b4 <Device_Init+0x388>)
 800cf9e:	e000      	b.n	800cfa2 <Device_Init+0x276>
 800cfa0:	4b45      	ldr	r3, [pc, #276]	@ (800d0b8 <Device_Init+0x38c>)
 800cfa2:	4a46      	ldr	r2, [pc, #280]	@ (800d0bc <Device_Init+0x390>)
 800cfa4:	493c      	ldr	r1, [pc, #240]	@ (800d098 <Device_Init+0x36c>)
 800cfa6:	2002      	movs	r0, #2
 800cfa8:	f006 fa62 	bl	8013470 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800cfac:	4b2c      	ldr	r3, [pc, #176]	@ (800d060 <Device_Init+0x334>)
 800cfae:	785b      	ldrb	r3, [r3, #1]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <Device_Init+0x28c>
 800cfb4:	4b3f      	ldr	r3, [pc, #252]	@ (800d0b4 <Device_Init+0x388>)
 800cfb6:	e000      	b.n	800cfba <Device_Init+0x28e>
 800cfb8:	4b3f      	ldr	r3, [pc, #252]	@ (800d0b8 <Device_Init+0x38c>)
 800cfba:	4a41      	ldr	r2, [pc, #260]	@ (800d0c0 <Device_Init+0x394>)
 800cfbc:	4936      	ldr	r1, [pc, #216]	@ (800d098 <Device_Init+0x36c>)
 800cfbe:	2002      	movs	r0, #2
 800cfc0:	f006 fa56 	bl	8013470 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800cfc4:	4b26      	ldr	r3, [pc, #152]	@ (800d060 <Device_Init+0x334>)
 800cfc6:	789b      	ldrb	r3, [r3, #2]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <Device_Init+0x2a4>
 800cfcc:	4b39      	ldr	r3, [pc, #228]	@ (800d0b4 <Device_Init+0x388>)
 800cfce:	e000      	b.n	800cfd2 <Device_Init+0x2a6>
 800cfd0:	4b39      	ldr	r3, [pc, #228]	@ (800d0b8 <Device_Init+0x38c>)
 800cfd2:	4a3c      	ldr	r2, [pc, #240]	@ (800d0c4 <Device_Init+0x398>)
 800cfd4:	4930      	ldr	r1, [pc, #192]	@ (800d098 <Device_Init+0x36c>)
 800cfd6:	2002      	movs	r0, #2
 800cfd8:	f006 fa4a 	bl	8013470 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800cfdc:	4b20      	ldr	r3, [pc, #128]	@ (800d060 <Device_Init+0x334>)
 800cfde:	791b      	ldrb	r3, [r3, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <Device_Init+0x2bc>
 800cfe4:	4b33      	ldr	r3, [pc, #204]	@ (800d0b4 <Device_Init+0x388>)
 800cfe6:	e000      	b.n	800cfea <Device_Init+0x2be>
 800cfe8:	4b33      	ldr	r3, [pc, #204]	@ (800d0b8 <Device_Init+0x38c>)
 800cfea:	4a37      	ldr	r2, [pc, #220]	@ (800d0c8 <Device_Init+0x39c>)
 800cfec:	492a      	ldr	r1, [pc, #168]	@ (800d098 <Device_Init+0x36c>)
 800cfee:	2002      	movs	r0, #2
 800cff0:	f006 fa3e 	bl	8013470 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800cff4:	4b1a      	ldr	r3, [pc, #104]	@ (800d060 <Device_Init+0x334>)
 800cff6:	78db      	ldrb	r3, [r3, #3]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <Device_Init+0x2d4>
 800cffc:	4b2d      	ldr	r3, [pc, #180]	@ (800d0b4 <Device_Init+0x388>)
 800cffe:	e000      	b.n	800d002 <Device_Init+0x2d6>
 800d000:	4b2d      	ldr	r3, [pc, #180]	@ (800d0b8 <Device_Init+0x38c>)
 800d002:	4a32      	ldr	r2, [pc, #200]	@ (800d0cc <Device_Init+0x3a0>)
 800d004:	4924      	ldr	r1, [pc, #144]	@ (800d098 <Device_Init+0x36c>)
 800d006:	2002      	movs	r0, #2
 800d008:	f006 fa32 	bl	8013470 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800d00c:	4b14      	ldr	r3, [pc, #80]	@ (800d060 <Device_Init+0x334>)
 800d00e:	795b      	ldrb	r3, [r3, #5]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <Device_Init+0x2ec>
 800d014:	4b27      	ldr	r3, [pc, #156]	@ (800d0b4 <Device_Init+0x388>)
 800d016:	e000      	b.n	800d01a <Device_Init+0x2ee>
 800d018:	4b27      	ldr	r3, [pc, #156]	@ (800d0b8 <Device_Init+0x38c>)
 800d01a:	4a2d      	ldr	r2, [pc, #180]	@ (800d0d0 <Device_Init+0x3a4>)
 800d01c:	491e      	ldr	r1, [pc, #120]	@ (800d098 <Device_Init+0x36c>)
 800d01e:	2002      	movs	r0, #2
 800d020:	f006 fa26 	bl	8013470 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800d024:	4b0e      	ldr	r3, [pc, #56]	@ (800d060 <Device_Init+0x334>)
 800d026:	799b      	ldrb	r3, [r3, #6]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <Device_Init+0x304>
 800d02c:	4b21      	ldr	r3, [pc, #132]	@ (800d0b4 <Device_Init+0x388>)
 800d02e:	e000      	b.n	800d032 <Device_Init+0x306>
 800d030:	4b21      	ldr	r3, [pc, #132]	@ (800d0b8 <Device_Init+0x38c>)
 800d032:	4a28      	ldr	r2, [pc, #160]	@ (800d0d4 <Device_Init+0x3a8>)
 800d034:	4918      	ldr	r1, [pc, #96]	@ (800d098 <Device_Init+0x36c>)
 800d036:	2002      	movs	r0, #2
 800d038:	f006 fa1a 	bl	8013470 <CreateLine>
  ESP_Init(espUart);
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	0018      	movs	r0, r3
 800d040:	f7f7 fefa 	bl	8004e38 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800d044:	4a24      	ldr	r2, [pc, #144]	@ (800d0d8 <Device_Init+0x3ac>)
 800d046:	4b09      	ldr	r3, [pc, #36]	@ (800d06c <Device_Init+0x340>)
 800d048:	0019      	movs	r1, r3
 800d04a:	2003      	movs	r0, #3
 800d04c:	f006 fa10 	bl	8013470 <CreateLine>
}
 800d050:	46c0      	nop			@ (mov r8, r8)
 800d052:	46bd      	mov	sp, r7
 800d054:	b004      	add	sp, #16
 800d056:	bd80      	pop	{r7, pc}
 800d058:	0802ca5c 	.word	0x0802ca5c
 800d05c:	0802ca8c 	.word	0x0802ca8c
 800d060:	20000e48 	.word	0x20000e48
 800d064:	20000e40 	.word	0x20000e40
 800d068:	0802ca90 	.word	0x0802ca90
 800d06c:	0802ca58 	.word	0x0802ca58
 800d070:	0802cabc 	.word	0x0802cabc
 800d074:	0802caf0 	.word	0x0802caf0
 800d078:	0802cb20 	.word	0x0802cb20
 800d07c:	0802cb3c 	.word	0x0802cb3c
 800d080:	0802cb54 	.word	0x0802cb54
 800d084:	0802cb70 	.word	0x0802cb70
 800d088:	0802cb88 	.word	0x0802cb88
 800d08c:	0802cbbc 	.word	0x0802cbbc
 800d090:	50000400 	.word	0x50000400
 800d094:	0802cbf0 	.word	0x0802cbf0
 800d098:	0802cc14 	.word	0x0802cc14
 800d09c:	0802cc18 	.word	0x0802cc18
 800d0a0:	0802cc44 	.word	0x0802cc44
 800d0a4:	0802cc70 	.word	0x0802cc70
 800d0a8:	20000ee4 	.word	0x20000ee4
 800d0ac:	0802cc88 	.word	0x0802cc88
 800d0b0:	0802ccd8 	.word	0x0802ccd8
 800d0b4:	0802ccfc 	.word	0x0802ccfc
 800d0b8:	0802cd00 	.word	0x0802cd00
 800d0bc:	0802cd04 	.word	0x0802cd04
 800d0c0:	0802cd20 	.word	0x0802cd20
 800d0c4:	0802cd3c 	.word	0x0802cd3c
 800d0c8:	0802cd5c 	.word	0x0802cd5c
 800d0cc:	0802cd7c 	.word	0x0802cd7c
 800d0d0:	0802cd9c 	.word	0x0802cd9c
 800d0d4:	0802cdb8 	.word	0x0802cdb8
 800d0d8:	0802cdd4 	.word	0x0802cdd4

0800d0dc <Device_Test>:

void Device_Test(){
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800d0e0:	4b34      	ldr	r3, [pc, #208]	@ (800d1b4 <Device_Test+0xd8>)
 800d0e2:	799b      	ldrb	r3, [r3, #6]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	4053      	eors	r3, r2
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d027      	beq.n	800d13e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800d0ee:	f000 fc07 	bl	800d900 <MIC_TestMeasurementDone>
 800d0f2:	1e03      	subs	r3, r0, #0
 800d0f4:	d011      	beq.n	800d11a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800d0f6:	4b2f      	ldr	r3, [pc, #188]	@ (800d1b4 <Device_Test+0xd8>)
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d0fc:	4b2e      	ldr	r3, [pc, #184]	@ (800d1b8 <Device_Test+0xdc>)
 800d0fe:	2201      	movs	r2, #1
 800d100:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800d102:	f004 fe61 	bl	8011dc8 <Calculate_LED_ON>
 800d106:	0003      	movs	r3, r0
 800d108:	0019      	movs	r1, r3
 800d10a:	23fa      	movs	r3, #250	@ 0xfa
 800d10c:	011a      	lsls	r2, r3, #4
 800d10e:	23fa      	movs	r3, #250	@ 0xfa
 800d110:	011b      	lsls	r3, r3, #4
 800d112:	0018      	movs	r0, r3
 800d114:	f004 fea0 	bl	8011e58 <SetStatusLED>
 800d118:	e011      	b.n	800d13e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800d11a:	f003 ffab 	bl	8011074 <micSettlingComplete>
 800d11e:	1e03      	subs	r3, r0, #0
 800d120:	d00d      	beq.n	800d13e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800d122:	4b25      	ldr	r3, [pc, #148]	@ (800d1b8 <Device_Test+0xdc>)
 800d124:	2201      	movs	r2, #1
 800d126:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800d128:	f004 fe4e 	bl	8011dc8 <Calculate_LED_ON>
 800d12c:	0003      	movs	r3, r0
 800d12e:	0018      	movs	r0, r3
 800d130:	23fa      	movs	r3, #250	@ 0xfa
 800d132:	011a      	lsls	r2, r3, #4
 800d134:	23fa      	movs	r3, #250	@ 0xfa
 800d136:	011b      	lsls	r3, r3, #4
 800d138:	0019      	movs	r1, r3
 800d13a:	f004 fe8d 	bl	8011e58 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800d13e:	4b1d      	ldr	r3, [pc, #116]	@ (800d1b4 <Device_Test+0xd8>)
 800d140:	79db      	ldrb	r3, [r3, #7]
 800d142:	2201      	movs	r2, #1
 800d144:	4053      	eors	r3, r2
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d001      	beq.n	800d150 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800d14c:	f7fa f810 	bl	8007170 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800d150:	4b18      	ldr	r3, [pc, #96]	@ (800d1b4 <Device_Test+0xd8>)
 800d152:	79db      	ldrb	r3, [r3, #7]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <Device_Test+0x84>
 800d158:	4b16      	ldr	r3, [pc, #88]	@ (800d1b4 <Device_Test+0xd8>)
 800d15a:	799b      	ldrb	r3, [r3, #6]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d106      	bne.n	800d16e <Device_Test+0x92>
 800d160:	4b16      	ldr	r3, [pc, #88]	@ (800d1bc <Device_Test+0xe0>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	0018      	movs	r0, r3
 800d166:	f006 f92d 	bl	80133c4 <TimestampIsReached>
 800d16a:	1e03      	subs	r3, r0, #0
 800d16c:	d01f      	beq.n	800d1ae <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800d16e:	4b11      	ldr	r3, [pc, #68]	@ (800d1b4 <Device_Test+0xd8>)
 800d170:	79db      	ldrb	r3, [r3, #7]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <Device_Test+0x9e>
 800d176:	4b12      	ldr	r3, [pc, #72]	@ (800d1c0 <Device_Test+0xe4>)
 800d178:	e000      	b.n	800d17c <Device_Test+0xa0>
 800d17a:	4b12      	ldr	r3, [pc, #72]	@ (800d1c4 <Device_Test+0xe8>)
 800d17c:	4a12      	ldr	r2, [pc, #72]	@ (800d1c8 <Device_Test+0xec>)
 800d17e:	4913      	ldr	r1, [pc, #76]	@ (800d1cc <Device_Test+0xf0>)
 800d180:	2002      	movs	r0, #2
 800d182:	f006 f975 	bl	8013470 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800d186:	4b0b      	ldr	r3, [pc, #44]	@ (800d1b4 <Device_Test+0xd8>)
 800d188:	799b      	ldrb	r3, [r3, #6]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <Device_Test+0xb6>
 800d18e:	4b0c      	ldr	r3, [pc, #48]	@ (800d1c0 <Device_Test+0xe4>)
 800d190:	e000      	b.n	800d194 <Device_Test+0xb8>
 800d192:	4b0c      	ldr	r3, [pc, #48]	@ (800d1c4 <Device_Test+0xe8>)
 800d194:	4a0e      	ldr	r2, [pc, #56]	@ (800d1d0 <Device_Test+0xf4>)
 800d196:	490d      	ldr	r1, [pc, #52]	@ (800d1cc <Device_Test+0xf0>)
 800d198:	2002      	movs	r0, #2
 800d19a:	f006 f969 	bl	8013470 <CreateLine>
    Info("Test completed");
 800d19e:	4a0d      	ldr	r2, [pc, #52]	@ (800d1d4 <Device_Test+0xf8>)
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d1cc <Device_Test+0xf0>)
 800d1a2:	0019      	movs	r1, r3
 800d1a4:	2002      	movs	r0, #2
 800d1a6:	f006 f963 	bl	8013470 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800d1aa:	f7ff f8af 	bl	800c30c <SetTestDone>
  }
}
 800d1ae:	46c0      	nop			@ (mov r8, r8)
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	20000e48 	.word	0x20000e48
 800d1b8:	20000e40 	.word	0x20000e40
 800d1bc:	20000e38 	.word	0x20000e38
 800d1c0:	0802cdf8 	.word	0x0802cdf8
 800d1c4:	0802ce00 	.word	0x0802ce00
 800d1c8:	0802ce08 	.word	0x0802ce08
 800d1cc:	0802cc14 	.word	0x0802cc14
 800d1d0:	0802ce1c 	.word	0x0802ce1c
 800d1d4:	0802ce30 	.word	0x0802ce30

0800d1d8 <AllDevicesReady>:

bool AllDevicesReady() {
 800d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1da:	46de      	mov	lr, fp
 800d1dc:	4657      	mov	r7, sl
 800d1de:	464e      	mov	r6, r9
 800d1e0:	4645      	mov	r5, r8
 800d1e2:	b5e0      	push	{r5, r6, r7, lr}
 800d1e4:	b08b      	sub	sp, #44	@ 0x2c
 800d1e6:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  if (TimestampIsReached(deviceTimeOut)) {
 800d1e8:	4b75      	ldr	r3, [pc, #468]	@ (800d3c0 <AllDevicesReady+0x1e8>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	f006 f8e9 	bl	80133c4 <TimestampIsReached>
 800d1f2:	1e03      	subs	r3, r0, #0
 800d1f4:	d100      	bne.n	800d1f8 <AllDevicesReady+0x20>
 800d1f6:	e0d9      	b.n	800d3ac <AllDevicesReady+0x1d4>
    if (!sensorsdisablereq) {
 800d1f8:	4b72      	ldr	r3, [pc, #456]	@ (800d3c4 <AllDevicesReady+0x1ec>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	4053      	eors	r3, r2
 800d200:	b2db      	uxtb	r3, r3
 800d202:	2b00      	cmp	r3, #0
 800d204:	d008      	beq.n	800d218 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800d206:	4a70      	ldr	r2, [pc, #448]	@ (800d3c8 <AllDevicesReady+0x1f0>)
 800d208:	4b70      	ldr	r3, [pc, #448]	@ (800d3cc <AllDevicesReady+0x1f4>)
 800d20a:	0019      	movs	r1, r3
 800d20c:	2003      	movs	r0, #3
 800d20e:	f006 f92f 	bl	8013470 <CreateLine>
      sensorsdisablereq = true;
 800d212:	4b6c      	ldr	r3, [pc, #432]	@ (800d3c4 <AllDevicesReady+0x1ec>)
 800d214:	2201      	movs	r2, #1
 800d216:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800d218:	4b6d      	ldr	r3, [pc, #436]	@ (800d3d0 <AllDevicesReady+0x1f8>)
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	2b06      	cmp	r3, #6
 800d21e:	d102      	bne.n	800d226 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800d220:	4b6c      	ldr	r3, [pc, #432]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d222:	2200      	movs	r2, #0
 800d224:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800d226:	4b6c      	ldr	r3, [pc, #432]	@ (800d3d8 <AllDevicesReady+0x200>)
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b05      	cmp	r3, #5
 800d22c:	d006      	beq.n	800d23c <AllDevicesReady+0x64>
 800d22e:	4b6b      	ldr	r3, [pc, #428]	@ (800d3dc <AllDevicesReady+0x204>)
 800d230:	789b      	ldrb	r3, [r3, #2]
 800d232:	2201      	movs	r2, #1
 800d234:	4053      	eors	r3, r2
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800d23c:	4b65      	ldr	r3, [pc, #404]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d23e:	2200      	movs	r2, #0
 800d240:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800d242:	4b67      	ldr	r3, [pc, #412]	@ (800d3e0 <AllDevicesReady+0x208>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b08      	cmp	r3, #8
 800d248:	d006      	beq.n	800d258 <AllDevicesReady+0x80>
 800d24a:	4b64      	ldr	r3, [pc, #400]	@ (800d3dc <AllDevicesReady+0x204>)
 800d24c:	791b      	ldrb	r3, [r3, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	4053      	eors	r3, r2
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800d258:	4b5e      	ldr	r3, [pc, #376]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800d25e:	4b61      	ldr	r3, [pc, #388]	@ (800d3e4 <AllDevicesReady+0x20c>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	2b08      	cmp	r3, #8
 800d264:	d006      	beq.n	800d274 <AllDevicesReady+0x9c>
 800d266:	4b5d      	ldr	r3, [pc, #372]	@ (800d3dc <AllDevicesReady+0x204>)
 800d268:	78db      	ldrb	r3, [r3, #3]
 800d26a:	2201      	movs	r2, #1
 800d26c:	4053      	eors	r3, r2
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800d274:	4b57      	ldr	r3, [pc, #348]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d276:	2200      	movs	r2, #0
 800d278:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800d27a:	4b5b      	ldr	r3, [pc, #364]	@ (800d3e8 <AllDevicesReady+0x210>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b07      	cmp	r3, #7
 800d280:	d006      	beq.n	800d290 <AllDevicesReady+0xb8>
 800d282:	4b56      	ldr	r3, [pc, #344]	@ (800d3dc <AllDevicesReady+0x204>)
 800d284:	7a1b      	ldrb	r3, [r3, #8]
 800d286:	2201      	movs	r2, #1
 800d288:	4053      	eors	r3, r2
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800d290:	4b50      	ldr	r3, [pc, #320]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d292:	2200      	movs	r2, #0
 800d294:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800d296:	4b55      	ldr	r3, [pc, #340]	@ (800d3ec <AllDevicesReady+0x214>)
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d003      	beq.n	800d2a6 <AllDevicesReady+0xce>
 800d29e:	4b53      	ldr	r3, [pc, #332]	@ (800d3ec <AllDevicesReady+0x214>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b03      	cmp	r3, #3
 800d2a4:	d102      	bne.n	800d2ac <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800d2a6:	4b4b      	ldr	r3, [pc, #300]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800d2ac:	4b50      	ldr	r3, [pc, #320]	@ (800d3f0 <AllDevicesReady+0x218>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d102      	bne.n	800d2ba <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800d2b4:	4b47      	ldr	r3, [pc, #284]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800d2ba:	4b4e      	ldr	r3, [pc, #312]	@ (800d3f4 <AllDevicesReady+0x21c>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	2b09      	cmp	r3, #9
 800d2c0:	d003      	beq.n	800d2ca <AllDevicesReady+0xf2>
 800d2c2:	4b4c      	ldr	r3, [pc, #304]	@ (800d3f4 <AllDevicesReady+0x21c>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d170      	bne.n	800d3ac <AllDevicesReady+0x1d4>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d2ca:	4b42      	ldr	r3, [pc, #264]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2cc:	781a      	ldrb	r2, [r3, #0]
 800d2ce:	4b41      	ldr	r3, [pc, #260]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2d0:	785b      	ldrb	r3, [r3, #1]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	4b3f      	ldr	r3, [pc, #252]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2d8:	791b      	ldrb	r3, [r3, #4]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	4b3d      	ldr	r3, [pc, #244]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2e0:	795b      	ldrb	r3, [r3, #5]
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800d2e6:	4b3b      	ldr	r3, [pc, #236]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2e8:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800d2ee:	4b39      	ldr	r3, [pc, #228]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2f0:	789b      	ldrb	r3, [r3, #2]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	4b37      	ldr	r3, [pc, #220]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d2f8:	78db      	ldrb	r3, [r3, #3]
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	1e5a      	subs	r2, r3, #1
 800d300:	4193      	sbcs	r3, r2
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2201      	movs	r2, #1
 800d306:	4053      	eors	r3, r2
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d30c:	1dfb      	adds	r3, r7, #7
 800d30e:	701a      	strb	r2, [r3, #0]
 800d310:	781a      	ldrb	r2, [r3, #0]
 800d312:	2101      	movs	r1, #1
 800d314:	400a      	ands	r2, r1
 800d316:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status)) {
 800d318:	1dfb      	adds	r3, r7, #7
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2201      	movs	r2, #1
 800d31e:	4053      	eors	r3, r2
 800d320:	b2db      	uxtb	r3, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	d031      	beq.n	800d38a <AllDevicesReady+0x1b2>
 800d326:	4b34      	ldr	r3, [pc, #208]	@ (800d3f8 <AllDevicesReady+0x220>)
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	1dfa      	adds	r2, r7, #7
 800d32c:	7812      	ldrb	r2, [r2, #0]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d02b      	beq.n	800d38a <AllDevicesReady+0x1b2>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800d332:	4b28      	ldr	r3, [pc, #160]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	469b      	mov	fp, r3
 800d338:	4b26      	ldr	r3, [pc, #152]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d33a:	791b      	ldrb	r3, [r3, #4]
 800d33c:	001c      	movs	r4, r3
 800d33e:	4b25      	ldr	r3, [pc, #148]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d340:	795b      	ldrb	r3, [r3, #5]
 800d342:	001d      	movs	r5, r3
 800d344:	4b23      	ldr	r3, [pc, #140]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d346:	799b      	ldrb	r3, [r3, #6]
 800d348:	001e      	movs	r6, r3
 800d34a:	4b22      	ldr	r3, [pc, #136]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d34c:	785b      	ldrb	r3, [r3, #1]
 800d34e:	4698      	mov	r8, r3
 800d350:	4b20      	ldr	r3, [pc, #128]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d352:	789b      	ldrb	r3, [r3, #2]
 800d354:	4699      	mov	r9, r3
 800d356:	4b1f      	ldr	r3, [pc, #124]	@ (800d3d4 <AllDevicesReady+0x1fc>)
 800d358:	78db      	ldrb	r3, [r3, #3]
 800d35a:	469a      	mov	sl, r3
 800d35c:	f000 f8ec 	bl	800d538 <getSensorLock>
 800d360:	0003      	movs	r3, r0
 800d362:	4a26      	ldr	r2, [pc, #152]	@ (800d3fc <AllDevicesReady+0x224>)
 800d364:	4919      	ldr	r1, [pc, #100]	@ (800d3cc <AllDevicesReady+0x1f4>)
 800d366:	9306      	str	r3, [sp, #24]
 800d368:	4653      	mov	r3, sl
 800d36a:	9305      	str	r3, [sp, #20]
 800d36c:	464b      	mov	r3, r9
 800d36e:	9304      	str	r3, [sp, #16]
 800d370:	4643      	mov	r3, r8
 800d372:	9303      	str	r3, [sp, #12]
 800d374:	9602      	str	r6, [sp, #8]
 800d376:	9501      	str	r5, [sp, #4]
 800d378:	9400      	str	r4, [sp, #0]
 800d37a:	465b      	mov	r3, fp
 800d37c:	2003      	movs	r0, #3
 800d37e:	f006 f877 	bl	8013470 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800d382:	4b1d      	ldr	r3, [pc, #116]	@ (800d3f8 <AllDevicesReady+0x220>)
 800d384:	1dfa      	adds	r2, r7, #7
 800d386:	7812      	ldrb	r2, [r2, #0]
 800d388:	701a      	strb	r2, [r3, #0]
      }
      if (status) {
 800d38a:	1dfb      	adds	r3, r7, #7
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d009      	beq.n	800d3a6 <AllDevicesReady+0x1ce>
        Debug("All sensors in wait");
 800d392:	4a1b      	ldr	r2, [pc, #108]	@ (800d400 <AllDevicesReady+0x228>)
 800d394:	4b0d      	ldr	r3, [pc, #52]	@ (800d3cc <AllDevicesReady+0x1f4>)
 800d396:	0019      	movs	r1, r3
 800d398:	2003      	movs	r0, #3
 800d39a:	f006 f869 	bl	8013470 <CreateLine>
        prevstatus = status;
 800d39e:	4b16      	ldr	r3, [pc, #88]	@ (800d3f8 <AllDevicesReady+0x220>)
 800d3a0:	1dfa      	adds	r2, r7, #7
 800d3a2:	7812      	ldrb	r2, [r2, #0]
 800d3a4:	701a      	strb	r2, [r3, #0]
      }
      return status;
 800d3a6:	1dfb      	adds	r3, r7, #7
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	e000      	b.n	800d3ae <AllDevicesReady+0x1d6>
    }
  }
  return false;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	b003      	add	sp, #12
 800d3b4:	bcf0      	pop	{r4, r5, r6, r7}
 800d3b6:	46bb      	mov	fp, r7
 800d3b8:	46b2      	mov	sl, r6
 800d3ba:	46a9      	mov	r9, r5
 800d3bc:	46a0      	mov	r8, r4
 800d3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3c0:	20000e38 	.word	0x20000e38
 800d3c4:	20000e57 	.word	0x20000e57
 800d3c8:	0802ce40 	.word	0x0802ce40
 800d3cc:	0802ca58 	.word	0x0802ca58
 800d3d0:	20000e53 	.word	0x20000e53
 800d3d4:	20000e40 	.word	0x20000e40
 800d3d8:	20000e54 	.word	0x20000e54
 800d3dc:	20000e48 	.word	0x20000e48
 800d3e0:	20000e55 	.word	0x20000e55
 800d3e4:	20000e56 	.word	0x20000e56
 800d3e8:	20000e52 	.word	0x20000e52
 800d3ec:	200000a2 	.word	0x200000a2
 800d3f0:	20000e24 	.word	0x20000e24
 800d3f4:	20000e25 	.word	0x20000e25
 800d3f8:	200000a0 	.word	0x200000a0
 800d3fc:	0802ce60 	.word	0x0802ce60
 800d400:	0802cec4 	.word	0x0802cec4

0800d404 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800d404:	b580      	push	{r7, lr}
 800d406:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800d408:	4b25      	ldr	r3, [pc, #148]	@ (800d4a0 <EnabledConnectedDevices+0x9c>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800d410:	4b24      	ldr	r3, [pc, #144]	@ (800d4a4 <EnabledConnectedDevices+0xa0>)
 800d412:	2201      	movs	r2, #1
 800d414:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState = AHT_STATE_OFF)) {
 800d416:	4b22      	ldr	r3, [pc, #136]	@ (800d4a0 <EnabledConnectedDevices+0x9c>)
 800d418:	789b      	ldrb	r3, [r3, #2]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <EnabledConnectedDevices+0x20>
 800d41e:	4b22      	ldr	r3, [pc, #136]	@ (800d4a8 <EnabledConnectedDevices+0xa4>)
 800d420:	2200      	movs	r2, #0
 800d422:	701a      	strb	r2, [r3, #0]
    Sensor.AHT_measurementEnabled = true;
  }
  if ((SensorProbe.BMP280_Present) && (BMPState != BMP_STATE_OFF)) {
 800d424:	4b1e      	ldr	r3, [pc, #120]	@ (800d4a0 <EnabledConnectedDevices+0x9c>)
 800d426:	791b      	ldrb	r3, [r3, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d006      	beq.n	800d43a <EnabledConnectedDevices+0x36>
 800d42c:	4b1f      	ldr	r3, [pc, #124]	@ (800d4ac <EnabledConnectedDevices+0xa8>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b06      	cmp	r3, #6
 800d432:	d002      	beq.n	800d43a <EnabledConnectedDevices+0x36>
    Sensor.BMP_measurementEnabled = true;
 800d434:	4b1b      	ldr	r3, [pc, #108]	@ (800d4a4 <EnabledConnectedDevices+0xa0>)
 800d436:	2201      	movs	r2, #1
 800d438:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800d43a:	4b19      	ldr	r3, [pc, #100]	@ (800d4a0 <EnabledConnectedDevices+0x9c>)
 800d43c:	78db      	ldrb	r3, [r3, #3]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d002      	beq.n	800d448 <EnabledConnectedDevices+0x44>
    Sensor.ENS_measurementEnabled = true;
 800d442:	4b18      	ldr	r3, [pc, #96]	@ (800d4a4 <EnabledConnectedDevices+0xa0>)
 800d444:	2201      	movs	r2, #1
 800d446:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800d448:	4b15      	ldr	r3, [pc, #84]	@ (800d4a0 <EnabledConnectedDevices+0x9c>)
 800d44a:	785b      	ldrb	r3, [r3, #1]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d006      	beq.n	800d45e <EnabledConnectedDevices+0x5a>
 800d450:	4b13      	ldr	r3, [pc, #76]	@ (800d4a0 <EnabledConnectedDevices+0x9c>)
 800d452:	7a1b      	ldrb	r3, [r3, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <EnabledConnectedDevices+0x5a>
    Sensor.VOC_measurementEnabled = true;
 800d458:	4b12      	ldr	r3, [pc, #72]	@ (800d4a4 <EnabledConnectedDevices+0xa0>)
 800d45a:	2201      	movs	r2, #1
 800d45c:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800d45e:	4b10      	ldr	r3, [pc, #64]	@ (800d4a0 <EnabledConnectedDevices+0x9c>)
 800d460:	795b      	ldrb	r3, [r3, #5]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <EnabledConnectedDevices+0x68>
    Sensor.PM_measurementEnabled = true;
 800d466:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a4 <EnabledConnectedDevices+0xa0>)
 800d468:	2201      	movs	r2, #1
 800d46a:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800d46c:	4b0c      	ldr	r3, [pc, #48]	@ (800d4a0 <EnabledConnectedDevices+0x9c>)
 800d46e:	799b      	ldrb	r3, [r3, #6]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d002      	beq.n	800d47a <EnabledConnectedDevices+0x76>
    Sensor.MIC_measurementEnabled = true;
 800d474:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a4 <EnabledConnectedDevices+0xa0>)
 800d476:	2201      	movs	r2, #1
 800d478:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800d47a:	f006 fd7b 	bl	8013f74 <HAL_GetTick>
 800d47e:	0003      	movs	r3, r0
 800d480:	4a0b      	ldr	r2, [pc, #44]	@ (800d4b0 <EnabledConnectedDevices+0xac>)
 800d482:	189a      	adds	r2, r3, r2
 800d484:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b4 <EnabledConnectedDevices+0xb0>)
 800d486:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800d488:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b8 <EnabledConnectedDevices+0xb4>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800d48e:	4a0b      	ldr	r2, [pc, #44]	@ (800d4bc <EnabledConnectedDevices+0xb8>)
 800d490:	4b0b      	ldr	r3, [pc, #44]	@ (800d4c0 <EnabledConnectedDevices+0xbc>)
 800d492:	0019      	movs	r1, r3
 800d494:	2003      	movs	r0, #3
 800d496:	f005 ffeb 	bl	8013470 <CreateLine>
}
 800d49a:	46c0      	nop			@ (mov r8, r8)
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	20000e48 	.word	0x20000e48
 800d4a4:	20000e40 	.word	0x20000e40
 800d4a8:	20000097 	.word	0x20000097
 800d4ac:	2000009a 	.word	0x2000009a
 800d4b0:	00124f80 	.word	0x00124f80
 800d4b4:	20000e38 	.word	0x20000e38
 800d4b8:	20000e57 	.word	0x20000e57
 800d4bc:	0802ced8 	.word	0x0802ced8
 800d4c0:	0802ca58 	.word	0x0802ca58

0800d4c4 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800d4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d504 <DisableConnectedDevices+0x40>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <DisableConnectedDevices+0x40>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800d4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d504 <DisableConnectedDevices+0x40>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800d4da:	4b0a      	ldr	r3, [pc, #40]	@ (800d504 <DisableConnectedDevices+0x40>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800d4e0:	4b08      	ldr	r3, [pc, #32]	@ (800d504 <DisableConnectedDevices+0x40>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800d4e6:	4b07      	ldr	r3, [pc, #28]	@ (800d504 <DisableConnectedDevices+0x40>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800d4ec:	4b05      	ldr	r3, [pc, #20]	@ (800d504 <DisableConnectedDevices+0x40>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800d4f2:	4a05      	ldr	r2, [pc, #20]	@ (800d508 <DisableConnectedDevices+0x44>)
 800d4f4:	4b05      	ldr	r3, [pc, #20]	@ (800d50c <DisableConnectedDevices+0x48>)
 800d4f6:	0019      	movs	r1, r3
 800d4f8:	2003      	movs	r0, #3
 800d4fa:	f005 ffb9 	bl	8013470 <CreateLine>
}
 800d4fe:	46c0      	nop			@ (mov r8, r8)
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	20000e40 	.word	0x20000e40
 800d508:	0802cee8 	.word	0x0802cee8
 800d50c:	0802ca58 	.word	0x0802ca58

0800d510 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	0002      	movs	r2, r0
 800d518:	1dfb      	adds	r3, r7, #7
 800d51a:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800d51c:	4b05      	ldr	r3, [pc, #20]	@ (800d534 <setSensorLock+0x24>)
 800d51e:	1dfa      	adds	r2, r7, #7
 800d520:	7812      	ldrb	r2, [r2, #0]
 800d522:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800d524:	200a      	movs	r0, #10
 800d526:	f006 fd2f 	bl	8013f88 <HAL_Delay>
}
 800d52a:	46c0      	nop			@ (mov r8, r8)
 800d52c:	46bd      	mov	sp, r7
 800d52e:	b002      	add	sp, #8
 800d530:	bd80      	pop	{r7, pc}
 800d532:	46c0      	nop			@ (mov r8, r8)
 800d534:	20000e51 	.word	0x20000e51

0800d538 <getSensorLock>:

uint8_t getSensorLock() {
 800d538:	b580      	push	{r7, lr}
 800d53a:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800d53c:	4b02      	ldr	r3, [pc, #8]	@ (800d548 <getSensorLock+0x10>)
 800d53e:	781b      	ldrb	r3, [r3, #0]
}
 800d540:	0018      	movs	r0, r3
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	46c0      	nop			@ (mov r8, r8)
 800d548:	20000e51 	.word	0x20000e51

0800d54c <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800d54c:	b580      	push	{r7, lr}
 800d54e:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800d550:	4b1a      	ldr	r3, [pc, #104]	@ (800d5bc <UpkeepI2Csensors+0x70>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d005      	beq.n	800d564 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800d558:	f006 fb8a 	bl	8013c70 <HIDS_Upkeep>
 800d55c:	0003      	movs	r3, r0
 800d55e:	001a      	movs	r2, r3
 800d560:	4b17      	ldr	r3, [pc, #92]	@ (800d5c0 <UpkeepI2Csensors+0x74>)
 800d562:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800d564:	4b15      	ldr	r3, [pc, #84]	@ (800d5bc <UpkeepI2Csensors+0x70>)
 800d566:	785b      	ldrb	r3, [r3, #1]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d005      	beq.n	800d578 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800d56c:	f003 fb7c 	bl	8010c68 <SGP_Upkeep>
 800d570:	0003      	movs	r3, r0
 800d572:	001a      	movs	r2, r3
 800d574:	4b13      	ldr	r3, [pc, #76]	@ (800d5c4 <UpkeepI2Csensors+0x78>)
 800d576:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800d578:	4b10      	ldr	r3, [pc, #64]	@ (800d5bc <UpkeepI2Csensors+0x70>)
 800d57a:	791b      	ldrb	r3, [r3, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d005      	beq.n	800d58c <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800d580:	f7fd f9ce 	bl	800a920 <AHT_Upkeep>
 800d584:	0003      	movs	r3, r0
 800d586:	001a      	movs	r2, r3
 800d588:	4b0f      	ldr	r3, [pc, #60]	@ (800d5c8 <UpkeepI2Csensors+0x7c>)
 800d58a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800d58c:	4b0b      	ldr	r3, [pc, #44]	@ (800d5bc <UpkeepI2Csensors+0x70>)
 800d58e:	795b      	ldrb	r3, [r3, #5]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d005      	beq.n	800d5a0 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800d594:	f7fd ff76 	bl	800b484 <BMP_Upkeep>
 800d598:	0003      	movs	r3, r0
 800d59a:	001a      	movs	r2, r3
 800d59c:	4b0b      	ldr	r3, [pc, #44]	@ (800d5cc <UpkeepI2Csensors+0x80>)
 800d59e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800d5a0:	4b06      	ldr	r3, [pc, #24]	@ (800d5bc <UpkeepI2Csensors+0x70>)
 800d5a2:	799b      	ldrb	r3, [r3, #6]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d005      	beq.n	800d5b4 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800d5a8:	f7f6 ff56 	bl	8004458 <ENS_Upkeep>
 800d5ac:	0003      	movs	r3, r0
 800d5ae:	001a      	movs	r2, r3
 800d5b0:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <UpkeepI2Csensors+0x84>)
 800d5b2:	701a      	strb	r2, [r3, #0]
  }
}
 800d5b4:	46c0      	nop			@ (mov r8, r8)
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	46c0      	nop			@ (mov r8, r8)
 800d5bc:	20000e40 	.word	0x20000e40
 800d5c0:	20000e53 	.word	0x20000e53
 800d5c4:	20000e52 	.word	0x20000e52
 800d5c8:	20000e54 	.word	0x20000e54
 800d5cc:	20000e55 	.word	0x20000e55
 800d5d0:	20000e56 	.word	0x20000e56

0800d5d4 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800d5d8:	4b02      	ldr	r3, [pc, #8]	@ (800d5e4 <ResetdBAmax+0x10>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]
}
 800d5de:	46c0      	nop			@ (mov r8, r8)
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	20000e9c 	.word	0x20000e9c

0800d5e8 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800d5f0:	f006 fcc0 	bl	8013f74 <HAL_GetTick>
 800d5f4:	0002      	movs	r2, r0
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	18d2      	adds	r2, r2, r3
 800d5fa:	4b03      	ldr	r3, [pc, #12]	@ (800d608 <setMICTimeStamp+0x20>)
 800d5fc:	601a      	str	r2, [r3, #0]
}
 800d5fe:	46c0      	nop			@ (mov r8, r8)
 800d600:	46bd      	mov	sp, r7
 800d602:	b002      	add	sp, #8
 800d604:	bd80      	pop	{r7, pc}
 800d606:	46c0      	nop			@ (mov r8, r8)
 800d608:	20000ea4 	.word	0x20000ea4

0800d60c <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
  counter = 0;
 800d610:	4b05      	ldr	r3, [pc, #20]	@ (800d628 <ResetDBACalculator+0x1c>)
 800d612:	2200      	movs	r2, #0
 800d614:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800d616:	4b05      	ldr	r3, [pc, #20]	@ (800d62c <ResetDBACalculator+0x20>)
 800d618:	2201      	movs	r2, #1
 800d61a:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800d61c:	4b04      	ldr	r3, [pc, #16]	@ (800d630 <ResetDBACalculator+0x24>)
 800d61e:	2200      	movs	r2, #0
 800d620:	701a      	strb	r2, [r3, #0]
}
 800d622:	46c0      	nop			@ (mov r8, r8)
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20000ea0 	.word	0x20000ea0
 800d62c:	200000a1 	.word	0x200000a1
 800d630:	20000ea1 	.word	0x20000ea1

0800d634 <MIC_Print>:

void MIC_Print(void) {
 800d634:	b5b0      	push	{r4, r5, r7, lr}
 800d636:	b08a      	sub	sp, #40	@ 0x28
 800d638:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800d63a:	4b9f      	ldr	r3, [pc, #636]	@ (800d8b8 <MIC_Print+0x284>)
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	4b9f      	ldr	r3, [pc, #636]	@ (800d8bc <MIC_Print+0x288>)
 800d640:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800d642:	4b9f      	ldr	r3, [pc, #636]	@ (800d8c0 <MIC_Print+0x28c>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	001a      	movs	r2, r3
 800d648:	4b9c      	ldr	r3, [pc, #624]	@ (800d8bc <MIC_Print+0x288>)
 800d64a:	6819      	ldr	r1, [r3, #0]
 800d64c:	4b9d      	ldr	r3, [pc, #628]	@ (800d8c4 <MIC_Print+0x290>)
 800d64e:	0092      	lsls	r2, r2, #2
 800d650:	50d1      	str	r1, [r2, r3]
  counter++;
 800d652:	4b9b      	ldr	r3, [pc, #620]	@ (800d8c0 <MIC_Print+0x28c>)
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	3301      	adds	r3, #1
 800d658:	b2da      	uxtb	r2, r3
 800d65a:	4b99      	ldr	r3, [pc, #612]	@ (800d8c0 <MIC_Print+0x28c>)
 800d65c:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800d65e:	4b98      	ldr	r3, [pc, #608]	@ (800d8c0 <MIC_Print+0x28c>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2b09      	cmp	r3, #9
 800d664:	d80b      	bhi.n	800d67e <MIC_Print+0x4a>
 800d666:	4b98      	ldr	r3, [pc, #608]	@ (800d8c8 <MIC_Print+0x294>)
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2201      	movs	r2, #1
 800d66c:	4053      	eors	r3, r2
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d004      	beq.n	800d67e <MIC_Print+0x4a>
    denominator = counter;
 800d674:	4b92      	ldr	r3, [pc, #584]	@ (800d8c0 <MIC_Print+0x28c>)
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	4b94      	ldr	r3, [pc, #592]	@ (800d8cc <MIC_Print+0x298>)
 800d67a:	701a      	strb	r2, [r3, #0]
 800d67c:	e005      	b.n	800d68a <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800d67e:	4b93      	ldr	r3, [pc, #588]	@ (800d8cc <MIC_Print+0x298>)
 800d680:	220a      	movs	r2, #10
 800d682:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800d684:	4b90      	ldr	r3, [pc, #576]	@ (800d8c8 <MIC_Print+0x294>)
 800d686:	2201      	movs	r2, #1
 800d688:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800d68a:	4b91      	ldr	r3, [pc, #580]	@ (800d8d0 <MIC_Print+0x29c>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800d690:	230f      	movs	r3, #15
 800d692:	18fb      	adds	r3, r7, r3
 800d694:	2200      	movs	r2, #0
 800d696:	701a      	strb	r2, [r3, #0]
 800d698:	e042      	b.n	800d720 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800d69a:	240f      	movs	r4, #15
 800d69c:	193b      	adds	r3, r7, r4
 800d69e:	781a      	ldrb	r2, [r3, #0]
 800d6a0:	4b88      	ldr	r3, [pc, #544]	@ (800d8c4 <MIC_Print+0x290>)
 800d6a2:	0092      	lsls	r2, r2, #2
 800d6a4:	58d2      	ldr	r2, [r2, r3]
 800d6a6:	4b8a      	ldr	r3, [pc, #552]	@ (800d8d0 <MIC_Print+0x29c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	1c19      	adds	r1, r3, #0
 800d6ac:	1c10      	adds	r0, r2, #0
 800d6ae:	f7f3 f907 	bl	80008c0 <__aeabi_fadd>
 800d6b2:	1c03      	adds	r3, r0, #0
 800d6b4:	1c1a      	adds	r2, r3, #0
 800d6b6:	4b86      	ldr	r3, [pc, #536]	@ (800d8d0 <MIC_Print+0x29c>)
 800d6b8:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800d6ba:	193b      	adds	r3, r7, r4
 800d6bc:	781a      	ldrb	r2, [r3, #0]
 800d6be:	4b81      	ldr	r3, [pc, #516]	@ (800d8c4 <MIC_Print+0x290>)
 800d6c0:	0092      	lsls	r2, r2, #2
 800d6c2:	58d2      	ldr	r2, [r2, r3]
 800d6c4:	4b83      	ldr	r3, [pc, #524]	@ (800d8d4 <MIC_Print+0x2a0>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	1c19      	adds	r1, r3, #0
 800d6ca:	1c10      	adds	r0, r2, #0
 800d6cc:	f7f2 ff44 	bl	8000558 <__aeabi_fcmpgt>
 800d6d0:	1e03      	subs	r3, r0, #0
 800d6d2:	d006      	beq.n	800d6e2 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800d6d4:	193b      	adds	r3, r7, r4
 800d6d6:	781a      	ldrb	r2, [r3, #0]
 800d6d8:	4b7a      	ldr	r3, [pc, #488]	@ (800d8c4 <MIC_Print+0x290>)
 800d6da:	0092      	lsls	r2, r2, #2
 800d6dc:	58d2      	ldr	r2, [r2, r3]
 800d6de:	4b7d      	ldr	r3, [pc, #500]	@ (800d8d4 <MIC_Print+0x2a0>)
 800d6e0:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800d6e2:	4b7b      	ldr	r3, [pc, #492]	@ (800d8d0 <MIC_Print+0x29c>)
 800d6e4:	681c      	ldr	r4, [r3, #0]
 800d6e6:	4b79      	ldr	r3, [pc, #484]	@ (800d8cc <MIC_Print+0x298>)
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	0018      	movs	r0, r3
 800d6ec:	f7f4 f8ec 	bl	80018c8 <__aeabi_ui2f>
 800d6f0:	1c03      	adds	r3, r0, #0
 800d6f2:	1c19      	adds	r1, r3, #0
 800d6f4:	1c20      	adds	r0, r4, #0
 800d6f6:	f7f3 fad5 	bl	8000ca4 <__aeabi_fdiv>
 800d6fa:	1c03      	adds	r3, r0, #0
 800d6fc:	1c1a      	adds	r2, r3, #0
 800d6fe:	4b76      	ldr	r3, [pc, #472]	@ (800d8d8 <MIC_Print+0x2a4>)
 800d700:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800d702:	4b6e      	ldr	r3, [pc, #440]	@ (800d8bc <MIC_Print+0x288>)
 800d704:	6818      	ldr	r0, [r3, #0]
 800d706:	4b73      	ldr	r3, [pc, #460]	@ (800d8d4 <MIC_Print+0x2a0>)
 800d708:	6819      	ldr	r1, [r3, #0]
 800d70a:	4b73      	ldr	r3, [pc, #460]	@ (800d8d8 <MIC_Print+0x2a4>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	1c1a      	adds	r2, r3, #0
 800d710:	f7f7 fa2a 	bl	8004b68 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800d714:	210f      	movs	r1, #15
 800d716:	187b      	adds	r3, r7, r1
 800d718:	781a      	ldrb	r2, [r3, #0]
 800d71a:	187b      	adds	r3, r7, r1
 800d71c:	3201      	adds	r2, #1
 800d71e:	701a      	strb	r2, [r3, #0]
 800d720:	4b6a      	ldr	r3, [pc, #424]	@ (800d8cc <MIC_Print+0x298>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	220f      	movs	r2, #15
 800d726:	18ba      	adds	r2, r7, r2
 800d728:	7812      	ldrb	r2, [r2, #0]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d3b5      	bcc.n	800d69a <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800d72e:	4b63      	ldr	r3, [pc, #396]	@ (800d8bc <MIC_Print+0x288>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	1c18      	adds	r0, r3, #0
 800d734:	f7f6 f8ae 	bl	8003894 <__aeabi_f2d>
 800d738:	6038      	str	r0, [r7, #0]
 800d73a:	6079      	str	r1, [r7, #4]
 800d73c:	4b65      	ldr	r3, [pc, #404]	@ (800d8d4 <MIC_Print+0x2a0>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	1c18      	adds	r0, r3, #0
 800d742:	f7f6 f8a7 	bl	8003894 <__aeabi_f2d>
 800d746:	0004      	movs	r4, r0
 800d748:	000d      	movs	r5, r1
 800d74a:	4b63      	ldr	r3, [pc, #396]	@ (800d8d8 <MIC_Print+0x2a4>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	1c18      	adds	r0, r3, #0
 800d750:	f7f6 f8a0 	bl	8003894 <__aeabi_f2d>
 800d754:	0002      	movs	r2, r0
 800d756:	000b      	movs	r3, r1
 800d758:	4960      	ldr	r1, [pc, #384]	@ (800d8dc <MIC_Print+0x2a8>)
 800d75a:	9204      	str	r2, [sp, #16]
 800d75c:	9305      	str	r3, [sp, #20]
 800d75e:	9402      	str	r4, [sp, #8]
 800d760:	9503      	str	r5, [sp, #12]
 800d762:	4b5f      	ldr	r3, [pc, #380]	@ (800d8e0 <MIC_Print+0x2ac>)
 800d764:	9300      	str	r3, [sp, #0]
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	0008      	movs	r0, r1
 800d76c:	f018 f944 	bl	80259f8 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800d770:	4b53      	ldr	r3, [pc, #332]	@ (800d8c0 <MIC_Print+0x28c>)
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	2b0a      	cmp	r3, #10
 800d776:	d902      	bls.n	800d77e <MIC_Print+0x14a>
    counter = 0;
 800d778:	4b51      	ldr	r3, [pc, #324]	@ (800d8c0 <MIC_Print+0x28c>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800d77e:	4b4f      	ldr	r3, [pc, #316]	@ (800d8bc <MIC_Print+0x288>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4958      	ldr	r1, [pc, #352]	@ (800d8e4 <MIC_Print+0x2b0>)
 800d784:	1c18      	adds	r0, r3, #0
 800d786:	f7f2 fef1 	bl	800056c <__aeabi_fcmpge>
 800d78a:	1e03      	subs	r3, r0, #0
 800d78c:	d004      	beq.n	800d798 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800d78e:	2201      	movs	r2, #1
 800d790:	2101      	movs	r1, #1
 800d792:	2001      	movs	r0, #1
 800d794:	f004 fb94 	bl	8011ec0 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800d798:	4b48      	ldr	r3, [pc, #288]	@ (800d8bc <MIC_Print+0x288>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4952      	ldr	r1, [pc, #328]	@ (800d8e8 <MIC_Print+0x2b4>)
 800d79e:	1c18      	adds	r0, r3, #0
 800d7a0:	f7f2 fee4 	bl	800056c <__aeabi_fcmpge>
 800d7a4:	1e03      	subs	r3, r0, #0
 800d7a6:	d00c      	beq.n	800d7c2 <MIC_Print+0x18e>
 800d7a8:	4b44      	ldr	r3, [pc, #272]	@ (800d8bc <MIC_Print+0x288>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	494d      	ldr	r1, [pc, #308]	@ (800d8e4 <MIC_Print+0x2b0>)
 800d7ae:	1c18      	adds	r0, r3, #0
 800d7b0:	f7f2 febe 	bl	8000530 <__aeabi_fcmplt>
 800d7b4:	1e03      	subs	r3, r0, #0
 800d7b6:	d004      	beq.n	800d7c2 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	2001      	movs	r0, #1
 800d7be:	f004 fb7f 	bl	8011ec0 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800d7c2:	4b3e      	ldr	r3, [pc, #248]	@ (800d8bc <MIC_Print+0x288>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4949      	ldr	r1, [pc, #292]	@ (800d8ec <MIC_Print+0x2b8>)
 800d7c8:	1c18      	adds	r0, r3, #0
 800d7ca:	f7f2 fecf 	bl	800056c <__aeabi_fcmpge>
 800d7ce:	1e03      	subs	r3, r0, #0
 800d7d0:	d00c      	beq.n	800d7ec <MIC_Print+0x1b8>
 800d7d2:	4b3a      	ldr	r3, [pc, #232]	@ (800d8bc <MIC_Print+0x288>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4944      	ldr	r1, [pc, #272]	@ (800d8e8 <MIC_Print+0x2b4>)
 800d7d8:	1c18      	adds	r0, r3, #0
 800d7da:	f7f2 fea9 	bl	8000530 <__aeabi_fcmplt>
 800d7de:	1e03      	subs	r3, r0, #0
 800d7e0:	d004      	beq.n	800d7ec <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	f004 fb6a 	bl	8011ec0 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800d7ec:	4b33      	ldr	r3, [pc, #204]	@ (800d8bc <MIC_Print+0x288>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	493f      	ldr	r1, [pc, #252]	@ (800d8f0 <MIC_Print+0x2bc>)
 800d7f2:	1c18      	adds	r0, r3, #0
 800d7f4:	f7f2 feba 	bl	800056c <__aeabi_fcmpge>
 800d7f8:	1e03      	subs	r3, r0, #0
 800d7fa:	d00c      	beq.n	800d816 <MIC_Print+0x1e2>
 800d7fc:	4b2f      	ldr	r3, [pc, #188]	@ (800d8bc <MIC_Print+0x288>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	493a      	ldr	r1, [pc, #232]	@ (800d8ec <MIC_Print+0x2b8>)
 800d802:	1c18      	adds	r0, r3, #0
 800d804:	f7f2 fe94 	bl	8000530 <__aeabi_fcmplt>
 800d808:	1e03      	subs	r3, r0, #0
 800d80a:	d004      	beq.n	800d816 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800d80c:	2200      	movs	r2, #0
 800d80e:	2101      	movs	r1, #1
 800d810:	2000      	movs	r0, #0
 800d812:	f004 fb55 	bl	8011ec0 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800d816:	4b29      	ldr	r3, [pc, #164]	@ (800d8bc <MIC_Print+0x288>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4936      	ldr	r1, [pc, #216]	@ (800d8f4 <MIC_Print+0x2c0>)
 800d81c:	1c18      	adds	r0, r3, #0
 800d81e:	f7f2 fea5 	bl	800056c <__aeabi_fcmpge>
 800d822:	1e03      	subs	r3, r0, #0
 800d824:	d00c      	beq.n	800d840 <MIC_Print+0x20c>
 800d826:	4b25      	ldr	r3, [pc, #148]	@ (800d8bc <MIC_Print+0x288>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4931      	ldr	r1, [pc, #196]	@ (800d8f0 <MIC_Print+0x2bc>)
 800d82c:	1c18      	adds	r0, r3, #0
 800d82e:	f7f2 fe7f 	bl	8000530 <__aeabi_fcmplt>
 800d832:	1e03      	subs	r3, r0, #0
 800d834:	d004      	beq.n	800d840 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800d836:	2201      	movs	r2, #1
 800d838:	2101      	movs	r1, #1
 800d83a:	2000      	movs	r0, #0
 800d83c:	f004 fb40 	bl	8011ec0 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800d840:	4b1e      	ldr	r3, [pc, #120]	@ (800d8bc <MIC_Print+0x288>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	492c      	ldr	r1, [pc, #176]	@ (800d8f8 <MIC_Print+0x2c4>)
 800d846:	1c18      	adds	r0, r3, #0
 800d848:	f7f2 fe90 	bl	800056c <__aeabi_fcmpge>
 800d84c:	1e03      	subs	r3, r0, #0
 800d84e:	d00c      	beq.n	800d86a <MIC_Print+0x236>
 800d850:	4b1a      	ldr	r3, [pc, #104]	@ (800d8bc <MIC_Print+0x288>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4927      	ldr	r1, [pc, #156]	@ (800d8f4 <MIC_Print+0x2c0>)
 800d856:	1c18      	adds	r0, r3, #0
 800d858:	f7f2 fe6a 	bl	8000530 <__aeabi_fcmplt>
 800d85c:	1e03      	subs	r3, r0, #0
 800d85e:	d004      	beq.n	800d86a <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800d860:	2201      	movs	r2, #1
 800d862:	2100      	movs	r1, #0
 800d864:	2000      	movs	r0, #0
 800d866:	f004 fb2b 	bl	8011ec0 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800d86a:	4b14      	ldr	r3, [pc, #80]	@ (800d8bc <MIC_Print+0x288>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4923      	ldr	r1, [pc, #140]	@ (800d8fc <MIC_Print+0x2c8>)
 800d870:	1c18      	adds	r0, r3, #0
 800d872:	f7f2 fe7b 	bl	800056c <__aeabi_fcmpge>
 800d876:	1e03      	subs	r3, r0, #0
 800d878:	d00c      	beq.n	800d894 <MIC_Print+0x260>
 800d87a:	4b10      	ldr	r3, [pc, #64]	@ (800d8bc <MIC_Print+0x288>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	491e      	ldr	r1, [pc, #120]	@ (800d8f8 <MIC_Print+0x2c4>)
 800d880:	1c18      	adds	r0, r3, #0
 800d882:	f7f2 fe55 	bl	8000530 <__aeabi_fcmplt>
 800d886:	1e03      	subs	r3, r0, #0
 800d888:	d004      	beq.n	800d894 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800d88a:	2201      	movs	r2, #1
 800d88c:	2100      	movs	r1, #0
 800d88e:	2001      	movs	r0, #1
 800d890:	f004 fb16 	bl	8011ec0 <SetDBLED>
  }
  if(dBA < 35){//off
 800d894:	4b09      	ldr	r3, [pc, #36]	@ (800d8bc <MIC_Print+0x288>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4918      	ldr	r1, [pc, #96]	@ (800d8fc <MIC_Print+0x2c8>)
 800d89a:	1c18      	adds	r0, r3, #0
 800d89c:	f7f2 fe48 	bl	8000530 <__aeabi_fcmplt>
 800d8a0:	1e03      	subs	r3, r0, #0
 800d8a2:	d100      	bne.n	800d8a6 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800d8a4:	e004      	b.n	800d8b0 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	f004 fb08 	bl	8011ec0 <SetDBLED>
}
 800d8b0:	46c0      	nop			@ (mov r8, r8)
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	b004      	add	sp, #16
 800d8b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d8b8:	20000e98 	.word	0x20000e98
 800d8bc:	20000e64 	.word	0x20000e64
 800d8c0:	20000ea0 	.word	0x20000ea0
 800d8c4:	20000e68 	.word	0x20000e68
 800d8c8:	20000ea1 	.word	0x20000ea1
 800d8cc:	200000a1 	.word	0x200000a1
 800d8d0:	20000e94 	.word	0x20000e94
 800d8d4:	20000e9c 	.word	0x20000e9c
 800d8d8:	20000e90 	.word	0x20000e90
 800d8dc:	0802cefc 	.word	0x0802cefc
 800d8e0:	20000e58 	.word	0x20000e58
 800d8e4:	42b40000 	.word	0x42b40000
 800d8e8:	42a00000 	.word	0x42a00000
 800d8ec:	428c0000 	.word	0x428c0000
 800d8f0:	42700000 	.word	0x42700000
 800d8f4:	42480000 	.word	0x42480000
 800d8f8:	42200000 	.word	0x42200000
 800d8fc:	420c0000 	.word	0x420c0000

0800d900 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800d906:	4b11      	ldr	r3, [pc, #68]	@ (800d94c <MIC_TestMeasurementDone+0x4c>)
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	4a10      	ldr	r2, [pc, #64]	@ (800d950 <MIC_TestMeasurementDone+0x50>)
 800d90e:	4911      	ldr	r1, [pc, #68]	@ (800d954 <MIC_TestMeasurementDone+0x54>)
 800d910:	2002      	movs	r0, #2
 800d912:	f005 fdad 	bl	8013470 <CreateLine>
  if(DataReady) {
 800d916:	4b0d      	ldr	r3, [pc, #52]	@ (800d94c <MIC_TestMeasurementDone+0x4c>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d010      	beq.n	800d942 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800d920:	1dfb      	adds	r3, r7, #7
 800d922:	4a0d      	ldr	r2, [pc, #52]	@ (800d958 <MIC_TestMeasurementDone+0x58>)
 800d924:	7812      	ldrb	r2, [r2, #0]
 800d926:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800d928:	4b0b      	ldr	r3, [pc, #44]	@ (800d958 <MIC_TestMeasurementDone+0x58>)
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	4a0b      	ldr	r2, [pc, #44]	@ (800d95c <MIC_TestMeasurementDone+0x5c>)
 800d930:	4908      	ldr	r1, [pc, #32]	@ (800d954 <MIC_TestMeasurementDone+0x54>)
 800d932:	2002      	movs	r0, #2
 800d934:	f005 fd9c 	bl	8013470 <CreateLine>
    ResetMICIndicator();
 800d938:	f004 fbb0 	bl	801209c <ResetMICIndicator>
    return Check;
 800d93c:	1dfb      	adds	r3, r7, #7
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	e000      	b.n	800d944 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800d942:	2300      	movs	r3, #0
}
 800d944:	0018      	movs	r0, r3
 800d946:	46bd      	mov	sp, r7
 800d948:	b002      	add	sp, #8
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	20000fd5 	.word	0x20000fd5
 800d950:	0802cf44 	.word	0x0802cf44
 800d954:	0802cf70 	.word	0x0802cf70
 800d958:	20000fd6 	.word	0x20000fd6
 800d95c:	0802cf74 	.word	0x0802cf74

0800d960 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800d966:	4b78      	ldr	r3, [pc, #480]	@ (800db48 <Mic_Upkeep+0x1e8>)
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	d100      	bne.n	800d970 <Mic_Upkeep+0x10>
 800d96e:	e0b8      	b.n	800dae2 <Mic_Upkeep+0x182>
 800d970:	dd00      	ble.n	800d974 <Mic_Upkeep+0x14>
 800d972:	e0d3      	b.n	800db1c <Mic_Upkeep+0x1bc>
 800d974:	2b02      	cmp	r3, #2
 800d976:	d037      	beq.n	800d9e8 <Mic_Upkeep+0x88>
 800d978:	dd00      	ble.n	800d97c <Mic_Upkeep+0x1c>
 800d97a:	e0cf      	b.n	800db1c <Mic_Upkeep+0x1bc>
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d002      	beq.n	800d986 <Mic_Upkeep+0x26>
 800d980:	2b01      	cmp	r3, #1
 800d982:	d014      	beq.n	800d9ae <Mic_Upkeep+0x4e>
 800d984:	e0ca      	b.n	800db1c <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800d986:	2001      	movs	r0, #1
 800d988:	f003 fb98 	bl	80110bc <enableMicrophone>
 800d98c:	0003      	movs	r3, r0
 800d98e:	001a      	movs	r2, r3
 800d990:	2301      	movs	r3, #1
 800d992:	4053      	eors	r3, r2
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b00      	cmp	r3, #0
 800d998:	d005      	beq.n	800d9a6 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800d99a:	4a6c      	ldr	r2, [pc, #432]	@ (800db4c <Mic_Upkeep+0x1ec>)
 800d99c:	4b6c      	ldr	r3, [pc, #432]	@ (800db50 <Mic_Upkeep+0x1f0>)
 800d99e:	217f      	movs	r1, #127	@ 0x7f
 800d9a0:	0018      	movs	r0, r3
 800d9a2:	f005 fe5f 	bl	8013664 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800d9a6:	4b68      	ldr	r3, [pc, #416]	@ (800db48 <Mic_Upkeep+0x1e8>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	701a      	strb	r2, [r3, #0]
    break;
 800d9ac:	e0c5      	b.n	800db3a <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800d9ae:	f003 fb61 	bl	8011074 <micSettlingComplete>
 800d9b2:	1e03      	subs	r3, r0, #0
 800d9b4:	d105      	bne.n	800d9c2 <Mic_Upkeep+0x62>
 800d9b6:	4b67      	ldr	r3, [pc, #412]	@ (800db54 <Mic_Upkeep+0x1f4>)
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d100      	bne.n	800d9c2 <Mic_Upkeep+0x62>
 800d9c0:	e0b6      	b.n	800db30 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800d9c2:	f003 fbe5 	bl	8011190 <startSPLcalculation>
 800d9c6:	0003      	movs	r3, r0
 800d9c8:	001a      	movs	r2, r3
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	4053      	eors	r3, r2
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d005      	beq.n	800d9e0 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800d9d4:	4a5d      	ldr	r2, [pc, #372]	@ (800db4c <Mic_Upkeep+0x1ec>)
 800d9d6:	4b5e      	ldr	r3, [pc, #376]	@ (800db50 <Mic_Upkeep+0x1f0>)
 800d9d8:	2188      	movs	r1, #136	@ 0x88
 800d9da:	0018      	movs	r0, r3
 800d9dc:	f005 fe42 	bl	8013664 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800d9e0:	4b59      	ldr	r3, [pc, #356]	@ (800db48 <Mic_Upkeep+0x1e8>)
 800d9e2:	2202      	movs	r2, #2
 800d9e4:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d9e6:	e0a3      	b.n	800db30 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800d9e8:	4b5b      	ldr	r3, [pc, #364]	@ (800db58 <Mic_Upkeep+0x1f8>)
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	2101      	movs	r1, #1
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f003 fa22 	bl	8010e38 <getSoundData>
 800d9f4:	1e03      	subs	r3, r0, #0
 800d9f6:	d100      	bne.n	800d9fa <Mic_Upkeep+0x9a>
 800d9f8:	e09c      	b.n	800db34 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800d9fa:	f003 fb1b 	bl	8011034 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800d9fe:	4b56      	ldr	r3, [pc, #344]	@ (800db58 <Mic_Upkeep+0x1f8>)
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	001a      	movs	r2, r3
 800da04:	4b54      	ldr	r3, [pc, #336]	@ (800db58 <Mic_Upkeep+0x1f8>)
 800da06:	785b      	ldrb	r3, [r3, #1]
 800da08:	4954      	ldr	r1, [pc, #336]	@ (800db5c <Mic_Upkeep+0x1fc>)
 800da0a:	0038      	movs	r0, r7
 800da0c:	f018 f864 	bl	8025ad8 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800da10:	4b51      	ldr	r3, [pc, #324]	@ (800db58 <Mic_Upkeep+0x1f8>)
 800da12:	89db      	ldrh	r3, [r3, #14]
 800da14:	001a      	movs	r2, r3
 800da16:	4b50      	ldr	r3, [pc, #320]	@ (800db58 <Mic_Upkeep+0x1f8>)
 800da18:	7c1b      	ldrb	r3, [r3, #16]
 800da1a:	4951      	ldr	r1, [pc, #324]	@ (800db60 <Mic_Upkeep+0x200>)
 800da1c:	4851      	ldr	r0, [pc, #324]	@ (800db64 <Mic_Upkeep+0x204>)
 800da1e:	f018 f85b 	bl	8025ad8 <siprintf>
      dBValue = atof(dBbuffer);
 800da22:	003b      	movs	r3, r7
 800da24:	0018      	movs	r0, r3
 800da26:	f016 fbfd 	bl	8024224 <atof>
 800da2a:	0002      	movs	r2, r0
 800da2c:	000b      	movs	r3, r1
 800da2e:	0010      	movs	r0, r2
 800da30:	0019      	movs	r1, r3
 800da32:	f7f5 ff77 	bl	8003924 <__aeabi_d2f>
 800da36:	1c02      	adds	r2, r0, #0
 800da38:	4b4b      	ldr	r3, [pc, #300]	@ (800db68 <Mic_Upkeep+0x208>)
 800da3a:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800da3c:	4b4a      	ldr	r3, [pc, #296]	@ (800db68 <Mic_Upkeep+0x208>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	494a      	ldr	r1, [pc, #296]	@ (800db6c <Mic_Upkeep+0x20c>)
 800da42:	1c18      	adds	r0, r3, #0
 800da44:	f7f3 fafc 	bl	8001040 <__aeabi_fmul>
 800da48:	1c03      	adds	r3, r0, #0
 800da4a:	1c18      	adds	r0, r3, #0
 800da4c:	f7f5 ff22 	bl	8003894 <__aeabi_f2d>
 800da50:	2200      	movs	r2, #0
 800da52:	4b47      	ldr	r3, [pc, #284]	@ (800db70 <Mic_Upkeep+0x210>)
 800da54:	f7f3 ff7e 	bl	8001954 <__aeabi_dadd>
 800da58:	0002      	movs	r2, r0
 800da5a:	000b      	movs	r3, r1
 800da5c:	0010      	movs	r0, r2
 800da5e:	0019      	movs	r1, r3
 800da60:	f7f5 fe8a 	bl	8003778 <__aeabi_d2iz>
 800da64:	0003      	movs	r3, r0
 800da66:	0018      	movs	r0, r3
 800da68:	f7f5 fec2 	bl	80037f0 <__aeabi_i2d>
 800da6c:	2200      	movs	r2, #0
 800da6e:	4b41      	ldr	r3, [pc, #260]	@ (800db74 <Mic_Upkeep+0x214>)
 800da70:	f7f4 fb36 	bl	80020e0 <__aeabi_ddiv>
 800da74:	0002      	movs	r2, r0
 800da76:	000b      	movs	r3, r1
 800da78:	0010      	movs	r0, r2
 800da7a:	0019      	movs	r1, r3
 800da7c:	f7f5 ff52 	bl	8003924 <__aeabi_d2f>
 800da80:	1c02      	adds	r2, r0, #0
 800da82:	4b39      	ldr	r3, [pc, #228]	@ (800db68 <Mic_Upkeep+0x208>)
 800da84:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800da86:	f7ff fdd5 	bl	800d634 <MIC_Print>
      if (!startSPLcalculation()) {
 800da8a:	f003 fb81 	bl	8011190 <startSPLcalculation>
 800da8e:	0003      	movs	r3, r0
 800da90:	001a      	movs	r2, r3
 800da92:	2301      	movs	r3, #1
 800da94:	4053      	eors	r3, r2
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800da9c:	4a2b      	ldr	r2, [pc, #172]	@ (800db4c <Mic_Upkeep+0x1ec>)
 800da9e:	4b2c      	ldr	r3, [pc, #176]	@ (800db50 <Mic_Upkeep+0x1f0>)
 800daa0:	2198      	movs	r1, #152	@ 0x98
 800daa2:	0018      	movs	r0, r3
 800daa4:	f005 fdde 	bl	8013664 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800daa8:	2000      	movs	r0, #0
 800daaa:	f003 fb07 	bl	80110bc <enableMicrophone>
 800daae:	0003      	movs	r3, r0
 800dab0:	001a      	movs	r2, r3
 800dab2:	2301      	movs	r3, #1
 800dab4:	4053      	eors	r3, r2
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d005      	beq.n	800dac8 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800dabc:	4a23      	ldr	r2, [pc, #140]	@ (800db4c <Mic_Upkeep+0x1ec>)
 800dabe:	4b24      	ldr	r3, [pc, #144]	@ (800db50 <Mic_Upkeep+0x1f0>)
 800dac0:	219b      	movs	r1, #155	@ 0x9b
 800dac2:	0018      	movs	r0, r3
 800dac4:	f005 fdce 	bl	8013664 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800dac8:	f006 fa54 	bl	8013f74 <HAL_GetTick>
 800dacc:	0003      	movs	r3, r0
 800dace:	4a2a      	ldr	r2, [pc, #168]	@ (800db78 <Mic_Upkeep+0x218>)
 800dad0:	189a      	adds	r2, r3, r2
 800dad2:	4b2a      	ldr	r3, [pc, #168]	@ (800db7c <Mic_Upkeep+0x21c>)
 800dad4:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800dad6:	4b1c      	ldr	r3, [pc, #112]	@ (800db48 <Mic_Upkeep+0x1e8>)
 800dad8:	2203      	movs	r2, #3
 800dada:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800dadc:	f004 fade 	bl	801209c <ResetMICIndicator>
    }
    break;
 800dae0:	e028      	b.n	800db34 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800dae2:	4b26      	ldr	r3, [pc, #152]	@ (800db7c <Mic_Upkeep+0x21c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	0018      	movs	r0, r3
 800dae8:	f005 fc6c 	bl	80133c4 <TimestampIsReached>
 800daec:	1e03      	subs	r3, r0, #0
 800daee:	d023      	beq.n	800db38 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800daf0:	2001      	movs	r0, #1
 800daf2:	f003 fae3 	bl	80110bc <enableMicrophone>
 800daf6:	0003      	movs	r3, r0
 800daf8:	001a      	movs	r2, r3
 800dafa:	2301      	movs	r3, #1
 800dafc:	4053      	eors	r3, r2
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	d005      	beq.n	800db10 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800db04:	4a11      	ldr	r2, [pc, #68]	@ (800db4c <Mic_Upkeep+0x1ec>)
 800db06:	4b12      	ldr	r3, [pc, #72]	@ (800db50 <Mic_Upkeep+0x1f0>)
 800db08:	21a6      	movs	r1, #166	@ 0xa6
 800db0a:	0018      	movs	r0, r3
 800db0c:	f005 fdaa 	bl	8013664 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800db10:	4b0d      	ldr	r3, [pc, #52]	@ (800db48 <Mic_Upkeep+0x1e8>)
 800db12:	2201      	movs	r2, #1
 800db14:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800db16:	f004 fa7f 	bl	8012018 <SetMICIndicator>
    }
    break;
 800db1a:	e00d      	b.n	800db38 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800db1c:	4a18      	ldr	r2, [pc, #96]	@ (800db80 <Mic_Upkeep+0x220>)
 800db1e:	4b19      	ldr	r3, [pc, #100]	@ (800db84 <Mic_Upkeep+0x224>)
 800db20:	0019      	movs	r1, r3
 800db22:	2003      	movs	r0, #3
 800db24:	f005 fca4 	bl	8013470 <CreateLine>
    MicState = MIC_STATE_INIT;
 800db28:	4b07      	ldr	r3, [pc, #28]	@ (800db48 <Mic_Upkeep+0x1e8>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	701a      	strb	r2, [r3, #0]
    break;
 800db2e:	e004      	b.n	800db3a <Mic_Upkeep+0x1da>
    break;
 800db30:	46c0      	nop			@ (mov r8, r8)
 800db32:	e002      	b.n	800db3a <Mic_Upkeep+0x1da>
    break;
 800db34:	46c0      	nop			@ (mov r8, r8)
 800db36:	e000      	b.n	800db3a <Mic_Upkeep+0x1da>
    break;
 800db38:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800db3a:	4b03      	ldr	r3, [pc, #12]	@ (800db48 <Mic_Upkeep+0x1e8>)
 800db3c:	781b      	ldrb	r3, [r3, #0]
}
 800db3e:	0018      	movs	r0, r3
 800db40:	46bd      	mov	sp, r7
 800db42:	b002      	add	sp, #8
 800db44:	bd80      	pop	{r7, pc}
 800db46:	46c0      	nop			@ (mov r8, r8)
 800db48:	20000eba 	.word	0x20000eba
 800db4c:	0802cf8c 	.word	0x0802cf8c
 800db50:	0802e1b4 	.word	0x0802e1b4
 800db54:	20000fd5 	.word	0x20000fd5
 800db58:	20000ea8 	.word	0x20000ea8
 800db5c:	0802cfa8 	.word	0x0802cfa8
 800db60:	0802cfb0 	.word	0x0802cfb0
 800db64:	20000e58 	.word	0x20000e58
 800db68:	20000e98 	.word	0x20000e98
 800db6c:	42c80000 	.word	0x42c80000
 800db70:	3fe00000 	.word	0x3fe00000
 800db74:	40590000 	.word	0x40590000
 800db78:	000002f3 	.word	0x000002f3
 800db7c:	20000ea4 	.word	0x20000ea4
 800db80:	0802cfb8 	.word	0x0802cfb8
 800db84:	0802cfd8 	.word	0x0802cfd8

0800db88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800db8e:	1d3b      	adds	r3, r7, #4
 800db90:	0018      	movs	r0, r3
 800db92:	2314      	movs	r3, #20
 800db94:	001a      	movs	r2, r3
 800db96:	2100      	movs	r1, #0
 800db98:	f018 f908 	bl	8025dac <memset>
  RTC_DateTypeDef sDate = {0};
 800db9c:	003b      	movs	r3, r7
 800db9e:	2200      	movs	r2, #0
 800dba0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800dba2:	4b2e      	ldr	r3, [pc, #184]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dba4:	4a2e      	ldr	r2, [pc, #184]	@ (800dc60 <MX_RTC_Init+0xd8>)
 800dba6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800dba8:	4b2c      	ldr	r3, [pc, #176]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800dbae:	4b2b      	ldr	r3, [pc, #172]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dbb0:	227f      	movs	r2, #127	@ 0x7f
 800dbb2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800dbb4:	4b29      	ldr	r3, [pc, #164]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dbb6:	22ff      	movs	r2, #255	@ 0xff
 800dbb8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800dbba:	4b28      	ldr	r3, [pc, #160]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800dbc0:	4b26      	ldr	r3, [pc, #152]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dbc6:	4b25      	ldr	r3, [pc, #148]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dbcc:	4b23      	ldr	r3, [pc, #140]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800dbd2:	4b22      	ldr	r3, [pc, #136]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dbd4:	0018      	movs	r0, r3
 800dbd6:	f00d fd5d 	bl	801b694 <HAL_RTC_Init>
 800dbda:	1e03      	subs	r3, r0, #0
 800dbdc:	d001      	beq.n	800dbe2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800dbde:	f7fe ffb3 	bl	800cb48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800dbe2:	1d3b      	adds	r3, r7, #4
 800dbe4:	220d      	movs	r2, #13
 800dbe6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800dbe8:	1d3b      	adds	r3, r7, #4
 800dbea:	2200      	movs	r2, #0
 800dbec:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800dbee:	1d3b      	adds	r3, r7, #4
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800dbf4:	1d3b      	adds	r3, r7, #4
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800dbfa:	1d3b      	adds	r3, r7, #4
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800dc00:	1d39      	adds	r1, r7, #4
 800dc02:	4b16      	ldr	r3, [pc, #88]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dc04:	2200      	movs	r2, #0
 800dc06:	0018      	movs	r0, r3
 800dc08:	f00d fde0 	bl	801b7cc <HAL_RTC_SetTime>
 800dc0c:	1e03      	subs	r3, r0, #0
 800dc0e:	d001      	beq.n	800dc14 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800dc10:	f7fe ff9a 	bl	800cb48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800dc14:	003b      	movs	r3, r7
 800dc16:	2206      	movs	r2, #6
 800dc18:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800dc1a:	003b      	movs	r3, r7
 800dc1c:	2211      	movs	r2, #17
 800dc1e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800dc20:	003b      	movs	r3, r7
 800dc22:	2217      	movs	r2, #23
 800dc24:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800dc26:	003b      	movs	r3, r7
 800dc28:	2218      	movs	r2, #24
 800dc2a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800dc2c:	0039      	movs	r1, r7
 800dc2e:	4b0b      	ldr	r3, [pc, #44]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	0018      	movs	r0, r3
 800dc34:	f00d fed2 	bl	801b9dc <HAL_RTC_SetDate>
 800dc38:	1e03      	subs	r3, r0, #0
 800dc3a:	d001      	beq.n	800dc40 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800dc3c:	f7fe ff84 	bl	800cb48 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800dc40:	4b06      	ldr	r3, [pc, #24]	@ (800dc5c <MX_RTC_Init+0xd4>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	2100      	movs	r1, #0
 800dc46:	0018      	movs	r0, r3
 800dc48:	f00e f8a0 	bl	801bd8c <HAL_RTCEx_SetWakeUpTimer_IT>
 800dc4c:	1e03      	subs	r3, r0, #0
 800dc4e:	d001      	beq.n	800dc54 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800dc50:	f7fe ff7a 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800dc54:	46c0      	nop			@ (mov r8, r8)
 800dc56:	46bd      	mov	sp, r7
 800dc58:	b006      	add	sp, #24
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	20000ebc 	.word	0x20000ebc
 800dc60:	40002800 	.word	0x40002800

0800dc64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a0a      	ldr	r2, [pc, #40]	@ (800dc9c <HAL_RTC_MspInit+0x38>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d10e      	bne.n	800dc94 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800dc76:	4b0a      	ldr	r3, [pc, #40]	@ (800dca0 <HAL_RTC_MspInit+0x3c>)
 800dc78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc7a:	4b09      	ldr	r3, [pc, #36]	@ (800dca0 <HAL_RTC_MspInit+0x3c>)
 800dc7c:	2180      	movs	r1, #128	@ 0x80
 800dc7e:	02c9      	lsls	r1, r1, #11
 800dc80:	430a      	orrs	r2, r1
 800dc82:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800dc84:	2200      	movs	r2, #0
 800dc86:	2100      	movs	r1, #0
 800dc88:	2002      	movs	r0, #2
 800dc8a:	f006 fe17 	bl	80148bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800dc8e:	2002      	movs	r0, #2
 800dc90:	f006 fe29 	bl	80148e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800dc94:	46c0      	nop			@ (mov r8, r8)
 800dc96:	46bd      	mov	sp, r7
 800dc98:	b002      	add	sp, #8
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	40002800 	.word	0x40002800
 800dca0:	40021000 	.word	0x40021000

0800dca4 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800dca4:	b580      	push	{r7, lr}
 800dca6:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800dca8:	4b02      	ldr	r3, [pc, #8]	@ (800dcb4 <sen5x_Get_sen5x_enable_state+0x10>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
}
 800dcac:	0018      	movs	r0, r3
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	46c0      	nop			@ (mov r8, r8)
 800dcb4:	20000ee3 	.word	0x20000ee3

0800dcb8 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	0002      	movs	r2, r0
 800dcc0:	1dfb      	adds	r3, r7, #7
 800dcc2:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800dcc4:	4b03      	ldr	r3, [pc, #12]	@ (800dcd4 <sen5x_Set_sen5x_state+0x1c>)
 800dcc6:	1dfa      	adds	r2, r7, #7
 800dcc8:	7812      	ldrb	r2, [r2, #0]
 800dcca:	701a      	strb	r2, [r3, #0]
}
 800dccc:	46c0      	nop			@ (mov r8, r8)
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	b002      	add	sp, #8
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	20000ee3 	.word	0x20000ee3

0800dcd8 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800dce0:	f006 f948 	bl	8013f74 <HAL_GetTick>
 800dce4:	0002      	movs	r2, r0
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	18d2      	adds	r2, r2, r3
 800dcea:	4b03      	ldr	r3, [pc, #12]	@ (800dcf8 <setsen5xReadTimer+0x20>)
 800dcec:	601a      	str	r2, [r3, #0]
}
 800dcee:	46c0      	nop			@ (mov r8, r8)
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	b002      	add	sp, #8
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	46c0      	nop			@ (mov r8, r8)
 800dcf8:	20000ef0 	.word	0x20000ef0

0800dcfc <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	0002      	movs	r2, r0
 800dd04:	1dfb      	adds	r3, r7, #7
 800dd06:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800dd08:	4b03      	ldr	r3, [pc, #12]	@ (800dd18 <setsen5xSamplecounter+0x1c>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	701a      	strb	r2, [r3, #0]
}
 800dd0e:	46c0      	nop			@ (mov r8, r8)
 800dd10:	46bd      	mov	sp, r7
 800dd12:	b002      	add	sp, #8
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	46c0      	nop			@ (mov r8, r8)
 800dd18:	20000eec 	.word	0x20000eec

0800dd1c <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800dd24:	f7fe ffc8 	bl	800ccb8 <IsPMSensorEnabled>
 800dd28:	1e03      	subs	r3, r0, #0
 800dd2a:	d035      	beq.n	800dd98 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800dd2c:	f003 fff2 	bl	8011d14 <batteryChargeCheck>
 800dd30:	0003      	movs	r3, r0
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d103      	bne.n	800dd3e <sen5x_enable+0x22>
      sen5x_Enable = true;
 800dd36:	4b20      	ldr	r3, [pc, #128]	@ (800ddb8 <sen5x_enable+0x9c>)
 800dd38:	2201      	movs	r2, #1
 800dd3a:	701a      	strb	r2, [r3, #0]
 800dd3c:	e00d      	b.n	800dd5a <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800dd3e:	4b1e      	ldr	r3, [pc, #120]	@ (800ddb8 <sen5x_enable+0x9c>)
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	1e5a      	subs	r2, r3, #1
 800dd44:	4193      	sbcs	r3, r2
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2201      	movs	r2, #1
 800dd4a:	4053      	eors	r3, r2
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	1c1a      	adds	r2, r3, #0
 800dd50:	2301      	movs	r3, #1
 800dd52:	4013      	ands	r3, r2
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	4b18      	ldr	r3, [pc, #96]	@ (800ddb8 <sen5x_enable+0x9c>)
 800dd58:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800dd5a:	4b17      	ldr	r3, [pc, #92]	@ (800ddb8 <sen5x_enable+0x9c>)
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800dd62:	2000      	movs	r0, #0
 800dd64:	f7ff ffb8 	bl	800dcd8 <setsen5xReadTimer>
 800dd68:	e009      	b.n	800dd7e <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800dd6a:	f006 f903 	bl	8013f74 <HAL_GetTick>
 800dd6e:	0002      	movs	r2, r0
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2164      	movs	r1, #100	@ 0x64
 800dd74:	434b      	muls	r3, r1
 800dd76:	18d3      	adds	r3, r2, r3
 800dd78:	0018      	movs	r0, r3
 800dd7a:	f7ff ffad 	bl	800dcd8 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800dd7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ddb8 <sen5x_enable+0x9c>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <sen5x_enable+0x6e>
 800dd86:	4b0d      	ldr	r3, [pc, #52]	@ (800ddbc <sen5x_enable+0xa0>)
 800dd88:	e000      	b.n	800dd8c <sen5x_enable+0x70>
 800dd8a:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc0 <sen5x_enable+0xa4>)
 800dd8c:	4a0d      	ldr	r2, [pc, #52]	@ (800ddc4 <sen5x_enable+0xa8>)
 800dd8e:	490e      	ldr	r1, [pc, #56]	@ (800ddc8 <sen5x_enable+0xac>)
 800dd90:	2002      	movs	r0, #2
 800dd92:	f005 fb6d 	bl	8013470 <CreateLine>
 800dd96:	e005      	b.n	800dda4 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800dd98:	4a0c      	ldr	r2, [pc, #48]	@ (800ddcc <sen5x_enable+0xb0>)
 800dd9a:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc8 <sen5x_enable+0xac>)
 800dd9c:	0019      	movs	r1, r3
 800dd9e:	2002      	movs	r0, #2
 800dda0:	f005 fb66 	bl	8013470 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800dda4:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd0 <sen5x_enable+0xb4>)
 800dda6:	2201      	movs	r2, #1
 800dda8:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800ddaa:	4b03      	ldr	r3, [pc, #12]	@ (800ddb8 <sen5x_enable+0x9c>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
}
 800ddae:	0018      	movs	r0, r3
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	b002      	add	sp, #8
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	46c0      	nop			@ (mov r8, r8)
 800ddb8:	20000ee3 	.word	0x20000ee3
 800ddbc:	0802cfdc 	.word	0x0802cfdc
 800ddc0:	0802cfe4 	.word	0x0802cfe4
 800ddc4:	0802cff0 	.word	0x0802cff0
 800ddc8:	0802d00c 	.word	0x0802d00c
 800ddcc:	0802d010 	.word	0x0802d010
 800ddd0:	200000a2 	.word	0x200000a2

0800ddd4 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800ddd8:	2380      	movs	r3, #128	@ 0x80
 800ddda:	015b      	lsls	r3, r3, #5
 800dddc:	480f      	ldr	r0, [pc, #60]	@ (800de1c <sen5x_Power_On+0x48>)
 800ddde:	2201      	movs	r2, #1
 800dde0:	0019      	movs	r1, r3
 800dde2:	f007 fb58 	bl	8015496 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800dde6:	4a0e      	ldr	r2, [pc, #56]	@ (800de20 <sen5x_Power_On+0x4c>)
 800dde8:	4b0e      	ldr	r3, [pc, #56]	@ (800de24 <sen5x_Power_On+0x50>)
 800ddea:	0019      	movs	r1, r3
 800ddec:	2003      	movs	r0, #3
 800ddee:	f005 fb3f 	bl	8013470 <CreateLine>
  HAL_Delay(150);
 800ddf2:	2096      	movs	r0, #150	@ 0x96
 800ddf4:	f006 f8c8 	bl	8013f88 <HAL_Delay>
  if (sen5x_device_reset()) {
 800ddf8:	f001 f9da 	bl	800f1b0 <sen5x_device_reset>
 800ddfc:	1e03      	subs	r3, r0, #0
 800ddfe:	d006      	beq.n	800de0e <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800de00:	4a09      	ldr	r2, [pc, #36]	@ (800de28 <sen5x_Power_On+0x54>)
 800de02:	4b0a      	ldr	r3, [pc, #40]	@ (800de2c <sen5x_Power_On+0x58>)
 800de04:	0019      	movs	r1, r3
 800de06:	2001      	movs	r0, #1
 800de08:	f005 fb32 	bl	8013470 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800de0c:	e002      	b.n	800de14 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800de0e:	4b08      	ldr	r3, [pc, #32]	@ (800de30 <sen5x_Power_On+0x5c>)
 800de10:	2201      	movs	r2, #1
 800de12:	701a      	strb	r2, [r3, #0]
}
 800de14:	46c0      	nop			@ (mov r8, r8)
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	46c0      	nop			@ (mov r8, r8)
 800de1c:	50000800 	.word	0x50000800
 800de20:	0802d030 	.word	0x0802d030
 800de24:	0802d04c 	.word	0x0802d04c
 800de28:	0802d050 	.word	0x0802d050
 800de2c:	0802d078 	.word	0x0802d078
 800de30:	20000ee1 	.word	0x20000ee1

0800de34 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800de38:	4b0e      	ldr	r3, [pc, #56]	@ (800de74 <sen5x_Power_Off+0x40>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d006      	beq.n	800de4e <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800de40:	4a0d      	ldr	r2, [pc, #52]	@ (800de78 <sen5x_Power_Off+0x44>)
 800de42:	4b0e      	ldr	r3, [pc, #56]	@ (800de7c <sen5x_Power_Off+0x48>)
 800de44:	0019      	movs	r1, r3
 800de46:	2003      	movs	r0, #3
 800de48:	f005 fb12 	bl	8013470 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800de4c:	e00f      	b.n	800de6e <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800de4e:	4a0c      	ldr	r2, [pc, #48]	@ (800de80 <sen5x_Power_Off+0x4c>)
 800de50:	4b0a      	ldr	r3, [pc, #40]	@ (800de7c <sen5x_Power_Off+0x48>)
 800de52:	0019      	movs	r1, r3
 800de54:	2003      	movs	r0, #3
 800de56:	f005 fb0b 	bl	8013470 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800de5a:	2380      	movs	r3, #128	@ 0x80
 800de5c:	015b      	lsls	r3, r3, #5
 800de5e:	4809      	ldr	r0, [pc, #36]	@ (800de84 <sen5x_Power_Off+0x50>)
 800de60:	2200      	movs	r2, #0
 800de62:	0019      	movs	r1, r3
 800de64:	f007 fb17 	bl	8015496 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800de68:	4b07      	ldr	r3, [pc, #28]	@ (800de88 <sen5x_Power_Off+0x54>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	701a      	strb	r2, [r3, #0]
}
 800de6e:	46c0      	nop			@ (mov r8, r8)
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	20000ee2 	.word	0x20000ee2
 800de78:	0802d07c 	.word	0x0802d07c
 800de7c:	0802d04c 	.word	0x0802d04c
 800de80:	0802d0ac 	.word	0x0802d0ac
 800de84:	50000800 	.word	0x50000800
 800de88:	20000ee1 	.word	0x20000ee1

0800de8c <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800de90:	4b02      	ldr	r3, [pc, #8]	@ (800de9c <reset_fanCleaningDone+0x10>)
 800de92:	2200      	movs	r2, #0
 800de94:	701a      	strb	r2, [r3, #0]
}
 800de96:	46c0      	nop			@ (mov r8, r8)
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	20000ee0 	.word	0x20000ee0

0800dea0 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800dea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea2:	b093      	sub	sp, #76	@ 0x4c
 800dea4:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800dea6:	2436      	movs	r4, #54	@ 0x36
 800dea8:	193b      	adds	r3, r7, r4
 800deaa:	2200      	movs	r2, #0
 800deac:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800deae:	2335      	movs	r3, #53	@ 0x35
 800deb0:	18fb      	adds	r3, r7, r3
 800deb2:	2220      	movs	r2, #32
 800deb4:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800deb6:	2334      	movs	r3, #52	@ 0x34
 800deb8:	18fb      	adds	r3, r7, r3
 800deba:	2220      	movs	r2, #32
 800debc:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800debe:	f7ff ff89 	bl	800ddd4 <sen5x_Power_On>
  error = sen5x_device_reset();
 800dec2:	0025      	movs	r5, r4
 800dec4:	193c      	adds	r4, r7, r4
 800dec6:	f001 f973 	bl	800f1b0 <sen5x_device_reset>
 800deca:	0003      	movs	r3, r0
 800decc:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dece:	002c      	movs	r4, r5
 800ded0:	193b      	adds	r3, r7, r4
 800ded2:	2200      	movs	r2, #0
 800ded4:	5e9b      	ldrsh	r3, [r3, r2]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00b      	beq.n	800def2 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800deda:	193b      	adds	r3, r7, r4
 800dedc:	2200      	movs	r2, #0
 800dede:	5e9b      	ldrsh	r3, [r3, r2]
 800dee0:	4a75      	ldr	r2, [pc, #468]	@ (800e0b8 <probe_sen5x+0x218>)
 800dee2:	4976      	ldr	r1, [pc, #472]	@ (800e0bc <probe_sen5x+0x21c>)
 800dee4:	2001      	movs	r0, #1
 800dee6:	f005 fac3 	bl	8013470 <CreateLine>
      return error;
 800deea:	193b      	adds	r3, r7, r4
 800deec:	2200      	movs	r2, #0
 800deee:	5e9b      	ldrsh	r3, [r3, r2]
 800def0:	e0de      	b.n	800e0b0 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800def2:	2536      	movs	r5, #54	@ 0x36
 800def4:	197c      	adds	r4, r7, r5
 800def6:	2335      	movs	r3, #53	@ 0x35
 800def8:	18fb      	adds	r3, r7, r3
 800defa:	781a      	ldrb	r2, [r3, #0]
 800defc:	230c      	movs	r3, #12
 800defe:	18fb      	adds	r3, r7, r3
 800df00:	0011      	movs	r1, r2
 800df02:	0018      	movs	r0, r3
 800df04:	f001 f840 	bl	800ef88 <sen5x_get_serial_number>
 800df08:	0003      	movs	r3, r0
 800df0a:	8023      	strh	r3, [r4, #0]
  if (error) {
 800df0c:	197b      	adds	r3, r7, r5
 800df0e:	2200      	movs	r2, #0
 800df10:	5e9b      	ldrsh	r3, [r3, r2]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00b      	beq.n	800df2e <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800df16:	197b      	adds	r3, r7, r5
 800df18:	2200      	movs	r2, #0
 800df1a:	5e9a      	ldrsh	r2, [r3, r2]
 800df1c:	4b68      	ldr	r3, [pc, #416]	@ (800e0c0 <probe_sen5x+0x220>)
 800df1e:	0011      	movs	r1, r2
 800df20:	0018      	movs	r0, r3
 800df22:	f017 fd69 	bl	80259f8 <iprintf>
      return error;
 800df26:	197b      	adds	r3, r7, r5
 800df28:	2200      	movs	r2, #0
 800df2a:	5e9b      	ldrsh	r3, [r3, r2]
 800df2c:	e0c0      	b.n	800e0b0 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800df2e:	230c      	movs	r3, #12
 800df30:	18fa      	adds	r2, r7, r3
 800df32:	4b64      	ldr	r3, [pc, #400]	@ (800e0c4 <probe_sen5x+0x224>)
 800df34:	0011      	movs	r1, r2
 800df36:	0018      	movs	r0, r3
 800df38:	f017 fd5e 	bl	80259f8 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800df3c:	2536      	movs	r5, #54	@ 0x36
 800df3e:	197c      	adds	r4, r7, r5
 800df40:	2334      	movs	r3, #52	@ 0x34
 800df42:	18fb      	adds	r3, r7, r3
 800df44:	781a      	ldrb	r2, [r3, #0]
 800df46:	4b60      	ldr	r3, [pc, #384]	@ (800e0c8 <probe_sen5x+0x228>)
 800df48:	0011      	movs	r1, r2
 800df4a:	0018      	movs	r0, r3
 800df4c:	f000 ffc6 	bl	800eedc <sen5x_get_product_name>
 800df50:	0003      	movs	r3, r0
 800df52:	8023      	strh	r3, [r4, #0]
  if (error) {
 800df54:	197b      	adds	r3, r7, r5
 800df56:	2200      	movs	r2, #0
 800df58:	5e9b      	ldrsh	r3, [r3, r2]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00b      	beq.n	800df76 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800df5e:	197b      	adds	r3, r7, r5
 800df60:	2200      	movs	r2, #0
 800df62:	5e9a      	ldrsh	r2, [r3, r2]
 800df64:	4b59      	ldr	r3, [pc, #356]	@ (800e0cc <probe_sen5x+0x22c>)
 800df66:	0011      	movs	r1, r2
 800df68:	0018      	movs	r0, r3
 800df6a:	f017 fd45 	bl	80259f8 <iprintf>
      return error;
 800df6e:	197b      	adds	r3, r7, r5
 800df70:	2200      	movs	r2, #0
 800df72:	5e9b      	ldrsh	r3, [r3, r2]
 800df74:	e09c      	b.n	800e0b0 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800df76:	4a54      	ldr	r2, [pc, #336]	@ (800e0c8 <probe_sen5x+0x228>)
 800df78:	4b55      	ldr	r3, [pc, #340]	@ (800e0d0 <probe_sen5x+0x230>)
 800df7a:	0011      	movs	r1, r2
 800df7c:	0018      	movs	r0, r3
 800df7e:	f017 fd3b 	bl	80259f8 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800df82:	2636      	movs	r6, #54	@ 0x36
 800df84:	19bc      	adds	r4, r7, r6
 800df86:	2308      	movs	r3, #8
 800df88:	18fd      	adds	r5, r7, r3
 800df8a:	2309      	movs	r3, #9
 800df8c:	18fa      	adds	r2, r7, r3
 800df8e:	230a      	movs	r3, #10
 800df90:	18f9      	adds	r1, r7, r3
 800df92:	230b      	movs	r3, #11
 800df94:	18f8      	adds	r0, r7, r3
 800df96:	1d7b      	adds	r3, r7, #5
 800df98:	9302      	str	r3, [sp, #8]
 800df9a:	1dbb      	adds	r3, r7, #6
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	1dfb      	adds	r3, r7, #7
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	002b      	movs	r3, r5
 800dfa4:	f001 f846 	bl	800f034 <sen5x_get_version>
 800dfa8:	0003      	movs	r3, r0
 800dfaa:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800dfac:	19bb      	adds	r3, r7, r6
 800dfae:	2200      	movs	r2, #0
 800dfb0:	5e9b      	ldrsh	r3, [r3, r2]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00b      	beq.n	800dfce <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800dfb6:	19bb      	adds	r3, r7, r6
 800dfb8:	2200      	movs	r2, #0
 800dfba:	5e9a      	ldrsh	r2, [r3, r2]
 800dfbc:	4b45      	ldr	r3, [pc, #276]	@ (800e0d4 <probe_sen5x+0x234>)
 800dfbe:	0011      	movs	r1, r2
 800dfc0:	0018      	movs	r0, r3
 800dfc2:	f017 fd19 	bl	80259f8 <iprintf>
      return error;
 800dfc6:	19bb      	adds	r3, r7, r6
 800dfc8:	2200      	movs	r2, #0
 800dfca:	5e9b      	ldrsh	r3, [r3, r2]
 800dfcc:	e070      	b.n	800e0b0 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800dfce:	230b      	movs	r3, #11
 800dfd0:	18fb      	adds	r3, r7, r3
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	0019      	movs	r1, r3
 800dfd6:	230a      	movs	r3, #10
 800dfd8:	18fb      	adds	r3, r7, r3
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	001a      	movs	r2, r3
 800dfde:	2308      	movs	r3, #8
 800dfe0:	18fb      	adds	r3, r7, r3
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	001c      	movs	r4, r3
 800dfe6:	1dfb      	adds	r3, r7, #7
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	483b      	ldr	r0, [pc, #236]	@ (800e0d8 <probe_sen5x+0x238>)
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	0023      	movs	r3, r4
 800dff0:	f017 fd02 	bl	80259f8 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800dff4:	2300      	movs	r3, #0
 800dff6:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800dff8:	262e      	movs	r6, #46	@ 0x2e
 800dffa:	19bb      	adds	r3, r7, r6
 800dffc:	2200      	movs	r2, #0
 800dffe:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800e000:	232c      	movs	r3, #44	@ 0x2c
 800e002:	18fb      	adds	r3, r7, r3
 800e004:	2200      	movs	r2, #0
 800e006:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800e008:	4934      	ldr	r1, [pc, #208]	@ (800e0dc <probe_sen5x+0x23c>)
 800e00a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e00c:	f7f3 f818 	bl	8001040 <__aeabi_fmul>
 800e010:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800e012:	1c18      	adds	r0, r3, #0
 800e014:	f7f3 fbe8 	bl	80017e8 <__aeabi_f2iz>
 800e018:	0003      	movs	r3, r0
 800e01a:	b218      	sxth	r0, r3
 800e01c:	2536      	movs	r5, #54	@ 0x36
 800e01e:	197c      	adds	r4, r7, r5
 800e020:	232c      	movs	r3, #44	@ 0x2c
 800e022:	18fb      	adds	r3, r7, r3
 800e024:	881a      	ldrh	r2, [r3, #0]
 800e026:	19bb      	adds	r3, r7, r6
 800e028:	2100      	movs	r1, #0
 800e02a:	5e5b      	ldrsh	r3, [r3, r1]
 800e02c:	0019      	movs	r1, r3
 800e02e:	f000 fef1 	bl	800ee14 <sen5x_set_temperature_offset_parameters>
 800e032:	0003      	movs	r3, r0
 800e034:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e036:	197b      	adds	r3, r7, r5
 800e038:	2200      	movs	r2, #0
 800e03a:	5e9b      	ldrsh	r3, [r3, r2]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00b      	beq.n	800e058 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800e040:	197b      	adds	r3, r7, r5
 800e042:	2200      	movs	r2, #0
 800e044:	5e9b      	ldrsh	r3, [r3, r2]
 800e046:	4a26      	ldr	r2, [pc, #152]	@ (800e0e0 <probe_sen5x+0x240>)
 800e048:	491c      	ldr	r1, [pc, #112]	@ (800e0bc <probe_sen5x+0x21c>)
 800e04a:	2001      	movs	r0, #1
 800e04c:	f005 fa10 	bl	8013470 <CreateLine>
      return error;
 800e050:	197b      	adds	r3, r7, r5
 800e052:	2200      	movs	r2, #0
 800e054:	5e9b      	ldrsh	r3, [r3, r2]
 800e056:	e02b      	b.n	800e0b0 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800e058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e05a:	f7f5 fc1b 	bl	8003894 <__aeabi_f2d>
 800e05e:	0002      	movs	r2, r0
 800e060:	000b      	movs	r3, r1
 800e062:	4820      	ldr	r0, [pc, #128]	@ (800e0e4 <probe_sen5x+0x244>)
 800e064:	4920      	ldr	r1, [pc, #128]	@ (800e0e8 <probe_sen5x+0x248>)
 800e066:	9200      	str	r2, [sp, #0]
 800e068:	9301      	str	r3, [sp, #4]
 800e06a:	0002      	movs	r2, r0
 800e06c:	2002      	movs	r0, #2
 800e06e:	f005 f9ff 	bl	8013470 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800e072:	f7fb f8ff 	bl	8009274 <Check_USB_PowerOn>
 800e076:	0003      	movs	r3, r0
 800e078:	001a      	movs	r2, r3
 800e07a:	2301      	movs	r3, #1
 800e07c:	4053      	eors	r3, r2
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00a      	beq.n	800e09a <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800e084:	f7ff fed6 	bl	800de34 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800e088:	f005 ff74 	bl	8013f74 <HAL_GetTick>
 800e08c:	0003      	movs	r3, r0
 800e08e:	22fa      	movs	r2, #250	@ 0xfa
 800e090:	00d2      	lsls	r2, r2, #3
 800e092:	189a      	adds	r2, r3, r2
 800e094:	4b15      	ldr	r3, [pc, #84]	@ (800e0ec <probe_sen5x+0x24c>)
 800e096:	601a      	str	r2, [r3, #0]
 800e098:	e006      	b.n	800e0a8 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800e09a:	f005 ff6b 	bl	8013f74 <HAL_GetTick>
 800e09e:	0003      	movs	r3, r0
 800e0a0:	4a13      	ldr	r2, [pc, #76]	@ (800e0f0 <probe_sen5x+0x250>)
 800e0a2:	189a      	adds	r2, r3, r2
 800e0a4:	4b11      	ldr	r3, [pc, #68]	@ (800e0ec <probe_sen5x+0x24c>)
 800e0a6:	601a      	str	r2, [r3, #0]
  }
  return error;
 800e0a8:	2336      	movs	r3, #54	@ 0x36
 800e0aa:	18fb      	adds	r3, r7, r3
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e0b0:	0018      	movs	r0, r3
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	b00f      	add	sp, #60	@ 0x3c
 800e0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b8:	0802d0c8 	.word	0x0802d0c8
 800e0bc:	0802d078 	.word	0x0802d078
 800e0c0:	0802d0f4 	.word	0x0802d0f4
 800e0c4:	0802d124 	.word	0x0802d124
 800e0c8:	20000ee4 	.word	0x20000ee4
 800e0cc:	0802d138 	.word	0x0802d138
 800e0d0:	0802d168 	.word	0x0802d168
 800e0d4:	0802d17c 	.word	0x0802d17c
 800e0d8:	0802d1a8 	.word	0x0802d1a8
 800e0dc:	43480000 	.word	0x43480000
 800e0e0:	0802d1cc 	.word	0x0802d1cc
 800e0e4:	0802d20c 	.word	0x0802d20c
 800e0e8:	0802d00c 	.word	0x0802d00c
 800e0ec:	20000ef0 	.word	0x20000ef0
 800e0f0:	00006d60 	.word	0x00006d60

0800e0f4 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800e0f4:	b590      	push	{r4, r7, lr}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800e0fa:	1dbb      	adds	r3, r7, #6
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800e100:	4b1b      	ldr	r3, [pc, #108]	@ (800e170 <sen5x_lightup_measurement+0x7c>)
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00b      	beq.n	800e120 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800e108:	4a1a      	ldr	r2, [pc, #104]	@ (800e174 <sen5x_lightup_measurement+0x80>)
 800e10a:	4b1b      	ldr	r3, [pc, #108]	@ (800e178 <sen5x_lightup_measurement+0x84>)
 800e10c:	0019      	movs	r1, r3
 800e10e:	2002      	movs	r0, #2
 800e110:	f005 f9ae 	bl	8013470 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e114:	1dbc      	adds	r4, r7, #6
 800e116:	f000 fd09 	bl	800eb2c <sen5x_start_measurement_without_pm>
 800e11a:	0003      	movs	r3, r0
 800e11c:	8023      	strh	r3, [r4, #0]
 800e11e:	e00a      	b.n	800e136 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800e120:	4a16      	ldr	r2, [pc, #88]	@ (800e17c <sen5x_lightup_measurement+0x88>)
 800e122:	4b15      	ldr	r3, [pc, #84]	@ (800e178 <sen5x_lightup_measurement+0x84>)
 800e124:	0019      	movs	r1, r3
 800e126:	2002      	movs	r0, #2
 800e128:	f005 f9a2 	bl	8013470 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800e12c:	1dbc      	adds	r4, r7, #6
 800e12e:	f000 fccf 	bl	800ead0 <sen5x_start_measurement>
 800e132:	0003      	movs	r3, r0
 800e134:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800e136:	1dbb      	adds	r3, r7, #6
 800e138:	2200      	movs	r2, #0
 800e13a:	5e9b      	ldrsh	r3, [r3, r2]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d008      	beq.n	800e152 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800e140:	1dbb      	adds	r3, r7, #6
 800e142:	2200      	movs	r2, #0
 800e144:	5e9b      	ldrsh	r3, [r3, r2]
 800e146:	4a0e      	ldr	r2, [pc, #56]	@ (800e180 <sen5x_lightup_measurement+0x8c>)
 800e148:	490e      	ldr	r1, [pc, #56]	@ (800e184 <sen5x_lightup_measurement+0x90>)
 800e14a:	2001      	movs	r0, #1
 800e14c:	f005 f990 	bl	8013470 <CreateLine>
 800e150:	e007      	b.n	800e162 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800e152:	f7fb f91d 	bl	8009390 <showTime>
    Info("sen5x_start_measurement executed");
 800e156:	4a0c      	ldr	r2, [pc, #48]	@ (800e188 <sen5x_lightup_measurement+0x94>)
 800e158:	4b07      	ldr	r3, [pc, #28]	@ (800e178 <sen5x_lightup_measurement+0x84>)
 800e15a:	0019      	movs	r1, r3
 800e15c:	2002      	movs	r0, #2
 800e15e:	f005 f987 	bl	8013470 <CreateLine>
  }
  return error;
 800e162:	1dbb      	adds	r3, r7, #6
 800e164:	2200      	movs	r2, #0
 800e166:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e168:	0018      	movs	r0, r3
 800e16a:	46bd      	mov	sp, r7
 800e16c:	b003      	add	sp, #12
 800e16e:	bd90      	pop	{r4, r7, pc}
 800e170:	20000ee2 	.word	0x20000ee2
 800e174:	0802d244 	.word	0x0802d244
 800e178:	0802d00c 	.word	0x0802d00c
 800e17c:	0802d270 	.word	0x0802d270
 800e180:	0802d290 	.word	0x0802d290
 800e184:	0802d078 	.word	0x0802d078
 800e188:	0802d2c0 	.word	0x0802d2c0

0800e18c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800e18c:	b590      	push	{r4, r7, lr}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800e192:	1dbb      	adds	r3, r7, #6
 800e194:	2200      	movs	r2, #0
 800e196:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800e198:	4b21      	ldr	r3, [pc, #132]	@ (800e220 <sen5x_extinguish_measurement+0x94>)
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d01e      	beq.n	800e1de <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800e1a0:	4a20      	ldr	r2, [pc, #128]	@ (800e224 <sen5x_extinguish_measurement+0x98>)
 800e1a2:	4b21      	ldr	r3, [pc, #132]	@ (800e228 <sen5x_extinguish_measurement+0x9c>)
 800e1a4:	0019      	movs	r1, r3
 800e1a6:	2002      	movs	r0, #2
 800e1a8:	f005 f962 	bl	8013470 <CreateLine>
    Info("PM measurement is disabled");
 800e1ac:	4a1f      	ldr	r2, [pc, #124]	@ (800e22c <sen5x_extinguish_measurement+0xa0>)
 800e1ae:	4b1e      	ldr	r3, [pc, #120]	@ (800e228 <sen5x_extinguish_measurement+0x9c>)
 800e1b0:	0019      	movs	r1, r3
 800e1b2:	2002      	movs	r0, #2
 800e1b4:	f005 f95c 	bl	8013470 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800e1b8:	1dbc      	adds	r4, r7, #6
 800e1ba:	f000 fcb7 	bl	800eb2c <sen5x_start_measurement_without_pm>
 800e1be:	0003      	movs	r3, r0
 800e1c0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e1c2:	1dbb      	adds	r3, r7, #6
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	5e9b      	ldrsh	r3, [r3, r2]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d022      	beq.n	800e212 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800e1cc:	1dbb      	adds	r3, r7, #6
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	5e9b      	ldrsh	r3, [r3, r2]
 800e1d2:	4a17      	ldr	r2, [pc, #92]	@ (800e230 <sen5x_extinguish_measurement+0xa4>)
 800e1d4:	4917      	ldr	r1, [pc, #92]	@ (800e234 <sen5x_extinguish_measurement+0xa8>)
 800e1d6:	2001      	movs	r0, #1
 800e1d8:	f005 f94a 	bl	8013470 <CreateLine>
 800e1dc:	e019      	b.n	800e212 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800e1de:	1dbc      	adds	r4, r7, #6
 800e1e0:	f000 fcd2 	bl	800eb88 <sen5x_stop_measurement>
 800e1e4:	0003      	movs	r3, r0
 800e1e6:	8023      	strh	r3, [r4, #0]
    showTime();
 800e1e8:	f7fb f8d2 	bl	8009390 <showTime>
    Info("sen5x_stop_measurement executed");
 800e1ec:	4a12      	ldr	r2, [pc, #72]	@ (800e238 <sen5x_extinguish_measurement+0xac>)
 800e1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e228 <sen5x_extinguish_measurement+0x9c>)
 800e1f0:	0019      	movs	r1, r3
 800e1f2:	2002      	movs	r0, #2
 800e1f4:	f005 f93c 	bl	8013470 <CreateLine>
    if (error) {
 800e1f8:	1dbb      	adds	r3, r7, #6
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	5e9b      	ldrsh	r3, [r3, r2]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d007      	beq.n	800e212 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800e202:	1dbb      	adds	r3, r7, #6
 800e204:	2200      	movs	r2, #0
 800e206:	5e9b      	ldrsh	r3, [r3, r2]
 800e208:	4a0c      	ldr	r2, [pc, #48]	@ (800e23c <sen5x_extinguish_measurement+0xb0>)
 800e20a:	490a      	ldr	r1, [pc, #40]	@ (800e234 <sen5x_extinguish_measurement+0xa8>)
 800e20c:	2001      	movs	r0, #1
 800e20e:	f005 f92f 	bl	8013470 <CreateLine>
    }
  }
  return error;
 800e212:	1dbb      	adds	r3, r7, #6
 800e214:	2200      	movs	r2, #0
 800e216:	5e9b      	ldrsh	r3, [r3, r2]
}
 800e218:	0018      	movs	r0, r3
 800e21a:	46bd      	mov	sp, r7
 800e21c:	b003      	add	sp, #12
 800e21e:	bd90      	pop	{r4, r7, pc}
 800e220:	20000ee2 	.word	0x20000ee2
 800e224:	0802d2e4 	.word	0x0802d2e4
 800e228:	0802d00c 	.word	0x0802d00c
 800e22c:	0802d31c 	.word	0x0802d31c
 800e230:	0802d338 	.word	0x0802d338
 800e234:	0802d078 	.word	0x0802d078
 800e238:	0802d378 	.word	0x0802d378
 800e23c:	0802d398 	.word	0x0802d398

0800e240 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800e240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e242:	b08d      	sub	sp, #52	@ 0x34
 800e244:	af04      	add	r7, sp, #16
 800e246:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800e248:	261e      	movs	r6, #30
 800e24a:	19bb      	adds	r3, r7, r6
 800e24c:	2200      	movs	r2, #0
 800e24e:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800e250:	19bc      	adds	r4, r7, r6
 800e252:	2316      	movs	r3, #22
 800e254:	18fd      	adds	r5, r7, r3
 800e256:	2318      	movs	r3, #24
 800e258:	18fa      	adds	r2, r7, r3
 800e25a:	231a      	movs	r3, #26
 800e25c:	18f9      	adds	r1, r7, r3
 800e25e:	231c      	movs	r3, #28
 800e260:	18f8      	adds	r0, r7, r3
 800e262:	230e      	movs	r3, #14
 800e264:	18fb      	adds	r3, r7, r3
 800e266:	9303      	str	r3, [sp, #12]
 800e268:	2310      	movs	r3, #16
 800e26a:	18fb      	adds	r3, r7, r3
 800e26c:	9302      	str	r3, [sp, #8]
 800e26e:	2312      	movs	r3, #18
 800e270:	18fb      	adds	r3, r7, r3
 800e272:	9301      	str	r3, [sp, #4]
 800e274:	2314      	movs	r3, #20
 800e276:	18fb      	adds	r3, r7, r3
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	002b      	movs	r3, r5
 800e27c:	f000 fd06 	bl	800ec8c <sen5x_read_measured_values>
 800e280:	0003      	movs	r3, r0
 800e282:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800e284:	19bb      	adds	r3, r7, r6
 800e286:	2200      	movs	r2, #0
 800e288:	5e9b      	ldrsh	r3, [r3, r2]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d003      	beq.n	800e296 <sen5x_read_measurement+0x56>
    return error;
 800e28e:	19bb      	adds	r3, r7, r6
 800e290:	2200      	movs	r2, #0
 800e292:	5e9b      	ldrsh	r3, [r3, r2]
 800e294:	e02c      	b.n	800e2f0 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800e296:	231c      	movs	r3, #28
 800e298:	18fb      	adds	r3, r7, r3
 800e29a:	881a      	ldrh	r2, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800e2a0:	231a      	movs	r3, #26
 800e2a2:	18fb      	adds	r3, r7, r3
 800e2a4:	881a      	ldrh	r2, [r3, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800e2aa:	2318      	movs	r3, #24
 800e2ac:	18fb      	adds	r3, r7, r3
 800e2ae:	881a      	ldrh	r2, [r3, #0]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800e2b4:	2316      	movs	r3, #22
 800e2b6:	18fb      	adds	r3, r7, r3
 800e2b8:	881a      	ldrh	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800e2be:	2314      	movs	r3, #20
 800e2c0:	18fb      	adds	r3, r7, r3
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	5e9a      	ldrsh	r2, [r3, r2]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800e2ca:	2312      	movs	r3, #18
 800e2cc:	18fb      	adds	r3, r7, r3
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	5e9a      	ldrsh	r2, [r3, r2]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800e2d6:	2310      	movs	r3, #16
 800e2d8:	18fb      	adds	r3, r7, r3
 800e2da:	2200      	movs	r2, #0
 800e2dc:	5e9a      	ldrsh	r2, [r3, r2]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800e2e2:	230e      	movs	r3, #14
 800e2e4:	18fb      	adds	r3, r7, r3
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	5e9a      	ldrsh	r2, [r3, r2]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	81da      	strh	r2, [r3, #14]
  return 0;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	0018      	movs	r0, r3
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	b009      	add	sp, #36	@ 0x24
 800e2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2f8 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e2fc:	4b63      	ldr	r3, [pc, #396]	@ (800e48c <sen5x_printvalues+0x194>)
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	4a63      	ldr	r2, [pc, #396]	@ (800e490 <sen5x_printvalues+0x198>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d013      	beq.n	800e32e <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800e306:	4b61      	ldr	r3, [pc, #388]	@ (800e48c <sen5x_printvalues+0x194>)
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	0018      	movs	r0, r3
 800e30c:	f7f3 fa8c 	bl	8001828 <__aeabi_i2f>
 800e310:	1c03      	adds	r3, r0, #0
 800e312:	4960      	ldr	r1, [pc, #384]	@ (800e494 <sen5x_printvalues+0x19c>)
 800e314:	1c18      	adds	r0, r3, #0
 800e316:	f7f2 fcc5 	bl	8000ca4 <__aeabi_fdiv>
 800e31a:	1c03      	adds	r3, r0, #0
 800e31c:	1c18      	adds	r0, r3, #0
 800e31e:	f7f5 fab9 	bl	8003894 <__aeabi_f2d>
 800e322:	0002      	movs	r2, r0
 800e324:	000b      	movs	r3, r1
 800e326:	495c      	ldr	r1, [pc, #368]	@ (800e498 <sen5x_printvalues+0x1a0>)
 800e328:	0008      	movs	r0, r1
 800e32a:	f017 fb65 	bl	80259f8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e32e:	4b57      	ldr	r3, [pc, #348]	@ (800e48c <sen5x_printvalues+0x194>)
 800e330:	885b      	ldrh	r3, [r3, #2]
 800e332:	4a57      	ldr	r2, [pc, #348]	@ (800e490 <sen5x_printvalues+0x198>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d013      	beq.n	800e360 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800e338:	4b54      	ldr	r3, [pc, #336]	@ (800e48c <sen5x_printvalues+0x194>)
 800e33a:	885b      	ldrh	r3, [r3, #2]
 800e33c:	0018      	movs	r0, r3
 800e33e:	f7f3 fa73 	bl	8001828 <__aeabi_i2f>
 800e342:	1c03      	adds	r3, r0, #0
 800e344:	4953      	ldr	r1, [pc, #332]	@ (800e494 <sen5x_printvalues+0x19c>)
 800e346:	1c18      	adds	r0, r3, #0
 800e348:	f7f2 fcac 	bl	8000ca4 <__aeabi_fdiv>
 800e34c:	1c03      	adds	r3, r0, #0
 800e34e:	1c18      	adds	r0, r3, #0
 800e350:	f7f5 faa0 	bl	8003894 <__aeabi_f2d>
 800e354:	0002      	movs	r2, r0
 800e356:	000b      	movs	r3, r1
 800e358:	4950      	ldr	r1, [pc, #320]	@ (800e49c <sen5x_printvalues+0x1a4>)
 800e35a:	0008      	movs	r0, r1
 800e35c:	f017 fb4c 	bl	80259f8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e360:	4b4a      	ldr	r3, [pc, #296]	@ (800e48c <sen5x_printvalues+0x194>)
 800e362:	889b      	ldrh	r3, [r3, #4]
 800e364:	4a4a      	ldr	r2, [pc, #296]	@ (800e490 <sen5x_printvalues+0x198>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d013      	beq.n	800e392 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800e36a:	4b48      	ldr	r3, [pc, #288]	@ (800e48c <sen5x_printvalues+0x194>)
 800e36c:	889b      	ldrh	r3, [r3, #4]
 800e36e:	0018      	movs	r0, r3
 800e370:	f7f3 fa5a 	bl	8001828 <__aeabi_i2f>
 800e374:	1c03      	adds	r3, r0, #0
 800e376:	4947      	ldr	r1, [pc, #284]	@ (800e494 <sen5x_printvalues+0x19c>)
 800e378:	1c18      	adds	r0, r3, #0
 800e37a:	f7f2 fc93 	bl	8000ca4 <__aeabi_fdiv>
 800e37e:	1c03      	adds	r3, r0, #0
 800e380:	1c18      	adds	r0, r3, #0
 800e382:	f7f5 fa87 	bl	8003894 <__aeabi_f2d>
 800e386:	0002      	movs	r2, r0
 800e388:	000b      	movs	r3, r1
 800e38a:	4945      	ldr	r1, [pc, #276]	@ (800e4a0 <sen5x_printvalues+0x1a8>)
 800e38c:	0008      	movs	r0, r1
 800e38e:	f017 fb33 	bl	80259f8 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e392:	4b3e      	ldr	r3, [pc, #248]	@ (800e48c <sen5x_printvalues+0x194>)
 800e394:	88db      	ldrh	r3, [r3, #6]
 800e396:	4a3e      	ldr	r2, [pc, #248]	@ (800e490 <sen5x_printvalues+0x198>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d013      	beq.n	800e3c4 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800e39c:	4b3b      	ldr	r3, [pc, #236]	@ (800e48c <sen5x_printvalues+0x194>)
 800e39e:	88db      	ldrh	r3, [r3, #6]
 800e3a0:	0018      	movs	r0, r3
 800e3a2:	f7f3 fa41 	bl	8001828 <__aeabi_i2f>
 800e3a6:	1c03      	adds	r3, r0, #0
 800e3a8:	493a      	ldr	r1, [pc, #232]	@ (800e494 <sen5x_printvalues+0x19c>)
 800e3aa:	1c18      	adds	r0, r3, #0
 800e3ac:	f7f2 fc7a 	bl	8000ca4 <__aeabi_fdiv>
 800e3b0:	1c03      	adds	r3, r0, #0
 800e3b2:	1c18      	adds	r0, r3, #0
 800e3b4:	f7f5 fa6e 	bl	8003894 <__aeabi_f2d>
 800e3b8:	0002      	movs	r2, r0
 800e3ba:	000b      	movs	r3, r1
 800e3bc:	4939      	ldr	r1, [pc, #228]	@ (800e4a4 <sen5x_printvalues+0x1ac>)
 800e3be:	0008      	movs	r0, r1
 800e3c0:	f017 fb1a 	bl	80259f8 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800e3c4:	4b31      	ldr	r3, [pc, #196]	@ (800e48c <sen5x_printvalues+0x194>)
 800e3c6:	2208      	movs	r2, #8
 800e3c8:	5e9b      	ldrsh	r3, [r3, r2]
 800e3ca:	4a37      	ldr	r2, [pc, #220]	@ (800e4a8 <sen5x_printvalues+0x1b0>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d014      	beq.n	800e3fa <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800e3d0:	4b2e      	ldr	r3, [pc, #184]	@ (800e48c <sen5x_printvalues+0x194>)
 800e3d2:	2208      	movs	r2, #8
 800e3d4:	5e9b      	ldrsh	r3, [r3, r2]
 800e3d6:	0018      	movs	r0, r3
 800e3d8:	f7f3 fa26 	bl	8001828 <__aeabi_i2f>
 800e3dc:	1c03      	adds	r3, r0, #0
 800e3de:	4933      	ldr	r1, [pc, #204]	@ (800e4ac <sen5x_printvalues+0x1b4>)
 800e3e0:	1c18      	adds	r0, r3, #0
 800e3e2:	f7f2 fc5f 	bl	8000ca4 <__aeabi_fdiv>
 800e3e6:	1c03      	adds	r3, r0, #0
 800e3e8:	1c18      	adds	r0, r3, #0
 800e3ea:	f7f5 fa53 	bl	8003894 <__aeabi_f2d>
 800e3ee:	0002      	movs	r2, r0
 800e3f0:	000b      	movs	r3, r1
 800e3f2:	492f      	ldr	r1, [pc, #188]	@ (800e4b0 <sen5x_printvalues+0x1b8>)
 800e3f4:	0008      	movs	r0, r1
 800e3f6:	f017 faff 	bl	80259f8 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800e3fa:	4b24      	ldr	r3, [pc, #144]	@ (800e48c <sen5x_printvalues+0x194>)
 800e3fc:	220a      	movs	r2, #10
 800e3fe:	5e9b      	ldrsh	r3, [r3, r2]
 800e400:	4a29      	ldr	r2, [pc, #164]	@ (800e4a8 <sen5x_printvalues+0x1b0>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d014      	beq.n	800e430 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800e406:	4b21      	ldr	r3, [pc, #132]	@ (800e48c <sen5x_printvalues+0x194>)
 800e408:	220a      	movs	r2, #10
 800e40a:	5e9b      	ldrsh	r3, [r3, r2]
 800e40c:	0018      	movs	r0, r3
 800e40e:	f7f3 fa0b 	bl	8001828 <__aeabi_i2f>
 800e412:	1c03      	adds	r3, r0, #0
 800e414:	4927      	ldr	r1, [pc, #156]	@ (800e4b4 <sen5x_printvalues+0x1bc>)
 800e416:	1c18      	adds	r0, r3, #0
 800e418:	f7f2 fc44 	bl	8000ca4 <__aeabi_fdiv>
 800e41c:	1c03      	adds	r3, r0, #0
 800e41e:	1c18      	adds	r0, r3, #0
 800e420:	f7f5 fa38 	bl	8003894 <__aeabi_f2d>
 800e424:	0002      	movs	r2, r0
 800e426:	000b      	movs	r3, r1
 800e428:	4923      	ldr	r1, [pc, #140]	@ (800e4b8 <sen5x_printvalues+0x1c0>)
 800e42a:	0008      	movs	r0, r1
 800e42c:	f017 fae4 	bl	80259f8 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800e430:	4b16      	ldr	r3, [pc, #88]	@ (800e48c <sen5x_printvalues+0x194>)
 800e432:	220c      	movs	r2, #12
 800e434:	5e9b      	ldrsh	r3, [r3, r2]
 800e436:	4a1c      	ldr	r2, [pc, #112]	@ (800e4a8 <sen5x_printvalues+0x1b0>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d00e      	beq.n	800e45a <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800e43c:	4b13      	ldr	r3, [pc, #76]	@ (800e48c <sen5x_printvalues+0x194>)
 800e43e:	220c      	movs	r2, #12
 800e440:	5e9b      	ldrsh	r3, [r3, r2]
 800e442:	210a      	movs	r1, #10
 800e444:	0018      	movs	r0, r3
 800e446:	f7f1 ff37 	bl	80002b8 <__divsi3>
 800e44a:	0003      	movs	r3, r0
 800e44c:	b21b      	sxth	r3, r3
 800e44e:	001a      	movs	r2, r3
 800e450:	4b1a      	ldr	r3, [pc, #104]	@ (800e4bc <sen5x_printvalues+0x1c4>)
 800e452:	0011      	movs	r1, r2
 800e454:	0018      	movs	r0, r3
 800e456:	f017 facf 	bl	80259f8 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800e45a:	4b0c      	ldr	r3, [pc, #48]	@ (800e48c <sen5x_printvalues+0x194>)
 800e45c:	220e      	movs	r2, #14
 800e45e:	5e9b      	ldrsh	r3, [r3, r2]
 800e460:	4a11      	ldr	r2, [pc, #68]	@ (800e4a8 <sen5x_printvalues+0x1b0>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d00e      	beq.n	800e484 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800e466:	4b09      	ldr	r3, [pc, #36]	@ (800e48c <sen5x_printvalues+0x194>)
 800e468:	220e      	movs	r2, #14
 800e46a:	5e9b      	ldrsh	r3, [r3, r2]
 800e46c:	210a      	movs	r1, #10
 800e46e:	0018      	movs	r0, r3
 800e470:	f7f1 ff22 	bl	80002b8 <__divsi3>
 800e474:	0003      	movs	r3, r0
 800e476:	b21b      	sxth	r3, r3
 800e478:	001a      	movs	r2, r3
 800e47a:	4b11      	ldr	r3, [pc, #68]	@ (800e4c0 <sen5x_printvalues+0x1c8>)
 800e47c:	0011      	movs	r1, r2
 800e47e:	0018      	movs	r0, r3
 800e480:	f017 faba 	bl	80259f8 <iprintf>
  }
}
 800e484:	46c0      	nop			@ (mov r8, r8)
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	46c0      	nop			@ (mov r8, r8)
 800e48c:	20000ef4 	.word	0x20000ef4
 800e490:	0000ffff 	.word	0x0000ffff
 800e494:	41200000 	.word	0x41200000
 800e498:	0802d3c8 	.word	0x0802d3c8
 800e49c:	0802d3f4 	.word	0x0802d3f4
 800e4a0:	0802d420 	.word	0x0802d420
 800e4a4:	0802d44c 	.word	0x0802d44c
 800e4a8:	00007fff 	.word	0x00007fff
 800e4ac:	42c80000 	.word	0x42c80000
 800e4b0:	0802d478 	.word	0x0802d478
 800e4b4:	43480000 	.word	0x43480000
 800e4b8:	0802d49c 	.word	0x0802d49c
 800e4bc:	0802d4c4 	.word	0x0802d4c4
 800e4c0:	0802d4dc 	.word	0x0802d4dc

0800e4c4 <sen5xStore>:

void sen5xStore() {
 800e4c4:	b5b0      	push	{r4, r5, r7, lr}
 800e4c6:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e4c8:	4b41      	ldr	r3, [pc, #260]	@ (800e5d0 <sen5xStore+0x10c>)
 800e4ca:	881b      	ldrh	r3, [r3, #0]
 800e4cc:	4a41      	ldr	r2, [pc, #260]	@ (800e5d4 <sen5xStore+0x110>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d004      	beq.n	800e4dc <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800e4d2:	4b3f      	ldr	r3, [pc, #252]	@ (800e5d0 <sen5xStore+0x10c>)
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	0018      	movs	r0, r3
 800e4d8:	f7f6 fb5c 	bl	8004b94 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e4dc:	4b3c      	ldr	r3, [pc, #240]	@ (800e5d0 <sen5xStore+0x10c>)
 800e4de:	885b      	ldrh	r3, [r3, #2]
 800e4e0:	4a3c      	ldr	r2, [pc, #240]	@ (800e5d4 <sen5xStore+0x110>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d004      	beq.n	800e4f0 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800e4e6:	4b3a      	ldr	r3, [pc, #232]	@ (800e5d0 <sen5xStore+0x10c>)
 800e4e8:	885b      	ldrh	r3, [r3, #2]
 800e4ea:	0018      	movs	r0, r3
 800e4ec:	f7f6 fb7e 	bl	8004bec <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e4f0:	4b37      	ldr	r3, [pc, #220]	@ (800e5d0 <sen5xStore+0x10c>)
 800e4f2:	889b      	ldrh	r3, [r3, #4]
 800e4f4:	4a37      	ldr	r2, [pc, #220]	@ (800e5d4 <sen5xStore+0x110>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d004      	beq.n	800e504 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800e4fa:	4b35      	ldr	r3, [pc, #212]	@ (800e5d0 <sen5xStore+0x10c>)
 800e4fc:	889b      	ldrh	r3, [r3, #4]
 800e4fe:	0018      	movs	r0, r3
 800e500:	f7f6 fba0 	bl	8004c44 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e504:	4b32      	ldr	r3, [pc, #200]	@ (800e5d0 <sen5xStore+0x10c>)
 800e506:	88db      	ldrh	r3, [r3, #6]
 800e508:	4a32      	ldr	r2, [pc, #200]	@ (800e5d4 <sen5xStore+0x110>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d004      	beq.n	800e518 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800e50e:	4b30      	ldr	r3, [pc, #192]	@ (800e5d0 <sen5xStore+0x10c>)
 800e510:	88db      	ldrh	r3, [r3, #6]
 800e512:	0018      	movs	r0, r3
 800e514:	f7f6 fbc2 	bl	8004c9c <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e518:	4b2f      	ldr	r3, [pc, #188]	@ (800e5d8 <sen5xStore+0x114>)
 800e51a:	791b      	ldrb	r3, [r3, #4]
 800e51c:	2b34      	cmp	r3, #52	@ 0x34
 800e51e:	d003      	beq.n	800e528 <sen5xStore+0x64>
 800e520:	4b2d      	ldr	r3, [pc, #180]	@ (800e5d8 <sen5xStore+0x114>)
 800e522:	791b      	ldrb	r3, [r3, #4]
 800e524:	2b35      	cmp	r3, #53	@ 0x35
 800e526:	d14f      	bne.n	800e5c8 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800e528:	4b29      	ldr	r3, [pc, #164]	@ (800e5d0 <sen5xStore+0x10c>)
 800e52a:	220a      	movs	r2, #10
 800e52c:	5e9b      	ldrsh	r3, [r3, r2]
 800e52e:	0018      	movs	r0, r3
 800e530:	f7f3 f97a 	bl	8001828 <__aeabi_i2f>
 800e534:	1c04      	adds	r4, r0, #0
 800e536:	4b26      	ldr	r3, [pc, #152]	@ (800e5d0 <sen5xStore+0x10c>)
 800e538:	2208      	movs	r2, #8
 800e53a:	5e9b      	ldrsh	r3, [r3, r2]
 800e53c:	0018      	movs	r0, r3
 800e53e:	f7f3 f973 	bl	8001828 <__aeabi_i2f>
 800e542:	1c03      	adds	r3, r0, #0
 800e544:	1c19      	adds	r1, r3, #0
 800e546:	1c20      	adds	r0, r4, #0
 800e548:	f7f6 fbf2 	bl	8004d30 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800e54c:	4b23      	ldr	r3, [pc, #140]	@ (800e5dc <sen5xStore+0x118>)
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2201      	movs	r2, #1
 800e552:	4053      	eors	r3, r2
 800e554:	b2db      	uxtb	r3, r3
 800e556:	2b00      	cmp	r3, #0
 800e558:	d103      	bne.n	800e562 <sen5xStore+0x9e>
 800e55a:	4b21      	ldr	r3, [pc, #132]	@ (800e5e0 <sen5xStore+0x11c>)
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d032      	beq.n	800e5c8 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800e562:	4b1b      	ldr	r3, [pc, #108]	@ (800e5d0 <sen5xStore+0x10c>)
 800e564:	220c      	movs	r2, #12
 800e566:	5e9b      	ldrsh	r3, [r3, r2]
 800e568:	4a1e      	ldr	r2, [pc, #120]	@ (800e5e4 <sen5xStore+0x120>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d019      	beq.n	800e5a2 <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800e56e:	4b18      	ldr	r3, [pc, #96]	@ (800e5d0 <sen5xStore+0x10c>)
 800e570:	220c      	movs	r2, #12
 800e572:	5e9b      	ldrsh	r3, [r3, r2]
 800e574:	210a      	movs	r1, #10
 800e576:	0018      	movs	r0, r3
 800e578:	f7f1 fe9e 	bl	80002b8 <__divsi3>
 800e57c:	0003      	movs	r3, r0
 800e57e:	b21b      	sxth	r3, r3
 800e580:	b29b      	uxth	r3, r3
 800e582:	0018      	movs	r0, r3
 800e584:	f003 fee4 	bl	8012350 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800e588:	4b11      	ldr	r3, [pc, #68]	@ (800e5d0 <sen5xStore+0x10c>)
 800e58a:	220c      	movs	r2, #12
 800e58c:	5e9b      	ldrsh	r3, [r3, r2]
 800e58e:	210a      	movs	r1, #10
 800e590:	0018      	movs	r0, r3
 800e592:	f7f1 fe91 	bl	80002b8 <__divsi3>
 800e596:	0003      	movs	r3, r0
 800e598:	b21b      	sxth	r3, r3
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	0018      	movs	r0, r3
 800e59e:	f7f6 fa71 	bl	8004a84 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800e5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e5d0 <sen5xStore+0x10c>)
 800e5a4:	220e      	movs	r2, #14
 800e5a6:	5e9b      	ldrsh	r3, [r3, r2]
 800e5a8:	4a0e      	ldr	r2, [pc, #56]	@ (800e5e4 <sen5xStore+0x120>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d00c      	beq.n	800e5c8 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800e5ae:	4b08      	ldr	r3, [pc, #32]	@ (800e5d0 <sen5xStore+0x10c>)
 800e5b0:	220e      	movs	r2, #14
 800e5b2:	5e9b      	ldrsh	r3, [r3, r2]
 800e5b4:	210a      	movs	r1, #10
 800e5b6:	0018      	movs	r0, r3
 800e5b8:	f7f1 fe7e 	bl	80002b8 <__divsi3>
 800e5bc:	0003      	movs	r3, r0
 800e5be:	b21b      	sxth	r3, r3
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	f7f6 fb96 	bl	8004cf4 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800e5c8:	46c0      	nop			@ (mov r8, r8)
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e5ce:	46c0      	nop			@ (mov r8, r8)
 800e5d0:	20000ef4 	.word	0x20000ef4
 800e5d4:	0000ffff 	.word	0x0000ffff
 800e5d8:	20000ee4 	.word	0x20000ee4
 800e5dc:	20000ee2 	.word	0x20000ee2
 800e5e0:	20001e71 	.word	0x20001e71
 800e5e4:	00007fff 	.word	0x00007fff

0800e5e8 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800e5e8:	b590      	push	{r4, r7, lr}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af02      	add	r7, sp, #8
 800e5ee:	6039      	str	r1, [r7, #0]
 800e5f0:	0011      	movs	r1, r2
 800e5f2:	1dfb      	adds	r3, r7, #7
 800e5f4:	1c02      	adds	r2, r0, #0
 800e5f6:	701a      	strb	r2, [r3, #0]
 800e5f8:	1d3b      	adds	r3, r7, #4
 800e5fa:	1c0a      	adds	r2, r1, #0
 800e5fc:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800e5fe:	1dfb      	adds	r3, r7, #7
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	b29b      	uxth	r3, r3
 800e604:	18db      	adds	r3, r3, r3
 800e606:	b299      	uxth	r1, r3
 800e608:	1d3b      	adds	r3, r7, #4
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	683a      	ldr	r2, [r7, #0]
 800e60e:	4805      	ldr	r0, [pc, #20]	@ (800e624 <sensirion_i2c_hal_read+0x3c>)
 800e610:	2464      	movs	r4, #100	@ 0x64
 800e612:	9400      	str	r4, [sp, #0]
 800e614:	f007 f916 	bl	8015844 <HAL_I2C_Master_Receive>
 800e618:	0003      	movs	r3, r0
 800e61a:	b25b      	sxtb	r3, r3
}
 800e61c:	0018      	movs	r0, r3
 800e61e:	46bd      	mov	sp, r7
 800e620:	b003      	add	sp, #12
 800e622:	bd90      	pop	{r4, r7, pc}
 800e624:	20000cb8 	.word	0x20000cb8

0800e628 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af02      	add	r7, sp, #8
 800e62e:	6039      	str	r1, [r7, #0]
 800e630:	0011      	movs	r1, r2
 800e632:	1dfb      	adds	r3, r7, #7
 800e634:	1c02      	adds	r2, r0, #0
 800e636:	701a      	strb	r2, [r3, #0]
 800e638:	1d3b      	adds	r3, r7, #4
 800e63a:	1c0a      	adds	r2, r1, #0
 800e63c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800e63e:	1dfb      	adds	r3, r7, #7
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	b29b      	uxth	r3, r3
 800e644:	18db      	adds	r3, r3, r3
 800e646:	b299      	uxth	r1, r3
 800e648:	1d3b      	adds	r3, r7, #4
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	4805      	ldr	r0, [pc, #20]	@ (800e664 <sensirion_i2c_hal_write+0x3c>)
 800e650:	2464      	movs	r4, #100	@ 0x64
 800e652:	9400      	str	r4, [sp, #0]
 800e654:	f006 ffee 	bl	8015634 <HAL_I2C_Master_Transmit>
 800e658:	0003      	movs	r3, r0
 800e65a:	b25b      	sxtb	r3, r3
}
 800e65c:	0018      	movs	r0, r3
 800e65e:	46bd      	mov	sp, r7
 800e660:	b003      	add	sp, #12
 800e662:	bd90      	pop	{r4, r7, pc}
 800e664:	20000cb8 	.word	0x20000cb8

0800e668 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	22fa      	movs	r2, #250	@ 0xfa
 800e674:	0091      	lsls	r1, r2, #2
 800e676:	0018      	movs	r0, r3
 800e678:	f7f1 fd94 	bl	80001a4 <__udivsi3>
 800e67c:	0003      	movs	r3, r0
 800e67e:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	22fa      	movs	r2, #250	@ 0xfa
 800e684:	0091      	lsls	r1, r2, #2
 800e686:	0018      	movs	r0, r3
 800e688:	f7f1 fe12 	bl	80002b0 <__aeabi_uidivmod>
 800e68c:	1e0b      	subs	r3, r1, #0
 800e68e:	d002      	beq.n	800e696 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	3301      	adds	r3, #1
 800e694:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	0018      	movs	r0, r3
 800e69a:	f005 fc75 	bl	8013f88 <HAL_Delay>
}
 800e69e:	46c0      	nop			@ (mov r8, r8)
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	b004      	add	sp, #16
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800e6ae:	1d3b      	adds	r3, r7, #4
 800e6b0:	0018      	movs	r0, r3
 800e6b2:	f000 fd2b 	bl	800f10c <sen5x_read_device_status>
 800e6b6:	0003      	movs	r3, r0
 800e6b8:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4a2c      	ldr	r2, [pc, #176]	@ (800e770 <sen5x_check_for_errors+0xc8>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d107      	bne.n	800e6d2 <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800e6c2:	4a2c      	ldr	r2, [pc, #176]	@ (800e774 <sen5x_check_for_errors+0xcc>)
 800e6c4:	4b2c      	ldr	r3, [pc, #176]	@ (800e778 <sen5x_check_for_errors+0xd0>)
 800e6c6:	0019      	movs	r1, r3
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	f004 fed1 	bl	8013470 <CreateLine>
    return true;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e049      	b.n	800e766 <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <sen5x_check_for_errors+0x34>
    return false;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	e044      	b.n	800e766 <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	2380      	movs	r3, #128	@ 0x80
 800e6e0:	039b      	lsls	r3, r3, #14
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	d005      	beq.n	800e6f2 <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800e6e6:	4a25      	ldr	r2, [pc, #148]	@ (800e77c <sen5x_check_for_errors+0xd4>)
 800e6e8:	4b25      	ldr	r3, [pc, #148]	@ (800e780 <sen5x_check_for_errors+0xd8>)
 800e6ea:	0019      	movs	r1, r3
 800e6ec:	2003      	movs	r0, #3
 800e6ee:	f004 febf 	bl	8013470 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	2380      	movs	r3, #128	@ 0x80
 800e6f6:	031b      	lsls	r3, r3, #12
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	d005      	beq.n	800e708 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800e6fc:	4a21      	ldr	r2, [pc, #132]	@ (800e784 <sen5x_check_for_errors+0xdc>)
 800e6fe:	4b20      	ldr	r3, [pc, #128]	@ (800e780 <sen5x_check_for_errors+0xd8>)
 800e700:	0019      	movs	r1, r3
 800e702:	2003      	movs	r0, #3
 800e704:	f004 feb4 	bl	8013470 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2280      	movs	r2, #128	@ 0x80
 800e70c:	4013      	ands	r3, r2
 800e70e:	d005      	beq.n	800e71c <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800e710:	4a1d      	ldr	r2, [pc, #116]	@ (800e788 <sen5x_check_for_errors+0xe0>)
 800e712:	4b1b      	ldr	r3, [pc, #108]	@ (800e780 <sen5x_check_for_errors+0xd8>)
 800e714:	0019      	movs	r1, r3
 800e716:	2003      	movs	r0, #3
 800e718:	f004 feaa 	bl	8013470 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2240      	movs	r2, #64	@ 0x40
 800e720:	4013      	ands	r3, r2
 800e722:	d005      	beq.n	800e730 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800e724:	4a19      	ldr	r2, [pc, #100]	@ (800e78c <sen5x_check_for_errors+0xe4>)
 800e726:	4b16      	ldr	r3, [pc, #88]	@ (800e780 <sen5x_check_for_errors+0xd8>)
 800e728:	0019      	movs	r1, r3
 800e72a:	2003      	movs	r0, #3
 800e72c:	f004 fea0 	bl	8013470 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2220      	movs	r2, #32
 800e734:	4013      	ands	r3, r2
 800e736:	d005      	beq.n	800e744 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800e738:	4a15      	ldr	r2, [pc, #84]	@ (800e790 <sen5x_check_for_errors+0xe8>)
 800e73a:	4b11      	ldr	r3, [pc, #68]	@ (800e780 <sen5x_check_for_errors+0xd8>)
 800e73c:	0019      	movs	r1, r3
 800e73e:	2003      	movs	r0, #3
 800e740:	f004 fe96 	bl	8013470 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2210      	movs	r2, #16
 800e748:	4013      	ands	r3, r2
 800e74a:	d005      	beq.n	800e758 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800e74c:	4a11      	ldr	r2, [pc, #68]	@ (800e794 <sen5x_check_for_errors+0xec>)
 800e74e:	4b0c      	ldr	r3, [pc, #48]	@ (800e780 <sen5x_check_for_errors+0xd8>)
 800e750:	0019      	movs	r1, r3
 800e752:	2003      	movs	r0, #3
 800e754:	f004 fe8c 	bl	8013470 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4a0f      	ldr	r2, [pc, #60]	@ (800e798 <sen5x_check_for_errors+0xf0>)
 800e75c:	4908      	ldr	r1, [pc, #32]	@ (800e780 <sen5x_check_for_errors+0xd8>)
 800e75e:	2003      	movs	r0, #3
 800e760:	f004 fe86 	bl	8013470 <CreateLine>
  return true;
 800e764:	2301      	movs	r3, #1
}
 800e766:	0018      	movs	r0, r3
 800e768:	46bd      	mov	sp, r7
 800e76a:	b002      	add	sp, #8
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	46c0      	nop			@ (mov r8, r8)
 800e770:	0000d206 	.word	0x0000d206
 800e774:	0802d4f4 	.word	0x0802d4f4
 800e778:	0802d078 	.word	0x0802d078
 800e77c:	0802d534 	.word	0x0802d534
 800e780:	0802d04c 	.word	0x0802d04c
 800e784:	0802d554 	.word	0x0802d554
 800e788:	0802d570 	.word	0x0802d570
 800e78c:	0802d594 	.word	0x0802d594
 800e790:	0802d5b4 	.word	0x0802d5b4
 800e794:	0802d5c8 	.word	0x0802d5c8
 800e798:	0802d604 	.word	0x0802d604

0800e79c <set_light_on_state>:

void set_light_on_state(void) {
 800e79c:	b580      	push	{r7, lr}
 800e79e:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800e7a0:	4b15      	ldr	r3, [pc, #84]	@ (800e7f8 <set_light_on_state+0x5c>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	4053      	eors	r3, r2
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d008      	beq.n	800e7c0 <set_light_on_state+0x24>
    sen5x_Power_On();
 800e7ae:	f7ff fb11 	bl	800ddd4 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800e7b2:	4a12      	ldr	r2, [pc, #72]	@ (800e7fc <set_light_on_state+0x60>)
 800e7b4:	4b12      	ldr	r3, [pc, #72]	@ (800e800 <set_light_on_state+0x64>)
 800e7b6:	0019      	movs	r1, r3
 800e7b8:	2003      	movs	r0, #3
 800e7ba:	f004 fe59 	bl	8013470 <CreateLine>
 800e7be:	e00a      	b.n	800e7d6 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800e7c0:	f005 fbd8 	bl	8013f74 <HAL_GetTick>
 800e7c4:	0002      	movs	r2, r0
 800e7c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e804 <set_light_on_state+0x68>)
 800e7c8:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800e7ca:	4a0f      	ldr	r2, [pc, #60]	@ (800e808 <set_light_on_state+0x6c>)
 800e7cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e800 <set_light_on_state+0x64>)
 800e7ce:	0019      	movs	r1, r3
 800e7d0:	2003      	movs	r0, #3
 800e7d2:	f004 fe4d 	bl	8013470 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800e7d6:	f7ff fc8d 	bl	800e0f4 <sen5x_lightup_measurement>
 800e7da:	1e03      	subs	r3, r0, #0
 800e7dc:	d005      	beq.n	800e7ea <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800e7de:	4a0b      	ldr	r2, [pc, #44]	@ (800e80c <set_light_on_state+0x70>)
 800e7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e810 <set_light_on_state+0x74>)
 800e7e2:	0019      	movs	r1, r3
 800e7e4:	2001      	movs	r0, #1
 800e7e6:	f004 fe43 	bl	8013470 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800e7ea:	4b0a      	ldr	r3, [pc, #40]	@ (800e814 <set_light_on_state+0x78>)
 800e7ec:	2203      	movs	r2, #3
 800e7ee:	701a      	strb	r2, [r3, #0]
}
 800e7f0:	46c0      	nop			@ (mov r8, r8)
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	46c0      	nop			@ (mov r8, r8)
 800e7f8:	20000ee1 	.word	0x20000ee1
 800e7fc:	0802d634 	.word	0x0802d634
 800e800:	0802d04c 	.word	0x0802d04c
 800e804:	20000ef0 	.word	0x20000ef0
 800e808:	0802d654 	.word	0x0802d654
 800e80c:	0802d66c 	.word	0x0802d66c
 800e810:	0802d078 	.word	0x0802d078
 800e814:	200000a2 	.word	0x200000a2

0800e818 <sen5x_statemachine>:

void sen5x_statemachine() {
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800e81e:	1dfb      	adds	r3, r7, #7
 800e820:	2200      	movs	r2, #0
 800e822:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800e824:	4b92      	ldr	r3, [pc, #584]	@ (800ea70 <sen5x_statemachine+0x258>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	0018      	movs	r0, r3
 800e82a:	f004 fdcb 	bl	80133c4 <TimestampIsReached>
 800e82e:	1e03      	subs	r3, r0, #0
 800e830:	d100      	bne.n	800e834 <sen5x_statemachine+0x1c>
 800e832:	e118      	b.n	800ea66 <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800e834:	4b8f      	ldr	r3, [pc, #572]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	2b05      	cmp	r3, #5
 800e83a:	d900      	bls.n	800e83e <sen5x_statemachine+0x26>
 800e83c:	e113      	b.n	800ea66 <sen5x_statemachine+0x24e>
 800e83e:	009a      	lsls	r2, r3, #2
 800e840:	4b8d      	ldr	r3, [pc, #564]	@ (800ea78 <sen5x_statemachine+0x260>)
 800e842:	18d3      	adds	r3, r2, r3
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800e848:	4a8c      	ldr	r2, [pc, #560]	@ (800ea7c <sen5x_statemachine+0x264>)
 800e84a:	4b8d      	ldr	r3, [pc, #564]	@ (800ea80 <sen5x_statemachine+0x268>)
 800e84c:	0019      	movs	r1, r3
 800e84e:	2001      	movs	r0, #1
 800e850:	f004 fe0e 	bl	8013470 <CreateLine>
      SetPMSensorStatus(false);
 800e854:	2000      	movs	r0, #0
 800e856:	f7fe fa4f 	bl	800ccf8 <SetPMSensorStatus>
      DisablePMSensor();
 800e85a:	f7fe f9d1 	bl	800cc00 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800e85e:	f005 fb89 	bl	8013f74 <HAL_GetTick>
 800e862:	0003      	movs	r3, r0
 800e864:	4a87      	ldr	r2, [pc, #540]	@ (800ea84 <sen5x_statemachine+0x26c>)
 800e866:	189a      	adds	r2, r3, r2
 800e868:	4b81      	ldr	r3, [pc, #516]	@ (800ea70 <sen5x_statemachine+0x258>)
 800e86a:	601a      	str	r2, [r3, #0]
      break;
 800e86c:	e0fb      	b.n	800ea66 <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e86e:	f005 fb81 	bl	8013f74 <HAL_GetTick>
 800e872:	0003      	movs	r3, r0
 800e874:	4a84      	ldr	r2, [pc, #528]	@ (800ea88 <sen5x_statemachine+0x270>)
 800e876:	189a      	adds	r2, r3, r2
 800e878:	4b7d      	ldr	r3, [pc, #500]	@ (800ea70 <sen5x_statemachine+0x258>)
 800e87a:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800e87c:	f7ff ff8e 	bl	800e79c <set_light_on_state>
      break;
 800e880:	e0f1      	b.n	800ea66 <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800e882:	4b7c      	ldr	r3, [pc, #496]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800e884:	2202      	movs	r2, #2
 800e886:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800e888:	4b80      	ldr	r3, [pc, #512]	@ (800ea8c <sen5x_statemachine+0x274>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	2b05      	cmp	r3, #5
 800e88e:	d905      	bls.n	800e89c <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800e890:	4b78      	ldr	r3, [pc, #480]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e896:	f7ff facd 	bl	800de34 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800e89a:	e0e1      	b.n	800ea60 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800e89c:	f7ff ff04 	bl	800e6a8 <sen5x_check_for_errors>
 800e8a0:	1e03      	subs	r3, r0, #0
 800e8a2:	d028      	beq.n	800e8f6 <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800e8a4:	f000 fc84 	bl	800f1b0 <sen5x_device_reset>
 800e8a8:	1e03      	subs	r3, r0, #0
 800e8aa:	d018      	beq.n	800e8de <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800e8ac:	4a78      	ldr	r2, [pc, #480]	@ (800ea90 <sen5x_statemachine+0x278>)
 800e8ae:	4b74      	ldr	r3, [pc, #464]	@ (800ea80 <sen5x_statemachine+0x268>)
 800e8b0:	0019      	movs	r1, r3
 800e8b2:	2001      	movs	r0, #1
 800e8b4:	f004 fddc 	bl	8013470 <CreateLine>
            sen5xErrors++;
 800e8b8:	4b74      	ldr	r3, [pc, #464]	@ (800ea8c <sen5x_statemachine+0x274>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	4b72      	ldr	r3, [pc, #456]	@ (800ea8c <sen5x_statemachine+0x274>)
 800e8c2:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800e8c4:	f7ff fab6 	bl	800de34 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e8c8:	f005 fb54 	bl	8013f74 <HAL_GetTick>
 800e8cc:	0003      	movs	r3, r0
 800e8ce:	4a6e      	ldr	r2, [pc, #440]	@ (800ea88 <sen5x_statemachine+0x270>)
 800e8d0:	189a      	adds	r2, r3, r2
 800e8d2:	4b67      	ldr	r3, [pc, #412]	@ (800ea70 <sen5x_statemachine+0x258>)
 800e8d4:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800e8d6:	4b67      	ldr	r3, [pc, #412]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800e8d8:	2205      	movs	r2, #5
 800e8da:	701a      	strb	r2, [r3, #0]
 800e8dc:	e005      	b.n	800e8ea <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800e8de:	4a6d      	ldr	r2, [pc, #436]	@ (800ea94 <sen5x_statemachine+0x27c>)
 800e8e0:	4b6d      	ldr	r3, [pc, #436]	@ (800ea98 <sen5x_statemachine+0x280>)
 800e8e2:	0019      	movs	r1, r3
 800e8e4:	2002      	movs	r0, #2
 800e8e6:	f004 fdc3 	bl	8013470 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800e8ea:	f005 fb43 	bl	8013f74 <HAL_GetTick>
 800e8ee:	0002      	movs	r2, r0
 800e8f0:	4b5f      	ldr	r3, [pc, #380]	@ (800ea70 <sen5x_statemachine+0x258>)
 800e8f2:	601a      	str	r2, [r3, #0]
      break;
 800e8f4:	e0b4      	b.n	800ea60 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800e8f6:	4b65      	ldr	r3, [pc, #404]	@ (800ea8c <sen5x_statemachine+0x274>)
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d100      	bne.n	800e900 <sen5x_statemachine+0xe8>
 800e8fe:	e0af      	b.n	800ea60 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800e900:	4b62      	ldr	r3, [pc, #392]	@ (800ea8c <sen5x_statemachine+0x274>)
 800e902:	2200      	movs	r2, #0
 800e904:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800e906:	4a65      	ldr	r2, [pc, #404]	@ (800ea9c <sen5x_statemachine+0x284>)
 800e908:	4b65      	ldr	r3, [pc, #404]	@ (800eaa0 <sen5x_statemachine+0x288>)
 800e90a:	0019      	movs	r1, r3
 800e90c:	2003      	movs	r0, #3
 800e90e:	f004 fdaf 	bl	8013470 <CreateLine>
      break;
 800e912:	e0a5      	b.n	800ea60 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800e914:	1dfb      	adds	r3, r7, #7
 800e916:	0018      	movs	r0, r3
 800e918:	f000 f966 	bl	800ebe8 <sen5x_read_data_ready>
      if (data_ready) {
 800e91c:	1dfb      	adds	r3, r7, #7
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d038      	beq.n	800e996 <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800e924:	f003 fc10 	bl	8012148 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800e928:	4b5e      	ldr	r3, [pc, #376]	@ (800eaa4 <sen5x_statemachine+0x28c>)
 800e92a:	0018      	movs	r0, r3
 800e92c:	f7ff fc88 	bl	800e240 <sen5x_read_measurement>
 800e930:	1e03      	subs	r3, r0, #0
 800e932:	d017      	beq.n	800e964 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800e934:	4a5c      	ldr	r2, [pc, #368]	@ (800eaa8 <sen5x_statemachine+0x290>)
 800e936:	4b52      	ldr	r3, [pc, #328]	@ (800ea80 <sen5x_statemachine+0x268>)
 800e938:	0019      	movs	r1, r3
 800e93a:	2001      	movs	r0, #1
 800e93c:	f004 fd98 	bl	8013470 <CreateLine>
          sen5xErrors++;
 800e940:	4b52      	ldr	r3, [pc, #328]	@ (800ea8c <sen5x_statemachine+0x274>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	3301      	adds	r3, #1
 800e946:	b2da      	uxtb	r2, r3
 800e948:	4b50      	ldr	r3, [pc, #320]	@ (800ea8c <sen5x_statemachine+0x274>)
 800e94a:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800e94c:	f7ff fa72 	bl	800de34 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e950:	f005 fb10 	bl	8013f74 <HAL_GetTick>
 800e954:	0003      	movs	r3, r0
 800e956:	4a4c      	ldr	r2, [pc, #304]	@ (800ea88 <sen5x_statemachine+0x270>)
 800e958:	189a      	adds	r2, r3, r2
 800e95a:	4b45      	ldr	r3, [pc, #276]	@ (800ea70 <sen5x_statemachine+0x258>)
 800e95c:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800e95e:	4b45      	ldr	r3, [pc, #276]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800e960:	2205      	movs	r2, #5
 800e962:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800e964:	4b51      	ldr	r3, [pc, #324]	@ (800eaac <sen5x_statemachine+0x294>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	3301      	adds	r3, #1
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	4b4f      	ldr	r3, [pc, #316]	@ (800eaac <sen5x_statemachine+0x294>)
 800e96e:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800e970:	4b4e      	ldr	r3, [pc, #312]	@ (800eaac <sen5x_statemachine+0x294>)
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	2b1f      	cmp	r3, #31
 800e976:	d102      	bne.n	800e97e <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800e978:	4b4c      	ldr	r3, [pc, #304]	@ (800eaac <sen5x_statemachine+0x294>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800e97e:	4b4b      	ldr	r3, [pc, #300]	@ (800eaac <sen5x_statemachine+0x294>)
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	2b01      	cmp	r3, #1
 800e984:	d901      	bls.n	800e98a <sen5x_statemachine+0x172>
          sen5xStore();
 800e986:	f7ff fd9d 	bl	800e4c4 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800e98a:	4b48      	ldr	r3, [pc, #288]	@ (800eaac <sen5x_statemachine+0x294>)
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d101      	bne.n	800e996 <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800e992:	f7ff fcb1 	bl	800e2f8 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800e996:	4b46      	ldr	r3, [pc, #280]	@ (800eab0 <sen5x_statemachine+0x298>)
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d103      	bne.n	800e9a6 <sen5x_statemachine+0x18e>
 800e99e:	4b43      	ldr	r3, [pc, #268]	@ (800eaac <sen5x_statemachine+0x294>)
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d95e      	bls.n	800ea64 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800e9a6:	4b33      	ldr	r3, [pc, #204]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800e9a8:	2204      	movs	r2, #4
 800e9aa:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e9ac:	e05a      	b.n	800ea64 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800e9ae:	4b41      	ldr	r3, [pc, #260]	@ (800eab4 <sen5x_statemachine+0x29c>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d11e      	bne.n	800e9f4 <sen5x_statemachine+0x1dc>
 800e9b6:	4b40      	ldr	r3, [pc, #256]	@ (800eab8 <sen5x_statemachine+0x2a0>)
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d11a      	bne.n	800e9f4 <sen5x_statemachine+0x1dc>
 800e9be:	4b3f      	ldr	r3, [pc, #252]	@ (800eabc <sen5x_statemachine+0x2a4>)
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	4053      	eors	r3, r2
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d013      	beq.n	800e9f4 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800e9cc:	f000 f9f2 	bl	800edb4 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800e9d0:	4a3b      	ldr	r2, [pc, #236]	@ (800eac0 <sen5x_statemachine+0x2a8>)
 800e9d2:	4b31      	ldr	r3, [pc, #196]	@ (800ea98 <sen5x_statemachine+0x280>)
 800e9d4:	0019      	movs	r1, r3
 800e9d6:	2002      	movs	r0, #2
 800e9d8:	f004 fd4a 	bl	8013470 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800e9dc:	f005 faca 	bl	8013f74 <HAL_GetTick>
 800e9e0:	0003      	movs	r3, r0
 800e9e2:	4a38      	ldr	r2, [pc, #224]	@ (800eac4 <sen5x_statemachine+0x2ac>)
 800e9e4:	189a      	adds	r2, r3, r2
 800e9e6:	4b22      	ldr	r3, [pc, #136]	@ (800ea70 <sen5x_statemachine+0x258>)
 800e9e8:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800e9ea:	4b34      	ldr	r3, [pc, #208]	@ (800eabc <sen5x_statemachine+0x2a4>)
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800e9f0:	f7ff fb80 	bl	800e0f4 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800e9f4:	4b1f      	ldr	r3, [pc, #124]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800e9f6:	2205      	movs	r2, #5
 800e9f8:	701a      	strb	r2, [r3, #0]
      break;
 800e9fa:	e034      	b.n	800ea66 <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800e9fc:	4b2c      	ldr	r3, [pc, #176]	@ (800eab0 <sen5x_statemachine+0x298>)
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	2201      	movs	r2, #1
 800ea02:	4053      	eors	r3, r2
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d01c      	beq.n	800ea44 <sen5x_statemachine+0x22c>
 800ea0a:	4b2f      	ldr	r3, [pc, #188]	@ (800eac8 <sen5x_statemachine+0x2b0>)
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	2201      	movs	r2, #1
 800ea10:	4053      	eors	r3, r2
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d015      	beq.n	800ea44 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800ea18:	f7ff fbb8 	bl	800e18c <sen5x_extinguish_measurement>
 800ea1c:	1e03      	subs	r3, r0, #0
 800ea1e:	d005      	beq.n	800ea2c <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800ea20:	4a2a      	ldr	r2, [pc, #168]	@ (800eacc <sen5x_statemachine+0x2b4>)
 800ea22:	4b17      	ldr	r3, [pc, #92]	@ (800ea80 <sen5x_statemachine+0x268>)
 800ea24:	0019      	movs	r1, r3
 800ea26:	2001      	movs	r0, #1
 800ea28:	f004 fd22 	bl	8013470 <CreateLine>
        }
        sen5xSamples = 0;
 800ea2c:	4b1f      	ldr	r3, [pc, #124]	@ (800eaac <sen5x_statemachine+0x294>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800ea32:	f7ff f9ff 	bl	800de34 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800ea36:	2000      	movs	r0, #0
 800ea38:	f7fe f95e 	bl	800ccf8 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800ea3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800ea3e:	2201      	movs	r2, #1
 800ea40:	701a      	strb	r2, [r3, #0]
 800ea42:	e002      	b.n	800ea4a <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800ea44:	4b0b      	ldr	r3, [pc, #44]	@ (800ea74 <sen5x_statemachine+0x25c>)
 800ea46:	2203      	movs	r2, #3
 800ea48:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800ea4a:	f003 fba3 	bl	8012194 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800ea4e:	f005 fa91 	bl	8013f74 <HAL_GetTick>
 800ea52:	0003      	movs	r3, r0
 800ea54:	22fa      	movs	r2, #250	@ 0xfa
 800ea56:	0092      	lsls	r2, r2, #2
 800ea58:	189a      	adds	r2, r3, r2
 800ea5a:	4b05      	ldr	r3, [pc, #20]	@ (800ea70 <sen5x_statemachine+0x258>)
 800ea5c:	601a      	str	r2, [r3, #0]
    }
  }
}
 800ea5e:	e002      	b.n	800ea66 <sen5x_statemachine+0x24e>
      break;
 800ea60:	46c0      	nop			@ (mov r8, r8)
 800ea62:	e000      	b.n	800ea66 <sen5x_statemachine+0x24e>
      break;
 800ea64:	46c0      	nop			@ (mov r8, r8)
}
 800ea66:	46c0      	nop			@ (mov r8, r8)
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	b002      	add	sp, #8
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	46c0      	nop			@ (mov r8, r8)
 800ea70:	20000ef0 	.word	0x20000ef0
 800ea74:	200000a2 	.word	0x200000a2
 800ea78:	0802e1c0 	.word	0x0802e1c0
 800ea7c:	0802d698 	.word	0x0802d698
 800ea80:	0802d078 	.word	0x0802d078
 800ea84:	002fefd8 	.word	0x002fefd8
 800ea88:	00005910 	.word	0x00005910
 800ea8c:	20000eed 	.word	0x20000eed
 800ea90:	0802d6c8 	.word	0x0802d6c8
 800ea94:	0802d6e0 	.word	0x0802d6e0
 800ea98:	0802d00c 	.word	0x0802d00c
 800ea9c:	0802d6f8 	.word	0x0802d6f8
 800eaa0:	0802d04c 	.word	0x0802d04c
 800eaa4:	20000ef4 	.word	0x20000ef4
 800eaa8:	0802d70c 	.word	0x0802d70c
 800eaac:	20000eec 	.word	0x20000eec
 800eab0:	20001e71 	.word	0x20001e71
 800eab4:	20000b62 	.word	0x20000b62
 800eab8:	20000b61 	.word	0x20000b61
 800eabc:	20000ee0 	.word	0x20000ee0
 800eac0:	0802d73c 	.word	0x0802d73c
 800eac4:	00002710 	.word	0x00002710
 800eac8:	20001e72 	.word	0x20001e72
 800eacc:	0802d754 	.word	0x0802d754

0800ead0 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800ead0:	b590      	push	{r4, r7, lr}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ead6:	1dbb      	adds	r3, r7, #6
 800ead8:	2200      	movs	r2, #0
 800eada:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800eadc:	1dbc      	adds	r4, r7, #6
 800eade:	1dbb      	adds	r3, r7, #6
 800eae0:	8819      	ldrh	r1, [r3, #0]
 800eae2:	003b      	movs	r3, r7
 800eae4:	2221      	movs	r2, #33	@ 0x21
 800eae6:	0018      	movs	r0, r3
 800eae8:	f001 fb57 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800eaec:	0003      	movs	r3, r0
 800eaee:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eaf0:	1d3c      	adds	r4, r7, #4
 800eaf2:	1dbb      	adds	r3, r7, #6
 800eaf4:	881a      	ldrh	r2, [r3, #0]
 800eaf6:	003b      	movs	r3, r7
 800eaf8:	0019      	movs	r1, r3
 800eafa:	2069      	movs	r0, #105	@ 0x69
 800eafc:	f001 fbd1 	bl	80102a2 <sensirion_i2c_write_data>
 800eb00:	0003      	movs	r3, r0
 800eb02:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eb04:	1d3b      	adds	r3, r7, #4
 800eb06:	2200      	movs	r2, #0
 800eb08:	5e9b      	ldrsh	r3, [r3, r2]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <sen5x_start_measurement+0x46>
        return error;
 800eb0e:	1d3b      	adds	r3, r7, #4
 800eb10:	2200      	movs	r2, #0
 800eb12:	5e9b      	ldrsh	r3, [r3, r2]
 800eb14:	e004      	b.n	800eb20 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800eb16:	4b04      	ldr	r3, [pc, #16]	@ (800eb28 <sen5x_start_measurement+0x58>)
 800eb18:	0018      	movs	r0, r3
 800eb1a:	f7ff fda5 	bl	800e668 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	0018      	movs	r0, r3
 800eb22:	46bd      	mov	sp, r7
 800eb24:	b003      	add	sp, #12
 800eb26:	bd90      	pop	{r4, r7, pc}
 800eb28:	0000c350 	.word	0x0000c350

0800eb2c <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800eb2c:	b590      	push	{r4, r7, lr}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800eb32:	1dbb      	adds	r3, r7, #6
 800eb34:	2200      	movs	r2, #0
 800eb36:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800eb38:	1dbc      	adds	r4, r7, #6
 800eb3a:	1dbb      	adds	r3, r7, #6
 800eb3c:	8819      	ldrh	r1, [r3, #0]
 800eb3e:	003b      	movs	r3, r7
 800eb40:	2237      	movs	r2, #55	@ 0x37
 800eb42:	0018      	movs	r0, r3
 800eb44:	f001 fb29 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800eb48:	0003      	movs	r3, r0
 800eb4a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eb4c:	1d3c      	adds	r4, r7, #4
 800eb4e:	1dbb      	adds	r3, r7, #6
 800eb50:	881a      	ldrh	r2, [r3, #0]
 800eb52:	003b      	movs	r3, r7
 800eb54:	0019      	movs	r1, r3
 800eb56:	2069      	movs	r0, #105	@ 0x69
 800eb58:	f001 fba3 	bl	80102a2 <sensirion_i2c_write_data>
 800eb5c:	0003      	movs	r3, r0
 800eb5e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eb60:	1d3b      	adds	r3, r7, #4
 800eb62:	2200      	movs	r2, #0
 800eb64:	5e9b      	ldrsh	r3, [r3, r2]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d003      	beq.n	800eb72 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800eb6a:	1d3b      	adds	r3, r7, #4
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	5e9b      	ldrsh	r3, [r3, r2]
 800eb70:	e004      	b.n	800eb7c <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800eb72:	4b04      	ldr	r3, [pc, #16]	@ (800eb84 <sen5x_start_measurement_without_pm+0x58>)
 800eb74:	0018      	movs	r0, r3
 800eb76:	f7ff fd77 	bl	800e668 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	0018      	movs	r0, r3
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	b003      	add	sp, #12
 800eb82:	bd90      	pop	{r4, r7, pc}
 800eb84:	0000c350 	.word	0x0000c350

0800eb88 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800eb88:	b590      	push	{r4, r7, lr}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800eb8e:	1dbb      	adds	r3, r7, #6
 800eb90:	2200      	movs	r2, #0
 800eb92:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800eb94:	1dbc      	adds	r4, r7, #6
 800eb96:	2382      	movs	r3, #130	@ 0x82
 800eb98:	005a      	lsls	r2, r3, #1
 800eb9a:	1dbb      	adds	r3, r7, #6
 800eb9c:	8819      	ldrh	r1, [r3, #0]
 800eb9e:	003b      	movs	r3, r7
 800eba0:	0018      	movs	r0, r3
 800eba2:	f001 fafa 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800eba6:	0003      	movs	r3, r0
 800eba8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ebaa:	1d3c      	adds	r4, r7, #4
 800ebac:	1dbb      	adds	r3, r7, #6
 800ebae:	881a      	ldrh	r2, [r3, #0]
 800ebb0:	003b      	movs	r3, r7
 800ebb2:	0019      	movs	r1, r3
 800ebb4:	2069      	movs	r0, #105	@ 0x69
 800ebb6:	f001 fb74 	bl	80102a2 <sensirion_i2c_write_data>
 800ebba:	0003      	movs	r3, r0
 800ebbc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ebbe:	1d3b      	adds	r3, r7, #4
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	5e9b      	ldrsh	r3, [r3, r2]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d003      	beq.n	800ebd0 <sen5x_stop_measurement+0x48>
        return error;
 800ebc8:	1d3b      	adds	r3, r7, #4
 800ebca:	2200      	movs	r2, #0
 800ebcc:	5e9b      	ldrsh	r3, [r3, r2]
 800ebce:	e004      	b.n	800ebda <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800ebd0:	4b04      	ldr	r3, [pc, #16]	@ (800ebe4 <sen5x_stop_measurement+0x5c>)
 800ebd2:	0018      	movs	r0, r3
 800ebd4:	f7ff fd48 	bl	800e668 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	0018      	movs	r0, r3
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	b003      	add	sp, #12
 800ebe0:	bd90      	pop	{r4, r7, pc}
 800ebe2:	46c0      	nop			@ (mov r8, r8)
 800ebe4:	00030d40 	.word	0x00030d40

0800ebe8 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800ebe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800ebf0:	250e      	movs	r5, #14
 800ebf2:	197b      	adds	r3, r7, r5
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800ebf8:	197c      	adds	r4, r7, r5
 800ebfa:	4a22      	ldr	r2, [pc, #136]	@ (800ec84 <sen5x_read_data_ready+0x9c>)
 800ebfc:	197b      	adds	r3, r7, r5
 800ebfe:	8819      	ldrh	r1, [r3, #0]
 800ec00:	2308      	movs	r3, #8
 800ec02:	18fb      	adds	r3, r7, r3
 800ec04:	0018      	movs	r0, r3
 800ec06:	f001 fac8 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800ec0a:	0003      	movs	r3, r0
 800ec0c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ec0e:	260c      	movs	r6, #12
 800ec10:	19bc      	adds	r4, r7, r6
 800ec12:	197b      	adds	r3, r7, r5
 800ec14:	881a      	ldrh	r2, [r3, #0]
 800ec16:	2308      	movs	r3, #8
 800ec18:	18fb      	adds	r3, r7, r3
 800ec1a:	0019      	movs	r1, r3
 800ec1c:	2069      	movs	r0, #105	@ 0x69
 800ec1e:	f001 fb40 	bl	80102a2 <sensirion_i2c_write_data>
 800ec22:	0003      	movs	r3, r0
 800ec24:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ec26:	19bb      	adds	r3, r7, r6
 800ec28:	2200      	movs	r2, #0
 800ec2a:	5e9b      	ldrsh	r3, [r3, r2]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d003      	beq.n	800ec38 <sen5x_read_data_ready+0x50>
        return error;
 800ec30:	19bb      	adds	r3, r7, r6
 800ec32:	2200      	movs	r2, #0
 800ec34:	5e9b      	ldrsh	r3, [r3, r2]
 800ec36:	e020      	b.n	800ec7a <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ec38:	4b13      	ldr	r3, [pc, #76]	@ (800ec88 <sen5x_read_data_ready+0xa0>)
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	f7ff fd14 	bl	800e668 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800ec40:	250c      	movs	r5, #12
 800ec42:	197c      	adds	r4, r7, r5
 800ec44:	2308      	movs	r3, #8
 800ec46:	18fb      	adds	r3, r7, r3
 800ec48:	2202      	movs	r2, #2
 800ec4a:	0019      	movs	r1, r3
 800ec4c:	2069      	movs	r0, #105	@ 0x69
 800ec4e:	f001 fb40 	bl	80102d2 <sensirion_i2c_read_data_inplace>
 800ec52:	0003      	movs	r3, r0
 800ec54:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ec56:	197b      	adds	r3, r7, r5
 800ec58:	2200      	movs	r2, #0
 800ec5a:	5e9b      	ldrsh	r3, [r3, r2]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d003      	beq.n	800ec68 <sen5x_read_data_ready+0x80>
        return error;
 800ec60:	197b      	adds	r3, r7, r5
 800ec62:	2200      	movs	r2, #0
 800ec64:	5e9b      	ldrsh	r3, [r3, r2]
 800ec66:	e008      	b.n	800ec7a <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800ec68:	2308      	movs	r3, #8
 800ec6a:	18fb      	adds	r3, r7, r3
 800ec6c:	785b      	ldrb	r3, [r3, #1]
 800ec6e:	1e5a      	subs	r2, r3, #1
 800ec70:	4193      	sbcs	r3, r2
 800ec72:	b2da      	uxtb	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	0018      	movs	r0, r3
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	b005      	add	sp, #20
 800ec80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec82:	46c0      	nop			@ (mov r8, r8)
 800ec84:	00000202 	.word	0x00000202
 800ec88:	00004e20 	.word	0x00004e20

0800ec8c <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800ec8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8e:	b08d      	sub	sp, #52	@ 0x34
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
 800ec98:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800ec9a:	252e      	movs	r5, #46	@ 0x2e
 800ec9c:	197b      	adds	r3, r7, r5
 800ec9e:	2200      	movs	r2, #0
 800eca0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800eca2:	197c      	adds	r4, r7, r5
 800eca4:	23f1      	movs	r3, #241	@ 0xf1
 800eca6:	009a      	lsls	r2, r3, #2
 800eca8:	197b      	adds	r3, r7, r5
 800ecaa:	8819      	ldrh	r1, [r3, #0]
 800ecac:	2314      	movs	r3, #20
 800ecae:	18fb      	adds	r3, r7, r3
 800ecb0:	0018      	movs	r0, r3
 800ecb2:	f001 fa72 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800ecb6:	0003      	movs	r3, r0
 800ecb8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ecba:	262c      	movs	r6, #44	@ 0x2c
 800ecbc:	19bc      	adds	r4, r7, r6
 800ecbe:	197b      	adds	r3, r7, r5
 800ecc0:	881a      	ldrh	r2, [r3, #0]
 800ecc2:	2314      	movs	r3, #20
 800ecc4:	18fb      	adds	r3, r7, r3
 800ecc6:	0019      	movs	r1, r3
 800ecc8:	2069      	movs	r0, #105	@ 0x69
 800ecca:	f001 faea 	bl	80102a2 <sensirion_i2c_write_data>
 800ecce:	0003      	movs	r3, r0
 800ecd0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ecd2:	19bb      	adds	r3, r7, r6
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d003      	beq.n	800ece4 <sen5x_read_measured_values+0x58>
        return error;
 800ecdc:	19bb      	adds	r3, r7, r6
 800ecde:	2200      	movs	r2, #0
 800ece0:	5e9b      	ldrsh	r3, [r3, r2]
 800ece2:	e060      	b.n	800eda6 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ece4:	4b32      	ldr	r3, [pc, #200]	@ (800edb0 <sen5x_read_measured_values+0x124>)
 800ece6:	0018      	movs	r0, r3
 800ece8:	f7ff fcbe 	bl	800e668 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800ecec:	252c      	movs	r5, #44	@ 0x2c
 800ecee:	197c      	adds	r4, r7, r5
 800ecf0:	2314      	movs	r3, #20
 800ecf2:	18fb      	adds	r3, r7, r3
 800ecf4:	2210      	movs	r2, #16
 800ecf6:	0019      	movs	r1, r3
 800ecf8:	2069      	movs	r0, #105	@ 0x69
 800ecfa:	f001 faea 	bl	80102d2 <sensirion_i2c_read_data_inplace>
 800ecfe:	0003      	movs	r3, r0
 800ed00:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ed02:	197b      	adds	r3, r7, r5
 800ed04:	2200      	movs	r2, #0
 800ed06:	5e9b      	ldrsh	r3, [r3, r2]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d003      	beq.n	800ed14 <sen5x_read_measured_values+0x88>
        return error;
 800ed0c:	197b      	adds	r3, r7, r5
 800ed0e:	2200      	movs	r2, #0
 800ed10:	5e9b      	ldrsh	r3, [r3, r2]
 800ed12:	e048      	b.n	800eda6 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800ed14:	2414      	movs	r4, #20
 800ed16:	193b      	adds	r3, r7, r4
 800ed18:	0018      	movs	r0, r3
 800ed1a:	f000 fa79 	bl	800f210 <sensirion_common_bytes_to_uint16_t>
 800ed1e:	0003      	movs	r3, r0
 800ed20:	001a      	movs	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800ed26:	193b      	adds	r3, r7, r4
 800ed28:	3302      	adds	r3, #2
 800ed2a:	0018      	movs	r0, r3
 800ed2c:	f000 fa70 	bl	800f210 <sensirion_common_bytes_to_uint16_t>
 800ed30:	0003      	movs	r3, r0
 800ed32:	001a      	movs	r2, r3
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800ed38:	193b      	adds	r3, r7, r4
 800ed3a:	3304      	adds	r3, #4
 800ed3c:	0018      	movs	r0, r3
 800ed3e:	f000 fa67 	bl	800f210 <sensirion_common_bytes_to_uint16_t>
 800ed42:	0003      	movs	r3, r0
 800ed44:	001a      	movs	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800ed4a:	193b      	adds	r3, r7, r4
 800ed4c:	3306      	adds	r3, #6
 800ed4e:	0018      	movs	r0, r3
 800ed50:	f000 fa5e 	bl	800f210 <sensirion_common_bytes_to_uint16_t>
 800ed54:	0003      	movs	r3, r0
 800ed56:	001a      	movs	r2, r3
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800ed5c:	193b      	adds	r3, r7, r4
 800ed5e:	3308      	adds	r3, #8
 800ed60:	0018      	movs	r0, r3
 800ed62:	f000 fa82 	bl	800f26a <sensirion_common_bytes_to_int16_t>
 800ed66:	0003      	movs	r3, r0
 800ed68:	001a      	movs	r2, r3
 800ed6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed6c:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800ed6e:	193b      	adds	r3, r7, r4
 800ed70:	330a      	adds	r3, #10
 800ed72:	0018      	movs	r0, r3
 800ed74:	f000 fa79 	bl	800f26a <sensirion_common_bytes_to_int16_t>
 800ed78:	0003      	movs	r3, r0
 800ed7a:	001a      	movs	r2, r3
 800ed7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed7e:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800ed80:	193b      	adds	r3, r7, r4
 800ed82:	330c      	adds	r3, #12
 800ed84:	0018      	movs	r0, r3
 800ed86:	f000 fa70 	bl	800f26a <sensirion_common_bytes_to_int16_t>
 800ed8a:	0003      	movs	r3, r0
 800ed8c:	001a      	movs	r2, r3
 800ed8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed90:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800ed92:	193b      	adds	r3, r7, r4
 800ed94:	330e      	adds	r3, #14
 800ed96:	0018      	movs	r0, r3
 800ed98:	f000 fa67 	bl	800f26a <sensirion_common_bytes_to_int16_t>
 800ed9c:	0003      	movs	r3, r0
 800ed9e:	001a      	movs	r2, r3
 800eda0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eda2:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	0018      	movs	r0, r3
 800eda8:	46bd      	mov	sp, r7
 800edaa:	b00d      	add	sp, #52	@ 0x34
 800edac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edae:	46c0      	nop			@ (mov r8, r8)
 800edb0:	00004e20 	.word	0x00004e20

0800edb4 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800edb4:	b590      	push	{r4, r7, lr}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800edba:	1dbb      	adds	r3, r7, #6
 800edbc:	2200      	movs	r2, #0
 800edbe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800edc0:	1dbc      	adds	r4, r7, #6
 800edc2:	4a12      	ldr	r2, [pc, #72]	@ (800ee0c <sen5x_start_fan_cleaning+0x58>)
 800edc4:	1dbb      	adds	r3, r7, #6
 800edc6:	8819      	ldrh	r1, [r3, #0]
 800edc8:	003b      	movs	r3, r7
 800edca:	0018      	movs	r0, r3
 800edcc:	f001 f9e5 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800edd0:	0003      	movs	r3, r0
 800edd2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800edd4:	1d3c      	adds	r4, r7, #4
 800edd6:	1dbb      	adds	r3, r7, #6
 800edd8:	881a      	ldrh	r2, [r3, #0]
 800edda:	003b      	movs	r3, r7
 800eddc:	0019      	movs	r1, r3
 800edde:	2069      	movs	r0, #105	@ 0x69
 800ede0:	f001 fa5f 	bl	80102a2 <sensirion_i2c_write_data>
 800ede4:	0003      	movs	r3, r0
 800ede6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ede8:	1d3b      	adds	r3, r7, #4
 800edea:	2200      	movs	r2, #0
 800edec:	5e9b      	ldrsh	r3, [r3, r2]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d003      	beq.n	800edfa <sen5x_start_fan_cleaning+0x46>
        return error;
 800edf2:	1d3b      	adds	r3, r7, #4
 800edf4:	2200      	movs	r2, #0
 800edf6:	5e9b      	ldrsh	r3, [r3, r2]
 800edf8:	e004      	b.n	800ee04 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800edfa:	4b05      	ldr	r3, [pc, #20]	@ (800ee10 <sen5x_start_fan_cleaning+0x5c>)
 800edfc:	0018      	movs	r0, r3
 800edfe:	f7ff fc33 	bl	800e668 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	0018      	movs	r0, r3
 800ee06:	46bd      	mov	sp, r7
 800ee08:	b003      	add	sp, #12
 800ee0a:	bd90      	pop	{r4, r7, pc}
 800ee0c:	00005607 	.word	0x00005607
 800ee10:	00004e20 	.word	0x00004e20

0800ee14 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800ee14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee16:	b087      	sub	sp, #28
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	0004      	movs	r4, r0
 800ee1c:	0008      	movs	r0, r1
 800ee1e:	0011      	movs	r1, r2
 800ee20:	1dbb      	adds	r3, r7, #6
 800ee22:	1c22      	adds	r2, r4, #0
 800ee24:	801a      	strh	r2, [r3, #0]
 800ee26:	1d3b      	adds	r3, r7, #4
 800ee28:	1c02      	adds	r2, r0, #0
 800ee2a:	801a      	strh	r2, [r3, #0]
 800ee2c:	1cbb      	adds	r3, r7, #2
 800ee2e:	1c0a      	adds	r2, r1, #0
 800ee30:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800ee32:	2516      	movs	r5, #22
 800ee34:	197b      	adds	r3, r7, r5
 800ee36:	2200      	movs	r2, #0
 800ee38:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800ee3a:	197c      	adds	r4, r7, r5
 800ee3c:	4a25      	ldr	r2, [pc, #148]	@ (800eed4 <sen5x_set_temperature_offset_parameters+0xc0>)
 800ee3e:	197b      	adds	r3, r7, r5
 800ee40:	8819      	ldrh	r1, [r3, #0]
 800ee42:	2608      	movs	r6, #8
 800ee44:	19bb      	adds	r3, r7, r6
 800ee46:	0018      	movs	r0, r3
 800ee48:	f001 f9a7 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800ee4c:	0003      	movs	r3, r0
 800ee4e:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800ee50:	197c      	adds	r4, r7, r5
 800ee52:	1dbb      	adds	r3, r7, #6
 800ee54:	2200      	movs	r2, #0
 800ee56:	5e9a      	ldrsh	r2, [r3, r2]
 800ee58:	197b      	adds	r3, r7, r5
 800ee5a:	8819      	ldrh	r1, [r3, #0]
 800ee5c:	19bb      	adds	r3, r7, r6
 800ee5e:	0018      	movs	r0, r3
 800ee60:	f001 fa06 	bl	8010270 <sensirion_i2c_add_int16_t_to_buffer>
 800ee64:	0003      	movs	r3, r0
 800ee66:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800ee68:	197c      	adds	r4, r7, r5
 800ee6a:	1d3b      	adds	r3, r7, #4
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	5e9a      	ldrsh	r2, [r3, r2]
 800ee70:	197b      	adds	r3, r7, r5
 800ee72:	8819      	ldrh	r1, [r3, #0]
 800ee74:	19bb      	adds	r3, r7, r6
 800ee76:	0018      	movs	r0, r3
 800ee78:	f001 f9fa 	bl	8010270 <sensirion_i2c_add_int16_t_to_buffer>
 800ee7c:	0003      	movs	r3, r0
 800ee7e:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800ee80:	197c      	adds	r4, r7, r5
 800ee82:	1cbb      	adds	r3, r7, #2
 800ee84:	881a      	ldrh	r2, [r3, #0]
 800ee86:	197b      	adds	r3, r7, r5
 800ee88:	8819      	ldrh	r1, [r3, #0]
 800ee8a:	19bb      	adds	r3, r7, r6
 800ee8c:	0018      	movs	r0, r3
 800ee8e:	f001 f9b0 	bl	80101f2 <sensirion_i2c_add_uint16_t_to_buffer>
 800ee92:	0003      	movs	r3, r0
 800ee94:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ee96:	2214      	movs	r2, #20
 800ee98:	18bc      	adds	r4, r7, r2
 800ee9a:	197b      	adds	r3, r7, r5
 800ee9c:	881a      	ldrh	r2, [r3, #0]
 800ee9e:	19bb      	adds	r3, r7, r6
 800eea0:	0019      	movs	r1, r3
 800eea2:	2069      	movs	r0, #105	@ 0x69
 800eea4:	f001 f9fd 	bl	80102a2 <sensirion_i2c_write_data>
 800eea8:	0003      	movs	r3, r0
 800eeaa:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eeac:	2214      	movs	r2, #20
 800eeae:	18bb      	adds	r3, r7, r2
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	5e5b      	ldrsh	r3, [r3, r1]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d003      	beq.n	800eec0 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800eeb8:	18bb      	adds	r3, r7, r2
 800eeba:	2200      	movs	r2, #0
 800eebc:	5e9b      	ldrsh	r3, [r3, r2]
 800eebe:	e004      	b.n	800eeca <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800eec0:	4b05      	ldr	r3, [pc, #20]	@ (800eed8 <sen5x_set_temperature_offset_parameters+0xc4>)
 800eec2:	0018      	movs	r0, r3
 800eec4:	f7ff fbd0 	bl	800e668 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800eec8:	2300      	movs	r3, #0
}
 800eeca:	0018      	movs	r0, r3
 800eecc:	46bd      	mov	sp, r7
 800eece:	b007      	add	sp, #28
 800eed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eed2:	46c0      	nop			@ (mov r8, r8)
 800eed4:	000060b2 	.word	0x000060b2
 800eed8:	00004e20 	.word	0x00004e20

0800eedc <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800eedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eede:	b091      	sub	sp, #68	@ 0x44
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	000a      	movs	r2, r1
 800eee6:	1cfb      	adds	r3, r7, #3
 800eee8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800eeea:	253e      	movs	r5, #62	@ 0x3e
 800eeec:	197b      	adds	r3, r7, r5
 800eeee:	2200      	movs	r2, #0
 800eef0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800eef2:	197c      	adds	r4, r7, r5
 800eef4:	4a22      	ldr	r2, [pc, #136]	@ (800ef80 <sen5x_get_product_name+0xa4>)
 800eef6:	197b      	adds	r3, r7, r5
 800eef8:	8819      	ldrh	r1, [r3, #0]
 800eefa:	230c      	movs	r3, #12
 800eefc:	18fb      	adds	r3, r7, r3
 800eefe:	0018      	movs	r0, r3
 800ef00:	f001 f94b 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800ef04:	0003      	movs	r3, r0
 800ef06:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ef08:	263c      	movs	r6, #60	@ 0x3c
 800ef0a:	19bc      	adds	r4, r7, r6
 800ef0c:	197b      	adds	r3, r7, r5
 800ef0e:	881a      	ldrh	r2, [r3, #0]
 800ef10:	230c      	movs	r3, #12
 800ef12:	18fb      	adds	r3, r7, r3
 800ef14:	0019      	movs	r1, r3
 800ef16:	2069      	movs	r0, #105	@ 0x69
 800ef18:	f001 f9c3 	bl	80102a2 <sensirion_i2c_write_data>
 800ef1c:	0003      	movs	r3, r0
 800ef1e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ef20:	19bb      	adds	r3, r7, r6
 800ef22:	2200      	movs	r2, #0
 800ef24:	5e9b      	ldrsh	r3, [r3, r2]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d003      	beq.n	800ef32 <sen5x_get_product_name+0x56>
        return error;
 800ef2a:	19bb      	adds	r3, r7, r6
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	5e9b      	ldrsh	r3, [r3, r2]
 800ef30:	e021      	b.n	800ef76 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ef32:	4b14      	ldr	r3, [pc, #80]	@ (800ef84 <sen5x_get_product_name+0xa8>)
 800ef34:	0018      	movs	r0, r3
 800ef36:	f7ff fb97 	bl	800e668 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ef3a:	253c      	movs	r5, #60	@ 0x3c
 800ef3c:	197c      	adds	r4, r7, r5
 800ef3e:	230c      	movs	r3, #12
 800ef40:	18fb      	adds	r3, r7, r3
 800ef42:	2220      	movs	r2, #32
 800ef44:	0019      	movs	r1, r3
 800ef46:	2069      	movs	r0, #105	@ 0x69
 800ef48:	f001 f9c3 	bl	80102d2 <sensirion_i2c_read_data_inplace>
 800ef4c:	0003      	movs	r3, r0
 800ef4e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ef50:	197b      	adds	r3, r7, r5
 800ef52:	2200      	movs	r2, #0
 800ef54:	5e9b      	ldrsh	r3, [r3, r2]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d003      	beq.n	800ef62 <sen5x_get_product_name+0x86>
        return error;
 800ef5a:	197b      	adds	r3, r7, r5
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	5e9b      	ldrsh	r3, [r3, r2]
 800ef60:	e009      	b.n	800ef76 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800ef62:	1cfb      	adds	r3, r7, #3
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	b29a      	uxth	r2, r3
 800ef68:	6879      	ldr	r1, [r7, #4]
 800ef6a:	230c      	movs	r3, #12
 800ef6c:	18fb      	adds	r3, r7, r3
 800ef6e:	0018      	movs	r0, r3
 800ef70:	f000 f989 	bl	800f286 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ef74:	2300      	movs	r3, #0
}
 800ef76:	0018      	movs	r0, r3
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	b011      	add	sp, #68	@ 0x44
 800ef7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef7e:	46c0      	nop			@ (mov r8, r8)
 800ef80:	0000d014 	.word	0x0000d014
 800ef84:	0000c350 	.word	0x0000c350

0800ef88 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800ef88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef8a:	b091      	sub	sp, #68	@ 0x44
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	000a      	movs	r2, r1
 800ef92:	1cfb      	adds	r3, r7, #3
 800ef94:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ef96:	253e      	movs	r5, #62	@ 0x3e
 800ef98:	197b      	adds	r3, r7, r5
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800ef9e:	197c      	adds	r4, r7, r5
 800efa0:	4a22      	ldr	r2, [pc, #136]	@ (800f02c <sen5x_get_serial_number+0xa4>)
 800efa2:	197b      	adds	r3, r7, r5
 800efa4:	8819      	ldrh	r1, [r3, #0]
 800efa6:	230c      	movs	r3, #12
 800efa8:	18fb      	adds	r3, r7, r3
 800efaa:	0018      	movs	r0, r3
 800efac:	f001 f8f5 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800efb0:	0003      	movs	r3, r0
 800efb2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800efb4:	263c      	movs	r6, #60	@ 0x3c
 800efb6:	19bc      	adds	r4, r7, r6
 800efb8:	197b      	adds	r3, r7, r5
 800efba:	881a      	ldrh	r2, [r3, #0]
 800efbc:	230c      	movs	r3, #12
 800efbe:	18fb      	adds	r3, r7, r3
 800efc0:	0019      	movs	r1, r3
 800efc2:	2069      	movs	r0, #105	@ 0x69
 800efc4:	f001 f96d 	bl	80102a2 <sensirion_i2c_write_data>
 800efc8:	0003      	movs	r3, r0
 800efca:	8023      	strh	r3, [r4, #0]
    if (error) {
 800efcc:	19bb      	adds	r3, r7, r6
 800efce:	2200      	movs	r2, #0
 800efd0:	5e9b      	ldrsh	r3, [r3, r2]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d003      	beq.n	800efde <sen5x_get_serial_number+0x56>
        return error;
 800efd6:	19bb      	adds	r3, r7, r6
 800efd8:	2200      	movs	r2, #0
 800efda:	5e9b      	ldrsh	r3, [r3, r2]
 800efdc:	e021      	b.n	800f022 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800efde:	4b14      	ldr	r3, [pc, #80]	@ (800f030 <sen5x_get_serial_number+0xa8>)
 800efe0:	0018      	movs	r0, r3
 800efe2:	f7ff fb41 	bl	800e668 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800efe6:	253c      	movs	r5, #60	@ 0x3c
 800efe8:	197c      	adds	r4, r7, r5
 800efea:	230c      	movs	r3, #12
 800efec:	18fb      	adds	r3, r7, r3
 800efee:	2220      	movs	r2, #32
 800eff0:	0019      	movs	r1, r3
 800eff2:	2069      	movs	r0, #105	@ 0x69
 800eff4:	f001 f96d 	bl	80102d2 <sensirion_i2c_read_data_inplace>
 800eff8:	0003      	movs	r3, r0
 800effa:	8023      	strh	r3, [r4, #0]
    if (error) {
 800effc:	197b      	adds	r3, r7, r5
 800effe:	2200      	movs	r2, #0
 800f000:	5e9b      	ldrsh	r3, [r3, r2]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d003      	beq.n	800f00e <sen5x_get_serial_number+0x86>
        return error;
 800f006:	197b      	adds	r3, r7, r5
 800f008:	2200      	movs	r2, #0
 800f00a:	5e9b      	ldrsh	r3, [r3, r2]
 800f00c:	e009      	b.n	800f022 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800f00e:	1cfb      	adds	r3, r7, #3
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	b29a      	uxth	r2, r3
 800f014:	6879      	ldr	r1, [r7, #4]
 800f016:	230c      	movs	r3, #12
 800f018:	18fb      	adds	r3, r7, r3
 800f01a:	0018      	movs	r0, r3
 800f01c:	f000 f933 	bl	800f286 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800f020:	2300      	movs	r3, #0
}
 800f022:	0018      	movs	r0, r3
 800f024:	46bd      	mov	sp, r7
 800f026:	b011      	add	sp, #68	@ 0x44
 800f028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f02a:	46c0      	nop			@ (mov r8, r8)
 800f02c:	0000d033 	.word	0x0000d033
 800f030:	0000c350 	.word	0x0000c350

0800f034 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800f034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f036:	b089      	sub	sp, #36	@ 0x24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800f042:	251e      	movs	r5, #30
 800f044:	197b      	adds	r3, r7, r5
 800f046:	2200      	movs	r2, #0
 800f048:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800f04a:	197c      	adds	r4, r7, r5
 800f04c:	23d1      	movs	r3, #209	@ 0xd1
 800f04e:	021a      	lsls	r2, r3, #8
 800f050:	197b      	adds	r3, r7, r5
 800f052:	8819      	ldrh	r1, [r3, #0]
 800f054:	2310      	movs	r3, #16
 800f056:	18fb      	adds	r3, r7, r3
 800f058:	0018      	movs	r0, r3
 800f05a:	f001 f89e 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800f05e:	0003      	movs	r3, r0
 800f060:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f062:	261c      	movs	r6, #28
 800f064:	19bc      	adds	r4, r7, r6
 800f066:	197b      	adds	r3, r7, r5
 800f068:	881a      	ldrh	r2, [r3, #0]
 800f06a:	2310      	movs	r3, #16
 800f06c:	18fb      	adds	r3, r7, r3
 800f06e:	0019      	movs	r1, r3
 800f070:	2069      	movs	r0, #105	@ 0x69
 800f072:	f001 f916 	bl	80102a2 <sensirion_i2c_write_data>
 800f076:	0003      	movs	r3, r0
 800f078:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f07a:	19bb      	adds	r3, r7, r6
 800f07c:	2200      	movs	r2, #0
 800f07e:	5e9b      	ldrsh	r3, [r3, r2]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d003      	beq.n	800f08c <sen5x_get_version+0x58>
        return error;
 800f084:	19bb      	adds	r3, r7, r6
 800f086:	2200      	movs	r2, #0
 800f088:	5e9b      	ldrsh	r3, [r3, r2]
 800f08a:	e038      	b.n	800f0fe <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f08c:	4b1e      	ldr	r3, [pc, #120]	@ (800f108 <sen5x_get_version+0xd4>)
 800f08e:	0018      	movs	r0, r3
 800f090:	f7ff faea 	bl	800e668 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800f094:	251c      	movs	r5, #28
 800f096:	197c      	adds	r4, r7, r5
 800f098:	2310      	movs	r3, #16
 800f09a:	18fb      	adds	r3, r7, r3
 800f09c:	2208      	movs	r2, #8
 800f09e:	0019      	movs	r1, r3
 800f0a0:	2069      	movs	r0, #105	@ 0x69
 800f0a2:	f001 f916 	bl	80102d2 <sensirion_i2c_read_data_inplace>
 800f0a6:	0003      	movs	r3, r0
 800f0a8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f0aa:	197b      	adds	r3, r7, r5
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	5e9b      	ldrsh	r3, [r3, r2]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d003      	beq.n	800f0bc <sen5x_get_version+0x88>
        return error;
 800f0b4:	197b      	adds	r3, r7, r5
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	5e9b      	ldrsh	r3, [r3, r2]
 800f0ba:	e020      	b.n	800f0fe <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800f0bc:	2110      	movs	r1, #16
 800f0be:	187b      	adds	r3, r7, r1
 800f0c0:	781a      	ldrb	r2, [r3, #0]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800f0c6:	187b      	adds	r3, r7, r1
 800f0c8:	785a      	ldrb	r2, [r3, #1]
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800f0ce:	187b      	adds	r3, r7, r1
 800f0d0:	789b      	ldrb	r3, [r3, #2]
 800f0d2:	1e5a      	subs	r2, r3, #1
 800f0d4:	4193      	sbcs	r3, r2
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800f0dc:	187b      	adds	r3, r7, r1
 800f0de:	78da      	ldrb	r2, [r3, #3]
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800f0e4:	187b      	adds	r3, r7, r1
 800f0e6:	791a      	ldrb	r2, [r3, #4]
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ea:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800f0ec:	187b      	adds	r3, r7, r1
 800f0ee:	795a      	ldrb	r2, [r3, #5]
 800f0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0f2:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800f0f4:	187b      	adds	r3, r7, r1
 800f0f6:	799a      	ldrb	r2, [r3, #6]
 800f0f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0fa:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	0018      	movs	r0, r3
 800f100:	46bd      	mov	sp, r7
 800f102:	b009      	add	sp, #36	@ 0x24
 800f104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f106:	46c0      	nop			@ (mov r8, r8)
 800f108:	00004e20 	.word	0x00004e20

0800f10c <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800f10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f10e:	b087      	sub	sp, #28
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800f114:	2516      	movs	r5, #22
 800f116:	197b      	adds	r3, r7, r5
 800f118:	2200      	movs	r2, #0
 800f11a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800f11c:	197c      	adds	r4, r7, r5
 800f11e:	4a21      	ldr	r2, [pc, #132]	@ (800f1a4 <sen5x_read_device_status+0x98>)
 800f120:	197b      	adds	r3, r7, r5
 800f122:	8819      	ldrh	r1, [r3, #0]
 800f124:	260c      	movs	r6, #12
 800f126:	19bb      	adds	r3, r7, r6
 800f128:	0018      	movs	r0, r3
 800f12a:	f001 f836 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800f12e:	0003      	movs	r3, r0
 800f130:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f132:	2314      	movs	r3, #20
 800f134:	18fc      	adds	r4, r7, r3
 800f136:	197b      	adds	r3, r7, r5
 800f138:	881a      	ldrh	r2, [r3, #0]
 800f13a:	19bb      	adds	r3, r7, r6
 800f13c:	0019      	movs	r1, r3
 800f13e:	2069      	movs	r0, #105	@ 0x69
 800f140:	f001 f8af 	bl	80102a2 <sensirion_i2c_write_data>
 800f144:	0003      	movs	r3, r0
 800f146:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f148:	2314      	movs	r3, #20
 800f14a:	18fb      	adds	r3, r7, r3
 800f14c:	2200      	movs	r2, #0
 800f14e:	5e9b      	ldrsh	r3, [r3, r2]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d001      	beq.n	800f158 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800f154:	4b14      	ldr	r3, [pc, #80]	@ (800f1a8 <sen5x_read_device_status+0x9c>)
 800f156:	e020      	b.n	800f19a <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f158:	4b14      	ldr	r3, [pc, #80]	@ (800f1ac <sen5x_read_device_status+0xa0>)
 800f15a:	0018      	movs	r0, r3
 800f15c:	f7ff fa84 	bl	800e668 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800f160:	2514      	movs	r5, #20
 800f162:	197c      	adds	r4, r7, r5
 800f164:	230c      	movs	r3, #12
 800f166:	18fb      	adds	r3, r7, r3
 800f168:	2204      	movs	r2, #4
 800f16a:	0019      	movs	r1, r3
 800f16c:	2069      	movs	r0, #105	@ 0x69
 800f16e:	f001 f8b0 	bl	80102d2 <sensirion_i2c_read_data_inplace>
 800f172:	0003      	movs	r3, r0
 800f174:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f176:	197b      	adds	r3, r7, r5
 800f178:	2200      	movs	r2, #0
 800f17a:	5e9b      	ldrsh	r3, [r3, r2]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d003      	beq.n	800f188 <sen5x_read_device_status+0x7c>
        return error;
 800f180:	197b      	adds	r3, r7, r5
 800f182:	2200      	movs	r2, #0
 800f184:	5e9b      	ldrsh	r3, [r3, r2]
 800f186:	e008      	b.n	800f19a <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800f188:	230c      	movs	r3, #12
 800f18a:	18fb      	adds	r3, r7, r3
 800f18c:	0018      	movs	r0, r3
 800f18e:	f000 f853 	bl	800f238 <sensirion_common_bytes_to_uint32_t>
 800f192:	0002      	movs	r2, r0
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	0018      	movs	r0, r3
 800f19c:	46bd      	mov	sp, r7
 800f19e:	b007      	add	sp, #28
 800f1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1a2:	46c0      	nop			@ (mov r8, r8)
 800f1a4:	0000d206 	.word	0x0000d206
 800f1a8:	ffffd206 	.word	0xffffd206
 800f1ac:	00004e20 	.word	0x00004e20

0800f1b0 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800f1b0:	b590      	push	{r4, r7, lr}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f1b6:	1dbb      	adds	r3, r7, #6
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800f1bc:	1dbc      	adds	r4, r7, #6
 800f1be:	4a12      	ldr	r2, [pc, #72]	@ (800f208 <sen5x_device_reset+0x58>)
 800f1c0:	1dbb      	adds	r3, r7, #6
 800f1c2:	8819      	ldrh	r1, [r3, #0]
 800f1c4:	003b      	movs	r3, r7
 800f1c6:	0018      	movs	r0, r3
 800f1c8:	f000 ffe7 	bl	801019a <sensirion_i2c_add_command_to_buffer>
 800f1cc:	0003      	movs	r3, r0
 800f1ce:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f1d0:	1d3c      	adds	r4, r7, #4
 800f1d2:	1dbb      	adds	r3, r7, #6
 800f1d4:	881a      	ldrh	r2, [r3, #0]
 800f1d6:	003b      	movs	r3, r7
 800f1d8:	0019      	movs	r1, r3
 800f1da:	2069      	movs	r0, #105	@ 0x69
 800f1dc:	f001 f861 	bl	80102a2 <sensirion_i2c_write_data>
 800f1e0:	0003      	movs	r3, r0
 800f1e2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f1e4:	1d3b      	adds	r3, r7, #4
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	5e9b      	ldrsh	r3, [r3, r2]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d003      	beq.n	800f1f6 <sen5x_device_reset+0x46>
        return error;
 800f1ee:	1d3b      	adds	r3, r7, #4
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	5e9b      	ldrsh	r3, [r3, r2]
 800f1f4:	e004      	b.n	800f200 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f1f6:	4b05      	ldr	r3, [pc, #20]	@ (800f20c <sen5x_device_reset+0x5c>)
 800f1f8:	0018      	movs	r0, r3
 800f1fa:	f7ff fa35 	bl	800e668 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	0018      	movs	r0, r3
 800f202:	46bd      	mov	sp, r7
 800f204:	b003      	add	sp, #12
 800f206:	bd90      	pop	{r4, r7, pc}
 800f208:	0000d304 	.word	0x0000d304
 800f20c:	00030d40 	.word	0x00030d40

0800f210 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	b21b      	sxth	r3, r3
 800f21e:	021b      	lsls	r3, r3, #8
 800f220:	b21a      	sxth	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	3301      	adds	r3, #1
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	b21b      	sxth	r3, r3
 800f22a:	4313      	orrs	r3, r2
 800f22c:	b21b      	sxth	r3, r3
 800f22e:	b29b      	uxth	r3, r3
}
 800f230:	0018      	movs	r0, r3
 800f232:	46bd      	mov	sp, r7
 800f234:	b002      	add	sp, #8
 800f236:	bd80      	pop	{r7, pc}

0800f238 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	061a      	lsls	r2, r3, #24
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	3301      	adds	r3, #1
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	041b      	lsls	r3, r3, #16
 800f24e:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	3302      	adds	r3, #2
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800f258:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	3203      	adds	r2, #3
 800f25e:	7812      	ldrb	r2, [r2, #0]
 800f260:	4313      	orrs	r3, r2
}
 800f262:	0018      	movs	r0, r3
 800f264:	46bd      	mov	sp, r7
 800f266:	b002      	add	sp, #8
 800f268:	bd80      	pop	{r7, pc}

0800f26a <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b082      	sub	sp, #8
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	0018      	movs	r0, r3
 800f276:	f7ff ffcb 	bl	800f210 <sensirion_common_bytes_to_uint16_t>
 800f27a:	0003      	movs	r3, r0
 800f27c:	b21b      	sxth	r3, r3
}
 800f27e:	0018      	movs	r0, r3
 800f280:	46bd      	mov	sp, r7
 800f282:	b002      	add	sp, #8
 800f284:	bd80      	pop	{r7, pc}

0800f286 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800f286:	b580      	push	{r7, lr}
 800f288:	b086      	sub	sp, #24
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	60f8      	str	r0, [r7, #12]
 800f28e:	60b9      	str	r1, [r7, #8]
 800f290:	1dbb      	adds	r3, r7, #6
 800f292:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800f294:	2316      	movs	r3, #22
 800f296:	18fb      	adds	r3, r7, r3
 800f298:	2200      	movs	r2, #0
 800f29a:	801a      	strh	r2, [r3, #0]
 800f29c:	e00f      	b.n	800f2be <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800f29e:	2016      	movs	r0, #22
 800f2a0:	183b      	adds	r3, r7, r0
 800f2a2:	881b      	ldrh	r3, [r3, #0]
 800f2a4:	68fa      	ldr	r2, [r7, #12]
 800f2a6:	18d2      	adds	r2, r2, r3
 800f2a8:	183b      	adds	r3, r7, r0
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	68b9      	ldr	r1, [r7, #8]
 800f2ae:	18cb      	adds	r3, r1, r3
 800f2b0:	7812      	ldrb	r2, [r2, #0]
 800f2b2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800f2b4:	183b      	adds	r3, r7, r0
 800f2b6:	881a      	ldrh	r2, [r3, #0]
 800f2b8:	183b      	adds	r3, r7, r0
 800f2ba:	3201      	adds	r2, #1
 800f2bc:	801a      	strh	r2, [r3, #0]
 800f2be:	2316      	movs	r3, #22
 800f2c0:	18fa      	adds	r2, r7, r3
 800f2c2:	1dbb      	adds	r3, r7, #6
 800f2c4:	8812      	ldrh	r2, [r2, #0]
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d3e8      	bcc.n	800f29e <sensirion_common_copy_bytes+0x18>
    }
}
 800f2cc:	46c0      	nop			@ (mov r8, r8)
 800f2ce:	46c0      	nop			@ (mov r8, r8)
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	b006      	add	sp, #24
 800f2d4:	bd80      	pop	{r7, pc}
	...

0800f2d8 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d113      	bne.n	800f31e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	22fe      	movs	r2, #254	@ 0xfe
 800f2fa:	0592      	lsls	r2, r2, #22
 800f2fc:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	4a1a      	ldr	r2, [pc, #104]	@ (800f36c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800f302:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	4a1a      	ldr	r2, [pc, #104]	@ (800f370 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800f308:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	4a19      	ldr	r2, [pc, #100]	@ (800f374 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800f30e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	4a19      	ldr	r2, [pc, #100]	@ (800f378 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800f314:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	4a18      	ldr	r2, [pc, #96]	@ (800f37c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800f31a:	61da      	str	r2, [r3, #28]
 800f31c:	e011      	b.n	800f342 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	4a17      	ldr	r2, [pc, #92]	@ (800f380 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800f322:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	4a17      	ldr	r2, [pc, #92]	@ (800f384 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800f328:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	4a16      	ldr	r2, [pc, #88]	@ (800f388 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800f32e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4a16      	ldr	r2, [pc, #88]	@ (800f38c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800f334:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	4a15      	ldr	r2, [pc, #84]	@ (800f390 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800f33a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	4a15      	ldr	r2, [pc, #84]	@ (800f394 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800f340:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	4a14      	ldr	r2, [pc, #80]	@ (800f398 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800f346:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	4a14      	ldr	r2, [pc, #80]	@ (800f39c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f34c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	4a12      	ldr	r2, [pc, #72]	@ (800f39c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f352:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	4a12      	ldr	r2, [pc, #72]	@ (800f3a0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800f358:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	0018      	movs	r0, r3
 800f35e:	f000 f831 	bl	800f3c4 <GasIndexAlgorithm_reset>
}
 800f362:	46c0      	nop			@ (mov r8, r8)
 800f364:	46bd      	mov	sp, r7
 800f366:	b004      	add	sp, #16
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	46c0      	nop			@ (mov r8, r8)
 800f36c:	00002710 	.word	0x00002710
 800f370:	44340000 	.word	0x44340000
 800f374:	46859800 	.word	0x46859800
 800f378:	46a05000 	.word	0x46a05000
 800f37c:	41f00000 	.word	0x41f00000
 800f380:	42c80000 	.word	0x42c80000
 800f384:	00004e20 	.word	0x00004e20
 800f388:	43340000 	.word	0x43340000
 800f38c:	4528c000 	.word	0x4528c000
 800f390:	45a32000 	.word	0x45a32000
 800f394:	43aa0000 	.word	0x43aa0000
 800f398:	43660000 	.word	0x43660000
 800f39c:	41400000 	.word	0x41400000
 800f3a0:	42480000 	.word	0x42480000

0800f3a4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800f3ae:	22fe      	movs	r2, #254	@ 0xfe
 800f3b0:	0592      	lsls	r2, r2, #22
 800f3b2:	6839      	ldr	r1, [r7, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	0018      	movs	r0, r3
 800f3b8:	f7ff ff8e 	bl	800f2d8 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800f3bc:	46c0      	nop			@ (mov r8, r8)
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	b002      	add	sp, #8
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	0018      	movs	r0, r3
 800f3e2:	f000 f805 	bl	800f3f0 <GasIndexAlgorithm__init_instances>
}
 800f3e6:	46c0      	nop			@ (mov r8, r8)
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	b002      	add	sp, #8
 800f3ec:	bd80      	pop	{r7, pc}
	...

0800f3f0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800f3f0:	b590      	push	{r4, r7, lr}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	0018      	movs	r0, r3
 800f3fc:	f000 f8e8 	bl	800f5d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	0018      	movs	r0, r3
 800f404:	f000 f9a6 	bl	800f754 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f408:	1c04      	adds	r4, r0, #0
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	0018      	movs	r0, r3
 800f40e:	f000 f9ab 	bl	800f768 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f412:	1c02      	adds	r2, r0, #0
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	1c21      	adds	r1, r4, #0
 800f418:	0018      	movs	r0, r3
 800f41a:	f000 fc3b 	bl	800fc94 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b01      	cmp	r3, #1
 800f424:	d107      	bne.n	800f436 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f426:	23fe      	movs	r3, #254	@ 0xfe
 800f428:	059b      	lsls	r3, r3, #22
 800f42a:	4a0a      	ldr	r2, [pc, #40]	@ (800f454 <GasIndexAlgorithm__init_instances+0x64>)
 800f42c:	490a      	ldr	r1, [pc, #40]	@ (800f458 <GasIndexAlgorithm__init_instances+0x68>)
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fc86 	bl	800fd40 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800f434:	e005      	b.n	800f442 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f436:	4b09      	ldr	r3, [pc, #36]	@ (800f45c <GasIndexAlgorithm__init_instances+0x6c>)
 800f438:	4a09      	ldr	r2, [pc, #36]	@ (800f460 <GasIndexAlgorithm__init_instances+0x70>)
 800f43a:	490a      	ldr	r1, [pc, #40]	@ (800f464 <GasIndexAlgorithm__init_instances+0x74>)
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 fc7f 	bl	800fd40 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	0018      	movs	r0, r3
 800f446:	f000 fd35 	bl	800feb4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800f44a:	46c0      	nop			@ (mov r8, r8)
 800f44c:	46bd      	mov	sp, r7
 800f44e:	b003      	add	sp, #12
 800f450:	bd90      	pop	{r4, r7, pc}
 800f452:	46c0      	nop			@ (mov r8, r8)
 800f454:	bc257a78 	.word	0xbc257a78
 800f458:	44198000 	.word	0x44198000
 800f45c:	42c80000 	.word	0x42c80000
 800f460:	bbd4fdf4 	.word	0xbbd4fdf4
 800f464:	43550000 	.word	0x43550000

0800f468 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800f468:	b590      	push	{r4, r7, lr}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f478:	4952      	ldr	r1, [pc, #328]	@ (800f5c4 <GasIndexAlgorithm_process+0x15c>)
 800f47a:	1c18      	adds	r0, r3, #0
 800f47c:	f7f1 f862 	bl	8000544 <__aeabi_fcmple>
 800f480:	1e03      	subs	r3, r0, #0
 800f482:	d00c      	beq.n	800f49e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	1c19      	adds	r1, r3, #0
 800f48e:	1c10      	adds	r0, r2, #0
 800f490:	f7f1 fa16 	bl	80008c0 <__aeabi_fadd>
 800f494:	1c03      	adds	r3, r0, #0
 800f496:	1c1a      	adds	r2, r3, #0
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f49c:	e080      	b.n	800f5a0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	dd25      	ble.n	800f4f0 <GasIndexAlgorithm_process+0x88>
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	4a48      	ldr	r2, [pc, #288]	@ (800f5c8 <GasIndexAlgorithm_process+0x160>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	dc21      	bgt.n	800f4f0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	dc04      	bgt.n	800f4c0 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	60bb      	str	r3, [r7, #8]
 800f4be:	e00d      	b.n	800f4dc <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	4a41      	ldr	r2, [pc, #260]	@ (800f5cc <GasIndexAlgorithm_process+0x164>)
 800f4c6:	4694      	mov	ip, r2
 800f4c8:	4463      	add	r3, ip
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	dd05      	ble.n	800f4dc <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	4a3d      	ldr	r2, [pc, #244]	@ (800f5cc <GasIndexAlgorithm_process+0x164>)
 800f4d6:	4694      	mov	ip, r2
 800f4d8:	4463      	add	r3, ip
 800f4da:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	0018      	movs	r0, r3
 800f4e6:	f7f2 f99f 	bl	8001828 <__aeabi_i2f>
 800f4ea:	1c02      	adds	r2, r0, #0
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d005      	beq.n	800f504 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	0018      	movs	r0, r3
 800f4fc:	f000 f945 	bl	800f78a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800f500:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800f502:	d014      	beq.n	800f52e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	1c11      	adds	r1, r2, #0
 800f50c:	0018      	movs	r0, r3
 800f50e:	f000 fbd1 	bl	800fcb4 <GasIndexAlgorithm__mox_model__process>
 800f512:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	1c11      	adds	r1, r2, #0
 800f520:	0018      	movs	r0, r3
 800f522:	f000 fc25 	bl	800fd70 <GasIndexAlgorithm__sigmoid_scaled__process>
 800f526:	1c02      	adds	r2, r0, #0
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	639a      	str	r2, [r3, #56]	@ 0x38
 800f52c:	e003      	b.n	800f536 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	689a      	ldr	r2, [r3, #8]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	1c11      	adds	r1, r2, #0
 800f53e:	0018      	movs	r0, r3
 800f540:	f000 fcec 	bl	800ff1c <GasIndexAlgorithm__adaptive_lowpass__process>
 800f544:	1c02      	adds	r2, r0, #0
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f54e:	21fc      	movs	r1, #252	@ 0xfc
 800f550:	0589      	lsls	r1, r1, #22
 800f552:	1c18      	adds	r0, r3, #0
 800f554:	f7f0 ffec 	bl	8000530 <__aeabi_fcmplt>
 800f558:	1e03      	subs	r3, r0, #0
 800f55a:	d003      	beq.n	800f564 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	22fc      	movs	r2, #252	@ 0xfc
 800f560:	0592      	lsls	r2, r2, #22
 800f562:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f568:	2100      	movs	r1, #0
 800f56a:	1c18      	adds	r0, r3, #0
 800f56c:	f7f0 fff4 	bl	8000558 <__aeabi_fcmpgt>
 800f570:	1e03      	subs	r3, r0, #0
 800f572:	d015      	beq.n	800f5a0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	1c11      	adds	r1, r2, #0
 800f57c:	0018      	movs	r0, r3
 800f57e:	f000 fa4f 	bl	800fa20 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	0018      	movs	r0, r3
 800f586:	f000 f8e5 	bl	800f754 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f58a:	1c04      	adds	r4, r0, #0
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	0018      	movs	r0, r3
 800f590:	f000 f8ea 	bl	800f768 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f594:	1c02      	adds	r2, r0, #0
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	1c21      	adds	r1, r4, #0
 800f59a:	0018      	movs	r0, r3
 800f59c:	f000 fb7a 	bl	800fc94 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5a4:	21fc      	movs	r1, #252	@ 0xfc
 800f5a6:	0589      	lsls	r1, r1, #22
 800f5a8:	1c18      	adds	r0, r3, #0
 800f5aa:	f7f1 f989 	bl	80008c0 <__aeabi_fadd>
 800f5ae:	1c03      	adds	r3, r0, #0
 800f5b0:	1c18      	adds	r0, r3, #0
 800f5b2:	f7f2 f919 	bl	80017e8 <__aeabi_f2iz>
 800f5b6:	0002      	movs	r2, r0
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	601a      	str	r2, [r3, #0]
    return;
 800f5bc:	46c0      	nop			@ (mov r8, r8)
}
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	b005      	add	sp, #20
 800f5c2:	bd90      	pop	{r4, r7, pc}
 800f5c4:	42340000 	.word	0x42340000
 800f5c8:	0000fde7 	.word	0x0000fde7
 800f5cc:	00007fff 	.word	0x00007fff

0800f5d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800f5d0:	b5b0      	push	{r4, r5, r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	223c      	movs	r2, #60	@ 0x3c
 800f5dc:	2100      	movs	r1, #0
 800f5de:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	4952      	ldr	r1, [pc, #328]	@ (800f744 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f5fa:	1c18      	adds	r0, r3, #0
 800f5fc:	f7f1 fb52 	bl	8000ca4 <__aeabi_fdiv>
 800f600:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f602:	2188      	movs	r1, #136	@ 0x88
 800f604:	05c9      	lsls	r1, r1, #23
 800f606:	1c18      	adds	r0, r3, #0
 800f608:	f7f1 fd1a 	bl	8001040 <__aeabi_fmul>
 800f60c:	1c03      	adds	r3, r0, #0
 800f60e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	494a      	ldr	r1, [pc, #296]	@ (800f744 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f61a:	1c18      	adds	r0, r3, #0
 800f61c:	f7f1 fb42 	bl	8000ca4 <__aeabi_fdiv>
 800f620:	1c03      	adds	r3, r0, #0
 800f622:	1c19      	adds	r1, r3, #0
 800f624:	1c20      	adds	r0, r4, #0
 800f626:	f7f1 f94b 	bl	80008c0 <__aeabi_fadd>
 800f62a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f62c:	1c19      	adds	r1, r3, #0
 800f62e:	1c28      	adds	r0, r5, #0
 800f630:	f7f1 fb38 	bl	8000ca4 <__aeabi_fdiv>
 800f634:	1c03      	adds	r3, r0, #0
 800f636:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	4940      	ldr	r1, [pc, #256]	@ (800f744 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f642:	1c18      	adds	r0, r3, #0
 800f644:	f7f1 fb2e 	bl	8000ca4 <__aeabi_fdiv>
 800f648:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f64a:	2185      	movs	r1, #133	@ 0x85
 800f64c:	05c9      	lsls	r1, r1, #23
 800f64e:	1c18      	adds	r0, r3, #0
 800f650:	f7f1 fcf6 	bl	8001040 <__aeabi_fmul>
 800f654:	1c03      	adds	r3, r0, #0
 800f656:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	4938      	ldr	r1, [pc, #224]	@ (800f744 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f662:	1c18      	adds	r0, r3, #0
 800f664:	f7f1 fb1e 	bl	8000ca4 <__aeabi_fdiv>
 800f668:	1c03      	adds	r3, r0, #0
 800f66a:	1c19      	adds	r1, r3, #0
 800f66c:	1c20      	adds	r0, r4, #0
 800f66e:	f7f1 f927 	bl	80008c0 <__aeabi_fadd>
 800f672:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f674:	1c19      	adds	r1, r3, #0
 800f676:	1c28      	adds	r0, r5, #0
 800f678:	f7f1 fb14 	bl	8000ca4 <__aeabi_fdiv>
 800f67c:	1c03      	adds	r3, r0, #0
 800f67e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b01      	cmp	r3, #1
 800f68a:	d118      	bne.n	800f6be <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f690:	2188      	movs	r1, #136	@ 0x88
 800f692:	05c9      	lsls	r1, r1, #23
 800f694:	1c18      	adds	r0, r3, #0
 800f696:	f7f1 fcd3 	bl	8001040 <__aeabi_fmul>
 800f69a:	1c03      	adds	r3, r0, #0
 800f69c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800f6a2:	4929      	ldr	r1, [pc, #164]	@ (800f748 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800f6a4:	1c18      	adds	r0, r3, #0
 800f6a6:	f7f1 f90b 	bl	80008c0 <__aeabi_fadd>
 800f6aa:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f6ac:	1c19      	adds	r1, r3, #0
 800f6ae:	1c20      	adds	r0, r4, #0
 800f6b0:	f7f1 faf8 	bl	8000ca4 <__aeabi_fdiv>
 800f6b4:	1c03      	adds	r3, r0, #0
 800f6b6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	655a      	str	r2, [r3, #84]	@ 0x54
 800f6bc:	e017      	b.n	800f6ee <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f6c2:	2188      	movs	r1, #136	@ 0x88
 800f6c4:	05c9      	lsls	r1, r1, #23
 800f6c6:	1c18      	adds	r0, r3, #0
 800f6c8:	f7f1 fcba 	bl	8001040 <__aeabi_fmul>
 800f6cc:	1c03      	adds	r3, r0, #0
 800f6ce:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800f6d4:	491d      	ldr	r1, [pc, #116]	@ (800f74c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800f6d6:	1c18      	adds	r0, r3, #0
 800f6d8:	f7f1 f8f2 	bl	80008c0 <__aeabi_fadd>
 800f6dc:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f6de:	1c19      	adds	r1, r3, #0
 800f6e0:	1c20      	adds	r0, r4, #0
 800f6e2:	f7f1 fadf 	bl	8000ca4 <__aeabi_fdiv>
 800f6e6:	1c03      	adds	r3, r0, #0
 800f6e8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f6f2:	2185      	movs	r1, #133	@ 0x85
 800f6f4:	05c9      	lsls	r1, r1, #23
 800f6f6:	1c18      	adds	r0, r3, #0
 800f6f8:	f7f1 fca2 	bl	8001040 <__aeabi_fmul>
 800f6fc:	1c03      	adds	r3, r0, #0
 800f6fe:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	4912      	ldr	r1, [pc, #72]	@ (800f750 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800f706:	1c18      	adds	r0, r3, #0
 800f708:	f7f1 f8da 	bl	80008c0 <__aeabi_fadd>
 800f70c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800f70e:	1c19      	adds	r1, r3, #0
 800f710:	1c20      	adds	r0, r4, #0
 800f712:	f7f1 fac7 	bl	8000ca4 <__aeabi_fdiv>
 800f716:	1c03      	adds	r3, r0, #0
 800f718:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2200      	movs	r2, #0
 800f72e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2200      	movs	r2, #0
 800f73a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800f73c:	46c0      	nop			@ (mov r8, r8)
 800f73e:	46bd      	mov	sp, r7
 800f740:	b002      	add	sp, #8
 800f742:	bdb0      	pop	{r4, r5, r7, pc}
 800f744:	45610000 	.word	0x45610000
 800f748:	44960000 	.word	0x44960000
 800f74c:	41a00000 	.word	0x41a00000
 800f750:	451c4000 	.word	0x451c4000

0800f754 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800f760:	1c18      	adds	r0, r3, #0
 800f762:	46bd      	mov	sp, r7
 800f764:	b002      	add	sp, #8
 800f766:	bd80      	pop	{r7, pc}

0800f768 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800f778:	1c19      	adds	r1, r3, #0
 800f77a:	1c10      	adds	r0, r2, #0
 800f77c:	f7f1 f8a0 	bl	80008c0 <__aeabi_fadd>
 800f780:	1c03      	adds	r3, r0, #0
}
 800f782:	1c18      	adds	r0, r3, #0
 800f784:	46bd      	mov	sp, r7
 800f786:	b002      	add	sp, #8
 800f788:	bd80      	pop	{r7, pc}

0800f78a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b082      	sub	sp, #8
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	223c      	movs	r2, #60	@ 0x3c
 800f796:	5c9b      	ldrb	r3, [r3, r2]
}
 800f798:	0018      	movs	r0, r3
 800f79a:	46bd      	mov	sp, r7
 800f79c:	b002      	add	sp, #8
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800f7a0:	b5b0      	push	{r4, r5, r7, lr}
 800f7a2:	b08c      	sub	sp, #48	@ 0x30
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800f7ac:	1c19      	adds	r1, r3, #0
 800f7ae:	4895      	ldr	r0, [pc, #596]	@ (800fa04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800f7b0:	f7f1 fda0 	bl	80012f4 <__aeabi_fsub>
 800f7b4:	1c03      	adds	r3, r0, #0
 800f7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7bc:	1c19      	adds	r1, r3, #0
 800f7be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7c0:	f7f0 feca 	bl	8000558 <__aeabi_fcmpgt>
 800f7c4:	1e03      	subs	r3, r0, #0
 800f7c6:	d00b      	beq.n	800f7e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f7d0:	1c19      	adds	r1, r3, #0
 800f7d2:	1c10      	adds	r0, r2, #0
 800f7d4:	f7f1 f874 	bl	80008c0 <__aeabi_fadd>
 800f7d8:	1c03      	adds	r3, r0, #0
 800f7da:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7e4:	1c19      	adds	r1, r3, #0
 800f7e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7e8:	f7f0 feb6 	bl	8000558 <__aeabi_fcmpgt>
 800f7ec:	1e03      	subs	r3, r0, #0
 800f7ee:	d00b      	beq.n	800f808 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f7f8:	1c19      	adds	r1, r3, #0
 800f7fa:	1c10      	adds	r0, r2, #0
 800f7fc:	f7f1 f860 	bl	80008c0 <__aeabi_fadd>
 800f800:	1c03      	adds	r3, r0, #0
 800f802:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6959      	ldr	r1, [r3, #20]
 800f80c:	4a7e      	ldr	r2, [pc, #504]	@ (800fa08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	0018      	movs	r0, r3
 800f812:	f000 f9f1 	bl	800fbf8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	1c11      	adds	r1, r2, #0
 800f81e:	0018      	movs	r0, r3
 800f820:	f000 f9fa 	bl	800fc18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f824:	1c03      	adds	r3, r0, #0
 800f826:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f834:	1c19      	adds	r1, r3, #0
 800f836:	1c10      	adds	r0, r2, #0
 800f838:	f7f1 fd5c 	bl	80012f4 <__aeabi_fsub>
 800f83c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f83e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f840:	1c18      	adds	r0, r3, #0
 800f842:	f7f1 fbfd 	bl	8001040 <__aeabi_fmul>
 800f846:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f848:	1c19      	adds	r1, r3, #0
 800f84a:	1c20      	adds	r0, r4, #0
 800f84c:	f7f1 f838 	bl	80008c0 <__aeabi_fadd>
 800f850:	1c03      	adds	r3, r0, #0
 800f852:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f85c:	1c19      	adds	r1, r3, #0
 800f85e:	486b      	ldr	r0, [pc, #428]	@ (800fa0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f860:	f7f1 fd48 	bl	80012f4 <__aeabi_fsub>
 800f864:	1c03      	adds	r3, r0, #0
 800f866:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	1c11      	adds	r1, r2, #0
 800f870:	0018      	movs	r0, r3
 800f872:	f000 f9d1 	bl	800fc18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f876:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f878:	1c19      	adds	r1, r3, #0
 800f87a:	1c28      	adds	r0, r5, #0
 800f87c:	f7f1 fbe0 	bl	8001040 <__aeabi_fmul>
 800f880:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800f882:	1c19      	adds	r1, r3, #0
 800f884:	1c20      	adds	r0, r4, #0
 800f886:	f7f1 f81b 	bl	80008c0 <__aeabi_fadd>
 800f88a:	1c03      	adds	r3, r0, #0
 800f88c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f88e:	4a60      	ldr	r2, [pc, #384]	@ (800fa10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f890:	6a39      	ldr	r1, [r7, #32]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	0018      	movs	r0, r3
 800f896:	f000 f9af 	bl	800fbf8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	1c11      	adds	r1, r2, #0
 800f8a2:	0018      	movs	r0, r3
 800f8a4:	f000 f9b8 	bl	800fc18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f8a8:	1c03      	adds	r3, r0, #0
 800f8aa:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800f8ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f8ae:	69f8      	ldr	r0, [r7, #28]
 800f8b0:	f7f1 fbc6 	bl	8001040 <__aeabi_fmul>
 800f8b4:	1c03      	adds	r3, r0, #0
 800f8b6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6999      	ldr	r1, [r3, #24]
 800f8c0:	4a51      	ldr	r2, [pc, #324]	@ (800fa08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	0018      	movs	r0, r3
 800f8c6:	f000 f997 	bl	800fbf8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	1c11      	adds	r1, r2, #0
 800f8d2:	0018      	movs	r0, r3
 800f8d4:	f000 f9a0 	bl	800fc18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f8d8:	1c03      	adds	r3, r0, #0
 800f8da:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f8e8:	1c19      	adds	r1, r3, #0
 800f8ea:	1c10      	adds	r0, r2, #0
 800f8ec:	f7f1 fd02 	bl	80012f4 <__aeabi_fsub>
 800f8f0:	1c03      	adds	r3, r0, #0
 800f8f2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800f8f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f8f6:	69b8      	ldr	r0, [r7, #24]
 800f8f8:	f7f1 fcfc 	bl	80012f4 <__aeabi_fsub>
 800f8fc:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f8fe:	1c19      	adds	r1, r3, #0
 800f900:	1c28      	adds	r0, r5, #0
 800f902:	f7f1 fb9d 	bl	8001040 <__aeabi_fmul>
 800f906:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800f908:	1c19      	adds	r1, r3, #0
 800f90a:	1c20      	adds	r0, r4, #0
 800f90c:	f7f0 ffd8 	bl	80008c0 <__aeabi_fadd>
 800f910:	1c03      	adds	r3, r0, #0
 800f912:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f91c:	1c19      	adds	r1, r3, #0
 800f91e:	483b      	ldr	r0, [pc, #236]	@ (800fa0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f920:	f7f1 fce8 	bl	80012f4 <__aeabi_fsub>
 800f924:	1c03      	adds	r3, r0, #0
 800f926:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	1c11      	adds	r1, r2, #0
 800f930:	0018      	movs	r0, r3
 800f932:	f000 f971 	bl	800fc18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f936:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f938:	1c19      	adds	r1, r3, #0
 800f93a:	1c28      	adds	r0, r5, #0
 800f93c:	f7f1 fb80 	bl	8001040 <__aeabi_fmul>
 800f940:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800f942:	1c19      	adds	r1, r3, #0
 800f944:	1c20      	adds	r0, r4, #0
 800f946:	f7f0 ffbb 	bl	80008c0 <__aeabi_fadd>
 800f94a:	1c03      	adds	r3, r0, #0
 800f94c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f94e:	4a30      	ldr	r2, [pc, #192]	@ (800fa10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f950:	6939      	ldr	r1, [r7, #16]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	0018      	movs	r0, r3
 800f956:	f000 f94f 	bl	800fbf8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	1c11      	adds	r1, r2, #0
 800f962:	0018      	movs	r0, r3
 800f964:	f000 f958 	bl	800fc18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f968:	1c03      	adds	r3, r0, #0
 800f96a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800f96c:	6979      	ldr	r1, [r7, #20]
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f7f1 fb66 	bl	8001040 <__aeabi_fmul>
 800f974:	1c03      	adds	r3, r0, #0
 800f976:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	4923      	ldr	r1, [pc, #140]	@ (800fa14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800f986:	1c18      	adds	r0, r3, #0
 800f988:	f7f1 f98c 	bl	8000ca4 <__aeabi_fdiv>
 800f98c:	1c03      	adds	r3, r0, #0
 800f98e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800f990:	69f9      	ldr	r1, [r7, #28]
 800f992:	20fe      	movs	r0, #254	@ 0xfe
 800f994:	0580      	lsls	r0, r0, #22
 800f996:	f7f1 fcad 	bl	80012f4 <__aeabi_fsub>
 800f99a:	1c03      	adds	r3, r0, #0
 800f99c:	491e      	ldr	r1, [pc, #120]	@ (800fa18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800f99e:	1c18      	adds	r0, r3, #0
 800f9a0:	f7f1 fb4e 	bl	8001040 <__aeabi_fmul>
 800f9a4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800f9a6:	491d      	ldr	r1, [pc, #116]	@ (800fa1c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800f9a8:	1c18      	adds	r0, r3, #0
 800f9aa:	f7f1 fca3 	bl	80012f4 <__aeabi_fsub>
 800f9ae:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800f9b0:	1c19      	adds	r1, r3, #0
 800f9b2:	1c28      	adds	r0, r5, #0
 800f9b4:	f7f1 fb44 	bl	8001040 <__aeabi_fmul>
 800f9b8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f9ba:	1c19      	adds	r1, r3, #0
 800f9bc:	1c20      	adds	r0, r4, #0
 800f9be:	f7f0 ff7f 	bl	80008c0 <__aeabi_fadd>
 800f9c2:	1c03      	adds	r3, r0, #0
 800f9c4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	1c18      	adds	r0, r3, #0
 800f9d2:	f7f0 fdad 	bl	8000530 <__aeabi_fcmplt>
 800f9d6:	1e03      	subs	r3, r0, #0
 800f9d8:	d002      	beq.n	800f9e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f9e8:	1c19      	adds	r1, r3, #0
 800f9ea:	1c10      	adds	r0, r2, #0
 800f9ec:	f7f0 fdb4 	bl	8000558 <__aeabi_fcmpgt>
 800f9f0:	1e03      	subs	r3, r0, #0
 800f9f2:	d100      	bne.n	800f9f6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800f9f4:	e002      	b.n	800f9fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f9fc:	46c0      	nop			@ (mov r8, r8)
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	b00c      	add	sp, #48	@ 0x30
 800fa02:	bdb0      	pop	{r4, r5, r7, pc}
 800fa04:	46fffe00 	.word	0x46fffe00
 800fa08:	3c23d70a 	.word	0x3c23d70a
 800fa0c:	43ff0000 	.word	0x43ff0000
 800fa10:	3db851ec 	.word	0x3db851ec
 800fa14:	42700000 	.word	0x42700000
 800fa18:	3fa66666 	.word	0x3fa66666
 800fa1c:	3e99999a 	.word	0x3e99999a

0800fa20 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800fa20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	223c      	movs	r2, #60	@ 0x3c
 800fa2e:	5c9b      	ldrb	r3, [r3, r2]
 800fa30:	2201      	movs	r2, #1
 800fa32:	4053      	eors	r3, r2
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00a      	beq.n	800fa50 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	223c      	movs	r2, #60	@ 0x3c
 800fa3e:	2101      	movs	r1, #1
 800fa40:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	683a      	ldr	r2, [r7, #0]
 800fa46:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800fa4e:	e0c8      	b.n	800fbe2 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa54:	4965      	ldr	r1, [pc, #404]	@ (800fbec <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800fa56:	1c18      	adds	r0, r3, #0
 800fa58:	f7f0 fd88 	bl	800056c <__aeabi_fcmpge>
 800fa5c:	1e03      	subs	r3, r0, #0
 800fa5e:	d107      	bne.n	800fa70 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800fa64:	4962      	ldr	r1, [pc, #392]	@ (800fbf0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800fa66:	1c18      	adds	r0, r3, #0
 800fa68:	f7f0 fd6c 	bl	8000544 <__aeabi_fcmple>
 800fa6c:	1e03      	subs	r3, r0, #0
 800fa6e:	d00e      	beq.n	800fa8e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800fa78:	1c19      	adds	r1, r3, #0
 800fa7a:	1c10      	adds	r0, r2, #0
 800fa7c:	f7f0 ff20 	bl	80008c0 <__aeabi_fadd>
 800fa80:	1c03      	adds	r3, r0, #0
 800fa82:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa92:	1c19      	adds	r1, r3, #0
 800fa94:	6838      	ldr	r0, [r7, #0]
 800fa96:	f7f1 fc2d 	bl	80012f4 <__aeabi_fsub>
 800fa9a:	1c03      	adds	r3, r0, #0
 800fa9c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	0018      	movs	r0, r3
 800faa2:	f7ff fe7d 	bl	800f7a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faaa:	1c19      	adds	r1, r3, #0
 800faac:	6838      	ldr	r0, [r7, #0]
 800faae:	f7f1 fc21 	bl	80012f4 <__aeabi_fsub>
 800fab2:	1c03      	adds	r3, r0, #0
 800fab4:	2185      	movs	r1, #133	@ 0x85
 800fab6:	05c9      	lsls	r1, r1, #23
 800fab8:	1c18      	adds	r0, r3, #0
 800faba:	f7f1 f8f3 	bl	8000ca4 <__aeabi_fdiv>
 800fabe:	1c03      	adds	r3, r0, #0
 800fac0:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800fac2:	2100      	movs	r1, #0
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f7f0 fd33 	bl	8000530 <__aeabi_fcmplt>
 800faca:	1e03      	subs	r3, r0, #0
 800facc:	d008      	beq.n	800fae0 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fad2:	68f9      	ldr	r1, [r7, #12]
 800fad4:	1c18      	adds	r0, r3, #0
 800fad6:	f7f1 fc0d 	bl	80012f4 <__aeabi_fsub>
 800fada:	1c03      	adds	r3, r0, #0
 800fadc:	617b      	str	r3, [r7, #20]
 800fade:	e007      	b.n	800faf0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fae4:	1c19      	adds	r1, r3, #0
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f7f0 feea 	bl	80008c0 <__aeabi_fadd>
 800faec:	1c03      	adds	r3, r0, #0
 800faee:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800faf0:	23fe      	movs	r3, #254	@ 0xfe
 800faf2:	059b      	lsls	r3, r3, #22
 800faf4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800faf6:	493f      	ldr	r1, [pc, #252]	@ (800fbf4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800faf8:	6978      	ldr	r0, [r7, #20]
 800fafa:	f7f0 fd2d 	bl	8000558 <__aeabi_fcmpgt>
 800fafe:	1e03      	subs	r3, r0, #0
 800fb00:	d010      	beq.n	800fb24 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800fb02:	493c      	ldr	r1, [pc, #240]	@ (800fbf4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800fb04:	6978      	ldr	r0, [r7, #20]
 800fb06:	f7f1 f8cd 	bl	8000ca4 <__aeabi_fdiv>
 800fb0a:	1c03      	adds	r3, r0, #0
 800fb0c:	1c1c      	adds	r4, r3, #0
 800fb0e:	4939      	ldr	r1, [pc, #228]	@ (800fbf4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800fb10:	6978      	ldr	r0, [r7, #20]
 800fb12:	f7f1 f8c7 	bl	8000ca4 <__aeabi_fdiv>
 800fb16:	1c03      	adds	r3, r0, #0
 800fb18:	1c19      	adds	r1, r3, #0
 800fb1a:	1c20      	adds	r0, r4, #0
 800fb1c:	f7f1 fa90 	bl	8001040 <__aeabi_fmul>
 800fb20:	1c03      	adds	r3, r0, #0
 800fb22:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800fb28:	1c19      	adds	r1, r3, #0
 800fb2a:	2085      	movs	r0, #133	@ 0x85
 800fb2c:	05c0      	lsls	r0, r0, #23
 800fb2e:	f7f1 fbe1 	bl	80012f4 <__aeabi_fsub>
 800fb32:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800fb34:	6939      	ldr	r1, [r7, #16]
 800fb36:	1c18      	adds	r0, r3, #0
 800fb38:	f7f1 fa82 	bl	8001040 <__aeabi_fmul>
 800fb3c:	1c03      	adds	r3, r0, #0
 800fb3e:	1c18      	adds	r0, r3, #0
 800fb40:	f018 ff90 	bl	8028a64 <sqrtf>
 800fb44:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800fb4e:	2185      	movs	r1, #133	@ 0x85
 800fb50:	05c9      	lsls	r1, r1, #23
 800fb52:	6938      	ldr	r0, [r7, #16]
 800fb54:	f7f1 fa74 	bl	8001040 <__aeabi_fmul>
 800fb58:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800fb5a:	1c19      	adds	r1, r3, #0
 800fb5c:	1c28      	adds	r0, r5, #0
 800fb5e:	f7f1 f8a1 	bl	8000ca4 <__aeabi_fdiv>
 800fb62:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800fb64:	1c19      	adds	r1, r3, #0
 800fb66:	1c20      	adds	r0, r4, #0
 800fb68:	f7f1 fa6a 	bl	8001040 <__aeabi_fmul>
 800fb6c:	1c03      	adds	r3, r0, #0
 800fb6e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb74:	68f9      	ldr	r1, [r7, #12]
 800fb76:	1c18      	adds	r0, r3, #0
 800fb78:	f7f1 fa62 	bl	8001040 <__aeabi_fmul>
 800fb7c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800fb7e:	6939      	ldr	r1, [r7, #16]
 800fb80:	1c18      	adds	r0, r3, #0
 800fb82:	f7f1 f88f 	bl	8000ca4 <__aeabi_fdiv>
 800fb86:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800fb88:	68f9      	ldr	r1, [r7, #12]
 800fb8a:	1c18      	adds	r0, r3, #0
 800fb8c:	f7f1 fa58 	bl	8001040 <__aeabi_fmul>
 800fb90:	1c03      	adds	r3, r0, #0
             sqrtf(
 800fb92:	1c19      	adds	r1, r3, #0
 800fb94:	1c20      	adds	r0, r4, #0
 800fb96:	f7f0 fe93 	bl	80008c0 <__aeabi_fadd>
 800fb9a:	1c03      	adds	r3, r0, #0
 800fb9c:	1c18      	adds	r0, r3, #0
 800fb9e:	f018 ff61 	bl	8028a64 <sqrtf>
 800fba2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800fba4:	1c19      	adds	r1, r3, #0
 800fba6:	1c30      	adds	r0, r6, #0
 800fba8:	f7f1 fa4a 	bl	8001040 <__aeabi_fmul>
 800fbac:	1c03      	adds	r3, r0, #0
 800fbae:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fbbc:	68f9      	ldr	r1, [r7, #12]
 800fbbe:	1c18      	adds	r0, r3, #0
 800fbc0:	f7f1 fa3e 	bl	8001040 <__aeabi_fmul>
 800fbc4:	1c03      	adds	r3, r0, #0
 800fbc6:	2182      	movs	r1, #130	@ 0x82
 800fbc8:	05c9      	lsls	r1, r1, #23
 800fbca:	1c18      	adds	r0, r3, #0
 800fbcc:	f7f1 f86a 	bl	8000ca4 <__aeabi_fdiv>
 800fbd0:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800fbd2:	1c19      	adds	r1, r3, #0
 800fbd4:	1c20      	adds	r0, r4, #0
 800fbd6:	f7f0 fe73 	bl	80008c0 <__aeabi_fadd>
 800fbda:	1c03      	adds	r3, r0, #0
 800fbdc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800fbe2:	46c0      	nop			@ (mov r8, r8)
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	b007      	add	sp, #28
 800fbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbea:	46c0      	nop			@ (mov r8, r8)
 800fbec:	42c80000 	.word	0x42c80000
 800fbf0:	c2c80000 	.word	0xc2c80000
 800fbf4:	44b40000 	.word	0x44b40000

0800fbf8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fc10:	46c0      	nop			@ (mov r8, r8)
 800fc12:	46bd      	mov	sp, r7
 800fc14:	b004      	add	sp, #16
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800fc18:	b590      	push	{r4, r7, lr}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc2a:	1c19      	adds	r1, r3, #0
 800fc2c:	6838      	ldr	r0, [r7, #0]
 800fc2e:	f7f1 fb61 	bl	80012f4 <__aeabi_fsub>
 800fc32:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800fc34:	1c19      	adds	r1, r3, #0
 800fc36:	1c20      	adds	r0, r4, #0
 800fc38:	f7f1 fa02 	bl	8001040 <__aeabi_fmul>
 800fc3c:	1c03      	adds	r3, r0, #0
 800fc3e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800fc40:	4912      	ldr	r1, [pc, #72]	@ (800fc8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f7f0 fc74 	bl	8000530 <__aeabi_fcmplt>
 800fc48:	1e03      	subs	r3, r0, #0
 800fc4a:	d002      	beq.n	800fc52 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800fc4c:	23fe      	movs	r3, #254	@ 0xfe
 800fc4e:	059b      	lsls	r3, r3, #22
 800fc50:	e018      	b.n	800fc84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800fc52:	490f      	ldr	r1, [pc, #60]	@ (800fc90 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7f0 fc7f 	bl	8000558 <__aeabi_fcmpgt>
 800fc5a:	1e03      	subs	r3, r0, #0
 800fc5c:	d001      	beq.n	800fc62 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	e010      	b.n	800fc84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	1c18      	adds	r0, r3, #0
 800fc66:	f018 fed5 	bl	8028a14 <expf>
 800fc6a:	1c03      	adds	r3, r0, #0
 800fc6c:	21fe      	movs	r1, #254	@ 0xfe
 800fc6e:	0589      	lsls	r1, r1, #22
 800fc70:	1c18      	adds	r0, r3, #0
 800fc72:	f7f0 fe25 	bl	80008c0 <__aeabi_fadd>
 800fc76:	1c03      	adds	r3, r0, #0
 800fc78:	1c19      	adds	r1, r3, #0
 800fc7a:	20fe      	movs	r0, #254	@ 0xfe
 800fc7c:	0580      	lsls	r0, r0, #22
 800fc7e:	f7f1 f811 	bl	8000ca4 <__aeabi_fdiv>
 800fc82:	1c03      	adds	r3, r0, #0
    }
}
 800fc84:	1c18      	adds	r0, r3, #0
 800fc86:	46bd      	mov	sp, r7
 800fc88:	b005      	add	sp, #20
 800fc8a:	bd90      	pop	{r4, r7, pc}
 800fc8c:	c2480000 	.word	0xc2480000
 800fc90:	42480000 	.word	0x42480000

0800fc94 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800fcac:	46c0      	nop			@ (mov r8, r8)
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	b004      	add	sp, #16
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800fcb4:	b590      	push	{r4, r7, lr}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d114      	bne.n	800fcf0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcca:	1c19      	adds	r1, r3, #0
 800fccc:	6838      	ldr	r0, [r7, #0]
 800fcce:	f7f1 fb11 	bl	80012f4 <__aeabi_fsub>
 800fcd2:	1c03      	adds	r3, r0, #0
 800fcd4:	4918      	ldr	r1, [pc, #96]	@ (800fd38 <GasIndexAlgorithm__mox_model__process+0x84>)
 800fcd6:	1c18      	adds	r0, r3, #0
 800fcd8:	f7f0 ffe4 	bl	8000ca4 <__aeabi_fdiv>
 800fcdc:	1c03      	adds	r3, r0, #0
 800fcde:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800fce4:	1c19      	adds	r1, r3, #0
 800fce6:	1c10      	adds	r0, r2, #0
 800fce8:	f7f1 f9aa 	bl	8001040 <__aeabi_fmul>
 800fcec:	1c03      	adds	r3, r0, #0
 800fcee:	e01f      	b.n	800fd30 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcf4:	1c19      	adds	r1, r3, #0
 800fcf6:	6838      	ldr	r0, [r7, #0]
 800fcf8:	f7f1 fafc 	bl	80012f4 <__aeabi_fsub>
 800fcfc:	1c03      	adds	r3, r0, #0
 800fcfe:	1c1a      	adds	r2, r3, #0
 800fd00:	2380      	movs	r3, #128	@ 0x80
 800fd02:	061b      	lsls	r3, r3, #24
 800fd04:	4053      	eors	r3, r2
 800fd06:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd0c:	490b      	ldr	r1, [pc, #44]	@ (800fd3c <GasIndexAlgorithm__mox_model__process+0x88>)
 800fd0e:	1c18      	adds	r0, r3, #0
 800fd10:	f7f0 fdd6 	bl	80008c0 <__aeabi_fadd>
 800fd14:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fd16:	1c19      	adds	r1, r3, #0
 800fd18:	1c20      	adds	r0, r4, #0
 800fd1a:	f7f0 ffc3 	bl	8000ca4 <__aeabi_fdiv>
 800fd1e:	1c03      	adds	r3, r0, #0
 800fd20:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800fd26:	1c19      	adds	r1, r3, #0
 800fd28:	1c10      	adds	r0, r2, #0
 800fd2a:	f7f1 f989 	bl	8001040 <__aeabi_fmul>
 800fd2e:	1c03      	adds	r3, r0, #0
    }
}
 800fd30:	1c18      	adds	r0, r3, #0
 800fd32:	46bd      	mov	sp, r7
 800fd34:	b003      	add	sp, #12
 800fd36:	bd90      	pop	{r4, r7, pc}
 800fd38:	44fa0000 	.word	0x44fa0000
 800fd3c:	435c0000 	.word	0x435c0000

0800fd40 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
 800fd4c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2180      	movs	r1, #128	@ 0x80
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2184      	movs	r1, #132	@ 0x84
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2188      	movs	r1, #136	@ 0x88
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	505a      	str	r2, [r3, r1]
}
 800fd66:	46c0      	nop			@ (mov r8, r8)
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	b004      	add	sp, #16
 800fd6c:	bd80      	pop	{r7, pc}
	...

0800fd70 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800fd70:	b590      	push	{r4, r7, lr}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2280      	movs	r2, #128	@ 0x80
 800fd7e:	589c      	ldr	r4, [r3, r2]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2284      	movs	r2, #132	@ 0x84
 800fd84:	589b      	ldr	r3, [r3, r2]
 800fd86:	1c19      	adds	r1, r3, #0
 800fd88:	6838      	ldr	r0, [r7, #0]
 800fd8a:	f7f1 fab3 	bl	80012f4 <__aeabi_fsub>
 800fd8e:	1c03      	adds	r3, r0, #0
 800fd90:	1c19      	adds	r1, r3, #0
 800fd92:	1c20      	adds	r0, r4, #0
 800fd94:	f7f1 f954 	bl	8001040 <__aeabi_fmul>
 800fd98:	1c03      	adds	r3, r0, #0
 800fd9a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800fd9c:	4940      	ldr	r1, [pc, #256]	@ (800fea0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800fd9e:	68b8      	ldr	r0, [r7, #8]
 800fda0:	f7f0 fbc6 	bl	8000530 <__aeabi_fcmplt>
 800fda4:	1e03      	subs	r3, r0, #0
 800fda6:	d001      	beq.n	800fdac <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800fda8:	4b3e      	ldr	r3, [pc, #248]	@ (800fea4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fdaa:	e075      	b.n	800fe98 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800fdac:	493e      	ldr	r1, [pc, #248]	@ (800fea8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800fdae:	68b8      	ldr	r0, [r7, #8]
 800fdb0:	f7f0 fbd2 	bl	8000558 <__aeabi_fcmpgt>
 800fdb4:	1e03      	subs	r3, r0, #0
 800fdb6:	d001      	beq.n	800fdbc <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	e06d      	b.n	800fe98 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	6838      	ldr	r0, [r7, #0]
 800fdc0:	f7f0 fbd4 	bl	800056c <__aeabi_fcmpge>
 800fdc4:	1e03      	subs	r3, r0, #0
 800fdc6:	d047      	beq.n	800fe58 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2288      	movs	r2, #136	@ 0x88
 800fdcc:	589b      	ldr	r3, [r3, r2]
 800fdce:	21fe      	movs	r1, #254	@ 0xfe
 800fdd0:	0589      	lsls	r1, r1, #22
 800fdd2:	1c18      	adds	r0, r3, #0
 800fdd4:	f7f0 fba6 	bl	8000524 <__aeabi_fcmpeq>
 800fdd8:	1e03      	subs	r3, r0, #0
 800fdda:	d00e      	beq.n	800fdfa <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	1c19      	adds	r1, r3, #0
 800fde2:	20fe      	movs	r0, #254	@ 0xfe
 800fde4:	0580      	lsls	r0, r0, #22
 800fde6:	f7f1 fa85 	bl	80012f4 <__aeabi_fsub>
 800fdea:	1c03      	adds	r3, r0, #0
 800fdec:	492f      	ldr	r1, [pc, #188]	@ (800feac <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800fdee:	1c18      	adds	r0, r3, #0
 800fdf0:	f7f1 f926 	bl	8001040 <__aeabi_fmul>
 800fdf4:	1c03      	adds	r3, r0, #0
 800fdf6:	60fb      	str	r3, [r7, #12]
 800fdf8:	e012      	b.n	800fe20 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	689b      	ldr	r3, [r3, #8]
 800fdfe:	492c      	ldr	r1, [pc, #176]	@ (800feb0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800fe00:	1c18      	adds	r0, r3, #0
 800fe02:	f7f1 f91d 	bl	8001040 <__aeabi_fmul>
 800fe06:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800fe08:	1c19      	adds	r1, r3, #0
 800fe0a:	4826      	ldr	r0, [pc, #152]	@ (800fea4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fe0c:	f7f1 fa72 	bl	80012f4 <__aeabi_fsub>
 800fe10:	1c03      	adds	r3, r0, #0
 800fe12:	2181      	movs	r1, #129	@ 0x81
 800fe14:	05c9      	lsls	r1, r1, #23
 800fe16:	1c18      	adds	r0, r3, #0
 800fe18:	f7f0 ff44 	bl	8000ca4 <__aeabi_fdiv>
 800fe1c:	1c03      	adds	r3, r0, #0
 800fe1e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800fe20:	4920      	ldr	r1, [pc, #128]	@ (800fea4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	f7f0 fd4c 	bl	80008c0 <__aeabi_fadd>
 800fe28:	1c03      	adds	r3, r0, #0
 800fe2a:	1c1c      	adds	r4, r3, #0
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	1c18      	adds	r0, r3, #0
 800fe30:	f018 fdf0 	bl	8028a14 <expf>
 800fe34:	1c03      	adds	r3, r0, #0
 800fe36:	21fe      	movs	r1, #254	@ 0xfe
 800fe38:	0589      	lsls	r1, r1, #22
 800fe3a:	1c18      	adds	r0, r3, #0
 800fe3c:	f7f0 fd40 	bl	80008c0 <__aeabi_fadd>
 800fe40:	1c03      	adds	r3, r0, #0
 800fe42:	1c19      	adds	r1, r3, #0
 800fe44:	1c20      	adds	r0, r4, #0
 800fe46:	f7f0 ff2d 	bl	8000ca4 <__aeabi_fdiv>
 800fe4a:	1c03      	adds	r3, r0, #0
 800fe4c:	68f9      	ldr	r1, [r7, #12]
 800fe4e:	1c18      	adds	r0, r3, #0
 800fe50:	f7f1 fa50 	bl	80012f4 <__aeabi_fsub>
 800fe54:	1c03      	adds	r3, r0, #0
 800fe56:	e01f      	b.n	800fe98 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2188      	movs	r1, #136	@ 0x88
 800fe60:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800fe62:	1c19      	adds	r1, r3, #0
 800fe64:	1c10      	adds	r0, r2, #0
 800fe66:	f7f0 ff1d 	bl	8000ca4 <__aeabi_fdiv>
 800fe6a:	1c03      	adds	r3, r0, #0
 800fe6c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	1c18      	adds	r0, r3, #0
 800fe72:	f018 fdcf 	bl	8028a14 <expf>
 800fe76:	1c03      	adds	r3, r0, #0
 800fe78:	21fe      	movs	r1, #254	@ 0xfe
 800fe7a:	0589      	lsls	r1, r1, #22
 800fe7c:	1c18      	adds	r0, r3, #0
 800fe7e:	f7f0 fd1f 	bl	80008c0 <__aeabi_fadd>
 800fe82:	1c03      	adds	r3, r0, #0
 800fe84:	1c19      	adds	r1, r3, #0
 800fe86:	4807      	ldr	r0, [pc, #28]	@ (800fea4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fe88:	f7f0 ff0c 	bl	8000ca4 <__aeabi_fdiv>
 800fe8c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fe8e:	1c19      	adds	r1, r3, #0
 800fe90:	1c20      	adds	r0, r4, #0
 800fe92:	f7f1 f8d5 	bl	8001040 <__aeabi_fmul>
 800fe96:	1c03      	adds	r3, r0, #0
        }
    }
}
 800fe98:	1c18      	adds	r0, r3, #0
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	b005      	add	sp, #20
 800fe9e:	bd90      	pop	{r4, r7, pc}
 800fea0:	c2480000 	.word	0xc2480000
 800fea4:	43fa0000 	.word	0x43fa0000
 800fea8:	42480000 	.word	0x42480000
 800feac:	3f8041ab 	.word	0x3f8041ab
 800feb0:	40a00000 	.word	0x40a00000

0800feb4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800feb4:	b590      	push	{r4, r7, lr}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	4913      	ldr	r1, [pc, #76]	@ (800ff14 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800fec6:	1c18      	adds	r0, r3, #0
 800fec8:	f7f0 fcfa 	bl	80008c0 <__aeabi_fadd>
 800fecc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fece:	1c19      	adds	r1, r3, #0
 800fed0:	1c20      	adds	r0, r4, #0
 800fed2:	f7f0 fee7 	bl	8000ca4 <__aeabi_fdiv>
 800fed6:	1c03      	adds	r3, r0, #0
 800fed8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	228c      	movs	r2, #140	@ 0x8c
 800fede:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	490b      	ldr	r1, [pc, #44]	@ (800ff18 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800feea:	1c18      	adds	r0, r3, #0
 800feec:	f7f0 fce8 	bl	80008c0 <__aeabi_fadd>
 800fef0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fef2:	1c19      	adds	r1, r3, #0
 800fef4:	1c20      	adds	r0, r4, #0
 800fef6:	f7f0 fed5 	bl	8000ca4 <__aeabi_fdiv>
 800fefa:	1c03      	adds	r3, r0, #0
 800fefc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2290      	movs	r2, #144	@ 0x90
 800ff02:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2294      	movs	r2, #148	@ 0x94
 800ff08:	2100      	movs	r1, #0
 800ff0a:	5499      	strb	r1, [r3, r2]
}
 800ff0c:	46c0      	nop			@ (mov r8, r8)
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	b003      	add	sp, #12
 800ff12:	bd90      	pop	{r4, r7, pc}
 800ff14:	41a00000 	.word	0x41a00000
 800ff18:	43fa0000 	.word	0x43fa0000

0800ff1c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800ff1c:	b590      	push	{r4, r7, lr}
 800ff1e:	b087      	sub	sp, #28
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2294      	movs	r2, #148	@ 0x94
 800ff2a:	5c9b      	ldrb	r3, [r3, r2]
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	4053      	eors	r3, r2
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00f      	beq.n	800ff56 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2198      	movs	r1, #152	@ 0x98
 800ff3a:	683a      	ldr	r2, [r7, #0]
 800ff3c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	219c      	movs	r1, #156	@ 0x9c
 800ff42:	683a      	ldr	r2, [r7, #0]
 800ff44:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	21a0      	movs	r1, #160	@ 0xa0
 800ff4a:	683a      	ldr	r2, [r7, #0]
 800ff4c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2294      	movs	r2, #148	@ 0x94
 800ff52:	2101      	movs	r1, #1
 800ff54:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	228c      	movs	r2, #140	@ 0x8c
 800ff5a:	589b      	ldr	r3, [r3, r2]
 800ff5c:	1c19      	adds	r1, r3, #0
 800ff5e:	20fe      	movs	r0, #254	@ 0xfe
 800ff60:	0580      	lsls	r0, r0, #22
 800ff62:	f7f1 f9c7 	bl	80012f4 <__aeabi_fsub>
 800ff66:	1c03      	adds	r3, r0, #0
 800ff68:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2298      	movs	r2, #152	@ 0x98
 800ff6e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ff70:	1c19      	adds	r1, r3, #0
 800ff72:	f7f1 f865 	bl	8001040 <__aeabi_fmul>
 800ff76:	1c03      	adds	r3, r0, #0
 800ff78:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	228c      	movs	r2, #140	@ 0x8c
 800ff7e:	589b      	ldr	r3, [r3, r2]
 800ff80:	6839      	ldr	r1, [r7, #0]
 800ff82:	1c18      	adds	r0, r3, #0
 800ff84:	f7f1 f85c 	bl	8001040 <__aeabi_fmul>
 800ff88:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800ff8a:	1c19      	adds	r1, r3, #0
 800ff8c:	1c20      	adds	r0, r4, #0
 800ff8e:	f7f0 fc97 	bl	80008c0 <__aeabi_fadd>
 800ff92:	1c03      	adds	r3, r0, #0
 800ff94:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2298      	movs	r2, #152	@ 0x98
 800ff9a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2290      	movs	r2, #144	@ 0x90
 800ffa0:	589b      	ldr	r3, [r3, r2]
 800ffa2:	1c19      	adds	r1, r3, #0
 800ffa4:	20fe      	movs	r0, #254	@ 0xfe
 800ffa6:	0580      	lsls	r0, r0, #22
 800ffa8:	f7f1 f9a4 	bl	80012f4 <__aeabi_fsub>
 800ffac:	1c03      	adds	r3, r0, #0
 800ffae:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	229c      	movs	r2, #156	@ 0x9c
 800ffb4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ffb6:	1c19      	adds	r1, r3, #0
 800ffb8:	f7f1 f842 	bl	8001040 <__aeabi_fmul>
 800ffbc:	1c03      	adds	r3, r0, #0
 800ffbe:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2290      	movs	r2, #144	@ 0x90
 800ffc4:	589b      	ldr	r3, [r3, r2]
 800ffc6:	6839      	ldr	r1, [r7, #0]
 800ffc8:	1c18      	adds	r0, r3, #0
 800ffca:	f7f1 f839 	bl	8001040 <__aeabi_fmul>
 800ffce:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800ffd0:	1c19      	adds	r1, r3, #0
 800ffd2:	1c20      	adds	r0, r4, #0
 800ffd4:	f7f0 fc74 	bl	80008c0 <__aeabi_fadd>
 800ffd8:	1c03      	adds	r3, r0, #0
 800ffda:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	229c      	movs	r2, #156	@ 0x9c
 800ffe0:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2298      	movs	r2, #152	@ 0x98
 800ffe6:	589a      	ldr	r2, [r3, r2]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	219c      	movs	r1, #156	@ 0x9c
 800ffec:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800ffee:	1c19      	adds	r1, r3, #0
 800fff0:	1c10      	adds	r0, r2, #0
 800fff2:	f7f1 f97f 	bl	80012f4 <__aeabi_fsub>
 800fff6:	1c03      	adds	r3, r0, #0
 800fff8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800fffa:	2100      	movs	r1, #0
 800fffc:	6978      	ldr	r0, [r7, #20]
 800fffe:	f7f0 fa97 	bl	8000530 <__aeabi_fcmplt>
 8010002:	1e03      	subs	r3, r0, #0
 8010004:	d004      	beq.n	8010010 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	2280      	movs	r2, #128	@ 0x80
 801000a:	0612      	lsls	r2, r2, #24
 801000c:	4053      	eors	r3, r2
 801000e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8010010:	4923      	ldr	r1, [pc, #140]	@ (80100a0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8010012:	6978      	ldr	r0, [r7, #20]
 8010014:	f7f1 f814 	bl	8001040 <__aeabi_fmul>
 8010018:	1c03      	adds	r3, r0, #0
 801001a:	1c18      	adds	r0, r3, #0
 801001c:	f018 fcfa 	bl	8028a14 <expf>
 8010020:	1c03      	adds	r3, r0, #0
 8010022:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8010024:	491f      	ldr	r1, [pc, #124]	@ (80100a4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8010026:	6938      	ldr	r0, [r7, #16]
 8010028:	f7f1 f80a 	bl	8001040 <__aeabi_fmul>
 801002c:	1c03      	adds	r3, r0, #0
 801002e:	491e      	ldr	r1, [pc, #120]	@ (80100a8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8010030:	1c18      	adds	r0, r3, #0
 8010032:	f7f0 fc45 	bl	80008c0 <__aeabi_fadd>
 8010036:	1c03      	adds	r3, r0, #0
 8010038:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	685c      	ldr	r4, [r3, #4]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	68f9      	ldr	r1, [r7, #12]
 8010044:	1c18      	adds	r0, r3, #0
 8010046:	f7f0 fc3b 	bl	80008c0 <__aeabi_fadd>
 801004a:	1c03      	adds	r3, r0, #0
 801004c:	1c19      	adds	r1, r3, #0
 801004e:	1c20      	adds	r0, r4, #0
 8010050:	f7f0 fe28 	bl	8000ca4 <__aeabi_fdiv>
 8010054:	1c03      	adds	r3, r0, #0
 8010056:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010058:	68b9      	ldr	r1, [r7, #8]
 801005a:	20fe      	movs	r0, #254	@ 0xfe
 801005c:	0580      	lsls	r0, r0, #22
 801005e:	f7f1 f949 	bl	80012f4 <__aeabi_fsub>
 8010062:	1c03      	adds	r3, r0, #0
 8010064:	1c18      	adds	r0, r3, #0
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	22a0      	movs	r2, #160	@ 0xa0
 801006a:	589b      	ldr	r3, [r3, r2]
 801006c:	1c19      	adds	r1, r3, #0
 801006e:	f7f0 ffe7 	bl	8001040 <__aeabi_fmul>
 8010072:	1c03      	adds	r3, r0, #0
 8010074:	1c1c      	adds	r4, r3, #0
 8010076:	6839      	ldr	r1, [r7, #0]
 8010078:	68b8      	ldr	r0, [r7, #8]
 801007a:	f7f0 ffe1 	bl	8001040 <__aeabi_fmul>
 801007e:	1c03      	adds	r3, r0, #0
 8010080:	1c19      	adds	r1, r3, #0
 8010082:	1c20      	adds	r0, r4, #0
 8010084:	f7f0 fc1c 	bl	80008c0 <__aeabi_fadd>
 8010088:	1c03      	adds	r3, r0, #0
 801008a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	22a0      	movs	r2, #160	@ 0xa0
 8010090:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	22a0      	movs	r2, #160	@ 0xa0
 8010096:	589b      	ldr	r3, [r3, r2]
}
 8010098:	1c18      	adds	r0, r3, #0
 801009a:	46bd      	mov	sp, r7
 801009c:	b007      	add	sp, #28
 801009e:	bd90      	pop	{r4, r7, pc}
 80100a0:	be4ccccd 	.word	0xbe4ccccd
 80100a4:	43f00000 	.word	0x43f00000
 80100a8:	41a00000 	.word	0x41a00000

080100ac <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	000a      	movs	r2, r1
 80100b6:	1cbb      	adds	r3, r7, #2
 80100b8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80100ba:	230d      	movs	r3, #13
 80100bc:	18fb      	adds	r3, r7, r3
 80100be:	22ff      	movs	r2, #255	@ 0xff
 80100c0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80100c2:	230e      	movs	r3, #14
 80100c4:	18fb      	adds	r3, r7, r3
 80100c6:	2200      	movs	r2, #0
 80100c8:	801a      	strh	r2, [r3, #0]
 80100ca:	e038      	b.n	801013e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80100cc:	230e      	movs	r3, #14
 80100ce:	18fb      	adds	r3, r7, r3
 80100d0:	881b      	ldrh	r3, [r3, #0]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	18d3      	adds	r3, r2, r3
 80100d6:	7819      	ldrb	r1, [r3, #0]
 80100d8:	220d      	movs	r2, #13
 80100da:	18bb      	adds	r3, r7, r2
 80100dc:	18ba      	adds	r2, r7, r2
 80100de:	7812      	ldrb	r2, [r2, #0]
 80100e0:	404a      	eors	r2, r1
 80100e2:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80100e4:	230c      	movs	r3, #12
 80100e6:	18fb      	adds	r3, r7, r3
 80100e8:	2208      	movs	r2, #8
 80100ea:	701a      	strb	r2, [r3, #0]
 80100ec:	e01c      	b.n	8010128 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80100ee:	210d      	movs	r1, #13
 80100f0:	187b      	adds	r3, r7, r1
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	b25b      	sxtb	r3, r3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	da0a      	bge.n	8010110 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80100fa:	187b      	adds	r3, r7, r1
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	b25b      	sxtb	r3, r3
 8010100:	18db      	adds	r3, r3, r3
 8010102:	b25b      	sxtb	r3, r3
 8010104:	2231      	movs	r2, #49	@ 0x31
 8010106:	4053      	eors	r3, r2
 8010108:	b25a      	sxtb	r2, r3
 801010a:	187b      	adds	r3, r7, r1
 801010c:	701a      	strb	r2, [r3, #0]
 801010e:	e005      	b.n	801011c <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8010110:	230d      	movs	r3, #13
 8010112:	18fa      	adds	r2, r7, r3
 8010114:	18fb      	adds	r3, r7, r3
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	18db      	adds	r3, r3, r3
 801011a:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 801011c:	220c      	movs	r2, #12
 801011e:	18bb      	adds	r3, r7, r2
 8010120:	18ba      	adds	r2, r7, r2
 8010122:	7812      	ldrb	r2, [r2, #0]
 8010124:	3a01      	subs	r2, #1
 8010126:	701a      	strb	r2, [r3, #0]
 8010128:	230c      	movs	r3, #12
 801012a:	18fb      	adds	r3, r7, r3
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d1dd      	bne.n	80100ee <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010132:	220e      	movs	r2, #14
 8010134:	18bb      	adds	r3, r7, r2
 8010136:	18ba      	adds	r2, r7, r2
 8010138:	8812      	ldrh	r2, [r2, #0]
 801013a:	3201      	adds	r2, #1
 801013c:	801a      	strh	r2, [r3, #0]
 801013e:	230e      	movs	r3, #14
 8010140:	18fa      	adds	r2, r7, r3
 8010142:	1cbb      	adds	r3, r7, #2
 8010144:	8812      	ldrh	r2, [r2, #0]
 8010146:	881b      	ldrh	r3, [r3, #0]
 8010148:	429a      	cmp	r2, r3
 801014a:	d3bf      	bcc.n	80100cc <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 801014c:	230d      	movs	r3, #13
 801014e:	18fb      	adds	r3, r7, r3
 8010150:	781b      	ldrb	r3, [r3, #0]
}
 8010152:	0018      	movs	r0, r3
 8010154:	46bd      	mov	sp, r7
 8010156:	b004      	add	sp, #16
 8010158:	bd80      	pop	{r7, pc}

0801015a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 801015a:	b580      	push	{r7, lr}
 801015c:	b082      	sub	sp, #8
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
 8010162:	0008      	movs	r0, r1
 8010164:	0011      	movs	r1, r2
 8010166:	1cbb      	adds	r3, r7, #2
 8010168:	1c02      	adds	r2, r0, #0
 801016a:	801a      	strh	r2, [r3, #0]
 801016c:	1c7b      	adds	r3, r7, #1
 801016e:	1c0a      	adds	r2, r1, #0
 8010170:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010172:	1cbb      	adds	r3, r7, #2
 8010174:	881a      	ldrh	r2, [r3, #0]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	0011      	movs	r1, r2
 801017a:	0018      	movs	r0, r3
 801017c:	f7ff ff96 	bl	80100ac <sensirion_i2c_generate_crc>
 8010180:	0003      	movs	r3, r0
 8010182:	001a      	movs	r2, r3
 8010184:	1c7b      	adds	r3, r7, #1
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	4293      	cmp	r3, r2
 801018a:	d001      	beq.n	8010190 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 801018c:	2301      	movs	r3, #1
 801018e:	e000      	b.n	8010192 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010190:	2300      	movs	r3, #0
}
 8010192:	0018      	movs	r0, r3
 8010194:	46bd      	mov	sp, r7
 8010196:	b002      	add	sp, #8
 8010198:	bd80      	pop	{r7, pc}

0801019a <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 801019a:	b580      	push	{r7, lr}
 801019c:	b082      	sub	sp, #8
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	0008      	movs	r0, r1
 80101a4:	0011      	movs	r1, r2
 80101a6:	1cbb      	adds	r3, r7, #2
 80101a8:	1c02      	adds	r2, r0, #0
 80101aa:	801a      	strh	r2, [r3, #0]
 80101ac:	003b      	movs	r3, r7
 80101ae:	1c0a      	adds	r2, r1, #0
 80101b0:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 80101b2:	003b      	movs	r3, r7
 80101b4:	881b      	ldrh	r3, [r3, #0]
 80101b6:	0a1b      	lsrs	r3, r3, #8
 80101b8:	b299      	uxth	r1, r3
 80101ba:	1cbb      	adds	r3, r7, #2
 80101bc:	881b      	ldrh	r3, [r3, #0]
 80101be:	1cba      	adds	r2, r7, #2
 80101c0:	1c58      	adds	r0, r3, #1
 80101c2:	8010      	strh	r0, [r2, #0]
 80101c4:	001a      	movs	r2, r3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	189b      	adds	r3, r3, r2
 80101ca:	b2ca      	uxtb	r2, r1
 80101cc:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 80101ce:	1cbb      	adds	r3, r7, #2
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	1cba      	adds	r2, r7, #2
 80101d4:	1c59      	adds	r1, r3, #1
 80101d6:	8011      	strh	r1, [r2, #0]
 80101d8:	001a      	movs	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	189b      	adds	r3, r3, r2
 80101de:	003a      	movs	r2, r7
 80101e0:	8812      	ldrh	r2, [r2, #0]
 80101e2:	b2d2      	uxtb	r2, r2
 80101e4:	701a      	strb	r2, [r3, #0]
    return offset;
 80101e6:	1cbb      	adds	r3, r7, #2
 80101e8:	881b      	ldrh	r3, [r3, #0]
}
 80101ea:	0018      	movs	r0, r3
 80101ec:	46bd      	mov	sp, r7
 80101ee:	b002      	add	sp, #8
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 80101f2:	b590      	push	{r4, r7, lr}
 80101f4:	b083      	sub	sp, #12
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
 80101fa:	0008      	movs	r0, r1
 80101fc:	0011      	movs	r1, r2
 80101fe:	1cbb      	adds	r3, r7, #2
 8010200:	1c02      	adds	r2, r0, #0
 8010202:	801a      	strh	r2, [r3, #0]
 8010204:	003b      	movs	r3, r7
 8010206:	1c0a      	adds	r2, r1, #0
 8010208:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 801020a:	003b      	movs	r3, r7
 801020c:	881b      	ldrh	r3, [r3, #0]
 801020e:	0a1b      	lsrs	r3, r3, #8
 8010210:	b299      	uxth	r1, r3
 8010212:	1cbb      	adds	r3, r7, #2
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	1cba      	adds	r2, r7, #2
 8010218:	1c58      	adds	r0, r3, #1
 801021a:	8010      	strh	r0, [r2, #0]
 801021c:	001a      	movs	r2, r3
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	189b      	adds	r3, r3, r2
 8010222:	b2ca      	uxtb	r2, r1
 8010224:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010226:	1cbb      	adds	r3, r7, #2
 8010228:	881b      	ldrh	r3, [r3, #0]
 801022a:	1cba      	adds	r2, r7, #2
 801022c:	1c59      	adds	r1, r3, #1
 801022e:	8011      	strh	r1, [r2, #0]
 8010230:	001a      	movs	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	189b      	adds	r3, r3, r2
 8010236:	003a      	movs	r2, r7
 8010238:	8812      	ldrh	r2, [r2, #0]
 801023a:	b2d2      	uxtb	r2, r2
 801023c:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 801023e:	1cbb      	adds	r3, r7, #2
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	3b02      	subs	r3, #2
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010248:	1cbb      	adds	r3, r7, #2
 801024a:	881b      	ldrh	r3, [r3, #0]
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	18d4      	adds	r4, r2, r3
 8010250:	2102      	movs	r1, #2
 8010252:	f7ff ff2b 	bl	80100ac <sensirion_i2c_generate_crc>
 8010256:	0003      	movs	r3, r0
 8010258:	7023      	strb	r3, [r4, #0]
    offset++;
 801025a:	1cbb      	adds	r3, r7, #2
 801025c:	881a      	ldrh	r2, [r3, #0]
 801025e:	1cbb      	adds	r3, r7, #2
 8010260:	3201      	adds	r2, #1
 8010262:	801a      	strh	r2, [r3, #0]

    return offset;
 8010264:	1cbb      	adds	r3, r7, #2
 8010266:	881b      	ldrh	r3, [r3, #0]
}
 8010268:	0018      	movs	r0, r3
 801026a:	46bd      	mov	sp, r7
 801026c:	b003      	add	sp, #12
 801026e:	bd90      	pop	{r4, r7, pc}

08010270 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	0008      	movs	r0, r1
 801027a:	0011      	movs	r1, r2
 801027c:	1cbb      	adds	r3, r7, #2
 801027e:	1c02      	adds	r2, r0, #0
 8010280:	801a      	strh	r2, [r3, #0]
 8010282:	003b      	movs	r3, r7
 8010284:	1c0a      	adds	r2, r1, #0
 8010286:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010288:	003b      	movs	r3, r7
 801028a:	881a      	ldrh	r2, [r3, #0]
 801028c:	1cbb      	adds	r3, r7, #2
 801028e:	8819      	ldrh	r1, [r3, #0]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	0018      	movs	r0, r3
 8010294:	f7ff ffad 	bl	80101f2 <sensirion_i2c_add_uint16_t_to_buffer>
 8010298:	0003      	movs	r3, r0
}
 801029a:	0018      	movs	r0, r3
 801029c:	46bd      	mov	sp, r7
 801029e:	b002      	add	sp, #8
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b082      	sub	sp, #8
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6039      	str	r1, [r7, #0]
 80102aa:	0011      	movs	r1, r2
 80102ac:	1dfb      	adds	r3, r7, #7
 80102ae:	1c02      	adds	r2, r0, #0
 80102b0:	701a      	strb	r2, [r3, #0]
 80102b2:	1d3b      	adds	r3, r7, #4
 80102b4:	1c0a      	adds	r2, r1, #0
 80102b6:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 80102b8:	1d3b      	adds	r3, r7, #4
 80102ba:	881a      	ldrh	r2, [r3, #0]
 80102bc:	6839      	ldr	r1, [r7, #0]
 80102be:	1dfb      	adds	r3, r7, #7
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	0018      	movs	r0, r3
 80102c4:	f7fe f9b0 	bl	800e628 <sensirion_i2c_hal_write>
 80102c8:	0003      	movs	r3, r0
}
 80102ca:	0018      	movs	r0, r3
 80102cc:	46bd      	mov	sp, r7
 80102ce:	b002      	add	sp, #8
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 80102d2:	b5b0      	push	{r4, r5, r7, lr}
 80102d4:	b084      	sub	sp, #16
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6039      	str	r1, [r7, #0]
 80102da:	0011      	movs	r1, r2
 80102dc:	1dfb      	adds	r3, r7, #7
 80102de:	1c02      	adds	r2, r0, #0
 80102e0:	701a      	strb	r2, [r3, #0]
 80102e2:	1d3b      	adds	r3, r7, #4
 80102e4:	1c0a      	adds	r2, r1, #0
 80102e6:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 80102e8:	1d3b      	adds	r3, r7, #4
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	085b      	lsrs	r3, r3, #1
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	220a      	movs	r2, #10
 80102f2:	18ba      	adds	r2, r7, r2
 80102f4:	1c19      	adds	r1, r3, #0
 80102f6:	1c0b      	adds	r3, r1, #0
 80102f8:	18db      	adds	r3, r3, r3
 80102fa:	185b      	adds	r3, r3, r1
 80102fc:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80102fe:	1d3b      	adds	r3, r7, #4
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	2201      	movs	r2, #1
 8010304:	4013      	ands	r3, r2
 8010306:	b29b      	uxth	r3, r3
 8010308:	2b00      	cmp	r3, #0
 801030a:	d001      	beq.n	8010310 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 801030c:	2304      	movs	r3, #4
 801030e:	e06b      	b.n	80103e8 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010310:	230a      	movs	r3, #10
 8010312:	18fb      	adds	r3, r7, r3
 8010314:	881a      	ldrh	r2, [r3, #0]
 8010316:	6839      	ldr	r1, [r7, #0]
 8010318:	1dfb      	adds	r3, r7, #7
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	0018      	movs	r0, r3
 801031e:	f7fe f963 	bl	800e5e8 <sensirion_i2c_hal_read>
 8010322:	0003      	movs	r3, r0
 8010324:	001a      	movs	r2, r3
 8010326:	2108      	movs	r1, #8
 8010328:	187b      	adds	r3, r7, r1
 801032a:	801a      	strh	r2, [r3, #0]
    if (error) {
 801032c:	000a      	movs	r2, r1
 801032e:	18bb      	adds	r3, r7, r2
 8010330:	2100      	movs	r1, #0
 8010332:	5e5b      	ldrsh	r3, [r3, r1]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d003      	beq.n	8010340 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010338:	18bb      	adds	r3, r7, r2
 801033a:	2200      	movs	r2, #0
 801033c:	5e9b      	ldrsh	r3, [r3, r2]
 801033e:	e053      	b.n	80103e8 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010340:	230e      	movs	r3, #14
 8010342:	18fb      	adds	r3, r7, r3
 8010344:	2200      	movs	r2, #0
 8010346:	801a      	strh	r2, [r3, #0]
 8010348:	230c      	movs	r3, #12
 801034a:	18fb      	adds	r3, r7, r3
 801034c:	2200      	movs	r2, #0
 801034e:	801a      	strh	r2, [r3, #0]
 8010350:	e041      	b.n	80103d6 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010352:	210e      	movs	r1, #14
 8010354:	187b      	adds	r3, r7, r1
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	683a      	ldr	r2, [r7, #0]
 801035a:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 801035c:	187b      	adds	r3, r7, r1
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	3302      	adds	r3, #2
 8010362:	683a      	ldr	r2, [r7, #0]
 8010364:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	001a      	movs	r2, r3
 801036a:	2102      	movs	r1, #2
 801036c:	f7ff fef5 	bl	801015a <sensirion_i2c_check_crc>
 8010370:	0003      	movs	r3, r0
 8010372:	001a      	movs	r2, r3
 8010374:	2108      	movs	r1, #8
 8010376:	187b      	adds	r3, r7, r1
 8010378:	801a      	strh	r2, [r3, #0]
        if (error) {
 801037a:	000a      	movs	r2, r1
 801037c:	18bb      	adds	r3, r7, r2
 801037e:	2100      	movs	r1, #0
 8010380:	5e5b      	ldrsh	r3, [r3, r1]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d003      	beq.n	801038e <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010386:	18bb      	adds	r3, r7, r2
 8010388:	2200      	movs	r2, #0
 801038a:	5e9b      	ldrsh	r3, [r3, r2]
 801038c:	e02c      	b.n	80103e8 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 801038e:	240e      	movs	r4, #14
 8010390:	193b      	adds	r3, r7, r4
 8010392:	881b      	ldrh	r3, [r3, #0]
 8010394:	683a      	ldr	r2, [r7, #0]
 8010396:	18d2      	adds	r2, r2, r3
 8010398:	250c      	movs	r5, #12
 801039a:	197b      	adds	r3, r7, r5
 801039c:	881b      	ldrh	r3, [r3, #0]
 801039e:	1979      	adds	r1, r7, r5
 80103a0:	1c58      	adds	r0, r3, #1
 80103a2:	8008      	strh	r0, [r1, #0]
 80103a4:	0019      	movs	r1, r3
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	185b      	adds	r3, r3, r1
 80103aa:	7812      	ldrb	r2, [r2, #0]
 80103ac:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80103ae:	193b      	adds	r3, r7, r4
 80103b0:	881b      	ldrh	r3, [r3, #0]
 80103b2:	3301      	adds	r3, #1
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	18d2      	adds	r2, r2, r3
 80103b8:	197b      	adds	r3, r7, r5
 80103ba:	881b      	ldrh	r3, [r3, #0]
 80103bc:	1979      	adds	r1, r7, r5
 80103be:	1c58      	adds	r0, r3, #1
 80103c0:	8008      	strh	r0, [r1, #0]
 80103c2:	0019      	movs	r1, r3
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	185b      	adds	r3, r3, r1
 80103c8:	7812      	ldrb	r2, [r2, #0]
 80103ca:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80103cc:	193b      	adds	r3, r7, r4
 80103ce:	193a      	adds	r2, r7, r4
 80103d0:	8812      	ldrh	r2, [r2, #0]
 80103d2:	3203      	adds	r2, #3
 80103d4:	801a      	strh	r2, [r3, #0]
 80103d6:	230e      	movs	r3, #14
 80103d8:	18fa      	adds	r2, r7, r3
 80103da:	230a      	movs	r3, #10
 80103dc:	18fb      	adds	r3, r7, r3
 80103de:	8812      	ldrh	r2, [r2, #0]
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d3b5      	bcc.n	8010352 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	0018      	movs	r0, r3
 80103ea:	46bd      	mov	sp, r7
 80103ec:	b004      	add	sp, #16
 80103ee:	bdb0      	pop	{r4, r5, r7, pc}

080103f0 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80103f0:	b590      	push	{r4, r7, lr}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6039      	str	r1, [r7, #0]
 80103f8:	0011      	movs	r1, r2
 80103fa:	1dfb      	adds	r3, r7, #7
 80103fc:	1c02      	adds	r2, r0, #0
 80103fe:	701a      	strb	r2, [r3, #0]
 8010400:	1dbb      	adds	r3, r7, #6
 8010402:	1c0a      	adds	r2, r1, #0
 8010404:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010406:	4b08      	ldr	r3, [pc, #32]	@ (8010428 <ReadRegister+0x38>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d008      	beq.n	8010420 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 801040e:	4b06      	ldr	r3, [pc, #24]	@ (8010428 <ReadRegister+0x38>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	1dba      	adds	r2, r7, #6
 8010414:	7814      	ldrb	r4, [r2, #0]
 8010416:	6839      	ldr	r1, [r7, #0]
 8010418:	1dfa      	adds	r2, r7, #7
 801041a:	7810      	ldrb	r0, [r2, #0]
 801041c:	0022      	movs	r2, r4
 801041e:	4798      	blx	r3
  }
}
 8010420:	46c0      	nop			@ (mov r8, r8)
 8010422:	46bd      	mov	sp, r7
 8010424:	b003      	add	sp, #12
 8010426:	bd90      	pop	{r4, r7, pc}
 8010428:	20000f08 	.word	0x20000f08

0801042c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 801042c:	b590      	push	{r4, r7, lr}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6039      	str	r1, [r7, #0]
 8010434:	0011      	movs	r1, r2
 8010436:	1dfb      	adds	r3, r7, #7
 8010438:	1c02      	adds	r2, r0, #0
 801043a:	701a      	strb	r2, [r3, #0]
 801043c:	1dbb      	adds	r3, r7, #6
 801043e:	1c0a      	adds	r2, r1, #0
 8010440:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010442:	4b08      	ldr	r3, [pc, #32]	@ (8010464 <WriteRegister+0x38>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d008      	beq.n	801045c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 801044a:	4b06      	ldr	r3, [pc, #24]	@ (8010464 <WriteRegister+0x38>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	1dba      	adds	r2, r7, #6
 8010450:	7814      	ldrb	r4, [r2, #0]
 8010452:	6839      	ldr	r1, [r7, #0]
 8010454:	1dfa      	adds	r2, r7, #7
 8010456:	7810      	ldrb	r0, [r2, #0]
 8010458:	0022      	movs	r2, r4
 801045a:	4798      	blx	r3
  }
}
 801045c:	46c0      	nop			@ (mov r8, r8)
 801045e:	46bd      	mov	sp, r7
 8010460:	b003      	add	sp, #12
 8010462:	bd90      	pop	{r4, r7, pc}
 8010464:	20000f0c 	.word	0x20000f0c

08010468 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010470:	f003 fd80 	bl	8013f74 <HAL_GetTick>
 8010474:	0002      	movs	r2, r0
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	18d2      	adds	r2, r2, r3
 801047a:	4b03      	ldr	r3, [pc, #12]	@ (8010488 <setSGP40TimeStamp+0x20>)
 801047c:	601a      	str	r2, [r3, #0]
}
 801047e:	46c0      	nop			@ (mov r8, r8)
 8010480:	46bd      	mov	sp, r7
 8010482:	b002      	add	sp, #8
 8010484:	bd80      	pop	{r7, pc}
 8010486:	46c0      	nop			@ (mov r8, r8)
 8010488:	20000f1c 	.word	0x20000f1c

0801048c <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 801048c:	b580      	push	{r7, lr}
 801048e:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010490:	4b02      	ldr	r3, [pc, #8]	@ (801049c <ResetSGP40samplecounter+0x10>)
 8010492:	2200      	movs	r2, #0
 8010494:	701a      	strb	r2, [r3, #0]
}
 8010496:	46c0      	nop			@ (mov r8, r8)
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	20000f1a 	.word	0x20000f1a

080104a0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80104aa:	4b07      	ldr	r3, [pc, #28]	@ (80104c8 <SGP_Init+0x28>)
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80104b0:	4b06      	ldr	r3, [pc, #24]	@ (80104cc <SGP_Init+0x2c>)
 80104b2:	683a      	ldr	r2, [r7, #0]
 80104b4:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80104b6:	4b06      	ldr	r3, [pc, #24]	@ (80104d0 <SGP_Init+0x30>)
 80104b8:	2100      	movs	r1, #0
 80104ba:	0018      	movs	r0, r3
 80104bc:	f7fe ff72 	bl	800f3a4 <GasIndexAlgorithm_init>
}
 80104c0:	46c0      	nop			@ (mov r8, r8)
 80104c2:	46bd      	mov	sp, r7
 80104c4:	b002      	add	sp, #8
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	20000f08 	.word	0x20000f08
 80104cc:	20000f0c 	.word	0x20000f0c
 80104d0:	20000f24 	.word	0x20000f24

080104d4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 80104d4:	b580      	push	{r7, lr}
 80104d6:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 80104d8:	4b07      	ldr	r3, [pc, #28]	@ (80104f8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d004      	beq.n	80104ea <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 80104e0:	4b06      	ldr	r3, [pc, #24]	@ (80104fc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 80104e2:	22fe      	movs	r2, #254	@ 0xfe
 80104e4:	0592      	lsls	r2, r2, #22
 80104e6:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 80104e8:	e002      	b.n	80104f0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 80104ea:	4b04      	ldr	r3, [pc, #16]	@ (80104fc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 80104ec:	4a04      	ldr	r2, [pc, #16]	@ (8010500 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 80104ee:	605a      	str	r2, [r3, #4]
}
 80104f0:	46c0      	nop			@ (mov r8, r8)
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	46c0      	nop			@ (mov r8, r8)
 80104f8:	20001e71 	.word	0x20001e71
 80104fc:	20000f24 	.word	0x20000f24
 8010500:	44610000 	.word	0x44610000

08010504 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010504:	b580      	push	{r7, lr}
 8010506:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010508:	4b13      	ldr	r3, [pc, #76]	@ (8010558 <SGP_StartMeasurement+0x54>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d00d      	beq.n	801052c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010510:	4b12      	ldr	r3, [pc, #72]	@ (801055c <SGP_StartMeasurement+0x58>)
 8010512:	2208      	movs	r2, #8
 8010514:	0019      	movs	r1, r3
 8010516:	2059      	movs	r0, #89	@ 0x59
 8010518:	f7ff ff88 	bl	801042c <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 801051c:	f003 fd2a 	bl	8013f74 <HAL_GetTick>
 8010520:	0003      	movs	r3, r0
 8010522:	331e      	adds	r3, #30
 8010524:	001a      	movs	r2, r3
 8010526:	4b0e      	ldr	r3, [pc, #56]	@ (8010560 <SGP_StartMeasurement+0x5c>)
 8010528:	601a      	str	r2, [r3, #0]
 801052a:	e00c      	b.n	8010546 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801052c:	4b0d      	ldr	r3, [pc, #52]	@ (8010564 <SGP_StartMeasurement+0x60>)
 801052e:	2208      	movs	r2, #8
 8010530:	0019      	movs	r1, r3
 8010532:	2059      	movs	r0, #89	@ 0x59
 8010534:	f7ff ff7a 	bl	801042c <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010538:	f003 fd1c 	bl	8013f74 <HAL_GetTick>
 801053c:	0003      	movs	r3, r0
 801053e:	33aa      	adds	r3, #170	@ 0xaa
 8010540:	001a      	movs	r2, r3
 8010542:	4b09      	ldr	r3, [pc, #36]	@ (8010568 <SGP_StartMeasurement+0x64>)
 8010544:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8010546:	4b09      	ldr	r3, [pc, #36]	@ (801056c <SGP_StartMeasurement+0x68>)
 8010548:	2200      	movs	r2, #0
 801054a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 801054c:	4b08      	ldr	r3, [pc, #32]	@ (8010570 <SGP_StartMeasurement+0x6c>)
 801054e:	2200      	movs	r2, #0
 8010550:	701a      	strb	r2, [r3, #0]
}
 8010552:	46c0      	nop			@ (mov r8, r8)
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	20000fcc 	.word	0x20000fcc
 801055c:	200000b4 	.word	0x200000b4
 8010560:	200000c8 	.word	0x200000c8
 8010564:	200000ac 	.word	0x200000ac
 8010568:	200000c0 	.word	0x200000c0
 801056c:	20000f20 	.word	0x20000f20
 8010570:	20000f21 	.word	0x20000f21

08010574 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010574:	b580      	push	{r7, lr}
 8010576:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010578:	4b04      	ldr	r3, [pc, #16]	@ (801058c <SGP_HeatedUp+0x18>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	0018      	movs	r0, r3
 801057e:	f002 ff21 	bl	80133c4 <TimestampIsReached>
 8010582:	0003      	movs	r3, r0
}
 8010584:	0018      	movs	r0, r3
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	46c0      	nop			@ (mov r8, r8)
 801058c:	200000c0 	.word	0x200000c0

08010590 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010590:	b580      	push	{r7, lr}
 8010592:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010594:	4b04      	ldr	r3, [pc, #16]	@ (80105a8 <SGP_MeasurementReady+0x18>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	0018      	movs	r0, r3
 801059a:	f002 ff13 	bl	80133c4 <TimestampIsReached>
 801059e:	0003      	movs	r3, r0
}
 80105a0:	0018      	movs	r0, r3
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	46c0      	nop			@ (mov r8, r8)
 80105a8:	200000c8 	.word	0x200000c8

080105ac <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80105ac:	b580      	push	{r7, lr}
 80105ae:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80105b0:	4b04      	ldr	r3, [pc, #16]	@ (80105c4 <SGP_MeasurementDone+0x18>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	0018      	movs	r0, r3
 80105b6:	f002 ff05 	bl	80133c4 <TimestampIsReached>
 80105ba:	0003      	movs	r3, r0
}
 80105bc:	0018      	movs	r0, r3
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	46c0      	nop			@ (mov r8, r8)
 80105c4:	200000c4 	.word	0x200000c4

080105c8 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80105c8:	b580      	push	{r7, lr}
 80105ca:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80105cc:	4b04      	ldr	r3, [pc, #16]	@ (80105e0 <SGP_TurnHeaterOff+0x18>)
 80105ce:	2202      	movs	r2, #2
 80105d0:	0019      	movs	r1, r3
 80105d2:	2059      	movs	r0, #89	@ 0x59
 80105d4:	f7ff ff2a 	bl	801042c <WriteRegister>
}
 80105d8:	46c0      	nop			@ (mov r8, r8)
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	46c0      	nop			@ (mov r8, r8)
 80105e0:	200000a4 	.word	0x200000a4

080105e4 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80105e4:	b590      	push	{r4, r7, lr}
 80105e6:	b087      	sub	sp, #28
 80105e8:	af02      	add	r7, sp, #8
 80105ea:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80105ec:	f7ff ffc2 	bl	8010574 <SGP_HeatedUp>
 80105f0:	1e03      	subs	r3, r0, #0
 80105f2:	d032      	beq.n	801065a <SGP_GetMeasurementValues+0x76>
 80105f4:	4b80      	ldr	r3, [pc, #512]	@ (80107f8 <SGP_GetMeasurementValues+0x214>)
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2201      	movs	r2, #1
 80105fa:	4053      	eors	r3, r2
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d02b      	beq.n	801065a <SGP_GetMeasurementValues+0x76>
 8010602:	4b7e      	ldr	r3, [pc, #504]	@ (80107fc <SGP_GetMeasurementValues+0x218>)
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	2201      	movs	r2, #1
 8010608:	4053      	eors	r3, r2
 801060a:	b2db      	uxtb	r3, r3
 801060c:	2b00      	cmp	r3, #0
 801060e:	d024      	beq.n	801065a <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010610:	4b79      	ldr	r3, [pc, #484]	@ (80107f8 <SGP_GetMeasurementValues+0x214>)
 8010612:	2201      	movs	r2, #1
 8010614:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8010616:	4b7a      	ldr	r3, [pc, #488]	@ (8010800 <SGP_GetMeasurementValues+0x21c>)
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00d      	beq.n	801063a <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801061e:	4b79      	ldr	r3, [pc, #484]	@ (8010804 <SGP_GetMeasurementValues+0x220>)
 8010620:	2208      	movs	r2, #8
 8010622:	0019      	movs	r1, r3
 8010624:	2059      	movs	r0, #89	@ 0x59
 8010626:	f7ff ff01 	bl	801042c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 801062a:	f003 fca3 	bl	8013f74 <HAL_GetTick>
 801062e:	0003      	movs	r3, r0
 8010630:	331e      	adds	r3, #30
 8010632:	001a      	movs	r2, r3
 8010634:	4b74      	ldr	r3, [pc, #464]	@ (8010808 <SGP_GetMeasurementValues+0x224>)
 8010636:	601a      	str	r2, [r3, #0]
 8010638:	e00c      	b.n	8010654 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801063a:	4b74      	ldr	r3, [pc, #464]	@ (801080c <SGP_GetMeasurementValues+0x228>)
 801063c:	2208      	movs	r2, #8
 801063e:	0019      	movs	r1, r3
 8010640:	2059      	movs	r0, #89	@ 0x59
 8010642:	f7ff fef3 	bl	801042c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010646:	f003 fc95 	bl	8013f74 <HAL_GetTick>
 801064a:	0003      	movs	r3, r0
 801064c:	331e      	adds	r3, #30
 801064e:	001a      	movs	r2, r3
 8010650:	4b6d      	ldr	r3, [pc, #436]	@ (8010808 <SGP_GetMeasurementValues+0x224>)
 8010652:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8010654:	4b69      	ldr	r3, [pc, #420]	@ (80107fc <SGP_GetMeasurementValues+0x218>)
 8010656:	2201      	movs	r2, #1
 8010658:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 801065a:	4b67      	ldr	r3, [pc, #412]	@ (80107f8 <SGP_GetMeasurementValues+0x214>)
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d100      	bne.n	8010664 <SGP_GetMeasurementValues+0x80>
 8010662:	e0ac      	b.n	80107be <SGP_GetMeasurementValues+0x1da>
 8010664:	f7ff ff94 	bl	8010590 <SGP_MeasurementReady>
 8010668:	1e03      	subs	r3, r0, #0
 801066a:	d100      	bne.n	801066e <SGP_GetMeasurementValues+0x8a>
 801066c:	e0a7      	b.n	80107be <SGP_GetMeasurementValues+0x1da>
 801066e:	4b68      	ldr	r3, [pc, #416]	@ (8010810 <SGP_GetMeasurementValues+0x22c>)
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	2201      	movs	r2, #1
 8010674:	4053      	eors	r3, r2
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b00      	cmp	r3, #0
 801067a:	d100      	bne.n	801067e <SGP_GetMeasurementValues+0x9a>
 801067c:	e09f      	b.n	80107be <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 801067e:	4b64      	ldr	r3, [pc, #400]	@ (8010810 <SGP_GetMeasurementValues+0x22c>)
 8010680:	2201      	movs	r2, #1
 8010682:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010684:	4b63      	ldr	r3, [pc, #396]	@ (8010814 <SGP_GetMeasurementValues+0x230>)
 8010686:	2203      	movs	r2, #3
 8010688:	0019      	movs	r1, r3
 801068a:	2059      	movs	r0, #89	@ 0x59
 801068c:	f7ff feb0 	bl	80103f0 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010690:	4b60      	ldr	r3, [pc, #384]	@ (8010814 <SGP_GetMeasurementValues+0x230>)
 8010692:	2203      	movs	r2, #3
 8010694:	2103      	movs	r1, #3
 8010696:	0018      	movs	r0, r3
 8010698:	f000 f91a 	bl	80108d0 <CheckCRC>
 801069c:	0003      	movs	r3, r0
 801069e:	001a      	movs	r2, r3
 80106a0:	2301      	movs	r3, #1
 80106a2:	4053      	eors	r3, r2
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d02a      	beq.n	8010700 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 80106aa:	4a5b      	ldr	r2, [pc, #364]	@ (8010818 <SGP_GetMeasurementValues+0x234>)
 80106ac:	4b5b      	ldr	r3, [pc, #364]	@ (801081c <SGP_GetMeasurementValues+0x238>)
 80106ae:	0019      	movs	r1, r3
 80106b0:	2001      	movs	r0, #1
 80106b2:	f002 fedd 	bl	8013470 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80106b6:	4a5a      	ldr	r2, [pc, #360]	@ (8010820 <SGP_GetMeasurementValues+0x23c>)
 80106b8:	4b5a      	ldr	r3, [pc, #360]	@ (8010824 <SGP_GetMeasurementValues+0x240>)
 80106ba:	0019      	movs	r1, r3
 80106bc:	2002      	movs	r0, #2
 80106be:	f002 fed7 	bl	8013470 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80106c2:	230f      	movs	r3, #15
 80106c4:	18fb      	adds	r3, r7, r3
 80106c6:	2200      	movs	r2, #0
 80106c8:	701a      	strb	r2, [r3, #0]
 80106ca:	e012      	b.n	80106f2 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80106cc:	240f      	movs	r4, #15
 80106ce:	193b      	adds	r3, r7, r4
 80106d0:	7818      	ldrb	r0, [r3, #0]
 80106d2:	193b      	adds	r3, r7, r4
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	4a4f      	ldr	r2, [pc, #316]	@ (8010814 <SGP_GetMeasurementValues+0x230>)
 80106d8:	5cd3      	ldrb	r3, [r2, r3]
 80106da:	4a53      	ldr	r2, [pc, #332]	@ (8010828 <SGP_GetMeasurementValues+0x244>)
 80106dc:	4953      	ldr	r1, [pc, #332]	@ (801082c <SGP_GetMeasurementValues+0x248>)
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	0003      	movs	r3, r0
 80106e2:	2003      	movs	r0, #3
 80106e4:	f002 fec4 	bl	8013470 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80106e8:	193b      	adds	r3, r7, r4
 80106ea:	781a      	ldrb	r2, [r3, #0]
 80106ec:	193b      	adds	r3, r7, r4
 80106ee:	3201      	adds	r2, #1
 80106f0:	701a      	strb	r2, [r3, #0]
 80106f2:	230f      	movs	r3, #15
 80106f4:	18fb      	adds	r3, r7, r3
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2b02      	cmp	r3, #2
 80106fa:	d9e7      	bls.n	80106cc <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 80106fc:	2300      	movs	r3, #0
 80106fe:	e076      	b.n	80107ee <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 8010700:	f003 fc38 	bl	8013f74 <HAL_GetTick>
 8010704:	0003      	movs	r3, r0
 8010706:	22fa      	movs	r2, #250	@ 0xfa
 8010708:	0092      	lsls	r2, r2, #2
 801070a:	189a      	adds	r2, r3, r2
 801070c:	4b48      	ldr	r3, [pc, #288]	@ (8010830 <SGP_GetMeasurementValues+0x24c>)
 801070e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8010710:	f7ff ff5a 	bl	80105c8 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 8010714:	4b47      	ldr	r3, [pc, #284]	@ (8010834 <SGP_GetMeasurementValues+0x250>)
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	3301      	adds	r3, #1
 801071a:	b2da      	uxtb	r2, r3
 801071c:	4b45      	ldr	r3, [pc, #276]	@ (8010834 <SGP_GetMeasurementValues+0x250>)
 801071e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8010720:	4b44      	ldr	r3, [pc, #272]	@ (8010834 <SGP_GetMeasurementValues+0x250>)
 8010722:	781a      	ldrb	r2, [r3, #0]
 8010724:	4b44      	ldr	r3, [pc, #272]	@ (8010838 <SGP_GetMeasurementValues+0x254>)
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	429a      	cmp	r2, r3
 801072a:	d348      	bcc.n	80107be <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 801072c:	4b39      	ldr	r3, [pc, #228]	@ (8010814 <SGP_GetMeasurementValues+0x230>)
 801072e:	785b      	ldrb	r3, [r3, #1]
 8010730:	b21b      	sxth	r3, r3
 8010732:	021b      	lsls	r3, r3, #8
 8010734:	b21a      	sxth	r2, r3
 8010736:	4b37      	ldr	r3, [pc, #220]	@ (8010814 <SGP_GetMeasurementValues+0x230>)
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	b21b      	sxth	r3, r3
 801073c:	4313      	orrs	r3, r2
 801073e:	b21a      	sxth	r2, r3
 8010740:	240c      	movs	r4, #12
 8010742:	193b      	adds	r3, r7, r4
 8010744:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 8010746:	2300      	movs	r3, #0
 8010748:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 801074a:	193b      	adds	r3, r7, r4
 801074c:	8819      	ldrh	r1, [r3, #0]
 801074e:	2308      	movs	r3, #8
 8010750:	18fa      	adds	r2, r7, r3
 8010752:	4b3a      	ldr	r3, [pc, #232]	@ (801083c <SGP_GetMeasurementValues+0x258>)
 8010754:	0018      	movs	r0, r3
 8010756:	f7fe fe87 	bl	800f468 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 801075a:	68ba      	ldr	r2, [r7, #8]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8010760:	4b37      	ldr	r3, [pc, #220]	@ (8010840 <SGP_GetMeasurementValues+0x25c>)
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	3301      	adds	r3, #1
 8010766:	b2da      	uxtb	r2, r3
 8010768:	4b35      	ldr	r3, [pc, #212]	@ (8010840 <SGP_GetMeasurementValues+0x25c>)
 801076a:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 801076c:	4b34      	ldr	r3, [pc, #208]	@ (8010840 <SGP_GetMeasurementValues+0x25c>)
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d10d      	bne.n	8010790 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8010774:	193b      	adds	r3, r7, r4
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	4a32      	ldr	r2, [pc, #200]	@ (8010844 <SGP_GetMeasurementValues+0x260>)
 801077a:	492c      	ldr	r1, [pc, #176]	@ (801082c <SGP_GetMeasurementValues+0x248>)
 801077c:	2003      	movs	r0, #3
 801077e:	f002 fe77 	bl	8013470 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	4a30      	ldr	r2, [pc, #192]	@ (8010848 <SGP_GetMeasurementValues+0x264>)
 8010786:	4929      	ldr	r1, [pc, #164]	@ (801082c <SGP_GetMeasurementValues+0x248>)
 8010788:	2003      	movs	r0, #3
 801078a:	f002 fe71 	bl	8013470 <CreateLine>
 801078e:	e006      	b.n	801079e <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8010790:	4b2b      	ldr	r3, [pc, #172]	@ (8010840 <SGP_GetMeasurementValues+0x25c>)
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	2b0b      	cmp	r3, #11
 8010796:	d102      	bne.n	801079e <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 8010798:	4b29      	ldr	r3, [pc, #164]	@ (8010840 <SGP_GetMeasurementValues+0x25c>)
 801079a:	2200      	movs	r2, #0
 801079c:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	0018      	movs	r0, r3
 80107a4:	f001 fdd4 	bl	8012350 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 80107a8:	4b22      	ldr	r3, [pc, #136]	@ (8010834 <SGP_GetMeasurementValues+0x250>)
 80107aa:	2200      	movs	r2, #0
 80107ac:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 80107ae:	4b14      	ldr	r3, [pc, #80]	@ (8010800 <SGP_GetMeasurementValues+0x21c>)
 80107b0:	2200      	movs	r2, #0
 80107b2:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80107b4:	4b11      	ldr	r3, [pc, #68]	@ (80107fc <SGP_GetMeasurementValues+0x218>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	701a      	strb	r2, [r3, #0]
      return true;
 80107ba:	2301      	movs	r3, #1
 80107bc:	e017      	b.n	80107ee <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80107be:	f7ff fef5 	bl	80105ac <SGP_MeasurementDone>
 80107c2:	1e03      	subs	r3, r0, #0
 80107c4:	d012      	beq.n	80107ec <SGP_GetMeasurementValues+0x208>
 80107c6:	4b0c      	ldr	r3, [pc, #48]	@ (80107f8 <SGP_GetMeasurementValues+0x214>)
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00e      	beq.n	80107ec <SGP_GetMeasurementValues+0x208>
 80107ce:	4b10      	ldr	r3, [pc, #64]	@ (8010810 <SGP_GetMeasurementValues+0x22c>)
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00a      	beq.n	80107ec <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80107d6:	4a1d      	ldr	r2, [pc, #116]	@ (801084c <SGP_GetMeasurementValues+0x268>)
 80107d8:	4b14      	ldr	r3, [pc, #80]	@ (801082c <SGP_GetMeasurementValues+0x248>)
 80107da:	0019      	movs	r1, r3
 80107dc:	2003      	movs	r0, #3
 80107de:	f002 fe47 	bl	8013470 <CreateLine>
    SGP_StartMeasurement();
 80107e2:	f7ff fe8f 	bl	8010504 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80107e6:	4b05      	ldr	r3, [pc, #20]	@ (80107fc <SGP_GetMeasurementValues+0x218>)
 80107e8:	2200      	movs	r2, #0
 80107ea:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	0018      	movs	r0, r3
 80107f0:	46bd      	mov	sp, r7
 80107f2:	b005      	add	sp, #20
 80107f4:	bd90      	pop	{r4, r7, pc}
 80107f6:	46c0      	nop			@ (mov r8, r8)
 80107f8:	20000f20 	.word	0x20000f20
 80107fc:	20000fcd 	.word	0x20000fcd
 8010800:	20000fcc 	.word	0x20000fcc
 8010804:	200000b4 	.word	0x200000b4
 8010808:	200000c8 	.word	0x200000c8
 801080c:	200000ac 	.word	0x200000ac
 8010810:	20000f21 	.word	0x20000f21
 8010814:	20000f10 	.word	0x20000f10
 8010818:	0802d784 	.word	0x0802d784
 801081c:	0802d7ac 	.word	0x0802d7ac
 8010820:	0802d7b0 	.word	0x0802d7b0
 8010824:	0802d7d0 	.word	0x0802d7d0
 8010828:	0802d7d4 	.word	0x0802d7d4
 801082c:	0802d7f4 	.word	0x0802d7f4
 8010830:	200000c4 	.word	0x200000c4
 8010834:	20000f19 	.word	0x20000f19
 8010838:	200000be 	.word	0x200000be
 801083c:	20000f24 	.word	0x20000f24
 8010840:	20000f1a 	.word	0x20000f1a
 8010844:	0802d7f8 	.word	0x0802d7f8
 8010848:	0802d814 	.word	0x0802d814
 801084c:	0802d830 	.word	0x0802d830

08010850 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010856:	4b1a      	ldr	r3, [pc, #104]	@ (80108c0 <SGP_DeviceConnected+0x70>)
 8010858:	2202      	movs	r2, #2
 801085a:	0019      	movs	r1, r3
 801085c:	2059      	movs	r0, #89	@ 0x59
 801085e:	f7ff fde5 	bl	801042c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8010862:	2001      	movs	r0, #1
 8010864:	f003 fb90 	bl	8013f88 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8010868:	4b16      	ldr	r3, [pc, #88]	@ (80108c4 <SGP_DeviceConnected+0x74>)
 801086a:	2209      	movs	r2, #9
 801086c:	0019      	movs	r1, r3
 801086e:	2059      	movs	r0, #89	@ 0x59
 8010870:	f7ff fdbe 	bl	80103f0 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8010874:	1dfb      	adds	r3, r7, #7
 8010876:	2200      	movs	r2, #0
 8010878:	701a      	strb	r2, [r3, #0]
 801087a:	e011      	b.n	80108a0 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 801087c:	1dfb      	adds	r3, r7, #7
 801087e:	7818      	ldrb	r0, [r3, #0]
 8010880:	1dfb      	adds	r3, r7, #7
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	4a0f      	ldr	r2, [pc, #60]	@ (80108c4 <SGP_DeviceConnected+0x74>)
 8010886:	5cd3      	ldrb	r3, [r2, r3]
 8010888:	4a0f      	ldr	r2, [pc, #60]	@ (80108c8 <SGP_DeviceConnected+0x78>)
 801088a:	4910      	ldr	r1, [pc, #64]	@ (80108cc <SGP_DeviceConnected+0x7c>)
 801088c:	9300      	str	r3, [sp, #0]
 801088e:	0003      	movs	r3, r0
 8010890:	2002      	movs	r0, #2
 8010892:	f002 fded 	bl	8013470 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8010896:	1dfb      	adds	r3, r7, #7
 8010898:	781a      	ldrb	r2, [r3, #0]
 801089a:	1dfb      	adds	r3, r7, #7
 801089c:	3201      	adds	r2, #1
 801089e:	701a      	strb	r2, [r3, #0]
 80108a0:	1dfb      	adds	r3, r7, #7
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	2b08      	cmp	r3, #8
 80108a6:	d9e9      	bls.n	801087c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80108a8:	4b06      	ldr	r3, [pc, #24]	@ (80108c4 <SGP_DeviceConnected+0x74>)
 80108aa:	2203      	movs	r2, #3
 80108ac:	2109      	movs	r1, #9
 80108ae:	0018      	movs	r0, r3
 80108b0:	f000 f80e 	bl	80108d0 <CheckCRC>
 80108b4:	0003      	movs	r3, r0
}
 80108b6:	0018      	movs	r0, r3
 80108b8:	46bd      	mov	sp, r7
 80108ba:	b002      	add	sp, #8
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	46c0      	nop			@ (mov r8, r8)
 80108c0:	200000a8 	.word	0x200000a8
 80108c4:	20000f10 	.word	0x20000f10
 80108c8:	0802d850 	.word	0x0802d850
 80108cc:	0802d7d0 	.word	0x0802d7d0

080108d0 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80108d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108d2:	b08f      	sub	sp, #60	@ 0x3c
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6278      	str	r0, [r7, #36]	@ 0x24
 80108d8:	0008      	movs	r0, r1
 80108da:	0011      	movs	r1, r2
 80108dc:	2323      	movs	r3, #35	@ 0x23
 80108de:	18fb      	adds	r3, r7, r3
 80108e0:	1c02      	adds	r2, r0, #0
 80108e2:	701a      	strb	r2, [r3, #0]
 80108e4:	2322      	movs	r3, #34	@ 0x22
 80108e6:	18fb      	adds	r3, r7, r3
 80108e8:	1c0a      	adds	r2, r1, #0
 80108ea:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80108ec:	2317      	movs	r3, #23
 80108ee:	2220      	movs	r2, #32
 80108f0:	189b      	adds	r3, r3, r2
 80108f2:	19db      	adds	r3, r3, r7
 80108f4:	2200      	movs	r2, #0
 80108f6:	701a      	strb	r2, [r3, #0]
 80108f8:	e09f      	b.n	8010a3a <CheckCRC+0x16a>
 80108fa:	466b      	mov	r3, sp
 80108fc:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80108fe:	2322      	movs	r3, #34	@ 0x22
 8010900:	18fb      	adds	r3, r7, r3
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	001a      	movs	r2, r3
 8010906:	3a01      	subs	r2, #1
 8010908:	633a      	str	r2, [r7, #48]	@ 0x30
 801090a:	60bb      	str	r3, [r7, #8]
 801090c:	2200      	movs	r2, #0
 801090e:	60fa      	str	r2, [r7, #12]
 8010910:	68b8      	ldr	r0, [r7, #8]
 8010912:	68f9      	ldr	r1, [r7, #12]
 8010914:	0002      	movs	r2, r0
 8010916:	0f52      	lsrs	r2, r2, #29
 8010918:	000c      	movs	r4, r1
 801091a:	00e4      	lsls	r4, r4, #3
 801091c:	61fc      	str	r4, [r7, #28]
 801091e:	69fc      	ldr	r4, [r7, #28]
 8010920:	4314      	orrs	r4, r2
 8010922:	61fc      	str	r4, [r7, #28]
 8010924:	0002      	movs	r2, r0
 8010926:	00d2      	lsls	r2, r2, #3
 8010928:	61ba      	str	r2, [r7, #24]
 801092a:	603b      	str	r3, [r7, #0]
 801092c:	2200      	movs	r2, #0
 801092e:	607a      	str	r2, [r7, #4]
 8010930:	6838      	ldr	r0, [r7, #0]
 8010932:	6879      	ldr	r1, [r7, #4]
 8010934:	0002      	movs	r2, r0
 8010936:	0f52      	lsrs	r2, r2, #29
 8010938:	000c      	movs	r4, r1
 801093a:	00e4      	lsls	r4, r4, #3
 801093c:	617c      	str	r4, [r7, #20]
 801093e:	697c      	ldr	r4, [r7, #20]
 8010940:	4314      	orrs	r4, r2
 8010942:	617c      	str	r4, [r7, #20]
 8010944:	0002      	movs	r2, r0
 8010946:	00d2      	lsls	r2, r2, #3
 8010948:	613a      	str	r2, [r7, #16]
 801094a:	3307      	adds	r3, #7
 801094c:	08db      	lsrs	r3, r3, #3
 801094e:	00db      	lsls	r3, r3, #3
 8010950:	466a      	mov	r2, sp
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	469d      	mov	sp, r3
 8010956:	466b      	mov	r3, sp
 8010958:	3300      	adds	r3, #0
 801095a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 801095c:	2316      	movs	r3, #22
 801095e:	2220      	movs	r2, #32
 8010960:	189b      	adds	r3, r3, r2
 8010962:	19db      	adds	r3, r3, r7
 8010964:	2200      	movs	r2, #0
 8010966:	701a      	strb	r2, [r3, #0]
 8010968:	e01e      	b.n	80109a8 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 801096a:	2317      	movs	r3, #23
 801096c:	2220      	movs	r2, #32
 801096e:	189b      	adds	r3, r3, r2
 8010970:	19db      	adds	r3, r3, r7
 8010972:	781a      	ldrb	r2, [r3, #0]
 8010974:	2116      	movs	r1, #22
 8010976:	2320      	movs	r3, #32
 8010978:	18cb      	adds	r3, r1, r3
 801097a:	19db      	adds	r3, r3, r7
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	18d3      	adds	r3, r2, r3
 8010980:	001a      	movs	r2, r3
 8010982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010984:	189a      	adds	r2, r3, r2
 8010986:	0008      	movs	r0, r1
 8010988:	2320      	movs	r3, #32
 801098a:	18cb      	adds	r3, r1, r3
 801098c:	19db      	adds	r3, r3, r7
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	7811      	ldrb	r1, [r2, #0]
 8010992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010994:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8010996:	2320      	movs	r3, #32
 8010998:	18c3      	adds	r3, r0, r3
 801099a:	19db      	adds	r3, r3, r7
 801099c:	781a      	ldrb	r2, [r3, #0]
 801099e:	2320      	movs	r3, #32
 80109a0:	18c3      	adds	r3, r0, r3
 80109a2:	19db      	adds	r3, r3, r7
 80109a4:	3201      	adds	r2, #1
 80109a6:	701a      	strb	r2, [r3, #0]
 80109a8:	2316      	movs	r3, #22
 80109aa:	2220      	movs	r2, #32
 80109ac:	189b      	adds	r3, r3, r2
 80109ae:	19da      	adds	r2, r3, r7
 80109b0:	2322      	movs	r3, #34	@ 0x22
 80109b2:	18fb      	adds	r3, r7, r3
 80109b4:	7812      	ldrb	r2, [r2, #0]
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d3d6      	bcc.n	801096a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80109bc:	2417      	movs	r4, #23
 80109be:	2320      	movs	r3, #32
 80109c0:	18e3      	adds	r3, r4, r3
 80109c2:	19db      	adds	r3, r3, r7
 80109c4:	781a      	ldrb	r2, [r3, #0]
 80109c6:	2322      	movs	r3, #34	@ 0x22
 80109c8:	18fb      	adds	r3, r7, r3
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	18d3      	adds	r3, r2, r3
 80109ce:	3b01      	subs	r3, #1
 80109d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109d2:	18d2      	adds	r2, r2, r3
 80109d4:	250b      	movs	r5, #11
 80109d6:	2320      	movs	r3, #32
 80109d8:	18eb      	adds	r3, r5, r3
 80109da:	19db      	adds	r3, r3, r7
 80109dc:	7812      	ldrb	r2, [r2, #0]
 80109de:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80109e0:	2322      	movs	r3, #34	@ 0x22
 80109e2:	18fb      	adds	r3, r7, r3
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	3b01      	subs	r3, #1
 80109e8:	b2da      	uxtb	r2, r3
 80109ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ec:	0011      	movs	r1, r2
 80109ee:	0018      	movs	r0, r3
 80109f0:	f000 f838 	bl	8010a64 <CalculateCRC>
 80109f4:	0003      	movs	r3, r0
 80109f6:	001a      	movs	r2, r3
 80109f8:	2320      	movs	r3, #32
 80109fa:	18eb      	adds	r3, r5, r3
 80109fc:	19db      	adds	r3, r3, r7
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d00c      	beq.n	8010a1e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8010a04:	2320      	movs	r3, #32
 8010a06:	18e3      	adds	r3, r4, r3
 8010a08:	19db      	adds	r3, r3, r7
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	4a13      	ldr	r2, [pc, #76]	@ (8010a5c <CheckCRC+0x18c>)
 8010a10:	4913      	ldr	r1, [pc, #76]	@ (8010a60 <CheckCRC+0x190>)
 8010a12:	2001      	movs	r0, #1
 8010a14:	f002 fd2c 	bl	8013470 <CreateLine>
      return false;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	46b5      	mov	sp, r6
 8010a1c:	e019      	b.n	8010a52 <CheckCRC+0x182>
 8010a1e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010a20:	2217      	movs	r2, #23
 8010a22:	2320      	movs	r3, #32
 8010a24:	18d3      	adds	r3, r2, r3
 8010a26:	19db      	adds	r3, r3, r7
 8010a28:	2120      	movs	r1, #32
 8010a2a:	1852      	adds	r2, r2, r1
 8010a2c:	19d1      	adds	r1, r2, r7
 8010a2e:	2222      	movs	r2, #34	@ 0x22
 8010a30:	18ba      	adds	r2, r7, r2
 8010a32:	7809      	ldrb	r1, [r1, #0]
 8010a34:	7812      	ldrb	r2, [r2, #0]
 8010a36:	188a      	adds	r2, r1, r2
 8010a38:	701a      	strb	r2, [r3, #0]
 8010a3a:	2317      	movs	r3, #23
 8010a3c:	2220      	movs	r2, #32
 8010a3e:	189b      	adds	r3, r3, r2
 8010a40:	19da      	adds	r2, r3, r7
 8010a42:	2323      	movs	r3, #35	@ 0x23
 8010a44:	18fb      	adds	r3, r7, r3
 8010a46:	7812      	ldrb	r2, [r2, #0]
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d200      	bcs.n	8010a50 <CheckCRC+0x180>
 8010a4e:	e754      	b.n	80108fa <CheckCRC+0x2a>
    }
  }
  return true;
 8010a50:	2301      	movs	r3, #1
}
 8010a52:	0018      	movs	r0, r3
 8010a54:	46bd      	mov	sp, r7
 8010a56:	b00f      	add	sp, #60	@ 0x3c
 8010a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a5a:	46c0      	nop			@ (mov r8, r8)
 8010a5c:	0802d870 	.word	0x0802d870
 8010a60:	0802d7ac 	.word	0x0802d7ac

08010a64 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	000a      	movs	r2, r1
 8010a6e:	1cfb      	adds	r3, r7, #3
 8010a70:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8010a72:	230f      	movs	r3, #15
 8010a74:	18fb      	adds	r3, r7, r3
 8010a76:	22ff      	movs	r2, #255	@ 0xff
 8010a78:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8010a7a:	230e      	movs	r3, #14
 8010a7c:	18fb      	adds	r3, r7, r3
 8010a7e:	2200      	movs	r2, #0
 8010a80:	701a      	strb	r2, [r3, #0]
 8010a82:	e038      	b.n	8010af6 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8010a84:	230e      	movs	r3, #14
 8010a86:	18fb      	adds	r3, r7, r3
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	18d3      	adds	r3, r2, r3
 8010a8e:	7819      	ldrb	r1, [r3, #0]
 8010a90:	220f      	movs	r2, #15
 8010a92:	18bb      	adds	r3, r7, r2
 8010a94:	18ba      	adds	r2, r7, r2
 8010a96:	7812      	ldrb	r2, [r2, #0]
 8010a98:	404a      	eors	r2, r1
 8010a9a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010a9c:	230d      	movs	r3, #13
 8010a9e:	18fb      	adds	r3, r7, r3
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	701a      	strb	r2, [r3, #0]
 8010aa4:	e01c      	b.n	8010ae0 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8010aa6:	210f      	movs	r1, #15
 8010aa8:	187b      	adds	r3, r7, r1
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	b25b      	sxtb	r3, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	da0a      	bge.n	8010ac8 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8010ab2:	187b      	adds	r3, r7, r1
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	b25b      	sxtb	r3, r3
 8010ab8:	18db      	adds	r3, r3, r3
 8010aba:	b25b      	sxtb	r3, r3
 8010abc:	2231      	movs	r2, #49	@ 0x31
 8010abe:	4053      	eors	r3, r2
 8010ac0:	b25a      	sxtb	r2, r3
 8010ac2:	187b      	adds	r3, r7, r1
 8010ac4:	701a      	strb	r2, [r3, #0]
 8010ac6:	e005      	b.n	8010ad4 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 8010ac8:	230f      	movs	r3, #15
 8010aca:	18fa      	adds	r2, r7, r3
 8010acc:	18fb      	adds	r3, r7, r3
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	18db      	adds	r3, r3, r3
 8010ad2:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8010ad4:	210d      	movs	r1, #13
 8010ad6:	187b      	adds	r3, r7, r1
 8010ad8:	781a      	ldrb	r2, [r3, #0]
 8010ada:	187b      	adds	r3, r7, r1
 8010adc:	3201      	adds	r2, #1
 8010ade:	701a      	strb	r2, [r3, #0]
 8010ae0:	230d      	movs	r3, #13
 8010ae2:	18fb      	adds	r3, r7, r3
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	2b07      	cmp	r3, #7
 8010ae8:	d9dd      	bls.n	8010aa6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8010aea:	210e      	movs	r1, #14
 8010aec:	187b      	adds	r3, r7, r1
 8010aee:	781a      	ldrb	r2, [r3, #0]
 8010af0:	187b      	adds	r3, r7, r1
 8010af2:	3201      	adds	r2, #1
 8010af4:	701a      	strb	r2, [r3, #0]
 8010af6:	230e      	movs	r3, #14
 8010af8:	18fa      	adds	r2, r7, r3
 8010afa:	1cfb      	adds	r3, r7, #3
 8010afc:	7812      	ldrb	r2, [r2, #0]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d3bf      	bcc.n	8010a84 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8010b04:	230f      	movs	r3, #15
 8010b06:	18fb      	adds	r3, r7, r3
 8010b08:	781b      	ldrb	r3, [r3, #0]
}
 8010b0a:	0018      	movs	r0, r3
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	b004      	add	sp, #16
 8010b10:	bd80      	pop	{r7, pc}
	...

08010b14 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4936      	ldr	r1, [pc, #216]	@ (8010bfc <SGP_SetHT+0xe8>)
 8010b24:	1c18      	adds	r0, r3, #0
 8010b26:	f7ef fecb 	bl	80008c0 <__aeabi_fadd>
 8010b2a:	1c03      	adds	r3, r0, #0
 8010b2c:	4934      	ldr	r1, [pc, #208]	@ (8010c00 <SGP_SetHT+0xec>)
 8010b2e:	1c18      	adds	r0, r3, #0
 8010b30:	f7f0 f8b8 	bl	8000ca4 <__aeabi_fdiv>
 8010b34:	1c03      	adds	r3, r0, #0
 8010b36:	4933      	ldr	r1, [pc, #204]	@ (8010c04 <SGP_SetHT+0xf0>)
 8010b38:	1c18      	adds	r0, r3, #0
 8010b3a:	f7f0 fa81 	bl	8001040 <__aeabi_fmul>
 8010b3e:	1c03      	adds	r3, r0, #0
 8010b40:	1c18      	adds	r0, r3, #0
 8010b42:	f7ef fd6b 	bl	800061c <__aeabi_f2uiz>
 8010b46:	0003      	movs	r3, r0
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8010c08 <SGP_SetHT+0xf4>)
 8010b4c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	492e      	ldr	r1, [pc, #184]	@ (8010c0c <SGP_SetHT+0xf8>)
 8010b54:	1c18      	adds	r0, r3, #0
 8010b56:	f7f0 f8a5 	bl	8000ca4 <__aeabi_fdiv>
 8010b5a:	1c03      	adds	r3, r0, #0
 8010b5c:	4929      	ldr	r1, [pc, #164]	@ (8010c04 <SGP_SetHT+0xf0>)
 8010b5e:	1c18      	adds	r0, r3, #0
 8010b60:	f7f0 fa6e 	bl	8001040 <__aeabi_fmul>
 8010b64:	1c03      	adds	r3, r0, #0
 8010b66:	1c18      	adds	r0, r3, #0
 8010b68:	f7ef fd58 	bl	800061c <__aeabi_f2uiz>
 8010b6c:	0003      	movs	r3, r0
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	4b27      	ldr	r3, [pc, #156]	@ (8010c10 <SGP_SetHT+0xfc>)
 8010b72:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8010b74:	4b26      	ldr	r3, [pc, #152]	@ (8010c10 <SGP_SetHT+0xfc>)
 8010b76:	881b      	ldrh	r3, [r3, #0]
 8010b78:	0a1b      	lsrs	r3, r3, #8
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	b2da      	uxtb	r2, r3
 8010b7e:	4b25      	ldr	r3, [pc, #148]	@ (8010c14 <SGP_SetHT+0x100>)
 8010b80:	709a      	strb	r2, [r3, #2]
 8010b82:	4b24      	ldr	r3, [pc, #144]	@ (8010c14 <SGP_SetHT+0x100>)
 8010b84:	789a      	ldrb	r2, [r3, #2]
 8010b86:	210c      	movs	r1, #12
 8010b88:	187b      	adds	r3, r7, r1
 8010b8a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8010b8c:	4b20      	ldr	r3, [pc, #128]	@ (8010c10 <SGP_SetHT+0xfc>)
 8010b8e:	881b      	ldrh	r3, [r3, #0]
 8010b90:	b2da      	uxtb	r2, r3
 8010b92:	4b20      	ldr	r3, [pc, #128]	@ (8010c14 <SGP_SetHT+0x100>)
 8010b94:	70da      	strb	r2, [r3, #3]
 8010b96:	4b1f      	ldr	r3, [pc, #124]	@ (8010c14 <SGP_SetHT+0x100>)
 8010b98:	78da      	ldrb	r2, [r3, #3]
 8010b9a:	187b      	adds	r3, r7, r1
 8010b9c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8010b9e:	187b      	adds	r3, r7, r1
 8010ba0:	2102      	movs	r1, #2
 8010ba2:	0018      	movs	r0, r3
 8010ba4:	f7ff ff5e 	bl	8010a64 <CalculateCRC>
 8010ba8:	0003      	movs	r3, r0
 8010baa:	001a      	movs	r2, r3
 8010bac:	4b19      	ldr	r3, [pc, #100]	@ (8010c14 <SGP_SetHT+0x100>)
 8010bae:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8010bb0:	4b15      	ldr	r3, [pc, #84]	@ (8010c08 <SGP_SetHT+0xf4>)
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	0a1b      	lsrs	r3, r3, #8
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	4b16      	ldr	r3, [pc, #88]	@ (8010c14 <SGP_SetHT+0x100>)
 8010bbc:	715a      	strb	r2, [r3, #5]
 8010bbe:	4b15      	ldr	r3, [pc, #84]	@ (8010c14 <SGP_SetHT+0x100>)
 8010bc0:	795a      	ldrb	r2, [r3, #5]
 8010bc2:	2108      	movs	r1, #8
 8010bc4:	187b      	adds	r3, r7, r1
 8010bc6:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8010bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8010c08 <SGP_SetHT+0xf4>)
 8010bca:	881b      	ldrh	r3, [r3, #0]
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	4b11      	ldr	r3, [pc, #68]	@ (8010c14 <SGP_SetHT+0x100>)
 8010bd0:	719a      	strb	r2, [r3, #6]
 8010bd2:	4b10      	ldr	r3, [pc, #64]	@ (8010c14 <SGP_SetHT+0x100>)
 8010bd4:	799a      	ldrb	r2, [r3, #6]
 8010bd6:	187b      	adds	r3, r7, r1
 8010bd8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8010bda:	187b      	adds	r3, r7, r1
 8010bdc:	2102      	movs	r1, #2
 8010bde:	0018      	movs	r0, r3
 8010be0:	f7ff ff40 	bl	8010a64 <CalculateCRC>
 8010be4:	0003      	movs	r3, r0
 8010be6:	001a      	movs	r2, r3
 8010be8:	4b0a      	ldr	r3, [pc, #40]	@ (8010c14 <SGP_SetHT+0x100>)
 8010bea:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8010bec:	4b0a      	ldr	r3, [pc, #40]	@ (8010c18 <SGP_SetHT+0x104>)
 8010bee:	2201      	movs	r2, #1
 8010bf0:	701a      	strb	r2, [r3, #0]
}
 8010bf2:	46c0      	nop			@ (mov r8, r8)
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	b004      	add	sp, #16
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	46c0      	nop			@ (mov r8, r8)
 8010bfc:	42340000 	.word	0x42340000
 8010c00:	432f0000 	.word	0x432f0000
 8010c04:	477fff00 	.word	0x477fff00
 8010c08:	20000fca 	.word	0x20000fca
 8010c0c:	42c80000 	.word	0x42c80000
 8010c10:	20000fc8 	.word	0x20000fc8
 8010c14:	200000b4 	.word	0x200000b4
 8010c18:	20000fcc 	.word	0x20000fcc

08010c1c <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8010c20:	4a09      	ldr	r2, [pc, #36]	@ (8010c48 <SGP_SoftReset+0x2c>)
 8010c22:	4b0a      	ldr	r3, [pc, #40]	@ (8010c4c <SGP_SoftReset+0x30>)
 8010c24:	0019      	movs	r1, r3
 8010c26:	2003      	movs	r0, #3
 8010c28:	f002 fc22 	bl	8013470 <CreateLine>
  SGP_TurnHeaterOff();
 8010c2c:	f7ff fccc 	bl	80105c8 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8010c30:	200a      	movs	r0, #10
 8010c32:	f003 f9a9 	bl	8013f88 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010c36:	4b06      	ldr	r3, [pc, #24]	@ (8010c50 <SGP_SoftReset+0x34>)
 8010c38:	2202      	movs	r2, #2
 8010c3a:	0019      	movs	r1, r3
 8010c3c:	2059      	movs	r0, #89	@ 0x59
 8010c3e:	f7ff fbf5 	bl	801042c <WriteRegister>
}
 8010c42:	46c0      	nop			@ (mov r8, r8)
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	0802d918 	.word	0x0802d918
 8010c4c:	0802d7f4 	.word	0x0802d7f4
 8010c50:	200000bc 	.word	0x200000bc

08010c54 <ResetVOCresult>:

void ResetVOCresult(void) {
 8010c54:	b580      	push	{r7, lr}
 8010c56:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8010c58:	4b02      	ldr	r3, [pc, #8]	@ (8010c64 <ResetVOCresult+0x10>)
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	601a      	str	r2, [r3, #0]
}
 8010c5e:	46c0      	nop			@ (mov r8, r8)
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	20000fd0 	.word	0x20000fd0

08010c68 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8010c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	2b07      	cmp	r3, #7
 8010c72:	d900      	bls.n	8010c76 <SGP_Upkeep+0xe>
 8010c74:	e07a      	b.n	8010d6c <SGP_Upkeep+0x104>
 8010c76:	009a      	lsls	r2, r3, #2
 8010c78:	4b49      	ldr	r3, [pc, #292]	@ (8010da0 <SGP_Upkeep+0x138>)
 8010c7a:	18d3      	adds	r3, r2, r3
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8010c80:	4a48      	ldr	r2, [pc, #288]	@ (8010da4 <SGP_Upkeep+0x13c>)
 8010c82:	4b49      	ldr	r3, [pc, #292]	@ (8010da8 <SGP_Upkeep+0x140>)
 8010c84:	0019      	movs	r1, r3
 8010c86:	2003      	movs	r0, #3
 8010c88:	f002 fbf2 	bl	8013470 <CreateLine>
    break;
 8010c8c:	e081      	b.n	8010d92 <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8010c8e:	f7ff ffe1 	bl	8010c54 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 8010c92:	4b42      	ldr	r3, [pc, #264]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010c94:	2201      	movs	r2, #1
 8010c96:	701a      	strb	r2, [r3, #0]
    break;
 8010c98:	e07b      	b.n	8010d92 <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8010c9a:	f7fc fc4d 	bl	800d538 <getSensorLock>
 8010c9e:	1e03      	subs	r3, r0, #0
 8010ca0:	d000      	beq.n	8010ca4 <SGP_Upkeep+0x3c>
 8010ca2:	e06f      	b.n	8010d84 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8010ca4:	2005      	movs	r0, #5
 8010ca6:	f7fc fc33 	bl	800d510 <setSensorLock>
    SetMeasurementIndicator();
 8010caa:	f001 f987 	bl	8011fbc <SetMeasurementIndicator>
    SGP_StartMeasurement();
 8010cae:	f7ff fc29 	bl	8010504 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 8010cb2:	200a      	movs	r0, #10
 8010cb4:	f003 f968 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 8010cb8:	2000      	movs	r0, #0
 8010cba:	f7fc fc29 	bl	800d510 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 8010cbe:	4b37      	ldr	r3, [pc, #220]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010cc0:	2202      	movs	r2, #2
 8010cc2:	701a      	strb	r2, [r3, #0]
    break;
 8010cc4:	e065      	b.n	8010d92 <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 8010cc6:	f7fc fc37 	bl	800d538 <getSensorLock>
 8010cca:	1e03      	subs	r3, r0, #0
 8010ccc:	d15c      	bne.n	8010d88 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 8010cce:	2005      	movs	r0, #5
 8010cd0:	f7fc fc1e 	bl	800d510 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 8010cd4:	4b35      	ldr	r3, [pc, #212]	@ (8010dac <SGP_Upkeep+0x144>)
 8010cd6:	0018      	movs	r0, r3
 8010cd8:	f7ff fc84 	bl	80105e4 <SGP_GetMeasurementValues>
 8010cdc:	1e03      	subs	r3, r0, #0
 8010cde:	d002      	beq.n	8010ce6 <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 8010ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010ce2:	2203      	movs	r2, #3
 8010ce4:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 8010ce6:	200a      	movs	r0, #10
 8010ce8:	f003 f94e 	bl	8013f88 <HAL_Delay>
    setSensorLock(FREE);
 8010cec:	2000      	movs	r0, #0
 8010cee:	f7fc fc0f 	bl	800d510 <setSensorLock>
    break;
 8010cf2:	e04e      	b.n	8010d92 <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 8010cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8010dac <SGP_Upkeep+0x144>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	0018      	movs	r0, r3
 8010cfc:	f7f3 fec2 	bl	8004a84 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 8010d00:	4b26      	ldr	r3, [pc, #152]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010d02:	2206      	movs	r2, #6
 8010d04:	701a      	strb	r2, [r3, #0]
    break;
 8010d06:	e044      	b.n	8010d92 <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8010d08:	4b24      	ldr	r3, [pc, #144]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010d0a:	2207      	movs	r2, #7
 8010d0c:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 8010d0e:	4b28      	ldr	r3, [pc, #160]	@ (8010db0 <SGP_Upkeep+0x148>)
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	2b03      	cmp	r3, #3
 8010d14:	d912      	bls.n	8010d3c <SGP_Upkeep+0xd4>
 8010d16:	4b27      	ldr	r3, [pc, #156]	@ (8010db4 <SGP_Upkeep+0x14c>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	4053      	eors	r3, r2
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d00b      	beq.n	8010d3c <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 8010d24:	4b24      	ldr	r3, [pc, #144]	@ (8010db8 <SGP_Upkeep+0x150>)
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d004      	beq.n	8010d36 <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8010d2c:	f7ff ff76 	bl	8010c1c <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8010d30:	2000      	movs	r0, #0
 8010d32:	f7fb ffcb 	bl	800cccc <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8010d36:	4b20      	ldr	r3, [pc, #128]	@ (8010db8 <SGP_Upkeep+0x150>)
 8010d38:	2201      	movs	r2, #1
 8010d3a:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8010d3c:	f003 f91a 	bl	8013f74 <HAL_GetTick>
 8010d40:	0003      	movs	r3, r0
 8010d42:	22c8      	movs	r2, #200	@ 0xc8
 8010d44:	0092      	lsls	r2, r2, #2
 8010d46:	189a      	adds	r2, r3, r2
 8010d48:	4b1c      	ldr	r3, [pc, #112]	@ (8010dbc <SGP_Upkeep+0x154>)
 8010d4a:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8010d4c:	f001 f94e 	bl	8011fec <ResetMeasurementIndicator>
  break;
 8010d50:	e01f      	b.n	8010d92 <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8010d52:	4b1a      	ldr	r3, [pc, #104]	@ (8010dbc <SGP_Upkeep+0x154>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	0018      	movs	r0, r3
 8010d58:	f002 fb34 	bl	80133c4 <TimestampIsReached>
 8010d5c:	1e03      	subs	r3, r0, #0
 8010d5e:	d015      	beq.n	8010d8c <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8010d60:	f7ff fbb8 	bl	80104d4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8010d64:	4b0d      	ldr	r3, [pc, #52]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	701a      	strb	r2, [r3, #0]
    }
    break;
 8010d6a:	e00f      	b.n	8010d8c <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8010d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8010d72:	f7fc fbe1 	bl	800d538 <getSensorLock>
 8010d76:	0003      	movs	r3, r0
 8010d78:	2b05      	cmp	r3, #5
 8010d7a:	d109      	bne.n	8010d90 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	f7fc fbc7 	bl	800d510 <setSensorLock>
    }
    break;
 8010d82:	e005      	b.n	8010d90 <SGP_Upkeep+0x128>
      break;
 8010d84:	46c0      	nop			@ (mov r8, r8)
 8010d86:	e004      	b.n	8010d92 <SGP_Upkeep+0x12a>
      break;
 8010d88:	46c0      	nop			@ (mov r8, r8)
 8010d8a:	e002      	b.n	8010d92 <SGP_Upkeep+0x12a>
    break;
 8010d8c:	46c0      	nop			@ (mov r8, r8)
 8010d8e:	e000      	b.n	8010d92 <SGP_Upkeep+0x12a>
    break;
 8010d90:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8010d92:	4b02      	ldr	r3, [pc, #8]	@ (8010d9c <SGP_Upkeep+0x134>)
 8010d94:	781b      	ldrb	r3, [r3, #0]
}
 8010d96:	0018      	movs	r0, r3
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	20000fd4 	.word	0x20000fd4
 8010da0:	0802e1d8 	.word	0x0802e1d8
 8010da4:	0802d930 	.word	0x0802d930
 8010da8:	0802d7f4 	.word	0x0802d7f4
 8010dac:	20000fd0 	.word	0x20000fd0
 8010db0:	20000f1a 	.word	0x20000f1a
 8010db4:	20001e71 	.word	0x20001e71
 8010db8:	20000f04 	.word	0x20000f04
 8010dbc:	20000f1c 	.word	0x20000f1c

08010dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	0002      	movs	r2, r0
 8010dc8:	1dfb      	adds	r3, r7, #7
 8010dca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010dcc:	1dfb      	adds	r3, r7, #7
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8010dd2:	d809      	bhi.n	8010de8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010dd4:	1dfb      	adds	r3, r7, #7
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	001a      	movs	r2, r3
 8010dda:	231f      	movs	r3, #31
 8010ddc:	401a      	ands	r2, r3
 8010dde:	4b04      	ldr	r3, [pc, #16]	@ (8010df0 <__NVIC_EnableIRQ+0x30>)
 8010de0:	2101      	movs	r1, #1
 8010de2:	4091      	lsls	r1, r2
 8010de4:	000a      	movs	r2, r1
 8010de6:	601a      	str	r2, [r3, #0]
  }
}
 8010de8:	46c0      	nop			@ (mov r8, r8)
 8010dea:	46bd      	mov	sp, r7
 8010dec:	b002      	add	sp, #8
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	e000e100 	.word	0xe000e100

08010df4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	0002      	movs	r2, r0
 8010dfc:	1dfb      	adds	r3, r7, #7
 8010dfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010e00:	1dfb      	adds	r3, r7, #7
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b7f      	cmp	r3, #127	@ 0x7f
 8010e06:	d810      	bhi.n	8010e2a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e08:	1dfb      	adds	r3, r7, #7
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	001a      	movs	r2, r3
 8010e0e:	231f      	movs	r3, #31
 8010e10:	4013      	ands	r3, r2
 8010e12:	4908      	ldr	r1, [pc, #32]	@ (8010e34 <__NVIC_DisableIRQ+0x40>)
 8010e14:	2201      	movs	r2, #1
 8010e16:	409a      	lsls	r2, r3
 8010e18:	0013      	movs	r3, r2
 8010e1a:	2280      	movs	r2, #128	@ 0x80
 8010e1c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010e1e:	f3bf 8f4f 	dsb	sy
}
 8010e22:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010e24:	f3bf 8f6f 	isb	sy
}
 8010e28:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8010e2a:	46c0      	nop			@ (mov r8, r8)
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	b002      	add	sp, #8
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	46c0      	nop			@ (mov r8, r8)
 8010e34:	e000e100 	.word	0xe000e100

08010e38 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8010e38:	b5b0      	push	{r4, r5, r7, lr}
 8010e3a:	b088      	sub	sp, #32
 8010e3c:	af02      	add	r7, sp, #8
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	0008      	movs	r0, r1
 8010e42:	0011      	movs	r1, r2
 8010e44:	1cfb      	adds	r3, r7, #3
 8010e46:	1c02      	adds	r2, r0, #0
 8010e48:	701a      	strb	r2, [r3, #0]
 8010e4a:	1cbb      	adds	r3, r7, #2
 8010e4c:	1c0a      	adds	r2, r1, #0
 8010e4e:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8010e50:	4b5b      	ldr	r3, [pc, #364]	@ (8010fc0 <getSoundData+0x188>)
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	b2db      	uxtb	r3, r3
 8010e56:	2201      	movs	r2, #1
 8010e58:	4053      	eors	r3, r2
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d107      	bne.n	8010e70 <getSoundData+0x38>
 8010e60:	4b58      	ldr	r3, [pc, #352]	@ (8010fc4 <getSoundData+0x18c>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	2201      	movs	r2, #1
 8010e68:	4053      	eors	r3, r2
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d001      	beq.n	8010e74 <getSoundData+0x3c>
    {
        return false;
 8010e70:	2300      	movs	r3, #0
 8010e72:	e0a0      	b.n	8010fb6 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8010e74:	4b54      	ldr	r3, [pc, #336]	@ (8010fc8 <getSoundData+0x190>)
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d005      	beq.n	8010e8a <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010e7e:	4b53      	ldr	r3, [pc, #332]	@ (8010fcc <getSoundData+0x194>)
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	b25b      	sxtb	r3, r3
 8010e84:	0018      	movs	r0, r3
 8010e86:	f7ff ffb5 	bl	8010df4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8010e8a:	f3bf 8f4f 	dsb	sy
}
 8010e8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010e90:	f3bf 8f6f 	isb	sy
}
 8010e94:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8010e96:	1cfb      	adds	r3, r7, #3
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d04c      	beq.n	8010f38 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8010e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8010fd0 <getSoundData+0x198>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d11b      	bne.n	8010ede <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	617b      	str	r3, [r7, #20]
 8010eb6:	e00e      	b.n	8010ed6 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	18d3      	adds	r3, r2, r3
 8010ebe:	3302      	adds	r3, #2
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	18d3      	adds	r3, r2, r3
 8010eca:	3308      	adds	r3, #8
 8010ecc:	2200      	movs	r2, #0
 8010ece:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	617b      	str	r3, [r7, #20]
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	2b05      	cmp	r3, #5
 8010eda:	d9ed      	bls.n	8010eb8 <getSoundData+0x80>
 8010edc:	e02c      	b.n	8010f38 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	1c59      	adds	r1, r3, #1
 8010ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8010fd4 <getSoundData+0x19c>)
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8010fd8 <getSoundData+0x1a0>)
 8010eea:	681c      	ldr	r4, [r3, #0]
 8010eec:	4b38      	ldr	r3, [pc, #224]	@ (8010fd0 <getSoundData+0x198>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	0023      	movs	r3, r4
 8010ef4:	f000 fde8 	bl	8011ac8 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010ef8:	2300      	movs	r3, #0
 8010efa:	613b      	str	r3, [r7, #16]
 8010efc:	e019      	b.n	8010f32 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	18d3      	adds	r3, r2, r3
 8010f04:	1c98      	adds	r0, r3, #2
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	3308      	adds	r3, #8
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8010f0e:	4b33      	ldr	r3, [pc, #204]	@ (8010fdc <getSoundData+0x1a4>)
 8010f10:	693a      	ldr	r2, [r7, #16]
 8010f12:	0092      	lsls	r2, r2, #2
 8010f14:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8010f16:	4b32      	ldr	r3, [pc, #200]	@ (8010fe0 <getSoundData+0x1a8>)
 8010f18:	693a      	ldr	r2, [r7, #16]
 8010f1a:	0092      	lsls	r2, r2, #2
 8010f1c:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8010fd0 <getSoundData+0x198>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	9300      	str	r3, [sp, #0]
 8010f24:	0013      	movs	r3, r2
 8010f26:	0022      	movs	r2, r4
 8010f28:	f000 fdce 	bl	8011ac8 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	3301      	adds	r3, #1
 8010f30:	613b      	str	r3, [r7, #16]
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	2b05      	cmp	r3, #5
 8010f36:	d9e2      	bls.n	8010efe <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8010f38:	1cbb      	adds	r3, r7, #2
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d028      	beq.n	8010f92 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8010f40:	240e      	movs	r4, #14
 8010f42:	193b      	adds	r3, r7, r4
 8010f44:	2200      	movs	r2, #0
 8010f46:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8010f48:	250d      	movs	r5, #13
 8010f4a:	197b      	adds	r3, r7, r5
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8010f50:	4b24      	ldr	r3, [pc, #144]	@ (8010fe4 <getSoundData+0x1ac>)
 8010f52:	6818      	ldr	r0, [r3, #0]
 8010f54:	4924      	ldr	r1, [pc, #144]	@ (8010fe8 <getSoundData+0x1b0>)
 8010f56:	197b      	adds	r3, r7, r5
 8010f58:	193a      	adds	r2, r7, r4
 8010f5a:	f000 fe59 	bl	8011c10 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8010f5e:	193b      	adds	r3, r7, r4
 8010f60:	881a      	ldrh	r2, [r3, #0]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	21ff      	movs	r1, #255	@ 0xff
 8010f66:	4011      	ands	r1, r2
 8010f68:	000c      	movs	r4, r1
 8010f6a:	7b99      	ldrb	r1, [r3, #14]
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	4001      	ands	r1, r0
 8010f70:	1c08      	adds	r0, r1, #0
 8010f72:	1c21      	adds	r1, r4, #0
 8010f74:	4301      	orrs	r1, r0
 8010f76:	7399      	strb	r1, [r3, #14]
 8010f78:	0a12      	lsrs	r2, r2, #8
 8010f7a:	b290      	uxth	r0, r2
 8010f7c:	7bda      	ldrb	r2, [r3, #15]
 8010f7e:	2100      	movs	r1, #0
 8010f80:	400a      	ands	r2, r1
 8010f82:	1c11      	adds	r1, r2, #0
 8010f84:	1c02      	adds	r2, r0, #0
 8010f86:	430a      	orrs	r2, r1
 8010f88:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8010f8a:	197b      	adds	r3, r7, r5
 8010f8c:	781a      	ldrb	r2, [r3, #0]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8010f92:	f000 f86f 	bl	8011074 <micSettlingComplete>
 8010f96:	0003      	movs	r3, r0
 8010f98:	001a      	movs	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8010f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8010fc8 <getSoundData+0x190>)
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d005      	beq.n	8010fb4 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010fa8:	4b08      	ldr	r3, [pc, #32]	@ (8010fcc <getSoundData+0x194>)
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	b25b      	sxtb	r3, r3
 8010fae:	0018      	movs	r0, r3
 8010fb0:	f7ff ff06 	bl	8010dc0 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8010fb4:	2301      	movs	r3, #1
}
 8010fb6:	0018      	movs	r0, r3
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	b006      	add	sp, #24
 8010fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8010fbe:	46c0      	nop			@ (mov r8, r8)
 8010fc0:	20000fd6 	.word	0x20000fd6
 8010fc4:	20000fd9 	.word	0x20000fd9
 8010fc8:	20000fd8 	.word	0x20000fd8
 8010fcc:	20001a28 	.word	0x20001a28
 8010fd0:	20001a64 	.word	0x20001a64
 8010fd4:	20001a2c 	.word	0x20001a2c
 8010fd8:	20001a30 	.word	0x20001a30
 8010fdc:	20001a34 	.word	0x20001a34
 8010fe0:	20001a4c 	.word	0x20001a4c
 8010fe4:	20000fe0 	.word	0x20000fe0
 8010fe8:	3b5c7333 	.word	0x3b5c7333

08010fec <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
 8010ff8:	001a      	movs	r2, r3
 8010ffa:	1cfb      	adds	r3, r7, #3
 8010ffc:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8010ffe:	4b09      	ldr	r3, [pc, #36]	@ (8011024 <soundInit+0x38>)
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8011004:	4b08      	ldr	r3, [pc, #32]	@ (8011028 <soundInit+0x3c>)
 8011006:	687a      	ldr	r2, [r7, #4]
 8011008:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 801100a:	4b08      	ldr	r3, [pc, #32]	@ (801102c <soundInit+0x40>)
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8011010:	4b07      	ldr	r3, [pc, #28]	@ (8011030 <soundInit+0x44>)
 8011012:	2200      	movs	r2, #0
 8011014:	569a      	ldrsb	r2, [r3, r2]
 8011016:	4b06      	ldr	r3, [pc, #24]	@ (8011030 <soundInit+0x44>)
 8011018:	701a      	strb	r2, [r3, #0]

    return true;
 801101a:	2301      	movs	r3, #1
}
 801101c:	0018      	movs	r0, r3
 801101e:	46bd      	mov	sp, r7
 8011020:	b004      	add	sp, #16
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20001a20 	.word	0x20001a20
 8011028:	20001a1c 	.word	0x20001a1c
 801102c:	20001a24 	.word	0x20001a24
 8011030:	20001a28 	.word	0x20001a28

08011034 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8011038:	4b02      	ldr	r3, [pc, #8]	@ (8011044 <clearMaximumAmplitude+0x10>)
 801103a:	2200      	movs	r2, #0
 801103c:	601a      	str	r2, [r3, #0]
}
 801103e:	46c0      	nop			@ (mov r8, r8)
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	20000fe0 	.word	0x20000fe0

08011048 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 801104c:	4b08      	ldr	r3, [pc, #32]	@ (8011070 <startMicSettlingPeriod+0x28>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	2200      	movs	r2, #0
 8011054:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8011056:	4b06      	ldr	r3, [pc, #24]	@ (8011070 <startMicSettlingPeriod+0x28>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	0018      	movs	r0, r3
 801105c:	f00b f878 	bl	801c150 <HAL_TIM_Base_Start>
 8011060:	1e03      	subs	r3, r0, #0
 8011062:	d001      	beq.n	8011068 <startMicSettlingPeriod+0x20>
    {
        return false;
 8011064:	2300      	movs	r3, #0
 8011066:	e000      	b.n	801106a <startMicSettlingPeriod+0x22>
    }
    return true;
 8011068:	2301      	movs	r3, #1
}
 801106a:	0018      	movs	r0, r3
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}
 8011070:	20001a1c 	.word	0x20001a1c

08011074 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 801107a:	4b0e      	ldr	r3, [pc, #56]	@ (80110b4 <micSettlingComplete+0x40>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	691b      	ldr	r3, [r3, #16]
 8011082:	2201      	movs	r2, #1
 8011084:	401a      	ands	r2, r3
 8011086:	1dfb      	adds	r3, r7, #7
 8011088:	3a01      	subs	r2, #1
 801108a:	4251      	negs	r1, r2
 801108c:	414a      	adcs	r2, r1
 801108e:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011090:	1dfb      	adds	r3, r7, #7
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d007      	beq.n	80110a8 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8011098:	4b06      	ldr	r3, [pc, #24]	@ (80110b4 <micSettlingComplete+0x40>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	0018      	movs	r0, r3
 801109e:	f00b f8a1 	bl	801c1e4 <HAL_TIM_Base_Stop>
      DataReady = true;
 80110a2:	4b05      	ldr	r3, [pc, #20]	@ (80110b8 <micSettlingComplete+0x44>)
 80110a4:	2201      	movs	r2, #1
 80110a6:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 80110a8:	1dfb      	adds	r3, r7, #7
 80110aa:	781b      	ldrb	r3, [r3, #0]
}
 80110ac:	0018      	movs	r0, r3
 80110ae:	46bd      	mov	sp, r7
 80110b0:	b002      	add	sp, #8
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	20001a1c 	.word	0x20001a1c
 80110b8:	20000fd5 	.word	0x20000fd5

080110bc <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	0002      	movs	r2, r0
 80110c4:	1dfb      	adds	r3, r7, #7
 80110c6:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 80110c8:	4b29      	ldr	r3, [pc, #164]	@ (8011170 <enableMicrophone+0xb4>)
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	1dfa      	adds	r2, r7, #7
 80110d0:	7812      	ldrb	r2, [r2, #0]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d101      	bne.n	80110da <enableMicrophone+0x1e>
    {
        return true;
 80110d6:	2301      	movs	r3, #1
 80110d8:	e045      	b.n	8011166 <enableMicrophone+0xaa>
    }
    if (bEnable)
 80110da:	1dfb      	adds	r3, r7, #7
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d025      	beq.n	801112e <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 80110e2:	f7ff ffb1 	bl	8011048 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 80110e6:	4b23      	ldr	r3, [pc, #140]	@ (8011174 <enableMicrophone+0xb8>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2280      	movs	r2, #128	@ 0x80
 80110ec:	0092      	lsls	r2, r2, #2
 80110ee:	4922      	ldr	r1, [pc, #136]	@ (8011178 <enableMicrophone+0xbc>)
 80110f0:	0018      	movs	r0, r3
 80110f2:	f007 fa79 	bl	80185e8 <HAL_I2S_Receive_DMA>
 80110f6:	1e03      	subs	r3, r0, #0
 80110f8:	d001      	beq.n	80110fe <enableMicrophone+0x42>
        {
            return false;
 80110fa:	2300      	movs	r3, #0
 80110fc:	e033      	b.n	8011166 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 80110fe:	f7ff ff99 	bl	8011034 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8011102:	4b1e      	ldr	r3, [pc, #120]	@ (801117c <enableMicrophone+0xc0>)
 8011104:	2200      	movs	r2, #0
 8011106:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011108:	4b1d      	ldr	r3, [pc, #116]	@ (8011180 <enableMicrophone+0xc4>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	b25b      	sxtb	r3, r3
 801110e:	0018      	movs	r0, r3
 8011110:	f7ff fe56 	bl	8010dc0 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8011114:	4b1b      	ldr	r3, [pc, #108]	@ (8011184 <enableMicrophone+0xc8>)
 8011116:	2201      	movs	r2, #1
 8011118:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 801111a:	4b15      	ldr	r3, [pc, #84]	@ (8011170 <enableMicrophone+0xb4>)
 801111c:	2201      	movs	r2, #1
 801111e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011120:	4b19      	ldr	r3, [pc, #100]	@ (8011188 <enableMicrophone+0xcc>)
 8011122:	2200      	movs	r2, #0
 8011124:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011126:	4b19      	ldr	r3, [pc, #100]	@ (801118c <enableMicrophone+0xd0>)
 8011128:	2200      	movs	r2, #0
 801112a:	701a      	strb	r2, [r3, #0]
 801112c:	e01a      	b.n	8011164 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 801112e:	4b14      	ldr	r3, [pc, #80]	@ (8011180 <enableMicrophone+0xc4>)
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	b25b      	sxtb	r3, r3
 8011134:	0018      	movs	r0, r3
 8011136:	f7ff fe5d 	bl	8010df4 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 801113a:	4b12      	ldr	r3, [pc, #72]	@ (8011184 <enableMicrophone+0xc8>)
 801113c:	2200      	movs	r2, #0
 801113e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011140:	4b11      	ldr	r3, [pc, #68]	@ (8011188 <enableMicrophone+0xcc>)
 8011142:	2200      	movs	r2, #0
 8011144:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011146:	4b11      	ldr	r3, [pc, #68]	@ (801118c <enableMicrophone+0xd0>)
 8011148:	2200      	movs	r2, #0
 801114a:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 801114c:	4b09      	ldr	r3, [pc, #36]	@ (8011174 <enableMicrophone+0xb8>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	0018      	movs	r0, r3
 8011152:	f007 fb0b 	bl	801876c <HAL_I2S_DMAStop>
 8011156:	1e03      	subs	r3, r0, #0
 8011158:	d001      	beq.n	801115e <enableMicrophone+0xa2>
        {
            return false;
 801115a:	2300      	movs	r3, #0
 801115c:	e003      	b.n	8011166 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 801115e:	4b04      	ldr	r3, [pc, #16]	@ (8011170 <enableMicrophone+0xb4>)
 8011160:	2200      	movs	r2, #0
 8011162:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011164:	2301      	movs	r3, #1
}
 8011166:	0018      	movs	r0, r3
 8011168:	46bd      	mov	sp, r7
 801116a:	b002      	add	sp, #8
 801116c:	bd80      	pop	{r7, pc}
 801116e:	46c0      	nop			@ (mov r8, r8)
 8011170:	20000fd6 	.word	0x20000fd6
 8011174:	20001a20 	.word	0x20001a20
 8011178:	2000101c 	.word	0x2000101c
 801117c:	20000fdc 	.word	0x20000fdc
 8011180:	20001a28 	.word	0x20001a28
 8011184:	20000fd8 	.word	0x20000fd8
 8011188:	20000fd7 	.word	0x20000fd7
 801118c:	20000fd9 	.word	0x20000fd9

08011190 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011194:	4b0c      	ldr	r3, [pc, #48]	@ (80111c8 <startSPLcalculation+0x38>)
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	b2db      	uxtb	r3, r3
 801119a:	2201      	movs	r2, #1
 801119c:	4053      	eors	r3, r2
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d001      	beq.n	80111a8 <startSPLcalculation+0x18>
    {
        return false;
 80111a4:	2300      	movs	r3, #0
 80111a6:	e00c      	b.n	80111c2 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 80111a8:	4b08      	ldr	r3, [pc, #32]	@ (80111cc <startSPLcalculation+0x3c>)
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d001      	beq.n	80111b6 <startSPLcalculation+0x26>
    {
        return true;
 80111b2:	2301      	movs	r3, #1
 80111b4:	e005      	b.n	80111c2 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 80111b6:	f000 fb63 	bl	8011880 <resetSPLstate>
    SPLcalcEnabled = true;
 80111ba:	4b04      	ldr	r3, [pc, #16]	@ (80111cc <startSPLcalculation+0x3c>)
 80111bc:	2201      	movs	r2, #1
 80111be:	701a      	strb	r2, [r3, #0]
    return true;
 80111c0:	2301      	movs	r3, #1
}
 80111c2:	0018      	movs	r0, r3
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	20000fd6 	.word	0x20000fd6
 80111cc:	20000fd7 	.word	0x20000fd7

080111d0 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80111d8:	4b05      	ldr	r3, [pc, #20]	@ (80111f0 <HAL_I2S_RxHalfCpltCallback+0x20>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d102      	bne.n	80111e8 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 80111e2:	2000      	movs	r0, #0
 80111e4:	f000 f81a 	bl	801121c <processHalfDMAbuffer>
  }
}
 80111e8:	46c0      	nop			@ (mov r8, r8)
 80111ea:	46bd      	mov	sp, r7
 80111ec:	b002      	add	sp, #8
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	20001a20 	.word	0x20001a20

080111f4 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 80111fc:	4b06      	ldr	r3, [pc, #24]	@ (8011218 <HAL_I2S_RxCpltCallback+0x24>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	429a      	cmp	r2, r3
 8011204:	d104      	bne.n	8011210 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011206:	2380      	movs	r3, #128	@ 0x80
 8011208:	009b      	lsls	r3, r3, #2
 801120a:	0018      	movs	r0, r3
 801120c:	f000 f806 	bl	801121c <processHalfDMAbuffer>
  }
}
 8011210:	46c0      	nop			@ (mov r8, r8)
 8011212:	46bd      	mov	sp, r7
 8011214:	b002      	add	sp, #8
 8011216:	bd80      	pop	{r7, pc}
 8011218:	20001a20 	.word	0x20001a20

0801121c <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	005a      	lsls	r2, r3, #1
 8011228:	4b15      	ldr	r3, [pc, #84]	@ (8011280 <processHalfDMAbuffer+0x64>)
 801122a:	18d3      	adds	r3, r2, r3
 801122c:	4a15      	ldr	r2, [pc, #84]	@ (8011284 <processHalfDMAbuffer+0x68>)
 801122e:	2180      	movs	r1, #128	@ 0x80
 8011230:	0089      	lsls	r1, r1, #2
 8011232:	0018      	movs	r0, r3
 8011234:	f000 fd35 	bl	8011ca2 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011238:	4b13      	ldr	r3, [pc, #76]	@ (8011288 <processHalfDMAbuffer+0x6c>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	425a      	negs	r2, r3
 801123e:	4153      	adcs	r3, r2
 8011240:	b2da      	uxtb	r2, r3
 8011242:	4b11      	ldr	r3, [pc, #68]	@ (8011288 <processHalfDMAbuffer+0x6c>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2109      	movs	r1, #9
 8011248:	4299      	cmp	r1, r3
 801124a:	419b      	sbcs	r3, r3
 801124c:	425b      	negs	r3, r3
 801124e:	b2db      	uxtb	r3, r3
 8011250:	480c      	ldr	r0, [pc, #48]	@ (8011284 <processHalfDMAbuffer+0x68>)
 8011252:	2180      	movs	r1, #128	@ 0x80
 8011254:	f000 fb46 	bl	80118e4 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011258:	4b0b      	ldr	r3, [pc, #44]	@ (8011288 <processHalfDMAbuffer+0x6c>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b09      	cmp	r3, #9
 801125e:	d804      	bhi.n	801126a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011260:	4b09      	ldr	r3, [pc, #36]	@ (8011288 <processHalfDMAbuffer+0x6c>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	1c5a      	adds	r2, r3, #1
 8011266:	4b08      	ldr	r3, [pc, #32]	@ (8011288 <processHalfDMAbuffer+0x6c>)
 8011268:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 801126a:	4b08      	ldr	r3, [pc, #32]	@ (801128c <processHalfDMAbuffer+0x70>)
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	b2db      	uxtb	r3, r3
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011274:	f000 f826 	bl	80112c4 <calculateSPLQ31>
    }
}
 8011278:	46c0      	nop			@ (mov r8, r8)
 801127a:	46bd      	mov	sp, r7
 801127c:	b002      	add	sp, #8
 801127e:	bd80      	pop	{r7, pc}
 8011280:	2000101c 	.word	0x2000101c
 8011284:	2000181c 	.word	0x2000181c
 8011288:	20000fdc 	.word	0x20000fdc
 801128c:	20000fd7 	.word	0x20000fd7

08011290 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011298:	4b07      	ldr	r3, [pc, #28]	@ (80112b8 <HAL_I2S_ErrorCallback+0x28>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	687a      	ldr	r2, [r7, #4]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d106      	bne.n	80112b0 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 80112a2:	4a06      	ldr	r2, [pc, #24]	@ (80112bc <HAL_I2S_ErrorCallback+0x2c>)
 80112a4:	239e      	movs	r3, #158	@ 0x9e
 80112a6:	0059      	lsls	r1, r3, #1
 80112a8:	4b05      	ldr	r3, [pc, #20]	@ (80112c0 <HAL_I2S_ErrorCallback+0x30>)
 80112aa:	0018      	movs	r0, r3
 80112ac:	f002 f9da 	bl	8013664 <errorHandler>
  }
}
 80112b0:	46c0      	nop			@ (mov r8, r8)
 80112b2:	46bd      	mov	sp, r7
 80112b4:	b002      	add	sp, #8
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	20001a20 	.word	0x20001a20
 80112bc:	0802d958 	.word	0x0802d958
 80112c0:	0802e2c8 	.word	0x0802e2c8

080112c4 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 80112c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112c6:	b0b3      	sub	sp, #204	@ 0xcc
 80112c8:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 80112ca:	4ae2      	ldr	r2, [pc, #904]	@ (8011654 <calculateSPLQ31+0x390>)
 80112cc:	2338      	movs	r3, #56	@ 0x38
 80112ce:	2030      	movs	r0, #48	@ 0x30
 80112d0:	181b      	adds	r3, r3, r0
 80112d2:	19d9      	adds	r1, r3, r7
 80112d4:	2334      	movs	r3, #52	@ 0x34
 80112d6:	181b      	adds	r3, r3, r0
 80112d8:	19d8      	adds	r0, r3, r7
 80112da:	2380      	movs	r3, #128	@ 0x80
 80112dc:	f000 fc36 	bl	8011b4c <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 80112e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	da00      	bge.n	80112e8 <calculateSPLQ31+0x24>
 80112e6:	3301      	adds	r3, #1
 80112e8:	105b      	asrs	r3, r3, #1
 80112ea:	001a      	movs	r2, r3
 80112ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	da00      	bge.n	80112f4 <calculateSPLQ31+0x30>
 80112f2:	3301      	adds	r3, #1
 80112f4:	105b      	asrs	r3, r3, #1
 80112f6:	18d3      	adds	r3, r2, r3
 80112f8:	2188      	movs	r1, #136	@ 0x88
 80112fa:	187a      	adds	r2, r7, r1
 80112fc:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 80112fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011300:	187b      	adds	r3, r7, r1
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	1ad3      	subs	r3, r2, r3
 8011306:	3304      	adds	r3, #4
 8011308:	2284      	movs	r2, #132	@ 0x84
 801130a:	18b9      	adds	r1, r7, r2
 801130c:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 801130e:	18bb      	adds	r3, r7, r2
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	4ad1      	ldr	r2, [pc, #836]	@ (8011658 <calculateSPLQ31+0x394>)
 8011314:	0019      	movs	r1, r3
 8011316:	0010      	movs	r0, r2
 8011318:	f000 fc58 	bl	8011bcc <getPo2factor>
 801131c:	0003      	movs	r3, r0
 801131e:	2280      	movs	r2, #128	@ 0x80
 8011320:	18ba      	adds	r2, r7, r2
 8011322:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011324:	2300      	movs	r3, #0
 8011326:	2284      	movs	r2, #132	@ 0x84
 8011328:	2130      	movs	r1, #48	@ 0x30
 801132a:	1852      	adds	r2, r2, r1
 801132c:	19d2      	adds	r2, r2, r7
 801132e:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011330:	2300      	movs	r3, #0
 8011332:	2280      	movs	r2, #128	@ 0x80
 8011334:	1852      	adds	r2, r2, r1
 8011336:	19d2      	adds	r2, r2, r7
 8011338:	6013      	str	r3, [r2, #0]
 801133a:	e032      	b.n	80113a2 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 801133c:	4ac5      	ldr	r2, [pc, #788]	@ (8011654 <calculateSPLQ31+0x390>)
 801133e:	2680      	movs	r6, #128	@ 0x80
 8011340:	2330      	movs	r3, #48	@ 0x30
 8011342:	18f1      	adds	r1, r6, r3
 8011344:	19cb      	adds	r3, r1, r7
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	589a      	ldr	r2, [r3, r2]
 801134c:	2188      	movs	r1, #136	@ 0x88
 801134e:	1879      	adds	r1, r7, r1
 8011350:	680b      	ldr	r3, [r1, #0]
 8011352:	1ad2      	subs	r2, r2, r3
 8011354:	2180      	movs	r1, #128	@ 0x80
 8011356:	1879      	adds	r1, r7, r1
 8011358:	680b      	ldr	r3, [r1, #0]
 801135a:	409a      	lsls	r2, r3
 801135c:	0011      	movs	r1, r2
 801135e:	4abf      	ldr	r2, [pc, #764]	@ (801165c <calculateSPLQ31+0x398>)
 8011360:	2084      	movs	r0, #132	@ 0x84
 8011362:	2330      	movs	r3, #48	@ 0x30
 8011364:	18c3      	adds	r3, r0, r3
 8011366:	19db      	adds	r3, r3, r7
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 801136e:	2230      	movs	r2, #48	@ 0x30
 8011370:	1883      	adds	r3, r0, r2
 8011372:	19db      	adds	r3, r3, r7
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	3301      	adds	r3, #1
 8011378:	49b8      	ldr	r1, [pc, #736]	@ (801165c <calculateSPLQ31+0x398>)
 801137a:	009a      	lsls	r2, r3, #2
 801137c:	2300      	movs	r3, #0
 801137e:	5053      	str	r3, [r2, r1]
        count += 2;
 8011380:	2230      	movs	r2, #48	@ 0x30
 8011382:	1883      	adds	r3, r0, r2
 8011384:	19db      	adds	r3, r3, r7
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	3302      	adds	r3, #2
 801138a:	0011      	movs	r1, r2
 801138c:	1882      	adds	r2, r0, r2
 801138e:	19d2      	adds	r2, r2, r7
 8011390:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011392:	000a      	movs	r2, r1
 8011394:	18b3      	adds	r3, r6, r2
 8011396:	19db      	adds	r3, r3, r7
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	3301      	adds	r3, #1
 801139c:	18b2      	adds	r2, r6, r2
 801139e:	19d2      	adds	r2, r2, r7
 80113a0:	6013      	str	r3, [r2, #0]
 80113a2:	2380      	movs	r3, #128	@ 0x80
 80113a4:	2630      	movs	r6, #48	@ 0x30
 80113a6:	199b      	adds	r3, r3, r6
 80113a8:	19db      	adds	r3, r3, r7
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80113ae:	d9c5      	bls.n	801133c <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 80113b0:	4bab      	ldr	r3, [pc, #684]	@ (8011660 <calculateSPLQ31+0x39c>)
 80113b2:	6818      	ldr	r0, [r3, #0]
 80113b4:	49a9      	ldr	r1, [pc, #676]	@ (801165c <calculateSPLQ31+0x398>)
 80113b6:	2301      	movs	r3, #1
 80113b8:	2200      	movs	r2, #0
 80113ba:	f012 f8f9 	bl	80235b0 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 80113be:	4aa9      	ldr	r2, [pc, #676]	@ (8011664 <calculateSPLQ31+0x3a0>)
 80113c0:	2338      	movs	r3, #56	@ 0x38
 80113c2:	199b      	adds	r3, r3, r6
 80113c4:	19d9      	adds	r1, r3, r7
 80113c6:	2334      	movs	r3, #52	@ 0x34
 80113c8:	199b      	adds	r3, r3, r6
 80113ca:	19d8      	adds	r0, r3, r7
 80113cc:	237e      	movs	r3, #126	@ 0x7e
 80113ce:	f000 fbbd 	bl	8011b4c <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 80113d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80113d4:	2380      	movs	r3, #128	@ 0x80
 80113d6:	061b      	lsls	r3, r3, #24
 80113d8:	429a      	cmp	r2, r3
 80113da:	d101      	bne.n	80113e0 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 80113dc:	4b9e      	ldr	r3, [pc, #632]	@ (8011658 <calculateSPLQ31+0x394>)
 80113de:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 80113e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80113e2:	2380      	movs	r3, #128	@ 0x80
 80113e4:	061b      	lsls	r3, r3, #24
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d101      	bne.n	80113ee <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 80113ea:	4b9b      	ldr	r3, [pc, #620]	@ (8011658 <calculateSPLQ31+0x394>)
 80113ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 80113ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113f0:	17da      	asrs	r2, r3, #31
 80113f2:	189b      	adds	r3, r3, r2
 80113f4:	4053      	eors	r3, r2
 80113f6:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 80113f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113fa:	17da      	asrs	r2, r3, #31
 80113fc:	189b      	adds	r3, r3, r2
 80113fe:	4053      	eors	r3, r2
 8011400:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011402:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011406:	429a      	cmp	r2, r3
 8011408:	dd01      	ble.n	801140e <calculateSPLQ31+0x14a>
    {
        max = min;
 801140a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801140c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 801140e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011410:	3304      	adds	r3, #4
 8011412:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011414:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011416:	4a90      	ldr	r2, [pc, #576]	@ (8011658 <calculateSPLQ31+0x394>)
 8011418:	0019      	movs	r1, r3
 801141a:	0010      	movs	r0, r2
 801141c:	f000 fbd6 	bl	8011bcc <getPo2factor>
 8011420:	0003      	movs	r3, r0
 8011422:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011424:	2302      	movs	r3, #2
 8011426:	22ac      	movs	r2, #172	@ 0xac
 8011428:	18ba      	adds	r2, r7, r2
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	e012      	b.n	8011454 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 801142e:	4a8b      	ldr	r2, [pc, #556]	@ (801165c <calculateSPLQ31+0x398>)
 8011430:	20ac      	movs	r0, #172	@ 0xac
 8011432:	183b      	adds	r3, r7, r0
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	589a      	ldr	r2, [r3, r2]
 801143a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801143c:	409a      	lsls	r2, r3
 801143e:	0011      	movs	r1, r2
 8011440:	4a86      	ldr	r2, [pc, #536]	@ (801165c <calculateSPLQ31+0x398>)
 8011442:	183b      	adds	r3, r7, r0
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 801144a:	183b      	adds	r3, r7, r0
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	3301      	adds	r3, #1
 8011450:	183a      	adds	r2, r7, r0
 8011452:	6013      	str	r3, [r2, #0]
 8011454:	23ac      	movs	r3, #172	@ 0xac
 8011456:	18fb      	adds	r3, r7, r3
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	2b7f      	cmp	r3, #127	@ 0x7f
 801145c:	d9e7      	bls.n	801142e <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 801145e:	4b7d      	ldr	r3, [pc, #500]	@ (8011654 <calculateSPLQ31+0x390>)
 8011460:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011462:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011464:	4b7d      	ldr	r3, [pc, #500]	@ (801165c <calculateSPLQ31+0x398>)
 8011466:	2240      	movs	r2, #64	@ 0x40
 8011468:	0018      	movs	r0, r3
 801146a:	f012 fe4b 	bl	8024104 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 801146e:	2330      	movs	r3, #48	@ 0x30
 8011470:	18fb      	adds	r3, r7, r3
 8011472:	0018      	movs	r0, r3
 8011474:	2330      	movs	r3, #48	@ 0x30
 8011476:	001a      	movs	r2, r3
 8011478:	2100      	movs	r1, #0
 801147a:	f014 fc97 	bl	8025dac <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 801147e:	2200      	movs	r2, #0
 8011480:	2300      	movs	r3, #0
 8011482:	21a0      	movs	r1, #160	@ 0xa0
 8011484:	1879      	adds	r1, r7, r1
 8011486:	600a      	str	r2, [r1, #0]
 8011488:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 801148a:	2301      	movs	r3, #1
 801148c:	229c      	movs	r2, #156	@ 0x9c
 801148e:	18ba      	adds	r2, r7, r2
 8011490:	6013      	str	r3, [r2, #0]
 8011492:	e05b      	b.n	801154c <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011494:	269c      	movs	r6, #156	@ 0x9c
 8011496:	19bb      	adds	r3, r7, r6
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	009a      	lsls	r2, r3, #2
 801149c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801149e:	189b      	adds	r3, r3, r2
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	613b      	str	r3, [r7, #16]
 80114a4:	17db      	asrs	r3, r3, #31
 80114a6:	617b      	str	r3, [r7, #20]
 80114a8:	4b6f      	ldr	r3, [pc, #444]	@ (8011668 <calculateSPLQ31+0x3a4>)
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	19bb      	adds	r3, r7, r6
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	005b      	lsls	r3, r3, #1
 80114b2:	18d3      	adds	r3, r2, r3
 80114b4:	881b      	ldrh	r3, [r3, #0]
 80114b6:	60bb      	str	r3, [r7, #8]
 80114b8:	2300      	movs	r3, #0
 80114ba:	60fb      	str	r3, [r7, #12]
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	6938      	ldr	r0, [r7, #16]
 80114c2:	6979      	ldr	r1, [r7, #20]
 80114c4:	f7ef f87c 	bl	80005c0 <__aeabi_lmul>
 80114c8:	0002      	movs	r2, r0
 80114ca:	000b      	movs	r3, r1
 80114cc:	0010      	movs	r0, r2
 80114ce:	0019      	movs	r1, r3
 80114d0:	23a0      	movs	r3, #160	@ 0xa0
 80114d2:	18fa      	adds	r2, r7, r3
 80114d4:	6853      	ldr	r3, [r2, #4]
 80114d6:	6812      	ldr	r2, [r2, #0]
 80114d8:	1812      	adds	r2, r2, r0
 80114da:	414b      	adcs	r3, r1
 80114dc:	21a0      	movs	r1, #160	@ 0xa0
 80114de:	1879      	adds	r1, r7, r1
 80114e0:	600a      	str	r2, [r1, #0]
 80114e2:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 80114e4:	4b61      	ldr	r3, [pc, #388]	@ (801166c <calculateSPLQ31+0x3a8>)
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	19bb      	adds	r3, r7, r6
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	18d3      	adds	r3, r2, r3
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	2b06      	cmp	r3, #6
 80114f2:	d025      	beq.n	8011540 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 80114f4:	4b5d      	ldr	r3, [pc, #372]	@ (801166c <calculateSPLQ31+0x3a8>)
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	19bb      	adds	r3, r7, r6
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	18d3      	adds	r3, r2, r3
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	2230      	movs	r2, #48	@ 0x30
 8011502:	18ba      	adds	r2, r7, r2
 8011504:	00db      	lsls	r3, r3, #3
 8011506:	18d3      	adds	r3, r2, r3
 8011508:	6818      	ldr	r0, [r3, #0]
 801150a:	6859      	ldr	r1, [r3, #4]
 801150c:	19bb      	adds	r3, r7, r6
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	009a      	lsls	r2, r3, #2
 8011512:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011514:	189b      	adds	r3, r3, r2
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	603b      	str	r3, [r7, #0]
 801151a:	17db      	asrs	r3, r3, #31
 801151c:	607b      	str	r3, [r7, #4]
 801151e:	4b53      	ldr	r3, [pc, #332]	@ (801166c <calculateSPLQ31+0x3a8>)
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	19be      	adds	r6, r7, r6
 8011524:	6833      	ldr	r3, [r6, #0]
 8011526:	18d3      	adds	r3, r2, r3
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	001e      	movs	r6, r3
 801152c:	683a      	ldr	r2, [r7, #0]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	1880      	adds	r0, r0, r2
 8011532:	4159      	adcs	r1, r3
 8011534:	2330      	movs	r3, #48	@ 0x30
 8011536:	18fa      	adds	r2, r7, r3
 8011538:	00f3      	lsls	r3, r6, #3
 801153a:	18d3      	adds	r3, r2, r3
 801153c:	6018      	str	r0, [r3, #0]
 801153e:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011540:	229c      	movs	r2, #156	@ 0x9c
 8011542:	18bb      	adds	r3, r7, r2
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	3301      	adds	r3, #1
 8011548:	18ba      	adds	r2, r7, r2
 801154a:	6013      	str	r3, [r2, #0]
 801154c:	239c      	movs	r3, #156	@ 0x9c
 801154e:	18fb      	adds	r3, r7, r3
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b3f      	cmp	r3, #63	@ 0x3f
 8011554:	d99e      	bls.n	8011494 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8011556:	2380      	movs	r3, #128	@ 0x80
 8011558:	18fb      	adds	r3, r7, r3
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	001a      	movs	r2, r3
 8011560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011562:	005b      	lsls	r3, r3, #1
 8011564:	18d3      	adds	r3, r2, r3
 8011566:	3b22      	subs	r3, #34	@ 0x22
 8011568:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 801156a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801156c:	17da      	asrs	r2, r3, #31
 801156e:	189b      	adds	r3, r3, r2
 8011570:	4053      	eors	r3, r2
 8011572:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011576:	2b00      	cmp	r3, #0
 8011578:	da62      	bge.n	8011640 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 801157a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801157c:	3b20      	subs	r3, #32
 801157e:	2b00      	cmp	r3, #0
 8011580:	db05      	blt.n	801158e <calculateSPLQ31+0x2ca>
 8011582:	22a0      	movs	r2, #160	@ 0xa0
 8011584:	18ba      	adds	r2, r7, r2
 8011586:	6812      	ldr	r2, [r2, #0]
 8011588:	409a      	lsls	r2, r3
 801158a:	627a      	str	r2, [r7, #36]	@ 0x24
 801158c:	e010      	b.n	80115b0 <calculateSPLQ31+0x2ec>
 801158e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011590:	2220      	movs	r2, #32
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	22a0      	movs	r2, #160	@ 0xa0
 8011596:	18ba      	adds	r2, r7, r2
 8011598:	6812      	ldr	r2, [r2, #0]
 801159a:	40da      	lsrs	r2, r3
 801159c:	0013      	movs	r3, r2
 801159e:	22a4      	movs	r2, #164	@ 0xa4
 80115a0:	18ba      	adds	r2, r7, r2
 80115a2:	6811      	ldr	r1, [r2, #0]
 80115a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80115a6:	4091      	lsls	r1, r2
 80115a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80115aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115ac:	431a      	orrs	r2, r3
 80115ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80115b0:	21a0      	movs	r1, #160	@ 0xa0
 80115b2:	187b      	adds	r3, r7, r1
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115b8:	409a      	lsls	r2, r3
 80115ba:	623a      	str	r2, [r7, #32]
 80115bc:	6a3b      	ldr	r3, [r7, #32]
 80115be:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80115c0:	187a      	adds	r2, r7, r1
 80115c2:	6013      	str	r3, [r2, #0]
 80115c4:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80115c6:	2300      	movs	r3, #0
 80115c8:	2298      	movs	r2, #152	@ 0x98
 80115ca:	18ba      	adds	r2, r7, r2
 80115cc:	6013      	str	r3, [r2, #0]
 80115ce:	e031      	b.n	8011634 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 80115d0:	2330      	movs	r3, #48	@ 0x30
 80115d2:	18fa      	adds	r2, r7, r3
 80115d4:	2398      	movs	r3, #152	@ 0x98
 80115d6:	18fb      	adds	r3, r7, r3
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	00db      	lsls	r3, r3, #3
 80115dc:	18d3      	adds	r3, r2, r3
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80115e4:	3920      	subs	r1, #32
 80115e6:	2900      	cmp	r1, #0
 80115e8:	db03      	blt.n	80115f2 <calculateSPLQ31+0x32e>
 80115ea:	0010      	movs	r0, r2
 80115ec:	4088      	lsls	r0, r1
 80115ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80115f0:	e00c      	b.n	801160c <calculateSPLQ31+0x348>
 80115f2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80115f4:	2020      	movs	r0, #32
 80115f6:	1a41      	subs	r1, r0, r1
 80115f8:	0010      	movs	r0, r2
 80115fa:	40c8      	lsrs	r0, r1
 80115fc:	0001      	movs	r1, r0
 80115fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011600:	001c      	movs	r4, r3
 8011602:	4084      	lsls	r4, r0
 8011604:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011606:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011608:	4308      	orrs	r0, r1
 801160a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801160c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801160e:	0013      	movs	r3, r2
 8011610:	408b      	lsls	r3, r1
 8011612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011614:	2330      	movs	r3, #48	@ 0x30
 8011616:	18fa      	adds	r2, r7, r3
 8011618:	2098      	movs	r0, #152	@ 0x98
 801161a:	183b      	adds	r3, r7, r0
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	00db      	lsls	r3, r3, #3
 8011620:	18d3      	adds	r3, r2, r3
 8011622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011626:	6019      	str	r1, [r3, #0]
 8011628:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801162a:	183b      	adds	r3, r7, r0
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	3301      	adds	r3, #1
 8011630:	183a      	adds	r2, r7, r0
 8011632:	6013      	str	r3, [r2, #0]
 8011634:	2398      	movs	r3, #152	@ 0x98
 8011636:	18fb      	adds	r3, r7, r3
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b05      	cmp	r3, #5
 801163c:	d9c8      	bls.n	80115d0 <calculateSPLQ31+0x30c>
 801163e:	e06b      	b.n	8011718 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011642:	3b20      	subs	r3, #32
 8011644:	2b00      	cmp	r3, #0
 8011646:	db13      	blt.n	8011670 <calculateSPLQ31+0x3ac>
 8011648:	22a4      	movs	r2, #164	@ 0xa4
 801164a:	18ba      	adds	r2, r7, r2
 801164c:	6812      	ldr	r2, [r2, #0]
 801164e:	40da      	lsrs	r2, r3
 8011650:	61ba      	str	r2, [r7, #24]
 8011652:	e01e      	b.n	8011692 <calculateSPLQ31+0x3ce>
 8011654:	2000181c 	.word	0x2000181c
 8011658:	7fffffff 	.word	0x7fffffff
 801165c:	20001a68 	.word	0x20001a68
 8011660:	200000cc 	.word	0x200000cc
 8011664:	20001a70 	.word	0x20001a70
 8011668:	200000d0 	.word	0x200000d0
 801166c:	200000dc 	.word	0x200000dc
 8011670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011672:	2220      	movs	r2, #32
 8011674:	1ad3      	subs	r3, r2, r3
 8011676:	22a4      	movs	r2, #164	@ 0xa4
 8011678:	18ba      	adds	r2, r7, r2
 801167a:	6812      	ldr	r2, [r2, #0]
 801167c:	409a      	lsls	r2, r3
 801167e:	0013      	movs	r3, r2
 8011680:	22a0      	movs	r2, #160	@ 0xa0
 8011682:	18ba      	adds	r2, r7, r2
 8011684:	6811      	ldr	r1, [r2, #0]
 8011686:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011688:	40d1      	lsrs	r1, r2
 801168a:	61b9      	str	r1, [r7, #24]
 801168c:	69ba      	ldr	r2, [r7, #24]
 801168e:	431a      	orrs	r2, r3
 8011690:	61ba      	str	r2, [r7, #24]
 8011692:	23a4      	movs	r3, #164	@ 0xa4
 8011694:	18fb      	adds	r3, r7, r3
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801169a:	40da      	lsrs	r2, r3
 801169c:	61fa      	str	r2, [r7, #28]
 801169e:	69ba      	ldr	r2, [r7, #24]
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	21a0      	movs	r1, #160	@ 0xa0
 80116a4:	1879      	adds	r1, r7, r1
 80116a6:	600a      	str	r2, [r1, #0]
 80116a8:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80116aa:	2300      	movs	r3, #0
 80116ac:	2294      	movs	r2, #148	@ 0x94
 80116ae:	18ba      	adds	r2, r7, r2
 80116b0:	6013      	str	r3, [r2, #0]
 80116b2:	e02c      	b.n	801170e <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 80116b4:	2330      	movs	r3, #48	@ 0x30
 80116b6:	18fa      	adds	r2, r7, r3
 80116b8:	2394      	movs	r3, #148	@ 0x94
 80116ba:	18fb      	adds	r3, r7, r3
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	18d3      	adds	r3, r2, r3
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	685b      	ldr	r3, [r3, #4]
 80116c6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80116c8:	3920      	subs	r1, #32
 80116ca:	2900      	cmp	r1, #0
 80116cc:	db03      	blt.n	80116d6 <calculateSPLQ31+0x412>
 80116ce:	0018      	movs	r0, r3
 80116d0:	40c8      	lsrs	r0, r1
 80116d2:	0004      	movs	r4, r0
 80116d4:	e00a      	b.n	80116ec <calculateSPLQ31+0x428>
 80116d6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80116d8:	2020      	movs	r0, #32
 80116da:	1a41      	subs	r1, r0, r1
 80116dc:	0018      	movs	r0, r3
 80116de:	4088      	lsls	r0, r1
 80116e0:	0001      	movs	r1, r0
 80116e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80116e4:	0016      	movs	r6, r2
 80116e6:	40c6      	lsrs	r6, r0
 80116e8:	0034      	movs	r4, r6
 80116ea:	430c      	orrs	r4, r1
 80116ec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80116ee:	40cb      	lsrs	r3, r1
 80116f0:	001d      	movs	r5, r3
 80116f2:	2330      	movs	r3, #48	@ 0x30
 80116f4:	18fa      	adds	r2, r7, r3
 80116f6:	2194      	movs	r1, #148	@ 0x94
 80116f8:	187b      	adds	r3, r7, r1
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	00db      	lsls	r3, r3, #3
 80116fe:	18d3      	adds	r3, r2, r3
 8011700:	601c      	str	r4, [r3, #0]
 8011702:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011704:	187b      	adds	r3, r7, r1
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	3301      	adds	r3, #1
 801170a:	187a      	adds	r2, r7, r1
 801170c:	6013      	str	r3, [r2, #0]
 801170e:	2394      	movs	r3, #148	@ 0x94
 8011710:	18fb      	adds	r3, r7, r3
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2b05      	cmp	r3, #5
 8011716:	d9cd      	bls.n	80116b4 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8011718:	230f      	movs	r3, #15
 801171a:	425d      	negs	r5, r3
 801171c:	2305      	movs	r3, #5
 801171e:	425e      	negs	r6, r3
 8011720:	4b4a      	ldr	r3, [pc, #296]	@ (801184c <calculateSPLQ31+0x588>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	4b4a      	ldr	r3, [pc, #296]	@ (8011850 <calculateSPLQ31+0x58c>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	21a0      	movs	r1, #160	@ 0xa0
 801172e:	1879      	adds	r1, r7, r1
 8011730:	6808      	ldr	r0, [r1, #0]
 8011732:	6849      	ldr	r1, [r1, #4]
 8011734:	4c47      	ldr	r4, [pc, #284]	@ (8011854 <calculateSPLQ31+0x590>)
 8011736:	9403      	str	r4, [sp, #12]
 8011738:	4c47      	ldr	r4, [pc, #284]	@ (8011858 <calculateSPLQ31+0x594>)
 801173a:	9402      	str	r4, [sp, #8]
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	9200      	str	r2, [sp, #0]
 8011740:	0033      	movs	r3, r6
 8011742:	002a      	movs	r2, r5
 8011744:	f000 fa86 	bl	8011c54 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011748:	2300      	movs	r3, #0
 801174a:	2290      	movs	r2, #144	@ 0x90
 801174c:	18ba      	adds	r2, r7, r2
 801174e:	6013      	str	r3, [r2, #0]
 8011750:	e026      	b.n	80117a0 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8011752:	2330      	movs	r3, #48	@ 0x30
 8011754:	18fa      	adds	r2, r7, r3
 8011756:	2490      	movs	r4, #144	@ 0x90
 8011758:	193b      	adds	r3, r7, r4
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	00db      	lsls	r3, r3, #3
 801175e:	18d3      	adds	r3, r2, r3
 8011760:	6818      	ldr	r0, [r3, #0]
 8011762:	6859      	ldr	r1, [r3, #4]
 8011764:	230f      	movs	r3, #15
 8011766:	425d      	negs	r5, r3
 8011768:	2305      	movs	r3, #5
 801176a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 801176c:	193b      	adds	r3, r7, r4
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	009a      	lsls	r2, r3, #2
 8011772:	4b3a      	ldr	r3, [pc, #232]	@ (801185c <calculateSPLQ31+0x598>)
 8011774:	18d3      	adds	r3, r2, r3
 8011776:	193a      	adds	r2, r7, r4
 8011778:	6812      	ldr	r2, [r2, #0]
 801177a:	0094      	lsls	r4, r2, #2
 801177c:	4a38      	ldr	r2, [pc, #224]	@ (8011860 <calculateSPLQ31+0x59c>)
 801177e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8011780:	9203      	str	r2, [sp, #12]
 8011782:	9302      	str	r3, [sp, #8]
 8011784:	2300      	movs	r3, #0
 8011786:	9301      	str	r3, [sp, #4]
 8011788:	2300      	movs	r3, #0
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	0033      	movs	r3, r6
 801178e:	002a      	movs	r2, r5
 8011790:	f000 fa60 	bl	8011c54 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011794:	2490      	movs	r4, #144	@ 0x90
 8011796:	193b      	adds	r3, r7, r4
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	3301      	adds	r3, #1
 801179c:	193a      	adds	r2, r7, r4
 801179e:	6013      	str	r3, [r2, #0]
 80117a0:	2390      	movs	r3, #144	@ 0x90
 80117a2:	18fb      	adds	r3, r7, r3
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2b05      	cmp	r3, #5
 80117a8:	d9d3      	bls.n	8011752 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 80117aa:	4b2b      	ldr	r3, [pc, #172]	@ (8011858 <calculateSPLQ31+0x594>)
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	4b2d      	ldr	r3, [pc, #180]	@ (8011864 <calculateSPLQ31+0x5a0>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	18d2      	adds	r2, r2, r3
 80117b4:	4b2b      	ldr	r3, [pc, #172]	@ (8011864 <calculateSPLQ31+0x5a0>)
 80117b6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 80117b8:	4b26      	ldr	r3, [pc, #152]	@ (8011854 <calculateSPLQ31+0x590>)
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	4b2a      	ldr	r3, [pc, #168]	@ (8011868 <calculateSPLQ31+0x5a4>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	18d2      	adds	r2, r2, r3
 80117c2:	4b29      	ldr	r3, [pc, #164]	@ (8011868 <calculateSPLQ31+0x5a4>)
 80117c4:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80117c6:	2300      	movs	r3, #0
 80117c8:	228c      	movs	r2, #140	@ 0x8c
 80117ca:	18ba      	adds	r2, r7, r2
 80117cc:	6013      	str	r3, [r2, #0]
 80117ce:	e025      	b.n	801181c <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80117d0:	4b22      	ldr	r3, [pc, #136]	@ (801185c <calculateSPLQ31+0x598>)
 80117d2:	208c      	movs	r0, #140	@ 0x8c
 80117d4:	183a      	adds	r2, r7, r0
 80117d6:	6812      	ldr	r2, [r2, #0]
 80117d8:	0092      	lsls	r2, r2, #2
 80117da:	58d2      	ldr	r2, [r2, r3]
 80117dc:	4b23      	ldr	r3, [pc, #140]	@ (801186c <calculateSPLQ31+0x5a8>)
 80117de:	1839      	adds	r1, r7, r0
 80117e0:	6809      	ldr	r1, [r1, #0]
 80117e2:	0089      	lsls	r1, r1, #2
 80117e4:	58cb      	ldr	r3, [r1, r3]
 80117e6:	18d1      	adds	r1, r2, r3
 80117e8:	4b20      	ldr	r3, [pc, #128]	@ (801186c <calculateSPLQ31+0x5a8>)
 80117ea:	183a      	adds	r2, r7, r0
 80117ec:	6812      	ldr	r2, [r2, #0]
 80117ee:	0092      	lsls	r2, r2, #2
 80117f0:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80117f2:	4b1b      	ldr	r3, [pc, #108]	@ (8011860 <calculateSPLQ31+0x59c>)
 80117f4:	183a      	adds	r2, r7, r0
 80117f6:	6812      	ldr	r2, [r2, #0]
 80117f8:	0092      	lsls	r2, r2, #2
 80117fa:	58d2      	ldr	r2, [r2, r3]
 80117fc:	4b1c      	ldr	r3, [pc, #112]	@ (8011870 <calculateSPLQ31+0x5ac>)
 80117fe:	1839      	adds	r1, r7, r0
 8011800:	6809      	ldr	r1, [r1, #0]
 8011802:	0089      	lsls	r1, r1, #2
 8011804:	58cb      	ldr	r3, [r1, r3]
 8011806:	18d1      	adds	r1, r2, r3
 8011808:	4b19      	ldr	r3, [pc, #100]	@ (8011870 <calculateSPLQ31+0x5ac>)
 801180a:	183a      	adds	r2, r7, r0
 801180c:	6812      	ldr	r2, [r2, #0]
 801180e:	0092      	lsls	r2, r2, #2
 8011810:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011812:	183b      	adds	r3, r7, r0
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	3301      	adds	r3, #1
 8011818:	183a      	adds	r2, r7, r0
 801181a:	6013      	str	r3, [r2, #0]
 801181c:	238c      	movs	r3, #140	@ 0x8c
 801181e:	18fb      	adds	r3, r7, r3
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2b05      	cmp	r3, #5
 8011824:	d9d4      	bls.n	80117d0 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8011826:	4b13      	ldr	r3, [pc, #76]	@ (8011874 <calculateSPLQ31+0x5b0>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	1c5a      	adds	r2, r3, #1
 801182c:	4b11      	ldr	r3, [pc, #68]	@ (8011874 <calculateSPLQ31+0x5b0>)
 801182e:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8011830:	4b10      	ldr	r3, [pc, #64]	@ (8011874 <calculateSPLQ31+0x5b0>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2b0f      	cmp	r3, #15
 8011836:	d905      	bls.n	8011844 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8011838:	4b0f      	ldr	r3, [pc, #60]	@ (8011878 <calculateSPLQ31+0x5b4>)
 801183a:	2201      	movs	r2, #1
 801183c:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 801183e:	4b0f      	ldr	r3, [pc, #60]	@ (801187c <calculateSPLQ31+0x5b8>)
 8011840:	2200      	movs	r2, #0
 8011842:	701a      	strb	r2, [r3, #0]
    }
}
 8011844:	46c0      	nop			@ (mov r8, r8)
 8011846:	46bd      	mov	sp, r7
 8011848:	b02f      	add	sp, #188	@ 0xbc
 801184a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801184c:	200000d4 	.word	0x200000d4
 8011850:	200000d8 	.word	0x200000d8
 8011854:	20000fe8 	.word	0x20000fe8
 8011858:	20000fe4 	.word	0x20000fe4
 801185c:	20000fec 	.word	0x20000fec
 8011860:	20001004 	.word	0x20001004
 8011864:	20001a2c 	.word	0x20001a2c
 8011868:	20001a30 	.word	0x20001a30
 801186c:	20001a34 	.word	0x20001a34
 8011870:	20001a4c 	.word	0x20001a4c
 8011874:	20001a64 	.word	0x20001a64
 8011878:	20000fd9 	.word	0x20000fd9
 801187c:	20000fd7 	.word	0x20000fd7

08011880 <resetSPLstate>:

static void resetSPLstate(void)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8011886:	4b11      	ldr	r3, [pc, #68]	@ (80118cc <resetSPLstate+0x4c>)
 8011888:	2200      	movs	r2, #0
 801188a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 801188c:	4b10      	ldr	r3, [pc, #64]	@ (80118d0 <resetSPLstate+0x50>)
 801188e:	2200      	movs	r2, #0
 8011890:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 8011892:	4b10      	ldr	r3, [pc, #64]	@ (80118d4 <resetSPLstate+0x54>)
 8011894:	2200      	movs	r2, #0
 8011896:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011898:	2300      	movs	r3, #0
 801189a:	607b      	str	r3, [r7, #4]
 801189c:	e00c      	b.n	80118b8 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 801189e:	4b0e      	ldr	r3, [pc, #56]	@ (80118d8 <resetSPLstate+0x58>)
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	0092      	lsls	r2, r2, #2
 80118a4:	2100      	movs	r1, #0
 80118a6:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 80118a8:	4b0c      	ldr	r3, [pc, #48]	@ (80118dc <resetSPLstate+0x5c>)
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	0092      	lsls	r2, r2, #2
 80118ae:	2100      	movs	r1, #0
 80118b0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	3301      	adds	r3, #1
 80118b6:	607b      	str	r3, [r7, #4]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2b05      	cmp	r3, #5
 80118bc:	d9ef      	bls.n	801189e <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 80118be:	4b08      	ldr	r3, [pc, #32]	@ (80118e0 <resetSPLstate+0x60>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	701a      	strb	r2, [r3, #0]
}
 80118c4:	46c0      	nop			@ (mov r8, r8)
 80118c6:	46bd      	mov	sp, r7
 80118c8:	b002      	add	sp, #8
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	20001a2c 	.word	0x20001a2c
 80118d0:	20001a30 	.word	0x20001a30
 80118d4:	20001a64 	.word	0x20001a64
 80118d8:	20001a34 	.word	0x20001a34
 80118dc:	20001a4c 	.word	0x20001a4c
 80118e0:	20000fd9 	.word	0x20000fd9

080118e4 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80118e4:	b5b0      	push	{r4, r5, r7, lr}
 80118e6:	b090      	sub	sp, #64	@ 0x40
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	0019      	movs	r1, r3
 80118f0:	1dfb      	adds	r3, r7, #7
 80118f2:	701a      	strb	r2, [r3, #0]
 80118f4:	1dbb      	adds	r3, r7, #6
 80118f6:	1c0a      	adds	r2, r1, #0
 80118f8:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80118fa:	1dfb      	adds	r3, r7, #7
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d005      	beq.n	801190e <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 8011902:	4b3b      	ldr	r3, [pc, #236]	@ (80119f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011904:	2200      	movs	r2, #0
 8011906:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8011908:	4b3a      	ldr	r3, [pc, #232]	@ (80119f4 <getFilteredMaxAmplitudeQ31+0x110>)
 801190a:	2200      	movs	r2, #0
 801190c:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 801190e:	2300      	movs	r3, #0
 8011910:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 8011912:	2300      	movs	r3, #0
 8011914:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8011916:	2305      	movs	r3, #5
 8011918:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 801191a:	2300      	movs	r3, #0
 801191c:	637b      	str	r3, [r7, #52]	@ 0x34
 801191e:	e040      	b.n	80119a2 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8011920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	68fa      	ldr	r2, [r7, #12]
 8011926:	18d3      	adds	r3, r2, r3
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801192c:	409a      	lsls	r2, r3
 801192e:	0013      	movs	r3, r2
 8011930:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 8011932:	4b30      	ldr	r3, [pc, #192]	@ (80119f4 <getFilteredMaxAmplitudeQ31+0x110>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	425a      	negs	r2, r3
 8011938:	4b2e      	ldr	r3, [pc, #184]	@ (80119f4 <getFilteredMaxAmplitudeQ31+0x110>)
 801193a:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 801193c:	2418      	movs	r4, #24
 801193e:	193a      	adds	r2, r7, r4
 8011940:	492c      	ldr	r1, [pc, #176]	@ (80119f4 <getFilteredMaxAmplitudeQ31+0x110>)
 8011942:	231c      	movs	r3, #28
 8011944:	18f8      	adds	r0, r7, r3
 8011946:	2301      	movs	r3, #1
 8011948:	f012 fc34 	bl	80241b4 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 801194c:	2514      	movs	r5, #20
 801194e:	197a      	adds	r2, r7, r5
 8011950:	1939      	adds	r1, r7, r4
 8011952:	4829      	ldr	r0, [pc, #164]	@ (80119f8 <getFilteredMaxAmplitudeQ31+0x114>)
 8011954:	2301      	movs	r3, #1
 8011956:	f012 fbfb 	bl	8024150 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 801195a:	2410      	movs	r4, #16
 801195c:	193a      	adds	r2, r7, r4
 801195e:	4924      	ldr	r1, [pc, #144]	@ (80119f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011960:	4826      	ldr	r0, [pc, #152]	@ (80119fc <getFilteredMaxAmplitudeQ31+0x118>)
 8011962:	2301      	movs	r3, #1
 8011964:	f012 fbf4 	bl	8024150 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8011968:	4a21      	ldr	r2, [pc, #132]	@ (80119f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801196a:	1939      	adds	r1, r7, r4
 801196c:	1978      	adds	r0, r7, r5
 801196e:	2301      	movs	r3, #1
 8011970:	f012 fc20 	bl	80241b4 <arm_add_q31>

        lastData = fx;
 8011974:	69fa      	ldr	r2, [r7, #28]
 8011976:	4b1f      	ldr	r3, [pc, #124]	@ (80119f4 <getFilteredMaxAmplitudeQ31+0x110>)
 8011978:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 801197a:	4b1d      	ldr	r3, [pc, #116]	@ (80119f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011980:	429a      	cmp	r2, r3
 8011982:	da03      	bge.n	801198c <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8011984:	4b1a      	ldr	r3, [pc, #104]	@ (80119f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801198a:	e007      	b.n	801199c <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 801198c:	4b18      	ldr	r3, [pc, #96]	@ (80119f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011992:	429a      	cmp	r2, r3
 8011994:	dd02      	ble.n	801199c <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8011996:	4b16      	ldr	r3, [pc, #88]	@ (80119f0 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 801199c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801199e:	3301      	adds	r3, #1
 80119a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80119a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d3ba      	bcc.n	8011920 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 80119aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ac:	17da      	asrs	r2, r3, #31
 80119ae:	189b      	adds	r3, r3, r2
 80119b0:	4053      	eors	r3, r2
 80119b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 80119b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 80119b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119bc:	4293      	cmp	r3, r2
 80119be:	d200      	bcs.n	80119c2 <getFilteredMaxAmplitudeQ31+0xde>
 80119c0:	0013      	movs	r3, r2
 80119c2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80119c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c8:	40da      	lsrs	r2, r3
 80119ca:	0013      	movs	r3, r2
 80119cc:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80119ce:	1dbb      	adds	r3, r7, #6
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d007      	beq.n	80119e6 <getFilteredMaxAmplitudeQ31+0x102>
 80119d6:	4b0a      	ldr	r3, [pc, #40]	@ (8011a00 <getFilteredMaxAmplitudeQ31+0x11c>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	6a3a      	ldr	r2, [r7, #32]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d902      	bls.n	80119e6 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80119e0:	4b07      	ldr	r3, [pc, #28]	@ (8011a00 <getFilteredMaxAmplitudeQ31+0x11c>)
 80119e2:	6a3a      	ldr	r2, [r7, #32]
 80119e4:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80119e6:	6a3b      	ldr	r3, [r7, #32]
}
 80119e8:	0018      	movs	r0, r3
 80119ea:	46bd      	mov	sp, r7
 80119ec:	b010      	add	sp, #64	@ 0x40
 80119ee:	bdb0      	pop	{r4, r5, r7, pc}
 80119f0:	20001e68 	.word	0x20001e68
 80119f4:	20001e6c 	.word	0x20001e6c
 80119f8:	0802e2c0 	.word	0x0802e2c0
 80119fc:	0802e2c4 	.word	0x0802e2c4
 8011a00:	20000fe0 	.word	0x20000fe0

08011a04 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b086      	sub	sp, #24
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	60f8      	str	r0, [r7, #12]
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8011a10:	4913      	ldr	r1, [pc, #76]	@ (8011a60 <floatToIntAndFrac2dp+0x5c>)
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f7ef fb14 	bl	8001040 <__aeabi_fmul>
 8011a18:	1c03      	adds	r3, r0, #0
 8011a1a:	1c18      	adds	r0, r3, #0
 8011a1c:	f017 f8c4 	bl	8028ba8 <roundf>
 8011a20:	1c03      	adds	r3, r0, #0
 8011a22:	1c18      	adds	r0, r3, #0
 8011a24:	f7ee fdfa 	bl	800061c <__aeabi_f2uiz>
 8011a28:	0003      	movs	r3, r0
 8011a2a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	2164      	movs	r1, #100	@ 0x64
 8011a30:	0018      	movs	r0, r3
 8011a32:	f7ee fbb7 	bl	80001a4 <__udivsi3>
 8011a36:	0003      	movs	r3, r0
 8011a38:	001a      	movs	r2, r3
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	b2da      	uxtb	r2, r3
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	2164      	movs	r1, #100	@ 0x64
 8011a4a:	434b      	muls	r3, r1
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	1ad3      	subs	r3, r2, r3
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	701a      	strb	r2, [r3, #0]
}
 8011a56:	46c0      	nop			@ (mov r8, r8)
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	b006      	add	sp, #24
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	46c0      	nop			@ (mov r8, r8)
 8011a60:	42c80000 	.word	0x42c80000

08011a64 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b086      	sub	sp, #24
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8011a70:	4914      	ldr	r1, [pc, #80]	@ (8011ac4 <floatToIntAndFrac1dp+0x60>)
 8011a72:	68f8      	ldr	r0, [r7, #12]
 8011a74:	f7ef fae4 	bl	8001040 <__aeabi_fmul>
 8011a78:	1c03      	adds	r3, r0, #0
 8011a7a:	1c18      	adds	r0, r3, #0
 8011a7c:	f017 f894 	bl	8028ba8 <roundf>
 8011a80:	1c03      	adds	r3, r0, #0
 8011a82:	1c18      	adds	r0, r3, #0
 8011a84:	f7ee fdca 	bl	800061c <__aeabi_f2uiz>
 8011a88:	0003      	movs	r3, r0
 8011a8a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	210a      	movs	r1, #10
 8011a90:	0018      	movs	r0, r3
 8011a92:	f7ee fb87 	bl	80001a4 <__udivsi3>
 8011a96:	0003      	movs	r3, r0
 8011a98:	001a      	movs	r2, r3
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	b2da      	uxtb	r2, r3
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	1c19      	adds	r1, r3, #0
 8011aaa:	0089      	lsls	r1, r1, #2
 8011aac:	18cb      	adds	r3, r1, r3
 8011aae:	18db      	adds	r3, r3, r3
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	1ad3      	subs	r3, r2, r3
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	701a      	strb	r2, [r3, #0]
}
 8011aba:	46c0      	nop			@ (mov r8, r8)
 8011abc:	46bd      	mov	sp, r7
 8011abe:	b006      	add	sp, #24
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	46c0      	nop			@ (mov r8, r8)
 8011ac4:	41200000 	.word	0x41200000

08011ac8 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8011ac8:	b590      	push	{r4, r7, lr}
 8011aca:	b087      	sub	sp, #28
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	60f8      	str	r0, [r7, #12]
 8011ad0:	60b9      	str	r1, [r7, #8]
 8011ad2:	607a      	str	r2, [r7, #4]
 8011ad4:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f7ef fea6 	bl	8001828 <__aeabi_i2f>
 8011adc:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8011ade:	6838      	ldr	r0, [r7, #0]
 8011ae0:	f7ef fea2 	bl	8001828 <__aeabi_i2f>
 8011ae4:	1c03      	adds	r3, r0, #0
 8011ae6:	4918      	ldr	r1, [pc, #96]	@ (8011b48 <sumToIntAverage+0x80>)
 8011ae8:	1c18      	adds	r0, r3, #0
 8011aea:	f7ef f8db 	bl	8000ca4 <__aeabi_fdiv>
 8011aee:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8011af0:	1c19      	adds	r1, r3, #0
 8011af2:	1c20      	adds	r0, r4, #0
 8011af4:	f7ee fee4 	bl	80008c0 <__aeabi_fadd>
 8011af8:	1c03      	adds	r3, r0, #0
 8011afa:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8011afc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011afe:	f7ef fee3 	bl	80018c8 <__aeabi_ui2f>
 8011b02:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8011b04:	1c19      	adds	r1, r3, #0
 8011b06:	1c20      	adds	r0, r4, #0
 8011b08:	f7ef f8cc 	bl	8000ca4 <__aeabi_fdiv>
 8011b0c:	1c03      	adds	r3, r0, #0
 8011b0e:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8011b10:	2300      	movs	r3, #0
 8011b12:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	2310      	movs	r3, #16
 8011b18:	18f9      	adds	r1, r7, r3
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	1c18      	adds	r0, r3, #0
 8011b1e:	f7ff ffa1 	bl	8011a64 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	2bff      	cmp	r3, #255	@ 0xff
 8011b26:	d906      	bls.n	8011b36 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	22ff      	movs	r2, #255	@ 0xff
 8011b2c:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	2209      	movs	r2, #9
 8011b32:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8011b34:	e003      	b.n	8011b3e <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	701a      	strb	r2, [r3, #0]
}
 8011b3e:	46c0      	nop			@ (mov r8, r8)
 8011b40:	46bd      	mov	sp, r7
 8011b42:	b007      	add	sp, #28
 8011b44:	bd90      	pop	{r4, r7, pc}
 8011b46:	46c0      	nop			@ (mov r8, r8)
 8011b48:	41200000 	.word	0x41200000

08011b4c <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	607a      	str	r2, [r7, #4]
 8011b58:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	2280      	movs	r2, #128	@ 0x80
 8011b5e:	0612      	lsls	r2, r2, #24
 8011b60:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	4a18      	ldr	r2, [pc, #96]	@ (8011bc8 <findMinMax+0x7c>)
 8011b66:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8011b68:	2300      	movs	r3, #0
 8011b6a:	617b      	str	r3, [r7, #20]
 8011b6c:	e022      	b.n	8011bb4 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	18d3      	adds	r3, r2, r3
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	da06      	bge.n	8011b8e <findMinMax+0x42>
        {
            min[0] = array[i];
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	18d3      	adds	r3, r2, r3
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	009b      	lsls	r3, r3, #2
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	18d3      	adds	r3, r2, r3
 8011b96:	681a      	ldr	r2, [r3, #0]
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	dd06      	ble.n	8011bae <findMinMax+0x62>
        {
            max[0] = array[i];
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	18d3      	adds	r3, r2, r3
 8011ba8:	681a      	ldr	r2, [r3, #0]
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	617b      	str	r3, [r7, #20]
 8011bb4:	697a      	ldr	r2, [r7, #20]
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d3d8      	bcc.n	8011b6e <findMinMax+0x22>
        }
    }
}
 8011bbc:	46c0      	nop			@ (mov r8, r8)
 8011bbe:	46c0      	nop			@ (mov r8, r8)
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	b006      	add	sp, #24
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	46c0      	nop			@ (mov r8, r8)
 8011bc8:	7fffffff 	.word	0x7fffffff

08011bcc <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d302      	bcc.n	8011be8 <getPo2factor+0x1c>
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d107      	bne.n	8011bf8 <getPo2factor+0x2c>
    {
        return 0;
 8011be8:	2300      	movs	r3, #0
 8011bea:	e00d      	b.n	8011c08 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	085b      	lsrs	r3, r3, #1
 8011bf0:	607b      	str	r3, [r7, #4]
        bitShift++;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d2f5      	bcs.n	8011bec <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	3b01      	subs	r3, #1
 8011c04:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8011c06:	68fb      	ldr	r3, [r7, #12]
}
 8011c08:	0018      	movs	r0, r3
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	b004      	add	sp, #16
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b086      	sub	sp, #24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
 8011c1c:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	f7ef fe52 	bl	80018c8 <__aeabi_ui2f>
 8011c24:	1c03      	adds	r3, r0, #0
 8011c26:	1c19      	adds	r1, r3, #0
 8011c28:	68b8      	ldr	r0, [r7, #8]
 8011c2a:	f7ef fa09 	bl	8001040 <__aeabi_fmul>
 8011c2e:	1c03      	adds	r3, r0, #0
 8011c30:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8011c32:	2300      	movs	r3, #0
 8011c34:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8011c36:	683a      	ldr	r2, [r7, #0]
 8011c38:	2310      	movs	r3, #16
 8011c3a:	18f9      	adds	r1, r7, r3
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	1c18      	adds	r0, r3, #0
 8011c40:	f7ff fee0 	bl	8011a04 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	801a      	strh	r2, [r3, #0]
}
 8011c4c:	46c0      	nop			@ (mov r8, r8)
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	b006      	add	sp, #24
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60b8      	str	r0, [r7, #8]
 8011c5c:	60f9      	str	r1, [r7, #12]
 8011c5e:	607a      	str	r2, [r7, #4]
 8011c60:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8011c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c64:	6a3a      	ldr	r2, [r7, #32]
 8011c66:	68b8      	ldr	r0, [r7, #8]
 8011c68:	68f9      	ldr	r1, [r7, #12]
 8011c6a:	f7f9 fedd 	bl	800ba28 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8011c6e:	6a3b      	ldr	r3, [r7, #32]
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	18d2      	adds	r2, r2, r3
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	18d2      	adds	r2, r2, r3
 8011c7a:	6a3b      	ldr	r3, [r7, #32]
 8011c7c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	18d2      	adds	r2, r2, r3
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	18d2      	adds	r2, r2, r3
 8011c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8c:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8011c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	0011      	movs	r1, r2
 8011c94:	0018      	movs	r0, r3
 8011c96:	f7f9 ff57 	bl	800bb48 <correctIntFracNumber>
}
 8011c9a:	46c0      	nop			@ (mov r8, r8)
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	b004      	add	sp, #16
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b086      	sub	sp, #24
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	60f8      	str	r0, [r7, #12]
 8011caa:	60b9      	str	r1, [r7, #8]
 8011cac:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	613b      	str	r3, [r7, #16]
 8011cb6:	e019      	b.n	8011cec <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	005b      	lsls	r3, r3, #1
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	18d3      	adds	r3, r2, r3
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011cc4:	693a      	ldr	r2, [r7, #16]
 8011cc6:	3201      	adds	r2, #1
 8011cc8:	0052      	lsls	r2, r2, #1
 8011cca:	68f9      	ldr	r1, [r7, #12]
 8011ccc:	188a      	adds	r2, r1, r2
 8011cce:	8812      	ldrh	r2, [r2, #0]
 8011cd0:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011cd2:	0019      	movs	r1, r3
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011cdc:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011cde:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	3304      	adds	r3, #4
 8011cea:	613b      	str	r3, [r7, #16]
 8011cec:	693a      	ldr	r2, [r7, #16]
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d3e1      	bcc.n	8011cb8 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8011cf4:	46c0      	nop			@ (mov r8, r8)
 8011cf6:	46c0      	nop			@ (mov r8, r8)
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	b006      	add	sp, #24
 8011cfc:	bd80      	pop	{r7, pc}
	...

08011d00 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 8011d00:	b580      	push	{r7, lr}
 8011d02:	af00      	add	r7, sp, #0
  init = false;
 8011d04:	4b02      	ldr	r3, [pc, #8]	@ (8011d10 <InitDone+0x10>)
 8011d06:	2200      	movs	r2, #0
 8011d08:	701a      	strb	r2, [r3, #0]
}
 8011d0a:	46c0      	nop			@ (mov r8, r8)
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	200000e0 	.word	0x200000e0

08011d14 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 8011d1a:	f7f7 f9f5 	bl	8009108 <ReadBatteryVoltage>
 8011d1e:	1c02      	adds	r2, r0, #0
 8011d20:	4b25      	ldr	r3, [pc, #148]	@ (8011db8 <batteryChargeCheck+0xa4>)
 8011d22:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 8011d24:	4b24      	ldr	r3, [pc, #144]	@ (8011db8 <batteryChargeCheck+0xa4>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4924      	ldr	r1, [pc, #144]	@ (8011dbc <batteryChargeCheck+0xa8>)
 8011d2a:	1c18      	adds	r0, r3, #0
 8011d2c:	f7ee fc00 	bl	8000530 <__aeabi_fcmplt>
 8011d30:	1e03      	subs	r3, r0, #0
 8011d32:	d002      	beq.n	8011d3a <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 8011d34:	1dfb      	adds	r3, r7, #7
 8011d36:	2200      	movs	r2, #0
 8011d38:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 8011d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8011db8 <batteryChargeCheck+0xa4>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	491f      	ldr	r1, [pc, #124]	@ (8011dbc <batteryChargeCheck+0xa8>)
 8011d40:	1c18      	adds	r0, r3, #0
 8011d42:	f7ee fc13 	bl	800056c <__aeabi_fcmpge>
 8011d46:	1e03      	subs	r3, r0, #0
 8011d48:	d00d      	beq.n	8011d66 <batteryChargeCheck+0x52>
 8011d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8011db8 <batteryChargeCheck+0xa4>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	1c18      	adds	r0, r3, #0
 8011d50:	f7f1 fda0 	bl	8003894 <__aeabi_f2d>
 8011d54:	4a1a      	ldr	r2, [pc, #104]	@ (8011dc0 <batteryChargeCheck+0xac>)
 8011d56:	4b1b      	ldr	r3, [pc, #108]	@ (8011dc4 <batteryChargeCheck+0xb0>)
 8011d58:	f7ee fbb0 	bl	80004bc <__aeabi_dcmplt>
 8011d5c:	1e03      	subs	r3, r0, #0
 8011d5e:	d002      	beq.n	8011d66 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8011d60:	1dfb      	adds	r3, r7, #7
 8011d62:	2201      	movs	r2, #1
 8011d64:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 8011d66:	4b14      	ldr	r3, [pc, #80]	@ (8011db8 <batteryChargeCheck+0xa4>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	1c18      	adds	r0, r3, #0
 8011d6c:	f7f1 fd92 	bl	8003894 <__aeabi_f2d>
 8011d70:	4a13      	ldr	r2, [pc, #76]	@ (8011dc0 <batteryChargeCheck+0xac>)
 8011d72:	4b14      	ldr	r3, [pc, #80]	@ (8011dc4 <batteryChargeCheck+0xb0>)
 8011d74:	f7ee fbc0 	bl	80004f8 <__aeabi_dcmpge>
 8011d78:	1e03      	subs	r3, r0, #0
 8011d7a:	d00b      	beq.n	8011d94 <batteryChargeCheck+0x80>
 8011d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8011db8 <batteryChargeCheck+0xa4>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2181      	movs	r1, #129	@ 0x81
 8011d82:	05c9      	lsls	r1, r1, #23
 8011d84:	1c18      	adds	r0, r3, #0
 8011d86:	f7ee fbd3 	bl	8000530 <__aeabi_fcmplt>
 8011d8a:	1e03      	subs	r3, r0, #0
 8011d8c:	d002      	beq.n	8011d94 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 8011d8e:	1dfb      	adds	r3, r7, #7
 8011d90:	2202      	movs	r2, #2
 8011d92:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8011d94:	4b08      	ldr	r3, [pc, #32]	@ (8011db8 <batteryChargeCheck+0xa4>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2181      	movs	r1, #129	@ 0x81
 8011d9a:	05c9      	lsls	r1, r1, #23
 8011d9c:	1c18      	adds	r0, r3, #0
 8011d9e:	f7ee fbe5 	bl	800056c <__aeabi_fcmpge>
 8011da2:	1e03      	subs	r3, r0, #0
 8011da4:	d002      	beq.n	8011dac <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8011da6:	1dfb      	adds	r3, r7, #7
 8011da8:	2203      	movs	r2, #3
 8011daa:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8011dac:	1dfb      	adds	r3, r7, #7
 8011dae:	781b      	ldrb	r3, [r3, #0]
}
 8011db0:	0018      	movs	r0, r3
 8011db2:	46bd      	mov	sp, r7
 8011db4:	b002      	add	sp, #8
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	20001e80 	.word	0x20001e80
 8011dbc:	40600000 	.word	0x40600000
 8011dc0:	9999999a 	.word	0x9999999a
 8011dc4:	400d9999 	.word	0x400d9999

08011dc8 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8011dc8:	b5b0      	push	{r4, r5, r7, lr}
 8011dca:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8011dcc:	f7f7 f9fe 	bl	80091cc <ReadSolarVoltage>
 8011dd0:	0003      	movs	r3, r0
 8011dd2:	001a      	movs	r2, r3
 8011dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8011e40 <Calculate_LED_ON+0x78>)
 8011dd6:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8011dd8:	4b19      	ldr	r3, [pc, #100]	@ (8011e40 <Calculate_LED_ON+0x78>)
 8011dda:	881b      	ldrh	r3, [r3, #0]
 8011ddc:	4a19      	ldr	r2, [pc, #100]	@ (8011e44 <Calculate_LED_ON+0x7c>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d802      	bhi.n	8011de8 <Calculate_LED_ON+0x20>
    solmV = 2900;
 8011de2:	4b17      	ldr	r3, [pc, #92]	@ (8011e40 <Calculate_LED_ON+0x78>)
 8011de4:	4a18      	ldr	r2, [pc, #96]	@ (8011e48 <Calculate_LED_ON+0x80>)
 8011de6:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8011de8:	4b15      	ldr	r3, [pc, #84]	@ (8011e40 <Calculate_LED_ON+0x78>)
 8011dea:	881b      	ldrh	r3, [r3, #0]
 8011dec:	4a17      	ldr	r2, [pc, #92]	@ (8011e4c <Calculate_LED_ON+0x84>)
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d902      	bls.n	8011df8 <Calculate_LED_ON+0x30>
    solmV = 4700;
 8011df2:	4b13      	ldr	r3, [pc, #76]	@ (8011e40 <Calculate_LED_ON+0x78>)
 8011df4:	4a15      	ldr	r2, [pc, #84]	@ (8011e4c <Calculate_LED_ON+0x84>)
 8011df6:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8011df8:	4b11      	ldr	r3, [pc, #68]	@ (8011e40 <Calculate_LED_ON+0x78>)
 8011dfa:	881b      	ldrh	r3, [r3, #0]
 8011dfc:	0018      	movs	r0, r3
 8011dfe:	f7f1 fcf7 	bl	80037f0 <__aeabi_i2d>
 8011e02:	0004      	movs	r4, r0
 8011e04:	000d      	movs	r5, r1
 8011e06:	4b0e      	ldr	r3, [pc, #56]	@ (8011e40 <Calculate_LED_ON+0x78>)
 8011e08:	881b      	ldrh	r3, [r3, #0]
 8011e0a:	001a      	movs	r2, r3
 8011e0c:	4b10      	ldr	r3, [pc, #64]	@ (8011e50 <Calculate_LED_ON+0x88>)
 8011e0e:	1a9b      	subs	r3, r3, r2
 8011e10:	0018      	movs	r0, r3
 8011e12:	f7f1 fced 	bl	80037f0 <__aeabi_i2d>
 8011e16:	2200      	movs	r2, #0
 8011e18:	4b0e      	ldr	r3, [pc, #56]	@ (8011e54 <Calculate_LED_ON+0x8c>)
 8011e1a:	f7f0 fd9b 	bl	8002954 <__aeabi_dmul>
 8011e1e:	0002      	movs	r2, r0
 8011e20:	000b      	movs	r3, r1
 8011e22:	0020      	movs	r0, r4
 8011e24:	0029      	movs	r1, r5
 8011e26:	f7ef fd95 	bl	8001954 <__aeabi_dadd>
 8011e2a:	0002      	movs	r2, r0
 8011e2c:	000b      	movs	r3, r1
 8011e2e:	0010      	movs	r0, r2
 8011e30:	0019      	movs	r1, r3
 8011e32:	f7ee fc0b 	bl	800064c <__aeabi_d2uiz>
 8011e36:	0003      	movs	r3, r0
 8011e38:	b29b      	uxth	r3, r3
}
 8011e3a:	0018      	movs	r0, r3
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8011e40:	20001e84 	.word	0x20001e84
 8011e44:	00000b53 	.word	0x00000b53
 8011e48:	00000b54 	.word	0x00000b54
 8011e4c:	0000125c 	.word	0x0000125c
 8011e50:	00000dee 	.word	0x00000dee
 8011e54:	3ff80000 	.word	0x3ff80000

08011e58 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8011e58:	b590      	push	{r4, r7, lr}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	0004      	movs	r4, r0
 8011e60:	0008      	movs	r0, r1
 8011e62:	0011      	movs	r1, r2
 8011e64:	1dbb      	adds	r3, r7, #6
 8011e66:	1c22      	adds	r2, r4, #0
 8011e68:	801a      	strh	r2, [r3, #0]
 8011e6a:	1d3b      	adds	r3, r7, #4
 8011e6c:	1c02      	adds	r2, r0, #0
 8011e6e:	801a      	strh	r2, [r3, #0]
 8011e70:	1cbb      	adds	r3, r7, #2
 8011e72:	1c0a      	adds	r2, r1, #0
 8011e74:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011e76:	4b0f      	ldr	r3, [pc, #60]	@ (8011eb4 <SetStatusLED+0x5c>)
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d107      	bne.n	8011e8e <SetStatusLED+0x36>
 8011e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8011eb8 <SetStatusLED+0x60>)
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d103      	bne.n	8011e8e <SetStatusLED+0x36>
 8011e86:	4b0d      	ldr	r3, [pc, #52]	@ (8011ebc <SetStatusLED+0x64>)
 8011e88:	781b      	ldrb	r3, [r3, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d00e      	beq.n	8011eac <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8011e8e:	2380      	movs	r3, #128	@ 0x80
 8011e90:	05db      	lsls	r3, r3, #23
 8011e92:	1dba      	adds	r2, r7, #6
 8011e94:	8812      	ldrh	r2, [r2, #0]
 8011e96:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8011e98:	2380      	movs	r3, #128	@ 0x80
 8011e9a:	05db      	lsls	r3, r3, #23
 8011e9c:	1d3a      	adds	r2, r7, #4
 8011e9e:	8812      	ldrh	r2, [r2, #0]
 8011ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8011ea2:	2380      	movs	r3, #128	@ 0x80
 8011ea4:	05db      	lsls	r3, r3, #23
 8011ea6:	1cba      	adds	r2, r7, #2
 8011ea8:	8812      	ldrh	r2, [r2, #0]
 8011eaa:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011eac:	46c0      	nop			@ (mov r8, r8)
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	b003      	add	sp, #12
 8011eb2:	bd90      	pop	{r4, r7, pc}
 8011eb4:	20001e71 	.word	0x20001e71
 8011eb8:	200000e0 	.word	0x200000e0
 8011ebc:	20001e72 	.word	0x20001e72

08011ec0 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8011ec0:	b590      	push	{r4, r7, lr}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	0004      	movs	r4, r0
 8011ec8:	0008      	movs	r0, r1
 8011eca:	0011      	movs	r1, r2
 8011ecc:	1dfb      	adds	r3, r7, #7
 8011ece:	1c22      	adds	r2, r4, #0
 8011ed0:	701a      	strb	r2, [r3, #0]
 8011ed2:	1dbb      	adds	r3, r7, #6
 8011ed4:	1c02      	adds	r2, r0, #0
 8011ed6:	701a      	strb	r2, [r3, #0]
 8011ed8:	1d7b      	adds	r3, r7, #5
 8011eda:	1c0a      	adds	r2, r1, #0
 8011edc:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8011ede:	4b19      	ldr	r3, [pc, #100]	@ (8011f44 <SetDBLED+0x84>)
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d107      	bne.n	8011ef6 <SetDBLED+0x36>
 8011ee6:	4b18      	ldr	r3, [pc, #96]	@ (8011f48 <SetDBLED+0x88>)
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d103      	bne.n	8011ef6 <SetDBLED+0x36>
 8011eee:	4b17      	ldr	r3, [pc, #92]	@ (8011f4c <SetDBLED+0x8c>)
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d022      	beq.n	8011f3c <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8011ef6:	1dfb      	adds	r3, r7, #7
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	2201      	movs	r2, #1
 8011efc:	4053      	eors	r3, r2
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	001a      	movs	r2, r3
 8011f02:	4b13      	ldr	r3, [pc, #76]	@ (8011f50 <SetDBLED+0x90>)
 8011f04:	2101      	movs	r1, #1
 8011f06:	0018      	movs	r0, r3
 8011f08:	f003 fac5 	bl	8015496 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8011f0c:	1dbb      	adds	r3, r7, #6
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	2201      	movs	r2, #1
 8011f12:	4053      	eors	r3, r2
 8011f14:	b2db      	uxtb	r3, r3
 8011f16:	001a      	movs	r2, r3
 8011f18:	2380      	movs	r3, #128	@ 0x80
 8011f1a:	005b      	lsls	r3, r3, #1
 8011f1c:	480c      	ldr	r0, [pc, #48]	@ (8011f50 <SetDBLED+0x90>)
 8011f1e:	0019      	movs	r1, r3
 8011f20:	f003 fab9 	bl	8015496 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8011f24:	1d7b      	adds	r3, r7, #5
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	2201      	movs	r2, #1
 8011f2a:	4053      	eors	r3, r2
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	001a      	movs	r2, r3
 8011f30:	2380      	movs	r3, #128	@ 0x80
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	4806      	ldr	r0, [pc, #24]	@ (8011f50 <SetDBLED+0x90>)
 8011f36:	0019      	movs	r1, r3
 8011f38:	f003 faad 	bl	8015496 <HAL_GPIO_WritePin>
  }
}
 8011f3c:	46c0      	nop			@ (mov r8, r8)
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	b003      	add	sp, #12
 8011f42:	bd90      	pop	{r4, r7, pc}
 8011f44:	20001e71 	.word	0x20001e71
 8011f48:	200000e0 	.word	0x200000e0
 8011f4c:	20001e72 	.word	0x20001e72
 8011f50:	50000400 	.word	0x50000400

08011f54 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8011f54:	b590      	push	{r4, r7, lr}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	0004      	movs	r4, r0
 8011f5c:	0008      	movs	r0, r1
 8011f5e:	0011      	movs	r1, r2
 8011f60:	1dbb      	adds	r3, r7, #6
 8011f62:	1c22      	adds	r2, r4, #0
 8011f64:	801a      	strh	r2, [r3, #0]
 8011f66:	1d3b      	adds	r3, r7, #4
 8011f68:	1c02      	adds	r2, r0, #0
 8011f6a:	801a      	strh	r2, [r3, #0]
 8011f6c:	1cbb      	adds	r3, r7, #2
 8011f6e:	1c0a      	adds	r2, r1, #0
 8011f70:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011f72:	4b0e      	ldr	r3, [pc, #56]	@ (8011fac <SetVocLED+0x58>)
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d107      	bne.n	8011f8a <SetVocLED+0x36>
 8011f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8011fb0 <SetVocLED+0x5c>)
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d103      	bne.n	8011f8a <SetVocLED+0x36>
 8011f82:	4b0c      	ldr	r3, [pc, #48]	@ (8011fb4 <SetVocLED+0x60>)
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00b      	beq.n	8011fa2 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8011f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8011fb8 <SetVocLED+0x64>)
 8011f8c:	1dba      	adds	r2, r7, #6
 8011f8e:	8812      	ldrh	r2, [r2, #0]
 8011f90:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8011f92:	4b09      	ldr	r3, [pc, #36]	@ (8011fb8 <SetVocLED+0x64>)
 8011f94:	1d3a      	adds	r2, r7, #4
 8011f96:	8812      	ldrh	r2, [r2, #0]
 8011f98:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8011f9a:	4b07      	ldr	r3, [pc, #28]	@ (8011fb8 <SetVocLED+0x64>)
 8011f9c:	1cba      	adds	r2, r7, #2
 8011f9e:	8812      	ldrh	r2, [r2, #0]
 8011fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011fa2:	46c0      	nop			@ (mov r8, r8)
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	b003      	add	sp, #12
 8011fa8:	bd90      	pop	{r4, r7, pc}
 8011faa:	46c0      	nop			@ (mov r8, r8)
 8011fac:	20001e71 	.word	0x20001e71
 8011fb0:	200000e0 	.word	0x200000e0
 8011fb4:	20001e72 	.word	0x20001e72
 8011fb8:	40000400 	.word	0x40000400

08011fbc <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011fc0:	4b08      	ldr	r3, [pc, #32]	@ (8011fe4 <SetMeasurementIndicator+0x28>)
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d103      	bne.n	8011fd0 <SetMeasurementIndicator+0x14>
 8011fc8:	4b07      	ldr	r3, [pc, #28]	@ (8011fe8 <SetMeasurementIndicator+0x2c>)
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d006      	beq.n	8011fde <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011fd0:	f7ff fefa 	bl	8011dc8 <Calculate_LED_ON>
 8011fd4:	0003      	movs	r3, r0
 8011fd6:	001a      	movs	r2, r3
 8011fd8:	2380      	movs	r3, #128	@ 0x80
 8011fda:	05db      	lsls	r3, r3, #23
 8011fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011fde:	46c0      	nop			@ (mov r8, r8)
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20001e71 	.word	0x20001e71
 8011fe8:	20001e72 	.word	0x20001e72

08011fec <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8011fec:	b580      	push	{r7, lr}
 8011fee:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011ff0:	4b07      	ldr	r3, [pc, #28]	@ (8012010 <ResetMeasurementIndicator+0x24>)
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d103      	bne.n	8012000 <ResetMeasurementIndicator+0x14>
 8011ff8:	4b06      	ldr	r3, [pc, #24]	@ (8012014 <ResetMeasurementIndicator+0x28>)
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d004      	beq.n	801200a <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8012000:	2380      	movs	r3, #128	@ 0x80
 8012002:	05db      	lsls	r3, r3, #23
 8012004:	22fa      	movs	r2, #250	@ 0xfa
 8012006:	0112      	lsls	r2, r2, #4
 8012008:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801200a:	46c0      	nop			@ (mov r8, r8)
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	20001e71 	.word	0x20001e71
 8012014:	20001e72 	.word	0x20001e72

08012018 <SetMICIndicator>:
void SetMICIndicator(){
 8012018:	b580      	push	{r7, lr}
 801201a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801201c:	4b19      	ldr	r3, [pc, #100]	@ (8012084 <SetMICIndicator+0x6c>)
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d103      	bne.n	801202c <SetMICIndicator+0x14>
 8012024:	4b18      	ldr	r3, [pc, #96]	@ (8012088 <SetMICIndicator+0x70>)
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d007      	beq.n	801203c <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 801202c:	f7ff fecc 	bl	8011dc8 <Calculate_LED_ON>
 8012030:	0003      	movs	r3, r0
 8012032:	001a      	movs	r2, r3
 8012034:	2380      	movs	r3, #128	@ 0x80
 8012036:	05db      	lsls	r3, r3, #23
 8012038:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 801203a:	e01f      	b.n	801207c <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 801203c:	4b13      	ldr	r3, [pc, #76]	@ (801208c <SetMICIndicator+0x74>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	1c18      	adds	r0, r3, #0
 8012042:	f7f1 fc27 	bl	8003894 <__aeabi_f2d>
 8012046:	4a12      	ldr	r2, [pc, #72]	@ (8012090 <SetMICIndicator+0x78>)
 8012048:	4b12      	ldr	r3, [pc, #72]	@ (8012094 <SetMICIndicator+0x7c>)
 801204a:	f7ee fa4b 	bl	80004e4 <__aeabi_dcmpgt>
 801204e:	1e03      	subs	r3, r0, #0
 8012050:	d00a      	beq.n	8012068 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8012052:	f7ff feb9 	bl	8011dc8 <Calculate_LED_ON>
 8012056:	0003      	movs	r3, r0
 8012058:	001a      	movs	r2, r3
 801205a:	2380      	movs	r3, #128	@ 0x80
 801205c:	05db      	lsls	r3, r3, #23
 801205e:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8012060:	4b0d      	ldr	r3, [pc, #52]	@ (8012098 <SetMICIndicator+0x80>)
 8012062:	2202      	movs	r2, #2
 8012064:	701a      	strb	r2, [r3, #0]
}
 8012066:	e009      	b.n	801207c <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8012068:	f7ff feae 	bl	8011dc8 <Calculate_LED_ON>
 801206c:	0003      	movs	r3, r0
 801206e:	001a      	movs	r2, r3
 8012070:	2380      	movs	r3, #128	@ 0x80
 8012072:	05db      	lsls	r3, r3, #23
 8012074:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8012076:	4b08      	ldr	r3, [pc, #32]	@ (8012098 <SetMICIndicator+0x80>)
 8012078:	2201      	movs	r2, #1
 801207a:	701a      	strb	r2, [r3, #0]
}
 801207c:	46c0      	nop			@ (mov r8, r8)
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	46c0      	nop			@ (mov r8, r8)
 8012084:	20001e71 	.word	0x20001e71
 8012088:	20001e72 	.word	0x20001e72
 801208c:	20001e80 	.word	0x20001e80
 8012090:	9999999a 	.word	0x9999999a
 8012094:	400d9999 	.word	0x400d9999
 8012098:	20001e74 	.word	0x20001e74

0801209c <ResetMICIndicator>:
void ResetMICIndicator(){
 801209c:	b580      	push	{r7, lr}
 801209e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80120a0:	4b0f      	ldr	r3, [pc, #60]	@ (80120e0 <ResetMICIndicator+0x44>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d103      	bne.n	80120b0 <ResetMICIndicator+0x14>
 80120a8:	4b0e      	ldr	r3, [pc, #56]	@ (80120e4 <ResetMICIndicator+0x48>)
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d005      	beq.n	80120bc <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 80120b0:	2380      	movs	r3, #128	@ 0x80
 80120b2:	05db      	lsls	r3, r3, #23
 80120b4:	22fa      	movs	r2, #250	@ 0xfa
 80120b6:	0112      	lsls	r2, r2, #4
 80120b8:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 80120ba:	e00e      	b.n	80120da <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 80120bc:	4b0a      	ldr	r3, [pc, #40]	@ (80120e8 <ResetMICIndicator+0x4c>)
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	d105      	bne.n	80120d0 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 80120c4:	2380      	movs	r3, #128	@ 0x80
 80120c6:	05db      	lsls	r3, r3, #23
 80120c8:	22fa      	movs	r2, #250	@ 0xfa
 80120ca:	0112      	lsls	r2, r2, #4
 80120cc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80120ce:	e004      	b.n	80120da <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 80120d0:	2380      	movs	r3, #128	@ 0x80
 80120d2:	05db      	lsls	r3, r3, #23
 80120d4:	22fa      	movs	r2, #250	@ 0xfa
 80120d6:	0112      	lsls	r2, r2, #4
 80120d8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80120da:	46c0      	nop			@ (mov r8, r8)
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	20001e71 	.word	0x20001e71
 80120e4:	20001e72 	.word	0x20001e72
 80120e8:	20001e74 	.word	0x20001e74

080120ec <SetESPIndicator>:
void SetESPIndicator(){
 80120ec:	b580      	push	{r7, lr}
 80120ee:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80120f0:	4b08      	ldr	r3, [pc, #32]	@ (8012114 <SetESPIndicator+0x28>)
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d103      	bne.n	8012100 <SetESPIndicator+0x14>
 80120f8:	4b07      	ldr	r3, [pc, #28]	@ (8012118 <SetESPIndicator+0x2c>)
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d006      	beq.n	801210e <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012100:	f7ff fe62 	bl	8011dc8 <Calculate_LED_ON>
 8012104:	0003      	movs	r3, r0
 8012106:	001a      	movs	r2, r3
 8012108:	2380      	movs	r3, #128	@ 0x80
 801210a:	05db      	lsls	r3, r3, #23
 801210c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801210e:	46c0      	nop			@ (mov r8, r8)
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	20001e71 	.word	0x20001e71
 8012118:	20001e72 	.word	0x20001e72

0801211c <ResetESPIndicator>:
void ResetESPIndicator(){
 801211c:	b580      	push	{r7, lr}
 801211e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012120:	4b07      	ldr	r3, [pc, #28]	@ (8012140 <ResetESPIndicator+0x24>)
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d103      	bne.n	8012130 <ResetESPIndicator+0x14>
 8012128:	4b06      	ldr	r3, [pc, #24]	@ (8012144 <ResetESPIndicator+0x28>)
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d004      	beq.n	801213a <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8012130:	2380      	movs	r3, #128	@ 0x80
 8012132:	05db      	lsls	r3, r3, #23
 8012134:	22fa      	movs	r2, #250	@ 0xfa
 8012136:	0112      	lsls	r2, r2, #4
 8012138:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801213a:	46c0      	nop			@ (mov r8, r8)
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	20001e71 	.word	0x20001e71
 8012144:	20001e72 	.word	0x20001e72

08012148 <SetPMIndicator>:

void SetPMIndicator() {
 8012148:	b580      	push	{r7, lr}
 801214a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801214c:	4b0f      	ldr	r3, [pc, #60]	@ (801218c <SetPMIndicator+0x44>)
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d103      	bne.n	801215c <SetPMIndicator+0x14>
 8012154:	4b0e      	ldr	r3, [pc, #56]	@ (8012190 <SetPMIndicator+0x48>)
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d014      	beq.n	8012186 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 801215c:	f7ff fe34 	bl	8011dc8 <Calculate_LED_ON>
 8012160:	0003      	movs	r3, r0
 8012162:	001a      	movs	r2, r3
 8012164:	2380      	movs	r3, #128	@ 0x80
 8012166:	05db      	lsls	r3, r3, #23
 8012168:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 801216a:	f7ff fe2d 	bl	8011dc8 <Calculate_LED_ON>
 801216e:	0003      	movs	r3, r0
 8012170:	001a      	movs	r2, r3
 8012172:	2380      	movs	r3, #128	@ 0x80
 8012174:	05db      	lsls	r3, r3, #23
 8012176:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012178:	f7ff fe26 	bl	8011dc8 <Calculate_LED_ON>
 801217c:	0003      	movs	r3, r0
 801217e:	001a      	movs	r2, r3
 8012180:	2380      	movs	r3, #128	@ 0x80
 8012182:	05db      	lsls	r3, r3, #23
 8012184:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012186:	46c0      	nop			@ (mov r8, r8)
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	20001e71 	.word	0x20001e71
 8012190:	20001e72 	.word	0x20001e72

08012194 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012194:	b580      	push	{r7, lr}
 8012196:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012198:	4b0c      	ldr	r3, [pc, #48]	@ (80121cc <ResetPMIndicator+0x38>)
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d103      	bne.n	80121a8 <ResetPMIndicator+0x14>
 80121a0:	4b0b      	ldr	r3, [pc, #44]	@ (80121d0 <ResetPMIndicator+0x3c>)
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00e      	beq.n	80121c6 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 80121a8:	2380      	movs	r3, #128	@ 0x80
 80121aa:	05db      	lsls	r3, r3, #23
 80121ac:	22fa      	movs	r2, #250	@ 0xfa
 80121ae:	0112      	lsls	r2, r2, #4
 80121b0:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 80121b2:	2380      	movs	r3, #128	@ 0x80
 80121b4:	05db      	lsls	r3, r3, #23
 80121b6:	22fa      	movs	r2, #250	@ 0xfa
 80121b8:	0112      	lsls	r2, r2, #4
 80121ba:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 80121bc:	2380      	movs	r3, #128	@ 0x80
 80121be:	05db      	lsls	r3, r3, #23
 80121c0:	22fa      	movs	r2, #250	@ 0xfa
 80121c2:	0112      	lsls	r2, r2, #4
 80121c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80121c6:	46c0      	nop			@ (mov r8, r8)
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	20001e71 	.word	0x20001e71
 80121d0:	20001e72 	.word	0x20001e72

080121d4 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 80121d4:	b580      	push	{r7, lr}
 80121d6:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 80121d8:	23fa      	movs	r3, #250	@ 0xfa
 80121da:	011a      	lsls	r2, r3, #4
 80121dc:	23fa      	movs	r3, #250	@ 0xfa
 80121de:	0119      	lsls	r1, r3, #4
 80121e0:	23fa      	movs	r3, #250	@ 0xfa
 80121e2:	011b      	lsls	r3, r3, #4
 80121e4:	0018      	movs	r0, r3
 80121e6:	f7ff fe37 	bl	8011e58 <SetStatusLED>
  SetDBLED(false,false,false);
 80121ea:	2200      	movs	r2, #0
 80121ec:	2100      	movs	r1, #0
 80121ee:	2000      	movs	r0, #0
 80121f0:	f7ff fe66 	bl	8011ec0 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 80121f4:	23fa      	movs	r3, #250	@ 0xfa
 80121f6:	011a      	lsls	r2, r3, #4
 80121f8:	23fa      	movs	r3, #250	@ 0xfa
 80121fa:	0119      	lsls	r1, r3, #4
 80121fc:	23fa      	movs	r3, #250	@ 0xfa
 80121fe:	011b      	lsls	r3, r3, #4
 8012200:	0018      	movs	r0, r3
 8012202:	f7ff fea7 	bl	8011f54 <SetVocLED>
return;
 8012206:	46c0      	nop			@ (mov r8, r8)
}
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <SetAllREDLED>:

void SetAllREDLED() {
 801220c:	b580      	push	{r7, lr}
 801220e:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8012210:	2380      	movs	r3, #128	@ 0x80
 8012212:	05db      	lsls	r3, r3, #23
 8012214:	4a1a      	ldr	r2, [pc, #104]	@ (8012280 <SetAllREDLED+0x74>)
 8012216:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012218:	2380      	movs	r3, #128	@ 0x80
 801221a:	05db      	lsls	r3, r3, #23
 801221c:	22fa      	movs	r2, #250	@ 0xfa
 801221e:	0112      	lsls	r2, r2, #4
 8012220:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012222:	2380      	movs	r3, #128	@ 0x80
 8012224:	05db      	lsls	r3, r3, #23
 8012226:	22fa      	movs	r2, #250	@ 0xfa
 8012228:	0112      	lsls	r2, r2, #4
 801222a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 801222c:	4b15      	ldr	r3, [pc, #84]	@ (8012284 <SetAllREDLED+0x78>)
 801222e:	4a14      	ldr	r2, [pc, #80]	@ (8012280 <SetAllREDLED+0x74>)
 8012230:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012232:	4b14      	ldr	r3, [pc, #80]	@ (8012284 <SetAllREDLED+0x78>)
 8012234:	22fa      	movs	r2, #250	@ 0xfa
 8012236:	0112      	lsls	r2, r2, #4
 8012238:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 801223a:	4b12      	ldr	r3, [pc, #72]	@ (8012284 <SetAllREDLED+0x78>)
 801223c:	22fa      	movs	r2, #250	@ 0xfa
 801223e:	0112      	lsls	r2, r2, #4
 8012240:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012242:	4b11      	ldr	r3, [pc, #68]	@ (8012288 <SetAllREDLED+0x7c>)
 8012244:	2200      	movs	r2, #0
 8012246:	2101      	movs	r1, #1
 8012248:	0018      	movs	r0, r3
 801224a:	f003 f924 	bl	8015496 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 801224e:	2380      	movs	r3, #128	@ 0x80
 8012250:	005b      	lsls	r3, r3, #1
 8012252:	480d      	ldr	r0, [pc, #52]	@ (8012288 <SetAllREDLED+0x7c>)
 8012254:	2201      	movs	r2, #1
 8012256:	0019      	movs	r1, r3
 8012258:	f003 f91d 	bl	8015496 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 801225c:	2380      	movs	r3, #128	@ 0x80
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	4809      	ldr	r0, [pc, #36]	@ (8012288 <SetAllREDLED+0x7c>)
 8012262:	2201      	movs	r2, #1
 8012264:	0019      	movs	r1, r3
 8012266:	f003 f916 	bl	8015496 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 801226a:	23fa      	movs	r3, #250	@ 0xfa
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	0018      	movs	r0, r3
 8012270:	f001 fe8a 	bl	8013f88 <HAL_Delay>
  SetLEDsOff();
 8012274:	f7ff ffae 	bl	80121d4 <SetLEDsOff>
}
 8012278:	46c0      	nop			@ (mov r8, r8)
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
 801227e:	46c0      	nop			@ (mov r8, r8)
 8012280:	00000bb8 	.word	0x00000bb8
 8012284:	40000400 	.word	0x40000400
 8012288:	50000400 	.word	0x50000400

0801228c <SetAllBlueLED>:

void SetAllBlueLED() {
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012292:	1dfb      	adds	r3, r7, #7
 8012294:	2200      	movs	r2, #0
 8012296:	701a      	strb	r2, [r3, #0]
 8012298:	e04b      	b.n	8012332 <SetAllBlueLED+0xa6>
    TIM2 -> CCR1 = LED_OFF;
 801229a:	2380      	movs	r3, #128	@ 0x80
 801229c:	05db      	lsls	r3, r3, #23
 801229e:	22fa      	movs	r2, #250	@ 0xfa
 80122a0:	0112      	lsls	r2, r2, #4
 80122a2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 80122a4:	2380      	movs	r3, #128	@ 0x80
 80122a6:	05db      	lsls	r3, r3, #23
 80122a8:	22fa      	movs	r2, #250	@ 0xfa
 80122aa:	0112      	lsls	r2, r2, #4
 80122ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 80122ae:	2380      	movs	r3, #128	@ 0x80
 80122b0:	05db      	lsls	r3, r3, #23
 80122b2:	4a24      	ldr	r2, [pc, #144]	@ (8012344 <SetAllBlueLED+0xb8>)
 80122b4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 80122b6:	4b24      	ldr	r3, [pc, #144]	@ (8012348 <SetAllBlueLED+0xbc>)
 80122b8:	22fa      	movs	r2, #250	@ 0xfa
 80122ba:	0112      	lsls	r2, r2, #4
 80122bc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 80122be:	4b22      	ldr	r3, [pc, #136]	@ (8012348 <SetAllBlueLED+0xbc>)
 80122c0:	22fa      	movs	r2, #250	@ 0xfa
 80122c2:	0112      	lsls	r2, r2, #4
 80122c4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 80122c6:	4b20      	ldr	r3, [pc, #128]	@ (8012348 <SetAllBlueLED+0xbc>)
 80122c8:	4a1e      	ldr	r2, [pc, #120]	@ (8012344 <SetAllBlueLED+0xb8>)
 80122ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 80122cc:	4b1f      	ldr	r3, [pc, #124]	@ (801234c <SetAllBlueLED+0xc0>)
 80122ce:	2201      	movs	r2, #1
 80122d0:	2101      	movs	r1, #1
 80122d2:	0018      	movs	r0, r3
 80122d4:	f003 f8df 	bl	8015496 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 80122d8:	2380      	movs	r3, #128	@ 0x80
 80122da:	005b      	lsls	r3, r3, #1
 80122dc:	481b      	ldr	r0, [pc, #108]	@ (801234c <SetAllBlueLED+0xc0>)
 80122de:	2201      	movs	r2, #1
 80122e0:	0019      	movs	r1, r3
 80122e2:	f003 f8d8 	bl	8015496 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 80122e6:	2380      	movs	r3, #128	@ 0x80
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	4818      	ldr	r0, [pc, #96]	@ (801234c <SetAllBlueLED+0xc0>)
 80122ec:	2200      	movs	r2, #0
 80122ee:	0019      	movs	r1, r3
 80122f0:	f003 f8d1 	bl	8015496 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80122f4:	23fa      	movs	r3, #250	@ 0xfa
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	0018      	movs	r0, r3
 80122fa:	f001 fe45 	bl	8013f88 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 80122fe:	2380      	movs	r3, #128	@ 0x80
 8012300:	05db      	lsls	r3, r3, #23
 8012302:	22fa      	movs	r2, #250	@ 0xfa
 8012304:	0112      	lsls	r2, r2, #4
 8012306:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR3 = LED_OFF;
 8012308:	4b0f      	ldr	r3, [pc, #60]	@ (8012348 <SetAllBlueLED+0xbc>)
 801230a:	22fa      	movs	r2, #250	@ 0xfa
 801230c:	0112      	lsls	r2, r2, #4
 801230e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012310:	2380      	movs	r3, #128	@ 0x80
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	480d      	ldr	r0, [pc, #52]	@ (801234c <SetAllBlueLED+0xc0>)
 8012316:	2201      	movs	r2, #1
 8012318:	0019      	movs	r1, r3
 801231a:	f003 f8bc 	bl	8015496 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 801231e:	23fa      	movs	r3, #250	@ 0xfa
 8012320:	005b      	lsls	r3, r3, #1
 8012322:	0018      	movs	r0, r3
 8012324:	f001 fe30 	bl	8013f88 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012328:	1dfb      	adds	r3, r7, #7
 801232a:	781a      	ldrb	r2, [r3, #0]
 801232c:	1dfb      	adds	r3, r7, #7
 801232e:	3201      	adds	r2, #1
 8012330:	701a      	strb	r2, [r3, #0]
 8012332:	1dfb      	adds	r3, r7, #7
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	2b02      	cmp	r3, #2
 8012338:	d9af      	bls.n	801229a <SetAllBlueLED+0xe>
  }
}
 801233a:	46c0      	nop			@ (mov r8, r8)
 801233c:	46c0      	nop			@ (mov r8, r8)
 801233e:	46bd      	mov	sp, r7
 8012340:	b002      	add	sp, #8
 8012342:	bd80      	pop	{r7, pc}
 8012344:	00000bb8 	.word	0x00000bb8
 8012348:	40000400 	.word	0x40000400
 801234c:	50000400 	.word	0x50000400

08012350 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012350:	b5b0      	push	{r4, r5, r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	0002      	movs	r2, r0
 8012358:	1dbb      	adds	r3, r7, #6
 801235a:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 801235c:	1dbb      	adds	r3, r7, #6
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d05a      	beq.n	801241a <SetVOCindicator+0xca>
 8012364:	1dbb      	adds	r3, r7, #6
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	2b64      	cmp	r3, #100	@ 0x64
 801236a:	d856      	bhi.n	801241a <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 801236c:	1dbb      	adds	r3, r7, #6
 801236e:	881b      	ldrh	r3, [r3, #0]
 8012370:	0018      	movs	r0, r3
 8012372:	f7f1 fa3d 	bl	80037f0 <__aeabi_i2d>
 8012376:	2200      	movs	r2, #0
 8012378:	4b5f      	ldr	r3, [pc, #380]	@ (80124f8 <SetVOCindicator+0x1a8>)
 801237a:	f7ef feb1 	bl	80020e0 <__aeabi_ddiv>
 801237e:	0002      	movs	r2, r0
 8012380:	000b      	movs	r3, r1
 8012382:	2000      	movs	r0, #0
 8012384:	495d      	ldr	r1, [pc, #372]	@ (80124fc <SetVOCindicator+0x1ac>)
 8012386:	f7f0 fdcb 	bl	8002f20 <__aeabi_dsub>
 801238a:	0002      	movs	r2, r0
 801238c:	000b      	movs	r3, r1
 801238e:	0014      	movs	r4, r2
 8012390:	001d      	movs	r5, r3
 8012392:	4b5b      	ldr	r3, [pc, #364]	@ (8012500 <SetVOCindicator+0x1b0>)
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	0018      	movs	r0, r3
 8012398:	f7f1 fa2a 	bl	80037f0 <__aeabi_i2d>
 801239c:	0002      	movs	r2, r0
 801239e:	000b      	movs	r3, r1
 80123a0:	0020      	movs	r0, r4
 80123a2:	0029      	movs	r1, r5
 80123a4:	f7f0 fad6 	bl	8002954 <__aeabi_dmul>
 80123a8:	0002      	movs	r2, r0
 80123aa:	000b      	movs	r3, r1
 80123ac:	0010      	movs	r0, r2
 80123ae:	0019      	movs	r1, r3
 80123b0:	f7ee f94c 	bl	800064c <__aeabi_d2uiz>
 80123b4:	0003      	movs	r3, r0
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	4b52      	ldr	r3, [pc, #328]	@ (8012504 <SetVOCindicator+0x1b4>)
 80123ba:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 80123bc:	1dbb      	adds	r3, r7, #6
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	0018      	movs	r0, r3
 80123c2:	f7f1 fa15 	bl	80037f0 <__aeabi_i2d>
 80123c6:	2200      	movs	r2, #0
 80123c8:	4b4b      	ldr	r3, [pc, #300]	@ (80124f8 <SetVOCindicator+0x1a8>)
 80123ca:	f7ef fe89 	bl	80020e0 <__aeabi_ddiv>
 80123ce:	0002      	movs	r2, r0
 80123d0:	000b      	movs	r3, r1
 80123d2:	0014      	movs	r4, r2
 80123d4:	001d      	movs	r5, r3
 80123d6:	4b4a      	ldr	r3, [pc, #296]	@ (8012500 <SetVOCindicator+0x1b0>)
 80123d8:	881b      	ldrh	r3, [r3, #0]
 80123da:	0018      	movs	r0, r3
 80123dc:	f7f1 fa08 	bl	80037f0 <__aeabi_i2d>
 80123e0:	0002      	movs	r2, r0
 80123e2:	000b      	movs	r3, r1
 80123e4:	0020      	movs	r0, r4
 80123e6:	0029      	movs	r1, r5
 80123e8:	f7f0 fab4 	bl	8002954 <__aeabi_dmul>
 80123ec:	0002      	movs	r2, r0
 80123ee:	000b      	movs	r3, r1
 80123f0:	0010      	movs	r0, r2
 80123f2:	0019      	movs	r1, r3
 80123f4:	f7ee f92a 	bl	800064c <__aeabi_d2uiz>
 80123f8:	0003      	movs	r3, r0
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	4b42      	ldr	r3, [pc, #264]	@ (8012508 <SetVOCindicator+0x1b8>)
 80123fe:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012400:	4b3f      	ldr	r3, [pc, #252]	@ (8012500 <SetVOCindicator+0x1b0>)
 8012402:	881a      	ldrh	r2, [r3, #0]
 8012404:	4b41      	ldr	r3, [pc, #260]	@ (801250c <SetVOCindicator+0x1bc>)
 8012406:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012408:	4b40      	ldr	r3, [pc, #256]	@ (801250c <SetVOCindicator+0x1bc>)
 801240a:	8818      	ldrh	r0, [r3, #0]
 801240c:	4b3d      	ldr	r3, [pc, #244]	@ (8012504 <SetVOCindicator+0x1b4>)
 801240e:	8819      	ldrh	r1, [r3, #0]
 8012410:	4b3d      	ldr	r3, [pc, #244]	@ (8012508 <SetVOCindicator+0x1b8>)
 8012412:	881b      	ldrh	r3, [r3, #0]
 8012414:	001a      	movs	r2, r3
 8012416:	f7ff fd9d 	bl	8011f54 <SetVocLED>
  }
  if(VOCi > 100){
 801241a:	1dbb      	adds	r3, r7, #6
 801241c:	881b      	ldrh	r3, [r3, #0]
 801241e:	2b64      	cmp	r3, #100	@ 0x64
 8012420:	d966      	bls.n	80124f0 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012422:	1dbb      	adds	r3, r7, #6
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	0018      	movs	r0, r3
 8012428:	f7f1 f9e2 	bl	80037f0 <__aeabi_i2d>
 801242c:	2200      	movs	r2, #0
 801242e:	4b32      	ldr	r3, [pc, #200]	@ (80124f8 <SetVOCindicator+0x1a8>)
 8012430:	f7f0 fd76 	bl	8002f20 <__aeabi_dsub>
 8012434:	0002      	movs	r2, r0
 8012436:	000b      	movs	r3, r1
 8012438:	0010      	movs	r0, r2
 801243a:	0019      	movs	r1, r3
 801243c:	2200      	movs	r2, #0
 801243e:	4b34      	ldr	r3, [pc, #208]	@ (8012510 <SetVOCindicator+0x1c0>)
 8012440:	f7ef fe4e 	bl	80020e0 <__aeabi_ddiv>
 8012444:	0002      	movs	r2, r0
 8012446:	000b      	movs	r3, r1
 8012448:	0014      	movs	r4, r2
 801244a:	001d      	movs	r5, r3
 801244c:	4b2c      	ldr	r3, [pc, #176]	@ (8012500 <SetVOCindicator+0x1b0>)
 801244e:	881b      	ldrh	r3, [r3, #0]
 8012450:	0018      	movs	r0, r3
 8012452:	f7f1 f9cd 	bl	80037f0 <__aeabi_i2d>
 8012456:	0002      	movs	r2, r0
 8012458:	000b      	movs	r3, r1
 801245a:	0020      	movs	r0, r4
 801245c:	0029      	movs	r1, r5
 801245e:	f7f0 fa79 	bl	8002954 <__aeabi_dmul>
 8012462:	0002      	movs	r2, r0
 8012464:	000b      	movs	r3, r1
 8012466:	0010      	movs	r0, r2
 8012468:	0019      	movs	r1, r3
 801246a:	f7ee f8ef 	bl	800064c <__aeabi_d2uiz>
 801246e:	0003      	movs	r3, r0
 8012470:	b29a      	uxth	r2, r3
 8012472:	4b24      	ldr	r3, [pc, #144]	@ (8012504 <SetVOCindicator+0x1b4>)
 8012474:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8012476:	1dbb      	adds	r3, r7, #6
 8012478:	881b      	ldrh	r3, [r3, #0]
 801247a:	0018      	movs	r0, r3
 801247c:	f7f1 f9b8 	bl	80037f0 <__aeabi_i2d>
 8012480:	2200      	movs	r2, #0
 8012482:	4b1d      	ldr	r3, [pc, #116]	@ (80124f8 <SetVOCindicator+0x1a8>)
 8012484:	f7f0 fd4c 	bl	8002f20 <__aeabi_dsub>
 8012488:	0002      	movs	r2, r0
 801248a:	000b      	movs	r3, r1
 801248c:	0010      	movs	r0, r2
 801248e:	0019      	movs	r1, r3
 8012490:	2200      	movs	r2, #0
 8012492:	4b1f      	ldr	r3, [pc, #124]	@ (8012510 <SetVOCindicator+0x1c0>)
 8012494:	f7ef fe24 	bl	80020e0 <__aeabi_ddiv>
 8012498:	0002      	movs	r2, r0
 801249a:	000b      	movs	r3, r1
 801249c:	2000      	movs	r0, #0
 801249e:	4917      	ldr	r1, [pc, #92]	@ (80124fc <SetVOCindicator+0x1ac>)
 80124a0:	f7f0 fd3e 	bl	8002f20 <__aeabi_dsub>
 80124a4:	0002      	movs	r2, r0
 80124a6:	000b      	movs	r3, r1
 80124a8:	0014      	movs	r4, r2
 80124aa:	001d      	movs	r5, r3
 80124ac:	4b14      	ldr	r3, [pc, #80]	@ (8012500 <SetVOCindicator+0x1b0>)
 80124ae:	881b      	ldrh	r3, [r3, #0]
 80124b0:	0018      	movs	r0, r3
 80124b2:	f7f1 f99d 	bl	80037f0 <__aeabi_i2d>
 80124b6:	0002      	movs	r2, r0
 80124b8:	000b      	movs	r3, r1
 80124ba:	0020      	movs	r0, r4
 80124bc:	0029      	movs	r1, r5
 80124be:	f7f0 fa49 	bl	8002954 <__aeabi_dmul>
 80124c2:	0002      	movs	r2, r0
 80124c4:	000b      	movs	r3, r1
 80124c6:	0010      	movs	r0, r2
 80124c8:	0019      	movs	r1, r3
 80124ca:	f7ee f8bf 	bl	800064c <__aeabi_d2uiz>
 80124ce:	0003      	movs	r3, r0
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	4b0e      	ldr	r3, [pc, #56]	@ (801250c <SetVOCindicator+0x1bc>)
 80124d4:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 80124d6:	4b0a      	ldr	r3, [pc, #40]	@ (8012500 <SetVOCindicator+0x1b0>)
 80124d8:	881a      	ldrh	r2, [r3, #0]
 80124da:	4b0b      	ldr	r3, [pc, #44]	@ (8012508 <SetVOCindicator+0x1b8>)
 80124dc:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80124de:	4b0b      	ldr	r3, [pc, #44]	@ (801250c <SetVOCindicator+0x1bc>)
 80124e0:	8818      	ldrh	r0, [r3, #0]
 80124e2:	4b08      	ldr	r3, [pc, #32]	@ (8012504 <SetVOCindicator+0x1b4>)
 80124e4:	8819      	ldrh	r1, [r3, #0]
 80124e6:	4b08      	ldr	r3, [pc, #32]	@ (8012508 <SetVOCindicator+0x1b8>)
 80124e8:	881b      	ldrh	r3, [r3, #0]
 80124ea:	001a      	movs	r2, r3
 80124ec:	f7ff fd32 	bl	8011f54 <SetVocLED>
  }

}
 80124f0:	46c0      	nop			@ (mov r8, r8)
 80124f2:	46bd      	mov	sp, r7
 80124f4:	b002      	add	sp, #8
 80124f6:	bdb0      	pop	{r4, r5, r7, pc}
 80124f8:	40590000 	.word	0x40590000
 80124fc:	3ff00000 	.word	0x3ff00000
 8012500:	200000e2 	.word	0x200000e2
 8012504:	20001e86 	.word	0x20001e86
 8012508:	20001e88 	.word	0x20001e88
 801250c:	20001e8a 	.word	0x20001e8a
 8012510:	40790000 	.word	0x40790000

08012514 <powerCheck>:

Battery_Status powerCheck(){
 8012514:	b590      	push	{r4, r7, lr}
 8012516:	b083      	sub	sp, #12
 8012518:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 801251a:	f7f6 feab 	bl	8009274 <Check_USB_PowerOn>
 801251e:	0003      	movs	r3, r0
 8012520:	001a      	movs	r2, r3
 8012522:	2301      	movs	r3, #1
 8012524:	4053      	eors	r3, r2
 8012526:	b2db      	uxtb	r3, r3
 8012528:	2b00      	cmp	r3, #0
 801252a:	d005      	beq.n	8012538 <powerCheck+0x24>
    status = batteryChargeCheck();
 801252c:	1dfc      	adds	r4, r7, #7
 801252e:	f7ff fbf1 	bl	8011d14 <batteryChargeCheck>
 8012532:	0003      	movs	r3, r0
 8012534:	7023      	strb	r3, [r4, #0]
 8012536:	e002      	b.n	801253e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 8012538:	1dfb      	adds	r3, r7, #7
 801253a:	2204      	movs	r2, #4
 801253c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801253e:	1dfb      	adds	r3, r7, #7
 8012540:	781b      	ldrb	r3, [r3, #0]
}
 8012542:	0018      	movs	r0, r3
 8012544:	46bd      	mov	sp, r7
 8012546:	b003      	add	sp, #12
 8012548:	bd90      	pop	{r4, r7, pc}
	...

0801254c <powerDisplay>:

void powerDisplay(Battery_Status status){
 801254c:	b5b0      	push	{r4, r5, r7, lr}
 801254e:	b086      	sub	sp, #24
 8012550:	af04      	add	r7, sp, #16
 8012552:	0002      	movs	r2, r0
 8012554:	1dfb      	adds	r3, r7, #7
 8012556:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8012558:	1dfb      	adds	r3, r7, #7
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	2b04      	cmp	r3, #4
 801255e:	d114      	bne.n	801258a <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 8012560:	f7f6 fdd2 	bl	8009108 <ReadBatteryVoltage>
 8012564:	1c03      	adds	r3, r0, #0
 8012566:	1c18      	adds	r0, r3, #0
 8012568:	f7f1 f994 	bl	8003894 <__aeabi_f2d>
 801256c:	0004      	movs	r4, r0
 801256e:	000d      	movs	r5, r1
 8012570:	f7f6 fe2c 	bl	80091cc <ReadSolarVoltage>
 8012574:	0003      	movs	r3, r0
 8012576:	0019      	movs	r1, r3
 8012578:	4a2a      	ldr	r2, [pc, #168]	@ (8012624 <powerDisplay+0xd8>)
 801257a:	4b2b      	ldr	r3, [pc, #172]	@ (8012628 <powerDisplay+0xdc>)
 801257c:	9102      	str	r1, [sp, #8]
 801257e:	9400      	str	r4, [sp, #0]
 8012580:	9501      	str	r5, [sp, #4]
 8012582:	0019      	movs	r1, r3
 8012584:	2003      	movs	r0, #3
 8012586:	f000 ff73 	bl	8013470 <CreateLine>
  }
  if(status == BATTERY_FULL){
 801258a:	1dfb      	adds	r3, r7, #7
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	2b03      	cmp	r3, #3
 8012590:	d105      	bne.n	801259e <powerDisplay+0x52>
    Debug("Battery fully charged");
 8012592:	4a26      	ldr	r2, [pc, #152]	@ (801262c <powerDisplay+0xe0>)
 8012594:	4b24      	ldr	r3, [pc, #144]	@ (8012628 <powerDisplay+0xdc>)
 8012596:	0019      	movs	r1, r3
 8012598:	2003      	movs	r0, #3
 801259a:	f000 ff69 	bl	8013470 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 801259e:	1dfb      	adds	r3, r7, #7
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	2b02      	cmp	r3, #2
 80125a4:	d105      	bne.n	80125b2 <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 80125a6:	4a22      	ldr	r2, [pc, #136]	@ (8012630 <powerDisplay+0xe4>)
 80125a8:	4b1f      	ldr	r3, [pc, #124]	@ (8012628 <powerDisplay+0xdc>)
 80125aa:	0019      	movs	r1, r3
 80125ac:	2003      	movs	r0, #3
 80125ae:	f000 ff5f 	bl	8013470 <CreateLine>
  }
  if(status == BATTERY_LOW){
 80125b2:	1dfb      	adds	r3, r7, #7
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	2b01      	cmp	r3, #1
 80125b8:	d105      	bne.n	80125c6 <powerDisplay+0x7a>
    Debug("Battery is getting low");
 80125ba:	4a1e      	ldr	r2, [pc, #120]	@ (8012634 <powerDisplay+0xe8>)
 80125bc:	4b1a      	ldr	r3, [pc, #104]	@ (8012628 <powerDisplay+0xdc>)
 80125be:	0019      	movs	r1, r3
 80125c0:	2003      	movs	r0, #3
 80125c2:	f000 ff55 	bl	8013470 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 80125c6:	1dfb      	adds	r3, r7, #7
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d105      	bne.n	80125da <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 80125ce:	4a1a      	ldr	r2, [pc, #104]	@ (8012638 <powerDisplay+0xec>)
 80125d0:	4b15      	ldr	r3, [pc, #84]	@ (8012628 <powerDisplay+0xdc>)
 80125d2:	0019      	movs	r1, r3
 80125d4:	2003      	movs	r0, #3
 80125d6:	f000 ff4b 	bl	8013470 <CreateLine>
  }
  switch (Read_Charge_Status()) {
 80125da:	f7f6 fe5b 	bl	8009294 <Read_Charge_Status>
 80125de:	0003      	movs	r3, r0
 80125e0:	2b02      	cmp	r3, #2
 80125e2:	d013      	beq.n	801260c <powerDisplay+0xc0>
 80125e4:	dc19      	bgt.n	801261a <powerDisplay+0xce>
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d002      	beq.n	80125f0 <powerDisplay+0xa4>
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	d007      	beq.n	80125fe <powerDisplay+0xb2>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 80125ee:	e014      	b.n	801261a <powerDisplay+0xce>
    Debug("Battery charging off");
 80125f0:	4a12      	ldr	r2, [pc, #72]	@ (801263c <powerDisplay+0xf0>)
 80125f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012628 <powerDisplay+0xdc>)
 80125f4:	0019      	movs	r1, r3
 80125f6:	2003      	movs	r0, #3
 80125f8:	f000 ff3a 	bl	8013470 <CreateLine>
    break;
 80125fc:	e00d      	b.n	801261a <powerDisplay+0xce>
    Debug("Battery is charging");
 80125fe:	4a10      	ldr	r2, [pc, #64]	@ (8012640 <powerDisplay+0xf4>)
 8012600:	4b09      	ldr	r3, [pc, #36]	@ (8012628 <powerDisplay+0xdc>)
 8012602:	0019      	movs	r1, r3
 8012604:	2003      	movs	r0, #3
 8012606:	f000 ff33 	bl	8013470 <CreateLine>
    break;
 801260a:	e006      	b.n	801261a <powerDisplay+0xce>
    Debug("Battery full, charging off");
 801260c:	4a0d      	ldr	r2, [pc, #52]	@ (8012644 <powerDisplay+0xf8>)
 801260e:	4b06      	ldr	r3, [pc, #24]	@ (8012628 <powerDisplay+0xdc>)
 8012610:	0019      	movs	r1, r3
 8012612:	2003      	movs	r0, #3
 8012614:	f000 ff2c 	bl	8013470 <CreateLine>
    break;
 8012618:	46c0      	nop			@ (mov r8, r8)
}
 801261a:	46c0      	nop			@ (mov r8, r8)
 801261c:	46bd      	mov	sp, r7
 801261e:	b002      	add	sp, #8
 8012620:	bdb0      	pop	{r4, r5, r7, pc}
 8012622:	46c0      	nop			@ (mov r8, r8)
 8012624:	0802d978 	.word	0x0802d978
 8012628:	0802d9b8 	.word	0x0802d9b8
 801262c:	0802d9bc 	.word	0x0802d9bc
 8012630:	0802d9d4 	.word	0x0802d9d4
 8012634:	0802d9f4 	.word	0x0802d9f4
 8012638:	0802da0c 	.word	0x0802da0c
 801263c:	0802da30 	.word	0x0802da30
 8012640:	0802da48 	.word	0x0802da48
 8012644:	0802da5c 	.word	0x0802da5c

08012648 <configCheck>:

void configCheck(){
 8012648:	b590      	push	{r4, r7, lr}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 801264e:	f7f6 fe7d 	bl	800934c <BootButton_Pressed>
 8012652:	1e03      	subs	r3, r0, #0
 8012654:	d007      	beq.n	8012666 <configCheck+0x1e>
 8012656:	f7f6 fe8b 	bl	8009370 <UserButton_Pressed>
 801265a:	1e03      	subs	r3, r0, #0
 801265c:	d003      	beq.n	8012666 <configCheck+0x1e>
    configSet = true;
 801265e:	4bb5      	ldr	r3, [pc, #724]	@ (8012934 <configCheck+0x2ec>)
 8012660:	2201      	movs	r2, #1
 8012662:	701a      	strb	r2, [r3, #0]
 8012664:	e00a      	b.n	801267c <configCheck+0x34>
  }
  else{
    configSet = false;
 8012666:	4bb3      	ldr	r3, [pc, #716]	@ (8012934 <configCheck+0x2ec>)
 8012668:	2200      	movs	r2, #0
 801266a:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 801266c:	f001 fc82 	bl	8013f74 <HAL_GetTick>
 8012670:	0003      	movs	r3, r0
 8012672:	22fa      	movs	r2, #250	@ 0xfa
 8012674:	00d2      	lsls	r2, r2, #3
 8012676:	189a      	adds	r2, r3, r2
 8012678:	4baf      	ldr	r3, [pc, #700]	@ (8012938 <configCheck+0x2f0>)
 801267a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 801267c:	4bad      	ldr	r3, [pc, #692]	@ (8012934 <configCheck+0x2ec>)
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00d      	beq.n	80126a0 <configCheck+0x58>
 8012684:	4bac      	ldr	r3, [pc, #688]	@ (8012938 <configCheck+0x2f0>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	0018      	movs	r0, r3
 801268a:	f000 fe9b 	bl	80133c4 <TimestampIsReached>
 801268e:	1e03      	subs	r3, r0, #0
 8012690:	d006      	beq.n	80126a0 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8012692:	f7f2 fb91 	bl	8004db8 <SetConfigMode>
    SetDBLED(true, true, true);
 8012696:	2201      	movs	r2, #1
 8012698:	2101      	movs	r1, #1
 801269a:	2001      	movs	r0, #1
 801269c:	f7ff fc10 	bl	8011ec0 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 80126a0:	f7f6 fe54 	bl	800934c <BootButton_Pressed>
 80126a4:	0003      	movs	r3, r0
 80126a6:	001a      	movs	r2, r3
 80126a8:	2301      	movs	r3, #1
 80126aa:	4053      	eors	r3, r2
 80126ac:	b2db      	uxtb	r3, r3
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d05a      	beq.n	8012768 <configCheck+0x120>
 80126b2:	f7f6 fe5d 	bl	8009370 <UserButton_Pressed>
 80126b6:	1e03      	subs	r3, r0, #0
 80126b8:	d056      	beq.n	8012768 <configCheck+0x120>
 80126ba:	4ba0      	ldr	r3, [pc, #640]	@ (801293c <configCheck+0x2f4>)
 80126bc:	781b      	ldrb	r3, [r3, #0]
 80126be:	2201      	movs	r2, #1
 80126c0:	4053      	eors	r3, r2
 80126c2:	b2db      	uxtb	r3, r3
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d04f      	beq.n	8012768 <configCheck+0x120>
 80126c8:	f7f2 fb96 	bl	8004df8 <GetReconfigMode>
 80126cc:	0003      	movs	r3, r0
 80126ce:	001a      	movs	r2, r3
 80126d0:	2301      	movs	r3, #1
 80126d2:	4053      	eors	r3, r2
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d046      	beq.n	8012768 <configCheck+0x120>
    SetLEDsOff();
 80126da:	f7ff fd7b 	bl	80121d4 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 80126de:	4a98      	ldr	r2, [pc, #608]	@ (8012940 <configCheck+0x2f8>)
 80126e0:	4997      	ldr	r1, [pc, #604]	@ (8012940 <configCheck+0x2f8>)
 80126e2:	4b97      	ldr	r3, [pc, #604]	@ (8012940 <configCheck+0x2f8>)
 80126e4:	0018      	movs	r0, r3
 80126e6:	f7ff fc35 	bl	8011f54 <SetVocLED>
    HAL_Delay(1500);
 80126ea:	4b96      	ldr	r3, [pc, #600]	@ (8012944 <configCheck+0x2fc>)
 80126ec:	0018      	movs	r0, r3
 80126ee:	f001 fc4b 	bl	8013f88 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 80126f2:	23fa      	movs	r3, #250	@ 0xfa
 80126f4:	011a      	lsls	r2, r3, #4
 80126f6:	23fa      	movs	r3, #250	@ 0xfa
 80126f8:	0119      	lsls	r1, r3, #4
 80126fa:	23fa      	movs	r3, #250	@ 0xfa
 80126fc:	011b      	lsls	r3, r3, #4
 80126fe:	0018      	movs	r0, r3
 8012700:	f7ff fc28 	bl	8011f54 <SetVocLED>
    userToggle = !userToggle;
 8012704:	4b90      	ldr	r3, [pc, #576]	@ (8012948 <configCheck+0x300>)
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	1e5a      	subs	r2, r3, #1
 801270a:	4193      	sbcs	r3, r2
 801270c:	b2db      	uxtb	r3, r3
 801270e:	2201      	movs	r2, #1
 8012710:	4053      	eors	r3, r2
 8012712:	b2db      	uxtb	r3, r3
 8012714:	1c1a      	adds	r2, r3, #0
 8012716:	2301      	movs	r3, #1
 8012718:	4013      	ands	r3, r2
 801271a:	b2da      	uxtb	r2, r3
 801271c:	4b8a      	ldr	r3, [pc, #552]	@ (8012948 <configCheck+0x300>)
 801271e:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8012720:	4b89      	ldr	r3, [pc, #548]	@ (8012948 <configCheck+0x300>)
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d002      	beq.n	801272e <configCheck+0xe6>
      EnabledConnectedDevices();
 8012728:	f7fa fe6c 	bl	800d404 <EnabledConnectedDevices>
 801272c:	e004      	b.n	8012738 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 801272e:	f001 fc21 	bl	8013f74 <HAL_GetTick>
 8012732:	0002      	movs	r2, r0
 8012734:	4b85      	ldr	r3, [pc, #532]	@ (801294c <configCheck+0x304>)
 8012736:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8012738:	4b83      	ldr	r3, [pc, #524]	@ (8012948 <configCheck+0x300>)
 801273a:	781b      	ldrb	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d001      	beq.n	8012744 <configCheck+0xfc>
 8012740:	4b83      	ldr	r3, [pc, #524]	@ (8012950 <configCheck+0x308>)
 8012742:	e000      	b.n	8012746 <configCheck+0xfe>
 8012744:	4b83      	ldr	r3, [pc, #524]	@ (8012954 <configCheck+0x30c>)
 8012746:	4a84      	ldr	r2, [pc, #528]	@ (8012958 <configCheck+0x310>)
 8012748:	4984      	ldr	r1, [pc, #528]	@ (801295c <configCheck+0x314>)
 801274a:	2003      	movs	r0, #3
 801274c:	f000 fe90 	bl	8013470 <CreateLine>
    userbuttonHeld = true;
 8012750:	4b7a      	ldr	r3, [pc, #488]	@ (801293c <configCheck+0x2f4>)
 8012752:	2201      	movs	r2, #1
 8012754:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8012756:	f001 fc0d 	bl	8013f74 <HAL_GetTick>
 801275a:	0003      	movs	r3, r0
 801275c:	22fa      	movs	r2, #250	@ 0xfa
 801275e:	00d2      	lsls	r2, r2, #3
 8012760:	189a      	adds	r2, r3, r2
 8012762:	4b7f      	ldr	r3, [pc, #508]	@ (8012960 <configCheck+0x318>)
 8012764:	601a      	str	r2, [r3, #0]
 8012766:	e002      	b.n	801276e <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8012768:	4b74      	ldr	r3, [pc, #464]	@ (801293c <configCheck+0x2f4>)
 801276a:	2200      	movs	r2, #0
 801276c:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 801276e:	f7f6 fded 	bl	800934c <BootButton_Pressed>
 8012772:	0003      	movs	r3, r0
 8012774:	001a      	movs	r2, r3
 8012776:	2301      	movs	r3, #1
 8012778:	4053      	eors	r3, r2
 801277a:	b2db      	uxtb	r3, r3
 801277c:	2b00      	cmp	r3, #0
 801277e:	d100      	bne.n	8012782 <configCheck+0x13a>
 8012780:	e0a4      	b.n	80128cc <configCheck+0x284>
 8012782:	4b6e      	ldr	r3, [pc, #440]	@ (801293c <configCheck+0x2f4>)
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d100      	bne.n	801278c <configCheck+0x144>
 801278a:	e09f      	b.n	80128cc <configCheck+0x284>
 801278c:	4b74      	ldr	r3, [pc, #464]	@ (8012960 <configCheck+0x318>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	0018      	movs	r0, r3
 8012792:	f000 fe17 	bl	80133c4 <TimestampIsReached>
 8012796:	1e03      	subs	r3, r0, #0
 8012798:	d100      	bne.n	801279c <configCheck+0x154>
 801279a:	e097      	b.n	80128cc <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 801279c:	f7fa fa26 	bl	800cbec <GetPMSensorPresence>
 80127a0:	1e03      	subs	r3, r0, #0
 80127a2:	d100      	bne.n	80127a6 <configCheck+0x15e>
 80127a4:	e082      	b.n	80128ac <configCheck+0x264>
 80127a6:	4b6f      	ldr	r3, [pc, #444]	@ (8012964 <configCheck+0x31c>)
 80127a8:	791b      	ldrb	r3, [r3, #4]
 80127aa:	2b34      	cmp	r3, #52	@ 0x34
 80127ac:	d004      	beq.n	80127b8 <configCheck+0x170>
 80127ae:	4b6d      	ldr	r3, [pc, #436]	@ (8012964 <configCheck+0x31c>)
 80127b0:	791b      	ldrb	r3, [r3, #4]
 80127b2:	2b35      	cmp	r3, #53	@ 0x35
 80127b4:	d000      	beq.n	80127b8 <configCheck+0x170>
 80127b6:	e079      	b.n	80128ac <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 80127b8:	4b6b      	ldr	r3, [pc, #428]	@ (8012968 <configCheck+0x320>)
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	1e5a      	subs	r2, r3, #1
 80127be:	4193      	sbcs	r3, r2
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	2201      	movs	r2, #1
 80127c4:	4053      	eors	r3, r2
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	1c1a      	adds	r2, r3, #0
 80127ca:	2301      	movs	r3, #1
 80127cc:	4013      	ands	r3, r2
 80127ce:	b2da      	uxtb	r2, r3
 80127d0:	4b65      	ldr	r3, [pc, #404]	@ (8012968 <configCheck+0x320>)
 80127d2:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 80127d4:	4b64      	ldr	r3, [pc, #400]	@ (8012968 <configCheck+0x320>)
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d005      	beq.n	80127e8 <configCheck+0x1a0>
 80127dc:	1dbc      	adds	r4, r7, #6
 80127de:	f7ff faf3 	bl	8011dc8 <Calculate_LED_ON>
 80127e2:	0003      	movs	r3, r0
 80127e4:	8023      	strh	r3, [r4, #0]
 80127e6:	e003      	b.n	80127f0 <configCheck+0x1a8>
        else color = 4000;
 80127e8:	1dbb      	adds	r3, r7, #6
 80127ea:	22fa      	movs	r2, #250	@ 0xfa
 80127ec:	0112      	lsls	r2, r2, #4
 80127ee:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 80127f0:	4b5d      	ldr	r3, [pc, #372]	@ (8012968 <configCheck+0x320>)
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d001      	beq.n	80127fc <configCheck+0x1b4>
 80127f8:	4b5c      	ldr	r3, [pc, #368]	@ (801296c <configCheck+0x324>)
 80127fa:	e000      	b.n	80127fe <configCheck+0x1b6>
 80127fc:	4b5c      	ldr	r3, [pc, #368]	@ (8012970 <configCheck+0x328>)
 80127fe:	4a5d      	ldr	r2, [pc, #372]	@ (8012974 <configCheck+0x32c>)
 8012800:	495d      	ldr	r1, [pc, #372]	@ (8012978 <configCheck+0x330>)
 8012802:	2002      	movs	r0, #2
 8012804:	f000 fe34 	bl	8013470 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8012808:	1d7b      	adds	r3, r7, #5
 801280a:	2200      	movs	r2, #0
 801280c:	701a      	strb	r2, [r3, #0]
 801280e:	e028      	b.n	8012862 <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8012810:	f7ff fada 	bl	8011dc8 <Calculate_LED_ON>
 8012814:	0003      	movs	r3, r0
 8012816:	001a      	movs	r2, r3
 8012818:	4b58      	ldr	r3, [pc, #352]	@ (801297c <configCheck+0x334>)
 801281a:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 801281c:	4b57      	ldr	r3, [pc, #348]	@ (801297c <configCheck+0x334>)
 801281e:	1dba      	adds	r2, r7, #6
 8012820:	8812      	ldrh	r2, [r2, #0]
 8012822:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8012824:	4b55      	ldr	r3, [pc, #340]	@ (801297c <configCheck+0x334>)
 8012826:	1dba      	adds	r2, r7, #6
 8012828:	8812      	ldrh	r2, [r2, #0]
 801282a:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 801282c:	23c8      	movs	r3, #200	@ 0xc8
 801282e:	005b      	lsls	r3, r3, #1
 8012830:	0018      	movs	r0, r3
 8012832:	f001 fba9 	bl	8013f88 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8012836:	4b51      	ldr	r3, [pc, #324]	@ (801297c <configCheck+0x334>)
 8012838:	22fa      	movs	r2, #250	@ 0xfa
 801283a:	0112      	lsls	r2, r2, #4
 801283c:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 801283e:	4b4f      	ldr	r3, [pc, #316]	@ (801297c <configCheck+0x334>)
 8012840:	22fa      	movs	r2, #250	@ 0xfa
 8012842:	0112      	lsls	r2, r2, #4
 8012844:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8012846:	4b4d      	ldr	r3, [pc, #308]	@ (801297c <configCheck+0x334>)
 8012848:	22fa      	movs	r2, #250	@ 0xfa
 801284a:	0112      	lsls	r2, r2, #4
 801284c:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 801284e:	23c8      	movs	r3, #200	@ 0xc8
 8012850:	005b      	lsls	r3, r3, #1
 8012852:	0018      	movs	r0, r3
 8012854:	f001 fb98 	bl	8013f88 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8012858:	1d7b      	adds	r3, r7, #5
 801285a:	781a      	ldrb	r2, [r3, #0]
 801285c:	1d7b      	adds	r3, r7, #5
 801285e:	3201      	adds	r2, #1
 8012860:	701a      	strb	r2, [r3, #0]
 8012862:	1d7b      	adds	r3, r7, #5
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d9d2      	bls.n	8012810 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 801286a:	4b37      	ldr	r3, [pc, #220]	@ (8012948 <configCheck+0x300>)
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	1e5a      	subs	r2, r3, #1
 8012870:	4193      	sbcs	r3, r2
 8012872:	b2db      	uxtb	r3, r3
 8012874:	2201      	movs	r2, #1
 8012876:	4053      	eors	r3, r2
 8012878:	b2db      	uxtb	r3, r3
 801287a:	1c1a      	adds	r2, r3, #0
 801287c:	2301      	movs	r3, #1
 801287e:	4013      	ands	r3, r2
 8012880:	b2da      	uxtb	r2, r3
 8012882:	4b31      	ldr	r3, [pc, #196]	@ (8012948 <configCheck+0x300>)
 8012884:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8012886:	4b30      	ldr	r3, [pc, #192]	@ (8012948 <configCheck+0x300>)
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d001      	beq.n	8012892 <configCheck+0x24a>
 801288e:	4b37      	ldr	r3, [pc, #220]	@ (801296c <configCheck+0x324>)
 8012890:	e000      	b.n	8012894 <configCheck+0x24c>
 8012892:	4b37      	ldr	r3, [pc, #220]	@ (8012970 <configCheck+0x328>)
 8012894:	4a3a      	ldr	r2, [pc, #232]	@ (8012980 <configCheck+0x338>)
 8012896:	4938      	ldr	r1, [pc, #224]	@ (8012978 <configCheck+0x330>)
 8012898:	2002      	movs	r0, #2
 801289a:	f000 fde9 	bl	8013470 <CreateLine>
      if (usbPluggedIn) {
 801289e:	4b39      	ldr	r3, [pc, #228]	@ (8012984 <configCheck+0x33c>)
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d009      	beq.n	80128ba <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 80128a6:	f7fb ff79 	bl	800e79c <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80128aa:	e006      	b.n	80128ba <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 80128ac:	4a36      	ldr	r2, [pc, #216]	@ (8012988 <configCheck+0x340>)
 80128ae:	4b32      	ldr	r3, [pc, #200]	@ (8012978 <configCheck+0x330>)
 80128b0:	0019      	movs	r1, r3
 80128b2:	2002      	movs	r0, #2
 80128b4:	f000 fddc 	bl	8013470 <CreateLine>
 80128b8:	e000      	b.n	80128bc <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80128ba:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80128bc:	46c0      	nop			@ (mov r8, r8)
 80128be:	f7f6 fd57 	bl	8009370 <UserButton_Pressed>
 80128c2:	1e03      	subs	r3, r0, #0
 80128c4:	d1fb      	bne.n	80128be <configCheck+0x276>
    }
    userbuttonHeld = false;
 80128c6:	4b1d      	ldr	r3, [pc, #116]	@ (801293c <configCheck+0x2f4>)
 80128c8:	2200      	movs	r2, #0
 80128ca:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80128cc:	f7f6 fd3e 	bl	800934c <BootButton_Pressed>
 80128d0:	0003      	movs	r3, r0
 80128d2:	001a      	movs	r2, r3
 80128d4:	2301      	movs	r3, #1
 80128d6:	4053      	eors	r3, r2
 80128d8:	b2db      	uxtb	r3, r3
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d00b      	beq.n	80128f6 <configCheck+0x2ae>
 80128de:	f7f6 fd47 	bl	8009370 <UserButton_Pressed>
 80128e2:	0003      	movs	r3, r0
 80128e4:	001a      	movs	r2, r3
 80128e6:	2301      	movs	r3, #1
 80128e8:	4053      	eors	r3, r2
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d002      	beq.n	80128f6 <configCheck+0x2ae>
    userbuttonHeld = false;
 80128f0:	4b12      	ldr	r3, [pc, #72]	@ (801293c <configCheck+0x2f4>)
 80128f2:	2200      	movs	r2, #0
 80128f4:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 80128f6:	f7f6 fcbd 	bl	8009274 <Check_USB_PowerOn>
 80128fa:	1e03      	subs	r3, r0, #0
 80128fc:	d003      	beq.n	8012906 <configCheck+0x2be>
    usbPluggedIn = true;
 80128fe:	4b21      	ldr	r3, [pc, #132]	@ (8012984 <configCheck+0x33c>)
 8012900:	2201      	movs	r2, #1
 8012902:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8012904:	e012      	b.n	801292c <configCheck+0x2e4>
    if(!userToggle && !init){
 8012906:	4b10      	ldr	r3, [pc, #64]	@ (8012948 <configCheck+0x300>)
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	2201      	movs	r2, #1
 801290c:	4053      	eors	r3, r2
 801290e:	b2db      	uxtb	r3, r3
 8012910:	2b00      	cmp	r3, #0
 8012912:	d008      	beq.n	8012926 <configCheck+0x2de>
 8012914:	4b1d      	ldr	r3, [pc, #116]	@ (801298c <configCheck+0x344>)
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	2201      	movs	r2, #1
 801291a:	4053      	eors	r3, r2
 801291c:	b2db      	uxtb	r3, r3
 801291e:	2b00      	cmp	r3, #0
 8012920:	d001      	beq.n	8012926 <configCheck+0x2de>
      SetLEDsOff();
 8012922:	f7ff fc57 	bl	80121d4 <SetLEDsOff>
    usbPluggedIn = false;
 8012926:	4b17      	ldr	r3, [pc, #92]	@ (8012984 <configCheck+0x33c>)
 8012928:	2200      	movs	r2, #0
 801292a:	701a      	strb	r2, [r3, #0]
}
 801292c:	46c0      	nop			@ (mov r8, r8)
 801292e:	46bd      	mov	sp, r7
 8012930:	b003      	add	sp, #12
 8012932:	bd90      	pop	{r4, r7, pc}
 8012934:	20001e70 	.word	0x20001e70
 8012938:	20001e78 	.word	0x20001e78
 801293c:	20001e73 	.word	0x20001e73
 8012940:	00000bb8 	.word	0x00000bb8
 8012944:	000005dc 	.word	0x000005dc
 8012948:	20001e72 	.word	0x20001e72
 801294c:	20000e38 	.word	0x20000e38
 8012950:	0802da78 	.word	0x0802da78
 8012954:	0802da7c 	.word	0x0802da7c
 8012958:	0802da80 	.word	0x0802da80
 801295c:	0802d9b8 	.word	0x0802d9b8
 8012960:	20001e7c 	.word	0x20001e7c
 8012964:	20000ee4 	.word	0x20000ee4
 8012968:	20000ee2 	.word	0x20000ee2
 801296c:	0802daa0 	.word	0x0802daa0
 8012970:	0802daa8 	.word	0x0802daa8
 8012974:	0802dab4 	.word	0x0802dab4
 8012978:	0802dad4 	.word	0x0802dad4
 801297c:	40000400 	.word	0x40000400
 8012980:	0802dad8 	.word	0x0802dad8
 8012984:	20001e71 	.word	0x20001e71
 8012988:	0802daf0 	.word	0x0802daf0
 801298c:	200000e0 	.word	0x200000e0

08012990 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8012990:	b590      	push	{r4, r7, lr}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8012996:	1dfc      	adds	r4, r7, #7
 8012998:	f7ff fdbc 	bl	8012514 <powerCheck>
 801299c:	0003      	movs	r3, r0
 801299e:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 80129a0:	1dfb      	adds	r3, r7, #7
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	0018      	movs	r0, r3
 80129a6:	f7ff fdd1 	bl	801254c <powerDisplay>
  return status;
 80129aa:	1dfb      	adds	r3, r7, #7
 80129ac:	781b      	ldrb	r3, [r3, #0]
}
 80129ae:	0018      	movs	r0, r3
 80129b0:	46bd      	mov	sp, r7
 80129b2:	b003      	add	sp, #12
 80129b4:	bd90      	pop	{r4, r7, pc}
	...

080129b8 <setuserToggle>:

void setuserToggle(void) {
 80129b8:	b580      	push	{r7, lr}
 80129ba:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 80129bc:	f7ff fdaa 	bl	8012514 <powerCheck>
 80129c0:	0003      	movs	r3, r0
 80129c2:	2b04      	cmp	r3, #4
 80129c4:	d004      	beq.n	80129d0 <setuserToggle+0x18>
    userToggle = true;
 80129c6:	4b04      	ldr	r3, [pc, #16]	@ (80129d8 <setuserToggle+0x20>)
 80129c8:	2201      	movs	r2, #1
 80129ca:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80129cc:	f7fa fd1a 	bl	800d404 <EnabledConnectedDevices>
  }
}
 80129d0:	46c0      	nop			@ (mov r8, r8)
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}
 80129d6:	46c0      	nop			@ (mov r8, r8)
 80129d8:	20001e72 	.word	0x20001e72

080129dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80129e0:	4b07      	ldr	r3, [pc, #28]	@ (8012a00 <HAL_MspInit+0x24>)
 80129e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80129e4:	4b06      	ldr	r3, [pc, #24]	@ (8012a00 <HAL_MspInit+0x24>)
 80129e6:	2101      	movs	r1, #1
 80129e8:	430a      	orrs	r2, r1
 80129ea:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80129ec:	4b04      	ldr	r3, [pc, #16]	@ (8012a00 <HAL_MspInit+0x24>)
 80129ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80129f0:	4b03      	ldr	r3, [pc, #12]	@ (8012a00 <HAL_MspInit+0x24>)
 80129f2:	2180      	movs	r1, #128	@ 0x80
 80129f4:	0549      	lsls	r1, r1, #21
 80129f6:	430a      	orrs	r2, r1
 80129f8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80129fa:	46c0      	nop			@ (mov r8, r8)
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	40021000 	.word	0x40021000

08012a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012a08:	46c0      	nop			@ (mov r8, r8)
 8012a0a:	e7fd      	b.n	8012a08 <NMI_Handler+0x4>

08012a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012a10:	46c0      	nop			@ (mov r8, r8)
 8012a12:	e7fd      	b.n	8012a10 <HardFault_Handler+0x4>

08012a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8012a18:	46c0      	nop			@ (mov r8, r8)
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}

08012a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012a1e:	b580      	push	{r7, lr}
 8012a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012a22:	46c0      	nop			@ (mov r8, r8)
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012a2c:	f001 fa90 	bl	8013f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
 8012a30:	f00f ff64 	bl	80228fc <vcp_service>
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8012a34:	46c0      	nop			@ (mov r8, r8)
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
	...

08012a3c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8012a40:	4b03      	ldr	r3, [pc, #12]	@ (8012a50 <RTC_IRQHandler+0x14>)
 8012a42:	0018      	movs	r0, r3
 8012a44:	f009 fade 	bl	801c004 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8012a48:	46c0      	nop			@ (mov r8, r8)
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	46c0      	nop			@ (mov r8, r8)
 8012a50:	20000ebc 	.word	0x20000ebc

08012a54 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8012a58:	2380      	movs	r3, #128	@ 0x80
 8012a5a:	021b      	lsls	r3, r3, #8
 8012a5c:	0018      	movs	r0, r3
 8012a5e:	f002 fd37 	bl	80154d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8012a62:	46c0      	nop			@ (mov r8, r8)
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8012a6c:	4b05      	ldr	r3, [pc, #20]	@ (8012a84 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8012a6e:	0018      	movs	r0, r3
 8012a70:	f002 f8bf 	bl	8014bf2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8012a74:	4b04      	ldr	r3, [pc, #16]	@ (8012a88 <DMA1_Channel2_3_IRQHandler+0x20>)
 8012a76:	0018      	movs	r0, r3
 8012a78:	f002 f8bb 	bl	8014bf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8012a7c:	46c0      	nop			@ (mov r8, r8)
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	46c0      	nop			@ (mov r8, r8)
 8012a84:	20000d54 	.word	0x20000d54
 8012a88:	20000d0c 	.word	0x20000d0c

08012a8c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8012a90:	4b07      	ldr	r3, [pc, #28]	@ (8012ab0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8012a92:	0018      	movs	r0, r3
 8012a94:	f002 f8ad 	bl	8014bf2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8012a98:	4b06      	ldr	r3, [pc, #24]	@ (8012ab4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8012a9a:	0018      	movs	r0, r3
 8012a9c:	f002 f8a9 	bl	8014bf2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8012aa0:	4b05      	ldr	r3, [pc, #20]	@ (8012ab8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8012aa2:	0018      	movs	r0, r3
 8012aa4:	f002 f8a5 	bl	8014bf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8012aa8:	46c0      	nop			@ (mov r8, r8)
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	46c0      	nop			@ (mov r8, r8)
 8012ab0:	20000dd8 	.word	0x20000dd8
 8012ab4:	20002178 	.word	0x20002178
 8012ab8:	200021c0 	.word	0x200021c0

08012abc <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8012ac0:	4b03      	ldr	r3, [pc, #12]	@ (8012ad0 <USART4_5_IRQHandler+0x14>)
 8012ac2:	0018      	movs	r0, r3
 8012ac4:	f00a f998 	bl	801cdf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8012ac8:	46c0      	nop			@ (mov r8, r8)
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	46c0      	nop			@ (mov r8, r8)
 8012ad0:	200020c0 	.word	0x200020c0

08012ad4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8012ad8:	4b09      	ldr	r3, [pc, #36]	@ (8012b00 <I2C1_IRQHandler+0x2c>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	699a      	ldr	r2, [r3, #24]
 8012ade:	23e0      	movs	r3, #224	@ 0xe0
 8012ae0:	00db      	lsls	r3, r3, #3
 8012ae2:	4013      	ands	r3, r2
 8012ae4:	d004      	beq.n	8012af0 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8012ae6:	4b06      	ldr	r3, [pc, #24]	@ (8012b00 <I2C1_IRQHandler+0x2c>)
 8012ae8:	0018      	movs	r0, r3
 8012aea:	f003 fc0f 	bl	801630c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8012aee:	e003      	b.n	8012af8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8012af0:	4b03      	ldr	r3, [pc, #12]	@ (8012b00 <I2C1_IRQHandler+0x2c>)
 8012af2:	0018      	movs	r0, r3
 8012af4:	f003 fbf0 	bl	80162d8 <HAL_I2C_EV_IRQHandler>
}
 8012af8:	46c0      	nop			@ (mov r8, r8)
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	46c0      	nop			@ (mov r8, r8)
 8012b00:	20000c64 	.word	0x20000c64

08012b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8012b08:	4b03      	ldr	r3, [pc, #12]	@ (8012b18 <USART1_IRQHandler+0x14>)
 8012b0a:	0018      	movs	r0, r3
 8012b0c:	f00a f974 	bl	801cdf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8012b10:	46c0      	nop			@ (mov r8, r8)
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	46c0      	nop			@ (mov r8, r8)
 8012b18:	20002008 	.word	0x20002008

08012b1c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8012b20:	4b03      	ldr	r3, [pc, #12]	@ (8012b30 <USB_IRQHandler+0x14>)
 8012b22:	0018      	movs	r0, r3
 8012b24:	f006 f8a6 	bl	8018c74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8012b28:	46c0      	nop			@ (mov r8, r8)
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	46c0      	nop			@ (mov r8, r8)
 8012b30:	20002ffc 	.word	0x20002ffc

08012b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	af00      	add	r7, sp, #0
  return 1;
 8012b38:	2301      	movs	r3, #1
}
 8012b3a:	0018      	movs	r0, r3
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <_kill>:

int _kill(int pid, int sig)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012b4a:	f013 f9d3 	bl	8025ef4 <__errno>
 8012b4e:	0003      	movs	r3, r0
 8012b50:	2216      	movs	r2, #22
 8012b52:	601a      	str	r2, [r3, #0]
  return -1;
 8012b54:	2301      	movs	r3, #1
 8012b56:	425b      	negs	r3, r3
}
 8012b58:	0018      	movs	r0, r3
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	b002      	add	sp, #8
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <_exit>:

void _exit (int status)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012b68:	2301      	movs	r3, #1
 8012b6a:	425a      	negs	r2, r3
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	0011      	movs	r1, r2
 8012b70:	0018      	movs	r0, r3
 8012b72:	f7ff ffe5 	bl	8012b40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012b76:	46c0      	nop			@ (mov r8, r8)
 8012b78:	e7fd      	b.n	8012b76 <_exit+0x16>

08012b7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012b7a:	b580      	push	{r7, lr}
 8012b7c:	b086      	sub	sp, #24
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	60f8      	str	r0, [r7, #12]
 8012b82:	60b9      	str	r1, [r7, #8]
 8012b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b86:	2300      	movs	r3, #0
 8012b88:	617b      	str	r3, [r7, #20]
 8012b8a:	e00a      	b.n	8012ba2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012b8c:	e000      	b.n	8012b90 <_read+0x16>
 8012b8e:	bf00      	nop
 8012b90:	0001      	movs	r1, r0
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	1c5a      	adds	r2, r3, #1
 8012b96:	60ba      	str	r2, [r7, #8]
 8012b98:	b2ca      	uxtb	r2, r1
 8012b9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	617b      	str	r3, [r7, #20]
 8012ba2:	697a      	ldr	r2, [r7, #20]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	dbf0      	blt.n	8012b8c <_read+0x12>
  }

  return len;
 8012baa:	687b      	ldr	r3, [r7, #4]
}
 8012bac:	0018      	movs	r0, r3
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	b006      	add	sp, #24
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b082      	sub	sp, #8
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	425b      	negs	r3, r3
}
 8012bc0:	0018      	movs	r0, r3
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	b002      	add	sp, #8
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	2280      	movs	r2, #128	@ 0x80
 8012bd6:	0192      	lsls	r2, r2, #6
 8012bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8012bda:	2300      	movs	r3, #0
}
 8012bdc:	0018      	movs	r0, r3
 8012bde:	46bd      	mov	sp, r7
 8012be0:	b002      	add	sp, #8
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <_isatty>:

int _isatty(int file)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012bec:	2301      	movs	r3, #1
}
 8012bee:	0018      	movs	r0, r3
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	b002      	add	sp, #8
 8012bf4:	bd80      	pop	{r7, pc}

08012bf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012bf6:	b580      	push	{r7, lr}
 8012bf8:	b084      	sub	sp, #16
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	60f8      	str	r0, [r7, #12]
 8012bfe:	60b9      	str	r1, [r7, #8]
 8012c00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012c02:	2300      	movs	r3, #0
}
 8012c04:	0018      	movs	r0, r3
 8012c06:	46bd      	mov	sp, r7
 8012c08:	b004      	add	sp, #16
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b086      	sub	sp, #24
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012c14:	4a14      	ldr	r2, [pc, #80]	@ (8012c68 <_sbrk+0x5c>)
 8012c16:	4b15      	ldr	r3, [pc, #84]	@ (8012c6c <_sbrk+0x60>)
 8012c18:	1ad3      	subs	r3, r2, r3
 8012c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012c20:	4b13      	ldr	r3, [pc, #76]	@ (8012c70 <_sbrk+0x64>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d102      	bne.n	8012c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012c28:	4b11      	ldr	r3, [pc, #68]	@ (8012c70 <_sbrk+0x64>)
 8012c2a:	4a12      	ldr	r2, [pc, #72]	@ (8012c74 <_sbrk+0x68>)
 8012c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012c2e:	4b10      	ldr	r3, [pc, #64]	@ (8012c70 <_sbrk+0x64>)
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	18d3      	adds	r3, r2, r3
 8012c36:	693a      	ldr	r2, [r7, #16]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d207      	bcs.n	8012c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012c3c:	f013 f95a 	bl	8025ef4 <__errno>
 8012c40:	0003      	movs	r3, r0
 8012c42:	220c      	movs	r2, #12
 8012c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012c46:	2301      	movs	r3, #1
 8012c48:	425b      	negs	r3, r3
 8012c4a:	e009      	b.n	8012c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012c4c:	4b08      	ldr	r3, [pc, #32]	@ (8012c70 <_sbrk+0x64>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012c52:	4b07      	ldr	r3, [pc, #28]	@ (8012c70 <_sbrk+0x64>)
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	18d2      	adds	r2, r2, r3
 8012c5a:	4b05      	ldr	r3, [pc, #20]	@ (8012c70 <_sbrk+0x64>)
 8012c5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
}
 8012c60:	0018      	movs	r0, r3
 8012c62:	46bd      	mov	sp, r7
 8012c64:	b006      	add	sp, #24
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	20005000 	.word	0x20005000
 8012c6c:	00000400 	.word	0x00000400
 8012c70:	20001e8c 	.word	0x20001e8c
 8012c74:	20003660 	.word	0x20003660

08012c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012c7c:	46c0      	nop			@ (mov r8, r8)
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
	...

08012c84 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b086      	sub	sp, #24
 8012c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012c8a:	2310      	movs	r3, #16
 8012c8c:	18fb      	adds	r3, r7, r3
 8012c8e:	0018      	movs	r0, r3
 8012c90:	2308      	movs	r3, #8
 8012c92:	001a      	movs	r2, r3
 8012c94:	2100      	movs	r1, #0
 8012c96:	f013 f889 	bl	8025dac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012c9a:	003b      	movs	r3, r7
 8012c9c:	0018      	movs	r0, r3
 8012c9e:	2310      	movs	r3, #16
 8012ca0:	001a      	movs	r2, r3
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	f013 f882 	bl	8025dac <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8012ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012caa:	2280      	movs	r2, #128	@ 0x80
 8012cac:	05d2      	lsls	r2, r2, #23
 8012cae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8012cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012cb8:	2200      	movs	r2, #0
 8012cba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8012cbc:	4b29      	ldr	r3, [pc, #164]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8012d68 <MX_TIM2_Init+0xe4>)
 8012cc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012cc2:	4b28      	ldr	r3, [pc, #160]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012cc8:	4b26      	ldr	r3, [pc, #152]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012cca:	2200      	movs	r2, #0
 8012ccc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8012cce:	4b25      	ldr	r3, [pc, #148]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012cd0:	0018      	movs	r0, r3
 8012cd2:	f009 faa5 	bl	801c220 <HAL_TIM_PWM_Init>
 8012cd6:	1e03      	subs	r3, r0, #0
 8012cd8:	d001      	beq.n	8012cde <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8012cda:	f7f9 ff35 	bl	800cb48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012cde:	2110      	movs	r1, #16
 8012ce0:	187b      	adds	r3, r7, r1
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012ce6:	187b      	adds	r3, r7, r1
 8012ce8:	2200      	movs	r2, #0
 8012cea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012cec:	187a      	adds	r2, r7, r1
 8012cee:	4b1d      	ldr	r3, [pc, #116]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012cf0:	0011      	movs	r1, r2
 8012cf2:	0018      	movs	r0, r3
 8012cf4:	f009 fdb2 	bl	801c85c <HAL_TIMEx_MasterConfigSynchronization>
 8012cf8:	1e03      	subs	r3, r0, #0
 8012cfa:	d001      	beq.n	8012d00 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8012cfc:	f7f9 ff24 	bl	800cb48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012d00:	003b      	movs	r3, r7
 8012d02:	2260      	movs	r2, #96	@ 0x60
 8012d04:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012d06:	003b      	movs	r3, r7
 8012d08:	2200      	movs	r2, #0
 8012d0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012d0c:	003b      	movs	r3, r7
 8012d0e:	2200      	movs	r2, #0
 8012d10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012d12:	003b      	movs	r3, r7
 8012d14:	2200      	movs	r2, #0
 8012d16:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012d18:	0039      	movs	r1, r7
 8012d1a:	4b12      	ldr	r3, [pc, #72]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	0018      	movs	r0, r3
 8012d20:	f009 fb50 	bl	801c3c4 <HAL_TIM_PWM_ConfigChannel>
 8012d24:	1e03      	subs	r3, r0, #0
 8012d26:	d001      	beq.n	8012d2c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8012d28:	f7f9 ff0e 	bl	800cb48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012d2c:	0039      	movs	r1, r7
 8012d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012d30:	2208      	movs	r2, #8
 8012d32:	0018      	movs	r0, r3
 8012d34:	f009 fb46 	bl	801c3c4 <HAL_TIM_PWM_ConfigChannel>
 8012d38:	1e03      	subs	r3, r0, #0
 8012d3a:	d001      	beq.n	8012d40 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8012d3c:	f7f9 ff04 	bl	800cb48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012d40:	0039      	movs	r1, r7
 8012d42:	4b08      	ldr	r3, [pc, #32]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012d44:	220c      	movs	r2, #12
 8012d46:	0018      	movs	r0, r3
 8012d48:	f009 fb3c 	bl	801c3c4 <HAL_TIM_PWM_ConfigChannel>
 8012d4c:	1e03      	subs	r3, r0, #0
 8012d4e:	d001      	beq.n	8012d54 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8012d50:	f7f9 fefa 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8012d54:	4b03      	ldr	r3, [pc, #12]	@ (8012d64 <MX_TIM2_Init+0xe0>)
 8012d56:	0018      	movs	r0, r3
 8012d58:	f000 f8fe 	bl	8012f58 <HAL_TIM_MspPostInit>

}
 8012d5c:	46c0      	nop			@ (mov r8, r8)
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	b006      	add	sp, #24
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	20001e90 	.word	0x20001e90
 8012d68:	0000ffff 	.word	0x0000ffff

08012d6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b086      	sub	sp, #24
 8012d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012d72:	2310      	movs	r3, #16
 8012d74:	18fb      	adds	r3, r7, r3
 8012d76:	0018      	movs	r0, r3
 8012d78:	2308      	movs	r3, #8
 8012d7a:	001a      	movs	r2, r3
 8012d7c:	2100      	movs	r1, #0
 8012d7e:	f013 f815 	bl	8025dac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012d82:	003b      	movs	r3, r7
 8012d84:	0018      	movs	r0, r3
 8012d86:	2310      	movs	r3, #16
 8012d88:	001a      	movs	r2, r3
 8012d8a:	2100      	movs	r1, #0
 8012d8c:	f013 f80e 	bl	8025dac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8012d90:	4b32      	ldr	r3, [pc, #200]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012d92:	4a33      	ldr	r2, [pc, #204]	@ (8012e60 <MX_TIM3_Init+0xf4>)
 8012d94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012d96:	4b31      	ldr	r3, [pc, #196]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012d98:	2200      	movs	r2, #0
 8012d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012d9e:	2200      	movs	r2, #0
 8012da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8012da2:	4b2e      	ldr	r3, [pc, #184]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012da4:	4a2f      	ldr	r2, [pc, #188]	@ (8012e64 <MX_TIM3_Init+0xf8>)
 8012da6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012da8:	4b2c      	ldr	r3, [pc, #176]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012daa:	2200      	movs	r2, #0
 8012dac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012dae:	4b2b      	ldr	r3, [pc, #172]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012db0:	2200      	movs	r2, #0
 8012db2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8012db4:	4b29      	ldr	r3, [pc, #164]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012db6:	0018      	movs	r0, r3
 8012db8:	f009 fa32 	bl	801c220 <HAL_TIM_PWM_Init>
 8012dbc:	1e03      	subs	r3, r0, #0
 8012dbe:	d001      	beq.n	8012dc4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8012dc0:	f7f9 fec2 	bl	800cb48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012dc4:	2110      	movs	r1, #16
 8012dc6:	187b      	adds	r3, r7, r1
 8012dc8:	2200      	movs	r2, #0
 8012dca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012dcc:	187b      	adds	r3, r7, r1
 8012dce:	2200      	movs	r2, #0
 8012dd0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012dd2:	187a      	adds	r2, r7, r1
 8012dd4:	4b21      	ldr	r3, [pc, #132]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012dd6:	0011      	movs	r1, r2
 8012dd8:	0018      	movs	r0, r3
 8012dda:	f009 fd3f 	bl	801c85c <HAL_TIMEx_MasterConfigSynchronization>
 8012dde:	1e03      	subs	r3, r0, #0
 8012de0:	d001      	beq.n	8012de6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8012de2:	f7f9 feb1 	bl	800cb48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012de6:	003b      	movs	r3, r7
 8012de8:	2260      	movs	r2, #96	@ 0x60
 8012dea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012dec:	003b      	movs	r3, r7
 8012dee:	2200      	movs	r2, #0
 8012df0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012df2:	003b      	movs	r3, r7
 8012df4:	2200      	movs	r2, #0
 8012df6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012df8:	003b      	movs	r3, r7
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012dfe:	0039      	movs	r1, r7
 8012e00:	4b16      	ldr	r3, [pc, #88]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012e02:	2200      	movs	r2, #0
 8012e04:	0018      	movs	r0, r3
 8012e06:	f009 fadd 	bl	801c3c4 <HAL_TIM_PWM_ConfigChannel>
 8012e0a:	1e03      	subs	r3, r0, #0
 8012e0c:	d001      	beq.n	8012e12 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8012e0e:	f7f9 fe9b 	bl	800cb48 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8012e12:	4b12      	ldr	r3, [pc, #72]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012e14:	2104      	movs	r1, #4
 8012e16:	0018      	movs	r0, r3
 8012e18:	f009 fd7e 	bl	801c918 <HAL_TIMEx_RemapConfig>
 8012e1c:	1e03      	subs	r3, r0, #0
 8012e1e:	d001      	beq.n	8012e24 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8012e20:	f7f9 fe92 	bl	800cb48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012e24:	0039      	movs	r1, r7
 8012e26:	4b0d      	ldr	r3, [pc, #52]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012e28:	2204      	movs	r2, #4
 8012e2a:	0018      	movs	r0, r3
 8012e2c:	f009 faca 	bl	801c3c4 <HAL_TIM_PWM_ConfigChannel>
 8012e30:	1e03      	subs	r3, r0, #0
 8012e32:	d001      	beq.n	8012e38 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8012e34:	f7f9 fe88 	bl	800cb48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012e38:	0039      	movs	r1, r7
 8012e3a:	4b08      	ldr	r3, [pc, #32]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012e3c:	2208      	movs	r2, #8
 8012e3e:	0018      	movs	r0, r3
 8012e40:	f009 fac0 	bl	801c3c4 <HAL_TIM_PWM_ConfigChannel>
 8012e44:	1e03      	subs	r3, r0, #0
 8012e46:	d001      	beq.n	8012e4c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8012e48:	f7f9 fe7e 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8012e4c:	4b03      	ldr	r3, [pc, #12]	@ (8012e5c <MX_TIM3_Init+0xf0>)
 8012e4e:	0018      	movs	r0, r3
 8012e50:	f000 f882 	bl	8012f58 <HAL_TIM_MspPostInit>

}
 8012e54:	46c0      	nop			@ (mov r8, r8)
 8012e56:	46bd      	mov	sp, r7
 8012e58:	b006      	add	sp, #24
 8012e5a:	bd80      	pop	{r7, pc}
 8012e5c:	20001ed0 	.word	0x20001ed0
 8012e60:	40000400 	.word	0x40000400
 8012e64:	0000ffff 	.word	0x0000ffff

08012e68 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012e6e:	003b      	movs	r3, r7
 8012e70:	0018      	movs	r0, r3
 8012e72:	2308      	movs	r3, #8
 8012e74:	001a      	movs	r2, r3
 8012e76:	2100      	movs	r1, #0
 8012e78:	f012 ff98 	bl	8025dac <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012e7c:	4b15      	ldr	r3, [pc, #84]	@ (8012ed4 <MX_TIM6_Init+0x6c>)
 8012e7e:	4a16      	ldr	r2, [pc, #88]	@ (8012ed8 <MX_TIM6_Init+0x70>)
 8012e80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8012e82:	4b14      	ldr	r3, [pc, #80]	@ (8012ed4 <MX_TIM6_Init+0x6c>)
 8012e84:	220a      	movs	r2, #10
 8012e86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012e88:	4b12      	ldr	r3, [pc, #72]	@ (8012ed4 <MX_TIM6_Init+0x6c>)
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8012e8e:	4b11      	ldr	r3, [pc, #68]	@ (8012ed4 <MX_TIM6_Init+0x6c>)
 8012e90:	4a12      	ldr	r2, [pc, #72]	@ (8012edc <MX_TIM6_Init+0x74>)
 8012e92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012e94:	4b0f      	ldr	r3, [pc, #60]	@ (8012ed4 <MX_TIM6_Init+0x6c>)
 8012e96:	2200      	movs	r2, #0
 8012e98:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8012e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8012ed4 <MX_TIM6_Init+0x6c>)
 8012e9c:	0018      	movs	r0, r3
 8012e9e:	f009 f917 	bl	801c0d0 <HAL_TIM_Base_Init>
 8012ea2:	1e03      	subs	r3, r0, #0
 8012ea4:	d001      	beq.n	8012eaa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8012ea6:	f7f9 fe4f 	bl	800cb48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012eaa:	003b      	movs	r3, r7
 8012eac:	2200      	movs	r2, #0
 8012eae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012eb0:	003b      	movs	r3, r7
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012eb6:	003a      	movs	r2, r7
 8012eb8:	4b06      	ldr	r3, [pc, #24]	@ (8012ed4 <MX_TIM6_Init+0x6c>)
 8012eba:	0011      	movs	r1, r2
 8012ebc:	0018      	movs	r0, r3
 8012ebe:	f009 fccd 	bl	801c85c <HAL_TIMEx_MasterConfigSynchronization>
 8012ec2:	1e03      	subs	r3, r0, #0
 8012ec4:	d001      	beq.n	8012eca <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8012ec6:	f7f9 fe3f 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8012eca:	46c0      	nop			@ (mov r8, r8)
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	b002      	add	sp, #8
 8012ed0:	bd80      	pop	{r7, pc}
 8012ed2:	46c0      	nop			@ (mov r8, r8)
 8012ed4:	20001f10 	.word	0x20001f10
 8012ed8:	40001000 	.word	0x40001000
 8012edc:	0000ffff 	.word	0x0000ffff

08012ee0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b082      	sub	sp, #8
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	2380      	movs	r3, #128	@ 0x80
 8012eee:	05db      	lsls	r3, r3, #23
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d106      	bne.n	8012f02 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8012f20 <HAL_TIM_PWM_MspInit+0x40>)
 8012ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012ef8:	4b09      	ldr	r3, [pc, #36]	@ (8012f20 <HAL_TIM_PWM_MspInit+0x40>)
 8012efa:	2101      	movs	r1, #1
 8012efc:	430a      	orrs	r2, r1
 8012efe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8012f00:	e00a      	b.n	8012f18 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4a07      	ldr	r2, [pc, #28]	@ (8012f24 <HAL_TIM_PWM_MspInit+0x44>)
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	d105      	bne.n	8012f18 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012f0c:	4b04      	ldr	r3, [pc, #16]	@ (8012f20 <HAL_TIM_PWM_MspInit+0x40>)
 8012f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f10:	4b03      	ldr	r3, [pc, #12]	@ (8012f20 <HAL_TIM_PWM_MspInit+0x40>)
 8012f12:	2102      	movs	r1, #2
 8012f14:	430a      	orrs	r2, r1
 8012f16:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012f18:	46c0      	nop			@ (mov r8, r8)
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	b002      	add	sp, #8
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	40021000 	.word	0x40021000
 8012f24:	40000400 	.word	0x40000400

08012f28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	4a06      	ldr	r2, [pc, #24]	@ (8012f50 <HAL_TIM_Base_MspInit+0x28>)
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d105      	bne.n	8012f46 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012f3a:	4b06      	ldr	r3, [pc, #24]	@ (8012f54 <HAL_TIM_Base_MspInit+0x2c>)
 8012f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f3e:	4b05      	ldr	r3, [pc, #20]	@ (8012f54 <HAL_TIM_Base_MspInit+0x2c>)
 8012f40:	2110      	movs	r1, #16
 8012f42:	430a      	orrs	r2, r1
 8012f44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8012f46:	46c0      	nop			@ (mov r8, r8)
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	b002      	add	sp, #8
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	46c0      	nop			@ (mov r8, r8)
 8012f50:	40001000 	.word	0x40001000
 8012f54:	40021000 	.word	0x40021000

08012f58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012f58:	b590      	push	{r4, r7, lr}
 8012f5a:	b08b      	sub	sp, #44	@ 0x2c
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f60:	2414      	movs	r4, #20
 8012f62:	193b      	adds	r3, r7, r4
 8012f64:	0018      	movs	r0, r3
 8012f66:	2314      	movs	r3, #20
 8012f68:	001a      	movs	r2, r3
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	f012 ff1e 	bl	8025dac <memset>
  if(timHandle->Instance==TIM2)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	2380      	movs	r3, #128	@ 0x80
 8012f76:	05db      	lsls	r3, r3, #23
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d123      	bne.n	8012fc4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f7c:	4b27      	ldr	r3, [pc, #156]	@ (801301c <HAL_TIM_MspPostInit+0xc4>)
 8012f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f80:	4b26      	ldr	r3, [pc, #152]	@ (801301c <HAL_TIM_MspPostInit+0xc4>)
 8012f82:	2101      	movs	r1, #1
 8012f84:	430a      	orrs	r2, r1
 8012f86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012f88:	4b24      	ldr	r3, [pc, #144]	@ (801301c <HAL_TIM_MspPostInit+0xc4>)
 8012f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	4013      	ands	r3, r2
 8012f90:	613b      	str	r3, [r7, #16]
 8012f92:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8012f94:	0021      	movs	r1, r4
 8012f96:	187b      	adds	r3, r7, r1
 8012f98:	220d      	movs	r2, #13
 8012f9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f9c:	187b      	adds	r3, r7, r1
 8012f9e:	2202      	movs	r2, #2
 8012fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fa2:	187b      	adds	r3, r7, r1
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fa8:	187b      	adds	r3, r7, r1
 8012faa:	2200      	movs	r2, #0
 8012fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8012fae:	187b      	adds	r3, r7, r1
 8012fb0:	2202      	movs	r2, #2
 8012fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012fb4:	187a      	adds	r2, r7, r1
 8012fb6:	23a0      	movs	r3, #160	@ 0xa0
 8012fb8:	05db      	lsls	r3, r3, #23
 8012fba:	0011      	movs	r1, r2
 8012fbc:	0018      	movs	r0, r3
 8012fbe:	f002 f8cf 	bl	8015160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012fc2:	e027      	b.n	8013014 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	4a15      	ldr	r2, [pc, #84]	@ (8013020 <HAL_TIM_MspPostInit+0xc8>)
 8012fca:	4293      	cmp	r3, r2
 8012fcc:	d122      	bne.n	8013014 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012fce:	4b13      	ldr	r3, [pc, #76]	@ (801301c <HAL_TIM_MspPostInit+0xc4>)
 8012fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fd2:	4b12      	ldr	r3, [pc, #72]	@ (801301c <HAL_TIM_MspPostInit+0xc4>)
 8012fd4:	2104      	movs	r1, #4
 8012fd6:	430a      	orrs	r2, r1
 8012fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012fda:	4b10      	ldr	r3, [pc, #64]	@ (801301c <HAL_TIM_MspPostInit+0xc4>)
 8012fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fde:	2204      	movs	r2, #4
 8012fe0:	4013      	ands	r3, r2
 8012fe2:	60fb      	str	r3, [r7, #12]
 8012fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8012fe6:	2114      	movs	r1, #20
 8012fe8:	187b      	adds	r3, r7, r1
 8012fea:	22e0      	movs	r2, #224	@ 0xe0
 8012fec:	0052      	lsls	r2, r2, #1
 8012fee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ff0:	187b      	adds	r3, r7, r1
 8012ff2:	2202      	movs	r2, #2
 8012ff4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ff6:	187b      	adds	r3, r7, r1
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ffc:	187b      	adds	r3, r7, r1
 8012ffe:	2200      	movs	r2, #0
 8013000:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013002:	187b      	adds	r3, r7, r1
 8013004:	2202      	movs	r2, #2
 8013006:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013008:	187b      	adds	r3, r7, r1
 801300a:	4a06      	ldr	r2, [pc, #24]	@ (8013024 <HAL_TIM_MspPostInit+0xcc>)
 801300c:	0019      	movs	r1, r3
 801300e:	0010      	movs	r0, r2
 8013010:	f002 f8a6 	bl	8015160 <HAL_GPIO_Init>
}
 8013014:	46c0      	nop			@ (mov r8, r8)
 8013016:	46bd      	mov	sp, r7
 8013018:	b00b      	add	sp, #44	@ 0x2c
 801301a:	bd90      	pop	{r4, r7, pc}
 801301c:	40021000 	.word	0x40021000
 8013020:	40000400 	.word	0x40000400
 8013024:	50000800 	.word	0x50000800

08013028 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 801302c:	4b17      	ldr	r3, [pc, #92]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 801302e:	4a18      	ldr	r2, [pc, #96]	@ (8013090 <MX_LPUART1_UART_Init+0x68>)
 8013030:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8013032:	4b16      	ldr	r3, [pc, #88]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 8013034:	22e1      	movs	r2, #225	@ 0xe1
 8013036:	0252      	lsls	r2, r2, #9
 8013038:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801303a:	4b14      	ldr	r3, [pc, #80]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 801303c:	2200      	movs	r2, #0
 801303e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8013040:	4b12      	ldr	r3, [pc, #72]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 8013042:	2200      	movs	r2, #0
 8013044:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8013046:	4b11      	ldr	r3, [pc, #68]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 8013048:	2200      	movs	r2, #0
 801304a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801304c:	4b0f      	ldr	r3, [pc, #60]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 801304e:	220c      	movs	r2, #12
 8013050:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013052:	4b0e      	ldr	r3, [pc, #56]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 8013054:	2200      	movs	r2, #0
 8013056:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013058:	4b0c      	ldr	r3, [pc, #48]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 801305a:	2200      	movs	r2, #0
 801305c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 801305e:	4b0b      	ldr	r3, [pc, #44]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 8013060:	2218      	movs	r2, #24
 8013062:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013064:	4b09      	ldr	r3, [pc, #36]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 8013066:	2280      	movs	r2, #128	@ 0x80
 8013068:	0212      	lsls	r2, r2, #8
 801306a:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 801306c:	4b07      	ldr	r3, [pc, #28]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 801306e:	2280      	movs	r2, #128	@ 0x80
 8013070:	0152      	lsls	r2, r2, #5
 8013072:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013074:	4b05      	ldr	r3, [pc, #20]	@ (801308c <MX_LPUART1_UART_Init+0x64>)
 8013076:	0018      	movs	r0, r3
 8013078:	f009 fc6c 	bl	801c954 <HAL_UART_Init>
 801307c:	1e03      	subs	r3, r0, #0
 801307e:	d001      	beq.n	8013084 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013080:	f7f9 fd62 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013084:	46c0      	nop			@ (mov r8, r8)
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	46c0      	nop			@ (mov r8, r8)
 801308c:	20001f50 	.word	0x20001f50
 8013090:	40004800 	.word	0x40004800

08013094 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013098:	4b14      	ldr	r3, [pc, #80]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 801309a:	4a15      	ldr	r2, [pc, #84]	@ (80130f0 <MX_USART1_UART_Init+0x5c>)
 801309c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801309e:	4b13      	ldr	r3, [pc, #76]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130a0:	22e1      	movs	r2, #225	@ 0xe1
 80130a2:	0252      	lsls	r2, r2, #9
 80130a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80130a6:	4b11      	ldr	r3, [pc, #68]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130a8:	2200      	movs	r2, #0
 80130aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80130ac:	4b0f      	ldr	r3, [pc, #60]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130ae:	2200      	movs	r2, #0
 80130b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80130b2:	4b0e      	ldr	r3, [pc, #56]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130b4:	2200      	movs	r2, #0
 80130b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80130b8:	4b0c      	ldr	r3, [pc, #48]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130ba:	220c      	movs	r2, #12
 80130bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80130be:	4b0b      	ldr	r3, [pc, #44]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130c0:	2200      	movs	r2, #0
 80130c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80130c4:	4b09      	ldr	r3, [pc, #36]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130c6:	2200      	movs	r2, #0
 80130c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80130ca:	4b08      	ldr	r3, [pc, #32]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130cc:	2200      	movs	r2, #0
 80130ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80130d0:	4b06      	ldr	r3, [pc, #24]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130d2:	2200      	movs	r2, #0
 80130d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80130d6:	4b05      	ldr	r3, [pc, #20]	@ (80130ec <MX_USART1_UART_Init+0x58>)
 80130d8:	0018      	movs	r0, r3
 80130da:	f009 fc3b 	bl	801c954 <HAL_UART_Init>
 80130de:	1e03      	subs	r3, r0, #0
 80130e0:	d001      	beq.n	80130e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80130e2:	f7f9 fd31 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80130e6:	46c0      	nop			@ (mov r8, r8)
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	20002008 	.word	0x20002008
 80130f0:	40013800 	.word	0x40013800

080130f4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80130f8:	4b14      	ldr	r3, [pc, #80]	@ (801314c <MX_USART4_UART_Init+0x58>)
 80130fa:	4a15      	ldr	r2, [pc, #84]	@ (8013150 <MX_USART4_UART_Init+0x5c>)
 80130fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80130fe:	4b13      	ldr	r3, [pc, #76]	@ (801314c <MX_USART4_UART_Init+0x58>)
 8013100:	22e1      	movs	r2, #225	@ 0xe1
 8013102:	0252      	lsls	r2, r2, #9
 8013104:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013106:	4b11      	ldr	r3, [pc, #68]	@ (801314c <MX_USART4_UART_Init+0x58>)
 8013108:	2200      	movs	r2, #0
 801310a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 801310c:	4b0f      	ldr	r3, [pc, #60]	@ (801314c <MX_USART4_UART_Init+0x58>)
 801310e:	2200      	movs	r2, #0
 8013110:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013112:	4b0e      	ldr	r3, [pc, #56]	@ (801314c <MX_USART4_UART_Init+0x58>)
 8013114:	2200      	movs	r2, #0
 8013116:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013118:	4b0c      	ldr	r3, [pc, #48]	@ (801314c <MX_USART4_UART_Init+0x58>)
 801311a:	220c      	movs	r2, #12
 801311c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801311e:	4b0b      	ldr	r3, [pc, #44]	@ (801314c <MX_USART4_UART_Init+0x58>)
 8013120:	2200      	movs	r2, #0
 8013122:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013124:	4b09      	ldr	r3, [pc, #36]	@ (801314c <MX_USART4_UART_Init+0x58>)
 8013126:	2200      	movs	r2, #0
 8013128:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801312a:	4b08      	ldr	r3, [pc, #32]	@ (801314c <MX_USART4_UART_Init+0x58>)
 801312c:	2200      	movs	r2, #0
 801312e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013130:	4b06      	ldr	r3, [pc, #24]	@ (801314c <MX_USART4_UART_Init+0x58>)
 8013132:	2200      	movs	r2, #0
 8013134:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013136:	4b05      	ldr	r3, [pc, #20]	@ (801314c <MX_USART4_UART_Init+0x58>)
 8013138:	0018      	movs	r0, r3
 801313a:	f009 fc0b 	bl	801c954 <HAL_UART_Init>
 801313e:	1e03      	subs	r3, r0, #0
 8013140:	d001      	beq.n	8013146 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8013142:	f7f9 fd01 	bl	800cb48 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013146:	46c0      	nop			@ (mov r8, r8)
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	200020c0 	.word	0x200020c0
 8013150:	40004c00 	.word	0x40004c00

08013154 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013154:	b590      	push	{r4, r7, lr}
 8013156:	b08d      	sub	sp, #52	@ 0x34
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801315c:	241c      	movs	r4, #28
 801315e:	193b      	adds	r3, r7, r4
 8013160:	0018      	movs	r0, r3
 8013162:	2314      	movs	r3, #20
 8013164:	001a      	movs	r2, r3
 8013166:	2100      	movs	r1, #0
 8013168:	f012 fe20 	bl	8025dac <memset>
  if(uartHandle->Instance==LPUART1)
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4a8b      	ldr	r2, [pc, #556]	@ (80133a0 <HAL_UART_MspInit+0x24c>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d129      	bne.n	80131ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013176:	4b8b      	ldr	r3, [pc, #556]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 8013178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801317a:	4b8a      	ldr	r3, [pc, #552]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 801317c:	2180      	movs	r1, #128	@ 0x80
 801317e:	02c9      	lsls	r1, r1, #11
 8013180:	430a      	orrs	r2, r1
 8013182:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013184:	4b87      	ldr	r3, [pc, #540]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 8013186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013188:	4b86      	ldr	r3, [pc, #536]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 801318a:	2104      	movs	r1, #4
 801318c:	430a      	orrs	r2, r1
 801318e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013190:	4b84      	ldr	r3, [pc, #528]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 8013192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013194:	2204      	movs	r2, #4
 8013196:	4013      	ands	r3, r2
 8013198:	61bb      	str	r3, [r7, #24]
 801319a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801319c:	0021      	movs	r1, r4
 801319e:	187b      	adds	r3, r7, r1
 80131a0:	2203      	movs	r2, #3
 80131a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131a4:	187b      	adds	r3, r7, r1
 80131a6:	2202      	movs	r2, #2
 80131a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131aa:	187b      	adds	r3, r7, r1
 80131ac:	2200      	movs	r2, #0
 80131ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131b0:	187b      	adds	r3, r7, r1
 80131b2:	2203      	movs	r2, #3
 80131b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80131b6:	187b      	adds	r3, r7, r1
 80131b8:	2206      	movs	r2, #6
 80131ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80131bc:	187b      	adds	r3, r7, r1
 80131be:	4a7a      	ldr	r2, [pc, #488]	@ (80133a8 <HAL_UART_MspInit+0x254>)
 80131c0:	0019      	movs	r1, r3
 80131c2:	0010      	movs	r0, r2
 80131c4:	f001 ffcc 	bl	8015160 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80131c8:	e0e5      	b.n	8013396 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a77      	ldr	r2, [pc, #476]	@ (80133ac <HAL_UART_MspInit+0x258>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d133      	bne.n	801323c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80131d4:	4b73      	ldr	r3, [pc, #460]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 80131d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80131d8:	4b72      	ldr	r3, [pc, #456]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 80131da:	2180      	movs	r1, #128	@ 0x80
 80131dc:	01c9      	lsls	r1, r1, #7
 80131de:	430a      	orrs	r2, r1
 80131e0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80131e2:	4b70      	ldr	r3, [pc, #448]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 80131e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131e6:	4b6f      	ldr	r3, [pc, #444]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 80131e8:	2101      	movs	r1, #1
 80131ea:	430a      	orrs	r2, r1
 80131ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80131ee:	4b6d      	ldr	r3, [pc, #436]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 80131f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131f2:	2201      	movs	r2, #1
 80131f4:	4013      	ands	r3, r2
 80131f6:	617b      	str	r3, [r7, #20]
 80131f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80131fa:	211c      	movs	r1, #28
 80131fc:	187b      	adds	r3, r7, r1
 80131fe:	22c0      	movs	r2, #192	@ 0xc0
 8013200:	00d2      	lsls	r2, r2, #3
 8013202:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013204:	187b      	adds	r3, r7, r1
 8013206:	2202      	movs	r2, #2
 8013208:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801320a:	187b      	adds	r3, r7, r1
 801320c:	2200      	movs	r2, #0
 801320e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013210:	187b      	adds	r3, r7, r1
 8013212:	2203      	movs	r2, #3
 8013214:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013216:	187b      	adds	r3, r7, r1
 8013218:	2204      	movs	r2, #4
 801321a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801321c:	187a      	adds	r2, r7, r1
 801321e:	23a0      	movs	r3, #160	@ 0xa0
 8013220:	05db      	lsls	r3, r3, #23
 8013222:	0011      	movs	r1, r2
 8013224:	0018      	movs	r0, r3
 8013226:	f001 ff9b 	bl	8015160 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801322a:	2200      	movs	r2, #0
 801322c:	2100      	movs	r1, #0
 801322e:	201b      	movs	r0, #27
 8013230:	f001 fb44 	bl	80148bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013234:	201b      	movs	r0, #27
 8013236:	f001 fb56 	bl	80148e6 <HAL_NVIC_EnableIRQ>
}
 801323a:	e0ac      	b.n	8013396 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4a5b      	ldr	r2, [pc, #364]	@ (80133b0 <HAL_UART_MspInit+0x25c>)
 8013242:	4293      	cmp	r3, r2
 8013244:	d000      	beq.n	8013248 <HAL_UART_MspInit+0xf4>
 8013246:	e0a6      	b.n	8013396 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013248:	4b56      	ldr	r3, [pc, #344]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 801324a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801324c:	4b55      	ldr	r3, [pc, #340]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 801324e:	2180      	movs	r1, #128	@ 0x80
 8013250:	0309      	lsls	r1, r1, #12
 8013252:	430a      	orrs	r2, r1
 8013254:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013256:	4b53      	ldr	r3, [pc, #332]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 8013258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801325a:	4b52      	ldr	r3, [pc, #328]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 801325c:	2101      	movs	r1, #1
 801325e:	430a      	orrs	r2, r1
 8013260:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013262:	4b50      	ldr	r3, [pc, #320]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 8013264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013266:	2201      	movs	r2, #1
 8013268:	4013      	ands	r3, r2
 801326a:	613b      	str	r3, [r7, #16]
 801326c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801326e:	4b4d      	ldr	r3, [pc, #308]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 8013270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013272:	4b4c      	ldr	r3, [pc, #304]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 8013274:	2104      	movs	r1, #4
 8013276:	430a      	orrs	r2, r1
 8013278:	62da      	str	r2, [r3, #44]	@ 0x2c
 801327a:	4b4a      	ldr	r3, [pc, #296]	@ (80133a4 <HAL_UART_MspInit+0x250>)
 801327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801327e:	2204      	movs	r2, #4
 8013280:	4013      	ands	r3, r2
 8013282:	60fb      	str	r3, [r7, #12]
 8013284:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013286:	241c      	movs	r4, #28
 8013288:	193b      	adds	r3, r7, r4
 801328a:	2202      	movs	r2, #2
 801328c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801328e:	193b      	adds	r3, r7, r4
 8013290:	2202      	movs	r2, #2
 8013292:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013294:	193b      	adds	r3, r7, r4
 8013296:	2200      	movs	r2, #0
 8013298:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801329a:	193b      	adds	r3, r7, r4
 801329c:	2203      	movs	r2, #3
 801329e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80132a0:	193b      	adds	r3, r7, r4
 80132a2:	2206      	movs	r2, #6
 80132a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80132a6:	193a      	adds	r2, r7, r4
 80132a8:	23a0      	movs	r3, #160	@ 0xa0
 80132aa:	05db      	lsls	r3, r3, #23
 80132ac:	0011      	movs	r1, r2
 80132ae:	0018      	movs	r0, r3
 80132b0:	f001 ff56 	bl	8015160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80132b4:	0021      	movs	r1, r4
 80132b6:	187b      	adds	r3, r7, r1
 80132b8:	2280      	movs	r2, #128	@ 0x80
 80132ba:	00d2      	lsls	r2, r2, #3
 80132bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132be:	187b      	adds	r3, r7, r1
 80132c0:	2202      	movs	r2, #2
 80132c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132c4:	187b      	adds	r3, r7, r1
 80132c6:	2200      	movs	r2, #0
 80132c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132ca:	187b      	adds	r3, r7, r1
 80132cc:	2203      	movs	r2, #3
 80132ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80132d0:	187b      	adds	r3, r7, r1
 80132d2:	2206      	movs	r2, #6
 80132d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80132d6:	187b      	adds	r3, r7, r1
 80132d8:	4a33      	ldr	r2, [pc, #204]	@ (80133a8 <HAL_UART_MspInit+0x254>)
 80132da:	0019      	movs	r1, r3
 80132dc:	0010      	movs	r0, r2
 80132de:	f001 ff3f 	bl	8015160 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80132e2:	4b34      	ldr	r3, [pc, #208]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 80132e4:	4a34      	ldr	r2, [pc, #208]	@ (80133b8 <HAL_UART_MspInit+0x264>)
 80132e6:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80132e8:	4b32      	ldr	r3, [pc, #200]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 80132ea:	220c      	movs	r2, #12
 80132ec:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80132ee:	4b31      	ldr	r3, [pc, #196]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 80132f0:	2200      	movs	r2, #0
 80132f2:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80132f4:	4b2f      	ldr	r3, [pc, #188]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 80132f6:	2200      	movs	r2, #0
 80132f8:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80132fa:	4b2e      	ldr	r3, [pc, #184]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 80132fc:	2280      	movs	r2, #128	@ 0x80
 80132fe:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013300:	4b2c      	ldr	r3, [pc, #176]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 8013302:	2200      	movs	r2, #0
 8013304:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013306:	4b2b      	ldr	r3, [pc, #172]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 8013308:	2200      	movs	r2, #0
 801330a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 801330c:	4b29      	ldr	r3, [pc, #164]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 801330e:	2220      	movs	r2, #32
 8013310:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013312:	4b28      	ldr	r3, [pc, #160]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 8013314:	2200      	movs	r2, #0
 8013316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013318:	4b26      	ldr	r3, [pc, #152]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 801331a:	0018      	movs	r0, r3
 801331c:	f001 fb04 	bl	8014928 <HAL_DMA_Init>
 8013320:	1e03      	subs	r3, r0, #0
 8013322:	d001      	beq.n	8013328 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013324:	f7f9 fc10 	bl	800cb48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4a22      	ldr	r2, [pc, #136]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 801332c:	675a      	str	r2, [r3, #116]	@ 0x74
 801332e:	4b21      	ldr	r3, [pc, #132]	@ (80133b4 <HAL_UART_MspInit+0x260>)
 8013330:	687a      	ldr	r2, [r7, #4]
 8013332:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013334:	4b21      	ldr	r3, [pc, #132]	@ (80133bc <HAL_UART_MspInit+0x268>)
 8013336:	4a22      	ldr	r2, [pc, #136]	@ (80133c0 <HAL_UART_MspInit+0x26c>)
 8013338:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 801333a:	4b20      	ldr	r3, [pc, #128]	@ (80133bc <HAL_UART_MspInit+0x268>)
 801333c:	220c      	movs	r2, #12
 801333e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013340:	4b1e      	ldr	r3, [pc, #120]	@ (80133bc <HAL_UART_MspInit+0x268>)
 8013342:	2210      	movs	r2, #16
 8013344:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013346:	4b1d      	ldr	r3, [pc, #116]	@ (80133bc <HAL_UART_MspInit+0x268>)
 8013348:	2200      	movs	r2, #0
 801334a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 801334c:	4b1b      	ldr	r3, [pc, #108]	@ (80133bc <HAL_UART_MspInit+0x268>)
 801334e:	2280      	movs	r2, #128	@ 0x80
 8013350:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013352:	4b1a      	ldr	r3, [pc, #104]	@ (80133bc <HAL_UART_MspInit+0x268>)
 8013354:	2200      	movs	r2, #0
 8013356:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013358:	4b18      	ldr	r3, [pc, #96]	@ (80133bc <HAL_UART_MspInit+0x268>)
 801335a:	2200      	movs	r2, #0
 801335c:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 801335e:	4b17      	ldr	r3, [pc, #92]	@ (80133bc <HAL_UART_MspInit+0x268>)
 8013360:	2200      	movs	r2, #0
 8013362:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013364:	4b15      	ldr	r3, [pc, #84]	@ (80133bc <HAL_UART_MspInit+0x268>)
 8013366:	2200      	movs	r2, #0
 8013368:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 801336a:	4b14      	ldr	r3, [pc, #80]	@ (80133bc <HAL_UART_MspInit+0x268>)
 801336c:	0018      	movs	r0, r3
 801336e:	f001 fadb 	bl	8014928 <HAL_DMA_Init>
 8013372:	1e03      	subs	r3, r0, #0
 8013374:	d001      	beq.n	801337a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013376:	f7f9 fbe7 	bl	800cb48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	4a0f      	ldr	r2, [pc, #60]	@ (80133bc <HAL_UART_MspInit+0x268>)
 801337e:	671a      	str	r2, [r3, #112]	@ 0x70
 8013380:	4b0e      	ldr	r3, [pc, #56]	@ (80133bc <HAL_UART_MspInit+0x268>)
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013386:	2200      	movs	r2, #0
 8013388:	2100      	movs	r1, #0
 801338a:	200e      	movs	r0, #14
 801338c:	f001 fa96 	bl	80148bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013390:	200e      	movs	r0, #14
 8013392:	f001 faa8 	bl	80148e6 <HAL_NVIC_EnableIRQ>
}
 8013396:	46c0      	nop			@ (mov r8, r8)
 8013398:	46bd      	mov	sp, r7
 801339a:	b00d      	add	sp, #52	@ 0x34
 801339c:	bd90      	pop	{r4, r7, pc}
 801339e:	46c0      	nop			@ (mov r8, r8)
 80133a0:	40004800 	.word	0x40004800
 80133a4:	40021000 	.word	0x40021000
 80133a8:	50000800 	.word	0x50000800
 80133ac:	40013800 	.word	0x40013800
 80133b0:	40004c00 	.word	0x40004c00
 80133b4:	20002178 	.word	0x20002178
 80133b8:	4002006c 	.word	0x4002006c
 80133bc:	200021c0 	.word	0x200021c0
 80133c0:	40020080 	.word	0x40020080

080133c4 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80133cc:	f000 fdd2 	bl	8013f74 <HAL_GetTick>
 80133d0:	0003      	movs	r3, r0
 80133d2:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80133d4:	4b1c      	ldr	r3, [pc, #112]	@ (8013448 <TimestampIsReached+0x84>)
 80133d6:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80133d8:	697a      	ldr	r2, [r7, #20]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d307      	bcc.n	80133f0 <TimestampIsReached+0x2c>
 80133e0:	697a      	ldr	r2, [r7, #20]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	693a      	ldr	r2, [r7, #16]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d901      	bls.n	80133f0 <TimestampIsReached+0x2c>
 80133ec:	2201      	movs	r2, #1
 80133ee:	e000      	b.n	80133f2 <TimestampIsReached+0x2e>
 80133f0:	2200      	movs	r2, #0
 80133f2:	230f      	movs	r3, #15
 80133f4:	18fb      	adds	r3, r7, r3
 80133f6:	701a      	strb	r2, [r3, #0]
 80133f8:	781a      	ldrb	r2, [r3, #0]
 80133fa:	2101      	movs	r1, #1
 80133fc:	400a      	ands	r2, r1
 80133fe:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013400:	697a      	ldr	r2, [r7, #20]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	429a      	cmp	r2, r3
 8013406:	d207      	bcs.n	8013418 <TimestampIsReached+0x54>
 8013408:	687a      	ldr	r2, [r7, #4]
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	1ad3      	subs	r3, r2, r3
 801340e:	693a      	ldr	r2, [r7, #16]
 8013410:	429a      	cmp	r2, r3
 8013412:	d201      	bcs.n	8013418 <TimestampIsReached+0x54>
 8013414:	2201      	movs	r2, #1
 8013416:	e000      	b.n	801341a <TimestampIsReached+0x56>
 8013418:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 801341a:	200e      	movs	r0, #14
 801341c:	183b      	adds	r3, r7, r0
 801341e:	701a      	strb	r2, [r3, #0]
 8013420:	781a      	ldrb	r2, [r3, #0]
 8013422:	2101      	movs	r1, #1
 8013424:	400a      	ands	r2, r1
 8013426:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013428:	230f      	movs	r3, #15
 801342a:	18fb      	adds	r3, r7, r3
 801342c:	781b      	ldrb	r3, [r3, #0]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d103      	bne.n	801343a <TimestampIsReached+0x76>
 8013432:	183b      	adds	r3, r7, r0
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d001      	beq.n	801343e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 801343a:	2301      	movs	r3, #1
 801343c:	e000      	b.n	8013440 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 801343e:	2300      	movs	r3, #0
}
 8013440:	0018      	movs	r0, r3
 8013442:	46bd      	mov	sp, r7
 8013444:	b006      	add	sp, #24
 8013446:	bd80      	pop	{r7, pc}
 8013448:	7fffffff 	.word	0x7fffffff

0801344c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8013454:	f000 fd8e 	bl	8013f74 <HAL_GetTick>
 8013458:	0002      	movs	r2, r0
 801345a:	4904      	ldr	r1, [pc, #16]	@ (801346c <AddTimestamp+0x20>)
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	0018      	movs	r0, r3
 8013460:	f012 fb3a 	bl	8025ad8 <siprintf>
}
 8013464:	46c0      	nop			@ (mov r8, r8)
 8013466:	46bd      	mov	sp, r7
 8013468:	b002      	add	sp, #8
 801346a:	bd80      	pop	{r7, pc}
 801346c:	0802db24 	.word	0x0802db24

08013470 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013470:	b40c      	push	{r2, r3}
 8013472:	b5b0      	push	{r4, r5, r7, lr}
 8013474:	b0a4      	sub	sp, #144	@ 0x90
 8013476:	af00      	add	r7, sp, #0
 8013478:	0002      	movs	r2, r0
 801347a:	6039      	str	r1, [r7, #0]
 801347c:	1dfb      	adds	r3, r7, #7
 801347e:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013480:	4b23      	ldr	r3, [pc, #140]	@ (8013510 <CreateLine+0xa0>)
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	1dfa      	adds	r2, r7, #7
 8013486:	7812      	ldrb	r2, [r2, #0]
 8013488:	429a      	cmp	r2, r3
 801348a:	d839      	bhi.n	8013500 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 801348c:	683a      	ldr	r2, [r7, #0]
 801348e:	4921      	ldr	r1, [pc, #132]	@ (8013514 <CreateLine+0xa4>)
 8013490:	240c      	movs	r4, #12
 8013492:	193b      	adds	r3, r7, r4
 8013494:	0018      	movs	r0, r3
 8013496:	f012 fb1f 	bl	8025ad8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 801349a:	4b1d      	ldr	r3, [pc, #116]	@ (8013510 <CreateLine+0xa0>)
 801349c:	781b      	ldrb	r3, [r3, #0]
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d909      	bls.n	80134b6 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80134a2:	193b      	adds	r3, r7, r4
 80134a4:	0018      	movs	r0, r3
 80134a6:	f7ec fe61 	bl	800016c <strlen>
 80134aa:	0002      	movs	r2, r0
 80134ac:	193b      	adds	r3, r7, r4
 80134ae:	189b      	adds	r3, r3, r2
 80134b0:	0018      	movs	r0, r3
 80134b2:	f7ff ffcb 	bl	801344c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80134b6:	240c      	movs	r4, #12
 80134b8:	193b      	adds	r3, r7, r4
 80134ba:	0018      	movs	r0, r3
 80134bc:	f7ec fe56 	bl	800016c <strlen>
 80134c0:	0003      	movs	r3, r0
 80134c2:	218c      	movs	r1, #140	@ 0x8c
 80134c4:	187a      	adds	r2, r7, r1
 80134c6:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80134c8:	239c      	movs	r3, #156	@ 0x9c
 80134ca:	2508      	movs	r5, #8
 80134cc:	195b      	adds	r3, r3, r5
 80134ce:	19db      	adds	r3, r3, r7
 80134d0:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80134d2:	193a      	adds	r2, r7, r4
 80134d4:	187b      	adds	r3, r7, r1
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	18d0      	adds	r0, r2, r3
 80134da:	187b      	adds	r3, r7, r1
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2280      	movs	r2, #128	@ 0x80
 80134e0:	1ad3      	subs	r3, r2, r3
 80134e2:	0019      	movs	r1, r3
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	2298      	movs	r2, #152	@ 0x98
 80134e8:	1952      	adds	r2, r2, r5
 80134ea:	19d2      	adds	r2, r2, r7
 80134ec:	6812      	ldr	r2, [r2, #0]
 80134ee:	f012 fb8f 	bl	8025c10 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80134f2:	193a      	adds	r2, r7, r4
 80134f4:	4b08      	ldr	r3, [pc, #32]	@ (8013518 <CreateLine+0xa8>)
 80134f6:	0011      	movs	r1, r2
 80134f8:	0018      	movs	r0, r3
 80134fa:	f012 fa7d 	bl	80259f8 <iprintf>
 80134fe:	e000      	b.n	8013502 <CreateLine+0x92>
    return;
 8013500:	46c0      	nop			@ (mov r8, r8)
}
 8013502:	46bd      	mov	sp, r7
 8013504:	b024      	add	sp, #144	@ 0x90
 8013506:	bcb0      	pop	{r4, r5, r7}
 8013508:	bc08      	pop	{r3}
 801350a:	b002      	add	sp, #8
 801350c:	4718      	bx	r3
 801350e:	46c0      	nop			@ (mov r8, r8)
 8013510:	200000e8 	.word	0x200000e8
 8013514:	0802db30 	.word	0x0802db30
 8013518:	0802db34 	.word	0x0802db34

0801351c <_write>:

int _write(int fd, void *buf, size_t count) {
 801351c:	b590      	push	{r4, r7, lr}
 801351e:	b09f      	sub	sp, #124	@ 0x7c
 8013520:	af00      	add	r7, sp, #0
 8013522:	60f8      	str	r0, [r7, #12]
 8013524:	60b9      	str	r1, [r7, #8]
 8013526:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	b29a      	uxth	r2, r3
 801352c:	68b9      	ldr	r1, [r7, #8]
 801352e:	4824      	ldr	r0, [pc, #144]	@ (80135c0 <_write+0xa4>)
 8013530:	2364      	movs	r3, #100	@ 0x64
 8013532:	f009 fa75 	bl	801ca20 <HAL_UART_Transmit>
#ifdef USBLOGGING
  if (Check_USB_PowerOn()) {
 8013536:	f7f5 fe9d 	bl	8009274 <Check_USB_PowerOn>
 801353a:	1e03      	subs	r3, r0, #0
 801353c:	d03b      	beq.n	80135b6 <_write+0x9a>
    if (usblog && (count < 100)) {
 801353e:	4b21      	ldr	r3, [pc, #132]	@ (80135c4 <_write+0xa8>)
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d019      	beq.n	801357a <_write+0x5e>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b63      	cmp	r3, #99	@ 0x63
 801354a:	d816      	bhi.n	801357a <_write+0x5e>
      uint8_t usboutmsg[100];
      strncpy((char*)usboutmsg, buf, count);
 801354c:	687a      	ldr	r2, [r7, #4]
 801354e:	68b9      	ldr	r1, [r7, #8]
 8013550:	2414      	movs	r4, #20
 8013552:	193b      	adds	r3, r7, r4
 8013554:	0018      	movs	r0, r3
 8013556:	f012 fc50 	bl	8025dfa <strncpy>
      usboutmsg[count] = '\0';
 801355a:	0021      	movs	r1, r4
 801355c:	187a      	adds	r2, r7, r1
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	18d3      	adds	r3, r2, r3
 8013562:	2200      	movs	r2, #0
 8013564:	701a      	strb	r2, [r3, #0]
      count = vcp_send(usboutmsg, count);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	b29a      	uxth	r2, r3
 801356a:	187b      	adds	r3, r7, r1
 801356c:	0011      	movs	r1, r2
 801356e:	0018      	movs	r0, r3
 8013570:	f00f f906 	bl	8022780 <vcp_send>
 8013574:	0003      	movs	r3, r0
 8013576:	607b      	str	r3, [r7, #4]
    if (usblog && (count < 100)) {
 8013578:	e01d      	b.n	80135b6 <_write+0x9a>
    }
    else if (count > 99) {
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2b63      	cmp	r3, #99	@ 0x63
 801357e:	d91a      	bls.n	80135b6 <_write+0x9a>
      uint8_t usboutmsg[100];
      strncpy((char*)usboutmsg, buf, 97);
 8013580:	68b9      	ldr	r1, [r7, #8]
 8013582:	2414      	movs	r4, #20
 8013584:	193b      	adds	r3, r7, r4
 8013586:	2261      	movs	r2, #97	@ 0x61
 8013588:	0018      	movs	r0, r3
 801358a:	f012 fc36 	bl	8025dfa <strncpy>
      usboutmsg[97] = '\r';
 801358e:	0020      	movs	r0, r4
 8013590:	183b      	adds	r3, r7, r0
 8013592:	2261      	movs	r2, #97	@ 0x61
 8013594:	210d      	movs	r1, #13
 8013596:	5499      	strb	r1, [r3, r2]
      usboutmsg[98] = '\n';
 8013598:	183b      	adds	r3, r7, r0
 801359a:	2262      	movs	r2, #98	@ 0x62
 801359c:	210a      	movs	r1, #10
 801359e:	5499      	strb	r1, [r3, r2]
      usboutmsg[99] = '\0';
 80135a0:	183b      	adds	r3, r7, r0
 80135a2:	2263      	movs	r2, #99	@ 0x63
 80135a4:	2100      	movs	r1, #0
 80135a6:	5499      	strb	r1, [r3, r2]
      count = vcp_send(usboutmsg, 100);
 80135a8:	183b      	adds	r3, r7, r0
 80135aa:	2164      	movs	r1, #100	@ 0x64
 80135ac:	0018      	movs	r0, r3
 80135ae:	f00f f8e7 	bl	8022780 <vcp_send>
 80135b2:	0003      	movs	r3, r0
 80135b4:	607b      	str	r3, [r7, #4]
    }
  }
#endif
  return count;
 80135b6:	687b      	ldr	r3, [r7, #4]
}
 80135b8:	0018      	movs	r0, r3
 80135ba:	46bd      	mov	sp, r7
 80135bc:	b01f      	add	sp, #124	@ 0x7c
 80135be:	bd90      	pop	{r4, r7, pc}
 80135c0:	20002008 	.word	0x20002008
 80135c4:	2000020b 	.word	0x2000020b

080135c8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	0002      	movs	r2, r0
 80135d0:	1dfb      	adds	r3, r7, #7
 80135d2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 80135d4:	4b03      	ldr	r3, [pc, #12]	@ (80135e4 <SetVerboseLevel+0x1c>)
 80135d6:	1dfa      	adds	r2, r7, #7
 80135d8:	7812      	ldrb	r2, [r2, #0]
 80135da:	701a      	strb	r2, [r3, #0]
}
 80135dc:	46c0      	nop			@ (mov r8, r8)
 80135de:	46bd      	mov	sp, r7
 80135e0:	b002      	add	sp, #8
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	200000e8 	.word	0x200000e8

080135e8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 80135e8:	b580      	push	{r7, lr}
 80135ea:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 80135ec:	4b02      	ldr	r3, [pc, #8]	@ (80135f8 <GetVerboseLevel+0x10>)
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	0018      	movs	r0, r3
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	46c0      	nop			@ (mov r8, r8)
 80135f8:	200000e8 	.word	0x200000e8

080135fc <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8013602:	4a0f      	ldr	r2, [pc, #60]	@ (8013640 <BinaryReleaseInfo+0x44>)
 8013604:	4b0f      	ldr	r3, [pc, #60]	@ (8013644 <BinaryReleaseInfo+0x48>)
 8013606:	0019      	movs	r1, r3
 8013608:	2002      	movs	r0, #2
 801360a:	f7ff ff31 	bl	8013470 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 801360e:	480e      	ldr	r0, [pc, #56]	@ (8013648 <BinaryReleaseInfo+0x4c>)
 8013610:	4a0e      	ldr	r2, [pc, #56]	@ (801364c <BinaryReleaseInfo+0x50>)
 8013612:	490c      	ldr	r1, [pc, #48]	@ (8013644 <BinaryReleaseInfo+0x48>)
 8013614:	4b0e      	ldr	r3, [pc, #56]	@ (8013650 <BinaryReleaseInfo+0x54>)
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	0003      	movs	r3, r0
 801361a:	2002      	movs	r0, #2
 801361c:	f7ff ff28 	bl	8013470 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013620:	4b0c      	ldr	r3, [pc, #48]	@ (8013654 <BinaryReleaseInfo+0x58>)
 8013622:	4a0d      	ldr	r2, [pc, #52]	@ (8013658 <BinaryReleaseInfo+0x5c>)
 8013624:	4907      	ldr	r1, [pc, #28]	@ (8013644 <BinaryReleaseInfo+0x48>)
 8013626:	2002      	movs	r0, #2
 8013628:	f7ff ff22 	bl	8013470 <CreateLine>
#ifdef DEBUG
  Info("Software version: %s, Debug build", SRC_VERSION);
 801362c:	4b0b      	ldr	r3, [pc, #44]	@ (801365c <BinaryReleaseInfo+0x60>)
 801362e:	4a0c      	ldr	r2, [pc, #48]	@ (8013660 <BinaryReleaseInfo+0x64>)
 8013630:	4904      	ldr	r1, [pc, #16]	@ (8013644 <BinaryReleaseInfo+0x48>)
 8013632:	2002      	movs	r0, #2
 8013634:	f7ff ff1c 	bl	8013470 <CreateLine>
#else
  Info("Software version: %s, Release build", SRC_VERSION);
#endif
}
 8013638:	46c0      	nop			@ (mov r8, r8)
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	46c0      	nop			@ (mov r8, r8)
 8013640:	0802db3c 	.word	0x0802db3c
 8013644:	0802db68 	.word	0x0802db68
 8013648:	0802db6c 	.word	0x0802db6c
 801364c:	0802db78 	.word	0x0802db78
 8013650:	0802db8c 	.word	0x0802db8c
 8013654:	0802db98 	.word	0x0802db98
 8013658:	0802dba4 	.word	0x0802dba4
 801365c:	0802dbac 	.word	0x0802dbac
 8013660:	0802dbb4 	.word	0x0802dbb4

08013664 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b084      	sub	sp, #16
 8013668:	af00      	add	r7, sp, #0
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	68ba      	ldr	r2, [r7, #8]
 8013674:	68f9      	ldr	r1, [r7, #12]
 8013676:	4803      	ldr	r0, [pc, #12]	@ (8013684 <errorHandler+0x20>)
 8013678:	f012 f9be 	bl	80259f8 <iprintf>
//    while (true)
//    {
//    }
}
 801367c:	46c0      	nop			@ (mov r8, r8)
 801367e:	46bd      	mov	sp, r7
 8013680:	b004      	add	sp, #16
 8013682:	bd80      	pop	{r7, pc}
 8013684:	0802dbd8 	.word	0x0802dbd8

08013688 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013688:	b590      	push	{r4, r7, lr}
 801368a:	b083      	sub	sp, #12
 801368c:	af00      	add	r7, sp, #0
 801368e:	6039      	str	r1, [r7, #0]
 8013690:	0011      	movs	r1, r2
 8013692:	1dfb      	adds	r3, r7, #7
 8013694:	1c02      	adds	r2, r0, #0
 8013696:	701a      	strb	r2, [r3, #0]
 8013698:	1dbb      	adds	r3, r7, #6
 801369a:	1c0a      	adds	r2, r1, #0
 801369c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 801369e:	4b0a      	ldr	r3, [pc, #40]	@ (80136c8 <ReadRegister+0x40>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d00a      	beq.n	80136bc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 80136a6:	4b08      	ldr	r3, [pc, #32]	@ (80136c8 <ReadRegister+0x40>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	1dba      	adds	r2, r7, #6
 80136ac:	7814      	ldrb	r4, [r2, #0]
 80136ae:	6839      	ldr	r1, [r7, #0]
 80136b0:	1dfa      	adds	r2, r7, #7
 80136b2:	7810      	ldrb	r0, [r2, #0]
 80136b4:	0022      	movs	r2, r4
 80136b6:	4798      	blx	r3
 80136b8:	0003      	movs	r3, r0
 80136ba:	e000      	b.n	80136be <ReadRegister+0x36>
	}
	return false;
 80136bc:	2300      	movs	r3, #0
}
 80136be:	0018      	movs	r0, r3
 80136c0:	46bd      	mov	sp, r7
 80136c2:	b003      	add	sp, #12
 80136c4:	bd90      	pop	{r4, r7, pc}
 80136c6:	46c0      	nop			@ (mov r8, r8)
 80136c8:	20002210 	.word	0x20002210

080136cc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80136cc:	b590      	push	{r4, r7, lr}
 80136ce:	b083      	sub	sp, #12
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6039      	str	r1, [r7, #0]
 80136d4:	0011      	movs	r1, r2
 80136d6:	1dfb      	adds	r3, r7, #7
 80136d8:	1c02      	adds	r2, r0, #0
 80136da:	701a      	strb	r2, [r3, #0]
 80136dc:	1dbb      	adds	r3, r7, #6
 80136de:	1c0a      	adds	r2, r1, #0
 80136e0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80136e2:	4b0a      	ldr	r3, [pc, #40]	@ (801370c <WriteRegister+0x40>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00a      	beq.n	8013700 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 80136ea:	4b08      	ldr	r3, [pc, #32]	@ (801370c <WriteRegister+0x40>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	1dba      	adds	r2, r7, #6
 80136f0:	7814      	ldrb	r4, [r2, #0]
 80136f2:	6839      	ldr	r1, [r7, #0]
 80136f4:	1dfa      	adds	r2, r7, #7
 80136f6:	7810      	ldrb	r0, [r2, #0]
 80136f8:	0022      	movs	r2, r4
 80136fa:	4798      	blx	r3
 80136fc:	0003      	movs	r3, r0
 80136fe:	e000      	b.n	8013702 <WriteRegister+0x36>
  }
  return false;
 8013700:	2300      	movs	r3, #0
}
 8013702:	0018      	movs	r0, r3
 8013704:	46bd      	mov	sp, r7
 8013706:	b003      	add	sp, #12
 8013708:	bd90      	pop	{r4, r7, pc}
 801370a:	46c0      	nop			@ (mov r8, r8)
 801370c:	20002214 	.word	0x20002214

08013710 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	000a      	movs	r2, r1
 801371a:	1cfb      	adds	r3, r7, #3
 801371c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 801371e:	230f      	movs	r3, #15
 8013720:	18fb      	adds	r3, r7, r3
 8013722:	22ff      	movs	r2, #255	@ 0xff
 8013724:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8013726:	230e      	movs	r3, #14
 8013728:	18fb      	adds	r3, r7, r3
 801372a:	2200      	movs	r2, #0
 801372c:	701a      	strb	r2, [r3, #0]
 801372e:	e038      	b.n	80137a2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8013730:	230e      	movs	r3, #14
 8013732:	18fb      	adds	r3, r7, r3
 8013734:	781b      	ldrb	r3, [r3, #0]
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	18d3      	adds	r3, r2, r3
 801373a:	7819      	ldrb	r1, [r3, #0]
 801373c:	220f      	movs	r2, #15
 801373e:	18bb      	adds	r3, r7, r2
 8013740:	18ba      	adds	r2, r7, r2
 8013742:	7812      	ldrb	r2, [r2, #0]
 8013744:	404a      	eors	r2, r1
 8013746:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8013748:	230d      	movs	r3, #13
 801374a:	18fb      	adds	r3, r7, r3
 801374c:	2200      	movs	r2, #0
 801374e:	701a      	strb	r2, [r3, #0]
 8013750:	e01c      	b.n	801378c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8013752:	210f      	movs	r1, #15
 8013754:	187b      	adds	r3, r7, r1
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	b25b      	sxtb	r3, r3
 801375a:	2b00      	cmp	r3, #0
 801375c:	da0a      	bge.n	8013774 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 801375e:	187b      	adds	r3, r7, r1
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	b25b      	sxtb	r3, r3
 8013764:	18db      	adds	r3, r3, r3
 8013766:	b25b      	sxtb	r3, r3
 8013768:	2231      	movs	r2, #49	@ 0x31
 801376a:	4053      	eors	r3, r2
 801376c:	b25a      	sxtb	r2, r3
 801376e:	187b      	adds	r3, r7, r1
 8013770:	701a      	strb	r2, [r3, #0]
 8013772:	e005      	b.n	8013780 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8013774:	230f      	movs	r3, #15
 8013776:	18fa      	adds	r2, r7, r3
 8013778:	18fb      	adds	r3, r7, r3
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	18db      	adds	r3, r3, r3
 801377e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8013780:	210d      	movs	r1, #13
 8013782:	187b      	adds	r3, r7, r1
 8013784:	781a      	ldrb	r2, [r3, #0]
 8013786:	187b      	adds	r3, r7, r1
 8013788:	3201      	adds	r2, #1
 801378a:	701a      	strb	r2, [r3, #0]
 801378c:	230d      	movs	r3, #13
 801378e:	18fb      	adds	r3, r7, r3
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	2b07      	cmp	r3, #7
 8013794:	d9dd      	bls.n	8013752 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8013796:	210e      	movs	r1, #14
 8013798:	187b      	adds	r3, r7, r1
 801379a:	781a      	ldrb	r2, [r3, #0]
 801379c:	187b      	adds	r3, r7, r1
 801379e:	3201      	adds	r2, #1
 80137a0:	701a      	strb	r2, [r3, #0]
 80137a2:	230e      	movs	r3, #14
 80137a4:	18fa      	adds	r2, r7, r3
 80137a6:	1cfb      	adds	r3, r7, #3
 80137a8:	7812      	ldrb	r2, [r2, #0]
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d3bf      	bcc.n	8013730 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80137b0:	230f      	movs	r3, #15
 80137b2:	18fb      	adds	r3, r7, r3
 80137b4:	781b      	ldrb	r3, [r3, #0]
}
 80137b6:	0018      	movs	r0, r3
 80137b8:	46bd      	mov	sp, r7
 80137ba:	b004      	add	sp, #16
 80137bc:	bd80      	pop	{r7, pc}
	...

080137c0 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 80137c0:	b5b0      	push	{r4, r5, r7, lr}
 80137c2:	b084      	sub	sp, #16
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	1c18      	adds	r0, r3, #0
 80137d0:	f7f0 f860 	bl	8003894 <__aeabi_f2d>
 80137d4:	4a2e      	ldr	r2, [pc, #184]	@ (8013890 <HIDS_DewPointCalculation+0xd0>)
 80137d6:	4b2f      	ldr	r3, [pc, #188]	@ (8013894 <HIDS_DewPointCalculation+0xd4>)
 80137d8:	f7ef f8bc 	bl	8002954 <__aeabi_dmul>
 80137dc:	0002      	movs	r2, r0
 80137de:	000b      	movs	r3, r1
 80137e0:	0014      	movs	r4, r2
 80137e2:	001d      	movs	r5, r3
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	1c18      	adds	r0, r3, #0
 80137ea:	f7f0 f853 	bl	8003894 <__aeabi_f2d>
 80137ee:	4a2a      	ldr	r2, [pc, #168]	@ (8013898 <HIDS_DewPointCalculation+0xd8>)
 80137f0:	4b2a      	ldr	r3, [pc, #168]	@ (801389c <HIDS_DewPointCalculation+0xdc>)
 80137f2:	f7ee f8af 	bl	8001954 <__aeabi_dadd>
 80137f6:	0002      	movs	r2, r0
 80137f8:	000b      	movs	r3, r1
 80137fa:	0020      	movs	r0, r4
 80137fc:	0029      	movs	r1, r5
 80137fe:	f7ee fc6f 	bl	80020e0 <__aeabi_ddiv>
 8013802:	0002      	movs	r2, r0
 8013804:	000b      	movs	r3, r1
 8013806:	0014      	movs	r4, r2
 8013808:	001d      	movs	r5, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	1c18      	adds	r0, r3, #0
 8013810:	f7f0 f840 	bl	8003894 <__aeabi_f2d>
 8013814:	2200      	movs	r2, #0
 8013816:	4b22      	ldr	r3, [pc, #136]	@ (80138a0 <HIDS_DewPointCalculation+0xe0>)
 8013818:	f7ee fc62 	bl	80020e0 <__aeabi_ddiv>
 801381c:	0002      	movs	r2, r0
 801381e:	000b      	movs	r3, r1
 8013820:	0010      	movs	r0, r2
 8013822:	0019      	movs	r1, r3
 8013824:	f015 f852 	bl	80288cc <log>
 8013828:	0002      	movs	r2, r0
 801382a:	000b      	movs	r3, r1
 801382c:	0020      	movs	r0, r4
 801382e:	0029      	movs	r1, r5
 8013830:	f7ee f890 	bl	8001954 <__aeabi_dadd>
 8013834:	0002      	movs	r2, r0
 8013836:	000b      	movs	r3, r1
 8013838:	0010      	movs	r0, r2
 801383a:	0019      	movs	r1, r3
 801383c:	f7f0 f872 	bl	8003924 <__aeabi_d2f>
 8013840:	1c03      	adds	r3, r0, #0
 8013842:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f7f0 f825 	bl	8003894 <__aeabi_f2d>
 801384a:	4a13      	ldr	r2, [pc, #76]	@ (8013898 <HIDS_DewPointCalculation+0xd8>)
 801384c:	4b13      	ldr	r3, [pc, #76]	@ (801389c <HIDS_DewPointCalculation+0xdc>)
 801384e:	f7ef f881 	bl	8002954 <__aeabi_dmul>
 8013852:	0002      	movs	r2, r0
 8013854:	000b      	movs	r3, r1
 8013856:	0014      	movs	r4, r2
 8013858:	001d      	movs	r5, r3
 801385a:	68f8      	ldr	r0, [r7, #12]
 801385c:	f7f0 f81a 	bl	8003894 <__aeabi_f2d>
 8013860:	0002      	movs	r2, r0
 8013862:	000b      	movs	r3, r1
 8013864:	480a      	ldr	r0, [pc, #40]	@ (8013890 <HIDS_DewPointCalculation+0xd0>)
 8013866:	490b      	ldr	r1, [pc, #44]	@ (8013894 <HIDS_DewPointCalculation+0xd4>)
 8013868:	f7ef fb5a 	bl	8002f20 <__aeabi_dsub>
 801386c:	0002      	movs	r2, r0
 801386e:	000b      	movs	r3, r1
 8013870:	0020      	movs	r0, r4
 8013872:	0029      	movs	r1, r5
 8013874:	f7ee fc34 	bl	80020e0 <__aeabi_ddiv>
 8013878:	0002      	movs	r2, r0
 801387a:	000b      	movs	r3, r1
 801387c:	0010      	movs	r0, r2
 801387e:	0019      	movs	r1, r3
 8013880:	f7f0 f850 	bl	8003924 <__aeabi_d2f>
 8013884:	1c03      	adds	r3, r0, #0
}
 8013886:	1c18      	adds	r0, r3, #0
 8013888:	46bd      	mov	sp, r7
 801388a:	b004      	add	sp, #16
 801388c:	bdb0      	pop	{r4, r5, r7, pc}
 801388e:	46c0      	nop			@ (mov r8, r8)
 8013890:	b851eb85 	.word	0xb851eb85
 8013894:	4031451e 	.word	0x4031451e
 8013898:	66666666 	.word	0x66666666
 801389c:	406db666 	.word	0x406db666
 80138a0:	40590000 	.word	0x40590000

080138a4 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 80138aa:	4b0d      	ldr	r3, [pc, #52]	@ (80138e0 <HIDS_EnableHeater+0x3c>)
 80138ac:	781a      	ldrb	r2, [r3, #0]
 80138ae:	1dfb      	adds	r3, r7, #7
 80138b0:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 80138b2:	1dfb      	adds	r3, r7, #7
 80138b4:	2201      	movs	r2, #1
 80138b6:	0019      	movs	r1, r3
 80138b8:	2044      	movs	r0, #68	@ 0x44
 80138ba:	f7ff ff07 	bl	80136cc <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 80138be:	1dfb      	adds	r3, r7, #7
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	4a08      	ldr	r2, [pc, #32]	@ (80138e4 <HIDS_EnableHeater+0x40>)
 80138c4:	4908      	ldr	r1, [pc, #32]	@ (80138e8 <HIDS_EnableHeater+0x44>)
 80138c6:	2002      	movs	r0, #2
 80138c8:	f7ff fdd2 	bl	8013470 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 80138cc:	f7f6 f8cc 	bl	8009a68 <getPosixTime>
 80138d0:	0002      	movs	r2, r0
 80138d2:	4b06      	ldr	r3, [pc, #24]	@ (80138ec <HIDS_EnableHeater+0x48>)
 80138d4:	601a      	str	r2, [r3, #0]
}
 80138d6:	46c0      	nop			@ (mov r8, r8)
 80138d8:	46bd      	mov	sp, r7
 80138da:	b002      	add	sp, #8
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	46c0      	nop			@ (mov r8, r8)
 80138e0:	200000e9 	.word	0x200000e9
 80138e4:	0802dc00 	.word	0x0802dc00
 80138e8:	0802dc20 	.word	0x0802dc20
 80138ec:	20002228 	.word	0x20002228

080138f0 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
 80138f8:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80138fa:	4b0a      	ldr	r3, [pc, #40]	@ (8013924 <HIDS_Init+0x34>)
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8013900:	4b09      	ldr	r3, [pc, #36]	@ (8013928 <HIDS_Init+0x38>)
 8013902:	683a      	ldr	r2, [r7, #0]
 8013904:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8013906:	4b09      	ldr	r3, [pc, #36]	@ (801392c <HIDS_Init+0x3c>)
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	0018      	movs	r0, r3
 801390c:	f000 f840 	bl	8013990 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8013910:	4b07      	ldr	r3, [pc, #28]	@ (8013930 <HIDS_Init+0x40>)
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	0018      	movs	r0, r3
 8013916:	f000 f82b 	bl	8013970 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 801391a:	46c0      	nop			@ (mov r8, r8)
 801391c:	46bd      	mov	sp, r7
 801391e:	b002      	add	sp, #8
 8013920:	bd80      	pop	{r7, pc}
 8013922:	46c0      	nop			@ (mov r8, r8)
 8013924:	20002210 	.word	0x20002210
 8013928:	20002214 	.word	0x20002214
 801392c:	200000ea 	.word	0x200000ea
 8013930:	200000e9 	.word	0x200000e9

08013934 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8013934:	b580      	push	{r7, lr}
 8013936:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8013938:	f000 fb1c 	bl	8013f74 <HAL_GetTick>
 801393c:	0002      	movs	r2, r0
 801393e:	4b08      	ldr	r3, [pc, #32]	@ (8013960 <HIDS_StartMeasurement+0x2c>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	18d2      	adds	r2, r2, r3
 8013944:	4b07      	ldr	r3, [pc, #28]	@ (8013964 <HIDS_StartMeasurement+0x30>)
 8013946:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8013948:	4b07      	ldr	r3, [pc, #28]	@ (8013968 <HIDS_StartMeasurement+0x34>)
 801394a:	2201      	movs	r2, #1
 801394c:	0019      	movs	r1, r3
 801394e:	2044      	movs	r0, #68	@ 0x44
 8013950:	f7ff febc 	bl	80136cc <WriteRegister>
  MeasurementDone = false;
 8013954:	4b05      	ldr	r3, [pc, #20]	@ (801396c <HIDS_StartMeasurement+0x38>)
 8013956:	2200      	movs	r2, #0
 8013958:	701a      	strb	r2, [r3, #0]
}
 801395a:	46c0      	nop			@ (mov r8, r8)
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}
 8013960:	200000f0 	.word	0x200000f0
 8013964:	200000ec 	.word	0x200000ec
 8013968:	200000ea 	.word	0x200000ea
 801396c:	2000222c 	.word	0x2000222c

08013970 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	0002      	movs	r2, r0
 8013978:	1dfb      	adds	r3, r7, #7
 801397a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 801397c:	4b03      	ldr	r3, [pc, #12]	@ (801398c <HIDS_SetHeaterMode+0x1c>)
 801397e:	1dfa      	adds	r2, r7, #7
 8013980:	7812      	ldrb	r2, [r2, #0]
 8013982:	701a      	strb	r2, [r3, #0]
}
 8013984:	46c0      	nop			@ (mov r8, r8)
 8013986:	46bd      	mov	sp, r7
 8013988:	b002      	add	sp, #8
 801398a:	bd80      	pop	{r7, pc}
 801398c:	200000e9 	.word	0x200000e9

08013990 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	0002      	movs	r2, r0
 8013998:	1dfb      	adds	r3, r7, #7
 801399a:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 801399c:	4b03      	ldr	r3, [pc, #12]	@ (80139ac <HIDS_SetMeasurementMode+0x1c>)
 801399e:	1dfa      	adds	r2, r7, #7
 80139a0:	7812      	ldrb	r2, [r2, #0]
 80139a2:	701a      	strb	r2, [r3, #0]
}
 80139a4:	46c0      	nop			@ (mov r8, r8)
 80139a6:	46bd      	mov	sp, r7
 80139a8:	b002      	add	sp, #8
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	200000ea 	.word	0x200000ea

080139b0 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 80139b8:	f000 fadc 	bl	8013f74 <HAL_GetTick>
 80139bc:	0002      	movs	r2, r0
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	18d2      	adds	r2, r2, r3
 80139c2:	4b03      	ldr	r3, [pc, #12]	@ (80139d0 <setHIDSTimeStamp+0x20>)
 80139c4:	601a      	str	r2, [r3, #0]
}
 80139c6:	46c0      	nop			@ (mov r8, r8)
 80139c8:	46bd      	mov	sp, r7
 80139ca:	b002      	add	sp, #8
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	46c0      	nop			@ (mov r8, r8)
 80139d0:	20002230 	.word	0x20002230

080139d4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80139d4:	b590      	push	{r4, r7, lr}
 80139d6:	b085      	sub	sp, #20
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	781a      	ldrb	r2, [r3, #0]
 80139e0:	210c      	movs	r1, #12
 80139e2:	187b      	adds	r3, r7, r1
 80139e4:	701a      	strb	r2, [r3, #0]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	785a      	ldrb	r2, [r3, #1]
 80139ea:	187b      	adds	r3, r7, r1
 80139ec:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80139ee:	240f      	movs	r4, #15
 80139f0:	193b      	adds	r3, r7, r4
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	7892      	ldrb	r2, [r2, #2]
 80139f6:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80139f8:	187b      	adds	r3, r7, r1
 80139fa:	2102      	movs	r1, #2
 80139fc:	0018      	movs	r0, r3
 80139fe:	f7ff fe87 	bl	8013710 <CalculateCRC>
 8013a02:	0003      	movs	r3, r0
 8013a04:	001a      	movs	r2, r3
 8013a06:	193b      	adds	r3, r7, r4
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	d007      	beq.n	8013a1e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8013a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8013a78 <CheckCRC+0xa4>)
 8013a10:	4b1a      	ldr	r3, [pc, #104]	@ (8013a7c <CheckCRC+0xa8>)
 8013a12:	0019      	movs	r1, r3
 8013a14:	2001      	movs	r0, #1
 8013a16:	f7ff fd2b 	bl	8013470 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	e027      	b.n	8013a6e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	78da      	ldrb	r2, [r3, #3]
 8013a22:	2108      	movs	r1, #8
 8013a24:	187b      	adds	r3, r7, r1
 8013a26:	701a      	strb	r2, [r3, #0]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	791a      	ldrb	r2, [r3, #4]
 8013a2c:	187b      	adds	r3, r7, r1
 8013a2e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8013a30:	240e      	movs	r4, #14
 8013a32:	193b      	adds	r3, r7, r4
 8013a34:	687a      	ldr	r2, [r7, #4]
 8013a36:	7952      	ldrb	r2, [r2, #5]
 8013a38:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8013a3a:	187b      	adds	r3, r7, r1
 8013a3c:	2102      	movs	r1, #2
 8013a3e:	0018      	movs	r0, r3
 8013a40:	f7ff fe66 	bl	8013710 <CalculateCRC>
 8013a44:	0003      	movs	r3, r0
 8013a46:	001a      	movs	r2, r3
 8013a48:	193b      	adds	r3, r7, r4
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d00d      	beq.n	8013a6c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8013a50:	4a0b      	ldr	r2, [pc, #44]	@ (8013a80 <CheckCRC+0xac>)
 8013a52:	4b0a      	ldr	r3, [pc, #40]	@ (8013a7c <CheckCRC+0xa8>)
 8013a54:	0019      	movs	r1, r3
 8013a56:	2001      	movs	r0, #1
 8013a58:	f7ff fd0a 	bl	8013470 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8013a5c:	4a09      	ldr	r2, [pc, #36]	@ (8013a84 <CheckCRC+0xb0>)
 8013a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8013a88 <CheckCRC+0xb4>)
 8013a60:	2185      	movs	r1, #133	@ 0x85
 8013a62:	0018      	movs	r0, r3
 8013a64:	f7ff fdfe 	bl	8013664 <errorHandler>
		return false;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	e000      	b.n	8013a6e <CheckCRC+0x9a>
	}
	return true;
 8013a6c:	2301      	movs	r3, #1
}
 8013a6e:	0018      	movs	r0, r3
 8013a70:	46bd      	mov	sp, r7
 8013a72:	b005      	add	sp, #20
 8013a74:	bd90      	pop	{r4, r7, pc}
 8013a76:	46c0      	nop			@ (mov r8, r8)
 8013a78:	0802dc24 	.word	0x0802dc24
 8013a7c:	0802dc4c 	.word	0x0802dc4c
 8013a80:	0802dc50 	.word	0x0802dc50
 8013a84:	0802dc7c 	.word	0x0802dc7c
 8013a88:	0802e320 	.word	0x0802e320

08013a8c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8013a92:	1dbb      	adds	r3, r7, #6
 8013a94:	2289      	movs	r2, #137	@ 0x89
 8013a96:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8013a98:	1dbb      	adds	r3, r7, #6
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	0019      	movs	r1, r3
 8013a9e:	2044      	movs	r0, #68	@ 0x44
 8013aa0:	f7ff fe14 	bl	80136cc <WriteRegister>
	HAL_Delay(30);
 8013aa4:	201e      	movs	r0, #30
 8013aa6:	f000 fa6f 	bl	8013f88 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8013aaa:	4b14      	ldr	r3, [pc, #80]	@ (8013afc <HIDS_DeviceConnected+0x70>)
 8013aac:	2206      	movs	r2, #6
 8013aae:	0019      	movs	r1, r3
 8013ab0:	2044      	movs	r0, #68	@ 0x44
 8013ab2:	f7ff fde9 	bl	8013688 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8013ab6:	1dfb      	adds	r3, r7, #7
 8013ab8:	2200      	movs	r2, #0
 8013aba:	701a      	strb	r2, [r3, #0]
 8013abc:	e011      	b.n	8013ae2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8013abe:	1dfb      	adds	r3, r7, #7
 8013ac0:	7818      	ldrb	r0, [r3, #0]
 8013ac2:	1dfb      	adds	r3, r7, #7
 8013ac4:	781b      	ldrb	r3, [r3, #0]
 8013ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8013afc <HIDS_DeviceConnected+0x70>)
 8013ac8:	5cd3      	ldrb	r3, [r2, r3]
 8013aca:	4a0d      	ldr	r2, [pc, #52]	@ (8013b00 <HIDS_DeviceConnected+0x74>)
 8013acc:	490d      	ldr	r1, [pc, #52]	@ (8013b04 <HIDS_DeviceConnected+0x78>)
 8013ace:	9300      	str	r3, [sp, #0]
 8013ad0:	0003      	movs	r3, r0
 8013ad2:	2002      	movs	r0, #2
 8013ad4:	f7ff fccc 	bl	8013470 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8013ad8:	1dfb      	adds	r3, r7, #7
 8013ada:	781a      	ldrb	r2, [r3, #0]
 8013adc:	1dfb      	adds	r3, r7, #7
 8013ade:	3201      	adds	r2, #1
 8013ae0:	701a      	strb	r2, [r3, #0]
 8013ae2:	1dfb      	adds	r3, r7, #7
 8013ae4:	781b      	ldrb	r3, [r3, #0]
 8013ae6:	2b05      	cmp	r3, #5
 8013ae8:	d9e9      	bls.n	8013abe <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8013aea:	4b04      	ldr	r3, [pc, #16]	@ (8013afc <HIDS_DeviceConnected+0x70>)
 8013aec:	0018      	movs	r0, r3
 8013aee:	f7ff ff71 	bl	80139d4 <CheckCRC>
 8013af2:	0003      	movs	r3, r0
}
 8013af4:	0018      	movs	r0, r3
 8013af6:	46bd      	mov	sp, r7
 8013af8:	b002      	add	sp, #8
 8013afa:	bd80      	pop	{r7, pc}
 8013afc:	20002218 	.word	0x20002218
 8013b00:	0802dc94 	.word	0x0802dc94
 8013b04:	0802dc20 	.word	0x0802dc20

08013b08 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8013b0c:	4b04      	ldr	r3, [pc, #16]	@ (8013b20 <HIDS_MeasurementReady+0x18>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	0018      	movs	r0, r3
 8013b12:	f7ff fc57 	bl	80133c4 <TimestampIsReached>
 8013b16:	0003      	movs	r3, r0
}
 8013b18:	0018      	movs	r0, r3
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}
 8013b1e:	46c0      	nop			@ (mov r8, r8)
 8013b20:	200000ec 	.word	0x200000ec

08013b24 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b084      	sub	sp, #16
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8013b2e:	4b41      	ldr	r3, [pc, #260]	@ (8013c34 <HIDS_GetMeasurementValues+0x110>)
 8013b30:	781b      	ldrb	r3, [r3, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d001      	beq.n	8013b3a <HIDS_GetMeasurementValues+0x16>
 8013b36:	2301      	movs	r3, #1
 8013b38:	e077      	b.n	8013c2a <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8013b3a:	f7ff ffe5 	bl	8013b08 <HIDS_MeasurementReady>
 8013b3e:	0003      	movs	r3, r0
 8013b40:	001a      	movs	r2, r3
 8013b42:	2301      	movs	r3, #1
 8013b44:	4053      	eors	r3, r2
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <HIDS_GetMeasurementValues+0x2c>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	e06c      	b.n	8013c2a <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8013b50:	4b39      	ldr	r3, [pc, #228]	@ (8013c38 <HIDS_GetMeasurementValues+0x114>)
 8013b52:	2206      	movs	r2, #6
 8013b54:	0019      	movs	r1, r3
 8013b56:	2044      	movs	r0, #68	@ 0x44
 8013b58:	f7ff fd96 	bl	8013688 <ReadRegister>
 8013b5c:	0003      	movs	r3, r0
 8013b5e:	001a      	movs	r2, r3
 8013b60:	2301      	movs	r3, #1
 8013b62:	4053      	eors	r3, r2
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d005      	beq.n	8013b76 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8013b6a:	4a34      	ldr	r2, [pc, #208]	@ (8013c3c <HIDS_GetMeasurementValues+0x118>)
 8013b6c:	4b34      	ldr	r3, [pc, #208]	@ (8013c40 <HIDS_GetMeasurementValues+0x11c>)
 8013b6e:	0019      	movs	r1, r3
 8013b70:	2001      	movs	r0, #1
 8013b72:	f7ff fc7d 	bl	8013470 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8013b76:	4b30      	ldr	r3, [pc, #192]	@ (8013c38 <HIDS_GetMeasurementValues+0x114>)
 8013b78:	0018      	movs	r0, r3
 8013b7a:	f7ff ff2b 	bl	80139d4 <CheckCRC>
 8013b7e:	0003      	movs	r3, r0
 8013b80:	001a      	movs	r2, r3
 8013b82:	2301      	movs	r3, #1
 8013b84:	4053      	eors	r3, r2
 8013b86:	b2db      	uxtb	r3, r3
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	e04c      	b.n	8013c2a <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8013b90:	4b29      	ldr	r3, [pc, #164]	@ (8013c38 <HIDS_GetMeasurementValues+0x114>)
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	021b      	lsls	r3, r3, #8
 8013b96:	4a28      	ldr	r2, [pc, #160]	@ (8013c38 <HIDS_GetMeasurementValues+0x114>)
 8013b98:	7852      	ldrb	r2, [r2, #1]
 8013b9a:	4313      	orrs	r3, r2
 8013b9c:	22af      	movs	r2, #175	@ 0xaf
 8013b9e:	4353      	muls	r3, r2
 8013ba0:	0018      	movs	r0, r3
 8013ba2:	f7ef fe25 	bl	80037f0 <__aeabi_i2d>
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	4b26      	ldr	r3, [pc, #152]	@ (8013c44 <HIDS_GetMeasurementValues+0x120>)
 8013baa:	f7ee fa99 	bl	80020e0 <__aeabi_ddiv>
 8013bae:	0002      	movs	r2, r0
 8013bb0:	000b      	movs	r3, r1
 8013bb2:	0010      	movs	r0, r2
 8013bb4:	0019      	movs	r1, r3
 8013bb6:	f7ef feb5 	bl	8003924 <__aeabi_d2f>
 8013bba:	1c03      	adds	r3, r0, #0
 8013bbc:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8013bbe:	4922      	ldr	r1, [pc, #136]	@ (8013c48 <HIDS_GetMeasurementValues+0x124>)
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	f7ed fb97 	bl	80012f4 <__aeabi_fsub>
 8013bc6:	1c03      	adds	r3, r0, #0
 8013bc8:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8013bca:	4b1b      	ldr	r3, [pc, #108]	@ (8013c38 <HIDS_GetMeasurementValues+0x114>)
 8013bcc:	78db      	ldrb	r3, [r3, #3]
 8013bce:	021b      	lsls	r3, r3, #8
 8013bd0:	4a19      	ldr	r2, [pc, #100]	@ (8013c38 <HIDS_GetMeasurementValues+0x114>)
 8013bd2:	7912      	ldrb	r2, [r2, #4]
 8013bd4:	431a      	orrs	r2, r3
 8013bd6:	0013      	movs	r3, r2
 8013bd8:	015b      	lsls	r3, r3, #5
 8013bda:	1a9b      	subs	r3, r3, r2
 8013bdc:	009b      	lsls	r3, r3, #2
 8013bde:	189b      	adds	r3, r3, r2
 8013be0:	0018      	movs	r0, r3
 8013be2:	f7ef fe05 	bl	80037f0 <__aeabi_i2d>
 8013be6:	2200      	movs	r2, #0
 8013be8:	4b16      	ldr	r3, [pc, #88]	@ (8013c44 <HIDS_GetMeasurementValues+0x120>)
 8013bea:	f7ee fa79 	bl	80020e0 <__aeabi_ddiv>
 8013bee:	0002      	movs	r2, r0
 8013bf0:	000b      	movs	r3, r1
 8013bf2:	0010      	movs	r0, r2
 8013bf4:	0019      	movs	r1, r3
 8013bf6:	f7ef fe95 	bl	8003924 <__aeabi_d2f>
 8013bfa:	1c03      	adds	r3, r0, #0
 8013bfc:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8013bfe:	4913      	ldr	r1, [pc, #76]	@ (8013c4c <HIDS_GetMeasurementValues+0x128>)
 8013c00:	68b8      	ldr	r0, [r7, #8]
 8013c02:	f7ed fb77 	bl	80012f4 <__aeabi_fsub>
 8013c06:	1c03      	adds	r3, r0, #0
 8013c08:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	68fa      	ldr	r2, [r7, #12]
 8013c0e:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	68ba      	ldr	r2, [r7, #8]
 8013c14:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	0011      	movs	r1, r2
 8013c1c:	0018      	movs	r0, r3
 8013c1e:	f7fc ff79 	bl	8010b14 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8013c22:	4b04      	ldr	r3, [pc, #16]	@ (8013c34 <HIDS_GetMeasurementValues+0x110>)
 8013c24:	2201      	movs	r2, #1
 8013c26:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8013c28:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8013c2a:	0018      	movs	r0, r3
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	b004      	add	sp, #16
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	46c0      	nop			@ (mov r8, r8)
 8013c34:	2000222c 	.word	0x2000222c
 8013c38:	20002220 	.word	0x20002220
 8013c3c:	0802dcb4 	.word	0x0802dcb4
 8013c40:	0802dc4c 	.word	0x0802dc4c
 8013c44:	40efffe0 	.word	0x40efffe0
 8013c48:	42340000 	.word	0x42340000
 8013c4c:	40c00000 	.word	0x40c00000

08013c50 <ResetHIDSresults>:

void ResetHIDSresults() {
 8013c50:	b580      	push	{r7, lr}
 8013c52:	af00      	add	r7, sp, #0
  humid = 0.0;
 8013c54:	4b04      	ldr	r3, [pc, #16]	@ (8013c68 <ResetHIDSresults+0x18>)
 8013c56:	2200      	movs	r2, #0
 8013c58:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8013c5a:	4b04      	ldr	r3, [pc, #16]	@ (8013c6c <ResetHIDSresults+0x1c>)
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	601a      	str	r2, [r3, #0]
}
 8013c60:	46c0      	nop			@ (mov r8, r8)
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	46c0      	nop			@ (mov r8, r8)
 8013c68:	20002208 	.word	0x20002208
 8013c6c:	2000220c 	.word	0x2000220c

08013c70 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8013c70:	b5b0      	push	{r4, r5, r7, lr}
 8013c72:	b084      	sub	sp, #16
 8013c74:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8013c76:	4b69      	ldr	r3, [pc, #420]	@ (8013e1c <HIDS_Upkeep+0x1ac>)
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	2b06      	cmp	r3, #6
 8013c7c:	d900      	bls.n	8013c80 <HIDS_Upkeep+0x10>
 8013c7e:	e0bd      	b.n	8013dfc <HIDS_Upkeep+0x18c>
 8013c80:	009a      	lsls	r2, r3, #2
 8013c82:	4b67      	ldr	r3, [pc, #412]	@ (8013e20 <HIDS_Upkeep+0x1b0>)
 8013c84:	18d3      	adds	r3, r2, r3
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8013c8a:	4a66      	ldr	r2, [pc, #408]	@ (8013e24 <HIDS_Upkeep+0x1b4>)
 8013c8c:	4b66      	ldr	r3, [pc, #408]	@ (8013e28 <HIDS_Upkeep+0x1b8>)
 8013c8e:	0019      	movs	r1, r3
 8013c90:	2003      	movs	r0, #3
 8013c92:	f7ff fbed 	bl	8013470 <CreateLine>
      break;
 8013c96:	e0bc      	b.n	8013e12 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8013c98:	f7ff ffda 	bl	8013c50 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8013c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8013e1c <HIDS_Upkeep+0x1ac>)
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	701a      	strb	r2, [r3, #0]
      break;
 8013ca2:	e0b6      	b.n	8013e12 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 8013ca4:	f7f9 fc48 	bl	800d538 <getSensorLock>
 8013ca8:	1e03      	subs	r3, r0, #0
 8013caa:	d000      	beq.n	8013cae <HIDS_Upkeep+0x3e>
 8013cac:	e0aa      	b.n	8013e04 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 8013cae:	2001      	movs	r0, #1
 8013cb0:	f7f9 fc2e 	bl	800d510 <setSensorLock>
      SetMeasurementIndicator();
 8013cb4:	f7fe f982 	bl	8011fbc <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8013cb8:	f7ff fe3c 	bl	8013934 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8013cbc:	200a      	movs	r0, #10
 8013cbe:	f000 f963 	bl	8013f88 <HAL_Delay>
      setSensorLock(FREE);
 8013cc2:	2000      	movs	r0, #0
 8013cc4:	f7f9 fc24 	bl	800d510 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8013cc8:	4b54      	ldr	r3, [pc, #336]	@ (8013e1c <HIDS_Upkeep+0x1ac>)
 8013cca:	2202      	movs	r2, #2
 8013ccc:	701a      	strb	r2, [r3, #0]
      break;
 8013cce:	e0a0      	b.n	8013e12 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8013cd0:	f7f9 fc32 	bl	800d538 <getSensorLock>
 8013cd4:	1e03      	subs	r3, r0, #0
 8013cd6:	d000      	beq.n	8013cda <HIDS_Upkeep+0x6a>
 8013cd8:	e096      	b.n	8013e08 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 8013cda:	2001      	movs	r0, #1
 8013cdc:	f7f9 fc18 	bl	800d510 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8013ce0:	4a52      	ldr	r2, [pc, #328]	@ (8013e2c <HIDS_Upkeep+0x1bc>)
 8013ce2:	4b53      	ldr	r3, [pc, #332]	@ (8013e30 <HIDS_Upkeep+0x1c0>)
 8013ce4:	0011      	movs	r1, r2
 8013ce6:	0018      	movs	r0, r3
 8013ce8:	f7ff ff1c 	bl	8013b24 <HIDS_GetMeasurementValues>
 8013cec:	1e03      	subs	r3, r0, #0
 8013cee:	d002      	beq.n	8013cf6 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8013cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8013e1c <HIDS_Upkeep+0x1ac>)
 8013cf2:	2203      	movs	r2, #3
 8013cf4:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8013cf6:	200a      	movs	r0, #10
 8013cf8:	f000 f946 	bl	8013f88 <HAL_Delay>
      setSensorLock(FREE);
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	f7f9 fc07 	bl	800d510 <setSensorLock>
      break;
 8013d02:	e086      	b.n	8013e12 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8013d04:	4b4a      	ldr	r3, [pc, #296]	@ (8013e30 <HIDS_Upkeep+0x1c0>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	1c18      	adds	r0, r3, #0
 8013d0a:	f7ef fdc3 	bl	8003894 <__aeabi_f2d>
 8013d0e:	0004      	movs	r4, r0
 8013d10:	000d      	movs	r5, r1
 8013d12:	4b46      	ldr	r3, [pc, #280]	@ (8013e2c <HIDS_Upkeep+0x1bc>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	1c18      	adds	r0, r3, #0
 8013d18:	f7ef fdbc 	bl	8003894 <__aeabi_f2d>
 8013d1c:	0002      	movs	r2, r0
 8013d1e:	000b      	movs	r3, r1
 8013d20:	4844      	ldr	r0, [pc, #272]	@ (8013e34 <HIDS_Upkeep+0x1c4>)
 8013d22:	4941      	ldr	r1, [pc, #260]	@ (8013e28 <HIDS_Upkeep+0x1b8>)
 8013d24:	9202      	str	r2, [sp, #8]
 8013d26:	9303      	str	r3, [sp, #12]
 8013d28:	9400      	str	r4, [sp, #0]
 8013d2a:	9501      	str	r5, [sp, #4]
 8013d2c:	0002      	movs	r2, r0
 8013d2e:	2003      	movs	r0, #3
 8013d30:	f7ff fb9e 	bl	8013470 <CreateLine>
      setHIDS(temp, humid);
 8013d34:	4b3d      	ldr	r3, [pc, #244]	@ (8013e2c <HIDS_Upkeep+0x1bc>)
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	4b3d      	ldr	r3, [pc, #244]	@ (8013e30 <HIDS_Upkeep+0x1c0>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	1c19      	adds	r1, r3, #0
 8013d3e:	1c10      	adds	r0, r2, #0
 8013d40:	f7f0 fe8e 	bl	8004a60 <setHIDS>
      ResetMeasurementIndicator();
 8013d44:	f7fe f952 	bl	8011fec <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8013d48:	4b38      	ldr	r3, [pc, #224]	@ (8013e2c <HIDS_Upkeep+0x1bc>)
 8013d4a:	681c      	ldr	r4, [r3, #0]
 8013d4c:	4a37      	ldr	r2, [pc, #220]	@ (8013e2c <HIDS_Upkeep+0x1bc>)
 8013d4e:	4b38      	ldr	r3, [pc, #224]	@ (8013e30 <HIDS_Upkeep+0x1c0>)
 8013d50:	0011      	movs	r1, r2
 8013d52:	0018      	movs	r0, r3
 8013d54:	f7ff fd34 	bl	80137c0 <HIDS_DewPointCalculation>
 8013d58:	1c03      	adds	r3, r0, #0
 8013d5a:	1c19      	adds	r1, r3, #0
 8013d5c:	1c20      	adds	r0, r4, #0
 8013d5e:	f7ed fac9 	bl	80012f4 <__aeabi_fsub>
 8013d62:	1c03      	adds	r3, r0, #0
 8013d64:	21fe      	movs	r1, #254	@ 0xfe
 8013d66:	0589      	lsls	r1, r1, #22
 8013d68:	1c18      	adds	r0, r3, #0
 8013d6a:	f7ec fbe1 	bl	8000530 <__aeabi_fcmplt>
 8013d6e:	1e03      	subs	r3, r0, #0
 8013d70:	d023      	beq.n	8013dba <HIDS_Upkeep+0x14a>
 8013d72:	f7f5 fe79 	bl	8009a68 <getPosixTime>
 8013d76:	0002      	movs	r2, r0
 8013d78:	4b2f      	ldr	r3, [pc, #188]	@ (8013e38 <HIDS_Upkeep+0x1c8>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	1ad2      	subs	r2, r2, r3
 8013d7e:	23e1      	movs	r3, #225	@ 0xe1
 8013d80:	009b      	lsls	r3, r3, #2
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d919      	bls.n	8013dba <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 8013d86:	4a2d      	ldr	r2, [pc, #180]	@ (8013e3c <HIDS_Upkeep+0x1cc>)
 8013d88:	4b2d      	ldr	r3, [pc, #180]	@ (8013e40 <HIDS_Upkeep+0x1d0>)
 8013d8a:	0019      	movs	r1, r3
 8013d8c:	2002      	movs	r0, #2
 8013d8e:	f7ff fb6f 	bl	8013470 <CreateLine>
        if (getSensorLock() != FREE) {
 8013d92:	f7f9 fbd1 	bl	800d538 <getSensorLock>
 8013d96:	1e03      	subs	r3, r0, #0
 8013d98:	d138      	bne.n	8013e0c <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 8013d9a:	f7ff fd83 	bl	80138a4 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 8013d9e:	200a      	movs	r0, #10
 8013da0:	f000 f8f2 	bl	8013f88 <HAL_Delay>
        setSensorLock(FREE);
 8013da4:	2000      	movs	r0, #0
 8013da6:	f7f9 fbb3 	bl	800d510 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 8013daa:	f000 f8e3 	bl	8013f74 <HAL_GetTick>
 8013dae:	0003      	movs	r3, r0
 8013db0:	4a24      	ldr	r2, [pc, #144]	@ (8013e44 <HIDS_Upkeep+0x1d4>)
 8013db2:	189a      	adds	r2, r3, r2
 8013db4:	4b24      	ldr	r3, [pc, #144]	@ (8013e48 <HIDS_Upkeep+0x1d8>)
 8013db6:	601a      	str	r2, [r3, #0]
 8013db8:	e011      	b.n	8013dde <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8013dba:	f000 f8db 	bl	8013f74 <HAL_GetTick>
 8013dbe:	0004      	movs	r4, r0
 8013dc0:	f7f5 fa58 	bl	8009274 <Check_USB_PowerOn>
 8013dc4:	1e03      	subs	r3, r0, #0
 8013dc6:	d103      	bne.n	8013dd0 <HIDS_Upkeep+0x160>
 8013dc8:	4b20      	ldr	r3, [pc, #128]	@ (8013e4c <HIDS_Upkeep+0x1dc>)
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d001      	beq.n	8013dd4 <HIDS_Upkeep+0x164>
 8013dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8013e50 <HIDS_Upkeep+0x1e0>)
 8013dd2:	e001      	b.n	8013dd8 <HIDS_Upkeep+0x168>
 8013dd4:	23fa      	movs	r3, #250	@ 0xfa
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	191a      	adds	r2, r3, r4
 8013dda:	4b1b      	ldr	r3, [pc, #108]	@ (8013e48 <HIDS_Upkeep+0x1d8>)
 8013ddc:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8013dde:	4b0f      	ldr	r3, [pc, #60]	@ (8013e1c <HIDS_Upkeep+0x1ac>)
 8013de0:	2206      	movs	r2, #6
 8013de2:	701a      	strb	r2, [r3, #0]
      break;
 8013de4:	e015      	b.n	8013e12 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8013de6:	4b18      	ldr	r3, [pc, #96]	@ (8013e48 <HIDS_Upkeep+0x1d8>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	0018      	movs	r0, r3
 8013dec:	f7ff faea 	bl	80133c4 <TimestampIsReached>
 8013df0:	1e03      	subs	r3, r0, #0
 8013df2:	d00d      	beq.n	8013e10 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8013df4:	4b09      	ldr	r3, [pc, #36]	@ (8013e1c <HIDS_Upkeep+0x1ac>)
 8013df6:	2200      	movs	r2, #0
 8013df8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013dfa:	e009      	b.n	8013e10 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8013dfc:	4b07      	ldr	r3, [pc, #28]	@ (8013e1c <HIDS_Upkeep+0x1ac>)
 8013dfe:	2200      	movs	r2, #0
 8013e00:	701a      	strb	r2, [r3, #0]
      break;
 8013e02:	e006      	b.n	8013e12 <HIDS_Upkeep+0x1a2>
        break;
 8013e04:	46c0      	nop			@ (mov r8, r8)
 8013e06:	e004      	b.n	8013e12 <HIDS_Upkeep+0x1a2>
        break;
 8013e08:	46c0      	nop			@ (mov r8, r8)
 8013e0a:	e002      	b.n	8013e12 <HIDS_Upkeep+0x1a2>
          break;
 8013e0c:	46c0      	nop			@ (mov r8, r8)
 8013e0e:	e000      	b.n	8013e12 <HIDS_Upkeep+0x1a2>
      break;
 8013e10:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8013e12:	4b02      	ldr	r3, [pc, #8]	@ (8013e1c <HIDS_Upkeep+0x1ac>)
 8013e14:	781b      	ldrb	r3, [r3, #0]
}
 8013e16:	0018      	movs	r0, r3
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8013e1c:	20002234 	.word	0x20002234
 8013e20:	0802e304 	.word	0x0802e304
 8013e24:	0802dce8 	.word	0x0802dce8
 8013e28:	0802dd1c 	.word	0x0802dd1c
 8013e2c:	2000220c 	.word	0x2000220c
 8013e30:	20002208 	.word	0x20002208
 8013e34:	0802dd20 	.word	0x0802dd20
 8013e38:	20002228 	.word	0x20002228
 8013e3c:	0802dd54 	.word	0x0802dd54
 8013e40:	0802dc20 	.word	0x0802dc20
 8013e44:	00002ee0 	.word	0x00002ee0
 8013e48:	20002230 	.word	0x20002230
 8013e4c:	20001e72 	.word	0x20001e72
 8013e50:	00002710 	.word	0x00002710

08013e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8013e54:	480d      	ldr	r0, [pc, #52]	@ (8013e8c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8013e56:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8013e58:	f7fe ff0e 	bl	8012c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013e5c:	480c      	ldr	r0, [pc, #48]	@ (8013e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8013e5e:	490d      	ldr	r1, [pc, #52]	@ (8013e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8013e60:	4a0d      	ldr	r2, [pc, #52]	@ (8013e98 <LoopForever+0xe>)
  movs r3, #0
 8013e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013e64:	e002      	b.n	8013e6c <LoopCopyDataInit>

08013e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013e6a:	3304      	adds	r3, #4

08013e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013e70:	d3f9      	bcc.n	8013e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013e72:	4a0a      	ldr	r2, [pc, #40]	@ (8013e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8013e74:	4c0a      	ldr	r4, [pc, #40]	@ (8013ea0 <LoopForever+0x16>)
  movs r3, #0
 8013e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013e78:	e001      	b.n	8013e7e <LoopFillZerobss>

08013e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013e7c:	3204      	adds	r2, #4

08013e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013e80:	d3fb      	bcc.n	8013e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8013e82:	f012 f83d 	bl	8025f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013e86:	f7f8 faa5 	bl	800c3d4 <main>

08013e8a <LoopForever>:

LoopForever:
    b LoopForever
 8013e8a:	e7fe      	b.n	8013e8a <LoopForever>
   ldr   r0, =_estack
 8013e8c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8013e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013e94:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8013e98:	0802ece8 	.word	0x0802ece8
  ldr r2, =_sbss
 8013e9c:	20000434 	.word	0x20000434
  ldr r4, =_ebss
 8013ea0:	2000365c 	.word	0x2000365c

08013ea4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013ea4:	e7fe      	b.n	8013ea4 <ADC1_COMP_IRQHandler>
	...

08013ea8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8013eae:	1dfb      	adds	r3, r7, #7
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8013eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8013ee4 <HAL_Init+0x3c>)
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8013ee4 <HAL_Init+0x3c>)
 8013eba:	2140      	movs	r1, #64	@ 0x40
 8013ebc:	430a      	orrs	r2, r1
 8013ebe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013ec0:	2003      	movs	r0, #3
 8013ec2:	f000 f811 	bl	8013ee8 <HAL_InitTick>
 8013ec6:	1e03      	subs	r3, r0, #0
 8013ec8:	d003      	beq.n	8013ed2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8013eca:	1dfb      	adds	r3, r7, #7
 8013ecc:	2201      	movs	r2, #1
 8013ece:	701a      	strb	r2, [r3, #0]
 8013ed0:	e001      	b.n	8013ed6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8013ed2:	f7fe fd83 	bl	80129dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8013ed6:	1dfb      	adds	r3, r7, #7
 8013ed8:	781b      	ldrb	r3, [r3, #0]
}
 8013eda:	0018      	movs	r0, r3
 8013edc:	46bd      	mov	sp, r7
 8013ede:	b002      	add	sp, #8
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	46c0      	nop			@ (mov r8, r8)
 8013ee4:	40022000 	.word	0x40022000

08013ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013ee8:	b590      	push	{r4, r7, lr}
 8013eea:	b083      	sub	sp, #12
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013ef0:	4b14      	ldr	r3, [pc, #80]	@ (8013f44 <HAL_InitTick+0x5c>)
 8013ef2:	681c      	ldr	r4, [r3, #0]
 8013ef4:	4b14      	ldr	r3, [pc, #80]	@ (8013f48 <HAL_InitTick+0x60>)
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	0019      	movs	r1, r3
 8013efa:	23fa      	movs	r3, #250	@ 0xfa
 8013efc:	0098      	lsls	r0, r3, #2
 8013efe:	f7ec f951 	bl	80001a4 <__udivsi3>
 8013f02:	0003      	movs	r3, r0
 8013f04:	0019      	movs	r1, r3
 8013f06:	0020      	movs	r0, r4
 8013f08:	f7ec f94c 	bl	80001a4 <__udivsi3>
 8013f0c:	0003      	movs	r3, r0
 8013f0e:	0018      	movs	r0, r3
 8013f10:	f000 fcfd 	bl	801490e <HAL_SYSTICK_Config>
 8013f14:	1e03      	subs	r3, r0, #0
 8013f16:	d001      	beq.n	8013f1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8013f18:	2301      	movs	r3, #1
 8013f1a:	e00f      	b.n	8013f3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b03      	cmp	r3, #3
 8013f20:	d80b      	bhi.n	8013f3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013f22:	6879      	ldr	r1, [r7, #4]
 8013f24:	2301      	movs	r3, #1
 8013f26:	425b      	negs	r3, r3
 8013f28:	2200      	movs	r2, #0
 8013f2a:	0018      	movs	r0, r3
 8013f2c:	f000 fcc6 	bl	80148bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013f30:	4b06      	ldr	r3, [pc, #24]	@ (8013f4c <HAL_InitTick+0x64>)
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013f36:	2300      	movs	r3, #0
 8013f38:	e000      	b.n	8013f3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8013f3a:	2301      	movs	r3, #1
}
 8013f3c:	0018      	movs	r0, r3
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	b003      	add	sp, #12
 8013f42:	bd90      	pop	{r4, r7, pc}
 8013f44:	200000e4 	.word	0x200000e4
 8013f48:	200000f8 	.word	0x200000f8
 8013f4c:	200000f4 	.word	0x200000f4

08013f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013f54:	4b05      	ldr	r3, [pc, #20]	@ (8013f6c <HAL_IncTick+0x1c>)
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	001a      	movs	r2, r3
 8013f5a:	4b05      	ldr	r3, [pc, #20]	@ (8013f70 <HAL_IncTick+0x20>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	18d2      	adds	r2, r2, r3
 8013f60:	4b03      	ldr	r3, [pc, #12]	@ (8013f70 <HAL_IncTick+0x20>)
 8013f62:	601a      	str	r2, [r3, #0]
}
 8013f64:	46c0      	nop			@ (mov r8, r8)
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	46c0      	nop			@ (mov r8, r8)
 8013f6c:	200000f8 	.word	0x200000f8
 8013f70:	20002238 	.word	0x20002238

08013f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	af00      	add	r7, sp, #0
  return uwTick;
 8013f78:	4b02      	ldr	r3, [pc, #8]	@ (8013f84 <HAL_GetTick+0x10>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
}
 8013f7c:	0018      	movs	r0, r3
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	46c0      	nop			@ (mov r8, r8)
 8013f84:	20002238 	.word	0x20002238

08013f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013f90:	f7ff fff0 	bl	8013f74 <HAL_GetTick>
 8013f94:	0003      	movs	r3, r0
 8013f96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	d005      	beq.n	8013fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8013fcc <HAL_Delay+0x44>)
 8013fa4:	781b      	ldrb	r3, [r3, #0]
 8013fa6:	001a      	movs	r2, r3
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	189b      	adds	r3, r3, r2
 8013fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013fae:	46c0      	nop			@ (mov r8, r8)
 8013fb0:	f7ff ffe0 	bl	8013f74 <HAL_GetTick>
 8013fb4:	0002      	movs	r2, r0
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	1ad3      	subs	r3, r2, r3
 8013fba:	68fa      	ldr	r2, [r7, #12]
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d8f7      	bhi.n	8013fb0 <HAL_Delay+0x28>
  {
  }
}
 8013fc0:	46c0      	nop			@ (mov r8, r8)
 8013fc2:	46c0      	nop			@ (mov r8, r8)
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	b004      	add	sp, #16
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	46c0      	nop			@ (mov r8, r8)
 8013fcc:	200000f8 	.word	0x200000f8

08013fd0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8013fd4:	4b04      	ldr	r3, [pc, #16]	@ (8013fe8 <HAL_SuspendTick+0x18>)
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	4b03      	ldr	r3, [pc, #12]	@ (8013fe8 <HAL_SuspendTick+0x18>)
 8013fda:	2102      	movs	r1, #2
 8013fdc:	438a      	bics	r2, r1
 8013fde:	601a      	str	r2, [r3, #0]
}
 8013fe0:	46c0      	nop			@ (mov r8, r8)
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	46c0      	nop			@ (mov r8, r8)
 8013fe8:	e000e010 	.word	0xe000e010

08013fec <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8013ff0:	4b04      	ldr	r3, [pc, #16]	@ (8014004 <HAL_ResumeTick+0x18>)
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	4b03      	ldr	r3, [pc, #12]	@ (8014004 <HAL_ResumeTick+0x18>)
 8013ff6:	2102      	movs	r1, #2
 8013ff8:	430a      	orrs	r2, r1
 8013ffa:	601a      	str	r2, [r3, #0]
}
 8013ffc:	46c0      	nop			@ (mov r8, r8)
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
 8014002:	46c0      	nop			@ (mov r8, r8)
 8014004:	e000e010 	.word	0xe000e010

08014008 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 801400c:	4b02      	ldr	r3, [pc, #8]	@ (8014018 <HAL_GetUIDw0+0x10>)
 801400e:	681b      	ldr	r3, [r3, #0]
}
 8014010:	0018      	movs	r0, r3
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	46c0      	nop			@ (mov r8, r8)
 8014018:	1ff80050 	.word	0x1ff80050

0801401c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8014020:	4b02      	ldr	r3, [pc, #8]	@ (801402c <HAL_GetUIDw1+0x10>)
 8014022:	681b      	ldr	r3, [r3, #0]
}
 8014024:	0018      	movs	r0, r3
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}
 801402a:	46c0      	nop			@ (mov r8, r8)
 801402c:	1ff80054 	.word	0x1ff80054

08014030 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8014034:	4b02      	ldr	r3, [pc, #8]	@ (8014040 <HAL_GetUIDw2+0x10>)
 8014036:	681b      	ldr	r3, [r3, #0]
}
 8014038:	0018      	movs	r0, r3
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	46c0      	nop			@ (mov r8, r8)
 8014040:	1ff80064 	.word	0x1ff80064

08014044 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d101      	bne.n	8014056 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8014052:	2301      	movs	r3, #1
 8014054:	e159      	b.n	801430a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801405a:	2b00      	cmp	r3, #0
 801405c:	d10a      	bne.n	8014074 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2200      	movs	r2, #0
 8014062:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2250      	movs	r2, #80	@ 0x50
 8014068:	2100      	movs	r1, #0
 801406a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	0018      	movs	r0, r3
 8014070:	f7f6 f8b4 	bl	800a1dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014078:	2210      	movs	r2, #16
 801407a:	4013      	ands	r3, r2
 801407c:	2b10      	cmp	r3, #16
 801407e:	d005      	beq.n	801408c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	689b      	ldr	r3, [r3, #8]
 8014086:	2204      	movs	r2, #4
 8014088:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801408a:	d00b      	beq.n	80140a4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014090:	2210      	movs	r2, #16
 8014092:	431a      	orrs	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2250      	movs	r2, #80	@ 0x50
 801409c:	2100      	movs	r1, #0
 801409e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80140a0:	2301      	movs	r3, #1
 80140a2:	e132      	b.n	801430a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140a8:	4a9a      	ldr	r2, [pc, #616]	@ (8014314 <HAL_ADC_Init+0x2d0>)
 80140aa:	4013      	ands	r3, r2
 80140ac:	2202      	movs	r2, #2
 80140ae:	431a      	orrs	r2, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	689b      	ldr	r3, [r3, #8]
 80140ba:	2203      	movs	r2, #3
 80140bc:	4013      	ands	r3, r2
 80140be:	2b01      	cmp	r3, #1
 80140c0:	d108      	bne.n	80140d4 <HAL_ADC_Init+0x90>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2201      	movs	r2, #1
 80140ca:	4013      	ands	r3, r2
 80140cc:	2b01      	cmp	r3, #1
 80140ce:	d101      	bne.n	80140d4 <HAL_ADC_Init+0x90>
 80140d0:	2301      	movs	r3, #1
 80140d2:	e000      	b.n	80140d6 <HAL_ADC_Init+0x92>
 80140d4:	2300      	movs	r3, #0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d149      	bne.n	801416e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	685a      	ldr	r2, [r3, #4]
 80140de:	23c0      	movs	r3, #192	@ 0xc0
 80140e0:	061b      	lsls	r3, r3, #24
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d00b      	beq.n	80140fe <HAL_ADC_Init+0xba>
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	685a      	ldr	r2, [r3, #4]
 80140ea:	2380      	movs	r3, #128	@ 0x80
 80140ec:	05db      	lsls	r3, r3, #23
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d005      	beq.n	80140fe <HAL_ADC_Init+0xba>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	685a      	ldr	r2, [r3, #4]
 80140f6:	2380      	movs	r3, #128	@ 0x80
 80140f8:	061b      	lsls	r3, r3, #24
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d111      	bne.n	8014122 <HAL_ADC_Init+0xde>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	691a      	ldr	r2, [r3, #16]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	0092      	lsls	r2, r2, #2
 801410a:	0892      	lsrs	r2, r2, #2
 801410c:	611a      	str	r2, [r3, #16]
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	6919      	ldr	r1, [r3, #16]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	685a      	ldr	r2, [r3, #4]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	430a      	orrs	r2, r1
 801411e:	611a      	str	r2, [r3, #16]
 8014120:	e014      	b.n	801414c <HAL_ADC_Init+0x108>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	691a      	ldr	r2, [r3, #16]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	0092      	lsls	r2, r2, #2
 801412e:	0892      	lsrs	r2, r2, #2
 8014130:	611a      	str	r2, [r3, #16]
 8014132:	4b79      	ldr	r3, [pc, #484]	@ (8014318 <HAL_ADC_Init+0x2d4>)
 8014134:	681a      	ldr	r2, [r3, #0]
 8014136:	4b78      	ldr	r3, [pc, #480]	@ (8014318 <HAL_ADC_Init+0x2d4>)
 8014138:	4978      	ldr	r1, [pc, #480]	@ (801431c <HAL_ADC_Init+0x2d8>)
 801413a:	400a      	ands	r2, r1
 801413c:	601a      	str	r2, [r3, #0]
 801413e:	4b76      	ldr	r3, [pc, #472]	@ (8014318 <HAL_ADC_Init+0x2d4>)
 8014140:	6819      	ldr	r1, [r3, #0]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	685a      	ldr	r2, [r3, #4]
 8014146:	4b74      	ldr	r3, [pc, #464]	@ (8014318 <HAL_ADC_Init+0x2d4>)
 8014148:	430a      	orrs	r2, r1
 801414a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	68da      	ldr	r2, [r3, #12]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	2118      	movs	r1, #24
 8014158:	438a      	bics	r2, r1
 801415a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	68d9      	ldr	r1, [r3, #12]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	689a      	ldr	r2, [r3, #8]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	430a      	orrs	r2, r1
 801416c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 801416e:	4b6a      	ldr	r3, [pc, #424]	@ (8014318 <HAL_ADC_Init+0x2d4>)
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	4b69      	ldr	r3, [pc, #420]	@ (8014318 <HAL_ADC_Init+0x2d4>)
 8014174:	496a      	ldr	r1, [pc, #424]	@ (8014320 <HAL_ADC_Init+0x2dc>)
 8014176:	400a      	ands	r2, r1
 8014178:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 801417a:	4b67      	ldr	r3, [pc, #412]	@ (8014318 <HAL_ADC_Init+0x2d4>)
 801417c:	6819      	ldr	r1, [r3, #0]
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014182:	065a      	lsls	r2, r3, #25
 8014184:	4b64      	ldr	r3, [pc, #400]	@ (8014318 <HAL_ADC_Init+0x2d4>)
 8014186:	430a      	orrs	r2, r1
 8014188:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	689a      	ldr	r2, [r3, #8]
 8014190:	2380      	movs	r3, #128	@ 0x80
 8014192:	055b      	lsls	r3, r3, #21
 8014194:	4013      	ands	r3, r2
 8014196:	d108      	bne.n	80141aa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	689a      	ldr	r2, [r3, #8]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2180      	movs	r1, #128	@ 0x80
 80141a4:	0549      	lsls	r1, r1, #21
 80141a6:	430a      	orrs	r2, r1
 80141a8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	68da      	ldr	r2, [r3, #12]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	495b      	ldr	r1, [pc, #364]	@ (8014324 <HAL_ADC_Init+0x2e0>)
 80141b6:	400a      	ands	r2, r1
 80141b8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	68d9      	ldr	r1, [r3, #12]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	691b      	ldr	r3, [r3, #16]
 80141c8:	2b02      	cmp	r3, #2
 80141ca:	d101      	bne.n	80141d0 <HAL_ADC_Init+0x18c>
 80141cc:	2304      	movs	r3, #4
 80141ce:	e000      	b.n	80141d2 <HAL_ADC_Init+0x18e>
 80141d0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80141d2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2020      	movs	r0, #32
 80141d8:	5c1b      	ldrb	r3, [r3, r0]
 80141da:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80141dc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	202c      	movs	r0, #44	@ 0x2c
 80141e2:	5c1b      	ldrb	r3, [r3, r0]
 80141e4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80141e6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80141ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	699b      	ldr	r3, [r3, #24]
 80141f2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80141f4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	69db      	ldr	r3, [r3, #28]
 80141fa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80141fc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	430a      	orrs	r2, r1
 8014204:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801420a:	23c2      	movs	r3, #194	@ 0xc2
 801420c:	33ff      	adds	r3, #255	@ 0xff
 801420e:	429a      	cmp	r2, r3
 8014210:	d00b      	beq.n	801422a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	68d9      	ldr	r1, [r3, #12]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014220:	431a      	orrs	r2, r3
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	430a      	orrs	r2, r1
 8014228:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2221      	movs	r2, #33	@ 0x21
 801422e:	5c9b      	ldrb	r3, [r3, r2]
 8014230:	2b01      	cmp	r3, #1
 8014232:	d11a      	bne.n	801426a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2220      	movs	r2, #32
 8014238:	5c9b      	ldrb	r3, [r3, r2]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d109      	bne.n	8014252 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	68da      	ldr	r2, [r3, #12]
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	2180      	movs	r1, #128	@ 0x80
 801424a:	0249      	lsls	r1, r1, #9
 801424c:	430a      	orrs	r2, r1
 801424e:	60da      	str	r2, [r3, #12]
 8014250:	e00b      	b.n	801426a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014256:	2220      	movs	r2, #32
 8014258:	431a      	orrs	r2, r3
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014262:	2201      	movs	r2, #1
 8014264:	431a      	orrs	r2, r3
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801426e:	2b01      	cmp	r3, #1
 8014270:	d11f      	bne.n	80142b2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	691a      	ldr	r2, [r3, #16]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	492a      	ldr	r1, [pc, #168]	@ (8014328 <HAL_ADC_Init+0x2e4>)
 801427e:	400a      	ands	r2, r1
 8014280:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	6919      	ldr	r1, [r3, #16]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014290:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014296:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	430a      	orrs	r2, r1
 801429e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	691a      	ldr	r2, [r3, #16]
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	2101      	movs	r1, #1
 80142ac:	430a      	orrs	r2, r1
 80142ae:	611a      	str	r2, [r3, #16]
 80142b0:	e00e      	b.n	80142d0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	691b      	ldr	r3, [r3, #16]
 80142b8:	2201      	movs	r2, #1
 80142ba:	4013      	ands	r3, r2
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d107      	bne.n	80142d0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	691a      	ldr	r2, [r3, #16]
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	2101      	movs	r1, #1
 80142cc:	438a      	bics	r2, r1
 80142ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	695a      	ldr	r2, [r3, #20]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	2107      	movs	r1, #7
 80142dc:	438a      	bics	r2, r1
 80142de:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	6959      	ldr	r1, [r3, #20]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	430a      	orrs	r2, r1
 80142f0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2200      	movs	r2, #0
 80142f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142fc:	2203      	movs	r2, #3
 80142fe:	4393      	bics	r3, r2
 8014300:	2201      	movs	r2, #1
 8014302:	431a      	orrs	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014308:	2300      	movs	r3, #0
}
 801430a:	0018      	movs	r0, r3
 801430c:	46bd      	mov	sp, r7
 801430e:	b002      	add	sp, #8
 8014310:	bd80      	pop	{r7, pc}
 8014312:	46c0      	nop			@ (mov r8, r8)
 8014314:	fffffefd 	.word	0xfffffefd
 8014318:	40012708 	.word	0x40012708
 801431c:	ffc3ffff 	.word	0xffc3ffff
 8014320:	fdffffff 	.word	0xfdffffff
 8014324:	fffe0219 	.word	0xfffe0219
 8014328:	fffffc03 	.word	0xfffffc03

0801432c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 801432c:	b590      	push	{r4, r7, lr}
 801432e:	b085      	sub	sp, #20
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014334:	230f      	movs	r3, #15
 8014336:	18fb      	adds	r3, r7, r3
 8014338:	2200      	movs	r2, #0
 801433a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	689b      	ldr	r3, [r3, #8]
 8014342:	2204      	movs	r2, #4
 8014344:	4013      	ands	r3, r2
 8014346:	d138      	bne.n	80143ba <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2250      	movs	r2, #80	@ 0x50
 801434c:	5c9b      	ldrb	r3, [r3, r2]
 801434e:	2b01      	cmp	r3, #1
 8014350:	d101      	bne.n	8014356 <HAL_ADC_Start+0x2a>
 8014352:	2302      	movs	r3, #2
 8014354:	e038      	b.n	80143c8 <HAL_ADC_Start+0x9c>
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2250      	movs	r2, #80	@ 0x50
 801435a:	2101      	movs	r1, #1
 801435c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	69db      	ldr	r3, [r3, #28]
 8014362:	2b01      	cmp	r3, #1
 8014364:	d007      	beq.n	8014376 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014366:	230f      	movs	r3, #15
 8014368:	18fc      	adds	r4, r7, r3
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	0018      	movs	r0, r3
 801436e:	f000 f95f 	bl	8014630 <ADC_Enable>
 8014372:	0003      	movs	r3, r0
 8014374:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014376:	230f      	movs	r3, #15
 8014378:	18fb      	adds	r3, r7, r3
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d120      	bne.n	80143c2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014384:	4a12      	ldr	r2, [pc, #72]	@ (80143d0 <HAL_ADC_Start+0xa4>)
 8014386:	4013      	ands	r3, r2
 8014388:	2280      	movs	r2, #128	@ 0x80
 801438a:	0052      	lsls	r2, r2, #1
 801438c:	431a      	orrs	r2, r3
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2200      	movs	r2, #0
 8014396:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2250      	movs	r2, #80	@ 0x50
 801439c:	2100      	movs	r1, #0
 801439e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	221c      	movs	r2, #28
 80143a6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	689a      	ldr	r2, [r3, #8]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	2104      	movs	r1, #4
 80143b4:	430a      	orrs	r2, r1
 80143b6:	609a      	str	r2, [r3, #8]
 80143b8:	e003      	b.n	80143c2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80143ba:	230f      	movs	r3, #15
 80143bc:	18fb      	adds	r3, r7, r3
 80143be:	2202      	movs	r2, #2
 80143c0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80143c2:	230f      	movs	r3, #15
 80143c4:	18fb      	adds	r3, r7, r3
 80143c6:	781b      	ldrb	r3, [r3, #0]
}
 80143c8:	0018      	movs	r0, r3
 80143ca:	46bd      	mov	sp, r7
 80143cc:	b005      	add	sp, #20
 80143ce:	bd90      	pop	{r4, r7, pc}
 80143d0:	fffff0fe 	.word	0xfffff0fe

080143d4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b084      	sub	sp, #16
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80143de:	2300      	movs	r3, #0
 80143e0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80143e2:	2300      	movs	r3, #0
 80143e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	695b      	ldr	r3, [r3, #20]
 80143ea:	2b08      	cmp	r3, #8
 80143ec:	d102      	bne.n	80143f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80143ee:	2308      	movs	r3, #8
 80143f0:	60fb      	str	r3, [r7, #12]
 80143f2:	e014      	b.n	801441e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	2201      	movs	r2, #1
 80143fc:	4013      	ands	r3, r2
 80143fe:	2b01      	cmp	r3, #1
 8014400:	d10b      	bne.n	801441a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014406:	2220      	movs	r2, #32
 8014408:	431a      	orrs	r2, r3
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2250      	movs	r2, #80	@ 0x50
 8014412:	2100      	movs	r1, #0
 8014414:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014416:	2301      	movs	r3, #1
 8014418:	e072      	b.n	8014500 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 801441a:	230c      	movs	r3, #12
 801441c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801441e:	f7ff fda9 	bl	8013f74 <HAL_GetTick>
 8014422:	0003      	movs	r3, r0
 8014424:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014426:	e01f      	b.n	8014468 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	3301      	adds	r3, #1
 801442c:	d01c      	beq.n	8014468 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d007      	beq.n	8014444 <HAL_ADC_PollForConversion+0x70>
 8014434:	f7ff fd9e 	bl	8013f74 <HAL_GetTick>
 8014438:	0002      	movs	r2, r0
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	1ad3      	subs	r3, r2, r3
 801443e:	683a      	ldr	r2, [r7, #0]
 8014440:	429a      	cmp	r2, r3
 8014442:	d211      	bcs.n	8014468 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	68fa      	ldr	r2, [r7, #12]
 801444c:	4013      	ands	r3, r2
 801444e:	d10b      	bne.n	8014468 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014454:	2204      	movs	r2, #4
 8014456:	431a      	orrs	r2, r3
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2250      	movs	r2, #80	@ 0x50
 8014460:	2100      	movs	r1, #0
 8014462:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014464:	2303      	movs	r3, #3
 8014466:	e04b      	b.n	8014500 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	4013      	ands	r3, r2
 8014472:	d0d9      	beq.n	8014428 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014478:	2280      	movs	r2, #128	@ 0x80
 801447a:	0092      	lsls	r2, r2, #2
 801447c:	431a      	orrs	r2, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	68da      	ldr	r2, [r3, #12]
 8014488:	23c0      	movs	r3, #192	@ 0xc0
 801448a:	011b      	lsls	r3, r3, #4
 801448c:	4013      	ands	r3, r2
 801448e:	d12e      	bne.n	80144ee <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2220      	movs	r2, #32
 8014494:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014496:	2b00      	cmp	r3, #0
 8014498:	d129      	bne.n	80144ee <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	2208      	movs	r2, #8
 80144a2:	4013      	ands	r3, r2
 80144a4:	2b08      	cmp	r3, #8
 80144a6:	d122      	bne.n	80144ee <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	689b      	ldr	r3, [r3, #8]
 80144ae:	2204      	movs	r2, #4
 80144b0:	4013      	ands	r3, r2
 80144b2:	d110      	bne.n	80144d6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	685a      	ldr	r2, [r3, #4]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	210c      	movs	r1, #12
 80144c0:	438a      	bics	r2, r1
 80144c2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80144c8:	4a0f      	ldr	r2, [pc, #60]	@ (8014508 <HAL_ADC_PollForConversion+0x134>)
 80144ca:	4013      	ands	r3, r2
 80144cc:	2201      	movs	r2, #1
 80144ce:	431a      	orrs	r2, r3
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80144d4:	e00b      	b.n	80144ee <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80144da:	2220      	movs	r2, #32
 80144dc:	431a      	orrs	r2, r3
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80144e6:	2201      	movs	r2, #1
 80144e8:	431a      	orrs	r2, r3
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	699b      	ldr	r3, [r3, #24]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d103      	bne.n	80144fe <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	220c      	movs	r2, #12
 80144fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80144fe:	2300      	movs	r3, #0
}
 8014500:	0018      	movs	r0, r3
 8014502:	46bd      	mov	sp, r7
 8014504:	b004      	add	sp, #16
 8014506:	bd80      	pop	{r7, pc}
 8014508:	fffffefe 	.word	0xfffffefe

0801450c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 801451a:	0018      	movs	r0, r3
 801451c:	46bd      	mov	sp, r7
 801451e:	b002      	add	sp, #8
 8014520:	bd80      	pop	{r7, pc}
	...

08014524 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2250      	movs	r2, #80	@ 0x50
 8014532:	5c9b      	ldrb	r3, [r3, r2]
 8014534:	2b01      	cmp	r3, #1
 8014536:	d101      	bne.n	801453c <HAL_ADC_ConfigChannel+0x18>
 8014538:	2302      	movs	r3, #2
 801453a:	e06c      	b.n	8014616 <HAL_ADC_ConfigChannel+0xf2>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2250      	movs	r2, #80	@ 0x50
 8014540:	2101      	movs	r1, #1
 8014542:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	689b      	ldr	r3, [r3, #8]
 801454a:	2204      	movs	r2, #4
 801454c:	4013      	ands	r3, r2
 801454e:	d00b      	beq.n	8014568 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014554:	2220      	movs	r2, #32
 8014556:	431a      	orrs	r2, r3
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2250      	movs	r2, #80	@ 0x50
 8014560:	2100      	movs	r1, #0
 8014562:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014564:	2301      	movs	r3, #1
 8014566:	e056      	b.n	8014616 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	4a2c      	ldr	r2, [pc, #176]	@ (8014620 <HAL_ADC_ConfigChannel+0xfc>)
 801456e:	4293      	cmp	r3, r2
 8014570:	d028      	beq.n	80145c4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	035b      	lsls	r3, r3, #13
 801457e:	0b5a      	lsrs	r2, r3, #13
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	430a      	orrs	r2, r1
 8014586:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	2380      	movs	r3, #128	@ 0x80
 801458e:	02db      	lsls	r3, r3, #11
 8014590:	4013      	ands	r3, r2
 8014592:	d009      	beq.n	80145a8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014594:	4b23      	ldr	r3, [pc, #140]	@ (8014624 <HAL_ADC_ConfigChannel+0x100>)
 8014596:	681a      	ldr	r2, [r3, #0]
 8014598:	4b22      	ldr	r3, [pc, #136]	@ (8014624 <HAL_ADC_ConfigChannel+0x100>)
 801459a:	2180      	movs	r1, #128	@ 0x80
 801459c:	0409      	lsls	r1, r1, #16
 801459e:	430a      	orrs	r2, r1
 80145a0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80145a2:	200a      	movs	r0, #10
 80145a4:	f000 f8ac 	bl	8014700 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	681a      	ldr	r2, [r3, #0]
 80145ac:	2380      	movs	r3, #128	@ 0x80
 80145ae:	029b      	lsls	r3, r3, #10
 80145b0:	4013      	ands	r3, r2
 80145b2:	d02b      	beq.n	801460c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80145b4:	4b1b      	ldr	r3, [pc, #108]	@ (8014624 <HAL_ADC_ConfigChannel+0x100>)
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	4b1a      	ldr	r3, [pc, #104]	@ (8014624 <HAL_ADC_ConfigChannel+0x100>)
 80145ba:	2180      	movs	r1, #128	@ 0x80
 80145bc:	03c9      	lsls	r1, r1, #15
 80145be:	430a      	orrs	r2, r1
 80145c0:	601a      	str	r2, [r3, #0]
 80145c2:	e023      	b.n	801460c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	035b      	lsls	r3, r3, #13
 80145d0:	0b5b      	lsrs	r3, r3, #13
 80145d2:	43d9      	mvns	r1, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	400a      	ands	r2, r1
 80145da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	2380      	movs	r3, #128	@ 0x80
 80145e2:	02db      	lsls	r3, r3, #11
 80145e4:	4013      	ands	r3, r2
 80145e6:	d005      	beq.n	80145f4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80145e8:	4b0e      	ldr	r3, [pc, #56]	@ (8014624 <HAL_ADC_ConfigChannel+0x100>)
 80145ea:	681a      	ldr	r2, [r3, #0]
 80145ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014624 <HAL_ADC_ConfigChannel+0x100>)
 80145ee:	490e      	ldr	r1, [pc, #56]	@ (8014628 <HAL_ADC_ConfigChannel+0x104>)
 80145f0:	400a      	ands	r2, r1
 80145f2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	2380      	movs	r3, #128	@ 0x80
 80145fa:	029b      	lsls	r3, r3, #10
 80145fc:	4013      	ands	r3, r2
 80145fe:	d005      	beq.n	801460c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014600:	4b08      	ldr	r3, [pc, #32]	@ (8014624 <HAL_ADC_ConfigChannel+0x100>)
 8014602:	681a      	ldr	r2, [r3, #0]
 8014604:	4b07      	ldr	r3, [pc, #28]	@ (8014624 <HAL_ADC_ConfigChannel+0x100>)
 8014606:	4909      	ldr	r1, [pc, #36]	@ (801462c <HAL_ADC_ConfigChannel+0x108>)
 8014608:	400a      	ands	r2, r1
 801460a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2250      	movs	r2, #80	@ 0x50
 8014610:	2100      	movs	r1, #0
 8014612:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014614:	2300      	movs	r3, #0
}
 8014616:	0018      	movs	r0, r3
 8014618:	46bd      	mov	sp, r7
 801461a:	b002      	add	sp, #8
 801461c:	bd80      	pop	{r7, pc}
 801461e:	46c0      	nop			@ (mov r8, r8)
 8014620:	00001001 	.word	0x00001001
 8014624:	40012708 	.word	0x40012708
 8014628:	ff7fffff 	.word	0xff7fffff
 801462c:	ffbfffff 	.word	0xffbfffff

08014630 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014638:	2300      	movs	r3, #0
 801463a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	689b      	ldr	r3, [r3, #8]
 8014642:	2203      	movs	r2, #3
 8014644:	4013      	ands	r3, r2
 8014646:	2b01      	cmp	r3, #1
 8014648:	d108      	bne.n	801465c <ADC_Enable+0x2c>
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	2201      	movs	r2, #1
 8014652:	4013      	ands	r3, r2
 8014654:	2b01      	cmp	r3, #1
 8014656:	d101      	bne.n	801465c <ADC_Enable+0x2c>
 8014658:	2301      	movs	r3, #1
 801465a:	e000      	b.n	801465e <ADC_Enable+0x2e>
 801465c:	2300      	movs	r3, #0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d146      	bne.n	80146f0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	689b      	ldr	r3, [r3, #8]
 8014668:	4a24      	ldr	r2, [pc, #144]	@ (80146fc <ADC_Enable+0xcc>)
 801466a:	4013      	ands	r3, r2
 801466c:	d00d      	beq.n	801468a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014672:	2210      	movs	r2, #16
 8014674:	431a      	orrs	r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801467e:	2201      	movs	r2, #1
 8014680:	431a      	orrs	r2, r3
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8014686:	2301      	movs	r3, #1
 8014688:	e033      	b.n	80146f2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	689a      	ldr	r2, [r3, #8]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2101      	movs	r1, #1
 8014696:	430a      	orrs	r2, r1
 8014698:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 801469a:	2001      	movs	r0, #1
 801469c:	f000 f830 	bl	8014700 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80146a0:	f7ff fc68 	bl	8013f74 <HAL_GetTick>
 80146a4:	0003      	movs	r3, r0
 80146a6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80146a8:	e01b      	b.n	80146e2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80146aa:	f7ff fc63 	bl	8013f74 <HAL_GetTick>
 80146ae:	0002      	movs	r2, r0
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	2b0a      	cmp	r3, #10
 80146b6:	d914      	bls.n	80146e2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2201      	movs	r2, #1
 80146c0:	4013      	ands	r3, r2
 80146c2:	2b01      	cmp	r3, #1
 80146c4:	d00d      	beq.n	80146e2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80146ca:	2210      	movs	r2, #16
 80146cc:	431a      	orrs	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80146d6:	2201      	movs	r2, #1
 80146d8:	431a      	orrs	r2, r3
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80146de:	2301      	movs	r3, #1
 80146e0:	e007      	b.n	80146f2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2201      	movs	r2, #1
 80146ea:	4013      	ands	r3, r2
 80146ec:	2b01      	cmp	r3, #1
 80146ee:	d1dc      	bne.n	80146aa <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80146f0:	2300      	movs	r3, #0
}
 80146f2:	0018      	movs	r0, r3
 80146f4:	46bd      	mov	sp, r7
 80146f6:	b004      	add	sp, #16
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	46c0      	nop			@ (mov r8, r8)
 80146fc:	80000017 	.word	0x80000017

08014700 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b084      	sub	sp, #16
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8014708:	4b0b      	ldr	r3, [pc, #44]	@ (8014738 <ADC_DelayMicroSecond+0x38>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	490b      	ldr	r1, [pc, #44]	@ (801473c <ADC_DelayMicroSecond+0x3c>)
 801470e:	0018      	movs	r0, r3
 8014710:	f7eb fd48 	bl	80001a4 <__udivsi3>
 8014714:	0003      	movs	r3, r0
 8014716:	001a      	movs	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	4353      	muls	r3, r2
 801471c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801471e:	e002      	b.n	8014726 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	3b01      	subs	r3, #1
 8014724:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d1f9      	bne.n	8014720 <ADC_DelayMicroSecond+0x20>
  }
}
 801472c:	46c0      	nop			@ (mov r8, r8)
 801472e:	46c0      	nop			@ (mov r8, r8)
 8014730:	46bd      	mov	sp, r7
 8014732:	b004      	add	sp, #16
 8014734:	bd80      	pop	{r7, pc}
 8014736:	46c0      	nop			@ (mov r8, r8)
 8014738:	200000e4 	.word	0x200000e4
 801473c:	000f4240 	.word	0x000f4240

08014740 <__NVIC_EnableIRQ>:
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	0002      	movs	r2, r0
 8014748:	1dfb      	adds	r3, r7, #7
 801474a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801474c:	1dfb      	adds	r3, r7, #7
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	2b7f      	cmp	r3, #127	@ 0x7f
 8014752:	d809      	bhi.n	8014768 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014754:	1dfb      	adds	r3, r7, #7
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	001a      	movs	r2, r3
 801475a:	231f      	movs	r3, #31
 801475c:	401a      	ands	r2, r3
 801475e:	4b04      	ldr	r3, [pc, #16]	@ (8014770 <__NVIC_EnableIRQ+0x30>)
 8014760:	2101      	movs	r1, #1
 8014762:	4091      	lsls	r1, r2
 8014764:	000a      	movs	r2, r1
 8014766:	601a      	str	r2, [r3, #0]
}
 8014768:	46c0      	nop			@ (mov r8, r8)
 801476a:	46bd      	mov	sp, r7
 801476c:	b002      	add	sp, #8
 801476e:	bd80      	pop	{r7, pc}
 8014770:	e000e100 	.word	0xe000e100

08014774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014774:	b590      	push	{r4, r7, lr}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	0002      	movs	r2, r0
 801477c:	6039      	str	r1, [r7, #0]
 801477e:	1dfb      	adds	r3, r7, #7
 8014780:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8014782:	1dfb      	adds	r3, r7, #7
 8014784:	781b      	ldrb	r3, [r3, #0]
 8014786:	2b7f      	cmp	r3, #127	@ 0x7f
 8014788:	d828      	bhi.n	80147dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801478a:	4a2f      	ldr	r2, [pc, #188]	@ (8014848 <__NVIC_SetPriority+0xd4>)
 801478c:	1dfb      	adds	r3, r7, #7
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	b25b      	sxtb	r3, r3
 8014792:	089b      	lsrs	r3, r3, #2
 8014794:	33c0      	adds	r3, #192	@ 0xc0
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	589b      	ldr	r3, [r3, r2]
 801479a:	1dfa      	adds	r2, r7, #7
 801479c:	7812      	ldrb	r2, [r2, #0]
 801479e:	0011      	movs	r1, r2
 80147a0:	2203      	movs	r2, #3
 80147a2:	400a      	ands	r2, r1
 80147a4:	00d2      	lsls	r2, r2, #3
 80147a6:	21ff      	movs	r1, #255	@ 0xff
 80147a8:	4091      	lsls	r1, r2
 80147aa:	000a      	movs	r2, r1
 80147ac:	43d2      	mvns	r2, r2
 80147ae:	401a      	ands	r2, r3
 80147b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	019b      	lsls	r3, r3, #6
 80147b6:	22ff      	movs	r2, #255	@ 0xff
 80147b8:	401a      	ands	r2, r3
 80147ba:	1dfb      	adds	r3, r7, #7
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	0018      	movs	r0, r3
 80147c0:	2303      	movs	r3, #3
 80147c2:	4003      	ands	r3, r0
 80147c4:	00db      	lsls	r3, r3, #3
 80147c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80147c8:	481f      	ldr	r0, [pc, #124]	@ (8014848 <__NVIC_SetPriority+0xd4>)
 80147ca:	1dfb      	adds	r3, r7, #7
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	b25b      	sxtb	r3, r3
 80147d0:	089b      	lsrs	r3, r3, #2
 80147d2:	430a      	orrs	r2, r1
 80147d4:	33c0      	adds	r3, #192	@ 0xc0
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80147da:	e031      	b.n	8014840 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80147dc:	4a1b      	ldr	r2, [pc, #108]	@ (801484c <__NVIC_SetPriority+0xd8>)
 80147de:	1dfb      	adds	r3, r7, #7
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	0019      	movs	r1, r3
 80147e4:	230f      	movs	r3, #15
 80147e6:	400b      	ands	r3, r1
 80147e8:	3b08      	subs	r3, #8
 80147ea:	089b      	lsrs	r3, r3, #2
 80147ec:	3306      	adds	r3, #6
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	18d3      	adds	r3, r2, r3
 80147f2:	3304      	adds	r3, #4
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	1dfa      	adds	r2, r7, #7
 80147f8:	7812      	ldrb	r2, [r2, #0]
 80147fa:	0011      	movs	r1, r2
 80147fc:	2203      	movs	r2, #3
 80147fe:	400a      	ands	r2, r1
 8014800:	00d2      	lsls	r2, r2, #3
 8014802:	21ff      	movs	r1, #255	@ 0xff
 8014804:	4091      	lsls	r1, r2
 8014806:	000a      	movs	r2, r1
 8014808:	43d2      	mvns	r2, r2
 801480a:	401a      	ands	r2, r3
 801480c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	019b      	lsls	r3, r3, #6
 8014812:	22ff      	movs	r2, #255	@ 0xff
 8014814:	401a      	ands	r2, r3
 8014816:	1dfb      	adds	r3, r7, #7
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	0018      	movs	r0, r3
 801481c:	2303      	movs	r3, #3
 801481e:	4003      	ands	r3, r0
 8014820:	00db      	lsls	r3, r3, #3
 8014822:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014824:	4809      	ldr	r0, [pc, #36]	@ (801484c <__NVIC_SetPriority+0xd8>)
 8014826:	1dfb      	adds	r3, r7, #7
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	001c      	movs	r4, r3
 801482c:	230f      	movs	r3, #15
 801482e:	4023      	ands	r3, r4
 8014830:	3b08      	subs	r3, #8
 8014832:	089b      	lsrs	r3, r3, #2
 8014834:	430a      	orrs	r2, r1
 8014836:	3306      	adds	r3, #6
 8014838:	009b      	lsls	r3, r3, #2
 801483a:	18c3      	adds	r3, r0, r3
 801483c:	3304      	adds	r3, #4
 801483e:	601a      	str	r2, [r3, #0]
}
 8014840:	46c0      	nop			@ (mov r8, r8)
 8014842:	46bd      	mov	sp, r7
 8014844:	b003      	add	sp, #12
 8014846:	bd90      	pop	{r4, r7, pc}
 8014848:	e000e100 	.word	0xe000e100
 801484c:	e000ed00 	.word	0xe000ed00

08014850 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014854:	f3bf 8f4f 	dsb	sy
}
 8014858:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801485a:	4b04      	ldr	r3, [pc, #16]	@ (801486c <__NVIC_SystemReset+0x1c>)
 801485c:	4a04      	ldr	r2, [pc, #16]	@ (8014870 <__NVIC_SystemReset+0x20>)
 801485e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014860:	f3bf 8f4f 	dsb	sy
}
 8014864:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014866:	46c0      	nop			@ (mov r8, r8)
 8014868:	e7fd      	b.n	8014866 <__NVIC_SystemReset+0x16>
 801486a:	46c0      	nop			@ (mov r8, r8)
 801486c:	e000ed00 	.word	0xe000ed00
 8014870:	05fa0004 	.word	0x05fa0004

08014874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	1e5a      	subs	r2, r3, #1
 8014880:	2380      	movs	r3, #128	@ 0x80
 8014882:	045b      	lsls	r3, r3, #17
 8014884:	429a      	cmp	r2, r3
 8014886:	d301      	bcc.n	801488c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8014888:	2301      	movs	r3, #1
 801488a:	e010      	b.n	80148ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801488c:	4b0a      	ldr	r3, [pc, #40]	@ (80148b8 <SysTick_Config+0x44>)
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	3a01      	subs	r2, #1
 8014892:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8014894:	2301      	movs	r3, #1
 8014896:	425b      	negs	r3, r3
 8014898:	2103      	movs	r1, #3
 801489a:	0018      	movs	r0, r3
 801489c:	f7ff ff6a 	bl	8014774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80148a0:	4b05      	ldr	r3, [pc, #20]	@ (80148b8 <SysTick_Config+0x44>)
 80148a2:	2200      	movs	r2, #0
 80148a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80148a6:	4b04      	ldr	r3, [pc, #16]	@ (80148b8 <SysTick_Config+0x44>)
 80148a8:	2207      	movs	r2, #7
 80148aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80148ac:	2300      	movs	r3, #0
}
 80148ae:	0018      	movs	r0, r3
 80148b0:	46bd      	mov	sp, r7
 80148b2:	b002      	add	sp, #8
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	46c0      	nop			@ (mov r8, r8)
 80148b8:	e000e010 	.word	0xe000e010

080148bc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80148bc:	b580      	push	{r7, lr}
 80148be:	b084      	sub	sp, #16
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	60b9      	str	r1, [r7, #8]
 80148c4:	607a      	str	r2, [r7, #4]
 80148c6:	210f      	movs	r1, #15
 80148c8:	187b      	adds	r3, r7, r1
 80148ca:	1c02      	adds	r2, r0, #0
 80148cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80148ce:	68ba      	ldr	r2, [r7, #8]
 80148d0:	187b      	adds	r3, r7, r1
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	b25b      	sxtb	r3, r3
 80148d6:	0011      	movs	r1, r2
 80148d8:	0018      	movs	r0, r3
 80148da:	f7ff ff4b 	bl	8014774 <__NVIC_SetPriority>
}
 80148de:	46c0      	nop			@ (mov r8, r8)
 80148e0:	46bd      	mov	sp, r7
 80148e2:	b004      	add	sp, #16
 80148e4:	bd80      	pop	{r7, pc}

080148e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80148e6:	b580      	push	{r7, lr}
 80148e8:	b082      	sub	sp, #8
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	0002      	movs	r2, r0
 80148ee:	1dfb      	adds	r3, r7, #7
 80148f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80148f2:	1dfb      	adds	r3, r7, #7
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	b25b      	sxtb	r3, r3
 80148f8:	0018      	movs	r0, r3
 80148fa:	f7ff ff21 	bl	8014740 <__NVIC_EnableIRQ>
}
 80148fe:	46c0      	nop			@ (mov r8, r8)
 8014900:	46bd      	mov	sp, r7
 8014902:	b002      	add	sp, #8
 8014904:	bd80      	pop	{r7, pc}

08014906 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8014906:	b580      	push	{r7, lr}
 8014908:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801490a:	f7ff ffa1 	bl	8014850 <__NVIC_SystemReset>

0801490e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801490e:	b580      	push	{r7, lr}
 8014910:	b082      	sub	sp, #8
 8014912:	af00      	add	r7, sp, #0
 8014914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	0018      	movs	r0, r3
 801491a:	f7ff ffab 	bl	8014874 <SysTick_Config>
 801491e:	0003      	movs	r3, r0
}
 8014920:	0018      	movs	r0, r3
 8014922:	46bd      	mov	sp, r7
 8014924:	b002      	add	sp, #8
 8014926:	bd80      	pop	{r7, pc}

08014928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d101      	bne.n	801493a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8014936:	2301      	movs	r3, #1
 8014938:	e061      	b.n	80149fe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	4a32      	ldr	r2, [pc, #200]	@ (8014a08 <HAL_DMA_Init+0xe0>)
 8014940:	4694      	mov	ip, r2
 8014942:	4463      	add	r3, ip
 8014944:	2114      	movs	r1, #20
 8014946:	0018      	movs	r0, r3
 8014948:	f7eb fc2c 	bl	80001a4 <__udivsi3>
 801494c:	0003      	movs	r3, r0
 801494e:	009a      	lsls	r2, r3, #2
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	4a2d      	ldr	r2, [pc, #180]	@ (8014a0c <HAL_DMA_Init+0xe4>)
 8014958:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2225      	movs	r2, #37	@ 0x25
 801495e:	2102      	movs	r1, #2
 8014960:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	4a28      	ldr	r2, [pc, #160]	@ (8014a10 <HAL_DMA_Init+0xe8>)
 801496e:	4013      	ands	r3, r2
 8014970:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801497a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	691b      	ldr	r3, [r3, #16]
 8014980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	699b      	ldr	r3, [r3, #24]
 801498c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6a1b      	ldr	r3, [r3, #32]
 8014998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801499a:	68fa      	ldr	r2, [r7, #12]
 801499c:	4313      	orrs	r3, r2
 801499e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	68fa      	ldr	r2, [r7, #12]
 80149a6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	689a      	ldr	r2, [r3, #8]
 80149ac:	2380      	movs	r3, #128	@ 0x80
 80149ae:	01db      	lsls	r3, r3, #7
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d018      	beq.n	80149e6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80149b4:	4b17      	ldr	r3, [pc, #92]	@ (8014a14 <HAL_DMA_Init+0xec>)
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149bc:	211c      	movs	r1, #28
 80149be:	400b      	ands	r3, r1
 80149c0:	210f      	movs	r1, #15
 80149c2:	4099      	lsls	r1, r3
 80149c4:	000b      	movs	r3, r1
 80149c6:	43d9      	mvns	r1, r3
 80149c8:	4b12      	ldr	r3, [pc, #72]	@ (8014a14 <HAL_DMA_Init+0xec>)
 80149ca:	400a      	ands	r2, r1
 80149cc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80149ce:	4b11      	ldr	r3, [pc, #68]	@ (8014a14 <HAL_DMA_Init+0xec>)
 80149d0:	6819      	ldr	r1, [r3, #0]
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	685a      	ldr	r2, [r3, #4]
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149da:	201c      	movs	r0, #28
 80149dc:	4003      	ands	r3, r0
 80149de:	409a      	lsls	r2, r3
 80149e0:	4b0c      	ldr	r3, [pc, #48]	@ (8014a14 <HAL_DMA_Init+0xec>)
 80149e2:	430a      	orrs	r2, r1
 80149e4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2200      	movs	r2, #0
 80149ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2225      	movs	r2, #37	@ 0x25
 80149f0:	2101      	movs	r1, #1
 80149f2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2224      	movs	r2, #36	@ 0x24
 80149f8:	2100      	movs	r1, #0
 80149fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80149fc:	2300      	movs	r3, #0
}
 80149fe:	0018      	movs	r0, r3
 8014a00:	46bd      	mov	sp, r7
 8014a02:	b004      	add	sp, #16
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	46c0      	nop			@ (mov r8, r8)
 8014a08:	bffdfff8 	.word	0xbffdfff8
 8014a0c:	40020000 	.word	0x40020000
 8014a10:	ffff800f 	.word	0xffff800f
 8014a14:	400200a8 	.word	0x400200a8

08014a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b086      	sub	sp, #24
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	607a      	str	r2, [r7, #4]
 8014a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014a26:	2317      	movs	r3, #23
 8014a28:	18fb      	adds	r3, r7, r3
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	2224      	movs	r2, #36	@ 0x24
 8014a32:	5c9b      	ldrb	r3, [r3, r2]
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d101      	bne.n	8014a3c <HAL_DMA_Start_IT+0x24>
 8014a38:	2302      	movs	r3, #2
 8014a3a:	e04f      	b.n	8014adc <HAL_DMA_Start_IT+0xc4>
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	2224      	movs	r2, #36	@ 0x24
 8014a40:	2101      	movs	r1, #1
 8014a42:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2225      	movs	r2, #37	@ 0x25
 8014a48:	5c9b      	ldrb	r3, [r3, r2]
 8014a4a:	b2db      	uxtb	r3, r3
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d13a      	bne.n	8014ac6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2225      	movs	r2, #37	@ 0x25
 8014a54:	2102      	movs	r1, #2
 8014a56:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2101      	movs	r1, #1
 8014a6a:	438a      	bics	r2, r1
 8014a6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	68b9      	ldr	r1, [r7, #8]
 8014a74:	68f8      	ldr	r0, [r7, #12]
 8014a76:	f000 f976 	bl	8014d66 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d008      	beq.n	8014a94 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	210e      	movs	r1, #14
 8014a8e:	430a      	orrs	r2, r1
 8014a90:	601a      	str	r2, [r3, #0]
 8014a92:	e00f      	b.n	8014ab4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	681a      	ldr	r2, [r3, #0]
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	2104      	movs	r1, #4
 8014aa0:	438a      	bics	r2, r1
 8014aa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	210a      	movs	r1, #10
 8014ab0:	430a      	orrs	r2, r1
 8014ab2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	681a      	ldr	r2, [r3, #0]
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2101      	movs	r1, #1
 8014ac0:	430a      	orrs	r2, r1
 8014ac2:	601a      	str	r2, [r3, #0]
 8014ac4:	e007      	b.n	8014ad6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2224      	movs	r2, #36	@ 0x24
 8014aca:	2100      	movs	r1, #0
 8014acc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8014ace:	2317      	movs	r3, #23
 8014ad0:	18fb      	adds	r3, r7, r3
 8014ad2:	2202      	movs	r2, #2
 8014ad4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8014ad6:	2317      	movs	r3, #23
 8014ad8:	18fb      	adds	r3, r7, r3
 8014ada:	781b      	ldrb	r3, [r3, #0]
}
 8014adc:	0018      	movs	r0, r3
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	b006      	add	sp, #24
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b084      	sub	sp, #16
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014aec:	230f      	movs	r3, #15
 8014aee:	18fb      	adds	r3, r7, r3
 8014af0:	2200      	movs	r2, #0
 8014af2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2225      	movs	r2, #37	@ 0x25
 8014af8:	5c9b      	ldrb	r3, [r3, r2]
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d008      	beq.n	8014b12 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2204      	movs	r2, #4
 8014b04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2224      	movs	r2, #36	@ 0x24
 8014b0a:	2100      	movs	r1, #0
 8014b0c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8014b0e:	2301      	movs	r3, #1
 8014b10:	e024      	b.n	8014b5c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	681a      	ldr	r2, [r3, #0]
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	210e      	movs	r1, #14
 8014b1e:	438a      	bics	r2, r1
 8014b20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	681a      	ldr	r2, [r3, #0]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2101      	movs	r1, #1
 8014b2e:	438a      	bics	r2, r1
 8014b30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b36:	221c      	movs	r2, #28
 8014b38:	401a      	ands	r2, r3
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b3e:	2101      	movs	r1, #1
 8014b40:	4091      	lsls	r1, r2
 8014b42:	000a      	movs	r2, r1
 8014b44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2225      	movs	r2, #37	@ 0x25
 8014b4a:	2101      	movs	r1, #1
 8014b4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2224      	movs	r2, #36	@ 0x24
 8014b52:	2100      	movs	r1, #0
 8014b54:	5499      	strb	r1, [r3, r2]

    return status;
 8014b56:	230f      	movs	r3, #15
 8014b58:	18fb      	adds	r3, r7, r3
 8014b5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014b5c:	0018      	movs	r0, r3
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	b004      	add	sp, #16
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b084      	sub	sp, #16
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014b6c:	210f      	movs	r1, #15
 8014b6e:	187b      	adds	r3, r7, r1
 8014b70:	2200      	movs	r2, #0
 8014b72:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2225      	movs	r2, #37	@ 0x25
 8014b78:	5c9b      	ldrb	r3, [r3, r2]
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	2b02      	cmp	r3, #2
 8014b7e:	d006      	beq.n	8014b8e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2204      	movs	r2, #4
 8014b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8014b86:	187b      	adds	r3, r7, r1
 8014b88:	2201      	movs	r2, #1
 8014b8a:	701a      	strb	r2, [r3, #0]
 8014b8c:	e02a      	b.n	8014be4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	681a      	ldr	r2, [r3, #0]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	210e      	movs	r1, #14
 8014b9a:	438a      	bics	r2, r1
 8014b9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	681a      	ldr	r2, [r3, #0]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	2101      	movs	r1, #1
 8014baa:	438a      	bics	r2, r1
 8014bac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bb2:	221c      	movs	r2, #28
 8014bb4:	401a      	ands	r2, r3
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bba:	2101      	movs	r1, #1
 8014bbc:	4091      	lsls	r1, r2
 8014bbe:	000a      	movs	r2, r1
 8014bc0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2225      	movs	r2, #37	@ 0x25
 8014bc6:	2101      	movs	r1, #1
 8014bc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2224      	movs	r2, #36	@ 0x24
 8014bce:	2100      	movs	r1, #0
 8014bd0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d004      	beq.n	8014be4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bde:	687a      	ldr	r2, [r7, #4]
 8014be0:	0010      	movs	r0, r2
 8014be2:	4798      	blx	r3
    }
  }
  return status;
 8014be4:	230f      	movs	r3, #15
 8014be6:	18fb      	adds	r3, r7, r3
 8014be8:	781b      	ldrb	r3, [r3, #0]
}
 8014bea:	0018      	movs	r0, r3
 8014bec:	46bd      	mov	sp, r7
 8014bee:	b004      	add	sp, #16
 8014bf0:	bd80      	pop	{r7, pc}

08014bf2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8014bf2:	b580      	push	{r7, lr}
 8014bf4:	b084      	sub	sp, #16
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c0e:	221c      	movs	r2, #28
 8014c10:	4013      	ands	r3, r2
 8014c12:	2204      	movs	r2, #4
 8014c14:	409a      	lsls	r2, r3
 8014c16:	0013      	movs	r3, r2
 8014c18:	68fa      	ldr	r2, [r7, #12]
 8014c1a:	4013      	ands	r3, r2
 8014c1c:	d026      	beq.n	8014c6c <HAL_DMA_IRQHandler+0x7a>
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	2204      	movs	r2, #4
 8014c22:	4013      	ands	r3, r2
 8014c24:	d022      	beq.n	8014c6c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	2220      	movs	r2, #32
 8014c2e:	4013      	ands	r3, r2
 8014c30:	d107      	bne.n	8014c42 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2104      	movs	r1, #4
 8014c3e:	438a      	bics	r2, r1
 8014c40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c46:	221c      	movs	r2, #28
 8014c48:	401a      	ands	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c4e:	2104      	movs	r1, #4
 8014c50:	4091      	lsls	r1, r2
 8014c52:	000a      	movs	r2, r1
 8014c54:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d100      	bne.n	8014c60 <HAL_DMA_IRQHandler+0x6e>
 8014c5e:	e071      	b.n	8014d44 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	0010      	movs	r0, r2
 8014c68:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8014c6a:	e06b      	b.n	8014d44 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c70:	221c      	movs	r2, #28
 8014c72:	4013      	ands	r3, r2
 8014c74:	2202      	movs	r2, #2
 8014c76:	409a      	lsls	r2, r3
 8014c78:	0013      	movs	r3, r2
 8014c7a:	68fa      	ldr	r2, [r7, #12]
 8014c7c:	4013      	ands	r3, r2
 8014c7e:	d02d      	beq.n	8014cdc <HAL_DMA_IRQHandler+0xea>
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	2202      	movs	r2, #2
 8014c84:	4013      	ands	r3, r2
 8014c86:	d029      	beq.n	8014cdc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2220      	movs	r2, #32
 8014c90:	4013      	ands	r3, r2
 8014c92:	d10b      	bne.n	8014cac <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	681a      	ldr	r2, [r3, #0]
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	210a      	movs	r1, #10
 8014ca0:	438a      	bics	r2, r1
 8014ca2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	2225      	movs	r2, #37	@ 0x25
 8014ca8:	2101      	movs	r1, #1
 8014caa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cb0:	221c      	movs	r2, #28
 8014cb2:	401a      	ands	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cb8:	2102      	movs	r1, #2
 8014cba:	4091      	lsls	r1, r2
 8014cbc:	000a      	movs	r2, r1
 8014cbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2224      	movs	r2, #36	@ 0x24
 8014cc4:	2100      	movs	r1, #0
 8014cc6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d039      	beq.n	8014d44 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	0010      	movs	r0, r2
 8014cd8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8014cda:	e033      	b.n	8014d44 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ce0:	221c      	movs	r2, #28
 8014ce2:	4013      	ands	r3, r2
 8014ce4:	2208      	movs	r2, #8
 8014ce6:	409a      	lsls	r2, r3
 8014ce8:	0013      	movs	r3, r2
 8014cea:	68fa      	ldr	r2, [r7, #12]
 8014cec:	4013      	ands	r3, r2
 8014cee:	d02a      	beq.n	8014d46 <HAL_DMA_IRQHandler+0x154>
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	2208      	movs	r2, #8
 8014cf4:	4013      	ands	r3, r2
 8014cf6:	d026      	beq.n	8014d46 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	681a      	ldr	r2, [r3, #0]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	210e      	movs	r1, #14
 8014d04:	438a      	bics	r2, r1
 8014d06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d0c:	221c      	movs	r2, #28
 8014d0e:	401a      	ands	r2, r3
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d14:	2101      	movs	r1, #1
 8014d16:	4091      	lsls	r1, r2
 8014d18:	000a      	movs	r2, r1
 8014d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2201      	movs	r2, #1
 8014d20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2225      	movs	r2, #37	@ 0x25
 8014d26:	2101      	movs	r1, #1
 8014d28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2224      	movs	r2, #36	@ 0x24
 8014d2e:	2100      	movs	r1, #0
 8014d30:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d005      	beq.n	8014d46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d3e:	687a      	ldr	r2, [r7, #4]
 8014d40:	0010      	movs	r0, r2
 8014d42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8014d44:	46c0      	nop			@ (mov r8, r8)
 8014d46:	46c0      	nop			@ (mov r8, r8)
}
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	b004      	add	sp, #16
 8014d4c:	bd80      	pop	{r7, pc}

08014d4e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8014d4e:	b580      	push	{r7, lr}
 8014d50:	b082      	sub	sp, #8
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2225      	movs	r2, #37	@ 0x25
 8014d5a:	5c9b      	ldrb	r3, [r3, r2]
 8014d5c:	b2db      	uxtb	r3, r3
}
 8014d5e:	0018      	movs	r0, r3
 8014d60:	46bd      	mov	sp, r7
 8014d62:	b002      	add	sp, #8
 8014d64:	bd80      	pop	{r7, pc}

08014d66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014d66:	b580      	push	{r7, lr}
 8014d68:	b084      	sub	sp, #16
 8014d6a:	af00      	add	r7, sp, #0
 8014d6c:	60f8      	str	r0, [r7, #12]
 8014d6e:	60b9      	str	r1, [r7, #8]
 8014d70:	607a      	str	r2, [r7, #4]
 8014d72:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d78:	221c      	movs	r2, #28
 8014d7a:	401a      	ands	r2, r3
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d80:	2101      	movs	r1, #1
 8014d82:	4091      	lsls	r1, r2
 8014d84:	000a      	movs	r2, r1
 8014d86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	683a      	ldr	r2, [r7, #0]
 8014d8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	689b      	ldr	r3, [r3, #8]
 8014d94:	2b10      	cmp	r3, #16
 8014d96:	d108      	bne.n	8014daa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8014da8:	e007      	b.n	8014dba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	687a      	ldr	r2, [r7, #4]
 8014db8:	60da      	str	r2, [r3, #12]
}
 8014dba:	46c0      	nop			@ (mov r8, r8)
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	b004      	add	sp, #16
 8014dc0:	bd80      	pop	{r7, pc}
	...

08014dc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b084      	sub	sp, #16
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8014dcc:	f7ff f8d2 	bl	8013f74 <HAL_GetTick>
 8014dd0:	0003      	movs	r3, r0
 8014dd2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014dd4:	e00f      	b.n	8014df6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	3301      	adds	r3, #1
 8014dda:	d00c      	beq.n	8014df6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d007      	beq.n	8014df2 <FLASH_WaitForLastOperation+0x2e>
 8014de2:	f7ff f8c7 	bl	8013f74 <HAL_GetTick>
 8014de6:	0002      	movs	r2, r0
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	429a      	cmp	r2, r3
 8014df0:	d201      	bcs.n	8014df6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8014df2:	2303      	movs	r3, #3
 8014df4:	e052      	b.n	8014e9c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014df6:	4b2b      	ldr	r3, [pc, #172]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014df8:	699b      	ldr	r3, [r3, #24]
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	4013      	ands	r3, r2
 8014dfe:	2b01      	cmp	r3, #1
 8014e00:	d0e9      	beq.n	8014dd6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8014e02:	4b28      	ldr	r3, [pc, #160]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e04:	699b      	ldr	r3, [r3, #24]
 8014e06:	2202      	movs	r2, #2
 8014e08:	4013      	ands	r3, r2
 8014e0a:	2b02      	cmp	r3, #2
 8014e0c:	d102      	bne.n	8014e14 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8014e0e:	4b25      	ldr	r3, [pc, #148]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e10:	2202      	movs	r2, #2
 8014e12:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014e14:	4b23      	ldr	r3, [pc, #140]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e16:	699a      	ldr	r2, [r3, #24]
 8014e18:	2380      	movs	r3, #128	@ 0x80
 8014e1a:	005b      	lsls	r3, r3, #1
 8014e1c:	401a      	ands	r2, r3
 8014e1e:	2380      	movs	r3, #128	@ 0x80
 8014e20:	005b      	lsls	r3, r3, #1
 8014e22:	429a      	cmp	r2, r3
 8014e24:	d035      	beq.n	8014e92 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014e26:	4b1f      	ldr	r3, [pc, #124]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e28:	699a      	ldr	r2, [r3, #24]
 8014e2a:	2380      	movs	r3, #128	@ 0x80
 8014e2c:	009b      	lsls	r3, r3, #2
 8014e2e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014e30:	2380      	movs	r3, #128	@ 0x80
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d02c      	beq.n	8014e92 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014e38:	4b1a      	ldr	r3, [pc, #104]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e3a:	699a      	ldr	r2, [r3, #24]
 8014e3c:	2380      	movs	r3, #128	@ 0x80
 8014e3e:	00db      	lsls	r3, r3, #3
 8014e40:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014e42:	2380      	movs	r3, #128	@ 0x80
 8014e44:	00db      	lsls	r3, r3, #3
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d023      	beq.n	8014e92 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014e4a:	4b16      	ldr	r3, [pc, #88]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e4c:	699a      	ldr	r2, [r3, #24]
 8014e4e:	2380      	movs	r3, #128	@ 0x80
 8014e50:	011b      	lsls	r3, r3, #4
 8014e52:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014e54:	2380      	movs	r3, #128	@ 0x80
 8014e56:	011b      	lsls	r3, r3, #4
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d01a      	beq.n	8014e92 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014e5c:	4b11      	ldr	r3, [pc, #68]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e5e:	699a      	ldr	r2, [r3, #24]
 8014e60:	2380      	movs	r3, #128	@ 0x80
 8014e62:	019b      	lsls	r3, r3, #6
 8014e64:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014e66:	2380      	movs	r3, #128	@ 0x80
 8014e68:	019b      	lsls	r3, r3, #6
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d011      	beq.n	8014e92 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e70:	699a      	ldr	r2, [r3, #24]
 8014e72:	2380      	movs	r3, #128	@ 0x80
 8014e74:	029b      	lsls	r3, r3, #10
 8014e76:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014e78:	2380      	movs	r3, #128	@ 0x80
 8014e7a:	029b      	lsls	r3, r3, #10
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	d008      	beq.n	8014e92 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8014e80:	4b08      	ldr	r3, [pc, #32]	@ (8014ea4 <FLASH_WaitForLastOperation+0xe0>)
 8014e82:	699a      	ldr	r2, [r3, #24]
 8014e84:	2380      	movs	r3, #128	@ 0x80
 8014e86:	025b      	lsls	r3, r3, #9
 8014e88:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014e8a:	2380      	movs	r3, #128	@ 0x80
 8014e8c:	025b      	lsls	r3, r3, #9
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d103      	bne.n	8014e9a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8014e92:	f000 f809 	bl	8014ea8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8014e96:	2301      	movs	r3, #1
 8014e98:	e000      	b.n	8014e9c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8014e9a:	2300      	movs	r3, #0
}
 8014e9c:	0018      	movs	r0, r3
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	b004      	add	sp, #16
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	40022000 	.word	0x40022000

08014ea8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8014eb2:	4b49      	ldr	r3, [pc, #292]	@ (8014fd8 <FLASH_SetErrorCode+0x130>)
 8014eb4:	699a      	ldr	r2, [r3, #24]
 8014eb6:	2380      	movs	r3, #128	@ 0x80
 8014eb8:	005b      	lsls	r3, r3, #1
 8014eba:	401a      	ands	r2, r3
 8014ebc:	2380      	movs	r3, #128	@ 0x80
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d10a      	bne.n	8014eda <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8014ec4:	4b45      	ldr	r3, [pc, #276]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014ec6:	695b      	ldr	r3, [r3, #20]
 8014ec8:	2202      	movs	r2, #2
 8014eca:	431a      	orrs	r2, r3
 8014ecc:	4b43      	ldr	r3, [pc, #268]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014ece:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2280      	movs	r2, #128	@ 0x80
 8014ed4:	0052      	lsls	r2, r2, #1
 8014ed6:	4313      	orrs	r3, r2
 8014ed8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8014eda:	4b3f      	ldr	r3, [pc, #252]	@ (8014fd8 <FLASH_SetErrorCode+0x130>)
 8014edc:	699a      	ldr	r2, [r3, #24]
 8014ede:	2380      	movs	r3, #128	@ 0x80
 8014ee0:	009b      	lsls	r3, r3, #2
 8014ee2:	401a      	ands	r2, r3
 8014ee4:	2380      	movs	r3, #128	@ 0x80
 8014ee6:	009b      	lsls	r3, r3, #2
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d10a      	bne.n	8014f02 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8014eec:	4b3b      	ldr	r3, [pc, #236]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014eee:	695b      	ldr	r3, [r3, #20]
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	431a      	orrs	r2, r3
 8014ef4:	4b39      	ldr	r3, [pc, #228]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014ef6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2280      	movs	r2, #128	@ 0x80
 8014efc:	0092      	lsls	r2, r2, #2
 8014efe:	4313      	orrs	r3, r2
 8014f00:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8014f02:	4b35      	ldr	r3, [pc, #212]	@ (8014fd8 <FLASH_SetErrorCode+0x130>)
 8014f04:	699a      	ldr	r2, [r3, #24]
 8014f06:	2380      	movs	r3, #128	@ 0x80
 8014f08:	00db      	lsls	r3, r3, #3
 8014f0a:	401a      	ands	r2, r3
 8014f0c:	2380      	movs	r3, #128	@ 0x80
 8014f0e:	00db      	lsls	r3, r3, #3
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d10a      	bne.n	8014f2a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8014f14:	4b31      	ldr	r3, [pc, #196]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014f16:	695b      	ldr	r3, [r3, #20]
 8014f18:	2208      	movs	r2, #8
 8014f1a:	431a      	orrs	r2, r3
 8014f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014f1e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2280      	movs	r2, #128	@ 0x80
 8014f24:	00d2      	lsls	r2, r2, #3
 8014f26:	4313      	orrs	r3, r2
 8014f28:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8014f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8014fd8 <FLASH_SetErrorCode+0x130>)
 8014f2c:	699a      	ldr	r2, [r3, #24]
 8014f2e:	2380      	movs	r3, #128	@ 0x80
 8014f30:	011b      	lsls	r3, r3, #4
 8014f32:	401a      	ands	r2, r3
 8014f34:	2380      	movs	r3, #128	@ 0x80
 8014f36:	011b      	lsls	r3, r3, #4
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d10a      	bne.n	8014f52 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8014f3c:	4b27      	ldr	r3, [pc, #156]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014f3e:	695b      	ldr	r3, [r3, #20]
 8014f40:	2204      	movs	r2, #4
 8014f42:	431a      	orrs	r2, r3
 8014f44:	4b25      	ldr	r3, [pc, #148]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014f46:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2280      	movs	r2, #128	@ 0x80
 8014f4c:	0112      	lsls	r2, r2, #4
 8014f4e:	4313      	orrs	r3, r2
 8014f50:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8014f52:	4b21      	ldr	r3, [pc, #132]	@ (8014fd8 <FLASH_SetErrorCode+0x130>)
 8014f54:	699a      	ldr	r2, [r3, #24]
 8014f56:	2380      	movs	r3, #128	@ 0x80
 8014f58:	019b      	lsls	r3, r3, #6
 8014f5a:	401a      	ands	r2, r3
 8014f5c:	2380      	movs	r3, #128	@ 0x80
 8014f5e:	019b      	lsls	r3, r3, #6
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d10a      	bne.n	8014f7a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8014f64:	4b1d      	ldr	r3, [pc, #116]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014f66:	695b      	ldr	r3, [r3, #20]
 8014f68:	2210      	movs	r2, #16
 8014f6a:	431a      	orrs	r2, r3
 8014f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014f6e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2280      	movs	r2, #128	@ 0x80
 8014f74:	0192      	lsls	r2, r2, #6
 8014f76:	4313      	orrs	r3, r2
 8014f78:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8014f7a:	4b17      	ldr	r3, [pc, #92]	@ (8014fd8 <FLASH_SetErrorCode+0x130>)
 8014f7c:	699a      	ldr	r2, [r3, #24]
 8014f7e:	2380      	movs	r3, #128	@ 0x80
 8014f80:	029b      	lsls	r3, r3, #10
 8014f82:	401a      	ands	r2, r3
 8014f84:	2380      	movs	r3, #128	@ 0x80
 8014f86:	029b      	lsls	r3, r3, #10
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d109      	bne.n	8014fa0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8014f8c:	4b13      	ldr	r3, [pc, #76]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014f8e:	695b      	ldr	r3, [r3, #20]
 8014f90:	2220      	movs	r2, #32
 8014f92:	431a      	orrs	r2, r3
 8014f94:	4b11      	ldr	r3, [pc, #68]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014f96:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2220      	movs	r2, #32
 8014f9c:	4313      	orrs	r3, r2
 8014f9e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8014fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8014fd8 <FLASH_SetErrorCode+0x130>)
 8014fa2:	699a      	ldr	r2, [r3, #24]
 8014fa4:	2380      	movs	r3, #128	@ 0x80
 8014fa6:	025b      	lsls	r3, r3, #9
 8014fa8:	401a      	ands	r2, r3
 8014faa:	2380      	movs	r3, #128	@ 0x80
 8014fac:	025b      	lsls	r3, r3, #9
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d10a      	bne.n	8014fc8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8014fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014fb4:	695b      	ldr	r3, [r3, #20]
 8014fb6:	2240      	movs	r2, #64	@ 0x40
 8014fb8:	431a      	orrs	r2, r3
 8014fba:	4b08      	ldr	r3, [pc, #32]	@ (8014fdc <FLASH_SetErrorCode+0x134>)
 8014fbc:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2280      	movs	r2, #128	@ 0x80
 8014fc2:	0252      	lsls	r2, r2, #9
 8014fc4:	4313      	orrs	r3, r2
 8014fc6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8014fc8:	4b03      	ldr	r3, [pc, #12]	@ (8014fd8 <FLASH_SetErrorCode+0x130>)
 8014fca:	687a      	ldr	r2, [r7, #4]
 8014fcc:	619a      	str	r2, [r3, #24]
}  
 8014fce:	46c0      	nop			@ (mov r8, r8)
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	b002      	add	sp, #8
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	46c0      	nop			@ (mov r8, r8)
 8014fd8:	40022000 	.word	0x40022000
 8014fdc:	2000223c 	.word	0x2000223c

08014fe0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014fe6:	4b12      	ldr	r3, [pc, #72]	@ (8015030 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014fe8:	685b      	ldr	r3, [r3, #4]
 8014fea:	2201      	movs	r2, #1
 8014fec:	4013      	ands	r3, r2
 8014fee:	d019      	beq.n	8015024 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8014ff4:	607b      	str	r3, [r7, #4]
  return(result);
 8014ff6:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8014ff8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8014ffa:	b672      	cpsid	i
}
 8014ffc:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8014ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8015030 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015000:	4a0c      	ldr	r2, [pc, #48]	@ (8015034 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8015002:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8015004:	4b0a      	ldr	r3, [pc, #40]	@ (8015030 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015006:	4a0c      	ldr	r2, [pc, #48]	@ (8015038 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8015008:	60da      	str	r2, [r3, #12]
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	f383 8810 	msr	PRIMASK, r3
}
 8015014:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015016:	4b06      	ldr	r3, [pc, #24]	@ (8015030 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015018:	685b      	ldr	r3, [r3, #4]
 801501a:	2201      	movs	r2, #1
 801501c:	4013      	ands	r3, r2
 801501e:	d001      	beq.n	8015024 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8015020:	2301      	movs	r3, #1
 8015022:	e000      	b.n	8015026 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8015024:	2300      	movs	r3, #0
}
 8015026:	0018      	movs	r0, r3
 8015028:	46bd      	mov	sp, r7
 801502a:	b004      	add	sp, #16
 801502c:	bd80      	pop	{r7, pc}
 801502e:	46c0      	nop			@ (mov r8, r8)
 8015030:	40022000 	.word	0x40022000
 8015034:	89abcdef 	.word	0x89abcdef
 8015038:	02030405 	.word	0x02030405

0801503c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015040:	4b04      	ldr	r3, [pc, #16]	@ (8015054 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015042:	685a      	ldr	r2, [r3, #4]
 8015044:	4b03      	ldr	r3, [pc, #12]	@ (8015054 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015046:	2101      	movs	r1, #1
 8015048:	430a      	orrs	r2, r1
 801504a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 801504c:	2300      	movs	r3, #0
}
 801504e:	0018      	movs	r0, r3
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	40022000 	.word	0x40022000

08015058 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8015058:	b5b0      	push	{r4, r5, r7, lr}
 801505a:	b084      	sub	sp, #16
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015060:	250f      	movs	r5, #15
 8015062:	197b      	adds	r3, r7, r5
 8015064:	2200      	movs	r2, #0
 8015066:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015068:	197c      	adds	r4, r7, r5
 801506a:	4b0f      	ldr	r3, [pc, #60]	@ (80150a8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 801506c:	0018      	movs	r0, r3
 801506e:	f7ff fea9 	bl	8014dc4 <FLASH_WaitForLastOperation>
 8015072:	0003      	movs	r3, r0
 8015074:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015076:	0029      	movs	r1, r5
 8015078:	187b      	adds	r3, r7, r1
 801507a:	781b      	ldrb	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d10c      	bne.n	801509a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015080:	4b0a      	ldr	r3, [pc, #40]	@ (80150ac <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8015082:	2200      	movs	r2, #0
 8015084:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2200      	movs	r2, #0
 801508a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801508c:	187c      	adds	r4, r7, r1
 801508e:	4b06      	ldr	r3, [pc, #24]	@ (80150a8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015090:	0018      	movs	r0, r3
 8015092:	f7ff fe97 	bl	8014dc4 <FLASH_WaitForLastOperation>
 8015096:	0003      	movs	r3, r0
 8015098:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 801509a:	230f      	movs	r3, #15
 801509c:	18fb      	adds	r3, r7, r3
 801509e:	781b      	ldrb	r3, [r3, #0]
}  
 80150a0:	0018      	movs	r0, r3
 80150a2:	46bd      	mov	sp, r7
 80150a4:	b004      	add	sp, #16
 80150a6:	bdb0      	pop	{r4, r5, r7, pc}
 80150a8:	0000c350 	.word	0x0000c350
 80150ac:	2000223c 	.word	0x2000223c

080150b0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80150b0:	b5b0      	push	{r4, r5, r7, lr}
 80150b2:	b086      	sub	sp, #24
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80150bc:	2317      	movs	r3, #23
 80150be:	18fb      	adds	r3, r7, r3
 80150c0:	2201      	movs	r2, #1
 80150c2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80150c4:	4b24      	ldr	r3, [pc, #144]	@ (8015158 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80150c6:	7c1b      	ldrb	r3, [r3, #16]
 80150c8:	2b01      	cmp	r3, #1
 80150ca:	d101      	bne.n	80150d0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80150cc:	2302      	movs	r3, #2
 80150ce:	e03e      	b.n	801514e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80150d0:	4b21      	ldr	r3, [pc, #132]	@ (8015158 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80150d2:	2201      	movs	r2, #1
 80150d4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80150d6:	2517      	movs	r5, #23
 80150d8:	197c      	adds	r4, r7, r5
 80150da:	4b20      	ldr	r3, [pc, #128]	@ (801515c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80150dc:	0018      	movs	r0, r3
 80150de:	f7ff fe71 	bl	8014dc4 <FLASH_WaitForLastOperation>
 80150e2:	0003      	movs	r3, r0
 80150e4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80150e6:	197b      	adds	r3, r7, r5
 80150e8:	781b      	ldrb	r3, [r3, #0]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d129      	bne.n	8015142 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80150ee:	4b1a      	ldr	r3, [pc, #104]	@ (8015158 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80150f0:	2200      	movs	r2, #0
 80150f2:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2b02      	cmp	r3, #2
 80150f8:	d103      	bne.n	8015102 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80150fa:	68bb      	ldr	r3, [r7, #8]
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	601a      	str	r2, [r3, #0]
 8015100:	e013      	b.n	801512a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	2b01      	cmp	r3, #1
 8015106:	d104      	bne.n	8015112 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015108:	68bb      	ldr	r3, [r7, #8]
 801510a:	687a      	ldr	r2, [r7, #4]
 801510c:	b292      	uxth	r2, r2
 801510e:	801a      	strh	r2, [r3, #0]
 8015110:	e00b      	b.n	801512a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d104      	bne.n	8015122 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	b2d2      	uxtb	r2, r2
 801511e:	701a      	strb	r2, [r3, #0]
 8015120:	e003      	b.n	801512a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015122:	2317      	movs	r3, #23
 8015124:	18fb      	adds	r3, r7, r3
 8015126:	2201      	movs	r2, #1
 8015128:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 801512a:	2217      	movs	r2, #23
 801512c:	18bb      	adds	r3, r7, r2
 801512e:	781b      	ldrb	r3, [r3, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d106      	bne.n	8015142 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015134:	18bc      	adds	r4, r7, r2
 8015136:	4b09      	ldr	r3, [pc, #36]	@ (801515c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015138:	0018      	movs	r0, r3
 801513a:	f7ff fe43 	bl	8014dc4 <FLASH_WaitForLastOperation>
 801513e:	0003      	movs	r3, r0
 8015140:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015142:	4b05      	ldr	r3, [pc, #20]	@ (8015158 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015144:	2200      	movs	r2, #0
 8015146:	741a      	strb	r2, [r3, #16]

  return status;
 8015148:	2317      	movs	r3, #23
 801514a:	18fb      	adds	r3, r7, r3
 801514c:	781b      	ldrb	r3, [r3, #0]
}
 801514e:	0018      	movs	r0, r3
 8015150:	46bd      	mov	sp, r7
 8015152:	b006      	add	sp, #24
 8015154:	bdb0      	pop	{r4, r5, r7, pc}
 8015156:	46c0      	nop			@ (mov r8, r8)
 8015158:	2000223c 	.word	0x2000223c
 801515c:	0000c350 	.word	0x0000c350

08015160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b086      	sub	sp, #24
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801516a:	2300      	movs	r3, #0
 801516c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801516e:	2300      	movs	r3, #0
 8015170:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015172:	2300      	movs	r3, #0
 8015174:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015176:	e155      	b.n	8015424 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	2101      	movs	r1, #1
 801517e:	697a      	ldr	r2, [r7, #20]
 8015180:	4091      	lsls	r1, r2
 8015182:	000a      	movs	r2, r1
 8015184:	4013      	ands	r3, r2
 8015186:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d100      	bne.n	8015190 <HAL_GPIO_Init+0x30>
 801518e:	e146      	b.n	801541e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	685b      	ldr	r3, [r3, #4]
 8015194:	2203      	movs	r2, #3
 8015196:	4013      	ands	r3, r2
 8015198:	2b01      	cmp	r3, #1
 801519a:	d005      	beq.n	80151a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	2203      	movs	r2, #3
 80151a2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80151a4:	2b02      	cmp	r3, #2
 80151a6:	d130      	bne.n	801520a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	689b      	ldr	r3, [r3, #8]
 80151ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	005b      	lsls	r3, r3, #1
 80151b2:	2203      	movs	r2, #3
 80151b4:	409a      	lsls	r2, r3
 80151b6:	0013      	movs	r3, r2
 80151b8:	43da      	mvns	r2, r3
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	4013      	ands	r3, r2
 80151be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	68da      	ldr	r2, [r3, #12]
 80151c4:	697b      	ldr	r3, [r7, #20]
 80151c6:	005b      	lsls	r3, r3, #1
 80151c8:	409a      	lsls	r2, r3
 80151ca:	0013      	movs	r3, r2
 80151cc:	693a      	ldr	r2, [r7, #16]
 80151ce:	4313      	orrs	r3, r2
 80151d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	693a      	ldr	r2, [r7, #16]
 80151d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80151de:	2201      	movs	r2, #1
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	409a      	lsls	r2, r3
 80151e4:	0013      	movs	r3, r2
 80151e6:	43da      	mvns	r2, r3
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	4013      	ands	r3, r2
 80151ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	685b      	ldr	r3, [r3, #4]
 80151f2:	091b      	lsrs	r3, r3, #4
 80151f4:	2201      	movs	r2, #1
 80151f6:	401a      	ands	r2, r3
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	409a      	lsls	r2, r3
 80151fc:	0013      	movs	r3, r2
 80151fe:	693a      	ldr	r2, [r7, #16]
 8015200:	4313      	orrs	r3, r2
 8015202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	693a      	ldr	r2, [r7, #16]
 8015208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	2203      	movs	r2, #3
 8015210:	4013      	ands	r3, r2
 8015212:	2b03      	cmp	r3, #3
 8015214:	d017      	beq.n	8015246 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	68db      	ldr	r3, [r3, #12]
 801521a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801521c:	697b      	ldr	r3, [r7, #20]
 801521e:	005b      	lsls	r3, r3, #1
 8015220:	2203      	movs	r2, #3
 8015222:	409a      	lsls	r2, r3
 8015224:	0013      	movs	r3, r2
 8015226:	43da      	mvns	r2, r3
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	4013      	ands	r3, r2
 801522c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	689a      	ldr	r2, [r3, #8]
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	005b      	lsls	r3, r3, #1
 8015236:	409a      	lsls	r2, r3
 8015238:	0013      	movs	r3, r2
 801523a:	693a      	ldr	r2, [r7, #16]
 801523c:	4313      	orrs	r3, r2
 801523e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	693a      	ldr	r2, [r7, #16]
 8015244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	2203      	movs	r2, #3
 801524c:	4013      	ands	r3, r2
 801524e:	2b02      	cmp	r3, #2
 8015250:	d123      	bne.n	801529a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	08da      	lsrs	r2, r3, #3
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	3208      	adds	r2, #8
 801525a:	0092      	lsls	r2, r2, #2
 801525c:	58d3      	ldr	r3, [r2, r3]
 801525e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	2207      	movs	r2, #7
 8015264:	4013      	ands	r3, r2
 8015266:	009b      	lsls	r3, r3, #2
 8015268:	220f      	movs	r2, #15
 801526a:	409a      	lsls	r2, r3
 801526c:	0013      	movs	r3, r2
 801526e:	43da      	mvns	r2, r3
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	4013      	ands	r3, r2
 8015274:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	691a      	ldr	r2, [r3, #16]
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	2107      	movs	r1, #7
 801527e:	400b      	ands	r3, r1
 8015280:	009b      	lsls	r3, r3, #2
 8015282:	409a      	lsls	r2, r3
 8015284:	0013      	movs	r3, r2
 8015286:	693a      	ldr	r2, [r7, #16]
 8015288:	4313      	orrs	r3, r2
 801528a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	08da      	lsrs	r2, r3, #3
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	3208      	adds	r2, #8
 8015294:	0092      	lsls	r2, r2, #2
 8015296:	6939      	ldr	r1, [r7, #16]
 8015298:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	005b      	lsls	r3, r3, #1
 80152a4:	2203      	movs	r2, #3
 80152a6:	409a      	lsls	r2, r3
 80152a8:	0013      	movs	r3, r2
 80152aa:	43da      	mvns	r2, r3
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	4013      	ands	r3, r2
 80152b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	685b      	ldr	r3, [r3, #4]
 80152b6:	2203      	movs	r2, #3
 80152b8:	401a      	ands	r2, r3
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	005b      	lsls	r3, r3, #1
 80152be:	409a      	lsls	r2, r3
 80152c0:	0013      	movs	r3, r2
 80152c2:	693a      	ldr	r2, [r7, #16]
 80152c4:	4313      	orrs	r3, r2
 80152c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	693a      	ldr	r2, [r7, #16]
 80152cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	685a      	ldr	r2, [r3, #4]
 80152d2:	23c0      	movs	r3, #192	@ 0xc0
 80152d4:	029b      	lsls	r3, r3, #10
 80152d6:	4013      	ands	r3, r2
 80152d8:	d100      	bne.n	80152dc <HAL_GPIO_Init+0x17c>
 80152da:	e0a0      	b.n	801541e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80152dc:	4b57      	ldr	r3, [pc, #348]	@ (801543c <HAL_GPIO_Init+0x2dc>)
 80152de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80152e0:	4b56      	ldr	r3, [pc, #344]	@ (801543c <HAL_GPIO_Init+0x2dc>)
 80152e2:	2101      	movs	r1, #1
 80152e4:	430a      	orrs	r2, r1
 80152e6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80152e8:	4a55      	ldr	r2, [pc, #340]	@ (8015440 <HAL_GPIO_Init+0x2e0>)
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	089b      	lsrs	r3, r3, #2
 80152ee:	3302      	adds	r3, #2
 80152f0:	009b      	lsls	r3, r3, #2
 80152f2:	589b      	ldr	r3, [r3, r2]
 80152f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	2203      	movs	r2, #3
 80152fa:	4013      	ands	r3, r2
 80152fc:	009b      	lsls	r3, r3, #2
 80152fe:	220f      	movs	r2, #15
 8015300:	409a      	lsls	r2, r3
 8015302:	0013      	movs	r3, r2
 8015304:	43da      	mvns	r2, r3
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	4013      	ands	r3, r2
 801530a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 801530c:	687a      	ldr	r2, [r7, #4]
 801530e:	23a0      	movs	r3, #160	@ 0xa0
 8015310:	05db      	lsls	r3, r3, #23
 8015312:	429a      	cmp	r2, r3
 8015314:	d01f      	beq.n	8015356 <HAL_GPIO_Init+0x1f6>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	4a4a      	ldr	r2, [pc, #296]	@ (8015444 <HAL_GPIO_Init+0x2e4>)
 801531a:	4293      	cmp	r3, r2
 801531c:	d019      	beq.n	8015352 <HAL_GPIO_Init+0x1f2>
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	4a49      	ldr	r2, [pc, #292]	@ (8015448 <HAL_GPIO_Init+0x2e8>)
 8015322:	4293      	cmp	r3, r2
 8015324:	d013      	beq.n	801534e <HAL_GPIO_Init+0x1ee>
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	4a48      	ldr	r2, [pc, #288]	@ (801544c <HAL_GPIO_Init+0x2ec>)
 801532a:	4293      	cmp	r3, r2
 801532c:	d00d      	beq.n	801534a <HAL_GPIO_Init+0x1ea>
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	4a47      	ldr	r2, [pc, #284]	@ (8015450 <HAL_GPIO_Init+0x2f0>)
 8015332:	4293      	cmp	r3, r2
 8015334:	d007      	beq.n	8015346 <HAL_GPIO_Init+0x1e6>
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	4a46      	ldr	r2, [pc, #280]	@ (8015454 <HAL_GPIO_Init+0x2f4>)
 801533a:	4293      	cmp	r3, r2
 801533c:	d101      	bne.n	8015342 <HAL_GPIO_Init+0x1e2>
 801533e:	2305      	movs	r3, #5
 8015340:	e00a      	b.n	8015358 <HAL_GPIO_Init+0x1f8>
 8015342:	2306      	movs	r3, #6
 8015344:	e008      	b.n	8015358 <HAL_GPIO_Init+0x1f8>
 8015346:	2304      	movs	r3, #4
 8015348:	e006      	b.n	8015358 <HAL_GPIO_Init+0x1f8>
 801534a:	2303      	movs	r3, #3
 801534c:	e004      	b.n	8015358 <HAL_GPIO_Init+0x1f8>
 801534e:	2302      	movs	r3, #2
 8015350:	e002      	b.n	8015358 <HAL_GPIO_Init+0x1f8>
 8015352:	2301      	movs	r3, #1
 8015354:	e000      	b.n	8015358 <HAL_GPIO_Init+0x1f8>
 8015356:	2300      	movs	r3, #0
 8015358:	697a      	ldr	r2, [r7, #20]
 801535a:	2103      	movs	r1, #3
 801535c:	400a      	ands	r2, r1
 801535e:	0092      	lsls	r2, r2, #2
 8015360:	4093      	lsls	r3, r2
 8015362:	693a      	ldr	r2, [r7, #16]
 8015364:	4313      	orrs	r3, r2
 8015366:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015368:	4935      	ldr	r1, [pc, #212]	@ (8015440 <HAL_GPIO_Init+0x2e0>)
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	089b      	lsrs	r3, r3, #2
 801536e:	3302      	adds	r3, #2
 8015370:	009b      	lsls	r3, r3, #2
 8015372:	693a      	ldr	r2, [r7, #16]
 8015374:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015376:	4b38      	ldr	r3, [pc, #224]	@ (8015458 <HAL_GPIO_Init+0x2f8>)
 8015378:	689b      	ldr	r3, [r3, #8]
 801537a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	43da      	mvns	r2, r3
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	4013      	ands	r3, r2
 8015384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	685a      	ldr	r2, [r3, #4]
 801538a:	2380      	movs	r3, #128	@ 0x80
 801538c:	035b      	lsls	r3, r3, #13
 801538e:	4013      	ands	r3, r2
 8015390:	d003      	beq.n	801539a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015392:	693a      	ldr	r2, [r7, #16]
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	4313      	orrs	r3, r2
 8015398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 801539a:	4b2f      	ldr	r3, [pc, #188]	@ (8015458 <HAL_GPIO_Init+0x2f8>)
 801539c:	693a      	ldr	r2, [r7, #16]
 801539e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80153a0:	4b2d      	ldr	r3, [pc, #180]	@ (8015458 <HAL_GPIO_Init+0x2f8>)
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	43da      	mvns	r2, r3
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	4013      	ands	r3, r2
 80153ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	685a      	ldr	r2, [r3, #4]
 80153b4:	2380      	movs	r3, #128	@ 0x80
 80153b6:	039b      	lsls	r3, r3, #14
 80153b8:	4013      	ands	r3, r2
 80153ba:	d003      	beq.n	80153c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80153bc:	693a      	ldr	r2, [r7, #16]
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	4313      	orrs	r3, r2
 80153c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80153c4:	4b24      	ldr	r3, [pc, #144]	@ (8015458 <HAL_GPIO_Init+0x2f8>)
 80153c6:	693a      	ldr	r2, [r7, #16]
 80153c8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80153ca:	4b23      	ldr	r3, [pc, #140]	@ (8015458 <HAL_GPIO_Init+0x2f8>)
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	43da      	mvns	r2, r3
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	4013      	ands	r3, r2
 80153d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	685a      	ldr	r2, [r3, #4]
 80153de:	2380      	movs	r3, #128	@ 0x80
 80153e0:	029b      	lsls	r3, r3, #10
 80153e2:	4013      	ands	r3, r2
 80153e4:	d003      	beq.n	80153ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80153e6:	693a      	ldr	r2, [r7, #16]
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	4313      	orrs	r3, r2
 80153ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80153ee:	4b1a      	ldr	r3, [pc, #104]	@ (8015458 <HAL_GPIO_Init+0x2f8>)
 80153f0:	693a      	ldr	r2, [r7, #16]
 80153f2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80153f4:	4b18      	ldr	r3, [pc, #96]	@ (8015458 <HAL_GPIO_Init+0x2f8>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	43da      	mvns	r2, r3
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	4013      	ands	r3, r2
 8015402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	685a      	ldr	r2, [r3, #4]
 8015408:	2380      	movs	r3, #128	@ 0x80
 801540a:	025b      	lsls	r3, r3, #9
 801540c:	4013      	ands	r3, r2
 801540e:	d003      	beq.n	8015418 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015410:	693a      	ldr	r2, [r7, #16]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	4313      	orrs	r3, r2
 8015416:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015418:	4b0f      	ldr	r3, [pc, #60]	@ (8015458 <HAL_GPIO_Init+0x2f8>)
 801541a:	693a      	ldr	r2, [r7, #16]
 801541c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	3301      	adds	r3, #1
 8015422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	681a      	ldr	r2, [r3, #0]
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	40da      	lsrs	r2, r3
 801542c:	1e13      	subs	r3, r2, #0
 801542e:	d000      	beq.n	8015432 <HAL_GPIO_Init+0x2d2>
 8015430:	e6a2      	b.n	8015178 <HAL_GPIO_Init+0x18>
  }
}
 8015432:	46c0      	nop			@ (mov r8, r8)
 8015434:	46c0      	nop			@ (mov r8, r8)
 8015436:	46bd      	mov	sp, r7
 8015438:	b006      	add	sp, #24
 801543a:	bd80      	pop	{r7, pc}
 801543c:	40021000 	.word	0x40021000
 8015440:	40010000 	.word	0x40010000
 8015444:	50000400 	.word	0x50000400
 8015448:	50000800 	.word	0x50000800
 801544c:	50000c00 	.word	0x50000c00
 8015450:	50001000 	.word	0x50001000
 8015454:	50001c00 	.word	0x50001c00
 8015458:	40010400 	.word	0x40010400

0801545c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	000a      	movs	r2, r1
 8015466:	1cbb      	adds	r3, r7, #2
 8015468:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	691b      	ldr	r3, [r3, #16]
 801546e:	1cba      	adds	r2, r7, #2
 8015470:	8812      	ldrh	r2, [r2, #0]
 8015472:	4013      	ands	r3, r2
 8015474:	d004      	beq.n	8015480 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015476:	230f      	movs	r3, #15
 8015478:	18fb      	adds	r3, r7, r3
 801547a:	2201      	movs	r2, #1
 801547c:	701a      	strb	r2, [r3, #0]
 801547e:	e003      	b.n	8015488 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015480:	230f      	movs	r3, #15
 8015482:	18fb      	adds	r3, r7, r3
 8015484:	2200      	movs	r2, #0
 8015486:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8015488:	230f      	movs	r3, #15
 801548a:	18fb      	adds	r3, r7, r3
 801548c:	781b      	ldrb	r3, [r3, #0]
}
 801548e:	0018      	movs	r0, r3
 8015490:	46bd      	mov	sp, r7
 8015492:	b004      	add	sp, #16
 8015494:	bd80      	pop	{r7, pc}

08015496 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015496:	b580      	push	{r7, lr}
 8015498:	b082      	sub	sp, #8
 801549a:	af00      	add	r7, sp, #0
 801549c:	6078      	str	r0, [r7, #4]
 801549e:	0008      	movs	r0, r1
 80154a0:	0011      	movs	r1, r2
 80154a2:	1cbb      	adds	r3, r7, #2
 80154a4:	1c02      	adds	r2, r0, #0
 80154a6:	801a      	strh	r2, [r3, #0]
 80154a8:	1c7b      	adds	r3, r7, #1
 80154aa:	1c0a      	adds	r2, r1, #0
 80154ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80154ae:	1c7b      	adds	r3, r7, #1
 80154b0:	781b      	ldrb	r3, [r3, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d004      	beq.n	80154c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80154b6:	1cbb      	adds	r3, r7, #2
 80154b8:	881a      	ldrh	r2, [r3, #0]
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80154be:	e003      	b.n	80154c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80154c0:	1cbb      	adds	r3, r7, #2
 80154c2:	881a      	ldrh	r2, [r3, #0]
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80154c8:	46c0      	nop			@ (mov r8, r8)
 80154ca:	46bd      	mov	sp, r7
 80154cc:	b002      	add	sp, #8
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	0002      	movs	r2, r0
 80154d8:	1dbb      	adds	r3, r7, #6
 80154da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80154dc:	4b09      	ldr	r3, [pc, #36]	@ (8015504 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80154de:	695b      	ldr	r3, [r3, #20]
 80154e0:	1dba      	adds	r2, r7, #6
 80154e2:	8812      	ldrh	r2, [r2, #0]
 80154e4:	4013      	ands	r3, r2
 80154e6:	d008      	beq.n	80154fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80154e8:	4b06      	ldr	r3, [pc, #24]	@ (8015504 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80154ea:	1dba      	adds	r2, r7, #6
 80154ec:	8812      	ldrh	r2, [r2, #0]
 80154ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80154f0:	1dbb      	adds	r3, r7, #6
 80154f2:	881b      	ldrh	r3, [r3, #0]
 80154f4:	0018      	movs	r0, r3
 80154f6:	f7f7 fb09 	bl	800cb0c <HAL_GPIO_EXTI_Callback>
  }
}
 80154fa:	46c0      	nop			@ (mov r8, r8)
 80154fc:	46bd      	mov	sp, r7
 80154fe:	b002      	add	sp, #8
 8015500:	bd80      	pop	{r7, pc}
 8015502:	46c0      	nop			@ (mov r8, r8)
 8015504:	40010400 	.word	0x40010400

08015508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d101      	bne.n	801551a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015516:	2301      	movs	r3, #1
 8015518:	e082      	b.n	8015620 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2241      	movs	r2, #65	@ 0x41
 801551e:	5c9b      	ldrb	r3, [r3, r2]
 8015520:	b2db      	uxtb	r3, r3
 8015522:	2b00      	cmp	r3, #0
 8015524:	d107      	bne.n	8015536 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2240      	movs	r2, #64	@ 0x40
 801552a:	2100      	movs	r1, #0
 801552c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	0018      	movs	r0, r3
 8015532:	f7f6 fd75 	bl	800c020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2241      	movs	r2, #65	@ 0x41
 801553a:	2124      	movs	r1, #36	@ 0x24
 801553c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	681a      	ldr	r2, [r3, #0]
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	2101      	movs	r1, #1
 801554a:	438a      	bics	r2, r1
 801554c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	685a      	ldr	r2, [r3, #4]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	4934      	ldr	r1, [pc, #208]	@ (8015628 <HAL_I2C_Init+0x120>)
 8015558:	400a      	ands	r2, r1
 801555a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	689a      	ldr	r2, [r3, #8]
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	4931      	ldr	r1, [pc, #196]	@ (801562c <HAL_I2C_Init+0x124>)
 8015568:	400a      	ands	r2, r1
 801556a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	68db      	ldr	r3, [r3, #12]
 8015570:	2b01      	cmp	r3, #1
 8015572:	d108      	bne.n	8015586 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	689a      	ldr	r2, [r3, #8]
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	2180      	movs	r1, #128	@ 0x80
 801557e:	0209      	lsls	r1, r1, #8
 8015580:	430a      	orrs	r2, r1
 8015582:	609a      	str	r2, [r3, #8]
 8015584:	e007      	b.n	8015596 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	689a      	ldr	r2, [r3, #8]
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2184      	movs	r1, #132	@ 0x84
 8015590:	0209      	lsls	r1, r1, #8
 8015592:	430a      	orrs	r2, r1
 8015594:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	2b02      	cmp	r3, #2
 801559c:	d104      	bne.n	80155a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	2280      	movs	r2, #128	@ 0x80
 80155a4:	0112      	lsls	r2, r2, #4
 80155a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	685a      	ldr	r2, [r3, #4]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	491f      	ldr	r1, [pc, #124]	@ (8015630 <HAL_I2C_Init+0x128>)
 80155b4:	430a      	orrs	r2, r1
 80155b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	68da      	ldr	r2, [r3, #12]
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	491a      	ldr	r1, [pc, #104]	@ (801562c <HAL_I2C_Init+0x124>)
 80155c4:	400a      	ands	r2, r1
 80155c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	691a      	ldr	r2, [r3, #16]
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	695b      	ldr	r3, [r3, #20]
 80155d0:	431a      	orrs	r2, r3
 80155d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	699b      	ldr	r3, [r3, #24]
 80155d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	430a      	orrs	r2, r1
 80155e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	69d9      	ldr	r1, [r3, #28]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6a1a      	ldr	r2, [r3, #32]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	430a      	orrs	r2, r1
 80155f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	681a      	ldr	r2, [r3, #0]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	2101      	movs	r1, #1
 80155fe:	430a      	orrs	r2, r1
 8015600:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	2200      	movs	r2, #0
 8015606:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2241      	movs	r2, #65	@ 0x41
 801560c:	2120      	movs	r1, #32
 801560e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	2200      	movs	r2, #0
 8015614:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2242      	movs	r2, #66	@ 0x42
 801561a:	2100      	movs	r1, #0
 801561c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801561e:	2300      	movs	r3, #0
}
 8015620:	0018      	movs	r0, r3
 8015622:	46bd      	mov	sp, r7
 8015624:	b002      	add	sp, #8
 8015626:	bd80      	pop	{r7, pc}
 8015628:	f0ffffff 	.word	0xf0ffffff
 801562c:	ffff7fff 	.word	0xffff7fff
 8015630:	02008000 	.word	0x02008000

08015634 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015634:	b590      	push	{r4, r7, lr}
 8015636:	b089      	sub	sp, #36	@ 0x24
 8015638:	af02      	add	r7, sp, #8
 801563a:	60f8      	str	r0, [r7, #12]
 801563c:	0008      	movs	r0, r1
 801563e:	607a      	str	r2, [r7, #4]
 8015640:	0019      	movs	r1, r3
 8015642:	230a      	movs	r3, #10
 8015644:	18fb      	adds	r3, r7, r3
 8015646:	1c02      	adds	r2, r0, #0
 8015648:	801a      	strh	r2, [r3, #0]
 801564a:	2308      	movs	r3, #8
 801564c:	18fb      	adds	r3, r7, r3
 801564e:	1c0a      	adds	r2, r1, #0
 8015650:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2241      	movs	r2, #65	@ 0x41
 8015656:	5c9b      	ldrb	r3, [r3, r2]
 8015658:	b2db      	uxtb	r3, r3
 801565a:	2b20      	cmp	r3, #32
 801565c:	d000      	beq.n	8015660 <HAL_I2C_Master_Transmit+0x2c>
 801565e:	e0e7      	b.n	8015830 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	2240      	movs	r2, #64	@ 0x40
 8015664:	5c9b      	ldrb	r3, [r3, r2]
 8015666:	2b01      	cmp	r3, #1
 8015668:	d101      	bne.n	801566e <HAL_I2C_Master_Transmit+0x3a>
 801566a:	2302      	movs	r3, #2
 801566c:	e0e1      	b.n	8015832 <HAL_I2C_Master_Transmit+0x1fe>
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	2240      	movs	r2, #64	@ 0x40
 8015672:	2101      	movs	r1, #1
 8015674:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015676:	f7fe fc7d 	bl	8013f74 <HAL_GetTick>
 801567a:	0003      	movs	r3, r0
 801567c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801567e:	2380      	movs	r3, #128	@ 0x80
 8015680:	0219      	lsls	r1, r3, #8
 8015682:	68f8      	ldr	r0, [r7, #12]
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	2319      	movs	r3, #25
 801568a:	2201      	movs	r2, #1
 801568c:	f002 faa4 	bl	8017bd8 <I2C_WaitOnFlagUntilTimeout>
 8015690:	1e03      	subs	r3, r0, #0
 8015692:	d001      	beq.n	8015698 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8015694:	2301      	movs	r3, #1
 8015696:	e0cc      	b.n	8015832 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2241      	movs	r2, #65	@ 0x41
 801569c:	2121      	movs	r1, #33	@ 0x21
 801569e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2242      	movs	r2, #66	@ 0x42
 80156a4:	2110      	movs	r1, #16
 80156a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	2200      	movs	r2, #0
 80156ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	2208      	movs	r2, #8
 80156b8:	18ba      	adds	r2, r7, r2
 80156ba:	8812      	ldrh	r2, [r2, #0]
 80156bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	2200      	movs	r2, #0
 80156c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	2bff      	cmp	r3, #255	@ 0xff
 80156cc:	d911      	bls.n	80156f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	22ff      	movs	r2, #255	@ 0xff
 80156d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156d8:	b2da      	uxtb	r2, r3
 80156da:	2380      	movs	r3, #128	@ 0x80
 80156dc:	045c      	lsls	r4, r3, #17
 80156de:	230a      	movs	r3, #10
 80156e0:	18fb      	adds	r3, r7, r3
 80156e2:	8819      	ldrh	r1, [r3, #0]
 80156e4:	68f8      	ldr	r0, [r7, #12]
 80156e6:	4b55      	ldr	r3, [pc, #340]	@ (801583c <HAL_I2C_Master_Transmit+0x208>)
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	0023      	movs	r3, r4
 80156ec:	f002 fcc6 	bl	801807c <I2C_TransferConfig>
 80156f0:	e075      	b.n	80157de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156f6:	b29a      	uxth	r2, r3
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015700:	b2da      	uxtb	r2, r3
 8015702:	2380      	movs	r3, #128	@ 0x80
 8015704:	049c      	lsls	r4, r3, #18
 8015706:	230a      	movs	r3, #10
 8015708:	18fb      	adds	r3, r7, r3
 801570a:	8819      	ldrh	r1, [r3, #0]
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	4b4b      	ldr	r3, [pc, #300]	@ (801583c <HAL_I2C_Master_Transmit+0x208>)
 8015710:	9300      	str	r3, [sp, #0]
 8015712:	0023      	movs	r3, r4
 8015714:	f002 fcb2 	bl	801807c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015718:	e061      	b.n	80157de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801571a:	697a      	ldr	r2, [r7, #20]
 801571c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	0018      	movs	r0, r3
 8015722:	f002 faa7 	bl	8017c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8015726:	1e03      	subs	r3, r0, #0
 8015728:	d001      	beq.n	801572e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801572a:	2301      	movs	r3, #1
 801572c:	e081      	b.n	8015832 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015732:	781a      	ldrb	r2, [r3, #0]
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801573e:	1c5a      	adds	r2, r3, #1
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015748:	b29b      	uxth	r3, r3
 801574a:	3b01      	subs	r3, #1
 801574c:	b29a      	uxth	r2, r3
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015756:	3b01      	subs	r3, #1
 8015758:	b29a      	uxth	r2, r3
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015762:	b29b      	uxth	r3, r3
 8015764:	2b00      	cmp	r3, #0
 8015766:	d03a      	beq.n	80157de <HAL_I2C_Master_Transmit+0x1aa>
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801576c:	2b00      	cmp	r3, #0
 801576e:	d136      	bne.n	80157de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015772:	68f8      	ldr	r0, [r7, #12]
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	9300      	str	r3, [sp, #0]
 8015778:	0013      	movs	r3, r2
 801577a:	2200      	movs	r2, #0
 801577c:	2180      	movs	r1, #128	@ 0x80
 801577e:	f002 fa2b 	bl	8017bd8 <I2C_WaitOnFlagUntilTimeout>
 8015782:	1e03      	subs	r3, r0, #0
 8015784:	d001      	beq.n	801578a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8015786:	2301      	movs	r3, #1
 8015788:	e053      	b.n	8015832 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801578e:	b29b      	uxth	r3, r3
 8015790:	2bff      	cmp	r3, #255	@ 0xff
 8015792:	d911      	bls.n	80157b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	22ff      	movs	r2, #255	@ 0xff
 8015798:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801579e:	b2da      	uxtb	r2, r3
 80157a0:	2380      	movs	r3, #128	@ 0x80
 80157a2:	045c      	lsls	r4, r3, #17
 80157a4:	230a      	movs	r3, #10
 80157a6:	18fb      	adds	r3, r7, r3
 80157a8:	8819      	ldrh	r1, [r3, #0]
 80157aa:	68f8      	ldr	r0, [r7, #12]
 80157ac:	2300      	movs	r3, #0
 80157ae:	9300      	str	r3, [sp, #0]
 80157b0:	0023      	movs	r3, r4
 80157b2:	f002 fc63 	bl	801807c <I2C_TransferConfig>
 80157b6:	e012      	b.n	80157de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157bc:	b29a      	uxth	r2, r3
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157c6:	b2da      	uxtb	r2, r3
 80157c8:	2380      	movs	r3, #128	@ 0x80
 80157ca:	049c      	lsls	r4, r3, #18
 80157cc:	230a      	movs	r3, #10
 80157ce:	18fb      	adds	r3, r7, r3
 80157d0:	8819      	ldrh	r1, [r3, #0]
 80157d2:	68f8      	ldr	r0, [r7, #12]
 80157d4:	2300      	movs	r3, #0
 80157d6:	9300      	str	r3, [sp, #0]
 80157d8:	0023      	movs	r3, r4
 80157da:	f002 fc4f 	bl	801807c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d198      	bne.n	801571a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80157e8:	697a      	ldr	r2, [r7, #20]
 80157ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	0018      	movs	r0, r3
 80157f0:	f002 fa86 	bl	8017d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80157f4:	1e03      	subs	r3, r0, #0
 80157f6:	d001      	beq.n	80157fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80157f8:	2301      	movs	r3, #1
 80157fa:	e01a      	b.n	8015832 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	2220      	movs	r2, #32
 8015802:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	685a      	ldr	r2, [r3, #4]
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	490c      	ldr	r1, [pc, #48]	@ (8015840 <HAL_I2C_Master_Transmit+0x20c>)
 8015810:	400a      	ands	r2, r1
 8015812:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	2241      	movs	r2, #65	@ 0x41
 8015818:	2120      	movs	r1, #32
 801581a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	2242      	movs	r2, #66	@ 0x42
 8015820:	2100      	movs	r1, #0
 8015822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	2240      	movs	r2, #64	@ 0x40
 8015828:	2100      	movs	r1, #0
 801582a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801582c:	2300      	movs	r3, #0
 801582e:	e000      	b.n	8015832 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015830:	2302      	movs	r3, #2
  }
}
 8015832:	0018      	movs	r0, r3
 8015834:	46bd      	mov	sp, r7
 8015836:	b007      	add	sp, #28
 8015838:	bd90      	pop	{r4, r7, pc}
 801583a:	46c0      	nop			@ (mov r8, r8)
 801583c:	80002000 	.word	0x80002000
 8015840:	fe00e800 	.word	0xfe00e800

08015844 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015844:	b590      	push	{r4, r7, lr}
 8015846:	b089      	sub	sp, #36	@ 0x24
 8015848:	af02      	add	r7, sp, #8
 801584a:	60f8      	str	r0, [r7, #12]
 801584c:	0008      	movs	r0, r1
 801584e:	607a      	str	r2, [r7, #4]
 8015850:	0019      	movs	r1, r3
 8015852:	230a      	movs	r3, #10
 8015854:	18fb      	adds	r3, r7, r3
 8015856:	1c02      	adds	r2, r0, #0
 8015858:	801a      	strh	r2, [r3, #0]
 801585a:	2308      	movs	r3, #8
 801585c:	18fb      	adds	r3, r7, r3
 801585e:	1c0a      	adds	r2, r1, #0
 8015860:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	2241      	movs	r2, #65	@ 0x41
 8015866:	5c9b      	ldrb	r3, [r3, r2]
 8015868:	b2db      	uxtb	r3, r3
 801586a:	2b20      	cmp	r3, #32
 801586c:	d000      	beq.n	8015870 <HAL_I2C_Master_Receive+0x2c>
 801586e:	e0e8      	b.n	8015a42 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	2240      	movs	r2, #64	@ 0x40
 8015874:	5c9b      	ldrb	r3, [r3, r2]
 8015876:	2b01      	cmp	r3, #1
 8015878:	d101      	bne.n	801587e <HAL_I2C_Master_Receive+0x3a>
 801587a:	2302      	movs	r3, #2
 801587c:	e0e2      	b.n	8015a44 <HAL_I2C_Master_Receive+0x200>
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2240      	movs	r2, #64	@ 0x40
 8015882:	2101      	movs	r1, #1
 8015884:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015886:	f7fe fb75 	bl	8013f74 <HAL_GetTick>
 801588a:	0003      	movs	r3, r0
 801588c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801588e:	2380      	movs	r3, #128	@ 0x80
 8015890:	0219      	lsls	r1, r3, #8
 8015892:	68f8      	ldr	r0, [r7, #12]
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	9300      	str	r3, [sp, #0]
 8015898:	2319      	movs	r3, #25
 801589a:	2201      	movs	r2, #1
 801589c:	f002 f99c 	bl	8017bd8 <I2C_WaitOnFlagUntilTimeout>
 80158a0:	1e03      	subs	r3, r0, #0
 80158a2:	d001      	beq.n	80158a8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80158a4:	2301      	movs	r3, #1
 80158a6:	e0cd      	b.n	8015a44 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2241      	movs	r2, #65	@ 0x41
 80158ac:	2122      	movs	r1, #34	@ 0x22
 80158ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2242      	movs	r2, #66	@ 0x42
 80158b4:	2110      	movs	r1, #16
 80158b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2200      	movs	r2, #0
 80158bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	687a      	ldr	r2, [r7, #4]
 80158c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	2208      	movs	r2, #8
 80158c8:	18ba      	adds	r2, r7, r2
 80158ca:	8812      	ldrh	r2, [r2, #0]
 80158cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2200      	movs	r2, #0
 80158d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80158d8:	b29b      	uxth	r3, r3
 80158da:	2bff      	cmp	r3, #255	@ 0xff
 80158dc:	d911      	bls.n	8015902 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	22ff      	movs	r2, #255	@ 0xff
 80158e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158e8:	b2da      	uxtb	r2, r3
 80158ea:	2380      	movs	r3, #128	@ 0x80
 80158ec:	045c      	lsls	r4, r3, #17
 80158ee:	230a      	movs	r3, #10
 80158f0:	18fb      	adds	r3, r7, r3
 80158f2:	8819      	ldrh	r1, [r3, #0]
 80158f4:	68f8      	ldr	r0, [r7, #12]
 80158f6:	4b55      	ldr	r3, [pc, #340]	@ (8015a4c <HAL_I2C_Master_Receive+0x208>)
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	0023      	movs	r3, r4
 80158fc:	f002 fbbe 	bl	801807c <I2C_TransferConfig>
 8015900:	e076      	b.n	80159f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015906:	b29a      	uxth	r2, r3
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015910:	b2da      	uxtb	r2, r3
 8015912:	2380      	movs	r3, #128	@ 0x80
 8015914:	049c      	lsls	r4, r3, #18
 8015916:	230a      	movs	r3, #10
 8015918:	18fb      	adds	r3, r7, r3
 801591a:	8819      	ldrh	r1, [r3, #0]
 801591c:	68f8      	ldr	r0, [r7, #12]
 801591e:	4b4b      	ldr	r3, [pc, #300]	@ (8015a4c <HAL_I2C_Master_Receive+0x208>)
 8015920:	9300      	str	r3, [sp, #0]
 8015922:	0023      	movs	r3, r4
 8015924:	f002 fbaa 	bl	801807c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015928:	e062      	b.n	80159f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801592a:	697a      	ldr	r2, [r7, #20]
 801592c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	0018      	movs	r0, r3
 8015932:	f002 fa29 	bl	8017d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015936:	1e03      	subs	r3, r0, #0
 8015938:	d001      	beq.n	801593e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801593a:	2301      	movs	r3, #1
 801593c:	e082      	b.n	8015a44 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015948:	b2d2      	uxtb	r2, r2
 801594a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015950:	1c5a      	adds	r2, r3, #1
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801595a:	3b01      	subs	r3, #1
 801595c:	b29a      	uxth	r2, r3
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015966:	b29b      	uxth	r3, r3
 8015968:	3b01      	subs	r3, #1
 801596a:	b29a      	uxth	r2, r3
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015974:	b29b      	uxth	r3, r3
 8015976:	2b00      	cmp	r3, #0
 8015978:	d03a      	beq.n	80159f0 <HAL_I2C_Master_Receive+0x1ac>
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801597e:	2b00      	cmp	r3, #0
 8015980:	d136      	bne.n	80159f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015984:	68f8      	ldr	r0, [r7, #12]
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	9300      	str	r3, [sp, #0]
 801598a:	0013      	movs	r3, r2
 801598c:	2200      	movs	r2, #0
 801598e:	2180      	movs	r1, #128	@ 0x80
 8015990:	f002 f922 	bl	8017bd8 <I2C_WaitOnFlagUntilTimeout>
 8015994:	1e03      	subs	r3, r0, #0
 8015996:	d001      	beq.n	801599c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8015998:	2301      	movs	r3, #1
 801599a:	e053      	b.n	8015a44 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	2bff      	cmp	r3, #255	@ 0xff
 80159a4:	d911      	bls.n	80159ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	22ff      	movs	r2, #255	@ 0xff
 80159aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159b0:	b2da      	uxtb	r2, r3
 80159b2:	2380      	movs	r3, #128	@ 0x80
 80159b4:	045c      	lsls	r4, r3, #17
 80159b6:	230a      	movs	r3, #10
 80159b8:	18fb      	adds	r3, r7, r3
 80159ba:	8819      	ldrh	r1, [r3, #0]
 80159bc:	68f8      	ldr	r0, [r7, #12]
 80159be:	2300      	movs	r3, #0
 80159c0:	9300      	str	r3, [sp, #0]
 80159c2:	0023      	movs	r3, r4
 80159c4:	f002 fb5a 	bl	801807c <I2C_TransferConfig>
 80159c8:	e012      	b.n	80159f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80159ce:	b29a      	uxth	r2, r3
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159d8:	b2da      	uxtb	r2, r3
 80159da:	2380      	movs	r3, #128	@ 0x80
 80159dc:	049c      	lsls	r4, r3, #18
 80159de:	230a      	movs	r3, #10
 80159e0:	18fb      	adds	r3, r7, r3
 80159e2:	8819      	ldrh	r1, [r3, #0]
 80159e4:	68f8      	ldr	r0, [r7, #12]
 80159e6:	2300      	movs	r3, #0
 80159e8:	9300      	str	r3, [sp, #0]
 80159ea:	0023      	movs	r3, r4
 80159ec:	f002 fb46 	bl	801807c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d197      	bne.n	801592a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80159fa:	697a      	ldr	r2, [r7, #20]
 80159fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	0018      	movs	r0, r3
 8015a02:	f002 f97d 	bl	8017d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015a06:	1e03      	subs	r3, r0, #0
 8015a08:	d001      	beq.n	8015a0e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	e01a      	b.n	8015a44 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	2220      	movs	r2, #32
 8015a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	685a      	ldr	r2, [r3, #4]
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	490b      	ldr	r1, [pc, #44]	@ (8015a50 <HAL_I2C_Master_Receive+0x20c>)
 8015a22:	400a      	ands	r2, r1
 8015a24:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	2241      	movs	r2, #65	@ 0x41
 8015a2a:	2120      	movs	r1, #32
 8015a2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	2242      	movs	r2, #66	@ 0x42
 8015a32:	2100      	movs	r1, #0
 8015a34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2240      	movs	r2, #64	@ 0x40
 8015a3a:	2100      	movs	r1, #0
 8015a3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	e000      	b.n	8015a44 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8015a42:	2302      	movs	r3, #2
  }
}
 8015a44:	0018      	movs	r0, r3
 8015a46:	46bd      	mov	sp, r7
 8015a48:	b007      	add	sp, #28
 8015a4a:	bd90      	pop	{r4, r7, pc}
 8015a4c:	80002400 	.word	0x80002400
 8015a50:	fe00e800 	.word	0xfe00e800

08015a54 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8015a54:	b5b0      	push	{r4, r5, r7, lr}
 8015a56:	b088      	sub	sp, #32
 8015a58:	af02      	add	r7, sp, #8
 8015a5a:	60f8      	str	r0, [r7, #12]
 8015a5c:	0008      	movs	r0, r1
 8015a5e:	607a      	str	r2, [r7, #4]
 8015a60:	0019      	movs	r1, r3
 8015a62:	230a      	movs	r3, #10
 8015a64:	18fb      	adds	r3, r7, r3
 8015a66:	1c02      	adds	r2, r0, #0
 8015a68:	801a      	strh	r2, [r3, #0]
 8015a6a:	2308      	movs	r3, #8
 8015a6c:	18fb      	adds	r3, r7, r3
 8015a6e:	1c0a      	adds	r2, r1, #0
 8015a70:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2241      	movs	r2, #65	@ 0x41
 8015a76:	5c9b      	ldrb	r3, [r3, r2]
 8015a78:	b2db      	uxtb	r3, r3
 8015a7a:	2b20      	cmp	r3, #32
 8015a7c:	d000      	beq.n	8015a80 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8015a7e:	e0dd      	b.n	8015c3c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	699a      	ldr	r2, [r3, #24]
 8015a86:	2380      	movs	r3, #128	@ 0x80
 8015a88:	021b      	lsls	r3, r3, #8
 8015a8a:	401a      	ands	r2, r3
 8015a8c:	2380      	movs	r3, #128	@ 0x80
 8015a8e:	021b      	lsls	r3, r3, #8
 8015a90:	429a      	cmp	r2, r3
 8015a92:	d101      	bne.n	8015a98 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8015a94:	2302      	movs	r3, #2
 8015a96:	e0d2      	b.n	8015c3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	2240      	movs	r2, #64	@ 0x40
 8015a9c:	5c9b      	ldrb	r3, [r3, r2]
 8015a9e:	2b01      	cmp	r3, #1
 8015aa0:	d101      	bne.n	8015aa6 <HAL_I2C_Master_Transmit_DMA+0x52>
 8015aa2:	2302      	movs	r3, #2
 8015aa4:	e0cb      	b.n	8015c3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	2240      	movs	r2, #64	@ 0x40
 8015aaa:	2101      	movs	r1, #1
 8015aac:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	2241      	movs	r2, #65	@ 0x41
 8015ab2:	2121      	movs	r1, #33	@ 0x21
 8015ab4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2242      	movs	r2, #66	@ 0x42
 8015aba:	2110      	movs	r1, #16
 8015abc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	687a      	ldr	r2, [r7, #4]
 8015ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	2208      	movs	r2, #8
 8015ace:	18ba      	adds	r2, r7, r2
 8015ad0:	8812      	ldrh	r2, [r2, #0]
 8015ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8015c48 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8015ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	4a5b      	ldr	r2, [pc, #364]	@ (8015c4c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8015ade:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ae4:	b29b      	uxth	r3, r3
 8015ae6:	2bff      	cmp	r3, #255	@ 0xff
 8015ae8:	d906      	bls.n	8015af8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	22ff      	movs	r2, #255	@ 0xff
 8015aee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8015af0:	2380      	movs	r3, #128	@ 0x80
 8015af2:	045b      	lsls	r3, r3, #17
 8015af4:	617b      	str	r3, [r7, #20]
 8015af6:	e007      	b.n	8015b08 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015afc:	b29a      	uxth	r2, r3
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8015b02:	2380      	movs	r3, #128	@ 0x80
 8015b04:	049b      	lsls	r3, r3, #18
 8015b06:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d100      	bne.n	8015b12 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8015b10:	e078      	b.n	8015c04 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d023      	beq.n	8015b62 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b1e:	4a4c      	ldr	r2, [pc, #304]	@ (8015c50 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8015b20:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b26:	4a4b      	ldr	r2, [pc, #300]	@ (8015c54 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8015b28:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b2e:	2200      	movs	r2, #0
 8015b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b36:	2200      	movs	r2, #0
 8015b38:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015b3e:	6879      	ldr	r1, [r7, #4]
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	3328      	adds	r3, #40	@ 0x28
 8015b46:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015b4c:	2513      	movs	r5, #19
 8015b4e:	197c      	adds	r4, r7, r5
 8015b50:	f7fe ff62 	bl	8014a18 <HAL_DMA_Start_IT>
 8015b54:	0003      	movs	r3, r0
 8015b56:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8015b58:	197b      	adds	r3, r7, r5
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d13d      	bne.n	8015bdc <HAL_I2C_Master_Transmit_DMA+0x188>
 8015b60:	e013      	b.n	8015b8a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	2241      	movs	r2, #65	@ 0x41
 8015b66:	2120      	movs	r1, #32
 8015b68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	2242      	movs	r2, #66	@ 0x42
 8015b6e:	2100      	movs	r1, #0
 8015b70:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015b76:	2280      	movs	r2, #128	@ 0x80
 8015b78:	431a      	orrs	r2, r3
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	2240      	movs	r2, #64	@ 0x40
 8015b82:	2100      	movs	r1, #0
 8015b84:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8015b86:	2301      	movs	r3, #1
 8015b88:	e059      	b.n	8015c3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b8e:	b2da      	uxtb	r2, r3
 8015b90:	697c      	ldr	r4, [r7, #20]
 8015b92:	230a      	movs	r3, #10
 8015b94:	18fb      	adds	r3, r7, r3
 8015b96:	8819      	ldrh	r1, [r3, #0]
 8015b98:	68f8      	ldr	r0, [r7, #12]
 8015b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8015c58 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8015b9c:	9300      	str	r3, [sp, #0]
 8015b9e:	0023      	movs	r3, r4
 8015ba0:	f002 fa6c 	bl	801807c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ba8:	b29a      	uxth	r2, r3
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015bae:	1ad3      	subs	r3, r2, r3
 8015bb0:	b29a      	uxth	r2, r3
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	2240      	movs	r2, #64	@ 0x40
 8015bba:	2100      	movs	r1, #0
 8015bbc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	2110      	movs	r1, #16
 8015bc2:	0018      	movs	r0, r3
 8015bc4:	f002 fa94 	bl	80180f0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	681a      	ldr	r2, [r3, #0]
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	2180      	movs	r1, #128	@ 0x80
 8015bd4:	01c9      	lsls	r1, r1, #7
 8015bd6:	430a      	orrs	r2, r1
 8015bd8:	601a      	str	r2, [r3, #0]
 8015bda:	e02d      	b.n	8015c38 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	2241      	movs	r2, #65	@ 0x41
 8015be0:	2120      	movs	r1, #32
 8015be2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	2242      	movs	r2, #66	@ 0x42
 8015be8:	2100      	movs	r1, #0
 8015bea:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015bf0:	2210      	movs	r2, #16
 8015bf2:	431a      	orrs	r2, r3
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	2240      	movs	r2, #64	@ 0x40
 8015bfc:	2100      	movs	r1, #0
 8015bfe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015c00:	2301      	movs	r3, #1
 8015c02:	e01c      	b.n	8015c3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	4a15      	ldr	r2, [pc, #84]	@ (8015c5c <HAL_I2C_Master_Transmit_DMA+0x208>)
 8015c08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c0e:	b2da      	uxtb	r2, r3
 8015c10:	2380      	movs	r3, #128	@ 0x80
 8015c12:	049c      	lsls	r4, r3, #18
 8015c14:	230a      	movs	r3, #10
 8015c16:	18fb      	adds	r3, r7, r3
 8015c18:	8819      	ldrh	r1, [r3, #0]
 8015c1a:	68f8      	ldr	r0, [r7, #12]
 8015c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8015c58 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8015c1e:	9300      	str	r3, [sp, #0]
 8015c20:	0023      	movs	r3, r4
 8015c22:	f002 fa2b 	bl	801807c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	2240      	movs	r2, #64	@ 0x40
 8015c2a:	2100      	movs	r1, #0
 8015c2c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	2101      	movs	r1, #1
 8015c32:	0018      	movs	r0, r3
 8015c34:	f002 fa5c 	bl	80180f0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	e000      	b.n	8015c3e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015c3c:	2302      	movs	r3, #2
  }
}
 8015c3e:	0018      	movs	r0, r3
 8015c40:	46bd      	mov	sp, r7
 8015c42:	b006      	add	sp, #24
 8015c44:	bdb0      	pop	{r4, r5, r7, pc}
 8015c46:	46c0      	nop			@ (mov r8, r8)
 8015c48:	ffff0000 	.word	0xffff0000
 8015c4c:	0801692d 	.word	0x0801692d
 8015c50:	08017a29 	.word	0x08017a29
 8015c54:	08017b69 	.word	0x08017b69
 8015c58:	80002000 	.word	0x80002000
 8015c5c:	08016481 	.word	0x08016481

08015c60 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8015c60:	b5b0      	push	{r4, r5, r7, lr}
 8015c62:	b088      	sub	sp, #32
 8015c64:	af02      	add	r7, sp, #8
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	0008      	movs	r0, r1
 8015c6a:	607a      	str	r2, [r7, #4]
 8015c6c:	0019      	movs	r1, r3
 8015c6e:	230a      	movs	r3, #10
 8015c70:	18fb      	adds	r3, r7, r3
 8015c72:	1c02      	adds	r2, r0, #0
 8015c74:	801a      	strh	r2, [r3, #0]
 8015c76:	2308      	movs	r3, #8
 8015c78:	18fb      	adds	r3, r7, r3
 8015c7a:	1c0a      	adds	r2, r1, #0
 8015c7c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	2241      	movs	r2, #65	@ 0x41
 8015c82:	5c9b      	ldrb	r3, [r3, r2]
 8015c84:	b2db      	uxtb	r3, r3
 8015c86:	2b20      	cmp	r3, #32
 8015c88:	d000      	beq.n	8015c8c <HAL_I2C_Master_Receive_DMA+0x2c>
 8015c8a:	e0dd      	b.n	8015e48 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	699a      	ldr	r2, [r3, #24]
 8015c92:	2380      	movs	r3, #128	@ 0x80
 8015c94:	021b      	lsls	r3, r3, #8
 8015c96:	401a      	ands	r2, r3
 8015c98:	2380      	movs	r3, #128	@ 0x80
 8015c9a:	021b      	lsls	r3, r3, #8
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	d101      	bne.n	8015ca4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8015ca0:	2302      	movs	r3, #2
 8015ca2:	e0d2      	b.n	8015e4a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2240      	movs	r2, #64	@ 0x40
 8015ca8:	5c9b      	ldrb	r3, [r3, r2]
 8015caa:	2b01      	cmp	r3, #1
 8015cac:	d101      	bne.n	8015cb2 <HAL_I2C_Master_Receive_DMA+0x52>
 8015cae:	2302      	movs	r3, #2
 8015cb0:	e0cb      	b.n	8015e4a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	2240      	movs	r2, #64	@ 0x40
 8015cb6:	2101      	movs	r1, #1
 8015cb8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	2241      	movs	r2, #65	@ 0x41
 8015cbe:	2122      	movs	r1, #34	@ 0x22
 8015cc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	2242      	movs	r2, #66	@ 0x42
 8015cc6:	2110      	movs	r1, #16
 8015cc8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	2200      	movs	r2, #0
 8015cce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	687a      	ldr	r2, [r7, #4]
 8015cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	2208      	movs	r2, #8
 8015cda:	18ba      	adds	r2, r7, r2
 8015cdc:	8812      	ldrh	r2, [r2, #0]
 8015cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8015e54 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8015ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	4a5b      	ldr	r2, [pc, #364]	@ (8015e58 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8015cea:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	2bff      	cmp	r3, #255	@ 0xff
 8015cf4:	d906      	bls.n	8015d04 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	22ff      	movs	r2, #255	@ 0xff
 8015cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8015cfc:	2380      	movs	r3, #128	@ 0x80
 8015cfe:	045b      	lsls	r3, r3, #17
 8015d00:	617b      	str	r3, [r7, #20]
 8015d02:	e007      	b.n	8015d14 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d08:	b29a      	uxth	r2, r3
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8015d0e:	2380      	movs	r3, #128	@ 0x80
 8015d10:	049b      	lsls	r3, r3, #18
 8015d12:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d100      	bne.n	8015d1e <HAL_I2C_Master_Receive_DMA+0xbe>
 8015d1c:	e078      	b.n	8015e10 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d023      	beq.n	8015d6e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8015e5c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8015d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d32:	4a4b      	ldr	r2, [pc, #300]	@ (8015e60 <HAL_I2C_Master_Receive_DMA+0x200>)
 8015d34:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d42:	2200      	movs	r2, #0
 8015d44:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	3324      	adds	r3, #36	@ 0x24
 8015d50:	0019      	movs	r1, r3
 8015d52:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8015d58:	2513      	movs	r5, #19
 8015d5a:	197c      	adds	r4, r7, r5
 8015d5c:	f7fe fe5c 	bl	8014a18 <HAL_DMA_Start_IT>
 8015d60:	0003      	movs	r3, r0
 8015d62:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8015d64:	197b      	adds	r3, r7, r5
 8015d66:	781b      	ldrb	r3, [r3, #0]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d13d      	bne.n	8015de8 <HAL_I2C_Master_Receive_DMA+0x188>
 8015d6c:	e013      	b.n	8015d96 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	2241      	movs	r2, #65	@ 0x41
 8015d72:	2120      	movs	r1, #32
 8015d74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2242      	movs	r2, #66	@ 0x42
 8015d7a:	2100      	movs	r1, #0
 8015d7c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d82:	2280      	movs	r2, #128	@ 0x80
 8015d84:	431a      	orrs	r2, r3
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	2240      	movs	r2, #64	@ 0x40
 8015d8e:	2100      	movs	r1, #0
 8015d90:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8015d92:	2301      	movs	r3, #1
 8015d94:	e059      	b.n	8015e4a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d9a:	b2da      	uxtb	r2, r3
 8015d9c:	697c      	ldr	r4, [r7, #20]
 8015d9e:	230a      	movs	r3, #10
 8015da0:	18fb      	adds	r3, r7, r3
 8015da2:	8819      	ldrh	r1, [r3, #0]
 8015da4:	68f8      	ldr	r0, [r7, #12]
 8015da6:	4b2f      	ldr	r3, [pc, #188]	@ (8015e64 <HAL_I2C_Master_Receive_DMA+0x204>)
 8015da8:	9300      	str	r3, [sp, #0]
 8015daa:	0023      	movs	r3, r4
 8015dac:	f002 f966 	bl	801807c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015db4:	b29a      	uxth	r2, r3
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015dba:	1ad3      	subs	r3, r2, r3
 8015dbc:	b29a      	uxth	r2, r3
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	2240      	movs	r2, #64	@ 0x40
 8015dc6:	2100      	movs	r1, #0
 8015dc8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	2110      	movs	r1, #16
 8015dce:	0018      	movs	r0, r3
 8015dd0:	f002 f98e 	bl	80180f0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	2180      	movs	r1, #128	@ 0x80
 8015de0:	0209      	lsls	r1, r1, #8
 8015de2:	430a      	orrs	r2, r1
 8015de4:	601a      	str	r2, [r3, #0]
 8015de6:	e02d      	b.n	8015e44 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2241      	movs	r2, #65	@ 0x41
 8015dec:	2120      	movs	r1, #32
 8015dee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	2242      	movs	r2, #66	@ 0x42
 8015df4:	2100      	movs	r1, #0
 8015df6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015dfc:	2210      	movs	r2, #16
 8015dfe:	431a      	orrs	r2, r3
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	2240      	movs	r2, #64	@ 0x40
 8015e08:	2100      	movs	r1, #0
 8015e0a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	e01c      	b.n	8015e4a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	4a15      	ldr	r2, [pc, #84]	@ (8015e68 <HAL_I2C_Master_Receive_DMA+0x208>)
 8015e14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e1a:	b2da      	uxtb	r2, r3
 8015e1c:	2380      	movs	r3, #128	@ 0x80
 8015e1e:	049c      	lsls	r4, r3, #18
 8015e20:	230a      	movs	r3, #10
 8015e22:	18fb      	adds	r3, r7, r3
 8015e24:	8819      	ldrh	r1, [r3, #0]
 8015e26:	68f8      	ldr	r0, [r7, #12]
 8015e28:	4b0e      	ldr	r3, [pc, #56]	@ (8015e64 <HAL_I2C_Master_Receive_DMA+0x204>)
 8015e2a:	9300      	str	r3, [sp, #0]
 8015e2c:	0023      	movs	r3, r4
 8015e2e:	f002 f925 	bl	801807c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	2240      	movs	r2, #64	@ 0x40
 8015e36:	2100      	movs	r1, #0
 8015e38:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	2101      	movs	r1, #1
 8015e3e:	0018      	movs	r0, r3
 8015e40:	f002 f956 	bl	80180f0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015e44:	2300      	movs	r3, #0
 8015e46:	e000      	b.n	8015e4a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015e48:	2302      	movs	r3, #2
  }
}
 8015e4a:	0018      	movs	r0, r3
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	b006      	add	sp, #24
 8015e50:	bdb0      	pop	{r4, r5, r7, pc}
 8015e52:	46c0      	nop			@ (mov r8, r8)
 8015e54:	ffff0000 	.word	0xffff0000
 8015e58:	0801692d 	.word	0x0801692d
 8015e5c:	08017ac9 	.word	0x08017ac9
 8015e60:	08017b69 	.word	0x08017b69
 8015e64:	80002400 	.word	0x80002400
 8015e68:	08016481 	.word	0x08016481

08015e6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015e6c:	b590      	push	{r4, r7, lr}
 8015e6e:	b089      	sub	sp, #36	@ 0x24
 8015e70:	af02      	add	r7, sp, #8
 8015e72:	60f8      	str	r0, [r7, #12]
 8015e74:	000c      	movs	r4, r1
 8015e76:	0010      	movs	r0, r2
 8015e78:	0019      	movs	r1, r3
 8015e7a:	230a      	movs	r3, #10
 8015e7c:	18fb      	adds	r3, r7, r3
 8015e7e:	1c22      	adds	r2, r4, #0
 8015e80:	801a      	strh	r2, [r3, #0]
 8015e82:	2308      	movs	r3, #8
 8015e84:	18fb      	adds	r3, r7, r3
 8015e86:	1c02      	adds	r2, r0, #0
 8015e88:	801a      	strh	r2, [r3, #0]
 8015e8a:	1dbb      	adds	r3, r7, #6
 8015e8c:	1c0a      	adds	r2, r1, #0
 8015e8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2241      	movs	r2, #65	@ 0x41
 8015e94:	5c9b      	ldrb	r3, [r3, r2]
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	2b20      	cmp	r3, #32
 8015e9a:	d000      	beq.n	8015e9e <HAL_I2C_Mem_Read+0x32>
 8015e9c:	e110      	b.n	80160c0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8015e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d004      	beq.n	8015eae <HAL_I2C_Mem_Read+0x42>
 8015ea4:	232c      	movs	r3, #44	@ 0x2c
 8015ea6:	18fb      	adds	r3, r7, r3
 8015ea8:	881b      	ldrh	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d105      	bne.n	8015eba <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2280      	movs	r2, #128	@ 0x80
 8015eb2:	0092      	lsls	r2, r2, #2
 8015eb4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	e103      	b.n	80160c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	2240      	movs	r2, #64	@ 0x40
 8015ebe:	5c9b      	ldrb	r3, [r3, r2]
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d101      	bne.n	8015ec8 <HAL_I2C_Mem_Read+0x5c>
 8015ec4:	2302      	movs	r3, #2
 8015ec6:	e0fc      	b.n	80160c2 <HAL_I2C_Mem_Read+0x256>
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	2240      	movs	r2, #64	@ 0x40
 8015ecc:	2101      	movs	r1, #1
 8015ece:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015ed0:	f7fe f850 	bl	8013f74 <HAL_GetTick>
 8015ed4:	0003      	movs	r3, r0
 8015ed6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015ed8:	2380      	movs	r3, #128	@ 0x80
 8015eda:	0219      	lsls	r1, r3, #8
 8015edc:	68f8      	ldr	r0, [r7, #12]
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	9300      	str	r3, [sp, #0]
 8015ee2:	2319      	movs	r3, #25
 8015ee4:	2201      	movs	r2, #1
 8015ee6:	f001 fe77 	bl	8017bd8 <I2C_WaitOnFlagUntilTimeout>
 8015eea:	1e03      	subs	r3, r0, #0
 8015eec:	d001      	beq.n	8015ef2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8015eee:	2301      	movs	r3, #1
 8015ef0:	e0e7      	b.n	80160c2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	2241      	movs	r2, #65	@ 0x41
 8015ef6:	2122      	movs	r1, #34	@ 0x22
 8015ef8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2242      	movs	r2, #66	@ 0x42
 8015efe:	2140      	movs	r1, #64	@ 0x40
 8015f00:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2200      	movs	r2, #0
 8015f06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	222c      	movs	r2, #44	@ 0x2c
 8015f12:	18ba      	adds	r2, r7, r2
 8015f14:	8812      	ldrh	r2, [r2, #0]
 8015f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8015f1e:	1dbb      	adds	r3, r7, #6
 8015f20:	881c      	ldrh	r4, [r3, #0]
 8015f22:	2308      	movs	r3, #8
 8015f24:	18fb      	adds	r3, r7, r3
 8015f26:	881a      	ldrh	r2, [r3, #0]
 8015f28:	230a      	movs	r3, #10
 8015f2a:	18fb      	adds	r3, r7, r3
 8015f2c:	8819      	ldrh	r1, [r3, #0]
 8015f2e:	68f8      	ldr	r0, [r7, #12]
 8015f30:	697b      	ldr	r3, [r7, #20]
 8015f32:	9301      	str	r3, [sp, #4]
 8015f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f36:	9300      	str	r3, [sp, #0]
 8015f38:	0023      	movs	r3, r4
 8015f3a:	f001 f829 	bl	8016f90 <I2C_RequestMemoryRead>
 8015f3e:	1e03      	subs	r3, r0, #0
 8015f40:	d005      	beq.n	8015f4e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2240      	movs	r2, #64	@ 0x40
 8015f46:	2100      	movs	r1, #0
 8015f48:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	e0b9      	b.n	80160c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f52:	b29b      	uxth	r3, r3
 8015f54:	2bff      	cmp	r3, #255	@ 0xff
 8015f56:	d911      	bls.n	8015f7c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	22ff      	movs	r2, #255	@ 0xff
 8015f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f62:	b2da      	uxtb	r2, r3
 8015f64:	2380      	movs	r3, #128	@ 0x80
 8015f66:	045c      	lsls	r4, r3, #17
 8015f68:	230a      	movs	r3, #10
 8015f6a:	18fb      	adds	r3, r7, r3
 8015f6c:	8819      	ldrh	r1, [r3, #0]
 8015f6e:	68f8      	ldr	r0, [r7, #12]
 8015f70:	4b56      	ldr	r3, [pc, #344]	@ (80160cc <HAL_I2C_Mem_Read+0x260>)
 8015f72:	9300      	str	r3, [sp, #0]
 8015f74:	0023      	movs	r3, r4
 8015f76:	f002 f881 	bl	801807c <I2C_TransferConfig>
 8015f7a:	e012      	b.n	8015fa2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f80:	b29a      	uxth	r2, r3
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f8a:	b2da      	uxtb	r2, r3
 8015f8c:	2380      	movs	r3, #128	@ 0x80
 8015f8e:	049c      	lsls	r4, r3, #18
 8015f90:	230a      	movs	r3, #10
 8015f92:	18fb      	adds	r3, r7, r3
 8015f94:	8819      	ldrh	r1, [r3, #0]
 8015f96:	68f8      	ldr	r0, [r7, #12]
 8015f98:	4b4c      	ldr	r3, [pc, #304]	@ (80160cc <HAL_I2C_Mem_Read+0x260>)
 8015f9a:	9300      	str	r3, [sp, #0]
 8015f9c:	0023      	movs	r3, r4
 8015f9e:	f002 f86d 	bl	801807c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8015fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015fa4:	68f8      	ldr	r0, [r7, #12]
 8015fa6:	697b      	ldr	r3, [r7, #20]
 8015fa8:	9300      	str	r3, [sp, #0]
 8015faa:	0013      	movs	r3, r2
 8015fac:	2200      	movs	r2, #0
 8015fae:	2104      	movs	r1, #4
 8015fb0:	f001 fe12 	bl	8017bd8 <I2C_WaitOnFlagUntilTimeout>
 8015fb4:	1e03      	subs	r3, r0, #0
 8015fb6:	d001      	beq.n	8015fbc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8015fb8:	2301      	movs	r3, #1
 8015fba:	e082      	b.n	80160c2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fc6:	b2d2      	uxtb	r2, r2
 8015fc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fce:	1c5a      	adds	r2, r3, #1
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015fd8:	3b01      	subs	r3, #1
 8015fda:	b29a      	uxth	r2, r3
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	3b01      	subs	r3, #1
 8015fe8:	b29a      	uxth	r2, r3
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ff2:	b29b      	uxth	r3, r3
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d03a      	beq.n	801606e <HAL_I2C_Mem_Read+0x202>
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d136      	bne.n	801606e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016002:	68f8      	ldr	r0, [r7, #12]
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	9300      	str	r3, [sp, #0]
 8016008:	0013      	movs	r3, r2
 801600a:	2200      	movs	r2, #0
 801600c:	2180      	movs	r1, #128	@ 0x80
 801600e:	f001 fde3 	bl	8017bd8 <I2C_WaitOnFlagUntilTimeout>
 8016012:	1e03      	subs	r3, r0, #0
 8016014:	d001      	beq.n	801601a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016016:	2301      	movs	r3, #1
 8016018:	e053      	b.n	80160c2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801601e:	b29b      	uxth	r3, r3
 8016020:	2bff      	cmp	r3, #255	@ 0xff
 8016022:	d911      	bls.n	8016048 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	22ff      	movs	r2, #255	@ 0xff
 8016028:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801602e:	b2da      	uxtb	r2, r3
 8016030:	2380      	movs	r3, #128	@ 0x80
 8016032:	045c      	lsls	r4, r3, #17
 8016034:	230a      	movs	r3, #10
 8016036:	18fb      	adds	r3, r7, r3
 8016038:	8819      	ldrh	r1, [r3, #0]
 801603a:	68f8      	ldr	r0, [r7, #12]
 801603c:	2300      	movs	r3, #0
 801603e:	9300      	str	r3, [sp, #0]
 8016040:	0023      	movs	r3, r4
 8016042:	f002 f81b 	bl	801807c <I2C_TransferConfig>
 8016046:	e012      	b.n	801606e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801604c:	b29a      	uxth	r2, r3
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016056:	b2da      	uxtb	r2, r3
 8016058:	2380      	movs	r3, #128	@ 0x80
 801605a:	049c      	lsls	r4, r3, #18
 801605c:	230a      	movs	r3, #10
 801605e:	18fb      	adds	r3, r7, r3
 8016060:	8819      	ldrh	r1, [r3, #0]
 8016062:	68f8      	ldr	r0, [r7, #12]
 8016064:	2300      	movs	r3, #0
 8016066:	9300      	str	r3, [sp, #0]
 8016068:	0023      	movs	r3, r4
 801606a:	f002 f807 	bl	801807c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016072:	b29b      	uxth	r3, r3
 8016074:	2b00      	cmp	r3, #0
 8016076:	d194      	bne.n	8015fa2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016078:	697a      	ldr	r2, [r7, #20]
 801607a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	0018      	movs	r0, r3
 8016080:	f001 fe3e 	bl	8017d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016084:	1e03      	subs	r3, r0, #0
 8016086:	d001      	beq.n	801608c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016088:	2301      	movs	r3, #1
 801608a:	e01a      	b.n	80160c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2220      	movs	r2, #32
 8016092:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	685a      	ldr	r2, [r3, #4]
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	490c      	ldr	r1, [pc, #48]	@ (80160d0 <HAL_I2C_Mem_Read+0x264>)
 80160a0:	400a      	ands	r2, r1
 80160a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	2241      	movs	r2, #65	@ 0x41
 80160a8:	2120      	movs	r1, #32
 80160aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	2242      	movs	r2, #66	@ 0x42
 80160b0:	2100      	movs	r1, #0
 80160b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	2240      	movs	r2, #64	@ 0x40
 80160b8:	2100      	movs	r1, #0
 80160ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80160bc:	2300      	movs	r3, #0
 80160be:	e000      	b.n	80160c2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80160c0:	2302      	movs	r3, #2
  }
}
 80160c2:	0018      	movs	r0, r3
 80160c4:	46bd      	mov	sp, r7
 80160c6:	b007      	add	sp, #28
 80160c8:	bd90      	pop	{r4, r7, pc}
 80160ca:	46c0      	nop			@ (mov r8, r8)
 80160cc:	80002400 	.word	0x80002400
 80160d0:	fe00e800 	.word	0xfe00e800

080160d4 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80160d4:	b5b0      	push	{r4, r5, r7, lr}
 80160d6:	b088      	sub	sp, #32
 80160d8:	af02      	add	r7, sp, #8
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	000c      	movs	r4, r1
 80160de:	0010      	movs	r0, r2
 80160e0:	0019      	movs	r1, r3
 80160e2:	230a      	movs	r3, #10
 80160e4:	18fb      	adds	r3, r7, r3
 80160e6:	1c22      	adds	r2, r4, #0
 80160e8:	801a      	strh	r2, [r3, #0]
 80160ea:	2308      	movs	r3, #8
 80160ec:	18fb      	adds	r3, r7, r3
 80160ee:	1c02      	adds	r2, r0, #0
 80160f0:	801a      	strh	r2, [r3, #0]
 80160f2:	1dbb      	adds	r3, r7, #6
 80160f4:	1c0a      	adds	r2, r1, #0
 80160f6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	2241      	movs	r2, #65	@ 0x41
 80160fc:	5c9b      	ldrb	r3, [r3, r2]
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	2b20      	cmp	r3, #32
 8016102:	d000      	beq.n	8016106 <HAL_I2C_Mem_Write_DMA+0x32>
 8016104:	e0d8      	b.n	80162b8 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8016106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016108:	2b00      	cmp	r3, #0
 801610a:	d004      	beq.n	8016116 <HAL_I2C_Mem_Write_DMA+0x42>
 801610c:	232c      	movs	r3, #44	@ 0x2c
 801610e:	18fb      	adds	r3, r7, r3
 8016110:	881b      	ldrh	r3, [r3, #0]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d105      	bne.n	8016122 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2280      	movs	r2, #128	@ 0x80
 801611a:	0092      	lsls	r2, r2, #2
 801611c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801611e:	2301      	movs	r3, #1
 8016120:	e0cb      	b.n	80162ba <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	699a      	ldr	r2, [r3, #24]
 8016128:	2380      	movs	r3, #128	@ 0x80
 801612a:	021b      	lsls	r3, r3, #8
 801612c:	401a      	ands	r2, r3
 801612e:	2380      	movs	r3, #128	@ 0x80
 8016130:	021b      	lsls	r3, r3, #8
 8016132:	429a      	cmp	r2, r3
 8016134:	d101      	bne.n	801613a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8016136:	2302      	movs	r3, #2
 8016138:	e0bf      	b.n	80162ba <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2240      	movs	r2, #64	@ 0x40
 801613e:	5c9b      	ldrb	r3, [r3, r2]
 8016140:	2b01      	cmp	r3, #1
 8016142:	d101      	bne.n	8016148 <HAL_I2C_Mem_Write_DMA+0x74>
 8016144:	2302      	movs	r3, #2
 8016146:	e0b8      	b.n	80162ba <HAL_I2C_Mem_Write_DMA+0x1e6>
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2240      	movs	r2, #64	@ 0x40
 801614c:	2101      	movs	r1, #1
 801614e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2241      	movs	r2, #65	@ 0x41
 8016154:	2121      	movs	r1, #33	@ 0x21
 8016156:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	2242      	movs	r2, #66	@ 0x42
 801615c:	2140      	movs	r1, #64	@ 0x40
 801615e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	2200      	movs	r2, #0
 8016164:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801616a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	222c      	movs	r2, #44	@ 0x2c
 8016170:	18ba      	adds	r2, r7, r2
 8016172:	8812      	ldrh	r2, [r2, #0]
 8016174:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	4a52      	ldr	r2, [pc, #328]	@ (80162c4 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 801617a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	4a52      	ldr	r2, [pc, #328]	@ (80162c8 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8016180:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8016182:	230a      	movs	r3, #10
 8016184:	18fb      	adds	r3, r7, r3
 8016186:	881a      	ldrh	r2, [r3, #0]
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016190:	b29b      	uxth	r3, r3
 8016192:	2bff      	cmp	r3, #255	@ 0xff
 8016194:	d903      	bls.n	801619e <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	22ff      	movs	r2, #255	@ 0xff
 801619a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801619c:	e004      	b.n	80161a8 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161a2:	b29a      	uxth	r2, r3
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80161a8:	1dbb      	adds	r3, r7, #6
 80161aa:	881b      	ldrh	r3, [r3, #0]
 80161ac:	2b01      	cmp	r3, #1
 80161ae:	d10b      	bne.n	80161c8 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80161b0:	2308      	movs	r3, #8
 80161b2:	18fb      	adds	r3, r7, r3
 80161b4:	881b      	ldrh	r3, [r3, #0]
 80161b6:	b2da      	uxtb	r2, r3
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	2201      	movs	r2, #1
 80161c2:	4252      	negs	r2, r2
 80161c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80161c6:	e00e      	b.n	80161e6 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80161c8:	2108      	movs	r1, #8
 80161ca:	187b      	adds	r3, r7, r1
 80161cc:	881b      	ldrh	r3, [r3, #0]
 80161ce:	0a1b      	lsrs	r3, r3, #8
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	b2da      	uxtb	r2, r3
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80161da:	187b      	adds	r3, r7, r1
 80161dc:	881b      	ldrh	r3, [r3, #0]
 80161de:	b2db      	uxtb	r3, r3
 80161e0:	001a      	movs	r2, r3
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d023      	beq.n	8016236 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161f2:	4a36      	ldr	r2, [pc, #216]	@ (80162cc <HAL_I2C_Mem_Write_DMA+0x1f8>)
 80161f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161fa:	4a35      	ldr	r2, [pc, #212]	@ (80162d0 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80161fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016202:	2200      	movs	r2, #0
 8016204:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801620a:	2200      	movs	r2, #0
 801620c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	3328      	adds	r3, #40	@ 0x28
 801621a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016220:	2517      	movs	r5, #23
 8016222:	197c      	adds	r4, r7, r5
 8016224:	f7fe fbf8 	bl	8014a18 <HAL_DMA_Start_IT>
 8016228:	0003      	movs	r3, r0
 801622a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 801622c:	197b      	adds	r3, r7, r5
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d12d      	bne.n	8016290 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8016234:	e013      	b.n	801625e <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2241      	movs	r2, #65	@ 0x41
 801623a:	2120      	movs	r1, #32
 801623c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2242      	movs	r2, #66	@ 0x42
 8016242:	2100      	movs	r1, #0
 8016244:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801624a:	2280      	movs	r2, #128	@ 0x80
 801624c:	431a      	orrs	r2, r3
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	2240      	movs	r2, #64	@ 0x40
 8016256:	2100      	movs	r1, #0
 8016258:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801625a:	2301      	movs	r3, #1
 801625c:	e02d      	b.n	80162ba <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801625e:	1dbb      	adds	r3, r7, #6
 8016260:	881b      	ldrh	r3, [r3, #0]
 8016262:	b2da      	uxtb	r2, r3
 8016264:	2380      	movs	r3, #128	@ 0x80
 8016266:	045c      	lsls	r4, r3, #17
 8016268:	230a      	movs	r3, #10
 801626a:	18fb      	adds	r3, r7, r3
 801626c:	8819      	ldrh	r1, [r3, #0]
 801626e:	68f8      	ldr	r0, [r7, #12]
 8016270:	4b18      	ldr	r3, [pc, #96]	@ (80162d4 <HAL_I2C_Mem_Write_DMA+0x200>)
 8016272:	9300      	str	r3, [sp, #0]
 8016274:	0023      	movs	r3, r4
 8016276:	f001 ff01 	bl	801807c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2240      	movs	r2, #64	@ 0x40
 801627e:	2100      	movs	r1, #0
 8016280:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	2101      	movs	r1, #1
 8016286:	0018      	movs	r0, r3
 8016288:	f001 ff32 	bl	80180f0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 801628c:	2300      	movs	r3, #0
 801628e:	e014      	b.n	80162ba <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	2241      	movs	r2, #65	@ 0x41
 8016294:	2120      	movs	r1, #32
 8016296:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	2242      	movs	r2, #66	@ 0x42
 801629c:	2100      	movs	r1, #0
 801629e:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162a4:	2210      	movs	r2, #16
 80162a6:	431a      	orrs	r2, r3
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	2240      	movs	r2, #64	@ 0x40
 80162b0:	2100      	movs	r1, #0
 80162b2:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80162b4:	2301      	movs	r3, #1
 80162b6:	e000      	b.n	80162ba <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80162b8:	2302      	movs	r3, #2
  }
}
 80162ba:	0018      	movs	r0, r3
 80162bc:	46bd      	mov	sp, r7
 80162be:	b006      	add	sp, #24
 80162c0:	bdb0      	pop	{r4, r5, r7, pc}
 80162c2:	46c0      	nop			@ (mov r8, r8)
 80162c4:	ffff0000 	.word	0xffff0000
 80162c8:	08016b45 	.word	0x08016b45
 80162cc:	08017a29 	.word	0x08017a29
 80162d0:	08017b69 	.word	0x08017b69
 80162d4:	80002000 	.word	0x80002000

080162d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	699b      	ldr	r3, [r3, #24]
 80162e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d005      	beq.n	8016304 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80162fc:	68ba      	ldr	r2, [r7, #8]
 80162fe:	68f9      	ldr	r1, [r7, #12]
 8016300:	6878      	ldr	r0, [r7, #4]
 8016302:	4798      	blx	r3
  }
}
 8016304:	46c0      	nop			@ (mov r8, r8)
 8016306:	46bd      	mov	sp, r7
 8016308:	b004      	add	sp, #16
 801630a:	bd80      	pop	{r7, pc}

0801630c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b086      	sub	sp, #24
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	699b      	ldr	r3, [r3, #24]
 801631a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	0a1b      	lsrs	r3, r3, #8
 8016328:	001a      	movs	r2, r3
 801632a:	2301      	movs	r3, #1
 801632c:	4013      	ands	r3, r2
 801632e:	d010      	beq.n	8016352 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016330:	693b      	ldr	r3, [r7, #16]
 8016332:	09db      	lsrs	r3, r3, #7
 8016334:	001a      	movs	r2, r3
 8016336:	2301      	movs	r3, #1
 8016338:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801633a:	d00a      	beq.n	8016352 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016340:	2201      	movs	r2, #1
 8016342:	431a      	orrs	r2, r3
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2280      	movs	r2, #128	@ 0x80
 801634e:	0052      	lsls	r2, r2, #1
 8016350:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016352:	697b      	ldr	r3, [r7, #20]
 8016354:	0a9b      	lsrs	r3, r3, #10
 8016356:	001a      	movs	r2, r3
 8016358:	2301      	movs	r3, #1
 801635a:	4013      	ands	r3, r2
 801635c:	d010      	beq.n	8016380 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	09db      	lsrs	r3, r3, #7
 8016362:	001a      	movs	r2, r3
 8016364:	2301      	movs	r3, #1
 8016366:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016368:	d00a      	beq.n	8016380 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801636e:	2208      	movs	r2, #8
 8016370:	431a      	orrs	r2, r3
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	2280      	movs	r2, #128	@ 0x80
 801637c:	00d2      	lsls	r2, r2, #3
 801637e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	0a5b      	lsrs	r3, r3, #9
 8016384:	001a      	movs	r2, r3
 8016386:	2301      	movs	r3, #1
 8016388:	4013      	ands	r3, r2
 801638a:	d010      	beq.n	80163ae <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	09db      	lsrs	r3, r3, #7
 8016390:	001a      	movs	r2, r3
 8016392:	2301      	movs	r3, #1
 8016394:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016396:	d00a      	beq.n	80163ae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801639c:	2202      	movs	r2, #2
 801639e:	431a      	orrs	r2, r3
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2280      	movs	r2, #128	@ 0x80
 80163aa:	0092      	lsls	r2, r2, #2
 80163ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	220b      	movs	r2, #11
 80163b8:	4013      	ands	r3, r2
 80163ba:	d005      	beq.n	80163c8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80163bc:	68fa      	ldr	r2, [r7, #12]
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	0011      	movs	r1, r2
 80163c2:	0018      	movs	r0, r3
 80163c4:	f001 f9e2 	bl	801778c <I2C_ITError>
  }
}
 80163c8:	46c0      	nop			@ (mov r8, r8)
 80163ca:	46bd      	mov	sp, r7
 80163cc:	b006      	add	sp, #24
 80163ce:	bd80      	pop	{r7, pc}

080163d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80163d8:	46c0      	nop			@ (mov r8, r8)
 80163da:	46bd      	mov	sp, r7
 80163dc:	b002      	add	sp, #8
 80163de:	bd80      	pop	{r7, pc}

080163e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80163e8:	46c0      	nop			@ (mov r8, r8)
 80163ea:	46bd      	mov	sp, r7
 80163ec:	b002      	add	sp, #8
 80163ee:	bd80      	pop	{r7, pc}

080163f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80163f8:	46c0      	nop			@ (mov r8, r8)
 80163fa:	46bd      	mov	sp, r7
 80163fc:	b002      	add	sp, #8
 80163fe:	bd80      	pop	{r7, pc}

08016400 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016408:	46c0      	nop			@ (mov r8, r8)
 801640a:	46bd      	mov	sp, r7
 801640c:	b002      	add	sp, #8
 801640e:	bd80      	pop	{r7, pc}

08016410 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	0008      	movs	r0, r1
 801641a:	0011      	movs	r1, r2
 801641c:	1cfb      	adds	r3, r7, #3
 801641e:	1c02      	adds	r2, r0, #0
 8016420:	701a      	strb	r2, [r3, #0]
 8016422:	003b      	movs	r3, r7
 8016424:	1c0a      	adds	r2, r1, #0
 8016426:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016428:	46c0      	nop			@ (mov r8, r8)
 801642a:	46bd      	mov	sp, r7
 801642c:	b002      	add	sp, #8
 801642e:	bd80      	pop	{r7, pc}

08016430 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b082      	sub	sp, #8
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016438:	46c0      	nop			@ (mov r8, r8)
 801643a:	46bd      	mov	sp, r7
 801643c:	b002      	add	sp, #8
 801643e:	bd80      	pop	{r7, pc}

08016440 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016448:	46c0      	nop			@ (mov r8, r8)
 801644a:	46bd      	mov	sp, r7
 801644c:	b002      	add	sp, #8
 801644e:	bd80      	pop	{r7, pc}

08016450 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016458:	46c0      	nop			@ (mov r8, r8)
 801645a:	46bd      	mov	sp, r7
 801645c:	b002      	add	sp, #8
 801645e:	bd80      	pop	{r7, pc}

08016460 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016468:	46c0      	nop			@ (mov r8, r8)
 801646a:	46bd      	mov	sp, r7
 801646c:	b002      	add	sp, #8
 801646e:	bd80      	pop	{r7, pc}

08016470 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016478:	46c0      	nop			@ (mov r8, r8)
 801647a:	46bd      	mov	sp, r7
 801647c:	b002      	add	sp, #8
 801647e:	bd80      	pop	{r7, pc}

08016480 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016480:	b590      	push	{r4, r7, lr}
 8016482:	b089      	sub	sp, #36	@ 0x24
 8016484:	af02      	add	r7, sp, #8
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2240      	movs	r2, #64	@ 0x40
 8016494:	5c9b      	ldrb	r3, [r3, r2]
 8016496:	2b01      	cmp	r3, #1
 8016498:	d101      	bne.n	801649e <I2C_Master_ISR_IT+0x1e>
 801649a:	2302      	movs	r3, #2
 801649c:	e12b      	b.n	80166f6 <I2C_Master_ISR_IT+0x276>
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	2240      	movs	r2, #64	@ 0x40
 80164a2:	2101      	movs	r1, #1
 80164a4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	091b      	lsrs	r3, r3, #4
 80164aa:	001a      	movs	r2, r3
 80164ac:	2301      	movs	r3, #1
 80164ae:	4013      	ands	r3, r2
 80164b0:	d014      	beq.n	80164dc <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	091b      	lsrs	r3, r3, #4
 80164b6:	001a      	movs	r2, r3
 80164b8:	2301      	movs	r3, #1
 80164ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80164bc:	d00e      	beq.n	80164dc <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	2210      	movs	r2, #16
 80164c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164ca:	2204      	movs	r2, #4
 80164cc:	431a      	orrs	r2, r3
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	0018      	movs	r0, r3
 80164d6:	f001 fa84 	bl	80179e2 <I2C_Flush_TXDR>
 80164da:	e0f5      	b.n	80166c8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	089b      	lsrs	r3, r3, #2
 80164e0:	001a      	movs	r2, r3
 80164e2:	2301      	movs	r3, #1
 80164e4:	4013      	ands	r3, r2
 80164e6:	d023      	beq.n	8016530 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	089b      	lsrs	r3, r3, #2
 80164ec:	001a      	movs	r2, r3
 80164ee:	2301      	movs	r3, #1
 80164f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80164f2:	d01d      	beq.n	8016530 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	2204      	movs	r2, #4
 80164f8:	4393      	bics	r3, r2
 80164fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016506:	b2d2      	uxtb	r2, r2
 8016508:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801650e:	1c5a      	adds	r2, r3, #1
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016518:	3b01      	subs	r3, #1
 801651a:	b29a      	uxth	r2, r3
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016524:	b29b      	uxth	r3, r3
 8016526:	3b01      	subs	r3, #1
 8016528:	b29a      	uxth	r2, r3
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801652e:	e0cb      	b.n	80166c8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016530:	697b      	ldr	r3, [r7, #20]
 8016532:	085b      	lsrs	r3, r3, #1
 8016534:	001a      	movs	r2, r3
 8016536:	2301      	movs	r3, #1
 8016538:	4013      	ands	r3, r2
 801653a:	d01e      	beq.n	801657a <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	085b      	lsrs	r3, r3, #1
 8016540:	001a      	movs	r2, r3
 8016542:	2301      	movs	r3, #1
 8016544:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016546:	d018      	beq.n	801657a <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801654c:	781a      	ldrb	r2, [r3, #0]
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016558:	1c5a      	adds	r2, r3, #1
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016562:	3b01      	subs	r3, #1
 8016564:	b29a      	uxth	r2, r3
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801656e:	b29b      	uxth	r3, r3
 8016570:	3b01      	subs	r3, #1
 8016572:	b29a      	uxth	r2, r3
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016578:	e0a6      	b.n	80166c8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	09db      	lsrs	r3, r3, #7
 801657e:	001a      	movs	r2, r3
 8016580:	2301      	movs	r3, #1
 8016582:	4013      	ands	r3, r2
 8016584:	d100      	bne.n	8016588 <I2C_Master_ISR_IT+0x108>
 8016586:	e06b      	b.n	8016660 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	099b      	lsrs	r3, r3, #6
 801658c:	001a      	movs	r2, r3
 801658e:	2301      	movs	r3, #1
 8016590:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016592:	d065      	beq.n	8016660 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016598:	b29b      	uxth	r3, r3
 801659a:	2b00      	cmp	r3, #0
 801659c:	d04a      	beq.n	8016634 <I2C_Master_ISR_IT+0x1b4>
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d146      	bne.n	8016634 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	685b      	ldr	r3, [r3, #4]
 80165ac:	b29a      	uxth	r2, r3
 80165ae:	2112      	movs	r1, #18
 80165b0:	187b      	adds	r3, r7, r1
 80165b2:	0592      	lsls	r2, r2, #22
 80165b4:	0d92      	lsrs	r2, r2, #22
 80165b6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165bc:	b29b      	uxth	r3, r3
 80165be:	2bff      	cmp	r3, #255	@ 0xff
 80165c0:	d910      	bls.n	80165e4 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	22ff      	movs	r2, #255	@ 0xff
 80165c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165cc:	b2da      	uxtb	r2, r3
 80165ce:	2380      	movs	r3, #128	@ 0x80
 80165d0:	045c      	lsls	r4, r3, #17
 80165d2:	187b      	adds	r3, r7, r1
 80165d4:	8819      	ldrh	r1, [r3, #0]
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	2300      	movs	r3, #0
 80165da:	9300      	str	r3, [sp, #0]
 80165dc:	0023      	movs	r3, r4
 80165de:	f001 fd4d 	bl	801807c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80165e2:	e03c      	b.n	801665e <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165e8:	b29a      	uxth	r2, r3
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165f2:	4a43      	ldr	r2, [pc, #268]	@ (8016700 <I2C_Master_ISR_IT+0x280>)
 80165f4:	4293      	cmp	r3, r2
 80165f6:	d00e      	beq.n	8016616 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165fc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016602:	2312      	movs	r3, #18
 8016604:	18fb      	adds	r3, r7, r3
 8016606:	8819      	ldrh	r1, [r3, #0]
 8016608:	68f8      	ldr	r0, [r7, #12]
 801660a:	2300      	movs	r3, #0
 801660c:	9300      	str	r3, [sp, #0]
 801660e:	0023      	movs	r3, r4
 8016610:	f001 fd34 	bl	801807c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016614:	e023      	b.n	801665e <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801661a:	b2da      	uxtb	r2, r3
 801661c:	2380      	movs	r3, #128	@ 0x80
 801661e:	049c      	lsls	r4, r3, #18
 8016620:	2312      	movs	r3, #18
 8016622:	18fb      	adds	r3, r7, r3
 8016624:	8819      	ldrh	r1, [r3, #0]
 8016626:	68f8      	ldr	r0, [r7, #12]
 8016628:	2300      	movs	r3, #0
 801662a:	9300      	str	r3, [sp, #0]
 801662c:	0023      	movs	r3, r4
 801662e:	f001 fd25 	bl	801807c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016632:	e014      	b.n	801665e <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	685a      	ldr	r2, [r3, #4]
 801663a:	2380      	movs	r3, #128	@ 0x80
 801663c:	049b      	lsls	r3, r3, #18
 801663e:	401a      	ands	r2, r3
 8016640:	2380      	movs	r3, #128	@ 0x80
 8016642:	049b      	lsls	r3, r3, #18
 8016644:	429a      	cmp	r2, r3
 8016646:	d004      	beq.n	8016652 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	0018      	movs	r0, r3
 801664c:	f000 fda6 	bl	801719c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016650:	e03a      	b.n	80166c8 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	2140      	movs	r1, #64	@ 0x40
 8016656:	0018      	movs	r0, r3
 8016658:	f001 f898 	bl	801778c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801665c:	e034      	b.n	80166c8 <I2C_Master_ISR_IT+0x248>
 801665e:	e033      	b.n	80166c8 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016660:	697b      	ldr	r3, [r7, #20]
 8016662:	099b      	lsrs	r3, r3, #6
 8016664:	001a      	movs	r2, r3
 8016666:	2301      	movs	r3, #1
 8016668:	4013      	ands	r3, r2
 801666a:	d02d      	beq.n	80166c8 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	099b      	lsrs	r3, r3, #6
 8016670:	001a      	movs	r2, r3
 8016672:	2301      	movs	r3, #1
 8016674:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016676:	d027      	beq.n	80166c8 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801667c:	b29b      	uxth	r3, r3
 801667e:	2b00      	cmp	r3, #0
 8016680:	d11d      	bne.n	80166be <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	685a      	ldr	r2, [r3, #4]
 8016688:	2380      	movs	r3, #128	@ 0x80
 801668a:	049b      	lsls	r3, r3, #18
 801668c:	401a      	ands	r2, r3
 801668e:	2380      	movs	r3, #128	@ 0x80
 8016690:	049b      	lsls	r3, r3, #18
 8016692:	429a      	cmp	r2, r3
 8016694:	d018      	beq.n	80166c8 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801669a:	4a19      	ldr	r2, [pc, #100]	@ (8016700 <I2C_Master_ISR_IT+0x280>)
 801669c:	4293      	cmp	r3, r2
 801669e:	d109      	bne.n	80166b4 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	685a      	ldr	r2, [r3, #4]
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	2180      	movs	r1, #128	@ 0x80
 80166ac:	01c9      	lsls	r1, r1, #7
 80166ae:	430a      	orrs	r2, r1
 80166b0:	605a      	str	r2, [r3, #4]
 80166b2:	e009      	b.n	80166c8 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	0018      	movs	r0, r3
 80166b8:	f000 fd70 	bl	801719c <I2C_ITMasterSeqCplt>
 80166bc:	e004      	b.n	80166c8 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	2140      	movs	r1, #64	@ 0x40
 80166c2:	0018      	movs	r0, r3
 80166c4:	f001 f862 	bl	801778c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	095b      	lsrs	r3, r3, #5
 80166cc:	001a      	movs	r2, r3
 80166ce:	2301      	movs	r3, #1
 80166d0:	4013      	ands	r3, r2
 80166d2:	d00b      	beq.n	80166ec <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	095b      	lsrs	r3, r3, #5
 80166d8:	001a      	movs	r2, r3
 80166da:	2301      	movs	r3, #1
 80166dc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80166de:	d005      	beq.n	80166ec <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80166e0:	697a      	ldr	r2, [r7, #20]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	0011      	movs	r1, r2
 80166e6:	0018      	movs	r0, r3
 80166e8:	f000 fe00 	bl	80172ec <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	2240      	movs	r2, #64	@ 0x40
 80166f0:	2100      	movs	r1, #0
 80166f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80166f4:	2300      	movs	r3, #0
}
 80166f6:	0018      	movs	r0, r3
 80166f8:	46bd      	mov	sp, r7
 80166fa:	b007      	add	sp, #28
 80166fc:	bd90      	pop	{r4, r7, pc}
 80166fe:	46c0      	nop			@ (mov r8, r8)
 8016700:	ffff0000 	.word	0xffff0000

08016704 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b086      	sub	sp, #24
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016714:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	2240      	movs	r2, #64	@ 0x40
 801671e:	5c9b      	ldrb	r3, [r3, r2]
 8016720:	2b01      	cmp	r3, #1
 8016722:	d101      	bne.n	8016728 <I2C_Slave_ISR_IT+0x24>
 8016724:	2302      	movs	r3, #2
 8016726:	e0fa      	b.n	801691e <I2C_Slave_ISR_IT+0x21a>
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	2240      	movs	r2, #64	@ 0x40
 801672c:	2101      	movs	r1, #1
 801672e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	095b      	lsrs	r3, r3, #5
 8016734:	001a      	movs	r2, r3
 8016736:	2301      	movs	r3, #1
 8016738:	4013      	ands	r3, r2
 801673a:	d00b      	beq.n	8016754 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	095b      	lsrs	r3, r3, #5
 8016740:	001a      	movs	r2, r3
 8016742:	2301      	movs	r3, #1
 8016744:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016746:	d005      	beq.n	8016754 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8016748:	693a      	ldr	r2, [r7, #16]
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	0011      	movs	r1, r2
 801674e:	0018      	movs	r0, r3
 8016750:	f000 fe9e 	bl	8017490 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	091b      	lsrs	r3, r3, #4
 8016758:	001a      	movs	r2, r3
 801675a:	2301      	movs	r3, #1
 801675c:	4013      	ands	r3, r2
 801675e:	d054      	beq.n	801680a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	091b      	lsrs	r3, r3, #4
 8016764:	001a      	movs	r2, r3
 8016766:	2301      	movs	r3, #1
 8016768:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801676a:	d04e      	beq.n	801680a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016770:	b29b      	uxth	r3, r3
 8016772:	2b00      	cmp	r3, #0
 8016774:	d12d      	bne.n	80167d2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	2241      	movs	r2, #65	@ 0x41
 801677a:	5c9b      	ldrb	r3, [r3, r2]
 801677c:	b2db      	uxtb	r3, r3
 801677e:	2b28      	cmp	r3, #40	@ 0x28
 8016780:	d10b      	bne.n	801679a <I2C_Slave_ISR_IT+0x96>
 8016782:	697a      	ldr	r2, [r7, #20]
 8016784:	2380      	movs	r3, #128	@ 0x80
 8016786:	049b      	lsls	r3, r3, #18
 8016788:	429a      	cmp	r2, r3
 801678a:	d106      	bne.n	801679a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801678c:	693a      	ldr	r2, [r7, #16]
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	0011      	movs	r1, r2
 8016792:	0018      	movs	r0, r3
 8016794:	f000 ffa0 	bl	80176d8 <I2C_ITListenCplt>
 8016798:	e036      	b.n	8016808 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	2241      	movs	r2, #65	@ 0x41
 801679e:	5c9b      	ldrb	r3, [r3, r2]
 80167a0:	b2db      	uxtb	r3, r3
 80167a2:	2b29      	cmp	r3, #41	@ 0x29
 80167a4:	d110      	bne.n	80167c8 <I2C_Slave_ISR_IT+0xc4>
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	4a5f      	ldr	r2, [pc, #380]	@ (8016928 <I2C_Slave_ISR_IT+0x224>)
 80167aa:	4293      	cmp	r3, r2
 80167ac:	d00c      	beq.n	80167c8 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2210      	movs	r2, #16
 80167b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	0018      	movs	r0, r3
 80167ba:	f001 f912 	bl	80179e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	0018      	movs	r0, r3
 80167c2:	f000 fd2d 	bl	8017220 <I2C_ITSlaveSeqCplt>
 80167c6:	e01f      	b.n	8016808 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	2210      	movs	r2, #16
 80167ce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80167d0:	e09d      	b.n	801690e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	2210      	movs	r2, #16
 80167d8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167de:	2204      	movs	r2, #4
 80167e0:	431a      	orrs	r2, r3
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d005      	beq.n	80167f8 <I2C_Slave_ISR_IT+0xf4>
 80167ec:	697a      	ldr	r2, [r7, #20]
 80167ee:	2380      	movs	r3, #128	@ 0x80
 80167f0:	045b      	lsls	r3, r3, #17
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d000      	beq.n	80167f8 <I2C_Slave_ISR_IT+0xf4>
 80167f6:	e08a      	b.n	801690e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	0011      	movs	r1, r2
 8016800:	0018      	movs	r0, r3
 8016802:	f000 ffc3 	bl	801778c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8016806:	e082      	b.n	801690e <I2C_Slave_ISR_IT+0x20a>
 8016808:	e081      	b.n	801690e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	089b      	lsrs	r3, r3, #2
 801680e:	001a      	movs	r2, r3
 8016810:	2301      	movs	r3, #1
 8016812:	4013      	ands	r3, r2
 8016814:	d031      	beq.n	801687a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	089b      	lsrs	r3, r3, #2
 801681a:	001a      	movs	r2, r3
 801681c:	2301      	movs	r3, #1
 801681e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016820:	d02b      	beq.n	801687a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016826:	b29b      	uxth	r3, r3
 8016828:	2b00      	cmp	r3, #0
 801682a:	d018      	beq.n	801685e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016836:	b2d2      	uxtb	r2, r2
 8016838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801683e:	1c5a      	adds	r2, r3, #1
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016848:	3b01      	subs	r3, #1
 801684a:	b29a      	uxth	r2, r3
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016854:	b29b      	uxth	r3, r3
 8016856:	3b01      	subs	r3, #1
 8016858:	b29a      	uxth	r2, r3
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016862:	b29b      	uxth	r3, r3
 8016864:	2b00      	cmp	r3, #0
 8016866:	d154      	bne.n	8016912 <I2C_Slave_ISR_IT+0x20e>
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	4a2f      	ldr	r2, [pc, #188]	@ (8016928 <I2C_Slave_ISR_IT+0x224>)
 801686c:	4293      	cmp	r3, r2
 801686e:	d050      	beq.n	8016912 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	0018      	movs	r0, r3
 8016874:	f000 fcd4 	bl	8017220 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8016878:	e04b      	b.n	8016912 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801687a:	693b      	ldr	r3, [r7, #16]
 801687c:	08db      	lsrs	r3, r3, #3
 801687e:	001a      	movs	r2, r3
 8016880:	2301      	movs	r3, #1
 8016882:	4013      	ands	r3, r2
 8016884:	d00c      	beq.n	80168a0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	08db      	lsrs	r3, r3, #3
 801688a:	001a      	movs	r2, r3
 801688c:	2301      	movs	r3, #1
 801688e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016890:	d006      	beq.n	80168a0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8016892:	693a      	ldr	r2, [r7, #16]
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	0011      	movs	r1, r2
 8016898:	0018      	movs	r0, r3
 801689a:	f000 fbdb 	bl	8017054 <I2C_ITAddrCplt>
 801689e:	e039      	b.n	8016914 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80168a0:	693b      	ldr	r3, [r7, #16]
 80168a2:	085b      	lsrs	r3, r3, #1
 80168a4:	001a      	movs	r2, r3
 80168a6:	2301      	movs	r3, #1
 80168a8:	4013      	ands	r3, r2
 80168aa:	d033      	beq.n	8016914 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	085b      	lsrs	r3, r3, #1
 80168b0:	001a      	movs	r2, r3
 80168b2:	2301      	movs	r3, #1
 80168b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80168b6:	d02d      	beq.n	8016914 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168bc:	b29b      	uxth	r3, r3
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d018      	beq.n	80168f4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168c6:	781a      	ldrb	r2, [r3, #0]
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168d2:	1c5a      	adds	r2, r3, #1
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168dc:	b29b      	uxth	r3, r3
 80168de:	3b01      	subs	r3, #1
 80168e0:	b29a      	uxth	r2, r3
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168ea:	3b01      	subs	r3, #1
 80168ec:	b29a      	uxth	r2, r3
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80168f2:	e00f      	b.n	8016914 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80168f4:	697a      	ldr	r2, [r7, #20]
 80168f6:	2380      	movs	r3, #128	@ 0x80
 80168f8:	045b      	lsls	r3, r3, #17
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d002      	beq.n	8016904 <I2C_Slave_ISR_IT+0x200>
 80168fe:	697b      	ldr	r3, [r7, #20]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d107      	bne.n	8016914 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	0018      	movs	r0, r3
 8016908:	f000 fc8a 	bl	8017220 <I2C_ITSlaveSeqCplt>
 801690c:	e002      	b.n	8016914 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 801690e:	46c0      	nop			@ (mov r8, r8)
 8016910:	e000      	b.n	8016914 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8016912:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	2240      	movs	r2, #64	@ 0x40
 8016918:	2100      	movs	r1, #0
 801691a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801691c:	2300      	movs	r3, #0
}
 801691e:	0018      	movs	r0, r3
 8016920:	46bd      	mov	sp, r7
 8016922:	b006      	add	sp, #24
 8016924:	bd80      	pop	{r7, pc}
 8016926:	46c0      	nop			@ (mov r8, r8)
 8016928:	ffff0000 	.word	0xffff0000

0801692c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 801692c:	b590      	push	{r4, r7, lr}
 801692e:	b089      	sub	sp, #36	@ 0x24
 8016930:	af02      	add	r7, sp, #8
 8016932:	60f8      	str	r0, [r7, #12]
 8016934:	60b9      	str	r1, [r7, #8]
 8016936:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	2240      	movs	r2, #64	@ 0x40
 801693c:	5c9b      	ldrb	r3, [r3, r2]
 801693e:	2b01      	cmp	r3, #1
 8016940:	d101      	bne.n	8016946 <I2C_Master_ISR_DMA+0x1a>
 8016942:	2302      	movs	r3, #2
 8016944:	e0f7      	b.n	8016b36 <I2C_Master_ISR_DMA+0x20a>
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	2240      	movs	r2, #64	@ 0x40
 801694a:	2101      	movs	r1, #1
 801694c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	091b      	lsrs	r3, r3, #4
 8016952:	001a      	movs	r2, r3
 8016954:	2301      	movs	r3, #1
 8016956:	4013      	ands	r3, r2
 8016958:	d019      	beq.n	801698e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	091b      	lsrs	r3, r3, #4
 801695e:	001a      	movs	r2, r3
 8016960:	2301      	movs	r3, #1
 8016962:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016964:	d013      	beq.n	801698e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	2210      	movs	r2, #16
 801696c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016972:	2204      	movs	r2, #4
 8016974:	431a      	orrs	r2, r3
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	2120      	movs	r1, #32
 801697e:	0018      	movs	r0, r3
 8016980:	f001 fbb6 	bl	80180f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	0018      	movs	r0, r3
 8016988:	f001 f82b 	bl	80179e2 <I2C_Flush_TXDR>
 801698c:	e0ce      	b.n	8016b2c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	09db      	lsrs	r3, r3, #7
 8016992:	001a      	movs	r2, r3
 8016994:	2301      	movs	r3, #1
 8016996:	4013      	ands	r3, r2
 8016998:	d100      	bne.n	801699c <I2C_Master_ISR_DMA+0x70>
 801699a:	e07e      	b.n	8016a9a <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	099b      	lsrs	r3, r3, #6
 80169a0:	001a      	movs	r2, r3
 80169a2:	2301      	movs	r3, #1
 80169a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80169a6:	d100      	bne.n	80169aa <I2C_Master_ISR_DMA+0x7e>
 80169a8:	e077      	b.n	8016a9a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	681a      	ldr	r2, [r3, #0]
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	2140      	movs	r1, #64	@ 0x40
 80169b6:	438a      	bics	r2, r1
 80169b8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169be:	b29b      	uxth	r3, r3
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d055      	beq.n	8016a70 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	b29a      	uxth	r2, r3
 80169cc:	2312      	movs	r3, #18
 80169ce:	18fb      	adds	r3, r7, r3
 80169d0:	0592      	lsls	r2, r2, #22
 80169d2:	0d92      	lsrs	r2, r2, #22
 80169d4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169da:	b29b      	uxth	r3, r3
 80169dc:	2bff      	cmp	r3, #255	@ 0xff
 80169de:	d906      	bls.n	80169ee <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	22ff      	movs	r2, #255	@ 0xff
 80169e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80169e6:	2380      	movs	r3, #128	@ 0x80
 80169e8:	045b      	lsls	r3, r3, #17
 80169ea:	617b      	str	r3, [r7, #20]
 80169ec:	e010      	b.n	8016a10 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80169f2:	b29a      	uxth	r2, r3
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169fc:	4a50      	ldr	r2, [pc, #320]	@ (8016b40 <I2C_Master_ISR_DMA+0x214>)
 80169fe:	4293      	cmp	r3, r2
 8016a00:	d003      	beq.n	8016a0a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a06:	617b      	str	r3, [r7, #20]
 8016a08:	e002      	b.n	8016a10 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8016a0a:	2380      	movs	r3, #128	@ 0x80
 8016a0c:	049b      	lsls	r3, r3, #18
 8016a0e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a14:	b2da      	uxtb	r2, r3
 8016a16:	697c      	ldr	r4, [r7, #20]
 8016a18:	2312      	movs	r3, #18
 8016a1a:	18fb      	adds	r3, r7, r3
 8016a1c:	8819      	ldrh	r1, [r3, #0]
 8016a1e:	68f8      	ldr	r0, [r7, #12]
 8016a20:	2300      	movs	r3, #0
 8016a22:	9300      	str	r3, [sp, #0]
 8016a24:	0023      	movs	r3, r4
 8016a26:	f001 fb29 	bl	801807c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a2e:	b29a      	uxth	r2, r3
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016a34:	1ad3      	subs	r3, r2, r3
 8016a36:	b29a      	uxth	r2, r3
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	2241      	movs	r2, #65	@ 0x41
 8016a40:	5c9b      	ldrb	r3, [r3, r2]
 8016a42:	b2db      	uxtb	r3, r3
 8016a44:	2b22      	cmp	r3, #34	@ 0x22
 8016a46:	d109      	bne.n	8016a5c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	681a      	ldr	r2, [r3, #0]
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2180      	movs	r1, #128	@ 0x80
 8016a54:	0209      	lsls	r1, r1, #8
 8016a56:	430a      	orrs	r2, r1
 8016a58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016a5a:	e067      	b.n	8016b2c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	681a      	ldr	r2, [r3, #0]
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	2180      	movs	r1, #128	@ 0x80
 8016a68:	01c9      	lsls	r1, r1, #7
 8016a6a:	430a      	orrs	r2, r1
 8016a6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016a6e:	e05d      	b.n	8016b2c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	685a      	ldr	r2, [r3, #4]
 8016a76:	2380      	movs	r3, #128	@ 0x80
 8016a78:	049b      	lsls	r3, r3, #18
 8016a7a:	401a      	ands	r2, r3
 8016a7c:	2380      	movs	r3, #128	@ 0x80
 8016a7e:	049b      	lsls	r3, r3, #18
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d004      	beq.n	8016a8e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	0018      	movs	r0, r3
 8016a88:	f000 fb88 	bl	801719c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8016a8c:	e04e      	b.n	8016b2c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	2140      	movs	r1, #64	@ 0x40
 8016a92:	0018      	movs	r0, r3
 8016a94:	f000 fe7a 	bl	801778c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8016a98:	e048      	b.n	8016b2c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016a9a:	68bb      	ldr	r3, [r7, #8]
 8016a9c:	099b      	lsrs	r3, r3, #6
 8016a9e:	001a      	movs	r2, r3
 8016aa0:	2301      	movs	r3, #1
 8016aa2:	4013      	ands	r3, r2
 8016aa4:	d02e      	beq.n	8016b04 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	099b      	lsrs	r3, r3, #6
 8016aaa:	001a      	movs	r2, r3
 8016aac:	2301      	movs	r3, #1
 8016aae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016ab0:	d028      	beq.n	8016b04 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016ab6:	b29b      	uxth	r3, r3
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d11d      	bne.n	8016af8 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	685a      	ldr	r2, [r3, #4]
 8016ac2:	2380      	movs	r3, #128	@ 0x80
 8016ac4:	049b      	lsls	r3, r3, #18
 8016ac6:	401a      	ands	r2, r3
 8016ac8:	2380      	movs	r3, #128	@ 0x80
 8016aca:	049b      	lsls	r3, r3, #18
 8016acc:	429a      	cmp	r2, r3
 8016ace:	d02c      	beq.n	8016b2a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8016b40 <I2C_Master_ISR_DMA+0x214>)
 8016ad6:	4293      	cmp	r3, r2
 8016ad8:	d109      	bne.n	8016aee <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	685a      	ldr	r2, [r3, #4]
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2180      	movs	r1, #128	@ 0x80
 8016ae6:	01c9      	lsls	r1, r1, #7
 8016ae8:	430a      	orrs	r2, r1
 8016aea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8016aec:	e01d      	b.n	8016b2a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	0018      	movs	r0, r3
 8016af2:	f000 fb53 	bl	801719c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8016af6:	e018      	b.n	8016b2a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	2140      	movs	r1, #64	@ 0x40
 8016afc:	0018      	movs	r0, r3
 8016afe:	f000 fe45 	bl	801778c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8016b02:	e012      	b.n	8016b2a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	095b      	lsrs	r3, r3, #5
 8016b08:	001a      	movs	r2, r3
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	4013      	ands	r3, r2
 8016b0e:	d00d      	beq.n	8016b2c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	095b      	lsrs	r3, r3, #5
 8016b14:	001a      	movs	r2, r3
 8016b16:	2301      	movs	r3, #1
 8016b18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016b1a:	d007      	beq.n	8016b2c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8016b1c:	68ba      	ldr	r2, [r7, #8]
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	0011      	movs	r1, r2
 8016b22:	0018      	movs	r0, r3
 8016b24:	f000 fbe2 	bl	80172ec <I2C_ITMasterCplt>
 8016b28:	e000      	b.n	8016b2c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8016b2a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2240      	movs	r2, #64	@ 0x40
 8016b30:	2100      	movs	r1, #0
 8016b32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016b34:	2300      	movs	r3, #0
}
 8016b36:	0018      	movs	r0, r3
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	b007      	add	sp, #28
 8016b3c:	bd90      	pop	{r4, r7, pc}
 8016b3e:	46c0      	nop			@ (mov r8, r8)
 8016b40:	ffff0000 	.word	0xffff0000

08016b44 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8016b44:	b590      	push	{r4, r7, lr}
 8016b46:	b089      	sub	sp, #36	@ 0x24
 8016b48:	af02      	add	r7, sp, #8
 8016b4a:	60f8      	str	r0, [r7, #12]
 8016b4c:	60b9      	str	r1, [r7, #8]
 8016b4e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8016b50:	4b92      	ldr	r3, [pc, #584]	@ (8016d9c <I2C_Mem_ISR_DMA+0x258>)
 8016b52:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	2240      	movs	r2, #64	@ 0x40
 8016b58:	5c9b      	ldrb	r3, [r3, r2]
 8016b5a:	2b01      	cmp	r3, #1
 8016b5c:	d101      	bne.n	8016b62 <I2C_Mem_ISR_DMA+0x1e>
 8016b5e:	2302      	movs	r3, #2
 8016b60:	e118      	b.n	8016d94 <I2C_Mem_ISR_DMA+0x250>
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	2240      	movs	r2, #64	@ 0x40
 8016b66:	2101      	movs	r1, #1
 8016b68:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	091b      	lsrs	r3, r3, #4
 8016b6e:	001a      	movs	r2, r3
 8016b70:	2301      	movs	r3, #1
 8016b72:	4013      	ands	r3, r2
 8016b74:	d019      	beq.n	8016baa <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	091b      	lsrs	r3, r3, #4
 8016b7a:	001a      	movs	r2, r3
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016b80:	d013      	beq.n	8016baa <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	2210      	movs	r2, #16
 8016b88:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b8e:	2204      	movs	r2, #4
 8016b90:	431a      	orrs	r2, r3
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	2120      	movs	r1, #32
 8016b9a:	0018      	movs	r0, r3
 8016b9c:	f001 faa8 	bl	80180f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	0018      	movs	r0, r3
 8016ba4:	f000 ff1d 	bl	80179e2 <I2C_Flush_TXDR>
 8016ba8:	e0ef      	b.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	085b      	lsrs	r3, r3, #1
 8016bae:	001a      	movs	r2, r3
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	4013      	ands	r3, r2
 8016bb4:	d00f      	beq.n	8016bd6 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	085b      	lsrs	r3, r3, #1
 8016bba:	001a      	movs	r2, r3
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016bc0:	d009      	beq.n	8016bd6 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	68fa      	ldr	r2, [r7, #12]
 8016bc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016bca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	2201      	movs	r2, #1
 8016bd0:	4252      	negs	r2, r2
 8016bd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8016bd4:	e0d9      	b.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	09db      	lsrs	r3, r3, #7
 8016bda:	001a      	movs	r2, r3
 8016bdc:	2301      	movs	r3, #1
 8016bde:	4013      	ands	r3, r2
 8016be0:	d060      	beq.n	8016ca4 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	099b      	lsrs	r3, r3, #6
 8016be6:	001a      	movs	r2, r3
 8016be8:	2301      	movs	r3, #1
 8016bea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016bec:	d05a      	beq.n	8016ca4 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	2110      	movs	r1, #16
 8016bf2:	0018      	movs	r0, r3
 8016bf4:	f001 fa7c 	bl	80180f0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bfc:	b29b      	uxth	r3, r3
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d04a      	beq.n	8016c98 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c06:	b29b      	uxth	r3, r3
 8016c08:	2bff      	cmp	r3, #255	@ 0xff
 8016c0a:	d910      	bls.n	8016c2e <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	22ff      	movs	r2, #255	@ 0xff
 8016c10:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016c16:	b299      	uxth	r1, r3
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c1c:	b2da      	uxtb	r2, r3
 8016c1e:	2380      	movs	r3, #128	@ 0x80
 8016c20:	045b      	lsls	r3, r3, #17
 8016c22:	68f8      	ldr	r0, [r7, #12]
 8016c24:	2400      	movs	r4, #0
 8016c26:	9400      	str	r4, [sp, #0]
 8016c28:	f001 fa28 	bl	801807c <I2C_TransferConfig>
 8016c2c:	e011      	b.n	8016c52 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c32:	b29a      	uxth	r2, r3
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016c3c:	b299      	uxth	r1, r3
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c42:	b2da      	uxtb	r2, r3
 8016c44:	2380      	movs	r3, #128	@ 0x80
 8016c46:	049b      	lsls	r3, r3, #18
 8016c48:	68f8      	ldr	r0, [r7, #12]
 8016c4a:	2400      	movs	r4, #0
 8016c4c:	9400      	str	r4, [sp, #0]
 8016c4e:	f001 fa15 	bl	801807c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c56:	b29a      	uxth	r2, r3
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c5c:	1ad3      	subs	r3, r2, r3
 8016c5e:	b29a      	uxth	r2, r3
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	2241      	movs	r2, #65	@ 0x41
 8016c68:	5c9b      	ldrb	r3, [r3, r2]
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	2b22      	cmp	r3, #34	@ 0x22
 8016c6e:	d109      	bne.n	8016c84 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	2180      	movs	r1, #128	@ 0x80
 8016c7c:	0209      	lsls	r1, r1, #8
 8016c7e:	430a      	orrs	r2, r1
 8016c80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016c82:	e082      	b.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	681a      	ldr	r2, [r3, #0]
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	2180      	movs	r1, #128	@ 0x80
 8016c90:	01c9      	lsls	r1, r1, #7
 8016c92:	430a      	orrs	r2, r1
 8016c94:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016c96:	e078      	b.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	2140      	movs	r1, #64	@ 0x40
 8016c9c:	0018      	movs	r0, r3
 8016c9e:	f000 fd75 	bl	801778c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8016ca2:	e072      	b.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	099b      	lsrs	r3, r3, #6
 8016ca8:	001a      	movs	r2, r3
 8016caa:	2301      	movs	r3, #1
 8016cac:	4013      	ands	r3, r2
 8016cae:	d05a      	beq.n	8016d66 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	099b      	lsrs	r3, r3, #6
 8016cb4:	001a      	movs	r2, r3
 8016cb6:	2301      	movs	r3, #1
 8016cb8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016cba:	d054      	beq.n	8016d66 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	2241      	movs	r2, #65	@ 0x41
 8016cc0:	5c9b      	ldrb	r3, [r3, r2]
 8016cc2:	b2db      	uxtb	r3, r3
 8016cc4:	2b22      	cmp	r3, #34	@ 0x22
 8016cc6:	d101      	bne.n	8016ccc <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8016cc8:	4b35      	ldr	r3, [pc, #212]	@ (8016da0 <I2C_Mem_ISR_DMA+0x25c>)
 8016cca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016cd0:	b29b      	uxth	r3, r3
 8016cd2:	2bff      	cmp	r3, #255	@ 0xff
 8016cd4:	d911      	bls.n	8016cfa <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	22ff      	movs	r2, #255	@ 0xff
 8016cda:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016ce0:	b299      	uxth	r1, r3
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ce6:	b2da      	uxtb	r2, r3
 8016ce8:	2380      	movs	r3, #128	@ 0x80
 8016cea:	045c      	lsls	r4, r3, #17
 8016cec:	68f8      	ldr	r0, [r7, #12]
 8016cee:	697b      	ldr	r3, [r7, #20]
 8016cf0:	9300      	str	r3, [sp, #0]
 8016cf2:	0023      	movs	r3, r4
 8016cf4:	f001 f9c2 	bl	801807c <I2C_TransferConfig>
 8016cf8:	e012      	b.n	8016d20 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016cfe:	b29a      	uxth	r2, r3
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d08:	b299      	uxth	r1, r3
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d0e:	b2da      	uxtb	r2, r3
 8016d10:	2380      	movs	r3, #128	@ 0x80
 8016d12:	049c      	lsls	r4, r3, #18
 8016d14:	68f8      	ldr	r0, [r7, #12]
 8016d16:	697b      	ldr	r3, [r7, #20]
 8016d18:	9300      	str	r3, [sp, #0]
 8016d1a:	0023      	movs	r3, r4
 8016d1c:	f001 f9ae 	bl	801807c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016d24:	b29a      	uxth	r2, r3
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d2a:	1ad3      	subs	r3, r2, r3
 8016d2c:	b29a      	uxth	r2, r3
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	2241      	movs	r2, #65	@ 0x41
 8016d36:	5c9b      	ldrb	r3, [r3, r2]
 8016d38:	b2db      	uxtb	r3, r3
 8016d3a:	2b22      	cmp	r3, #34	@ 0x22
 8016d3c:	d109      	bne.n	8016d52 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	681a      	ldr	r2, [r3, #0]
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	2180      	movs	r1, #128	@ 0x80
 8016d4a:	0209      	lsls	r1, r1, #8
 8016d4c:	430a      	orrs	r2, r1
 8016d4e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016d50:	e01b      	b.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	681a      	ldr	r2, [r3, #0]
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	2180      	movs	r1, #128	@ 0x80
 8016d5e:	01c9      	lsls	r1, r1, #7
 8016d60:	430a      	orrs	r2, r1
 8016d62:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016d64:	e011      	b.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	095b      	lsrs	r3, r3, #5
 8016d6a:	001a      	movs	r2, r3
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	4013      	ands	r3, r2
 8016d70:	d00b      	beq.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	095b      	lsrs	r3, r3, #5
 8016d76:	001a      	movs	r2, r3
 8016d78:	2301      	movs	r3, #1
 8016d7a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016d7c:	d005      	beq.n	8016d8a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8016d7e:	68ba      	ldr	r2, [r7, #8]
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	0011      	movs	r1, r2
 8016d84:	0018      	movs	r0, r3
 8016d86:	f000 fab1 	bl	80172ec <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	2240      	movs	r2, #64	@ 0x40
 8016d8e:	2100      	movs	r1, #0
 8016d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016d92:	2300      	movs	r3, #0
}
 8016d94:	0018      	movs	r0, r3
 8016d96:	46bd      	mov	sp, r7
 8016d98:	b007      	add	sp, #28
 8016d9a:	bd90      	pop	{r4, r7, pc}
 8016d9c:	80002000 	.word	0x80002000
 8016da0:	80002400 	.word	0x80002400

08016da4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b088      	sub	sp, #32
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	60f8      	str	r0, [r7, #12]
 8016dac:	60b9      	str	r1, [r7, #8]
 8016dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016db4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8016db6:	2300      	movs	r3, #0
 8016db8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2240      	movs	r2, #64	@ 0x40
 8016dbe:	5c9b      	ldrb	r3, [r3, r2]
 8016dc0:	2b01      	cmp	r3, #1
 8016dc2:	d101      	bne.n	8016dc8 <I2C_Slave_ISR_DMA+0x24>
 8016dc4:	2302      	movs	r3, #2
 8016dc6:	e0dd      	b.n	8016f84 <I2C_Slave_ISR_DMA+0x1e0>
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	2240      	movs	r2, #64	@ 0x40
 8016dcc:	2101      	movs	r1, #1
 8016dce:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016dd0:	68bb      	ldr	r3, [r7, #8]
 8016dd2:	095b      	lsrs	r3, r3, #5
 8016dd4:	001a      	movs	r2, r3
 8016dd6:	2301      	movs	r3, #1
 8016dd8:	4013      	ands	r3, r2
 8016dda:	d00b      	beq.n	8016df4 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	095b      	lsrs	r3, r3, #5
 8016de0:	001a      	movs	r2, r3
 8016de2:	2301      	movs	r3, #1
 8016de4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016de6:	d005      	beq.n	8016df4 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8016de8:	68ba      	ldr	r2, [r7, #8]
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	0011      	movs	r1, r2
 8016dee:	0018      	movs	r0, r3
 8016df0:	f000 fb4e 	bl	8017490 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	091b      	lsrs	r3, r3, #4
 8016df8:	001a      	movs	r2, r3
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	4013      	ands	r3, r2
 8016dfe:	d100      	bne.n	8016e02 <I2C_Slave_ISR_DMA+0x5e>
 8016e00:	e0a9      	b.n	8016f56 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	091b      	lsrs	r3, r3, #4
 8016e06:	001a      	movs	r2, r3
 8016e08:	2301      	movs	r3, #1
 8016e0a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016e0c:	d100      	bne.n	8016e10 <I2C_Slave_ISR_DMA+0x6c>
 8016e0e:	e0a2      	b.n	8016f56 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	0b9b      	lsrs	r3, r3, #14
 8016e14:	001a      	movs	r2, r3
 8016e16:	2301      	movs	r3, #1
 8016e18:	4013      	ands	r3, r2
 8016e1a:	d106      	bne.n	8016e2a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	0bdb      	lsrs	r3, r3, #15
 8016e20:	001a      	movs	r2, r3
 8016e22:	2301      	movs	r3, #1
 8016e24:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016e26:	d100      	bne.n	8016e2a <I2C_Slave_ISR_DMA+0x86>
 8016e28:	e08e      	b.n	8016f48 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d00d      	beq.n	8016e4e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	0bdb      	lsrs	r3, r3, #15
 8016e36:	001a      	movs	r2, r3
 8016e38:	2301      	movs	r3, #1
 8016e3a:	4013      	ands	r3, r2
 8016e3c:	d007      	beq.n	8016e4e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	685b      	ldr	r3, [r3, #4]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d101      	bne.n	8016e4e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d00d      	beq.n	8016e72 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	0b9b      	lsrs	r3, r3, #14
 8016e5a:	001a      	movs	r2, r3
 8016e5c:	2301      	movs	r3, #1
 8016e5e:	4013      	ands	r3, r2
 8016e60:	d007      	beq.n	8016e72 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d101      	bne.n	8016e72 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8016e6e:	2301      	movs	r3, #1
 8016e70:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8016e72:	69fb      	ldr	r3, [r7, #28]
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	d12d      	bne.n	8016ed4 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	2241      	movs	r2, #65	@ 0x41
 8016e7c:	5c9b      	ldrb	r3, [r3, r2]
 8016e7e:	b2db      	uxtb	r3, r3
 8016e80:	2b28      	cmp	r3, #40	@ 0x28
 8016e82:	d10b      	bne.n	8016e9c <I2C_Slave_ISR_DMA+0xf8>
 8016e84:	69ba      	ldr	r2, [r7, #24]
 8016e86:	2380      	movs	r3, #128	@ 0x80
 8016e88:	049b      	lsls	r3, r3, #18
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d106      	bne.n	8016e9c <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8016e8e:	68ba      	ldr	r2, [r7, #8]
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	0011      	movs	r1, r2
 8016e94:	0018      	movs	r0, r3
 8016e96:	f000 fc1f 	bl	80176d8 <I2C_ITListenCplt>
 8016e9a:	e054      	b.n	8016f46 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	2241      	movs	r2, #65	@ 0x41
 8016ea0:	5c9b      	ldrb	r3, [r3, r2]
 8016ea2:	b2db      	uxtb	r3, r3
 8016ea4:	2b29      	cmp	r3, #41	@ 0x29
 8016ea6:	d110      	bne.n	8016eca <I2C_Slave_ISR_DMA+0x126>
 8016ea8:	69bb      	ldr	r3, [r7, #24]
 8016eaa:	4a38      	ldr	r2, [pc, #224]	@ (8016f8c <I2C_Slave_ISR_DMA+0x1e8>)
 8016eac:	4293      	cmp	r3, r2
 8016eae:	d00c      	beq.n	8016eca <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	2210      	movs	r2, #16
 8016eb6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	0018      	movs	r0, r3
 8016ebc:	f000 fd91 	bl	80179e2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	0018      	movs	r0, r3
 8016ec4:	f000 f9ac 	bl	8017220 <I2C_ITSlaveSeqCplt>
 8016ec8:	e03d      	b.n	8016f46 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	2210      	movs	r2, #16
 8016ed0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8016ed2:	e03e      	b.n	8016f52 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2210      	movs	r2, #16
 8016eda:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ee0:	2204      	movs	r2, #4
 8016ee2:	431a      	orrs	r2, r3
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8016ee8:	2317      	movs	r3, #23
 8016eea:	18fb      	adds	r3, r7, r3
 8016eec:	68fa      	ldr	r2, [r7, #12]
 8016eee:	2141      	movs	r1, #65	@ 0x41
 8016ef0:	5c52      	ldrb	r2, [r2, r1]
 8016ef2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016ef4:	69bb      	ldr	r3, [r7, #24]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d004      	beq.n	8016f04 <I2C_Slave_ISR_DMA+0x160>
 8016efa:	69ba      	ldr	r2, [r7, #24]
 8016efc:	2380      	movs	r3, #128	@ 0x80
 8016efe:	045b      	lsls	r3, r3, #17
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d126      	bne.n	8016f52 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016f04:	2217      	movs	r2, #23
 8016f06:	18bb      	adds	r3, r7, r2
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	2b21      	cmp	r3, #33	@ 0x21
 8016f0c:	d003      	beq.n	8016f16 <I2C_Slave_ISR_DMA+0x172>
 8016f0e:	18bb      	adds	r3, r7, r2
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	2b29      	cmp	r3, #41	@ 0x29
 8016f14:	d103      	bne.n	8016f1e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	2221      	movs	r2, #33	@ 0x21
 8016f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8016f1c:	e00b      	b.n	8016f36 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8016f1e:	2217      	movs	r2, #23
 8016f20:	18bb      	adds	r3, r7, r2
 8016f22:	781b      	ldrb	r3, [r3, #0]
 8016f24:	2b22      	cmp	r3, #34	@ 0x22
 8016f26:	d003      	beq.n	8016f30 <I2C_Slave_ISR_DMA+0x18c>
 8016f28:	18bb      	adds	r3, r7, r2
 8016f2a:	781b      	ldrb	r3, [r3, #0]
 8016f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f2e:	d102      	bne.n	8016f36 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	2222      	movs	r2, #34	@ 0x22
 8016f34:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	0011      	movs	r1, r2
 8016f3e:	0018      	movs	r0, r3
 8016f40:	f000 fc24 	bl	801778c <I2C_ITError>
      if (treatdmanack == 1U)
 8016f44:	e005      	b.n	8016f52 <I2C_Slave_ISR_DMA+0x1ae>
 8016f46:	e004      	b.n	8016f52 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	2210      	movs	r2, #16
 8016f4e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016f50:	e013      	b.n	8016f7a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8016f52:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016f54:	e011      	b.n	8016f7a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	08db      	lsrs	r3, r3, #3
 8016f5a:	001a      	movs	r2, r3
 8016f5c:	2301      	movs	r3, #1
 8016f5e:	4013      	ands	r3, r2
 8016f60:	d00b      	beq.n	8016f7a <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	08db      	lsrs	r3, r3, #3
 8016f66:	001a      	movs	r2, r3
 8016f68:	2301      	movs	r3, #1
 8016f6a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016f6c:	d005      	beq.n	8016f7a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8016f6e:	68ba      	ldr	r2, [r7, #8]
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	0011      	movs	r1, r2
 8016f74:	0018      	movs	r0, r3
 8016f76:	f000 f86d 	bl	8017054 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	2240      	movs	r2, #64	@ 0x40
 8016f7e:	2100      	movs	r1, #0
 8016f80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016f82:	2300      	movs	r3, #0
}
 8016f84:	0018      	movs	r0, r3
 8016f86:	46bd      	mov	sp, r7
 8016f88:	b008      	add	sp, #32
 8016f8a:	bd80      	pop	{r7, pc}
 8016f8c:	ffff0000 	.word	0xffff0000

08016f90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8016f90:	b5b0      	push	{r4, r5, r7, lr}
 8016f92:	b086      	sub	sp, #24
 8016f94:	af02      	add	r7, sp, #8
 8016f96:	60f8      	str	r0, [r7, #12]
 8016f98:	000c      	movs	r4, r1
 8016f9a:	0010      	movs	r0, r2
 8016f9c:	0019      	movs	r1, r3
 8016f9e:	250a      	movs	r5, #10
 8016fa0:	197b      	adds	r3, r7, r5
 8016fa2:	1c22      	adds	r2, r4, #0
 8016fa4:	801a      	strh	r2, [r3, #0]
 8016fa6:	2308      	movs	r3, #8
 8016fa8:	18fb      	adds	r3, r7, r3
 8016faa:	1c02      	adds	r2, r0, #0
 8016fac:	801a      	strh	r2, [r3, #0]
 8016fae:	1dbb      	adds	r3, r7, #6
 8016fb0:	1c0a      	adds	r2, r1, #0
 8016fb2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8016fb4:	1dbb      	adds	r3, r7, #6
 8016fb6:	881b      	ldrh	r3, [r3, #0]
 8016fb8:	b2da      	uxtb	r2, r3
 8016fba:	197b      	adds	r3, r7, r5
 8016fbc:	8819      	ldrh	r1, [r3, #0]
 8016fbe:	68f8      	ldr	r0, [r7, #12]
 8016fc0:	4b23      	ldr	r3, [pc, #140]	@ (8017050 <I2C_RequestMemoryRead+0xc0>)
 8016fc2:	9300      	str	r3, [sp, #0]
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	f001 f859 	bl	801807c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016fcc:	6a39      	ldr	r1, [r7, #32]
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	0018      	movs	r0, r3
 8016fd2:	f000 fe4f 	bl	8017c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8016fd6:	1e03      	subs	r3, r0, #0
 8016fd8:	d001      	beq.n	8016fde <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8016fda:	2301      	movs	r3, #1
 8016fdc:	e033      	b.n	8017046 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016fde:	1dbb      	adds	r3, r7, #6
 8016fe0:	881b      	ldrh	r3, [r3, #0]
 8016fe2:	2b01      	cmp	r3, #1
 8016fe4:	d107      	bne.n	8016ff6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016fe6:	2308      	movs	r3, #8
 8016fe8:	18fb      	adds	r3, r7, r3
 8016fea:	881b      	ldrh	r3, [r3, #0]
 8016fec:	b2da      	uxtb	r2, r3
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8016ff4:	e019      	b.n	801702a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016ff6:	2308      	movs	r3, #8
 8016ff8:	18fb      	adds	r3, r7, r3
 8016ffa:	881b      	ldrh	r3, [r3, #0]
 8016ffc:	0a1b      	lsrs	r3, r3, #8
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	b2da      	uxtb	r2, r3
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801700a:	6a39      	ldr	r1, [r7, #32]
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	0018      	movs	r0, r3
 8017010:	f000 fe30 	bl	8017c74 <I2C_WaitOnTXISFlagUntilTimeout>
 8017014:	1e03      	subs	r3, r0, #0
 8017016:	d001      	beq.n	801701c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017018:	2301      	movs	r3, #1
 801701a:	e014      	b.n	8017046 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801701c:	2308      	movs	r3, #8
 801701e:	18fb      	adds	r3, r7, r3
 8017020:	881b      	ldrh	r3, [r3, #0]
 8017022:	b2da      	uxtb	r2, r3
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801702a:	6a3a      	ldr	r2, [r7, #32]
 801702c:	68f8      	ldr	r0, [r7, #12]
 801702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017030:	9300      	str	r3, [sp, #0]
 8017032:	0013      	movs	r3, r2
 8017034:	2200      	movs	r2, #0
 8017036:	2140      	movs	r1, #64	@ 0x40
 8017038:	f000 fdce 	bl	8017bd8 <I2C_WaitOnFlagUntilTimeout>
 801703c:	1e03      	subs	r3, r0, #0
 801703e:	d001      	beq.n	8017044 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017040:	2301      	movs	r3, #1
 8017042:	e000      	b.n	8017046 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017044:	2300      	movs	r3, #0
}
 8017046:	0018      	movs	r0, r3
 8017048:	46bd      	mov	sp, r7
 801704a:	b004      	add	sp, #16
 801704c:	bdb0      	pop	{r4, r5, r7, pc}
 801704e:	46c0      	nop			@ (mov r8, r8)
 8017050:	80002000 	.word	0x80002000

08017054 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017054:	b5b0      	push	{r4, r5, r7, lr}
 8017056:	b084      	sub	sp, #16
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
 801705c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	2241      	movs	r2, #65	@ 0x41
 8017062:	5c9b      	ldrb	r3, [r3, r2]
 8017064:	b2db      	uxtb	r3, r3
 8017066:	001a      	movs	r2, r3
 8017068:	2328      	movs	r3, #40	@ 0x28
 801706a:	4013      	ands	r3, r2
 801706c:	2b28      	cmp	r3, #40	@ 0x28
 801706e:	d000      	beq.n	8017072 <I2C_ITAddrCplt+0x1e>
 8017070:	e088      	b.n	8017184 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	699b      	ldr	r3, [r3, #24]
 8017078:	0c1b      	lsrs	r3, r3, #16
 801707a:	b2da      	uxtb	r2, r3
 801707c:	250f      	movs	r5, #15
 801707e:	197b      	adds	r3, r7, r5
 8017080:	2101      	movs	r1, #1
 8017082:	400a      	ands	r2, r1
 8017084:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	699b      	ldr	r3, [r3, #24]
 801708c:	0c1b      	lsrs	r3, r3, #16
 801708e:	b29a      	uxth	r2, r3
 8017090:	200c      	movs	r0, #12
 8017092:	183b      	adds	r3, r7, r0
 8017094:	21fe      	movs	r1, #254	@ 0xfe
 8017096:	400a      	ands	r2, r1
 8017098:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	689b      	ldr	r3, [r3, #8]
 80170a0:	b29a      	uxth	r2, r3
 80170a2:	240a      	movs	r4, #10
 80170a4:	193b      	adds	r3, r7, r4
 80170a6:	0592      	lsls	r2, r2, #22
 80170a8:	0d92      	lsrs	r2, r2, #22
 80170aa:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	68db      	ldr	r3, [r3, #12]
 80170b2:	b29a      	uxth	r2, r3
 80170b4:	2308      	movs	r3, #8
 80170b6:	18fb      	adds	r3, r7, r3
 80170b8:	21fe      	movs	r1, #254	@ 0xfe
 80170ba:	400a      	ands	r2, r1
 80170bc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	68db      	ldr	r3, [r3, #12]
 80170c2:	2b02      	cmp	r3, #2
 80170c4:	d148      	bne.n	8017158 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80170c6:	0021      	movs	r1, r4
 80170c8:	187b      	adds	r3, r7, r1
 80170ca:	881b      	ldrh	r3, [r3, #0]
 80170cc:	09db      	lsrs	r3, r3, #7
 80170ce:	b29a      	uxth	r2, r3
 80170d0:	183b      	adds	r3, r7, r0
 80170d2:	881b      	ldrh	r3, [r3, #0]
 80170d4:	4053      	eors	r3, r2
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	001a      	movs	r2, r3
 80170da:	2306      	movs	r3, #6
 80170dc:	4013      	ands	r3, r2
 80170de:	d120      	bne.n	8017122 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80170e0:	183b      	adds	r3, r7, r0
 80170e2:	187a      	adds	r2, r7, r1
 80170e4:	8812      	ldrh	r2, [r2, #0]
 80170e6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80170ec:	1c5a      	adds	r2, r3, #1
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80170f6:	2b02      	cmp	r3, #2
 80170f8:	d14c      	bne.n	8017194 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2200      	movs	r2, #0
 80170fe:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	2208      	movs	r2, #8
 8017106:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2240      	movs	r2, #64	@ 0x40
 801710c:	2100      	movs	r1, #0
 801710e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017110:	183b      	adds	r3, r7, r0
 8017112:	881a      	ldrh	r2, [r3, #0]
 8017114:	197b      	adds	r3, r7, r5
 8017116:	7819      	ldrb	r1, [r3, #0]
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	0018      	movs	r0, r3
 801711c:	f7ff f978 	bl	8016410 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017120:	e038      	b.n	8017194 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017122:	240c      	movs	r4, #12
 8017124:	193b      	adds	r3, r7, r4
 8017126:	2208      	movs	r2, #8
 8017128:	18ba      	adds	r2, r7, r2
 801712a:	8812      	ldrh	r2, [r2, #0]
 801712c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801712e:	2380      	movs	r3, #128	@ 0x80
 8017130:	021a      	lsls	r2, r3, #8
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	0011      	movs	r1, r2
 8017136:	0018      	movs	r0, r3
 8017138:	f001 f868 	bl	801820c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	2240      	movs	r2, #64	@ 0x40
 8017140:	2100      	movs	r1, #0
 8017142:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017144:	193b      	adds	r3, r7, r4
 8017146:	881a      	ldrh	r2, [r3, #0]
 8017148:	230f      	movs	r3, #15
 801714a:	18fb      	adds	r3, r7, r3
 801714c:	7819      	ldrb	r1, [r3, #0]
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	0018      	movs	r0, r3
 8017152:	f7ff f95d 	bl	8016410 <HAL_I2C_AddrCallback>
}
 8017156:	e01d      	b.n	8017194 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017158:	2380      	movs	r3, #128	@ 0x80
 801715a:	021a      	lsls	r2, r3, #8
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	0011      	movs	r1, r2
 8017160:	0018      	movs	r0, r3
 8017162:	f001 f853 	bl	801820c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	2240      	movs	r2, #64	@ 0x40
 801716a:	2100      	movs	r1, #0
 801716c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801716e:	230c      	movs	r3, #12
 8017170:	18fb      	adds	r3, r7, r3
 8017172:	881a      	ldrh	r2, [r3, #0]
 8017174:	230f      	movs	r3, #15
 8017176:	18fb      	adds	r3, r7, r3
 8017178:	7819      	ldrb	r1, [r3, #0]
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	0018      	movs	r0, r3
 801717e:	f7ff f947 	bl	8016410 <HAL_I2C_AddrCallback>
}
 8017182:	e007      	b.n	8017194 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	2208      	movs	r2, #8
 801718a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2240      	movs	r2, #64	@ 0x40
 8017190:	2100      	movs	r1, #0
 8017192:	5499      	strb	r1, [r3, r2]
}
 8017194:	46c0      	nop			@ (mov r8, r8)
 8017196:	46bd      	mov	sp, r7
 8017198:	b004      	add	sp, #16
 801719a:	bdb0      	pop	{r4, r5, r7, pc}

0801719c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b082      	sub	sp, #8
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2242      	movs	r2, #66	@ 0x42
 80171a8:	2100      	movs	r1, #0
 80171aa:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	2241      	movs	r2, #65	@ 0x41
 80171b0:	5c9b      	ldrb	r3, [r3, r2]
 80171b2:	b2db      	uxtb	r3, r3
 80171b4:	2b21      	cmp	r3, #33	@ 0x21
 80171b6:	d117      	bne.n	80171e8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2241      	movs	r2, #65	@ 0x41
 80171bc:	2120      	movs	r1, #32
 80171be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2211      	movs	r2, #17
 80171c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2200      	movs	r2, #0
 80171ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2101      	movs	r1, #1
 80171d0:	0018      	movs	r0, r3
 80171d2:	f001 f81b 	bl	801820c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	2240      	movs	r2, #64	@ 0x40
 80171da:	2100      	movs	r1, #0
 80171dc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	0018      	movs	r0, r3
 80171e2:	f7ff f8f5 	bl	80163d0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80171e6:	e016      	b.n	8017216 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	2241      	movs	r2, #65	@ 0x41
 80171ec:	2120      	movs	r1, #32
 80171ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2212      	movs	r2, #18
 80171f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	2200      	movs	r2, #0
 80171fa:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	2102      	movs	r1, #2
 8017200:	0018      	movs	r0, r3
 8017202:	f001 f803 	bl	801820c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	2240      	movs	r2, #64	@ 0x40
 801720a:	2100      	movs	r1, #0
 801720c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	0018      	movs	r0, r3
 8017212:	f7ff f8e5 	bl	80163e0 <HAL_I2C_MasterRxCpltCallback>
}
 8017216:	46c0      	nop			@ (mov r8, r8)
 8017218:	46bd      	mov	sp, r7
 801721a:	b002      	add	sp, #8
 801721c:	bd80      	pop	{r7, pc}
	...

08017220 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b084      	sub	sp, #16
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	2242      	movs	r2, #66	@ 0x42
 8017234:	2100      	movs	r1, #0
 8017236:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	0b9b      	lsrs	r3, r3, #14
 801723c:	001a      	movs	r2, r3
 801723e:	2301      	movs	r3, #1
 8017240:	4013      	ands	r3, r2
 8017242:	d008      	beq.n	8017256 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	4925      	ldr	r1, [pc, #148]	@ (80172e4 <I2C_ITSlaveSeqCplt+0xc4>)
 8017250:	400a      	ands	r2, r1
 8017252:	601a      	str	r2, [r3, #0]
 8017254:	e00d      	b.n	8017272 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	0bdb      	lsrs	r3, r3, #15
 801725a:	001a      	movs	r2, r3
 801725c:	2301      	movs	r3, #1
 801725e:	4013      	ands	r3, r2
 8017260:	d007      	beq.n	8017272 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	681a      	ldr	r2, [r3, #0]
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	491e      	ldr	r1, [pc, #120]	@ (80172e8 <I2C_ITSlaveSeqCplt+0xc8>)
 801726e:	400a      	ands	r2, r1
 8017270:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	2241      	movs	r2, #65	@ 0x41
 8017276:	5c9b      	ldrb	r3, [r3, r2]
 8017278:	b2db      	uxtb	r3, r3
 801727a:	2b29      	cmp	r3, #41	@ 0x29
 801727c:	d114      	bne.n	80172a8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	2241      	movs	r2, #65	@ 0x41
 8017282:	2128      	movs	r1, #40	@ 0x28
 8017284:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	2221      	movs	r2, #33	@ 0x21
 801728a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2101      	movs	r1, #1
 8017290:	0018      	movs	r0, r3
 8017292:	f000 ffbb 	bl	801820c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2240      	movs	r2, #64	@ 0x40
 801729a:	2100      	movs	r1, #0
 801729c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	0018      	movs	r0, r3
 80172a2:	f7ff f8a5 	bl	80163f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80172a6:	e019      	b.n	80172dc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2241      	movs	r2, #65	@ 0x41
 80172ac:	5c9b      	ldrb	r3, [r3, r2]
 80172ae:	b2db      	uxtb	r3, r3
 80172b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80172b2:	d113      	bne.n	80172dc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	2241      	movs	r2, #65	@ 0x41
 80172b8:	2128      	movs	r1, #40	@ 0x28
 80172ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	2222      	movs	r2, #34	@ 0x22
 80172c0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2102      	movs	r1, #2
 80172c6:	0018      	movs	r0, r3
 80172c8:	f000 ffa0 	bl	801820c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	2240      	movs	r2, #64	@ 0x40
 80172d0:	2100      	movs	r1, #0
 80172d2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	0018      	movs	r0, r3
 80172d8:	f7ff f892 	bl	8016400 <HAL_I2C_SlaveRxCpltCallback>
}
 80172dc:	46c0      	nop			@ (mov r8, r8)
 80172de:	46bd      	mov	sp, r7
 80172e0:	b004      	add	sp, #16
 80172e2:	bd80      	pop	{r7, pc}
 80172e4:	ffffbfff 	.word	0xffffbfff
 80172e8:	ffff7fff 	.word	0xffff7fff

080172ec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b086      	sub	sp, #24
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
 80172f4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80172f6:	683b      	ldr	r3, [r7, #0]
 80172f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	2220      	movs	r2, #32
 8017300:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	2241      	movs	r2, #65	@ 0x41
 8017306:	5c9b      	ldrb	r3, [r3, r2]
 8017308:	b2db      	uxtb	r3, r3
 801730a:	2b21      	cmp	r3, #33	@ 0x21
 801730c:	d108      	bne.n	8017320 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2101      	movs	r1, #1
 8017312:	0018      	movs	r0, r3
 8017314:	f000 ff7a 	bl	801820c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2211      	movs	r2, #17
 801731c:	631a      	str	r2, [r3, #48]	@ 0x30
 801731e:	e00d      	b.n	801733c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2241      	movs	r2, #65	@ 0x41
 8017324:	5c9b      	ldrb	r3, [r3, r2]
 8017326:	b2db      	uxtb	r3, r3
 8017328:	2b22      	cmp	r3, #34	@ 0x22
 801732a:	d107      	bne.n	801733c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2102      	movs	r1, #2
 8017330:	0018      	movs	r0, r3
 8017332:	f000 ff6b 	bl	801820c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	2212      	movs	r2, #18
 801733a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	685a      	ldr	r2, [r3, #4]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	4950      	ldr	r1, [pc, #320]	@ (8017488 <I2C_ITMasterCplt+0x19c>)
 8017348:	400a      	ands	r2, r1
 801734a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2200      	movs	r2, #0
 8017350:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	4a4d      	ldr	r2, [pc, #308]	@ (801748c <I2C_ITMasterCplt+0x1a0>)
 8017356:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	091b      	lsrs	r3, r3, #4
 801735c:	001a      	movs	r2, r3
 801735e:	2301      	movs	r3, #1
 8017360:	4013      	ands	r3, r2
 8017362:	d009      	beq.n	8017378 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	2210      	movs	r2, #16
 801736a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017370:	2204      	movs	r2, #4
 8017372:	431a      	orrs	r2, r3
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2241      	movs	r2, #65	@ 0x41
 801737c:	5c9b      	ldrb	r3, [r3, r2]
 801737e:	b2db      	uxtb	r3, r3
 8017380:	2b60      	cmp	r3, #96	@ 0x60
 8017382:	d10b      	bne.n	801739c <I2C_ITMasterCplt+0xb0>
 8017384:	697b      	ldr	r3, [r7, #20]
 8017386:	089b      	lsrs	r3, r3, #2
 8017388:	001a      	movs	r2, r3
 801738a:	2301      	movs	r3, #1
 801738c:	4013      	ands	r3, r2
 801738e:	d005      	beq.n	801739c <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017396:	b2db      	uxtb	r3, r3
 8017398:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801739a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	0018      	movs	r0, r3
 80173a0:	f000 fb1f 	bl	80179e2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173a8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	2241      	movs	r2, #65	@ 0x41
 80173ae:	5c9b      	ldrb	r3, [r3, r2]
 80173b0:	b2db      	uxtb	r3, r3
 80173b2:	2b60      	cmp	r3, #96	@ 0x60
 80173b4:	d002      	beq.n	80173bc <I2C_ITMasterCplt+0xd0>
 80173b6:	693b      	ldr	r3, [r7, #16]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d007      	beq.n	80173cc <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	0011      	movs	r1, r2
 80173c4:	0018      	movs	r0, r3
 80173c6:	f000 f9e1 	bl	801778c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80173ca:	e058      	b.n	801747e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2241      	movs	r2, #65	@ 0x41
 80173d0:	5c9b      	ldrb	r3, [r3, r2]
 80173d2:	b2db      	uxtb	r3, r3
 80173d4:	2b21      	cmp	r3, #33	@ 0x21
 80173d6:	d126      	bne.n	8017426 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2241      	movs	r2, #65	@ 0x41
 80173dc:	2120      	movs	r1, #32
 80173de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	2200      	movs	r2, #0
 80173e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	2242      	movs	r2, #66	@ 0x42
 80173ea:	5c9b      	ldrb	r3, [r3, r2]
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	2b40      	cmp	r3, #64	@ 0x40
 80173f0:	d10c      	bne.n	801740c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	2242      	movs	r2, #66	@ 0x42
 80173f6:	2100      	movs	r1, #0
 80173f8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	2240      	movs	r2, #64	@ 0x40
 80173fe:	2100      	movs	r1, #0
 8017400:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	0018      	movs	r0, r3
 8017406:	f7ff f81b 	bl	8016440 <HAL_I2C_MemTxCpltCallback>
}
 801740a:	e038      	b.n	801747e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	2242      	movs	r2, #66	@ 0x42
 8017410:	2100      	movs	r1, #0
 8017412:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2240      	movs	r2, #64	@ 0x40
 8017418:	2100      	movs	r1, #0
 801741a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	0018      	movs	r0, r3
 8017420:	f7fe ffd6 	bl	80163d0 <HAL_I2C_MasterTxCpltCallback>
}
 8017424:	e02b      	b.n	801747e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	2241      	movs	r2, #65	@ 0x41
 801742a:	5c9b      	ldrb	r3, [r3, r2]
 801742c:	b2db      	uxtb	r3, r3
 801742e:	2b22      	cmp	r3, #34	@ 0x22
 8017430:	d125      	bne.n	801747e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2241      	movs	r2, #65	@ 0x41
 8017436:	2120      	movs	r1, #32
 8017438:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	2200      	movs	r2, #0
 801743e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2242      	movs	r2, #66	@ 0x42
 8017444:	5c9b      	ldrb	r3, [r3, r2]
 8017446:	b2db      	uxtb	r3, r3
 8017448:	2b40      	cmp	r3, #64	@ 0x40
 801744a:	d10c      	bne.n	8017466 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	2242      	movs	r2, #66	@ 0x42
 8017450:	2100      	movs	r1, #0
 8017452:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2240      	movs	r2, #64	@ 0x40
 8017458:	2100      	movs	r1, #0
 801745a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	0018      	movs	r0, r3
 8017460:	f7fe fff6 	bl	8016450 <HAL_I2C_MemRxCpltCallback>
}
 8017464:	e00b      	b.n	801747e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	2242      	movs	r2, #66	@ 0x42
 801746a:	2100      	movs	r1, #0
 801746c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	2240      	movs	r2, #64	@ 0x40
 8017472:	2100      	movs	r1, #0
 8017474:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	0018      	movs	r0, r3
 801747a:	f7fe ffb1 	bl	80163e0 <HAL_I2C_MasterRxCpltCallback>
}
 801747e:	46c0      	nop			@ (mov r8, r8)
 8017480:	46bd      	mov	sp, r7
 8017482:	b006      	add	sp, #24
 8017484:	bd80      	pop	{r7, pc}
 8017486:	46c0      	nop			@ (mov r8, r8)
 8017488:	fe00e800 	.word	0xfe00e800
 801748c:	ffff0000 	.word	0xffff0000

08017490 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b086      	sub	sp, #24
 8017494:	af00      	add	r7, sp, #0
 8017496:	6078      	str	r0, [r7, #4]
 8017498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80174a2:	683b      	ldr	r3, [r7, #0]
 80174a4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80174a6:	200f      	movs	r0, #15
 80174a8:	183b      	adds	r3, r7, r0
 80174aa:	687a      	ldr	r2, [r7, #4]
 80174ac:	2141      	movs	r1, #65	@ 0x41
 80174ae:	5c52      	ldrb	r2, [r2, r1]
 80174b0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	2220      	movs	r2, #32
 80174b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80174ba:	183b      	adds	r3, r7, r0
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	2b21      	cmp	r3, #33	@ 0x21
 80174c0:	d003      	beq.n	80174ca <I2C_ITSlaveCplt+0x3a>
 80174c2:	183b      	adds	r3, r7, r0
 80174c4:	781b      	ldrb	r3, [r3, #0]
 80174c6:	2b29      	cmp	r3, #41	@ 0x29
 80174c8:	d109      	bne.n	80174de <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80174ca:	4a7d      	ldr	r2, [pc, #500]	@ (80176c0 <I2C_ITSlaveCplt+0x230>)
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	0011      	movs	r1, r2
 80174d0:	0018      	movs	r0, r3
 80174d2:	f000 fe9b 	bl	801820c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2221      	movs	r2, #33	@ 0x21
 80174da:	631a      	str	r2, [r3, #48]	@ 0x30
 80174dc:	e011      	b.n	8017502 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80174de:	220f      	movs	r2, #15
 80174e0:	18bb      	adds	r3, r7, r2
 80174e2:	781b      	ldrb	r3, [r3, #0]
 80174e4:	2b22      	cmp	r3, #34	@ 0x22
 80174e6:	d003      	beq.n	80174f0 <I2C_ITSlaveCplt+0x60>
 80174e8:	18bb      	adds	r3, r7, r2
 80174ea:	781b      	ldrb	r3, [r3, #0]
 80174ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80174ee:	d108      	bne.n	8017502 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80174f0:	4a74      	ldr	r2, [pc, #464]	@ (80176c4 <I2C_ITSlaveCplt+0x234>)
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	0011      	movs	r1, r2
 80174f6:	0018      	movs	r0, r3
 80174f8:	f000 fe88 	bl	801820c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	2222      	movs	r2, #34	@ 0x22
 8017500:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	685a      	ldr	r2, [r3, #4]
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	2180      	movs	r1, #128	@ 0x80
 801750e:	0209      	lsls	r1, r1, #8
 8017510:	430a      	orrs	r2, r1
 8017512:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	685a      	ldr	r2, [r3, #4]
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	496a      	ldr	r1, [pc, #424]	@ (80176c8 <I2C_ITSlaveCplt+0x238>)
 8017520:	400a      	ands	r2, r1
 8017522:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	0018      	movs	r0, r3
 8017528:	f000 fa5b 	bl	80179e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801752c:	693b      	ldr	r3, [r7, #16]
 801752e:	0b9b      	lsrs	r3, r3, #14
 8017530:	001a      	movs	r2, r3
 8017532:	2301      	movs	r3, #1
 8017534:	4013      	ands	r3, r2
 8017536:	d013      	beq.n	8017560 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	681a      	ldr	r2, [r3, #0]
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	4962      	ldr	r1, [pc, #392]	@ (80176cc <I2C_ITSlaveCplt+0x23c>)
 8017544:	400a      	ands	r2, r1
 8017546:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801754c:	2b00      	cmp	r3, #0
 801754e:	d020      	beq.n	8017592 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	685b      	ldr	r3, [r3, #4]
 8017558:	b29a      	uxth	r2, r3
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801755e:	e018      	b.n	8017592 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017560:	693b      	ldr	r3, [r7, #16]
 8017562:	0bdb      	lsrs	r3, r3, #15
 8017564:	001a      	movs	r2, r3
 8017566:	2301      	movs	r3, #1
 8017568:	4013      	ands	r3, r2
 801756a:	d012      	beq.n	8017592 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	4956      	ldr	r1, [pc, #344]	@ (80176d0 <I2C_ITSlaveCplt+0x240>)
 8017578:	400a      	ands	r2, r1
 801757a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017580:	2b00      	cmp	r3, #0
 8017582:	d006      	beq.n	8017592 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	685b      	ldr	r3, [r3, #4]
 801758c:	b29a      	uxth	r2, r3
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	089b      	lsrs	r3, r3, #2
 8017596:	001a      	movs	r2, r3
 8017598:	2301      	movs	r3, #1
 801759a:	4013      	ands	r3, r2
 801759c:	d020      	beq.n	80175e0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801759e:	697b      	ldr	r3, [r7, #20]
 80175a0:	2204      	movs	r2, #4
 80175a2:	4393      	bics	r3, r2
 80175a4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175b0:	b2d2      	uxtb	r2, r2
 80175b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175b8:	1c5a      	adds	r2, r3, #1
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d00c      	beq.n	80175e0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175ca:	3b01      	subs	r3, #1
 80175cc:	b29a      	uxth	r2, r3
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	3b01      	subs	r3, #1
 80175da:	b29a      	uxth	r2, r3
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175e4:	b29b      	uxth	r3, r3
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d005      	beq.n	80175f6 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175ee:	2204      	movs	r2, #4
 80175f0:	431a      	orrs	r2, r3
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	2242      	movs	r2, #66	@ 0x42
 80175fa:	2100      	movs	r1, #0
 80175fc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	2200      	movs	r2, #0
 8017602:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017608:	2b00      	cmp	r3, #0
 801760a:	d013      	beq.n	8017634 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	0011      	movs	r1, r2
 8017614:	0018      	movs	r0, r3
 8017616:	f000 f8b9 	bl	801778c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	2241      	movs	r2, #65	@ 0x41
 801761e:	5c9b      	ldrb	r3, [r3, r2]
 8017620:	b2db      	uxtb	r3, r3
 8017622:	2b28      	cmp	r3, #40	@ 0x28
 8017624:	d147      	bne.n	80176b6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8017626:	697a      	ldr	r2, [r7, #20]
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	0011      	movs	r1, r2
 801762c:	0018      	movs	r0, r3
 801762e:	f000 f853 	bl	80176d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017632:	e040      	b.n	80176b6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017638:	4a26      	ldr	r2, [pc, #152]	@ (80176d4 <I2C_ITSlaveCplt+0x244>)
 801763a:	4293      	cmp	r3, r2
 801763c:	d016      	beq.n	801766c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	0018      	movs	r0, r3
 8017642:	f7ff fded 	bl	8017220 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	4a22      	ldr	r2, [pc, #136]	@ (80176d4 <I2C_ITSlaveCplt+0x244>)
 801764a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2241      	movs	r2, #65	@ 0x41
 8017650:	2120      	movs	r1, #32
 8017652:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2200      	movs	r2, #0
 8017658:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	2240      	movs	r2, #64	@ 0x40
 801765e:	2100      	movs	r1, #0
 8017660:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	0018      	movs	r0, r3
 8017666:	f7fe fee3 	bl	8016430 <HAL_I2C_ListenCpltCallback>
}
 801766a:	e024      	b.n	80176b6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2241      	movs	r2, #65	@ 0x41
 8017670:	5c9b      	ldrb	r3, [r3, r2]
 8017672:	b2db      	uxtb	r3, r3
 8017674:	2b22      	cmp	r3, #34	@ 0x22
 8017676:	d10f      	bne.n	8017698 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2241      	movs	r2, #65	@ 0x41
 801767c:	2120      	movs	r1, #32
 801767e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2200      	movs	r2, #0
 8017684:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	2240      	movs	r2, #64	@ 0x40
 801768a:	2100      	movs	r1, #0
 801768c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	0018      	movs	r0, r3
 8017692:	f7fe feb5 	bl	8016400 <HAL_I2C_SlaveRxCpltCallback>
}
 8017696:	e00e      	b.n	80176b6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	2241      	movs	r2, #65	@ 0x41
 801769c:	2120      	movs	r1, #32
 801769e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	2200      	movs	r2, #0
 80176a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2240      	movs	r2, #64	@ 0x40
 80176aa:	2100      	movs	r1, #0
 80176ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	0018      	movs	r0, r3
 80176b2:	f7fe fe9d 	bl	80163f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80176b6:	46c0      	nop			@ (mov r8, r8)
 80176b8:	46bd      	mov	sp, r7
 80176ba:	b006      	add	sp, #24
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	46c0      	nop			@ (mov r8, r8)
 80176c0:	00008001 	.word	0x00008001
 80176c4:	00008002 	.word	0x00008002
 80176c8:	fe00e800 	.word	0xfe00e800
 80176cc:	ffffbfff 	.word	0xffffbfff
 80176d0:	ffff7fff 	.word	0xffff7fff
 80176d4:	ffff0000 	.word	0xffff0000

080176d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	4a27      	ldr	r2, [pc, #156]	@ (8017784 <I2C_ITListenCplt+0xac>)
 80176e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	2200      	movs	r2, #0
 80176ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2241      	movs	r2, #65	@ 0x41
 80176f2:	2120      	movs	r1, #32
 80176f4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	2242      	movs	r2, #66	@ 0x42
 80176fa:	2100      	movs	r1, #0
 80176fc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	2200      	movs	r2, #0
 8017702:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	089b      	lsrs	r3, r3, #2
 8017708:	001a      	movs	r2, r3
 801770a:	2301      	movs	r3, #1
 801770c:	4013      	ands	r3, r2
 801770e:	d022      	beq.n	8017756 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801771a:	b2d2      	uxtb	r2, r2
 801771c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017722:	1c5a      	adds	r2, r3, #1
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801772c:	2b00      	cmp	r3, #0
 801772e:	d012      	beq.n	8017756 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017734:	3b01      	subs	r3, #1
 8017736:	b29a      	uxth	r2, r3
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017740:	b29b      	uxth	r3, r3
 8017742:	3b01      	subs	r3, #1
 8017744:	b29a      	uxth	r2, r3
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801774e:	2204      	movs	r2, #4
 8017750:	431a      	orrs	r2, r3
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017756:	4a0c      	ldr	r2, [pc, #48]	@ (8017788 <I2C_ITListenCplt+0xb0>)
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	0011      	movs	r1, r2
 801775c:	0018      	movs	r0, r3
 801775e:	f000 fd55 	bl	801820c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2210      	movs	r2, #16
 8017768:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2240      	movs	r2, #64	@ 0x40
 801776e:	2100      	movs	r1, #0
 8017770:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	0018      	movs	r0, r3
 8017776:	f7fe fe5b 	bl	8016430 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801777a:	46c0      	nop			@ (mov r8, r8)
 801777c:	46bd      	mov	sp, r7
 801777e:	b002      	add	sp, #8
 8017780:	bd80      	pop	{r7, pc}
 8017782:	46c0      	nop			@ (mov r8, r8)
 8017784:	ffff0000 	.word	0xffff0000
 8017788:	00008003 	.word	0x00008003

0801778c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
 8017794:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8017796:	200f      	movs	r0, #15
 8017798:	183b      	adds	r3, r7, r0
 801779a:	687a      	ldr	r2, [r7, #4]
 801779c:	2141      	movs	r1, #65	@ 0x41
 801779e:	5c52      	ldrb	r2, [r2, r1]
 80177a0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2242      	movs	r2, #66	@ 0x42
 80177a6:	2100      	movs	r1, #0
 80177a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	4a72      	ldr	r2, [pc, #456]	@ (8017978 <I2C_ITError+0x1ec>)
 80177ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2200      	movs	r2, #0
 80177b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80177ba:	683b      	ldr	r3, [r7, #0]
 80177bc:	431a      	orrs	r2, r3
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80177c2:	183b      	adds	r3, r7, r0
 80177c4:	781b      	ldrb	r3, [r3, #0]
 80177c6:	2b28      	cmp	r3, #40	@ 0x28
 80177c8:	d007      	beq.n	80177da <I2C_ITError+0x4e>
 80177ca:	183b      	adds	r3, r7, r0
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	2b29      	cmp	r3, #41	@ 0x29
 80177d0:	d003      	beq.n	80177da <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80177d2:	183b      	adds	r3, r7, r0
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80177d8:	d10c      	bne.n	80177f4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	2103      	movs	r1, #3
 80177de:	0018      	movs	r0, r3
 80177e0:	f000 fd14 	bl	801820c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	2241      	movs	r2, #65	@ 0x41
 80177e8:	2128      	movs	r1, #40	@ 0x28
 80177ea:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	4a63      	ldr	r2, [pc, #396]	@ (801797c <I2C_ITError+0x1f0>)
 80177f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80177f2:	e032      	b.n	801785a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80177f4:	4a62      	ldr	r2, [pc, #392]	@ (8017980 <I2C_ITError+0x1f4>)
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	0011      	movs	r1, r2
 80177fa:	0018      	movs	r0, r3
 80177fc:	f000 fd06 	bl	801820c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	0018      	movs	r0, r3
 8017804:	f000 f8ed 	bl	80179e2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2241      	movs	r2, #65	@ 0x41
 801780c:	5c9b      	ldrb	r3, [r3, r2]
 801780e:	b2db      	uxtb	r3, r3
 8017810:	2b60      	cmp	r3, #96	@ 0x60
 8017812:	d01f      	beq.n	8017854 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2241      	movs	r2, #65	@ 0x41
 8017818:	2120      	movs	r1, #32
 801781a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	699b      	ldr	r3, [r3, #24]
 8017822:	2220      	movs	r2, #32
 8017824:	4013      	ands	r3, r2
 8017826:	2b20      	cmp	r3, #32
 8017828:	d114      	bne.n	8017854 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	699b      	ldr	r3, [r3, #24]
 8017830:	2210      	movs	r2, #16
 8017832:	4013      	ands	r3, r2
 8017834:	2b10      	cmp	r3, #16
 8017836:	d109      	bne.n	801784c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	2210      	movs	r2, #16
 801783e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017844:	2204      	movs	r2, #4
 8017846:	431a      	orrs	r2, r3
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	2220      	movs	r2, #32
 8017852:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2200      	movs	r2, #0
 8017858:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801785e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017864:	2b00      	cmp	r3, #0
 8017866:	d03b      	beq.n	80178e0 <I2C_ITError+0x154>
 8017868:	68bb      	ldr	r3, [r7, #8]
 801786a:	2b11      	cmp	r3, #17
 801786c:	d002      	beq.n	8017874 <I2C_ITError+0xe8>
 801786e:	68bb      	ldr	r3, [r7, #8]
 8017870:	2b21      	cmp	r3, #33	@ 0x21
 8017872:	d135      	bne.n	80178e0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	681a      	ldr	r2, [r3, #0]
 801787a:	2380      	movs	r3, #128	@ 0x80
 801787c:	01db      	lsls	r3, r3, #7
 801787e:	401a      	ands	r2, r3
 8017880:	2380      	movs	r3, #128	@ 0x80
 8017882:	01db      	lsls	r3, r3, #7
 8017884:	429a      	cmp	r2, r3
 8017886:	d107      	bne.n	8017898 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	681a      	ldr	r2, [r3, #0]
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	493c      	ldr	r1, [pc, #240]	@ (8017984 <I2C_ITError+0x1f8>)
 8017894:	400a      	ands	r2, r1
 8017896:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801789c:	0018      	movs	r0, r3
 801789e:	f7fd fa56 	bl	8014d4e <HAL_DMA_GetState>
 80178a2:	0003      	movs	r3, r0
 80178a4:	2b01      	cmp	r3, #1
 80178a6:	d016      	beq.n	80178d6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178ac:	4a36      	ldr	r2, [pc, #216]	@ (8017988 <I2C_ITError+0x1fc>)
 80178ae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	2240      	movs	r2, #64	@ 0x40
 80178b4:	2100      	movs	r1, #0
 80178b6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178bc:	0018      	movs	r0, r3
 80178be:	f7fd f951 	bl	8014b64 <HAL_DMA_Abort_IT>
 80178c2:	1e03      	subs	r3, r0, #0
 80178c4:	d051      	beq.n	801796a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178d0:	0018      	movs	r0, r3
 80178d2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80178d4:	e049      	b.n	801796a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	0018      	movs	r0, r3
 80178da:	f000 f859 	bl	8017990 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80178de:	e044      	b.n	801796a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d03b      	beq.n	8017960 <I2C_ITError+0x1d4>
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	2b12      	cmp	r3, #18
 80178ec:	d002      	beq.n	80178f4 <I2C_ITError+0x168>
 80178ee:	68bb      	ldr	r3, [r7, #8]
 80178f0:	2b22      	cmp	r3, #34	@ 0x22
 80178f2:	d135      	bne.n	8017960 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	681a      	ldr	r2, [r3, #0]
 80178fa:	2380      	movs	r3, #128	@ 0x80
 80178fc:	021b      	lsls	r3, r3, #8
 80178fe:	401a      	ands	r2, r3
 8017900:	2380      	movs	r3, #128	@ 0x80
 8017902:	021b      	lsls	r3, r3, #8
 8017904:	429a      	cmp	r2, r3
 8017906:	d107      	bne.n	8017918 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	681a      	ldr	r2, [r3, #0]
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	491e      	ldr	r1, [pc, #120]	@ (801798c <I2C_ITError+0x200>)
 8017914:	400a      	ands	r2, r1
 8017916:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801791c:	0018      	movs	r0, r3
 801791e:	f7fd fa16 	bl	8014d4e <HAL_DMA_GetState>
 8017922:	0003      	movs	r3, r0
 8017924:	2b01      	cmp	r3, #1
 8017926:	d016      	beq.n	8017956 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801792c:	4a16      	ldr	r2, [pc, #88]	@ (8017988 <I2C_ITError+0x1fc>)
 801792e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2240      	movs	r2, #64	@ 0x40
 8017934:	2100      	movs	r1, #0
 8017936:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801793c:	0018      	movs	r0, r3
 801793e:	f7fd f911 	bl	8014b64 <HAL_DMA_Abort_IT>
 8017942:	1e03      	subs	r3, r0, #0
 8017944:	d013      	beq.n	801796e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801794a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017950:	0018      	movs	r0, r3
 8017952:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017954:	e00b      	b.n	801796e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	0018      	movs	r0, r3
 801795a:	f000 f819 	bl	8017990 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801795e:	e006      	b.n	801796e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	0018      	movs	r0, r3
 8017964:	f000 f814 	bl	8017990 <I2C_TreatErrorCallback>
  }
}
 8017968:	e002      	b.n	8017970 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801796a:	46c0      	nop			@ (mov r8, r8)
 801796c:	e000      	b.n	8017970 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801796e:	46c0      	nop			@ (mov r8, r8)
}
 8017970:	46c0      	nop			@ (mov r8, r8)
 8017972:	46bd      	mov	sp, r7
 8017974:	b004      	add	sp, #16
 8017976:	bd80      	pop	{r7, pc}
 8017978:	ffff0000 	.word	0xffff0000
 801797c:	08016705 	.word	0x08016705
 8017980:	00008003 	.word	0x00008003
 8017984:	ffffbfff 	.word	0xffffbfff
 8017988:	08017b9b 	.word	0x08017b9b
 801798c:	ffff7fff 	.word	0xffff7fff

08017990 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2241      	movs	r2, #65	@ 0x41
 801799c:	5c9b      	ldrb	r3, [r3, r2]
 801799e:	b2db      	uxtb	r3, r3
 80179a0:	2b60      	cmp	r3, #96	@ 0x60
 80179a2:	d10f      	bne.n	80179c4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2241      	movs	r2, #65	@ 0x41
 80179a8:	2120      	movs	r1, #32
 80179aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2200      	movs	r2, #0
 80179b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2240      	movs	r2, #64	@ 0x40
 80179b6:	2100      	movs	r1, #0
 80179b8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	0018      	movs	r0, r3
 80179be:	f7fe fd57 	bl	8016470 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80179c2:	e00a      	b.n	80179da <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2200      	movs	r2, #0
 80179c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	2240      	movs	r2, #64	@ 0x40
 80179ce:	2100      	movs	r1, #0
 80179d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	0018      	movs	r0, r3
 80179d6:	f7fe fd43 	bl	8016460 <HAL_I2C_ErrorCallback>
}
 80179da:	46c0      	nop			@ (mov r8, r8)
 80179dc:	46bd      	mov	sp, r7
 80179de:	b002      	add	sp, #8
 80179e0:	bd80      	pop	{r7, pc}

080179e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80179e2:	b580      	push	{r7, lr}
 80179e4:	b082      	sub	sp, #8
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	699b      	ldr	r3, [r3, #24]
 80179f0:	2202      	movs	r2, #2
 80179f2:	4013      	ands	r3, r2
 80179f4:	2b02      	cmp	r3, #2
 80179f6:	d103      	bne.n	8017a00 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	2200      	movs	r2, #0
 80179fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	699b      	ldr	r3, [r3, #24]
 8017a06:	2201      	movs	r2, #1
 8017a08:	4013      	ands	r3, r2
 8017a0a:	2b01      	cmp	r3, #1
 8017a0c:	d007      	beq.n	8017a1e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	699a      	ldr	r2, [r3, #24]
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	2101      	movs	r1, #1
 8017a1a:	430a      	orrs	r2, r1
 8017a1c:	619a      	str	r2, [r3, #24]
  }
}
 8017a1e:	46c0      	nop			@ (mov r8, r8)
 8017a20:	46bd      	mov	sp, r7
 8017a22:	b002      	add	sp, #8
 8017a24:	bd80      	pop	{r7, pc}
	...

08017a28 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a34:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	681a      	ldr	r2, [r3, #0]
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	4920      	ldr	r1, [pc, #128]	@ (8017ac4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8017a42:	400a      	ands	r2, r1
 8017a44:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017a4a:	b29b      	uxth	r3, r3
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d105      	bne.n	8017a5c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	2120      	movs	r1, #32
 8017a54:	0018      	movs	r0, r3
 8017a56:	f000 fb4b 	bl	80180f0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8017a5a:	e02e      	b.n	8017aba <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a60:	68fa      	ldr	r2, [r7, #12]
 8017a62:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017a64:	189a      	adds	r2, r3, r2
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017a6e:	b29b      	uxth	r3, r3
 8017a70:	2bff      	cmp	r3, #255	@ 0xff
 8017a72:	d903      	bls.n	8017a7c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	22ff      	movs	r2, #255	@ 0xff
 8017a78:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017a7a:	e004      	b.n	8017a86 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a8e:	0019      	movs	r1, r3
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	3328      	adds	r3, #40	@ 0x28
 8017a96:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8017a9c:	f7fc ffbc 	bl	8014a18 <HAL_DMA_Start_IT>
 8017aa0:	1e03      	subs	r3, r0, #0
 8017aa2:	d005      	beq.n	8017ab0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	2110      	movs	r1, #16
 8017aa8:	0018      	movs	r0, r3
 8017aaa:	f7ff fe6f 	bl	801778c <I2C_ITError>
}
 8017aae:	e004      	b.n	8017aba <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	2140      	movs	r1, #64	@ 0x40
 8017ab4:	0018      	movs	r0, r3
 8017ab6:	f000 fb1b 	bl	80180f0 <I2C_Enable_IRQ>
}
 8017aba:	46c0      	nop			@ (mov r8, r8)
 8017abc:	46bd      	mov	sp, r7
 8017abe:	b004      	add	sp, #16
 8017ac0:	bd80      	pop	{r7, pc}
 8017ac2:	46c0      	nop			@ (mov r8, r8)
 8017ac4:	ffffbfff 	.word	0xffffbfff

08017ac8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ad4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	681a      	ldr	r2, [r3, #0]
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	4920      	ldr	r1, [pc, #128]	@ (8017b64 <I2C_DMAMasterReceiveCplt+0x9c>)
 8017ae2:	400a      	ands	r2, r1
 8017ae4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017aea:	b29b      	uxth	r3, r3
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d105      	bne.n	8017afc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	2120      	movs	r1, #32
 8017af4:	0018      	movs	r0, r3
 8017af6:	f000 fafb 	bl	80180f0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8017afa:	e02e      	b.n	8017b5a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b00:	68fa      	ldr	r2, [r7, #12]
 8017b02:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017b04:	189a      	adds	r2, r3, r2
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	2bff      	cmp	r3, #255	@ 0xff
 8017b12:	d903      	bls.n	8017b1c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	22ff      	movs	r2, #255	@ 0xff
 8017b18:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017b1a:	e004      	b.n	8017b26 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017b20:	b29a      	uxth	r2, r3
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	3324      	adds	r3, #36	@ 0x24
 8017b30:	0019      	movs	r1, r3
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b36:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8017b3c:	f7fc ff6c 	bl	8014a18 <HAL_DMA_Start_IT>
 8017b40:	1e03      	subs	r3, r0, #0
 8017b42:	d005      	beq.n	8017b50 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	2110      	movs	r1, #16
 8017b48:	0018      	movs	r0, r3
 8017b4a:	f7ff fe1f 	bl	801778c <I2C_ITError>
}
 8017b4e:	e004      	b.n	8017b5a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	2140      	movs	r1, #64	@ 0x40
 8017b54:	0018      	movs	r0, r3
 8017b56:	f000 facb 	bl	80180f0 <I2C_Enable_IRQ>
}
 8017b5a:	46c0      	nop			@ (mov r8, r8)
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	b004      	add	sp, #16
 8017b60:	bd80      	pop	{r7, pc}
 8017b62:	46c0      	nop			@ (mov r8, r8)
 8017b64:	ffff7fff 	.word	0xffff7fff

08017b68 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b084      	sub	sp, #16
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b74:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	685a      	ldr	r2, [r3, #4]
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	2180      	movs	r1, #128	@ 0x80
 8017b82:	0209      	lsls	r1, r1, #8
 8017b84:	430a      	orrs	r2, r1
 8017b86:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	2110      	movs	r1, #16
 8017b8c:	0018      	movs	r0, r3
 8017b8e:	f7ff fdfd 	bl	801778c <I2C_ITError>
}
 8017b92:	46c0      	nop			@ (mov r8, r8)
 8017b94:	46bd      	mov	sp, r7
 8017b96:	b004      	add	sp, #16
 8017b98:	bd80      	pop	{r7, pc}

08017b9a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8017b9a:	b580      	push	{r7, lr}
 8017b9c:	b084      	sub	sp, #16
 8017b9e:	af00      	add	r7, sp, #0
 8017ba0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ba6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d003      	beq.n	8017bb8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d003      	beq.n	8017bc8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	0018      	movs	r0, r3
 8017bcc:	f7ff fee0 	bl	8017990 <I2C_TreatErrorCallback>
}
 8017bd0:	46c0      	nop			@ (mov r8, r8)
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	b004      	add	sp, #16
 8017bd6:	bd80      	pop	{r7, pc}

08017bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b084      	sub	sp, #16
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	60f8      	str	r0, [r7, #12]
 8017be0:	60b9      	str	r1, [r7, #8]
 8017be2:	603b      	str	r3, [r7, #0]
 8017be4:	1dfb      	adds	r3, r7, #7
 8017be6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017be8:	e030      	b.n	8017c4c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	3301      	adds	r3, #1
 8017bee:	d02d      	beq.n	8017c4c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017bf0:	f7fc f9c0 	bl	8013f74 <HAL_GetTick>
 8017bf4:	0002      	movs	r2, r0
 8017bf6:	69bb      	ldr	r3, [r7, #24]
 8017bf8:	1ad3      	subs	r3, r2, r3
 8017bfa:	683a      	ldr	r2, [r7, #0]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d302      	bcc.n	8017c06 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8017c00:	683b      	ldr	r3, [r7, #0]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d122      	bne.n	8017c4c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	699b      	ldr	r3, [r3, #24]
 8017c0c:	68ba      	ldr	r2, [r7, #8]
 8017c0e:	4013      	ands	r3, r2
 8017c10:	68ba      	ldr	r2, [r7, #8]
 8017c12:	1ad3      	subs	r3, r2, r3
 8017c14:	425a      	negs	r2, r3
 8017c16:	4153      	adcs	r3, r2
 8017c18:	b2db      	uxtb	r3, r3
 8017c1a:	001a      	movs	r2, r3
 8017c1c:	1dfb      	adds	r3, r7, #7
 8017c1e:	781b      	ldrb	r3, [r3, #0]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d113      	bne.n	8017c4c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c28:	2220      	movs	r2, #32
 8017c2a:	431a      	orrs	r2, r3
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	2241      	movs	r2, #65	@ 0x41
 8017c34:	2120      	movs	r1, #32
 8017c36:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	2242      	movs	r2, #66	@ 0x42
 8017c3c:	2100      	movs	r1, #0
 8017c3e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	2240      	movs	r2, #64	@ 0x40
 8017c44:	2100      	movs	r1, #0
 8017c46:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8017c48:	2301      	movs	r3, #1
 8017c4a:	e00f      	b.n	8017c6c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	699b      	ldr	r3, [r3, #24]
 8017c52:	68ba      	ldr	r2, [r7, #8]
 8017c54:	4013      	ands	r3, r2
 8017c56:	68ba      	ldr	r2, [r7, #8]
 8017c58:	1ad3      	subs	r3, r2, r3
 8017c5a:	425a      	negs	r2, r3
 8017c5c:	4153      	adcs	r3, r2
 8017c5e:	b2db      	uxtb	r3, r3
 8017c60:	001a      	movs	r2, r3
 8017c62:	1dfb      	adds	r3, r7, #7
 8017c64:	781b      	ldrb	r3, [r3, #0]
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d0bf      	beq.n	8017bea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017c6a:	2300      	movs	r3, #0
}
 8017c6c:	0018      	movs	r0, r3
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	b004      	add	sp, #16
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b084      	sub	sp, #16
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	60f8      	str	r0, [r7, #12]
 8017c7c:	60b9      	str	r1, [r7, #8]
 8017c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017c80:	e032      	b.n	8017ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017c82:	687a      	ldr	r2, [r7, #4]
 8017c84:	68b9      	ldr	r1, [r7, #8]
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	0018      	movs	r0, r3
 8017c8a:	f000 f8ff 	bl	8017e8c <I2C_IsErrorOccurred>
 8017c8e:	1e03      	subs	r3, r0, #0
 8017c90:	d001      	beq.n	8017c96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017c92:	2301      	movs	r3, #1
 8017c94:	e030      	b.n	8017cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017c96:	68bb      	ldr	r3, [r7, #8]
 8017c98:	3301      	adds	r3, #1
 8017c9a:	d025      	beq.n	8017ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017c9c:	f7fc f96a 	bl	8013f74 <HAL_GetTick>
 8017ca0:	0002      	movs	r2, r0
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	1ad3      	subs	r3, r2, r3
 8017ca6:	68ba      	ldr	r2, [r7, #8]
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d302      	bcc.n	8017cb2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8017cac:	68bb      	ldr	r3, [r7, #8]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d11a      	bne.n	8017ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	699b      	ldr	r3, [r3, #24]
 8017cb8:	2202      	movs	r2, #2
 8017cba:	4013      	ands	r3, r2
 8017cbc:	2b02      	cmp	r3, #2
 8017cbe:	d013      	beq.n	8017ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017cc4:	2220      	movs	r2, #32
 8017cc6:	431a      	orrs	r2, r3
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	2241      	movs	r2, #65	@ 0x41
 8017cd0:	2120      	movs	r1, #32
 8017cd2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	2242      	movs	r2, #66	@ 0x42
 8017cd8:	2100      	movs	r1, #0
 8017cda:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	2240      	movs	r2, #64	@ 0x40
 8017ce0:	2100      	movs	r1, #0
 8017ce2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	e007      	b.n	8017cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	699b      	ldr	r3, [r3, #24]
 8017cee:	2202      	movs	r2, #2
 8017cf0:	4013      	ands	r3, r2
 8017cf2:	2b02      	cmp	r3, #2
 8017cf4:	d1c5      	bne.n	8017c82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8017cf6:	2300      	movs	r3, #0
}
 8017cf8:	0018      	movs	r0, r3
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	b004      	add	sp, #16
 8017cfe:	bd80      	pop	{r7, pc}

08017d00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b084      	sub	sp, #16
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	60f8      	str	r0, [r7, #12]
 8017d08:	60b9      	str	r1, [r7, #8]
 8017d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017d0c:	e02f      	b.n	8017d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017d0e:	687a      	ldr	r2, [r7, #4]
 8017d10:	68b9      	ldr	r1, [r7, #8]
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	0018      	movs	r0, r3
 8017d16:	f000 f8b9 	bl	8017e8c <I2C_IsErrorOccurred>
 8017d1a:	1e03      	subs	r3, r0, #0
 8017d1c:	d001      	beq.n	8017d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017d1e:	2301      	movs	r3, #1
 8017d20:	e02d      	b.n	8017d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017d22:	f7fc f927 	bl	8013f74 <HAL_GetTick>
 8017d26:	0002      	movs	r2, r0
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	1ad3      	subs	r3, r2, r3
 8017d2c:	68ba      	ldr	r2, [r7, #8]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d302      	bcc.n	8017d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d11a      	bne.n	8017d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	699b      	ldr	r3, [r3, #24]
 8017d3e:	2220      	movs	r2, #32
 8017d40:	4013      	ands	r3, r2
 8017d42:	2b20      	cmp	r3, #32
 8017d44:	d013      	beq.n	8017d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d4a:	2220      	movs	r2, #32
 8017d4c:	431a      	orrs	r2, r3
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	2241      	movs	r2, #65	@ 0x41
 8017d56:	2120      	movs	r1, #32
 8017d58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	2242      	movs	r2, #66	@ 0x42
 8017d5e:	2100      	movs	r1, #0
 8017d60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	2240      	movs	r2, #64	@ 0x40
 8017d66:	2100      	movs	r1, #0
 8017d68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	e007      	b.n	8017d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	699b      	ldr	r3, [r3, #24]
 8017d74:	2220      	movs	r2, #32
 8017d76:	4013      	ands	r3, r2
 8017d78:	2b20      	cmp	r3, #32
 8017d7a:	d1c8      	bne.n	8017d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017d7c:	2300      	movs	r3, #0
}
 8017d7e:	0018      	movs	r0, r3
 8017d80:	46bd      	mov	sp, r7
 8017d82:	b004      	add	sp, #16
 8017d84:	bd80      	pop	{r7, pc}
	...

08017d88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b084      	sub	sp, #16
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017d94:	e06b      	b.n	8017e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017d96:	687a      	ldr	r2, [r7, #4]
 8017d98:	68b9      	ldr	r1, [r7, #8]
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	0018      	movs	r0, r3
 8017d9e:	f000 f875 	bl	8017e8c <I2C_IsErrorOccurred>
 8017da2:	1e03      	subs	r3, r0, #0
 8017da4:	d001      	beq.n	8017daa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017da6:	2301      	movs	r3, #1
 8017da8:	e069      	b.n	8017e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	699b      	ldr	r3, [r3, #24]
 8017db0:	2220      	movs	r2, #32
 8017db2:	4013      	ands	r3, r2
 8017db4:	2b20      	cmp	r3, #32
 8017db6:	d138      	bne.n	8017e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	699b      	ldr	r3, [r3, #24]
 8017dbe:	2204      	movs	r2, #4
 8017dc0:	4013      	ands	r3, r2
 8017dc2:	2b04      	cmp	r3, #4
 8017dc4:	d105      	bne.n	8017dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d001      	beq.n	8017dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	e055      	b.n	8017e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	699b      	ldr	r3, [r3, #24]
 8017dd8:	2210      	movs	r2, #16
 8017dda:	4013      	ands	r3, r2
 8017ddc:	2b10      	cmp	r3, #16
 8017dde:	d107      	bne.n	8017df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	2210      	movs	r2, #16
 8017de6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	2204      	movs	r2, #4
 8017dec:	645a      	str	r2, [r3, #68]	@ 0x44
 8017dee:	e002      	b.n	8017df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	2200      	movs	r2, #0
 8017df4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	2220      	movs	r2, #32
 8017dfc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	685a      	ldr	r2, [r3, #4]
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	491f      	ldr	r1, [pc, #124]	@ (8017e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8017e0a:	400a      	ands	r2, r1
 8017e0c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	2241      	movs	r2, #65	@ 0x41
 8017e12:	2120      	movs	r1, #32
 8017e14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	2242      	movs	r2, #66	@ 0x42
 8017e1a:	2100      	movs	r1, #0
 8017e1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	2240      	movs	r2, #64	@ 0x40
 8017e22:	2100      	movs	r1, #0
 8017e24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017e26:	2301      	movs	r3, #1
 8017e28:	e029      	b.n	8017e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017e2a:	f7fc f8a3 	bl	8013f74 <HAL_GetTick>
 8017e2e:	0002      	movs	r2, r0
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	1ad3      	subs	r3, r2, r3
 8017e34:	68ba      	ldr	r2, [r7, #8]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d302      	bcc.n	8017e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8017e3a:	68bb      	ldr	r3, [r7, #8]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d116      	bne.n	8017e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	699b      	ldr	r3, [r3, #24]
 8017e46:	2204      	movs	r2, #4
 8017e48:	4013      	ands	r3, r2
 8017e4a:	2b04      	cmp	r3, #4
 8017e4c:	d00f      	beq.n	8017e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e52:	2220      	movs	r2, #32
 8017e54:	431a      	orrs	r2, r3
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	2241      	movs	r2, #65	@ 0x41
 8017e5e:	2120      	movs	r1, #32
 8017e60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	2240      	movs	r2, #64	@ 0x40
 8017e66:	2100      	movs	r1, #0
 8017e68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017e6a:	2301      	movs	r3, #1
 8017e6c:	e007      	b.n	8017e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	699b      	ldr	r3, [r3, #24]
 8017e74:	2204      	movs	r2, #4
 8017e76:	4013      	ands	r3, r2
 8017e78:	2b04      	cmp	r3, #4
 8017e7a:	d18c      	bne.n	8017d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017e7c:	2300      	movs	r3, #0
}
 8017e7e:	0018      	movs	r0, r3
 8017e80:	46bd      	mov	sp, r7
 8017e82:	b004      	add	sp, #16
 8017e84:	bd80      	pop	{r7, pc}
 8017e86:	46c0      	nop			@ (mov r8, r8)
 8017e88:	fe00e800 	.word	0xfe00e800

08017e8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b08a      	sub	sp, #40	@ 0x28
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	60f8      	str	r0, [r7, #12]
 8017e94:	60b9      	str	r1, [r7, #8]
 8017e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017e98:	2327      	movs	r3, #39	@ 0x27
 8017e9a:	18fb      	adds	r3, r7, r3
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	699b      	ldr	r3, [r3, #24]
 8017ea6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017eb0:	69bb      	ldr	r3, [r7, #24]
 8017eb2:	2210      	movs	r2, #16
 8017eb4:	4013      	ands	r3, r2
 8017eb6:	d100      	bne.n	8017eba <I2C_IsErrorOccurred+0x2e>
 8017eb8:	e079      	b.n	8017fae <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	2210      	movs	r2, #16
 8017ec0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017ec2:	e057      	b.n	8017f74 <I2C_IsErrorOccurred+0xe8>
 8017ec4:	2227      	movs	r2, #39	@ 0x27
 8017ec6:	18bb      	adds	r3, r7, r2
 8017ec8:	18ba      	adds	r2, r7, r2
 8017eca:	7812      	ldrb	r2, [r2, #0]
 8017ecc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017ece:	68bb      	ldr	r3, [r7, #8]
 8017ed0:	3301      	adds	r3, #1
 8017ed2:	d04f      	beq.n	8017f74 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017ed4:	f7fc f84e 	bl	8013f74 <HAL_GetTick>
 8017ed8:	0002      	movs	r2, r0
 8017eda:	69fb      	ldr	r3, [r7, #28]
 8017edc:	1ad3      	subs	r3, r2, r3
 8017ede:	68ba      	ldr	r2, [r7, #8]
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d302      	bcc.n	8017eea <I2C_IsErrorOccurred+0x5e>
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d144      	bne.n	8017f74 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	685a      	ldr	r2, [r3, #4]
 8017ef0:	2380      	movs	r3, #128	@ 0x80
 8017ef2:	01db      	lsls	r3, r3, #7
 8017ef4:	4013      	ands	r3, r2
 8017ef6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017ef8:	2013      	movs	r0, #19
 8017efa:	183b      	adds	r3, r7, r0
 8017efc:	68fa      	ldr	r2, [r7, #12]
 8017efe:	2142      	movs	r1, #66	@ 0x42
 8017f00:	5c52      	ldrb	r2, [r2, r1]
 8017f02:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	699a      	ldr	r2, [r3, #24]
 8017f0a:	2380      	movs	r3, #128	@ 0x80
 8017f0c:	021b      	lsls	r3, r3, #8
 8017f0e:	401a      	ands	r2, r3
 8017f10:	2380      	movs	r3, #128	@ 0x80
 8017f12:	021b      	lsls	r3, r3, #8
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d126      	bne.n	8017f66 <I2C_IsErrorOccurred+0xda>
 8017f18:	697a      	ldr	r2, [r7, #20]
 8017f1a:	2380      	movs	r3, #128	@ 0x80
 8017f1c:	01db      	lsls	r3, r3, #7
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d021      	beq.n	8017f66 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8017f22:	183b      	adds	r3, r7, r0
 8017f24:	781b      	ldrb	r3, [r3, #0]
 8017f26:	2b20      	cmp	r3, #32
 8017f28:	d01d      	beq.n	8017f66 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	685a      	ldr	r2, [r3, #4]
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	2180      	movs	r1, #128	@ 0x80
 8017f36:	01c9      	lsls	r1, r1, #7
 8017f38:	430a      	orrs	r2, r1
 8017f3a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8017f3c:	f7fc f81a 	bl	8013f74 <HAL_GetTick>
 8017f40:	0003      	movs	r3, r0
 8017f42:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017f44:	e00f      	b.n	8017f66 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017f46:	f7fc f815 	bl	8013f74 <HAL_GetTick>
 8017f4a:	0002      	movs	r2, r0
 8017f4c:	69fb      	ldr	r3, [r7, #28]
 8017f4e:	1ad3      	subs	r3, r2, r3
 8017f50:	2b19      	cmp	r3, #25
 8017f52:	d908      	bls.n	8017f66 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8017f54:	6a3b      	ldr	r3, [r7, #32]
 8017f56:	2220      	movs	r2, #32
 8017f58:	4313      	orrs	r3, r2
 8017f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8017f5c:	2327      	movs	r3, #39	@ 0x27
 8017f5e:	18fb      	adds	r3, r7, r3
 8017f60:	2201      	movs	r2, #1
 8017f62:	701a      	strb	r2, [r3, #0]

              break;
 8017f64:	e006      	b.n	8017f74 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	699b      	ldr	r3, [r3, #24]
 8017f6c:	2220      	movs	r2, #32
 8017f6e:	4013      	ands	r3, r2
 8017f70:	2b20      	cmp	r3, #32
 8017f72:	d1e8      	bne.n	8017f46 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	699b      	ldr	r3, [r3, #24]
 8017f7a:	2220      	movs	r2, #32
 8017f7c:	4013      	ands	r3, r2
 8017f7e:	2b20      	cmp	r3, #32
 8017f80:	d004      	beq.n	8017f8c <I2C_IsErrorOccurred+0x100>
 8017f82:	2327      	movs	r3, #39	@ 0x27
 8017f84:	18fb      	adds	r3, r7, r3
 8017f86:	781b      	ldrb	r3, [r3, #0]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d09b      	beq.n	8017ec4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017f8c:	2327      	movs	r3, #39	@ 0x27
 8017f8e:	18fb      	adds	r3, r7, r3
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d103      	bne.n	8017f9e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	2220      	movs	r2, #32
 8017f9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017f9e:	6a3b      	ldr	r3, [r7, #32]
 8017fa0:	2204      	movs	r2, #4
 8017fa2:	4313      	orrs	r3, r2
 8017fa4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017fa6:	2327      	movs	r3, #39	@ 0x27
 8017fa8:	18fb      	adds	r3, r7, r3
 8017faa:	2201      	movs	r2, #1
 8017fac:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	699b      	ldr	r3, [r3, #24]
 8017fb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017fb6:	69ba      	ldr	r2, [r7, #24]
 8017fb8:	2380      	movs	r3, #128	@ 0x80
 8017fba:	005b      	lsls	r3, r3, #1
 8017fbc:	4013      	ands	r3, r2
 8017fbe:	d00c      	beq.n	8017fda <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017fc0:	6a3b      	ldr	r3, [r7, #32]
 8017fc2:	2201      	movs	r2, #1
 8017fc4:	4313      	orrs	r3, r2
 8017fc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	2280      	movs	r2, #128	@ 0x80
 8017fce:	0052      	lsls	r2, r2, #1
 8017fd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017fd2:	2327      	movs	r3, #39	@ 0x27
 8017fd4:	18fb      	adds	r3, r7, r3
 8017fd6:	2201      	movs	r2, #1
 8017fd8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017fda:	69ba      	ldr	r2, [r7, #24]
 8017fdc:	2380      	movs	r3, #128	@ 0x80
 8017fde:	00db      	lsls	r3, r3, #3
 8017fe0:	4013      	ands	r3, r2
 8017fe2:	d00c      	beq.n	8017ffe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017fe4:	6a3b      	ldr	r3, [r7, #32]
 8017fe6:	2208      	movs	r2, #8
 8017fe8:	4313      	orrs	r3, r2
 8017fea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	2280      	movs	r2, #128	@ 0x80
 8017ff2:	00d2      	lsls	r2, r2, #3
 8017ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017ff6:	2327      	movs	r3, #39	@ 0x27
 8017ff8:	18fb      	adds	r3, r7, r3
 8017ffa:	2201      	movs	r2, #1
 8017ffc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017ffe:	69ba      	ldr	r2, [r7, #24]
 8018000:	2380      	movs	r3, #128	@ 0x80
 8018002:	009b      	lsls	r3, r3, #2
 8018004:	4013      	ands	r3, r2
 8018006:	d00c      	beq.n	8018022 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018008:	6a3b      	ldr	r3, [r7, #32]
 801800a:	2202      	movs	r2, #2
 801800c:	4313      	orrs	r3, r2
 801800e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	2280      	movs	r2, #128	@ 0x80
 8018016:	0092      	lsls	r2, r2, #2
 8018018:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801801a:	2327      	movs	r3, #39	@ 0x27
 801801c:	18fb      	adds	r3, r7, r3
 801801e:	2201      	movs	r2, #1
 8018020:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018022:	2327      	movs	r3, #39	@ 0x27
 8018024:	18fb      	adds	r3, r7, r3
 8018026:	781b      	ldrb	r3, [r3, #0]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d01d      	beq.n	8018068 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	0018      	movs	r0, r3
 8018030:	f7ff fcd7 	bl	80179e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	685a      	ldr	r2, [r3, #4]
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	490e      	ldr	r1, [pc, #56]	@ (8018078 <I2C_IsErrorOccurred+0x1ec>)
 8018040:	400a      	ands	r2, r1
 8018042:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018048:	6a3b      	ldr	r3, [r7, #32]
 801804a:	431a      	orrs	r2, r3
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	2241      	movs	r2, #65	@ 0x41
 8018054:	2120      	movs	r1, #32
 8018056:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	2242      	movs	r2, #66	@ 0x42
 801805c:	2100      	movs	r1, #0
 801805e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	2240      	movs	r2, #64	@ 0x40
 8018064:	2100      	movs	r1, #0
 8018066:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018068:	2327      	movs	r3, #39	@ 0x27
 801806a:	18fb      	adds	r3, r7, r3
 801806c:	781b      	ldrb	r3, [r3, #0]
}
 801806e:	0018      	movs	r0, r3
 8018070:	46bd      	mov	sp, r7
 8018072:	b00a      	add	sp, #40	@ 0x28
 8018074:	bd80      	pop	{r7, pc}
 8018076:	46c0      	nop			@ (mov r8, r8)
 8018078:	fe00e800 	.word	0xfe00e800

0801807c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801807c:	b590      	push	{r4, r7, lr}
 801807e:	b087      	sub	sp, #28
 8018080:	af00      	add	r7, sp, #0
 8018082:	60f8      	str	r0, [r7, #12]
 8018084:	0008      	movs	r0, r1
 8018086:	0011      	movs	r1, r2
 8018088:	607b      	str	r3, [r7, #4]
 801808a:	240a      	movs	r4, #10
 801808c:	193b      	adds	r3, r7, r4
 801808e:	1c02      	adds	r2, r0, #0
 8018090:	801a      	strh	r2, [r3, #0]
 8018092:	2009      	movs	r0, #9
 8018094:	183b      	adds	r3, r7, r0
 8018096:	1c0a      	adds	r2, r1, #0
 8018098:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801809a:	193b      	adds	r3, r7, r4
 801809c:	881b      	ldrh	r3, [r3, #0]
 801809e:	059b      	lsls	r3, r3, #22
 80180a0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80180a2:	183b      	adds	r3, r7, r0
 80180a4:	781b      	ldrb	r3, [r3, #0]
 80180a6:	0419      	lsls	r1, r3, #16
 80180a8:	23ff      	movs	r3, #255	@ 0xff
 80180aa:	041b      	lsls	r3, r3, #16
 80180ac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80180ae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80180b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180b6:	4313      	orrs	r3, r2
 80180b8:	005b      	lsls	r3, r3, #1
 80180ba:	085b      	lsrs	r3, r3, #1
 80180bc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80180c6:	0d51      	lsrs	r1, r2, #21
 80180c8:	2280      	movs	r2, #128	@ 0x80
 80180ca:	00d2      	lsls	r2, r2, #3
 80180cc:	400a      	ands	r2, r1
 80180ce:	4907      	ldr	r1, [pc, #28]	@ (80180ec <I2C_TransferConfig+0x70>)
 80180d0:	430a      	orrs	r2, r1
 80180d2:	43d2      	mvns	r2, r2
 80180d4:	401a      	ands	r2, r3
 80180d6:	0011      	movs	r1, r2
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	697a      	ldr	r2, [r7, #20]
 80180de:	430a      	orrs	r2, r1
 80180e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80180e2:	46c0      	nop			@ (mov r8, r8)
 80180e4:	46bd      	mov	sp, r7
 80180e6:	b007      	add	sp, #28
 80180e8:	bd90      	pop	{r4, r7, pc}
 80180ea:	46c0      	nop			@ (mov r8, r8)
 80180ec:	03ff63ff 	.word	0x03ff63ff

080180f0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b084      	sub	sp, #16
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	000a      	movs	r2, r1
 80180fa:	1cbb      	adds	r3, r7, #2
 80180fc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80180fe:	2300      	movs	r3, #0
 8018100:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018106:	4b3e      	ldr	r3, [pc, #248]	@ (8018200 <I2C_Enable_IRQ+0x110>)
 8018108:	429a      	cmp	r2, r3
 801810a:	d035      	beq.n	8018178 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018110:	4b3c      	ldr	r3, [pc, #240]	@ (8018204 <I2C_Enable_IRQ+0x114>)
 8018112:	429a      	cmp	r2, r3
 8018114:	d030      	beq.n	8018178 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801811a:	4b3b      	ldr	r3, [pc, #236]	@ (8018208 <I2C_Enable_IRQ+0x118>)
 801811c:	429a      	cmp	r2, r3
 801811e:	d02b      	beq.n	8018178 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018120:	1cbb      	adds	r3, r7, #2
 8018122:	2200      	movs	r2, #0
 8018124:	5e9b      	ldrsh	r3, [r3, r2]
 8018126:	2b00      	cmp	r3, #0
 8018128:	da03      	bge.n	8018132 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	22b8      	movs	r2, #184	@ 0xb8
 801812e:	4313      	orrs	r3, r2
 8018130:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018132:	1cbb      	adds	r3, r7, #2
 8018134:	881b      	ldrh	r3, [r3, #0]
 8018136:	2201      	movs	r2, #1
 8018138:	4013      	ands	r3, r2
 801813a:	d003      	beq.n	8018144 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	22f2      	movs	r2, #242	@ 0xf2
 8018140:	4313      	orrs	r3, r2
 8018142:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018144:	1cbb      	adds	r3, r7, #2
 8018146:	881b      	ldrh	r3, [r3, #0]
 8018148:	2202      	movs	r2, #2
 801814a:	4013      	ands	r3, r2
 801814c:	d003      	beq.n	8018156 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	22f4      	movs	r2, #244	@ 0xf4
 8018152:	4313      	orrs	r3, r2
 8018154:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018156:	1cbb      	adds	r3, r7, #2
 8018158:	881b      	ldrh	r3, [r3, #0]
 801815a:	2b10      	cmp	r3, #16
 801815c:	d103      	bne.n	8018166 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	2290      	movs	r2, #144	@ 0x90
 8018162:	4313      	orrs	r3, r2
 8018164:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018166:	1cbb      	adds	r3, r7, #2
 8018168:	881b      	ldrh	r3, [r3, #0]
 801816a:	2b20      	cmp	r3, #32
 801816c:	d13c      	bne.n	80181e8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	2220      	movs	r2, #32
 8018172:	4313      	orrs	r3, r2
 8018174:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018176:	e037      	b.n	80181e8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018178:	1cbb      	adds	r3, r7, #2
 801817a:	2200      	movs	r2, #0
 801817c:	5e9b      	ldrsh	r3, [r3, r2]
 801817e:	2b00      	cmp	r3, #0
 8018180:	da03      	bge.n	801818a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	22b8      	movs	r2, #184	@ 0xb8
 8018186:	4313      	orrs	r3, r2
 8018188:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801818a:	1cbb      	adds	r3, r7, #2
 801818c:	881b      	ldrh	r3, [r3, #0]
 801818e:	2201      	movs	r2, #1
 8018190:	4013      	ands	r3, r2
 8018192:	d003      	beq.n	801819c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	22f2      	movs	r2, #242	@ 0xf2
 8018198:	4313      	orrs	r3, r2
 801819a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801819c:	1cbb      	adds	r3, r7, #2
 801819e:	881b      	ldrh	r3, [r3, #0]
 80181a0:	2202      	movs	r2, #2
 80181a2:	4013      	ands	r3, r2
 80181a4:	d003      	beq.n	80181ae <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	22f4      	movs	r2, #244	@ 0xf4
 80181aa:	4313      	orrs	r3, r2
 80181ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80181ae:	1cbb      	adds	r3, r7, #2
 80181b0:	881b      	ldrh	r3, [r3, #0]
 80181b2:	2b10      	cmp	r3, #16
 80181b4:	d103      	bne.n	80181be <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	2290      	movs	r2, #144	@ 0x90
 80181ba:	4313      	orrs	r3, r2
 80181bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80181be:	1cbb      	adds	r3, r7, #2
 80181c0:	881b      	ldrh	r3, [r3, #0]
 80181c2:	2b20      	cmp	r3, #32
 80181c4:	d103      	bne.n	80181ce <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	2260      	movs	r2, #96	@ 0x60
 80181ca:	4313      	orrs	r3, r2
 80181cc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80181d2:	4b0d      	ldr	r3, [pc, #52]	@ (8018208 <I2C_Enable_IRQ+0x118>)
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d007      	beq.n	80181e8 <I2C_Enable_IRQ+0xf8>
 80181d8:	1cbb      	adds	r3, r7, #2
 80181da:	881b      	ldrh	r3, [r3, #0]
 80181dc:	2b40      	cmp	r3, #64	@ 0x40
 80181de:	d103      	bne.n	80181e8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	2240      	movs	r2, #64	@ 0x40
 80181e4:	4313      	orrs	r3, r2
 80181e6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	6819      	ldr	r1, [r3, #0]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	68fa      	ldr	r2, [r7, #12]
 80181f4:	430a      	orrs	r2, r1
 80181f6:	601a      	str	r2, [r3, #0]
}
 80181f8:	46c0      	nop			@ (mov r8, r8)
 80181fa:	46bd      	mov	sp, r7
 80181fc:	b004      	add	sp, #16
 80181fe:	bd80      	pop	{r7, pc}
 8018200:	0801692d 	.word	0x0801692d
 8018204:	08016da5 	.word	0x08016da5
 8018208:	08016b45 	.word	0x08016b45

0801820c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b084      	sub	sp, #16
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	000a      	movs	r2, r1
 8018216:	1cbb      	adds	r3, r7, #2
 8018218:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801821a:	2300      	movs	r3, #0
 801821c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801821e:	1cbb      	adds	r3, r7, #2
 8018220:	881b      	ldrh	r3, [r3, #0]
 8018222:	2201      	movs	r2, #1
 8018224:	4013      	ands	r3, r2
 8018226:	d010      	beq.n	801824a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	2242      	movs	r2, #66	@ 0x42
 801822c:	4313      	orrs	r3, r2
 801822e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2241      	movs	r2, #65	@ 0x41
 8018234:	5c9b      	ldrb	r3, [r3, r2]
 8018236:	b2db      	uxtb	r3, r3
 8018238:	001a      	movs	r2, r3
 801823a:	2328      	movs	r3, #40	@ 0x28
 801823c:	4013      	ands	r3, r2
 801823e:	2b28      	cmp	r3, #40	@ 0x28
 8018240:	d003      	beq.n	801824a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	22b0      	movs	r2, #176	@ 0xb0
 8018246:	4313      	orrs	r3, r2
 8018248:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801824a:	1cbb      	adds	r3, r7, #2
 801824c:	881b      	ldrh	r3, [r3, #0]
 801824e:	2202      	movs	r2, #2
 8018250:	4013      	ands	r3, r2
 8018252:	d010      	beq.n	8018276 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	2244      	movs	r2, #68	@ 0x44
 8018258:	4313      	orrs	r3, r2
 801825a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	2241      	movs	r2, #65	@ 0x41
 8018260:	5c9b      	ldrb	r3, [r3, r2]
 8018262:	b2db      	uxtb	r3, r3
 8018264:	001a      	movs	r2, r3
 8018266:	2328      	movs	r3, #40	@ 0x28
 8018268:	4013      	ands	r3, r2
 801826a:	2b28      	cmp	r3, #40	@ 0x28
 801826c:	d003      	beq.n	8018276 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	22b0      	movs	r2, #176	@ 0xb0
 8018272:	4313      	orrs	r3, r2
 8018274:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018276:	1cbb      	adds	r3, r7, #2
 8018278:	2200      	movs	r2, #0
 801827a:	5e9b      	ldrsh	r3, [r3, r2]
 801827c:	2b00      	cmp	r3, #0
 801827e:	da03      	bge.n	8018288 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	22b8      	movs	r2, #184	@ 0xb8
 8018284:	4313      	orrs	r3, r2
 8018286:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018288:	1cbb      	adds	r3, r7, #2
 801828a:	881b      	ldrh	r3, [r3, #0]
 801828c:	2b10      	cmp	r3, #16
 801828e:	d103      	bne.n	8018298 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	2290      	movs	r2, #144	@ 0x90
 8018294:	4313      	orrs	r3, r2
 8018296:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018298:	1cbb      	adds	r3, r7, #2
 801829a:	881b      	ldrh	r3, [r3, #0]
 801829c:	2b20      	cmp	r3, #32
 801829e:	d103      	bne.n	80182a8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	2220      	movs	r2, #32
 80182a4:	4313      	orrs	r3, r2
 80182a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80182a8:	1cbb      	adds	r3, r7, #2
 80182aa:	881b      	ldrh	r3, [r3, #0]
 80182ac:	2b40      	cmp	r3, #64	@ 0x40
 80182ae:	d103      	bne.n	80182b8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	2240      	movs	r2, #64	@ 0x40
 80182b4:	4313      	orrs	r3, r2
 80182b6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	681a      	ldr	r2, [r3, #0]
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	43d9      	mvns	r1, r3
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	400a      	ands	r2, r1
 80182c8:	601a      	str	r2, [r3, #0]
}
 80182ca:	46c0      	nop			@ (mov r8, r8)
 80182cc:	46bd      	mov	sp, r7
 80182ce:	b004      	add	sp, #16
 80182d0:	bd80      	pop	{r7, pc}
	...

080182d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b082      	sub	sp, #8
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2241      	movs	r2, #65	@ 0x41
 80182e2:	5c9b      	ldrb	r3, [r3, r2]
 80182e4:	b2db      	uxtb	r3, r3
 80182e6:	2b20      	cmp	r3, #32
 80182e8:	d138      	bne.n	801835c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2240      	movs	r2, #64	@ 0x40
 80182ee:	5c9b      	ldrb	r3, [r3, r2]
 80182f0:	2b01      	cmp	r3, #1
 80182f2:	d101      	bne.n	80182f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80182f4:	2302      	movs	r3, #2
 80182f6:	e032      	b.n	801835e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	2240      	movs	r2, #64	@ 0x40
 80182fc:	2101      	movs	r1, #1
 80182fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	2241      	movs	r2, #65	@ 0x41
 8018304:	2124      	movs	r1, #36	@ 0x24
 8018306:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	681a      	ldr	r2, [r3, #0]
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	2101      	movs	r1, #1
 8018314:	438a      	bics	r2, r1
 8018316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	681a      	ldr	r2, [r3, #0]
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	4911      	ldr	r1, [pc, #68]	@ (8018368 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018324:	400a      	ands	r2, r1
 8018326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	6819      	ldr	r1, [r3, #0]
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	683a      	ldr	r2, [r7, #0]
 8018334:	430a      	orrs	r2, r1
 8018336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	681a      	ldr	r2, [r3, #0]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	2101      	movs	r1, #1
 8018344:	430a      	orrs	r2, r1
 8018346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	2241      	movs	r2, #65	@ 0x41
 801834c:	2120      	movs	r1, #32
 801834e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	2240      	movs	r2, #64	@ 0x40
 8018354:	2100      	movs	r1, #0
 8018356:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018358:	2300      	movs	r3, #0
 801835a:	e000      	b.n	801835e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801835c:	2302      	movs	r3, #2
  }
}
 801835e:	0018      	movs	r0, r3
 8018360:	46bd      	mov	sp, r7
 8018362:	b002      	add	sp, #8
 8018364:	bd80      	pop	{r7, pc}
 8018366:	46c0      	nop			@ (mov r8, r8)
 8018368:	ffffefff 	.word	0xffffefff

0801836c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	2241      	movs	r2, #65	@ 0x41
 801837a:	5c9b      	ldrb	r3, [r3, r2]
 801837c:	b2db      	uxtb	r3, r3
 801837e:	2b20      	cmp	r3, #32
 8018380:	d139      	bne.n	80183f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	2240      	movs	r2, #64	@ 0x40
 8018386:	5c9b      	ldrb	r3, [r3, r2]
 8018388:	2b01      	cmp	r3, #1
 801838a:	d101      	bne.n	8018390 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801838c:	2302      	movs	r3, #2
 801838e:	e033      	b.n	80183f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	2240      	movs	r2, #64	@ 0x40
 8018394:	2101      	movs	r1, #1
 8018396:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2241      	movs	r2, #65	@ 0x41
 801839c:	2124      	movs	r1, #36	@ 0x24
 801839e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	681a      	ldr	r2, [r3, #0]
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	2101      	movs	r1, #1
 80183ac:	438a      	bics	r2, r1
 80183ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	4a11      	ldr	r2, [pc, #68]	@ (8018400 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80183bc:	4013      	ands	r3, r2
 80183be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	021b      	lsls	r3, r3, #8
 80183c4:	68fa      	ldr	r2, [r7, #12]
 80183c6:	4313      	orrs	r3, r2
 80183c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	68fa      	ldr	r2, [r7, #12]
 80183d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	681a      	ldr	r2, [r3, #0]
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	2101      	movs	r1, #1
 80183de:	430a      	orrs	r2, r1
 80183e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2241      	movs	r2, #65	@ 0x41
 80183e6:	2120      	movs	r1, #32
 80183e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	2240      	movs	r2, #64	@ 0x40
 80183ee:	2100      	movs	r1, #0
 80183f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80183f2:	2300      	movs	r3, #0
 80183f4:	e000      	b.n	80183f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80183f6:	2302      	movs	r3, #2
  }
}
 80183f8:	0018      	movs	r0, r3
 80183fa:	46bd      	mov	sp, r7
 80183fc:	b004      	add	sp, #16
 80183fe:	bd80      	pop	{r7, pc}
 8018400:	fffff0ff 	.word	0xfffff0ff

08018404 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b088      	sub	sp, #32
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d101      	bne.n	8018416 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018412:	2301      	movs	r3, #1
 8018414:	e0e1      	b.n	80185da <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	2235      	movs	r2, #53	@ 0x35
 801841a:	5c9b      	ldrb	r3, [r3, r2]
 801841c:	b2db      	uxtb	r3, r3
 801841e:	2b00      	cmp	r3, #0
 8018420:	d107      	bne.n	8018432 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2234      	movs	r2, #52	@ 0x34
 8018426:	2100      	movs	r1, #0
 8018428:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	0018      	movs	r0, r3
 801842e:	f7f3 fef9 	bl	800c224 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2235      	movs	r2, #53	@ 0x35
 8018436:	2102      	movs	r1, #2
 8018438:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	69da      	ldr	r2, [r3, #28]
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	4967      	ldr	r1, [pc, #412]	@ (80185e4 <HAL_I2S_Init+0x1e0>)
 8018446:	400a      	ands	r2, r1
 8018448:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	2202      	movs	r2, #2
 8018450:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	695b      	ldr	r3, [r3, #20]
 8018456:	2b02      	cmp	r3, #2
 8018458:	d073      	beq.n	8018542 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	68db      	ldr	r3, [r3, #12]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d102      	bne.n	8018468 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018462:	2310      	movs	r3, #16
 8018464:	617b      	str	r3, [r7, #20]
 8018466:	e001      	b.n	801846c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018468:	2320      	movs	r3, #32
 801846a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	689b      	ldr	r3, [r3, #8]
 8018470:	2b20      	cmp	r3, #32
 8018472:	d802      	bhi.n	801847a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	005b      	lsls	r3, r3, #1
 8018478:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801847a:	f002 fed3 	bl	801b224 <HAL_RCC_GetSysClockFreq>
 801847e:	0003      	movs	r3, r0
 8018480:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	691a      	ldr	r2, [r3, #16]
 8018486:	2380      	movs	r3, #128	@ 0x80
 8018488:	009b      	lsls	r3, r3, #2
 801848a:	429a      	cmp	r2, r3
 801848c:	d131      	bne.n	80184f2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	68db      	ldr	r3, [r3, #12]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d016      	beq.n	80184c4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	009b      	lsls	r3, r3, #2
 801849a:	0019      	movs	r1, r3
 801849c:	68f8      	ldr	r0, [r7, #12]
 801849e:	f7e7 fe81 	bl	80001a4 <__udivsi3>
 80184a2:	0003      	movs	r3, r0
 80184a4:	001a      	movs	r2, r3
 80184a6:	0013      	movs	r3, r2
 80184a8:	009b      	lsls	r3, r3, #2
 80184aa:	189b      	adds	r3, r3, r2
 80184ac:	005b      	lsls	r3, r3, #1
 80184ae:	001a      	movs	r2, r3
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	695b      	ldr	r3, [r3, #20]
 80184b4:	0019      	movs	r1, r3
 80184b6:	0010      	movs	r0, r2
 80184b8:	f7e7 fe74 	bl	80001a4 <__udivsi3>
 80184bc:	0003      	movs	r3, r0
 80184be:	3305      	adds	r3, #5
 80184c0:	613b      	str	r3, [r7, #16]
 80184c2:	e02a      	b.n	801851a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80184c4:	697b      	ldr	r3, [r7, #20]
 80184c6:	00db      	lsls	r3, r3, #3
 80184c8:	0019      	movs	r1, r3
 80184ca:	68f8      	ldr	r0, [r7, #12]
 80184cc:	f7e7 fe6a 	bl	80001a4 <__udivsi3>
 80184d0:	0003      	movs	r3, r0
 80184d2:	001a      	movs	r2, r3
 80184d4:	0013      	movs	r3, r2
 80184d6:	009b      	lsls	r3, r3, #2
 80184d8:	189b      	adds	r3, r3, r2
 80184da:	005b      	lsls	r3, r3, #1
 80184dc:	001a      	movs	r2, r3
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	695b      	ldr	r3, [r3, #20]
 80184e2:	0019      	movs	r1, r3
 80184e4:	0010      	movs	r0, r2
 80184e6:	f7e7 fe5d 	bl	80001a4 <__udivsi3>
 80184ea:	0003      	movs	r3, r0
 80184ec:	3305      	adds	r3, #5
 80184ee:	613b      	str	r3, [r7, #16]
 80184f0:	e013      	b.n	801851a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80184f2:	6979      	ldr	r1, [r7, #20]
 80184f4:	68f8      	ldr	r0, [r7, #12]
 80184f6:	f7e7 fe55 	bl	80001a4 <__udivsi3>
 80184fa:	0003      	movs	r3, r0
 80184fc:	001a      	movs	r2, r3
 80184fe:	0013      	movs	r3, r2
 8018500:	009b      	lsls	r3, r3, #2
 8018502:	189b      	adds	r3, r3, r2
 8018504:	005b      	lsls	r3, r3, #1
 8018506:	001a      	movs	r2, r3
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	695b      	ldr	r3, [r3, #20]
 801850c:	0019      	movs	r1, r3
 801850e:	0010      	movs	r0, r2
 8018510:	f7e7 fe48 	bl	80001a4 <__udivsi3>
 8018514:	0003      	movs	r3, r0
 8018516:	3305      	adds	r3, #5
 8018518:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	210a      	movs	r1, #10
 801851e:	0018      	movs	r0, r3
 8018520:	f7e7 fe40 	bl	80001a4 <__udivsi3>
 8018524:	0003      	movs	r3, r0
 8018526:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018528:	693b      	ldr	r3, [r7, #16]
 801852a:	2201      	movs	r2, #1
 801852c:	4013      	ands	r3, r2
 801852e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018530:	693a      	ldr	r2, [r7, #16]
 8018532:	69bb      	ldr	r3, [r7, #24]
 8018534:	1ad3      	subs	r3, r2, r3
 8018536:	085b      	lsrs	r3, r3, #1
 8018538:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801853a:	69bb      	ldr	r3, [r7, #24]
 801853c:	021b      	lsls	r3, r3, #8
 801853e:	61bb      	str	r3, [r7, #24]
 8018540:	e003      	b.n	801854a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8018542:	2302      	movs	r3, #2
 8018544:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8018546:	2300      	movs	r3, #0
 8018548:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801854a:	69fb      	ldr	r3, [r7, #28]
 801854c:	2b01      	cmp	r3, #1
 801854e:	d902      	bls.n	8018556 <HAL_I2S_Init+0x152>
 8018550:	69fb      	ldr	r3, [r7, #28]
 8018552:	2bff      	cmp	r3, #255	@ 0xff
 8018554:	d907      	bls.n	8018566 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801855a:	2210      	movs	r2, #16
 801855c:	431a      	orrs	r2, r3
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018562:	2301      	movs	r3, #1
 8018564:	e039      	b.n	80185da <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	691a      	ldr	r2, [r3, #16]
 801856a:	69bb      	ldr	r3, [r7, #24]
 801856c:	431a      	orrs	r2, r3
 801856e:	0011      	movs	r1, r2
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	69fa      	ldr	r2, [r7, #28]
 8018576:	430a      	orrs	r2, r1
 8018578:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	69db      	ldr	r3, [r3, #28]
 8018580:	4a18      	ldr	r2, [pc, #96]	@ (80185e4 <HAL_I2S_Init+0x1e0>)
 8018582:	401a      	ands	r2, r3
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	6859      	ldr	r1, [r3, #4]
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	689b      	ldr	r3, [r3, #8]
 801858c:	4319      	orrs	r1, r3
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	68db      	ldr	r3, [r3, #12]
 8018592:	4319      	orrs	r1, r3
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	699b      	ldr	r3, [r3, #24]
 8018598:	430b      	orrs	r3, r1
 801859a:	431a      	orrs	r2, r3
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	2180      	movs	r1, #128	@ 0x80
 80185a2:	0109      	lsls	r1, r1, #4
 80185a4:	430a      	orrs	r2, r1
 80185a6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	689b      	ldr	r3, [r3, #8]
 80185ac:	2b30      	cmp	r3, #48	@ 0x30
 80185ae:	d003      	beq.n	80185b8 <HAL_I2S_Init+0x1b4>
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	689b      	ldr	r3, [r3, #8]
 80185b4:	2bb0      	cmp	r3, #176	@ 0xb0
 80185b6:	d108      	bne.n	80185ca <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	69da      	ldr	r2, [r3, #28]
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	2180      	movs	r1, #128	@ 0x80
 80185c4:	0149      	lsls	r1, r1, #5
 80185c6:	430a      	orrs	r2, r1
 80185c8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2200      	movs	r2, #0
 80185ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	2235      	movs	r2, #53	@ 0x35
 80185d4:	2101      	movs	r1, #1
 80185d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80185d8:	2300      	movs	r3, #0
}
 80185da:	0018      	movs	r0, r3
 80185dc:	46bd      	mov	sp, r7
 80185de:	b008      	add	sp, #32
 80185e0:	bd80      	pop	{r7, pc}
 80185e2:	46c0      	nop			@ (mov r8, r8)
 80185e4:	fffff040 	.word	0xfffff040

080185e8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b086      	sub	sp, #24
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	60f8      	str	r0, [r7, #12]
 80185f0:	60b9      	str	r1, [r7, #8]
 80185f2:	1dbb      	adds	r3, r7, #6
 80185f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80185f6:	68bb      	ldr	r3, [r7, #8]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d003      	beq.n	8018604 <HAL_I2S_Receive_DMA+0x1c>
 80185fc:	1dbb      	adds	r3, r7, #6
 80185fe:	881b      	ldrh	r3, [r3, #0]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d101      	bne.n	8018608 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8018604:	2301      	movs	r3, #1
 8018606:	e0a6      	b.n	8018756 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	2234      	movs	r2, #52	@ 0x34
 801860c:	5c9b      	ldrb	r3, [r3, r2]
 801860e:	b2db      	uxtb	r3, r3
 8018610:	2b01      	cmp	r3, #1
 8018612:	d101      	bne.n	8018618 <HAL_I2S_Receive_DMA+0x30>
 8018614:	2302      	movs	r3, #2
 8018616:	e09e      	b.n	8018756 <HAL_I2S_Receive_DMA+0x16e>
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	2234      	movs	r2, #52	@ 0x34
 801861c:	2101      	movs	r1, #1
 801861e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	2235      	movs	r2, #53	@ 0x35
 8018624:	5c9b      	ldrb	r3, [r3, r2]
 8018626:	b2db      	uxtb	r3, r3
 8018628:	2b01      	cmp	r3, #1
 801862a:	d005      	beq.n	8018638 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	2234      	movs	r2, #52	@ 0x34
 8018630:	2100      	movs	r1, #0
 8018632:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8018634:	2302      	movs	r3, #2
 8018636:	e08e      	b.n	8018756 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2235      	movs	r2, #53	@ 0x35
 801863c:	2104      	movs	r1, #4
 801863e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	2200      	movs	r2, #0
 8018644:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	68ba      	ldr	r2, [r7, #8]
 801864a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	69db      	ldr	r3, [r3, #28]
 8018652:	2207      	movs	r2, #7
 8018654:	4013      	ands	r3, r2
 8018656:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	2b03      	cmp	r3, #3
 801865c:	d002      	beq.n	8018664 <HAL_I2S_Receive_DMA+0x7c>
 801865e:	697b      	ldr	r3, [r7, #20]
 8018660:	2b05      	cmp	r3, #5
 8018662:	d10c      	bne.n	801867e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8018664:	1dbb      	adds	r3, r7, #6
 8018666:	881b      	ldrh	r3, [r3, #0]
 8018668:	18db      	adds	r3, r3, r3
 801866a:	b29a      	uxth	r2, r3
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8018670:	1dbb      	adds	r3, r7, #6
 8018672:	881b      	ldrh	r3, [r3, #0]
 8018674:	18db      	adds	r3, r3, r3
 8018676:	b29a      	uxth	r2, r3
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801867c:	e007      	b.n	801868e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	1dba      	adds	r2, r7, #6
 8018682:	8812      	ldrh	r2, [r2, #0]
 8018684:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	1dba      	adds	r2, r7, #6
 801868a:	8812      	ldrh	r2, [r2, #0]
 801868c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018692:	4a33      	ldr	r2, [pc, #204]	@ (8018760 <HAL_I2S_Receive_DMA+0x178>)
 8018694:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801869a:	4a32      	ldr	r2, [pc, #200]	@ (8018764 <HAL_I2S_Receive_DMA+0x17c>)
 801869c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80186a2:	4a31      	ldr	r2, [pc, #196]	@ (8018768 <HAL_I2S_Receive_DMA+0x180>)
 80186a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	69da      	ldr	r2, [r3, #28]
 80186ac:	23c0      	movs	r3, #192	@ 0xc0
 80186ae:	009b      	lsls	r3, r3, #2
 80186b0:	401a      	ands	r2, r3
 80186b2:	23c0      	movs	r3, #192	@ 0xc0
 80186b4:	009b      	lsls	r3, r3, #2
 80186b6:	429a      	cmp	r2, r3
 80186b8:	d10a      	bne.n	80186d0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80186ba:	2300      	movs	r3, #0
 80186bc:	613b      	str	r3, [r7, #16]
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	68db      	ldr	r3, [r3, #12]
 80186c4:	613b      	str	r3, [r7, #16]
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	689b      	ldr	r3, [r3, #8]
 80186cc:	613b      	str	r3, [r7, #16]
 80186ce:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	330c      	adds	r3, #12
 80186da:	0019      	movs	r1, r3
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186e0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80186e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80186e8:	f7fc f996 	bl	8014a18 <HAL_DMA_Start_IT>
 80186ec:	1e03      	subs	r3, r0, #0
 80186ee:	d00f      	beq.n	8018710 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80186f4:	2208      	movs	r2, #8
 80186f6:	431a      	orrs	r2, r3
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	2235      	movs	r2, #53	@ 0x35
 8018700:	2101      	movs	r1, #1
 8018702:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	2234      	movs	r2, #52	@ 0x34
 8018708:	2100      	movs	r1, #0
 801870a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801870c:	2301      	movs	r3, #1
 801870e:	e022      	b.n	8018756 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	69da      	ldr	r2, [r3, #28]
 8018716:	2380      	movs	r3, #128	@ 0x80
 8018718:	00db      	lsls	r3, r3, #3
 801871a:	4013      	ands	r3, r2
 801871c:	d108      	bne.n	8018730 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	69da      	ldr	r2, [r3, #28]
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	2180      	movs	r1, #128	@ 0x80
 801872a:	00c9      	lsls	r1, r1, #3
 801872c:	430a      	orrs	r2, r1
 801872e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	685b      	ldr	r3, [r3, #4]
 8018736:	2201      	movs	r2, #1
 8018738:	4013      	ands	r3, r2
 801873a:	d107      	bne.n	801874c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	685a      	ldr	r2, [r3, #4]
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	2101      	movs	r1, #1
 8018748:	430a      	orrs	r2, r1
 801874a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	2234      	movs	r2, #52	@ 0x34
 8018750:	2100      	movs	r1, #0
 8018752:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8018754:	2300      	movs	r3, #0
}
 8018756:	0018      	movs	r0, r3
 8018758:	46bd      	mov	sp, r7
 801875a:	b006      	add	sp, #24
 801875c:	bd80      	pop	{r7, pc}
 801875e:	46c0      	nop			@ (mov r8, r8)
 8018760:	08018949 	.word	0x08018949
 8018764:	08018905 	.word	0x08018905
 8018768:	08018967 	.word	0x08018967

0801876c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b086      	sub	sp, #24
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8018774:	2317      	movs	r3, #23
 8018776:	18fb      	adds	r3, r7, r3
 8018778:	2200      	movs	r2, #0
 801877a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	685a      	ldr	r2, [r3, #4]
 8018780:	2380      	movs	r3, #128	@ 0x80
 8018782:	009b      	lsls	r3, r3, #2
 8018784:	429a      	cmp	r2, r3
 8018786:	d003      	beq.n	8018790 <HAL_I2S_DMAStop+0x24>
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d158      	bne.n	8018842 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018794:	2b00      	cmp	r3, #0
 8018796:	d010      	beq.n	80187ba <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801879c:	0018      	movs	r0, r3
 801879e:	f7fc f9a1 	bl	8014ae4 <HAL_DMA_Abort>
 80187a2:	1e03      	subs	r3, r0, #0
 80187a4:	d009      	beq.n	80187ba <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187aa:	2208      	movs	r2, #8
 80187ac:	431a      	orrs	r2, r3
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80187b2:	2317      	movs	r3, #23
 80187b4:	18fb      	adds	r3, r7, r3
 80187b6:	2201      	movs	r2, #1
 80187b8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80187ba:	6878      	ldr	r0, [r7, #4]
 80187bc:	2364      	movs	r3, #100	@ 0x64
 80187be:	2201      	movs	r2, #1
 80187c0:	2102      	movs	r1, #2
 80187c2:	f000 f8f7 	bl	80189b4 <I2S_WaitFlagStateUntilTimeout>
 80187c6:	1e03      	subs	r3, r0, #0
 80187c8:	d00d      	beq.n	80187e6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187ce:	2201      	movs	r2, #1
 80187d0:	431a      	orrs	r2, r3
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	2235      	movs	r2, #53	@ 0x35
 80187da:	2101      	movs	r1, #1
 80187dc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80187de:	2317      	movs	r3, #23
 80187e0:	18fb      	adds	r3, r7, r3
 80187e2:	2201      	movs	r2, #1
 80187e4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80187e6:	6878      	ldr	r0, [r7, #4]
 80187e8:	2364      	movs	r3, #100	@ 0x64
 80187ea:	2200      	movs	r2, #0
 80187ec:	2180      	movs	r1, #128	@ 0x80
 80187ee:	f000 f8e1 	bl	80189b4 <I2S_WaitFlagStateUntilTimeout>
 80187f2:	1e03      	subs	r3, r0, #0
 80187f4:	d00d      	beq.n	8018812 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187fa:	2201      	movs	r2, #1
 80187fc:	431a      	orrs	r2, r3
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	2235      	movs	r2, #53	@ 0x35
 8018806:	2101      	movs	r1, #1
 8018808:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801880a:	2317      	movs	r3, #23
 801880c:	18fb      	adds	r3, r7, r3
 801880e:	2201      	movs	r2, #1
 8018810:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	69da      	ldr	r2, [r3, #28]
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	4938      	ldr	r1, [pc, #224]	@ (8018900 <HAL_I2S_DMAStop+0x194>)
 801881e:	400a      	ands	r2, r1
 8018820:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8018822:	2300      	movs	r3, #0
 8018824:	613b      	str	r3, [r7, #16]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	689b      	ldr	r3, [r3, #8]
 801882c:	613b      	str	r3, [r7, #16]
 801882e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	685a      	ldr	r2, [r3, #4]
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	2102      	movs	r1, #2
 801883c:	438a      	bics	r2, r1
 801883e:	605a      	str	r2, [r3, #4]
 8018840:	e053      	b.n	80188ea <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	685a      	ldr	r2, [r3, #4]
 8018846:	23c0      	movs	r3, #192	@ 0xc0
 8018848:	009b      	lsls	r3, r3, #2
 801884a:	429a      	cmp	r2, r3
 801884c:	d005      	beq.n	801885a <HAL_I2S_DMAStop+0xee>
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	685a      	ldr	r2, [r3, #4]
 8018852:	2380      	movs	r3, #128	@ 0x80
 8018854:	005b      	lsls	r3, r3, #1
 8018856:	429a      	cmp	r2, r3
 8018858:	d147      	bne.n	80188ea <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801885e:	2b00      	cmp	r3, #0
 8018860:	d010      	beq.n	8018884 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018866:	0018      	movs	r0, r3
 8018868:	f7fc f93c 	bl	8014ae4 <HAL_DMA_Abort>
 801886c:	1e03      	subs	r3, r0, #0
 801886e:	d009      	beq.n	8018884 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018874:	2208      	movs	r2, #8
 8018876:	431a      	orrs	r2, r3
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801887c:	2317      	movs	r3, #23
 801887e:	18fb      	adds	r3, r7, r3
 8018880:	2201      	movs	r2, #1
 8018882:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	69da      	ldr	r2, [r3, #28]
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	491c      	ldr	r1, [pc, #112]	@ (8018900 <HAL_I2S_DMAStop+0x194>)
 8018890:	400a      	ands	r2, r1
 8018892:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8018894:	2300      	movs	r3, #0
 8018896:	60fb      	str	r3, [r7, #12]
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	68db      	ldr	r3, [r3, #12]
 801889e:	60fb      	str	r3, [r7, #12]
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	689b      	ldr	r3, [r3, #8]
 80188a6:	60fb      	str	r3, [r7, #12]
 80188a8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	685a      	ldr	r2, [r3, #4]
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	2101      	movs	r1, #1
 80188b6:	438a      	bics	r2, r1
 80188b8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	685a      	ldr	r2, [r3, #4]
 80188be:	2380      	movs	r3, #128	@ 0x80
 80188c0:	005b      	lsls	r3, r3, #1
 80188c2:	429a      	cmp	r2, r3
 80188c4:	d10e      	bne.n	80188e4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188ca:	2240      	movs	r2, #64	@ 0x40
 80188cc:	431a      	orrs	r2, r3
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	2235      	movs	r2, #53	@ 0x35
 80188d6:	2101      	movs	r1, #1
 80188d8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80188da:	2317      	movs	r3, #23
 80188dc:	18fb      	adds	r3, r7, r3
 80188de:	2201      	movs	r2, #1
 80188e0:	701a      	strb	r2, [r3, #0]
 80188e2:	e002      	b.n	80188ea <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	2235      	movs	r2, #53	@ 0x35
 80188ee:	2101      	movs	r1, #1
 80188f0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80188f2:	2317      	movs	r3, #23
 80188f4:	18fb      	adds	r3, r7, r3
 80188f6:	781b      	ldrb	r3, [r3, #0]
}
 80188f8:	0018      	movs	r0, r3
 80188fa:	46bd      	mov	sp, r7
 80188fc:	b006      	add	sp, #24
 80188fe:	bd80      	pop	{r7, pc}
 8018900:	fffffbff 	.word	0xfffffbff

08018904 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b084      	sub	sp, #16
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018910:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	69db      	ldr	r3, [r3, #28]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d10e      	bne.n	8018938 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	685a      	ldr	r2, [r3, #4]
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	2101      	movs	r1, #1
 8018926:	438a      	bics	r2, r1
 8018928:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	2200      	movs	r2, #0
 801892e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	2235      	movs	r2, #53	@ 0x35
 8018934:	2101      	movs	r1, #1
 8018936:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	0018      	movs	r0, r3
 801893c:	f7f8 fc5a 	bl	80111f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018940:	46c0      	nop			@ (mov r8, r8)
 8018942:	46bd      	mov	sp, r7
 8018944:	b004      	add	sp, #16
 8018946:	bd80      	pop	{r7, pc}

08018948 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018948:	b580      	push	{r7, lr}
 801894a:	b084      	sub	sp, #16
 801894c:	af00      	add	r7, sp, #0
 801894e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018954:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	0018      	movs	r0, r3
 801895a:	f7f8 fc39 	bl	80111d0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801895e:	46c0      	nop			@ (mov r8, r8)
 8018960:	46bd      	mov	sp, r7
 8018962:	b004      	add	sp, #16
 8018964:	bd80      	pop	{r7, pc}

08018966 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8018966:	b580      	push	{r7, lr}
 8018968:	b084      	sub	sp, #16
 801896a:	af00      	add	r7, sp, #0
 801896c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018972:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	685a      	ldr	r2, [r3, #4]
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2103      	movs	r1, #3
 8018980:	438a      	bics	r2, r1
 8018982:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	2200      	movs	r2, #0
 8018988:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	2200      	movs	r2, #0
 801898e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	2235      	movs	r2, #53	@ 0x35
 8018994:	2101      	movs	r1, #1
 8018996:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801899c:	2208      	movs	r2, #8
 801899e:	431a      	orrs	r2, r3
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	0018      	movs	r0, r3
 80189a8:	f7f8 fc72 	bl	8011290 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80189ac:	46c0      	nop			@ (mov r8, r8)
 80189ae:	46bd      	mov	sp, r7
 80189b0:	b004      	add	sp, #16
 80189b2:	bd80      	pop	{r7, pc}

080189b4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b086      	sub	sp, #24
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	60f8      	str	r0, [r7, #12]
 80189bc:	60b9      	str	r1, [r7, #8]
 80189be:	603b      	str	r3, [r7, #0]
 80189c0:	1dfb      	adds	r3, r7, #7
 80189c2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80189c4:	f7fb fad6 	bl	8013f74 <HAL_GetTick>
 80189c8:	0003      	movs	r3, r0
 80189ca:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80189cc:	e017      	b.n	80189fe <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	3301      	adds	r3, #1
 80189d2:	d014      	beq.n	80189fe <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80189d4:	f7fb face 	bl	8013f74 <HAL_GetTick>
 80189d8:	0002      	movs	r2, r0
 80189da:	697b      	ldr	r3, [r7, #20]
 80189dc:	1ad3      	subs	r3, r2, r3
 80189de:	683a      	ldr	r2, [r7, #0]
 80189e0:	429a      	cmp	r2, r3
 80189e2:	d902      	bls.n	80189ea <I2S_WaitFlagStateUntilTimeout+0x36>
 80189e4:	683b      	ldr	r3, [r7, #0]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d109      	bne.n	80189fe <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	2235      	movs	r2, #53	@ 0x35
 80189ee:	2101      	movs	r1, #1
 80189f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	2234      	movs	r2, #52	@ 0x34
 80189f6:	2100      	movs	r1, #0
 80189f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80189fa:	2303      	movs	r3, #3
 80189fc:	e00f      	b.n	8018a1e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	689b      	ldr	r3, [r3, #8]
 8018a04:	68ba      	ldr	r2, [r7, #8]
 8018a06:	4013      	ands	r3, r2
 8018a08:	68ba      	ldr	r2, [r7, #8]
 8018a0a:	1ad3      	subs	r3, r2, r3
 8018a0c:	425a      	negs	r2, r3
 8018a0e:	4153      	adcs	r3, r2
 8018a10:	b2db      	uxtb	r3, r3
 8018a12:	001a      	movs	r2, r3
 8018a14:	1dfb      	adds	r3, r7, #7
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d1d8      	bne.n	80189ce <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8018a1c:	2300      	movs	r3, #0
}
 8018a1e:	0018      	movs	r0, r3
 8018a20:	46bd      	mov	sp, r7
 8018a22:	b006      	add	sp, #24
 8018a24:	bd80      	pop	{r7, pc}
	...

08018a28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8018a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a2a:	b08b      	sub	sp, #44	@ 0x2c
 8018a2c:	af06      	add	r7, sp, #24
 8018a2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d101      	bne.n	8018a3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8018a36:	2301      	movs	r3, #1
 8018a38:	e0f0      	b.n	8018c1c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	4a79      	ldr	r2, [pc, #484]	@ (8018c24 <HAL_PCD_Init+0x1fc>)
 8018a3e:	5c9b      	ldrb	r3, [r3, r2]
 8018a40:	b2db      	uxtb	r3, r3
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d108      	bne.n	8018a58 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8018a46:	687a      	ldr	r2, [r7, #4]
 8018a48:	23aa      	movs	r3, #170	@ 0xaa
 8018a4a:	009b      	lsls	r3, r3, #2
 8018a4c:	2100      	movs	r1, #0
 8018a4e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	0018      	movs	r0, r3
 8018a54:	f00a f8d2 	bl	8022bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	4a72      	ldr	r2, [pc, #456]	@ (8018c24 <HAL_PCD_Init+0x1fc>)
 8018a5c:	2103      	movs	r1, #3
 8018a5e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	0018      	movs	r0, r3
 8018a66:	f005 ff1b 	bl	801e8a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018a6a:	230f      	movs	r3, #15
 8018a6c:	18fb      	adds	r3, r7, r3
 8018a6e:	2200      	movs	r2, #0
 8018a70:	701a      	strb	r2, [r3, #0]
 8018a72:	e049      	b.n	8018b08 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8018a74:	200f      	movs	r0, #15
 8018a76:	183b      	adds	r3, r7, r0
 8018a78:	781b      	ldrb	r3, [r3, #0]
 8018a7a:	6879      	ldr	r1, [r7, #4]
 8018a7c:	1c5a      	adds	r2, r3, #1
 8018a7e:	0013      	movs	r3, r2
 8018a80:	009b      	lsls	r3, r3, #2
 8018a82:	189b      	adds	r3, r3, r2
 8018a84:	00db      	lsls	r3, r3, #3
 8018a86:	18cb      	adds	r3, r1, r3
 8018a88:	3301      	adds	r3, #1
 8018a8a:	2201      	movs	r2, #1
 8018a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8018a8e:	183b      	adds	r3, r7, r0
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	6879      	ldr	r1, [r7, #4]
 8018a94:	1c5a      	adds	r2, r3, #1
 8018a96:	0013      	movs	r3, r2
 8018a98:	009b      	lsls	r3, r3, #2
 8018a9a:	189b      	adds	r3, r3, r2
 8018a9c:	00db      	lsls	r3, r3, #3
 8018a9e:	183a      	adds	r2, r7, r0
 8018aa0:	7812      	ldrb	r2, [r2, #0]
 8018aa2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8018aa4:	183b      	adds	r3, r7, r0
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	6879      	ldr	r1, [r7, #4]
 8018aaa:	1c5a      	adds	r2, r3, #1
 8018aac:	0013      	movs	r3, r2
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	189b      	adds	r3, r3, r2
 8018ab2:	00db      	lsls	r3, r3, #3
 8018ab4:	18cb      	adds	r3, r1, r3
 8018ab6:	3303      	adds	r3, #3
 8018ab8:	2200      	movs	r2, #0
 8018aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8018abc:	183b      	adds	r3, r7, r0
 8018abe:	781a      	ldrb	r2, [r3, #0]
 8018ac0:	6879      	ldr	r1, [r7, #4]
 8018ac2:	0013      	movs	r3, r2
 8018ac4:	009b      	lsls	r3, r3, #2
 8018ac6:	189b      	adds	r3, r3, r2
 8018ac8:	00db      	lsls	r3, r3, #3
 8018aca:	18cb      	adds	r3, r1, r3
 8018acc:	3338      	adds	r3, #56	@ 0x38
 8018ace:	2200      	movs	r2, #0
 8018ad0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8018ad2:	183b      	adds	r3, r7, r0
 8018ad4:	781a      	ldrb	r2, [r3, #0]
 8018ad6:	6879      	ldr	r1, [r7, #4]
 8018ad8:	0013      	movs	r3, r2
 8018ada:	009b      	lsls	r3, r3, #2
 8018adc:	189b      	adds	r3, r3, r2
 8018ade:	00db      	lsls	r3, r3, #3
 8018ae0:	18cb      	adds	r3, r1, r3
 8018ae2:	333c      	adds	r3, #60	@ 0x3c
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8018ae8:	183b      	adds	r3, r7, r0
 8018aea:	781a      	ldrb	r2, [r3, #0]
 8018aec:	6879      	ldr	r1, [r7, #4]
 8018aee:	0013      	movs	r3, r2
 8018af0:	009b      	lsls	r3, r3, #2
 8018af2:	189b      	adds	r3, r3, r2
 8018af4:	00db      	lsls	r3, r3, #3
 8018af6:	18cb      	adds	r3, r1, r3
 8018af8:	3340      	adds	r3, #64	@ 0x40
 8018afa:	2200      	movs	r2, #0
 8018afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018afe:	183b      	adds	r3, r7, r0
 8018b00:	781a      	ldrb	r2, [r3, #0]
 8018b02:	183b      	adds	r3, r7, r0
 8018b04:	3201      	adds	r2, #1
 8018b06:	701a      	strb	r2, [r3, #0]
 8018b08:	210f      	movs	r1, #15
 8018b0a:	187b      	adds	r3, r7, r1
 8018b0c:	781a      	ldrb	r2, [r3, #0]
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	685b      	ldr	r3, [r3, #4]
 8018b12:	429a      	cmp	r2, r3
 8018b14:	d3ae      	bcc.n	8018a74 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018b16:	187b      	adds	r3, r7, r1
 8018b18:	2200      	movs	r2, #0
 8018b1a:	701a      	strb	r2, [r3, #0]
 8018b1c:	e056      	b.n	8018bcc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8018b1e:	240f      	movs	r4, #15
 8018b20:	193b      	adds	r3, r7, r4
 8018b22:	781a      	ldrb	r2, [r3, #0]
 8018b24:	6878      	ldr	r0, [r7, #4]
 8018b26:	236a      	movs	r3, #106	@ 0x6a
 8018b28:	33ff      	adds	r3, #255	@ 0xff
 8018b2a:	0019      	movs	r1, r3
 8018b2c:	0013      	movs	r3, r2
 8018b2e:	009b      	lsls	r3, r3, #2
 8018b30:	189b      	adds	r3, r3, r2
 8018b32:	00db      	lsls	r3, r3, #3
 8018b34:	18c3      	adds	r3, r0, r3
 8018b36:	185b      	adds	r3, r3, r1
 8018b38:	2200      	movs	r2, #0
 8018b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8018b3c:	193b      	adds	r3, r7, r4
 8018b3e:	781a      	ldrb	r2, [r3, #0]
 8018b40:	6878      	ldr	r0, [r7, #4]
 8018b42:	23b4      	movs	r3, #180	@ 0xb4
 8018b44:	0059      	lsls	r1, r3, #1
 8018b46:	0013      	movs	r3, r2
 8018b48:	009b      	lsls	r3, r3, #2
 8018b4a:	189b      	adds	r3, r3, r2
 8018b4c:	00db      	lsls	r3, r3, #3
 8018b4e:	18c3      	adds	r3, r0, r3
 8018b50:	185b      	adds	r3, r3, r1
 8018b52:	193a      	adds	r2, r7, r4
 8018b54:	7812      	ldrb	r2, [r2, #0]
 8018b56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8018b58:	193b      	adds	r3, r7, r4
 8018b5a:	781a      	ldrb	r2, [r3, #0]
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	236c      	movs	r3, #108	@ 0x6c
 8018b60:	33ff      	adds	r3, #255	@ 0xff
 8018b62:	0019      	movs	r1, r3
 8018b64:	0013      	movs	r3, r2
 8018b66:	009b      	lsls	r3, r3, #2
 8018b68:	189b      	adds	r3, r3, r2
 8018b6a:	00db      	lsls	r3, r3, #3
 8018b6c:	18c3      	adds	r3, r0, r3
 8018b6e:	185b      	adds	r3, r3, r1
 8018b70:	2200      	movs	r2, #0
 8018b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8018b74:	193b      	adds	r3, r7, r4
 8018b76:	781a      	ldrb	r2, [r3, #0]
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	23bc      	movs	r3, #188	@ 0xbc
 8018b7c:	0059      	lsls	r1, r3, #1
 8018b7e:	0013      	movs	r3, r2
 8018b80:	009b      	lsls	r3, r3, #2
 8018b82:	189b      	adds	r3, r3, r2
 8018b84:	00db      	lsls	r3, r3, #3
 8018b86:	18c3      	adds	r3, r0, r3
 8018b88:	185b      	adds	r3, r3, r1
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8018b8e:	193b      	adds	r3, r7, r4
 8018b90:	781a      	ldrb	r2, [r3, #0]
 8018b92:	6878      	ldr	r0, [r7, #4]
 8018b94:	23be      	movs	r3, #190	@ 0xbe
 8018b96:	0059      	lsls	r1, r3, #1
 8018b98:	0013      	movs	r3, r2
 8018b9a:	009b      	lsls	r3, r3, #2
 8018b9c:	189b      	adds	r3, r3, r2
 8018b9e:	00db      	lsls	r3, r3, #3
 8018ba0:	18c3      	adds	r3, r0, r3
 8018ba2:	185b      	adds	r3, r3, r1
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8018ba8:	193b      	adds	r3, r7, r4
 8018baa:	781a      	ldrb	r2, [r3, #0]
 8018bac:	6878      	ldr	r0, [r7, #4]
 8018bae:	23c0      	movs	r3, #192	@ 0xc0
 8018bb0:	0059      	lsls	r1, r3, #1
 8018bb2:	0013      	movs	r3, r2
 8018bb4:	009b      	lsls	r3, r3, #2
 8018bb6:	189b      	adds	r3, r3, r2
 8018bb8:	00db      	lsls	r3, r3, #3
 8018bba:	18c3      	adds	r3, r0, r3
 8018bbc:	185b      	adds	r3, r3, r1
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018bc2:	193b      	adds	r3, r7, r4
 8018bc4:	781a      	ldrb	r2, [r3, #0]
 8018bc6:	193b      	adds	r3, r7, r4
 8018bc8:	3201      	adds	r2, #1
 8018bca:	701a      	strb	r2, [r3, #0]
 8018bcc:	230f      	movs	r3, #15
 8018bce:	18fb      	adds	r3, r7, r3
 8018bd0:	781a      	ldrb	r2, [r3, #0]
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	685b      	ldr	r3, [r3, #4]
 8018bd6:	429a      	cmp	r2, r3
 8018bd8:	d3a1      	bcc.n	8018b1e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6818      	ldr	r0, [r3, #0]
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	466a      	mov	r2, sp
 8018be2:	0011      	movs	r1, r2
 8018be4:	001a      	movs	r2, r3
 8018be6:	3210      	adds	r2, #16
 8018be8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8018bea:	c170      	stmia	r1!, {r4, r5, r6}
 8018bec:	ca30      	ldmia	r2!, {r4, r5}
 8018bee:	c130      	stmia	r1!, {r4, r5}
 8018bf0:	6859      	ldr	r1, [r3, #4]
 8018bf2:	689a      	ldr	r2, [r3, #8]
 8018bf4:	68db      	ldr	r3, [r3, #12]
 8018bf6:	f005 fe6d 	bl	801e8d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	2224      	movs	r2, #36	@ 0x24
 8018bfe:	2100      	movs	r1, #0
 8018c00:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	4a07      	ldr	r2, [pc, #28]	@ (8018c24 <HAL_PCD_Init+0x1fc>)
 8018c06:	2101      	movs	r1, #1
 8018c08:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	69db      	ldr	r3, [r3, #28]
 8018c0e:	2b01      	cmp	r3, #1
 8018c10:	d103      	bne.n	8018c1a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	0018      	movs	r0, r3
 8018c16:	f001 fd23 	bl	801a660 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8018c1a:	2300      	movs	r3, #0
}
 8018c1c:	0018      	movs	r0, r3
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	b005      	add	sp, #20
 8018c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c24:	000002a9 	.word	0x000002a9

08018c28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b082      	sub	sp, #8
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8018c30:	687a      	ldr	r2, [r7, #4]
 8018c32:	23aa      	movs	r3, #170	@ 0xaa
 8018c34:	009b      	lsls	r3, r3, #2
 8018c36:	5cd3      	ldrb	r3, [r2, r3]
 8018c38:	2b01      	cmp	r3, #1
 8018c3a:	d101      	bne.n	8018c40 <HAL_PCD_Start+0x18>
 8018c3c:	2302      	movs	r3, #2
 8018c3e:	e014      	b.n	8018c6a <HAL_PCD_Start+0x42>
 8018c40:	687a      	ldr	r2, [r7, #4]
 8018c42:	23aa      	movs	r3, #170	@ 0xaa
 8018c44:	009b      	lsls	r3, r3, #2
 8018c46:	2101      	movs	r1, #1
 8018c48:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	0018      	movs	r0, r3
 8018c50:	f005 fe10 	bl	801e874 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	0018      	movs	r0, r3
 8018c5a:	f007 fe13 	bl	8020884 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8018c5e:	687a      	ldr	r2, [r7, #4]
 8018c60:	23aa      	movs	r3, #170	@ 0xaa
 8018c62:	009b      	lsls	r3, r3, #2
 8018c64:	2100      	movs	r1, #0
 8018c66:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018c68:	2300      	movs	r3, #0
}
 8018c6a:	0018      	movs	r0, r3
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	b002      	add	sp, #8
 8018c70:	bd80      	pop	{r7, pc}
	...

08018c74 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b084      	sub	sp, #16
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	0018      	movs	r0, r3
 8018c82:	f007 fe15 	bl	80208b0 <USB_ReadInterrupts>
 8018c86:	0003      	movs	r3, r0
 8018c88:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8018c8a:	68fa      	ldr	r2, [r7, #12]
 8018c8c:	2380      	movs	r3, #128	@ 0x80
 8018c8e:	021b      	lsls	r3, r3, #8
 8018c90:	4013      	ands	r3, r2
 8018c92:	d004      	beq.n	8018c9e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	0018      	movs	r0, r3
 8018c98:	f000 fb62 	bl	8019360 <PCD_EP_ISR_Handler>

    return;
 8018c9c:	e11d      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8018c9e:	68fa      	ldr	r2, [r7, #12]
 8018ca0:	2380      	movs	r3, #128	@ 0x80
 8018ca2:	00db      	lsls	r3, r3, #3
 8018ca4:	4013      	ands	r3, r2
 8018ca6:	d015      	beq.n	8018cd4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	2244      	movs	r2, #68	@ 0x44
 8018cae:	5a9b      	ldrh	r3, [r3, r2]
 8018cb0:	b29a      	uxth	r2, r3
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	498a      	ldr	r1, [pc, #552]	@ (8018ee0 <HAL_PCD_IRQHandler+0x26c>)
 8018cb8:	400a      	ands	r2, r1
 8018cba:	b291      	uxth	r1, r2
 8018cbc:	2244      	movs	r2, #68	@ 0x44
 8018cbe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	0018      	movs	r0, r3
 8018cc4:	f00a f81d 	bl	8022d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	2100      	movs	r1, #0
 8018ccc:	0018      	movs	r0, r3
 8018cce:	f000 f915 	bl	8018efc <HAL_PCD_SetAddress>

    return;
 8018cd2:	e102      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8018cd4:	68fa      	ldr	r2, [r7, #12]
 8018cd6:	2380      	movs	r3, #128	@ 0x80
 8018cd8:	01db      	lsls	r3, r3, #7
 8018cda:	4013      	ands	r3, r2
 8018cdc:	d00c      	beq.n	8018cf8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	2244      	movs	r2, #68	@ 0x44
 8018ce4:	5a9b      	ldrh	r3, [r3, r2]
 8018ce6:	b29a      	uxth	r2, r3
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	497d      	ldr	r1, [pc, #500]	@ (8018ee4 <HAL_PCD_IRQHandler+0x270>)
 8018cee:	400a      	ands	r2, r1
 8018cf0:	b291      	uxth	r1, r2
 8018cf2:	2244      	movs	r2, #68	@ 0x44
 8018cf4:	5299      	strh	r1, [r3, r2]

    return;
 8018cf6:	e0f0      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8018cf8:	68fa      	ldr	r2, [r7, #12]
 8018cfa:	2380      	movs	r3, #128	@ 0x80
 8018cfc:	019b      	lsls	r3, r3, #6
 8018cfe:	4013      	ands	r3, r2
 8018d00:	d00c      	beq.n	8018d1c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	2244      	movs	r2, #68	@ 0x44
 8018d08:	5a9b      	ldrh	r3, [r3, r2]
 8018d0a:	b29a      	uxth	r2, r3
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	4975      	ldr	r1, [pc, #468]	@ (8018ee8 <HAL_PCD_IRQHandler+0x274>)
 8018d12:	400a      	ands	r2, r1
 8018d14:	b291      	uxth	r1, r2
 8018d16:	2244      	movs	r2, #68	@ 0x44
 8018d18:	5299      	strh	r1, [r3, r2]

    return;
 8018d1a:	e0de      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8018d1c:	68fa      	ldr	r2, [r7, #12]
 8018d1e:	2380      	movs	r3, #128	@ 0x80
 8018d20:	015b      	lsls	r3, r3, #5
 8018d22:	4013      	ands	r3, r2
 8018d24:	d038      	beq.n	8018d98 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	2240      	movs	r2, #64	@ 0x40
 8018d2c:	5a9b      	ldrh	r3, [r3, r2]
 8018d2e:	b29a      	uxth	r2, r3
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2104      	movs	r1, #4
 8018d36:	438a      	bics	r2, r1
 8018d38:	b291      	uxth	r1, r2
 8018d3a:	2240      	movs	r2, #64	@ 0x40
 8018d3c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	2240      	movs	r2, #64	@ 0x40
 8018d44:	5a9b      	ldrh	r3, [r3, r2]
 8018d46:	b29a      	uxth	r2, r3
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	2108      	movs	r1, #8
 8018d4e:	438a      	bics	r2, r1
 8018d50:	b291      	uxth	r1, r2
 8018d52:	2240      	movs	r2, #64	@ 0x40
 8018d54:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8018d56:	687a      	ldr	r2, [r7, #4]
 8018d58:	23b8      	movs	r3, #184	@ 0xb8
 8018d5a:	009b      	lsls	r3, r3, #2
 8018d5c:	5cd3      	ldrb	r3, [r2, r3]
 8018d5e:	2b01      	cmp	r3, #1
 8018d60:	d109      	bne.n	8018d76 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8018d62:	687a      	ldr	r2, [r7, #4]
 8018d64:	23b8      	movs	r3, #184	@ 0xb8
 8018d66:	009b      	lsls	r3, r3, #2
 8018d68:	2100      	movs	r1, #0
 8018d6a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	2100      	movs	r1, #0
 8018d70:	0018      	movs	r0, r3
 8018d72:	f001 fc9f 	bl	801a6b4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	0018      	movs	r0, r3
 8018d7a:	f00a f803 	bl	8022d84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	2244      	movs	r2, #68	@ 0x44
 8018d84:	5a9b      	ldrh	r3, [r3, r2]
 8018d86:	b29a      	uxth	r2, r3
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	4957      	ldr	r1, [pc, #348]	@ (8018eec <HAL_PCD_IRQHandler+0x278>)
 8018d8e:	400a      	ands	r2, r1
 8018d90:	b291      	uxth	r1, r2
 8018d92:	2244      	movs	r2, #68	@ 0x44
 8018d94:	5299      	strh	r1, [r3, r2]

    return;
 8018d96:	e0a0      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8018d98:	68fa      	ldr	r2, [r7, #12]
 8018d9a:	2380      	movs	r3, #128	@ 0x80
 8018d9c:	011b      	lsls	r3, r3, #4
 8018d9e:	4013      	ands	r3, r2
 8018da0:	d028      	beq.n	8018df4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	2240      	movs	r2, #64	@ 0x40
 8018da8:	5a9b      	ldrh	r3, [r3, r2]
 8018daa:	b29a      	uxth	r2, r3
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	2108      	movs	r1, #8
 8018db2:	430a      	orrs	r2, r1
 8018db4:	b291      	uxth	r1, r2
 8018db6:	2240      	movs	r2, #64	@ 0x40
 8018db8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	2244      	movs	r2, #68	@ 0x44
 8018dc0:	5a9b      	ldrh	r3, [r3, r2]
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	4949      	ldr	r1, [pc, #292]	@ (8018ef0 <HAL_PCD_IRQHandler+0x27c>)
 8018dca:	400a      	ands	r2, r1
 8018dcc:	b291      	uxth	r1, r2
 8018dce:	2244      	movs	r2, #68	@ 0x44
 8018dd0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	2240      	movs	r2, #64	@ 0x40
 8018dd8:	5a9b      	ldrh	r3, [r3, r2]
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	2104      	movs	r1, #4
 8018de2:	430a      	orrs	r2, r1
 8018de4:	b291      	uxth	r1, r2
 8018de6:	2240      	movs	r2, #64	@ 0x40
 8018de8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	0018      	movs	r0, r3
 8018dee:	f009 ffad 	bl	8022d4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018df2:	e072      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2280      	movs	r2, #128	@ 0x80
 8018df8:	4013      	ands	r3, r2
 8018dfa:	d046      	beq.n	8018e8a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	2244      	movs	r2, #68	@ 0x44
 8018e02:	5a9b      	ldrh	r3, [r3, r2]
 8018e04:	b29a      	uxth	r2, r3
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	2180      	movs	r1, #128	@ 0x80
 8018e0c:	438a      	bics	r2, r1
 8018e0e:	b291      	uxth	r1, r2
 8018e10:	2244      	movs	r2, #68	@ 0x44
 8018e12:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8018e14:	687a      	ldr	r2, [r7, #4]
 8018e16:	23b8      	movs	r3, #184	@ 0xb8
 8018e18:	009b      	lsls	r3, r3, #2
 8018e1a:	5cd3      	ldrb	r3, [r2, r3]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d12f      	bne.n	8018e80 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	2240      	movs	r2, #64	@ 0x40
 8018e26:	5a9b      	ldrh	r3, [r3, r2]
 8018e28:	b29a      	uxth	r2, r3
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2104      	movs	r1, #4
 8018e30:	430a      	orrs	r2, r1
 8018e32:	b291      	uxth	r1, r2
 8018e34:	2240      	movs	r2, #64	@ 0x40
 8018e36:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	2240      	movs	r2, #64	@ 0x40
 8018e3e:	5a9b      	ldrh	r3, [r3, r2]
 8018e40:	b29a      	uxth	r2, r3
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	2108      	movs	r1, #8
 8018e48:	430a      	orrs	r2, r1
 8018e4a:	b291      	uxth	r1, r2
 8018e4c:	2240      	movs	r2, #64	@ 0x40
 8018e4e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8018e50:	687a      	ldr	r2, [r7, #4]
 8018e52:	23b8      	movs	r3, #184	@ 0xb8
 8018e54:	009b      	lsls	r3, r3, #2
 8018e56:	2101      	movs	r1, #1
 8018e58:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2254      	movs	r2, #84	@ 0x54
 8018e60:	5a9b      	ldrh	r3, [r3, r2]
 8018e62:	b29b      	uxth	r3, r3
 8018e64:	089b      	lsrs	r3, r3, #2
 8018e66:	223c      	movs	r2, #60	@ 0x3c
 8018e68:	4013      	ands	r3, r2
 8018e6a:	0019      	movs	r1, r3
 8018e6c:	687a      	ldr	r2, [r7, #4]
 8018e6e:	23b9      	movs	r3, #185	@ 0xb9
 8018e70:	009b      	lsls	r3, r3, #2
 8018e72:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2101      	movs	r1, #1
 8018e78:	0018      	movs	r0, r3
 8018e7a:	f001 fc1b 	bl	801a6b4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8018e7e:	e02c      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	0018      	movs	r0, r3
 8018e84:	f009 ff62 	bl	8022d4c <HAL_PCD_SuspendCallback>
    return;
 8018e88:	e027      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8018e8a:	68fa      	ldr	r2, [r7, #12]
 8018e8c:	2380      	movs	r3, #128	@ 0x80
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	4013      	ands	r3, r2
 8018e92:	d010      	beq.n	8018eb6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	2244      	movs	r2, #68	@ 0x44
 8018e9a:	5a9b      	ldrh	r3, [r3, r2]
 8018e9c:	b29a      	uxth	r2, r3
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	4914      	ldr	r1, [pc, #80]	@ (8018ef4 <HAL_PCD_IRQHandler+0x280>)
 8018ea4:	400a      	ands	r2, r1
 8018ea6:	b291      	uxth	r1, r2
 8018ea8:	2244      	movs	r2, #68	@ 0x44
 8018eaa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	0018      	movs	r0, r3
 8018eb0:	f009 ff18 	bl	8022ce4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018eb4:	e011      	b.n	8018eda <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8018eb6:	68fa      	ldr	r2, [r7, #12]
 8018eb8:	2380      	movs	r3, #128	@ 0x80
 8018eba:	005b      	lsls	r3, r3, #1
 8018ebc:	4013      	ands	r3, r2
 8018ebe:	d00c      	beq.n	8018eda <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	2244      	movs	r2, #68	@ 0x44
 8018ec6:	5a9b      	ldrh	r3, [r3, r2]
 8018ec8:	b29a      	uxth	r2, r3
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	490a      	ldr	r1, [pc, #40]	@ (8018ef8 <HAL_PCD_IRQHandler+0x284>)
 8018ed0:	400a      	ands	r2, r1
 8018ed2:	b291      	uxth	r1, r2
 8018ed4:	2244      	movs	r2, #68	@ 0x44
 8018ed6:	5299      	strh	r1, [r3, r2]

    return;
 8018ed8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018eda:	46bd      	mov	sp, r7
 8018edc:	b004      	add	sp, #16
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	fffffbff 	.word	0xfffffbff
 8018ee4:	ffffbfff 	.word	0xffffbfff
 8018ee8:	ffffdfff 	.word	0xffffdfff
 8018eec:	ffffefff 	.word	0xffffefff
 8018ef0:	fffff7ff 	.word	0xfffff7ff
 8018ef4:	fffffdff 	.word	0xfffffdff
 8018ef8:	fffffeff 	.word	0xfffffeff

08018efc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b082      	sub	sp, #8
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
 8018f04:	000a      	movs	r2, r1
 8018f06:	1cfb      	adds	r3, r7, #3
 8018f08:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8018f0a:	687a      	ldr	r2, [r7, #4]
 8018f0c:	23aa      	movs	r3, #170	@ 0xaa
 8018f0e:	009b      	lsls	r3, r3, #2
 8018f10:	5cd3      	ldrb	r3, [r2, r3]
 8018f12:	2b01      	cmp	r3, #1
 8018f14:	d101      	bne.n	8018f1a <HAL_PCD_SetAddress+0x1e>
 8018f16:	2302      	movs	r3, #2
 8018f18:	e017      	b.n	8018f4a <HAL_PCD_SetAddress+0x4e>
 8018f1a:	687a      	ldr	r2, [r7, #4]
 8018f1c:	23aa      	movs	r3, #170	@ 0xaa
 8018f1e:	009b      	lsls	r3, r3, #2
 8018f20:	2101      	movs	r1, #1
 8018f22:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	1cfa      	adds	r2, r7, #3
 8018f28:	2124      	movs	r1, #36	@ 0x24
 8018f2a:	7812      	ldrb	r2, [r2, #0]
 8018f2c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681a      	ldr	r2, [r3, #0]
 8018f32:	1cfb      	adds	r3, r7, #3
 8018f34:	781b      	ldrb	r3, [r3, #0]
 8018f36:	0019      	movs	r1, r3
 8018f38:	0010      	movs	r0, r2
 8018f3a:	f007 fc8f 	bl	802085c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	23aa      	movs	r3, #170	@ 0xaa
 8018f42:	009b      	lsls	r3, r3, #2
 8018f44:	2100      	movs	r1, #0
 8018f46:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018f48:	2300      	movs	r3, #0
}
 8018f4a:	0018      	movs	r0, r3
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	b002      	add	sp, #8
 8018f50:	bd80      	pop	{r7, pc}

08018f52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8018f52:	b590      	push	{r4, r7, lr}
 8018f54:	b085      	sub	sp, #20
 8018f56:	af00      	add	r7, sp, #0
 8018f58:	6078      	str	r0, [r7, #4]
 8018f5a:	000c      	movs	r4, r1
 8018f5c:	0010      	movs	r0, r2
 8018f5e:	0019      	movs	r1, r3
 8018f60:	1cfb      	adds	r3, r7, #3
 8018f62:	1c22      	adds	r2, r4, #0
 8018f64:	701a      	strb	r2, [r3, #0]
 8018f66:	003b      	movs	r3, r7
 8018f68:	1c02      	adds	r2, r0, #0
 8018f6a:	801a      	strh	r2, [r3, #0]
 8018f6c:	1cbb      	adds	r3, r7, #2
 8018f6e:	1c0a      	adds	r2, r1, #0
 8018f70:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8018f72:	230b      	movs	r3, #11
 8018f74:	18fb      	adds	r3, r7, r3
 8018f76:	2200      	movs	r2, #0
 8018f78:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018f7a:	1cfb      	adds	r3, r7, #3
 8018f7c:	781b      	ldrb	r3, [r3, #0]
 8018f7e:	b25b      	sxtb	r3, r3
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	da0f      	bge.n	8018fa4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018f84:	1cfb      	adds	r3, r7, #3
 8018f86:	781b      	ldrb	r3, [r3, #0]
 8018f88:	2207      	movs	r2, #7
 8018f8a:	4013      	ands	r3, r2
 8018f8c:	1c5a      	adds	r2, r3, #1
 8018f8e:	0013      	movs	r3, r2
 8018f90:	009b      	lsls	r3, r3, #2
 8018f92:	189b      	adds	r3, r3, r2
 8018f94:	00db      	lsls	r3, r3, #3
 8018f96:	687a      	ldr	r2, [r7, #4]
 8018f98:	18d3      	adds	r3, r2, r3
 8018f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	2201      	movs	r2, #1
 8018fa0:	705a      	strb	r2, [r3, #1]
 8018fa2:	e00f      	b.n	8018fc4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018fa4:	1cfb      	adds	r3, r7, #3
 8018fa6:	781b      	ldrb	r3, [r3, #0]
 8018fa8:	2207      	movs	r2, #7
 8018faa:	401a      	ands	r2, r3
 8018fac:	0013      	movs	r3, r2
 8018fae:	009b      	lsls	r3, r3, #2
 8018fb0:	189b      	adds	r3, r3, r2
 8018fb2:	00db      	lsls	r3, r3, #3
 8018fb4:	3369      	adds	r3, #105	@ 0x69
 8018fb6:	33ff      	adds	r3, #255	@ 0xff
 8018fb8:	687a      	ldr	r2, [r7, #4]
 8018fba:	18d3      	adds	r3, r2, r3
 8018fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018fc4:	1cfb      	adds	r3, r7, #3
 8018fc6:	781b      	ldrb	r3, [r3, #0]
 8018fc8:	2207      	movs	r2, #7
 8018fca:	4013      	ands	r3, r2
 8018fcc:	b2da      	uxtb	r2, r3
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8018fd2:	003b      	movs	r3, r7
 8018fd4:	881a      	ldrh	r2, [r3, #0]
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	1cba      	adds	r2, r7, #2
 8018fde:	7812      	ldrb	r2, [r2, #0]
 8018fe0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8018fe2:	1cbb      	adds	r3, r7, #2
 8018fe4:	781b      	ldrb	r3, [r3, #0]
 8018fe6:	2b02      	cmp	r3, #2
 8018fe8:	d102      	bne.n	8018ff0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	2200      	movs	r2, #0
 8018fee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8018ff0:	687a      	ldr	r2, [r7, #4]
 8018ff2:	23aa      	movs	r3, #170	@ 0xaa
 8018ff4:	009b      	lsls	r3, r3, #2
 8018ff6:	5cd3      	ldrb	r3, [r2, r3]
 8018ff8:	2b01      	cmp	r3, #1
 8018ffa:	d101      	bne.n	8019000 <HAL_PCD_EP_Open+0xae>
 8018ffc:	2302      	movs	r3, #2
 8018ffe:	e013      	b.n	8019028 <HAL_PCD_EP_Open+0xd6>
 8019000:	687a      	ldr	r2, [r7, #4]
 8019002:	23aa      	movs	r3, #170	@ 0xaa
 8019004:	009b      	lsls	r3, r3, #2
 8019006:	2101      	movs	r1, #1
 8019008:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	68fa      	ldr	r2, [r7, #12]
 8019010:	0011      	movs	r1, r2
 8019012:	0018      	movs	r0, r3
 8019014:	f005 fc86 	bl	801e924 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019018:	687a      	ldr	r2, [r7, #4]
 801901a:	23aa      	movs	r3, #170	@ 0xaa
 801901c:	009b      	lsls	r3, r3, #2
 801901e:	2100      	movs	r1, #0
 8019020:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019022:	230b      	movs	r3, #11
 8019024:	18fb      	adds	r3, r7, r3
 8019026:	781b      	ldrb	r3, [r3, #0]
}
 8019028:	0018      	movs	r0, r3
 801902a:	46bd      	mov	sp, r7
 801902c:	b005      	add	sp, #20
 801902e:	bd90      	pop	{r4, r7, pc}

08019030 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b084      	sub	sp, #16
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
 8019038:	000a      	movs	r2, r1
 801903a:	1cfb      	adds	r3, r7, #3
 801903c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801903e:	1cfb      	adds	r3, r7, #3
 8019040:	781b      	ldrb	r3, [r3, #0]
 8019042:	b25b      	sxtb	r3, r3
 8019044:	2b00      	cmp	r3, #0
 8019046:	da0f      	bge.n	8019068 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019048:	1cfb      	adds	r3, r7, #3
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	2207      	movs	r2, #7
 801904e:	4013      	ands	r3, r2
 8019050:	1c5a      	adds	r2, r3, #1
 8019052:	0013      	movs	r3, r2
 8019054:	009b      	lsls	r3, r3, #2
 8019056:	189b      	adds	r3, r3, r2
 8019058:	00db      	lsls	r3, r3, #3
 801905a:	687a      	ldr	r2, [r7, #4]
 801905c:	18d3      	adds	r3, r2, r3
 801905e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	2201      	movs	r2, #1
 8019064:	705a      	strb	r2, [r3, #1]
 8019066:	e00f      	b.n	8019088 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019068:	1cfb      	adds	r3, r7, #3
 801906a:	781b      	ldrb	r3, [r3, #0]
 801906c:	2207      	movs	r2, #7
 801906e:	401a      	ands	r2, r3
 8019070:	0013      	movs	r3, r2
 8019072:	009b      	lsls	r3, r3, #2
 8019074:	189b      	adds	r3, r3, r2
 8019076:	00db      	lsls	r3, r3, #3
 8019078:	3369      	adds	r3, #105	@ 0x69
 801907a:	33ff      	adds	r3, #255	@ 0xff
 801907c:	687a      	ldr	r2, [r7, #4]
 801907e:	18d3      	adds	r3, r2, r3
 8019080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	2200      	movs	r2, #0
 8019086:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019088:	1cfb      	adds	r3, r7, #3
 801908a:	781b      	ldrb	r3, [r3, #0]
 801908c:	2207      	movs	r2, #7
 801908e:	4013      	ands	r3, r2
 8019090:	b2da      	uxtb	r2, r3
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019096:	687a      	ldr	r2, [r7, #4]
 8019098:	23aa      	movs	r3, #170	@ 0xaa
 801909a:	009b      	lsls	r3, r3, #2
 801909c:	5cd3      	ldrb	r3, [r2, r3]
 801909e:	2b01      	cmp	r3, #1
 80190a0:	d101      	bne.n	80190a6 <HAL_PCD_EP_Close+0x76>
 80190a2:	2302      	movs	r3, #2
 80190a4:	e011      	b.n	80190ca <HAL_PCD_EP_Close+0x9a>
 80190a6:	687a      	ldr	r2, [r7, #4]
 80190a8:	23aa      	movs	r3, #170	@ 0xaa
 80190aa:	009b      	lsls	r3, r3, #2
 80190ac:	2101      	movs	r1, #1
 80190ae:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	68fa      	ldr	r2, [r7, #12]
 80190b6:	0011      	movs	r1, r2
 80190b8:	0018      	movs	r0, r3
 80190ba:	f005 ffd5 	bl	801f068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	23aa      	movs	r3, #170	@ 0xaa
 80190c2:	009b      	lsls	r3, r3, #2
 80190c4:	2100      	movs	r1, #0
 80190c6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80190c8:	2300      	movs	r3, #0
}
 80190ca:	0018      	movs	r0, r3
 80190cc:	46bd      	mov	sp, r7
 80190ce:	b004      	add	sp, #16
 80190d0:	bd80      	pop	{r7, pc}

080190d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80190d2:	b580      	push	{r7, lr}
 80190d4:	b086      	sub	sp, #24
 80190d6:	af00      	add	r7, sp, #0
 80190d8:	60f8      	str	r0, [r7, #12]
 80190da:	607a      	str	r2, [r7, #4]
 80190dc:	603b      	str	r3, [r7, #0]
 80190de:	200b      	movs	r0, #11
 80190e0:	183b      	adds	r3, r7, r0
 80190e2:	1c0a      	adds	r2, r1, #0
 80190e4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80190e6:	0001      	movs	r1, r0
 80190e8:	187b      	adds	r3, r7, r1
 80190ea:	781b      	ldrb	r3, [r3, #0]
 80190ec:	2207      	movs	r2, #7
 80190ee:	401a      	ands	r2, r3
 80190f0:	0013      	movs	r3, r2
 80190f2:	009b      	lsls	r3, r3, #2
 80190f4:	189b      	adds	r3, r3, r2
 80190f6:	00db      	lsls	r3, r3, #3
 80190f8:	3369      	adds	r3, #105	@ 0x69
 80190fa:	33ff      	adds	r3, #255	@ 0xff
 80190fc:	68fa      	ldr	r2, [r7, #12]
 80190fe:	18d3      	adds	r3, r2, r3
 8019100:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019102:	697b      	ldr	r3, [r7, #20]
 8019104:	687a      	ldr	r2, [r7, #4]
 8019106:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019108:	697b      	ldr	r3, [r7, #20]
 801910a:	683a      	ldr	r2, [r7, #0]
 801910c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801910e:	697b      	ldr	r3, [r7, #20]
 8019110:	2200      	movs	r2, #0
 8019112:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019114:	697b      	ldr	r3, [r7, #20]
 8019116:	2200      	movs	r2, #0
 8019118:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801911a:	187b      	adds	r3, r7, r1
 801911c:	781b      	ldrb	r3, [r3, #0]
 801911e:	2207      	movs	r2, #7
 8019120:	4013      	ands	r3, r2
 8019122:	b2da      	uxtb	r2, r3
 8019124:	697b      	ldr	r3, [r7, #20]
 8019126:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	697a      	ldr	r2, [r7, #20]
 801912e:	0011      	movs	r1, r2
 8019130:	0018      	movs	r0, r3
 8019132:	f006 f959 	bl	801f3e8 <USB_EPStartXfer>

  return HAL_OK;
 8019136:	2300      	movs	r3, #0
}
 8019138:	0018      	movs	r0, r3
 801913a:	46bd      	mov	sp, r7
 801913c:	b006      	add	sp, #24
 801913e:	bd80      	pop	{r7, pc}

08019140 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019140:	b580      	push	{r7, lr}
 8019142:	b082      	sub	sp, #8
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
 8019148:	000a      	movs	r2, r1
 801914a:	1cfb      	adds	r3, r7, #3
 801914c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801914e:	1cfb      	adds	r3, r7, #3
 8019150:	781b      	ldrb	r3, [r3, #0]
 8019152:	2207      	movs	r2, #7
 8019154:	401a      	ands	r2, r3
 8019156:	6878      	ldr	r0, [r7, #4]
 8019158:	23c2      	movs	r3, #194	@ 0xc2
 801915a:	0059      	lsls	r1, r3, #1
 801915c:	0013      	movs	r3, r2
 801915e:	009b      	lsls	r3, r3, #2
 8019160:	189b      	adds	r3, r3, r2
 8019162:	00db      	lsls	r3, r3, #3
 8019164:	18c3      	adds	r3, r0, r3
 8019166:	185b      	adds	r3, r3, r1
 8019168:	681b      	ldr	r3, [r3, #0]
}
 801916a:	0018      	movs	r0, r3
 801916c:	46bd      	mov	sp, r7
 801916e:	b002      	add	sp, #8
 8019170:	bd80      	pop	{r7, pc}

08019172 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019172:	b580      	push	{r7, lr}
 8019174:	b086      	sub	sp, #24
 8019176:	af00      	add	r7, sp, #0
 8019178:	60f8      	str	r0, [r7, #12]
 801917a:	607a      	str	r2, [r7, #4]
 801917c:	603b      	str	r3, [r7, #0]
 801917e:	200b      	movs	r0, #11
 8019180:	183b      	adds	r3, r7, r0
 8019182:	1c0a      	adds	r2, r1, #0
 8019184:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019186:	183b      	adds	r3, r7, r0
 8019188:	781b      	ldrb	r3, [r3, #0]
 801918a:	2207      	movs	r2, #7
 801918c:	4013      	ands	r3, r2
 801918e:	1c5a      	adds	r2, r3, #1
 8019190:	0013      	movs	r3, r2
 8019192:	009b      	lsls	r3, r3, #2
 8019194:	189b      	adds	r3, r3, r2
 8019196:	00db      	lsls	r3, r3, #3
 8019198:	68fa      	ldr	r2, [r7, #12]
 801919a:	18d3      	adds	r3, r2, r3
 801919c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801919e:	697b      	ldr	r3, [r7, #20]
 80191a0:	687a      	ldr	r2, [r7, #4]
 80191a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	683a      	ldr	r2, [r7, #0]
 80191a8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80191aa:	697b      	ldr	r3, [r7, #20]
 80191ac:	2224      	movs	r2, #36	@ 0x24
 80191ae:	2101      	movs	r1, #1
 80191b0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80191b2:	697b      	ldr	r3, [r7, #20]
 80191b4:	683a      	ldr	r2, [r7, #0]
 80191b6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	2200      	movs	r2, #0
 80191bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80191be:	697b      	ldr	r3, [r7, #20]
 80191c0:	2201      	movs	r2, #1
 80191c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80191c4:	183b      	adds	r3, r7, r0
 80191c6:	781b      	ldrb	r3, [r3, #0]
 80191c8:	2207      	movs	r2, #7
 80191ca:	4013      	ands	r3, r2
 80191cc:	b2da      	uxtb	r2, r3
 80191ce:	697b      	ldr	r3, [r7, #20]
 80191d0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	697a      	ldr	r2, [r7, #20]
 80191d8:	0011      	movs	r1, r2
 80191da:	0018      	movs	r0, r3
 80191dc:	f006 f904 	bl	801f3e8 <USB_EPStartXfer>

  return HAL_OK;
 80191e0:	2300      	movs	r3, #0
}
 80191e2:	0018      	movs	r0, r3
 80191e4:	46bd      	mov	sp, r7
 80191e6:	b006      	add	sp, #24
 80191e8:	bd80      	pop	{r7, pc}

080191ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80191ea:	b580      	push	{r7, lr}
 80191ec:	b084      	sub	sp, #16
 80191ee:	af00      	add	r7, sp, #0
 80191f0:	6078      	str	r0, [r7, #4]
 80191f2:	000a      	movs	r2, r1
 80191f4:	1cfb      	adds	r3, r7, #3
 80191f6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80191f8:	1cfb      	adds	r3, r7, #3
 80191fa:	781b      	ldrb	r3, [r3, #0]
 80191fc:	2207      	movs	r2, #7
 80191fe:	401a      	ands	r2, r3
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	685b      	ldr	r3, [r3, #4]
 8019204:	429a      	cmp	r2, r3
 8019206:	d901      	bls.n	801920c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019208:	2301      	movs	r3, #1
 801920a:	e046      	b.n	801929a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801920c:	1cfb      	adds	r3, r7, #3
 801920e:	781b      	ldrb	r3, [r3, #0]
 8019210:	b25b      	sxtb	r3, r3
 8019212:	2b00      	cmp	r3, #0
 8019214:	da0f      	bge.n	8019236 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019216:	1cfb      	adds	r3, r7, #3
 8019218:	781b      	ldrb	r3, [r3, #0]
 801921a:	2207      	movs	r2, #7
 801921c:	4013      	ands	r3, r2
 801921e:	1c5a      	adds	r2, r3, #1
 8019220:	0013      	movs	r3, r2
 8019222:	009b      	lsls	r3, r3, #2
 8019224:	189b      	adds	r3, r3, r2
 8019226:	00db      	lsls	r3, r3, #3
 8019228:	687a      	ldr	r2, [r7, #4]
 801922a:	18d3      	adds	r3, r2, r3
 801922c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	2201      	movs	r2, #1
 8019232:	705a      	strb	r2, [r3, #1]
 8019234:	e00d      	b.n	8019252 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019236:	1cfb      	adds	r3, r7, #3
 8019238:	781a      	ldrb	r2, [r3, #0]
 801923a:	0013      	movs	r3, r2
 801923c:	009b      	lsls	r3, r3, #2
 801923e:	189b      	adds	r3, r3, r2
 8019240:	00db      	lsls	r3, r3, #3
 8019242:	3369      	adds	r3, #105	@ 0x69
 8019244:	33ff      	adds	r3, #255	@ 0xff
 8019246:	687a      	ldr	r2, [r7, #4]
 8019248:	18d3      	adds	r3, r2, r3
 801924a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	2200      	movs	r2, #0
 8019250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	2201      	movs	r2, #1
 8019256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019258:	1cfb      	adds	r3, r7, #3
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	2207      	movs	r2, #7
 801925e:	4013      	ands	r3, r2
 8019260:	b2da      	uxtb	r2, r3
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019266:	687a      	ldr	r2, [r7, #4]
 8019268:	23aa      	movs	r3, #170	@ 0xaa
 801926a:	009b      	lsls	r3, r3, #2
 801926c:	5cd3      	ldrb	r3, [r2, r3]
 801926e:	2b01      	cmp	r3, #1
 8019270:	d101      	bne.n	8019276 <HAL_PCD_EP_SetStall+0x8c>
 8019272:	2302      	movs	r3, #2
 8019274:	e011      	b.n	801929a <HAL_PCD_EP_SetStall+0xb0>
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	23aa      	movs	r3, #170	@ 0xaa
 801927a:	009b      	lsls	r3, r3, #2
 801927c:	2101      	movs	r1, #1
 801927e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	68fa      	ldr	r2, [r7, #12]
 8019286:	0011      	movs	r1, r2
 8019288:	0018      	movs	r0, r3
 801928a:	f007 f9e5 	bl	8020658 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801928e:	687a      	ldr	r2, [r7, #4]
 8019290:	23aa      	movs	r3, #170	@ 0xaa
 8019292:	009b      	lsls	r3, r3, #2
 8019294:	2100      	movs	r1, #0
 8019296:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019298:	2300      	movs	r3, #0
}
 801929a:	0018      	movs	r0, r3
 801929c:	46bd      	mov	sp, r7
 801929e:	b004      	add	sp, #16
 80192a0:	bd80      	pop	{r7, pc}

080192a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80192a2:	b580      	push	{r7, lr}
 80192a4:	b084      	sub	sp, #16
 80192a6:	af00      	add	r7, sp, #0
 80192a8:	6078      	str	r0, [r7, #4]
 80192aa:	000a      	movs	r2, r1
 80192ac:	1cfb      	adds	r3, r7, #3
 80192ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80192b0:	1cfb      	adds	r3, r7, #3
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	220f      	movs	r2, #15
 80192b6:	401a      	ands	r2, r3
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	685b      	ldr	r3, [r3, #4]
 80192bc:	429a      	cmp	r2, r3
 80192be:	d901      	bls.n	80192c4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80192c0:	2301      	movs	r3, #1
 80192c2:	e048      	b.n	8019356 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80192c4:	1cfb      	adds	r3, r7, #3
 80192c6:	781b      	ldrb	r3, [r3, #0]
 80192c8:	b25b      	sxtb	r3, r3
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	da0f      	bge.n	80192ee <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80192ce:	1cfb      	adds	r3, r7, #3
 80192d0:	781b      	ldrb	r3, [r3, #0]
 80192d2:	2207      	movs	r2, #7
 80192d4:	4013      	ands	r3, r2
 80192d6:	1c5a      	adds	r2, r3, #1
 80192d8:	0013      	movs	r3, r2
 80192da:	009b      	lsls	r3, r3, #2
 80192dc:	189b      	adds	r3, r3, r2
 80192de:	00db      	lsls	r3, r3, #3
 80192e0:	687a      	ldr	r2, [r7, #4]
 80192e2:	18d3      	adds	r3, r2, r3
 80192e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	2201      	movs	r2, #1
 80192ea:	705a      	strb	r2, [r3, #1]
 80192ec:	e00f      	b.n	801930e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80192ee:	1cfb      	adds	r3, r7, #3
 80192f0:	781b      	ldrb	r3, [r3, #0]
 80192f2:	2207      	movs	r2, #7
 80192f4:	401a      	ands	r2, r3
 80192f6:	0013      	movs	r3, r2
 80192f8:	009b      	lsls	r3, r3, #2
 80192fa:	189b      	adds	r3, r3, r2
 80192fc:	00db      	lsls	r3, r3, #3
 80192fe:	3369      	adds	r3, #105	@ 0x69
 8019300:	33ff      	adds	r3, #255	@ 0xff
 8019302:	687a      	ldr	r2, [r7, #4]
 8019304:	18d3      	adds	r3, r2, r3
 8019306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	2200      	movs	r2, #0
 801930c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	2200      	movs	r2, #0
 8019312:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019314:	1cfb      	adds	r3, r7, #3
 8019316:	781b      	ldrb	r3, [r3, #0]
 8019318:	2207      	movs	r2, #7
 801931a:	4013      	ands	r3, r2
 801931c:	b2da      	uxtb	r2, r3
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	23aa      	movs	r3, #170	@ 0xaa
 8019326:	009b      	lsls	r3, r3, #2
 8019328:	5cd3      	ldrb	r3, [r2, r3]
 801932a:	2b01      	cmp	r3, #1
 801932c:	d101      	bne.n	8019332 <HAL_PCD_EP_ClrStall+0x90>
 801932e:	2302      	movs	r3, #2
 8019330:	e011      	b.n	8019356 <HAL_PCD_EP_ClrStall+0xb4>
 8019332:	687a      	ldr	r2, [r7, #4]
 8019334:	23aa      	movs	r3, #170	@ 0xaa
 8019336:	009b      	lsls	r3, r3, #2
 8019338:	2101      	movs	r1, #1
 801933a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	68fa      	ldr	r2, [r7, #12]
 8019342:	0011      	movs	r1, r2
 8019344:	0018      	movs	r0, r3
 8019346:	f007 f9d7 	bl	80206f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801934a:	687a      	ldr	r2, [r7, #4]
 801934c:	23aa      	movs	r3, #170	@ 0xaa
 801934e:	009b      	lsls	r3, r3, #2
 8019350:	2100      	movs	r1, #0
 8019352:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019354:	2300      	movs	r3, #0
}
 8019356:	0018      	movs	r0, r3
 8019358:	46bd      	mov	sp, r7
 801935a:	b004      	add	sp, #16
 801935c:	bd80      	pop	{r7, pc}
	...

08019360 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019360:	b5b0      	push	{r4, r5, r7, lr}
 8019362:	b096      	sub	sp, #88	@ 0x58
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019368:	f000 fbec 	bl	8019b44 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	681a      	ldr	r2, [r3, #0]
 8019370:	204e      	movs	r0, #78	@ 0x4e
 8019372:	183b      	adds	r3, r7, r0
 8019374:	2144      	movs	r1, #68	@ 0x44
 8019376:	5a52      	ldrh	r2, [r2, r1]
 8019378:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801937a:	183b      	adds	r3, r7, r0
 801937c:	881b      	ldrh	r3, [r3, #0]
 801937e:	b2da      	uxtb	r2, r3
 8019380:	244d      	movs	r4, #77	@ 0x4d
 8019382:	193b      	adds	r3, r7, r4
 8019384:	210f      	movs	r1, #15
 8019386:	400a      	ands	r2, r1
 8019388:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801938a:	193b      	adds	r3, r7, r4
 801938c:	781b      	ldrb	r3, [r3, #0]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d000      	beq.n	8019394 <PCD_EP_ISR_Handler+0x34>
 8019392:	e18f      	b.n	80196b4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019394:	183b      	adds	r3, r7, r0
 8019396:	881b      	ldrh	r3, [r3, #0]
 8019398:	2210      	movs	r2, #16
 801939a:	4013      	ands	r3, r2
 801939c:	d155      	bne.n	801944a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	881b      	ldrh	r3, [r3, #0]
 80193a4:	b29a      	uxth	r2, r3
 80193a6:	200e      	movs	r0, #14
 80193a8:	183b      	adds	r3, r7, r0
 80193aa:	49bb      	ldr	r1, [pc, #748]	@ (8019698 <PCD_EP_ISR_Handler+0x338>)
 80193ac:	400a      	ands	r2, r1
 80193ae:	801a      	strh	r2, [r3, #0]
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	183a      	adds	r2, r7, r0
 80193b6:	8812      	ldrh	r2, [r2, #0]
 80193b8:	49b8      	ldr	r1, [pc, #736]	@ (801969c <PCD_EP_ISR_Handler+0x33c>)
 80193ba:	430a      	orrs	r2, r1
 80193bc:	b292      	uxth	r2, r2
 80193be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	3328      	adds	r3, #40	@ 0x28
 80193c4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	2250      	movs	r2, #80	@ 0x50
 80193cc:	5a9b      	ldrh	r3, [r3, r2]
 80193ce:	b29b      	uxth	r3, r3
 80193d0:	001a      	movs	r2, r3
 80193d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193d4:	781b      	ldrb	r3, [r3, #0]
 80193d6:	00db      	lsls	r3, r3, #3
 80193d8:	18d2      	adds	r2, r2, r3
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	18d3      	adds	r3, r2, r3
 80193e0:	4aaf      	ldr	r2, [pc, #700]	@ (80196a0 <PCD_EP_ISR_Handler+0x340>)
 80193e2:	4694      	mov	ip, r2
 80193e4:	4463      	add	r3, ip
 80193e6:	881b      	ldrh	r3, [r3, #0]
 80193e8:	059b      	lsls	r3, r3, #22
 80193ea:	0d9a      	lsrs	r2, r3, #22
 80193ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80193f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193f2:	695a      	ldr	r2, [r3, #20]
 80193f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193f6:	69db      	ldr	r3, [r3, #28]
 80193f8:	18d2      	adds	r2, r2, r3
 80193fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193fc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	2100      	movs	r1, #0
 8019402:	0018      	movs	r0, r3
 8019404:	f009 fc50 	bl	8022ca8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2224      	movs	r2, #36	@ 0x24
 801940c:	5c9b      	ldrb	r3, [r3, r2]
 801940e:	b2db      	uxtb	r3, r3
 8019410:	2b00      	cmp	r3, #0
 8019412:	d101      	bne.n	8019418 <PCD_EP_ISR_Handler+0xb8>
 8019414:	f000 fb96 	bl	8019b44 <PCD_EP_ISR_Handler+0x7e4>
 8019418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801941a:	699b      	ldr	r3, [r3, #24]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d001      	beq.n	8019424 <PCD_EP_ISR_Handler+0xc4>
 8019420:	f000 fb90 	bl	8019b44 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	2224      	movs	r2, #36	@ 0x24
 8019428:	5c9b      	ldrb	r3, [r3, r2]
 801942a:	b2db      	uxtb	r3, r3
 801942c:	2280      	movs	r2, #128	@ 0x80
 801942e:	4252      	negs	r2, r2
 8019430:	4313      	orrs	r3, r2
 8019432:	b2da      	uxtb	r2, r3
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	0011      	movs	r1, r2
 801943a:	224c      	movs	r2, #76	@ 0x4c
 801943c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	2224      	movs	r2, #36	@ 0x24
 8019442:	2100      	movs	r1, #0
 8019444:	5499      	strb	r1, [r3, r2]
 8019446:	f000 fb7d 	bl	8019b44 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	3369      	adds	r3, #105	@ 0x69
 801944e:	33ff      	adds	r3, #255	@ 0xff
 8019450:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	681a      	ldr	r2, [r3, #0]
 8019456:	214a      	movs	r1, #74	@ 0x4a
 8019458:	187b      	adds	r3, r7, r1
 801945a:	8812      	ldrh	r2, [r2, #0]
 801945c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801945e:	187b      	adds	r3, r7, r1
 8019460:	881a      	ldrh	r2, [r3, #0]
 8019462:	2380      	movs	r3, #128	@ 0x80
 8019464:	011b      	lsls	r3, r3, #4
 8019466:	4013      	ands	r3, r2
 8019468:	d037      	beq.n	80194da <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	2250      	movs	r2, #80	@ 0x50
 8019470:	5a9b      	ldrh	r3, [r3, r2]
 8019472:	b29b      	uxth	r3, r3
 8019474:	001a      	movs	r2, r3
 8019476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019478:	781b      	ldrb	r3, [r3, #0]
 801947a:	00db      	lsls	r3, r3, #3
 801947c:	18d2      	adds	r2, r2, r3
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	18d3      	adds	r3, r2, r3
 8019484:	4a87      	ldr	r2, [pc, #540]	@ (80196a4 <PCD_EP_ISR_Handler+0x344>)
 8019486:	4694      	mov	ip, r2
 8019488:	4463      	add	r3, ip
 801948a:	881b      	ldrh	r3, [r3, #0]
 801948c:	059b      	lsls	r3, r3, #22
 801948e:	0d9a      	lsrs	r2, r3, #22
 8019490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019492:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	6818      	ldr	r0, [r3, #0]
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	22ac      	movs	r2, #172	@ 0xac
 801949c:	0092      	lsls	r2, r2, #2
 801949e:	1899      	adds	r1, r3, r2
 80194a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194a2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80194a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194a6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	f007 fa59 	bl	8020960 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	881b      	ldrh	r3, [r3, #0]
 80194b4:	b29a      	uxth	r2, r3
 80194b6:	2010      	movs	r0, #16
 80194b8:	183b      	adds	r3, r7, r0
 80194ba:	497b      	ldr	r1, [pc, #492]	@ (80196a8 <PCD_EP_ISR_Handler+0x348>)
 80194bc:	400a      	ands	r2, r1
 80194be:	801a      	strh	r2, [r3, #0]
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	183a      	adds	r2, r7, r0
 80194c6:	8812      	ldrh	r2, [r2, #0]
 80194c8:	2180      	movs	r1, #128	@ 0x80
 80194ca:	430a      	orrs	r2, r1
 80194cc:	b292      	uxth	r2, r2
 80194ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	0018      	movs	r0, r3
 80194d4:	f009 fbb2 	bl	8022c3c <HAL_PCD_SetupStageCallback>
 80194d8:	e334      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80194da:	234a      	movs	r3, #74	@ 0x4a
 80194dc:	18fb      	adds	r3, r7, r3
 80194de:	2200      	movs	r2, #0
 80194e0:	5e9b      	ldrsh	r3, [r3, r2]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	db00      	blt.n	80194e8 <PCD_EP_ISR_Handler+0x188>
 80194e6:	e32d      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	881b      	ldrh	r3, [r3, #0]
 80194ee:	b29a      	uxth	r2, r3
 80194f0:	201e      	movs	r0, #30
 80194f2:	183b      	adds	r3, r7, r0
 80194f4:	496c      	ldr	r1, [pc, #432]	@ (80196a8 <PCD_EP_ISR_Handler+0x348>)
 80194f6:	400a      	ands	r2, r1
 80194f8:	801a      	strh	r2, [r3, #0]
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	183a      	adds	r2, r7, r0
 8019500:	8812      	ldrh	r2, [r2, #0]
 8019502:	2180      	movs	r1, #128	@ 0x80
 8019504:	430a      	orrs	r2, r1
 8019506:	b292      	uxth	r2, r2
 8019508:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	2250      	movs	r2, #80	@ 0x50
 8019510:	5a9b      	ldrh	r3, [r3, r2]
 8019512:	b29b      	uxth	r3, r3
 8019514:	001a      	movs	r2, r3
 8019516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019518:	781b      	ldrb	r3, [r3, #0]
 801951a:	00db      	lsls	r3, r3, #3
 801951c:	18d2      	adds	r2, r2, r3
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	18d3      	adds	r3, r2, r3
 8019524:	4a5f      	ldr	r2, [pc, #380]	@ (80196a4 <PCD_EP_ISR_Handler+0x344>)
 8019526:	4694      	mov	ip, r2
 8019528:	4463      	add	r3, ip
 801952a:	881b      	ldrh	r3, [r3, #0]
 801952c:	059b      	lsls	r3, r3, #22
 801952e:	0d9a      	lsrs	r2, r3, #22
 8019530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019532:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8019534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019536:	69db      	ldr	r3, [r3, #28]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d01a      	beq.n	8019572 <PCD_EP_ISR_Handler+0x212>
 801953c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801953e:	695b      	ldr	r3, [r3, #20]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d016      	beq.n	8019572 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6818      	ldr	r0, [r3, #0]
 8019548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801954a:	6959      	ldr	r1, [r3, #20]
 801954c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801954e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019552:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019554:	b29b      	uxth	r3, r3
 8019556:	f007 fa03 	bl	8020960 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801955a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801955c:	695a      	ldr	r2, [r3, #20]
 801955e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019560:	69db      	ldr	r3, [r3, #28]
 8019562:	18d2      	adds	r2, r2, r3
 8019564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019566:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	2100      	movs	r1, #0
 801956c:	0018      	movs	r0, r3
 801956e:	f009 fb7a 	bl	8022c66 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	681a      	ldr	r2, [r3, #0]
 8019576:	214a      	movs	r1, #74	@ 0x4a
 8019578:	187b      	adds	r3, r7, r1
 801957a:	8812      	ldrh	r2, [r2, #0]
 801957c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801957e:	187b      	adds	r3, r7, r1
 8019580:	881a      	ldrh	r2, [r3, #0]
 8019582:	2380      	movs	r3, #128	@ 0x80
 8019584:	011b      	lsls	r3, r3, #4
 8019586:	4013      	ands	r3, r2
 8019588:	d000      	beq.n	801958c <PCD_EP_ISR_Handler+0x22c>
 801958a:	e2db      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
 801958c:	187b      	adds	r3, r7, r1
 801958e:	881a      	ldrh	r2, [r3, #0]
 8019590:	23c0      	movs	r3, #192	@ 0xc0
 8019592:	019b      	lsls	r3, r3, #6
 8019594:	401a      	ands	r2, r3
 8019596:	23c0      	movs	r3, #192	@ 0xc0
 8019598:	019b      	lsls	r3, r3, #6
 801959a:	429a      	cmp	r2, r3
 801959c:	d100      	bne.n	80195a0 <PCD_EP_ISR_Handler+0x240>
 801959e:	e2d1      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	61bb      	str	r3, [r7, #24]
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	2250      	movs	r2, #80	@ 0x50
 80195ac:	5a9b      	ldrh	r3, [r3, r2]
 80195ae:	b29b      	uxth	r3, r3
 80195b0:	001a      	movs	r2, r3
 80195b2:	69bb      	ldr	r3, [r7, #24]
 80195b4:	189b      	adds	r3, r3, r2
 80195b6:	61bb      	str	r3, [r7, #24]
 80195b8:	69bb      	ldr	r3, [r7, #24]
 80195ba:	4a3a      	ldr	r2, [pc, #232]	@ (80196a4 <PCD_EP_ISR_Handler+0x344>)
 80195bc:	4694      	mov	ip, r2
 80195be:	4463      	add	r3, ip
 80195c0:	617b      	str	r3, [r7, #20]
 80195c2:	697b      	ldr	r3, [r7, #20]
 80195c4:	881b      	ldrh	r3, [r3, #0]
 80195c6:	b29b      	uxth	r3, r3
 80195c8:	059b      	lsls	r3, r3, #22
 80195ca:	0d9b      	lsrs	r3, r3, #22
 80195cc:	b29a      	uxth	r2, r3
 80195ce:	697b      	ldr	r3, [r7, #20]
 80195d0:	801a      	strh	r2, [r3, #0]
 80195d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195d4:	691b      	ldr	r3, [r3, #16]
 80195d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80195d8:	d91a      	bls.n	8019610 <PCD_EP_ISR_Handler+0x2b0>
 80195da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195dc:	691b      	ldr	r3, [r3, #16]
 80195de:	095b      	lsrs	r3, r3, #5
 80195e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80195e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195e4:	691b      	ldr	r3, [r3, #16]
 80195e6:	221f      	movs	r2, #31
 80195e8:	4013      	ands	r3, r2
 80195ea:	d102      	bne.n	80195f2 <PCD_EP_ISR_Handler+0x292>
 80195ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195ee:	3b01      	subs	r3, #1
 80195f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80195f2:	697b      	ldr	r3, [r7, #20]
 80195f4:	881b      	ldrh	r3, [r3, #0]
 80195f6:	b29a      	uxth	r2, r3
 80195f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	029b      	lsls	r3, r3, #10
 80195fe:	b29b      	uxth	r3, r3
 8019600:	4313      	orrs	r3, r2
 8019602:	b29b      	uxth	r3, r3
 8019604:	4a25      	ldr	r2, [pc, #148]	@ (801969c <PCD_EP_ISR_Handler+0x33c>)
 8019606:	4313      	orrs	r3, r2
 8019608:	b29a      	uxth	r2, r3
 801960a:	697b      	ldr	r3, [r7, #20]
 801960c:	801a      	strh	r2, [r3, #0]
 801960e:	e023      	b.n	8019658 <PCD_EP_ISR_Handler+0x2f8>
 8019610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019612:	691b      	ldr	r3, [r3, #16]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d108      	bne.n	801962a <PCD_EP_ISR_Handler+0x2ca>
 8019618:	697b      	ldr	r3, [r7, #20]
 801961a:	881b      	ldrh	r3, [r3, #0]
 801961c:	b29b      	uxth	r3, r3
 801961e:	4a1f      	ldr	r2, [pc, #124]	@ (801969c <PCD_EP_ISR_Handler+0x33c>)
 8019620:	4313      	orrs	r3, r2
 8019622:	b29a      	uxth	r2, r3
 8019624:	697b      	ldr	r3, [r7, #20]
 8019626:	801a      	strh	r2, [r3, #0]
 8019628:	e016      	b.n	8019658 <PCD_EP_ISR_Handler+0x2f8>
 801962a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801962c:	691b      	ldr	r3, [r3, #16]
 801962e:	085b      	lsrs	r3, r3, #1
 8019630:	647b      	str	r3, [r7, #68]	@ 0x44
 8019632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019634:	691b      	ldr	r3, [r3, #16]
 8019636:	2201      	movs	r2, #1
 8019638:	4013      	ands	r3, r2
 801963a:	d002      	beq.n	8019642 <PCD_EP_ISR_Handler+0x2e2>
 801963c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801963e:	3301      	adds	r3, #1
 8019640:	647b      	str	r3, [r7, #68]	@ 0x44
 8019642:	697b      	ldr	r3, [r7, #20]
 8019644:	881b      	ldrh	r3, [r3, #0]
 8019646:	b29a      	uxth	r2, r3
 8019648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801964a:	b29b      	uxth	r3, r3
 801964c:	029b      	lsls	r3, r3, #10
 801964e:	b29b      	uxth	r3, r3
 8019650:	4313      	orrs	r3, r2
 8019652:	b29a      	uxth	r2, r3
 8019654:	697b      	ldr	r3, [r7, #20]
 8019656:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	881b      	ldrh	r3, [r3, #0]
 801965e:	b29a      	uxth	r2, r3
 8019660:	2012      	movs	r0, #18
 8019662:	183b      	adds	r3, r7, r0
 8019664:	4911      	ldr	r1, [pc, #68]	@ (80196ac <PCD_EP_ISR_Handler+0x34c>)
 8019666:	400a      	ands	r2, r1
 8019668:	801a      	strh	r2, [r3, #0]
 801966a:	183b      	adds	r3, r7, r0
 801966c:	183a      	adds	r2, r7, r0
 801966e:	8812      	ldrh	r2, [r2, #0]
 8019670:	2180      	movs	r1, #128	@ 0x80
 8019672:	0149      	lsls	r1, r1, #5
 8019674:	404a      	eors	r2, r1
 8019676:	801a      	strh	r2, [r3, #0]
 8019678:	183b      	adds	r3, r7, r0
 801967a:	183a      	adds	r2, r7, r0
 801967c:	8812      	ldrh	r2, [r2, #0]
 801967e:	2180      	movs	r1, #128	@ 0x80
 8019680:	0189      	lsls	r1, r1, #6
 8019682:	404a      	eors	r2, r1
 8019684:	801a      	strh	r2, [r3, #0]
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	183a      	adds	r2, r7, r0
 801968c:	8812      	ldrh	r2, [r2, #0]
 801968e:	4908      	ldr	r1, [pc, #32]	@ (80196b0 <PCD_EP_ISR_Handler+0x350>)
 8019690:	430a      	orrs	r2, r1
 8019692:	b292      	uxth	r2, r2
 8019694:	801a      	strh	r2, [r3, #0]
 8019696:	e255      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
 8019698:	ffff8f0f 	.word	0xffff8f0f
 801969c:	ffff8000 	.word	0xffff8000
 80196a0:	00000402 	.word	0x00000402
 80196a4:	00000406 	.word	0x00000406
 80196a8:	00000f8f 	.word	0x00000f8f
 80196ac:	ffffbf8f 	.word	0xffffbf8f
 80196b0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	001a      	movs	r2, r3
 80196ba:	204d      	movs	r0, #77	@ 0x4d
 80196bc:	183b      	adds	r3, r7, r0
 80196be:	781b      	ldrb	r3, [r3, #0]
 80196c0:	009b      	lsls	r3, r3, #2
 80196c2:	18d2      	adds	r2, r2, r3
 80196c4:	214a      	movs	r1, #74	@ 0x4a
 80196c6:	187b      	adds	r3, r7, r1
 80196c8:	8812      	ldrh	r2, [r2, #0]
 80196ca:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80196cc:	187b      	adds	r3, r7, r1
 80196ce:	2200      	movs	r2, #0
 80196d0:	5e9b      	ldrsh	r3, [r3, r2]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	db00      	blt.n	80196d8 <PCD_EP_ISR_Handler+0x378>
 80196d6:	e0fa      	b.n	80198ce <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	001a      	movs	r2, r3
 80196de:	183b      	adds	r3, r7, r0
 80196e0:	781b      	ldrb	r3, [r3, #0]
 80196e2:	009b      	lsls	r3, r3, #2
 80196e4:	18d3      	adds	r3, r2, r3
 80196e6:	881b      	ldrh	r3, [r3, #0]
 80196e8:	b29a      	uxth	r2, r3
 80196ea:	2448      	movs	r4, #72	@ 0x48
 80196ec:	193b      	adds	r3, r7, r4
 80196ee:	49d1      	ldr	r1, [pc, #836]	@ (8019a34 <PCD_EP_ISR_Handler+0x6d4>)
 80196f0:	400a      	ands	r2, r1
 80196f2:	801a      	strh	r2, [r3, #0]
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	001a      	movs	r2, r3
 80196fa:	183b      	adds	r3, r7, r0
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	009b      	lsls	r3, r3, #2
 8019700:	18d3      	adds	r3, r2, r3
 8019702:	193a      	adds	r2, r7, r4
 8019704:	8812      	ldrh	r2, [r2, #0]
 8019706:	2180      	movs	r1, #128	@ 0x80
 8019708:	430a      	orrs	r2, r1
 801970a:	b292      	uxth	r2, r2
 801970c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801970e:	183b      	adds	r3, r7, r0
 8019710:	781a      	ldrb	r2, [r3, #0]
 8019712:	0013      	movs	r3, r2
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	189b      	adds	r3, r3, r2
 8019718:	00db      	lsls	r3, r3, #3
 801971a:	3369      	adds	r3, #105	@ 0x69
 801971c:	33ff      	adds	r3, #255	@ 0xff
 801971e:	687a      	ldr	r2, [r7, #4]
 8019720:	18d3      	adds	r3, r2, r3
 8019722:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8019724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019726:	7b1b      	ldrb	r3, [r3, #12]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d125      	bne.n	8019778 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	2250      	movs	r2, #80	@ 0x50
 8019732:	5a9b      	ldrh	r3, [r3, r2]
 8019734:	b29b      	uxth	r3, r3
 8019736:	001a      	movs	r2, r3
 8019738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801973a:	781b      	ldrb	r3, [r3, #0]
 801973c:	00db      	lsls	r3, r3, #3
 801973e:	18d2      	adds	r2, r2, r3
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	18d3      	adds	r3, r2, r3
 8019746:	4abc      	ldr	r2, [pc, #752]	@ (8019a38 <PCD_EP_ISR_Handler+0x6d8>)
 8019748:	4694      	mov	ip, r2
 801974a:	4463      	add	r3, ip
 801974c:	881a      	ldrh	r2, [r3, #0]
 801974e:	2450      	movs	r4, #80	@ 0x50
 8019750:	193b      	adds	r3, r7, r4
 8019752:	0592      	lsls	r2, r2, #22
 8019754:	0d92      	lsrs	r2, r2, #22
 8019756:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8019758:	193b      	adds	r3, r7, r4
 801975a:	881b      	ldrh	r3, [r3, #0]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d100      	bne.n	8019762 <PCD_EP_ISR_Handler+0x402>
 8019760:	e08d      	b.n	801987e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	6818      	ldr	r0, [r3, #0]
 8019766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019768:	6959      	ldr	r1, [r3, #20]
 801976a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801976c:	88da      	ldrh	r2, [r3, #6]
 801976e:	193b      	adds	r3, r7, r4
 8019770:	881b      	ldrh	r3, [r3, #0]
 8019772:	f007 f8f5 	bl	8020960 <USB_ReadPMA>
 8019776:	e082      	b.n	801987e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8019778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801977a:	78db      	ldrb	r3, [r3, #3]
 801977c:	2b02      	cmp	r3, #2
 801977e:	d10c      	bne.n	801979a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8019780:	2350      	movs	r3, #80	@ 0x50
 8019782:	18fc      	adds	r4, r7, r3
 8019784:	234a      	movs	r3, #74	@ 0x4a
 8019786:	18fb      	adds	r3, r7, r3
 8019788:	881a      	ldrh	r2, [r3, #0]
 801978a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	0018      	movs	r0, r3
 8019790:	f000 f9ec 	bl	8019b6c <HAL_PCD_EP_DB_Receive>
 8019794:	0003      	movs	r3, r0
 8019796:	8023      	strh	r3, [r4, #0]
 8019798:	e071      	b.n	801987e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	001a      	movs	r2, r3
 80197a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197a2:	781b      	ldrb	r3, [r3, #0]
 80197a4:	009b      	lsls	r3, r3, #2
 80197a6:	18d3      	adds	r3, r2, r3
 80197a8:	881b      	ldrh	r3, [r3, #0]
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	2052      	movs	r0, #82	@ 0x52
 80197ae:	183b      	adds	r3, r7, r0
 80197b0:	49a2      	ldr	r1, [pc, #648]	@ (8019a3c <PCD_EP_ISR_Handler+0x6dc>)
 80197b2:	400a      	ands	r2, r1
 80197b4:	801a      	strh	r2, [r3, #0]
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	001a      	movs	r2, r3
 80197bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197be:	781b      	ldrb	r3, [r3, #0]
 80197c0:	009b      	lsls	r3, r3, #2
 80197c2:	18d3      	adds	r3, r2, r3
 80197c4:	183a      	adds	r2, r7, r0
 80197c6:	8812      	ldrh	r2, [r2, #0]
 80197c8:	499d      	ldr	r1, [pc, #628]	@ (8019a40 <PCD_EP_ISR_Handler+0x6e0>)
 80197ca:	430a      	orrs	r2, r1
 80197cc:	b292      	uxth	r2, r2
 80197ce:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	001a      	movs	r2, r3
 80197d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197d8:	781b      	ldrb	r3, [r3, #0]
 80197da:	009b      	lsls	r3, r3, #2
 80197dc:	18d3      	adds	r3, r2, r3
 80197de:	881b      	ldrh	r3, [r3, #0]
 80197e0:	b29b      	uxth	r3, r3
 80197e2:	001a      	movs	r2, r3
 80197e4:	2380      	movs	r3, #128	@ 0x80
 80197e6:	01db      	lsls	r3, r3, #7
 80197e8:	4013      	ands	r3, r2
 80197ea:	d024      	beq.n	8019836 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	2250      	movs	r2, #80	@ 0x50
 80197f2:	5a9b      	ldrh	r3, [r3, r2]
 80197f4:	b29b      	uxth	r3, r3
 80197f6:	001a      	movs	r2, r3
 80197f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197fa:	781b      	ldrb	r3, [r3, #0]
 80197fc:	00db      	lsls	r3, r3, #3
 80197fe:	18d2      	adds	r2, r2, r3
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	18d3      	adds	r3, r2, r3
 8019806:	4a8f      	ldr	r2, [pc, #572]	@ (8019a44 <PCD_EP_ISR_Handler+0x6e4>)
 8019808:	4694      	mov	ip, r2
 801980a:	4463      	add	r3, ip
 801980c:	881a      	ldrh	r2, [r3, #0]
 801980e:	2450      	movs	r4, #80	@ 0x50
 8019810:	193b      	adds	r3, r7, r4
 8019812:	0592      	lsls	r2, r2, #22
 8019814:	0d92      	lsrs	r2, r2, #22
 8019816:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019818:	193b      	adds	r3, r7, r4
 801981a:	881b      	ldrh	r3, [r3, #0]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d02e      	beq.n	801987e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6818      	ldr	r0, [r3, #0]
 8019824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019826:	6959      	ldr	r1, [r3, #20]
 8019828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801982a:	891a      	ldrh	r2, [r3, #8]
 801982c:	193b      	adds	r3, r7, r4
 801982e:	881b      	ldrh	r3, [r3, #0]
 8019830:	f007 f896 	bl	8020960 <USB_ReadPMA>
 8019834:	e023      	b.n	801987e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	2250      	movs	r2, #80	@ 0x50
 801983c:	5a9b      	ldrh	r3, [r3, r2]
 801983e:	b29b      	uxth	r3, r3
 8019840:	001a      	movs	r2, r3
 8019842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019844:	781b      	ldrb	r3, [r3, #0]
 8019846:	00db      	lsls	r3, r3, #3
 8019848:	18d2      	adds	r2, r2, r3
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	18d3      	adds	r3, r2, r3
 8019850:	4a79      	ldr	r2, [pc, #484]	@ (8019a38 <PCD_EP_ISR_Handler+0x6d8>)
 8019852:	4694      	mov	ip, r2
 8019854:	4463      	add	r3, ip
 8019856:	881a      	ldrh	r2, [r3, #0]
 8019858:	2450      	movs	r4, #80	@ 0x50
 801985a:	193b      	adds	r3, r7, r4
 801985c:	0592      	lsls	r2, r2, #22
 801985e:	0d92      	lsrs	r2, r2, #22
 8019860:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019862:	193b      	adds	r3, r7, r4
 8019864:	881b      	ldrh	r3, [r3, #0]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d009      	beq.n	801987e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6818      	ldr	r0, [r3, #0]
 801986e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019870:	6959      	ldr	r1, [r3, #20]
 8019872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019874:	895a      	ldrh	r2, [r3, #10]
 8019876:	193b      	adds	r3, r7, r4
 8019878:	881b      	ldrh	r3, [r3, #0]
 801987a:	f007 f871 	bl	8020960 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801987e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019880:	69da      	ldr	r2, [r3, #28]
 8019882:	2150      	movs	r1, #80	@ 0x50
 8019884:	187b      	adds	r3, r7, r1
 8019886:	881b      	ldrh	r3, [r3, #0]
 8019888:	18d2      	adds	r2, r2, r3
 801988a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801988c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801988e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019890:	695a      	ldr	r2, [r3, #20]
 8019892:	187b      	adds	r3, r7, r1
 8019894:	881b      	ldrh	r3, [r3, #0]
 8019896:	18d2      	adds	r2, r2, r3
 8019898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801989a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801989c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801989e:	699b      	ldr	r3, [r3, #24]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d005      	beq.n	80198b0 <PCD_EP_ISR_Handler+0x550>
 80198a4:	187b      	adds	r3, r7, r1
 80198a6:	881a      	ldrh	r2, [r3, #0]
 80198a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198aa:	691b      	ldr	r3, [r3, #16]
 80198ac:	429a      	cmp	r2, r3
 80198ae:	d207      	bcs.n	80198c0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80198b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198b2:	781a      	ldrb	r2, [r3, #0]
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	0011      	movs	r1, r2
 80198b8:	0018      	movs	r0, r3
 80198ba:	f009 f9d4 	bl	8022c66 <HAL_PCD_DataOutStageCallback>
 80198be:	e006      	b.n	80198ce <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80198c6:	0011      	movs	r1, r2
 80198c8:	0018      	movs	r0, r3
 80198ca:	f005 fd8d 	bl	801f3e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80198ce:	244a      	movs	r4, #74	@ 0x4a
 80198d0:	193b      	adds	r3, r7, r4
 80198d2:	881b      	ldrh	r3, [r3, #0]
 80198d4:	2280      	movs	r2, #128	@ 0x80
 80198d6:	4013      	ands	r3, r2
 80198d8:	d100      	bne.n	80198dc <PCD_EP_ISR_Handler+0x57c>
 80198da:	e133      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80198dc:	204d      	movs	r0, #77	@ 0x4d
 80198de:	183b      	adds	r3, r7, r0
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	1c5a      	adds	r2, r3, #1
 80198e4:	0013      	movs	r3, r2
 80198e6:	009b      	lsls	r3, r3, #2
 80198e8:	189b      	adds	r3, r3, r2
 80198ea:	00db      	lsls	r3, r3, #3
 80198ec:	687a      	ldr	r2, [r7, #4]
 80198ee:	18d3      	adds	r3, r2, r3
 80198f0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	001a      	movs	r2, r3
 80198f8:	183b      	adds	r3, r7, r0
 80198fa:	781b      	ldrb	r3, [r3, #0]
 80198fc:	009b      	lsls	r3, r3, #2
 80198fe:	18d3      	adds	r3, r2, r3
 8019900:	881b      	ldrh	r3, [r3, #0]
 8019902:	b29a      	uxth	r2, r3
 8019904:	2542      	movs	r5, #66	@ 0x42
 8019906:	197b      	adds	r3, r7, r5
 8019908:	494f      	ldr	r1, [pc, #316]	@ (8019a48 <PCD_EP_ISR_Handler+0x6e8>)
 801990a:	400a      	ands	r2, r1
 801990c:	801a      	strh	r2, [r3, #0]
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	001a      	movs	r2, r3
 8019914:	183b      	adds	r3, r7, r0
 8019916:	781b      	ldrb	r3, [r3, #0]
 8019918:	009b      	lsls	r3, r3, #2
 801991a:	18d3      	adds	r3, r2, r3
 801991c:	197a      	adds	r2, r7, r5
 801991e:	8812      	ldrh	r2, [r2, #0]
 8019920:	494a      	ldr	r1, [pc, #296]	@ (8019a4c <PCD_EP_ISR_Handler+0x6ec>)
 8019922:	430a      	orrs	r2, r1
 8019924:	b292      	uxth	r2, r2
 8019926:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8019928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801992a:	78db      	ldrb	r3, [r3, #3]
 801992c:	2b01      	cmp	r3, #1
 801992e:	d000      	beq.n	8019932 <PCD_EP_ISR_Handler+0x5d2>
 8019930:	e0af      	b.n	8019a92 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8019932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019934:	2200      	movs	r2, #0
 8019936:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8019938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801993a:	7b1b      	ldrb	r3, [r3, #12]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d100      	bne.n	8019942 <PCD_EP_ISR_Handler+0x5e2>
 8019940:	e09f      	b.n	8019a82 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019942:	193b      	adds	r3, r7, r4
 8019944:	881b      	ldrh	r3, [r3, #0]
 8019946:	2240      	movs	r2, #64	@ 0x40
 8019948:	4013      	ands	r3, r2
 801994a:	d046      	beq.n	80199da <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801994c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801994e:	785b      	ldrb	r3, [r3, #1]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d125      	bne.n	80199a0 <PCD_EP_ISR_Handler+0x640>
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	627b      	str	r3, [r7, #36]	@ 0x24
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	2250      	movs	r2, #80	@ 0x50
 8019960:	5a9b      	ldrh	r3, [r3, r2]
 8019962:	b29b      	uxth	r3, r3
 8019964:	001a      	movs	r2, r3
 8019966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019968:	189b      	adds	r3, r3, r2
 801996a:	627b      	str	r3, [r7, #36]	@ 0x24
 801996c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801996e:	781b      	ldrb	r3, [r3, #0]
 8019970:	00da      	lsls	r2, r3, #3
 8019972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019974:	18d3      	adds	r3, r2, r3
 8019976:	4a33      	ldr	r2, [pc, #204]	@ (8019a44 <PCD_EP_ISR_Handler+0x6e4>)
 8019978:	4694      	mov	ip, r2
 801997a:	4463      	add	r3, ip
 801997c:	623b      	str	r3, [r7, #32]
 801997e:	6a3b      	ldr	r3, [r7, #32]
 8019980:	881b      	ldrh	r3, [r3, #0]
 8019982:	b29b      	uxth	r3, r3
 8019984:	059b      	lsls	r3, r3, #22
 8019986:	0d9b      	lsrs	r3, r3, #22
 8019988:	b29a      	uxth	r2, r3
 801998a:	6a3b      	ldr	r3, [r7, #32]
 801998c:	801a      	strh	r2, [r3, #0]
 801998e:	6a3b      	ldr	r3, [r7, #32]
 8019990:	881b      	ldrh	r3, [r3, #0]
 8019992:	b29b      	uxth	r3, r3
 8019994:	4a2d      	ldr	r2, [pc, #180]	@ (8019a4c <PCD_EP_ISR_Handler+0x6ec>)
 8019996:	4313      	orrs	r3, r2
 8019998:	b29a      	uxth	r2, r3
 801999a:	6a3b      	ldr	r3, [r7, #32]
 801999c:	801a      	strh	r2, [r3, #0]
 801999e:	e070      	b.n	8019a82 <PCD_EP_ISR_Handler+0x722>
 80199a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199a2:	785b      	ldrb	r3, [r3, #1]
 80199a4:	2b01      	cmp	r3, #1
 80199a6:	d16c      	bne.n	8019a82 <PCD_EP_ISR_Handler+0x722>
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	2250      	movs	r2, #80	@ 0x50
 80199b4:	5a9b      	ldrh	r3, [r3, r2]
 80199b6:	b29b      	uxth	r3, r3
 80199b8:	001a      	movs	r2, r3
 80199ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199bc:	189b      	adds	r3, r3, r2
 80199be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80199c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199c2:	781b      	ldrb	r3, [r3, #0]
 80199c4:	00da      	lsls	r2, r3, #3
 80199c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199c8:	18d3      	adds	r3, r2, r3
 80199ca:	4a1e      	ldr	r2, [pc, #120]	@ (8019a44 <PCD_EP_ISR_Handler+0x6e4>)
 80199cc:	4694      	mov	ip, r2
 80199ce:	4463      	add	r3, ip
 80199d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80199d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199d4:	2200      	movs	r2, #0
 80199d6:	801a      	strh	r2, [r3, #0]
 80199d8:	e053      	b.n	8019a82 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80199e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80199e2:	785b      	ldrb	r3, [r3, #1]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d133      	bne.n	8019a50 <PCD_EP_ISR_Handler+0x6f0>
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	2250      	movs	r2, #80	@ 0x50
 80199f4:	5a9b      	ldrh	r3, [r3, r2]
 80199f6:	b29b      	uxth	r3, r3
 80199f8:	001a      	movs	r2, r3
 80199fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80199fc:	189b      	adds	r3, r3, r2
 80199fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a02:	781b      	ldrb	r3, [r3, #0]
 8019a04:	00da      	lsls	r2, r3, #3
 8019a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a08:	18d3      	adds	r3, r2, r3
 8019a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8019a38 <PCD_EP_ISR_Handler+0x6d8>)
 8019a0c:	4694      	mov	ip, r2
 8019a0e:	4463      	add	r3, ip
 8019a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8019a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a14:	881b      	ldrh	r3, [r3, #0]
 8019a16:	b29b      	uxth	r3, r3
 8019a18:	059b      	lsls	r3, r3, #22
 8019a1a:	0d9b      	lsrs	r3, r3, #22
 8019a1c:	b29a      	uxth	r2, r3
 8019a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a20:	801a      	strh	r2, [r3, #0]
 8019a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a24:	881b      	ldrh	r3, [r3, #0]
 8019a26:	b29b      	uxth	r3, r3
 8019a28:	4a08      	ldr	r2, [pc, #32]	@ (8019a4c <PCD_EP_ISR_Handler+0x6ec>)
 8019a2a:	4313      	orrs	r3, r2
 8019a2c:	b29a      	uxth	r2, r3
 8019a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a30:	801a      	strh	r2, [r3, #0]
 8019a32:	e026      	b.n	8019a82 <PCD_EP_ISR_Handler+0x722>
 8019a34:	00000f8f 	.word	0x00000f8f
 8019a38:	00000406 	.word	0x00000406
 8019a3c:	ffff8f8f 	.word	0xffff8f8f
 8019a40:	ffff80c0 	.word	0xffff80c0
 8019a44:	00000402 	.word	0x00000402
 8019a48:	ffff8f0f 	.word	0xffff8f0f
 8019a4c:	ffff8000 	.word	0xffff8000
 8019a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a52:	785b      	ldrb	r3, [r3, #1]
 8019a54:	2b01      	cmp	r3, #1
 8019a56:	d114      	bne.n	8019a82 <PCD_EP_ISR_Handler+0x722>
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	2250      	movs	r2, #80	@ 0x50
 8019a5e:	5a9b      	ldrh	r3, [r3, r2]
 8019a60:	b29b      	uxth	r3, r3
 8019a62:	001a      	movs	r2, r3
 8019a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a66:	189b      	adds	r3, r3, r2
 8019a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	00da      	lsls	r2, r3, #3
 8019a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a72:	18d3      	adds	r3, r2, r3
 8019a74:	4a3b      	ldr	r2, [pc, #236]	@ (8019b64 <PCD_EP_ISR_Handler+0x804>)
 8019a76:	4694      	mov	ip, r2
 8019a78:	4463      	add	r3, ip
 8019a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a7e:	2200      	movs	r2, #0
 8019a80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a84:	781a      	ldrb	r2, [r3, #0]
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	0011      	movs	r1, r2
 8019a8a:	0018      	movs	r0, r3
 8019a8c:	f009 f90c 	bl	8022ca8 <HAL_PCD_DataInStageCallback>
 8019a90:	e058      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8019a92:	234a      	movs	r3, #74	@ 0x4a
 8019a94:	18fb      	adds	r3, r7, r3
 8019a96:	881a      	ldrh	r2, [r3, #0]
 8019a98:	2380      	movs	r3, #128	@ 0x80
 8019a9a:	005b      	lsls	r3, r3, #1
 8019a9c:	4013      	ands	r3, r2
 8019a9e:	d149      	bne.n	8019b34 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	2250      	movs	r2, #80	@ 0x50
 8019aa6:	5a9b      	ldrh	r3, [r3, r2]
 8019aa8:	b29b      	uxth	r3, r3
 8019aaa:	001a      	movs	r2, r3
 8019aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019aae:	781b      	ldrb	r3, [r3, #0]
 8019ab0:	00db      	lsls	r3, r3, #3
 8019ab2:	18d2      	adds	r2, r2, r3
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	18d3      	adds	r3, r2, r3
 8019aba:	4a2b      	ldr	r2, [pc, #172]	@ (8019b68 <PCD_EP_ISR_Handler+0x808>)
 8019abc:	4694      	mov	ip, r2
 8019abe:	4463      	add	r3, ip
 8019ac0:	881a      	ldrh	r2, [r3, #0]
 8019ac2:	2140      	movs	r1, #64	@ 0x40
 8019ac4:	187b      	adds	r3, r7, r1
 8019ac6:	0592      	lsls	r2, r2, #22
 8019ac8:	0d92      	lsrs	r2, r2, #22
 8019aca:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8019acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ace:	699a      	ldr	r2, [r3, #24]
 8019ad0:	187b      	adds	r3, r7, r1
 8019ad2:	881b      	ldrh	r3, [r3, #0]
 8019ad4:	429a      	cmp	r2, r3
 8019ad6:	d907      	bls.n	8019ae8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8019ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ada:	699a      	ldr	r2, [r3, #24]
 8019adc:	187b      	adds	r3, r7, r1
 8019ade:	881b      	ldrh	r3, [r3, #0]
 8019ae0:	1ad2      	subs	r2, r2, r3
 8019ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ae4:	619a      	str	r2, [r3, #24]
 8019ae6:	e002      	b.n	8019aee <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8019ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019aea:	2200      	movs	r2, #0
 8019aec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8019aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019af0:	699b      	ldr	r3, [r3, #24]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d107      	bne.n	8019b06 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019af8:	781a      	ldrb	r2, [r3, #0]
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	0011      	movs	r1, r2
 8019afe:	0018      	movs	r0, r3
 8019b00:	f009 f8d2 	bl	8022ca8 <HAL_PCD_DataInStageCallback>
 8019b04:	e01e      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8019b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b08:	695a      	ldr	r2, [r3, #20]
 8019b0a:	2140      	movs	r1, #64	@ 0x40
 8019b0c:	187b      	adds	r3, r7, r1
 8019b0e:	881b      	ldrh	r3, [r3, #0]
 8019b10:	18d2      	adds	r2, r2, r3
 8019b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b14:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8019b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b18:	69da      	ldr	r2, [r3, #28]
 8019b1a:	187b      	adds	r3, r7, r1
 8019b1c:	881b      	ldrh	r3, [r3, #0]
 8019b1e:	18d2      	adds	r2, r2, r3
 8019b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b22:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019b2a:	0011      	movs	r1, r2
 8019b2c:	0018      	movs	r0, r3
 8019b2e:	f005 fc5b 	bl	801f3e8 <USB_EPStartXfer>
 8019b32:	e007      	b.n	8019b44 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8019b34:	234a      	movs	r3, #74	@ 0x4a
 8019b36:	18fb      	adds	r3, r7, r3
 8019b38:	881a      	ldrh	r2, [r3, #0]
 8019b3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	0018      	movs	r0, r3
 8019b40:	f000 f930 	bl	8019da4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	2244      	movs	r2, #68	@ 0x44
 8019b4a:	5a9b      	ldrh	r3, [r3, r2]
 8019b4c:	b29b      	uxth	r3, r3
 8019b4e:	b21b      	sxth	r3, r3
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	da01      	bge.n	8019b58 <PCD_EP_ISR_Handler+0x7f8>
 8019b54:	f7ff fc0a 	bl	801936c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8019b58:	2300      	movs	r3, #0
}
 8019b5a:	0018      	movs	r0, r3
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	b016      	add	sp, #88	@ 0x58
 8019b60:	bdb0      	pop	{r4, r5, r7, pc}
 8019b62:	46c0      	nop			@ (mov r8, r8)
 8019b64:	00000406 	.word	0x00000406
 8019b68:	00000402 	.word	0x00000402

08019b6c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8019b6c:	b590      	push	{r4, r7, lr}
 8019b6e:	b089      	sub	sp, #36	@ 0x24
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	60f8      	str	r0, [r7, #12]
 8019b74:	60b9      	str	r1, [r7, #8]
 8019b76:	1dbb      	adds	r3, r7, #6
 8019b78:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019b7a:	1dbb      	adds	r3, r7, #6
 8019b7c:	881a      	ldrh	r2, [r3, #0]
 8019b7e:	2380      	movs	r3, #128	@ 0x80
 8019b80:	01db      	lsls	r3, r3, #7
 8019b82:	4013      	ands	r3, r2
 8019b84:	d100      	bne.n	8019b88 <HAL_PCD_EP_DB_Receive+0x1c>
 8019b86:	e07d      	b.n	8019c84 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	2250      	movs	r2, #80	@ 0x50
 8019b8e:	5a9b      	ldrh	r3, [r3, r2]
 8019b90:	b29b      	uxth	r3, r3
 8019b92:	001a      	movs	r2, r3
 8019b94:	68bb      	ldr	r3, [r7, #8]
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	00db      	lsls	r3, r3, #3
 8019b9a:	18d2      	adds	r2, r2, r3
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	18d3      	adds	r3, r2, r3
 8019ba2:	4a7a      	ldr	r2, [pc, #488]	@ (8019d8c <HAL_PCD_EP_DB_Receive+0x220>)
 8019ba4:	4694      	mov	ip, r2
 8019ba6:	4463      	add	r3, ip
 8019ba8:	881a      	ldrh	r2, [r3, #0]
 8019baa:	211a      	movs	r1, #26
 8019bac:	187b      	adds	r3, r7, r1
 8019bae:	0592      	lsls	r2, r2, #22
 8019bb0:	0d92      	lsrs	r2, r2, #22
 8019bb2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	699a      	ldr	r2, [r3, #24]
 8019bb8:	187b      	adds	r3, r7, r1
 8019bba:	881b      	ldrh	r3, [r3, #0]
 8019bbc:	429a      	cmp	r2, r3
 8019bbe:	d307      	bcc.n	8019bd0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8019bc0:	68bb      	ldr	r3, [r7, #8]
 8019bc2:	699a      	ldr	r2, [r3, #24]
 8019bc4:	187b      	adds	r3, r7, r1
 8019bc6:	881b      	ldrh	r3, [r3, #0]
 8019bc8:	1ad2      	subs	r2, r2, r3
 8019bca:	68bb      	ldr	r3, [r7, #8]
 8019bcc:	619a      	str	r2, [r3, #24]
 8019bce:	e002      	b.n	8019bd6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8019bd0:	68bb      	ldr	r3, [r7, #8]
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8019bd6:	68bb      	ldr	r3, [r7, #8]
 8019bd8:	699b      	ldr	r3, [r3, #24]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d121      	bne.n	8019c22 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	001a      	movs	r2, r3
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	781b      	ldrb	r3, [r3, #0]
 8019be8:	009b      	lsls	r3, r3, #2
 8019bea:	18d3      	adds	r3, r2, r3
 8019bec:	881b      	ldrh	r3, [r3, #0]
 8019bee:	b29a      	uxth	r2, r3
 8019bf0:	2018      	movs	r0, #24
 8019bf2:	183b      	adds	r3, r7, r0
 8019bf4:	4966      	ldr	r1, [pc, #408]	@ (8019d90 <HAL_PCD_EP_DB_Receive+0x224>)
 8019bf6:	400a      	ands	r2, r1
 8019bf8:	801a      	strh	r2, [r3, #0]
 8019bfa:	183b      	adds	r3, r7, r0
 8019bfc:	183a      	adds	r2, r7, r0
 8019bfe:	8812      	ldrh	r2, [r2, #0]
 8019c00:	2180      	movs	r1, #128	@ 0x80
 8019c02:	0189      	lsls	r1, r1, #6
 8019c04:	404a      	eors	r2, r1
 8019c06:	801a      	strh	r2, [r3, #0]
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	001a      	movs	r2, r3
 8019c0e:	68bb      	ldr	r3, [r7, #8]
 8019c10:	781b      	ldrb	r3, [r3, #0]
 8019c12:	009b      	lsls	r3, r3, #2
 8019c14:	18d3      	adds	r3, r2, r3
 8019c16:	183a      	adds	r2, r7, r0
 8019c18:	8812      	ldrh	r2, [r2, #0]
 8019c1a:	495e      	ldr	r1, [pc, #376]	@ (8019d94 <HAL_PCD_EP_DB_Receive+0x228>)
 8019c1c:	430a      	orrs	r2, r1
 8019c1e:	b292      	uxth	r2, r2
 8019c20:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019c22:	1dbb      	adds	r3, r7, #6
 8019c24:	881b      	ldrh	r3, [r3, #0]
 8019c26:	2240      	movs	r2, #64	@ 0x40
 8019c28:	4013      	ands	r3, r2
 8019c2a:	d01a      	beq.n	8019c62 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	001a      	movs	r2, r3
 8019c32:	68bb      	ldr	r3, [r7, #8]
 8019c34:	781b      	ldrb	r3, [r3, #0]
 8019c36:	009b      	lsls	r3, r3, #2
 8019c38:	18d3      	adds	r3, r2, r3
 8019c3a:	881b      	ldrh	r3, [r3, #0]
 8019c3c:	b29a      	uxth	r2, r3
 8019c3e:	2016      	movs	r0, #22
 8019c40:	183b      	adds	r3, r7, r0
 8019c42:	4955      	ldr	r1, [pc, #340]	@ (8019d98 <HAL_PCD_EP_DB_Receive+0x22c>)
 8019c44:	400a      	ands	r2, r1
 8019c46:	801a      	strh	r2, [r3, #0]
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	001a      	movs	r2, r3
 8019c4e:	68bb      	ldr	r3, [r7, #8]
 8019c50:	781b      	ldrb	r3, [r3, #0]
 8019c52:	009b      	lsls	r3, r3, #2
 8019c54:	18d3      	adds	r3, r2, r3
 8019c56:	183a      	adds	r2, r7, r0
 8019c58:	8812      	ldrh	r2, [r2, #0]
 8019c5a:	4950      	ldr	r1, [pc, #320]	@ (8019d9c <HAL_PCD_EP_DB_Receive+0x230>)
 8019c5c:	430a      	orrs	r2, r1
 8019c5e:	b292      	uxth	r2, r2
 8019c60:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019c62:	241a      	movs	r4, #26
 8019c64:	193b      	adds	r3, r7, r4
 8019c66:	881b      	ldrh	r3, [r3, #0]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d100      	bne.n	8019c6e <HAL_PCD_EP_DB_Receive+0x102>
 8019c6c:	e086      	b.n	8019d7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	6818      	ldr	r0, [r3, #0]
 8019c72:	68bb      	ldr	r3, [r7, #8]
 8019c74:	6959      	ldr	r1, [r3, #20]
 8019c76:	68bb      	ldr	r3, [r7, #8]
 8019c78:	891a      	ldrh	r2, [r3, #8]
 8019c7a:	193b      	adds	r3, r7, r4
 8019c7c:	881b      	ldrh	r3, [r3, #0]
 8019c7e:	f006 fe6f 	bl	8020960 <USB_ReadPMA>
 8019c82:	e07b      	b.n	8019d7c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	2250      	movs	r2, #80	@ 0x50
 8019c8a:	5a9b      	ldrh	r3, [r3, r2]
 8019c8c:	b29b      	uxth	r3, r3
 8019c8e:	001a      	movs	r2, r3
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	781b      	ldrb	r3, [r3, #0]
 8019c94:	00db      	lsls	r3, r3, #3
 8019c96:	18d2      	adds	r2, r2, r3
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	18d3      	adds	r3, r2, r3
 8019c9e:	4a40      	ldr	r2, [pc, #256]	@ (8019da0 <HAL_PCD_EP_DB_Receive+0x234>)
 8019ca0:	4694      	mov	ip, r2
 8019ca2:	4463      	add	r3, ip
 8019ca4:	881a      	ldrh	r2, [r3, #0]
 8019ca6:	211a      	movs	r1, #26
 8019ca8:	187b      	adds	r3, r7, r1
 8019caa:	0592      	lsls	r2, r2, #22
 8019cac:	0d92      	lsrs	r2, r2, #22
 8019cae:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019cb0:	68bb      	ldr	r3, [r7, #8]
 8019cb2:	699a      	ldr	r2, [r3, #24]
 8019cb4:	187b      	adds	r3, r7, r1
 8019cb6:	881b      	ldrh	r3, [r3, #0]
 8019cb8:	429a      	cmp	r2, r3
 8019cba:	d307      	bcc.n	8019ccc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8019cbc:	68bb      	ldr	r3, [r7, #8]
 8019cbe:	699a      	ldr	r2, [r3, #24]
 8019cc0:	187b      	adds	r3, r7, r1
 8019cc2:	881b      	ldrh	r3, [r3, #0]
 8019cc4:	1ad2      	subs	r2, r2, r3
 8019cc6:	68bb      	ldr	r3, [r7, #8]
 8019cc8:	619a      	str	r2, [r3, #24]
 8019cca:	e002      	b.n	8019cd2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8019ccc:	68bb      	ldr	r3, [r7, #8]
 8019cce:	2200      	movs	r2, #0
 8019cd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8019cd2:	68bb      	ldr	r3, [r7, #8]
 8019cd4:	699b      	ldr	r3, [r3, #24]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d121      	bne.n	8019d1e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	001a      	movs	r2, r3
 8019ce0:	68bb      	ldr	r3, [r7, #8]
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	009b      	lsls	r3, r3, #2
 8019ce6:	18d3      	adds	r3, r2, r3
 8019ce8:	881b      	ldrh	r3, [r3, #0]
 8019cea:	b29a      	uxth	r2, r3
 8019cec:	201e      	movs	r0, #30
 8019cee:	183b      	adds	r3, r7, r0
 8019cf0:	4927      	ldr	r1, [pc, #156]	@ (8019d90 <HAL_PCD_EP_DB_Receive+0x224>)
 8019cf2:	400a      	ands	r2, r1
 8019cf4:	801a      	strh	r2, [r3, #0]
 8019cf6:	183b      	adds	r3, r7, r0
 8019cf8:	183a      	adds	r2, r7, r0
 8019cfa:	8812      	ldrh	r2, [r2, #0]
 8019cfc:	2180      	movs	r1, #128	@ 0x80
 8019cfe:	0189      	lsls	r1, r1, #6
 8019d00:	404a      	eors	r2, r1
 8019d02:	801a      	strh	r2, [r3, #0]
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	001a      	movs	r2, r3
 8019d0a:	68bb      	ldr	r3, [r7, #8]
 8019d0c:	781b      	ldrb	r3, [r3, #0]
 8019d0e:	009b      	lsls	r3, r3, #2
 8019d10:	18d3      	adds	r3, r2, r3
 8019d12:	183a      	adds	r2, r7, r0
 8019d14:	8812      	ldrh	r2, [r2, #0]
 8019d16:	491f      	ldr	r1, [pc, #124]	@ (8019d94 <HAL_PCD_EP_DB_Receive+0x228>)
 8019d18:	430a      	orrs	r2, r1
 8019d1a:	b292      	uxth	r2, r2
 8019d1c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8019d1e:	1dbb      	adds	r3, r7, #6
 8019d20:	881b      	ldrh	r3, [r3, #0]
 8019d22:	2240      	movs	r2, #64	@ 0x40
 8019d24:	4013      	ands	r3, r2
 8019d26:	d11a      	bne.n	8019d5e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	001a      	movs	r2, r3
 8019d2e:	68bb      	ldr	r3, [r7, #8]
 8019d30:	781b      	ldrb	r3, [r3, #0]
 8019d32:	009b      	lsls	r3, r3, #2
 8019d34:	18d3      	adds	r3, r2, r3
 8019d36:	881b      	ldrh	r3, [r3, #0]
 8019d38:	b29a      	uxth	r2, r3
 8019d3a:	201c      	movs	r0, #28
 8019d3c:	183b      	adds	r3, r7, r0
 8019d3e:	4916      	ldr	r1, [pc, #88]	@ (8019d98 <HAL_PCD_EP_DB_Receive+0x22c>)
 8019d40:	400a      	ands	r2, r1
 8019d42:	801a      	strh	r2, [r3, #0]
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	001a      	movs	r2, r3
 8019d4a:	68bb      	ldr	r3, [r7, #8]
 8019d4c:	781b      	ldrb	r3, [r3, #0]
 8019d4e:	009b      	lsls	r3, r3, #2
 8019d50:	18d3      	adds	r3, r2, r3
 8019d52:	183a      	adds	r2, r7, r0
 8019d54:	8812      	ldrh	r2, [r2, #0]
 8019d56:	4911      	ldr	r1, [pc, #68]	@ (8019d9c <HAL_PCD_EP_DB_Receive+0x230>)
 8019d58:	430a      	orrs	r2, r1
 8019d5a:	b292      	uxth	r2, r2
 8019d5c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019d5e:	241a      	movs	r4, #26
 8019d60:	193b      	adds	r3, r7, r4
 8019d62:	881b      	ldrh	r3, [r3, #0]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d009      	beq.n	8019d7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	6818      	ldr	r0, [r3, #0]
 8019d6c:	68bb      	ldr	r3, [r7, #8]
 8019d6e:	6959      	ldr	r1, [r3, #20]
 8019d70:	68bb      	ldr	r3, [r7, #8]
 8019d72:	895a      	ldrh	r2, [r3, #10]
 8019d74:	193b      	adds	r3, r7, r4
 8019d76:	881b      	ldrh	r3, [r3, #0]
 8019d78:	f006 fdf2 	bl	8020960 <USB_ReadPMA>
    }
  }

  return count;
 8019d7c:	231a      	movs	r3, #26
 8019d7e:	18fb      	adds	r3, r7, r3
 8019d80:	881b      	ldrh	r3, [r3, #0]
}
 8019d82:	0018      	movs	r0, r3
 8019d84:	46bd      	mov	sp, r7
 8019d86:	b009      	add	sp, #36	@ 0x24
 8019d88:	bd90      	pop	{r4, r7, pc}
 8019d8a:	46c0      	nop			@ (mov r8, r8)
 8019d8c:	00000402 	.word	0x00000402
 8019d90:	ffffbf8f 	.word	0xffffbf8f
 8019d94:	ffff8080 	.word	0xffff8080
 8019d98:	ffff8f8f 	.word	0xffff8f8f
 8019d9c:	ffff80c0 	.word	0xffff80c0
 8019da0:	00000406 	.word	0x00000406

08019da4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b0a4      	sub	sp, #144	@ 0x90
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	60f8      	str	r0, [r7, #12]
 8019dac:	60b9      	str	r1, [r7, #8]
 8019dae:	1dbb      	adds	r3, r7, #6
 8019db0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019db2:	1dbb      	adds	r3, r7, #6
 8019db4:	881b      	ldrh	r3, [r3, #0]
 8019db6:	2240      	movs	r2, #64	@ 0x40
 8019db8:	4013      	ands	r3, r2
 8019dba:	d100      	bne.n	8019dbe <HAL_PCD_EP_DB_Transmit+0x1a>
 8019dbc:	e1e4      	b.n	801a188 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	2250      	movs	r2, #80	@ 0x50
 8019dc4:	5a9b      	ldrh	r3, [r3, r2]
 8019dc6:	b29b      	uxth	r3, r3
 8019dc8:	001a      	movs	r2, r3
 8019dca:	68bb      	ldr	r3, [r7, #8]
 8019dcc:	781b      	ldrb	r3, [r3, #0]
 8019dce:	00db      	lsls	r3, r3, #3
 8019dd0:	18d2      	adds	r2, r2, r3
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	18d3      	adds	r3, r2, r3
 8019dd8:	4ad0      	ldr	r2, [pc, #832]	@ (801a11c <HAL_PCD_EP_DB_Transmit+0x378>)
 8019dda:	4694      	mov	ip, r2
 8019ddc:	4463      	add	r3, ip
 8019dde:	881a      	ldrh	r2, [r3, #0]
 8019de0:	2186      	movs	r1, #134	@ 0x86
 8019de2:	187b      	adds	r3, r7, r1
 8019de4:	0592      	lsls	r2, r2, #22
 8019de6:	0d92      	lsrs	r2, r2, #22
 8019de8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8019dea:	68bb      	ldr	r3, [r7, #8]
 8019dec:	699a      	ldr	r2, [r3, #24]
 8019dee:	187b      	adds	r3, r7, r1
 8019df0:	881b      	ldrh	r3, [r3, #0]
 8019df2:	429a      	cmp	r2, r3
 8019df4:	d907      	bls.n	8019e06 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8019df6:	68bb      	ldr	r3, [r7, #8]
 8019df8:	699a      	ldr	r2, [r3, #24]
 8019dfa:	187b      	adds	r3, r7, r1
 8019dfc:	881b      	ldrh	r3, [r3, #0]
 8019dfe:	1ad2      	subs	r2, r2, r3
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	619a      	str	r2, [r3, #24]
 8019e04:	e002      	b.n	8019e0c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8019e06:	68bb      	ldr	r3, [r7, #8]
 8019e08:	2200      	movs	r2, #0
 8019e0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8019e0c:	68bb      	ldr	r3, [r7, #8]
 8019e0e:	699b      	ldr	r3, [r3, #24]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d000      	beq.n	8019e16 <HAL_PCD_EP_DB_Transmit+0x72>
 8019e14:	e0b5      	b.n	8019f82 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019e16:	68bb      	ldr	r3, [r7, #8]
 8019e18:	785b      	ldrb	r3, [r3, #1]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d125      	bne.n	8019e6a <HAL_PCD_EP_DB_Transmit+0xc6>
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	2250      	movs	r2, #80	@ 0x50
 8019e2a:	5a9b      	ldrh	r3, [r3, r2]
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	001a      	movs	r2, r3
 8019e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e32:	189b      	adds	r3, r3, r2
 8019e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019e36:	68bb      	ldr	r3, [r7, #8]
 8019e38:	781b      	ldrb	r3, [r3, #0]
 8019e3a:	00da      	lsls	r2, r3, #3
 8019e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e3e:	18d3      	adds	r3, r2, r3
 8019e40:	4ab6      	ldr	r2, [pc, #728]	@ (801a11c <HAL_PCD_EP_DB_Transmit+0x378>)
 8019e42:	4694      	mov	ip, r2
 8019e44:	4463      	add	r3, ip
 8019e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e4a:	881b      	ldrh	r3, [r3, #0]
 8019e4c:	b29b      	uxth	r3, r3
 8019e4e:	059b      	lsls	r3, r3, #22
 8019e50:	0d9b      	lsrs	r3, r3, #22
 8019e52:	b29a      	uxth	r2, r3
 8019e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e56:	801a      	strh	r2, [r3, #0]
 8019e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e5a:	881b      	ldrh	r3, [r3, #0]
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	4ab0      	ldr	r2, [pc, #704]	@ (801a120 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019e60:	4313      	orrs	r3, r2
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e66:	801a      	strh	r2, [r3, #0]
 8019e68:	e01b      	b.n	8019ea2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	785b      	ldrb	r3, [r3, #1]
 8019e6e:	2b01      	cmp	r3, #1
 8019e70:	d117      	bne.n	8019ea2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	2250      	movs	r2, #80	@ 0x50
 8019e7e:	5a9b      	ldrh	r3, [r3, r2]
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	001a      	movs	r2, r3
 8019e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e86:	189b      	adds	r3, r3, r2
 8019e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8019e8a:	68bb      	ldr	r3, [r7, #8]
 8019e8c:	781b      	ldrb	r3, [r3, #0]
 8019e8e:	00da      	lsls	r2, r3, #3
 8019e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e92:	18d3      	adds	r3, r2, r3
 8019e94:	4aa1      	ldr	r2, [pc, #644]	@ (801a11c <HAL_PCD_EP_DB_Transmit+0x378>)
 8019e96:	4694      	mov	ip, r2
 8019e98:	4463      	add	r3, ip
 8019e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8019ea8:	68bb      	ldr	r3, [r7, #8]
 8019eaa:	785b      	ldrb	r3, [r3, #1]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d125      	bne.n	8019efc <HAL_PCD_EP_DB_Transmit+0x158>
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	61fb      	str	r3, [r7, #28]
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	2250      	movs	r2, #80	@ 0x50
 8019ebc:	5a9b      	ldrh	r3, [r3, r2]
 8019ebe:	b29b      	uxth	r3, r3
 8019ec0:	001a      	movs	r2, r3
 8019ec2:	69fb      	ldr	r3, [r7, #28]
 8019ec4:	189b      	adds	r3, r3, r2
 8019ec6:	61fb      	str	r3, [r7, #28]
 8019ec8:	68bb      	ldr	r3, [r7, #8]
 8019eca:	781b      	ldrb	r3, [r3, #0]
 8019ecc:	00da      	lsls	r2, r3, #3
 8019ece:	69fb      	ldr	r3, [r7, #28]
 8019ed0:	18d3      	adds	r3, r2, r3
 8019ed2:	4a94      	ldr	r2, [pc, #592]	@ (801a124 <HAL_PCD_EP_DB_Transmit+0x380>)
 8019ed4:	4694      	mov	ip, r2
 8019ed6:	4463      	add	r3, ip
 8019ed8:	61bb      	str	r3, [r7, #24]
 8019eda:	69bb      	ldr	r3, [r7, #24]
 8019edc:	881b      	ldrh	r3, [r3, #0]
 8019ede:	b29b      	uxth	r3, r3
 8019ee0:	059b      	lsls	r3, r3, #22
 8019ee2:	0d9b      	lsrs	r3, r3, #22
 8019ee4:	b29a      	uxth	r2, r3
 8019ee6:	69bb      	ldr	r3, [r7, #24]
 8019ee8:	801a      	strh	r2, [r3, #0]
 8019eea:	69bb      	ldr	r3, [r7, #24]
 8019eec:	881b      	ldrh	r3, [r3, #0]
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	4a8b      	ldr	r2, [pc, #556]	@ (801a120 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019ef2:	4313      	orrs	r3, r2
 8019ef4:	b29a      	uxth	r2, r3
 8019ef6:	69bb      	ldr	r3, [r7, #24]
 8019ef8:	801a      	strh	r2, [r3, #0]
 8019efa:	e018      	b.n	8019f2e <HAL_PCD_EP_DB_Transmit+0x18a>
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	785b      	ldrb	r3, [r3, #1]
 8019f00:	2b01      	cmp	r3, #1
 8019f02:	d114      	bne.n	8019f2e <HAL_PCD_EP_DB_Transmit+0x18a>
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	2250      	movs	r2, #80	@ 0x50
 8019f0a:	5a9b      	ldrh	r3, [r3, r2]
 8019f0c:	b29b      	uxth	r3, r3
 8019f0e:	001a      	movs	r2, r3
 8019f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f12:	189b      	adds	r3, r3, r2
 8019f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8019f16:	68bb      	ldr	r3, [r7, #8]
 8019f18:	781b      	ldrb	r3, [r3, #0]
 8019f1a:	00da      	lsls	r2, r3, #3
 8019f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f1e:	18d3      	adds	r3, r2, r3
 8019f20:	4a80      	ldr	r2, [pc, #512]	@ (801a124 <HAL_PCD_EP_DB_Transmit+0x380>)
 8019f22:	4694      	mov	ip, r2
 8019f24:	4463      	add	r3, ip
 8019f26:	623b      	str	r3, [r7, #32]
 8019f28:	6a3b      	ldr	r3, [r7, #32]
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	781a      	ldrb	r2, [r3, #0]
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	0011      	movs	r1, r2
 8019f36:	0018      	movs	r0, r3
 8019f38:	f008 feb6 	bl	8022ca8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019f3c:	1dbb      	adds	r3, r7, #6
 8019f3e:	881a      	ldrh	r2, [r3, #0]
 8019f40:	2380      	movs	r3, #128	@ 0x80
 8019f42:	01db      	lsls	r3, r3, #7
 8019f44:	4013      	ands	r3, r2
 8019f46:	d100      	bne.n	8019f4a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8019f48:	e309      	b.n	801a55e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	001a      	movs	r2, r3
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	781b      	ldrb	r3, [r3, #0]
 8019f54:	009b      	lsls	r3, r3, #2
 8019f56:	18d3      	adds	r3, r2, r3
 8019f58:	881b      	ldrh	r3, [r3, #0]
 8019f5a:	b29a      	uxth	r2, r3
 8019f5c:	2016      	movs	r0, #22
 8019f5e:	183b      	adds	r3, r7, r0
 8019f60:	4971      	ldr	r1, [pc, #452]	@ (801a128 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019f62:	400a      	ands	r2, r1
 8019f64:	801a      	strh	r2, [r3, #0]
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	001a      	movs	r2, r3
 8019f6c:	68bb      	ldr	r3, [r7, #8]
 8019f6e:	781b      	ldrb	r3, [r3, #0]
 8019f70:	009b      	lsls	r3, r3, #2
 8019f72:	18d3      	adds	r3, r2, r3
 8019f74:	183a      	adds	r2, r7, r0
 8019f76:	8812      	ldrh	r2, [r2, #0]
 8019f78:	496c      	ldr	r1, [pc, #432]	@ (801a12c <HAL_PCD_EP_DB_Transmit+0x388>)
 8019f7a:	430a      	orrs	r2, r1
 8019f7c:	b292      	uxth	r2, r2
 8019f7e:	801a      	strh	r2, [r3, #0]
 8019f80:	e2ed      	b.n	801a55e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019f82:	1dbb      	adds	r3, r7, #6
 8019f84:	881a      	ldrh	r2, [r3, #0]
 8019f86:	2380      	movs	r3, #128	@ 0x80
 8019f88:	01db      	lsls	r3, r3, #7
 8019f8a:	4013      	ands	r3, r2
 8019f8c:	d01a      	beq.n	8019fc4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	001a      	movs	r2, r3
 8019f94:	68bb      	ldr	r3, [r7, #8]
 8019f96:	781b      	ldrb	r3, [r3, #0]
 8019f98:	009b      	lsls	r3, r3, #2
 8019f9a:	18d3      	adds	r3, r2, r3
 8019f9c:	881b      	ldrh	r3, [r3, #0]
 8019f9e:	b29a      	uxth	r2, r3
 8019fa0:	208a      	movs	r0, #138	@ 0x8a
 8019fa2:	183b      	adds	r3, r7, r0
 8019fa4:	4960      	ldr	r1, [pc, #384]	@ (801a128 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019fa6:	400a      	ands	r2, r1
 8019fa8:	801a      	strh	r2, [r3, #0]
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	001a      	movs	r2, r3
 8019fb0:	68bb      	ldr	r3, [r7, #8]
 8019fb2:	781b      	ldrb	r3, [r3, #0]
 8019fb4:	009b      	lsls	r3, r3, #2
 8019fb6:	18d3      	adds	r3, r2, r3
 8019fb8:	183a      	adds	r2, r7, r0
 8019fba:	8812      	ldrh	r2, [r2, #0]
 8019fbc:	495b      	ldr	r1, [pc, #364]	@ (801a12c <HAL_PCD_EP_DB_Transmit+0x388>)
 8019fbe:	430a      	orrs	r2, r1
 8019fc0:	b292      	uxth	r2, r2
 8019fc2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019fc4:	68bb      	ldr	r3, [r7, #8]
 8019fc6:	2224      	movs	r2, #36	@ 0x24
 8019fc8:	5c9b      	ldrb	r3, [r3, r2]
 8019fca:	2b01      	cmp	r3, #1
 8019fcc:	d000      	beq.n	8019fd0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8019fce:	e2c6      	b.n	801a55e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019fd0:	68bb      	ldr	r3, [r7, #8]
 8019fd2:	695a      	ldr	r2, [r3, #20]
 8019fd4:	2186      	movs	r1, #134	@ 0x86
 8019fd6:	187b      	adds	r3, r7, r1
 8019fd8:	881b      	ldrh	r3, [r3, #0]
 8019fda:	18d2      	adds	r2, r2, r3
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019fe0:	68bb      	ldr	r3, [r7, #8]
 8019fe2:	69da      	ldr	r2, [r3, #28]
 8019fe4:	187b      	adds	r3, r7, r1
 8019fe6:	881b      	ldrh	r3, [r3, #0]
 8019fe8:	18d2      	adds	r2, r2, r3
 8019fea:	68bb      	ldr	r3, [r7, #8]
 8019fec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019fee:	68bb      	ldr	r3, [r7, #8]
 8019ff0:	6a1a      	ldr	r2, [r3, #32]
 8019ff2:	68bb      	ldr	r3, [r7, #8]
 8019ff4:	691b      	ldr	r3, [r3, #16]
 8019ff6:	429a      	cmp	r2, r3
 8019ff8:	d30c      	bcc.n	801a014 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8019ffa:	68bb      	ldr	r3, [r7, #8]
 8019ffc:	691b      	ldr	r3, [r3, #16]
 8019ffe:	218c      	movs	r1, #140	@ 0x8c
 801a000:	187a      	adds	r2, r7, r1
 801a002:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801a004:	68bb      	ldr	r3, [r7, #8]
 801a006:	6a1a      	ldr	r2, [r3, #32]
 801a008:	187b      	adds	r3, r7, r1
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	1ad2      	subs	r2, r2, r3
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	621a      	str	r2, [r3, #32]
 801a012:	e01a      	b.n	801a04a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	6a1b      	ldr	r3, [r3, #32]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d10a      	bne.n	801a032 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801a01c:	2386      	movs	r3, #134	@ 0x86
 801a01e:	18fb      	adds	r3, r7, r3
 801a020:	881b      	ldrh	r3, [r3, #0]
 801a022:	228c      	movs	r2, #140	@ 0x8c
 801a024:	18ba      	adds	r2, r7, r2
 801a026:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	2224      	movs	r2, #36	@ 0x24
 801a02c:	2100      	movs	r1, #0
 801a02e:	5499      	strb	r1, [r3, r2]
 801a030:	e00b      	b.n	801a04a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801a032:	68bb      	ldr	r3, [r7, #8]
 801a034:	2224      	movs	r2, #36	@ 0x24
 801a036:	2100      	movs	r1, #0
 801a038:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801a03a:	68bb      	ldr	r3, [r7, #8]
 801a03c:	6a1b      	ldr	r3, [r3, #32]
 801a03e:	228c      	movs	r2, #140	@ 0x8c
 801a040:	18ba      	adds	r2, r7, r2
 801a042:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	2200      	movs	r2, #0
 801a048:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801a04a:	68bb      	ldr	r3, [r7, #8]
 801a04c:	785b      	ldrb	r3, [r3, #1]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d000      	beq.n	801a054 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801a052:	e06d      	b.n	801a130 <HAL_PCD_EP_DB_Transmit+0x38c>
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	2250      	movs	r2, #80	@ 0x50
 801a060:	5a9b      	ldrh	r3, [r3, r2]
 801a062:	b29b      	uxth	r3, r3
 801a064:	001a      	movs	r2, r3
 801a066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a068:	189b      	adds	r3, r3, r2
 801a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	781b      	ldrb	r3, [r3, #0]
 801a070:	00da      	lsls	r2, r3, #3
 801a072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a074:	18d3      	adds	r3, r2, r3
 801a076:	4a29      	ldr	r2, [pc, #164]	@ (801a11c <HAL_PCD_EP_DB_Transmit+0x378>)
 801a078:	4694      	mov	ip, r2
 801a07a:	4463      	add	r3, ip
 801a07c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a080:	881b      	ldrh	r3, [r3, #0]
 801a082:	b29b      	uxth	r3, r3
 801a084:	059b      	lsls	r3, r3, #22
 801a086:	0d9b      	lsrs	r3, r3, #22
 801a088:	b29a      	uxth	r2, r3
 801a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a08c:	801a      	strh	r2, [r3, #0]
 801a08e:	228c      	movs	r2, #140	@ 0x8c
 801a090:	18bb      	adds	r3, r7, r2
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	2b3e      	cmp	r3, #62	@ 0x3e
 801a096:	d91a      	bls.n	801a0ce <HAL_PCD_EP_DB_Transmit+0x32a>
 801a098:	18bb      	adds	r3, r7, r2
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	095b      	lsrs	r3, r3, #5
 801a09e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0a0:	18bb      	adds	r3, r7, r2
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	221f      	movs	r2, #31
 801a0a6:	4013      	ands	r3, r2
 801a0a8:	d102      	bne.n	801a0b0 <HAL_PCD_EP_DB_Transmit+0x30c>
 801a0aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0ac:	3b01      	subs	r3, #1
 801a0ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0b2:	881b      	ldrh	r3, [r3, #0]
 801a0b4:	b29a      	uxth	r2, r3
 801a0b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	029b      	lsls	r3, r3, #10
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	4313      	orrs	r3, r2
 801a0c0:	b29b      	uxth	r3, r3
 801a0c2:	4a17      	ldr	r2, [pc, #92]	@ (801a120 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a0c4:	4313      	orrs	r3, r2
 801a0c6:	b29a      	uxth	r2, r3
 801a0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0ca:	801a      	strh	r2, [r3, #0]
 801a0cc:	e04f      	b.n	801a16e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801a0ce:	238c      	movs	r3, #140	@ 0x8c
 801a0d0:	18fb      	adds	r3, r7, r3
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d108      	bne.n	801a0ea <HAL_PCD_EP_DB_Transmit+0x346>
 801a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0da:	881b      	ldrh	r3, [r3, #0]
 801a0dc:	b29b      	uxth	r3, r3
 801a0de:	4a10      	ldr	r2, [pc, #64]	@ (801a120 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801a0e0:	4313      	orrs	r3, r2
 801a0e2:	b29a      	uxth	r2, r3
 801a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0e6:	801a      	strh	r2, [r3, #0]
 801a0e8:	e041      	b.n	801a16e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801a0ea:	228c      	movs	r2, #140	@ 0x8c
 801a0ec:	18bb      	adds	r3, r7, r2
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	085b      	lsrs	r3, r3, #1
 801a0f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0f4:	18bb      	adds	r3, r7, r2
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	2201      	movs	r2, #1
 801a0fa:	4013      	ands	r3, r2
 801a0fc:	d002      	beq.n	801a104 <HAL_PCD_EP_DB_Transmit+0x360>
 801a0fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a100:	3301      	adds	r3, #1
 801a102:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a106:	881b      	ldrh	r3, [r3, #0]
 801a108:	b29a      	uxth	r2, r3
 801a10a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	029b      	lsls	r3, r3, #10
 801a110:	b29b      	uxth	r3, r3
 801a112:	4313      	orrs	r3, r2
 801a114:	b29a      	uxth	r2, r3
 801a116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a118:	801a      	strh	r2, [r3, #0]
 801a11a:	e028      	b.n	801a16e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801a11c:	00000402 	.word	0x00000402
 801a120:	ffff8000 	.word	0xffff8000
 801a124:	00000406 	.word	0x00000406
 801a128:	ffff8f8f 	.word	0xffff8f8f
 801a12c:	ffffc080 	.word	0xffffc080
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	785b      	ldrb	r3, [r3, #1]
 801a134:	2b01      	cmp	r3, #1
 801a136:	d11a      	bne.n	801a16e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	2250      	movs	r2, #80	@ 0x50
 801a144:	5a9b      	ldrh	r3, [r3, r2]
 801a146:	b29b      	uxth	r3, r3
 801a148:	001a      	movs	r2, r3
 801a14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a14c:	189b      	adds	r3, r3, r2
 801a14e:	647b      	str	r3, [r7, #68]	@ 0x44
 801a150:	68bb      	ldr	r3, [r7, #8]
 801a152:	781b      	ldrb	r3, [r3, #0]
 801a154:	00da      	lsls	r2, r3, #3
 801a156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a158:	18d3      	adds	r3, r2, r3
 801a15a:	4adb      	ldr	r2, [pc, #876]	@ (801a4c8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801a15c:	4694      	mov	ip, r2
 801a15e:	4463      	add	r3, ip
 801a160:	643b      	str	r3, [r7, #64]	@ 0x40
 801a162:	238c      	movs	r3, #140	@ 0x8c
 801a164:	18fb      	adds	r3, r7, r3
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	b29a      	uxth	r2, r3
 801a16a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a16c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	6818      	ldr	r0, [r3, #0]
 801a172:	68bb      	ldr	r3, [r7, #8]
 801a174:	6959      	ldr	r1, [r3, #20]
 801a176:	68bb      	ldr	r3, [r7, #8]
 801a178:	891a      	ldrh	r2, [r3, #8]
 801a17a:	238c      	movs	r3, #140	@ 0x8c
 801a17c:	18fb      	adds	r3, r7, r3
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	b29b      	uxth	r3, r3
 801a182:	f006 fba3 	bl	80208cc <USB_WritePMA>
 801a186:	e1ea      	b.n	801a55e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	2250      	movs	r2, #80	@ 0x50
 801a18e:	5a9b      	ldrh	r3, [r3, r2]
 801a190:	b29b      	uxth	r3, r3
 801a192:	001a      	movs	r2, r3
 801a194:	68bb      	ldr	r3, [r7, #8]
 801a196:	781b      	ldrb	r3, [r3, #0]
 801a198:	00db      	lsls	r3, r3, #3
 801a19a:	18d2      	adds	r2, r2, r3
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	18d3      	adds	r3, r2, r3
 801a1a2:	4aca      	ldr	r2, [pc, #808]	@ (801a4cc <HAL_PCD_EP_DB_Transmit+0x728>)
 801a1a4:	4694      	mov	ip, r2
 801a1a6:	4463      	add	r3, ip
 801a1a8:	881a      	ldrh	r2, [r3, #0]
 801a1aa:	2186      	movs	r1, #134	@ 0x86
 801a1ac:	187b      	adds	r3, r7, r1
 801a1ae:	0592      	lsls	r2, r2, #22
 801a1b0:	0d92      	lsrs	r2, r2, #22
 801a1b2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	699a      	ldr	r2, [r3, #24]
 801a1b8:	187b      	adds	r3, r7, r1
 801a1ba:	881b      	ldrh	r3, [r3, #0]
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d307      	bcc.n	801a1d0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801a1c0:	68bb      	ldr	r3, [r7, #8]
 801a1c2:	699a      	ldr	r2, [r3, #24]
 801a1c4:	187b      	adds	r3, r7, r1
 801a1c6:	881b      	ldrh	r3, [r3, #0]
 801a1c8:	1ad2      	subs	r2, r2, r3
 801a1ca:	68bb      	ldr	r3, [r7, #8]
 801a1cc:	619a      	str	r2, [r3, #24]
 801a1ce:	e002      	b.n	801a1d6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801a1d0:	68bb      	ldr	r3, [r7, #8]
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a1d6:	68bb      	ldr	r3, [r7, #8]
 801a1d8:	699b      	ldr	r3, [r3, #24]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d000      	beq.n	801a1e0 <HAL_PCD_EP_DB_Transmit+0x43c>
 801a1de:	e0bb      	b.n	801a358 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a1e0:	68bb      	ldr	r3, [r7, #8]
 801a1e2:	785b      	ldrb	r3, [r3, #1]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d125      	bne.n	801a234 <HAL_PCD_EP_DB_Transmit+0x490>
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	2250      	movs	r2, #80	@ 0x50
 801a1f4:	5a9b      	ldrh	r3, [r3, r2]
 801a1f6:	b29b      	uxth	r3, r3
 801a1f8:	001a      	movs	r2, r3
 801a1fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a1fc:	189b      	adds	r3, r3, r2
 801a1fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	781b      	ldrb	r3, [r3, #0]
 801a204:	00da      	lsls	r2, r3, #3
 801a206:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a208:	18d3      	adds	r3, r2, r3
 801a20a:	4aaf      	ldr	r2, [pc, #700]	@ (801a4c8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801a20c:	4694      	mov	ip, r2
 801a20e:	4463      	add	r3, ip
 801a210:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a214:	881b      	ldrh	r3, [r3, #0]
 801a216:	b29b      	uxth	r3, r3
 801a218:	059b      	lsls	r3, r3, #22
 801a21a:	0d9b      	lsrs	r3, r3, #22
 801a21c:	b29a      	uxth	r2, r3
 801a21e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a220:	801a      	strh	r2, [r3, #0]
 801a222:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a224:	881b      	ldrh	r3, [r3, #0]
 801a226:	b29b      	uxth	r3, r3
 801a228:	4aa9      	ldr	r2, [pc, #676]	@ (801a4d0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a22a:	4313      	orrs	r3, r2
 801a22c:	b29a      	uxth	r2, r3
 801a22e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a230:	801a      	strh	r2, [r3, #0]
 801a232:	e01b      	b.n	801a26c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801a234:	68bb      	ldr	r3, [r7, #8]
 801a236:	785b      	ldrb	r3, [r3, #1]
 801a238:	2b01      	cmp	r3, #1
 801a23a:	d117      	bne.n	801a26c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	667b      	str	r3, [r7, #100]	@ 0x64
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	2250      	movs	r2, #80	@ 0x50
 801a248:	5a9b      	ldrh	r3, [r3, r2]
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	001a      	movs	r2, r3
 801a24e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a250:	189b      	adds	r3, r3, r2
 801a252:	667b      	str	r3, [r7, #100]	@ 0x64
 801a254:	68bb      	ldr	r3, [r7, #8]
 801a256:	781b      	ldrb	r3, [r3, #0]
 801a258:	00da      	lsls	r2, r3, #3
 801a25a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a25c:	18d3      	adds	r3, r2, r3
 801a25e:	4a9a      	ldr	r2, [pc, #616]	@ (801a4c8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801a260:	4694      	mov	ip, r2
 801a262:	4463      	add	r3, ip
 801a264:	663b      	str	r3, [r7, #96]	@ 0x60
 801a266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a268:	2200      	movs	r2, #0
 801a26a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	677b      	str	r3, [r7, #116]	@ 0x74
 801a272:	68bb      	ldr	r3, [r7, #8]
 801a274:	785b      	ldrb	r3, [r3, #1]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d12b      	bne.n	801a2d2 <HAL_PCD_EP_DB_Transmit+0x52e>
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	2250      	movs	r2, #80	@ 0x50
 801a286:	5a9b      	ldrh	r3, [r3, r2]
 801a288:	b29b      	uxth	r3, r3
 801a28a:	001a      	movs	r2, r3
 801a28c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a28e:	189b      	adds	r3, r3, r2
 801a290:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a292:	68bb      	ldr	r3, [r7, #8]
 801a294:	781b      	ldrb	r3, [r3, #0]
 801a296:	00da      	lsls	r2, r3, #3
 801a298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a29a:	18d3      	adds	r3, r2, r3
 801a29c:	4a8b      	ldr	r2, [pc, #556]	@ (801a4cc <HAL_PCD_EP_DB_Transmit+0x728>)
 801a29e:	4694      	mov	ip, r2
 801a2a0:	4463      	add	r3, ip
 801a2a2:	2180      	movs	r1, #128	@ 0x80
 801a2a4:	187a      	adds	r2, r7, r1
 801a2a6:	6013      	str	r3, [r2, #0]
 801a2a8:	187b      	adds	r3, r7, r1
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	881b      	ldrh	r3, [r3, #0]
 801a2ae:	b29b      	uxth	r3, r3
 801a2b0:	059b      	lsls	r3, r3, #22
 801a2b2:	0d9b      	lsrs	r3, r3, #22
 801a2b4:	b29a      	uxth	r2, r3
 801a2b6:	187b      	adds	r3, r7, r1
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	801a      	strh	r2, [r3, #0]
 801a2bc:	187b      	adds	r3, r7, r1
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	881b      	ldrh	r3, [r3, #0]
 801a2c2:	b29b      	uxth	r3, r3
 801a2c4:	4a82      	ldr	r2, [pc, #520]	@ (801a4d0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a2c6:	4313      	orrs	r3, r2
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	187b      	adds	r3, r7, r1
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	801a      	strh	r2, [r3, #0]
 801a2d0:	e018      	b.n	801a304 <HAL_PCD_EP_DB_Transmit+0x560>
 801a2d2:	68bb      	ldr	r3, [r7, #8]
 801a2d4:	785b      	ldrb	r3, [r3, #1]
 801a2d6:	2b01      	cmp	r3, #1
 801a2d8:	d114      	bne.n	801a304 <HAL_PCD_EP_DB_Transmit+0x560>
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	2250      	movs	r2, #80	@ 0x50
 801a2e0:	5a9b      	ldrh	r3, [r3, r2]
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	001a      	movs	r2, r3
 801a2e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a2e8:	189b      	adds	r3, r3, r2
 801a2ea:	677b      	str	r3, [r7, #116]	@ 0x74
 801a2ec:	68bb      	ldr	r3, [r7, #8]
 801a2ee:	781b      	ldrb	r3, [r3, #0]
 801a2f0:	00da      	lsls	r2, r3, #3
 801a2f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a2f4:	18d3      	adds	r3, r2, r3
 801a2f6:	4a75      	ldr	r2, [pc, #468]	@ (801a4cc <HAL_PCD_EP_DB_Transmit+0x728>)
 801a2f8:	4694      	mov	ip, r2
 801a2fa:	4463      	add	r3, ip
 801a2fc:	673b      	str	r3, [r7, #112]	@ 0x70
 801a2fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a300:	2200      	movs	r2, #0
 801a302:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a304:	68bb      	ldr	r3, [r7, #8]
 801a306:	781a      	ldrb	r2, [r3, #0]
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	0011      	movs	r1, r2
 801a30c:	0018      	movs	r0, r3
 801a30e:	f008 fccb 	bl	8022ca8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801a312:	1dbb      	adds	r3, r7, #6
 801a314:	881a      	ldrh	r2, [r3, #0]
 801a316:	2380      	movs	r3, #128	@ 0x80
 801a318:	01db      	lsls	r3, r3, #7
 801a31a:	4013      	ands	r3, r2
 801a31c:	d000      	beq.n	801a320 <HAL_PCD_EP_DB_Transmit+0x57c>
 801a31e:	e11e      	b.n	801a55e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	001a      	movs	r2, r3
 801a326:	68bb      	ldr	r3, [r7, #8]
 801a328:	781b      	ldrb	r3, [r3, #0]
 801a32a:	009b      	lsls	r3, r3, #2
 801a32c:	18d3      	adds	r3, r2, r3
 801a32e:	881b      	ldrh	r3, [r3, #0]
 801a330:	b29a      	uxth	r2, r3
 801a332:	2088      	movs	r0, #136	@ 0x88
 801a334:	183b      	adds	r3, r7, r0
 801a336:	4967      	ldr	r1, [pc, #412]	@ (801a4d4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801a338:	400a      	ands	r2, r1
 801a33a:	801a      	strh	r2, [r3, #0]
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	001a      	movs	r2, r3
 801a342:	68bb      	ldr	r3, [r7, #8]
 801a344:	781b      	ldrb	r3, [r3, #0]
 801a346:	009b      	lsls	r3, r3, #2
 801a348:	18d3      	adds	r3, r2, r3
 801a34a:	183a      	adds	r2, r7, r0
 801a34c:	8812      	ldrh	r2, [r2, #0]
 801a34e:	4962      	ldr	r1, [pc, #392]	@ (801a4d8 <HAL_PCD_EP_DB_Transmit+0x734>)
 801a350:	430a      	orrs	r2, r1
 801a352:	b292      	uxth	r2, r2
 801a354:	801a      	strh	r2, [r3, #0]
 801a356:	e102      	b.n	801a55e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801a358:	1dbb      	adds	r3, r7, #6
 801a35a:	881a      	ldrh	r2, [r3, #0]
 801a35c:	2380      	movs	r3, #128	@ 0x80
 801a35e:	01db      	lsls	r3, r3, #7
 801a360:	4013      	ands	r3, r2
 801a362:	d11a      	bne.n	801a39a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	001a      	movs	r2, r3
 801a36a:	68bb      	ldr	r3, [r7, #8]
 801a36c:	781b      	ldrb	r3, [r3, #0]
 801a36e:	009b      	lsls	r3, r3, #2
 801a370:	18d3      	adds	r3, r2, r3
 801a372:	881b      	ldrh	r3, [r3, #0]
 801a374:	b29a      	uxth	r2, r3
 801a376:	204e      	movs	r0, #78	@ 0x4e
 801a378:	183b      	adds	r3, r7, r0
 801a37a:	4956      	ldr	r1, [pc, #344]	@ (801a4d4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801a37c:	400a      	ands	r2, r1
 801a37e:	801a      	strh	r2, [r3, #0]
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	001a      	movs	r2, r3
 801a386:	68bb      	ldr	r3, [r7, #8]
 801a388:	781b      	ldrb	r3, [r3, #0]
 801a38a:	009b      	lsls	r3, r3, #2
 801a38c:	18d3      	adds	r3, r2, r3
 801a38e:	183a      	adds	r2, r7, r0
 801a390:	8812      	ldrh	r2, [r2, #0]
 801a392:	4951      	ldr	r1, [pc, #324]	@ (801a4d8 <HAL_PCD_EP_DB_Transmit+0x734>)
 801a394:	430a      	orrs	r2, r1
 801a396:	b292      	uxth	r2, r2
 801a398:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801a39a:	68bb      	ldr	r3, [r7, #8]
 801a39c:	2224      	movs	r2, #36	@ 0x24
 801a39e:	5c9b      	ldrb	r3, [r3, r2]
 801a3a0:	2b01      	cmp	r3, #1
 801a3a2:	d000      	beq.n	801a3a6 <HAL_PCD_EP_DB_Transmit+0x602>
 801a3a4:	e0db      	b.n	801a55e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801a3a6:	68bb      	ldr	r3, [r7, #8]
 801a3a8:	695a      	ldr	r2, [r3, #20]
 801a3aa:	2186      	movs	r1, #134	@ 0x86
 801a3ac:	187b      	adds	r3, r7, r1
 801a3ae:	881b      	ldrh	r3, [r3, #0]
 801a3b0:	18d2      	adds	r2, r2, r3
 801a3b2:	68bb      	ldr	r3, [r7, #8]
 801a3b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	69da      	ldr	r2, [r3, #28]
 801a3ba:	187b      	adds	r3, r7, r1
 801a3bc:	881b      	ldrh	r3, [r3, #0]
 801a3be:	18d2      	adds	r2, r2, r3
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	6a1a      	ldr	r2, [r3, #32]
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	691b      	ldr	r3, [r3, #16]
 801a3cc:	429a      	cmp	r2, r3
 801a3ce:	d30c      	bcc.n	801a3ea <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801a3d0:	68bb      	ldr	r3, [r7, #8]
 801a3d2:	691b      	ldr	r3, [r3, #16]
 801a3d4:	218c      	movs	r1, #140	@ 0x8c
 801a3d6:	187a      	adds	r2, r7, r1
 801a3d8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801a3da:	68bb      	ldr	r3, [r7, #8]
 801a3dc:	6a1a      	ldr	r2, [r3, #32]
 801a3de:	187b      	adds	r3, r7, r1
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	1ad2      	subs	r2, r2, r3
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	621a      	str	r2, [r3, #32]
 801a3e8:	e01a      	b.n	801a420 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801a3ea:	68bb      	ldr	r3, [r7, #8]
 801a3ec:	6a1b      	ldr	r3, [r3, #32]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d10a      	bne.n	801a408 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801a3f2:	2386      	movs	r3, #134	@ 0x86
 801a3f4:	18fb      	adds	r3, r7, r3
 801a3f6:	881b      	ldrh	r3, [r3, #0]
 801a3f8:	228c      	movs	r2, #140	@ 0x8c
 801a3fa:	18ba      	adds	r2, r7, r2
 801a3fc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801a3fe:	68bb      	ldr	r3, [r7, #8]
 801a400:	2224      	movs	r2, #36	@ 0x24
 801a402:	2100      	movs	r1, #0
 801a404:	5499      	strb	r1, [r3, r2]
 801a406:	e00b      	b.n	801a420 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801a408:	68bb      	ldr	r3, [r7, #8]
 801a40a:	6a1b      	ldr	r3, [r3, #32]
 801a40c:	228c      	movs	r2, #140	@ 0x8c
 801a40e:	18ba      	adds	r2, r7, r2
 801a410:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	2200      	movs	r2, #0
 801a416:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801a418:	68bb      	ldr	r3, [r7, #8]
 801a41a:	2224      	movs	r2, #36	@ 0x24
 801a41c:	2100      	movs	r1, #0
 801a41e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	657b      	str	r3, [r7, #84]	@ 0x54
 801a426:	68bb      	ldr	r3, [r7, #8]
 801a428:	785b      	ldrb	r3, [r3, #1]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d000      	beq.n	801a430 <HAL_PCD_EP_DB_Transmit+0x68c>
 801a42e:	e06e      	b.n	801a50e <HAL_PCD_EP_DB_Transmit+0x76a>
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2250      	movs	r2, #80	@ 0x50
 801a43c:	5a9b      	ldrh	r3, [r3, r2]
 801a43e:	b29b      	uxth	r3, r3
 801a440:	001a      	movs	r2, r3
 801a442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a444:	189b      	adds	r3, r3, r2
 801a446:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a448:	68bb      	ldr	r3, [r7, #8]
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	00da      	lsls	r2, r3, #3
 801a44e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a450:	18d3      	adds	r3, r2, r3
 801a452:	4a1e      	ldr	r2, [pc, #120]	@ (801a4cc <HAL_PCD_EP_DB_Transmit+0x728>)
 801a454:	4694      	mov	ip, r2
 801a456:	4463      	add	r3, ip
 801a458:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a45a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a45c:	881b      	ldrh	r3, [r3, #0]
 801a45e:	b29b      	uxth	r3, r3
 801a460:	059b      	lsls	r3, r3, #22
 801a462:	0d9b      	lsrs	r3, r3, #22
 801a464:	b29a      	uxth	r2, r3
 801a466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a468:	801a      	strh	r2, [r3, #0]
 801a46a:	228c      	movs	r2, #140	@ 0x8c
 801a46c:	18bb      	adds	r3, r7, r2
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	2b3e      	cmp	r3, #62	@ 0x3e
 801a472:	d91a      	bls.n	801a4aa <HAL_PCD_EP_DB_Transmit+0x706>
 801a474:	18bb      	adds	r3, r7, r2
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	095b      	lsrs	r3, r3, #5
 801a47a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a47c:	18bb      	adds	r3, r7, r2
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	221f      	movs	r2, #31
 801a482:	4013      	ands	r3, r2
 801a484:	d102      	bne.n	801a48c <HAL_PCD_EP_DB_Transmit+0x6e8>
 801a486:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a488:	3b01      	subs	r3, #1
 801a48a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a48c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a48e:	881b      	ldrh	r3, [r3, #0]
 801a490:	b29a      	uxth	r2, r3
 801a492:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a494:	b29b      	uxth	r3, r3
 801a496:	029b      	lsls	r3, r3, #10
 801a498:	b29b      	uxth	r3, r3
 801a49a:	4313      	orrs	r3, r2
 801a49c:	b29b      	uxth	r3, r3
 801a49e:	4a0c      	ldr	r2, [pc, #48]	@ (801a4d0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a4a0:	4313      	orrs	r3, r2
 801a4a2:	b29a      	uxth	r2, r3
 801a4a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a4a6:	801a      	strh	r2, [r3, #0]
 801a4a8:	e04d      	b.n	801a546 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a4aa:	238c      	movs	r3, #140	@ 0x8c
 801a4ac:	18fb      	adds	r3, r7, r3
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d113      	bne.n	801a4dc <HAL_PCD_EP_DB_Transmit+0x738>
 801a4b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a4b6:	881b      	ldrh	r3, [r3, #0]
 801a4b8:	b29b      	uxth	r3, r3
 801a4ba:	4a05      	ldr	r2, [pc, #20]	@ (801a4d0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a4bc:	4313      	orrs	r3, r2
 801a4be:	b29a      	uxth	r2, r3
 801a4c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a4c2:	801a      	strh	r2, [r3, #0]
 801a4c4:	e03f      	b.n	801a546 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a4c6:	46c0      	nop			@ (mov r8, r8)
 801a4c8:	00000402 	.word	0x00000402
 801a4cc:	00000406 	.word	0x00000406
 801a4d0:	ffff8000 	.word	0xffff8000
 801a4d4:	ffff8f8f 	.word	0xffff8f8f
 801a4d8:	ffffc080 	.word	0xffffc080
 801a4dc:	228c      	movs	r2, #140	@ 0x8c
 801a4de:	18bb      	adds	r3, r7, r2
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	085b      	lsrs	r3, r3, #1
 801a4e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a4e6:	18bb      	adds	r3, r7, r2
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	2201      	movs	r2, #1
 801a4ec:	4013      	ands	r3, r2
 801a4ee:	d002      	beq.n	801a4f6 <HAL_PCD_EP_DB_Transmit+0x752>
 801a4f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a4f2:	3301      	adds	r3, #1
 801a4f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a4f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a4f8:	881b      	ldrh	r3, [r3, #0]
 801a4fa:	b29a      	uxth	r2, r3
 801a4fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a4fe:	b29b      	uxth	r3, r3
 801a500:	029b      	lsls	r3, r3, #10
 801a502:	b29b      	uxth	r3, r3
 801a504:	4313      	orrs	r3, r2
 801a506:	b29a      	uxth	r2, r3
 801a508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a50a:	801a      	strh	r2, [r3, #0]
 801a50c:	e01b      	b.n	801a546 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a50e:	68bb      	ldr	r3, [r7, #8]
 801a510:	785b      	ldrb	r3, [r3, #1]
 801a512:	2b01      	cmp	r3, #1
 801a514:	d117      	bne.n	801a546 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	2250      	movs	r2, #80	@ 0x50
 801a51c:	5a9b      	ldrh	r3, [r3, r2]
 801a51e:	b29b      	uxth	r3, r3
 801a520:	001a      	movs	r2, r3
 801a522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a524:	189b      	adds	r3, r3, r2
 801a526:	657b      	str	r3, [r7, #84]	@ 0x54
 801a528:	68bb      	ldr	r3, [r7, #8]
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	00da      	lsls	r2, r3, #3
 801a52e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a530:	18d3      	adds	r3, r2, r3
 801a532:	4a21      	ldr	r2, [pc, #132]	@ (801a5b8 <HAL_PCD_EP_DB_Transmit+0x814>)
 801a534:	4694      	mov	ip, r2
 801a536:	4463      	add	r3, ip
 801a538:	653b      	str	r3, [r7, #80]	@ 0x50
 801a53a:	238c      	movs	r3, #140	@ 0x8c
 801a53c:	18fb      	adds	r3, r7, r3
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	b29a      	uxth	r2, r3
 801a542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a544:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	6818      	ldr	r0, [r3, #0]
 801a54a:	68bb      	ldr	r3, [r7, #8]
 801a54c:	6959      	ldr	r1, [r3, #20]
 801a54e:	68bb      	ldr	r3, [r7, #8]
 801a550:	895a      	ldrh	r2, [r3, #10]
 801a552:	238c      	movs	r3, #140	@ 0x8c
 801a554:	18fb      	adds	r3, r7, r3
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	b29b      	uxth	r3, r3
 801a55a:	f006 f9b7 	bl	80208cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	001a      	movs	r2, r3
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	781b      	ldrb	r3, [r3, #0]
 801a568:	009b      	lsls	r3, r3, #2
 801a56a:	18d3      	adds	r3, r2, r3
 801a56c:	881b      	ldrh	r3, [r3, #0]
 801a56e:	b29a      	uxth	r2, r3
 801a570:	2014      	movs	r0, #20
 801a572:	183b      	adds	r3, r7, r0
 801a574:	4911      	ldr	r1, [pc, #68]	@ (801a5bc <HAL_PCD_EP_DB_Transmit+0x818>)
 801a576:	400a      	ands	r2, r1
 801a578:	801a      	strh	r2, [r3, #0]
 801a57a:	183b      	adds	r3, r7, r0
 801a57c:	183a      	adds	r2, r7, r0
 801a57e:	8812      	ldrh	r2, [r2, #0]
 801a580:	2110      	movs	r1, #16
 801a582:	404a      	eors	r2, r1
 801a584:	801a      	strh	r2, [r3, #0]
 801a586:	183b      	adds	r3, r7, r0
 801a588:	183a      	adds	r2, r7, r0
 801a58a:	8812      	ldrh	r2, [r2, #0]
 801a58c:	2120      	movs	r1, #32
 801a58e:	404a      	eors	r2, r1
 801a590:	801a      	strh	r2, [r3, #0]
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	001a      	movs	r2, r3
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	781b      	ldrb	r3, [r3, #0]
 801a59c:	009b      	lsls	r3, r3, #2
 801a59e:	18d3      	adds	r3, r2, r3
 801a5a0:	183a      	adds	r2, r7, r0
 801a5a2:	8812      	ldrh	r2, [r2, #0]
 801a5a4:	4906      	ldr	r1, [pc, #24]	@ (801a5c0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801a5a6:	430a      	orrs	r2, r1
 801a5a8:	b292      	uxth	r2, r2
 801a5aa:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801a5ac:	2300      	movs	r3, #0
}
 801a5ae:	0018      	movs	r0, r3
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	b024      	add	sp, #144	@ 0x90
 801a5b4:	bd80      	pop	{r7, pc}
 801a5b6:	46c0      	nop			@ (mov r8, r8)
 801a5b8:	00000406 	.word	0x00000406
 801a5bc:	ffff8fbf 	.word	0xffff8fbf
 801a5c0:	ffff8080 	.word	0xffff8080

0801a5c4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801a5c4:	b590      	push	{r4, r7, lr}
 801a5c6:	b087      	sub	sp, #28
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	60f8      	str	r0, [r7, #12]
 801a5cc:	0008      	movs	r0, r1
 801a5ce:	0011      	movs	r1, r2
 801a5d0:	607b      	str	r3, [r7, #4]
 801a5d2:	240a      	movs	r4, #10
 801a5d4:	193b      	adds	r3, r7, r4
 801a5d6:	1c02      	adds	r2, r0, #0
 801a5d8:	801a      	strh	r2, [r3, #0]
 801a5da:	2308      	movs	r3, #8
 801a5dc:	18fb      	adds	r3, r7, r3
 801a5de:	1c0a      	adds	r2, r1, #0
 801a5e0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801a5e2:	0021      	movs	r1, r4
 801a5e4:	187b      	adds	r3, r7, r1
 801a5e6:	881b      	ldrh	r3, [r3, #0]
 801a5e8:	2280      	movs	r2, #128	@ 0x80
 801a5ea:	4013      	ands	r3, r2
 801a5ec:	b29b      	uxth	r3, r3
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d00c      	beq.n	801a60c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a5f2:	187b      	adds	r3, r7, r1
 801a5f4:	881b      	ldrh	r3, [r3, #0]
 801a5f6:	2207      	movs	r2, #7
 801a5f8:	4013      	ands	r3, r2
 801a5fa:	1c5a      	adds	r2, r3, #1
 801a5fc:	0013      	movs	r3, r2
 801a5fe:	009b      	lsls	r3, r3, #2
 801a600:	189b      	adds	r3, r3, r2
 801a602:	00db      	lsls	r3, r3, #3
 801a604:	68fa      	ldr	r2, [r7, #12]
 801a606:	18d3      	adds	r3, r2, r3
 801a608:	617b      	str	r3, [r7, #20]
 801a60a:	e00b      	b.n	801a624 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a60c:	230a      	movs	r3, #10
 801a60e:	18fb      	adds	r3, r7, r3
 801a610:	881a      	ldrh	r2, [r3, #0]
 801a612:	0013      	movs	r3, r2
 801a614:	009b      	lsls	r3, r3, #2
 801a616:	189b      	adds	r3, r3, r2
 801a618:	00db      	lsls	r3, r3, #3
 801a61a:	3369      	adds	r3, #105	@ 0x69
 801a61c:	33ff      	adds	r3, #255	@ 0xff
 801a61e:	68fa      	ldr	r2, [r7, #12]
 801a620:	18d3      	adds	r3, r2, r3
 801a622:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801a624:	2308      	movs	r3, #8
 801a626:	18fb      	adds	r3, r7, r3
 801a628:	881b      	ldrh	r3, [r3, #0]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d107      	bne.n	801a63e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801a62e:	697b      	ldr	r3, [r7, #20]
 801a630:	2200      	movs	r2, #0
 801a632:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	b29a      	uxth	r2, r3
 801a638:	697b      	ldr	r3, [r7, #20]
 801a63a:	80da      	strh	r2, [r3, #6]
 801a63c:	e00b      	b.n	801a656 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	2201      	movs	r2, #1
 801a642:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	b29a      	uxth	r2, r3
 801a648:	697b      	ldr	r3, [r7, #20]
 801a64a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	0c1b      	lsrs	r3, r3, #16
 801a650:	b29a      	uxth	r2, r3
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801a656:	2300      	movs	r3, #0
}
 801a658:	0018      	movs	r0, r3
 801a65a:	46bd      	mov	sp, r7
 801a65c:	b007      	add	sp, #28
 801a65e:	bd90      	pop	{r4, r7, pc}

0801a660 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b084      	sub	sp, #16
 801a664:	af00      	add	r7, sp, #0
 801a666:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801a66e:	687a      	ldr	r2, [r7, #4]
 801a670:	23ba      	movs	r3, #186	@ 0xba
 801a672:	009b      	lsls	r3, r3, #2
 801a674:	2101      	movs	r1, #1
 801a676:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801a678:	687a      	ldr	r2, [r7, #4]
 801a67a:	23b8      	movs	r3, #184	@ 0xb8
 801a67c:	009b      	lsls	r3, r3, #2
 801a67e:	2100      	movs	r1, #0
 801a680:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	2254      	movs	r2, #84	@ 0x54
 801a686:	5a9b      	ldrh	r3, [r3, r2]
 801a688:	b29b      	uxth	r3, r3
 801a68a:	2201      	movs	r2, #1
 801a68c:	4313      	orrs	r3, r2
 801a68e:	b299      	uxth	r1, r3
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	2254      	movs	r2, #84	@ 0x54
 801a694:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	2254      	movs	r2, #84	@ 0x54
 801a69a:	5a9b      	ldrh	r3, [r3, r2]
 801a69c:	b29b      	uxth	r3, r3
 801a69e:	2202      	movs	r2, #2
 801a6a0:	4313      	orrs	r3, r2
 801a6a2:	b299      	uxth	r1, r3
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	2254      	movs	r2, #84	@ 0x54
 801a6a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a6aa:	2300      	movs	r3, #0
}
 801a6ac:	0018      	movs	r0, r3
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	b004      	add	sp, #16
 801a6b2:	bd80      	pop	{r7, pc}

0801a6b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b082      	sub	sp, #8
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	6078      	str	r0, [r7, #4]
 801a6bc:	000a      	movs	r2, r1
 801a6be:	1cfb      	adds	r3, r7, #3
 801a6c0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801a6c2:	46c0      	nop			@ (mov r8, r8)
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	b002      	add	sp, #8
 801a6c8:	bd80      	pop	{r7, pc}
	...

0801a6cc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801a6d0:	4b04      	ldr	r3, [pc, #16]	@ (801a6e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 801a6d2:	681a      	ldr	r2, [r3, #0]
 801a6d4:	4b03      	ldr	r3, [pc, #12]	@ (801a6e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 801a6d6:	2180      	movs	r1, #128	@ 0x80
 801a6d8:	0049      	lsls	r1, r1, #1
 801a6da:	430a      	orrs	r2, r1
 801a6dc:	601a      	str	r2, [r3, #0]
}
 801a6de:	46c0      	nop			@ (mov r8, r8)
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}
 801a6e4:	40007000 	.word	0x40007000

0801a6e8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801a6ec:	4b04      	ldr	r3, [pc, #16]	@ (801a700 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a6ee:	681a      	ldr	r2, [r3, #0]
 801a6f0:	4b03      	ldr	r3, [pc, #12]	@ (801a700 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a6f2:	4904      	ldr	r1, [pc, #16]	@ (801a704 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801a6f4:	400a      	ands	r2, r1
 801a6f6:	601a      	str	r2, [r3, #0]
}
 801a6f8:	46c0      	nop			@ (mov r8, r8)
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	bd80      	pop	{r7, pc}
 801a6fe:	46c0      	nop			@ (mov r8, r8)
 801a700:	40007000 	.word	0x40007000
 801a704:	fffffeff 	.word	0xfffffeff

0801a708 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b086      	sub	sp, #24
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	6078      	str	r0, [r7, #4]
 801a710:	000a      	movs	r2, r1
 801a712:	1cfb      	adds	r3, r7, #3
 801a714:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801a716:	2300      	movs	r3, #0
 801a718:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801a71a:	4b25      	ldr	r3, [pc, #148]	@ (801a7b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a71c:	681a      	ldr	r2, [r3, #0]
 801a71e:	2380      	movs	r3, #128	@ 0x80
 801a720:	009b      	lsls	r3, r3, #2
 801a722:	4013      	ands	r3, r2
 801a724:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801a726:	4b23      	ldr	r3, [pc, #140]	@ (801a7b4 <HAL_PWR_EnterSTOPMode+0xac>)
 801a728:	6a1b      	ldr	r3, [r3, #32]
 801a72a:	2201      	movs	r2, #1
 801a72c:	4013      	ands	r3, r2
 801a72e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801a730:	693b      	ldr	r3, [r7, #16]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d008      	beq.n	801a748 <HAL_PWR_EnterSTOPMode+0x40>
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d005      	beq.n	801a748 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801a73c:	4b1c      	ldr	r3, [pc, #112]	@ (801a7b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a73e:	681a      	ldr	r2, [r3, #0]
 801a740:	4b1b      	ldr	r3, [pc, #108]	@ (801a7b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a742:	491d      	ldr	r1, [pc, #116]	@ (801a7b8 <HAL_PWR_EnterSTOPMode+0xb0>)
 801a744:	400a      	ands	r2, r1
 801a746:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801a748:	4b19      	ldr	r3, [pc, #100]	@ (801a7b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801a74e:	697b      	ldr	r3, [r7, #20]
 801a750:	2203      	movs	r2, #3
 801a752:	4393      	bics	r3, r2
 801a754:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801a756:	697a      	ldr	r2, [r7, #20]
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	4313      	orrs	r3, r2
 801a75c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801a75e:	4b14      	ldr	r3, [pc, #80]	@ (801a7b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a760:	697a      	ldr	r2, [r7, #20]
 801a762:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a764:	4b15      	ldr	r3, [pc, #84]	@ (801a7bc <HAL_PWR_EnterSTOPMode+0xb4>)
 801a766:	691a      	ldr	r2, [r3, #16]
 801a768:	4b14      	ldr	r3, [pc, #80]	@ (801a7bc <HAL_PWR_EnterSTOPMode+0xb4>)
 801a76a:	2104      	movs	r1, #4
 801a76c:	430a      	orrs	r2, r1
 801a76e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801a770:	1cfb      	adds	r3, r7, #3
 801a772:	781b      	ldrb	r3, [r3, #0]
 801a774:	2b01      	cmp	r3, #1
 801a776:	d101      	bne.n	801a77c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801a778:	bf30      	wfi
 801a77a:	e002      	b.n	801a782 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801a77c:	bf40      	sev
    __WFE();
 801a77e:	bf20      	wfe
    __WFE();
 801a780:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a782:	4b0e      	ldr	r3, [pc, #56]	@ (801a7bc <HAL_PWR_EnterSTOPMode+0xb4>)
 801a784:	691a      	ldr	r2, [r3, #16]
 801a786:	4b0d      	ldr	r3, [pc, #52]	@ (801a7bc <HAL_PWR_EnterSTOPMode+0xb4>)
 801a788:	2104      	movs	r1, #4
 801a78a:	438a      	bics	r2, r1
 801a78c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801a78e:	693b      	ldr	r3, [r7, #16]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d009      	beq.n	801a7a8 <HAL_PWR_EnterSTOPMode+0xa0>
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d006      	beq.n	801a7a8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801a79a:	4b05      	ldr	r3, [pc, #20]	@ (801a7b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a79c:	681a      	ldr	r2, [r3, #0]
 801a79e:	4b04      	ldr	r3, [pc, #16]	@ (801a7b0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a7a0:	2180      	movs	r1, #128	@ 0x80
 801a7a2:	0089      	lsls	r1, r1, #2
 801a7a4:	430a      	orrs	r2, r1
 801a7a6:	601a      	str	r2, [r3, #0]
  }
}
 801a7a8:	46c0      	nop			@ (mov r8, r8)
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	b006      	add	sp, #24
 801a7ae:	bd80      	pop	{r7, pc}
 801a7b0:	40007000 	.word	0x40007000
 801a7b4:	40010000 	.word	0x40010000
 801a7b8:	fffffdff 	.word	0xfffffdff
 801a7bc:	e000ed00 	.word	0xe000ed00

0801a7c0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801a7c0:	b580      	push	{r7, lr}
 801a7c2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801a7c4:	4b07      	ldr	r3, [pc, #28]	@ (801a7e4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a7c6:	681a      	ldr	r2, [r3, #0]
 801a7c8:	4b06      	ldr	r3, [pc, #24]	@ (801a7e4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a7ca:	2102      	movs	r1, #2
 801a7cc:	430a      	orrs	r2, r1
 801a7ce:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a7d0:	4b05      	ldr	r3, [pc, #20]	@ (801a7e8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a7d2:	691a      	ldr	r2, [r3, #16]
 801a7d4:	4b04      	ldr	r3, [pc, #16]	@ (801a7e8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a7d6:	2104      	movs	r1, #4
 801a7d8:	430a      	orrs	r2, r1
 801a7da:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801a7dc:	bf30      	wfi
}
 801a7de:	46c0      	nop			@ (mov r8, r8)
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bd80      	pop	{r7, pc}
 801a7e4:	40007000 	.word	0x40007000
 801a7e8:	e000ed00 	.word	0xe000ed00

0801a7ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a7ec:	b5b0      	push	{r4, r5, r7, lr}
 801a7ee:	b08a      	sub	sp, #40	@ 0x28
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d102      	bne.n	801a800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801a7fa:	2301      	movs	r3, #1
 801a7fc:	f000 fbbf 	bl	801af7e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a800:	4bc9      	ldr	r3, [pc, #804]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a802:	68db      	ldr	r3, [r3, #12]
 801a804:	220c      	movs	r2, #12
 801a806:	4013      	ands	r3, r2
 801a808:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a80a:	4bc7      	ldr	r3, [pc, #796]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a80c:	68da      	ldr	r2, [r3, #12]
 801a80e:	2380      	movs	r3, #128	@ 0x80
 801a810:	025b      	lsls	r3, r3, #9
 801a812:	4013      	ands	r3, r2
 801a814:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	2201      	movs	r2, #1
 801a81c:	4013      	ands	r3, r2
 801a81e:	d100      	bne.n	801a822 <HAL_RCC_OscConfig+0x36>
 801a820:	e07e      	b.n	801a920 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801a822:	69fb      	ldr	r3, [r7, #28]
 801a824:	2b08      	cmp	r3, #8
 801a826:	d007      	beq.n	801a838 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801a828:	69fb      	ldr	r3, [r7, #28]
 801a82a:	2b0c      	cmp	r3, #12
 801a82c:	d112      	bne.n	801a854 <HAL_RCC_OscConfig+0x68>
 801a82e:	69ba      	ldr	r2, [r7, #24]
 801a830:	2380      	movs	r3, #128	@ 0x80
 801a832:	025b      	lsls	r3, r3, #9
 801a834:	429a      	cmp	r2, r3
 801a836:	d10d      	bne.n	801a854 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a838:	4bbb      	ldr	r3, [pc, #748]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a83a:	681a      	ldr	r2, [r3, #0]
 801a83c:	2380      	movs	r3, #128	@ 0x80
 801a83e:	029b      	lsls	r3, r3, #10
 801a840:	4013      	ands	r3, r2
 801a842:	d100      	bne.n	801a846 <HAL_RCC_OscConfig+0x5a>
 801a844:	e06b      	b.n	801a91e <HAL_RCC_OscConfig+0x132>
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	685b      	ldr	r3, [r3, #4]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d167      	bne.n	801a91e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801a84e:	2301      	movs	r3, #1
 801a850:	f000 fb95 	bl	801af7e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	685a      	ldr	r2, [r3, #4]
 801a858:	2380      	movs	r3, #128	@ 0x80
 801a85a:	025b      	lsls	r3, r3, #9
 801a85c:	429a      	cmp	r2, r3
 801a85e:	d107      	bne.n	801a870 <HAL_RCC_OscConfig+0x84>
 801a860:	4bb1      	ldr	r3, [pc, #708]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a862:	681a      	ldr	r2, [r3, #0]
 801a864:	4bb0      	ldr	r3, [pc, #704]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a866:	2180      	movs	r1, #128	@ 0x80
 801a868:	0249      	lsls	r1, r1, #9
 801a86a:	430a      	orrs	r2, r1
 801a86c:	601a      	str	r2, [r3, #0]
 801a86e:	e027      	b.n	801a8c0 <HAL_RCC_OscConfig+0xd4>
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	685a      	ldr	r2, [r3, #4]
 801a874:	23a0      	movs	r3, #160	@ 0xa0
 801a876:	02db      	lsls	r3, r3, #11
 801a878:	429a      	cmp	r2, r3
 801a87a:	d10e      	bne.n	801a89a <HAL_RCC_OscConfig+0xae>
 801a87c:	4baa      	ldr	r3, [pc, #680]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a87e:	681a      	ldr	r2, [r3, #0]
 801a880:	4ba9      	ldr	r3, [pc, #676]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a882:	2180      	movs	r1, #128	@ 0x80
 801a884:	02c9      	lsls	r1, r1, #11
 801a886:	430a      	orrs	r2, r1
 801a888:	601a      	str	r2, [r3, #0]
 801a88a:	4ba7      	ldr	r3, [pc, #668]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a88c:	681a      	ldr	r2, [r3, #0]
 801a88e:	4ba6      	ldr	r3, [pc, #664]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a890:	2180      	movs	r1, #128	@ 0x80
 801a892:	0249      	lsls	r1, r1, #9
 801a894:	430a      	orrs	r2, r1
 801a896:	601a      	str	r2, [r3, #0]
 801a898:	e012      	b.n	801a8c0 <HAL_RCC_OscConfig+0xd4>
 801a89a:	4ba3      	ldr	r3, [pc, #652]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a89c:	681a      	ldr	r2, [r3, #0]
 801a89e:	4ba2      	ldr	r3, [pc, #648]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a8a0:	49a2      	ldr	r1, [pc, #648]	@ (801ab2c <HAL_RCC_OscConfig+0x340>)
 801a8a2:	400a      	ands	r2, r1
 801a8a4:	601a      	str	r2, [r3, #0]
 801a8a6:	4ba0      	ldr	r3, [pc, #640]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a8a8:	681a      	ldr	r2, [r3, #0]
 801a8aa:	2380      	movs	r3, #128	@ 0x80
 801a8ac:	025b      	lsls	r3, r3, #9
 801a8ae:	4013      	ands	r3, r2
 801a8b0:	60fb      	str	r3, [r7, #12]
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	4b9c      	ldr	r3, [pc, #624]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a8b6:	681a      	ldr	r2, [r3, #0]
 801a8b8:	4b9b      	ldr	r3, [pc, #620]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a8ba:	499d      	ldr	r1, [pc, #628]	@ (801ab30 <HAL_RCC_OscConfig+0x344>)
 801a8bc:	400a      	ands	r2, r1
 801a8be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	685b      	ldr	r3, [r3, #4]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d015      	beq.n	801a8f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a8c8:	f7f9 fb54 	bl	8013f74 <HAL_GetTick>
 801a8cc:	0003      	movs	r3, r0
 801a8ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a8d0:	e009      	b.n	801a8e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a8d2:	f7f9 fb4f 	bl	8013f74 <HAL_GetTick>
 801a8d6:	0002      	movs	r2, r0
 801a8d8:	697b      	ldr	r3, [r7, #20]
 801a8da:	1ad3      	subs	r3, r2, r3
 801a8dc:	2b64      	cmp	r3, #100	@ 0x64
 801a8de:	d902      	bls.n	801a8e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a8e0:	2303      	movs	r3, #3
 801a8e2:	f000 fb4c 	bl	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a8e6:	4b90      	ldr	r3, [pc, #576]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a8e8:	681a      	ldr	r2, [r3, #0]
 801a8ea:	2380      	movs	r3, #128	@ 0x80
 801a8ec:	029b      	lsls	r3, r3, #10
 801a8ee:	4013      	ands	r3, r2
 801a8f0:	d0ef      	beq.n	801a8d2 <HAL_RCC_OscConfig+0xe6>
 801a8f2:	e015      	b.n	801a920 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a8f4:	f7f9 fb3e 	bl	8013f74 <HAL_GetTick>
 801a8f8:	0003      	movs	r3, r0
 801a8fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a8fc:	e008      	b.n	801a910 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a8fe:	f7f9 fb39 	bl	8013f74 <HAL_GetTick>
 801a902:	0002      	movs	r2, r0
 801a904:	697b      	ldr	r3, [r7, #20]
 801a906:	1ad3      	subs	r3, r2, r3
 801a908:	2b64      	cmp	r3, #100	@ 0x64
 801a90a:	d901      	bls.n	801a910 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801a90c:	2303      	movs	r3, #3
 801a90e:	e336      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a910:	4b85      	ldr	r3, [pc, #532]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a912:	681a      	ldr	r2, [r3, #0]
 801a914:	2380      	movs	r3, #128	@ 0x80
 801a916:	029b      	lsls	r3, r3, #10
 801a918:	4013      	ands	r3, r2
 801a91a:	d1f0      	bne.n	801a8fe <HAL_RCC_OscConfig+0x112>
 801a91c:	e000      	b.n	801a920 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a91e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	2202      	movs	r2, #2
 801a926:	4013      	ands	r3, r2
 801a928:	d100      	bne.n	801a92c <HAL_RCC_OscConfig+0x140>
 801a92a:	e099      	b.n	801aa60 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	68db      	ldr	r3, [r3, #12]
 801a930:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a934:	2220      	movs	r2, #32
 801a936:	4013      	ands	r3, r2
 801a938:	d009      	beq.n	801a94e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801a93a:	4b7b      	ldr	r3, [pc, #492]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	4b7a      	ldr	r3, [pc, #488]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a940:	2120      	movs	r1, #32
 801a942:	430a      	orrs	r2, r1
 801a944:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a948:	2220      	movs	r2, #32
 801a94a:	4393      	bics	r3, r2
 801a94c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801a94e:	69fb      	ldr	r3, [r7, #28]
 801a950:	2b04      	cmp	r3, #4
 801a952:	d005      	beq.n	801a960 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801a954:	69fb      	ldr	r3, [r7, #28]
 801a956:	2b0c      	cmp	r3, #12
 801a958:	d13e      	bne.n	801a9d8 <HAL_RCC_OscConfig+0x1ec>
 801a95a:	69bb      	ldr	r3, [r7, #24]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d13b      	bne.n	801a9d8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801a960:	4b71      	ldr	r3, [pc, #452]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	2204      	movs	r2, #4
 801a966:	4013      	ands	r3, r2
 801a968:	d004      	beq.n	801a974 <HAL_RCC_OscConfig+0x188>
 801a96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d101      	bne.n	801a974 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801a970:	2301      	movs	r3, #1
 801a972:	e304      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a974:	4b6c      	ldr	r3, [pc, #432]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a976:	685b      	ldr	r3, [r3, #4]
 801a978:	4a6e      	ldr	r2, [pc, #440]	@ (801ab34 <HAL_RCC_OscConfig+0x348>)
 801a97a:	4013      	ands	r3, r2
 801a97c:	0019      	movs	r1, r3
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	691b      	ldr	r3, [r3, #16]
 801a982:	021a      	lsls	r2, r3, #8
 801a984:	4b68      	ldr	r3, [pc, #416]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a986:	430a      	orrs	r2, r1
 801a988:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a98a:	4b67      	ldr	r3, [pc, #412]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	2209      	movs	r2, #9
 801a990:	4393      	bics	r3, r2
 801a992:	0019      	movs	r1, r3
 801a994:	4b64      	ldr	r3, [pc, #400]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a998:	430a      	orrs	r2, r1
 801a99a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a99c:	f000 fc42 	bl	801b224 <HAL_RCC_GetSysClockFreq>
 801a9a0:	0001      	movs	r1, r0
 801a9a2:	4b61      	ldr	r3, [pc, #388]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a9a4:	68db      	ldr	r3, [r3, #12]
 801a9a6:	091b      	lsrs	r3, r3, #4
 801a9a8:	220f      	movs	r2, #15
 801a9aa:	4013      	ands	r3, r2
 801a9ac:	4a62      	ldr	r2, [pc, #392]	@ (801ab38 <HAL_RCC_OscConfig+0x34c>)
 801a9ae:	5cd3      	ldrb	r3, [r2, r3]
 801a9b0:	000a      	movs	r2, r1
 801a9b2:	40da      	lsrs	r2, r3
 801a9b4:	4b61      	ldr	r3, [pc, #388]	@ (801ab3c <HAL_RCC_OscConfig+0x350>)
 801a9b6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801a9b8:	4b61      	ldr	r3, [pc, #388]	@ (801ab40 <HAL_RCC_OscConfig+0x354>)
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	2513      	movs	r5, #19
 801a9be:	197c      	adds	r4, r7, r5
 801a9c0:	0018      	movs	r0, r3
 801a9c2:	f7f9 fa91 	bl	8013ee8 <HAL_InitTick>
 801a9c6:	0003      	movs	r3, r0
 801a9c8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801a9ca:	197b      	adds	r3, r7, r5
 801a9cc:	781b      	ldrb	r3, [r3, #0]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d046      	beq.n	801aa60 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801a9d2:	197b      	adds	r3, r7, r5
 801a9d4:	781b      	ldrb	r3, [r3, #0]
 801a9d6:	e2d2      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801a9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d027      	beq.n	801aa2e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a9de:	4b52      	ldr	r3, [pc, #328]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	2209      	movs	r2, #9
 801a9e4:	4393      	bics	r3, r2
 801a9e6:	0019      	movs	r1, r3
 801a9e8:	4b4f      	ldr	r3, [pc, #316]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801a9ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a9ec:	430a      	orrs	r2, r1
 801a9ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a9f0:	f7f9 fac0 	bl	8013f74 <HAL_GetTick>
 801a9f4:	0003      	movs	r3, r0
 801a9f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a9f8:	e008      	b.n	801aa0c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a9fa:	f7f9 fabb 	bl	8013f74 <HAL_GetTick>
 801a9fe:	0002      	movs	r2, r0
 801aa00:	697b      	ldr	r3, [r7, #20]
 801aa02:	1ad3      	subs	r3, r2, r3
 801aa04:	2b02      	cmp	r3, #2
 801aa06:	d901      	bls.n	801aa0c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801aa08:	2303      	movs	r3, #3
 801aa0a:	e2b8      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801aa0c:	4b46      	ldr	r3, [pc, #280]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	2204      	movs	r2, #4
 801aa12:	4013      	ands	r3, r2
 801aa14:	d0f1      	beq.n	801a9fa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aa16:	4b44      	ldr	r3, [pc, #272]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa18:	685b      	ldr	r3, [r3, #4]
 801aa1a:	4a46      	ldr	r2, [pc, #280]	@ (801ab34 <HAL_RCC_OscConfig+0x348>)
 801aa1c:	4013      	ands	r3, r2
 801aa1e:	0019      	movs	r1, r3
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	691b      	ldr	r3, [r3, #16]
 801aa24:	021a      	lsls	r2, r3, #8
 801aa26:	4b40      	ldr	r3, [pc, #256]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa28:	430a      	orrs	r2, r1
 801aa2a:	605a      	str	r2, [r3, #4]
 801aa2c:	e018      	b.n	801aa60 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801aa2e:	4b3e      	ldr	r3, [pc, #248]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa30:	681a      	ldr	r2, [r3, #0]
 801aa32:	4b3d      	ldr	r3, [pc, #244]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa34:	2101      	movs	r1, #1
 801aa36:	438a      	bics	r2, r1
 801aa38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aa3a:	f7f9 fa9b 	bl	8013f74 <HAL_GetTick>
 801aa3e:	0003      	movs	r3, r0
 801aa40:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801aa42:	e008      	b.n	801aa56 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801aa44:	f7f9 fa96 	bl	8013f74 <HAL_GetTick>
 801aa48:	0002      	movs	r2, r0
 801aa4a:	697b      	ldr	r3, [r7, #20]
 801aa4c:	1ad3      	subs	r3, r2, r3
 801aa4e:	2b02      	cmp	r3, #2
 801aa50:	d901      	bls.n	801aa56 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801aa52:	2303      	movs	r3, #3
 801aa54:	e293      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801aa56:	4b34      	ldr	r3, [pc, #208]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	2204      	movs	r2, #4
 801aa5c:	4013      	ands	r3, r2
 801aa5e:	d1f1      	bne.n	801aa44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	2210      	movs	r2, #16
 801aa66:	4013      	ands	r3, r2
 801aa68:	d100      	bne.n	801aa6c <HAL_RCC_OscConfig+0x280>
 801aa6a:	e0a2      	b.n	801abb2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801aa6c:	69fb      	ldr	r3, [r7, #28]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d140      	bne.n	801aaf4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801aa72:	4b2d      	ldr	r3, [pc, #180]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa74:	681a      	ldr	r2, [r3, #0]
 801aa76:	2380      	movs	r3, #128	@ 0x80
 801aa78:	009b      	lsls	r3, r3, #2
 801aa7a:	4013      	ands	r3, r2
 801aa7c:	d005      	beq.n	801aa8a <HAL_RCC_OscConfig+0x29e>
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	69db      	ldr	r3, [r3, #28]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d101      	bne.n	801aa8a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801aa86:	2301      	movs	r3, #1
 801aa88:	e279      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801aa8a:	4b27      	ldr	r3, [pc, #156]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa8c:	685b      	ldr	r3, [r3, #4]
 801aa8e:	4a2d      	ldr	r2, [pc, #180]	@ (801ab44 <HAL_RCC_OscConfig+0x358>)
 801aa90:	4013      	ands	r3, r2
 801aa92:	0019      	movs	r1, r3
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801aa98:	4b23      	ldr	r3, [pc, #140]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aa9a:	430a      	orrs	r2, r1
 801aa9c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801aa9e:	4b22      	ldr	r3, [pc, #136]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aaa0:	685b      	ldr	r3, [r3, #4]
 801aaa2:	021b      	lsls	r3, r3, #8
 801aaa4:	0a19      	lsrs	r1, r3, #8
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	6a1b      	ldr	r3, [r3, #32]
 801aaaa:	061a      	lsls	r2, r3, #24
 801aaac:	4b1e      	ldr	r3, [pc, #120]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aaae:	430a      	orrs	r2, r1
 801aab0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aab6:	0b5b      	lsrs	r3, r3, #13
 801aab8:	3301      	adds	r3, #1
 801aaba:	2280      	movs	r2, #128	@ 0x80
 801aabc:	0212      	lsls	r2, r2, #8
 801aabe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801aac0:	4b19      	ldr	r3, [pc, #100]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aac2:	68db      	ldr	r3, [r3, #12]
 801aac4:	091b      	lsrs	r3, r3, #4
 801aac6:	210f      	movs	r1, #15
 801aac8:	400b      	ands	r3, r1
 801aaca:	491b      	ldr	r1, [pc, #108]	@ (801ab38 <HAL_RCC_OscConfig+0x34c>)
 801aacc:	5ccb      	ldrb	r3, [r1, r3]
 801aace:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801aad0:	4b1a      	ldr	r3, [pc, #104]	@ (801ab3c <HAL_RCC_OscConfig+0x350>)
 801aad2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801aad4:	4b1a      	ldr	r3, [pc, #104]	@ (801ab40 <HAL_RCC_OscConfig+0x354>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	2513      	movs	r5, #19
 801aada:	197c      	adds	r4, r7, r5
 801aadc:	0018      	movs	r0, r3
 801aade:	f7f9 fa03 	bl	8013ee8 <HAL_InitTick>
 801aae2:	0003      	movs	r3, r0
 801aae4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801aae6:	197b      	adds	r3, r7, r5
 801aae8:	781b      	ldrb	r3, [r3, #0]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d061      	beq.n	801abb2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801aaee:	197b      	adds	r3, r7, r5
 801aaf0:	781b      	ldrb	r3, [r3, #0]
 801aaf2:	e244      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	69db      	ldr	r3, [r3, #28]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d040      	beq.n	801ab7e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801aafc:	4b0a      	ldr	r3, [pc, #40]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801aafe:	681a      	ldr	r2, [r3, #0]
 801ab00:	4b09      	ldr	r3, [pc, #36]	@ (801ab28 <HAL_RCC_OscConfig+0x33c>)
 801ab02:	2180      	movs	r1, #128	@ 0x80
 801ab04:	0049      	lsls	r1, r1, #1
 801ab06:	430a      	orrs	r2, r1
 801ab08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ab0a:	f7f9 fa33 	bl	8013f74 <HAL_GetTick>
 801ab0e:	0003      	movs	r3, r0
 801ab10:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801ab12:	e019      	b.n	801ab48 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801ab14:	f7f9 fa2e 	bl	8013f74 <HAL_GetTick>
 801ab18:	0002      	movs	r2, r0
 801ab1a:	697b      	ldr	r3, [r7, #20]
 801ab1c:	1ad3      	subs	r3, r2, r3
 801ab1e:	2b02      	cmp	r3, #2
 801ab20:	d912      	bls.n	801ab48 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801ab22:	2303      	movs	r3, #3
 801ab24:	e22b      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
 801ab26:	46c0      	nop			@ (mov r8, r8)
 801ab28:	40021000 	.word	0x40021000
 801ab2c:	fffeffff 	.word	0xfffeffff
 801ab30:	fffbffff 	.word	0xfffbffff
 801ab34:	ffffe0ff 	.word	0xffffe0ff
 801ab38:	0802e2e0 	.word	0x0802e2e0
 801ab3c:	200000e4 	.word	0x200000e4
 801ab40:	200000f4 	.word	0x200000f4
 801ab44:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801ab48:	4bca      	ldr	r3, [pc, #808]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ab4a:	681a      	ldr	r2, [r3, #0]
 801ab4c:	2380      	movs	r3, #128	@ 0x80
 801ab4e:	009b      	lsls	r3, r3, #2
 801ab50:	4013      	ands	r3, r2
 801ab52:	d0df      	beq.n	801ab14 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801ab54:	4bc7      	ldr	r3, [pc, #796]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ab56:	685b      	ldr	r3, [r3, #4]
 801ab58:	4ac7      	ldr	r2, [pc, #796]	@ (801ae78 <HAL_RCC_OscConfig+0x68c>)
 801ab5a:	4013      	ands	r3, r2
 801ab5c:	0019      	movs	r1, r3
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ab62:	4bc4      	ldr	r3, [pc, #784]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ab64:	430a      	orrs	r2, r1
 801ab66:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801ab68:	4bc2      	ldr	r3, [pc, #776]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ab6a:	685b      	ldr	r3, [r3, #4]
 801ab6c:	021b      	lsls	r3, r3, #8
 801ab6e:	0a19      	lsrs	r1, r3, #8
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	6a1b      	ldr	r3, [r3, #32]
 801ab74:	061a      	lsls	r2, r3, #24
 801ab76:	4bbf      	ldr	r3, [pc, #764]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ab78:	430a      	orrs	r2, r1
 801ab7a:	605a      	str	r2, [r3, #4]
 801ab7c:	e019      	b.n	801abb2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801ab7e:	4bbd      	ldr	r3, [pc, #756]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ab80:	681a      	ldr	r2, [r3, #0]
 801ab82:	4bbc      	ldr	r3, [pc, #752]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ab84:	49bd      	ldr	r1, [pc, #756]	@ (801ae7c <HAL_RCC_OscConfig+0x690>)
 801ab86:	400a      	ands	r2, r1
 801ab88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ab8a:	f7f9 f9f3 	bl	8013f74 <HAL_GetTick>
 801ab8e:	0003      	movs	r3, r0
 801ab90:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801ab92:	e008      	b.n	801aba6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801ab94:	f7f9 f9ee 	bl	8013f74 <HAL_GetTick>
 801ab98:	0002      	movs	r2, r0
 801ab9a:	697b      	ldr	r3, [r7, #20]
 801ab9c:	1ad3      	subs	r3, r2, r3
 801ab9e:	2b02      	cmp	r3, #2
 801aba0:	d901      	bls.n	801aba6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801aba2:	2303      	movs	r3, #3
 801aba4:	e1eb      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801aba6:	4bb3      	ldr	r3, [pc, #716]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801aba8:	681a      	ldr	r2, [r3, #0]
 801abaa:	2380      	movs	r3, #128	@ 0x80
 801abac:	009b      	lsls	r3, r3, #2
 801abae:	4013      	ands	r3, r2
 801abb0:	d1f0      	bne.n	801ab94 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	2208      	movs	r2, #8
 801abb8:	4013      	ands	r3, r2
 801abba:	d036      	beq.n	801ac2a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	695b      	ldr	r3, [r3, #20]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d019      	beq.n	801abf8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801abc4:	4bab      	ldr	r3, [pc, #684]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801abc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801abc8:	4baa      	ldr	r3, [pc, #680]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801abca:	2101      	movs	r1, #1
 801abcc:	430a      	orrs	r2, r1
 801abce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801abd0:	f7f9 f9d0 	bl	8013f74 <HAL_GetTick>
 801abd4:	0003      	movs	r3, r0
 801abd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801abd8:	e008      	b.n	801abec <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801abda:	f7f9 f9cb 	bl	8013f74 <HAL_GetTick>
 801abde:	0002      	movs	r2, r0
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	1ad3      	subs	r3, r2, r3
 801abe4:	2b02      	cmp	r3, #2
 801abe6:	d901      	bls.n	801abec <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801abe8:	2303      	movs	r3, #3
 801abea:	e1c8      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801abec:	4ba1      	ldr	r3, [pc, #644]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801abee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801abf0:	2202      	movs	r2, #2
 801abf2:	4013      	ands	r3, r2
 801abf4:	d0f1      	beq.n	801abda <HAL_RCC_OscConfig+0x3ee>
 801abf6:	e018      	b.n	801ac2a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801abf8:	4b9e      	ldr	r3, [pc, #632]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801abfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801abfc:	4b9d      	ldr	r3, [pc, #628]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801abfe:	2101      	movs	r1, #1
 801ac00:	438a      	bics	r2, r1
 801ac02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801ac04:	f7f9 f9b6 	bl	8013f74 <HAL_GetTick>
 801ac08:	0003      	movs	r3, r0
 801ac0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ac0c:	e008      	b.n	801ac20 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801ac0e:	f7f9 f9b1 	bl	8013f74 <HAL_GetTick>
 801ac12:	0002      	movs	r2, r0
 801ac14:	697b      	ldr	r3, [r7, #20]
 801ac16:	1ad3      	subs	r3, r2, r3
 801ac18:	2b02      	cmp	r3, #2
 801ac1a:	d901      	bls.n	801ac20 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801ac1c:	2303      	movs	r3, #3
 801ac1e:	e1ae      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ac20:	4b94      	ldr	r3, [pc, #592]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ac22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ac24:	2202      	movs	r2, #2
 801ac26:	4013      	ands	r3, r2
 801ac28:	d1f1      	bne.n	801ac0e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2204      	movs	r2, #4
 801ac30:	4013      	ands	r3, r2
 801ac32:	d100      	bne.n	801ac36 <HAL_RCC_OscConfig+0x44a>
 801ac34:	e0ae      	b.n	801ad94 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ac36:	2023      	movs	r0, #35	@ 0x23
 801ac38:	183b      	adds	r3, r7, r0
 801ac3a:	2200      	movs	r2, #0
 801ac3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ac3e:	4b8d      	ldr	r3, [pc, #564]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ac40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ac42:	2380      	movs	r3, #128	@ 0x80
 801ac44:	055b      	lsls	r3, r3, #21
 801ac46:	4013      	ands	r3, r2
 801ac48:	d109      	bne.n	801ac5e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ac4a:	4b8a      	ldr	r3, [pc, #552]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ac4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ac4e:	4b89      	ldr	r3, [pc, #548]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ac50:	2180      	movs	r1, #128	@ 0x80
 801ac52:	0549      	lsls	r1, r1, #21
 801ac54:	430a      	orrs	r2, r1
 801ac56:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801ac58:	183b      	adds	r3, r7, r0
 801ac5a:	2201      	movs	r2, #1
 801ac5c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ac5e:	4b88      	ldr	r3, [pc, #544]	@ (801ae80 <HAL_RCC_OscConfig+0x694>)
 801ac60:	681a      	ldr	r2, [r3, #0]
 801ac62:	2380      	movs	r3, #128	@ 0x80
 801ac64:	005b      	lsls	r3, r3, #1
 801ac66:	4013      	ands	r3, r2
 801ac68:	d11a      	bne.n	801aca0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801ac6a:	4b85      	ldr	r3, [pc, #532]	@ (801ae80 <HAL_RCC_OscConfig+0x694>)
 801ac6c:	681a      	ldr	r2, [r3, #0]
 801ac6e:	4b84      	ldr	r3, [pc, #528]	@ (801ae80 <HAL_RCC_OscConfig+0x694>)
 801ac70:	2180      	movs	r1, #128	@ 0x80
 801ac72:	0049      	lsls	r1, r1, #1
 801ac74:	430a      	orrs	r2, r1
 801ac76:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801ac78:	f7f9 f97c 	bl	8013f74 <HAL_GetTick>
 801ac7c:	0003      	movs	r3, r0
 801ac7e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ac80:	e008      	b.n	801ac94 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ac82:	f7f9 f977 	bl	8013f74 <HAL_GetTick>
 801ac86:	0002      	movs	r2, r0
 801ac88:	697b      	ldr	r3, [r7, #20]
 801ac8a:	1ad3      	subs	r3, r2, r3
 801ac8c:	2b64      	cmp	r3, #100	@ 0x64
 801ac8e:	d901      	bls.n	801ac94 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801ac90:	2303      	movs	r3, #3
 801ac92:	e174      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ac94:	4b7a      	ldr	r3, [pc, #488]	@ (801ae80 <HAL_RCC_OscConfig+0x694>)
 801ac96:	681a      	ldr	r2, [r3, #0]
 801ac98:	2380      	movs	r3, #128	@ 0x80
 801ac9a:	005b      	lsls	r3, r3, #1
 801ac9c:	4013      	ands	r3, r2
 801ac9e:	d0f0      	beq.n	801ac82 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	689a      	ldr	r2, [r3, #8]
 801aca4:	2380      	movs	r3, #128	@ 0x80
 801aca6:	005b      	lsls	r3, r3, #1
 801aca8:	429a      	cmp	r2, r3
 801acaa:	d107      	bne.n	801acbc <HAL_RCC_OscConfig+0x4d0>
 801acac:	4b71      	ldr	r3, [pc, #452]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801acb0:	4b70      	ldr	r3, [pc, #448]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acb2:	2180      	movs	r1, #128	@ 0x80
 801acb4:	0049      	lsls	r1, r1, #1
 801acb6:	430a      	orrs	r2, r1
 801acb8:	651a      	str	r2, [r3, #80]	@ 0x50
 801acba:	e031      	b.n	801ad20 <HAL_RCC_OscConfig+0x534>
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	689b      	ldr	r3, [r3, #8]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d10c      	bne.n	801acde <HAL_RCC_OscConfig+0x4f2>
 801acc4:	4b6b      	ldr	r3, [pc, #428]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801acc8:	4b6a      	ldr	r3, [pc, #424]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acca:	496c      	ldr	r1, [pc, #432]	@ (801ae7c <HAL_RCC_OscConfig+0x690>)
 801accc:	400a      	ands	r2, r1
 801acce:	651a      	str	r2, [r3, #80]	@ 0x50
 801acd0:	4b68      	ldr	r3, [pc, #416]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801acd4:	4b67      	ldr	r3, [pc, #412]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acd6:	496b      	ldr	r1, [pc, #428]	@ (801ae84 <HAL_RCC_OscConfig+0x698>)
 801acd8:	400a      	ands	r2, r1
 801acda:	651a      	str	r2, [r3, #80]	@ 0x50
 801acdc:	e020      	b.n	801ad20 <HAL_RCC_OscConfig+0x534>
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	689a      	ldr	r2, [r3, #8]
 801ace2:	23a0      	movs	r3, #160	@ 0xa0
 801ace4:	00db      	lsls	r3, r3, #3
 801ace6:	429a      	cmp	r2, r3
 801ace8:	d10e      	bne.n	801ad08 <HAL_RCC_OscConfig+0x51c>
 801acea:	4b62      	ldr	r3, [pc, #392]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801acee:	4b61      	ldr	r3, [pc, #388]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acf0:	2180      	movs	r1, #128	@ 0x80
 801acf2:	00c9      	lsls	r1, r1, #3
 801acf4:	430a      	orrs	r2, r1
 801acf6:	651a      	str	r2, [r3, #80]	@ 0x50
 801acf8:	4b5e      	ldr	r3, [pc, #376]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801acfc:	4b5d      	ldr	r3, [pc, #372]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801acfe:	2180      	movs	r1, #128	@ 0x80
 801ad00:	0049      	lsls	r1, r1, #1
 801ad02:	430a      	orrs	r2, r1
 801ad04:	651a      	str	r2, [r3, #80]	@ 0x50
 801ad06:	e00b      	b.n	801ad20 <HAL_RCC_OscConfig+0x534>
 801ad08:	4b5a      	ldr	r3, [pc, #360]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ad0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ad0c:	4b59      	ldr	r3, [pc, #356]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ad0e:	495b      	ldr	r1, [pc, #364]	@ (801ae7c <HAL_RCC_OscConfig+0x690>)
 801ad10:	400a      	ands	r2, r1
 801ad12:	651a      	str	r2, [r3, #80]	@ 0x50
 801ad14:	4b57      	ldr	r3, [pc, #348]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ad16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ad18:	4b56      	ldr	r3, [pc, #344]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ad1a:	495a      	ldr	r1, [pc, #360]	@ (801ae84 <HAL_RCC_OscConfig+0x698>)
 801ad1c:	400a      	ands	r2, r1
 801ad1e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	689b      	ldr	r3, [r3, #8]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d015      	beq.n	801ad54 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801ad28:	f7f9 f924 	bl	8013f74 <HAL_GetTick>
 801ad2c:	0003      	movs	r3, r0
 801ad2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ad30:	e009      	b.n	801ad46 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801ad32:	f7f9 f91f 	bl	8013f74 <HAL_GetTick>
 801ad36:	0002      	movs	r2, r0
 801ad38:	697b      	ldr	r3, [r7, #20]
 801ad3a:	1ad3      	subs	r3, r2, r3
 801ad3c:	4a52      	ldr	r2, [pc, #328]	@ (801ae88 <HAL_RCC_OscConfig+0x69c>)
 801ad3e:	4293      	cmp	r3, r2
 801ad40:	d901      	bls.n	801ad46 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801ad42:	2303      	movs	r3, #3
 801ad44:	e11b      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ad46:	4b4b      	ldr	r3, [pc, #300]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ad48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ad4a:	2380      	movs	r3, #128	@ 0x80
 801ad4c:	009b      	lsls	r3, r3, #2
 801ad4e:	4013      	ands	r3, r2
 801ad50:	d0ef      	beq.n	801ad32 <HAL_RCC_OscConfig+0x546>
 801ad52:	e014      	b.n	801ad7e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801ad54:	f7f9 f90e 	bl	8013f74 <HAL_GetTick>
 801ad58:	0003      	movs	r3, r0
 801ad5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ad5c:	e009      	b.n	801ad72 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801ad5e:	f7f9 f909 	bl	8013f74 <HAL_GetTick>
 801ad62:	0002      	movs	r2, r0
 801ad64:	697b      	ldr	r3, [r7, #20]
 801ad66:	1ad3      	subs	r3, r2, r3
 801ad68:	4a47      	ldr	r2, [pc, #284]	@ (801ae88 <HAL_RCC_OscConfig+0x69c>)
 801ad6a:	4293      	cmp	r3, r2
 801ad6c:	d901      	bls.n	801ad72 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801ad6e:	2303      	movs	r3, #3
 801ad70:	e105      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ad72:	4b40      	ldr	r3, [pc, #256]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ad74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ad76:	2380      	movs	r3, #128	@ 0x80
 801ad78:	009b      	lsls	r3, r3, #2
 801ad7a:	4013      	ands	r3, r2
 801ad7c:	d1ef      	bne.n	801ad5e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801ad7e:	2323      	movs	r3, #35	@ 0x23
 801ad80:	18fb      	adds	r3, r7, r3
 801ad82:	781b      	ldrb	r3, [r3, #0]
 801ad84:	2b01      	cmp	r3, #1
 801ad86:	d105      	bne.n	801ad94 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801ad88:	4b3a      	ldr	r3, [pc, #232]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ad8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ad8c:	4b39      	ldr	r3, [pc, #228]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ad8e:	493f      	ldr	r1, [pc, #252]	@ (801ae8c <HAL_RCC_OscConfig+0x6a0>)
 801ad90:	400a      	ands	r2, r1
 801ad92:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	2220      	movs	r2, #32
 801ad9a:	4013      	ands	r3, r2
 801ad9c:	d049      	beq.n	801ae32 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	699b      	ldr	r3, [r3, #24]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d026      	beq.n	801adf4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801ada6:	4b33      	ldr	r3, [pc, #204]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ada8:	689a      	ldr	r2, [r3, #8]
 801adaa:	4b32      	ldr	r3, [pc, #200]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801adac:	2101      	movs	r1, #1
 801adae:	430a      	orrs	r2, r1
 801adb0:	609a      	str	r2, [r3, #8]
 801adb2:	4b30      	ldr	r3, [pc, #192]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801adb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801adb6:	4b2f      	ldr	r3, [pc, #188]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801adb8:	2101      	movs	r1, #1
 801adba:	430a      	orrs	r2, r1
 801adbc:	635a      	str	r2, [r3, #52]	@ 0x34
 801adbe:	4b34      	ldr	r3, [pc, #208]	@ (801ae90 <HAL_RCC_OscConfig+0x6a4>)
 801adc0:	6a1a      	ldr	r2, [r3, #32]
 801adc2:	4b33      	ldr	r3, [pc, #204]	@ (801ae90 <HAL_RCC_OscConfig+0x6a4>)
 801adc4:	2180      	movs	r1, #128	@ 0x80
 801adc6:	0189      	lsls	r1, r1, #6
 801adc8:	430a      	orrs	r2, r1
 801adca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801adcc:	f7f9 f8d2 	bl	8013f74 <HAL_GetTick>
 801add0:	0003      	movs	r3, r0
 801add2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801add4:	e008      	b.n	801ade8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801add6:	f7f9 f8cd 	bl	8013f74 <HAL_GetTick>
 801adda:	0002      	movs	r2, r0
 801addc:	697b      	ldr	r3, [r7, #20]
 801adde:	1ad3      	subs	r3, r2, r3
 801ade0:	2b02      	cmp	r3, #2
 801ade2:	d901      	bls.n	801ade8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801ade4:	2303      	movs	r3, #3
 801ade6:	e0ca      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ade8:	4b22      	ldr	r3, [pc, #136]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801adea:	689b      	ldr	r3, [r3, #8]
 801adec:	2202      	movs	r2, #2
 801adee:	4013      	ands	r3, r2
 801adf0:	d0f1      	beq.n	801add6 <HAL_RCC_OscConfig+0x5ea>
 801adf2:	e01e      	b.n	801ae32 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801adf4:	4b1f      	ldr	r3, [pc, #124]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801adf6:	689a      	ldr	r2, [r3, #8]
 801adf8:	4b1e      	ldr	r3, [pc, #120]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801adfa:	2101      	movs	r1, #1
 801adfc:	438a      	bics	r2, r1
 801adfe:	609a      	str	r2, [r3, #8]
 801ae00:	4b23      	ldr	r3, [pc, #140]	@ (801ae90 <HAL_RCC_OscConfig+0x6a4>)
 801ae02:	6a1a      	ldr	r2, [r3, #32]
 801ae04:	4b22      	ldr	r3, [pc, #136]	@ (801ae90 <HAL_RCC_OscConfig+0x6a4>)
 801ae06:	4923      	ldr	r1, [pc, #140]	@ (801ae94 <HAL_RCC_OscConfig+0x6a8>)
 801ae08:	400a      	ands	r2, r1
 801ae0a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ae0c:	f7f9 f8b2 	bl	8013f74 <HAL_GetTick>
 801ae10:	0003      	movs	r3, r0
 801ae12:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ae14:	e008      	b.n	801ae28 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ae16:	f7f9 f8ad 	bl	8013f74 <HAL_GetTick>
 801ae1a:	0002      	movs	r2, r0
 801ae1c:	697b      	ldr	r3, [r7, #20]
 801ae1e:	1ad3      	subs	r3, r2, r3
 801ae20:	2b02      	cmp	r3, #2
 801ae22:	d901      	bls.n	801ae28 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801ae24:	2303      	movs	r3, #3
 801ae26:	e0aa      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ae28:	4b12      	ldr	r3, [pc, #72]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ae2a:	689b      	ldr	r3, [r3, #8]
 801ae2c:	2202      	movs	r2, #2
 801ae2e:	4013      	ands	r3, r2
 801ae30:	d1f1      	bne.n	801ae16 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d100      	bne.n	801ae3c <HAL_RCC_OscConfig+0x650>
 801ae3a:	e09f      	b.n	801af7c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ae3c:	69fb      	ldr	r3, [r7, #28]
 801ae3e:	2b0c      	cmp	r3, #12
 801ae40:	d100      	bne.n	801ae44 <HAL_RCC_OscConfig+0x658>
 801ae42:	e078      	b.n	801af36 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae48:	2b02      	cmp	r3, #2
 801ae4a:	d159      	bne.n	801af00 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ae4c:	4b09      	ldr	r3, [pc, #36]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ae4e:	681a      	ldr	r2, [r3, #0]
 801ae50:	4b08      	ldr	r3, [pc, #32]	@ (801ae74 <HAL_RCC_OscConfig+0x688>)
 801ae52:	4911      	ldr	r1, [pc, #68]	@ (801ae98 <HAL_RCC_OscConfig+0x6ac>)
 801ae54:	400a      	ands	r2, r1
 801ae56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ae58:	f7f9 f88c 	bl	8013f74 <HAL_GetTick>
 801ae5c:	0003      	movs	r3, r0
 801ae5e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ae60:	e01c      	b.n	801ae9c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ae62:	f7f9 f887 	bl	8013f74 <HAL_GetTick>
 801ae66:	0002      	movs	r2, r0
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	1ad3      	subs	r3, r2, r3
 801ae6c:	2b02      	cmp	r3, #2
 801ae6e:	d915      	bls.n	801ae9c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801ae70:	2303      	movs	r3, #3
 801ae72:	e084      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
 801ae74:	40021000 	.word	0x40021000
 801ae78:	ffff1fff 	.word	0xffff1fff
 801ae7c:	fffffeff 	.word	0xfffffeff
 801ae80:	40007000 	.word	0x40007000
 801ae84:	fffffbff 	.word	0xfffffbff
 801ae88:	00001388 	.word	0x00001388
 801ae8c:	efffffff 	.word	0xefffffff
 801ae90:	40010000 	.word	0x40010000
 801ae94:	ffffdfff 	.word	0xffffdfff
 801ae98:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ae9c:	4b3a      	ldr	r3, [pc, #232]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801ae9e:	681a      	ldr	r2, [r3, #0]
 801aea0:	2380      	movs	r3, #128	@ 0x80
 801aea2:	049b      	lsls	r3, r3, #18
 801aea4:	4013      	ands	r3, r2
 801aea6:	d1dc      	bne.n	801ae62 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801aea8:	4b37      	ldr	r3, [pc, #220]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801aeaa:	68db      	ldr	r3, [r3, #12]
 801aeac:	4a37      	ldr	r2, [pc, #220]	@ (801af8c <HAL_RCC_OscConfig+0x7a0>)
 801aeae:	4013      	ands	r3, r2
 801aeb0:	0019      	movs	r1, r3
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aeba:	431a      	orrs	r2, r3
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aec0:	431a      	orrs	r2, r3
 801aec2:	4b31      	ldr	r3, [pc, #196]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801aec4:	430a      	orrs	r2, r1
 801aec6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801aec8:	4b2f      	ldr	r3, [pc, #188]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801aeca:	681a      	ldr	r2, [r3, #0]
 801aecc:	4b2e      	ldr	r3, [pc, #184]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801aece:	2180      	movs	r1, #128	@ 0x80
 801aed0:	0449      	lsls	r1, r1, #17
 801aed2:	430a      	orrs	r2, r1
 801aed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aed6:	f7f9 f84d 	bl	8013f74 <HAL_GetTick>
 801aeda:	0003      	movs	r3, r0
 801aedc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801aede:	e008      	b.n	801aef2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801aee0:	f7f9 f848 	bl	8013f74 <HAL_GetTick>
 801aee4:	0002      	movs	r2, r0
 801aee6:	697b      	ldr	r3, [r7, #20]
 801aee8:	1ad3      	subs	r3, r2, r3
 801aeea:	2b02      	cmp	r3, #2
 801aeec:	d901      	bls.n	801aef2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801aeee:	2303      	movs	r3, #3
 801aef0:	e045      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801aef2:	4b25      	ldr	r3, [pc, #148]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801aef4:	681a      	ldr	r2, [r3, #0]
 801aef6:	2380      	movs	r3, #128	@ 0x80
 801aef8:	049b      	lsls	r3, r3, #18
 801aefa:	4013      	ands	r3, r2
 801aefc:	d0f0      	beq.n	801aee0 <HAL_RCC_OscConfig+0x6f4>
 801aefe:	e03d      	b.n	801af7c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801af00:	4b21      	ldr	r3, [pc, #132]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801af02:	681a      	ldr	r2, [r3, #0]
 801af04:	4b20      	ldr	r3, [pc, #128]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801af06:	4922      	ldr	r1, [pc, #136]	@ (801af90 <HAL_RCC_OscConfig+0x7a4>)
 801af08:	400a      	ands	r2, r1
 801af0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801af0c:	f7f9 f832 	bl	8013f74 <HAL_GetTick>
 801af10:	0003      	movs	r3, r0
 801af12:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801af14:	e008      	b.n	801af28 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801af16:	f7f9 f82d 	bl	8013f74 <HAL_GetTick>
 801af1a:	0002      	movs	r2, r0
 801af1c:	697b      	ldr	r3, [r7, #20]
 801af1e:	1ad3      	subs	r3, r2, r3
 801af20:	2b02      	cmp	r3, #2
 801af22:	d901      	bls.n	801af28 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801af24:	2303      	movs	r3, #3
 801af26:	e02a      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801af28:	4b17      	ldr	r3, [pc, #92]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801af2a:	681a      	ldr	r2, [r3, #0]
 801af2c:	2380      	movs	r3, #128	@ 0x80
 801af2e:	049b      	lsls	r3, r3, #18
 801af30:	4013      	ands	r3, r2
 801af32:	d1f0      	bne.n	801af16 <HAL_RCC_OscConfig+0x72a>
 801af34:	e022      	b.n	801af7c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af3a:	2b01      	cmp	r3, #1
 801af3c:	d101      	bne.n	801af42 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801af3e:	2301      	movs	r3, #1
 801af40:	e01d      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801af42:	4b11      	ldr	r3, [pc, #68]	@ (801af88 <HAL_RCC_OscConfig+0x79c>)
 801af44:	68db      	ldr	r3, [r3, #12]
 801af46:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801af48:	69ba      	ldr	r2, [r7, #24]
 801af4a:	2380      	movs	r3, #128	@ 0x80
 801af4c:	025b      	lsls	r3, r3, #9
 801af4e:	401a      	ands	r2, r3
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af54:	429a      	cmp	r2, r3
 801af56:	d10f      	bne.n	801af78 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801af58:	69ba      	ldr	r2, [r7, #24]
 801af5a:	23f0      	movs	r3, #240	@ 0xf0
 801af5c:	039b      	lsls	r3, r3, #14
 801af5e:	401a      	ands	r2, r3
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801af64:	429a      	cmp	r2, r3
 801af66:	d107      	bne.n	801af78 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801af68:	69ba      	ldr	r2, [r7, #24]
 801af6a:	23c0      	movs	r3, #192	@ 0xc0
 801af6c:	041b      	lsls	r3, r3, #16
 801af6e:	401a      	ands	r2, r3
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801af74:	429a      	cmp	r2, r3
 801af76:	d001      	beq.n	801af7c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801af78:	2301      	movs	r3, #1
 801af7a:	e000      	b.n	801af7e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801af7c:	2300      	movs	r3, #0
}
 801af7e:	0018      	movs	r0, r3
 801af80:	46bd      	mov	sp, r7
 801af82:	b00a      	add	sp, #40	@ 0x28
 801af84:	bdb0      	pop	{r4, r5, r7, pc}
 801af86:	46c0      	nop			@ (mov r8, r8)
 801af88:	40021000 	.word	0x40021000
 801af8c:	ff02ffff 	.word	0xff02ffff
 801af90:	feffffff 	.word	0xfeffffff

0801af94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801af94:	b5b0      	push	{r4, r5, r7, lr}
 801af96:	b084      	sub	sp, #16
 801af98:	af00      	add	r7, sp, #0
 801af9a:	6078      	str	r0, [r7, #4]
 801af9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d101      	bne.n	801afa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801afa4:	2301      	movs	r3, #1
 801afa6:	e128      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801afa8:	4b96      	ldr	r3, [pc, #600]	@ (801b204 <HAL_RCC_ClockConfig+0x270>)
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	2201      	movs	r2, #1
 801afae:	4013      	ands	r3, r2
 801afb0:	683a      	ldr	r2, [r7, #0]
 801afb2:	429a      	cmp	r2, r3
 801afb4:	d91e      	bls.n	801aff4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801afb6:	4b93      	ldr	r3, [pc, #588]	@ (801b204 <HAL_RCC_ClockConfig+0x270>)
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	2201      	movs	r2, #1
 801afbc:	4393      	bics	r3, r2
 801afbe:	0019      	movs	r1, r3
 801afc0:	4b90      	ldr	r3, [pc, #576]	@ (801b204 <HAL_RCC_ClockConfig+0x270>)
 801afc2:	683a      	ldr	r2, [r7, #0]
 801afc4:	430a      	orrs	r2, r1
 801afc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801afc8:	f7f8 ffd4 	bl	8013f74 <HAL_GetTick>
 801afcc:	0003      	movs	r3, r0
 801afce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801afd0:	e009      	b.n	801afe6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801afd2:	f7f8 ffcf 	bl	8013f74 <HAL_GetTick>
 801afd6:	0002      	movs	r2, r0
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	1ad3      	subs	r3, r2, r3
 801afdc:	4a8a      	ldr	r2, [pc, #552]	@ (801b208 <HAL_RCC_ClockConfig+0x274>)
 801afde:	4293      	cmp	r3, r2
 801afe0:	d901      	bls.n	801afe6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801afe2:	2303      	movs	r3, #3
 801afe4:	e109      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801afe6:	4b87      	ldr	r3, [pc, #540]	@ (801b204 <HAL_RCC_ClockConfig+0x270>)
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	2201      	movs	r2, #1
 801afec:	4013      	ands	r3, r2
 801afee:	683a      	ldr	r2, [r7, #0]
 801aff0:	429a      	cmp	r2, r3
 801aff2:	d1ee      	bne.n	801afd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	2202      	movs	r2, #2
 801affa:	4013      	ands	r3, r2
 801affc:	d009      	beq.n	801b012 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801affe:	4b83      	ldr	r3, [pc, #524]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b000:	68db      	ldr	r3, [r3, #12]
 801b002:	22f0      	movs	r2, #240	@ 0xf0
 801b004:	4393      	bics	r3, r2
 801b006:	0019      	movs	r1, r3
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	689a      	ldr	r2, [r3, #8]
 801b00c:	4b7f      	ldr	r3, [pc, #508]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b00e:	430a      	orrs	r2, r1
 801b010:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	2201      	movs	r2, #1
 801b018:	4013      	ands	r3, r2
 801b01a:	d100      	bne.n	801b01e <HAL_RCC_ClockConfig+0x8a>
 801b01c:	e089      	b.n	801b132 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	685b      	ldr	r3, [r3, #4]
 801b022:	2b02      	cmp	r3, #2
 801b024:	d107      	bne.n	801b036 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b026:	4b79      	ldr	r3, [pc, #484]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b028:	681a      	ldr	r2, [r3, #0]
 801b02a:	2380      	movs	r3, #128	@ 0x80
 801b02c:	029b      	lsls	r3, r3, #10
 801b02e:	4013      	ands	r3, r2
 801b030:	d120      	bne.n	801b074 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b032:	2301      	movs	r3, #1
 801b034:	e0e1      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	685b      	ldr	r3, [r3, #4]
 801b03a:	2b03      	cmp	r3, #3
 801b03c:	d107      	bne.n	801b04e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b03e:	4b73      	ldr	r3, [pc, #460]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b040:	681a      	ldr	r2, [r3, #0]
 801b042:	2380      	movs	r3, #128	@ 0x80
 801b044:	049b      	lsls	r3, r3, #18
 801b046:	4013      	ands	r3, r2
 801b048:	d114      	bne.n	801b074 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b04a:	2301      	movs	r3, #1
 801b04c:	e0d5      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	685b      	ldr	r3, [r3, #4]
 801b052:	2b01      	cmp	r3, #1
 801b054:	d106      	bne.n	801b064 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b056:	4b6d      	ldr	r3, [pc, #436]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	2204      	movs	r2, #4
 801b05c:	4013      	ands	r3, r2
 801b05e:	d109      	bne.n	801b074 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b060:	2301      	movs	r3, #1
 801b062:	e0ca      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b064:	4b69      	ldr	r3, [pc, #420]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b066:	681a      	ldr	r2, [r3, #0]
 801b068:	2380      	movs	r3, #128	@ 0x80
 801b06a:	009b      	lsls	r3, r3, #2
 801b06c:	4013      	ands	r3, r2
 801b06e:	d101      	bne.n	801b074 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801b070:	2301      	movs	r3, #1
 801b072:	e0c2      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b074:	4b65      	ldr	r3, [pc, #404]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b076:	68db      	ldr	r3, [r3, #12]
 801b078:	2203      	movs	r2, #3
 801b07a:	4393      	bics	r3, r2
 801b07c:	0019      	movs	r1, r3
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	685a      	ldr	r2, [r3, #4]
 801b082:	4b62      	ldr	r3, [pc, #392]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b084:	430a      	orrs	r2, r1
 801b086:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b088:	f7f8 ff74 	bl	8013f74 <HAL_GetTick>
 801b08c:	0003      	movs	r3, r0
 801b08e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	685b      	ldr	r3, [r3, #4]
 801b094:	2b02      	cmp	r3, #2
 801b096:	d111      	bne.n	801b0bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801b098:	e009      	b.n	801b0ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b09a:	f7f8 ff6b 	bl	8013f74 <HAL_GetTick>
 801b09e:	0002      	movs	r2, r0
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	1ad3      	subs	r3, r2, r3
 801b0a4:	4a58      	ldr	r2, [pc, #352]	@ (801b208 <HAL_RCC_ClockConfig+0x274>)
 801b0a6:	4293      	cmp	r3, r2
 801b0a8:	d901      	bls.n	801b0ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801b0aa:	2303      	movs	r3, #3
 801b0ac:	e0a5      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801b0ae:	4b57      	ldr	r3, [pc, #348]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b0b0:	68db      	ldr	r3, [r3, #12]
 801b0b2:	220c      	movs	r2, #12
 801b0b4:	4013      	ands	r3, r2
 801b0b6:	2b08      	cmp	r3, #8
 801b0b8:	d1ef      	bne.n	801b09a <HAL_RCC_ClockConfig+0x106>
 801b0ba:	e03a      	b.n	801b132 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	685b      	ldr	r3, [r3, #4]
 801b0c0:	2b03      	cmp	r3, #3
 801b0c2:	d111      	bne.n	801b0e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b0c4:	e009      	b.n	801b0da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b0c6:	f7f8 ff55 	bl	8013f74 <HAL_GetTick>
 801b0ca:	0002      	movs	r2, r0
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	1ad3      	subs	r3, r2, r3
 801b0d0:	4a4d      	ldr	r2, [pc, #308]	@ (801b208 <HAL_RCC_ClockConfig+0x274>)
 801b0d2:	4293      	cmp	r3, r2
 801b0d4:	d901      	bls.n	801b0da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801b0d6:	2303      	movs	r3, #3
 801b0d8:	e08f      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801b0da:	4b4c      	ldr	r3, [pc, #304]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b0dc:	68db      	ldr	r3, [r3, #12]
 801b0de:	220c      	movs	r2, #12
 801b0e0:	4013      	ands	r3, r2
 801b0e2:	2b0c      	cmp	r3, #12
 801b0e4:	d1ef      	bne.n	801b0c6 <HAL_RCC_ClockConfig+0x132>
 801b0e6:	e024      	b.n	801b132 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	685b      	ldr	r3, [r3, #4]
 801b0ec:	2b01      	cmp	r3, #1
 801b0ee:	d11b      	bne.n	801b128 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801b0f0:	e009      	b.n	801b106 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b0f2:	f7f8 ff3f 	bl	8013f74 <HAL_GetTick>
 801b0f6:	0002      	movs	r2, r0
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	1ad3      	subs	r3, r2, r3
 801b0fc:	4a42      	ldr	r2, [pc, #264]	@ (801b208 <HAL_RCC_ClockConfig+0x274>)
 801b0fe:	4293      	cmp	r3, r2
 801b100:	d901      	bls.n	801b106 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801b102:	2303      	movs	r3, #3
 801b104:	e079      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801b106:	4b41      	ldr	r3, [pc, #260]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b108:	68db      	ldr	r3, [r3, #12]
 801b10a:	220c      	movs	r2, #12
 801b10c:	4013      	ands	r3, r2
 801b10e:	2b04      	cmp	r3, #4
 801b110:	d1ef      	bne.n	801b0f2 <HAL_RCC_ClockConfig+0x15e>
 801b112:	e00e      	b.n	801b132 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b114:	f7f8 ff2e 	bl	8013f74 <HAL_GetTick>
 801b118:	0002      	movs	r2, r0
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	1ad3      	subs	r3, r2, r3
 801b11e:	4a3a      	ldr	r2, [pc, #232]	@ (801b208 <HAL_RCC_ClockConfig+0x274>)
 801b120:	4293      	cmp	r3, r2
 801b122:	d901      	bls.n	801b128 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801b124:	2303      	movs	r3, #3
 801b126:	e068      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801b128:	4b38      	ldr	r3, [pc, #224]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b12a:	68db      	ldr	r3, [r3, #12]
 801b12c:	220c      	movs	r2, #12
 801b12e:	4013      	ands	r3, r2
 801b130:	d1f0      	bne.n	801b114 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b132:	4b34      	ldr	r3, [pc, #208]	@ (801b204 <HAL_RCC_ClockConfig+0x270>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	2201      	movs	r2, #1
 801b138:	4013      	ands	r3, r2
 801b13a:	683a      	ldr	r2, [r7, #0]
 801b13c:	429a      	cmp	r2, r3
 801b13e:	d21e      	bcs.n	801b17e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b140:	4b30      	ldr	r3, [pc, #192]	@ (801b204 <HAL_RCC_ClockConfig+0x270>)
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	2201      	movs	r2, #1
 801b146:	4393      	bics	r3, r2
 801b148:	0019      	movs	r1, r3
 801b14a:	4b2e      	ldr	r3, [pc, #184]	@ (801b204 <HAL_RCC_ClockConfig+0x270>)
 801b14c:	683a      	ldr	r2, [r7, #0]
 801b14e:	430a      	orrs	r2, r1
 801b150:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b152:	f7f8 ff0f 	bl	8013f74 <HAL_GetTick>
 801b156:	0003      	movs	r3, r0
 801b158:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b15a:	e009      	b.n	801b170 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b15c:	f7f8 ff0a 	bl	8013f74 <HAL_GetTick>
 801b160:	0002      	movs	r2, r0
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	1ad3      	subs	r3, r2, r3
 801b166:	4a28      	ldr	r2, [pc, #160]	@ (801b208 <HAL_RCC_ClockConfig+0x274>)
 801b168:	4293      	cmp	r3, r2
 801b16a:	d901      	bls.n	801b170 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801b16c:	2303      	movs	r3, #3
 801b16e:	e044      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b170:	4b24      	ldr	r3, [pc, #144]	@ (801b204 <HAL_RCC_ClockConfig+0x270>)
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	2201      	movs	r2, #1
 801b176:	4013      	ands	r3, r2
 801b178:	683a      	ldr	r2, [r7, #0]
 801b17a:	429a      	cmp	r2, r3
 801b17c:	d1ee      	bne.n	801b15c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	2204      	movs	r2, #4
 801b184:	4013      	ands	r3, r2
 801b186:	d009      	beq.n	801b19c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b188:	4b20      	ldr	r3, [pc, #128]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b18a:	68db      	ldr	r3, [r3, #12]
 801b18c:	4a20      	ldr	r2, [pc, #128]	@ (801b210 <HAL_RCC_ClockConfig+0x27c>)
 801b18e:	4013      	ands	r3, r2
 801b190:	0019      	movs	r1, r3
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	68da      	ldr	r2, [r3, #12]
 801b196:	4b1d      	ldr	r3, [pc, #116]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b198:	430a      	orrs	r2, r1
 801b19a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	2208      	movs	r2, #8
 801b1a2:	4013      	ands	r3, r2
 801b1a4:	d00a      	beq.n	801b1bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801b1a6:	4b19      	ldr	r3, [pc, #100]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b1a8:	68db      	ldr	r3, [r3, #12]
 801b1aa:	4a1a      	ldr	r2, [pc, #104]	@ (801b214 <HAL_RCC_ClockConfig+0x280>)
 801b1ac:	4013      	ands	r3, r2
 801b1ae:	0019      	movs	r1, r3
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	691b      	ldr	r3, [r3, #16]
 801b1b4:	00da      	lsls	r2, r3, #3
 801b1b6:	4b15      	ldr	r3, [pc, #84]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b1b8:	430a      	orrs	r2, r1
 801b1ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b1bc:	f000 f832 	bl	801b224 <HAL_RCC_GetSysClockFreq>
 801b1c0:	0001      	movs	r1, r0
 801b1c2:	4b12      	ldr	r3, [pc, #72]	@ (801b20c <HAL_RCC_ClockConfig+0x278>)
 801b1c4:	68db      	ldr	r3, [r3, #12]
 801b1c6:	091b      	lsrs	r3, r3, #4
 801b1c8:	220f      	movs	r2, #15
 801b1ca:	4013      	ands	r3, r2
 801b1cc:	4a12      	ldr	r2, [pc, #72]	@ (801b218 <HAL_RCC_ClockConfig+0x284>)
 801b1ce:	5cd3      	ldrb	r3, [r2, r3]
 801b1d0:	000a      	movs	r2, r1
 801b1d2:	40da      	lsrs	r2, r3
 801b1d4:	4b11      	ldr	r3, [pc, #68]	@ (801b21c <HAL_RCC_ClockConfig+0x288>)
 801b1d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801b1d8:	4b11      	ldr	r3, [pc, #68]	@ (801b220 <HAL_RCC_ClockConfig+0x28c>)
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	250b      	movs	r5, #11
 801b1de:	197c      	adds	r4, r7, r5
 801b1e0:	0018      	movs	r0, r3
 801b1e2:	f7f8 fe81 	bl	8013ee8 <HAL_InitTick>
 801b1e6:	0003      	movs	r3, r0
 801b1e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801b1ea:	197b      	adds	r3, r7, r5
 801b1ec:	781b      	ldrb	r3, [r3, #0]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d002      	beq.n	801b1f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801b1f2:	197b      	adds	r3, r7, r5
 801b1f4:	781b      	ldrb	r3, [r3, #0]
 801b1f6:	e000      	b.n	801b1fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801b1f8:	2300      	movs	r3, #0
}
 801b1fa:	0018      	movs	r0, r3
 801b1fc:	46bd      	mov	sp, r7
 801b1fe:	b004      	add	sp, #16
 801b200:	bdb0      	pop	{r4, r5, r7, pc}
 801b202:	46c0      	nop			@ (mov r8, r8)
 801b204:	40022000 	.word	0x40022000
 801b208:	00001388 	.word	0x00001388
 801b20c:	40021000 	.word	0x40021000
 801b210:	fffff8ff 	.word	0xfffff8ff
 801b214:	ffffc7ff 	.word	0xffffc7ff
 801b218:	0802e2e0 	.word	0x0802e2e0
 801b21c:	200000e4 	.word	0x200000e4
 801b220:	200000f4 	.word	0x200000f4

0801b224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b224:	b5b0      	push	{r4, r5, r7, lr}
 801b226:	b08e      	sub	sp, #56	@ 0x38
 801b228:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801b22a:	4b4c      	ldr	r3, [pc, #304]	@ (801b35c <HAL_RCC_GetSysClockFreq+0x138>)
 801b22c:	68db      	ldr	r3, [r3, #12]
 801b22e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801b230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b232:	230c      	movs	r3, #12
 801b234:	4013      	ands	r3, r2
 801b236:	2b0c      	cmp	r3, #12
 801b238:	d014      	beq.n	801b264 <HAL_RCC_GetSysClockFreq+0x40>
 801b23a:	d900      	bls.n	801b23e <HAL_RCC_GetSysClockFreq+0x1a>
 801b23c:	e07b      	b.n	801b336 <HAL_RCC_GetSysClockFreq+0x112>
 801b23e:	2b04      	cmp	r3, #4
 801b240:	d002      	beq.n	801b248 <HAL_RCC_GetSysClockFreq+0x24>
 801b242:	2b08      	cmp	r3, #8
 801b244:	d00b      	beq.n	801b25e <HAL_RCC_GetSysClockFreq+0x3a>
 801b246:	e076      	b.n	801b336 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801b248:	4b44      	ldr	r3, [pc, #272]	@ (801b35c <HAL_RCC_GetSysClockFreq+0x138>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	2210      	movs	r2, #16
 801b24e:	4013      	ands	r3, r2
 801b250:	d002      	beq.n	801b258 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801b252:	4b43      	ldr	r3, [pc, #268]	@ (801b360 <HAL_RCC_GetSysClockFreq+0x13c>)
 801b254:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801b256:	e07c      	b.n	801b352 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801b258:	4b42      	ldr	r3, [pc, #264]	@ (801b364 <HAL_RCC_GetSysClockFreq+0x140>)
 801b25a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b25c:	e079      	b.n	801b352 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801b25e:	4b42      	ldr	r3, [pc, #264]	@ (801b368 <HAL_RCC_GetSysClockFreq+0x144>)
 801b260:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b262:	e076      	b.n	801b352 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801b264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b266:	0c9a      	lsrs	r2, r3, #18
 801b268:	230f      	movs	r3, #15
 801b26a:	401a      	ands	r2, r3
 801b26c:	4b3f      	ldr	r3, [pc, #252]	@ (801b36c <HAL_RCC_GetSysClockFreq+0x148>)
 801b26e:	5c9b      	ldrb	r3, [r3, r2]
 801b270:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801b272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b274:	0d9a      	lsrs	r2, r3, #22
 801b276:	2303      	movs	r3, #3
 801b278:	4013      	ands	r3, r2
 801b27a:	3301      	adds	r3, #1
 801b27c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b27e:	4b37      	ldr	r3, [pc, #220]	@ (801b35c <HAL_RCC_GetSysClockFreq+0x138>)
 801b280:	68da      	ldr	r2, [r3, #12]
 801b282:	2380      	movs	r3, #128	@ 0x80
 801b284:	025b      	lsls	r3, r3, #9
 801b286:	4013      	ands	r3, r2
 801b288:	d01a      	beq.n	801b2c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b28c:	61bb      	str	r3, [r7, #24]
 801b28e:	2300      	movs	r3, #0
 801b290:	61fb      	str	r3, [r7, #28]
 801b292:	4a35      	ldr	r2, [pc, #212]	@ (801b368 <HAL_RCC_GetSysClockFreq+0x144>)
 801b294:	2300      	movs	r3, #0
 801b296:	69b8      	ldr	r0, [r7, #24]
 801b298:	69f9      	ldr	r1, [r7, #28]
 801b29a:	f7e5 f991 	bl	80005c0 <__aeabi_lmul>
 801b29e:	0002      	movs	r2, r0
 801b2a0:	000b      	movs	r3, r1
 801b2a2:	0010      	movs	r0, r2
 801b2a4:	0019      	movs	r1, r3
 801b2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a8:	613b      	str	r3, [r7, #16]
 801b2aa:	2300      	movs	r3, #0
 801b2ac:	617b      	str	r3, [r7, #20]
 801b2ae:	693a      	ldr	r2, [r7, #16]
 801b2b0:	697b      	ldr	r3, [r7, #20]
 801b2b2:	f7e5 f965 	bl	8000580 <__aeabi_uldivmod>
 801b2b6:	0002      	movs	r2, r0
 801b2b8:	000b      	movs	r3, r1
 801b2ba:	0013      	movs	r3, r2
 801b2bc:	637b      	str	r3, [r7, #52]	@ 0x34
 801b2be:	e037      	b.n	801b330 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801b2c0:	4b26      	ldr	r3, [pc, #152]	@ (801b35c <HAL_RCC_GetSysClockFreq+0x138>)
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2210      	movs	r2, #16
 801b2c6:	4013      	ands	r3, r2
 801b2c8:	d01a      	beq.n	801b300 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801b2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2cc:	60bb      	str	r3, [r7, #8]
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	60fb      	str	r3, [r7, #12]
 801b2d2:	4a23      	ldr	r2, [pc, #140]	@ (801b360 <HAL_RCC_GetSysClockFreq+0x13c>)
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	68b8      	ldr	r0, [r7, #8]
 801b2d8:	68f9      	ldr	r1, [r7, #12]
 801b2da:	f7e5 f971 	bl	80005c0 <__aeabi_lmul>
 801b2de:	0002      	movs	r2, r0
 801b2e0:	000b      	movs	r3, r1
 801b2e2:	0010      	movs	r0, r2
 801b2e4:	0019      	movs	r1, r3
 801b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2e8:	603b      	str	r3, [r7, #0]
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	607b      	str	r3, [r7, #4]
 801b2ee:	683a      	ldr	r2, [r7, #0]
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	f7e5 f945 	bl	8000580 <__aeabi_uldivmod>
 801b2f6:	0002      	movs	r2, r0
 801b2f8:	000b      	movs	r3, r1
 801b2fa:	0013      	movs	r3, r2
 801b2fc:	637b      	str	r3, [r7, #52]	@ 0x34
 801b2fe:	e017      	b.n	801b330 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801b300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b302:	0018      	movs	r0, r3
 801b304:	2300      	movs	r3, #0
 801b306:	0019      	movs	r1, r3
 801b308:	4a16      	ldr	r2, [pc, #88]	@ (801b364 <HAL_RCC_GetSysClockFreq+0x140>)
 801b30a:	2300      	movs	r3, #0
 801b30c:	f7e5 f958 	bl	80005c0 <__aeabi_lmul>
 801b310:	0002      	movs	r2, r0
 801b312:	000b      	movs	r3, r1
 801b314:	0010      	movs	r0, r2
 801b316:	0019      	movs	r1, r3
 801b318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b31a:	001c      	movs	r4, r3
 801b31c:	2300      	movs	r3, #0
 801b31e:	001d      	movs	r5, r3
 801b320:	0022      	movs	r2, r4
 801b322:	002b      	movs	r3, r5
 801b324:	f7e5 f92c 	bl	8000580 <__aeabi_uldivmod>
 801b328:	0002      	movs	r2, r0
 801b32a:	000b      	movs	r3, r1
 801b32c:	0013      	movs	r3, r2
 801b32e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801b330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b332:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b334:	e00d      	b.n	801b352 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801b336:	4b09      	ldr	r3, [pc, #36]	@ (801b35c <HAL_RCC_GetSysClockFreq+0x138>)
 801b338:	685b      	ldr	r3, [r3, #4]
 801b33a:	0b5b      	lsrs	r3, r3, #13
 801b33c:	2207      	movs	r2, #7
 801b33e:	4013      	ands	r3, r2
 801b340:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801b342:	6a3b      	ldr	r3, [r7, #32]
 801b344:	3301      	adds	r3, #1
 801b346:	2280      	movs	r2, #128	@ 0x80
 801b348:	0212      	lsls	r2, r2, #8
 801b34a:	409a      	lsls	r2, r3
 801b34c:	0013      	movs	r3, r2
 801b34e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801b350:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801b352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801b354:	0018      	movs	r0, r3
 801b356:	46bd      	mov	sp, r7
 801b358:	b00e      	add	sp, #56	@ 0x38
 801b35a:	bdb0      	pop	{r4, r5, r7, pc}
 801b35c:	40021000 	.word	0x40021000
 801b360:	003d0900 	.word	0x003d0900
 801b364:	00f42400 	.word	0x00f42400
 801b368:	007a1200 	.word	0x007a1200
 801b36c:	0802e2f8 	.word	0x0802e2f8

0801b370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b370:	b580      	push	{r7, lr}
 801b372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b374:	4b02      	ldr	r3, [pc, #8]	@ (801b380 <HAL_RCC_GetHCLKFreq+0x10>)
 801b376:	681b      	ldr	r3, [r3, #0]
}
 801b378:	0018      	movs	r0, r3
 801b37a:	46bd      	mov	sp, r7
 801b37c:	bd80      	pop	{r7, pc}
 801b37e:	46c0      	nop			@ (mov r8, r8)
 801b380:	200000e4 	.word	0x200000e4

0801b384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b384:	b580      	push	{r7, lr}
 801b386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801b388:	f7ff fff2 	bl	801b370 <HAL_RCC_GetHCLKFreq>
 801b38c:	0001      	movs	r1, r0
 801b38e:	4b06      	ldr	r3, [pc, #24]	@ (801b3a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b390:	68db      	ldr	r3, [r3, #12]
 801b392:	0a1b      	lsrs	r3, r3, #8
 801b394:	2207      	movs	r2, #7
 801b396:	4013      	ands	r3, r2
 801b398:	4a04      	ldr	r2, [pc, #16]	@ (801b3ac <HAL_RCC_GetPCLK1Freq+0x28>)
 801b39a:	5cd3      	ldrb	r3, [r2, r3]
 801b39c:	40d9      	lsrs	r1, r3
 801b39e:	000b      	movs	r3, r1
}
 801b3a0:	0018      	movs	r0, r3
 801b3a2:	46bd      	mov	sp, r7
 801b3a4:	bd80      	pop	{r7, pc}
 801b3a6:	46c0      	nop			@ (mov r8, r8)
 801b3a8:	40021000 	.word	0x40021000
 801b3ac:	0802e2f0 	.word	0x0802e2f0

0801b3b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801b3b4:	f7ff ffdc 	bl	801b370 <HAL_RCC_GetHCLKFreq>
 801b3b8:	0001      	movs	r1, r0
 801b3ba:	4b06      	ldr	r3, [pc, #24]	@ (801b3d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b3bc:	68db      	ldr	r3, [r3, #12]
 801b3be:	0adb      	lsrs	r3, r3, #11
 801b3c0:	2207      	movs	r2, #7
 801b3c2:	4013      	ands	r3, r2
 801b3c4:	4a04      	ldr	r2, [pc, #16]	@ (801b3d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b3c6:	5cd3      	ldrb	r3, [r2, r3]
 801b3c8:	40d9      	lsrs	r1, r3
 801b3ca:	000b      	movs	r3, r1
}
 801b3cc:	0018      	movs	r0, r3
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bd80      	pop	{r7, pc}
 801b3d2:	46c0      	nop			@ (mov r8, r8)
 801b3d4:	40021000 	.word	0x40021000
 801b3d8:	0802e2f0 	.word	0x0802e2f0

0801b3dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b086      	sub	sp, #24
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801b3e4:	2017      	movs	r0, #23
 801b3e6:	183b      	adds	r3, r7, r0
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	2220      	movs	r2, #32
 801b3f2:	4013      	ands	r3, r2
 801b3f4:	d100      	bne.n	801b3f8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801b3f6:	e0c7      	b.n	801b588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b3f8:	4b9b      	ldr	r3, [pc, #620]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b3fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b3fc:	2380      	movs	r3, #128	@ 0x80
 801b3fe:	055b      	lsls	r3, r3, #21
 801b400:	4013      	ands	r3, r2
 801b402:	d109      	bne.n	801b418 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b404:	4b98      	ldr	r3, [pc, #608]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b408:	4b97      	ldr	r3, [pc, #604]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b40a:	2180      	movs	r1, #128	@ 0x80
 801b40c:	0549      	lsls	r1, r1, #21
 801b40e:	430a      	orrs	r2, r1
 801b410:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b412:	183b      	adds	r3, r7, r0
 801b414:	2201      	movs	r2, #1
 801b416:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b418:	4b94      	ldr	r3, [pc, #592]	@ (801b66c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b41a:	681a      	ldr	r2, [r3, #0]
 801b41c:	2380      	movs	r3, #128	@ 0x80
 801b41e:	005b      	lsls	r3, r3, #1
 801b420:	4013      	ands	r3, r2
 801b422:	d11a      	bne.n	801b45a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b424:	4b91      	ldr	r3, [pc, #580]	@ (801b66c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b426:	681a      	ldr	r2, [r3, #0]
 801b428:	4b90      	ldr	r3, [pc, #576]	@ (801b66c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b42a:	2180      	movs	r1, #128	@ 0x80
 801b42c:	0049      	lsls	r1, r1, #1
 801b42e:	430a      	orrs	r2, r1
 801b430:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b432:	f7f8 fd9f 	bl	8013f74 <HAL_GetTick>
 801b436:	0003      	movs	r3, r0
 801b438:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b43a:	e008      	b.n	801b44e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b43c:	f7f8 fd9a 	bl	8013f74 <HAL_GetTick>
 801b440:	0002      	movs	r2, r0
 801b442:	693b      	ldr	r3, [r7, #16]
 801b444:	1ad3      	subs	r3, r2, r3
 801b446:	2b64      	cmp	r3, #100	@ 0x64
 801b448:	d901      	bls.n	801b44e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801b44a:	2303      	movs	r3, #3
 801b44c:	e107      	b.n	801b65e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b44e:	4b87      	ldr	r3, [pc, #540]	@ (801b66c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b450:	681a      	ldr	r2, [r3, #0]
 801b452:	2380      	movs	r3, #128	@ 0x80
 801b454:	005b      	lsls	r3, r3, #1
 801b456:	4013      	ands	r3, r2
 801b458:	d0f0      	beq.n	801b43c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801b45a:	4b83      	ldr	r3, [pc, #524]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b45c:	681a      	ldr	r2, [r3, #0]
 801b45e:	23c0      	movs	r3, #192	@ 0xc0
 801b460:	039b      	lsls	r3, r3, #14
 801b462:	4013      	ands	r3, r2
 801b464:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	685a      	ldr	r2, [r3, #4]
 801b46a:	23c0      	movs	r3, #192	@ 0xc0
 801b46c:	039b      	lsls	r3, r3, #14
 801b46e:	4013      	ands	r3, r2
 801b470:	68fa      	ldr	r2, [r7, #12]
 801b472:	429a      	cmp	r2, r3
 801b474:	d013      	beq.n	801b49e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	685a      	ldr	r2, [r3, #4]
 801b47a:	23c0      	movs	r3, #192	@ 0xc0
 801b47c:	029b      	lsls	r3, r3, #10
 801b47e:	401a      	ands	r2, r3
 801b480:	23c0      	movs	r3, #192	@ 0xc0
 801b482:	029b      	lsls	r3, r3, #10
 801b484:	429a      	cmp	r2, r3
 801b486:	d10a      	bne.n	801b49e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801b488:	4b77      	ldr	r3, [pc, #476]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b48a:	681a      	ldr	r2, [r3, #0]
 801b48c:	2380      	movs	r3, #128	@ 0x80
 801b48e:	029b      	lsls	r3, r3, #10
 801b490:	401a      	ands	r2, r3
 801b492:	2380      	movs	r3, #128	@ 0x80
 801b494:	029b      	lsls	r3, r3, #10
 801b496:	429a      	cmp	r2, r3
 801b498:	d101      	bne.n	801b49e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801b49a:	2301      	movs	r3, #1
 801b49c:	e0df      	b.n	801b65e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801b49e:	4b72      	ldr	r3, [pc, #456]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b4a2:	23c0      	movs	r3, #192	@ 0xc0
 801b4a4:	029b      	lsls	r3, r3, #10
 801b4a6:	4013      	ands	r3, r2
 801b4a8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801b4aa:	68fb      	ldr	r3, [r7, #12]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d03b      	beq.n	801b528 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	685a      	ldr	r2, [r3, #4]
 801b4b4:	23c0      	movs	r3, #192	@ 0xc0
 801b4b6:	029b      	lsls	r3, r3, #10
 801b4b8:	4013      	ands	r3, r2
 801b4ba:	68fa      	ldr	r2, [r7, #12]
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d033      	beq.n	801b528 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	2220      	movs	r2, #32
 801b4c6:	4013      	ands	r3, r2
 801b4c8:	d02e      	beq.n	801b528 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801b4ca:	4b67      	ldr	r3, [pc, #412]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b4ce:	4a68      	ldr	r2, [pc, #416]	@ (801b670 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b4d0:	4013      	ands	r3, r2
 801b4d2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b4d4:	4b64      	ldr	r3, [pc, #400]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b4d8:	4b63      	ldr	r3, [pc, #396]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4da:	2180      	movs	r1, #128	@ 0x80
 801b4dc:	0309      	lsls	r1, r1, #12
 801b4de:	430a      	orrs	r2, r1
 801b4e0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b4e2:	4b61      	ldr	r3, [pc, #388]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b4e6:	4b60      	ldr	r3, [pc, #384]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4e8:	4962      	ldr	r1, [pc, #392]	@ (801b674 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801b4ea:	400a      	ands	r2, r1
 801b4ec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801b4ee:	4b5e      	ldr	r3, [pc, #376]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b4f0:	68fa      	ldr	r2, [r7, #12]
 801b4f2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801b4f4:	68fa      	ldr	r2, [r7, #12]
 801b4f6:	2380      	movs	r3, #128	@ 0x80
 801b4f8:	005b      	lsls	r3, r3, #1
 801b4fa:	4013      	ands	r3, r2
 801b4fc:	d014      	beq.n	801b528 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4fe:	f7f8 fd39 	bl	8013f74 <HAL_GetTick>
 801b502:	0003      	movs	r3, r0
 801b504:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b506:	e009      	b.n	801b51c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b508:	f7f8 fd34 	bl	8013f74 <HAL_GetTick>
 801b50c:	0002      	movs	r2, r0
 801b50e:	693b      	ldr	r3, [r7, #16]
 801b510:	1ad3      	subs	r3, r2, r3
 801b512:	4a59      	ldr	r2, [pc, #356]	@ (801b678 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801b514:	4293      	cmp	r3, r2
 801b516:	d901      	bls.n	801b51c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801b518:	2303      	movs	r3, #3
 801b51a:	e0a0      	b.n	801b65e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b51c:	4b52      	ldr	r3, [pc, #328]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b51e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b520:	2380      	movs	r3, #128	@ 0x80
 801b522:	009b      	lsls	r3, r3, #2
 801b524:	4013      	ands	r3, r2
 801b526:	d0ef      	beq.n	801b508 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	2220      	movs	r2, #32
 801b52e:	4013      	ands	r3, r2
 801b530:	d01f      	beq.n	801b572 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	685a      	ldr	r2, [r3, #4]
 801b536:	23c0      	movs	r3, #192	@ 0xc0
 801b538:	029b      	lsls	r3, r3, #10
 801b53a:	401a      	ands	r2, r3
 801b53c:	23c0      	movs	r3, #192	@ 0xc0
 801b53e:	029b      	lsls	r3, r3, #10
 801b540:	429a      	cmp	r2, r3
 801b542:	d10c      	bne.n	801b55e <HAL_RCCEx_PeriphCLKConfig+0x182>
 801b544:	4b48      	ldr	r3, [pc, #288]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	4a4c      	ldr	r2, [pc, #304]	@ (801b67c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801b54a:	4013      	ands	r3, r2
 801b54c:	0019      	movs	r1, r3
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	685a      	ldr	r2, [r3, #4]
 801b552:	23c0      	movs	r3, #192	@ 0xc0
 801b554:	039b      	lsls	r3, r3, #14
 801b556:	401a      	ands	r2, r3
 801b558:	4b43      	ldr	r3, [pc, #268]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b55a:	430a      	orrs	r2, r1
 801b55c:	601a      	str	r2, [r3, #0]
 801b55e:	4b42      	ldr	r3, [pc, #264]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b560:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	685a      	ldr	r2, [r3, #4]
 801b566:	23c0      	movs	r3, #192	@ 0xc0
 801b568:	029b      	lsls	r3, r3, #10
 801b56a:	401a      	ands	r2, r3
 801b56c:	4b3e      	ldr	r3, [pc, #248]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b56e:	430a      	orrs	r2, r1
 801b570:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b572:	2317      	movs	r3, #23
 801b574:	18fb      	adds	r3, r7, r3
 801b576:	781b      	ldrb	r3, [r3, #0]
 801b578:	2b01      	cmp	r3, #1
 801b57a:	d105      	bne.n	801b588 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b57c:	4b3a      	ldr	r3, [pc, #232]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b57e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b580:	4b39      	ldr	r3, [pc, #228]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b582:	493f      	ldr	r1, [pc, #252]	@ (801b680 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801b584:	400a      	ands	r2, r1
 801b586:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	2201      	movs	r2, #1
 801b58e:	4013      	ands	r3, r2
 801b590:	d009      	beq.n	801b5a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b592:	4b35      	ldr	r3, [pc, #212]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b596:	2203      	movs	r2, #3
 801b598:	4393      	bics	r3, r2
 801b59a:	0019      	movs	r1, r3
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	689a      	ldr	r2, [r3, #8]
 801b5a0:	4b31      	ldr	r3, [pc, #196]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b5a2:	430a      	orrs	r2, r1
 801b5a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	2202      	movs	r2, #2
 801b5ac:	4013      	ands	r3, r2
 801b5ae:	d009      	beq.n	801b5c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801b5b0:	4b2d      	ldr	r3, [pc, #180]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b5b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b5b4:	220c      	movs	r2, #12
 801b5b6:	4393      	bics	r3, r2
 801b5b8:	0019      	movs	r1, r3
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	68da      	ldr	r2, [r3, #12]
 801b5be:	4b2a      	ldr	r3, [pc, #168]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b5c0:	430a      	orrs	r2, r1
 801b5c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	2204      	movs	r2, #4
 801b5ca:	4013      	ands	r3, r2
 801b5cc:	d009      	beq.n	801b5e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b5ce:	4b26      	ldr	r3, [pc, #152]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b5d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b5d2:	4a2c      	ldr	r2, [pc, #176]	@ (801b684 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801b5d4:	4013      	ands	r3, r2
 801b5d6:	0019      	movs	r1, r3
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	691a      	ldr	r2, [r3, #16]
 801b5dc:	4b22      	ldr	r3, [pc, #136]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b5de:	430a      	orrs	r2, r1
 801b5e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	2208      	movs	r2, #8
 801b5e8:	4013      	ands	r3, r2
 801b5ea:	d009      	beq.n	801b600 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801b5ec:	4b1e      	ldr	r3, [pc, #120]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b5ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b5f0:	4a25      	ldr	r2, [pc, #148]	@ (801b688 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801b5f2:	4013      	ands	r3, r2
 801b5f4:	0019      	movs	r1, r3
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	695a      	ldr	r2, [r3, #20]
 801b5fa:	4b1b      	ldr	r3, [pc, #108]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b5fc:	430a      	orrs	r2, r1
 801b5fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	681a      	ldr	r2, [r3, #0]
 801b604:	2380      	movs	r3, #128	@ 0x80
 801b606:	005b      	lsls	r3, r3, #1
 801b608:	4013      	ands	r3, r2
 801b60a:	d009      	beq.n	801b620 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801b60c:	4b16      	ldr	r3, [pc, #88]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b60e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b610:	4a17      	ldr	r2, [pc, #92]	@ (801b670 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b612:	4013      	ands	r3, r2
 801b614:	0019      	movs	r1, r3
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	699a      	ldr	r2, [r3, #24]
 801b61a:	4b13      	ldr	r3, [pc, #76]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b61c:	430a      	orrs	r2, r1
 801b61e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	2240      	movs	r2, #64	@ 0x40
 801b626:	4013      	ands	r3, r2
 801b628:	d009      	beq.n	801b63e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801b62a:	4b0f      	ldr	r3, [pc, #60]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b62c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b62e:	4a17      	ldr	r2, [pc, #92]	@ (801b68c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801b630:	4013      	ands	r3, r2
 801b632:	0019      	movs	r1, r3
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	6a1a      	ldr	r2, [r3, #32]
 801b638:	4b0b      	ldr	r3, [pc, #44]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b63a:	430a      	orrs	r2, r1
 801b63c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	2280      	movs	r2, #128	@ 0x80
 801b644:	4013      	ands	r3, r2
 801b646:	d009      	beq.n	801b65c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801b648:	4b07      	ldr	r3, [pc, #28]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b64a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b64c:	4a10      	ldr	r2, [pc, #64]	@ (801b690 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801b64e:	4013      	ands	r3, r2
 801b650:	0019      	movs	r1, r3
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	69da      	ldr	r2, [r3, #28]
 801b656:	4b04      	ldr	r3, [pc, #16]	@ (801b668 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b658:	430a      	orrs	r2, r1
 801b65a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801b65c:	2300      	movs	r3, #0
}
 801b65e:	0018      	movs	r0, r3
 801b660:	46bd      	mov	sp, r7
 801b662:	b006      	add	sp, #24
 801b664:	bd80      	pop	{r7, pc}
 801b666:	46c0      	nop			@ (mov r8, r8)
 801b668:	40021000 	.word	0x40021000
 801b66c:	40007000 	.word	0x40007000
 801b670:	fffcffff 	.word	0xfffcffff
 801b674:	fff7ffff 	.word	0xfff7ffff
 801b678:	00001388 	.word	0x00001388
 801b67c:	ffcfffff 	.word	0xffcfffff
 801b680:	efffffff 	.word	0xefffffff
 801b684:	fffff3ff 	.word	0xfffff3ff
 801b688:	ffffcfff 	.word	0xffffcfff
 801b68c:	fbffffff 	.word	0xfbffffff
 801b690:	fff3ffff 	.word	0xfff3ffff

0801b694 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801b694:	b5b0      	push	{r4, r5, r7, lr}
 801b696:	b084      	sub	sp, #16
 801b698:	af00      	add	r7, sp, #0
 801b69a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801b69c:	230f      	movs	r3, #15
 801b69e:	18fb      	adds	r3, r7, r3
 801b6a0:	2201      	movs	r2, #1
 801b6a2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d101      	bne.n	801b6ae <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801b6aa:	2301      	movs	r3, #1
 801b6ac:	e088      	b.n	801b7c0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	2221      	movs	r2, #33	@ 0x21
 801b6b2:	5c9b      	ldrb	r3, [r3, r2]
 801b6b4:	b2db      	uxtb	r3, r3
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d107      	bne.n	801b6ca <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	2220      	movs	r2, #32
 801b6be:	2100      	movs	r1, #0
 801b6c0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	0018      	movs	r0, r3
 801b6c6:	f7f2 facd 	bl	800dc64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	2221      	movs	r2, #33	@ 0x21
 801b6ce:	2102      	movs	r1, #2
 801b6d0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	68db      	ldr	r3, [r3, #12]
 801b6d8:	2210      	movs	r2, #16
 801b6da:	4013      	ands	r3, r2
 801b6dc:	2b10      	cmp	r3, #16
 801b6de:	d05f      	beq.n	801b7a0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	22ca      	movs	r2, #202	@ 0xca
 801b6e6:	625a      	str	r2, [r3, #36]	@ 0x24
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	2253      	movs	r2, #83	@ 0x53
 801b6ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801b6f0:	250f      	movs	r5, #15
 801b6f2:	197c      	adds	r4, r7, r5
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	0018      	movs	r0, r3
 801b6f8:	f000 fa99 	bl	801bc2e <RTC_EnterInitMode>
 801b6fc:	0003      	movs	r3, r0
 801b6fe:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801b700:	0028      	movs	r0, r5
 801b702:	183b      	adds	r3, r7, r0
 801b704:	781b      	ldrb	r3, [r3, #0]
 801b706:	2b00      	cmp	r3, #0
 801b708:	d12c      	bne.n	801b764 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	689a      	ldr	r2, [r3, #8]
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	492c      	ldr	r1, [pc, #176]	@ (801b7c8 <HAL_RTC_Init+0x134>)
 801b716:	400a      	ands	r2, r1
 801b718:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	6899      	ldr	r1, [r3, #8]
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	685a      	ldr	r2, [r3, #4]
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	691b      	ldr	r3, [r3, #16]
 801b728:	431a      	orrs	r2, r3
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	699b      	ldr	r3, [r3, #24]
 801b72e:	431a      	orrs	r2, r3
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	430a      	orrs	r2, r1
 801b736:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	687a      	ldr	r2, [r7, #4]
 801b73e:	68d2      	ldr	r2, [r2, #12]
 801b740:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	6919      	ldr	r1, [r3, #16]
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	689b      	ldr	r3, [r3, #8]
 801b74c:	041a      	lsls	r2, r3, #16
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	430a      	orrs	r2, r1
 801b754:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801b756:	183c      	adds	r4, r7, r0
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	0018      	movs	r0, r3
 801b75c:	f000 faab 	bl	801bcb6 <RTC_ExitInitMode>
 801b760:	0003      	movs	r3, r0
 801b762:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801b764:	230f      	movs	r3, #15
 801b766:	18fb      	adds	r3, r7, r3
 801b768:	781b      	ldrb	r3, [r3, #0]
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d113      	bne.n	801b796 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	2103      	movs	r1, #3
 801b77a:	438a      	bics	r2, r1
 801b77c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	69da      	ldr	r2, [r3, #28]
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	695b      	ldr	r3, [r3, #20]
 801b78c:	431a      	orrs	r2, r3
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	430a      	orrs	r2, r1
 801b794:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	22ff      	movs	r2, #255	@ 0xff
 801b79c:	625a      	str	r2, [r3, #36]	@ 0x24
 801b79e:	e003      	b.n	801b7a8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801b7a0:	230f      	movs	r3, #15
 801b7a2:	18fb      	adds	r3, r7, r3
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801b7a8:	230f      	movs	r3, #15
 801b7aa:	18fb      	adds	r3, r7, r3
 801b7ac:	781b      	ldrb	r3, [r3, #0]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d103      	bne.n	801b7ba <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	2221      	movs	r2, #33	@ 0x21
 801b7b6:	2101      	movs	r1, #1
 801b7b8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801b7ba:	230f      	movs	r3, #15
 801b7bc:	18fb      	adds	r3, r7, r3
 801b7be:	781b      	ldrb	r3, [r3, #0]
}
 801b7c0:	0018      	movs	r0, r3
 801b7c2:	46bd      	mov	sp, r7
 801b7c4:	b004      	add	sp, #16
 801b7c6:	bdb0      	pop	{r4, r5, r7, pc}
 801b7c8:	ff8fffbf 	.word	0xff8fffbf

0801b7cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b7cc:	b5b0      	push	{r4, r5, r7, lr}
 801b7ce:	b086      	sub	sp, #24
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	60f8      	str	r0, [r7, #12]
 801b7d4:	60b9      	str	r1, [r7, #8]
 801b7d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b7d8:	2300      	movs	r3, #0
 801b7da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	2220      	movs	r2, #32
 801b7e0:	5c9b      	ldrb	r3, [r3, r2]
 801b7e2:	2b01      	cmp	r3, #1
 801b7e4:	d101      	bne.n	801b7ea <HAL_RTC_SetTime+0x1e>
 801b7e6:	2302      	movs	r3, #2
 801b7e8:	e092      	b.n	801b910 <HAL_RTC_SetTime+0x144>
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	2220      	movs	r2, #32
 801b7ee:	2101      	movs	r1, #1
 801b7f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b7f2:	68fb      	ldr	r3, [r7, #12]
 801b7f4:	2221      	movs	r2, #33	@ 0x21
 801b7f6:	2102      	movs	r1, #2
 801b7f8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d125      	bne.n	801b84c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	689b      	ldr	r3, [r3, #8]
 801b806:	2240      	movs	r2, #64	@ 0x40
 801b808:	4013      	ands	r3, r2
 801b80a:	d102      	bne.n	801b812 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b80c:	68bb      	ldr	r3, [r7, #8]
 801b80e:	2200      	movs	r2, #0
 801b810:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b812:	68bb      	ldr	r3, [r7, #8]
 801b814:	781b      	ldrb	r3, [r3, #0]
 801b816:	0018      	movs	r0, r3
 801b818:	f000 fa77 	bl	801bd0a <RTC_ByteToBcd2>
 801b81c:	0003      	movs	r3, r0
 801b81e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	785b      	ldrb	r3, [r3, #1]
 801b824:	0018      	movs	r0, r3
 801b826:	f000 fa70 	bl	801bd0a <RTC_ByteToBcd2>
 801b82a:	0003      	movs	r3, r0
 801b82c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b82e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	789b      	ldrb	r3, [r3, #2]
 801b834:	0018      	movs	r0, r3
 801b836:	f000 fa68 	bl	801bd0a <RTC_ByteToBcd2>
 801b83a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b83c:	0022      	movs	r2, r4
 801b83e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	78db      	ldrb	r3, [r3, #3]
 801b844:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b846:	4313      	orrs	r3, r2
 801b848:	617b      	str	r3, [r7, #20]
 801b84a:	e017      	b.n	801b87c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	689b      	ldr	r3, [r3, #8]
 801b852:	2240      	movs	r2, #64	@ 0x40
 801b854:	4013      	ands	r3, r2
 801b856:	d102      	bne.n	801b85e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b858:	68bb      	ldr	r3, [r7, #8]
 801b85a:	2200      	movs	r2, #0
 801b85c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b85e:	68bb      	ldr	r3, [r7, #8]
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b864:	68bb      	ldr	r3, [r7, #8]
 801b866:	785b      	ldrb	r3, [r3, #1]
 801b868:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b86a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801b86c:	68ba      	ldr	r2, [r7, #8]
 801b86e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b870:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801b872:	68bb      	ldr	r3, [r7, #8]
 801b874:	78db      	ldrb	r3, [r3, #3]
 801b876:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b878:	4313      	orrs	r3, r2
 801b87a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	681b      	ldr	r3, [r3, #0]
 801b880:	22ca      	movs	r2, #202	@ 0xca
 801b882:	625a      	str	r2, [r3, #36]	@ 0x24
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	2253      	movs	r2, #83	@ 0x53
 801b88a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b88c:	2513      	movs	r5, #19
 801b88e:	197c      	adds	r4, r7, r5
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	0018      	movs	r0, r3
 801b894:	f000 f9cb 	bl	801bc2e <RTC_EnterInitMode>
 801b898:	0003      	movs	r3, r0
 801b89a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b89c:	0028      	movs	r0, r5
 801b89e:	183b      	adds	r3, r7, r0
 801b8a0:	781b      	ldrb	r3, [r3, #0]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d120      	bne.n	801b8e8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	697a      	ldr	r2, [r7, #20]
 801b8ac:	491a      	ldr	r1, [pc, #104]	@ (801b918 <HAL_RTC_SetTime+0x14c>)
 801b8ae:	400a      	ands	r2, r1
 801b8b0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	689a      	ldr	r2, [r3, #8]
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	4917      	ldr	r1, [pc, #92]	@ (801b91c <HAL_RTC_SetTime+0x150>)
 801b8be:	400a      	ands	r2, r1
 801b8c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	6899      	ldr	r1, [r3, #8]
 801b8c8:	68bb      	ldr	r3, [r7, #8]
 801b8ca:	68da      	ldr	r2, [r3, #12]
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	691b      	ldr	r3, [r3, #16]
 801b8d0:	431a      	orrs	r2, r3
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	430a      	orrs	r2, r1
 801b8d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b8da:	183c      	adds	r4, r7, r0
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	0018      	movs	r0, r3
 801b8e0:	f000 f9e9 	bl	801bcb6 <RTC_ExitInitMode>
 801b8e4:	0003      	movs	r3, r0
 801b8e6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b8e8:	2313      	movs	r3, #19
 801b8ea:	18fb      	adds	r3, r7, r3
 801b8ec:	781b      	ldrb	r3, [r3, #0]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d103      	bne.n	801b8fa <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	2221      	movs	r2, #33	@ 0x21
 801b8f6:	2101      	movs	r1, #1
 801b8f8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	22ff      	movs	r2, #255	@ 0xff
 801b900:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	2220      	movs	r2, #32
 801b906:	2100      	movs	r1, #0
 801b908:	5499      	strb	r1, [r3, r2]

  return status;
 801b90a:	2313      	movs	r3, #19
 801b90c:	18fb      	adds	r3, r7, r3
 801b90e:	781b      	ldrb	r3, [r3, #0]
}
 801b910:	0018      	movs	r0, r3
 801b912:	46bd      	mov	sp, r7
 801b914:	b006      	add	sp, #24
 801b916:	bdb0      	pop	{r4, r5, r7, pc}
 801b918:	007f7f7f 	.word	0x007f7f7f
 801b91c:	fffbffff 	.word	0xfffbffff

0801b920 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b086      	sub	sp, #24
 801b924:	af00      	add	r7, sp, #0
 801b926:	60f8      	str	r0, [r7, #12]
 801b928:	60b9      	str	r1, [r7, #8]
 801b92a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b92c:	2300      	movs	r3, #0
 801b92e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b936:	68bb      	ldr	r3, [r7, #8]
 801b938:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	691b      	ldr	r3, [r3, #16]
 801b940:	045b      	lsls	r3, r3, #17
 801b942:	0c5a      	lsrs	r2, r3, #17
 801b944:	68bb      	ldr	r3, [r7, #8]
 801b946:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	4a22      	ldr	r2, [pc, #136]	@ (801b9d8 <HAL_RTC_GetTime+0xb8>)
 801b950:	4013      	ands	r3, r2
 801b952:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801b954:	697b      	ldr	r3, [r7, #20]
 801b956:	0c1b      	lsrs	r3, r3, #16
 801b958:	b2db      	uxtb	r3, r3
 801b95a:	223f      	movs	r2, #63	@ 0x3f
 801b95c:	4013      	ands	r3, r2
 801b95e:	b2da      	uxtb	r2, r3
 801b960:	68bb      	ldr	r3, [r7, #8]
 801b962:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801b964:	697b      	ldr	r3, [r7, #20]
 801b966:	0a1b      	lsrs	r3, r3, #8
 801b968:	b2db      	uxtb	r3, r3
 801b96a:	227f      	movs	r2, #127	@ 0x7f
 801b96c:	4013      	ands	r3, r2
 801b96e:	b2da      	uxtb	r2, r3
 801b970:	68bb      	ldr	r3, [r7, #8]
 801b972:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801b974:	697b      	ldr	r3, [r7, #20]
 801b976:	b2db      	uxtb	r3, r3
 801b978:	227f      	movs	r2, #127	@ 0x7f
 801b97a:	4013      	ands	r3, r2
 801b97c:	b2da      	uxtb	r2, r3
 801b97e:	68bb      	ldr	r3, [r7, #8]
 801b980:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801b982:	697b      	ldr	r3, [r7, #20]
 801b984:	0d9b      	lsrs	r3, r3, #22
 801b986:	b2db      	uxtb	r3, r3
 801b988:	2201      	movs	r2, #1
 801b98a:	4013      	ands	r3, r2
 801b98c:	b2da      	uxtb	r2, r3
 801b98e:	68bb      	ldr	r3, [r7, #8]
 801b990:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d11a      	bne.n	801b9ce <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801b998:	68bb      	ldr	r3, [r7, #8]
 801b99a:	781b      	ldrb	r3, [r3, #0]
 801b99c:	0018      	movs	r0, r3
 801b99e:	f000 f9d5 	bl	801bd4c <RTC_Bcd2ToByte>
 801b9a2:	0003      	movs	r3, r0
 801b9a4:	001a      	movs	r2, r3
 801b9a6:	68bb      	ldr	r3, [r7, #8]
 801b9a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801b9aa:	68bb      	ldr	r3, [r7, #8]
 801b9ac:	785b      	ldrb	r3, [r3, #1]
 801b9ae:	0018      	movs	r0, r3
 801b9b0:	f000 f9cc 	bl	801bd4c <RTC_Bcd2ToByte>
 801b9b4:	0003      	movs	r3, r0
 801b9b6:	001a      	movs	r2, r3
 801b9b8:	68bb      	ldr	r3, [r7, #8]
 801b9ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801b9bc:	68bb      	ldr	r3, [r7, #8]
 801b9be:	789b      	ldrb	r3, [r3, #2]
 801b9c0:	0018      	movs	r0, r3
 801b9c2:	f000 f9c3 	bl	801bd4c <RTC_Bcd2ToByte>
 801b9c6:	0003      	movs	r3, r0
 801b9c8:	001a      	movs	r2, r3
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801b9ce:	2300      	movs	r3, #0
}
 801b9d0:	0018      	movs	r0, r3
 801b9d2:	46bd      	mov	sp, r7
 801b9d4:	b006      	add	sp, #24
 801b9d6:	bd80      	pop	{r7, pc}
 801b9d8:	007f7f7f 	.word	0x007f7f7f

0801b9dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b9dc:	b5b0      	push	{r4, r5, r7, lr}
 801b9de:	b086      	sub	sp, #24
 801b9e0:	af00      	add	r7, sp, #0
 801b9e2:	60f8      	str	r0, [r7, #12]
 801b9e4:	60b9      	str	r1, [r7, #8]
 801b9e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	2220      	movs	r2, #32
 801b9f0:	5c9b      	ldrb	r3, [r3, r2]
 801b9f2:	2b01      	cmp	r3, #1
 801b9f4:	d101      	bne.n	801b9fa <HAL_RTC_SetDate+0x1e>
 801b9f6:	2302      	movs	r3, #2
 801b9f8:	e07e      	b.n	801baf8 <HAL_RTC_SetDate+0x11c>
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	2220      	movs	r2, #32
 801b9fe:	2101      	movs	r1, #1
 801ba00:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	2221      	movs	r2, #33	@ 0x21
 801ba06:	2102      	movs	r1, #2
 801ba08:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d10e      	bne.n	801ba2e <HAL_RTC_SetDate+0x52>
 801ba10:	68bb      	ldr	r3, [r7, #8]
 801ba12:	785b      	ldrb	r3, [r3, #1]
 801ba14:	001a      	movs	r2, r3
 801ba16:	2310      	movs	r3, #16
 801ba18:	4013      	ands	r3, r2
 801ba1a:	d008      	beq.n	801ba2e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801ba1c:	68bb      	ldr	r3, [r7, #8]
 801ba1e:	785b      	ldrb	r3, [r3, #1]
 801ba20:	2210      	movs	r2, #16
 801ba22:	4393      	bics	r3, r2
 801ba24:	b2db      	uxtb	r3, r3
 801ba26:	330a      	adds	r3, #10
 801ba28:	b2da      	uxtb	r2, r3
 801ba2a:	68bb      	ldr	r3, [r7, #8]
 801ba2c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d11c      	bne.n	801ba6e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801ba34:	68bb      	ldr	r3, [r7, #8]
 801ba36:	78db      	ldrb	r3, [r3, #3]
 801ba38:	0018      	movs	r0, r3
 801ba3a:	f000 f966 	bl	801bd0a <RTC_ByteToBcd2>
 801ba3e:	0003      	movs	r3, r0
 801ba40:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801ba42:	68bb      	ldr	r3, [r7, #8]
 801ba44:	785b      	ldrb	r3, [r3, #1]
 801ba46:	0018      	movs	r0, r3
 801ba48:	f000 f95f 	bl	801bd0a <RTC_ByteToBcd2>
 801ba4c:	0003      	movs	r3, r0
 801ba4e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801ba50:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	789b      	ldrb	r3, [r3, #2]
 801ba56:	0018      	movs	r0, r3
 801ba58:	f000 f957 	bl	801bd0a <RTC_ByteToBcd2>
 801ba5c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801ba5e:	0022      	movs	r2, r4
 801ba60:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801ba62:	68bb      	ldr	r3, [r7, #8]
 801ba64:	781b      	ldrb	r3, [r3, #0]
 801ba66:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801ba68:	4313      	orrs	r3, r2
 801ba6a:	617b      	str	r3, [r7, #20]
 801ba6c:	e00e      	b.n	801ba8c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801ba6e:	68bb      	ldr	r3, [r7, #8]
 801ba70:	78db      	ldrb	r3, [r3, #3]
 801ba72:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801ba74:	68bb      	ldr	r3, [r7, #8]
 801ba76:	785b      	ldrb	r3, [r3, #1]
 801ba78:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801ba7a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801ba7c:	68ba      	ldr	r2, [r7, #8]
 801ba7e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801ba80:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	781b      	ldrb	r3, [r3, #0]
 801ba86:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801ba88:	4313      	orrs	r3, r2
 801ba8a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	22ca      	movs	r2, #202	@ 0xca
 801ba92:	625a      	str	r2, [r3, #36]	@ 0x24
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	2253      	movs	r2, #83	@ 0x53
 801ba9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801ba9c:	2513      	movs	r5, #19
 801ba9e:	197c      	adds	r4, r7, r5
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	0018      	movs	r0, r3
 801baa4:	f000 f8c3 	bl	801bc2e <RTC_EnterInitMode>
 801baa8:	0003      	movs	r3, r0
 801baaa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801baac:	0028      	movs	r0, r5
 801baae:	183b      	adds	r3, r7, r0
 801bab0:	781b      	ldrb	r3, [r3, #0]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d10c      	bne.n	801bad0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	697a      	ldr	r2, [r7, #20]
 801babc:	4910      	ldr	r1, [pc, #64]	@ (801bb00 <HAL_RTC_SetDate+0x124>)
 801babe:	400a      	ands	r2, r1
 801bac0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801bac2:	183c      	adds	r4, r7, r0
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	0018      	movs	r0, r3
 801bac8:	f000 f8f5 	bl	801bcb6 <RTC_ExitInitMode>
 801bacc:	0003      	movs	r3, r0
 801bace:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801bad0:	2313      	movs	r3, #19
 801bad2:	18fb      	adds	r3, r7, r3
 801bad4:	781b      	ldrb	r3, [r3, #0]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d103      	bne.n	801bae2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	2221      	movs	r2, #33	@ 0x21
 801bade:	2101      	movs	r1, #1
 801bae0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	22ff      	movs	r2, #255	@ 0xff
 801bae8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	2220      	movs	r2, #32
 801baee:	2100      	movs	r1, #0
 801baf0:	5499      	strb	r1, [r3, r2]

  return status;
 801baf2:	2313      	movs	r3, #19
 801baf4:	18fb      	adds	r3, r7, r3
 801baf6:	781b      	ldrb	r3, [r3, #0]
}
 801baf8:	0018      	movs	r0, r3
 801bafa:	46bd      	mov	sp, r7
 801bafc:	b006      	add	sp, #24
 801bafe:	bdb0      	pop	{r4, r5, r7, pc}
 801bb00:	00ffff3f 	.word	0x00ffff3f

0801bb04 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b086      	sub	sp, #24
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	60f8      	str	r0, [r7, #12]
 801bb0c:	60b9      	str	r1, [r7, #8]
 801bb0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801bb10:	2300      	movs	r3, #0
 801bb12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	685b      	ldr	r3, [r3, #4]
 801bb1a:	4a21      	ldr	r2, [pc, #132]	@ (801bba0 <HAL_RTC_GetDate+0x9c>)
 801bb1c:	4013      	ands	r3, r2
 801bb1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801bb20:	697b      	ldr	r3, [r7, #20]
 801bb22:	0c1b      	lsrs	r3, r3, #16
 801bb24:	b2da      	uxtb	r2, r3
 801bb26:	68bb      	ldr	r3, [r7, #8]
 801bb28:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801bb2a:	697b      	ldr	r3, [r7, #20]
 801bb2c:	0a1b      	lsrs	r3, r3, #8
 801bb2e:	b2db      	uxtb	r3, r3
 801bb30:	221f      	movs	r2, #31
 801bb32:	4013      	ands	r3, r2
 801bb34:	b2da      	uxtb	r2, r3
 801bb36:	68bb      	ldr	r3, [r7, #8]
 801bb38:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801bb3a:	697b      	ldr	r3, [r7, #20]
 801bb3c:	b2db      	uxtb	r3, r3
 801bb3e:	223f      	movs	r2, #63	@ 0x3f
 801bb40:	4013      	ands	r3, r2
 801bb42:	b2da      	uxtb	r2, r3
 801bb44:	68bb      	ldr	r3, [r7, #8]
 801bb46:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801bb48:	697b      	ldr	r3, [r7, #20]
 801bb4a:	0b5b      	lsrs	r3, r3, #13
 801bb4c:	b2db      	uxtb	r3, r3
 801bb4e:	2207      	movs	r2, #7
 801bb50:	4013      	ands	r3, r2
 801bb52:	b2da      	uxtb	r2, r3
 801bb54:	68bb      	ldr	r3, [r7, #8]
 801bb56:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d11a      	bne.n	801bb94 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	78db      	ldrb	r3, [r3, #3]
 801bb62:	0018      	movs	r0, r3
 801bb64:	f000 f8f2 	bl	801bd4c <RTC_Bcd2ToByte>
 801bb68:	0003      	movs	r3, r0
 801bb6a:	001a      	movs	r2, r3
 801bb6c:	68bb      	ldr	r3, [r7, #8]
 801bb6e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801bb70:	68bb      	ldr	r3, [r7, #8]
 801bb72:	785b      	ldrb	r3, [r3, #1]
 801bb74:	0018      	movs	r0, r3
 801bb76:	f000 f8e9 	bl	801bd4c <RTC_Bcd2ToByte>
 801bb7a:	0003      	movs	r3, r0
 801bb7c:	001a      	movs	r2, r3
 801bb7e:	68bb      	ldr	r3, [r7, #8]
 801bb80:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801bb82:	68bb      	ldr	r3, [r7, #8]
 801bb84:	789b      	ldrb	r3, [r3, #2]
 801bb86:	0018      	movs	r0, r3
 801bb88:	f000 f8e0 	bl	801bd4c <RTC_Bcd2ToByte>
 801bb8c:	0003      	movs	r3, r0
 801bb8e:	001a      	movs	r2, r3
 801bb90:	68bb      	ldr	r3, [r7, #8]
 801bb92:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801bb94:	2300      	movs	r3, #0
}
 801bb96:	0018      	movs	r0, r3
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	b006      	add	sp, #24
 801bb9c:	bd80      	pop	{r7, pc}
 801bb9e:	46c0      	nop			@ (mov r8, r8)
 801bba0:	00ffff3f 	.word	0x00ffff3f

0801bba4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801bba4:	b580      	push	{r7, lr}
 801bba6:	b084      	sub	sp, #16
 801bba8:	af00      	add	r7, sp, #0
 801bbaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801bbac:	2300      	movs	r3, #0
 801bbae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	4a0e      	ldr	r2, [pc, #56]	@ (801bbf0 <HAL_RTC_WaitForSynchro+0x4c>)
 801bbb6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801bbb8:	f7f8 f9dc 	bl	8013f74 <HAL_GetTick>
 801bbbc:	0003      	movs	r3, r0
 801bbbe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801bbc0:	e00a      	b.n	801bbd8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801bbc2:	f7f8 f9d7 	bl	8013f74 <HAL_GetTick>
 801bbc6:	0002      	movs	r2, r0
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	1ad2      	subs	r2, r2, r3
 801bbcc:	23fa      	movs	r3, #250	@ 0xfa
 801bbce:	009b      	lsls	r3, r3, #2
 801bbd0:	429a      	cmp	r2, r3
 801bbd2:	d901      	bls.n	801bbd8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801bbd4:	2303      	movs	r3, #3
 801bbd6:	e006      	b.n	801bbe6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	68db      	ldr	r3, [r3, #12]
 801bbde:	2220      	movs	r2, #32
 801bbe0:	4013      	ands	r3, r2
 801bbe2:	d0ee      	beq.n	801bbc2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801bbe4:	2300      	movs	r3, #0
}
 801bbe6:	0018      	movs	r0, r3
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	b004      	add	sp, #16
 801bbec:	bd80      	pop	{r7, pc}
 801bbee:	46c0      	nop			@ (mov r8, r8)
 801bbf0:	0001ff5f 	.word	0x0001ff5f

0801bbf4 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	22ca      	movs	r2, #202	@ 0xca
 801bc02:	625a      	str	r2, [r3, #36]	@ 0x24
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	2253      	movs	r2, #83	@ 0x53
 801bc0a:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	689a      	ldr	r2, [r3, #8]
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	2180      	movs	r1, #128	@ 0x80
 801bc18:	0249      	lsls	r1, r1, #9
 801bc1a:	430a      	orrs	r2, r1
 801bc1c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	22ff      	movs	r2, #255	@ 0xff
 801bc24:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801bc26:	46c0      	nop			@ (mov r8, r8)
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	b002      	add	sp, #8
 801bc2c:	bd80      	pop	{r7, pc}

0801bc2e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801bc2e:	b580      	push	{r7, lr}
 801bc30:	b084      	sub	sp, #16
 801bc32:	af00      	add	r7, sp, #0
 801bc34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801bc36:	2300      	movs	r3, #0
 801bc38:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801bc3a:	230f      	movs	r3, #15
 801bc3c:	18fb      	adds	r3, r7, r3
 801bc3e:	2200      	movs	r2, #0
 801bc40:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	68db      	ldr	r3, [r3, #12]
 801bc48:	2240      	movs	r2, #64	@ 0x40
 801bc4a:	4013      	ands	r3, r2
 801bc4c:	d12c      	bne.n	801bca8 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	68da      	ldr	r2, [r3, #12]
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	2180      	movs	r1, #128	@ 0x80
 801bc5a:	430a      	orrs	r2, r1
 801bc5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801bc5e:	f7f8 f989 	bl	8013f74 <HAL_GetTick>
 801bc62:	0003      	movs	r3, r0
 801bc64:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801bc66:	e014      	b.n	801bc92 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801bc68:	f7f8 f984 	bl	8013f74 <HAL_GetTick>
 801bc6c:	0002      	movs	r2, r0
 801bc6e:	68bb      	ldr	r3, [r7, #8]
 801bc70:	1ad2      	subs	r2, r2, r3
 801bc72:	200f      	movs	r0, #15
 801bc74:	183b      	adds	r3, r7, r0
 801bc76:	1839      	adds	r1, r7, r0
 801bc78:	7809      	ldrb	r1, [r1, #0]
 801bc7a:	7019      	strb	r1, [r3, #0]
 801bc7c:	23fa      	movs	r3, #250	@ 0xfa
 801bc7e:	009b      	lsls	r3, r3, #2
 801bc80:	429a      	cmp	r2, r3
 801bc82:	d906      	bls.n	801bc92 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	2221      	movs	r2, #33	@ 0x21
 801bc88:	2104      	movs	r1, #4
 801bc8a:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801bc8c:	183b      	adds	r3, r7, r0
 801bc8e:	2201      	movs	r2, #1
 801bc90:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	681b      	ldr	r3, [r3, #0]
 801bc96:	68db      	ldr	r3, [r3, #12]
 801bc98:	2240      	movs	r2, #64	@ 0x40
 801bc9a:	4013      	ands	r3, r2
 801bc9c:	d104      	bne.n	801bca8 <RTC_EnterInitMode+0x7a>
 801bc9e:	230f      	movs	r3, #15
 801bca0:	18fb      	adds	r3, r7, r3
 801bca2:	781b      	ldrb	r3, [r3, #0]
 801bca4:	2b01      	cmp	r3, #1
 801bca6:	d1df      	bne.n	801bc68 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801bca8:	230f      	movs	r3, #15
 801bcaa:	18fb      	adds	r3, r7, r3
 801bcac:	781b      	ldrb	r3, [r3, #0]
}
 801bcae:	0018      	movs	r0, r3
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	b004      	add	sp, #16
 801bcb4:	bd80      	pop	{r7, pc}

0801bcb6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801bcb6:	b590      	push	{r4, r7, lr}
 801bcb8:	b085      	sub	sp, #20
 801bcba:	af00      	add	r7, sp, #0
 801bcbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bcbe:	240f      	movs	r4, #15
 801bcc0:	193b      	adds	r3, r7, r4
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	68da      	ldr	r2, [r3, #12]
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	2180      	movs	r1, #128	@ 0x80
 801bcd2:	438a      	bics	r2, r1
 801bcd4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	689b      	ldr	r3, [r3, #8]
 801bcdc:	2220      	movs	r2, #32
 801bcde:	4013      	ands	r3, r2
 801bce0:	d10c      	bne.n	801bcfc <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	0018      	movs	r0, r3
 801bce6:	f7ff ff5d 	bl	801bba4 <HAL_RTC_WaitForSynchro>
 801bcea:	1e03      	subs	r3, r0, #0
 801bcec:	d006      	beq.n	801bcfc <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	2221      	movs	r2, #33	@ 0x21
 801bcf2:	2104      	movs	r1, #4
 801bcf4:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801bcf6:	193b      	adds	r3, r7, r4
 801bcf8:	2201      	movs	r2, #1
 801bcfa:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801bcfc:	230f      	movs	r3, #15
 801bcfe:	18fb      	adds	r3, r7, r3
 801bd00:	781b      	ldrb	r3, [r3, #0]
}
 801bd02:	0018      	movs	r0, r3
 801bd04:	46bd      	mov	sp, r7
 801bd06:	b005      	add	sp, #20
 801bd08:	bd90      	pop	{r4, r7, pc}

0801bd0a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801bd0a:	b580      	push	{r7, lr}
 801bd0c:	b084      	sub	sp, #16
 801bd0e:	af00      	add	r7, sp, #0
 801bd10:	0002      	movs	r2, r0
 801bd12:	1dfb      	adds	r3, r7, #7
 801bd14:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801bd16:	2300      	movs	r3, #0
 801bd18:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801bd1a:	e007      	b.n	801bd2c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	3301      	adds	r3, #1
 801bd20:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801bd22:	1dfb      	adds	r3, r7, #7
 801bd24:	1dfa      	adds	r2, r7, #7
 801bd26:	7812      	ldrb	r2, [r2, #0]
 801bd28:	3a0a      	subs	r2, #10
 801bd2a:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801bd2c:	1dfb      	adds	r3, r7, #7
 801bd2e:	781b      	ldrb	r3, [r3, #0]
 801bd30:	2b09      	cmp	r3, #9
 801bd32:	d8f3      	bhi.n	801bd1c <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	b2db      	uxtb	r3, r3
 801bd38:	011b      	lsls	r3, r3, #4
 801bd3a:	b2da      	uxtb	r2, r3
 801bd3c:	1dfb      	adds	r3, r7, #7
 801bd3e:	781b      	ldrb	r3, [r3, #0]
 801bd40:	4313      	orrs	r3, r2
 801bd42:	b2db      	uxtb	r3, r3
}
 801bd44:	0018      	movs	r0, r3
 801bd46:	46bd      	mov	sp, r7
 801bd48:	b004      	add	sp, #16
 801bd4a:	bd80      	pop	{r7, pc}

0801bd4c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b084      	sub	sp, #16
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	0002      	movs	r2, r0
 801bd54:	1dfb      	adds	r3, r7, #7
 801bd56:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801bd58:	2300      	movs	r3, #0
 801bd5a:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801bd5c:	1dfb      	adds	r3, r7, #7
 801bd5e:	781b      	ldrb	r3, [r3, #0]
 801bd60:	091b      	lsrs	r3, r3, #4
 801bd62:	b2db      	uxtb	r3, r3
 801bd64:	001a      	movs	r2, r3
 801bd66:	0013      	movs	r3, r2
 801bd68:	009b      	lsls	r3, r3, #2
 801bd6a:	189b      	adds	r3, r3, r2
 801bd6c:	005b      	lsls	r3, r3, #1
 801bd6e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	b2da      	uxtb	r2, r3
 801bd74:	1dfb      	adds	r3, r7, #7
 801bd76:	781b      	ldrb	r3, [r3, #0]
 801bd78:	210f      	movs	r1, #15
 801bd7a:	400b      	ands	r3, r1
 801bd7c:	b2db      	uxtb	r3, r3
 801bd7e:	18d3      	adds	r3, r2, r3
 801bd80:	b2db      	uxtb	r3, r3
}
 801bd82:	0018      	movs	r0, r3
 801bd84:	46bd      	mov	sp, r7
 801bd86:	b004      	add	sp, #16
 801bd88:	bd80      	pop	{r7, pc}
	...

0801bd8c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801bd8c:	b580      	push	{r7, lr}
 801bd8e:	b086      	sub	sp, #24
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	60f8      	str	r0, [r7, #12]
 801bd94:	60b9      	str	r1, [r7, #8]
 801bd96:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801bd98:	4b64      	ldr	r3, [pc, #400]	@ (801bf2c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	22fa      	movs	r2, #250	@ 0xfa
 801bd9e:	01d1      	lsls	r1, r2, #7
 801bda0:	0018      	movs	r0, r3
 801bda2:	f7e4 f9ff 	bl	80001a4 <__udivsi3>
 801bda6:	0003      	movs	r3, r0
 801bda8:	001a      	movs	r2, r3
 801bdaa:	0013      	movs	r3, r2
 801bdac:	015b      	lsls	r3, r3, #5
 801bdae:	1a9b      	subs	r3, r3, r2
 801bdb0:	009b      	lsls	r3, r3, #2
 801bdb2:	189b      	adds	r3, r3, r2
 801bdb4:	00db      	lsls	r3, r3, #3
 801bdb6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	2220      	movs	r2, #32
 801bdbc:	5c9b      	ldrb	r3, [r3, r2]
 801bdbe:	2b01      	cmp	r3, #1
 801bdc0:	d101      	bne.n	801bdc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801bdc2:	2302      	movs	r3, #2
 801bdc4:	e0ad      	b.n	801bf22 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	2220      	movs	r2, #32
 801bdca:	2101      	movs	r1, #1
 801bdcc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	2221      	movs	r2, #33	@ 0x21
 801bdd2:	2102      	movs	r1, #2
 801bdd4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	22ca      	movs	r2, #202	@ 0xca
 801bddc:	625a      	str	r2, [r3, #36]	@ 0x24
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	2253      	movs	r2, #83	@ 0x53
 801bde4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	689a      	ldr	r2, [r3, #8]
 801bdec:	2380      	movs	r3, #128	@ 0x80
 801bdee:	00db      	lsls	r3, r3, #3
 801bdf0:	4013      	ands	r3, r2
 801bdf2:	d019      	beq.n	801be28 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801bdf4:	697b      	ldr	r3, [r7, #20]
 801bdf6:	3b01      	subs	r3, #1
 801bdf8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801bdfa:	697b      	ldr	r3, [r7, #20]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d10d      	bne.n	801be1c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	22ff      	movs	r2, #255	@ 0xff
 801be06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	2221      	movs	r2, #33	@ 0x21
 801be0c:	2103      	movs	r1, #3
 801be0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	2220      	movs	r2, #32
 801be14:	2100      	movs	r1, #0
 801be16:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801be18:	2303      	movs	r3, #3
 801be1a:	e082      	b.n	801bf22 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	68db      	ldr	r3, [r3, #12]
 801be22:	2204      	movs	r2, #4
 801be24:	4013      	ands	r3, r2
 801be26:	d1e5      	bne.n	801bdf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	689a      	ldr	r2, [r3, #8]
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	493f      	ldr	r1, [pc, #252]	@ (801bf30 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801be34:	400a      	ands	r2, r1
 801be36:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	68db      	ldr	r3, [r3, #12]
 801be3e:	22ff      	movs	r2, #255	@ 0xff
 801be40:	401a      	ands	r2, r3
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	493b      	ldr	r1, [pc, #236]	@ (801bf34 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801be48:	430a      	orrs	r2, r1
 801be4a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801be4c:	4b37      	ldr	r3, [pc, #220]	@ (801bf2c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	22fa      	movs	r2, #250	@ 0xfa
 801be52:	01d1      	lsls	r1, r2, #7
 801be54:	0018      	movs	r0, r3
 801be56:	f7e4 f9a5 	bl	80001a4 <__udivsi3>
 801be5a:	0003      	movs	r3, r0
 801be5c:	001a      	movs	r2, r3
 801be5e:	0013      	movs	r3, r2
 801be60:	015b      	lsls	r3, r3, #5
 801be62:	1a9b      	subs	r3, r3, r2
 801be64:	009b      	lsls	r3, r3, #2
 801be66:	189b      	adds	r3, r3, r2
 801be68:	00db      	lsls	r3, r3, #3
 801be6a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801be6c:	697b      	ldr	r3, [r7, #20]
 801be6e:	3b01      	subs	r3, #1
 801be70:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801be72:	697b      	ldr	r3, [r7, #20]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d10d      	bne.n	801be94 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	22ff      	movs	r2, #255	@ 0xff
 801be7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	2221      	movs	r2, #33	@ 0x21
 801be84:	2103      	movs	r1, #3
 801be86:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	2220      	movs	r2, #32
 801be8c:	2100      	movs	r1, #0
 801be8e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801be90:	2303      	movs	r3, #3
 801be92:	e046      	b.n	801bf22 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	68db      	ldr	r3, [r3, #12]
 801be9a:	2204      	movs	r2, #4
 801be9c:	4013      	ands	r3, r2
 801be9e:	d0e5      	beq.n	801be6c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	689a      	ldr	r2, [r3, #8]
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	681b      	ldr	r3, [r3, #0]
 801beaa:	2107      	movs	r1, #7
 801beac:	438a      	bics	r2, r1
 801beae:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	6899      	ldr	r1, [r3, #8]
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	687a      	ldr	r2, [r7, #4]
 801bebc:	430a      	orrs	r2, r1
 801bebe:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	68ba      	ldr	r2, [r7, #8]
 801bec6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801bec8:	4b1b      	ldr	r3, [pc, #108]	@ (801bf38 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801beca:	681a      	ldr	r2, [r3, #0]
 801becc:	4b1a      	ldr	r3, [pc, #104]	@ (801bf38 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bece:	2180      	movs	r1, #128	@ 0x80
 801bed0:	0349      	lsls	r1, r1, #13
 801bed2:	430a      	orrs	r2, r1
 801bed4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801bed6:	4b18      	ldr	r3, [pc, #96]	@ (801bf38 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bed8:	689a      	ldr	r2, [r3, #8]
 801beda:	4b17      	ldr	r3, [pc, #92]	@ (801bf38 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bedc:	2180      	movs	r1, #128	@ 0x80
 801bede:	0349      	lsls	r1, r1, #13
 801bee0:	430a      	orrs	r2, r1
 801bee2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	689a      	ldr	r2, [r3, #8]
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	2180      	movs	r1, #128	@ 0x80
 801bef0:	01c9      	lsls	r1, r1, #7
 801bef2:	430a      	orrs	r2, r1
 801bef4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	689a      	ldr	r2, [r3, #8]
 801befc:	68fb      	ldr	r3, [r7, #12]
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	2180      	movs	r1, #128	@ 0x80
 801bf02:	00c9      	lsls	r1, r1, #3
 801bf04:	430a      	orrs	r2, r1
 801bf06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	22ff      	movs	r2, #255	@ 0xff
 801bf0e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801bf10:	68fb      	ldr	r3, [r7, #12]
 801bf12:	2221      	movs	r2, #33	@ 0x21
 801bf14:	2101      	movs	r1, #1
 801bf16:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801bf18:	68fb      	ldr	r3, [r7, #12]
 801bf1a:	2220      	movs	r2, #32
 801bf1c:	2100      	movs	r1, #0
 801bf1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bf20:	2300      	movs	r3, #0
}
 801bf22:	0018      	movs	r0, r3
 801bf24:	46bd      	mov	sp, r7
 801bf26:	b006      	add	sp, #24
 801bf28:	bd80      	pop	{r7, pc}
 801bf2a:	46c0      	nop			@ (mov r8, r8)
 801bf2c:	200000e4 	.word	0x200000e4
 801bf30:	fffffbff 	.word	0xfffffbff
 801bf34:	fffffb7f 	.word	0xfffffb7f
 801bf38:	40010400 	.word	0x40010400

0801bf3c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801bf3c:	b580      	push	{r7, lr}
 801bf3e:	b084      	sub	sp, #16
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801bf44:	2300      	movs	r3, #0
 801bf46:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	2220      	movs	r2, #32
 801bf4c:	5c9b      	ldrb	r3, [r3, r2]
 801bf4e:	2b01      	cmp	r3, #1
 801bf50:	d101      	bne.n	801bf56 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801bf52:	2302      	movs	r3, #2
 801bf54:	e04e      	b.n	801bff4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	2220      	movs	r2, #32
 801bf5a:	2101      	movs	r1, #1
 801bf5c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	2221      	movs	r2, #33	@ 0x21
 801bf62:	2102      	movs	r1, #2
 801bf64:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	22ca      	movs	r2, #202	@ 0xca
 801bf6c:	625a      	str	r2, [r3, #36]	@ 0x24
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	2253      	movs	r2, #83	@ 0x53
 801bf74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	689a      	ldr	r2, [r3, #8]
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	491e      	ldr	r1, [pc, #120]	@ (801bffc <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801bf82:	400a      	ands	r2, r1
 801bf84:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	689a      	ldr	r2, [r3, #8]
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	491b      	ldr	r1, [pc, #108]	@ (801c000 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801bf92:	400a      	ands	r2, r1
 801bf94:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801bf96:	f7f7 ffed 	bl	8013f74 <HAL_GetTick>
 801bf9a:	0003      	movs	r3, r0
 801bf9c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bf9e:	e016      	b.n	801bfce <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801bfa0:	f7f7 ffe8 	bl	8013f74 <HAL_GetTick>
 801bfa4:	0002      	movs	r2, r0
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	1ad2      	subs	r2, r2, r3
 801bfaa:	23fa      	movs	r3, #250	@ 0xfa
 801bfac:	009b      	lsls	r3, r3, #2
 801bfae:	429a      	cmp	r2, r3
 801bfb0:	d90d      	bls.n	801bfce <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	22ff      	movs	r2, #255	@ 0xff
 801bfb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	2221      	movs	r2, #33	@ 0x21
 801bfbe:	2103      	movs	r1, #3
 801bfc0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	2220      	movs	r2, #32
 801bfc6:	2100      	movs	r1, #0
 801bfc8:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801bfca:	2303      	movs	r3, #3
 801bfcc:	e012      	b.n	801bff4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	68db      	ldr	r3, [r3, #12]
 801bfd4:	2204      	movs	r2, #4
 801bfd6:	4013      	ands	r3, r2
 801bfd8:	d0e2      	beq.n	801bfa0 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	22ff      	movs	r2, #255	@ 0xff
 801bfe0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	2221      	movs	r2, #33	@ 0x21
 801bfe6:	2101      	movs	r1, #1
 801bfe8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	2220      	movs	r2, #32
 801bfee:	2100      	movs	r1, #0
 801bff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bff2:	2300      	movs	r3, #0
}
 801bff4:	0018      	movs	r0, r3
 801bff6:	46bd      	mov	sp, r7
 801bff8:	b004      	add	sp, #16
 801bffa:	bd80      	pop	{r7, pc}
 801bffc:	fffffbff 	.word	0xfffffbff
 801c000:	ffffbfff 	.word	0xffffbfff

0801c004 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801c004:	b580      	push	{r7, lr}
 801c006:	b082      	sub	sp, #8
 801c008:	af00      	add	r7, sp, #0
 801c00a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801c00c:	4b13      	ldr	r3, [pc, #76]	@ (801c05c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801c00e:	2280      	movs	r2, #128	@ 0x80
 801c010:	0352      	lsls	r2, r2, #13
 801c012:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	689a      	ldr	r2, [r3, #8]
 801c01a:	2380      	movs	r3, #128	@ 0x80
 801c01c:	01db      	lsls	r3, r3, #7
 801c01e:	4013      	ands	r3, r2
 801c020:	d014      	beq.n	801c04c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	68da      	ldr	r2, [r3, #12]
 801c028:	2380      	movs	r3, #128	@ 0x80
 801c02a:	00db      	lsls	r3, r3, #3
 801c02c:	4013      	ands	r3, r2
 801c02e:	d00d      	beq.n	801c04c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	68db      	ldr	r3, [r3, #12]
 801c036:	22ff      	movs	r2, #255	@ 0xff
 801c038:	401a      	ands	r2, r3
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	4908      	ldr	r1, [pc, #32]	@ (801c060 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801c040:	430a      	orrs	r2, r1
 801c042:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	0018      	movs	r0, r3
 801c048:	f000 f80c 	bl	801c064 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	2221      	movs	r2, #33	@ 0x21
 801c050:	2101      	movs	r1, #1
 801c052:	5499      	strb	r1, [r3, r2]
}
 801c054:	46c0      	nop			@ (mov r8, r8)
 801c056:	46bd      	mov	sp, r7
 801c058:	b002      	add	sp, #8
 801c05a:	bd80      	pop	{r7, pc}
 801c05c:	40010400 	.word	0x40010400
 801c060:	fffffb7f 	.word	0xfffffb7f

0801c064 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b082      	sub	sp, #8
 801c068:	af00      	add	r7, sp, #0
 801c06a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801c06c:	46c0      	nop			@ (mov r8, r8)
 801c06e:	46bd      	mov	sp, r7
 801c070:	b002      	add	sp, #8
 801c072:	bd80      	pop	{r7, pc}

0801c074 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b086      	sub	sp, #24
 801c078:	af00      	add	r7, sp, #0
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801c080:	2300      	movs	r3, #0
 801c082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	3350      	adds	r3, #80	@ 0x50
 801c08a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	009b      	lsls	r3, r3, #2
 801c090:	697a      	ldr	r2, [r7, #20]
 801c092:	18d3      	adds	r3, r2, r3
 801c094:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801c096:	697b      	ldr	r3, [r7, #20]
 801c098:	687a      	ldr	r2, [r7, #4]
 801c09a:	601a      	str	r2, [r3, #0]
}
 801c09c:	46c0      	nop			@ (mov r8, r8)
 801c09e:	46bd      	mov	sp, r7
 801c0a0:	b006      	add	sp, #24
 801c0a2:	bd80      	pop	{r7, pc}

0801c0a4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b084      	sub	sp, #16
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
 801c0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	3350      	adds	r3, #80	@ 0x50
 801c0b8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801c0ba:	683b      	ldr	r3, [r7, #0]
 801c0bc:	009b      	lsls	r3, r3, #2
 801c0be:	68fa      	ldr	r2, [r7, #12]
 801c0c0:	18d3      	adds	r3, r2, r3
 801c0c2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	681b      	ldr	r3, [r3, #0]
}
 801c0c8:	0018      	movs	r0, r3
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	b004      	add	sp, #16
 801c0ce:	bd80      	pop	{r7, pc}

0801c0d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801c0d0:	b580      	push	{r7, lr}
 801c0d2:	b082      	sub	sp, #8
 801c0d4:	af00      	add	r7, sp, #0
 801c0d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d101      	bne.n	801c0e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801c0de:	2301      	movs	r3, #1
 801c0e0:	e032      	b.n	801c148 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	2239      	movs	r2, #57	@ 0x39
 801c0e6:	5c9b      	ldrb	r3, [r3, r2]
 801c0e8:	b2db      	uxtb	r3, r3
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d107      	bne.n	801c0fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	2238      	movs	r2, #56	@ 0x38
 801c0f2:	2100      	movs	r1, #0
 801c0f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	0018      	movs	r0, r3
 801c0fa:	f7f6 ff15 	bl	8012f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	2239      	movs	r2, #57	@ 0x39
 801c102:	2102      	movs	r1, #2
 801c104:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681a      	ldr	r2, [r3, #0]
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	3304      	adds	r3, #4
 801c10e:	0019      	movs	r1, r3
 801c110:	0010      	movs	r0, r2
 801c112:	f000 fa1d 	bl	801c550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	223e      	movs	r2, #62	@ 0x3e
 801c11a:	2101      	movs	r1, #1
 801c11c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	223a      	movs	r2, #58	@ 0x3a
 801c122:	2101      	movs	r1, #1
 801c124:	5499      	strb	r1, [r3, r2]
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	223b      	movs	r2, #59	@ 0x3b
 801c12a:	2101      	movs	r1, #1
 801c12c:	5499      	strb	r1, [r3, r2]
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	223c      	movs	r2, #60	@ 0x3c
 801c132:	2101      	movs	r1, #1
 801c134:	5499      	strb	r1, [r3, r2]
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	223d      	movs	r2, #61	@ 0x3d
 801c13a:	2101      	movs	r1, #1
 801c13c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	2239      	movs	r2, #57	@ 0x39
 801c142:	2101      	movs	r1, #1
 801c144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c146:	2300      	movs	r3, #0
}
 801c148:	0018      	movs	r0, r3
 801c14a:	46bd      	mov	sp, r7
 801c14c:	b002      	add	sp, #8
 801c14e:	bd80      	pop	{r7, pc}

0801c150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801c150:	b580      	push	{r7, lr}
 801c152:	b084      	sub	sp, #16
 801c154:	af00      	add	r7, sp, #0
 801c156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	2239      	movs	r2, #57	@ 0x39
 801c15c:	5c9b      	ldrb	r3, [r3, r2]
 801c15e:	b2db      	uxtb	r3, r3
 801c160:	2b01      	cmp	r3, #1
 801c162:	d001      	beq.n	801c168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801c164:	2301      	movs	r3, #1
 801c166:	e033      	b.n	801c1d0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	2239      	movs	r2, #57	@ 0x39
 801c16c:	2102      	movs	r1, #2
 801c16e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	681a      	ldr	r2, [r3, #0]
 801c174:	2380      	movs	r3, #128	@ 0x80
 801c176:	05db      	lsls	r3, r3, #23
 801c178:	429a      	cmp	r2, r3
 801c17a:	d00e      	beq.n	801c19a <HAL_TIM_Base_Start+0x4a>
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	4a15      	ldr	r2, [pc, #84]	@ (801c1d8 <HAL_TIM_Base_Start+0x88>)
 801c182:	4293      	cmp	r3, r2
 801c184:	d009      	beq.n	801c19a <HAL_TIM_Base_Start+0x4a>
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	4a14      	ldr	r2, [pc, #80]	@ (801c1dc <HAL_TIM_Base_Start+0x8c>)
 801c18c:	4293      	cmp	r3, r2
 801c18e:	d004      	beq.n	801c19a <HAL_TIM_Base_Start+0x4a>
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	4a12      	ldr	r2, [pc, #72]	@ (801c1e0 <HAL_TIM_Base_Start+0x90>)
 801c196:	4293      	cmp	r3, r2
 801c198:	d111      	bne.n	801c1be <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	689b      	ldr	r3, [r3, #8]
 801c1a0:	2207      	movs	r2, #7
 801c1a2:	4013      	ands	r3, r2
 801c1a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	2b06      	cmp	r3, #6
 801c1aa:	d010      	beq.n	801c1ce <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	681a      	ldr	r2, [r3, #0]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	2101      	movs	r1, #1
 801c1b8:	430a      	orrs	r2, r1
 801c1ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c1bc:	e007      	b.n	801c1ce <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	681a      	ldr	r2, [r3, #0]
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	2101      	movs	r1, #1
 801c1ca:	430a      	orrs	r2, r1
 801c1cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c1ce:	2300      	movs	r3, #0
}
 801c1d0:	0018      	movs	r0, r3
 801c1d2:	46bd      	mov	sp, r7
 801c1d4:	b004      	add	sp, #16
 801c1d6:	bd80      	pop	{r7, pc}
 801c1d8:	40000400 	.word	0x40000400
 801c1dc:	40010800 	.word	0x40010800
 801c1e0:	40011400 	.word	0x40011400

0801c1e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b082      	sub	sp, #8
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	681b      	ldr	r3, [r3, #0]
 801c1f0:	6a1b      	ldr	r3, [r3, #32]
 801c1f2:	4a0a      	ldr	r2, [pc, #40]	@ (801c21c <HAL_TIM_Base_Stop+0x38>)
 801c1f4:	4013      	ands	r3, r2
 801c1f6:	d107      	bne.n	801c208 <HAL_TIM_Base_Stop+0x24>
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	681a      	ldr	r2, [r3, #0]
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	2101      	movs	r1, #1
 801c204:	438a      	bics	r2, r1
 801c206:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	2239      	movs	r2, #57	@ 0x39
 801c20c:	2101      	movs	r1, #1
 801c20e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801c210:	2300      	movs	r3, #0
}
 801c212:	0018      	movs	r0, r3
 801c214:	46bd      	mov	sp, r7
 801c216:	b002      	add	sp, #8
 801c218:	bd80      	pop	{r7, pc}
 801c21a:	46c0      	nop			@ (mov r8, r8)
 801c21c:	00001111 	.word	0x00001111

0801c220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801c220:	b580      	push	{r7, lr}
 801c222:	b082      	sub	sp, #8
 801c224:	af00      	add	r7, sp, #0
 801c226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d101      	bne.n	801c232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801c22e:	2301      	movs	r3, #1
 801c230:	e032      	b.n	801c298 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	2239      	movs	r2, #57	@ 0x39
 801c236:	5c9b      	ldrb	r3, [r3, r2]
 801c238:	b2db      	uxtb	r3, r3
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d107      	bne.n	801c24e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	2238      	movs	r2, #56	@ 0x38
 801c242:	2100      	movs	r1, #0
 801c244:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	0018      	movs	r0, r3
 801c24a:	f7f6 fe49 	bl	8012ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	2239      	movs	r2, #57	@ 0x39
 801c252:	2102      	movs	r1, #2
 801c254:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	681a      	ldr	r2, [r3, #0]
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	3304      	adds	r3, #4
 801c25e:	0019      	movs	r1, r3
 801c260:	0010      	movs	r0, r2
 801c262:	f000 f975 	bl	801c550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	223e      	movs	r2, #62	@ 0x3e
 801c26a:	2101      	movs	r1, #1
 801c26c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	223a      	movs	r2, #58	@ 0x3a
 801c272:	2101      	movs	r1, #1
 801c274:	5499      	strb	r1, [r3, r2]
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	223b      	movs	r2, #59	@ 0x3b
 801c27a:	2101      	movs	r1, #1
 801c27c:	5499      	strb	r1, [r3, r2]
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	223c      	movs	r2, #60	@ 0x3c
 801c282:	2101      	movs	r1, #1
 801c284:	5499      	strb	r1, [r3, r2]
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	223d      	movs	r2, #61	@ 0x3d
 801c28a:	2101      	movs	r1, #1
 801c28c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	2239      	movs	r2, #57	@ 0x39
 801c292:	2101      	movs	r1, #1
 801c294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c296:	2300      	movs	r3, #0
}
 801c298:	0018      	movs	r0, r3
 801c29a:	46bd      	mov	sp, r7
 801c29c:	b002      	add	sp, #8
 801c29e:	bd80      	pop	{r7, pc}

0801c2a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801c2a0:	b580      	push	{r7, lr}
 801c2a2:	b084      	sub	sp, #16
 801c2a4:	af00      	add	r7, sp, #0
 801c2a6:	6078      	str	r0, [r7, #4]
 801c2a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801c2aa:	683b      	ldr	r3, [r7, #0]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d108      	bne.n	801c2c2 <HAL_TIM_PWM_Start+0x22>
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	223a      	movs	r2, #58	@ 0x3a
 801c2b4:	5c9b      	ldrb	r3, [r3, r2]
 801c2b6:	b2db      	uxtb	r3, r3
 801c2b8:	3b01      	subs	r3, #1
 801c2ba:	1e5a      	subs	r2, r3, #1
 801c2bc:	4193      	sbcs	r3, r2
 801c2be:	b2db      	uxtb	r3, r3
 801c2c0:	e01f      	b.n	801c302 <HAL_TIM_PWM_Start+0x62>
 801c2c2:	683b      	ldr	r3, [r7, #0]
 801c2c4:	2b04      	cmp	r3, #4
 801c2c6:	d108      	bne.n	801c2da <HAL_TIM_PWM_Start+0x3a>
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	223b      	movs	r2, #59	@ 0x3b
 801c2cc:	5c9b      	ldrb	r3, [r3, r2]
 801c2ce:	b2db      	uxtb	r3, r3
 801c2d0:	3b01      	subs	r3, #1
 801c2d2:	1e5a      	subs	r2, r3, #1
 801c2d4:	4193      	sbcs	r3, r2
 801c2d6:	b2db      	uxtb	r3, r3
 801c2d8:	e013      	b.n	801c302 <HAL_TIM_PWM_Start+0x62>
 801c2da:	683b      	ldr	r3, [r7, #0]
 801c2dc:	2b08      	cmp	r3, #8
 801c2de:	d108      	bne.n	801c2f2 <HAL_TIM_PWM_Start+0x52>
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	223c      	movs	r2, #60	@ 0x3c
 801c2e4:	5c9b      	ldrb	r3, [r3, r2]
 801c2e6:	b2db      	uxtb	r3, r3
 801c2e8:	3b01      	subs	r3, #1
 801c2ea:	1e5a      	subs	r2, r3, #1
 801c2ec:	4193      	sbcs	r3, r2
 801c2ee:	b2db      	uxtb	r3, r3
 801c2f0:	e007      	b.n	801c302 <HAL_TIM_PWM_Start+0x62>
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	223d      	movs	r2, #61	@ 0x3d
 801c2f6:	5c9b      	ldrb	r3, [r3, r2]
 801c2f8:	b2db      	uxtb	r3, r3
 801c2fa:	3b01      	subs	r3, #1
 801c2fc:	1e5a      	subs	r2, r3, #1
 801c2fe:	4193      	sbcs	r3, r2
 801c300:	b2db      	uxtb	r3, r3
 801c302:	2b00      	cmp	r3, #0
 801c304:	d001      	beq.n	801c30a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801c306:	2301      	movs	r3, #1
 801c308:	e052      	b.n	801c3b0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d104      	bne.n	801c31a <HAL_TIM_PWM_Start+0x7a>
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	223a      	movs	r2, #58	@ 0x3a
 801c314:	2102      	movs	r1, #2
 801c316:	5499      	strb	r1, [r3, r2]
 801c318:	e013      	b.n	801c342 <HAL_TIM_PWM_Start+0xa2>
 801c31a:	683b      	ldr	r3, [r7, #0]
 801c31c:	2b04      	cmp	r3, #4
 801c31e:	d104      	bne.n	801c32a <HAL_TIM_PWM_Start+0x8a>
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	223b      	movs	r2, #59	@ 0x3b
 801c324:	2102      	movs	r1, #2
 801c326:	5499      	strb	r1, [r3, r2]
 801c328:	e00b      	b.n	801c342 <HAL_TIM_PWM_Start+0xa2>
 801c32a:	683b      	ldr	r3, [r7, #0]
 801c32c:	2b08      	cmp	r3, #8
 801c32e:	d104      	bne.n	801c33a <HAL_TIM_PWM_Start+0x9a>
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	223c      	movs	r2, #60	@ 0x3c
 801c334:	2102      	movs	r1, #2
 801c336:	5499      	strb	r1, [r3, r2]
 801c338:	e003      	b.n	801c342 <HAL_TIM_PWM_Start+0xa2>
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	223d      	movs	r2, #61	@ 0x3d
 801c33e:	2102      	movs	r1, #2
 801c340:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	6839      	ldr	r1, [r7, #0]
 801c348:	2201      	movs	r2, #1
 801c34a:	0018      	movs	r0, r3
 801c34c:	f000 fa62 	bl	801c814 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	681a      	ldr	r2, [r3, #0]
 801c354:	2380      	movs	r3, #128	@ 0x80
 801c356:	05db      	lsls	r3, r3, #23
 801c358:	429a      	cmp	r2, r3
 801c35a:	d00e      	beq.n	801c37a <HAL_TIM_PWM_Start+0xda>
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	4a15      	ldr	r2, [pc, #84]	@ (801c3b8 <HAL_TIM_PWM_Start+0x118>)
 801c362:	4293      	cmp	r3, r2
 801c364:	d009      	beq.n	801c37a <HAL_TIM_PWM_Start+0xda>
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	4a14      	ldr	r2, [pc, #80]	@ (801c3bc <HAL_TIM_PWM_Start+0x11c>)
 801c36c:	4293      	cmp	r3, r2
 801c36e:	d004      	beq.n	801c37a <HAL_TIM_PWM_Start+0xda>
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	4a12      	ldr	r2, [pc, #72]	@ (801c3c0 <HAL_TIM_PWM_Start+0x120>)
 801c376:	4293      	cmp	r3, r2
 801c378:	d111      	bne.n	801c39e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	689b      	ldr	r3, [r3, #8]
 801c380:	2207      	movs	r2, #7
 801c382:	4013      	ands	r3, r2
 801c384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	2b06      	cmp	r3, #6
 801c38a:	d010      	beq.n	801c3ae <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	681a      	ldr	r2, [r3, #0]
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	2101      	movs	r1, #1
 801c398:	430a      	orrs	r2, r1
 801c39a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801c39c:	e007      	b.n	801c3ae <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	681a      	ldr	r2, [r3, #0]
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	2101      	movs	r1, #1
 801c3aa:	430a      	orrs	r2, r1
 801c3ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c3ae:	2300      	movs	r3, #0
}
 801c3b0:	0018      	movs	r0, r3
 801c3b2:	46bd      	mov	sp, r7
 801c3b4:	b004      	add	sp, #16
 801c3b6:	bd80      	pop	{r7, pc}
 801c3b8:	40000400 	.word	0x40000400
 801c3bc:	40010800 	.word	0x40010800
 801c3c0:	40011400 	.word	0x40011400

0801c3c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801c3c4:	b580      	push	{r7, lr}
 801c3c6:	b086      	sub	sp, #24
 801c3c8:	af00      	add	r7, sp, #0
 801c3ca:	60f8      	str	r0, [r7, #12]
 801c3cc:	60b9      	str	r1, [r7, #8]
 801c3ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c3d0:	2317      	movs	r3, #23
 801c3d2:	18fb      	adds	r3, r7, r3
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	2238      	movs	r2, #56	@ 0x38
 801c3dc:	5c9b      	ldrb	r3, [r3, r2]
 801c3de:	2b01      	cmp	r3, #1
 801c3e0:	d101      	bne.n	801c3e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 801c3e2:	2302      	movs	r3, #2
 801c3e4:	e0ad      	b.n	801c542 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	2238      	movs	r2, #56	@ 0x38
 801c3ea:	2101      	movs	r1, #1
 801c3ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	2b0c      	cmp	r3, #12
 801c3f2:	d100      	bne.n	801c3f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 801c3f4:	e076      	b.n	801c4e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	2b0c      	cmp	r3, #12
 801c3fa:	d900      	bls.n	801c3fe <HAL_TIM_PWM_ConfigChannel+0x3a>
 801c3fc:	e095      	b.n	801c52a <HAL_TIM_PWM_ConfigChannel+0x166>
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	2b08      	cmp	r3, #8
 801c402:	d04e      	beq.n	801c4a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	2b08      	cmp	r3, #8
 801c408:	d900      	bls.n	801c40c <HAL_TIM_PWM_ConfigChannel+0x48>
 801c40a:	e08e      	b.n	801c52a <HAL_TIM_PWM_ConfigChannel+0x166>
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d003      	beq.n	801c41a <HAL_TIM_PWM_ConfigChannel+0x56>
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	2b04      	cmp	r3, #4
 801c416:	d021      	beq.n	801c45c <HAL_TIM_PWM_ConfigChannel+0x98>
 801c418:	e087      	b.n	801c52a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	68ba      	ldr	r2, [r7, #8]
 801c420:	0011      	movs	r1, r2
 801c422:	0018      	movs	r0, r3
 801c424:	f000 f8f2 	bl	801c60c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	699a      	ldr	r2, [r3, #24]
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	2108      	movs	r1, #8
 801c434:	430a      	orrs	r2, r1
 801c436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	699a      	ldr	r2, [r3, #24]
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	2104      	movs	r1, #4
 801c444:	438a      	bics	r2, r1
 801c446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	6999      	ldr	r1, [r3, #24]
 801c44e:	68bb      	ldr	r3, [r7, #8]
 801c450:	68da      	ldr	r2, [r3, #12]
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	430a      	orrs	r2, r1
 801c458:	619a      	str	r2, [r3, #24]
      break;
 801c45a:	e06b      	b.n	801c534 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	68ba      	ldr	r2, [r7, #8]
 801c462:	0011      	movs	r1, r2
 801c464:	0018      	movs	r0, r3
 801c466:	f000 f90d 	bl	801c684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	699a      	ldr	r2, [r3, #24]
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	2180      	movs	r1, #128	@ 0x80
 801c476:	0109      	lsls	r1, r1, #4
 801c478:	430a      	orrs	r2, r1
 801c47a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	699a      	ldr	r2, [r3, #24]
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	4931      	ldr	r1, [pc, #196]	@ (801c54c <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c488:	400a      	ands	r2, r1
 801c48a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	6999      	ldr	r1, [r3, #24]
 801c492:	68bb      	ldr	r3, [r7, #8]
 801c494:	68db      	ldr	r3, [r3, #12]
 801c496:	021a      	lsls	r2, r3, #8
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	430a      	orrs	r2, r1
 801c49e:	619a      	str	r2, [r3, #24]
      break;
 801c4a0:	e048      	b.n	801c534 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	68ba      	ldr	r2, [r7, #8]
 801c4a8:	0011      	movs	r1, r2
 801c4aa:	0018      	movs	r0, r3
 801c4ac:	f000 f92c 	bl	801c708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	69da      	ldr	r2, [r3, #28]
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	2108      	movs	r1, #8
 801c4bc:	430a      	orrs	r2, r1
 801c4be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	69da      	ldr	r2, [r3, #28]
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	2104      	movs	r1, #4
 801c4cc:	438a      	bics	r2, r1
 801c4ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	69d9      	ldr	r1, [r3, #28]
 801c4d6:	68bb      	ldr	r3, [r7, #8]
 801c4d8:	68da      	ldr	r2, [r3, #12]
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	430a      	orrs	r2, r1
 801c4e0:	61da      	str	r2, [r3, #28]
      break;
 801c4e2:	e027      	b.n	801c534 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	68ba      	ldr	r2, [r7, #8]
 801c4ea:	0011      	movs	r1, r2
 801c4ec:	0018      	movs	r0, r3
 801c4ee:	f000 f94b 	bl	801c788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	69da      	ldr	r2, [r3, #28]
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	2180      	movs	r1, #128	@ 0x80
 801c4fe:	0109      	lsls	r1, r1, #4
 801c500:	430a      	orrs	r2, r1
 801c502:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	69da      	ldr	r2, [r3, #28]
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	490f      	ldr	r1, [pc, #60]	@ (801c54c <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c510:	400a      	ands	r2, r1
 801c512:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	69d9      	ldr	r1, [r3, #28]
 801c51a:	68bb      	ldr	r3, [r7, #8]
 801c51c:	68db      	ldr	r3, [r3, #12]
 801c51e:	021a      	lsls	r2, r3, #8
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	430a      	orrs	r2, r1
 801c526:	61da      	str	r2, [r3, #28]
      break;
 801c528:	e004      	b.n	801c534 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801c52a:	2317      	movs	r3, #23
 801c52c:	18fb      	adds	r3, r7, r3
 801c52e:	2201      	movs	r2, #1
 801c530:	701a      	strb	r2, [r3, #0]
      break;
 801c532:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	2238      	movs	r2, #56	@ 0x38
 801c538:	2100      	movs	r1, #0
 801c53a:	5499      	strb	r1, [r3, r2]

  return status;
 801c53c:	2317      	movs	r3, #23
 801c53e:	18fb      	adds	r3, r7, r3
 801c540:	781b      	ldrb	r3, [r3, #0]
}
 801c542:	0018      	movs	r0, r3
 801c544:	46bd      	mov	sp, r7
 801c546:	b006      	add	sp, #24
 801c548:	bd80      	pop	{r7, pc}
 801c54a:	46c0      	nop			@ (mov r8, r8)
 801c54c:	fffffbff 	.word	0xfffffbff

0801c550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b084      	sub	sp, #16
 801c554:	af00      	add	r7, sp, #0
 801c556:	6078      	str	r0, [r7, #4]
 801c558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c560:	687a      	ldr	r2, [r7, #4]
 801c562:	2380      	movs	r3, #128	@ 0x80
 801c564:	05db      	lsls	r3, r3, #23
 801c566:	429a      	cmp	r2, r3
 801c568:	d00b      	beq.n	801c582 <TIM_Base_SetConfig+0x32>
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	4a23      	ldr	r2, [pc, #140]	@ (801c5fc <TIM_Base_SetConfig+0xac>)
 801c56e:	4293      	cmp	r3, r2
 801c570:	d007      	beq.n	801c582 <TIM_Base_SetConfig+0x32>
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	4a22      	ldr	r2, [pc, #136]	@ (801c600 <TIM_Base_SetConfig+0xb0>)
 801c576:	4293      	cmp	r3, r2
 801c578:	d003      	beq.n	801c582 <TIM_Base_SetConfig+0x32>
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	4a21      	ldr	r2, [pc, #132]	@ (801c604 <TIM_Base_SetConfig+0xb4>)
 801c57e:	4293      	cmp	r3, r2
 801c580:	d108      	bne.n	801c594 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	2270      	movs	r2, #112	@ 0x70
 801c586:	4393      	bics	r3, r2
 801c588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801c58a:	683b      	ldr	r3, [r7, #0]
 801c58c:	685b      	ldr	r3, [r3, #4]
 801c58e:	68fa      	ldr	r2, [r7, #12]
 801c590:	4313      	orrs	r3, r2
 801c592:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c594:	687a      	ldr	r2, [r7, #4]
 801c596:	2380      	movs	r3, #128	@ 0x80
 801c598:	05db      	lsls	r3, r3, #23
 801c59a:	429a      	cmp	r2, r3
 801c59c:	d00b      	beq.n	801c5b6 <TIM_Base_SetConfig+0x66>
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	4a16      	ldr	r2, [pc, #88]	@ (801c5fc <TIM_Base_SetConfig+0xac>)
 801c5a2:	4293      	cmp	r3, r2
 801c5a4:	d007      	beq.n	801c5b6 <TIM_Base_SetConfig+0x66>
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	4a15      	ldr	r2, [pc, #84]	@ (801c600 <TIM_Base_SetConfig+0xb0>)
 801c5aa:	4293      	cmp	r3, r2
 801c5ac:	d003      	beq.n	801c5b6 <TIM_Base_SetConfig+0x66>
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	4a14      	ldr	r2, [pc, #80]	@ (801c604 <TIM_Base_SetConfig+0xb4>)
 801c5b2:	4293      	cmp	r3, r2
 801c5b4:	d108      	bne.n	801c5c8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	4a13      	ldr	r2, [pc, #76]	@ (801c608 <TIM_Base_SetConfig+0xb8>)
 801c5ba:	4013      	ands	r3, r2
 801c5bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801c5be:	683b      	ldr	r3, [r7, #0]
 801c5c0:	68db      	ldr	r3, [r3, #12]
 801c5c2:	68fa      	ldr	r2, [r7, #12]
 801c5c4:	4313      	orrs	r3, r2
 801c5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	2280      	movs	r2, #128	@ 0x80
 801c5cc:	4393      	bics	r3, r2
 801c5ce:	001a      	movs	r2, r3
 801c5d0:	683b      	ldr	r3, [r7, #0]
 801c5d2:	691b      	ldr	r3, [r3, #16]
 801c5d4:	4313      	orrs	r3, r2
 801c5d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	68fa      	ldr	r2, [r7, #12]
 801c5dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c5de:	683b      	ldr	r3, [r7, #0]
 801c5e0:	689a      	ldr	r2, [r3, #8]
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	681a      	ldr	r2, [r3, #0]
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	2201      	movs	r2, #1
 801c5f2:	615a      	str	r2, [r3, #20]
}
 801c5f4:	46c0      	nop			@ (mov r8, r8)
 801c5f6:	46bd      	mov	sp, r7
 801c5f8:	b004      	add	sp, #16
 801c5fa:	bd80      	pop	{r7, pc}
 801c5fc:	40000400 	.word	0x40000400
 801c600:	40010800 	.word	0x40010800
 801c604:	40011400 	.word	0x40011400
 801c608:	fffffcff 	.word	0xfffffcff

0801c60c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c60c:	b580      	push	{r7, lr}
 801c60e:	b086      	sub	sp, #24
 801c610:	af00      	add	r7, sp, #0
 801c612:	6078      	str	r0, [r7, #4]
 801c614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	6a1b      	ldr	r3, [r3, #32]
 801c61a:	2201      	movs	r2, #1
 801c61c:	4393      	bics	r3, r2
 801c61e:	001a      	movs	r2, r3
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	6a1b      	ldr	r3, [r3, #32]
 801c628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	685b      	ldr	r3, [r3, #4]
 801c62e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	699b      	ldr	r3, [r3, #24]
 801c634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	2270      	movs	r2, #112	@ 0x70
 801c63a:	4393      	bics	r3, r2
 801c63c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	2203      	movs	r2, #3
 801c642:	4393      	bics	r3, r2
 801c644:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	68fa      	ldr	r2, [r7, #12]
 801c64c:	4313      	orrs	r3, r2
 801c64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801c650:	697b      	ldr	r3, [r7, #20]
 801c652:	2202      	movs	r2, #2
 801c654:	4393      	bics	r3, r2
 801c656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801c658:	683b      	ldr	r3, [r7, #0]
 801c65a:	689b      	ldr	r3, [r3, #8]
 801c65c:	697a      	ldr	r2, [r7, #20]
 801c65e:	4313      	orrs	r3, r2
 801c660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	693a      	ldr	r2, [r7, #16]
 801c666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	68fa      	ldr	r2, [r7, #12]
 801c66c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801c66e:	683b      	ldr	r3, [r7, #0]
 801c670:	685a      	ldr	r2, [r3, #4]
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	697a      	ldr	r2, [r7, #20]
 801c67a:	621a      	str	r2, [r3, #32]
}
 801c67c:	46c0      	nop			@ (mov r8, r8)
 801c67e:	46bd      	mov	sp, r7
 801c680:	b006      	add	sp, #24
 801c682:	bd80      	pop	{r7, pc}

0801c684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c684:	b580      	push	{r7, lr}
 801c686:	b086      	sub	sp, #24
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
 801c68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	6a1b      	ldr	r3, [r3, #32]
 801c692:	2210      	movs	r2, #16
 801c694:	4393      	bics	r3, r2
 801c696:	001a      	movs	r2, r3
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	6a1b      	ldr	r3, [r3, #32]
 801c6a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	685b      	ldr	r3, [r3, #4]
 801c6a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	699b      	ldr	r3, [r3, #24]
 801c6ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	4a13      	ldr	r2, [pc, #76]	@ (801c700 <TIM_OC2_SetConfig+0x7c>)
 801c6b2:	4013      	ands	r3, r2
 801c6b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	4a12      	ldr	r2, [pc, #72]	@ (801c704 <TIM_OC2_SetConfig+0x80>)
 801c6ba:	4013      	ands	r3, r2
 801c6bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c6be:	683b      	ldr	r3, [r7, #0]
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	021b      	lsls	r3, r3, #8
 801c6c4:	68fa      	ldr	r2, [r7, #12]
 801c6c6:	4313      	orrs	r3, r2
 801c6c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801c6ca:	697b      	ldr	r3, [r7, #20]
 801c6cc:	2220      	movs	r2, #32
 801c6ce:	4393      	bics	r3, r2
 801c6d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801c6d2:	683b      	ldr	r3, [r7, #0]
 801c6d4:	689b      	ldr	r3, [r3, #8]
 801c6d6:	011b      	lsls	r3, r3, #4
 801c6d8:	697a      	ldr	r2, [r7, #20]
 801c6da:	4313      	orrs	r3, r2
 801c6dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	693a      	ldr	r2, [r7, #16]
 801c6e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	68fa      	ldr	r2, [r7, #12]
 801c6e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801c6ea:	683b      	ldr	r3, [r7, #0]
 801c6ec:	685a      	ldr	r2, [r3, #4]
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	697a      	ldr	r2, [r7, #20]
 801c6f6:	621a      	str	r2, [r3, #32]
}
 801c6f8:	46c0      	nop			@ (mov r8, r8)
 801c6fa:	46bd      	mov	sp, r7
 801c6fc:	b006      	add	sp, #24
 801c6fe:	bd80      	pop	{r7, pc}
 801c700:	ffff8fff 	.word	0xffff8fff
 801c704:	fffffcff 	.word	0xfffffcff

0801c708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c708:	b580      	push	{r7, lr}
 801c70a:	b086      	sub	sp, #24
 801c70c:	af00      	add	r7, sp, #0
 801c70e:	6078      	str	r0, [r7, #4]
 801c710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	6a1b      	ldr	r3, [r3, #32]
 801c716:	4a1a      	ldr	r2, [pc, #104]	@ (801c780 <TIM_OC3_SetConfig+0x78>)
 801c718:	401a      	ands	r2, r3
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	6a1b      	ldr	r3, [r3, #32]
 801c722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	685b      	ldr	r3, [r3, #4]
 801c728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	69db      	ldr	r3, [r3, #28]
 801c72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	2270      	movs	r2, #112	@ 0x70
 801c734:	4393      	bics	r3, r2
 801c736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	2203      	movs	r2, #3
 801c73c:	4393      	bics	r3, r2
 801c73e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c740:	683b      	ldr	r3, [r7, #0]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	68fa      	ldr	r2, [r7, #12]
 801c746:	4313      	orrs	r3, r2
 801c748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801c74a:	697b      	ldr	r3, [r7, #20]
 801c74c:	4a0d      	ldr	r2, [pc, #52]	@ (801c784 <TIM_OC3_SetConfig+0x7c>)
 801c74e:	4013      	ands	r3, r2
 801c750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801c752:	683b      	ldr	r3, [r7, #0]
 801c754:	689b      	ldr	r3, [r3, #8]
 801c756:	021b      	lsls	r3, r3, #8
 801c758:	697a      	ldr	r2, [r7, #20]
 801c75a:	4313      	orrs	r3, r2
 801c75c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	693a      	ldr	r2, [r7, #16]
 801c762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	68fa      	ldr	r2, [r7, #12]
 801c768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801c76a:	683b      	ldr	r3, [r7, #0]
 801c76c:	685a      	ldr	r2, [r3, #4]
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	697a      	ldr	r2, [r7, #20]
 801c776:	621a      	str	r2, [r3, #32]
}
 801c778:	46c0      	nop			@ (mov r8, r8)
 801c77a:	46bd      	mov	sp, r7
 801c77c:	b006      	add	sp, #24
 801c77e:	bd80      	pop	{r7, pc}
 801c780:	fffffeff 	.word	0xfffffeff
 801c784:	fffffdff 	.word	0xfffffdff

0801c788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	b086      	sub	sp, #24
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
 801c790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	6a1b      	ldr	r3, [r3, #32]
 801c796:	4a1b      	ldr	r2, [pc, #108]	@ (801c804 <TIM_OC4_SetConfig+0x7c>)
 801c798:	401a      	ands	r2, r3
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	6a1b      	ldr	r3, [r3, #32]
 801c7a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	685b      	ldr	r3, [r3, #4]
 801c7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	69db      	ldr	r3, [r3, #28]
 801c7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	4a15      	ldr	r2, [pc, #84]	@ (801c808 <TIM_OC4_SetConfig+0x80>)
 801c7b4:	4013      	ands	r3, r2
 801c7b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	4a14      	ldr	r2, [pc, #80]	@ (801c80c <TIM_OC4_SetConfig+0x84>)
 801c7bc:	4013      	ands	r3, r2
 801c7be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c7c0:	683b      	ldr	r3, [r7, #0]
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	021b      	lsls	r3, r3, #8
 801c7c6:	68fa      	ldr	r2, [r7, #12]
 801c7c8:	4313      	orrs	r3, r2
 801c7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801c7cc:	697b      	ldr	r3, [r7, #20]
 801c7ce:	4a10      	ldr	r2, [pc, #64]	@ (801c810 <TIM_OC4_SetConfig+0x88>)
 801c7d0:	4013      	ands	r3, r2
 801c7d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801c7d4:	683b      	ldr	r3, [r7, #0]
 801c7d6:	689b      	ldr	r3, [r3, #8]
 801c7d8:	031b      	lsls	r3, r3, #12
 801c7da:	697a      	ldr	r2, [r7, #20]
 801c7dc:	4313      	orrs	r3, r2
 801c7de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	693a      	ldr	r2, [r7, #16]
 801c7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	68fa      	ldr	r2, [r7, #12]
 801c7ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801c7ec:	683b      	ldr	r3, [r7, #0]
 801c7ee:	685a      	ldr	r2, [r3, #4]
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	697a      	ldr	r2, [r7, #20]
 801c7f8:	621a      	str	r2, [r3, #32]
}
 801c7fa:	46c0      	nop			@ (mov r8, r8)
 801c7fc:	46bd      	mov	sp, r7
 801c7fe:	b006      	add	sp, #24
 801c800:	bd80      	pop	{r7, pc}
 801c802:	46c0      	nop			@ (mov r8, r8)
 801c804:	ffffefff 	.word	0xffffefff
 801c808:	ffff8fff 	.word	0xffff8fff
 801c80c:	fffffcff 	.word	0xfffffcff
 801c810:	ffffdfff 	.word	0xffffdfff

0801c814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b086      	sub	sp, #24
 801c818:	af00      	add	r7, sp, #0
 801c81a:	60f8      	str	r0, [r7, #12]
 801c81c:	60b9      	str	r1, [r7, #8]
 801c81e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801c820:	68bb      	ldr	r3, [r7, #8]
 801c822:	221f      	movs	r2, #31
 801c824:	4013      	ands	r3, r2
 801c826:	2201      	movs	r2, #1
 801c828:	409a      	lsls	r2, r3
 801c82a:	0013      	movs	r3, r2
 801c82c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	6a1b      	ldr	r3, [r3, #32]
 801c832:	697a      	ldr	r2, [r7, #20]
 801c834:	43d2      	mvns	r2, r2
 801c836:	401a      	ands	r2, r3
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	6a1a      	ldr	r2, [r3, #32]
 801c840:	68bb      	ldr	r3, [r7, #8]
 801c842:	211f      	movs	r1, #31
 801c844:	400b      	ands	r3, r1
 801c846:	6879      	ldr	r1, [r7, #4]
 801c848:	4099      	lsls	r1, r3
 801c84a:	000b      	movs	r3, r1
 801c84c:	431a      	orrs	r2, r3
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	621a      	str	r2, [r3, #32]
}
 801c852:	46c0      	nop			@ (mov r8, r8)
 801c854:	46bd      	mov	sp, r7
 801c856:	b006      	add	sp, #24
 801c858:	bd80      	pop	{r7, pc}
	...

0801c85c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b084      	sub	sp, #16
 801c860:	af00      	add	r7, sp, #0
 801c862:	6078      	str	r0, [r7, #4]
 801c864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	2238      	movs	r2, #56	@ 0x38
 801c86a:	5c9b      	ldrb	r3, [r3, r2]
 801c86c:	2b01      	cmp	r3, #1
 801c86e:	d101      	bne.n	801c874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801c870:	2302      	movs	r3, #2
 801c872:	e047      	b.n	801c904 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	2238      	movs	r2, #56	@ 0x38
 801c878:	2101      	movs	r1, #1
 801c87a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	2239      	movs	r2, #57	@ 0x39
 801c880:	2102      	movs	r1, #2
 801c882:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	685b      	ldr	r3, [r3, #4]
 801c88a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	689b      	ldr	r3, [r3, #8]
 801c892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	2270      	movs	r2, #112	@ 0x70
 801c898:	4393      	bics	r3, r2
 801c89a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801c89c:	683b      	ldr	r3, [r7, #0]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	68fa      	ldr	r2, [r7, #12]
 801c8a2:	4313      	orrs	r3, r2
 801c8a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	68fa      	ldr	r2, [r7, #12]
 801c8ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	681a      	ldr	r2, [r3, #0]
 801c8b2:	2380      	movs	r3, #128	@ 0x80
 801c8b4:	05db      	lsls	r3, r3, #23
 801c8b6:	429a      	cmp	r2, r3
 801c8b8:	d00e      	beq.n	801c8d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	4a13      	ldr	r2, [pc, #76]	@ (801c90c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801c8c0:	4293      	cmp	r3, r2
 801c8c2:	d009      	beq.n	801c8d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	4a11      	ldr	r2, [pc, #68]	@ (801c910 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801c8ca:	4293      	cmp	r3, r2
 801c8cc:	d004      	beq.n	801c8d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	4a10      	ldr	r2, [pc, #64]	@ (801c914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801c8d4:	4293      	cmp	r3, r2
 801c8d6:	d10c      	bne.n	801c8f2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801c8d8:	68bb      	ldr	r3, [r7, #8]
 801c8da:	2280      	movs	r2, #128	@ 0x80
 801c8dc:	4393      	bics	r3, r2
 801c8de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801c8e0:	683b      	ldr	r3, [r7, #0]
 801c8e2:	685b      	ldr	r3, [r3, #4]
 801c8e4:	68ba      	ldr	r2, [r7, #8]
 801c8e6:	4313      	orrs	r3, r2
 801c8e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	68ba      	ldr	r2, [r7, #8]
 801c8f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	2239      	movs	r2, #57	@ 0x39
 801c8f6:	2101      	movs	r1, #1
 801c8f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	2238      	movs	r2, #56	@ 0x38
 801c8fe:	2100      	movs	r1, #0
 801c900:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c902:	2300      	movs	r3, #0
}
 801c904:	0018      	movs	r0, r3
 801c906:	46bd      	mov	sp, r7
 801c908:	b004      	add	sp, #16
 801c90a:	bd80      	pop	{r7, pc}
 801c90c:	40000400 	.word	0x40000400
 801c910:	40010800 	.word	0x40010800
 801c914:	40011400 	.word	0x40011400

0801c918 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	b082      	sub	sp, #8
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
 801c920:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	2238      	movs	r2, #56	@ 0x38
 801c926:	5c9b      	ldrb	r3, [r3, r2]
 801c928:	2b01      	cmp	r3, #1
 801c92a:	d101      	bne.n	801c930 <HAL_TIMEx_RemapConfig+0x18>
 801c92c:	2302      	movs	r3, #2
 801c92e:	e00c      	b.n	801c94a <HAL_TIMEx_RemapConfig+0x32>
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	2238      	movs	r2, #56	@ 0x38
 801c934:	2101      	movs	r1, #1
 801c936:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	683a      	ldr	r2, [r7, #0]
 801c93e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	2238      	movs	r2, #56	@ 0x38
 801c944:	2100      	movs	r1, #0
 801c946:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c948:	2300      	movs	r3, #0
}
 801c94a:	0018      	movs	r0, r3
 801c94c:	46bd      	mov	sp, r7
 801c94e:	b002      	add	sp, #8
 801c950:	bd80      	pop	{r7, pc}
	...

0801c954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c954:	b580      	push	{r7, lr}
 801c956:	b082      	sub	sp, #8
 801c958:	af00      	add	r7, sp, #0
 801c95a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d101      	bne.n	801c966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c962:	2301      	movs	r3, #1
 801c964:	e053      	b.n	801ca0e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d116      	bne.n	801c99c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	2278      	movs	r2, #120	@ 0x78
 801c972:	2100      	movs	r1, #0
 801c974:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	0018      	movs	r0, r3
 801c97a:	f000 fd65 	bl	801d448 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	22b0      	movs	r2, #176	@ 0xb0
 801c982:	589b      	ldr	r3, [r3, r2]
 801c984:	2b00      	cmp	r3, #0
 801c986:	d103      	bne.n	801c990 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	21b0      	movs	r1, #176	@ 0xb0
 801c98c:	4a22      	ldr	r2, [pc, #136]	@ (801ca18 <HAL_UART_Init+0xc4>)
 801c98e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	22b0      	movs	r2, #176	@ 0xb0
 801c994:	589b      	ldr	r3, [r3, r2]
 801c996:	687a      	ldr	r2, [r7, #4]
 801c998:	0010      	movs	r0, r2
 801c99a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	2224      	movs	r2, #36	@ 0x24
 801c9a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	681a      	ldr	r2, [r3, #0]
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	2101      	movs	r1, #1
 801c9ae:	438a      	bics	r2, r1
 801c9b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	0018      	movs	r0, r3
 801c9b6:	f000 fd8b 	bl	801d4d0 <UART_SetConfig>
 801c9ba:	0003      	movs	r3, r0
 801c9bc:	2b01      	cmp	r3, #1
 801c9be:	d101      	bne.n	801c9c4 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801c9c0:	2301      	movs	r3, #1
 801c9c2:	e024      	b.n	801ca0e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d003      	beq.n	801c9d4 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	0018      	movs	r0, r3
 801c9d0:	f001 f81c 	bl	801da0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	685a      	ldr	r2, [r3, #4]
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	490f      	ldr	r1, [pc, #60]	@ (801ca1c <HAL_UART_Init+0xc8>)
 801c9e0:	400a      	ands	r2, r1
 801c9e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	689a      	ldr	r2, [r3, #8]
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	212a      	movs	r1, #42	@ 0x2a
 801c9f0:	438a      	bics	r2, r1
 801c9f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	681a      	ldr	r2, [r3, #0]
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	2101      	movs	r1, #1
 801ca00:	430a      	orrs	r2, r1
 801ca02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	0018      	movs	r0, r3
 801ca08:	f001 f8b4 	bl	801db74 <UART_CheckIdleState>
 801ca0c:	0003      	movs	r3, r0
}
 801ca0e:	0018      	movs	r0, r3
 801ca10:	46bd      	mov	sp, r7
 801ca12:	b002      	add	sp, #8
 801ca14:	bd80      	pop	{r7, pc}
 801ca16:	46c0      	nop			@ (mov r8, r8)
 801ca18:	08013155 	.word	0x08013155
 801ca1c:	ffffb7ff 	.word	0xffffb7ff

0801ca20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b08a      	sub	sp, #40	@ 0x28
 801ca24:	af02      	add	r7, sp, #8
 801ca26:	60f8      	str	r0, [r7, #12]
 801ca28:	60b9      	str	r1, [r7, #8]
 801ca2a:	603b      	str	r3, [r7, #0]
 801ca2c:	1dbb      	adds	r3, r7, #6
 801ca2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ca34:	2b20      	cmp	r3, #32
 801ca36:	d000      	beq.n	801ca3a <HAL_UART_Transmit+0x1a>
 801ca38:	e08c      	b.n	801cb54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801ca3a:	68bb      	ldr	r3, [r7, #8]
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d003      	beq.n	801ca48 <HAL_UART_Transmit+0x28>
 801ca40:	1dbb      	adds	r3, r7, #6
 801ca42:	881b      	ldrh	r3, [r3, #0]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d101      	bne.n	801ca4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801ca48:	2301      	movs	r3, #1
 801ca4a:	e084      	b.n	801cb56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	689a      	ldr	r2, [r3, #8]
 801ca50:	2380      	movs	r3, #128	@ 0x80
 801ca52:	015b      	lsls	r3, r3, #5
 801ca54:	429a      	cmp	r2, r3
 801ca56:	d109      	bne.n	801ca6c <HAL_UART_Transmit+0x4c>
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	691b      	ldr	r3, [r3, #16]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d105      	bne.n	801ca6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801ca60:	68bb      	ldr	r3, [r7, #8]
 801ca62:	2201      	movs	r2, #1
 801ca64:	4013      	ands	r3, r2
 801ca66:	d001      	beq.n	801ca6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801ca68:	2301      	movs	r3, #1
 801ca6a:	e074      	b.n	801cb56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	2284      	movs	r2, #132	@ 0x84
 801ca70:	2100      	movs	r1, #0
 801ca72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	2221      	movs	r2, #33	@ 0x21
 801ca78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ca7a:	f7f7 fa7b 	bl	8013f74 <HAL_GetTick>
 801ca7e:	0003      	movs	r3, r0
 801ca80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	1dba      	adds	r2, r7, #6
 801ca86:	2150      	movs	r1, #80	@ 0x50
 801ca88:	8812      	ldrh	r2, [r2, #0]
 801ca8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	1dba      	adds	r2, r7, #6
 801ca90:	2152      	movs	r1, #82	@ 0x52
 801ca92:	8812      	ldrh	r2, [r2, #0]
 801ca94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	689a      	ldr	r2, [r3, #8]
 801ca9a:	2380      	movs	r3, #128	@ 0x80
 801ca9c:	015b      	lsls	r3, r3, #5
 801ca9e:	429a      	cmp	r2, r3
 801caa0:	d108      	bne.n	801cab4 <HAL_UART_Transmit+0x94>
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	691b      	ldr	r3, [r3, #16]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d104      	bne.n	801cab4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801caaa:	2300      	movs	r3, #0
 801caac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	61bb      	str	r3, [r7, #24]
 801cab2:	e003      	b.n	801cabc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801cab4:	68bb      	ldr	r3, [r7, #8]
 801cab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801cab8:	2300      	movs	r3, #0
 801caba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801cabc:	e02f      	b.n	801cb1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801cabe:	697a      	ldr	r2, [r7, #20]
 801cac0:	68f8      	ldr	r0, [r7, #12]
 801cac2:	683b      	ldr	r3, [r7, #0]
 801cac4:	9300      	str	r3, [sp, #0]
 801cac6:	0013      	movs	r3, r2
 801cac8:	2200      	movs	r2, #0
 801caca:	2180      	movs	r1, #128	@ 0x80
 801cacc:	f001 f8fa 	bl	801dcc4 <UART_WaitOnFlagUntilTimeout>
 801cad0:	1e03      	subs	r3, r0, #0
 801cad2:	d004      	beq.n	801cade <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801cad4:	68fb      	ldr	r3, [r7, #12]
 801cad6:	2220      	movs	r2, #32
 801cad8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801cada:	2303      	movs	r3, #3
 801cadc:	e03b      	b.n	801cb56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801cade:	69fb      	ldr	r3, [r7, #28]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d10b      	bne.n	801cafc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801cae4:	69bb      	ldr	r3, [r7, #24]
 801cae6:	881b      	ldrh	r3, [r3, #0]
 801cae8:	001a      	movs	r2, r3
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	681b      	ldr	r3, [r3, #0]
 801caee:	05d2      	lsls	r2, r2, #23
 801caf0:	0dd2      	lsrs	r2, r2, #23
 801caf2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801caf4:	69bb      	ldr	r3, [r7, #24]
 801caf6:	3302      	adds	r3, #2
 801caf8:	61bb      	str	r3, [r7, #24]
 801cafa:	e007      	b.n	801cb0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801cafc:	69fb      	ldr	r3, [r7, #28]
 801cafe:	781a      	ldrb	r2, [r3, #0]
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801cb06:	69fb      	ldr	r3, [r7, #28]
 801cb08:	3301      	adds	r3, #1
 801cb0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	2252      	movs	r2, #82	@ 0x52
 801cb10:	5a9b      	ldrh	r3, [r3, r2]
 801cb12:	b29b      	uxth	r3, r3
 801cb14:	3b01      	subs	r3, #1
 801cb16:	b299      	uxth	r1, r3
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	2252      	movs	r2, #82	@ 0x52
 801cb1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	2252      	movs	r2, #82	@ 0x52
 801cb22:	5a9b      	ldrh	r3, [r3, r2]
 801cb24:	b29b      	uxth	r3, r3
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d1c9      	bne.n	801cabe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801cb2a:	697a      	ldr	r2, [r7, #20]
 801cb2c:	68f8      	ldr	r0, [r7, #12]
 801cb2e:	683b      	ldr	r3, [r7, #0]
 801cb30:	9300      	str	r3, [sp, #0]
 801cb32:	0013      	movs	r3, r2
 801cb34:	2200      	movs	r2, #0
 801cb36:	2140      	movs	r1, #64	@ 0x40
 801cb38:	f001 f8c4 	bl	801dcc4 <UART_WaitOnFlagUntilTimeout>
 801cb3c:	1e03      	subs	r3, r0, #0
 801cb3e:	d004      	beq.n	801cb4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	2220      	movs	r2, #32
 801cb44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801cb46:	2303      	movs	r3, #3
 801cb48:	e005      	b.n	801cb56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801cb4a:	68fb      	ldr	r3, [r7, #12]
 801cb4c:	2220      	movs	r2, #32
 801cb4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801cb50:	2300      	movs	r3, #0
 801cb52:	e000      	b.n	801cb56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801cb54:	2302      	movs	r3, #2
  }
}
 801cb56:	0018      	movs	r0, r3
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	b008      	add	sp, #32
 801cb5c:	bd80      	pop	{r7, pc}
	...

0801cb60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b088      	sub	sp, #32
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	60f8      	str	r0, [r7, #12]
 801cb68:	60b9      	str	r1, [r7, #8]
 801cb6a:	1dbb      	adds	r3, r7, #6
 801cb6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	2280      	movs	r2, #128	@ 0x80
 801cb72:	589b      	ldr	r3, [r3, r2]
 801cb74:	2b20      	cmp	r3, #32
 801cb76:	d14a      	bne.n	801cc0e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801cb78:	68bb      	ldr	r3, [r7, #8]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d003      	beq.n	801cb86 <HAL_UART_Receive_IT+0x26>
 801cb7e:	1dbb      	adds	r3, r7, #6
 801cb80:	881b      	ldrh	r3, [r3, #0]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d101      	bne.n	801cb8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801cb86:	2301      	movs	r3, #1
 801cb88:	e042      	b.n	801cc10 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	689a      	ldr	r2, [r3, #8]
 801cb8e:	2380      	movs	r3, #128	@ 0x80
 801cb90:	015b      	lsls	r3, r3, #5
 801cb92:	429a      	cmp	r2, r3
 801cb94:	d109      	bne.n	801cbaa <HAL_UART_Receive_IT+0x4a>
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	691b      	ldr	r3, [r3, #16]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d105      	bne.n	801cbaa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801cb9e:	68bb      	ldr	r3, [r7, #8]
 801cba0:	2201      	movs	r2, #1
 801cba2:	4013      	ands	r3, r2
 801cba4:	d001      	beq.n	801cbaa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801cba6:	2301      	movs	r3, #1
 801cba8:	e032      	b.n	801cc10 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	2200      	movs	r2, #0
 801cbae:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	4a18      	ldr	r2, [pc, #96]	@ (801cc18 <HAL_UART_Receive_IT+0xb8>)
 801cbb6:	4293      	cmp	r3, r2
 801cbb8:	d020      	beq.n	801cbfc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801cbba:	68fb      	ldr	r3, [r7, #12]
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	685a      	ldr	r2, [r3, #4]
 801cbc0:	2380      	movs	r3, #128	@ 0x80
 801cbc2:	041b      	lsls	r3, r3, #16
 801cbc4:	4013      	ands	r3, r2
 801cbc6:	d019      	beq.n	801cbfc <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbc8:	f3ef 8310 	mrs	r3, PRIMASK
 801cbcc:	613b      	str	r3, [r7, #16]
  return(result);
 801cbce:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cbd0:	61fb      	str	r3, [r7, #28]
 801cbd2:	2301      	movs	r3, #1
 801cbd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbd6:	697b      	ldr	r3, [r7, #20]
 801cbd8:	f383 8810 	msr	PRIMASK, r3
}
 801cbdc:	46c0      	nop			@ (mov r8, r8)
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	681a      	ldr	r2, [r3, #0]
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	2180      	movs	r1, #128	@ 0x80
 801cbea:	04c9      	lsls	r1, r1, #19
 801cbec:	430a      	orrs	r2, r1
 801cbee:	601a      	str	r2, [r3, #0]
 801cbf0:	69fb      	ldr	r3, [r7, #28]
 801cbf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbf4:	69bb      	ldr	r3, [r7, #24]
 801cbf6:	f383 8810 	msr	PRIMASK, r3
}
 801cbfa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801cbfc:	1dbb      	adds	r3, r7, #6
 801cbfe:	881a      	ldrh	r2, [r3, #0]
 801cc00:	68b9      	ldr	r1, [r7, #8]
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	0018      	movs	r0, r3
 801cc06:	f001 f8c7 	bl	801dd98 <UART_Start_Receive_IT>
 801cc0a:	0003      	movs	r3, r0
 801cc0c:	e000      	b.n	801cc10 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801cc0e:	2302      	movs	r3, #2
  }
}
 801cc10:	0018      	movs	r0, r3
 801cc12:	46bd      	mov	sp, r7
 801cc14:	b008      	add	sp, #32
 801cc16:	bd80      	pop	{r7, pc}
 801cc18:	40004800 	.word	0x40004800

0801cc1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801cc1c:	b580      	push	{r7, lr}
 801cc1e:	b088      	sub	sp, #32
 801cc20:	af00      	add	r7, sp, #0
 801cc22:	60f8      	str	r0, [r7, #12]
 801cc24:	60b9      	str	r1, [r7, #8]
 801cc26:	1dbb      	adds	r3, r7, #6
 801cc28:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801cc2a:	68fb      	ldr	r3, [r7, #12]
 801cc2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cc2e:	2b20      	cmp	r3, #32
 801cc30:	d000      	beq.n	801cc34 <HAL_UART_Transmit_DMA+0x18>
 801cc32:	e077      	b.n	801cd24 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801cc34:	68bb      	ldr	r3, [r7, #8]
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d003      	beq.n	801cc42 <HAL_UART_Transmit_DMA+0x26>
 801cc3a:	1dbb      	adds	r3, r7, #6
 801cc3c:	881b      	ldrh	r3, [r3, #0]
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d101      	bne.n	801cc46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801cc42:	2301      	movs	r3, #1
 801cc44:	e06f      	b.n	801cd26 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	689a      	ldr	r2, [r3, #8]
 801cc4a:	2380      	movs	r3, #128	@ 0x80
 801cc4c:	015b      	lsls	r3, r3, #5
 801cc4e:	429a      	cmp	r2, r3
 801cc50:	d109      	bne.n	801cc66 <HAL_UART_Transmit_DMA+0x4a>
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	691b      	ldr	r3, [r3, #16]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d105      	bne.n	801cc66 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801cc5a:	68bb      	ldr	r3, [r7, #8]
 801cc5c:	2201      	movs	r2, #1
 801cc5e:	4013      	ands	r3, r2
 801cc60:	d001      	beq.n	801cc66 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801cc62:	2301      	movs	r3, #1
 801cc64:	e05f      	b.n	801cd26 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	68ba      	ldr	r2, [r7, #8]
 801cc6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	1dba      	adds	r2, r7, #6
 801cc70:	2150      	movs	r1, #80	@ 0x50
 801cc72:	8812      	ldrh	r2, [r2, #0]
 801cc74:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	1dba      	adds	r2, r7, #6
 801cc7a:	2152      	movs	r1, #82	@ 0x52
 801cc7c:	8812      	ldrh	r2, [r2, #0]
 801cc7e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	2284      	movs	r2, #132	@ 0x84
 801cc84:	2100      	movs	r1, #0
 801cc86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801cc88:	68fb      	ldr	r3, [r7, #12]
 801cc8a:	2221      	movs	r2, #33	@ 0x21
 801cc8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d027      	beq.n	801cce6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cc9a:	4a25      	ldr	r2, [pc, #148]	@ (801cd30 <HAL_UART_Transmit_DMA+0x114>)
 801cc9c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cca2:	4a24      	ldr	r2, [pc, #144]	@ (801cd34 <HAL_UART_Transmit_DMA+0x118>)
 801cca4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ccaa:	4a23      	ldr	r2, [pc, #140]	@ (801cd38 <HAL_UART_Transmit_DMA+0x11c>)
 801ccac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ccbe:	0019      	movs	r1, r3
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	3328      	adds	r3, #40	@ 0x28
 801ccc6:	001a      	movs	r2, r3
 801ccc8:	1dbb      	adds	r3, r7, #6
 801ccca:	881b      	ldrh	r3, [r3, #0]
 801cccc:	f7f7 fea4 	bl	8014a18 <HAL_DMA_Start_IT>
 801ccd0:	1e03      	subs	r3, r0, #0
 801ccd2:	d008      	beq.n	801cce6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	2284      	movs	r2, #132	@ 0x84
 801ccd8:	2110      	movs	r1, #16
 801ccda:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	2220      	movs	r2, #32
 801cce0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801cce2:	2301      	movs	r3, #1
 801cce4:	e01f      	b.n	801cd26 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	2240      	movs	r2, #64	@ 0x40
 801ccec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccee:	f3ef 8310 	mrs	r3, PRIMASK
 801ccf2:	613b      	str	r3, [r7, #16]
  return(result);
 801ccf4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ccf6:	61fb      	str	r3, [r7, #28]
 801ccf8:	2301      	movs	r3, #1
 801ccfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccfc:	697b      	ldr	r3, [r7, #20]
 801ccfe:	f383 8810 	msr	PRIMASK, r3
}
 801cd02:	46c0      	nop			@ (mov r8, r8)
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	689a      	ldr	r2, [r3, #8]
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	2180      	movs	r1, #128	@ 0x80
 801cd10:	430a      	orrs	r2, r1
 801cd12:	609a      	str	r2, [r3, #8]
 801cd14:	69fb      	ldr	r3, [r7, #28]
 801cd16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd18:	69bb      	ldr	r3, [r7, #24]
 801cd1a:	f383 8810 	msr	PRIMASK, r3
}
 801cd1e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801cd20:	2300      	movs	r3, #0
 801cd22:	e000      	b.n	801cd26 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801cd24:	2302      	movs	r3, #2
  }
}
 801cd26:	0018      	movs	r0, r3
 801cd28:	46bd      	mov	sp, r7
 801cd2a:	b008      	add	sp, #32
 801cd2c:	bd80      	pop	{r7, pc}
 801cd2e:	46c0      	nop			@ (mov r8, r8)
 801cd30:	0801e17d 	.word	0x0801e17d
 801cd34:	0801e219 	.word	0x0801e219
 801cd38:	0801e3b9 	.word	0x0801e3b9

0801cd3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b088      	sub	sp, #32
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	60f8      	str	r0, [r7, #12]
 801cd44:	60b9      	str	r1, [r7, #8]
 801cd46:	1dbb      	adds	r3, r7, #6
 801cd48:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	2280      	movs	r2, #128	@ 0x80
 801cd4e:	589b      	ldr	r3, [r3, r2]
 801cd50:	2b20      	cmp	r3, #32
 801cd52:	d14a      	bne.n	801cdea <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801cd54:	68bb      	ldr	r3, [r7, #8]
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d003      	beq.n	801cd62 <HAL_UART_Receive_DMA+0x26>
 801cd5a:	1dbb      	adds	r3, r7, #6
 801cd5c:	881b      	ldrh	r3, [r3, #0]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d101      	bne.n	801cd66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801cd62:	2301      	movs	r3, #1
 801cd64:	e042      	b.n	801cdec <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cd66:	68fb      	ldr	r3, [r7, #12]
 801cd68:	689a      	ldr	r2, [r3, #8]
 801cd6a:	2380      	movs	r3, #128	@ 0x80
 801cd6c:	015b      	lsls	r3, r3, #5
 801cd6e:	429a      	cmp	r2, r3
 801cd70:	d109      	bne.n	801cd86 <HAL_UART_Receive_DMA+0x4a>
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	691b      	ldr	r3, [r3, #16]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d105      	bne.n	801cd86 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801cd7a:	68bb      	ldr	r3, [r7, #8]
 801cd7c:	2201      	movs	r2, #1
 801cd7e:	4013      	ands	r3, r2
 801cd80:	d001      	beq.n	801cd86 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801cd82:	2301      	movs	r3, #1
 801cd84:	e032      	b.n	801cdec <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	2200      	movs	r2, #0
 801cd8a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	4a18      	ldr	r2, [pc, #96]	@ (801cdf4 <HAL_UART_Receive_DMA+0xb8>)
 801cd92:	4293      	cmp	r3, r2
 801cd94:	d020      	beq.n	801cdd8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	685a      	ldr	r2, [r3, #4]
 801cd9c:	2380      	movs	r3, #128	@ 0x80
 801cd9e:	041b      	lsls	r3, r3, #16
 801cda0:	4013      	ands	r3, r2
 801cda2:	d019      	beq.n	801cdd8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cda4:	f3ef 8310 	mrs	r3, PRIMASK
 801cda8:	613b      	str	r3, [r7, #16]
  return(result);
 801cdaa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cdac:	61fb      	str	r3, [r7, #28]
 801cdae:	2301      	movs	r3, #1
 801cdb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdb2:	697b      	ldr	r3, [r7, #20]
 801cdb4:	f383 8810 	msr	PRIMASK, r3
}
 801cdb8:	46c0      	nop			@ (mov r8, r8)
 801cdba:	68fb      	ldr	r3, [r7, #12]
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	681a      	ldr	r2, [r3, #0]
 801cdc0:	68fb      	ldr	r3, [r7, #12]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	2180      	movs	r1, #128	@ 0x80
 801cdc6:	04c9      	lsls	r1, r1, #19
 801cdc8:	430a      	orrs	r2, r1
 801cdca:	601a      	str	r2, [r3, #0]
 801cdcc:	69fb      	ldr	r3, [r7, #28]
 801cdce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdd0:	69bb      	ldr	r3, [r7, #24]
 801cdd2:	f383 8810 	msr	PRIMASK, r3
}
 801cdd6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801cdd8:	1dbb      	adds	r3, r7, #6
 801cdda:	881a      	ldrh	r2, [r3, #0]
 801cddc:	68b9      	ldr	r1, [r7, #8]
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	0018      	movs	r0, r3
 801cde2:	f001 f8a3 	bl	801df2c <UART_Start_Receive_DMA>
 801cde6:	0003      	movs	r3, r0
 801cde8:	e000      	b.n	801cdec <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801cdea:	2302      	movs	r3, #2
  }
}
 801cdec:	0018      	movs	r0, r3
 801cdee:	46bd      	mov	sp, r7
 801cdf0:	b008      	add	sp, #32
 801cdf2:	bd80      	pop	{r7, pc}
 801cdf4:	40004800 	.word	0x40004800

0801cdf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801cdf8:	b590      	push	{r4, r7, lr}
 801cdfa:	b0ab      	sub	sp, #172	@ 0xac
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	69db      	ldr	r3, [r3, #28]
 801ce06:	22a4      	movs	r2, #164	@ 0xa4
 801ce08:	18b9      	adds	r1, r7, r2
 801ce0a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	20a0      	movs	r0, #160	@ 0xa0
 801ce14:	1839      	adds	r1, r7, r0
 801ce16:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	689b      	ldr	r3, [r3, #8]
 801ce1e:	219c      	movs	r1, #156	@ 0x9c
 801ce20:	1879      	adds	r1, r7, r1
 801ce22:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801ce24:	0011      	movs	r1, r2
 801ce26:	18bb      	adds	r3, r7, r2
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	4a9c      	ldr	r2, [pc, #624]	@ (801d09c <HAL_UART_IRQHandler+0x2a4>)
 801ce2c:	4013      	ands	r3, r2
 801ce2e:	2298      	movs	r2, #152	@ 0x98
 801ce30:	18bc      	adds	r4, r7, r2
 801ce32:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801ce34:	18bb      	adds	r3, r7, r2
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d114      	bne.n	801ce66 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801ce3c:	187b      	adds	r3, r7, r1
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	2220      	movs	r2, #32
 801ce42:	4013      	ands	r3, r2
 801ce44:	d00f      	beq.n	801ce66 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ce46:	183b      	adds	r3, r7, r0
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	2220      	movs	r2, #32
 801ce4c:	4013      	ands	r3, r2
 801ce4e:	d00a      	beq.n	801ce66 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d100      	bne.n	801ce5a <HAL_UART_IRQHandler+0x62>
 801ce58:	e2aa      	b.n	801d3b0 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ce5e:	687a      	ldr	r2, [r7, #4]
 801ce60:	0010      	movs	r0, r2
 801ce62:	4798      	blx	r3
      }
      return;
 801ce64:	e2a4      	b.n	801d3b0 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801ce66:	2398      	movs	r3, #152	@ 0x98
 801ce68:	18fb      	adds	r3, r7, r3
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d100      	bne.n	801ce72 <HAL_UART_IRQHandler+0x7a>
 801ce70:	e11a      	b.n	801d0a8 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801ce72:	239c      	movs	r3, #156	@ 0x9c
 801ce74:	18fb      	adds	r3, r7, r3
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	2201      	movs	r2, #1
 801ce7a:	4013      	ands	r3, r2
 801ce7c:	d106      	bne.n	801ce8c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801ce7e:	23a0      	movs	r3, #160	@ 0xa0
 801ce80:	18fb      	adds	r3, r7, r3
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	4a86      	ldr	r2, [pc, #536]	@ (801d0a0 <HAL_UART_IRQHandler+0x2a8>)
 801ce86:	4013      	ands	r3, r2
 801ce88:	d100      	bne.n	801ce8c <HAL_UART_IRQHandler+0x94>
 801ce8a:	e10d      	b.n	801d0a8 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ce8c:	23a4      	movs	r3, #164	@ 0xa4
 801ce8e:	18fb      	adds	r3, r7, r3
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	2201      	movs	r2, #1
 801ce94:	4013      	ands	r3, r2
 801ce96:	d012      	beq.n	801cebe <HAL_UART_IRQHandler+0xc6>
 801ce98:	23a0      	movs	r3, #160	@ 0xa0
 801ce9a:	18fb      	adds	r3, r7, r3
 801ce9c:	681a      	ldr	r2, [r3, #0]
 801ce9e:	2380      	movs	r3, #128	@ 0x80
 801cea0:	005b      	lsls	r3, r3, #1
 801cea2:	4013      	ands	r3, r2
 801cea4:	d00b      	beq.n	801cebe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	2201      	movs	r2, #1
 801ceac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	2284      	movs	r2, #132	@ 0x84
 801ceb2:	589b      	ldr	r3, [r3, r2]
 801ceb4:	2201      	movs	r2, #1
 801ceb6:	431a      	orrs	r2, r3
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	2184      	movs	r1, #132	@ 0x84
 801cebc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cebe:	23a4      	movs	r3, #164	@ 0xa4
 801cec0:	18fb      	adds	r3, r7, r3
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	2202      	movs	r2, #2
 801cec6:	4013      	ands	r3, r2
 801cec8:	d011      	beq.n	801ceee <HAL_UART_IRQHandler+0xf6>
 801ceca:	239c      	movs	r3, #156	@ 0x9c
 801cecc:	18fb      	adds	r3, r7, r3
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	2201      	movs	r2, #1
 801ced2:	4013      	ands	r3, r2
 801ced4:	d00b      	beq.n	801ceee <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	2202      	movs	r2, #2
 801cedc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	2284      	movs	r2, #132	@ 0x84
 801cee2:	589b      	ldr	r3, [r3, r2]
 801cee4:	2204      	movs	r2, #4
 801cee6:	431a      	orrs	r2, r3
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2184      	movs	r1, #132	@ 0x84
 801ceec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ceee:	23a4      	movs	r3, #164	@ 0xa4
 801cef0:	18fb      	adds	r3, r7, r3
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	2204      	movs	r2, #4
 801cef6:	4013      	ands	r3, r2
 801cef8:	d011      	beq.n	801cf1e <HAL_UART_IRQHandler+0x126>
 801cefa:	239c      	movs	r3, #156	@ 0x9c
 801cefc:	18fb      	adds	r3, r7, r3
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	2201      	movs	r2, #1
 801cf02:	4013      	ands	r3, r2
 801cf04:	d00b      	beq.n	801cf1e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	2204      	movs	r2, #4
 801cf0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	2284      	movs	r2, #132	@ 0x84
 801cf12:	589b      	ldr	r3, [r3, r2]
 801cf14:	2202      	movs	r2, #2
 801cf16:	431a      	orrs	r2, r3
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2184      	movs	r1, #132	@ 0x84
 801cf1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801cf1e:	23a4      	movs	r3, #164	@ 0xa4
 801cf20:	18fb      	adds	r3, r7, r3
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	2208      	movs	r2, #8
 801cf26:	4013      	ands	r3, r2
 801cf28:	d017      	beq.n	801cf5a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cf2a:	23a0      	movs	r3, #160	@ 0xa0
 801cf2c:	18fb      	adds	r3, r7, r3
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	2220      	movs	r2, #32
 801cf32:	4013      	ands	r3, r2
 801cf34:	d105      	bne.n	801cf42 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801cf36:	239c      	movs	r3, #156	@ 0x9c
 801cf38:	18fb      	adds	r3, r7, r3
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	2201      	movs	r2, #1
 801cf3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cf40:	d00b      	beq.n	801cf5a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	2208      	movs	r2, #8
 801cf48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	2284      	movs	r2, #132	@ 0x84
 801cf4e:	589b      	ldr	r3, [r3, r2]
 801cf50:	2208      	movs	r2, #8
 801cf52:	431a      	orrs	r2, r3
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	2184      	movs	r1, #132	@ 0x84
 801cf58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801cf5a:	23a4      	movs	r3, #164	@ 0xa4
 801cf5c:	18fb      	adds	r3, r7, r3
 801cf5e:	681a      	ldr	r2, [r3, #0]
 801cf60:	2380      	movs	r3, #128	@ 0x80
 801cf62:	011b      	lsls	r3, r3, #4
 801cf64:	4013      	ands	r3, r2
 801cf66:	d013      	beq.n	801cf90 <HAL_UART_IRQHandler+0x198>
 801cf68:	23a0      	movs	r3, #160	@ 0xa0
 801cf6a:	18fb      	adds	r3, r7, r3
 801cf6c:	681a      	ldr	r2, [r3, #0]
 801cf6e:	2380      	movs	r3, #128	@ 0x80
 801cf70:	04db      	lsls	r3, r3, #19
 801cf72:	4013      	ands	r3, r2
 801cf74:	d00c      	beq.n	801cf90 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	2280      	movs	r2, #128	@ 0x80
 801cf7c:	0112      	lsls	r2, r2, #4
 801cf7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	2284      	movs	r2, #132	@ 0x84
 801cf84:	589b      	ldr	r3, [r3, r2]
 801cf86:	2220      	movs	r2, #32
 801cf88:	431a      	orrs	r2, r3
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	2184      	movs	r1, #132	@ 0x84
 801cf8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	2284      	movs	r2, #132	@ 0x84
 801cf94:	589b      	ldr	r3, [r3, r2]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d100      	bne.n	801cf9c <HAL_UART_IRQHandler+0x1a4>
 801cf9a:	e20b      	b.n	801d3b4 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801cf9c:	23a4      	movs	r3, #164	@ 0xa4
 801cf9e:	18fb      	adds	r3, r7, r3
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	2220      	movs	r2, #32
 801cfa4:	4013      	ands	r3, r2
 801cfa6:	d00e      	beq.n	801cfc6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801cfa8:	23a0      	movs	r3, #160	@ 0xa0
 801cfaa:	18fb      	adds	r3, r7, r3
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	2220      	movs	r2, #32
 801cfb0:	4013      	ands	r3, r2
 801cfb2:	d008      	beq.n	801cfc6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d004      	beq.n	801cfc6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cfc0:	687a      	ldr	r2, [r7, #4]
 801cfc2:	0010      	movs	r0, r2
 801cfc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	2284      	movs	r2, #132	@ 0x84
 801cfca:	589b      	ldr	r3, [r3, r2]
 801cfcc:	2194      	movs	r1, #148	@ 0x94
 801cfce:	187a      	adds	r2, r7, r1
 801cfd0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	689b      	ldr	r3, [r3, #8]
 801cfd8:	2240      	movs	r2, #64	@ 0x40
 801cfda:	4013      	ands	r3, r2
 801cfdc:	2b40      	cmp	r3, #64	@ 0x40
 801cfde:	d004      	beq.n	801cfea <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801cfe0:	187b      	adds	r3, r7, r1
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	2228      	movs	r2, #40	@ 0x28
 801cfe6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cfe8:	d04b      	beq.n	801d082 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	0018      	movs	r0, r3
 801cfee:	f001 f861 	bl	801e0b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	689b      	ldr	r3, [r3, #8]
 801cff8:	2240      	movs	r2, #64	@ 0x40
 801cffa:	4013      	ands	r3, r2
 801cffc:	2b40      	cmp	r3, #64	@ 0x40
 801cffe:	d139      	bne.n	801d074 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d000:	f3ef 8310 	mrs	r3, PRIMASK
 801d004:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801d006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d008:	2090      	movs	r0, #144	@ 0x90
 801d00a:	183a      	adds	r2, r7, r0
 801d00c:	6013      	str	r3, [r2, #0]
 801d00e:	2301      	movs	r3, #1
 801d010:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d012:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801d014:	f383 8810 	msr	PRIMASK, r3
}
 801d018:	46c0      	nop			@ (mov r8, r8)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	689a      	ldr	r2, [r3, #8]
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	2140      	movs	r1, #64	@ 0x40
 801d026:	438a      	bics	r2, r1
 801d028:	609a      	str	r2, [r3, #8]
 801d02a:	183b      	adds	r3, r7, r0
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d032:	f383 8810 	msr	PRIMASK, r3
}
 801d036:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d012      	beq.n	801d066 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d044:	4a17      	ldr	r2, [pc, #92]	@ (801d0a4 <HAL_UART_IRQHandler+0x2ac>)
 801d046:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d04c:	0018      	movs	r0, r3
 801d04e:	f7f7 fd89 	bl	8014b64 <HAL_DMA_Abort_IT>
 801d052:	1e03      	subs	r3, r0, #0
 801d054:	d020      	beq.n	801d098 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d05a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d060:	0018      	movs	r0, r3
 801d062:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d064:	e018      	b.n	801d098 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	2298      	movs	r2, #152	@ 0x98
 801d06a:	589b      	ldr	r3, [r3, r2]
 801d06c:	687a      	ldr	r2, [r7, #4]
 801d06e:	0010      	movs	r0, r2
 801d070:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d072:	e011      	b.n	801d098 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	2298      	movs	r2, #152	@ 0x98
 801d078:	589b      	ldr	r3, [r3, r2]
 801d07a:	687a      	ldr	r2, [r7, #4]
 801d07c:	0010      	movs	r0, r2
 801d07e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d080:	e00a      	b.n	801d098 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	2298      	movs	r2, #152	@ 0x98
 801d086:	589b      	ldr	r3, [r3, r2]
 801d088:	687a      	ldr	r2, [r7, #4]
 801d08a:	0010      	movs	r0, r2
 801d08c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	2284      	movs	r2, #132	@ 0x84
 801d092:	2100      	movs	r1, #0
 801d094:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801d096:	e18d      	b.n	801d3b4 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d098:	46c0      	nop			@ (mov r8, r8)
    return;
 801d09a:	e18b      	b.n	801d3b4 <HAL_UART_IRQHandler+0x5bc>
 801d09c:	0000080f 	.word	0x0000080f
 801d0a0:	04000120 	.word	0x04000120
 801d0a4:	0801e441 	.word	0x0801e441

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d0ac:	2b01      	cmp	r3, #1
 801d0ae:	d000      	beq.n	801d0b2 <HAL_UART_IRQHandler+0x2ba>
 801d0b0:	e13d      	b.n	801d32e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801d0b2:	23a4      	movs	r3, #164	@ 0xa4
 801d0b4:	18fb      	adds	r3, r7, r3
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	2210      	movs	r2, #16
 801d0ba:	4013      	ands	r3, r2
 801d0bc:	d100      	bne.n	801d0c0 <HAL_UART_IRQHandler+0x2c8>
 801d0be:	e136      	b.n	801d32e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801d0c0:	23a0      	movs	r3, #160	@ 0xa0
 801d0c2:	18fb      	adds	r3, r7, r3
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	2210      	movs	r2, #16
 801d0c8:	4013      	ands	r3, r2
 801d0ca:	d100      	bne.n	801d0ce <HAL_UART_IRQHandler+0x2d6>
 801d0cc:	e12f      	b.n	801d32e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	2210      	movs	r2, #16
 801d0d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	689b      	ldr	r3, [r3, #8]
 801d0dc:	2240      	movs	r2, #64	@ 0x40
 801d0de:	4013      	ands	r3, r2
 801d0e0:	2b40      	cmp	r3, #64	@ 0x40
 801d0e2:	d000      	beq.n	801d0e6 <HAL_UART_IRQHandler+0x2ee>
 801d0e4:	e0a2      	b.n	801d22c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	685a      	ldr	r2, [r3, #4]
 801d0ee:	217e      	movs	r1, #126	@ 0x7e
 801d0f0:	187b      	adds	r3, r7, r1
 801d0f2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801d0f4:	187b      	adds	r3, r7, r1
 801d0f6:	881b      	ldrh	r3, [r3, #0]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d100      	bne.n	801d0fe <HAL_UART_IRQHandler+0x306>
 801d0fc:	e15c      	b.n	801d3b8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	2258      	movs	r2, #88	@ 0x58
 801d102:	5a9b      	ldrh	r3, [r3, r2]
 801d104:	187a      	adds	r2, r7, r1
 801d106:	8812      	ldrh	r2, [r2, #0]
 801d108:	429a      	cmp	r2, r3
 801d10a:	d300      	bcc.n	801d10e <HAL_UART_IRQHandler+0x316>
 801d10c:	e154      	b.n	801d3b8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	187a      	adds	r2, r7, r1
 801d112:	215a      	movs	r1, #90	@ 0x5a
 801d114:	8812      	ldrh	r2, [r2, #0]
 801d116:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	2220      	movs	r2, #32
 801d122:	4013      	ands	r3, r2
 801d124:	d16f      	bne.n	801d206 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d126:	f3ef 8310 	mrs	r3, PRIMASK
 801d12a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801d12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d12e:	67bb      	str	r3, [r7, #120]	@ 0x78
 801d130:	2301      	movs	r3, #1
 801d132:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d136:	f383 8810 	msr	PRIMASK, r3
}
 801d13a:	46c0      	nop			@ (mov r8, r8)
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	681a      	ldr	r2, [r3, #0]
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	49a0      	ldr	r1, [pc, #640]	@ (801d3c8 <HAL_UART_IRQHandler+0x5d0>)
 801d148:	400a      	ands	r2, r1
 801d14a:	601a      	str	r2, [r3, #0]
 801d14c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d14e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d152:	f383 8810 	msr	PRIMASK, r3
}
 801d156:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d158:	f3ef 8310 	mrs	r3, PRIMASK
 801d15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801d15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d160:	677b      	str	r3, [r7, #116]	@ 0x74
 801d162:	2301      	movs	r3, #1
 801d164:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d168:	f383 8810 	msr	PRIMASK, r3
}
 801d16c:	46c0      	nop			@ (mov r8, r8)
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	689a      	ldr	r2, [r3, #8]
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	2101      	movs	r1, #1
 801d17a:	438a      	bics	r2, r1
 801d17c:	609a      	str	r2, [r3, #8]
 801d17e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d180:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d184:	f383 8810 	msr	PRIMASK, r3
}
 801d188:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d18a:	f3ef 8310 	mrs	r3, PRIMASK
 801d18e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801d190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d192:	673b      	str	r3, [r7, #112]	@ 0x70
 801d194:	2301      	movs	r3, #1
 801d196:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d19a:	f383 8810 	msr	PRIMASK, r3
}
 801d19e:	46c0      	nop			@ (mov r8, r8)
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	689a      	ldr	r2, [r3, #8]
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	2140      	movs	r1, #64	@ 0x40
 801d1ac:	438a      	bics	r2, r1
 801d1ae:	609a      	str	r2, [r3, #8]
 801d1b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d1b2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d1b6:	f383 8810 	msr	PRIMASK, r3
}
 801d1ba:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	2280      	movs	r2, #128	@ 0x80
 801d1c0:	2120      	movs	r1, #32
 801d1c2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	2200      	movs	r2, #0
 801d1c8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1ca:	f3ef 8310 	mrs	r3, PRIMASK
 801d1ce:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801d1d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d1d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801d1d4:	2301      	movs	r3, #1
 801d1d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d1da:	f383 8810 	msr	PRIMASK, r3
}
 801d1de:	46c0      	nop			@ (mov r8, r8)
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	681a      	ldr	r2, [r3, #0]
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	2110      	movs	r1, #16
 801d1ec:	438a      	bics	r2, r1
 801d1ee:	601a      	str	r2, [r3, #0]
 801d1f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d1f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d1f6:	f383 8810 	msr	PRIMASK, r3
}
 801d1fa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d200:	0018      	movs	r0, r3
 801d202:	f7f7 fc6f 	bl	8014ae4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	2202      	movs	r2, #2
 801d20a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	22ac      	movs	r2, #172	@ 0xac
 801d210:	589b      	ldr	r3, [r3, r2]
 801d212:	687a      	ldr	r2, [r7, #4]
 801d214:	2158      	movs	r1, #88	@ 0x58
 801d216:	5a51      	ldrh	r1, [r2, r1]
 801d218:	687a      	ldr	r2, [r7, #4]
 801d21a:	205a      	movs	r0, #90	@ 0x5a
 801d21c:	5a12      	ldrh	r2, [r2, r0]
 801d21e:	b292      	uxth	r2, r2
 801d220:	1a8a      	subs	r2, r1, r2
 801d222:	b291      	uxth	r1, r2
 801d224:	687a      	ldr	r2, [r7, #4]
 801d226:	0010      	movs	r0, r2
 801d228:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801d22a:	e0c5      	b.n	801d3b8 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	2258      	movs	r2, #88	@ 0x58
 801d230:	5a99      	ldrh	r1, [r3, r2]
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	225a      	movs	r2, #90	@ 0x5a
 801d236:	5a9b      	ldrh	r3, [r3, r2]
 801d238:	b29a      	uxth	r2, r3
 801d23a:	208e      	movs	r0, #142	@ 0x8e
 801d23c:	183b      	adds	r3, r7, r0
 801d23e:	1a8a      	subs	r2, r1, r2
 801d240:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	225a      	movs	r2, #90	@ 0x5a
 801d246:	5a9b      	ldrh	r3, [r3, r2]
 801d248:	b29b      	uxth	r3, r3
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d100      	bne.n	801d250 <HAL_UART_IRQHandler+0x458>
 801d24e:	e0b5      	b.n	801d3bc <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801d250:	183b      	adds	r3, r7, r0
 801d252:	881b      	ldrh	r3, [r3, #0]
 801d254:	2b00      	cmp	r3, #0
 801d256:	d100      	bne.n	801d25a <HAL_UART_IRQHandler+0x462>
 801d258:	e0b0      	b.n	801d3bc <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d25a:	f3ef 8310 	mrs	r3, PRIMASK
 801d25e:	60fb      	str	r3, [r7, #12]
  return(result);
 801d260:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d262:	2488      	movs	r4, #136	@ 0x88
 801d264:	193a      	adds	r2, r7, r4
 801d266:	6013      	str	r3, [r2, #0]
 801d268:	2301      	movs	r3, #1
 801d26a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d26c:	693b      	ldr	r3, [r7, #16]
 801d26e:	f383 8810 	msr	PRIMASK, r3
}
 801d272:	46c0      	nop			@ (mov r8, r8)
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	681a      	ldr	r2, [r3, #0]
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	4953      	ldr	r1, [pc, #332]	@ (801d3cc <HAL_UART_IRQHandler+0x5d4>)
 801d280:	400a      	ands	r2, r1
 801d282:	601a      	str	r2, [r3, #0]
 801d284:	193b      	adds	r3, r7, r4
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d28a:	697b      	ldr	r3, [r7, #20]
 801d28c:	f383 8810 	msr	PRIMASK, r3
}
 801d290:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d292:	f3ef 8310 	mrs	r3, PRIMASK
 801d296:	61bb      	str	r3, [r7, #24]
  return(result);
 801d298:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d29a:	2484      	movs	r4, #132	@ 0x84
 801d29c:	193a      	adds	r2, r7, r4
 801d29e:	6013      	str	r3, [r2, #0]
 801d2a0:	2301      	movs	r3, #1
 801d2a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2a4:	69fb      	ldr	r3, [r7, #28]
 801d2a6:	f383 8810 	msr	PRIMASK, r3
}
 801d2aa:	46c0      	nop			@ (mov r8, r8)
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	689a      	ldr	r2, [r3, #8]
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	2101      	movs	r1, #1
 801d2b8:	438a      	bics	r2, r1
 801d2ba:	609a      	str	r2, [r3, #8]
 801d2bc:	193b      	adds	r3, r7, r4
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2c2:	6a3b      	ldr	r3, [r7, #32]
 801d2c4:	f383 8810 	msr	PRIMASK, r3
}
 801d2c8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	2280      	movs	r2, #128	@ 0x80
 801d2ce:	2120      	movs	r1, #32
 801d2d0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	2200      	movs	r2, #0
 801d2d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	2200      	movs	r2, #0
 801d2dc:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2de:	f3ef 8310 	mrs	r3, PRIMASK
 801d2e2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d2e6:	2480      	movs	r4, #128	@ 0x80
 801d2e8:	193a      	adds	r2, r7, r4
 801d2ea:	6013      	str	r3, [r2, #0]
 801d2ec:	2301      	movs	r3, #1
 801d2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2f2:	f383 8810 	msr	PRIMASK, r3
}
 801d2f6:	46c0      	nop			@ (mov r8, r8)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	681a      	ldr	r2, [r3, #0]
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	2110      	movs	r1, #16
 801d304:	438a      	bics	r2, r1
 801d306:	601a      	str	r2, [r3, #0]
 801d308:	193b      	adds	r3, r7, r4
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d310:	f383 8810 	msr	PRIMASK, r3
}
 801d314:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	2202      	movs	r2, #2
 801d31a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	22ac      	movs	r2, #172	@ 0xac
 801d320:	589b      	ldr	r3, [r3, r2]
 801d322:	183a      	adds	r2, r7, r0
 801d324:	8811      	ldrh	r1, [r2, #0]
 801d326:	687a      	ldr	r2, [r7, #4]
 801d328:	0010      	movs	r0, r2
 801d32a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801d32c:	e046      	b.n	801d3bc <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801d32e:	23a4      	movs	r3, #164	@ 0xa4
 801d330:	18fb      	adds	r3, r7, r3
 801d332:	681a      	ldr	r2, [r3, #0]
 801d334:	2380      	movs	r3, #128	@ 0x80
 801d336:	035b      	lsls	r3, r3, #13
 801d338:	4013      	ands	r3, r2
 801d33a:	d012      	beq.n	801d362 <HAL_UART_IRQHandler+0x56a>
 801d33c:	239c      	movs	r3, #156	@ 0x9c
 801d33e:	18fb      	adds	r3, r7, r3
 801d340:	681a      	ldr	r2, [r3, #0]
 801d342:	2380      	movs	r3, #128	@ 0x80
 801d344:	03db      	lsls	r3, r3, #15
 801d346:	4013      	ands	r3, r2
 801d348:	d00b      	beq.n	801d362 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	681b      	ldr	r3, [r3, #0]
 801d34e:	2280      	movs	r2, #128	@ 0x80
 801d350:	0352      	lsls	r2, r2, #13
 801d352:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	22a8      	movs	r2, #168	@ 0xa8
 801d358:	589b      	ldr	r3, [r3, r2]
 801d35a:	687a      	ldr	r2, [r7, #4]
 801d35c:	0010      	movs	r0, r2
 801d35e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801d360:	e02f      	b.n	801d3c2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801d362:	23a4      	movs	r3, #164	@ 0xa4
 801d364:	18fb      	adds	r3, r7, r3
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	2280      	movs	r2, #128	@ 0x80
 801d36a:	4013      	ands	r3, r2
 801d36c:	d00f      	beq.n	801d38e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801d36e:	23a0      	movs	r3, #160	@ 0xa0
 801d370:	18fb      	adds	r3, r7, r3
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	2280      	movs	r2, #128	@ 0x80
 801d376:	4013      	ands	r3, r2
 801d378:	d009      	beq.n	801d38e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d01e      	beq.n	801d3c0 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d386:	687a      	ldr	r2, [r7, #4]
 801d388:	0010      	movs	r0, r2
 801d38a:	4798      	blx	r3
    }
    return;
 801d38c:	e018      	b.n	801d3c0 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801d38e:	23a4      	movs	r3, #164	@ 0xa4
 801d390:	18fb      	adds	r3, r7, r3
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	2240      	movs	r2, #64	@ 0x40
 801d396:	4013      	ands	r3, r2
 801d398:	d013      	beq.n	801d3c2 <HAL_UART_IRQHandler+0x5ca>
 801d39a:	23a0      	movs	r3, #160	@ 0xa0
 801d39c:	18fb      	adds	r3, r7, r3
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	2240      	movs	r2, #64	@ 0x40
 801d3a2:	4013      	ands	r3, r2
 801d3a4:	d00d      	beq.n	801d3c2 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	0018      	movs	r0, r3
 801d3aa:	f001 f862 	bl	801e472 <UART_EndTransmit_IT>
    return;
 801d3ae:	e008      	b.n	801d3c2 <HAL_UART_IRQHandler+0x5ca>
      return;
 801d3b0:	46c0      	nop			@ (mov r8, r8)
 801d3b2:	e006      	b.n	801d3c2 <HAL_UART_IRQHandler+0x5ca>
    return;
 801d3b4:	46c0      	nop			@ (mov r8, r8)
 801d3b6:	e004      	b.n	801d3c2 <HAL_UART_IRQHandler+0x5ca>
      return;
 801d3b8:	46c0      	nop			@ (mov r8, r8)
 801d3ba:	e002      	b.n	801d3c2 <HAL_UART_IRQHandler+0x5ca>
      return;
 801d3bc:	46c0      	nop			@ (mov r8, r8)
 801d3be:	e000      	b.n	801d3c2 <HAL_UART_IRQHandler+0x5ca>
    return;
 801d3c0:	46c0      	nop			@ (mov r8, r8)
  }

}
 801d3c2:	46bd      	mov	sp, r7
 801d3c4:	b02b      	add	sp, #172	@ 0xac
 801d3c6:	bd90      	pop	{r4, r7, pc}
 801d3c8:	fffffeff 	.word	0xfffffeff
 801d3cc:	fffffedf 	.word	0xfffffedf

0801d3d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801d3d0:	b580      	push	{r7, lr}
 801d3d2:	b082      	sub	sp, #8
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801d3d8:	46c0      	nop			@ (mov r8, r8)
 801d3da:	46bd      	mov	sp, r7
 801d3dc:	b002      	add	sp, #8
 801d3de:	bd80      	pop	{r7, pc}

0801d3e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801d3e0:	b580      	push	{r7, lr}
 801d3e2:	b082      	sub	sp, #8
 801d3e4:	af00      	add	r7, sp, #0
 801d3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801d3e8:	46c0      	nop			@ (mov r8, r8)
 801d3ea:	46bd      	mov	sp, r7
 801d3ec:	b002      	add	sp, #8
 801d3ee:	bd80      	pop	{r7, pc}

0801d3f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801d3f0:	b580      	push	{r7, lr}
 801d3f2:	b082      	sub	sp, #8
 801d3f4:	af00      	add	r7, sp, #0
 801d3f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801d3f8:	46c0      	nop			@ (mov r8, r8)
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	b002      	add	sp, #8
 801d3fe:	bd80      	pop	{r7, pc}

0801d400 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801d400:	b580      	push	{r7, lr}
 801d402:	b082      	sub	sp, #8
 801d404:	af00      	add	r7, sp, #0
 801d406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801d408:	46c0      	nop			@ (mov r8, r8)
 801d40a:	46bd      	mov	sp, r7
 801d40c:	b002      	add	sp, #8
 801d40e:	bd80      	pop	{r7, pc}

0801d410 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b082      	sub	sp, #8
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801d418:	46c0      	nop			@ (mov r8, r8)
 801d41a:	46bd      	mov	sp, r7
 801d41c:	b002      	add	sp, #8
 801d41e:	bd80      	pop	{r7, pc}

0801d420 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801d420:	b580      	push	{r7, lr}
 801d422:	b082      	sub	sp, #8
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801d428:	46c0      	nop			@ (mov r8, r8)
 801d42a:	46bd      	mov	sp, r7
 801d42c:	b002      	add	sp, #8
 801d42e:	bd80      	pop	{r7, pc}

0801d430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801d430:	b580      	push	{r7, lr}
 801d432:	b082      	sub	sp, #8
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]
 801d438:	000a      	movs	r2, r1
 801d43a:	1cbb      	adds	r3, r7, #2
 801d43c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801d43e:	46c0      	nop			@ (mov r8, r8)
 801d440:	46bd      	mov	sp, r7
 801d442:	b002      	add	sp, #8
 801d444:	bd80      	pop	{r7, pc}
	...

0801d448 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801d448:	b580      	push	{r7, lr}
 801d44a:	b082      	sub	sp, #8
 801d44c:	af00      	add	r7, sp, #0
 801d44e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	2188      	movs	r1, #136	@ 0x88
 801d454:	4a14      	ldr	r2, [pc, #80]	@ (801d4a8 <UART_InitCallbacksToDefault+0x60>)
 801d456:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	218c      	movs	r1, #140	@ 0x8c
 801d45c:	4a13      	ldr	r2, [pc, #76]	@ (801d4ac <UART_InitCallbacksToDefault+0x64>)
 801d45e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	2190      	movs	r1, #144	@ 0x90
 801d464:	4a12      	ldr	r2, [pc, #72]	@ (801d4b0 <UART_InitCallbacksToDefault+0x68>)
 801d466:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	2194      	movs	r1, #148	@ 0x94
 801d46c:	4a11      	ldr	r2, [pc, #68]	@ (801d4b4 <UART_InitCallbacksToDefault+0x6c>)
 801d46e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	2198      	movs	r1, #152	@ 0x98
 801d474:	4a10      	ldr	r2, [pc, #64]	@ (801d4b8 <UART_InitCallbacksToDefault+0x70>)
 801d476:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	219c      	movs	r1, #156	@ 0x9c
 801d47c:	4a0f      	ldr	r2, [pc, #60]	@ (801d4bc <UART_InitCallbacksToDefault+0x74>)
 801d47e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	21a0      	movs	r1, #160	@ 0xa0
 801d484:	4a0e      	ldr	r2, [pc, #56]	@ (801d4c0 <UART_InitCallbacksToDefault+0x78>)
 801d486:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	21a4      	movs	r1, #164	@ 0xa4
 801d48c:	4a0d      	ldr	r2, [pc, #52]	@ (801d4c4 <UART_InitCallbacksToDefault+0x7c>)
 801d48e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	21a8      	movs	r1, #168	@ 0xa8
 801d494:	4a0c      	ldr	r2, [pc, #48]	@ (801d4c8 <UART_InitCallbacksToDefault+0x80>)
 801d496:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	21ac      	movs	r1, #172	@ 0xac
 801d49c:	4a0b      	ldr	r2, [pc, #44]	@ (801d4cc <UART_InitCallbacksToDefault+0x84>)
 801d49e:	505a      	str	r2, [r3, r1]

}
 801d4a0:	46c0      	nop			@ (mov r8, r8)
 801d4a2:	46bd      	mov	sp, r7
 801d4a4:	b002      	add	sp, #8
 801d4a6:	bd80      	pop	{r7, pc}
 801d4a8:	0801d3e1 	.word	0x0801d3e1
 801d4ac:	0801d3d1 	.word	0x0801d3d1
 801d4b0:	0801d3f1 	.word	0x0801d3f1
 801d4b4:	0800cadd 	.word	0x0800cadd
 801d4b8:	08005089 	.word	0x08005089
 801d4bc:	0801d401 	.word	0x0801d401
 801d4c0:	0801d411 	.word	0x0801d411
 801d4c4:	0801d421 	.word	0x0801d421
 801d4c8:	0801e865 	.word	0x0801e865
 801d4cc:	0801d431 	.word	0x0801d431

0801d4d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801d4d0:	b5b0      	push	{r4, r5, r7, lr}
 801d4d2:	b08e      	sub	sp, #56	@ 0x38
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801d4d8:	231a      	movs	r3, #26
 801d4da:	2218      	movs	r2, #24
 801d4dc:	189b      	adds	r3, r3, r2
 801d4de:	19db      	adds	r3, r3, r7
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d4e4:	69fb      	ldr	r3, [r7, #28]
 801d4e6:	689a      	ldr	r2, [r3, #8]
 801d4e8:	69fb      	ldr	r3, [r7, #28]
 801d4ea:	691b      	ldr	r3, [r3, #16]
 801d4ec:	431a      	orrs	r2, r3
 801d4ee:	69fb      	ldr	r3, [r7, #28]
 801d4f0:	695b      	ldr	r3, [r3, #20]
 801d4f2:	431a      	orrs	r2, r3
 801d4f4:	69fb      	ldr	r3, [r7, #28]
 801d4f6:	69db      	ldr	r3, [r3, #28]
 801d4f8:	4313      	orrs	r3, r2
 801d4fa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d4fc:	69fb      	ldr	r3, [r7, #28]
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	4ac3      	ldr	r2, [pc, #780]	@ (801d810 <UART_SetConfig+0x340>)
 801d504:	4013      	ands	r3, r2
 801d506:	0019      	movs	r1, r3
 801d508:	69fb      	ldr	r3, [r7, #28]
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d50e:	430a      	orrs	r2, r1
 801d510:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801d512:	69fb      	ldr	r3, [r7, #28]
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	685b      	ldr	r3, [r3, #4]
 801d518:	4abe      	ldr	r2, [pc, #760]	@ (801d814 <UART_SetConfig+0x344>)
 801d51a:	4013      	ands	r3, r2
 801d51c:	0019      	movs	r1, r3
 801d51e:	69fb      	ldr	r3, [r7, #28]
 801d520:	68da      	ldr	r2, [r3, #12]
 801d522:	69fb      	ldr	r3, [r7, #28]
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	430a      	orrs	r2, r1
 801d528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801d52a:	69fb      	ldr	r3, [r7, #28]
 801d52c:	699b      	ldr	r3, [r3, #24]
 801d52e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801d530:	69fb      	ldr	r3, [r7, #28]
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	4ab8      	ldr	r2, [pc, #736]	@ (801d818 <UART_SetConfig+0x348>)
 801d536:	4293      	cmp	r3, r2
 801d538:	d004      	beq.n	801d544 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801d53a:	69fb      	ldr	r3, [r7, #28]
 801d53c:	6a1b      	ldr	r3, [r3, #32]
 801d53e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d540:	4313      	orrs	r3, r2
 801d542:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801d544:	69fb      	ldr	r3, [r7, #28]
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	689b      	ldr	r3, [r3, #8]
 801d54a:	4ab4      	ldr	r2, [pc, #720]	@ (801d81c <UART_SetConfig+0x34c>)
 801d54c:	4013      	ands	r3, r2
 801d54e:	0019      	movs	r1, r3
 801d550:	69fb      	ldr	r3, [r7, #28]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d556:	430a      	orrs	r2, r1
 801d558:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d55a:	69fb      	ldr	r3, [r7, #28]
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	4ab0      	ldr	r2, [pc, #704]	@ (801d820 <UART_SetConfig+0x350>)
 801d560:	4293      	cmp	r3, r2
 801d562:	d131      	bne.n	801d5c8 <UART_SetConfig+0xf8>
 801d564:	4baf      	ldr	r3, [pc, #700]	@ (801d824 <UART_SetConfig+0x354>)
 801d566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d568:	2203      	movs	r2, #3
 801d56a:	4013      	ands	r3, r2
 801d56c:	2b03      	cmp	r3, #3
 801d56e:	d01d      	beq.n	801d5ac <UART_SetConfig+0xdc>
 801d570:	d823      	bhi.n	801d5ba <UART_SetConfig+0xea>
 801d572:	2b02      	cmp	r3, #2
 801d574:	d00c      	beq.n	801d590 <UART_SetConfig+0xc0>
 801d576:	d820      	bhi.n	801d5ba <UART_SetConfig+0xea>
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d002      	beq.n	801d582 <UART_SetConfig+0xb2>
 801d57c:	2b01      	cmp	r3, #1
 801d57e:	d00e      	beq.n	801d59e <UART_SetConfig+0xce>
 801d580:	e01b      	b.n	801d5ba <UART_SetConfig+0xea>
 801d582:	231b      	movs	r3, #27
 801d584:	2218      	movs	r2, #24
 801d586:	189b      	adds	r3, r3, r2
 801d588:	19db      	adds	r3, r3, r7
 801d58a:	2201      	movs	r2, #1
 801d58c:	701a      	strb	r2, [r3, #0]
 801d58e:	e0b4      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d590:	231b      	movs	r3, #27
 801d592:	2218      	movs	r2, #24
 801d594:	189b      	adds	r3, r3, r2
 801d596:	19db      	adds	r3, r3, r7
 801d598:	2202      	movs	r2, #2
 801d59a:	701a      	strb	r2, [r3, #0]
 801d59c:	e0ad      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d59e:	231b      	movs	r3, #27
 801d5a0:	2218      	movs	r2, #24
 801d5a2:	189b      	adds	r3, r3, r2
 801d5a4:	19db      	adds	r3, r3, r7
 801d5a6:	2204      	movs	r2, #4
 801d5a8:	701a      	strb	r2, [r3, #0]
 801d5aa:	e0a6      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d5ac:	231b      	movs	r3, #27
 801d5ae:	2218      	movs	r2, #24
 801d5b0:	189b      	adds	r3, r3, r2
 801d5b2:	19db      	adds	r3, r3, r7
 801d5b4:	2208      	movs	r2, #8
 801d5b6:	701a      	strb	r2, [r3, #0]
 801d5b8:	e09f      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d5ba:	231b      	movs	r3, #27
 801d5bc:	2218      	movs	r2, #24
 801d5be:	189b      	adds	r3, r3, r2
 801d5c0:	19db      	adds	r3, r3, r7
 801d5c2:	2210      	movs	r2, #16
 801d5c4:	701a      	strb	r2, [r3, #0]
 801d5c6:	e098      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d5c8:	69fb      	ldr	r3, [r7, #28]
 801d5ca:	681b      	ldr	r3, [r3, #0]
 801d5cc:	4a96      	ldr	r2, [pc, #600]	@ (801d828 <UART_SetConfig+0x358>)
 801d5ce:	4293      	cmp	r3, r2
 801d5d0:	d131      	bne.n	801d636 <UART_SetConfig+0x166>
 801d5d2:	4b94      	ldr	r3, [pc, #592]	@ (801d824 <UART_SetConfig+0x354>)
 801d5d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d5d6:	220c      	movs	r2, #12
 801d5d8:	4013      	ands	r3, r2
 801d5da:	2b0c      	cmp	r3, #12
 801d5dc:	d01d      	beq.n	801d61a <UART_SetConfig+0x14a>
 801d5de:	d823      	bhi.n	801d628 <UART_SetConfig+0x158>
 801d5e0:	2b08      	cmp	r3, #8
 801d5e2:	d00c      	beq.n	801d5fe <UART_SetConfig+0x12e>
 801d5e4:	d820      	bhi.n	801d628 <UART_SetConfig+0x158>
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d002      	beq.n	801d5f0 <UART_SetConfig+0x120>
 801d5ea:	2b04      	cmp	r3, #4
 801d5ec:	d00e      	beq.n	801d60c <UART_SetConfig+0x13c>
 801d5ee:	e01b      	b.n	801d628 <UART_SetConfig+0x158>
 801d5f0:	231b      	movs	r3, #27
 801d5f2:	2218      	movs	r2, #24
 801d5f4:	189b      	adds	r3, r3, r2
 801d5f6:	19db      	adds	r3, r3, r7
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	701a      	strb	r2, [r3, #0]
 801d5fc:	e07d      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d5fe:	231b      	movs	r3, #27
 801d600:	2218      	movs	r2, #24
 801d602:	189b      	adds	r3, r3, r2
 801d604:	19db      	adds	r3, r3, r7
 801d606:	2202      	movs	r2, #2
 801d608:	701a      	strb	r2, [r3, #0]
 801d60a:	e076      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d60c:	231b      	movs	r3, #27
 801d60e:	2218      	movs	r2, #24
 801d610:	189b      	adds	r3, r3, r2
 801d612:	19db      	adds	r3, r3, r7
 801d614:	2204      	movs	r2, #4
 801d616:	701a      	strb	r2, [r3, #0]
 801d618:	e06f      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d61a:	231b      	movs	r3, #27
 801d61c:	2218      	movs	r2, #24
 801d61e:	189b      	adds	r3, r3, r2
 801d620:	19db      	adds	r3, r3, r7
 801d622:	2208      	movs	r2, #8
 801d624:	701a      	strb	r2, [r3, #0]
 801d626:	e068      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d628:	231b      	movs	r3, #27
 801d62a:	2218      	movs	r2, #24
 801d62c:	189b      	adds	r3, r3, r2
 801d62e:	19db      	adds	r3, r3, r7
 801d630:	2210      	movs	r2, #16
 801d632:	701a      	strb	r2, [r3, #0]
 801d634:	e061      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d636:	69fb      	ldr	r3, [r7, #28]
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	4a7c      	ldr	r2, [pc, #496]	@ (801d82c <UART_SetConfig+0x35c>)
 801d63c:	4293      	cmp	r3, r2
 801d63e:	d106      	bne.n	801d64e <UART_SetConfig+0x17e>
 801d640:	231b      	movs	r3, #27
 801d642:	2218      	movs	r2, #24
 801d644:	189b      	adds	r3, r3, r2
 801d646:	19db      	adds	r3, r3, r7
 801d648:	2200      	movs	r2, #0
 801d64a:	701a      	strb	r2, [r3, #0]
 801d64c:	e055      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d64e:	69fb      	ldr	r3, [r7, #28]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	4a77      	ldr	r2, [pc, #476]	@ (801d830 <UART_SetConfig+0x360>)
 801d654:	4293      	cmp	r3, r2
 801d656:	d106      	bne.n	801d666 <UART_SetConfig+0x196>
 801d658:	231b      	movs	r3, #27
 801d65a:	2218      	movs	r2, #24
 801d65c:	189b      	adds	r3, r3, r2
 801d65e:	19db      	adds	r3, r3, r7
 801d660:	2200      	movs	r2, #0
 801d662:	701a      	strb	r2, [r3, #0]
 801d664:	e049      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d666:	69fb      	ldr	r3, [r7, #28]
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	4a6b      	ldr	r2, [pc, #428]	@ (801d818 <UART_SetConfig+0x348>)
 801d66c:	4293      	cmp	r3, r2
 801d66e:	d13e      	bne.n	801d6ee <UART_SetConfig+0x21e>
 801d670:	4b6c      	ldr	r3, [pc, #432]	@ (801d824 <UART_SetConfig+0x354>)
 801d672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801d674:	23c0      	movs	r3, #192	@ 0xc0
 801d676:	011b      	lsls	r3, r3, #4
 801d678:	4013      	ands	r3, r2
 801d67a:	22c0      	movs	r2, #192	@ 0xc0
 801d67c:	0112      	lsls	r2, r2, #4
 801d67e:	4293      	cmp	r3, r2
 801d680:	d027      	beq.n	801d6d2 <UART_SetConfig+0x202>
 801d682:	22c0      	movs	r2, #192	@ 0xc0
 801d684:	0112      	lsls	r2, r2, #4
 801d686:	4293      	cmp	r3, r2
 801d688:	d82a      	bhi.n	801d6e0 <UART_SetConfig+0x210>
 801d68a:	2280      	movs	r2, #128	@ 0x80
 801d68c:	0112      	lsls	r2, r2, #4
 801d68e:	4293      	cmp	r3, r2
 801d690:	d011      	beq.n	801d6b6 <UART_SetConfig+0x1e6>
 801d692:	2280      	movs	r2, #128	@ 0x80
 801d694:	0112      	lsls	r2, r2, #4
 801d696:	4293      	cmp	r3, r2
 801d698:	d822      	bhi.n	801d6e0 <UART_SetConfig+0x210>
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d004      	beq.n	801d6a8 <UART_SetConfig+0x1d8>
 801d69e:	2280      	movs	r2, #128	@ 0x80
 801d6a0:	00d2      	lsls	r2, r2, #3
 801d6a2:	4293      	cmp	r3, r2
 801d6a4:	d00e      	beq.n	801d6c4 <UART_SetConfig+0x1f4>
 801d6a6:	e01b      	b.n	801d6e0 <UART_SetConfig+0x210>
 801d6a8:	231b      	movs	r3, #27
 801d6aa:	2218      	movs	r2, #24
 801d6ac:	189b      	adds	r3, r3, r2
 801d6ae:	19db      	adds	r3, r3, r7
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	701a      	strb	r2, [r3, #0]
 801d6b4:	e021      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d6b6:	231b      	movs	r3, #27
 801d6b8:	2218      	movs	r2, #24
 801d6ba:	189b      	adds	r3, r3, r2
 801d6bc:	19db      	adds	r3, r3, r7
 801d6be:	2202      	movs	r2, #2
 801d6c0:	701a      	strb	r2, [r3, #0]
 801d6c2:	e01a      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d6c4:	231b      	movs	r3, #27
 801d6c6:	2218      	movs	r2, #24
 801d6c8:	189b      	adds	r3, r3, r2
 801d6ca:	19db      	adds	r3, r3, r7
 801d6cc:	2204      	movs	r2, #4
 801d6ce:	701a      	strb	r2, [r3, #0]
 801d6d0:	e013      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d6d2:	231b      	movs	r3, #27
 801d6d4:	2218      	movs	r2, #24
 801d6d6:	189b      	adds	r3, r3, r2
 801d6d8:	19db      	adds	r3, r3, r7
 801d6da:	2208      	movs	r2, #8
 801d6dc:	701a      	strb	r2, [r3, #0]
 801d6de:	e00c      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d6e0:	231b      	movs	r3, #27
 801d6e2:	2218      	movs	r2, #24
 801d6e4:	189b      	adds	r3, r3, r2
 801d6e6:	19db      	adds	r3, r3, r7
 801d6e8:	2210      	movs	r2, #16
 801d6ea:	701a      	strb	r2, [r3, #0]
 801d6ec:	e005      	b.n	801d6fa <UART_SetConfig+0x22a>
 801d6ee:	231b      	movs	r3, #27
 801d6f0:	2218      	movs	r2, #24
 801d6f2:	189b      	adds	r3, r3, r2
 801d6f4:	19db      	adds	r3, r3, r7
 801d6f6:	2210      	movs	r2, #16
 801d6f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801d6fa:	69fb      	ldr	r3, [r7, #28]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	4a46      	ldr	r2, [pc, #280]	@ (801d818 <UART_SetConfig+0x348>)
 801d700:	4293      	cmp	r3, r2
 801d702:	d000      	beq.n	801d706 <UART_SetConfig+0x236>
 801d704:	e09a      	b.n	801d83c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801d706:	231b      	movs	r3, #27
 801d708:	2218      	movs	r2, #24
 801d70a:	189b      	adds	r3, r3, r2
 801d70c:	19db      	adds	r3, r3, r7
 801d70e:	781b      	ldrb	r3, [r3, #0]
 801d710:	2b08      	cmp	r3, #8
 801d712:	d01d      	beq.n	801d750 <UART_SetConfig+0x280>
 801d714:	dc20      	bgt.n	801d758 <UART_SetConfig+0x288>
 801d716:	2b04      	cmp	r3, #4
 801d718:	d015      	beq.n	801d746 <UART_SetConfig+0x276>
 801d71a:	dc1d      	bgt.n	801d758 <UART_SetConfig+0x288>
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d002      	beq.n	801d726 <UART_SetConfig+0x256>
 801d720:	2b02      	cmp	r3, #2
 801d722:	d005      	beq.n	801d730 <UART_SetConfig+0x260>
 801d724:	e018      	b.n	801d758 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d726:	f7fd fe2d 	bl	801b384 <HAL_RCC_GetPCLK1Freq>
 801d72a:	0003      	movs	r3, r0
 801d72c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d72e:	e01c      	b.n	801d76a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d730:	4b3c      	ldr	r3, [pc, #240]	@ (801d824 <UART_SetConfig+0x354>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	2210      	movs	r2, #16
 801d736:	4013      	ands	r3, r2
 801d738:	d002      	beq.n	801d740 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d73a:	4b3e      	ldr	r3, [pc, #248]	@ (801d834 <UART_SetConfig+0x364>)
 801d73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d73e:	e014      	b.n	801d76a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801d740:	4b3d      	ldr	r3, [pc, #244]	@ (801d838 <UART_SetConfig+0x368>)
 801d742:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d744:	e011      	b.n	801d76a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d746:	f7fd fd6d 	bl	801b224 <HAL_RCC_GetSysClockFreq>
 801d74a:	0003      	movs	r3, r0
 801d74c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d74e:	e00c      	b.n	801d76a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d750:	2380      	movs	r3, #128	@ 0x80
 801d752:	021b      	lsls	r3, r3, #8
 801d754:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d756:	e008      	b.n	801d76a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801d758:	2300      	movs	r3, #0
 801d75a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d75c:	231a      	movs	r3, #26
 801d75e:	2218      	movs	r2, #24
 801d760:	189b      	adds	r3, r3, r2
 801d762:	19db      	adds	r3, r3, r7
 801d764:	2201      	movs	r2, #1
 801d766:	701a      	strb	r2, [r3, #0]
        break;
 801d768:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801d76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d100      	bne.n	801d772 <UART_SetConfig+0x2a2>
 801d770:	e133      	b.n	801d9da <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d772:	69fb      	ldr	r3, [r7, #28]
 801d774:	685a      	ldr	r2, [r3, #4]
 801d776:	0013      	movs	r3, r2
 801d778:	005b      	lsls	r3, r3, #1
 801d77a:	189b      	adds	r3, r3, r2
 801d77c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d77e:	429a      	cmp	r2, r3
 801d780:	d305      	bcc.n	801d78e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801d782:	69fb      	ldr	r3, [r7, #28]
 801d784:	685b      	ldr	r3, [r3, #4]
 801d786:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d78a:	429a      	cmp	r2, r3
 801d78c:	d906      	bls.n	801d79c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801d78e:	231a      	movs	r3, #26
 801d790:	2218      	movs	r2, #24
 801d792:	189b      	adds	r3, r3, r2
 801d794:	19db      	adds	r3, r3, r7
 801d796:	2201      	movs	r2, #1
 801d798:	701a      	strb	r2, [r3, #0]
 801d79a:	e11e      	b.n	801d9da <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801d79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d79e:	613b      	str	r3, [r7, #16]
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	617b      	str	r3, [r7, #20]
 801d7a4:	6939      	ldr	r1, [r7, #16]
 801d7a6:	697a      	ldr	r2, [r7, #20]
 801d7a8:	000b      	movs	r3, r1
 801d7aa:	0e1b      	lsrs	r3, r3, #24
 801d7ac:	0010      	movs	r0, r2
 801d7ae:	0205      	lsls	r5, r0, #8
 801d7b0:	431d      	orrs	r5, r3
 801d7b2:	000b      	movs	r3, r1
 801d7b4:	021c      	lsls	r4, r3, #8
 801d7b6:	69fb      	ldr	r3, [r7, #28]
 801d7b8:	685b      	ldr	r3, [r3, #4]
 801d7ba:	085b      	lsrs	r3, r3, #1
 801d7bc:	60bb      	str	r3, [r7, #8]
 801d7be:	2300      	movs	r3, #0
 801d7c0:	60fb      	str	r3, [r7, #12]
 801d7c2:	68b8      	ldr	r0, [r7, #8]
 801d7c4:	68f9      	ldr	r1, [r7, #12]
 801d7c6:	1900      	adds	r0, r0, r4
 801d7c8:	4169      	adcs	r1, r5
 801d7ca:	69fb      	ldr	r3, [r7, #28]
 801d7cc:	685b      	ldr	r3, [r3, #4]
 801d7ce:	603b      	str	r3, [r7, #0]
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	607b      	str	r3, [r7, #4]
 801d7d4:	683a      	ldr	r2, [r7, #0]
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	f7e2 fed2 	bl	8000580 <__aeabi_uldivmod>
 801d7dc:	0002      	movs	r2, r0
 801d7de:	000b      	movs	r3, r1
 801d7e0:	0013      	movs	r3, r2
 801d7e2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801d7e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d7e6:	23c0      	movs	r3, #192	@ 0xc0
 801d7e8:	009b      	lsls	r3, r3, #2
 801d7ea:	429a      	cmp	r2, r3
 801d7ec:	d309      	bcc.n	801d802 <UART_SetConfig+0x332>
 801d7ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d7f0:	2380      	movs	r3, #128	@ 0x80
 801d7f2:	035b      	lsls	r3, r3, #13
 801d7f4:	429a      	cmp	r2, r3
 801d7f6:	d204      	bcs.n	801d802 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801d7f8:	69fb      	ldr	r3, [r7, #28]
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d7fe:	60da      	str	r2, [r3, #12]
 801d800:	e0eb      	b.n	801d9da <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801d802:	231a      	movs	r3, #26
 801d804:	2218      	movs	r2, #24
 801d806:	189b      	adds	r3, r3, r2
 801d808:	19db      	adds	r3, r3, r7
 801d80a:	2201      	movs	r2, #1
 801d80c:	701a      	strb	r2, [r3, #0]
 801d80e:	e0e4      	b.n	801d9da <UART_SetConfig+0x50a>
 801d810:	efff69f3 	.word	0xefff69f3
 801d814:	ffffcfff 	.word	0xffffcfff
 801d818:	40004800 	.word	0x40004800
 801d81c:	fffff4ff 	.word	0xfffff4ff
 801d820:	40013800 	.word	0x40013800
 801d824:	40021000 	.word	0x40021000
 801d828:	40004400 	.word	0x40004400
 801d82c:	40004c00 	.word	0x40004c00
 801d830:	40005000 	.word	0x40005000
 801d834:	003d0900 	.word	0x003d0900
 801d838:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d83c:	69fb      	ldr	r3, [r7, #28]
 801d83e:	69da      	ldr	r2, [r3, #28]
 801d840:	2380      	movs	r3, #128	@ 0x80
 801d842:	021b      	lsls	r3, r3, #8
 801d844:	429a      	cmp	r2, r3
 801d846:	d000      	beq.n	801d84a <UART_SetConfig+0x37a>
 801d848:	e070      	b.n	801d92c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801d84a:	231b      	movs	r3, #27
 801d84c:	2218      	movs	r2, #24
 801d84e:	189b      	adds	r3, r3, r2
 801d850:	19db      	adds	r3, r3, r7
 801d852:	781b      	ldrb	r3, [r3, #0]
 801d854:	2b08      	cmp	r3, #8
 801d856:	d822      	bhi.n	801d89e <UART_SetConfig+0x3ce>
 801d858:	009a      	lsls	r2, r3, #2
 801d85a:	4b67      	ldr	r3, [pc, #412]	@ (801d9f8 <UART_SetConfig+0x528>)
 801d85c:	18d3      	adds	r3, r2, r3
 801d85e:	681b      	ldr	r3, [r3, #0]
 801d860:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d862:	f7fd fd8f 	bl	801b384 <HAL_RCC_GetPCLK1Freq>
 801d866:	0003      	movs	r3, r0
 801d868:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d86a:	e021      	b.n	801d8b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d86c:	f7fd fda0 	bl	801b3b0 <HAL_RCC_GetPCLK2Freq>
 801d870:	0003      	movs	r3, r0
 801d872:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d874:	e01c      	b.n	801d8b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d876:	4b61      	ldr	r3, [pc, #388]	@ (801d9fc <UART_SetConfig+0x52c>)
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	2210      	movs	r2, #16
 801d87c:	4013      	ands	r3, r2
 801d87e:	d002      	beq.n	801d886 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d880:	4b5f      	ldr	r3, [pc, #380]	@ (801da00 <UART_SetConfig+0x530>)
 801d882:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d884:	e014      	b.n	801d8b0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801d886:	4b5f      	ldr	r3, [pc, #380]	@ (801da04 <UART_SetConfig+0x534>)
 801d888:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d88a:	e011      	b.n	801d8b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d88c:	f7fd fcca 	bl	801b224 <HAL_RCC_GetSysClockFreq>
 801d890:	0003      	movs	r3, r0
 801d892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d894:	e00c      	b.n	801d8b0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d896:	2380      	movs	r3, #128	@ 0x80
 801d898:	021b      	lsls	r3, r3, #8
 801d89a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d89c:	e008      	b.n	801d8b0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801d89e:	2300      	movs	r3, #0
 801d8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d8a2:	231a      	movs	r3, #26
 801d8a4:	2218      	movs	r2, #24
 801d8a6:	189b      	adds	r3, r3, r2
 801d8a8:	19db      	adds	r3, r3, r7
 801d8aa:	2201      	movs	r2, #1
 801d8ac:	701a      	strb	r2, [r3, #0]
        break;
 801d8ae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	d100      	bne.n	801d8b8 <UART_SetConfig+0x3e8>
 801d8b6:	e090      	b.n	801d9da <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801d8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8ba:	005a      	lsls	r2, r3, #1
 801d8bc:	69fb      	ldr	r3, [r7, #28]
 801d8be:	685b      	ldr	r3, [r3, #4]
 801d8c0:	085b      	lsrs	r3, r3, #1
 801d8c2:	18d2      	adds	r2, r2, r3
 801d8c4:	69fb      	ldr	r3, [r7, #28]
 801d8c6:	685b      	ldr	r3, [r3, #4]
 801d8c8:	0019      	movs	r1, r3
 801d8ca:	0010      	movs	r0, r2
 801d8cc:	f7e2 fc6a 	bl	80001a4 <__udivsi3>
 801d8d0:	0003      	movs	r3, r0
 801d8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8d6:	2b0f      	cmp	r3, #15
 801d8d8:	d921      	bls.n	801d91e <UART_SetConfig+0x44e>
 801d8da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d8dc:	2380      	movs	r3, #128	@ 0x80
 801d8de:	025b      	lsls	r3, r3, #9
 801d8e0:	429a      	cmp	r2, r3
 801d8e2:	d21c      	bcs.n	801d91e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8e6:	b29a      	uxth	r2, r3
 801d8e8:	200e      	movs	r0, #14
 801d8ea:	2418      	movs	r4, #24
 801d8ec:	1903      	adds	r3, r0, r4
 801d8ee:	19db      	adds	r3, r3, r7
 801d8f0:	210f      	movs	r1, #15
 801d8f2:	438a      	bics	r2, r1
 801d8f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801d8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8f8:	085b      	lsrs	r3, r3, #1
 801d8fa:	b29b      	uxth	r3, r3
 801d8fc:	2207      	movs	r2, #7
 801d8fe:	4013      	ands	r3, r2
 801d900:	b299      	uxth	r1, r3
 801d902:	1903      	adds	r3, r0, r4
 801d904:	19db      	adds	r3, r3, r7
 801d906:	1902      	adds	r2, r0, r4
 801d908:	19d2      	adds	r2, r2, r7
 801d90a:	8812      	ldrh	r2, [r2, #0]
 801d90c:	430a      	orrs	r2, r1
 801d90e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801d910:	69fb      	ldr	r3, [r7, #28]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	1902      	adds	r2, r0, r4
 801d916:	19d2      	adds	r2, r2, r7
 801d918:	8812      	ldrh	r2, [r2, #0]
 801d91a:	60da      	str	r2, [r3, #12]
 801d91c:	e05d      	b.n	801d9da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d91e:	231a      	movs	r3, #26
 801d920:	2218      	movs	r2, #24
 801d922:	189b      	adds	r3, r3, r2
 801d924:	19db      	adds	r3, r3, r7
 801d926:	2201      	movs	r2, #1
 801d928:	701a      	strb	r2, [r3, #0]
 801d92a:	e056      	b.n	801d9da <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801d92c:	231b      	movs	r3, #27
 801d92e:	2218      	movs	r2, #24
 801d930:	189b      	adds	r3, r3, r2
 801d932:	19db      	adds	r3, r3, r7
 801d934:	781b      	ldrb	r3, [r3, #0]
 801d936:	2b08      	cmp	r3, #8
 801d938:	d822      	bhi.n	801d980 <UART_SetConfig+0x4b0>
 801d93a:	009a      	lsls	r2, r3, #2
 801d93c:	4b32      	ldr	r3, [pc, #200]	@ (801da08 <UART_SetConfig+0x538>)
 801d93e:	18d3      	adds	r3, r2, r3
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d944:	f7fd fd1e 	bl	801b384 <HAL_RCC_GetPCLK1Freq>
 801d948:	0003      	movs	r3, r0
 801d94a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d94c:	e021      	b.n	801d992 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d94e:	f7fd fd2f 	bl	801b3b0 <HAL_RCC_GetPCLK2Freq>
 801d952:	0003      	movs	r3, r0
 801d954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d956:	e01c      	b.n	801d992 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d958:	4b28      	ldr	r3, [pc, #160]	@ (801d9fc <UART_SetConfig+0x52c>)
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	2210      	movs	r2, #16
 801d95e:	4013      	ands	r3, r2
 801d960:	d002      	beq.n	801d968 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d962:	4b27      	ldr	r3, [pc, #156]	@ (801da00 <UART_SetConfig+0x530>)
 801d964:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d966:	e014      	b.n	801d992 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801d968:	4b26      	ldr	r3, [pc, #152]	@ (801da04 <UART_SetConfig+0x534>)
 801d96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d96c:	e011      	b.n	801d992 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d96e:	f7fd fc59 	bl	801b224 <HAL_RCC_GetSysClockFreq>
 801d972:	0003      	movs	r3, r0
 801d974:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d976:	e00c      	b.n	801d992 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d978:	2380      	movs	r3, #128	@ 0x80
 801d97a:	021b      	lsls	r3, r3, #8
 801d97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d97e:	e008      	b.n	801d992 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801d980:	2300      	movs	r3, #0
 801d982:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d984:	231a      	movs	r3, #26
 801d986:	2218      	movs	r2, #24
 801d988:	189b      	adds	r3, r3, r2
 801d98a:	19db      	adds	r3, r3, r7
 801d98c:	2201      	movs	r2, #1
 801d98e:	701a      	strb	r2, [r3, #0]
        break;
 801d990:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801d992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d994:	2b00      	cmp	r3, #0
 801d996:	d020      	beq.n	801d9da <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801d998:	69fb      	ldr	r3, [r7, #28]
 801d99a:	685b      	ldr	r3, [r3, #4]
 801d99c:	085a      	lsrs	r2, r3, #1
 801d99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9a0:	18d2      	adds	r2, r2, r3
 801d9a2:	69fb      	ldr	r3, [r7, #28]
 801d9a4:	685b      	ldr	r3, [r3, #4]
 801d9a6:	0019      	movs	r1, r3
 801d9a8:	0010      	movs	r0, r2
 801d9aa:	f7e2 fbfb 	bl	80001a4 <__udivsi3>
 801d9ae:	0003      	movs	r3, r0
 801d9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9b4:	2b0f      	cmp	r3, #15
 801d9b6:	d90a      	bls.n	801d9ce <UART_SetConfig+0x4fe>
 801d9b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d9ba:	2380      	movs	r3, #128	@ 0x80
 801d9bc:	025b      	lsls	r3, r3, #9
 801d9be:	429a      	cmp	r2, r3
 801d9c0:	d205      	bcs.n	801d9ce <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801d9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9c4:	b29a      	uxth	r2, r3
 801d9c6:	69fb      	ldr	r3, [r7, #28]
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	60da      	str	r2, [r3, #12]
 801d9cc:	e005      	b.n	801d9da <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d9ce:	231a      	movs	r3, #26
 801d9d0:	2218      	movs	r2, #24
 801d9d2:	189b      	adds	r3, r3, r2
 801d9d4:	19db      	adds	r3, r3, r7
 801d9d6:	2201      	movs	r2, #1
 801d9d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801d9da:	69fb      	ldr	r3, [r7, #28]
 801d9dc:	2200      	movs	r2, #0
 801d9de:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801d9e0:	69fb      	ldr	r3, [r7, #28]
 801d9e2:	2200      	movs	r2, #0
 801d9e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801d9e6:	231a      	movs	r3, #26
 801d9e8:	2218      	movs	r2, #24
 801d9ea:	189b      	adds	r3, r3, r2
 801d9ec:	19db      	adds	r3, r3, r7
 801d9ee:	781b      	ldrb	r3, [r3, #0]
}
 801d9f0:	0018      	movs	r0, r3
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	b00e      	add	sp, #56	@ 0x38
 801d9f6:	bdb0      	pop	{r4, r5, r7, pc}
 801d9f8:	0802e32c 	.word	0x0802e32c
 801d9fc:	40021000 	.word	0x40021000
 801da00:	003d0900 	.word	0x003d0900
 801da04:	00f42400 	.word	0x00f42400
 801da08:	0802e350 	.word	0x0802e350

0801da0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801da0c:	b580      	push	{r7, lr}
 801da0e:	b082      	sub	sp, #8
 801da10:	af00      	add	r7, sp, #0
 801da12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da18:	2201      	movs	r2, #1
 801da1a:	4013      	ands	r3, r2
 801da1c:	d00b      	beq.n	801da36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	685b      	ldr	r3, [r3, #4]
 801da24:	4a4a      	ldr	r2, [pc, #296]	@ (801db50 <UART_AdvFeatureConfig+0x144>)
 801da26:	4013      	ands	r3, r2
 801da28:	0019      	movs	r1, r3
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	430a      	orrs	r2, r1
 801da34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da3a:	2202      	movs	r2, #2
 801da3c:	4013      	ands	r3, r2
 801da3e:	d00b      	beq.n	801da58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	685b      	ldr	r3, [r3, #4]
 801da46:	4a43      	ldr	r2, [pc, #268]	@ (801db54 <UART_AdvFeatureConfig+0x148>)
 801da48:	4013      	ands	r3, r2
 801da4a:	0019      	movs	r1, r3
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	430a      	orrs	r2, r1
 801da56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da5c:	2204      	movs	r2, #4
 801da5e:	4013      	ands	r3, r2
 801da60:	d00b      	beq.n	801da7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	685b      	ldr	r3, [r3, #4]
 801da68:	4a3b      	ldr	r2, [pc, #236]	@ (801db58 <UART_AdvFeatureConfig+0x14c>)
 801da6a:	4013      	ands	r3, r2
 801da6c:	0019      	movs	r1, r3
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	430a      	orrs	r2, r1
 801da78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da7e:	2208      	movs	r2, #8
 801da80:	4013      	ands	r3, r2
 801da82:	d00b      	beq.n	801da9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	685b      	ldr	r3, [r3, #4]
 801da8a:	4a34      	ldr	r2, [pc, #208]	@ (801db5c <UART_AdvFeatureConfig+0x150>)
 801da8c:	4013      	ands	r3, r2
 801da8e:	0019      	movs	r1, r3
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	430a      	orrs	r2, r1
 801da9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801daa0:	2210      	movs	r2, #16
 801daa2:	4013      	ands	r3, r2
 801daa4:	d00b      	beq.n	801dabe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	689b      	ldr	r3, [r3, #8]
 801daac:	4a2c      	ldr	r2, [pc, #176]	@ (801db60 <UART_AdvFeatureConfig+0x154>)
 801daae:	4013      	ands	r3, r2
 801dab0:	0019      	movs	r1, r3
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	430a      	orrs	r2, r1
 801dabc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dac2:	2220      	movs	r2, #32
 801dac4:	4013      	ands	r3, r2
 801dac6:	d00b      	beq.n	801dae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	689b      	ldr	r3, [r3, #8]
 801dace:	4a25      	ldr	r2, [pc, #148]	@ (801db64 <UART_AdvFeatureConfig+0x158>)
 801dad0:	4013      	ands	r3, r2
 801dad2:	0019      	movs	r1, r3
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	430a      	orrs	r2, r1
 801dade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dae4:	2240      	movs	r2, #64	@ 0x40
 801dae6:	4013      	ands	r3, r2
 801dae8:	d01d      	beq.n	801db26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	685b      	ldr	r3, [r3, #4]
 801daf0:	4a1d      	ldr	r2, [pc, #116]	@ (801db68 <UART_AdvFeatureConfig+0x15c>)
 801daf2:	4013      	ands	r3, r2
 801daf4:	0019      	movs	r1, r3
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	430a      	orrs	r2, r1
 801db00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801db06:	2380      	movs	r3, #128	@ 0x80
 801db08:	035b      	lsls	r3, r3, #13
 801db0a:	429a      	cmp	r2, r3
 801db0c:	d10b      	bne.n	801db26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	685b      	ldr	r3, [r3, #4]
 801db14:	4a15      	ldr	r2, [pc, #84]	@ (801db6c <UART_AdvFeatureConfig+0x160>)
 801db16:	4013      	ands	r3, r2
 801db18:	0019      	movs	r1, r3
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	430a      	orrs	r2, r1
 801db24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801db2a:	2280      	movs	r2, #128	@ 0x80
 801db2c:	4013      	ands	r3, r2
 801db2e:	d00b      	beq.n	801db48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	685b      	ldr	r3, [r3, #4]
 801db36:	4a0e      	ldr	r2, [pc, #56]	@ (801db70 <UART_AdvFeatureConfig+0x164>)
 801db38:	4013      	ands	r3, r2
 801db3a:	0019      	movs	r1, r3
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	430a      	orrs	r2, r1
 801db46:	605a      	str	r2, [r3, #4]
  }
}
 801db48:	46c0      	nop			@ (mov r8, r8)
 801db4a:	46bd      	mov	sp, r7
 801db4c:	b002      	add	sp, #8
 801db4e:	bd80      	pop	{r7, pc}
 801db50:	fffdffff 	.word	0xfffdffff
 801db54:	fffeffff 	.word	0xfffeffff
 801db58:	fffbffff 	.word	0xfffbffff
 801db5c:	ffff7fff 	.word	0xffff7fff
 801db60:	ffffefff 	.word	0xffffefff
 801db64:	ffffdfff 	.word	0xffffdfff
 801db68:	ffefffff 	.word	0xffefffff
 801db6c:	ff9fffff 	.word	0xff9fffff
 801db70:	fff7ffff 	.word	0xfff7ffff

0801db74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801db74:	b580      	push	{r7, lr}
 801db76:	b092      	sub	sp, #72	@ 0x48
 801db78:	af02      	add	r7, sp, #8
 801db7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	2284      	movs	r2, #132	@ 0x84
 801db80:	2100      	movs	r1, #0
 801db82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801db84:	f7f6 f9f6 	bl	8013f74 <HAL_GetTick>
 801db88:	0003      	movs	r3, r0
 801db8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	2208      	movs	r2, #8
 801db94:	4013      	ands	r3, r2
 801db96:	2b08      	cmp	r3, #8
 801db98:	d12c      	bne.n	801dbf4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801db9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801db9c:	2280      	movs	r2, #128	@ 0x80
 801db9e:	0391      	lsls	r1, r2, #14
 801dba0:	6878      	ldr	r0, [r7, #4]
 801dba2:	4a46      	ldr	r2, [pc, #280]	@ (801dcbc <UART_CheckIdleState+0x148>)
 801dba4:	9200      	str	r2, [sp, #0]
 801dba6:	2200      	movs	r2, #0
 801dba8:	f000 f88c 	bl	801dcc4 <UART_WaitOnFlagUntilTimeout>
 801dbac:	1e03      	subs	r3, r0, #0
 801dbae:	d021      	beq.n	801dbf4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbb0:	f3ef 8310 	mrs	r3, PRIMASK
 801dbb4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801dbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801dbb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dbba:	2301      	movs	r3, #1
 801dbbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbc0:	f383 8810 	msr	PRIMASK, r3
}
 801dbc4:	46c0      	nop			@ (mov r8, r8)
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	681a      	ldr	r2, [r3, #0]
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	2180      	movs	r1, #128	@ 0x80
 801dbd2:	438a      	bics	r2, r1
 801dbd4:	601a      	str	r2, [r3, #0]
 801dbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dbd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dbdc:	f383 8810 	msr	PRIMASK, r3
}
 801dbe0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	2220      	movs	r2, #32
 801dbe6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	2278      	movs	r2, #120	@ 0x78
 801dbec:	2100      	movs	r1, #0
 801dbee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801dbf0:	2303      	movs	r3, #3
 801dbf2:	e05f      	b.n	801dcb4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	681b      	ldr	r3, [r3, #0]
 801dbf8:	681b      	ldr	r3, [r3, #0]
 801dbfa:	2204      	movs	r2, #4
 801dbfc:	4013      	ands	r3, r2
 801dbfe:	2b04      	cmp	r3, #4
 801dc00:	d146      	bne.n	801dc90 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801dc02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc04:	2280      	movs	r2, #128	@ 0x80
 801dc06:	03d1      	lsls	r1, r2, #15
 801dc08:	6878      	ldr	r0, [r7, #4]
 801dc0a:	4a2c      	ldr	r2, [pc, #176]	@ (801dcbc <UART_CheckIdleState+0x148>)
 801dc0c:	9200      	str	r2, [sp, #0]
 801dc0e:	2200      	movs	r2, #0
 801dc10:	f000 f858 	bl	801dcc4 <UART_WaitOnFlagUntilTimeout>
 801dc14:	1e03      	subs	r3, r0, #0
 801dc16:	d03b      	beq.n	801dc90 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc18:	f3ef 8310 	mrs	r3, PRIMASK
 801dc1c:	60fb      	str	r3, [r7, #12]
  return(result);
 801dc1e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dc20:	637b      	str	r3, [r7, #52]	@ 0x34
 801dc22:	2301      	movs	r3, #1
 801dc24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc26:	693b      	ldr	r3, [r7, #16]
 801dc28:	f383 8810 	msr	PRIMASK, r3
}
 801dc2c:	46c0      	nop			@ (mov r8, r8)
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	681a      	ldr	r2, [r3, #0]
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	4921      	ldr	r1, [pc, #132]	@ (801dcc0 <UART_CheckIdleState+0x14c>)
 801dc3a:	400a      	ands	r2, r1
 801dc3c:	601a      	str	r2, [r3, #0]
 801dc3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dc40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc42:	697b      	ldr	r3, [r7, #20]
 801dc44:	f383 8810 	msr	PRIMASK, r3
}
 801dc48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc4a:	f3ef 8310 	mrs	r3, PRIMASK
 801dc4e:	61bb      	str	r3, [r7, #24]
  return(result);
 801dc50:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dc52:	633b      	str	r3, [r7, #48]	@ 0x30
 801dc54:	2301      	movs	r3, #1
 801dc56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc58:	69fb      	ldr	r3, [r7, #28]
 801dc5a:	f383 8810 	msr	PRIMASK, r3
}
 801dc5e:	46c0      	nop			@ (mov r8, r8)
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	689a      	ldr	r2, [r3, #8]
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	2101      	movs	r1, #1
 801dc6c:	438a      	bics	r2, r1
 801dc6e:	609a      	str	r2, [r3, #8]
 801dc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc74:	6a3b      	ldr	r3, [r7, #32]
 801dc76:	f383 8810 	msr	PRIMASK, r3
}
 801dc7a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	2280      	movs	r2, #128	@ 0x80
 801dc80:	2120      	movs	r1, #32
 801dc82:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	2278      	movs	r2, #120	@ 0x78
 801dc88:	2100      	movs	r1, #0
 801dc8a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801dc8c:	2303      	movs	r3, #3
 801dc8e:	e011      	b.n	801dcb4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	2220      	movs	r2, #32
 801dc94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	2280      	movs	r2, #128	@ 0x80
 801dc9a:	2120      	movs	r1, #32
 801dc9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	2200      	movs	r2, #0
 801dca2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	2200      	movs	r2, #0
 801dca8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	2278      	movs	r2, #120	@ 0x78
 801dcae:	2100      	movs	r1, #0
 801dcb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801dcb2:	2300      	movs	r3, #0
}
 801dcb4:	0018      	movs	r0, r3
 801dcb6:	46bd      	mov	sp, r7
 801dcb8:	b010      	add	sp, #64	@ 0x40
 801dcba:	bd80      	pop	{r7, pc}
 801dcbc:	01ffffff 	.word	0x01ffffff
 801dcc0:	fffffedf 	.word	0xfffffedf

0801dcc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b084      	sub	sp, #16
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	60f8      	str	r0, [r7, #12]
 801dccc:	60b9      	str	r1, [r7, #8]
 801dcce:	603b      	str	r3, [r7, #0]
 801dcd0:	1dfb      	adds	r3, r7, #7
 801dcd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801dcd4:	e04b      	b.n	801dd6e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801dcd6:	69bb      	ldr	r3, [r7, #24]
 801dcd8:	3301      	adds	r3, #1
 801dcda:	d048      	beq.n	801dd6e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801dcdc:	f7f6 f94a 	bl	8013f74 <HAL_GetTick>
 801dce0:	0002      	movs	r2, r0
 801dce2:	683b      	ldr	r3, [r7, #0]
 801dce4:	1ad3      	subs	r3, r2, r3
 801dce6:	69ba      	ldr	r2, [r7, #24]
 801dce8:	429a      	cmp	r2, r3
 801dcea:	d302      	bcc.n	801dcf2 <UART_WaitOnFlagUntilTimeout+0x2e>
 801dcec:	69bb      	ldr	r3, [r7, #24]
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	d101      	bne.n	801dcf6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801dcf2:	2303      	movs	r3, #3
 801dcf4:	e04b      	b.n	801dd8e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	2204      	movs	r2, #4
 801dcfe:	4013      	ands	r3, r2
 801dd00:	d035      	beq.n	801dd6e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801dd02:	68fb      	ldr	r3, [r7, #12]
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	69db      	ldr	r3, [r3, #28]
 801dd08:	2208      	movs	r2, #8
 801dd0a:	4013      	ands	r3, r2
 801dd0c:	2b08      	cmp	r3, #8
 801dd0e:	d111      	bne.n	801dd34 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801dd10:	68fb      	ldr	r3, [r7, #12]
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	2208      	movs	r2, #8
 801dd16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801dd18:	68fb      	ldr	r3, [r7, #12]
 801dd1a:	0018      	movs	r0, r3
 801dd1c:	f000 f9ca 	bl	801e0b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	2284      	movs	r2, #132	@ 0x84
 801dd24:	2108      	movs	r1, #8
 801dd26:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801dd28:	68fb      	ldr	r3, [r7, #12]
 801dd2a:	2278      	movs	r2, #120	@ 0x78
 801dd2c:	2100      	movs	r1, #0
 801dd2e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801dd30:	2301      	movs	r3, #1
 801dd32:	e02c      	b.n	801dd8e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	681b      	ldr	r3, [r3, #0]
 801dd38:	69da      	ldr	r2, [r3, #28]
 801dd3a:	2380      	movs	r3, #128	@ 0x80
 801dd3c:	011b      	lsls	r3, r3, #4
 801dd3e:	401a      	ands	r2, r3
 801dd40:	2380      	movs	r3, #128	@ 0x80
 801dd42:	011b      	lsls	r3, r3, #4
 801dd44:	429a      	cmp	r2, r3
 801dd46:	d112      	bne.n	801dd6e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	681b      	ldr	r3, [r3, #0]
 801dd4c:	2280      	movs	r2, #128	@ 0x80
 801dd4e:	0112      	lsls	r2, r2, #4
 801dd50:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	0018      	movs	r0, r3
 801dd56:	f000 f9ad 	bl	801e0b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801dd5a:	68fb      	ldr	r3, [r7, #12]
 801dd5c:	2284      	movs	r2, #132	@ 0x84
 801dd5e:	2120      	movs	r1, #32
 801dd60:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	2278      	movs	r2, #120	@ 0x78
 801dd66:	2100      	movs	r1, #0
 801dd68:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801dd6a:	2303      	movs	r3, #3
 801dd6c:	e00f      	b.n	801dd8e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801dd6e:	68fb      	ldr	r3, [r7, #12]
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	69db      	ldr	r3, [r3, #28]
 801dd74:	68ba      	ldr	r2, [r7, #8]
 801dd76:	4013      	ands	r3, r2
 801dd78:	68ba      	ldr	r2, [r7, #8]
 801dd7a:	1ad3      	subs	r3, r2, r3
 801dd7c:	425a      	negs	r2, r3
 801dd7e:	4153      	adcs	r3, r2
 801dd80:	b2db      	uxtb	r3, r3
 801dd82:	001a      	movs	r2, r3
 801dd84:	1dfb      	adds	r3, r7, #7
 801dd86:	781b      	ldrb	r3, [r3, #0]
 801dd88:	429a      	cmp	r2, r3
 801dd8a:	d0a4      	beq.n	801dcd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801dd8c:	2300      	movs	r3, #0
}
 801dd8e:	0018      	movs	r0, r3
 801dd90:	46bd      	mov	sp, r7
 801dd92:	b004      	add	sp, #16
 801dd94:	bd80      	pop	{r7, pc}
	...

0801dd98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801dd98:	b580      	push	{r7, lr}
 801dd9a:	b090      	sub	sp, #64	@ 0x40
 801dd9c:	af00      	add	r7, sp, #0
 801dd9e:	60f8      	str	r0, [r7, #12]
 801dda0:	60b9      	str	r1, [r7, #8]
 801dda2:	1dbb      	adds	r3, r7, #6
 801dda4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	68ba      	ldr	r2, [r7, #8]
 801ddaa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801ddac:	68fb      	ldr	r3, [r7, #12]
 801ddae:	1dba      	adds	r2, r7, #6
 801ddb0:	2158      	movs	r1, #88	@ 0x58
 801ddb2:	8812      	ldrh	r2, [r2, #0]
 801ddb4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	1dba      	adds	r2, r7, #6
 801ddba:	215a      	movs	r1, #90	@ 0x5a
 801ddbc:	8812      	ldrh	r2, [r2, #0]
 801ddbe:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801ddc0:	68fb      	ldr	r3, [r7, #12]
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	689a      	ldr	r2, [r3, #8]
 801ddca:	2380      	movs	r3, #128	@ 0x80
 801ddcc:	015b      	lsls	r3, r3, #5
 801ddce:	429a      	cmp	r2, r3
 801ddd0:	d10d      	bne.n	801ddee <UART_Start_Receive_IT+0x56>
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	691b      	ldr	r3, [r3, #16]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d104      	bne.n	801dde4 <UART_Start_Receive_IT+0x4c>
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	225c      	movs	r2, #92	@ 0x5c
 801ddde:	4950      	ldr	r1, [pc, #320]	@ (801df20 <UART_Start_Receive_IT+0x188>)
 801dde0:	5299      	strh	r1, [r3, r2]
 801dde2:	e02e      	b.n	801de42 <UART_Start_Receive_IT+0xaa>
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	225c      	movs	r2, #92	@ 0x5c
 801dde8:	21ff      	movs	r1, #255	@ 0xff
 801ddea:	5299      	strh	r1, [r3, r2]
 801ddec:	e029      	b.n	801de42 <UART_Start_Receive_IT+0xaa>
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	689b      	ldr	r3, [r3, #8]
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d10d      	bne.n	801de12 <UART_Start_Receive_IT+0x7a>
 801ddf6:	68fb      	ldr	r3, [r7, #12]
 801ddf8:	691b      	ldr	r3, [r3, #16]
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d104      	bne.n	801de08 <UART_Start_Receive_IT+0x70>
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	225c      	movs	r2, #92	@ 0x5c
 801de02:	21ff      	movs	r1, #255	@ 0xff
 801de04:	5299      	strh	r1, [r3, r2]
 801de06:	e01c      	b.n	801de42 <UART_Start_Receive_IT+0xaa>
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	225c      	movs	r2, #92	@ 0x5c
 801de0c:	217f      	movs	r1, #127	@ 0x7f
 801de0e:	5299      	strh	r1, [r3, r2]
 801de10:	e017      	b.n	801de42 <UART_Start_Receive_IT+0xaa>
 801de12:	68fb      	ldr	r3, [r7, #12]
 801de14:	689a      	ldr	r2, [r3, #8]
 801de16:	2380      	movs	r3, #128	@ 0x80
 801de18:	055b      	lsls	r3, r3, #21
 801de1a:	429a      	cmp	r2, r3
 801de1c:	d10d      	bne.n	801de3a <UART_Start_Receive_IT+0xa2>
 801de1e:	68fb      	ldr	r3, [r7, #12]
 801de20:	691b      	ldr	r3, [r3, #16]
 801de22:	2b00      	cmp	r3, #0
 801de24:	d104      	bne.n	801de30 <UART_Start_Receive_IT+0x98>
 801de26:	68fb      	ldr	r3, [r7, #12]
 801de28:	225c      	movs	r2, #92	@ 0x5c
 801de2a:	217f      	movs	r1, #127	@ 0x7f
 801de2c:	5299      	strh	r1, [r3, r2]
 801de2e:	e008      	b.n	801de42 <UART_Start_Receive_IT+0xaa>
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	225c      	movs	r2, #92	@ 0x5c
 801de34:	213f      	movs	r1, #63	@ 0x3f
 801de36:	5299      	strh	r1, [r3, r2]
 801de38:	e003      	b.n	801de42 <UART_Start_Receive_IT+0xaa>
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	225c      	movs	r2, #92	@ 0x5c
 801de3e:	2100      	movs	r1, #0
 801de40:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	2284      	movs	r2, #132	@ 0x84
 801de46:	2100      	movs	r1, #0
 801de48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	2280      	movs	r2, #128	@ 0x80
 801de4e:	2122      	movs	r1, #34	@ 0x22
 801de50:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de52:	f3ef 8310 	mrs	r3, PRIMASK
 801de56:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801de58:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801de5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801de5c:	2301      	movs	r3, #1
 801de5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de62:	f383 8810 	msr	PRIMASK, r3
}
 801de66:	46c0      	nop			@ (mov r8, r8)
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	689a      	ldr	r2, [r3, #8]
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	2101      	movs	r1, #1
 801de74:	430a      	orrs	r2, r1
 801de76:	609a      	str	r2, [r3, #8]
 801de78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801de7a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801de7e:	f383 8810 	msr	PRIMASK, r3
}
 801de82:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801de84:	68fb      	ldr	r3, [r7, #12]
 801de86:	689a      	ldr	r2, [r3, #8]
 801de88:	2380      	movs	r3, #128	@ 0x80
 801de8a:	015b      	lsls	r3, r3, #5
 801de8c:	429a      	cmp	r2, r3
 801de8e:	d107      	bne.n	801dea0 <UART_Start_Receive_IT+0x108>
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	691b      	ldr	r3, [r3, #16]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d103      	bne.n	801dea0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	4a22      	ldr	r2, [pc, #136]	@ (801df24 <UART_Start_Receive_IT+0x18c>)
 801de9c:	669a      	str	r2, [r3, #104]	@ 0x68
 801de9e:	e002      	b.n	801dea6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	4a21      	ldr	r2, [pc, #132]	@ (801df28 <UART_Start_Receive_IT+0x190>)
 801dea4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	691b      	ldr	r3, [r3, #16]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d019      	beq.n	801dee2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801deae:	f3ef 8310 	mrs	r3, PRIMASK
 801deb2:	61fb      	str	r3, [r7, #28]
  return(result);
 801deb4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801deb6:	637b      	str	r3, [r7, #52]	@ 0x34
 801deb8:	2301      	movs	r3, #1
 801deba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801debc:	6a3b      	ldr	r3, [r7, #32]
 801debe:	f383 8810 	msr	PRIMASK, r3
}
 801dec2:	46c0      	nop			@ (mov r8, r8)
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	681a      	ldr	r2, [r3, #0]
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	2190      	movs	r1, #144	@ 0x90
 801ded0:	0049      	lsls	r1, r1, #1
 801ded2:	430a      	orrs	r2, r1
 801ded4:	601a      	str	r2, [r3, #0]
 801ded6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ded8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801deda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dedc:	f383 8810 	msr	PRIMASK, r3
}
 801dee0:	e018      	b.n	801df14 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dee2:	f3ef 8310 	mrs	r3, PRIMASK
 801dee6:	613b      	str	r3, [r7, #16]
  return(result);
 801dee8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801deea:	63bb      	str	r3, [r7, #56]	@ 0x38
 801deec:	2301      	movs	r3, #1
 801deee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801def0:	697b      	ldr	r3, [r7, #20]
 801def2:	f383 8810 	msr	PRIMASK, r3
}
 801def6:	46c0      	nop			@ (mov r8, r8)
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	681a      	ldr	r2, [r3, #0]
 801defe:	68fb      	ldr	r3, [r7, #12]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	2120      	movs	r1, #32
 801df04:	430a      	orrs	r2, r1
 801df06:	601a      	str	r2, [r3, #0]
 801df08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df0c:	69bb      	ldr	r3, [r7, #24]
 801df0e:	f383 8810 	msr	PRIMASK, r3
}
 801df12:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801df14:	2300      	movs	r3, #0
}
 801df16:	0018      	movs	r0, r3
 801df18:	46bd      	mov	sp, r7
 801df1a:	b010      	add	sp, #64	@ 0x40
 801df1c:	bd80      	pop	{r7, pc}
 801df1e:	46c0      	nop			@ (mov r8, r8)
 801df20:	000001ff 	.word	0x000001ff
 801df24:	0801e699 	.word	0x0801e699
 801df28:	0801e4cd 	.word	0x0801e4cd

0801df2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801df2c:	b580      	push	{r7, lr}
 801df2e:	b090      	sub	sp, #64	@ 0x40
 801df30:	af00      	add	r7, sp, #0
 801df32:	60f8      	str	r0, [r7, #12]
 801df34:	60b9      	str	r1, [r7, #8]
 801df36:	1dbb      	adds	r3, r7, #6
 801df38:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	68ba      	ldr	r2, [r7, #8]
 801df3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	1dba      	adds	r2, r7, #6
 801df44:	2158      	movs	r1, #88	@ 0x58
 801df46:	8812      	ldrh	r2, [r2, #0]
 801df48:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	2284      	movs	r2, #132	@ 0x84
 801df4e:	2100      	movs	r1, #0
 801df50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	2280      	movs	r2, #128	@ 0x80
 801df56:	2122      	movs	r1, #34	@ 0x22
 801df58:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d028      	beq.n	801dfb4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df66:	4a3e      	ldr	r2, [pc, #248]	@ (801e060 <UART_Start_Receive_DMA+0x134>)
 801df68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df6e:	4a3d      	ldr	r2, [pc, #244]	@ (801e064 <UART_Start_Receive_DMA+0x138>)
 801df70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df76:	4a3c      	ldr	r2, [pc, #240]	@ (801e068 <UART_Start_Receive_DMA+0x13c>)
 801df78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df7e:	2200      	movs	r2, #0
 801df80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	681b      	ldr	r3, [r3, #0]
 801df8a:	3324      	adds	r3, #36	@ 0x24
 801df8c:	0019      	movs	r1, r3
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df92:	001a      	movs	r2, r3
 801df94:	1dbb      	adds	r3, r7, #6
 801df96:	881b      	ldrh	r3, [r3, #0]
 801df98:	f7f6 fd3e 	bl	8014a18 <HAL_DMA_Start_IT>
 801df9c:	1e03      	subs	r3, r0, #0
 801df9e:	d009      	beq.n	801dfb4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	2284      	movs	r2, #132	@ 0x84
 801dfa4:	2110      	movs	r1, #16
 801dfa6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	2280      	movs	r2, #128	@ 0x80
 801dfac:	2120      	movs	r1, #32
 801dfae:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801dfb0:	2301      	movs	r3, #1
 801dfb2:	e050      	b.n	801e056 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	691b      	ldr	r3, [r3, #16]
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d019      	beq.n	801dff0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dfbc:	f3ef 8310 	mrs	r3, PRIMASK
 801dfc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801dfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dfc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dfc6:	2301      	movs	r3, #1
 801dfc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dfcc:	f383 8810 	msr	PRIMASK, r3
}
 801dfd0:	46c0      	nop			@ (mov r8, r8)
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	681a      	ldr	r2, [r3, #0]
 801dfd8:	68fb      	ldr	r3, [r7, #12]
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	2180      	movs	r1, #128	@ 0x80
 801dfde:	0049      	lsls	r1, r1, #1
 801dfe0:	430a      	orrs	r2, r1
 801dfe2:	601a      	str	r2, [r3, #0]
 801dfe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfe6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfea:	f383 8810 	msr	PRIMASK, r3
}
 801dfee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dff0:	f3ef 8310 	mrs	r3, PRIMASK
 801dff4:	613b      	str	r3, [r7, #16]
  return(result);
 801dff6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dff8:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dffa:	2301      	movs	r3, #1
 801dffc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dffe:	697b      	ldr	r3, [r7, #20]
 801e000:	f383 8810 	msr	PRIMASK, r3
}
 801e004:	46c0      	nop			@ (mov r8, r8)
 801e006:	68fb      	ldr	r3, [r7, #12]
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	689a      	ldr	r2, [r3, #8]
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	2101      	movs	r1, #1
 801e012:	430a      	orrs	r2, r1
 801e014:	609a      	str	r2, [r3, #8]
 801e016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e018:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e01a:	69bb      	ldr	r3, [r7, #24]
 801e01c:	f383 8810 	msr	PRIMASK, r3
}
 801e020:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e022:	f3ef 8310 	mrs	r3, PRIMASK
 801e026:	61fb      	str	r3, [r7, #28]
  return(result);
 801e028:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e02a:	637b      	str	r3, [r7, #52]	@ 0x34
 801e02c:	2301      	movs	r3, #1
 801e02e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e030:	6a3b      	ldr	r3, [r7, #32]
 801e032:	f383 8810 	msr	PRIMASK, r3
}
 801e036:	46c0      	nop			@ (mov r8, r8)
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	689a      	ldr	r2, [r3, #8]
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	2140      	movs	r1, #64	@ 0x40
 801e044:	430a      	orrs	r2, r1
 801e046:	609a      	str	r2, [r3, #8]
 801e048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e04a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e04e:	f383 8810 	msr	PRIMASK, r3
}
 801e052:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801e054:	2300      	movs	r3, #0
}
 801e056:	0018      	movs	r0, r3
 801e058:	46bd      	mov	sp, r7
 801e05a:	b010      	add	sp, #64	@ 0x40
 801e05c:	bd80      	pop	{r7, pc}
 801e05e:	46c0      	nop			@ (mov r8, r8)
 801e060:	0801e23d 	.word	0x0801e23d
 801e064:	0801e371 	.word	0x0801e371
 801e068:	0801e3b9 	.word	0x0801e3b9

0801e06c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801e06c:	b580      	push	{r7, lr}
 801e06e:	b086      	sub	sp, #24
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e074:	f3ef 8310 	mrs	r3, PRIMASK
 801e078:	60bb      	str	r3, [r7, #8]
  return(result);
 801e07a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801e07c:	617b      	str	r3, [r7, #20]
 801e07e:	2301      	movs	r3, #1
 801e080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	f383 8810 	msr	PRIMASK, r3
}
 801e088:	46c0      	nop			@ (mov r8, r8)
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	681a      	ldr	r2, [r3, #0]
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	21c0      	movs	r1, #192	@ 0xc0
 801e096:	438a      	bics	r2, r1
 801e098:	601a      	str	r2, [r3, #0]
 801e09a:	697b      	ldr	r3, [r7, #20]
 801e09c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e09e:	693b      	ldr	r3, [r7, #16]
 801e0a0:	f383 8810 	msr	PRIMASK, r3
}
 801e0a4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	2220      	movs	r2, #32
 801e0aa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801e0ac:	46c0      	nop			@ (mov r8, r8)
 801e0ae:	46bd      	mov	sp, r7
 801e0b0:	b006      	add	sp, #24
 801e0b2:	bd80      	pop	{r7, pc}

0801e0b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801e0b4:	b580      	push	{r7, lr}
 801e0b6:	b08e      	sub	sp, #56	@ 0x38
 801e0b8:	af00      	add	r7, sp, #0
 801e0ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0bc:	f3ef 8310 	mrs	r3, PRIMASK
 801e0c0:	617b      	str	r3, [r7, #20]
  return(result);
 801e0c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e0c4:	637b      	str	r3, [r7, #52]	@ 0x34
 801e0c6:	2301      	movs	r3, #1
 801e0c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0ca:	69bb      	ldr	r3, [r7, #24]
 801e0cc:	f383 8810 	msr	PRIMASK, r3
}
 801e0d0:	46c0      	nop			@ (mov r8, r8)
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	681a      	ldr	r2, [r3, #0]
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	4926      	ldr	r1, [pc, #152]	@ (801e178 <UART_EndRxTransfer+0xc4>)
 801e0de:	400a      	ands	r2, r1
 801e0e0:	601a      	str	r2, [r3, #0]
 801e0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0e6:	69fb      	ldr	r3, [r7, #28]
 801e0e8:	f383 8810 	msr	PRIMASK, r3
}
 801e0ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0ee:	f3ef 8310 	mrs	r3, PRIMASK
 801e0f2:	623b      	str	r3, [r7, #32]
  return(result);
 801e0f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e0f6:	633b      	str	r3, [r7, #48]	@ 0x30
 801e0f8:	2301      	movs	r3, #1
 801e0fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0fe:	f383 8810 	msr	PRIMASK, r3
}
 801e102:	46c0      	nop			@ (mov r8, r8)
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	689a      	ldr	r2, [r3, #8]
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	2101      	movs	r1, #1
 801e110:	438a      	bics	r2, r1
 801e112:	609a      	str	r2, [r3, #8]
 801e114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e116:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e11a:	f383 8810 	msr	PRIMASK, r3
}
 801e11e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e124:	2b01      	cmp	r3, #1
 801e126:	d118      	bne.n	801e15a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e128:	f3ef 8310 	mrs	r3, PRIMASK
 801e12c:	60bb      	str	r3, [r7, #8]
  return(result);
 801e12e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e132:	2301      	movs	r3, #1
 801e134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e136:	68fb      	ldr	r3, [r7, #12]
 801e138:	f383 8810 	msr	PRIMASK, r3
}
 801e13c:	46c0      	nop			@ (mov r8, r8)
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	681a      	ldr	r2, [r3, #0]
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	2110      	movs	r1, #16
 801e14a:	438a      	bics	r2, r1
 801e14c:	601a      	str	r2, [r3, #0]
 801e14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e152:	693b      	ldr	r3, [r7, #16]
 801e154:	f383 8810 	msr	PRIMASK, r3
}
 801e158:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	2280      	movs	r2, #128	@ 0x80
 801e15e:	2120      	movs	r1, #32
 801e160:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	2200      	movs	r2, #0
 801e166:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	2200      	movs	r2, #0
 801e16c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801e16e:	46c0      	nop			@ (mov r8, r8)
 801e170:	46bd      	mov	sp, r7
 801e172:	b00e      	add	sp, #56	@ 0x38
 801e174:	bd80      	pop	{r7, pc}
 801e176:	46c0      	nop			@ (mov r8, r8)
 801e178:	fffffedf 	.word	0xfffffedf

0801e17c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801e17c:	b580      	push	{r7, lr}
 801e17e:	b08c      	sub	sp, #48	@ 0x30
 801e180:	af00      	add	r7, sp, #0
 801e182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e188:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801e18a:	687b      	ldr	r3, [r7, #4]
 801e18c:	681b      	ldr	r3, [r3, #0]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	2220      	movs	r2, #32
 801e192:	4013      	ands	r3, r2
 801e194:	d135      	bne.n	801e202 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801e196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e198:	2252      	movs	r2, #82	@ 0x52
 801e19a:	2100      	movs	r1, #0
 801e19c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e19e:	f3ef 8310 	mrs	r3, PRIMASK
 801e1a2:	60fb      	str	r3, [r7, #12]
  return(result);
 801e1a4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801e1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e1a8:	2301      	movs	r3, #1
 801e1aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1ac:	693b      	ldr	r3, [r7, #16]
 801e1ae:	f383 8810 	msr	PRIMASK, r3
}
 801e1b2:	46c0      	nop			@ (mov r8, r8)
 801e1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	689a      	ldr	r2, [r3, #8]
 801e1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1bc:	681b      	ldr	r3, [r3, #0]
 801e1be:	2180      	movs	r1, #128	@ 0x80
 801e1c0:	438a      	bics	r2, r1
 801e1c2:	609a      	str	r2, [r3, #8]
 801e1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e1c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1c8:	697b      	ldr	r3, [r7, #20]
 801e1ca:	f383 8810 	msr	PRIMASK, r3
}
 801e1ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e1d0:	f3ef 8310 	mrs	r3, PRIMASK
 801e1d4:	61bb      	str	r3, [r7, #24]
  return(result);
 801e1d6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e1d8:	627b      	str	r3, [r7, #36]	@ 0x24
 801e1da:	2301      	movs	r3, #1
 801e1dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1de:	69fb      	ldr	r3, [r7, #28]
 801e1e0:	f383 8810 	msr	PRIMASK, r3
}
 801e1e4:	46c0      	nop			@ (mov r8, r8)
 801e1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1e8:	681b      	ldr	r3, [r3, #0]
 801e1ea:	681a      	ldr	r2, [r3, #0]
 801e1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	2140      	movs	r1, #64	@ 0x40
 801e1f2:	430a      	orrs	r2, r1
 801e1f4:	601a      	str	r2, [r3, #0]
 801e1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1fa:	6a3b      	ldr	r3, [r7, #32]
 801e1fc:	f383 8810 	msr	PRIMASK, r3
}
 801e200:	e006      	b.n	801e210 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801e202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e204:	228c      	movs	r2, #140	@ 0x8c
 801e206:	589b      	ldr	r3, [r3, r2]
 801e208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e20a:	0010      	movs	r0, r2
 801e20c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e20e:	46c0      	nop			@ (mov r8, r8)
 801e210:	46c0      	nop			@ (mov r8, r8)
 801e212:	46bd      	mov	sp, r7
 801e214:	b00c      	add	sp, #48	@ 0x30
 801e216:	bd80      	pop	{r7, pc}

0801e218 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e218:	b580      	push	{r7, lr}
 801e21a:	b084      	sub	sp, #16
 801e21c:	af00      	add	r7, sp, #0
 801e21e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e224:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	2288      	movs	r2, #136	@ 0x88
 801e22a:	589b      	ldr	r3, [r3, r2]
 801e22c:	68fa      	ldr	r2, [r7, #12]
 801e22e:	0010      	movs	r0, r2
 801e230:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e232:	46c0      	nop			@ (mov r8, r8)
 801e234:	46bd      	mov	sp, r7
 801e236:	b004      	add	sp, #16
 801e238:	bd80      	pop	{r7, pc}
	...

0801e23c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801e23c:	b580      	push	{r7, lr}
 801e23e:	b094      	sub	sp, #80	@ 0x50
 801e240:	af00      	add	r7, sp, #0
 801e242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e248:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	681b      	ldr	r3, [r3, #0]
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	2220      	movs	r2, #32
 801e252:	4013      	ands	r3, r2
 801e254:	d16f      	bne.n	801e336 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801e256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e258:	225a      	movs	r2, #90	@ 0x5a
 801e25a:	2100      	movs	r1, #0
 801e25c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e25e:	f3ef 8310 	mrs	r3, PRIMASK
 801e262:	61bb      	str	r3, [r7, #24]
  return(result);
 801e264:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e266:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e268:	2301      	movs	r3, #1
 801e26a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e26c:	69fb      	ldr	r3, [r7, #28]
 801e26e:	f383 8810 	msr	PRIMASK, r3
}
 801e272:	46c0      	nop			@ (mov r8, r8)
 801e274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e276:	681b      	ldr	r3, [r3, #0]
 801e278:	681a      	ldr	r2, [r3, #0]
 801e27a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	493b      	ldr	r1, [pc, #236]	@ (801e36c <UART_DMAReceiveCplt+0x130>)
 801e280:	400a      	ands	r2, r1
 801e282:	601a      	str	r2, [r3, #0]
 801e284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e286:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e288:	6a3b      	ldr	r3, [r7, #32]
 801e28a:	f383 8810 	msr	PRIMASK, r3
}
 801e28e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e290:	f3ef 8310 	mrs	r3, PRIMASK
 801e294:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e298:	647b      	str	r3, [r7, #68]	@ 0x44
 801e29a:	2301      	movs	r3, #1
 801e29c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2a0:	f383 8810 	msr	PRIMASK, r3
}
 801e2a4:	46c0      	nop			@ (mov r8, r8)
 801e2a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	689a      	ldr	r2, [r3, #8]
 801e2ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	2101      	movs	r1, #1
 801e2b2:	438a      	bics	r2, r1
 801e2b4:	609a      	str	r2, [r3, #8]
 801e2b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2bc:	f383 8810 	msr	PRIMASK, r3
}
 801e2c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2c2:	f3ef 8310 	mrs	r3, PRIMASK
 801e2c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e2ca:	643b      	str	r3, [r7, #64]	@ 0x40
 801e2cc:	2301      	movs	r3, #1
 801e2ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2d2:	f383 8810 	msr	PRIMASK, r3
}
 801e2d6:	46c0      	nop			@ (mov r8, r8)
 801e2d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	689a      	ldr	r2, [r3, #8]
 801e2de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	2140      	movs	r1, #64	@ 0x40
 801e2e4:	438a      	bics	r2, r1
 801e2e6:	609a      	str	r2, [r3, #8]
 801e2e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e2ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e2ee:	f383 8810 	msr	PRIMASK, r3
}
 801e2f2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801e2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e2f6:	2280      	movs	r2, #128	@ 0x80
 801e2f8:	2120      	movs	r1, #32
 801e2fa:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e2fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e2fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e300:	2b01      	cmp	r3, #1
 801e302:	d118      	bne.n	801e336 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e304:	f3ef 8310 	mrs	r3, PRIMASK
 801e308:	60fb      	str	r3, [r7, #12]
  return(result);
 801e30a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e30e:	2301      	movs	r3, #1
 801e310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e312:	693b      	ldr	r3, [r7, #16]
 801e314:	f383 8810 	msr	PRIMASK, r3
}
 801e318:	46c0      	nop			@ (mov r8, r8)
 801e31a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	681a      	ldr	r2, [r3, #0]
 801e320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	2110      	movs	r1, #16
 801e326:	438a      	bics	r2, r1
 801e328:	601a      	str	r2, [r3, #0]
 801e32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e32c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e32e:	697b      	ldr	r3, [r7, #20]
 801e330:	f383 8810 	msr	PRIMASK, r3
}
 801e334:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e338:	2200      	movs	r2, #0
 801e33a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e33e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e340:	2b01      	cmp	r3, #1
 801e342:	d109      	bne.n	801e358 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801e344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e346:	22ac      	movs	r2, #172	@ 0xac
 801e348:	589b      	ldr	r3, [r3, r2]
 801e34a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e34c:	2158      	movs	r1, #88	@ 0x58
 801e34e:	5a51      	ldrh	r1, [r2, r1]
 801e350:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e352:	0010      	movs	r0, r2
 801e354:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e356:	e005      	b.n	801e364 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801e358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e35a:	2294      	movs	r2, #148	@ 0x94
 801e35c:	589b      	ldr	r3, [r3, r2]
 801e35e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e360:	0010      	movs	r0, r2
 801e362:	4798      	blx	r3
}
 801e364:	46c0      	nop			@ (mov r8, r8)
 801e366:	46bd      	mov	sp, r7
 801e368:	b014      	add	sp, #80	@ 0x50
 801e36a:	bd80      	pop	{r7, pc}
 801e36c:	fffffeff 	.word	0xfffffeff

0801e370 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b084      	sub	sp, #16
 801e374:	af00      	add	r7, sp, #0
 801e376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e37c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801e37e:	68fb      	ldr	r3, [r7, #12]
 801e380:	2201      	movs	r2, #1
 801e382:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e388:	2b01      	cmp	r3, #1
 801e38a:	d10b      	bne.n	801e3a4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801e38c:	68fb      	ldr	r3, [r7, #12]
 801e38e:	22ac      	movs	r2, #172	@ 0xac
 801e390:	589b      	ldr	r3, [r3, r2]
 801e392:	68fa      	ldr	r2, [r7, #12]
 801e394:	2158      	movs	r1, #88	@ 0x58
 801e396:	5a52      	ldrh	r2, [r2, r1]
 801e398:	0852      	lsrs	r2, r2, #1
 801e39a:	b291      	uxth	r1, r2
 801e39c:	68fa      	ldr	r2, [r7, #12]
 801e39e:	0010      	movs	r0, r2
 801e3a0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801e3a2:	e005      	b.n	801e3b0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	2290      	movs	r2, #144	@ 0x90
 801e3a8:	589b      	ldr	r3, [r3, r2]
 801e3aa:	68fa      	ldr	r2, [r7, #12]
 801e3ac:	0010      	movs	r0, r2
 801e3ae:	4798      	blx	r3
}
 801e3b0:	46c0      	nop			@ (mov r8, r8)
 801e3b2:	46bd      	mov	sp, r7
 801e3b4:	b004      	add	sp, #16
 801e3b6:	bd80      	pop	{r7, pc}

0801e3b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801e3b8:	b580      	push	{r7, lr}
 801e3ba:	b086      	sub	sp, #24
 801e3bc:	af00      	add	r7, sp, #0
 801e3be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e3c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801e3c6:	697b      	ldr	r3, [r7, #20]
 801e3c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e3ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801e3cc:	697b      	ldr	r3, [r7, #20]
 801e3ce:	2280      	movs	r2, #128	@ 0x80
 801e3d0:	589b      	ldr	r3, [r3, r2]
 801e3d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801e3d4:	697b      	ldr	r3, [r7, #20]
 801e3d6:	681b      	ldr	r3, [r3, #0]
 801e3d8:	689b      	ldr	r3, [r3, #8]
 801e3da:	2280      	movs	r2, #128	@ 0x80
 801e3dc:	4013      	ands	r3, r2
 801e3de:	2b80      	cmp	r3, #128	@ 0x80
 801e3e0:	d10a      	bne.n	801e3f8 <UART_DMAError+0x40>
 801e3e2:	693b      	ldr	r3, [r7, #16]
 801e3e4:	2b21      	cmp	r3, #33	@ 0x21
 801e3e6:	d107      	bne.n	801e3f8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801e3e8:	697b      	ldr	r3, [r7, #20]
 801e3ea:	2252      	movs	r2, #82	@ 0x52
 801e3ec:	2100      	movs	r1, #0
 801e3ee:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801e3f0:	697b      	ldr	r3, [r7, #20]
 801e3f2:	0018      	movs	r0, r3
 801e3f4:	f7ff fe3a 	bl	801e06c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801e3f8:	697b      	ldr	r3, [r7, #20]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	689b      	ldr	r3, [r3, #8]
 801e3fe:	2240      	movs	r2, #64	@ 0x40
 801e400:	4013      	ands	r3, r2
 801e402:	2b40      	cmp	r3, #64	@ 0x40
 801e404:	d10a      	bne.n	801e41c <UART_DMAError+0x64>
 801e406:	68fb      	ldr	r3, [r7, #12]
 801e408:	2b22      	cmp	r3, #34	@ 0x22
 801e40a:	d107      	bne.n	801e41c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801e40c:	697b      	ldr	r3, [r7, #20]
 801e40e:	225a      	movs	r2, #90	@ 0x5a
 801e410:	2100      	movs	r1, #0
 801e412:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801e414:	697b      	ldr	r3, [r7, #20]
 801e416:	0018      	movs	r0, r3
 801e418:	f7ff fe4c 	bl	801e0b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801e41c:	697b      	ldr	r3, [r7, #20]
 801e41e:	2284      	movs	r2, #132	@ 0x84
 801e420:	589b      	ldr	r3, [r3, r2]
 801e422:	2210      	movs	r2, #16
 801e424:	431a      	orrs	r2, r3
 801e426:	697b      	ldr	r3, [r7, #20]
 801e428:	2184      	movs	r1, #132	@ 0x84
 801e42a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e42c:	697b      	ldr	r3, [r7, #20]
 801e42e:	2298      	movs	r2, #152	@ 0x98
 801e430:	589b      	ldr	r3, [r3, r2]
 801e432:	697a      	ldr	r2, [r7, #20]
 801e434:	0010      	movs	r0, r2
 801e436:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e438:	46c0      	nop			@ (mov r8, r8)
 801e43a:	46bd      	mov	sp, r7
 801e43c:	b006      	add	sp, #24
 801e43e:	bd80      	pop	{r7, pc}

0801e440 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e440:	b580      	push	{r7, lr}
 801e442:	b084      	sub	sp, #16
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e44c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	225a      	movs	r2, #90	@ 0x5a
 801e452:	2100      	movs	r1, #0
 801e454:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	2252      	movs	r2, #82	@ 0x52
 801e45a:	2100      	movs	r1, #0
 801e45c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e45e:	68fb      	ldr	r3, [r7, #12]
 801e460:	2298      	movs	r2, #152	@ 0x98
 801e462:	589b      	ldr	r3, [r3, r2]
 801e464:	68fa      	ldr	r2, [r7, #12]
 801e466:	0010      	movs	r0, r2
 801e468:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e46a:	46c0      	nop			@ (mov r8, r8)
 801e46c:	46bd      	mov	sp, r7
 801e46e:	b004      	add	sp, #16
 801e470:	bd80      	pop	{r7, pc}

0801e472 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801e472:	b580      	push	{r7, lr}
 801e474:	b086      	sub	sp, #24
 801e476:	af00      	add	r7, sp, #0
 801e478:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e47a:	f3ef 8310 	mrs	r3, PRIMASK
 801e47e:	60bb      	str	r3, [r7, #8]
  return(result);
 801e480:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e482:	617b      	str	r3, [r7, #20]
 801e484:	2301      	movs	r3, #1
 801e486:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e488:	68fb      	ldr	r3, [r7, #12]
 801e48a:	f383 8810 	msr	PRIMASK, r3
}
 801e48e:	46c0      	nop			@ (mov r8, r8)
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	681a      	ldr	r2, [r3, #0]
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	2140      	movs	r1, #64	@ 0x40
 801e49c:	438a      	bics	r2, r1
 801e49e:	601a      	str	r2, [r3, #0]
 801e4a0:	697b      	ldr	r3, [r7, #20]
 801e4a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4a4:	693b      	ldr	r3, [r7, #16]
 801e4a6:	f383 8810 	msr	PRIMASK, r3
}
 801e4aa:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	2220      	movs	r2, #32
 801e4b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	2200      	movs	r2, #0
 801e4b6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	228c      	movs	r2, #140	@ 0x8c
 801e4bc:	589b      	ldr	r3, [r3, r2]
 801e4be:	687a      	ldr	r2, [r7, #4]
 801e4c0:	0010      	movs	r0, r2
 801e4c2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e4c4:	46c0      	nop			@ (mov r8, r8)
 801e4c6:	46bd      	mov	sp, r7
 801e4c8:	b006      	add	sp, #24
 801e4ca:	bd80      	pop	{r7, pc}

0801e4cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801e4cc:	b580      	push	{r7, lr}
 801e4ce:	b094      	sub	sp, #80	@ 0x50
 801e4d0:	af00      	add	r7, sp, #0
 801e4d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801e4d4:	204e      	movs	r0, #78	@ 0x4e
 801e4d6:	183b      	adds	r3, r7, r0
 801e4d8:	687a      	ldr	r2, [r7, #4]
 801e4da:	215c      	movs	r1, #92	@ 0x5c
 801e4dc:	5a52      	ldrh	r2, [r2, r1]
 801e4de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	2280      	movs	r2, #128	@ 0x80
 801e4e4:	589b      	ldr	r3, [r3, r2]
 801e4e6:	2b22      	cmp	r3, #34	@ 0x22
 801e4e8:	d000      	beq.n	801e4ec <UART_RxISR_8BIT+0x20>
 801e4ea:	e0c2      	b.n	801e672 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e4f2:	214c      	movs	r1, #76	@ 0x4c
 801e4f4:	187b      	adds	r3, r7, r1
 801e4f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801e4f8:	187b      	adds	r3, r7, r1
 801e4fa:	881b      	ldrh	r3, [r3, #0]
 801e4fc:	b2da      	uxtb	r2, r3
 801e4fe:	183b      	adds	r3, r7, r0
 801e500:	881b      	ldrh	r3, [r3, #0]
 801e502:	b2d9      	uxtb	r1, r3
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e508:	400a      	ands	r2, r1
 801e50a:	b2d2      	uxtb	r2, r2
 801e50c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e512:	1c5a      	adds	r2, r3, #1
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	225a      	movs	r2, #90	@ 0x5a
 801e51c:	5a9b      	ldrh	r3, [r3, r2]
 801e51e:	b29b      	uxth	r3, r3
 801e520:	3b01      	subs	r3, #1
 801e522:	b299      	uxth	r1, r3
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	225a      	movs	r2, #90	@ 0x5a
 801e528:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	225a      	movs	r2, #90	@ 0x5a
 801e52e:	5a9b      	ldrh	r3, [r3, r2]
 801e530:	b29b      	uxth	r3, r3
 801e532:	2b00      	cmp	r3, #0
 801e534:	d000      	beq.n	801e538 <UART_RxISR_8BIT+0x6c>
 801e536:	e0a4      	b.n	801e682 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e538:	f3ef 8310 	mrs	r3, PRIMASK
 801e53c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e540:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e542:	2301      	movs	r3, #1
 801e544:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e548:	f383 8810 	msr	PRIMASK, r3
}
 801e54c:	46c0      	nop			@ (mov r8, r8)
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	681a      	ldr	r2, [r3, #0]
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	494c      	ldr	r1, [pc, #304]	@ (801e68c <UART_RxISR_8BIT+0x1c0>)
 801e55a:	400a      	ands	r2, r1
 801e55c:	601a      	str	r2, [r3, #0]
 801e55e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e564:	f383 8810 	msr	PRIMASK, r3
}
 801e568:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e56a:	f3ef 8310 	mrs	r3, PRIMASK
 801e56e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e572:	647b      	str	r3, [r7, #68]	@ 0x44
 801e574:	2301      	movs	r3, #1
 801e576:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e57a:	f383 8810 	msr	PRIMASK, r3
}
 801e57e:	46c0      	nop			@ (mov r8, r8)
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	689a      	ldr	r2, [r3, #8]
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	2101      	movs	r1, #1
 801e58c:	438a      	bics	r2, r1
 801e58e:	609a      	str	r2, [r3, #8]
 801e590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e592:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e596:	f383 8810 	msr	PRIMASK, r3
}
 801e59a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	2280      	movs	r2, #128	@ 0x80
 801e5a0:	2120      	movs	r1, #32
 801e5a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	2200      	movs	r2, #0
 801e5a8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	4a36      	ldr	r2, [pc, #216]	@ (801e690 <UART_RxISR_8BIT+0x1c4>)
 801e5b6:	4293      	cmp	r3, r2
 801e5b8:	d01f      	beq.n	801e5fa <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	685a      	ldr	r2, [r3, #4]
 801e5c0:	2380      	movs	r3, #128	@ 0x80
 801e5c2:	041b      	lsls	r3, r3, #16
 801e5c4:	4013      	ands	r3, r2
 801e5c6:	d018      	beq.n	801e5fa <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e5c8:	f3ef 8310 	mrs	r3, PRIMASK
 801e5cc:	61bb      	str	r3, [r7, #24]
  return(result);
 801e5ce:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e5d0:	643b      	str	r3, [r7, #64]	@ 0x40
 801e5d2:	2301      	movs	r3, #1
 801e5d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5d6:	69fb      	ldr	r3, [r7, #28]
 801e5d8:	f383 8810 	msr	PRIMASK, r3
}
 801e5dc:	46c0      	nop			@ (mov r8, r8)
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	681a      	ldr	r2, [r3, #0]
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	492a      	ldr	r1, [pc, #168]	@ (801e694 <UART_RxISR_8BIT+0x1c8>)
 801e5ea:	400a      	ands	r2, r1
 801e5ec:	601a      	str	r2, [r3, #0]
 801e5ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e5f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5f2:	6a3b      	ldr	r3, [r7, #32]
 801e5f4:	f383 8810 	msr	PRIMASK, r3
}
 801e5f8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e5fe:	2b01      	cmp	r3, #1
 801e600:	d130      	bne.n	801e664 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	2200      	movs	r2, #0
 801e606:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e608:	f3ef 8310 	mrs	r3, PRIMASK
 801e60c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e60e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e612:	2301      	movs	r3, #1
 801e614:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e616:	693b      	ldr	r3, [r7, #16]
 801e618:	f383 8810 	msr	PRIMASK, r3
}
 801e61c:	46c0      	nop			@ (mov r8, r8)
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	681a      	ldr	r2, [r3, #0]
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	2110      	movs	r1, #16
 801e62a:	438a      	bics	r2, r1
 801e62c:	601a      	str	r2, [r3, #0]
 801e62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e630:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e632:	697b      	ldr	r3, [r7, #20]
 801e634:	f383 8810 	msr	PRIMASK, r3
}
 801e638:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	681b      	ldr	r3, [r3, #0]
 801e63e:	69db      	ldr	r3, [r3, #28]
 801e640:	2210      	movs	r2, #16
 801e642:	4013      	ands	r3, r2
 801e644:	2b10      	cmp	r3, #16
 801e646:	d103      	bne.n	801e650 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	2210      	movs	r2, #16
 801e64e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	22ac      	movs	r2, #172	@ 0xac
 801e654:	589b      	ldr	r3, [r3, r2]
 801e656:	687a      	ldr	r2, [r7, #4]
 801e658:	2158      	movs	r1, #88	@ 0x58
 801e65a:	5a51      	ldrh	r1, [r2, r1]
 801e65c:	687a      	ldr	r2, [r7, #4]
 801e65e:	0010      	movs	r0, r2
 801e660:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e662:	e00e      	b.n	801e682 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	2294      	movs	r2, #148	@ 0x94
 801e668:	589b      	ldr	r3, [r3, r2]
 801e66a:	687a      	ldr	r2, [r7, #4]
 801e66c:	0010      	movs	r0, r2
 801e66e:	4798      	blx	r3
}
 801e670:	e007      	b.n	801e682 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	699a      	ldr	r2, [r3, #24]
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	681b      	ldr	r3, [r3, #0]
 801e67c:	2108      	movs	r1, #8
 801e67e:	430a      	orrs	r2, r1
 801e680:	619a      	str	r2, [r3, #24]
}
 801e682:	46c0      	nop			@ (mov r8, r8)
 801e684:	46bd      	mov	sp, r7
 801e686:	b014      	add	sp, #80	@ 0x50
 801e688:	bd80      	pop	{r7, pc}
 801e68a:	46c0      	nop			@ (mov r8, r8)
 801e68c:	fffffedf 	.word	0xfffffedf
 801e690:	40004800 	.word	0x40004800
 801e694:	fbffffff 	.word	0xfbffffff

0801e698 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	b094      	sub	sp, #80	@ 0x50
 801e69c:	af00      	add	r7, sp, #0
 801e69e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801e6a0:	204e      	movs	r0, #78	@ 0x4e
 801e6a2:	183b      	adds	r3, r7, r0
 801e6a4:	687a      	ldr	r2, [r7, #4]
 801e6a6:	215c      	movs	r1, #92	@ 0x5c
 801e6a8:	5a52      	ldrh	r2, [r2, r1]
 801e6aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	2280      	movs	r2, #128	@ 0x80
 801e6b0:	589b      	ldr	r3, [r3, r2]
 801e6b2:	2b22      	cmp	r3, #34	@ 0x22
 801e6b4:	d000      	beq.n	801e6b8 <UART_RxISR_16BIT+0x20>
 801e6b6:	e0c2      	b.n	801e83e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e6be:	214c      	movs	r1, #76	@ 0x4c
 801e6c0:	187b      	adds	r3, r7, r1
 801e6c2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e6c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801e6ca:	187b      	adds	r3, r7, r1
 801e6cc:	183a      	adds	r2, r7, r0
 801e6ce:	881b      	ldrh	r3, [r3, #0]
 801e6d0:	8812      	ldrh	r2, [r2, #0]
 801e6d2:	4013      	ands	r3, r2
 801e6d4:	b29a      	uxth	r2, r3
 801e6d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e6d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e6de:	1c9a      	adds	r2, r3, #2
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	225a      	movs	r2, #90	@ 0x5a
 801e6e8:	5a9b      	ldrh	r3, [r3, r2]
 801e6ea:	b29b      	uxth	r3, r3
 801e6ec:	3b01      	subs	r3, #1
 801e6ee:	b299      	uxth	r1, r3
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	225a      	movs	r2, #90	@ 0x5a
 801e6f4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	225a      	movs	r2, #90	@ 0x5a
 801e6fa:	5a9b      	ldrh	r3, [r3, r2]
 801e6fc:	b29b      	uxth	r3, r3
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d000      	beq.n	801e704 <UART_RxISR_16BIT+0x6c>
 801e702:	e0a4      	b.n	801e84e <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e704:	f3ef 8310 	mrs	r3, PRIMASK
 801e708:	623b      	str	r3, [r7, #32]
  return(result);
 801e70a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e70c:	647b      	str	r3, [r7, #68]	@ 0x44
 801e70e:	2301      	movs	r3, #1
 801e710:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e714:	f383 8810 	msr	PRIMASK, r3
}
 801e718:	46c0      	nop			@ (mov r8, r8)
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	681a      	ldr	r2, [r3, #0]
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	494c      	ldr	r1, [pc, #304]	@ (801e858 <UART_RxISR_16BIT+0x1c0>)
 801e726:	400a      	ands	r2, r1
 801e728:	601a      	str	r2, [r3, #0]
 801e72a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e72c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e730:	f383 8810 	msr	PRIMASK, r3
}
 801e734:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e736:	f3ef 8310 	mrs	r3, PRIMASK
 801e73a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801e73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e73e:	643b      	str	r3, [r7, #64]	@ 0x40
 801e740:	2301      	movs	r3, #1
 801e742:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e746:	f383 8810 	msr	PRIMASK, r3
}
 801e74a:	46c0      	nop			@ (mov r8, r8)
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	681b      	ldr	r3, [r3, #0]
 801e750:	689a      	ldr	r2, [r3, #8]
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	2101      	movs	r1, #1
 801e758:	438a      	bics	r2, r1
 801e75a:	609a      	str	r2, [r3, #8]
 801e75c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e75e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e762:	f383 8810 	msr	PRIMASK, r3
}
 801e766:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	2280      	movs	r2, #128	@ 0x80
 801e76c:	2120      	movs	r1, #32
 801e76e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	2200      	movs	r2, #0
 801e774:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	2200      	movs	r2, #0
 801e77a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	4a36      	ldr	r2, [pc, #216]	@ (801e85c <UART_RxISR_16BIT+0x1c4>)
 801e782:	4293      	cmp	r3, r2
 801e784:	d01f      	beq.n	801e7c6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	681b      	ldr	r3, [r3, #0]
 801e78a:	685a      	ldr	r2, [r3, #4]
 801e78c:	2380      	movs	r3, #128	@ 0x80
 801e78e:	041b      	lsls	r3, r3, #16
 801e790:	4013      	ands	r3, r2
 801e792:	d018      	beq.n	801e7c6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e794:	f3ef 8310 	mrs	r3, PRIMASK
 801e798:	617b      	str	r3, [r7, #20]
  return(result);
 801e79a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e79e:	2301      	movs	r3, #1
 801e7a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7a2:	69bb      	ldr	r3, [r7, #24]
 801e7a4:	f383 8810 	msr	PRIMASK, r3
}
 801e7a8:	46c0      	nop			@ (mov r8, r8)
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	681a      	ldr	r2, [r3, #0]
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	492a      	ldr	r1, [pc, #168]	@ (801e860 <UART_RxISR_16BIT+0x1c8>)
 801e7b6:	400a      	ands	r2, r1
 801e7b8:	601a      	str	r2, [r3, #0]
 801e7ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e7bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7be:	69fb      	ldr	r3, [r7, #28]
 801e7c0:	f383 8810 	msr	PRIMASK, r3
}
 801e7c4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e7ca:	2b01      	cmp	r3, #1
 801e7cc:	d130      	bne.n	801e830 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	2200      	movs	r2, #0
 801e7d2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7d4:	f3ef 8310 	mrs	r3, PRIMASK
 801e7d8:	60bb      	str	r3, [r7, #8]
  return(result);
 801e7da:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e7dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e7de:	2301      	movs	r3, #1
 801e7e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	f383 8810 	msr	PRIMASK, r3
}
 801e7e8:	46c0      	nop			@ (mov r8, r8)
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	681a      	ldr	r2, [r3, #0]
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	2110      	movs	r1, #16
 801e7f6:	438a      	bics	r2, r1
 801e7f8:	601a      	str	r2, [r3, #0]
 801e7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7fe:	693b      	ldr	r3, [r7, #16]
 801e800:	f383 8810 	msr	PRIMASK, r3
}
 801e804:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	681b      	ldr	r3, [r3, #0]
 801e80a:	69db      	ldr	r3, [r3, #28]
 801e80c:	2210      	movs	r2, #16
 801e80e:	4013      	ands	r3, r2
 801e810:	2b10      	cmp	r3, #16
 801e812:	d103      	bne.n	801e81c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e814:	687b      	ldr	r3, [r7, #4]
 801e816:	681b      	ldr	r3, [r3, #0]
 801e818:	2210      	movs	r2, #16
 801e81a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	22ac      	movs	r2, #172	@ 0xac
 801e820:	589b      	ldr	r3, [r3, r2]
 801e822:	687a      	ldr	r2, [r7, #4]
 801e824:	2158      	movs	r1, #88	@ 0x58
 801e826:	5a51      	ldrh	r1, [r2, r1]
 801e828:	687a      	ldr	r2, [r7, #4]
 801e82a:	0010      	movs	r0, r2
 801e82c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e82e:	e00e      	b.n	801e84e <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	2294      	movs	r2, #148	@ 0x94
 801e834:	589b      	ldr	r3, [r3, r2]
 801e836:	687a      	ldr	r2, [r7, #4]
 801e838:	0010      	movs	r0, r2
 801e83a:	4798      	blx	r3
}
 801e83c:	e007      	b.n	801e84e <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	699a      	ldr	r2, [r3, #24]
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	2108      	movs	r1, #8
 801e84a:	430a      	orrs	r2, r1
 801e84c:	619a      	str	r2, [r3, #24]
}
 801e84e:	46c0      	nop			@ (mov r8, r8)
 801e850:	46bd      	mov	sp, r7
 801e852:	b014      	add	sp, #80	@ 0x50
 801e854:	bd80      	pop	{r7, pc}
 801e856:	46c0      	nop			@ (mov r8, r8)
 801e858:	fffffedf 	.word	0xfffffedf
 801e85c:	40004800 	.word	0x40004800
 801e860:	fbffffff 	.word	0xfbffffff

0801e864 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e864:	b580      	push	{r7, lr}
 801e866:	b082      	sub	sp, #8
 801e868:	af00      	add	r7, sp, #0
 801e86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e86c:	46c0      	nop			@ (mov r8, r8)
 801e86e:	46bd      	mov	sp, r7
 801e870:	b002      	add	sp, #8
 801e872:	bd80      	pop	{r7, pc}

0801e874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801e874:	b580      	push	{r7, lr}
 801e876:	b084      	sub	sp, #16
 801e878:	af00      	add	r7, sp, #0
 801e87a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	2244      	movs	r2, #68	@ 0x44
 801e880:	2100      	movs	r1, #0
 801e882:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e884:	4b05      	ldr	r3, [pc, #20]	@ (801e89c <USB_EnableGlobalInt+0x28>)
 801e886:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	b299      	uxth	r1, r3
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	2240      	movs	r2, #64	@ 0x40
 801e890:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e892:	2300      	movs	r3, #0
}
 801e894:	0018      	movs	r0, r3
 801e896:	46bd      	mov	sp, r7
 801e898:	b004      	add	sp, #16
 801e89a:	bd80      	pop	{r7, pc}
 801e89c:	0000bf80 	.word	0x0000bf80

0801e8a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801e8a0:	b580      	push	{r7, lr}
 801e8a2:	b084      	sub	sp, #16
 801e8a4:	af00      	add	r7, sp, #0
 801e8a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e8a8:	4b09      	ldr	r3, [pc, #36]	@ (801e8d0 <USB_DisableGlobalInt+0x30>)
 801e8aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	2240      	movs	r2, #64	@ 0x40
 801e8b0:	5a9b      	ldrh	r3, [r3, r2]
 801e8b2:	b29b      	uxth	r3, r3
 801e8b4:	68fa      	ldr	r2, [r7, #12]
 801e8b6:	b292      	uxth	r2, r2
 801e8b8:	43d2      	mvns	r2, r2
 801e8ba:	b292      	uxth	r2, r2
 801e8bc:	4013      	ands	r3, r2
 801e8be:	b299      	uxth	r1, r3
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	2240      	movs	r2, #64	@ 0x40
 801e8c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e8c6:	2300      	movs	r3, #0
}
 801e8c8:	0018      	movs	r0, r3
 801e8ca:	46bd      	mov	sp, r7
 801e8cc:	b004      	add	sp, #16
 801e8ce:	bd80      	pop	{r7, pc}
 801e8d0:	0000bf80 	.word	0x0000bf80

0801e8d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801e8d4:	b084      	sub	sp, #16
 801e8d6:	b590      	push	{r4, r7, lr}
 801e8d8:	b083      	sub	sp, #12
 801e8da:	af00      	add	r7, sp, #0
 801e8dc:	6078      	str	r0, [r7, #4]
 801e8de:	2004      	movs	r0, #4
 801e8e0:	2410      	movs	r4, #16
 801e8e2:	1900      	adds	r0, r0, r4
 801e8e4:	2408      	movs	r4, #8
 801e8e6:	46a4      	mov	ip, r4
 801e8e8:	44bc      	add	ip, r7
 801e8ea:	4460      	add	r0, ip
 801e8ec:	6001      	str	r1, [r0, #0]
 801e8ee:	6042      	str	r2, [r0, #4]
 801e8f0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	2240      	movs	r2, #64	@ 0x40
 801e8f6:	2101      	movs	r1, #1
 801e8f8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	2240      	movs	r2, #64	@ 0x40
 801e8fe:	2100      	movs	r1, #0
 801e900:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	2244      	movs	r2, #68	@ 0x44
 801e906:	2100      	movs	r1, #0
 801e908:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	2250      	movs	r2, #80	@ 0x50
 801e90e:	2100      	movs	r1, #0
 801e910:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e912:	2300      	movs	r3, #0
}
 801e914:	0018      	movs	r0, r3
 801e916:	46bd      	mov	sp, r7
 801e918:	b003      	add	sp, #12
 801e91a:	bc90      	pop	{r4, r7}
 801e91c:	bc08      	pop	{r3}
 801e91e:	b004      	add	sp, #16
 801e920:	4718      	bx	r3
	...

0801e924 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e924:	b580      	push	{r7, lr}
 801e926:	b09c      	sub	sp, #112	@ 0x70
 801e928:	af00      	add	r7, sp, #0
 801e92a:	6078      	str	r0, [r7, #4]
 801e92c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801e92e:	236f      	movs	r3, #111	@ 0x6f
 801e930:	18fb      	adds	r3, r7, r3
 801e932:	2200      	movs	r2, #0
 801e934:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801e936:	687a      	ldr	r2, [r7, #4]
 801e938:	683b      	ldr	r3, [r7, #0]
 801e93a:	781b      	ldrb	r3, [r3, #0]
 801e93c:	009b      	lsls	r3, r3, #2
 801e93e:	18d3      	adds	r3, r2, r3
 801e940:	881b      	ldrh	r3, [r3, #0]
 801e942:	b29a      	uxth	r2, r3
 801e944:	236c      	movs	r3, #108	@ 0x6c
 801e946:	18fb      	adds	r3, r7, r3
 801e948:	49a3      	ldr	r1, [pc, #652]	@ (801ebd8 <USB_ActivateEndpoint+0x2b4>)
 801e94a:	400a      	ands	r2, r1
 801e94c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801e94e:	683b      	ldr	r3, [r7, #0]
 801e950:	78db      	ldrb	r3, [r3, #3]
 801e952:	2b03      	cmp	r3, #3
 801e954:	d017      	beq.n	801e986 <USB_ActivateEndpoint+0x62>
 801e956:	dc28      	bgt.n	801e9aa <USB_ActivateEndpoint+0x86>
 801e958:	2b02      	cmp	r3, #2
 801e95a:	d00e      	beq.n	801e97a <USB_ActivateEndpoint+0x56>
 801e95c:	dc25      	bgt.n	801e9aa <USB_ActivateEndpoint+0x86>
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d002      	beq.n	801e968 <USB_ActivateEndpoint+0x44>
 801e962:	2b01      	cmp	r3, #1
 801e964:	d018      	beq.n	801e998 <USB_ActivateEndpoint+0x74>
 801e966:	e020      	b.n	801e9aa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801e968:	226c      	movs	r2, #108	@ 0x6c
 801e96a:	18bb      	adds	r3, r7, r2
 801e96c:	18ba      	adds	r2, r7, r2
 801e96e:	8812      	ldrh	r2, [r2, #0]
 801e970:	2180      	movs	r1, #128	@ 0x80
 801e972:	0089      	lsls	r1, r1, #2
 801e974:	430a      	orrs	r2, r1
 801e976:	801a      	strh	r2, [r3, #0]
      break;
 801e978:	e01c      	b.n	801e9b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801e97a:	226c      	movs	r2, #108	@ 0x6c
 801e97c:	18bb      	adds	r3, r7, r2
 801e97e:	18ba      	adds	r2, r7, r2
 801e980:	8812      	ldrh	r2, [r2, #0]
 801e982:	801a      	strh	r2, [r3, #0]
      break;
 801e984:	e016      	b.n	801e9b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801e986:	226c      	movs	r2, #108	@ 0x6c
 801e988:	18bb      	adds	r3, r7, r2
 801e98a:	18ba      	adds	r2, r7, r2
 801e98c:	8812      	ldrh	r2, [r2, #0]
 801e98e:	21c0      	movs	r1, #192	@ 0xc0
 801e990:	00c9      	lsls	r1, r1, #3
 801e992:	430a      	orrs	r2, r1
 801e994:	801a      	strh	r2, [r3, #0]
      break;
 801e996:	e00d      	b.n	801e9b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801e998:	226c      	movs	r2, #108	@ 0x6c
 801e99a:	18bb      	adds	r3, r7, r2
 801e99c:	18ba      	adds	r2, r7, r2
 801e99e:	8812      	ldrh	r2, [r2, #0]
 801e9a0:	2180      	movs	r1, #128	@ 0x80
 801e9a2:	00c9      	lsls	r1, r1, #3
 801e9a4:	430a      	orrs	r2, r1
 801e9a6:	801a      	strh	r2, [r3, #0]
      break;
 801e9a8:	e004      	b.n	801e9b4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801e9aa:	236f      	movs	r3, #111	@ 0x6f
 801e9ac:	18fb      	adds	r3, r7, r3
 801e9ae:	2201      	movs	r2, #1
 801e9b0:	701a      	strb	r2, [r3, #0]
      break;
 801e9b2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801e9b4:	687a      	ldr	r2, [r7, #4]
 801e9b6:	683b      	ldr	r3, [r7, #0]
 801e9b8:	781b      	ldrb	r3, [r3, #0]
 801e9ba:	009b      	lsls	r3, r3, #2
 801e9bc:	18d3      	adds	r3, r2, r3
 801e9be:	226c      	movs	r2, #108	@ 0x6c
 801e9c0:	18ba      	adds	r2, r7, r2
 801e9c2:	8812      	ldrh	r2, [r2, #0]
 801e9c4:	4985      	ldr	r1, [pc, #532]	@ (801ebdc <USB_ActivateEndpoint+0x2b8>)
 801e9c6:	430a      	orrs	r2, r1
 801e9c8:	b292      	uxth	r2, r2
 801e9ca:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801e9cc:	687a      	ldr	r2, [r7, #4]
 801e9ce:	683b      	ldr	r3, [r7, #0]
 801e9d0:	781b      	ldrb	r3, [r3, #0]
 801e9d2:	009b      	lsls	r3, r3, #2
 801e9d4:	18d3      	adds	r3, r2, r3
 801e9d6:	881b      	ldrh	r3, [r3, #0]
 801e9d8:	b29b      	uxth	r3, r3
 801e9da:	b21b      	sxth	r3, r3
 801e9dc:	4a80      	ldr	r2, [pc, #512]	@ (801ebe0 <USB_ActivateEndpoint+0x2bc>)
 801e9de:	4013      	ands	r3, r2
 801e9e0:	b21a      	sxth	r2, r3
 801e9e2:	683b      	ldr	r3, [r7, #0]
 801e9e4:	781b      	ldrb	r3, [r3, #0]
 801e9e6:	b21b      	sxth	r3, r3
 801e9e8:	4313      	orrs	r3, r2
 801e9ea:	b21a      	sxth	r2, r3
 801e9ec:	2166      	movs	r1, #102	@ 0x66
 801e9ee:	187b      	adds	r3, r7, r1
 801e9f0:	801a      	strh	r2, [r3, #0]
 801e9f2:	687a      	ldr	r2, [r7, #4]
 801e9f4:	683b      	ldr	r3, [r7, #0]
 801e9f6:	781b      	ldrb	r3, [r3, #0]
 801e9f8:	009b      	lsls	r3, r3, #2
 801e9fa:	18d3      	adds	r3, r2, r3
 801e9fc:	187a      	adds	r2, r7, r1
 801e9fe:	8812      	ldrh	r2, [r2, #0]
 801ea00:	4976      	ldr	r1, [pc, #472]	@ (801ebdc <USB_ActivateEndpoint+0x2b8>)
 801ea02:	430a      	orrs	r2, r1
 801ea04:	b292      	uxth	r2, r2
 801ea06:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801ea08:	683b      	ldr	r3, [r7, #0]
 801ea0a:	7b1b      	ldrb	r3, [r3, #12]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d000      	beq.n	801ea12 <USB_ActivateEndpoint+0xee>
 801ea10:	e178      	b.n	801ed04 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801ea12:	683b      	ldr	r3, [r7, #0]
 801ea14:	785b      	ldrb	r3, [r3, #1]
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d100      	bne.n	801ea1c <USB_ActivateEndpoint+0xf8>
 801ea1a:	e07a      	b.n	801eb12 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	61bb      	str	r3, [r7, #24]
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	2250      	movs	r2, #80	@ 0x50
 801ea24:	5a9b      	ldrh	r3, [r3, r2]
 801ea26:	b29b      	uxth	r3, r3
 801ea28:	001a      	movs	r2, r3
 801ea2a:	69bb      	ldr	r3, [r7, #24]
 801ea2c:	189b      	adds	r3, r3, r2
 801ea2e:	61bb      	str	r3, [r7, #24]
 801ea30:	683b      	ldr	r3, [r7, #0]
 801ea32:	781b      	ldrb	r3, [r3, #0]
 801ea34:	00da      	lsls	r2, r3, #3
 801ea36:	69bb      	ldr	r3, [r7, #24]
 801ea38:	18d3      	adds	r3, r2, r3
 801ea3a:	2280      	movs	r2, #128	@ 0x80
 801ea3c:	00d2      	lsls	r2, r2, #3
 801ea3e:	4694      	mov	ip, r2
 801ea40:	4463      	add	r3, ip
 801ea42:	617b      	str	r3, [r7, #20]
 801ea44:	683b      	ldr	r3, [r7, #0]
 801ea46:	88db      	ldrh	r3, [r3, #6]
 801ea48:	085b      	lsrs	r3, r3, #1
 801ea4a:	b29b      	uxth	r3, r3
 801ea4c:	18db      	adds	r3, r3, r3
 801ea4e:	b29a      	uxth	r2, r3
 801ea50:	697b      	ldr	r3, [r7, #20]
 801ea52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ea54:	687a      	ldr	r2, [r7, #4]
 801ea56:	683b      	ldr	r3, [r7, #0]
 801ea58:	781b      	ldrb	r3, [r3, #0]
 801ea5a:	009b      	lsls	r3, r3, #2
 801ea5c:	18d2      	adds	r2, r2, r3
 801ea5e:	2112      	movs	r1, #18
 801ea60:	187b      	adds	r3, r7, r1
 801ea62:	8812      	ldrh	r2, [r2, #0]
 801ea64:	801a      	strh	r2, [r3, #0]
 801ea66:	187b      	adds	r3, r7, r1
 801ea68:	881b      	ldrh	r3, [r3, #0]
 801ea6a:	2240      	movs	r2, #64	@ 0x40
 801ea6c:	4013      	ands	r3, r2
 801ea6e:	d016      	beq.n	801ea9e <USB_ActivateEndpoint+0x17a>
 801ea70:	687a      	ldr	r2, [r7, #4]
 801ea72:	683b      	ldr	r3, [r7, #0]
 801ea74:	781b      	ldrb	r3, [r3, #0]
 801ea76:	009b      	lsls	r3, r3, #2
 801ea78:	18d3      	adds	r3, r2, r3
 801ea7a:	881b      	ldrh	r3, [r3, #0]
 801ea7c:	b29a      	uxth	r2, r3
 801ea7e:	2010      	movs	r0, #16
 801ea80:	183b      	adds	r3, r7, r0
 801ea82:	4957      	ldr	r1, [pc, #348]	@ (801ebe0 <USB_ActivateEndpoint+0x2bc>)
 801ea84:	400a      	ands	r2, r1
 801ea86:	801a      	strh	r2, [r3, #0]
 801ea88:	687a      	ldr	r2, [r7, #4]
 801ea8a:	683b      	ldr	r3, [r7, #0]
 801ea8c:	781b      	ldrb	r3, [r3, #0]
 801ea8e:	009b      	lsls	r3, r3, #2
 801ea90:	18d3      	adds	r3, r2, r3
 801ea92:	183a      	adds	r2, r7, r0
 801ea94:	8812      	ldrh	r2, [r2, #0]
 801ea96:	4953      	ldr	r1, [pc, #332]	@ (801ebe4 <USB_ActivateEndpoint+0x2c0>)
 801ea98:	430a      	orrs	r2, r1
 801ea9a:	b292      	uxth	r2, r2
 801ea9c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ea9e:	683b      	ldr	r3, [r7, #0]
 801eaa0:	78db      	ldrb	r3, [r3, #3]
 801eaa2:	2b01      	cmp	r3, #1
 801eaa4:	d01d      	beq.n	801eae2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801eaa6:	687a      	ldr	r2, [r7, #4]
 801eaa8:	683b      	ldr	r3, [r7, #0]
 801eaaa:	781b      	ldrb	r3, [r3, #0]
 801eaac:	009b      	lsls	r3, r3, #2
 801eaae:	18d3      	adds	r3, r2, r3
 801eab0:	881b      	ldrh	r3, [r3, #0]
 801eab2:	b29a      	uxth	r2, r3
 801eab4:	200c      	movs	r0, #12
 801eab6:	183b      	adds	r3, r7, r0
 801eab8:	494b      	ldr	r1, [pc, #300]	@ (801ebe8 <USB_ActivateEndpoint+0x2c4>)
 801eaba:	400a      	ands	r2, r1
 801eabc:	801a      	strh	r2, [r3, #0]
 801eabe:	183b      	adds	r3, r7, r0
 801eac0:	183a      	adds	r2, r7, r0
 801eac2:	8812      	ldrh	r2, [r2, #0]
 801eac4:	2120      	movs	r1, #32
 801eac6:	404a      	eors	r2, r1
 801eac8:	801a      	strh	r2, [r3, #0]
 801eaca:	687a      	ldr	r2, [r7, #4]
 801eacc:	683b      	ldr	r3, [r7, #0]
 801eace:	781b      	ldrb	r3, [r3, #0]
 801ead0:	009b      	lsls	r3, r3, #2
 801ead2:	18d3      	adds	r3, r2, r3
 801ead4:	183a      	adds	r2, r7, r0
 801ead6:	8812      	ldrh	r2, [r2, #0]
 801ead8:	4940      	ldr	r1, [pc, #256]	@ (801ebdc <USB_ActivateEndpoint+0x2b8>)
 801eada:	430a      	orrs	r2, r1
 801eadc:	b292      	uxth	r2, r2
 801eade:	801a      	strh	r2, [r3, #0]
 801eae0:	e2b4      	b.n	801f04c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801eae2:	687a      	ldr	r2, [r7, #4]
 801eae4:	683b      	ldr	r3, [r7, #0]
 801eae6:	781b      	ldrb	r3, [r3, #0]
 801eae8:	009b      	lsls	r3, r3, #2
 801eaea:	18d3      	adds	r3, r2, r3
 801eaec:	881b      	ldrh	r3, [r3, #0]
 801eaee:	b29a      	uxth	r2, r3
 801eaf0:	200e      	movs	r0, #14
 801eaf2:	183b      	adds	r3, r7, r0
 801eaf4:	493c      	ldr	r1, [pc, #240]	@ (801ebe8 <USB_ActivateEndpoint+0x2c4>)
 801eaf6:	400a      	ands	r2, r1
 801eaf8:	801a      	strh	r2, [r3, #0]
 801eafa:	687a      	ldr	r2, [r7, #4]
 801eafc:	683b      	ldr	r3, [r7, #0]
 801eafe:	781b      	ldrb	r3, [r3, #0]
 801eb00:	009b      	lsls	r3, r3, #2
 801eb02:	18d3      	adds	r3, r2, r3
 801eb04:	183a      	adds	r2, r7, r0
 801eb06:	8812      	ldrh	r2, [r2, #0]
 801eb08:	4934      	ldr	r1, [pc, #208]	@ (801ebdc <USB_ActivateEndpoint+0x2b8>)
 801eb0a:	430a      	orrs	r2, r1
 801eb0c:	b292      	uxth	r2, r2
 801eb0e:	801a      	strh	r2, [r3, #0]
 801eb10:	e29c      	b.n	801f04c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	633b      	str	r3, [r7, #48]	@ 0x30
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	2250      	movs	r2, #80	@ 0x50
 801eb1a:	5a9b      	ldrh	r3, [r3, r2]
 801eb1c:	b29b      	uxth	r3, r3
 801eb1e:	001a      	movs	r2, r3
 801eb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb22:	189b      	adds	r3, r3, r2
 801eb24:	633b      	str	r3, [r7, #48]	@ 0x30
 801eb26:	683b      	ldr	r3, [r7, #0]
 801eb28:	781b      	ldrb	r3, [r3, #0]
 801eb2a:	00da      	lsls	r2, r3, #3
 801eb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb2e:	18d3      	adds	r3, r2, r3
 801eb30:	4a2e      	ldr	r2, [pc, #184]	@ (801ebec <USB_ActivateEndpoint+0x2c8>)
 801eb32:	4694      	mov	ip, r2
 801eb34:	4463      	add	r3, ip
 801eb36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801eb38:	683b      	ldr	r3, [r7, #0]
 801eb3a:	88db      	ldrh	r3, [r3, #6]
 801eb3c:	085b      	lsrs	r3, r3, #1
 801eb3e:	b29b      	uxth	r3, r3
 801eb40:	18db      	adds	r3, r3, r3
 801eb42:	b29a      	uxth	r2, r3
 801eb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	2250      	movs	r2, #80	@ 0x50
 801eb50:	5a9b      	ldrh	r3, [r3, r2]
 801eb52:	b29b      	uxth	r3, r3
 801eb54:	001a      	movs	r2, r3
 801eb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb58:	189b      	adds	r3, r3, r2
 801eb5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801eb5c:	683b      	ldr	r3, [r7, #0]
 801eb5e:	781b      	ldrb	r3, [r3, #0]
 801eb60:	00da      	lsls	r2, r3, #3
 801eb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb64:	18d3      	adds	r3, r2, r3
 801eb66:	4a22      	ldr	r2, [pc, #136]	@ (801ebf0 <USB_ActivateEndpoint+0x2cc>)
 801eb68:	4694      	mov	ip, r2
 801eb6a:	4463      	add	r3, ip
 801eb6c:	627b      	str	r3, [r7, #36]	@ 0x24
 801eb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb70:	881b      	ldrh	r3, [r3, #0]
 801eb72:	b29b      	uxth	r3, r3
 801eb74:	059b      	lsls	r3, r3, #22
 801eb76:	0d9b      	lsrs	r3, r3, #22
 801eb78:	b29a      	uxth	r2, r3
 801eb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb7c:	801a      	strh	r2, [r3, #0]
 801eb7e:	683b      	ldr	r3, [r7, #0]
 801eb80:	691b      	ldr	r3, [r3, #16]
 801eb82:	2b3e      	cmp	r3, #62	@ 0x3e
 801eb84:	d91a      	bls.n	801ebbc <USB_ActivateEndpoint+0x298>
 801eb86:	683b      	ldr	r3, [r7, #0]
 801eb88:	691b      	ldr	r3, [r3, #16]
 801eb8a:	095b      	lsrs	r3, r3, #5
 801eb8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801eb8e:	683b      	ldr	r3, [r7, #0]
 801eb90:	691b      	ldr	r3, [r3, #16]
 801eb92:	221f      	movs	r2, #31
 801eb94:	4013      	ands	r3, r2
 801eb96:	d102      	bne.n	801eb9e <USB_ActivateEndpoint+0x27a>
 801eb98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801eb9a:	3b01      	subs	r3, #1
 801eb9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801eb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eba0:	881b      	ldrh	r3, [r3, #0]
 801eba2:	b29a      	uxth	r2, r3
 801eba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801eba6:	b29b      	uxth	r3, r3
 801eba8:	029b      	lsls	r3, r3, #10
 801ebaa:	b29b      	uxth	r3, r3
 801ebac:	4313      	orrs	r3, r2
 801ebae:	b29b      	uxth	r3, r3
 801ebb0:	4a10      	ldr	r2, [pc, #64]	@ (801ebf4 <USB_ActivateEndpoint+0x2d0>)
 801ebb2:	4313      	orrs	r3, r2
 801ebb4:	b29a      	uxth	r2, r3
 801ebb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebb8:	801a      	strh	r2, [r3, #0]
 801ebba:	e034      	b.n	801ec26 <USB_ActivateEndpoint+0x302>
 801ebbc:	683b      	ldr	r3, [r7, #0]
 801ebbe:	691b      	ldr	r3, [r3, #16]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d119      	bne.n	801ebf8 <USB_ActivateEndpoint+0x2d4>
 801ebc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebc6:	881b      	ldrh	r3, [r3, #0]
 801ebc8:	b29b      	uxth	r3, r3
 801ebca:	4a0a      	ldr	r2, [pc, #40]	@ (801ebf4 <USB_ActivateEndpoint+0x2d0>)
 801ebcc:	4313      	orrs	r3, r2
 801ebce:	b29a      	uxth	r2, r3
 801ebd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebd2:	801a      	strh	r2, [r3, #0]
 801ebd4:	e027      	b.n	801ec26 <USB_ActivateEndpoint+0x302>
 801ebd6:	46c0      	nop			@ (mov r8, r8)
 801ebd8:	ffff898f 	.word	0xffff898f
 801ebdc:	ffff8080 	.word	0xffff8080
 801ebe0:	ffff8f8f 	.word	0xffff8f8f
 801ebe4:	ffff80c0 	.word	0xffff80c0
 801ebe8:	ffff8fbf 	.word	0xffff8fbf
 801ebec:	00000404 	.word	0x00000404
 801ebf0:	00000406 	.word	0x00000406
 801ebf4:	ffff8000 	.word	0xffff8000
 801ebf8:	683b      	ldr	r3, [r7, #0]
 801ebfa:	691b      	ldr	r3, [r3, #16]
 801ebfc:	085b      	lsrs	r3, r3, #1
 801ebfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ec00:	683b      	ldr	r3, [r7, #0]
 801ec02:	691b      	ldr	r3, [r3, #16]
 801ec04:	2201      	movs	r2, #1
 801ec06:	4013      	ands	r3, r2
 801ec08:	d002      	beq.n	801ec10 <USB_ActivateEndpoint+0x2ec>
 801ec0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ec0c:	3301      	adds	r3, #1
 801ec0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ec10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec12:	881b      	ldrh	r3, [r3, #0]
 801ec14:	b29a      	uxth	r2, r3
 801ec16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ec18:	b29b      	uxth	r3, r3
 801ec1a:	029b      	lsls	r3, r3, #10
 801ec1c:	b29b      	uxth	r3, r3
 801ec1e:	4313      	orrs	r3, r2
 801ec20:	b29a      	uxth	r2, r3
 801ec22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ec26:	687a      	ldr	r2, [r7, #4]
 801ec28:	683b      	ldr	r3, [r7, #0]
 801ec2a:	781b      	ldrb	r3, [r3, #0]
 801ec2c:	009b      	lsls	r3, r3, #2
 801ec2e:	18d2      	adds	r2, r2, r3
 801ec30:	2122      	movs	r1, #34	@ 0x22
 801ec32:	187b      	adds	r3, r7, r1
 801ec34:	8812      	ldrh	r2, [r2, #0]
 801ec36:	801a      	strh	r2, [r3, #0]
 801ec38:	187b      	adds	r3, r7, r1
 801ec3a:	881a      	ldrh	r2, [r3, #0]
 801ec3c:	2380      	movs	r3, #128	@ 0x80
 801ec3e:	01db      	lsls	r3, r3, #7
 801ec40:	4013      	ands	r3, r2
 801ec42:	d016      	beq.n	801ec72 <USB_ActivateEndpoint+0x34e>
 801ec44:	687a      	ldr	r2, [r7, #4]
 801ec46:	683b      	ldr	r3, [r7, #0]
 801ec48:	781b      	ldrb	r3, [r3, #0]
 801ec4a:	009b      	lsls	r3, r3, #2
 801ec4c:	18d3      	adds	r3, r2, r3
 801ec4e:	881b      	ldrh	r3, [r3, #0]
 801ec50:	b29a      	uxth	r2, r3
 801ec52:	2020      	movs	r0, #32
 801ec54:	183b      	adds	r3, r7, r0
 801ec56:	49dd      	ldr	r1, [pc, #884]	@ (801efcc <USB_ActivateEndpoint+0x6a8>)
 801ec58:	400a      	ands	r2, r1
 801ec5a:	801a      	strh	r2, [r3, #0]
 801ec5c:	687a      	ldr	r2, [r7, #4]
 801ec5e:	683b      	ldr	r3, [r7, #0]
 801ec60:	781b      	ldrb	r3, [r3, #0]
 801ec62:	009b      	lsls	r3, r3, #2
 801ec64:	18d3      	adds	r3, r2, r3
 801ec66:	183a      	adds	r2, r7, r0
 801ec68:	8812      	ldrh	r2, [r2, #0]
 801ec6a:	49d9      	ldr	r1, [pc, #868]	@ (801efd0 <USB_ActivateEndpoint+0x6ac>)
 801ec6c:	430a      	orrs	r2, r1
 801ec6e:	b292      	uxth	r2, r2
 801ec70:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801ec72:	683b      	ldr	r3, [r7, #0]
 801ec74:	781b      	ldrb	r3, [r3, #0]
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d125      	bne.n	801ecc6 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ec7a:	687a      	ldr	r2, [r7, #4]
 801ec7c:	683b      	ldr	r3, [r7, #0]
 801ec7e:	781b      	ldrb	r3, [r3, #0]
 801ec80:	009b      	lsls	r3, r3, #2
 801ec82:	18d3      	adds	r3, r2, r3
 801ec84:	881b      	ldrh	r3, [r3, #0]
 801ec86:	b29a      	uxth	r2, r3
 801ec88:	201c      	movs	r0, #28
 801ec8a:	183b      	adds	r3, r7, r0
 801ec8c:	49d1      	ldr	r1, [pc, #836]	@ (801efd4 <USB_ActivateEndpoint+0x6b0>)
 801ec8e:	400a      	ands	r2, r1
 801ec90:	801a      	strh	r2, [r3, #0]
 801ec92:	183b      	adds	r3, r7, r0
 801ec94:	183a      	adds	r2, r7, r0
 801ec96:	8812      	ldrh	r2, [r2, #0]
 801ec98:	2180      	movs	r1, #128	@ 0x80
 801ec9a:	0149      	lsls	r1, r1, #5
 801ec9c:	404a      	eors	r2, r1
 801ec9e:	801a      	strh	r2, [r3, #0]
 801eca0:	183b      	adds	r3, r7, r0
 801eca2:	183a      	adds	r2, r7, r0
 801eca4:	8812      	ldrh	r2, [r2, #0]
 801eca6:	2180      	movs	r1, #128	@ 0x80
 801eca8:	0189      	lsls	r1, r1, #6
 801ecaa:	404a      	eors	r2, r1
 801ecac:	801a      	strh	r2, [r3, #0]
 801ecae:	687a      	ldr	r2, [r7, #4]
 801ecb0:	683b      	ldr	r3, [r7, #0]
 801ecb2:	781b      	ldrb	r3, [r3, #0]
 801ecb4:	009b      	lsls	r3, r3, #2
 801ecb6:	18d3      	adds	r3, r2, r3
 801ecb8:	183a      	adds	r2, r7, r0
 801ecba:	8812      	ldrh	r2, [r2, #0]
 801ecbc:	49c6      	ldr	r1, [pc, #792]	@ (801efd8 <USB_ActivateEndpoint+0x6b4>)
 801ecbe:	430a      	orrs	r2, r1
 801ecc0:	b292      	uxth	r2, r2
 801ecc2:	801a      	strh	r2, [r3, #0]
 801ecc4:	e1c2      	b.n	801f04c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801ecc6:	687a      	ldr	r2, [r7, #4]
 801ecc8:	683b      	ldr	r3, [r7, #0]
 801ecca:	781b      	ldrb	r3, [r3, #0]
 801eccc:	009b      	lsls	r3, r3, #2
 801ecce:	18d3      	adds	r3, r2, r3
 801ecd0:	881b      	ldrh	r3, [r3, #0]
 801ecd2:	b29a      	uxth	r2, r3
 801ecd4:	201e      	movs	r0, #30
 801ecd6:	183b      	adds	r3, r7, r0
 801ecd8:	49be      	ldr	r1, [pc, #760]	@ (801efd4 <USB_ActivateEndpoint+0x6b0>)
 801ecda:	400a      	ands	r2, r1
 801ecdc:	801a      	strh	r2, [r3, #0]
 801ecde:	183b      	adds	r3, r7, r0
 801ece0:	183a      	adds	r2, r7, r0
 801ece2:	8812      	ldrh	r2, [r2, #0]
 801ece4:	2180      	movs	r1, #128	@ 0x80
 801ece6:	0189      	lsls	r1, r1, #6
 801ece8:	404a      	eors	r2, r1
 801ecea:	801a      	strh	r2, [r3, #0]
 801ecec:	687a      	ldr	r2, [r7, #4]
 801ecee:	683b      	ldr	r3, [r7, #0]
 801ecf0:	781b      	ldrb	r3, [r3, #0]
 801ecf2:	009b      	lsls	r3, r3, #2
 801ecf4:	18d3      	adds	r3, r2, r3
 801ecf6:	183a      	adds	r2, r7, r0
 801ecf8:	8812      	ldrh	r2, [r2, #0]
 801ecfa:	49b7      	ldr	r1, [pc, #732]	@ (801efd8 <USB_ActivateEndpoint+0x6b4>)
 801ecfc:	430a      	orrs	r2, r1
 801ecfe:	b292      	uxth	r2, r2
 801ed00:	801a      	strh	r2, [r3, #0]
 801ed02:	e1a3      	b.n	801f04c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801ed04:	683b      	ldr	r3, [r7, #0]
 801ed06:	78db      	ldrb	r3, [r3, #3]
 801ed08:	2b02      	cmp	r3, #2
 801ed0a:	d117      	bne.n	801ed3c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801ed0c:	687a      	ldr	r2, [r7, #4]
 801ed0e:	683b      	ldr	r3, [r7, #0]
 801ed10:	781b      	ldrb	r3, [r3, #0]
 801ed12:	009b      	lsls	r3, r3, #2
 801ed14:	18d3      	adds	r3, r2, r3
 801ed16:	881b      	ldrh	r3, [r3, #0]
 801ed18:	b29a      	uxth	r2, r3
 801ed1a:	2062      	movs	r0, #98	@ 0x62
 801ed1c:	183b      	adds	r3, r7, r0
 801ed1e:	49ab      	ldr	r1, [pc, #684]	@ (801efcc <USB_ActivateEndpoint+0x6a8>)
 801ed20:	400a      	ands	r2, r1
 801ed22:	801a      	strh	r2, [r3, #0]
 801ed24:	687a      	ldr	r2, [r7, #4]
 801ed26:	683b      	ldr	r3, [r7, #0]
 801ed28:	781b      	ldrb	r3, [r3, #0]
 801ed2a:	009b      	lsls	r3, r3, #2
 801ed2c:	18d3      	adds	r3, r2, r3
 801ed2e:	183a      	adds	r2, r7, r0
 801ed30:	8812      	ldrh	r2, [r2, #0]
 801ed32:	49aa      	ldr	r1, [pc, #680]	@ (801efdc <USB_ActivateEndpoint+0x6b8>)
 801ed34:	430a      	orrs	r2, r1
 801ed36:	b292      	uxth	r2, r2
 801ed38:	801a      	strh	r2, [r3, #0]
 801ed3a:	e016      	b.n	801ed6a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801ed3c:	687a      	ldr	r2, [r7, #4]
 801ed3e:	683b      	ldr	r3, [r7, #0]
 801ed40:	781b      	ldrb	r3, [r3, #0]
 801ed42:	009b      	lsls	r3, r3, #2
 801ed44:	18d3      	adds	r3, r2, r3
 801ed46:	881b      	ldrh	r3, [r3, #0]
 801ed48:	b29a      	uxth	r2, r3
 801ed4a:	2064      	movs	r0, #100	@ 0x64
 801ed4c:	183b      	adds	r3, r7, r0
 801ed4e:	49a4      	ldr	r1, [pc, #656]	@ (801efe0 <USB_ActivateEndpoint+0x6bc>)
 801ed50:	400a      	ands	r2, r1
 801ed52:	801a      	strh	r2, [r3, #0]
 801ed54:	687a      	ldr	r2, [r7, #4]
 801ed56:	683b      	ldr	r3, [r7, #0]
 801ed58:	781b      	ldrb	r3, [r3, #0]
 801ed5a:	009b      	lsls	r3, r3, #2
 801ed5c:	18d3      	adds	r3, r2, r3
 801ed5e:	183a      	adds	r2, r7, r0
 801ed60:	8812      	ldrh	r2, [r2, #0]
 801ed62:	499d      	ldr	r1, [pc, #628]	@ (801efd8 <USB_ActivateEndpoint+0x6b4>)
 801ed64:	430a      	orrs	r2, r1
 801ed66:	b292      	uxth	r2, r2
 801ed68:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	2250      	movs	r2, #80	@ 0x50
 801ed72:	5a9b      	ldrh	r3, [r3, r2]
 801ed74:	b29b      	uxth	r3, r3
 801ed76:	001a      	movs	r2, r3
 801ed78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ed7a:	189b      	adds	r3, r3, r2
 801ed7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ed7e:	683b      	ldr	r3, [r7, #0]
 801ed80:	781b      	ldrb	r3, [r3, #0]
 801ed82:	00da      	lsls	r2, r3, #3
 801ed84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ed86:	18d3      	adds	r3, r2, r3
 801ed88:	2280      	movs	r2, #128	@ 0x80
 801ed8a:	00d2      	lsls	r2, r2, #3
 801ed8c:	4694      	mov	ip, r2
 801ed8e:	4463      	add	r3, ip
 801ed90:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ed92:	683b      	ldr	r3, [r7, #0]
 801ed94:	891b      	ldrh	r3, [r3, #8]
 801ed96:	085b      	lsrs	r3, r3, #1
 801ed98:	b29b      	uxth	r3, r3
 801ed9a:	18db      	adds	r3, r3, r3
 801ed9c:	b29a      	uxth	r2, r3
 801ed9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801eda0:	801a      	strh	r2, [r3, #0]
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	657b      	str	r3, [r7, #84]	@ 0x54
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	2250      	movs	r2, #80	@ 0x50
 801edaa:	5a9b      	ldrh	r3, [r3, r2]
 801edac:	b29b      	uxth	r3, r3
 801edae:	001a      	movs	r2, r3
 801edb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801edb2:	189b      	adds	r3, r3, r2
 801edb4:	657b      	str	r3, [r7, #84]	@ 0x54
 801edb6:	683b      	ldr	r3, [r7, #0]
 801edb8:	781b      	ldrb	r3, [r3, #0]
 801edba:	00da      	lsls	r2, r3, #3
 801edbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801edbe:	18d3      	adds	r3, r2, r3
 801edc0:	4a88      	ldr	r2, [pc, #544]	@ (801efe4 <USB_ActivateEndpoint+0x6c0>)
 801edc2:	4694      	mov	ip, r2
 801edc4:	4463      	add	r3, ip
 801edc6:	653b      	str	r3, [r7, #80]	@ 0x50
 801edc8:	683b      	ldr	r3, [r7, #0]
 801edca:	895b      	ldrh	r3, [r3, #10]
 801edcc:	085b      	lsrs	r3, r3, #1
 801edce:	b29b      	uxth	r3, r3
 801edd0:	18db      	adds	r3, r3, r3
 801edd2:	b29a      	uxth	r2, r3
 801edd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801edd6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801edd8:	683b      	ldr	r3, [r7, #0]
 801edda:	785b      	ldrb	r3, [r3, #1]
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d000      	beq.n	801ede2 <USB_ActivateEndpoint+0x4be>
 801ede0:	e087      	b.n	801eef2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ede2:	687a      	ldr	r2, [r7, #4]
 801ede4:	683b      	ldr	r3, [r7, #0]
 801ede6:	781b      	ldrb	r3, [r3, #0]
 801ede8:	009b      	lsls	r3, r3, #2
 801edea:	18d2      	adds	r2, r2, r3
 801edec:	2140      	movs	r1, #64	@ 0x40
 801edee:	187b      	adds	r3, r7, r1
 801edf0:	8812      	ldrh	r2, [r2, #0]
 801edf2:	801a      	strh	r2, [r3, #0]
 801edf4:	187b      	adds	r3, r7, r1
 801edf6:	881a      	ldrh	r2, [r3, #0]
 801edf8:	2380      	movs	r3, #128	@ 0x80
 801edfa:	01db      	lsls	r3, r3, #7
 801edfc:	4013      	ands	r3, r2
 801edfe:	d016      	beq.n	801ee2e <USB_ActivateEndpoint+0x50a>
 801ee00:	687a      	ldr	r2, [r7, #4]
 801ee02:	683b      	ldr	r3, [r7, #0]
 801ee04:	781b      	ldrb	r3, [r3, #0]
 801ee06:	009b      	lsls	r3, r3, #2
 801ee08:	18d3      	adds	r3, r2, r3
 801ee0a:	881b      	ldrh	r3, [r3, #0]
 801ee0c:	b29a      	uxth	r2, r3
 801ee0e:	203e      	movs	r0, #62	@ 0x3e
 801ee10:	183b      	adds	r3, r7, r0
 801ee12:	496e      	ldr	r1, [pc, #440]	@ (801efcc <USB_ActivateEndpoint+0x6a8>)
 801ee14:	400a      	ands	r2, r1
 801ee16:	801a      	strh	r2, [r3, #0]
 801ee18:	687a      	ldr	r2, [r7, #4]
 801ee1a:	683b      	ldr	r3, [r7, #0]
 801ee1c:	781b      	ldrb	r3, [r3, #0]
 801ee1e:	009b      	lsls	r3, r3, #2
 801ee20:	18d3      	adds	r3, r2, r3
 801ee22:	183a      	adds	r2, r7, r0
 801ee24:	8812      	ldrh	r2, [r2, #0]
 801ee26:	496a      	ldr	r1, [pc, #424]	@ (801efd0 <USB_ActivateEndpoint+0x6ac>)
 801ee28:	430a      	orrs	r2, r1
 801ee2a:	b292      	uxth	r2, r2
 801ee2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ee2e:	687a      	ldr	r2, [r7, #4]
 801ee30:	683b      	ldr	r3, [r7, #0]
 801ee32:	781b      	ldrb	r3, [r3, #0]
 801ee34:	009b      	lsls	r3, r3, #2
 801ee36:	18d2      	adds	r2, r2, r3
 801ee38:	213c      	movs	r1, #60	@ 0x3c
 801ee3a:	187b      	adds	r3, r7, r1
 801ee3c:	8812      	ldrh	r2, [r2, #0]
 801ee3e:	801a      	strh	r2, [r3, #0]
 801ee40:	187b      	adds	r3, r7, r1
 801ee42:	881b      	ldrh	r3, [r3, #0]
 801ee44:	2240      	movs	r2, #64	@ 0x40
 801ee46:	4013      	ands	r3, r2
 801ee48:	d016      	beq.n	801ee78 <USB_ActivateEndpoint+0x554>
 801ee4a:	687a      	ldr	r2, [r7, #4]
 801ee4c:	683b      	ldr	r3, [r7, #0]
 801ee4e:	781b      	ldrb	r3, [r3, #0]
 801ee50:	009b      	lsls	r3, r3, #2
 801ee52:	18d3      	adds	r3, r2, r3
 801ee54:	881b      	ldrh	r3, [r3, #0]
 801ee56:	b29a      	uxth	r2, r3
 801ee58:	203a      	movs	r0, #58	@ 0x3a
 801ee5a:	183b      	adds	r3, r7, r0
 801ee5c:	495b      	ldr	r1, [pc, #364]	@ (801efcc <USB_ActivateEndpoint+0x6a8>)
 801ee5e:	400a      	ands	r2, r1
 801ee60:	801a      	strh	r2, [r3, #0]
 801ee62:	687a      	ldr	r2, [r7, #4]
 801ee64:	683b      	ldr	r3, [r7, #0]
 801ee66:	781b      	ldrb	r3, [r3, #0]
 801ee68:	009b      	lsls	r3, r3, #2
 801ee6a:	18d3      	adds	r3, r2, r3
 801ee6c:	183a      	adds	r2, r7, r0
 801ee6e:	8812      	ldrh	r2, [r2, #0]
 801ee70:	495d      	ldr	r1, [pc, #372]	@ (801efe8 <USB_ActivateEndpoint+0x6c4>)
 801ee72:	430a      	orrs	r2, r1
 801ee74:	b292      	uxth	r2, r2
 801ee76:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ee78:	687a      	ldr	r2, [r7, #4]
 801ee7a:	683b      	ldr	r3, [r7, #0]
 801ee7c:	781b      	ldrb	r3, [r3, #0]
 801ee7e:	009b      	lsls	r3, r3, #2
 801ee80:	18d3      	adds	r3, r2, r3
 801ee82:	881b      	ldrh	r3, [r3, #0]
 801ee84:	b29a      	uxth	r2, r3
 801ee86:	2038      	movs	r0, #56	@ 0x38
 801ee88:	183b      	adds	r3, r7, r0
 801ee8a:	4952      	ldr	r1, [pc, #328]	@ (801efd4 <USB_ActivateEndpoint+0x6b0>)
 801ee8c:	400a      	ands	r2, r1
 801ee8e:	801a      	strh	r2, [r3, #0]
 801ee90:	183b      	adds	r3, r7, r0
 801ee92:	183a      	adds	r2, r7, r0
 801ee94:	8812      	ldrh	r2, [r2, #0]
 801ee96:	2180      	movs	r1, #128	@ 0x80
 801ee98:	0149      	lsls	r1, r1, #5
 801ee9a:	404a      	eors	r2, r1
 801ee9c:	801a      	strh	r2, [r3, #0]
 801ee9e:	183b      	adds	r3, r7, r0
 801eea0:	183a      	adds	r2, r7, r0
 801eea2:	8812      	ldrh	r2, [r2, #0]
 801eea4:	2180      	movs	r1, #128	@ 0x80
 801eea6:	0189      	lsls	r1, r1, #6
 801eea8:	404a      	eors	r2, r1
 801eeaa:	801a      	strh	r2, [r3, #0]
 801eeac:	687a      	ldr	r2, [r7, #4]
 801eeae:	683b      	ldr	r3, [r7, #0]
 801eeb0:	781b      	ldrb	r3, [r3, #0]
 801eeb2:	009b      	lsls	r3, r3, #2
 801eeb4:	18d3      	adds	r3, r2, r3
 801eeb6:	183a      	adds	r2, r7, r0
 801eeb8:	8812      	ldrh	r2, [r2, #0]
 801eeba:	4947      	ldr	r1, [pc, #284]	@ (801efd8 <USB_ActivateEndpoint+0x6b4>)
 801eebc:	430a      	orrs	r2, r1
 801eebe:	b292      	uxth	r2, r2
 801eec0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801eec2:	687a      	ldr	r2, [r7, #4]
 801eec4:	683b      	ldr	r3, [r7, #0]
 801eec6:	781b      	ldrb	r3, [r3, #0]
 801eec8:	009b      	lsls	r3, r3, #2
 801eeca:	18d3      	adds	r3, r2, r3
 801eecc:	881b      	ldrh	r3, [r3, #0]
 801eece:	b29a      	uxth	r2, r3
 801eed0:	2036      	movs	r0, #54	@ 0x36
 801eed2:	183b      	adds	r3, r7, r0
 801eed4:	4945      	ldr	r1, [pc, #276]	@ (801efec <USB_ActivateEndpoint+0x6c8>)
 801eed6:	400a      	ands	r2, r1
 801eed8:	801a      	strh	r2, [r3, #0]
 801eeda:	687a      	ldr	r2, [r7, #4]
 801eedc:	683b      	ldr	r3, [r7, #0]
 801eede:	781b      	ldrb	r3, [r3, #0]
 801eee0:	009b      	lsls	r3, r3, #2
 801eee2:	18d3      	adds	r3, r2, r3
 801eee4:	183a      	adds	r2, r7, r0
 801eee6:	8812      	ldrh	r2, [r2, #0]
 801eee8:	493b      	ldr	r1, [pc, #236]	@ (801efd8 <USB_ActivateEndpoint+0x6b4>)
 801eeea:	430a      	orrs	r2, r1
 801eeec:	b292      	uxth	r2, r2
 801eeee:	801a      	strh	r2, [r3, #0]
 801eef0:	e0ac      	b.n	801f04c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801eef2:	687a      	ldr	r2, [r7, #4]
 801eef4:	683b      	ldr	r3, [r7, #0]
 801eef6:	781b      	ldrb	r3, [r3, #0]
 801eef8:	009b      	lsls	r3, r3, #2
 801eefa:	18d2      	adds	r2, r2, r3
 801eefc:	214e      	movs	r1, #78	@ 0x4e
 801eefe:	187b      	adds	r3, r7, r1
 801ef00:	8812      	ldrh	r2, [r2, #0]
 801ef02:	801a      	strh	r2, [r3, #0]
 801ef04:	187b      	adds	r3, r7, r1
 801ef06:	881a      	ldrh	r2, [r3, #0]
 801ef08:	2380      	movs	r3, #128	@ 0x80
 801ef0a:	01db      	lsls	r3, r3, #7
 801ef0c:	4013      	ands	r3, r2
 801ef0e:	d016      	beq.n	801ef3e <USB_ActivateEndpoint+0x61a>
 801ef10:	687a      	ldr	r2, [r7, #4]
 801ef12:	683b      	ldr	r3, [r7, #0]
 801ef14:	781b      	ldrb	r3, [r3, #0]
 801ef16:	009b      	lsls	r3, r3, #2
 801ef18:	18d3      	adds	r3, r2, r3
 801ef1a:	881b      	ldrh	r3, [r3, #0]
 801ef1c:	b29a      	uxth	r2, r3
 801ef1e:	204c      	movs	r0, #76	@ 0x4c
 801ef20:	183b      	adds	r3, r7, r0
 801ef22:	492a      	ldr	r1, [pc, #168]	@ (801efcc <USB_ActivateEndpoint+0x6a8>)
 801ef24:	400a      	ands	r2, r1
 801ef26:	801a      	strh	r2, [r3, #0]
 801ef28:	687a      	ldr	r2, [r7, #4]
 801ef2a:	683b      	ldr	r3, [r7, #0]
 801ef2c:	781b      	ldrb	r3, [r3, #0]
 801ef2e:	009b      	lsls	r3, r3, #2
 801ef30:	18d3      	adds	r3, r2, r3
 801ef32:	183a      	adds	r2, r7, r0
 801ef34:	8812      	ldrh	r2, [r2, #0]
 801ef36:	4926      	ldr	r1, [pc, #152]	@ (801efd0 <USB_ActivateEndpoint+0x6ac>)
 801ef38:	430a      	orrs	r2, r1
 801ef3a:	b292      	uxth	r2, r2
 801ef3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ef3e:	687a      	ldr	r2, [r7, #4]
 801ef40:	683b      	ldr	r3, [r7, #0]
 801ef42:	781b      	ldrb	r3, [r3, #0]
 801ef44:	009b      	lsls	r3, r3, #2
 801ef46:	18d2      	adds	r2, r2, r3
 801ef48:	214a      	movs	r1, #74	@ 0x4a
 801ef4a:	187b      	adds	r3, r7, r1
 801ef4c:	8812      	ldrh	r2, [r2, #0]
 801ef4e:	801a      	strh	r2, [r3, #0]
 801ef50:	187b      	adds	r3, r7, r1
 801ef52:	881b      	ldrh	r3, [r3, #0]
 801ef54:	2240      	movs	r2, #64	@ 0x40
 801ef56:	4013      	ands	r3, r2
 801ef58:	d016      	beq.n	801ef88 <USB_ActivateEndpoint+0x664>
 801ef5a:	687a      	ldr	r2, [r7, #4]
 801ef5c:	683b      	ldr	r3, [r7, #0]
 801ef5e:	781b      	ldrb	r3, [r3, #0]
 801ef60:	009b      	lsls	r3, r3, #2
 801ef62:	18d3      	adds	r3, r2, r3
 801ef64:	881b      	ldrh	r3, [r3, #0]
 801ef66:	b29a      	uxth	r2, r3
 801ef68:	2048      	movs	r0, #72	@ 0x48
 801ef6a:	183b      	adds	r3, r7, r0
 801ef6c:	4917      	ldr	r1, [pc, #92]	@ (801efcc <USB_ActivateEndpoint+0x6a8>)
 801ef6e:	400a      	ands	r2, r1
 801ef70:	801a      	strh	r2, [r3, #0]
 801ef72:	687a      	ldr	r2, [r7, #4]
 801ef74:	683b      	ldr	r3, [r7, #0]
 801ef76:	781b      	ldrb	r3, [r3, #0]
 801ef78:	009b      	lsls	r3, r3, #2
 801ef7a:	18d3      	adds	r3, r2, r3
 801ef7c:	183a      	adds	r2, r7, r0
 801ef7e:	8812      	ldrh	r2, [r2, #0]
 801ef80:	4919      	ldr	r1, [pc, #100]	@ (801efe8 <USB_ActivateEndpoint+0x6c4>)
 801ef82:	430a      	orrs	r2, r1
 801ef84:	b292      	uxth	r2, r2
 801ef86:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ef88:	683b      	ldr	r3, [r7, #0]
 801ef8a:	78db      	ldrb	r3, [r3, #3]
 801ef8c:	2b01      	cmp	r3, #1
 801ef8e:	d02f      	beq.n	801eff0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ef90:	687a      	ldr	r2, [r7, #4]
 801ef92:	683b      	ldr	r3, [r7, #0]
 801ef94:	781b      	ldrb	r3, [r3, #0]
 801ef96:	009b      	lsls	r3, r3, #2
 801ef98:	18d3      	adds	r3, r2, r3
 801ef9a:	881b      	ldrh	r3, [r3, #0]
 801ef9c:	b29a      	uxth	r2, r3
 801ef9e:	2044      	movs	r0, #68	@ 0x44
 801efa0:	183b      	adds	r3, r7, r0
 801efa2:	4912      	ldr	r1, [pc, #72]	@ (801efec <USB_ActivateEndpoint+0x6c8>)
 801efa4:	400a      	ands	r2, r1
 801efa6:	801a      	strh	r2, [r3, #0]
 801efa8:	183b      	adds	r3, r7, r0
 801efaa:	183a      	adds	r2, r7, r0
 801efac:	8812      	ldrh	r2, [r2, #0]
 801efae:	2120      	movs	r1, #32
 801efb0:	404a      	eors	r2, r1
 801efb2:	801a      	strh	r2, [r3, #0]
 801efb4:	687a      	ldr	r2, [r7, #4]
 801efb6:	683b      	ldr	r3, [r7, #0]
 801efb8:	781b      	ldrb	r3, [r3, #0]
 801efba:	009b      	lsls	r3, r3, #2
 801efbc:	18d3      	adds	r3, r2, r3
 801efbe:	183a      	adds	r2, r7, r0
 801efc0:	8812      	ldrh	r2, [r2, #0]
 801efc2:	4905      	ldr	r1, [pc, #20]	@ (801efd8 <USB_ActivateEndpoint+0x6b4>)
 801efc4:	430a      	orrs	r2, r1
 801efc6:	b292      	uxth	r2, r2
 801efc8:	801a      	strh	r2, [r3, #0]
 801efca:	e028      	b.n	801f01e <USB_ActivateEndpoint+0x6fa>
 801efcc:	ffff8f8f 	.word	0xffff8f8f
 801efd0:	ffffc080 	.word	0xffffc080
 801efd4:	ffffbf8f 	.word	0xffffbf8f
 801efd8:	ffff8080 	.word	0xffff8080
 801efdc:	ffff8180 	.word	0xffff8180
 801efe0:	ffff8e8f 	.word	0xffff8e8f
 801efe4:	00000404 	.word	0x00000404
 801efe8:	ffff80c0 	.word	0xffff80c0
 801efec:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801eff0:	687a      	ldr	r2, [r7, #4]
 801eff2:	683b      	ldr	r3, [r7, #0]
 801eff4:	781b      	ldrb	r3, [r3, #0]
 801eff6:	009b      	lsls	r3, r3, #2
 801eff8:	18d3      	adds	r3, r2, r3
 801effa:	881b      	ldrh	r3, [r3, #0]
 801effc:	b29a      	uxth	r2, r3
 801effe:	2046      	movs	r0, #70	@ 0x46
 801f000:	183b      	adds	r3, r7, r0
 801f002:	4916      	ldr	r1, [pc, #88]	@ (801f05c <USB_ActivateEndpoint+0x738>)
 801f004:	400a      	ands	r2, r1
 801f006:	801a      	strh	r2, [r3, #0]
 801f008:	687a      	ldr	r2, [r7, #4]
 801f00a:	683b      	ldr	r3, [r7, #0]
 801f00c:	781b      	ldrb	r3, [r3, #0]
 801f00e:	009b      	lsls	r3, r3, #2
 801f010:	18d3      	adds	r3, r2, r3
 801f012:	183a      	adds	r2, r7, r0
 801f014:	8812      	ldrh	r2, [r2, #0]
 801f016:	4912      	ldr	r1, [pc, #72]	@ (801f060 <USB_ActivateEndpoint+0x73c>)
 801f018:	430a      	orrs	r2, r1
 801f01a:	b292      	uxth	r2, r2
 801f01c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f01e:	687a      	ldr	r2, [r7, #4]
 801f020:	683b      	ldr	r3, [r7, #0]
 801f022:	781b      	ldrb	r3, [r3, #0]
 801f024:	009b      	lsls	r3, r3, #2
 801f026:	18d3      	adds	r3, r2, r3
 801f028:	881b      	ldrh	r3, [r3, #0]
 801f02a:	b29a      	uxth	r2, r3
 801f02c:	2042      	movs	r0, #66	@ 0x42
 801f02e:	183b      	adds	r3, r7, r0
 801f030:	490c      	ldr	r1, [pc, #48]	@ (801f064 <USB_ActivateEndpoint+0x740>)
 801f032:	400a      	ands	r2, r1
 801f034:	801a      	strh	r2, [r3, #0]
 801f036:	687a      	ldr	r2, [r7, #4]
 801f038:	683b      	ldr	r3, [r7, #0]
 801f03a:	781b      	ldrb	r3, [r3, #0]
 801f03c:	009b      	lsls	r3, r3, #2
 801f03e:	18d3      	adds	r3, r2, r3
 801f040:	183a      	adds	r2, r7, r0
 801f042:	8812      	ldrh	r2, [r2, #0]
 801f044:	4906      	ldr	r1, [pc, #24]	@ (801f060 <USB_ActivateEndpoint+0x73c>)
 801f046:	430a      	orrs	r2, r1
 801f048:	b292      	uxth	r2, r2
 801f04a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801f04c:	236f      	movs	r3, #111	@ 0x6f
 801f04e:	18fb      	adds	r3, r7, r3
 801f050:	781b      	ldrb	r3, [r3, #0]
}
 801f052:	0018      	movs	r0, r3
 801f054:	46bd      	mov	sp, r7
 801f056:	b01c      	add	sp, #112	@ 0x70
 801f058:	bd80      	pop	{r7, pc}
 801f05a:	46c0      	nop			@ (mov r8, r8)
 801f05c:	ffff8fbf 	.word	0xffff8fbf
 801f060:	ffff8080 	.word	0xffff8080
 801f064:	ffffbf8f 	.word	0xffffbf8f

0801f068 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f068:	b580      	push	{r7, lr}
 801f06a:	b08c      	sub	sp, #48	@ 0x30
 801f06c:	af00      	add	r7, sp, #0
 801f06e:	6078      	str	r0, [r7, #4]
 801f070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801f072:	683b      	ldr	r3, [r7, #0]
 801f074:	7b1b      	ldrb	r3, [r3, #12]
 801f076:	2b00      	cmp	r3, #0
 801f078:	d000      	beq.n	801f07c <USB_DeactivateEndpoint+0x14>
 801f07a:	e07e      	b.n	801f17a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801f07c:	683b      	ldr	r3, [r7, #0]
 801f07e:	785b      	ldrb	r3, [r3, #1]
 801f080:	2b00      	cmp	r3, #0
 801f082:	d03c      	beq.n	801f0fe <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f084:	687a      	ldr	r2, [r7, #4]
 801f086:	683b      	ldr	r3, [r7, #0]
 801f088:	781b      	ldrb	r3, [r3, #0]
 801f08a:	009b      	lsls	r3, r3, #2
 801f08c:	18d2      	adds	r2, r2, r3
 801f08e:	210c      	movs	r1, #12
 801f090:	187b      	adds	r3, r7, r1
 801f092:	8812      	ldrh	r2, [r2, #0]
 801f094:	801a      	strh	r2, [r3, #0]
 801f096:	187b      	adds	r3, r7, r1
 801f098:	881b      	ldrh	r3, [r3, #0]
 801f09a:	2240      	movs	r2, #64	@ 0x40
 801f09c:	4013      	ands	r3, r2
 801f09e:	d016      	beq.n	801f0ce <USB_DeactivateEndpoint+0x66>
 801f0a0:	687a      	ldr	r2, [r7, #4]
 801f0a2:	683b      	ldr	r3, [r7, #0]
 801f0a4:	781b      	ldrb	r3, [r3, #0]
 801f0a6:	009b      	lsls	r3, r3, #2
 801f0a8:	18d3      	adds	r3, r2, r3
 801f0aa:	881b      	ldrh	r3, [r3, #0]
 801f0ac:	b29a      	uxth	r2, r3
 801f0ae:	200a      	movs	r0, #10
 801f0b0:	183b      	adds	r3, r7, r0
 801f0b2:	49c7      	ldr	r1, [pc, #796]	@ (801f3d0 <USB_DeactivateEndpoint+0x368>)
 801f0b4:	400a      	ands	r2, r1
 801f0b6:	801a      	strh	r2, [r3, #0]
 801f0b8:	687a      	ldr	r2, [r7, #4]
 801f0ba:	683b      	ldr	r3, [r7, #0]
 801f0bc:	781b      	ldrb	r3, [r3, #0]
 801f0be:	009b      	lsls	r3, r3, #2
 801f0c0:	18d3      	adds	r3, r2, r3
 801f0c2:	183a      	adds	r2, r7, r0
 801f0c4:	8812      	ldrh	r2, [r2, #0]
 801f0c6:	49c3      	ldr	r1, [pc, #780]	@ (801f3d4 <USB_DeactivateEndpoint+0x36c>)
 801f0c8:	430a      	orrs	r2, r1
 801f0ca:	b292      	uxth	r2, r2
 801f0cc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f0ce:	687a      	ldr	r2, [r7, #4]
 801f0d0:	683b      	ldr	r3, [r7, #0]
 801f0d2:	781b      	ldrb	r3, [r3, #0]
 801f0d4:	009b      	lsls	r3, r3, #2
 801f0d6:	18d3      	adds	r3, r2, r3
 801f0d8:	881b      	ldrh	r3, [r3, #0]
 801f0da:	b29a      	uxth	r2, r3
 801f0dc:	2008      	movs	r0, #8
 801f0de:	183b      	adds	r3, r7, r0
 801f0e0:	49bd      	ldr	r1, [pc, #756]	@ (801f3d8 <USB_DeactivateEndpoint+0x370>)
 801f0e2:	400a      	ands	r2, r1
 801f0e4:	801a      	strh	r2, [r3, #0]
 801f0e6:	687a      	ldr	r2, [r7, #4]
 801f0e8:	683b      	ldr	r3, [r7, #0]
 801f0ea:	781b      	ldrb	r3, [r3, #0]
 801f0ec:	009b      	lsls	r3, r3, #2
 801f0ee:	18d3      	adds	r3, r2, r3
 801f0f0:	183a      	adds	r2, r7, r0
 801f0f2:	8812      	ldrh	r2, [r2, #0]
 801f0f4:	49b9      	ldr	r1, [pc, #740]	@ (801f3dc <USB_DeactivateEndpoint+0x374>)
 801f0f6:	430a      	orrs	r2, r1
 801f0f8:	b292      	uxth	r2, r2
 801f0fa:	801a      	strh	r2, [r3, #0]
 801f0fc:	e163      	b.n	801f3c6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f0fe:	687a      	ldr	r2, [r7, #4]
 801f100:	683b      	ldr	r3, [r7, #0]
 801f102:	781b      	ldrb	r3, [r3, #0]
 801f104:	009b      	lsls	r3, r3, #2
 801f106:	18d2      	adds	r2, r2, r3
 801f108:	2112      	movs	r1, #18
 801f10a:	187b      	adds	r3, r7, r1
 801f10c:	8812      	ldrh	r2, [r2, #0]
 801f10e:	801a      	strh	r2, [r3, #0]
 801f110:	187b      	adds	r3, r7, r1
 801f112:	881a      	ldrh	r2, [r3, #0]
 801f114:	2380      	movs	r3, #128	@ 0x80
 801f116:	01db      	lsls	r3, r3, #7
 801f118:	4013      	ands	r3, r2
 801f11a:	d016      	beq.n	801f14a <USB_DeactivateEndpoint+0xe2>
 801f11c:	687a      	ldr	r2, [r7, #4]
 801f11e:	683b      	ldr	r3, [r7, #0]
 801f120:	781b      	ldrb	r3, [r3, #0]
 801f122:	009b      	lsls	r3, r3, #2
 801f124:	18d3      	adds	r3, r2, r3
 801f126:	881b      	ldrh	r3, [r3, #0]
 801f128:	b29a      	uxth	r2, r3
 801f12a:	2010      	movs	r0, #16
 801f12c:	183b      	adds	r3, r7, r0
 801f12e:	49a8      	ldr	r1, [pc, #672]	@ (801f3d0 <USB_DeactivateEndpoint+0x368>)
 801f130:	400a      	ands	r2, r1
 801f132:	801a      	strh	r2, [r3, #0]
 801f134:	687a      	ldr	r2, [r7, #4]
 801f136:	683b      	ldr	r3, [r7, #0]
 801f138:	781b      	ldrb	r3, [r3, #0]
 801f13a:	009b      	lsls	r3, r3, #2
 801f13c:	18d3      	adds	r3, r2, r3
 801f13e:	183a      	adds	r2, r7, r0
 801f140:	8812      	ldrh	r2, [r2, #0]
 801f142:	49a7      	ldr	r1, [pc, #668]	@ (801f3e0 <USB_DeactivateEndpoint+0x378>)
 801f144:	430a      	orrs	r2, r1
 801f146:	b292      	uxth	r2, r2
 801f148:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f14a:	687a      	ldr	r2, [r7, #4]
 801f14c:	683b      	ldr	r3, [r7, #0]
 801f14e:	781b      	ldrb	r3, [r3, #0]
 801f150:	009b      	lsls	r3, r3, #2
 801f152:	18d3      	adds	r3, r2, r3
 801f154:	881b      	ldrh	r3, [r3, #0]
 801f156:	b29a      	uxth	r2, r3
 801f158:	200e      	movs	r0, #14
 801f15a:	183b      	adds	r3, r7, r0
 801f15c:	49a1      	ldr	r1, [pc, #644]	@ (801f3e4 <USB_DeactivateEndpoint+0x37c>)
 801f15e:	400a      	ands	r2, r1
 801f160:	801a      	strh	r2, [r3, #0]
 801f162:	687a      	ldr	r2, [r7, #4]
 801f164:	683b      	ldr	r3, [r7, #0]
 801f166:	781b      	ldrb	r3, [r3, #0]
 801f168:	009b      	lsls	r3, r3, #2
 801f16a:	18d3      	adds	r3, r2, r3
 801f16c:	183a      	adds	r2, r7, r0
 801f16e:	8812      	ldrh	r2, [r2, #0]
 801f170:	499a      	ldr	r1, [pc, #616]	@ (801f3dc <USB_DeactivateEndpoint+0x374>)
 801f172:	430a      	orrs	r2, r1
 801f174:	b292      	uxth	r2, r2
 801f176:	801a      	strh	r2, [r3, #0]
 801f178:	e125      	b.n	801f3c6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801f17a:	683b      	ldr	r3, [r7, #0]
 801f17c:	785b      	ldrb	r3, [r3, #1]
 801f17e:	2b00      	cmp	r3, #0
 801f180:	d000      	beq.n	801f184 <USB_DeactivateEndpoint+0x11c>
 801f182:	e090      	b.n	801f2a6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f184:	687a      	ldr	r2, [r7, #4]
 801f186:	683b      	ldr	r3, [r7, #0]
 801f188:	781b      	ldrb	r3, [r3, #0]
 801f18a:	009b      	lsls	r3, r3, #2
 801f18c:	18d2      	adds	r2, r2, r3
 801f18e:	2120      	movs	r1, #32
 801f190:	187b      	adds	r3, r7, r1
 801f192:	8812      	ldrh	r2, [r2, #0]
 801f194:	801a      	strh	r2, [r3, #0]
 801f196:	187b      	adds	r3, r7, r1
 801f198:	881a      	ldrh	r2, [r3, #0]
 801f19a:	2380      	movs	r3, #128	@ 0x80
 801f19c:	01db      	lsls	r3, r3, #7
 801f19e:	4013      	ands	r3, r2
 801f1a0:	d016      	beq.n	801f1d0 <USB_DeactivateEndpoint+0x168>
 801f1a2:	687a      	ldr	r2, [r7, #4]
 801f1a4:	683b      	ldr	r3, [r7, #0]
 801f1a6:	781b      	ldrb	r3, [r3, #0]
 801f1a8:	009b      	lsls	r3, r3, #2
 801f1aa:	18d3      	adds	r3, r2, r3
 801f1ac:	881b      	ldrh	r3, [r3, #0]
 801f1ae:	b29a      	uxth	r2, r3
 801f1b0:	201e      	movs	r0, #30
 801f1b2:	183b      	adds	r3, r7, r0
 801f1b4:	4986      	ldr	r1, [pc, #536]	@ (801f3d0 <USB_DeactivateEndpoint+0x368>)
 801f1b6:	400a      	ands	r2, r1
 801f1b8:	801a      	strh	r2, [r3, #0]
 801f1ba:	687a      	ldr	r2, [r7, #4]
 801f1bc:	683b      	ldr	r3, [r7, #0]
 801f1be:	781b      	ldrb	r3, [r3, #0]
 801f1c0:	009b      	lsls	r3, r3, #2
 801f1c2:	18d3      	adds	r3, r2, r3
 801f1c4:	183a      	adds	r2, r7, r0
 801f1c6:	8812      	ldrh	r2, [r2, #0]
 801f1c8:	4985      	ldr	r1, [pc, #532]	@ (801f3e0 <USB_DeactivateEndpoint+0x378>)
 801f1ca:	430a      	orrs	r2, r1
 801f1cc:	b292      	uxth	r2, r2
 801f1ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f1d0:	687a      	ldr	r2, [r7, #4]
 801f1d2:	683b      	ldr	r3, [r7, #0]
 801f1d4:	781b      	ldrb	r3, [r3, #0]
 801f1d6:	009b      	lsls	r3, r3, #2
 801f1d8:	18d2      	adds	r2, r2, r3
 801f1da:	211c      	movs	r1, #28
 801f1dc:	187b      	adds	r3, r7, r1
 801f1de:	8812      	ldrh	r2, [r2, #0]
 801f1e0:	801a      	strh	r2, [r3, #0]
 801f1e2:	187b      	adds	r3, r7, r1
 801f1e4:	881b      	ldrh	r3, [r3, #0]
 801f1e6:	2240      	movs	r2, #64	@ 0x40
 801f1e8:	4013      	ands	r3, r2
 801f1ea:	d016      	beq.n	801f21a <USB_DeactivateEndpoint+0x1b2>
 801f1ec:	687a      	ldr	r2, [r7, #4]
 801f1ee:	683b      	ldr	r3, [r7, #0]
 801f1f0:	781b      	ldrb	r3, [r3, #0]
 801f1f2:	009b      	lsls	r3, r3, #2
 801f1f4:	18d3      	adds	r3, r2, r3
 801f1f6:	881b      	ldrh	r3, [r3, #0]
 801f1f8:	b29a      	uxth	r2, r3
 801f1fa:	201a      	movs	r0, #26
 801f1fc:	183b      	adds	r3, r7, r0
 801f1fe:	4974      	ldr	r1, [pc, #464]	@ (801f3d0 <USB_DeactivateEndpoint+0x368>)
 801f200:	400a      	ands	r2, r1
 801f202:	801a      	strh	r2, [r3, #0]
 801f204:	687a      	ldr	r2, [r7, #4]
 801f206:	683b      	ldr	r3, [r7, #0]
 801f208:	781b      	ldrb	r3, [r3, #0]
 801f20a:	009b      	lsls	r3, r3, #2
 801f20c:	18d3      	adds	r3, r2, r3
 801f20e:	183a      	adds	r2, r7, r0
 801f210:	8812      	ldrh	r2, [r2, #0]
 801f212:	4970      	ldr	r1, [pc, #448]	@ (801f3d4 <USB_DeactivateEndpoint+0x36c>)
 801f214:	430a      	orrs	r2, r1
 801f216:	b292      	uxth	r2, r2
 801f218:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801f21a:	687a      	ldr	r2, [r7, #4]
 801f21c:	683b      	ldr	r3, [r7, #0]
 801f21e:	781b      	ldrb	r3, [r3, #0]
 801f220:	009b      	lsls	r3, r3, #2
 801f222:	18d3      	adds	r3, r2, r3
 801f224:	881b      	ldrh	r3, [r3, #0]
 801f226:	b29a      	uxth	r2, r3
 801f228:	2018      	movs	r0, #24
 801f22a:	183b      	adds	r3, r7, r0
 801f22c:	4968      	ldr	r1, [pc, #416]	@ (801f3d0 <USB_DeactivateEndpoint+0x368>)
 801f22e:	400a      	ands	r2, r1
 801f230:	801a      	strh	r2, [r3, #0]
 801f232:	687a      	ldr	r2, [r7, #4]
 801f234:	683b      	ldr	r3, [r7, #0]
 801f236:	781b      	ldrb	r3, [r3, #0]
 801f238:	009b      	lsls	r3, r3, #2
 801f23a:	18d3      	adds	r3, r2, r3
 801f23c:	183a      	adds	r2, r7, r0
 801f23e:	8812      	ldrh	r2, [r2, #0]
 801f240:	4964      	ldr	r1, [pc, #400]	@ (801f3d4 <USB_DeactivateEndpoint+0x36c>)
 801f242:	430a      	orrs	r2, r1
 801f244:	b292      	uxth	r2, r2
 801f246:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f248:	687a      	ldr	r2, [r7, #4]
 801f24a:	683b      	ldr	r3, [r7, #0]
 801f24c:	781b      	ldrb	r3, [r3, #0]
 801f24e:	009b      	lsls	r3, r3, #2
 801f250:	18d3      	adds	r3, r2, r3
 801f252:	881b      	ldrh	r3, [r3, #0]
 801f254:	b29a      	uxth	r2, r3
 801f256:	2016      	movs	r0, #22
 801f258:	183b      	adds	r3, r7, r0
 801f25a:	4962      	ldr	r1, [pc, #392]	@ (801f3e4 <USB_DeactivateEndpoint+0x37c>)
 801f25c:	400a      	ands	r2, r1
 801f25e:	801a      	strh	r2, [r3, #0]
 801f260:	687a      	ldr	r2, [r7, #4]
 801f262:	683b      	ldr	r3, [r7, #0]
 801f264:	781b      	ldrb	r3, [r3, #0]
 801f266:	009b      	lsls	r3, r3, #2
 801f268:	18d3      	adds	r3, r2, r3
 801f26a:	183a      	adds	r2, r7, r0
 801f26c:	8812      	ldrh	r2, [r2, #0]
 801f26e:	495b      	ldr	r1, [pc, #364]	@ (801f3dc <USB_DeactivateEndpoint+0x374>)
 801f270:	430a      	orrs	r2, r1
 801f272:	b292      	uxth	r2, r2
 801f274:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f276:	687a      	ldr	r2, [r7, #4]
 801f278:	683b      	ldr	r3, [r7, #0]
 801f27a:	781b      	ldrb	r3, [r3, #0]
 801f27c:	009b      	lsls	r3, r3, #2
 801f27e:	18d3      	adds	r3, r2, r3
 801f280:	881b      	ldrh	r3, [r3, #0]
 801f282:	b29a      	uxth	r2, r3
 801f284:	2014      	movs	r0, #20
 801f286:	183b      	adds	r3, r7, r0
 801f288:	4953      	ldr	r1, [pc, #332]	@ (801f3d8 <USB_DeactivateEndpoint+0x370>)
 801f28a:	400a      	ands	r2, r1
 801f28c:	801a      	strh	r2, [r3, #0]
 801f28e:	687a      	ldr	r2, [r7, #4]
 801f290:	683b      	ldr	r3, [r7, #0]
 801f292:	781b      	ldrb	r3, [r3, #0]
 801f294:	009b      	lsls	r3, r3, #2
 801f296:	18d3      	adds	r3, r2, r3
 801f298:	183a      	adds	r2, r7, r0
 801f29a:	8812      	ldrh	r2, [r2, #0]
 801f29c:	494f      	ldr	r1, [pc, #316]	@ (801f3dc <USB_DeactivateEndpoint+0x374>)
 801f29e:	430a      	orrs	r2, r1
 801f2a0:	b292      	uxth	r2, r2
 801f2a2:	801a      	strh	r2, [r3, #0]
 801f2a4:	e08f      	b.n	801f3c6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f2a6:	687a      	ldr	r2, [r7, #4]
 801f2a8:	683b      	ldr	r3, [r7, #0]
 801f2aa:	781b      	ldrb	r3, [r3, #0]
 801f2ac:	009b      	lsls	r3, r3, #2
 801f2ae:	18d2      	adds	r2, r2, r3
 801f2b0:	212e      	movs	r1, #46	@ 0x2e
 801f2b2:	187b      	adds	r3, r7, r1
 801f2b4:	8812      	ldrh	r2, [r2, #0]
 801f2b6:	801a      	strh	r2, [r3, #0]
 801f2b8:	187b      	adds	r3, r7, r1
 801f2ba:	881a      	ldrh	r2, [r3, #0]
 801f2bc:	2380      	movs	r3, #128	@ 0x80
 801f2be:	01db      	lsls	r3, r3, #7
 801f2c0:	4013      	ands	r3, r2
 801f2c2:	d016      	beq.n	801f2f2 <USB_DeactivateEndpoint+0x28a>
 801f2c4:	687a      	ldr	r2, [r7, #4]
 801f2c6:	683b      	ldr	r3, [r7, #0]
 801f2c8:	781b      	ldrb	r3, [r3, #0]
 801f2ca:	009b      	lsls	r3, r3, #2
 801f2cc:	18d3      	adds	r3, r2, r3
 801f2ce:	881b      	ldrh	r3, [r3, #0]
 801f2d0:	b29a      	uxth	r2, r3
 801f2d2:	202c      	movs	r0, #44	@ 0x2c
 801f2d4:	183b      	adds	r3, r7, r0
 801f2d6:	493e      	ldr	r1, [pc, #248]	@ (801f3d0 <USB_DeactivateEndpoint+0x368>)
 801f2d8:	400a      	ands	r2, r1
 801f2da:	801a      	strh	r2, [r3, #0]
 801f2dc:	687a      	ldr	r2, [r7, #4]
 801f2de:	683b      	ldr	r3, [r7, #0]
 801f2e0:	781b      	ldrb	r3, [r3, #0]
 801f2e2:	009b      	lsls	r3, r3, #2
 801f2e4:	18d3      	adds	r3, r2, r3
 801f2e6:	183a      	adds	r2, r7, r0
 801f2e8:	8812      	ldrh	r2, [r2, #0]
 801f2ea:	493d      	ldr	r1, [pc, #244]	@ (801f3e0 <USB_DeactivateEndpoint+0x378>)
 801f2ec:	430a      	orrs	r2, r1
 801f2ee:	b292      	uxth	r2, r2
 801f2f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f2f2:	687a      	ldr	r2, [r7, #4]
 801f2f4:	683b      	ldr	r3, [r7, #0]
 801f2f6:	781b      	ldrb	r3, [r3, #0]
 801f2f8:	009b      	lsls	r3, r3, #2
 801f2fa:	18d2      	adds	r2, r2, r3
 801f2fc:	212a      	movs	r1, #42	@ 0x2a
 801f2fe:	187b      	adds	r3, r7, r1
 801f300:	8812      	ldrh	r2, [r2, #0]
 801f302:	801a      	strh	r2, [r3, #0]
 801f304:	187b      	adds	r3, r7, r1
 801f306:	881b      	ldrh	r3, [r3, #0]
 801f308:	2240      	movs	r2, #64	@ 0x40
 801f30a:	4013      	ands	r3, r2
 801f30c:	d016      	beq.n	801f33c <USB_DeactivateEndpoint+0x2d4>
 801f30e:	687a      	ldr	r2, [r7, #4]
 801f310:	683b      	ldr	r3, [r7, #0]
 801f312:	781b      	ldrb	r3, [r3, #0]
 801f314:	009b      	lsls	r3, r3, #2
 801f316:	18d3      	adds	r3, r2, r3
 801f318:	881b      	ldrh	r3, [r3, #0]
 801f31a:	b29a      	uxth	r2, r3
 801f31c:	2028      	movs	r0, #40	@ 0x28
 801f31e:	183b      	adds	r3, r7, r0
 801f320:	492b      	ldr	r1, [pc, #172]	@ (801f3d0 <USB_DeactivateEndpoint+0x368>)
 801f322:	400a      	ands	r2, r1
 801f324:	801a      	strh	r2, [r3, #0]
 801f326:	687a      	ldr	r2, [r7, #4]
 801f328:	683b      	ldr	r3, [r7, #0]
 801f32a:	781b      	ldrb	r3, [r3, #0]
 801f32c:	009b      	lsls	r3, r3, #2
 801f32e:	18d3      	adds	r3, r2, r3
 801f330:	183a      	adds	r2, r7, r0
 801f332:	8812      	ldrh	r2, [r2, #0]
 801f334:	4927      	ldr	r1, [pc, #156]	@ (801f3d4 <USB_DeactivateEndpoint+0x36c>)
 801f336:	430a      	orrs	r2, r1
 801f338:	b292      	uxth	r2, r2
 801f33a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801f33c:	687a      	ldr	r2, [r7, #4]
 801f33e:	683b      	ldr	r3, [r7, #0]
 801f340:	781b      	ldrb	r3, [r3, #0]
 801f342:	009b      	lsls	r3, r3, #2
 801f344:	18d3      	adds	r3, r2, r3
 801f346:	881b      	ldrh	r3, [r3, #0]
 801f348:	b29a      	uxth	r2, r3
 801f34a:	2026      	movs	r0, #38	@ 0x26
 801f34c:	183b      	adds	r3, r7, r0
 801f34e:	4920      	ldr	r1, [pc, #128]	@ (801f3d0 <USB_DeactivateEndpoint+0x368>)
 801f350:	400a      	ands	r2, r1
 801f352:	801a      	strh	r2, [r3, #0]
 801f354:	687a      	ldr	r2, [r7, #4]
 801f356:	683b      	ldr	r3, [r7, #0]
 801f358:	781b      	ldrb	r3, [r3, #0]
 801f35a:	009b      	lsls	r3, r3, #2
 801f35c:	18d3      	adds	r3, r2, r3
 801f35e:	183a      	adds	r2, r7, r0
 801f360:	8812      	ldrh	r2, [r2, #0]
 801f362:	491f      	ldr	r1, [pc, #124]	@ (801f3e0 <USB_DeactivateEndpoint+0x378>)
 801f364:	430a      	orrs	r2, r1
 801f366:	b292      	uxth	r2, r2
 801f368:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f36a:	687a      	ldr	r2, [r7, #4]
 801f36c:	683b      	ldr	r3, [r7, #0]
 801f36e:	781b      	ldrb	r3, [r3, #0]
 801f370:	009b      	lsls	r3, r3, #2
 801f372:	18d3      	adds	r3, r2, r3
 801f374:	881b      	ldrh	r3, [r3, #0]
 801f376:	b29a      	uxth	r2, r3
 801f378:	2024      	movs	r0, #36	@ 0x24
 801f37a:	183b      	adds	r3, r7, r0
 801f37c:	4916      	ldr	r1, [pc, #88]	@ (801f3d8 <USB_DeactivateEndpoint+0x370>)
 801f37e:	400a      	ands	r2, r1
 801f380:	801a      	strh	r2, [r3, #0]
 801f382:	687a      	ldr	r2, [r7, #4]
 801f384:	683b      	ldr	r3, [r7, #0]
 801f386:	781b      	ldrb	r3, [r3, #0]
 801f388:	009b      	lsls	r3, r3, #2
 801f38a:	18d3      	adds	r3, r2, r3
 801f38c:	183a      	adds	r2, r7, r0
 801f38e:	8812      	ldrh	r2, [r2, #0]
 801f390:	4912      	ldr	r1, [pc, #72]	@ (801f3dc <USB_DeactivateEndpoint+0x374>)
 801f392:	430a      	orrs	r2, r1
 801f394:	b292      	uxth	r2, r2
 801f396:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801f398:	687a      	ldr	r2, [r7, #4]
 801f39a:	683b      	ldr	r3, [r7, #0]
 801f39c:	781b      	ldrb	r3, [r3, #0]
 801f39e:	009b      	lsls	r3, r3, #2
 801f3a0:	18d3      	adds	r3, r2, r3
 801f3a2:	881b      	ldrh	r3, [r3, #0]
 801f3a4:	b29a      	uxth	r2, r3
 801f3a6:	2022      	movs	r0, #34	@ 0x22
 801f3a8:	183b      	adds	r3, r7, r0
 801f3aa:	490e      	ldr	r1, [pc, #56]	@ (801f3e4 <USB_DeactivateEndpoint+0x37c>)
 801f3ac:	400a      	ands	r2, r1
 801f3ae:	801a      	strh	r2, [r3, #0]
 801f3b0:	687a      	ldr	r2, [r7, #4]
 801f3b2:	683b      	ldr	r3, [r7, #0]
 801f3b4:	781b      	ldrb	r3, [r3, #0]
 801f3b6:	009b      	lsls	r3, r3, #2
 801f3b8:	18d3      	adds	r3, r2, r3
 801f3ba:	183a      	adds	r2, r7, r0
 801f3bc:	8812      	ldrh	r2, [r2, #0]
 801f3be:	4907      	ldr	r1, [pc, #28]	@ (801f3dc <USB_DeactivateEndpoint+0x374>)
 801f3c0:	430a      	orrs	r2, r1
 801f3c2:	b292      	uxth	r2, r2
 801f3c4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801f3c6:	2300      	movs	r3, #0
}
 801f3c8:	0018      	movs	r0, r3
 801f3ca:	46bd      	mov	sp, r7
 801f3cc:	b00c      	add	sp, #48	@ 0x30
 801f3ce:	bd80      	pop	{r7, pc}
 801f3d0:	ffff8f8f 	.word	0xffff8f8f
 801f3d4:	ffff80c0 	.word	0xffff80c0
 801f3d8:	ffff8fbf 	.word	0xffff8fbf
 801f3dc:	ffff8080 	.word	0xffff8080
 801f3e0:	ffffc080 	.word	0xffffc080
 801f3e4:	ffffbf8f 	.word	0xffffbf8f

0801f3e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f3e8:	b590      	push	{r4, r7, lr}
 801f3ea:	b0c3      	sub	sp, #268	@ 0x10c
 801f3ec:	af00      	add	r7, sp, #0
 801f3ee:	6078      	str	r0, [r7, #4]
 801f3f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801f3f2:	683b      	ldr	r3, [r7, #0]
 801f3f4:	785b      	ldrb	r3, [r3, #1]
 801f3f6:	2b01      	cmp	r3, #1
 801f3f8:	d001      	beq.n	801f3fe <USB_EPStartXfer+0x16>
 801f3fa:	f000 fd2d 	bl	801fe58 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801f3fe:	683b      	ldr	r3, [r7, #0]
 801f400:	699a      	ldr	r2, [r3, #24]
 801f402:	683b      	ldr	r3, [r7, #0]
 801f404:	691b      	ldr	r3, [r3, #16]
 801f406:	429a      	cmp	r2, r3
 801f408:	d905      	bls.n	801f416 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801f40a:	683b      	ldr	r3, [r7, #0]
 801f40c:	691b      	ldr	r3, [r3, #16]
 801f40e:	1d7a      	adds	r2, r7, #5
 801f410:	32ff      	adds	r2, #255	@ 0xff
 801f412:	6013      	str	r3, [r2, #0]
 801f414:	e004      	b.n	801f420 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801f416:	683b      	ldr	r3, [r7, #0]
 801f418:	699b      	ldr	r3, [r3, #24]
 801f41a:	1d7a      	adds	r2, r7, #5
 801f41c:	32ff      	adds	r2, #255	@ 0xff
 801f41e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801f420:	683b      	ldr	r3, [r7, #0]
 801f422:	7b1b      	ldrb	r3, [r3, #12]
 801f424:	2b00      	cmp	r3, #0
 801f426:	d125      	bne.n	801f474 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801f428:	683b      	ldr	r3, [r7, #0]
 801f42a:	6959      	ldr	r1, [r3, #20]
 801f42c:	683b      	ldr	r3, [r7, #0]
 801f42e:	88da      	ldrh	r2, [r3, #6]
 801f430:	1d7b      	adds	r3, r7, #5
 801f432:	33ff      	adds	r3, #255	@ 0xff
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	b29b      	uxth	r3, r3
 801f438:	6878      	ldr	r0, [r7, #4]
 801f43a:	f001 fa47 	bl	80208cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	613b      	str	r3, [r7, #16]
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	2250      	movs	r2, #80	@ 0x50
 801f446:	5a9b      	ldrh	r3, [r3, r2]
 801f448:	b29b      	uxth	r3, r3
 801f44a:	001a      	movs	r2, r3
 801f44c:	693b      	ldr	r3, [r7, #16]
 801f44e:	189b      	adds	r3, r3, r2
 801f450:	613b      	str	r3, [r7, #16]
 801f452:	683b      	ldr	r3, [r7, #0]
 801f454:	781b      	ldrb	r3, [r3, #0]
 801f456:	00da      	lsls	r2, r3, #3
 801f458:	693b      	ldr	r3, [r7, #16]
 801f45a:	18d3      	adds	r3, r2, r3
 801f45c:	4ad7      	ldr	r2, [pc, #860]	@ (801f7bc <USB_EPStartXfer+0x3d4>)
 801f45e:	4694      	mov	ip, r2
 801f460:	4463      	add	r3, ip
 801f462:	60fb      	str	r3, [r7, #12]
 801f464:	1d7b      	adds	r3, r7, #5
 801f466:	33ff      	adds	r3, #255	@ 0xff
 801f468:	681b      	ldr	r3, [r3, #0]
 801f46a:	b29a      	uxth	r2, r3
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	801a      	strh	r2, [r3, #0]
 801f470:	f000 fccd 	bl	801fe0e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801f474:	683b      	ldr	r3, [r7, #0]
 801f476:	78db      	ldrb	r3, [r3, #3]
 801f478:	2b02      	cmp	r3, #2
 801f47a:	d000      	beq.n	801f47e <USB_EPStartXfer+0x96>
 801f47c:	e362      	b.n	801fb44 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801f47e:	683b      	ldr	r3, [r7, #0]
 801f480:	6a1a      	ldr	r2, [r3, #32]
 801f482:	683b      	ldr	r3, [r7, #0]
 801f484:	691b      	ldr	r3, [r3, #16]
 801f486:	429a      	cmp	r2, r3
 801f488:	d800      	bhi.n	801f48c <USB_EPStartXfer+0xa4>
 801f48a:	e309      	b.n	801faa0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f48c:	687a      	ldr	r2, [r7, #4]
 801f48e:	683b      	ldr	r3, [r7, #0]
 801f490:	781b      	ldrb	r3, [r3, #0]
 801f492:	009b      	lsls	r3, r3, #2
 801f494:	18d3      	adds	r3, r2, r3
 801f496:	881b      	ldrh	r3, [r3, #0]
 801f498:	b29a      	uxth	r2, r3
 801f49a:	2056      	movs	r0, #86	@ 0x56
 801f49c:	183b      	adds	r3, r7, r0
 801f49e:	49c8      	ldr	r1, [pc, #800]	@ (801f7c0 <USB_EPStartXfer+0x3d8>)
 801f4a0:	400a      	ands	r2, r1
 801f4a2:	801a      	strh	r2, [r3, #0]
 801f4a4:	687a      	ldr	r2, [r7, #4]
 801f4a6:	683b      	ldr	r3, [r7, #0]
 801f4a8:	781b      	ldrb	r3, [r3, #0]
 801f4aa:	009b      	lsls	r3, r3, #2
 801f4ac:	18d3      	adds	r3, r2, r3
 801f4ae:	183a      	adds	r2, r7, r0
 801f4b0:	8812      	ldrh	r2, [r2, #0]
 801f4b2:	49c4      	ldr	r1, [pc, #784]	@ (801f7c4 <USB_EPStartXfer+0x3dc>)
 801f4b4:	430a      	orrs	r2, r1
 801f4b6:	b292      	uxth	r2, r2
 801f4b8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801f4ba:	683b      	ldr	r3, [r7, #0]
 801f4bc:	6a1a      	ldr	r2, [r3, #32]
 801f4be:	1d7b      	adds	r3, r7, #5
 801f4c0:	33ff      	adds	r3, #255	@ 0xff
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	1ad2      	subs	r2, r2, r3
 801f4c6:	683b      	ldr	r3, [r7, #0]
 801f4c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f4ca:	687a      	ldr	r2, [r7, #4]
 801f4cc:	683b      	ldr	r3, [r7, #0]
 801f4ce:	781b      	ldrb	r3, [r3, #0]
 801f4d0:	009b      	lsls	r3, r3, #2
 801f4d2:	18d3      	adds	r3, r2, r3
 801f4d4:	881b      	ldrh	r3, [r3, #0]
 801f4d6:	b29b      	uxth	r3, r3
 801f4d8:	001a      	movs	r2, r3
 801f4da:	2340      	movs	r3, #64	@ 0x40
 801f4dc:	4013      	ands	r3, r2
 801f4de:	d100      	bne.n	801f4e2 <USB_EPStartXfer+0xfa>
 801f4e0:	e176      	b.n	801f7d0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	633b      	str	r3, [r7, #48]	@ 0x30
 801f4e6:	683b      	ldr	r3, [r7, #0]
 801f4e8:	785b      	ldrb	r3, [r3, #1]
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d000      	beq.n	801f4f0 <USB_EPStartXfer+0x108>
 801f4ee:	e074      	b.n	801f5da <USB_EPStartXfer+0x1f2>
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	2250      	movs	r2, #80	@ 0x50
 801f4f8:	5a9b      	ldrh	r3, [r3, r2]
 801f4fa:	b29b      	uxth	r3, r3
 801f4fc:	001a      	movs	r2, r3
 801f4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f500:	189b      	adds	r3, r3, r2
 801f502:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f504:	683b      	ldr	r3, [r7, #0]
 801f506:	781b      	ldrb	r3, [r3, #0]
 801f508:	00da      	lsls	r2, r3, #3
 801f50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f50c:	18d3      	adds	r3, r2, r3
 801f50e:	4aae      	ldr	r2, [pc, #696]	@ (801f7c8 <USB_EPStartXfer+0x3e0>)
 801f510:	4694      	mov	ip, r2
 801f512:	4463      	add	r3, ip
 801f514:	627b      	str	r3, [r7, #36]	@ 0x24
 801f516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f518:	881b      	ldrh	r3, [r3, #0]
 801f51a:	b29b      	uxth	r3, r3
 801f51c:	059b      	lsls	r3, r3, #22
 801f51e:	0d9b      	lsrs	r3, r3, #22
 801f520:	b29a      	uxth	r2, r3
 801f522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f524:	801a      	strh	r2, [r3, #0]
 801f526:	1d7b      	adds	r3, r7, #5
 801f528:	33ff      	adds	r3, #255	@ 0xff
 801f52a:	681b      	ldr	r3, [r3, #0]
 801f52c:	2b3e      	cmp	r3, #62	@ 0x3e
 801f52e:	d924      	bls.n	801f57a <USB_EPStartXfer+0x192>
 801f530:	1d7b      	adds	r3, r7, #5
 801f532:	33ff      	adds	r3, #255	@ 0xff
 801f534:	681b      	ldr	r3, [r3, #0]
 801f536:	095b      	lsrs	r3, r3, #5
 801f538:	1c7a      	adds	r2, r7, #1
 801f53a:	32ff      	adds	r2, #255	@ 0xff
 801f53c:	6013      	str	r3, [r2, #0]
 801f53e:	1d7b      	adds	r3, r7, #5
 801f540:	33ff      	adds	r3, #255	@ 0xff
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	221f      	movs	r2, #31
 801f546:	4013      	ands	r3, r2
 801f548:	d106      	bne.n	801f558 <USB_EPStartXfer+0x170>
 801f54a:	1c7b      	adds	r3, r7, #1
 801f54c:	33ff      	adds	r3, #255	@ 0xff
 801f54e:	681b      	ldr	r3, [r3, #0]
 801f550:	3b01      	subs	r3, #1
 801f552:	1c7a      	adds	r2, r7, #1
 801f554:	32ff      	adds	r2, #255	@ 0xff
 801f556:	6013      	str	r3, [r2, #0]
 801f558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f55a:	881b      	ldrh	r3, [r3, #0]
 801f55c:	b29a      	uxth	r2, r3
 801f55e:	1c7b      	adds	r3, r7, #1
 801f560:	33ff      	adds	r3, #255	@ 0xff
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	b29b      	uxth	r3, r3
 801f566:	029b      	lsls	r3, r3, #10
 801f568:	b29b      	uxth	r3, r3
 801f56a:	4313      	orrs	r3, r2
 801f56c:	b29b      	uxth	r3, r3
 801f56e:	4a97      	ldr	r2, [pc, #604]	@ (801f7cc <USB_EPStartXfer+0x3e4>)
 801f570:	4313      	orrs	r3, r2
 801f572:	b29a      	uxth	r2, r3
 801f574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f576:	801a      	strh	r2, [r3, #0]
 801f578:	e04a      	b.n	801f610 <USB_EPStartXfer+0x228>
 801f57a:	1d7b      	adds	r3, r7, #5
 801f57c:	33ff      	adds	r3, #255	@ 0xff
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	2b00      	cmp	r3, #0
 801f582:	d108      	bne.n	801f596 <USB_EPStartXfer+0x1ae>
 801f584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f586:	881b      	ldrh	r3, [r3, #0]
 801f588:	b29b      	uxth	r3, r3
 801f58a:	4a90      	ldr	r2, [pc, #576]	@ (801f7cc <USB_EPStartXfer+0x3e4>)
 801f58c:	4313      	orrs	r3, r2
 801f58e:	b29a      	uxth	r2, r3
 801f590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f592:	801a      	strh	r2, [r3, #0]
 801f594:	e03c      	b.n	801f610 <USB_EPStartXfer+0x228>
 801f596:	1d7b      	adds	r3, r7, #5
 801f598:	33ff      	adds	r3, #255	@ 0xff
 801f59a:	681b      	ldr	r3, [r3, #0]
 801f59c:	085b      	lsrs	r3, r3, #1
 801f59e:	1c7a      	adds	r2, r7, #1
 801f5a0:	32ff      	adds	r2, #255	@ 0xff
 801f5a2:	6013      	str	r3, [r2, #0]
 801f5a4:	1d7b      	adds	r3, r7, #5
 801f5a6:	33ff      	adds	r3, #255	@ 0xff
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	2201      	movs	r2, #1
 801f5ac:	4013      	ands	r3, r2
 801f5ae:	d006      	beq.n	801f5be <USB_EPStartXfer+0x1d6>
 801f5b0:	1c7b      	adds	r3, r7, #1
 801f5b2:	33ff      	adds	r3, #255	@ 0xff
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	3301      	adds	r3, #1
 801f5b8:	1c7a      	adds	r2, r7, #1
 801f5ba:	32ff      	adds	r2, #255	@ 0xff
 801f5bc:	6013      	str	r3, [r2, #0]
 801f5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5c0:	881b      	ldrh	r3, [r3, #0]
 801f5c2:	b29a      	uxth	r2, r3
 801f5c4:	1c7b      	adds	r3, r7, #1
 801f5c6:	33ff      	adds	r3, #255	@ 0xff
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	b29b      	uxth	r3, r3
 801f5cc:	029b      	lsls	r3, r3, #10
 801f5ce:	b29b      	uxth	r3, r3
 801f5d0:	4313      	orrs	r3, r2
 801f5d2:	b29a      	uxth	r2, r3
 801f5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5d6:	801a      	strh	r2, [r3, #0]
 801f5d8:	e01a      	b.n	801f610 <USB_EPStartXfer+0x228>
 801f5da:	683b      	ldr	r3, [r7, #0]
 801f5dc:	785b      	ldrb	r3, [r3, #1]
 801f5de:	2b01      	cmp	r3, #1
 801f5e0:	d116      	bne.n	801f610 <USB_EPStartXfer+0x228>
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	2250      	movs	r2, #80	@ 0x50
 801f5e6:	5a9b      	ldrh	r3, [r3, r2]
 801f5e8:	b29b      	uxth	r3, r3
 801f5ea:	001a      	movs	r2, r3
 801f5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f5ee:	189b      	adds	r3, r3, r2
 801f5f0:	633b      	str	r3, [r7, #48]	@ 0x30
 801f5f2:	683b      	ldr	r3, [r7, #0]
 801f5f4:	781b      	ldrb	r3, [r3, #0]
 801f5f6:	00da      	lsls	r2, r3, #3
 801f5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f5fa:	18d3      	adds	r3, r2, r3
 801f5fc:	4a72      	ldr	r2, [pc, #456]	@ (801f7c8 <USB_EPStartXfer+0x3e0>)
 801f5fe:	4694      	mov	ip, r2
 801f600:	4463      	add	r3, ip
 801f602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f604:	1d7b      	adds	r3, r7, #5
 801f606:	33ff      	adds	r3, #255	@ 0xff
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	b29a      	uxth	r2, r3
 801f60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f60e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f610:	2076      	movs	r0, #118	@ 0x76
 801f612:	183b      	adds	r3, r7, r0
 801f614:	683a      	ldr	r2, [r7, #0]
 801f616:	8952      	ldrh	r2, [r2, #10]
 801f618:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f61a:	683b      	ldr	r3, [r7, #0]
 801f61c:	6959      	ldr	r1, [r3, #20]
 801f61e:	1d7b      	adds	r3, r7, #5
 801f620:	33ff      	adds	r3, #255	@ 0xff
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	b29c      	uxth	r4, r3
 801f626:	183b      	adds	r3, r7, r0
 801f628:	881a      	ldrh	r2, [r3, #0]
 801f62a:	6878      	ldr	r0, [r7, #4]
 801f62c:	0023      	movs	r3, r4
 801f62e:	f001 f94d 	bl	80208cc <USB_WritePMA>
            ep->xfer_buff += len;
 801f632:	683b      	ldr	r3, [r7, #0]
 801f634:	695a      	ldr	r2, [r3, #20]
 801f636:	1d7b      	adds	r3, r7, #5
 801f638:	33ff      	adds	r3, #255	@ 0xff
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	18d2      	adds	r2, r2, r3
 801f63e:	683b      	ldr	r3, [r7, #0]
 801f640:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f642:	683b      	ldr	r3, [r7, #0]
 801f644:	6a1a      	ldr	r2, [r3, #32]
 801f646:	683b      	ldr	r3, [r7, #0]
 801f648:	691b      	ldr	r3, [r3, #16]
 801f64a:	429a      	cmp	r2, r3
 801f64c:	d908      	bls.n	801f660 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801f64e:	683b      	ldr	r3, [r7, #0]
 801f650:	6a1a      	ldr	r2, [r3, #32]
 801f652:	1d7b      	adds	r3, r7, #5
 801f654:	33ff      	adds	r3, #255	@ 0xff
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	1ad2      	subs	r2, r2, r3
 801f65a:	683b      	ldr	r3, [r7, #0]
 801f65c:	621a      	str	r2, [r3, #32]
 801f65e:	e007      	b.n	801f670 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801f660:	683b      	ldr	r3, [r7, #0]
 801f662:	6a1b      	ldr	r3, [r3, #32]
 801f664:	1d7a      	adds	r2, r7, #5
 801f666:	32ff      	adds	r2, #255	@ 0xff
 801f668:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f66a:	683b      	ldr	r3, [r7, #0]
 801f66c:	2200      	movs	r2, #0
 801f66e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f670:	683b      	ldr	r3, [r7, #0]
 801f672:	785b      	ldrb	r3, [r3, #1]
 801f674:	2b00      	cmp	r3, #0
 801f676:	d000      	beq.n	801f67a <USB_EPStartXfer+0x292>
 801f678:	e070      	b.n	801f75c <USB_EPStartXfer+0x374>
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	61bb      	str	r3, [r7, #24]
 801f67e:	687b      	ldr	r3, [r7, #4]
 801f680:	2250      	movs	r2, #80	@ 0x50
 801f682:	5a9b      	ldrh	r3, [r3, r2]
 801f684:	b29b      	uxth	r3, r3
 801f686:	001a      	movs	r2, r3
 801f688:	69bb      	ldr	r3, [r7, #24]
 801f68a:	189b      	adds	r3, r3, r2
 801f68c:	61bb      	str	r3, [r7, #24]
 801f68e:	683b      	ldr	r3, [r7, #0]
 801f690:	781b      	ldrb	r3, [r3, #0]
 801f692:	00da      	lsls	r2, r3, #3
 801f694:	69bb      	ldr	r3, [r7, #24]
 801f696:	18d3      	adds	r3, r2, r3
 801f698:	4a48      	ldr	r2, [pc, #288]	@ (801f7bc <USB_EPStartXfer+0x3d4>)
 801f69a:	4694      	mov	ip, r2
 801f69c:	4463      	add	r3, ip
 801f69e:	617b      	str	r3, [r7, #20]
 801f6a0:	697b      	ldr	r3, [r7, #20]
 801f6a2:	881b      	ldrh	r3, [r3, #0]
 801f6a4:	b29b      	uxth	r3, r3
 801f6a6:	059b      	lsls	r3, r3, #22
 801f6a8:	0d9b      	lsrs	r3, r3, #22
 801f6aa:	b29a      	uxth	r2, r3
 801f6ac:	697b      	ldr	r3, [r7, #20]
 801f6ae:	801a      	strh	r2, [r3, #0]
 801f6b0:	1d7b      	adds	r3, r7, #5
 801f6b2:	33ff      	adds	r3, #255	@ 0xff
 801f6b4:	681b      	ldr	r3, [r3, #0]
 801f6b6:	2b3e      	cmp	r3, #62	@ 0x3e
 801f6b8:	d922      	bls.n	801f700 <USB_EPStartXfer+0x318>
 801f6ba:	1d7b      	adds	r3, r7, #5
 801f6bc:	33ff      	adds	r3, #255	@ 0xff
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	095b      	lsrs	r3, r3, #5
 801f6c2:	21fc      	movs	r1, #252	@ 0xfc
 801f6c4:	187a      	adds	r2, r7, r1
 801f6c6:	6013      	str	r3, [r2, #0]
 801f6c8:	1d7b      	adds	r3, r7, #5
 801f6ca:	33ff      	adds	r3, #255	@ 0xff
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	221f      	movs	r2, #31
 801f6d0:	4013      	ands	r3, r2
 801f6d2:	d104      	bne.n	801f6de <USB_EPStartXfer+0x2f6>
 801f6d4:	187b      	adds	r3, r7, r1
 801f6d6:	681b      	ldr	r3, [r3, #0]
 801f6d8:	3b01      	subs	r3, #1
 801f6da:	187a      	adds	r2, r7, r1
 801f6dc:	6013      	str	r3, [r2, #0]
 801f6de:	697b      	ldr	r3, [r7, #20]
 801f6e0:	881b      	ldrh	r3, [r3, #0]
 801f6e2:	b29a      	uxth	r2, r3
 801f6e4:	23fc      	movs	r3, #252	@ 0xfc
 801f6e6:	18fb      	adds	r3, r7, r3
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	b29b      	uxth	r3, r3
 801f6ec:	029b      	lsls	r3, r3, #10
 801f6ee:	b29b      	uxth	r3, r3
 801f6f0:	4313      	orrs	r3, r2
 801f6f2:	b29b      	uxth	r3, r3
 801f6f4:	4a35      	ldr	r2, [pc, #212]	@ (801f7cc <USB_EPStartXfer+0x3e4>)
 801f6f6:	4313      	orrs	r3, r2
 801f6f8:	b29a      	uxth	r2, r3
 801f6fa:	697b      	ldr	r3, [r7, #20]
 801f6fc:	801a      	strh	r2, [r3, #0]
 801f6fe:	e04a      	b.n	801f796 <USB_EPStartXfer+0x3ae>
 801f700:	1d7b      	adds	r3, r7, #5
 801f702:	33ff      	adds	r3, #255	@ 0xff
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d108      	bne.n	801f71c <USB_EPStartXfer+0x334>
 801f70a:	697b      	ldr	r3, [r7, #20]
 801f70c:	881b      	ldrh	r3, [r3, #0]
 801f70e:	b29b      	uxth	r3, r3
 801f710:	4a2e      	ldr	r2, [pc, #184]	@ (801f7cc <USB_EPStartXfer+0x3e4>)
 801f712:	4313      	orrs	r3, r2
 801f714:	b29a      	uxth	r2, r3
 801f716:	697b      	ldr	r3, [r7, #20]
 801f718:	801a      	strh	r2, [r3, #0]
 801f71a:	e03c      	b.n	801f796 <USB_EPStartXfer+0x3ae>
 801f71c:	1d7b      	adds	r3, r7, #5
 801f71e:	33ff      	adds	r3, #255	@ 0xff
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	085b      	lsrs	r3, r3, #1
 801f724:	21fc      	movs	r1, #252	@ 0xfc
 801f726:	187a      	adds	r2, r7, r1
 801f728:	6013      	str	r3, [r2, #0]
 801f72a:	1d7b      	adds	r3, r7, #5
 801f72c:	33ff      	adds	r3, #255	@ 0xff
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	2201      	movs	r2, #1
 801f732:	4013      	ands	r3, r2
 801f734:	d004      	beq.n	801f740 <USB_EPStartXfer+0x358>
 801f736:	187b      	adds	r3, r7, r1
 801f738:	681b      	ldr	r3, [r3, #0]
 801f73a:	3301      	adds	r3, #1
 801f73c:	187a      	adds	r2, r7, r1
 801f73e:	6013      	str	r3, [r2, #0]
 801f740:	697b      	ldr	r3, [r7, #20]
 801f742:	881b      	ldrh	r3, [r3, #0]
 801f744:	b29a      	uxth	r2, r3
 801f746:	23fc      	movs	r3, #252	@ 0xfc
 801f748:	18fb      	adds	r3, r7, r3
 801f74a:	681b      	ldr	r3, [r3, #0]
 801f74c:	b29b      	uxth	r3, r3
 801f74e:	029b      	lsls	r3, r3, #10
 801f750:	b29b      	uxth	r3, r3
 801f752:	4313      	orrs	r3, r2
 801f754:	b29a      	uxth	r2, r3
 801f756:	697b      	ldr	r3, [r7, #20]
 801f758:	801a      	strh	r2, [r3, #0]
 801f75a:	e01c      	b.n	801f796 <USB_EPStartXfer+0x3ae>
 801f75c:	683b      	ldr	r3, [r7, #0]
 801f75e:	785b      	ldrb	r3, [r3, #1]
 801f760:	2b01      	cmp	r3, #1
 801f762:	d118      	bne.n	801f796 <USB_EPStartXfer+0x3ae>
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	623b      	str	r3, [r7, #32]
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	2250      	movs	r2, #80	@ 0x50
 801f76c:	5a9b      	ldrh	r3, [r3, r2]
 801f76e:	b29b      	uxth	r3, r3
 801f770:	001a      	movs	r2, r3
 801f772:	6a3b      	ldr	r3, [r7, #32]
 801f774:	189b      	adds	r3, r3, r2
 801f776:	623b      	str	r3, [r7, #32]
 801f778:	683b      	ldr	r3, [r7, #0]
 801f77a:	781b      	ldrb	r3, [r3, #0]
 801f77c:	00da      	lsls	r2, r3, #3
 801f77e:	6a3b      	ldr	r3, [r7, #32]
 801f780:	18d3      	adds	r3, r2, r3
 801f782:	4a0e      	ldr	r2, [pc, #56]	@ (801f7bc <USB_EPStartXfer+0x3d4>)
 801f784:	4694      	mov	ip, r2
 801f786:	4463      	add	r3, ip
 801f788:	61fb      	str	r3, [r7, #28]
 801f78a:	1d7b      	adds	r3, r7, #5
 801f78c:	33ff      	adds	r3, #255	@ 0xff
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	b29a      	uxth	r2, r3
 801f792:	69fb      	ldr	r3, [r7, #28]
 801f794:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f796:	2076      	movs	r0, #118	@ 0x76
 801f798:	183b      	adds	r3, r7, r0
 801f79a:	683a      	ldr	r2, [r7, #0]
 801f79c:	8912      	ldrh	r2, [r2, #8]
 801f79e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f7a0:	683b      	ldr	r3, [r7, #0]
 801f7a2:	6959      	ldr	r1, [r3, #20]
 801f7a4:	1d7b      	adds	r3, r7, #5
 801f7a6:	33ff      	adds	r3, #255	@ 0xff
 801f7a8:	681b      	ldr	r3, [r3, #0]
 801f7aa:	b29c      	uxth	r4, r3
 801f7ac:	183b      	adds	r3, r7, r0
 801f7ae:	881a      	ldrh	r2, [r3, #0]
 801f7b0:	6878      	ldr	r0, [r7, #4]
 801f7b2:	0023      	movs	r3, r4
 801f7b4:	f001 f88a 	bl	80208cc <USB_WritePMA>
 801f7b8:	e329      	b.n	801fe0e <USB_EPStartXfer+0xa26>
 801f7ba:	46c0      	nop			@ (mov r8, r8)
 801f7bc:	00000402 	.word	0x00000402
 801f7c0:	ffff8f8f 	.word	0xffff8f8f
 801f7c4:	ffff8180 	.word	0xffff8180
 801f7c8:	00000406 	.word	0x00000406
 801f7cc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f7d0:	683b      	ldr	r3, [r7, #0]
 801f7d2:	785b      	ldrb	r3, [r3, #1]
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d000      	beq.n	801f7da <USB_EPStartXfer+0x3f2>
 801f7d8:	e070      	b.n	801f8bc <USB_EPStartXfer+0x4d4>
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	2250      	movs	r2, #80	@ 0x50
 801f7e2:	5a9b      	ldrh	r3, [r3, r2]
 801f7e4:	b29b      	uxth	r3, r3
 801f7e6:	001a      	movs	r2, r3
 801f7e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f7ea:	189b      	adds	r3, r3, r2
 801f7ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f7ee:	683b      	ldr	r3, [r7, #0]
 801f7f0:	781b      	ldrb	r3, [r3, #0]
 801f7f2:	00da      	lsls	r2, r3, #3
 801f7f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f7f6:	18d3      	adds	r3, r2, r3
 801f7f8:	4acd      	ldr	r2, [pc, #820]	@ (801fb30 <USB_EPStartXfer+0x748>)
 801f7fa:	4694      	mov	ip, r2
 801f7fc:	4463      	add	r3, ip
 801f7fe:	647b      	str	r3, [r7, #68]	@ 0x44
 801f800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f802:	881b      	ldrh	r3, [r3, #0]
 801f804:	b29b      	uxth	r3, r3
 801f806:	059b      	lsls	r3, r3, #22
 801f808:	0d9b      	lsrs	r3, r3, #22
 801f80a:	b29a      	uxth	r2, r3
 801f80c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f80e:	801a      	strh	r2, [r3, #0]
 801f810:	1d7b      	adds	r3, r7, #5
 801f812:	33ff      	adds	r3, #255	@ 0xff
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	2b3e      	cmp	r3, #62	@ 0x3e
 801f818:	d922      	bls.n	801f860 <USB_EPStartXfer+0x478>
 801f81a:	1d7b      	adds	r3, r7, #5
 801f81c:	33ff      	adds	r3, #255	@ 0xff
 801f81e:	681b      	ldr	r3, [r3, #0]
 801f820:	095b      	lsrs	r3, r3, #5
 801f822:	21f8      	movs	r1, #248	@ 0xf8
 801f824:	187a      	adds	r2, r7, r1
 801f826:	6013      	str	r3, [r2, #0]
 801f828:	1d7b      	adds	r3, r7, #5
 801f82a:	33ff      	adds	r3, #255	@ 0xff
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	221f      	movs	r2, #31
 801f830:	4013      	ands	r3, r2
 801f832:	d104      	bne.n	801f83e <USB_EPStartXfer+0x456>
 801f834:	187b      	adds	r3, r7, r1
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	3b01      	subs	r3, #1
 801f83a:	187a      	adds	r2, r7, r1
 801f83c:	6013      	str	r3, [r2, #0]
 801f83e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f840:	881b      	ldrh	r3, [r3, #0]
 801f842:	b29a      	uxth	r2, r3
 801f844:	23f8      	movs	r3, #248	@ 0xf8
 801f846:	18fb      	adds	r3, r7, r3
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	b29b      	uxth	r3, r3
 801f84c:	029b      	lsls	r3, r3, #10
 801f84e:	b29b      	uxth	r3, r3
 801f850:	4313      	orrs	r3, r2
 801f852:	b29b      	uxth	r3, r3
 801f854:	4ab7      	ldr	r2, [pc, #732]	@ (801fb34 <USB_EPStartXfer+0x74c>)
 801f856:	4313      	orrs	r3, r2
 801f858:	b29a      	uxth	r2, r3
 801f85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f85c:	801a      	strh	r2, [r3, #0]
 801f85e:	e04a      	b.n	801f8f6 <USB_EPStartXfer+0x50e>
 801f860:	1d7b      	adds	r3, r7, #5
 801f862:	33ff      	adds	r3, #255	@ 0xff
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	2b00      	cmp	r3, #0
 801f868:	d108      	bne.n	801f87c <USB_EPStartXfer+0x494>
 801f86a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f86c:	881b      	ldrh	r3, [r3, #0]
 801f86e:	b29b      	uxth	r3, r3
 801f870:	4ab0      	ldr	r2, [pc, #704]	@ (801fb34 <USB_EPStartXfer+0x74c>)
 801f872:	4313      	orrs	r3, r2
 801f874:	b29a      	uxth	r2, r3
 801f876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f878:	801a      	strh	r2, [r3, #0]
 801f87a:	e03c      	b.n	801f8f6 <USB_EPStartXfer+0x50e>
 801f87c:	1d7b      	adds	r3, r7, #5
 801f87e:	33ff      	adds	r3, #255	@ 0xff
 801f880:	681b      	ldr	r3, [r3, #0]
 801f882:	085b      	lsrs	r3, r3, #1
 801f884:	21f8      	movs	r1, #248	@ 0xf8
 801f886:	187a      	adds	r2, r7, r1
 801f888:	6013      	str	r3, [r2, #0]
 801f88a:	1d7b      	adds	r3, r7, #5
 801f88c:	33ff      	adds	r3, #255	@ 0xff
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	2201      	movs	r2, #1
 801f892:	4013      	ands	r3, r2
 801f894:	d004      	beq.n	801f8a0 <USB_EPStartXfer+0x4b8>
 801f896:	187b      	adds	r3, r7, r1
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	3301      	adds	r3, #1
 801f89c:	187a      	adds	r2, r7, r1
 801f89e:	6013      	str	r3, [r2, #0]
 801f8a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f8a2:	881b      	ldrh	r3, [r3, #0]
 801f8a4:	b29a      	uxth	r2, r3
 801f8a6:	23f8      	movs	r3, #248	@ 0xf8
 801f8a8:	18fb      	adds	r3, r7, r3
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	b29b      	uxth	r3, r3
 801f8ae:	029b      	lsls	r3, r3, #10
 801f8b0:	b29b      	uxth	r3, r3
 801f8b2:	4313      	orrs	r3, r2
 801f8b4:	b29a      	uxth	r2, r3
 801f8b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f8b8:	801a      	strh	r2, [r3, #0]
 801f8ba:	e01c      	b.n	801f8f6 <USB_EPStartXfer+0x50e>
 801f8bc:	683b      	ldr	r3, [r7, #0]
 801f8be:	785b      	ldrb	r3, [r3, #1]
 801f8c0:	2b01      	cmp	r3, #1
 801f8c2:	d118      	bne.n	801f8f6 <USB_EPStartXfer+0x50e>
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	653b      	str	r3, [r7, #80]	@ 0x50
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	2250      	movs	r2, #80	@ 0x50
 801f8cc:	5a9b      	ldrh	r3, [r3, r2]
 801f8ce:	b29b      	uxth	r3, r3
 801f8d0:	001a      	movs	r2, r3
 801f8d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f8d4:	189b      	adds	r3, r3, r2
 801f8d6:	653b      	str	r3, [r7, #80]	@ 0x50
 801f8d8:	683b      	ldr	r3, [r7, #0]
 801f8da:	781b      	ldrb	r3, [r3, #0]
 801f8dc:	00da      	lsls	r2, r3, #3
 801f8de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f8e0:	18d3      	adds	r3, r2, r3
 801f8e2:	4a93      	ldr	r2, [pc, #588]	@ (801fb30 <USB_EPStartXfer+0x748>)
 801f8e4:	4694      	mov	ip, r2
 801f8e6:	4463      	add	r3, ip
 801f8e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f8ea:	1d7b      	adds	r3, r7, #5
 801f8ec:	33ff      	adds	r3, #255	@ 0xff
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	b29a      	uxth	r2, r3
 801f8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f8f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f8f6:	2076      	movs	r0, #118	@ 0x76
 801f8f8:	183b      	adds	r3, r7, r0
 801f8fa:	683a      	ldr	r2, [r7, #0]
 801f8fc:	8912      	ldrh	r2, [r2, #8]
 801f8fe:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f900:	683b      	ldr	r3, [r7, #0]
 801f902:	6959      	ldr	r1, [r3, #20]
 801f904:	1d7b      	adds	r3, r7, #5
 801f906:	33ff      	adds	r3, #255	@ 0xff
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	b29c      	uxth	r4, r3
 801f90c:	183b      	adds	r3, r7, r0
 801f90e:	881a      	ldrh	r2, [r3, #0]
 801f910:	6878      	ldr	r0, [r7, #4]
 801f912:	0023      	movs	r3, r4
 801f914:	f000 ffda 	bl	80208cc <USB_WritePMA>
            ep->xfer_buff += len;
 801f918:	683b      	ldr	r3, [r7, #0]
 801f91a:	695a      	ldr	r2, [r3, #20]
 801f91c:	1d7b      	adds	r3, r7, #5
 801f91e:	33ff      	adds	r3, #255	@ 0xff
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	18d2      	adds	r2, r2, r3
 801f924:	683b      	ldr	r3, [r7, #0]
 801f926:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f928:	683b      	ldr	r3, [r7, #0]
 801f92a:	6a1a      	ldr	r2, [r3, #32]
 801f92c:	683b      	ldr	r3, [r7, #0]
 801f92e:	691b      	ldr	r3, [r3, #16]
 801f930:	429a      	cmp	r2, r3
 801f932:	d908      	bls.n	801f946 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801f934:	683b      	ldr	r3, [r7, #0]
 801f936:	6a1a      	ldr	r2, [r3, #32]
 801f938:	1d7b      	adds	r3, r7, #5
 801f93a:	33ff      	adds	r3, #255	@ 0xff
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	1ad2      	subs	r2, r2, r3
 801f940:	683b      	ldr	r3, [r7, #0]
 801f942:	621a      	str	r2, [r3, #32]
 801f944:	e007      	b.n	801f956 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801f946:	683b      	ldr	r3, [r7, #0]
 801f948:	6a1b      	ldr	r3, [r3, #32]
 801f94a:	1d7a      	adds	r2, r7, #5
 801f94c:	32ff      	adds	r2, #255	@ 0xff
 801f94e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f950:	683b      	ldr	r3, [r7, #0]
 801f952:	2200      	movs	r2, #0
 801f954:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	643b      	str	r3, [r7, #64]	@ 0x40
 801f95a:	683b      	ldr	r3, [r7, #0]
 801f95c:	785b      	ldrb	r3, [r3, #1]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d000      	beq.n	801f964 <USB_EPStartXfer+0x57c>
 801f962:	e070      	b.n	801fa46 <USB_EPStartXfer+0x65e>
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	2250      	movs	r2, #80	@ 0x50
 801f96c:	5a9b      	ldrh	r3, [r3, r2]
 801f96e:	b29b      	uxth	r3, r3
 801f970:	001a      	movs	r2, r3
 801f972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f974:	189b      	adds	r3, r3, r2
 801f976:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f978:	683b      	ldr	r3, [r7, #0]
 801f97a:	781b      	ldrb	r3, [r3, #0]
 801f97c:	00da      	lsls	r2, r3, #3
 801f97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f980:	18d3      	adds	r3, r2, r3
 801f982:	4a6d      	ldr	r2, [pc, #436]	@ (801fb38 <USB_EPStartXfer+0x750>)
 801f984:	4694      	mov	ip, r2
 801f986:	4463      	add	r3, ip
 801f988:	637b      	str	r3, [r7, #52]	@ 0x34
 801f98a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f98c:	881b      	ldrh	r3, [r3, #0]
 801f98e:	b29b      	uxth	r3, r3
 801f990:	059b      	lsls	r3, r3, #22
 801f992:	0d9b      	lsrs	r3, r3, #22
 801f994:	b29a      	uxth	r2, r3
 801f996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f998:	801a      	strh	r2, [r3, #0]
 801f99a:	1d7b      	adds	r3, r7, #5
 801f99c:	33ff      	adds	r3, #255	@ 0xff
 801f99e:	681b      	ldr	r3, [r3, #0]
 801f9a0:	2b3e      	cmp	r3, #62	@ 0x3e
 801f9a2:	d922      	bls.n	801f9ea <USB_EPStartXfer+0x602>
 801f9a4:	1d7b      	adds	r3, r7, #5
 801f9a6:	33ff      	adds	r3, #255	@ 0xff
 801f9a8:	681b      	ldr	r3, [r3, #0]
 801f9aa:	095b      	lsrs	r3, r3, #5
 801f9ac:	21f4      	movs	r1, #244	@ 0xf4
 801f9ae:	187a      	adds	r2, r7, r1
 801f9b0:	6013      	str	r3, [r2, #0]
 801f9b2:	1d7b      	adds	r3, r7, #5
 801f9b4:	33ff      	adds	r3, #255	@ 0xff
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	221f      	movs	r2, #31
 801f9ba:	4013      	ands	r3, r2
 801f9bc:	d104      	bne.n	801f9c8 <USB_EPStartXfer+0x5e0>
 801f9be:	187b      	adds	r3, r7, r1
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	3b01      	subs	r3, #1
 801f9c4:	187a      	adds	r2, r7, r1
 801f9c6:	6013      	str	r3, [r2, #0]
 801f9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f9ca:	881b      	ldrh	r3, [r3, #0]
 801f9cc:	b29a      	uxth	r2, r3
 801f9ce:	23f4      	movs	r3, #244	@ 0xf4
 801f9d0:	18fb      	adds	r3, r7, r3
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	b29b      	uxth	r3, r3
 801f9d6:	029b      	lsls	r3, r3, #10
 801f9d8:	b29b      	uxth	r3, r3
 801f9da:	4313      	orrs	r3, r2
 801f9dc:	b29b      	uxth	r3, r3
 801f9de:	4a55      	ldr	r2, [pc, #340]	@ (801fb34 <USB_EPStartXfer+0x74c>)
 801f9e0:	4313      	orrs	r3, r2
 801f9e2:	b29a      	uxth	r2, r3
 801f9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f9e6:	801a      	strh	r2, [r3, #0]
 801f9e8:	e048      	b.n	801fa7c <USB_EPStartXfer+0x694>
 801f9ea:	1d7b      	adds	r3, r7, #5
 801f9ec:	33ff      	adds	r3, #255	@ 0xff
 801f9ee:	681b      	ldr	r3, [r3, #0]
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	d108      	bne.n	801fa06 <USB_EPStartXfer+0x61e>
 801f9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f9f6:	881b      	ldrh	r3, [r3, #0]
 801f9f8:	b29b      	uxth	r3, r3
 801f9fa:	4a4e      	ldr	r2, [pc, #312]	@ (801fb34 <USB_EPStartXfer+0x74c>)
 801f9fc:	4313      	orrs	r3, r2
 801f9fe:	b29a      	uxth	r2, r3
 801fa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa02:	801a      	strh	r2, [r3, #0]
 801fa04:	e03a      	b.n	801fa7c <USB_EPStartXfer+0x694>
 801fa06:	1d7b      	adds	r3, r7, #5
 801fa08:	33ff      	adds	r3, #255	@ 0xff
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	085b      	lsrs	r3, r3, #1
 801fa0e:	21f4      	movs	r1, #244	@ 0xf4
 801fa10:	187a      	adds	r2, r7, r1
 801fa12:	6013      	str	r3, [r2, #0]
 801fa14:	1d7b      	adds	r3, r7, #5
 801fa16:	33ff      	adds	r3, #255	@ 0xff
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	2201      	movs	r2, #1
 801fa1c:	4013      	ands	r3, r2
 801fa1e:	d004      	beq.n	801fa2a <USB_EPStartXfer+0x642>
 801fa20:	187b      	adds	r3, r7, r1
 801fa22:	681b      	ldr	r3, [r3, #0]
 801fa24:	3301      	adds	r3, #1
 801fa26:	187a      	adds	r2, r7, r1
 801fa28:	6013      	str	r3, [r2, #0]
 801fa2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa2c:	881b      	ldrh	r3, [r3, #0]
 801fa2e:	b29a      	uxth	r2, r3
 801fa30:	23f4      	movs	r3, #244	@ 0xf4
 801fa32:	18fb      	adds	r3, r7, r3
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	b29b      	uxth	r3, r3
 801fa38:	029b      	lsls	r3, r3, #10
 801fa3a:	b29b      	uxth	r3, r3
 801fa3c:	4313      	orrs	r3, r2
 801fa3e:	b29a      	uxth	r2, r3
 801fa40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa42:	801a      	strh	r2, [r3, #0]
 801fa44:	e01a      	b.n	801fa7c <USB_EPStartXfer+0x694>
 801fa46:	683b      	ldr	r3, [r7, #0]
 801fa48:	785b      	ldrb	r3, [r3, #1]
 801fa4a:	2b01      	cmp	r3, #1
 801fa4c:	d116      	bne.n	801fa7c <USB_EPStartXfer+0x694>
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	2250      	movs	r2, #80	@ 0x50
 801fa52:	5a9b      	ldrh	r3, [r3, r2]
 801fa54:	b29b      	uxth	r3, r3
 801fa56:	001a      	movs	r2, r3
 801fa58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fa5a:	189b      	adds	r3, r3, r2
 801fa5c:	643b      	str	r3, [r7, #64]	@ 0x40
 801fa5e:	683b      	ldr	r3, [r7, #0]
 801fa60:	781b      	ldrb	r3, [r3, #0]
 801fa62:	00da      	lsls	r2, r3, #3
 801fa64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fa66:	18d3      	adds	r3, r2, r3
 801fa68:	4a33      	ldr	r2, [pc, #204]	@ (801fb38 <USB_EPStartXfer+0x750>)
 801fa6a:	4694      	mov	ip, r2
 801fa6c:	4463      	add	r3, ip
 801fa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801fa70:	1d7b      	adds	r3, r7, #5
 801fa72:	33ff      	adds	r3, #255	@ 0xff
 801fa74:	681b      	ldr	r3, [r3, #0]
 801fa76:	b29a      	uxth	r2, r3
 801fa78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fa7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801fa7c:	2076      	movs	r0, #118	@ 0x76
 801fa7e:	183b      	adds	r3, r7, r0
 801fa80:	683a      	ldr	r2, [r7, #0]
 801fa82:	8952      	ldrh	r2, [r2, #10]
 801fa84:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fa86:	683b      	ldr	r3, [r7, #0]
 801fa88:	6959      	ldr	r1, [r3, #20]
 801fa8a:	1d7b      	adds	r3, r7, #5
 801fa8c:	33ff      	adds	r3, #255	@ 0xff
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	b29c      	uxth	r4, r3
 801fa92:	183b      	adds	r3, r7, r0
 801fa94:	881a      	ldrh	r2, [r3, #0]
 801fa96:	6878      	ldr	r0, [r7, #4]
 801fa98:	0023      	movs	r3, r4
 801fa9a:	f000 ff17 	bl	80208cc <USB_WritePMA>
 801fa9e:	e1b6      	b.n	801fe0e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801faa0:	683b      	ldr	r3, [r7, #0]
 801faa2:	6a1b      	ldr	r3, [r3, #32]
 801faa4:	1d7a      	adds	r2, r7, #5
 801faa6:	32ff      	adds	r2, #255	@ 0xff
 801faa8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801faaa:	687a      	ldr	r2, [r7, #4]
 801faac:	683b      	ldr	r3, [r7, #0]
 801faae:	781b      	ldrb	r3, [r3, #0]
 801fab0:	009b      	lsls	r3, r3, #2
 801fab2:	18d3      	adds	r3, r2, r3
 801fab4:	881b      	ldrh	r3, [r3, #0]
 801fab6:	b29a      	uxth	r2, r3
 801fab8:	2062      	movs	r0, #98	@ 0x62
 801faba:	183b      	adds	r3, r7, r0
 801fabc:	491f      	ldr	r1, [pc, #124]	@ (801fb3c <USB_EPStartXfer+0x754>)
 801fabe:	400a      	ands	r2, r1
 801fac0:	801a      	strh	r2, [r3, #0]
 801fac2:	687a      	ldr	r2, [r7, #4]
 801fac4:	683b      	ldr	r3, [r7, #0]
 801fac6:	781b      	ldrb	r3, [r3, #0]
 801fac8:	009b      	lsls	r3, r3, #2
 801faca:	18d3      	adds	r3, r2, r3
 801facc:	183a      	adds	r2, r7, r0
 801face:	8812      	ldrh	r2, [r2, #0]
 801fad0:	491b      	ldr	r1, [pc, #108]	@ (801fb40 <USB_EPStartXfer+0x758>)
 801fad2:	430a      	orrs	r2, r1
 801fad4:	b292      	uxth	r2, r2
 801fad6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801fadc:	687b      	ldr	r3, [r7, #4]
 801fade:	2250      	movs	r2, #80	@ 0x50
 801fae0:	5a9b      	ldrh	r3, [r3, r2]
 801fae2:	b29b      	uxth	r3, r3
 801fae4:	001a      	movs	r2, r3
 801fae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fae8:	189b      	adds	r3, r3, r2
 801faea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801faec:	683b      	ldr	r3, [r7, #0]
 801faee:	781b      	ldrb	r3, [r3, #0]
 801faf0:	00da      	lsls	r2, r3, #3
 801faf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801faf4:	18d3      	adds	r3, r2, r3
 801faf6:	4a0e      	ldr	r2, [pc, #56]	@ (801fb30 <USB_EPStartXfer+0x748>)
 801faf8:	4694      	mov	ip, r2
 801fafa:	4463      	add	r3, ip
 801fafc:	65bb      	str	r3, [r7, #88]	@ 0x58
 801fafe:	1d7b      	adds	r3, r7, #5
 801fb00:	33ff      	adds	r3, #255	@ 0xff
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	b29a      	uxth	r2, r3
 801fb06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801fb08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801fb0a:	2076      	movs	r0, #118	@ 0x76
 801fb0c:	183b      	adds	r3, r7, r0
 801fb0e:	683a      	ldr	r2, [r7, #0]
 801fb10:	8912      	ldrh	r2, [r2, #8]
 801fb12:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fb14:	683b      	ldr	r3, [r7, #0]
 801fb16:	6959      	ldr	r1, [r3, #20]
 801fb18:	1d7b      	adds	r3, r7, #5
 801fb1a:	33ff      	adds	r3, #255	@ 0xff
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	b29c      	uxth	r4, r3
 801fb20:	183b      	adds	r3, r7, r0
 801fb22:	881a      	ldrh	r2, [r3, #0]
 801fb24:	6878      	ldr	r0, [r7, #4]
 801fb26:	0023      	movs	r3, r4
 801fb28:	f000 fed0 	bl	80208cc <USB_WritePMA>
 801fb2c:	e16f      	b.n	801fe0e <USB_EPStartXfer+0xa26>
 801fb2e:	46c0      	nop			@ (mov r8, r8)
 801fb30:	00000402 	.word	0x00000402
 801fb34:	ffff8000 	.word	0xffff8000
 801fb38:	00000406 	.word	0x00000406
 801fb3c:	ffff8e8f 	.word	0xffff8e8f
 801fb40:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801fb44:	683b      	ldr	r3, [r7, #0]
 801fb46:	6a1a      	ldr	r2, [r3, #32]
 801fb48:	1d7b      	adds	r3, r7, #5
 801fb4a:	33ff      	adds	r3, #255	@ 0xff
 801fb4c:	681b      	ldr	r3, [r3, #0]
 801fb4e:	1ad2      	subs	r2, r2, r3
 801fb50:	683b      	ldr	r3, [r7, #0]
 801fb52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801fb54:	687a      	ldr	r2, [r7, #4]
 801fb56:	683b      	ldr	r3, [r7, #0]
 801fb58:	781b      	ldrb	r3, [r3, #0]
 801fb5a:	009b      	lsls	r3, r3, #2
 801fb5c:	18d3      	adds	r3, r2, r3
 801fb5e:	881b      	ldrh	r3, [r3, #0]
 801fb60:	b29b      	uxth	r3, r3
 801fb62:	001a      	movs	r2, r3
 801fb64:	2340      	movs	r3, #64	@ 0x40
 801fb66:	4013      	ands	r3, r2
 801fb68:	d100      	bne.n	801fb6c <USB_EPStartXfer+0x784>
 801fb6a:	e0a4      	b.n	801fcb6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	673b      	str	r3, [r7, #112]	@ 0x70
 801fb70:	683b      	ldr	r3, [r7, #0]
 801fb72:	785b      	ldrb	r3, [r3, #1]
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d000      	beq.n	801fb7a <USB_EPStartXfer+0x792>
 801fb78:	e070      	b.n	801fc5c <USB_EPStartXfer+0x874>
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	2250      	movs	r2, #80	@ 0x50
 801fb82:	5a9b      	ldrh	r3, [r3, r2]
 801fb84:	b29b      	uxth	r3, r3
 801fb86:	001a      	movs	r2, r3
 801fb88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801fb8a:	189b      	adds	r3, r3, r2
 801fb8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801fb8e:	683b      	ldr	r3, [r7, #0]
 801fb90:	781b      	ldrb	r3, [r3, #0]
 801fb92:	00da      	lsls	r2, r3, #3
 801fb94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801fb96:	18d3      	adds	r3, r2, r3
 801fb98:	4abc      	ldr	r2, [pc, #752]	@ (801fe8c <USB_EPStartXfer+0xaa4>)
 801fb9a:	4694      	mov	ip, r2
 801fb9c:	4463      	add	r3, ip
 801fb9e:	667b      	str	r3, [r7, #100]	@ 0x64
 801fba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fba2:	881b      	ldrh	r3, [r3, #0]
 801fba4:	b29b      	uxth	r3, r3
 801fba6:	059b      	lsls	r3, r3, #22
 801fba8:	0d9b      	lsrs	r3, r3, #22
 801fbaa:	b29a      	uxth	r2, r3
 801fbac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fbae:	801a      	strh	r2, [r3, #0]
 801fbb0:	1d7b      	adds	r3, r7, #5
 801fbb2:	33ff      	adds	r3, #255	@ 0xff
 801fbb4:	681b      	ldr	r3, [r3, #0]
 801fbb6:	2b3e      	cmp	r3, #62	@ 0x3e
 801fbb8:	d922      	bls.n	801fc00 <USB_EPStartXfer+0x818>
 801fbba:	1d7b      	adds	r3, r7, #5
 801fbbc:	33ff      	adds	r3, #255	@ 0xff
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	095b      	lsrs	r3, r3, #5
 801fbc2:	21f0      	movs	r1, #240	@ 0xf0
 801fbc4:	187a      	adds	r2, r7, r1
 801fbc6:	6013      	str	r3, [r2, #0]
 801fbc8:	1d7b      	adds	r3, r7, #5
 801fbca:	33ff      	adds	r3, #255	@ 0xff
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	221f      	movs	r2, #31
 801fbd0:	4013      	ands	r3, r2
 801fbd2:	d104      	bne.n	801fbde <USB_EPStartXfer+0x7f6>
 801fbd4:	187b      	adds	r3, r7, r1
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	3b01      	subs	r3, #1
 801fbda:	187a      	adds	r2, r7, r1
 801fbdc:	6013      	str	r3, [r2, #0]
 801fbde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fbe0:	881b      	ldrh	r3, [r3, #0]
 801fbe2:	b29a      	uxth	r2, r3
 801fbe4:	23f0      	movs	r3, #240	@ 0xf0
 801fbe6:	18fb      	adds	r3, r7, r3
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	b29b      	uxth	r3, r3
 801fbec:	029b      	lsls	r3, r3, #10
 801fbee:	b29b      	uxth	r3, r3
 801fbf0:	4313      	orrs	r3, r2
 801fbf2:	b29b      	uxth	r3, r3
 801fbf4:	4aa6      	ldr	r2, [pc, #664]	@ (801fe90 <USB_EPStartXfer+0xaa8>)
 801fbf6:	4313      	orrs	r3, r2
 801fbf8:	b29a      	uxth	r2, r3
 801fbfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fbfc:	801a      	strh	r2, [r3, #0]
 801fbfe:	e048      	b.n	801fc92 <USB_EPStartXfer+0x8aa>
 801fc00:	1d7b      	adds	r3, r7, #5
 801fc02:	33ff      	adds	r3, #255	@ 0xff
 801fc04:	681b      	ldr	r3, [r3, #0]
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d108      	bne.n	801fc1c <USB_EPStartXfer+0x834>
 801fc0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fc0c:	881b      	ldrh	r3, [r3, #0]
 801fc0e:	b29b      	uxth	r3, r3
 801fc10:	4a9f      	ldr	r2, [pc, #636]	@ (801fe90 <USB_EPStartXfer+0xaa8>)
 801fc12:	4313      	orrs	r3, r2
 801fc14:	b29a      	uxth	r2, r3
 801fc16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fc18:	801a      	strh	r2, [r3, #0]
 801fc1a:	e03a      	b.n	801fc92 <USB_EPStartXfer+0x8aa>
 801fc1c:	1d7b      	adds	r3, r7, #5
 801fc1e:	33ff      	adds	r3, #255	@ 0xff
 801fc20:	681b      	ldr	r3, [r3, #0]
 801fc22:	085b      	lsrs	r3, r3, #1
 801fc24:	21f0      	movs	r1, #240	@ 0xf0
 801fc26:	187a      	adds	r2, r7, r1
 801fc28:	6013      	str	r3, [r2, #0]
 801fc2a:	1d7b      	adds	r3, r7, #5
 801fc2c:	33ff      	adds	r3, #255	@ 0xff
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	2201      	movs	r2, #1
 801fc32:	4013      	ands	r3, r2
 801fc34:	d004      	beq.n	801fc40 <USB_EPStartXfer+0x858>
 801fc36:	187b      	adds	r3, r7, r1
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	3301      	adds	r3, #1
 801fc3c:	187a      	adds	r2, r7, r1
 801fc3e:	6013      	str	r3, [r2, #0]
 801fc40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fc42:	881b      	ldrh	r3, [r3, #0]
 801fc44:	b29a      	uxth	r2, r3
 801fc46:	23f0      	movs	r3, #240	@ 0xf0
 801fc48:	18fb      	adds	r3, r7, r3
 801fc4a:	681b      	ldr	r3, [r3, #0]
 801fc4c:	b29b      	uxth	r3, r3
 801fc4e:	029b      	lsls	r3, r3, #10
 801fc50:	b29b      	uxth	r3, r3
 801fc52:	4313      	orrs	r3, r2
 801fc54:	b29a      	uxth	r2, r3
 801fc56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801fc58:	801a      	strh	r2, [r3, #0]
 801fc5a:	e01a      	b.n	801fc92 <USB_EPStartXfer+0x8aa>
 801fc5c:	683b      	ldr	r3, [r7, #0]
 801fc5e:	785b      	ldrb	r3, [r3, #1]
 801fc60:	2b01      	cmp	r3, #1
 801fc62:	d116      	bne.n	801fc92 <USB_EPStartXfer+0x8aa>
 801fc64:	687b      	ldr	r3, [r7, #4]
 801fc66:	2250      	movs	r2, #80	@ 0x50
 801fc68:	5a9b      	ldrh	r3, [r3, r2]
 801fc6a:	b29b      	uxth	r3, r3
 801fc6c:	001a      	movs	r2, r3
 801fc6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801fc70:	189b      	adds	r3, r3, r2
 801fc72:	673b      	str	r3, [r7, #112]	@ 0x70
 801fc74:	683b      	ldr	r3, [r7, #0]
 801fc76:	781b      	ldrb	r3, [r3, #0]
 801fc78:	00da      	lsls	r2, r3, #3
 801fc7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801fc7c:	18d3      	adds	r3, r2, r3
 801fc7e:	4a83      	ldr	r2, [pc, #524]	@ (801fe8c <USB_EPStartXfer+0xaa4>)
 801fc80:	4694      	mov	ip, r2
 801fc82:	4463      	add	r3, ip
 801fc84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801fc86:	1d7b      	adds	r3, r7, #5
 801fc88:	33ff      	adds	r3, #255	@ 0xff
 801fc8a:	681b      	ldr	r3, [r3, #0]
 801fc8c:	b29a      	uxth	r2, r3
 801fc8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801fc90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801fc92:	2076      	movs	r0, #118	@ 0x76
 801fc94:	183b      	adds	r3, r7, r0
 801fc96:	683a      	ldr	r2, [r7, #0]
 801fc98:	8952      	ldrh	r2, [r2, #10]
 801fc9a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fc9c:	683b      	ldr	r3, [r7, #0]
 801fc9e:	6959      	ldr	r1, [r3, #20]
 801fca0:	1d7b      	adds	r3, r7, #5
 801fca2:	33ff      	adds	r3, #255	@ 0xff
 801fca4:	681b      	ldr	r3, [r3, #0]
 801fca6:	b29c      	uxth	r4, r3
 801fca8:	183b      	adds	r3, r7, r0
 801fcaa:	881a      	ldrh	r2, [r3, #0]
 801fcac:	6878      	ldr	r0, [r7, #4]
 801fcae:	0023      	movs	r3, r4
 801fcb0:	f000 fe0c 	bl	80208cc <USB_WritePMA>
 801fcb4:	e0ab      	b.n	801fe0e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801fcb6:	683b      	ldr	r3, [r7, #0]
 801fcb8:	785b      	ldrb	r3, [r3, #1]
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d000      	beq.n	801fcc0 <USB_EPStartXfer+0x8d8>
 801fcbe:	e070      	b.n	801fda2 <USB_EPStartXfer+0x9ba>
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	2250      	movs	r2, #80	@ 0x50
 801fcc8:	5a9b      	ldrh	r3, [r3, r2]
 801fcca:	b29b      	uxth	r3, r3
 801fccc:	001a      	movs	r2, r3
 801fcce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801fcd0:	189b      	adds	r3, r3, r2
 801fcd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	781b      	ldrb	r3, [r3, #0]
 801fcd8:	00da      	lsls	r2, r3, #3
 801fcda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801fcdc:	18d3      	adds	r3, r2, r3
 801fcde:	4a6d      	ldr	r2, [pc, #436]	@ (801fe94 <USB_EPStartXfer+0xaac>)
 801fce0:	4694      	mov	ip, r2
 801fce2:	4463      	add	r3, ip
 801fce4:	67bb      	str	r3, [r7, #120]	@ 0x78
 801fce6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fce8:	881b      	ldrh	r3, [r3, #0]
 801fcea:	b29b      	uxth	r3, r3
 801fcec:	059b      	lsls	r3, r3, #22
 801fcee:	0d9b      	lsrs	r3, r3, #22
 801fcf0:	b29a      	uxth	r2, r3
 801fcf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fcf4:	801a      	strh	r2, [r3, #0]
 801fcf6:	1d7b      	adds	r3, r7, #5
 801fcf8:	33ff      	adds	r3, #255	@ 0xff
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	2b3e      	cmp	r3, #62	@ 0x3e
 801fcfe:	d922      	bls.n	801fd46 <USB_EPStartXfer+0x95e>
 801fd00:	1d7b      	adds	r3, r7, #5
 801fd02:	33ff      	adds	r3, #255	@ 0xff
 801fd04:	681b      	ldr	r3, [r3, #0]
 801fd06:	095b      	lsrs	r3, r3, #5
 801fd08:	21ec      	movs	r1, #236	@ 0xec
 801fd0a:	187a      	adds	r2, r7, r1
 801fd0c:	6013      	str	r3, [r2, #0]
 801fd0e:	1d7b      	adds	r3, r7, #5
 801fd10:	33ff      	adds	r3, #255	@ 0xff
 801fd12:	681b      	ldr	r3, [r3, #0]
 801fd14:	221f      	movs	r2, #31
 801fd16:	4013      	ands	r3, r2
 801fd18:	d104      	bne.n	801fd24 <USB_EPStartXfer+0x93c>
 801fd1a:	187b      	adds	r3, r7, r1
 801fd1c:	681b      	ldr	r3, [r3, #0]
 801fd1e:	3b01      	subs	r3, #1
 801fd20:	187a      	adds	r2, r7, r1
 801fd22:	6013      	str	r3, [r2, #0]
 801fd24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fd26:	881b      	ldrh	r3, [r3, #0]
 801fd28:	b29a      	uxth	r2, r3
 801fd2a:	23ec      	movs	r3, #236	@ 0xec
 801fd2c:	18fb      	adds	r3, r7, r3
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	b29b      	uxth	r3, r3
 801fd32:	029b      	lsls	r3, r3, #10
 801fd34:	b29b      	uxth	r3, r3
 801fd36:	4313      	orrs	r3, r2
 801fd38:	b29b      	uxth	r3, r3
 801fd3a:	4a55      	ldr	r2, [pc, #340]	@ (801fe90 <USB_EPStartXfer+0xaa8>)
 801fd3c:	4313      	orrs	r3, r2
 801fd3e:	b29a      	uxth	r2, r3
 801fd40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fd42:	801a      	strh	r2, [r3, #0]
 801fd44:	e052      	b.n	801fdec <USB_EPStartXfer+0xa04>
 801fd46:	1d7b      	adds	r3, r7, #5
 801fd48:	33ff      	adds	r3, #255	@ 0xff
 801fd4a:	681b      	ldr	r3, [r3, #0]
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	d108      	bne.n	801fd62 <USB_EPStartXfer+0x97a>
 801fd50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fd52:	881b      	ldrh	r3, [r3, #0]
 801fd54:	b29b      	uxth	r3, r3
 801fd56:	4a4e      	ldr	r2, [pc, #312]	@ (801fe90 <USB_EPStartXfer+0xaa8>)
 801fd58:	4313      	orrs	r3, r2
 801fd5a:	b29a      	uxth	r2, r3
 801fd5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fd5e:	801a      	strh	r2, [r3, #0]
 801fd60:	e044      	b.n	801fdec <USB_EPStartXfer+0xa04>
 801fd62:	1d7b      	adds	r3, r7, #5
 801fd64:	33ff      	adds	r3, #255	@ 0xff
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	085b      	lsrs	r3, r3, #1
 801fd6a:	21ec      	movs	r1, #236	@ 0xec
 801fd6c:	187a      	adds	r2, r7, r1
 801fd6e:	6013      	str	r3, [r2, #0]
 801fd70:	1d7b      	adds	r3, r7, #5
 801fd72:	33ff      	adds	r3, #255	@ 0xff
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	2201      	movs	r2, #1
 801fd78:	4013      	ands	r3, r2
 801fd7a:	d004      	beq.n	801fd86 <USB_EPStartXfer+0x99e>
 801fd7c:	187b      	adds	r3, r7, r1
 801fd7e:	681b      	ldr	r3, [r3, #0]
 801fd80:	3301      	adds	r3, #1
 801fd82:	187a      	adds	r2, r7, r1
 801fd84:	6013      	str	r3, [r2, #0]
 801fd86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fd88:	881b      	ldrh	r3, [r3, #0]
 801fd8a:	b29a      	uxth	r2, r3
 801fd8c:	23ec      	movs	r3, #236	@ 0xec
 801fd8e:	18fb      	adds	r3, r7, r3
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	b29b      	uxth	r3, r3
 801fd94:	029b      	lsls	r3, r3, #10
 801fd96:	b29b      	uxth	r3, r3
 801fd98:	4313      	orrs	r3, r2
 801fd9a:	b29a      	uxth	r2, r3
 801fd9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801fd9e:	801a      	strh	r2, [r3, #0]
 801fda0:	e024      	b.n	801fdec <USB_EPStartXfer+0xa04>
 801fda2:	683b      	ldr	r3, [r7, #0]
 801fda4:	785b      	ldrb	r3, [r3, #1]
 801fda6:	2b01      	cmp	r3, #1
 801fda8:	d120      	bne.n	801fdec <USB_EPStartXfer+0xa04>
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	2184      	movs	r1, #132	@ 0x84
 801fdae:	187a      	adds	r2, r7, r1
 801fdb0:	6013      	str	r3, [r2, #0]
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	2250      	movs	r2, #80	@ 0x50
 801fdb6:	5a9b      	ldrh	r3, [r3, r2]
 801fdb8:	b29b      	uxth	r3, r3
 801fdba:	001a      	movs	r2, r3
 801fdbc:	187b      	adds	r3, r7, r1
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	189b      	adds	r3, r3, r2
 801fdc2:	187a      	adds	r2, r7, r1
 801fdc4:	6013      	str	r3, [r2, #0]
 801fdc6:	683b      	ldr	r3, [r7, #0]
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	00da      	lsls	r2, r3, #3
 801fdcc:	187b      	adds	r3, r7, r1
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	18d3      	adds	r3, r2, r3
 801fdd2:	4a30      	ldr	r2, [pc, #192]	@ (801fe94 <USB_EPStartXfer+0xaac>)
 801fdd4:	4694      	mov	ip, r2
 801fdd6:	4463      	add	r3, ip
 801fdd8:	2180      	movs	r1, #128	@ 0x80
 801fdda:	187a      	adds	r2, r7, r1
 801fddc:	6013      	str	r3, [r2, #0]
 801fdde:	1d7b      	adds	r3, r7, #5
 801fde0:	33ff      	adds	r3, #255	@ 0xff
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	b29a      	uxth	r2, r3
 801fde6:	187b      	adds	r3, r7, r1
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801fdec:	2076      	movs	r0, #118	@ 0x76
 801fdee:	183b      	adds	r3, r7, r0
 801fdf0:	683a      	ldr	r2, [r7, #0]
 801fdf2:	8912      	ldrh	r2, [r2, #8]
 801fdf4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801fdf6:	683b      	ldr	r3, [r7, #0]
 801fdf8:	6959      	ldr	r1, [r3, #20]
 801fdfa:	1d7b      	adds	r3, r7, #5
 801fdfc:	33ff      	adds	r3, #255	@ 0xff
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	b29c      	uxth	r4, r3
 801fe02:	183b      	adds	r3, r7, r0
 801fe04:	881a      	ldrh	r2, [r3, #0]
 801fe06:	6878      	ldr	r0, [r7, #4]
 801fe08:	0023      	movs	r3, r4
 801fe0a:	f000 fd5f 	bl	80208cc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801fe0e:	687a      	ldr	r2, [r7, #4]
 801fe10:	683b      	ldr	r3, [r7, #0]
 801fe12:	781b      	ldrb	r3, [r3, #0]
 801fe14:	009b      	lsls	r3, r3, #2
 801fe16:	18d3      	adds	r3, r2, r3
 801fe18:	881b      	ldrh	r3, [r3, #0]
 801fe1a:	b29a      	uxth	r2, r3
 801fe1c:	200a      	movs	r0, #10
 801fe1e:	183b      	adds	r3, r7, r0
 801fe20:	491d      	ldr	r1, [pc, #116]	@ (801fe98 <USB_EPStartXfer+0xab0>)
 801fe22:	400a      	ands	r2, r1
 801fe24:	801a      	strh	r2, [r3, #0]
 801fe26:	183b      	adds	r3, r7, r0
 801fe28:	183a      	adds	r2, r7, r0
 801fe2a:	8812      	ldrh	r2, [r2, #0]
 801fe2c:	2110      	movs	r1, #16
 801fe2e:	404a      	eors	r2, r1
 801fe30:	801a      	strh	r2, [r3, #0]
 801fe32:	183b      	adds	r3, r7, r0
 801fe34:	183a      	adds	r2, r7, r0
 801fe36:	8812      	ldrh	r2, [r2, #0]
 801fe38:	2120      	movs	r1, #32
 801fe3a:	404a      	eors	r2, r1
 801fe3c:	801a      	strh	r2, [r3, #0]
 801fe3e:	687a      	ldr	r2, [r7, #4]
 801fe40:	683b      	ldr	r3, [r7, #0]
 801fe42:	781b      	ldrb	r3, [r3, #0]
 801fe44:	009b      	lsls	r3, r3, #2
 801fe46:	18d3      	adds	r3, r2, r3
 801fe48:	183a      	adds	r2, r7, r0
 801fe4a:	8812      	ldrh	r2, [r2, #0]
 801fe4c:	4913      	ldr	r1, [pc, #76]	@ (801fe9c <USB_EPStartXfer+0xab4>)
 801fe4e:	430a      	orrs	r2, r1
 801fe50:	b292      	uxth	r2, r2
 801fe52:	801a      	strh	r2, [r3, #0]
 801fe54:	f000 fbf4 	bl	8020640 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801fe58:	683b      	ldr	r3, [r7, #0]
 801fe5a:	7b1b      	ldrb	r3, [r3, #12]
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d000      	beq.n	801fe62 <USB_EPStartXfer+0xa7a>
 801fe60:	e0a9      	b.n	801ffb6 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801fe62:	683b      	ldr	r3, [r7, #0]
 801fe64:	699a      	ldr	r2, [r3, #24]
 801fe66:	683b      	ldr	r3, [r7, #0]
 801fe68:	691b      	ldr	r3, [r3, #16]
 801fe6a:	429a      	cmp	r2, r3
 801fe6c:	d918      	bls.n	801fea0 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801fe6e:	683b      	ldr	r3, [r7, #0]
 801fe70:	691b      	ldr	r3, [r3, #16]
 801fe72:	1d7a      	adds	r2, r7, #5
 801fe74:	32ff      	adds	r2, #255	@ 0xff
 801fe76:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801fe78:	683b      	ldr	r3, [r7, #0]
 801fe7a:	699a      	ldr	r2, [r3, #24]
 801fe7c:	1d7b      	adds	r3, r7, #5
 801fe7e:	33ff      	adds	r3, #255	@ 0xff
 801fe80:	681b      	ldr	r3, [r3, #0]
 801fe82:	1ad2      	subs	r2, r2, r3
 801fe84:	683b      	ldr	r3, [r7, #0]
 801fe86:	619a      	str	r2, [r3, #24]
 801fe88:	e012      	b.n	801feb0 <USB_EPStartXfer+0xac8>
 801fe8a:	46c0      	nop			@ (mov r8, r8)
 801fe8c:	00000406 	.word	0x00000406
 801fe90:	ffff8000 	.word	0xffff8000
 801fe94:	00000402 	.word	0x00000402
 801fe98:	ffff8fbf 	.word	0xffff8fbf
 801fe9c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801fea0:	683b      	ldr	r3, [r7, #0]
 801fea2:	699b      	ldr	r3, [r3, #24]
 801fea4:	1d7a      	adds	r2, r7, #5
 801fea6:	32ff      	adds	r2, #255	@ 0xff
 801fea8:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801feaa:	683b      	ldr	r3, [r7, #0]
 801feac:	2200      	movs	r2, #0
 801feae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	2190      	movs	r1, #144	@ 0x90
 801feb4:	187a      	adds	r2, r7, r1
 801feb6:	6013      	str	r3, [r2, #0]
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	2250      	movs	r2, #80	@ 0x50
 801febc:	5a9b      	ldrh	r3, [r3, r2]
 801febe:	b29b      	uxth	r3, r3
 801fec0:	001a      	movs	r2, r3
 801fec2:	187b      	adds	r3, r7, r1
 801fec4:	681b      	ldr	r3, [r3, #0]
 801fec6:	189b      	adds	r3, r3, r2
 801fec8:	187a      	adds	r2, r7, r1
 801feca:	6013      	str	r3, [r2, #0]
 801fecc:	683b      	ldr	r3, [r7, #0]
 801fece:	781b      	ldrb	r3, [r3, #0]
 801fed0:	00da      	lsls	r2, r3, #3
 801fed2:	187b      	adds	r3, r7, r1
 801fed4:	681b      	ldr	r3, [r3, #0]
 801fed6:	18d3      	adds	r3, r2, r3
 801fed8:	4acf      	ldr	r2, [pc, #828]	@ (8020218 <USB_EPStartXfer+0xe30>)
 801feda:	4694      	mov	ip, r2
 801fedc:	4463      	add	r3, ip
 801fede:	218c      	movs	r1, #140	@ 0x8c
 801fee0:	187a      	adds	r2, r7, r1
 801fee2:	6013      	str	r3, [r2, #0]
 801fee4:	187b      	adds	r3, r7, r1
 801fee6:	681b      	ldr	r3, [r3, #0]
 801fee8:	881b      	ldrh	r3, [r3, #0]
 801feea:	b29b      	uxth	r3, r3
 801feec:	059b      	lsls	r3, r3, #22
 801feee:	0d9b      	lsrs	r3, r3, #22
 801fef0:	b29a      	uxth	r2, r3
 801fef2:	187b      	adds	r3, r7, r1
 801fef4:	681b      	ldr	r3, [r3, #0]
 801fef6:	801a      	strh	r2, [r3, #0]
 801fef8:	1d7b      	adds	r3, r7, #5
 801fefa:	33ff      	adds	r3, #255	@ 0xff
 801fefc:	681b      	ldr	r3, [r3, #0]
 801fefe:	2b3e      	cmp	r3, #62	@ 0x3e
 801ff00:	d925      	bls.n	801ff4e <USB_EPStartXfer+0xb66>
 801ff02:	1d7b      	adds	r3, r7, #5
 801ff04:	33ff      	adds	r3, #255	@ 0xff
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	095b      	lsrs	r3, r3, #5
 801ff0a:	21e8      	movs	r1, #232	@ 0xe8
 801ff0c:	187a      	adds	r2, r7, r1
 801ff0e:	6013      	str	r3, [r2, #0]
 801ff10:	1d7b      	adds	r3, r7, #5
 801ff12:	33ff      	adds	r3, #255	@ 0xff
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	221f      	movs	r2, #31
 801ff18:	4013      	ands	r3, r2
 801ff1a:	d104      	bne.n	801ff26 <USB_EPStartXfer+0xb3e>
 801ff1c:	187b      	adds	r3, r7, r1
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	3b01      	subs	r3, #1
 801ff22:	187a      	adds	r2, r7, r1
 801ff24:	6013      	str	r3, [r2, #0]
 801ff26:	218c      	movs	r1, #140	@ 0x8c
 801ff28:	187b      	adds	r3, r7, r1
 801ff2a:	681b      	ldr	r3, [r3, #0]
 801ff2c:	881b      	ldrh	r3, [r3, #0]
 801ff2e:	b29a      	uxth	r2, r3
 801ff30:	23e8      	movs	r3, #232	@ 0xe8
 801ff32:	18fb      	adds	r3, r7, r3
 801ff34:	681b      	ldr	r3, [r3, #0]
 801ff36:	b29b      	uxth	r3, r3
 801ff38:	029b      	lsls	r3, r3, #10
 801ff3a:	b29b      	uxth	r3, r3
 801ff3c:	4313      	orrs	r3, r2
 801ff3e:	b29b      	uxth	r3, r3
 801ff40:	4ab6      	ldr	r2, [pc, #728]	@ (802021c <USB_EPStartXfer+0xe34>)
 801ff42:	4313      	orrs	r3, r2
 801ff44:	b29a      	uxth	r2, r3
 801ff46:	187b      	adds	r3, r7, r1
 801ff48:	681b      	ldr	r3, [r3, #0]
 801ff4a:	801a      	strh	r2, [r3, #0]
 801ff4c:	e353      	b.n	80205f6 <USB_EPStartXfer+0x120e>
 801ff4e:	1d7b      	adds	r3, r7, #5
 801ff50:	33ff      	adds	r3, #255	@ 0xff
 801ff52:	681b      	ldr	r3, [r3, #0]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d10b      	bne.n	801ff70 <USB_EPStartXfer+0xb88>
 801ff58:	218c      	movs	r1, #140	@ 0x8c
 801ff5a:	187b      	adds	r3, r7, r1
 801ff5c:	681b      	ldr	r3, [r3, #0]
 801ff5e:	881b      	ldrh	r3, [r3, #0]
 801ff60:	b29b      	uxth	r3, r3
 801ff62:	4aae      	ldr	r2, [pc, #696]	@ (802021c <USB_EPStartXfer+0xe34>)
 801ff64:	4313      	orrs	r3, r2
 801ff66:	b29a      	uxth	r2, r3
 801ff68:	187b      	adds	r3, r7, r1
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	801a      	strh	r2, [r3, #0]
 801ff6e:	e342      	b.n	80205f6 <USB_EPStartXfer+0x120e>
 801ff70:	1d7b      	adds	r3, r7, #5
 801ff72:	33ff      	adds	r3, #255	@ 0xff
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	085b      	lsrs	r3, r3, #1
 801ff78:	21e8      	movs	r1, #232	@ 0xe8
 801ff7a:	187a      	adds	r2, r7, r1
 801ff7c:	6013      	str	r3, [r2, #0]
 801ff7e:	1d7b      	adds	r3, r7, #5
 801ff80:	33ff      	adds	r3, #255	@ 0xff
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	2201      	movs	r2, #1
 801ff86:	4013      	ands	r3, r2
 801ff88:	d004      	beq.n	801ff94 <USB_EPStartXfer+0xbac>
 801ff8a:	187b      	adds	r3, r7, r1
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	3301      	adds	r3, #1
 801ff90:	187a      	adds	r2, r7, r1
 801ff92:	6013      	str	r3, [r2, #0]
 801ff94:	218c      	movs	r1, #140	@ 0x8c
 801ff96:	187b      	adds	r3, r7, r1
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	881b      	ldrh	r3, [r3, #0]
 801ff9c:	b29a      	uxth	r2, r3
 801ff9e:	23e8      	movs	r3, #232	@ 0xe8
 801ffa0:	18fb      	adds	r3, r7, r3
 801ffa2:	681b      	ldr	r3, [r3, #0]
 801ffa4:	b29b      	uxth	r3, r3
 801ffa6:	029b      	lsls	r3, r3, #10
 801ffa8:	b29b      	uxth	r3, r3
 801ffaa:	4313      	orrs	r3, r2
 801ffac:	b29a      	uxth	r2, r3
 801ffae:	187b      	adds	r3, r7, r1
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	801a      	strh	r2, [r3, #0]
 801ffb4:	e31f      	b.n	80205f6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801ffb6:	683b      	ldr	r3, [r7, #0]
 801ffb8:	78db      	ldrb	r3, [r3, #3]
 801ffba:	2b02      	cmp	r3, #2
 801ffbc:	d000      	beq.n	801ffc0 <USB_EPStartXfer+0xbd8>
 801ffbe:	e191      	b.n	80202e4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801ffc0:	683b      	ldr	r3, [r7, #0]
 801ffc2:	785b      	ldrb	r3, [r3, #1]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d000      	beq.n	801ffca <USB_EPStartXfer+0xbe2>
 801ffc8:	e07c      	b.n	80200c4 <USB_EPStartXfer+0xcdc>
 801ffca:	687b      	ldr	r3, [r7, #4]
 801ffcc:	21ac      	movs	r1, #172	@ 0xac
 801ffce:	187a      	adds	r2, r7, r1
 801ffd0:	6013      	str	r3, [r2, #0]
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	2250      	movs	r2, #80	@ 0x50
 801ffd6:	5a9b      	ldrh	r3, [r3, r2]
 801ffd8:	b29b      	uxth	r3, r3
 801ffda:	001a      	movs	r2, r3
 801ffdc:	187b      	adds	r3, r7, r1
 801ffde:	681b      	ldr	r3, [r3, #0]
 801ffe0:	189b      	adds	r3, r3, r2
 801ffe2:	187a      	adds	r2, r7, r1
 801ffe4:	6013      	str	r3, [r2, #0]
 801ffe6:	683b      	ldr	r3, [r7, #0]
 801ffe8:	781b      	ldrb	r3, [r3, #0]
 801ffea:	00da      	lsls	r2, r3, #3
 801ffec:	187b      	adds	r3, r7, r1
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	18d3      	adds	r3, r2, r3
 801fff2:	4a8b      	ldr	r2, [pc, #556]	@ (8020220 <USB_EPStartXfer+0xe38>)
 801fff4:	4694      	mov	ip, r2
 801fff6:	4463      	add	r3, ip
 801fff8:	21a8      	movs	r1, #168	@ 0xa8
 801fffa:	187a      	adds	r2, r7, r1
 801fffc:	6013      	str	r3, [r2, #0]
 801fffe:	187b      	adds	r3, r7, r1
 8020000:	681b      	ldr	r3, [r3, #0]
 8020002:	881b      	ldrh	r3, [r3, #0]
 8020004:	b29b      	uxth	r3, r3
 8020006:	059b      	lsls	r3, r3, #22
 8020008:	0d9b      	lsrs	r3, r3, #22
 802000a:	b29a      	uxth	r2, r3
 802000c:	187b      	adds	r3, r7, r1
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	801a      	strh	r2, [r3, #0]
 8020012:	683b      	ldr	r3, [r7, #0]
 8020014:	691b      	ldr	r3, [r3, #16]
 8020016:	2b3e      	cmp	r3, #62	@ 0x3e
 8020018:	d923      	bls.n	8020062 <USB_EPStartXfer+0xc7a>
 802001a:	683b      	ldr	r3, [r7, #0]
 802001c:	691b      	ldr	r3, [r3, #16]
 802001e:	095b      	lsrs	r3, r3, #5
 8020020:	21e4      	movs	r1, #228	@ 0xe4
 8020022:	187a      	adds	r2, r7, r1
 8020024:	6013      	str	r3, [r2, #0]
 8020026:	683b      	ldr	r3, [r7, #0]
 8020028:	691b      	ldr	r3, [r3, #16]
 802002a:	221f      	movs	r2, #31
 802002c:	4013      	ands	r3, r2
 802002e:	d104      	bne.n	802003a <USB_EPStartXfer+0xc52>
 8020030:	187b      	adds	r3, r7, r1
 8020032:	681b      	ldr	r3, [r3, #0]
 8020034:	3b01      	subs	r3, #1
 8020036:	187a      	adds	r2, r7, r1
 8020038:	6013      	str	r3, [r2, #0]
 802003a:	21a8      	movs	r1, #168	@ 0xa8
 802003c:	187b      	adds	r3, r7, r1
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	881b      	ldrh	r3, [r3, #0]
 8020042:	b29a      	uxth	r2, r3
 8020044:	23e4      	movs	r3, #228	@ 0xe4
 8020046:	18fb      	adds	r3, r7, r3
 8020048:	681b      	ldr	r3, [r3, #0]
 802004a:	b29b      	uxth	r3, r3
 802004c:	029b      	lsls	r3, r3, #10
 802004e:	b29b      	uxth	r3, r3
 8020050:	4313      	orrs	r3, r2
 8020052:	b29b      	uxth	r3, r3
 8020054:	4a71      	ldr	r2, [pc, #452]	@ (802021c <USB_EPStartXfer+0xe34>)
 8020056:	4313      	orrs	r3, r2
 8020058:	b29a      	uxth	r2, r3
 802005a:	187b      	adds	r3, r7, r1
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	801a      	strh	r2, [r3, #0]
 8020060:	e054      	b.n	802010c <USB_EPStartXfer+0xd24>
 8020062:	683b      	ldr	r3, [r7, #0]
 8020064:	691b      	ldr	r3, [r3, #16]
 8020066:	2b00      	cmp	r3, #0
 8020068:	d10b      	bne.n	8020082 <USB_EPStartXfer+0xc9a>
 802006a:	21a8      	movs	r1, #168	@ 0xa8
 802006c:	187b      	adds	r3, r7, r1
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	881b      	ldrh	r3, [r3, #0]
 8020072:	b29b      	uxth	r3, r3
 8020074:	4a69      	ldr	r2, [pc, #420]	@ (802021c <USB_EPStartXfer+0xe34>)
 8020076:	4313      	orrs	r3, r2
 8020078:	b29a      	uxth	r2, r3
 802007a:	187b      	adds	r3, r7, r1
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	801a      	strh	r2, [r3, #0]
 8020080:	e044      	b.n	802010c <USB_EPStartXfer+0xd24>
 8020082:	683b      	ldr	r3, [r7, #0]
 8020084:	691b      	ldr	r3, [r3, #16]
 8020086:	085b      	lsrs	r3, r3, #1
 8020088:	21e4      	movs	r1, #228	@ 0xe4
 802008a:	187a      	adds	r2, r7, r1
 802008c:	6013      	str	r3, [r2, #0]
 802008e:	683b      	ldr	r3, [r7, #0]
 8020090:	691b      	ldr	r3, [r3, #16]
 8020092:	2201      	movs	r2, #1
 8020094:	4013      	ands	r3, r2
 8020096:	d004      	beq.n	80200a2 <USB_EPStartXfer+0xcba>
 8020098:	187b      	adds	r3, r7, r1
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	3301      	adds	r3, #1
 802009e:	187a      	adds	r2, r7, r1
 80200a0:	6013      	str	r3, [r2, #0]
 80200a2:	21a8      	movs	r1, #168	@ 0xa8
 80200a4:	187b      	adds	r3, r7, r1
 80200a6:	681b      	ldr	r3, [r3, #0]
 80200a8:	881b      	ldrh	r3, [r3, #0]
 80200aa:	b29a      	uxth	r2, r3
 80200ac:	23e4      	movs	r3, #228	@ 0xe4
 80200ae:	18fb      	adds	r3, r7, r3
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	b29b      	uxth	r3, r3
 80200b4:	029b      	lsls	r3, r3, #10
 80200b6:	b29b      	uxth	r3, r3
 80200b8:	4313      	orrs	r3, r2
 80200ba:	b29a      	uxth	r2, r3
 80200bc:	187b      	adds	r3, r7, r1
 80200be:	681b      	ldr	r3, [r3, #0]
 80200c0:	801a      	strh	r2, [r3, #0]
 80200c2:	e023      	b.n	802010c <USB_EPStartXfer+0xd24>
 80200c4:	683b      	ldr	r3, [r7, #0]
 80200c6:	785b      	ldrb	r3, [r3, #1]
 80200c8:	2b01      	cmp	r3, #1
 80200ca:	d11f      	bne.n	802010c <USB_EPStartXfer+0xd24>
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	21b4      	movs	r1, #180	@ 0xb4
 80200d0:	187a      	adds	r2, r7, r1
 80200d2:	6013      	str	r3, [r2, #0]
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	2250      	movs	r2, #80	@ 0x50
 80200d8:	5a9b      	ldrh	r3, [r3, r2]
 80200da:	b29b      	uxth	r3, r3
 80200dc:	001a      	movs	r2, r3
 80200de:	187b      	adds	r3, r7, r1
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	189b      	adds	r3, r3, r2
 80200e4:	187a      	adds	r2, r7, r1
 80200e6:	6013      	str	r3, [r2, #0]
 80200e8:	683b      	ldr	r3, [r7, #0]
 80200ea:	781b      	ldrb	r3, [r3, #0]
 80200ec:	00da      	lsls	r2, r3, #3
 80200ee:	187b      	adds	r3, r7, r1
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	18d3      	adds	r3, r2, r3
 80200f4:	4a4a      	ldr	r2, [pc, #296]	@ (8020220 <USB_EPStartXfer+0xe38>)
 80200f6:	4694      	mov	ip, r2
 80200f8:	4463      	add	r3, ip
 80200fa:	21b0      	movs	r1, #176	@ 0xb0
 80200fc:	187a      	adds	r2, r7, r1
 80200fe:	6013      	str	r3, [r2, #0]
 8020100:	683b      	ldr	r3, [r7, #0]
 8020102:	691b      	ldr	r3, [r3, #16]
 8020104:	b29a      	uxth	r2, r3
 8020106:	187b      	adds	r3, r7, r1
 8020108:	681b      	ldr	r3, [r3, #0]
 802010a:	801a      	strh	r2, [r3, #0]
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	22a4      	movs	r2, #164	@ 0xa4
 8020110:	18ba      	adds	r2, r7, r2
 8020112:	6013      	str	r3, [r2, #0]
 8020114:	683b      	ldr	r3, [r7, #0]
 8020116:	785b      	ldrb	r3, [r3, #1]
 8020118:	2b00      	cmp	r3, #0
 802011a:	d000      	beq.n	802011e <USB_EPStartXfer+0xd36>
 802011c:	e082      	b.n	8020224 <USB_EPStartXfer+0xe3c>
 802011e:	687b      	ldr	r3, [r7, #4]
 8020120:	219c      	movs	r1, #156	@ 0x9c
 8020122:	187a      	adds	r2, r7, r1
 8020124:	6013      	str	r3, [r2, #0]
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	2250      	movs	r2, #80	@ 0x50
 802012a:	5a9b      	ldrh	r3, [r3, r2]
 802012c:	b29b      	uxth	r3, r3
 802012e:	001a      	movs	r2, r3
 8020130:	187b      	adds	r3, r7, r1
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	189b      	adds	r3, r3, r2
 8020136:	187a      	adds	r2, r7, r1
 8020138:	6013      	str	r3, [r2, #0]
 802013a:	683b      	ldr	r3, [r7, #0]
 802013c:	781b      	ldrb	r3, [r3, #0]
 802013e:	00da      	lsls	r2, r3, #3
 8020140:	187b      	adds	r3, r7, r1
 8020142:	681b      	ldr	r3, [r3, #0]
 8020144:	18d3      	adds	r3, r2, r3
 8020146:	4a34      	ldr	r2, [pc, #208]	@ (8020218 <USB_EPStartXfer+0xe30>)
 8020148:	4694      	mov	ip, r2
 802014a:	4463      	add	r3, ip
 802014c:	2198      	movs	r1, #152	@ 0x98
 802014e:	187a      	adds	r2, r7, r1
 8020150:	6013      	str	r3, [r2, #0]
 8020152:	187b      	adds	r3, r7, r1
 8020154:	681b      	ldr	r3, [r3, #0]
 8020156:	881b      	ldrh	r3, [r3, #0]
 8020158:	b29b      	uxth	r3, r3
 802015a:	059b      	lsls	r3, r3, #22
 802015c:	0d9b      	lsrs	r3, r3, #22
 802015e:	b29a      	uxth	r2, r3
 8020160:	187b      	adds	r3, r7, r1
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	801a      	strh	r2, [r3, #0]
 8020166:	683b      	ldr	r3, [r7, #0]
 8020168:	691b      	ldr	r3, [r3, #16]
 802016a:	2b3e      	cmp	r3, #62	@ 0x3e
 802016c:	d923      	bls.n	80201b6 <USB_EPStartXfer+0xdce>
 802016e:	683b      	ldr	r3, [r7, #0]
 8020170:	691b      	ldr	r3, [r3, #16]
 8020172:	095b      	lsrs	r3, r3, #5
 8020174:	21e0      	movs	r1, #224	@ 0xe0
 8020176:	187a      	adds	r2, r7, r1
 8020178:	6013      	str	r3, [r2, #0]
 802017a:	683b      	ldr	r3, [r7, #0]
 802017c:	691b      	ldr	r3, [r3, #16]
 802017e:	221f      	movs	r2, #31
 8020180:	4013      	ands	r3, r2
 8020182:	d104      	bne.n	802018e <USB_EPStartXfer+0xda6>
 8020184:	187b      	adds	r3, r7, r1
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	3b01      	subs	r3, #1
 802018a:	187a      	adds	r2, r7, r1
 802018c:	6013      	str	r3, [r2, #0]
 802018e:	2198      	movs	r1, #152	@ 0x98
 8020190:	187b      	adds	r3, r7, r1
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	881b      	ldrh	r3, [r3, #0]
 8020196:	b29a      	uxth	r2, r3
 8020198:	23e0      	movs	r3, #224	@ 0xe0
 802019a:	18fb      	adds	r3, r7, r3
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	b29b      	uxth	r3, r3
 80201a0:	029b      	lsls	r3, r3, #10
 80201a2:	b29b      	uxth	r3, r3
 80201a4:	4313      	orrs	r3, r2
 80201a6:	b29b      	uxth	r3, r3
 80201a8:	4a1c      	ldr	r2, [pc, #112]	@ (802021c <USB_EPStartXfer+0xe34>)
 80201aa:	4313      	orrs	r3, r2
 80201ac:	b29a      	uxth	r2, r3
 80201ae:	187b      	adds	r3, r7, r1
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	801a      	strh	r2, [r3, #0]
 80201b4:	e057      	b.n	8020266 <USB_EPStartXfer+0xe7e>
 80201b6:	683b      	ldr	r3, [r7, #0]
 80201b8:	691b      	ldr	r3, [r3, #16]
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d10b      	bne.n	80201d6 <USB_EPStartXfer+0xdee>
 80201be:	2198      	movs	r1, #152	@ 0x98
 80201c0:	187b      	adds	r3, r7, r1
 80201c2:	681b      	ldr	r3, [r3, #0]
 80201c4:	881b      	ldrh	r3, [r3, #0]
 80201c6:	b29b      	uxth	r3, r3
 80201c8:	4a14      	ldr	r2, [pc, #80]	@ (802021c <USB_EPStartXfer+0xe34>)
 80201ca:	4313      	orrs	r3, r2
 80201cc:	b29a      	uxth	r2, r3
 80201ce:	187b      	adds	r3, r7, r1
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	801a      	strh	r2, [r3, #0]
 80201d4:	e047      	b.n	8020266 <USB_EPStartXfer+0xe7e>
 80201d6:	683b      	ldr	r3, [r7, #0]
 80201d8:	691b      	ldr	r3, [r3, #16]
 80201da:	085b      	lsrs	r3, r3, #1
 80201dc:	21e0      	movs	r1, #224	@ 0xe0
 80201de:	187a      	adds	r2, r7, r1
 80201e0:	6013      	str	r3, [r2, #0]
 80201e2:	683b      	ldr	r3, [r7, #0]
 80201e4:	691b      	ldr	r3, [r3, #16]
 80201e6:	2201      	movs	r2, #1
 80201e8:	4013      	ands	r3, r2
 80201ea:	d004      	beq.n	80201f6 <USB_EPStartXfer+0xe0e>
 80201ec:	187b      	adds	r3, r7, r1
 80201ee:	681b      	ldr	r3, [r3, #0]
 80201f0:	3301      	adds	r3, #1
 80201f2:	187a      	adds	r2, r7, r1
 80201f4:	6013      	str	r3, [r2, #0]
 80201f6:	2198      	movs	r1, #152	@ 0x98
 80201f8:	187b      	adds	r3, r7, r1
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	881b      	ldrh	r3, [r3, #0]
 80201fe:	b29a      	uxth	r2, r3
 8020200:	23e0      	movs	r3, #224	@ 0xe0
 8020202:	18fb      	adds	r3, r7, r3
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	b29b      	uxth	r3, r3
 8020208:	029b      	lsls	r3, r3, #10
 802020a:	b29b      	uxth	r3, r3
 802020c:	4313      	orrs	r3, r2
 802020e:	b29a      	uxth	r2, r3
 8020210:	187b      	adds	r3, r7, r1
 8020212:	681b      	ldr	r3, [r3, #0]
 8020214:	801a      	strh	r2, [r3, #0]
 8020216:	e026      	b.n	8020266 <USB_EPStartXfer+0xe7e>
 8020218:	00000406 	.word	0x00000406
 802021c:	ffff8000 	.word	0xffff8000
 8020220:	00000402 	.word	0x00000402
 8020224:	683b      	ldr	r3, [r7, #0]
 8020226:	785b      	ldrb	r3, [r3, #1]
 8020228:	2b01      	cmp	r3, #1
 802022a:	d11c      	bne.n	8020266 <USB_EPStartXfer+0xe7e>
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	2250      	movs	r2, #80	@ 0x50
 8020230:	5a9b      	ldrh	r3, [r3, r2]
 8020232:	b29b      	uxth	r3, r3
 8020234:	001a      	movs	r2, r3
 8020236:	21a4      	movs	r1, #164	@ 0xa4
 8020238:	187b      	adds	r3, r7, r1
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	189b      	adds	r3, r3, r2
 802023e:	187a      	adds	r2, r7, r1
 8020240:	6013      	str	r3, [r2, #0]
 8020242:	683b      	ldr	r3, [r7, #0]
 8020244:	781b      	ldrb	r3, [r3, #0]
 8020246:	00da      	lsls	r2, r3, #3
 8020248:	187b      	adds	r3, r7, r1
 802024a:	681b      	ldr	r3, [r3, #0]
 802024c:	18d3      	adds	r3, r2, r3
 802024e:	4ad2      	ldr	r2, [pc, #840]	@ (8020598 <USB_EPStartXfer+0x11b0>)
 8020250:	4694      	mov	ip, r2
 8020252:	4463      	add	r3, ip
 8020254:	21a0      	movs	r1, #160	@ 0xa0
 8020256:	187a      	adds	r2, r7, r1
 8020258:	6013      	str	r3, [r2, #0]
 802025a:	683b      	ldr	r3, [r7, #0]
 802025c:	691b      	ldr	r3, [r3, #16]
 802025e:	b29a      	uxth	r2, r3
 8020260:	187b      	adds	r3, r7, r1
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020266:	683b      	ldr	r3, [r7, #0]
 8020268:	69db      	ldr	r3, [r3, #28]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d100      	bne.n	8020270 <USB_EPStartXfer+0xe88>
 802026e:	e1c2      	b.n	80205f6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020270:	687a      	ldr	r2, [r7, #4]
 8020272:	683b      	ldr	r3, [r7, #0]
 8020274:	781b      	ldrb	r3, [r3, #0]
 8020276:	009b      	lsls	r3, r3, #2
 8020278:	18d2      	adds	r2, r2, r3
 802027a:	2196      	movs	r1, #150	@ 0x96
 802027c:	187b      	adds	r3, r7, r1
 802027e:	8812      	ldrh	r2, [r2, #0]
 8020280:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020282:	187b      	adds	r3, r7, r1
 8020284:	881a      	ldrh	r2, [r3, #0]
 8020286:	2380      	movs	r3, #128	@ 0x80
 8020288:	01db      	lsls	r3, r3, #7
 802028a:	4013      	ands	r3, r2
 802028c:	d004      	beq.n	8020298 <USB_EPStartXfer+0xeb0>
 802028e:	187b      	adds	r3, r7, r1
 8020290:	881b      	ldrh	r3, [r3, #0]
 8020292:	2240      	movs	r2, #64	@ 0x40
 8020294:	4013      	ands	r3, r2
 8020296:	d10d      	bne.n	80202b4 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020298:	2196      	movs	r1, #150	@ 0x96
 802029a:	187b      	adds	r3, r7, r1
 802029c:	881a      	ldrh	r2, [r3, #0]
 802029e:	2380      	movs	r3, #128	@ 0x80
 80202a0:	01db      	lsls	r3, r3, #7
 80202a2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80202a4:	d000      	beq.n	80202a8 <USB_EPStartXfer+0xec0>
 80202a6:	e1a6      	b.n	80205f6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80202a8:	187b      	adds	r3, r7, r1
 80202aa:	881b      	ldrh	r3, [r3, #0]
 80202ac:	2240      	movs	r2, #64	@ 0x40
 80202ae:	4013      	ands	r3, r2
 80202b0:	d000      	beq.n	80202b4 <USB_EPStartXfer+0xecc>
 80202b2:	e1a0      	b.n	80205f6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80202b4:	687a      	ldr	r2, [r7, #4]
 80202b6:	683b      	ldr	r3, [r7, #0]
 80202b8:	781b      	ldrb	r3, [r3, #0]
 80202ba:	009b      	lsls	r3, r3, #2
 80202bc:	18d3      	adds	r3, r2, r3
 80202be:	881b      	ldrh	r3, [r3, #0]
 80202c0:	b29a      	uxth	r2, r3
 80202c2:	2094      	movs	r0, #148	@ 0x94
 80202c4:	183b      	adds	r3, r7, r0
 80202c6:	49b5      	ldr	r1, [pc, #724]	@ (802059c <USB_EPStartXfer+0x11b4>)
 80202c8:	400a      	ands	r2, r1
 80202ca:	801a      	strh	r2, [r3, #0]
 80202cc:	687a      	ldr	r2, [r7, #4]
 80202ce:	683b      	ldr	r3, [r7, #0]
 80202d0:	781b      	ldrb	r3, [r3, #0]
 80202d2:	009b      	lsls	r3, r3, #2
 80202d4:	18d3      	adds	r3, r2, r3
 80202d6:	183a      	adds	r2, r7, r0
 80202d8:	8812      	ldrh	r2, [r2, #0]
 80202da:	49b1      	ldr	r1, [pc, #708]	@ (80205a0 <USB_EPStartXfer+0x11b8>)
 80202dc:	430a      	orrs	r2, r1
 80202de:	b292      	uxth	r2, r2
 80202e0:	801a      	strh	r2, [r3, #0]
 80202e2:	e188      	b.n	80205f6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	78db      	ldrb	r3, [r3, #3]
 80202e8:	2b01      	cmp	r3, #1
 80202ea:	d000      	beq.n	80202ee <USB_EPStartXfer+0xf06>
 80202ec:	e181      	b.n	80205f2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80202ee:	683b      	ldr	r3, [r7, #0]
 80202f0:	699a      	ldr	r2, [r3, #24]
 80202f2:	683b      	ldr	r3, [r7, #0]
 80202f4:	691b      	ldr	r3, [r3, #16]
 80202f6:	429a      	cmp	r2, r3
 80202f8:	d90d      	bls.n	8020316 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80202fa:	683b      	ldr	r3, [r7, #0]
 80202fc:	691b      	ldr	r3, [r3, #16]
 80202fe:	1d7a      	adds	r2, r7, #5
 8020300:	32ff      	adds	r2, #255	@ 0xff
 8020302:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020304:	683b      	ldr	r3, [r7, #0]
 8020306:	699a      	ldr	r2, [r3, #24]
 8020308:	1d7b      	adds	r3, r7, #5
 802030a:	33ff      	adds	r3, #255	@ 0xff
 802030c:	681b      	ldr	r3, [r3, #0]
 802030e:	1ad2      	subs	r2, r2, r3
 8020310:	683b      	ldr	r3, [r7, #0]
 8020312:	619a      	str	r2, [r3, #24]
 8020314:	e007      	b.n	8020326 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020316:	683b      	ldr	r3, [r7, #0]
 8020318:	699b      	ldr	r3, [r3, #24]
 802031a:	1d7a      	adds	r2, r7, #5
 802031c:	32ff      	adds	r2, #255	@ 0xff
 802031e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020320:	683b      	ldr	r3, [r7, #0]
 8020322:	2200      	movs	r2, #0
 8020324:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020326:	683b      	ldr	r3, [r7, #0]
 8020328:	785b      	ldrb	r3, [r3, #1]
 802032a:	2b00      	cmp	r3, #0
 802032c:	d000      	beq.n	8020330 <USB_EPStartXfer+0xf48>
 802032e:	e082      	b.n	8020436 <USB_EPStartXfer+0x104e>
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	21cc      	movs	r1, #204	@ 0xcc
 8020334:	187a      	adds	r2, r7, r1
 8020336:	6013      	str	r3, [r2, #0]
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	2250      	movs	r2, #80	@ 0x50
 802033c:	5a9b      	ldrh	r3, [r3, r2]
 802033e:	b29b      	uxth	r3, r3
 8020340:	001a      	movs	r2, r3
 8020342:	187b      	adds	r3, r7, r1
 8020344:	681b      	ldr	r3, [r3, #0]
 8020346:	189b      	adds	r3, r3, r2
 8020348:	187a      	adds	r2, r7, r1
 802034a:	6013      	str	r3, [r2, #0]
 802034c:	683b      	ldr	r3, [r7, #0]
 802034e:	781b      	ldrb	r3, [r3, #0]
 8020350:	00da      	lsls	r2, r3, #3
 8020352:	187b      	adds	r3, r7, r1
 8020354:	681b      	ldr	r3, [r3, #0]
 8020356:	18d3      	adds	r3, r2, r3
 8020358:	4a92      	ldr	r2, [pc, #584]	@ (80205a4 <USB_EPStartXfer+0x11bc>)
 802035a:	4694      	mov	ip, r2
 802035c:	4463      	add	r3, ip
 802035e:	21c8      	movs	r1, #200	@ 0xc8
 8020360:	187a      	adds	r2, r7, r1
 8020362:	6013      	str	r3, [r2, #0]
 8020364:	187b      	adds	r3, r7, r1
 8020366:	681b      	ldr	r3, [r3, #0]
 8020368:	881b      	ldrh	r3, [r3, #0]
 802036a:	b29b      	uxth	r3, r3
 802036c:	059b      	lsls	r3, r3, #22
 802036e:	0d9b      	lsrs	r3, r3, #22
 8020370:	b29a      	uxth	r2, r3
 8020372:	187b      	adds	r3, r7, r1
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	801a      	strh	r2, [r3, #0]
 8020378:	1d7b      	adds	r3, r7, #5
 802037a:	33ff      	adds	r3, #255	@ 0xff
 802037c:	681b      	ldr	r3, [r3, #0]
 802037e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020380:	d925      	bls.n	80203ce <USB_EPStartXfer+0xfe6>
 8020382:	1d7b      	adds	r3, r7, #5
 8020384:	33ff      	adds	r3, #255	@ 0xff
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	095b      	lsrs	r3, r3, #5
 802038a:	21dc      	movs	r1, #220	@ 0xdc
 802038c:	187a      	adds	r2, r7, r1
 802038e:	6013      	str	r3, [r2, #0]
 8020390:	1d7b      	adds	r3, r7, #5
 8020392:	33ff      	adds	r3, #255	@ 0xff
 8020394:	681b      	ldr	r3, [r3, #0]
 8020396:	221f      	movs	r2, #31
 8020398:	4013      	ands	r3, r2
 802039a:	d104      	bne.n	80203a6 <USB_EPStartXfer+0xfbe>
 802039c:	187b      	adds	r3, r7, r1
 802039e:	681b      	ldr	r3, [r3, #0]
 80203a0:	3b01      	subs	r3, #1
 80203a2:	187a      	adds	r2, r7, r1
 80203a4:	6013      	str	r3, [r2, #0]
 80203a6:	21c8      	movs	r1, #200	@ 0xc8
 80203a8:	187b      	adds	r3, r7, r1
 80203aa:	681b      	ldr	r3, [r3, #0]
 80203ac:	881b      	ldrh	r3, [r3, #0]
 80203ae:	b29a      	uxth	r2, r3
 80203b0:	23dc      	movs	r3, #220	@ 0xdc
 80203b2:	18fb      	adds	r3, r7, r3
 80203b4:	681b      	ldr	r3, [r3, #0]
 80203b6:	b29b      	uxth	r3, r3
 80203b8:	029b      	lsls	r3, r3, #10
 80203ba:	b29b      	uxth	r3, r3
 80203bc:	4313      	orrs	r3, r2
 80203be:	b29b      	uxth	r3, r3
 80203c0:	4a79      	ldr	r2, [pc, #484]	@ (80205a8 <USB_EPStartXfer+0x11c0>)
 80203c2:	4313      	orrs	r3, r2
 80203c4:	b29a      	uxth	r2, r3
 80203c6:	187b      	adds	r3, r7, r1
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	801a      	strh	r2, [r3, #0]
 80203cc:	e058      	b.n	8020480 <USB_EPStartXfer+0x1098>
 80203ce:	1d7b      	adds	r3, r7, #5
 80203d0:	33ff      	adds	r3, #255	@ 0xff
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d10b      	bne.n	80203f0 <USB_EPStartXfer+0x1008>
 80203d8:	21c8      	movs	r1, #200	@ 0xc8
 80203da:	187b      	adds	r3, r7, r1
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	881b      	ldrh	r3, [r3, #0]
 80203e0:	b29b      	uxth	r3, r3
 80203e2:	4a71      	ldr	r2, [pc, #452]	@ (80205a8 <USB_EPStartXfer+0x11c0>)
 80203e4:	4313      	orrs	r3, r2
 80203e6:	b29a      	uxth	r2, r3
 80203e8:	187b      	adds	r3, r7, r1
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	801a      	strh	r2, [r3, #0]
 80203ee:	e047      	b.n	8020480 <USB_EPStartXfer+0x1098>
 80203f0:	1d7b      	adds	r3, r7, #5
 80203f2:	33ff      	adds	r3, #255	@ 0xff
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	085b      	lsrs	r3, r3, #1
 80203f8:	21dc      	movs	r1, #220	@ 0xdc
 80203fa:	187a      	adds	r2, r7, r1
 80203fc:	6013      	str	r3, [r2, #0]
 80203fe:	1d7b      	adds	r3, r7, #5
 8020400:	33ff      	adds	r3, #255	@ 0xff
 8020402:	681b      	ldr	r3, [r3, #0]
 8020404:	2201      	movs	r2, #1
 8020406:	4013      	ands	r3, r2
 8020408:	d004      	beq.n	8020414 <USB_EPStartXfer+0x102c>
 802040a:	187b      	adds	r3, r7, r1
 802040c:	681b      	ldr	r3, [r3, #0]
 802040e:	3301      	adds	r3, #1
 8020410:	187a      	adds	r2, r7, r1
 8020412:	6013      	str	r3, [r2, #0]
 8020414:	21c8      	movs	r1, #200	@ 0xc8
 8020416:	187b      	adds	r3, r7, r1
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	881b      	ldrh	r3, [r3, #0]
 802041c:	b29a      	uxth	r2, r3
 802041e:	23dc      	movs	r3, #220	@ 0xdc
 8020420:	18fb      	adds	r3, r7, r3
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	b29b      	uxth	r3, r3
 8020426:	029b      	lsls	r3, r3, #10
 8020428:	b29b      	uxth	r3, r3
 802042a:	4313      	orrs	r3, r2
 802042c:	b29a      	uxth	r2, r3
 802042e:	187b      	adds	r3, r7, r1
 8020430:	681b      	ldr	r3, [r3, #0]
 8020432:	801a      	strh	r2, [r3, #0]
 8020434:	e024      	b.n	8020480 <USB_EPStartXfer+0x1098>
 8020436:	683b      	ldr	r3, [r7, #0]
 8020438:	785b      	ldrb	r3, [r3, #1]
 802043a:	2b01      	cmp	r3, #1
 802043c:	d120      	bne.n	8020480 <USB_EPStartXfer+0x1098>
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	21d4      	movs	r1, #212	@ 0xd4
 8020442:	187a      	adds	r2, r7, r1
 8020444:	6013      	str	r3, [r2, #0]
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	2250      	movs	r2, #80	@ 0x50
 802044a:	5a9b      	ldrh	r3, [r3, r2]
 802044c:	b29b      	uxth	r3, r3
 802044e:	001a      	movs	r2, r3
 8020450:	187b      	adds	r3, r7, r1
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	189b      	adds	r3, r3, r2
 8020456:	187a      	adds	r2, r7, r1
 8020458:	6013      	str	r3, [r2, #0]
 802045a:	683b      	ldr	r3, [r7, #0]
 802045c:	781b      	ldrb	r3, [r3, #0]
 802045e:	00da      	lsls	r2, r3, #3
 8020460:	187b      	adds	r3, r7, r1
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	18d3      	adds	r3, r2, r3
 8020466:	4a4f      	ldr	r2, [pc, #316]	@ (80205a4 <USB_EPStartXfer+0x11bc>)
 8020468:	4694      	mov	ip, r2
 802046a:	4463      	add	r3, ip
 802046c:	21d0      	movs	r1, #208	@ 0xd0
 802046e:	187a      	adds	r2, r7, r1
 8020470:	6013      	str	r3, [r2, #0]
 8020472:	1d7b      	adds	r3, r7, #5
 8020474:	33ff      	adds	r3, #255	@ 0xff
 8020476:	681b      	ldr	r3, [r3, #0]
 8020478:	b29a      	uxth	r2, r3
 802047a:	187b      	adds	r3, r7, r1
 802047c:	681b      	ldr	r3, [r3, #0]
 802047e:	801a      	strh	r2, [r3, #0]
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	22c4      	movs	r2, #196	@ 0xc4
 8020484:	18ba      	adds	r2, r7, r2
 8020486:	6013      	str	r3, [r2, #0]
 8020488:	683b      	ldr	r3, [r7, #0]
 802048a:	785b      	ldrb	r3, [r3, #1]
 802048c:	2b00      	cmp	r3, #0
 802048e:	d000      	beq.n	8020492 <USB_EPStartXfer+0x10aa>
 8020490:	e08c      	b.n	80205ac <USB_EPStartXfer+0x11c4>
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	21bc      	movs	r1, #188	@ 0xbc
 8020496:	187a      	adds	r2, r7, r1
 8020498:	6013      	str	r3, [r2, #0]
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	2250      	movs	r2, #80	@ 0x50
 802049e:	5a9b      	ldrh	r3, [r3, r2]
 80204a0:	b29b      	uxth	r3, r3
 80204a2:	001a      	movs	r2, r3
 80204a4:	187b      	adds	r3, r7, r1
 80204a6:	681b      	ldr	r3, [r3, #0]
 80204a8:	189b      	adds	r3, r3, r2
 80204aa:	187a      	adds	r2, r7, r1
 80204ac:	6013      	str	r3, [r2, #0]
 80204ae:	683b      	ldr	r3, [r7, #0]
 80204b0:	781b      	ldrb	r3, [r3, #0]
 80204b2:	00da      	lsls	r2, r3, #3
 80204b4:	187b      	adds	r3, r7, r1
 80204b6:	681b      	ldr	r3, [r3, #0]
 80204b8:	18d3      	adds	r3, r2, r3
 80204ba:	4a37      	ldr	r2, [pc, #220]	@ (8020598 <USB_EPStartXfer+0x11b0>)
 80204bc:	4694      	mov	ip, r2
 80204be:	4463      	add	r3, ip
 80204c0:	21b8      	movs	r1, #184	@ 0xb8
 80204c2:	187a      	adds	r2, r7, r1
 80204c4:	6013      	str	r3, [r2, #0]
 80204c6:	187b      	adds	r3, r7, r1
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	881b      	ldrh	r3, [r3, #0]
 80204cc:	b29b      	uxth	r3, r3
 80204ce:	059b      	lsls	r3, r3, #22
 80204d0:	0d9b      	lsrs	r3, r3, #22
 80204d2:	b29a      	uxth	r2, r3
 80204d4:	187b      	adds	r3, r7, r1
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	801a      	strh	r2, [r3, #0]
 80204da:	1d7b      	adds	r3, r7, #5
 80204dc:	33ff      	adds	r3, #255	@ 0xff
 80204de:	681b      	ldr	r3, [r3, #0]
 80204e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80204e2:	d925      	bls.n	8020530 <USB_EPStartXfer+0x1148>
 80204e4:	1d7b      	adds	r3, r7, #5
 80204e6:	33ff      	adds	r3, #255	@ 0xff
 80204e8:	681b      	ldr	r3, [r3, #0]
 80204ea:	095b      	lsrs	r3, r3, #5
 80204ec:	21d8      	movs	r1, #216	@ 0xd8
 80204ee:	187a      	adds	r2, r7, r1
 80204f0:	6013      	str	r3, [r2, #0]
 80204f2:	1d7b      	adds	r3, r7, #5
 80204f4:	33ff      	adds	r3, #255	@ 0xff
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	221f      	movs	r2, #31
 80204fa:	4013      	ands	r3, r2
 80204fc:	d104      	bne.n	8020508 <USB_EPStartXfer+0x1120>
 80204fe:	187b      	adds	r3, r7, r1
 8020500:	681b      	ldr	r3, [r3, #0]
 8020502:	3b01      	subs	r3, #1
 8020504:	187a      	adds	r2, r7, r1
 8020506:	6013      	str	r3, [r2, #0]
 8020508:	21b8      	movs	r1, #184	@ 0xb8
 802050a:	187b      	adds	r3, r7, r1
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	881b      	ldrh	r3, [r3, #0]
 8020510:	b29a      	uxth	r2, r3
 8020512:	23d8      	movs	r3, #216	@ 0xd8
 8020514:	18fb      	adds	r3, r7, r3
 8020516:	681b      	ldr	r3, [r3, #0]
 8020518:	b29b      	uxth	r3, r3
 802051a:	029b      	lsls	r3, r3, #10
 802051c:	b29b      	uxth	r3, r3
 802051e:	4313      	orrs	r3, r2
 8020520:	b29b      	uxth	r3, r3
 8020522:	4a21      	ldr	r2, [pc, #132]	@ (80205a8 <USB_EPStartXfer+0x11c0>)
 8020524:	4313      	orrs	r3, r2
 8020526:	b29a      	uxth	r2, r3
 8020528:	187b      	adds	r3, r7, r1
 802052a:	681b      	ldr	r3, [r3, #0]
 802052c:	801a      	strh	r2, [r3, #0]
 802052e:	e062      	b.n	80205f6 <USB_EPStartXfer+0x120e>
 8020530:	1d7b      	adds	r3, r7, #5
 8020532:	33ff      	adds	r3, #255	@ 0xff
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	2b00      	cmp	r3, #0
 8020538:	d10b      	bne.n	8020552 <USB_EPStartXfer+0x116a>
 802053a:	21b8      	movs	r1, #184	@ 0xb8
 802053c:	187b      	adds	r3, r7, r1
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	881b      	ldrh	r3, [r3, #0]
 8020542:	b29b      	uxth	r3, r3
 8020544:	4a18      	ldr	r2, [pc, #96]	@ (80205a8 <USB_EPStartXfer+0x11c0>)
 8020546:	4313      	orrs	r3, r2
 8020548:	b29a      	uxth	r2, r3
 802054a:	187b      	adds	r3, r7, r1
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	801a      	strh	r2, [r3, #0]
 8020550:	e051      	b.n	80205f6 <USB_EPStartXfer+0x120e>
 8020552:	1d7b      	adds	r3, r7, #5
 8020554:	33ff      	adds	r3, #255	@ 0xff
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	085b      	lsrs	r3, r3, #1
 802055a:	21d8      	movs	r1, #216	@ 0xd8
 802055c:	187a      	adds	r2, r7, r1
 802055e:	6013      	str	r3, [r2, #0]
 8020560:	1d7b      	adds	r3, r7, #5
 8020562:	33ff      	adds	r3, #255	@ 0xff
 8020564:	681b      	ldr	r3, [r3, #0]
 8020566:	2201      	movs	r2, #1
 8020568:	4013      	ands	r3, r2
 802056a:	d004      	beq.n	8020576 <USB_EPStartXfer+0x118e>
 802056c:	187b      	adds	r3, r7, r1
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	3301      	adds	r3, #1
 8020572:	187a      	adds	r2, r7, r1
 8020574:	6013      	str	r3, [r2, #0]
 8020576:	21b8      	movs	r1, #184	@ 0xb8
 8020578:	187b      	adds	r3, r7, r1
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	881b      	ldrh	r3, [r3, #0]
 802057e:	b29a      	uxth	r2, r3
 8020580:	23d8      	movs	r3, #216	@ 0xd8
 8020582:	18fb      	adds	r3, r7, r3
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	b29b      	uxth	r3, r3
 8020588:	029b      	lsls	r3, r3, #10
 802058a:	b29b      	uxth	r3, r3
 802058c:	4313      	orrs	r3, r2
 802058e:	b29a      	uxth	r2, r3
 8020590:	187b      	adds	r3, r7, r1
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	801a      	strh	r2, [r3, #0]
 8020596:	e02e      	b.n	80205f6 <USB_EPStartXfer+0x120e>
 8020598:	00000406 	.word	0x00000406
 802059c:	ffff8f8f 	.word	0xffff8f8f
 80205a0:	ffff80c0 	.word	0xffff80c0
 80205a4:	00000402 	.word	0x00000402
 80205a8:	ffff8000 	.word	0xffff8000
 80205ac:	683b      	ldr	r3, [r7, #0]
 80205ae:	785b      	ldrb	r3, [r3, #1]
 80205b0:	2b01      	cmp	r3, #1
 80205b2:	d120      	bne.n	80205f6 <USB_EPStartXfer+0x120e>
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	2250      	movs	r2, #80	@ 0x50
 80205b8:	5a9b      	ldrh	r3, [r3, r2]
 80205ba:	b29b      	uxth	r3, r3
 80205bc:	001a      	movs	r2, r3
 80205be:	21c4      	movs	r1, #196	@ 0xc4
 80205c0:	187b      	adds	r3, r7, r1
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	189b      	adds	r3, r3, r2
 80205c6:	187a      	adds	r2, r7, r1
 80205c8:	6013      	str	r3, [r2, #0]
 80205ca:	683b      	ldr	r3, [r7, #0]
 80205cc:	781b      	ldrb	r3, [r3, #0]
 80205ce:	00da      	lsls	r2, r3, #3
 80205d0:	187b      	adds	r3, r7, r1
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	18d3      	adds	r3, r2, r3
 80205d6:	4a1d      	ldr	r2, [pc, #116]	@ (802064c <USB_EPStartXfer+0x1264>)
 80205d8:	4694      	mov	ip, r2
 80205da:	4463      	add	r3, ip
 80205dc:	21c0      	movs	r1, #192	@ 0xc0
 80205de:	187a      	adds	r2, r7, r1
 80205e0:	6013      	str	r3, [r2, #0]
 80205e2:	1d7b      	adds	r3, r7, #5
 80205e4:	33ff      	adds	r3, #255	@ 0xff
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	b29a      	uxth	r2, r3
 80205ea:	187b      	adds	r3, r7, r1
 80205ec:	681b      	ldr	r3, [r3, #0]
 80205ee:	801a      	strh	r2, [r3, #0]
 80205f0:	e001      	b.n	80205f6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80205f2:	2301      	movs	r3, #1
 80205f4:	e025      	b.n	8020642 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80205f6:	687a      	ldr	r2, [r7, #4]
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	781b      	ldrb	r3, [r3, #0]
 80205fc:	009b      	lsls	r3, r3, #2
 80205fe:	18d3      	adds	r3, r2, r3
 8020600:	881b      	ldrh	r3, [r3, #0]
 8020602:	b29a      	uxth	r2, r3
 8020604:	208a      	movs	r0, #138	@ 0x8a
 8020606:	183b      	adds	r3, r7, r0
 8020608:	4911      	ldr	r1, [pc, #68]	@ (8020650 <USB_EPStartXfer+0x1268>)
 802060a:	400a      	ands	r2, r1
 802060c:	801a      	strh	r2, [r3, #0]
 802060e:	183b      	adds	r3, r7, r0
 8020610:	183a      	adds	r2, r7, r0
 8020612:	8812      	ldrh	r2, [r2, #0]
 8020614:	2180      	movs	r1, #128	@ 0x80
 8020616:	0149      	lsls	r1, r1, #5
 8020618:	404a      	eors	r2, r1
 802061a:	801a      	strh	r2, [r3, #0]
 802061c:	183b      	adds	r3, r7, r0
 802061e:	183a      	adds	r2, r7, r0
 8020620:	8812      	ldrh	r2, [r2, #0]
 8020622:	2180      	movs	r1, #128	@ 0x80
 8020624:	0189      	lsls	r1, r1, #6
 8020626:	404a      	eors	r2, r1
 8020628:	801a      	strh	r2, [r3, #0]
 802062a:	687a      	ldr	r2, [r7, #4]
 802062c:	683b      	ldr	r3, [r7, #0]
 802062e:	781b      	ldrb	r3, [r3, #0]
 8020630:	009b      	lsls	r3, r3, #2
 8020632:	18d3      	adds	r3, r2, r3
 8020634:	183a      	adds	r2, r7, r0
 8020636:	8812      	ldrh	r2, [r2, #0]
 8020638:	4906      	ldr	r1, [pc, #24]	@ (8020654 <USB_EPStartXfer+0x126c>)
 802063a:	430a      	orrs	r2, r1
 802063c:	b292      	uxth	r2, r2
 802063e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8020640:	2300      	movs	r3, #0
}
 8020642:	0018      	movs	r0, r3
 8020644:	46bd      	mov	sp, r7
 8020646:	b043      	add	sp, #268	@ 0x10c
 8020648:	bd90      	pop	{r4, r7, pc}
 802064a:	46c0      	nop			@ (mov r8, r8)
 802064c:	00000406 	.word	0x00000406
 8020650:	ffffbf8f 	.word	0xffffbf8f
 8020654:	ffff8080 	.word	0xffff8080

08020658 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8020658:	b580      	push	{r7, lr}
 802065a:	b084      	sub	sp, #16
 802065c:	af00      	add	r7, sp, #0
 802065e:	6078      	str	r0, [r7, #4]
 8020660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8020662:	683b      	ldr	r3, [r7, #0]
 8020664:	785b      	ldrb	r3, [r3, #1]
 8020666:	2b00      	cmp	r3, #0
 8020668:	d01d      	beq.n	80206a6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 802066a:	687a      	ldr	r2, [r7, #4]
 802066c:	683b      	ldr	r3, [r7, #0]
 802066e:	781b      	ldrb	r3, [r3, #0]
 8020670:	009b      	lsls	r3, r3, #2
 8020672:	18d3      	adds	r3, r2, r3
 8020674:	881b      	ldrh	r3, [r3, #0]
 8020676:	b29a      	uxth	r2, r3
 8020678:	200c      	movs	r0, #12
 802067a:	183b      	adds	r3, r7, r0
 802067c:	491b      	ldr	r1, [pc, #108]	@ (80206ec <USB_EPSetStall+0x94>)
 802067e:	400a      	ands	r2, r1
 8020680:	801a      	strh	r2, [r3, #0]
 8020682:	183b      	adds	r3, r7, r0
 8020684:	183a      	adds	r2, r7, r0
 8020686:	8812      	ldrh	r2, [r2, #0]
 8020688:	2110      	movs	r1, #16
 802068a:	404a      	eors	r2, r1
 802068c:	801a      	strh	r2, [r3, #0]
 802068e:	687a      	ldr	r2, [r7, #4]
 8020690:	683b      	ldr	r3, [r7, #0]
 8020692:	781b      	ldrb	r3, [r3, #0]
 8020694:	009b      	lsls	r3, r3, #2
 8020696:	18d3      	adds	r3, r2, r3
 8020698:	183a      	adds	r2, r7, r0
 802069a:	8812      	ldrh	r2, [r2, #0]
 802069c:	4914      	ldr	r1, [pc, #80]	@ (80206f0 <USB_EPSetStall+0x98>)
 802069e:	430a      	orrs	r2, r1
 80206a0:	b292      	uxth	r2, r2
 80206a2:	801a      	strh	r2, [r3, #0]
 80206a4:	e01d      	b.n	80206e2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80206a6:	687a      	ldr	r2, [r7, #4]
 80206a8:	683b      	ldr	r3, [r7, #0]
 80206aa:	781b      	ldrb	r3, [r3, #0]
 80206ac:	009b      	lsls	r3, r3, #2
 80206ae:	18d3      	adds	r3, r2, r3
 80206b0:	881b      	ldrh	r3, [r3, #0]
 80206b2:	b29a      	uxth	r2, r3
 80206b4:	200e      	movs	r0, #14
 80206b6:	183b      	adds	r3, r7, r0
 80206b8:	490e      	ldr	r1, [pc, #56]	@ (80206f4 <USB_EPSetStall+0x9c>)
 80206ba:	400a      	ands	r2, r1
 80206bc:	801a      	strh	r2, [r3, #0]
 80206be:	183b      	adds	r3, r7, r0
 80206c0:	183a      	adds	r2, r7, r0
 80206c2:	8812      	ldrh	r2, [r2, #0]
 80206c4:	2180      	movs	r1, #128	@ 0x80
 80206c6:	0149      	lsls	r1, r1, #5
 80206c8:	404a      	eors	r2, r1
 80206ca:	801a      	strh	r2, [r3, #0]
 80206cc:	687a      	ldr	r2, [r7, #4]
 80206ce:	683b      	ldr	r3, [r7, #0]
 80206d0:	781b      	ldrb	r3, [r3, #0]
 80206d2:	009b      	lsls	r3, r3, #2
 80206d4:	18d3      	adds	r3, r2, r3
 80206d6:	183a      	adds	r2, r7, r0
 80206d8:	8812      	ldrh	r2, [r2, #0]
 80206da:	4905      	ldr	r1, [pc, #20]	@ (80206f0 <USB_EPSetStall+0x98>)
 80206dc:	430a      	orrs	r2, r1
 80206de:	b292      	uxth	r2, r2
 80206e0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80206e2:	2300      	movs	r3, #0
}
 80206e4:	0018      	movs	r0, r3
 80206e6:	46bd      	mov	sp, r7
 80206e8:	b004      	add	sp, #16
 80206ea:	bd80      	pop	{r7, pc}
 80206ec:	ffff8fbf 	.word	0xffff8fbf
 80206f0:	ffff8080 	.word	0xffff8080
 80206f4:	ffffbf8f 	.word	0xffffbf8f

080206f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80206f8:	b580      	push	{r7, lr}
 80206fa:	b086      	sub	sp, #24
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	6078      	str	r0, [r7, #4]
 8020700:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8020702:	683b      	ldr	r3, [r7, #0]
 8020704:	7b1b      	ldrb	r3, [r3, #12]
 8020706:	2b00      	cmp	r3, #0
 8020708:	d000      	beq.n	802070c <USB_EPClearStall+0x14>
 802070a:	e095      	b.n	8020838 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 802070c:	683b      	ldr	r3, [r7, #0]
 802070e:	785b      	ldrb	r3, [r3, #1]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d046      	beq.n	80207a2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8020714:	687a      	ldr	r2, [r7, #4]
 8020716:	683b      	ldr	r3, [r7, #0]
 8020718:	781b      	ldrb	r3, [r3, #0]
 802071a:	009b      	lsls	r3, r3, #2
 802071c:	18d2      	adds	r2, r2, r3
 802071e:	2110      	movs	r1, #16
 8020720:	187b      	adds	r3, r7, r1
 8020722:	8812      	ldrh	r2, [r2, #0]
 8020724:	801a      	strh	r2, [r3, #0]
 8020726:	187b      	adds	r3, r7, r1
 8020728:	881b      	ldrh	r3, [r3, #0]
 802072a:	2240      	movs	r2, #64	@ 0x40
 802072c:	4013      	ands	r3, r2
 802072e:	d016      	beq.n	802075e <USB_EPClearStall+0x66>
 8020730:	687a      	ldr	r2, [r7, #4]
 8020732:	683b      	ldr	r3, [r7, #0]
 8020734:	781b      	ldrb	r3, [r3, #0]
 8020736:	009b      	lsls	r3, r3, #2
 8020738:	18d3      	adds	r3, r2, r3
 802073a:	881b      	ldrh	r3, [r3, #0]
 802073c:	b29a      	uxth	r2, r3
 802073e:	200e      	movs	r0, #14
 8020740:	183b      	adds	r3, r7, r0
 8020742:	4940      	ldr	r1, [pc, #256]	@ (8020844 <USB_EPClearStall+0x14c>)
 8020744:	400a      	ands	r2, r1
 8020746:	801a      	strh	r2, [r3, #0]
 8020748:	687a      	ldr	r2, [r7, #4]
 802074a:	683b      	ldr	r3, [r7, #0]
 802074c:	781b      	ldrb	r3, [r3, #0]
 802074e:	009b      	lsls	r3, r3, #2
 8020750:	18d3      	adds	r3, r2, r3
 8020752:	183a      	adds	r2, r7, r0
 8020754:	8812      	ldrh	r2, [r2, #0]
 8020756:	493c      	ldr	r1, [pc, #240]	@ (8020848 <USB_EPClearStall+0x150>)
 8020758:	430a      	orrs	r2, r1
 802075a:	b292      	uxth	r2, r2
 802075c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 802075e:	683b      	ldr	r3, [r7, #0]
 8020760:	78db      	ldrb	r3, [r3, #3]
 8020762:	2b01      	cmp	r3, #1
 8020764:	d068      	beq.n	8020838 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8020766:	687a      	ldr	r2, [r7, #4]
 8020768:	683b      	ldr	r3, [r7, #0]
 802076a:	781b      	ldrb	r3, [r3, #0]
 802076c:	009b      	lsls	r3, r3, #2
 802076e:	18d3      	adds	r3, r2, r3
 8020770:	881b      	ldrh	r3, [r3, #0]
 8020772:	b29a      	uxth	r2, r3
 8020774:	200c      	movs	r0, #12
 8020776:	183b      	adds	r3, r7, r0
 8020778:	4934      	ldr	r1, [pc, #208]	@ (802084c <USB_EPClearStall+0x154>)
 802077a:	400a      	ands	r2, r1
 802077c:	801a      	strh	r2, [r3, #0]
 802077e:	183b      	adds	r3, r7, r0
 8020780:	183a      	adds	r2, r7, r0
 8020782:	8812      	ldrh	r2, [r2, #0]
 8020784:	2120      	movs	r1, #32
 8020786:	404a      	eors	r2, r1
 8020788:	801a      	strh	r2, [r3, #0]
 802078a:	687a      	ldr	r2, [r7, #4]
 802078c:	683b      	ldr	r3, [r7, #0]
 802078e:	781b      	ldrb	r3, [r3, #0]
 8020790:	009b      	lsls	r3, r3, #2
 8020792:	18d3      	adds	r3, r2, r3
 8020794:	183a      	adds	r2, r7, r0
 8020796:	8812      	ldrh	r2, [r2, #0]
 8020798:	492d      	ldr	r1, [pc, #180]	@ (8020850 <USB_EPClearStall+0x158>)
 802079a:	430a      	orrs	r2, r1
 802079c:	b292      	uxth	r2, r2
 802079e:	801a      	strh	r2, [r3, #0]
 80207a0:	e04a      	b.n	8020838 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80207a2:	687a      	ldr	r2, [r7, #4]
 80207a4:	683b      	ldr	r3, [r7, #0]
 80207a6:	781b      	ldrb	r3, [r3, #0]
 80207a8:	009b      	lsls	r3, r3, #2
 80207aa:	18d2      	adds	r2, r2, r3
 80207ac:	2116      	movs	r1, #22
 80207ae:	187b      	adds	r3, r7, r1
 80207b0:	8812      	ldrh	r2, [r2, #0]
 80207b2:	801a      	strh	r2, [r3, #0]
 80207b4:	187b      	adds	r3, r7, r1
 80207b6:	881a      	ldrh	r2, [r3, #0]
 80207b8:	2380      	movs	r3, #128	@ 0x80
 80207ba:	01db      	lsls	r3, r3, #7
 80207bc:	4013      	ands	r3, r2
 80207be:	d016      	beq.n	80207ee <USB_EPClearStall+0xf6>
 80207c0:	687a      	ldr	r2, [r7, #4]
 80207c2:	683b      	ldr	r3, [r7, #0]
 80207c4:	781b      	ldrb	r3, [r3, #0]
 80207c6:	009b      	lsls	r3, r3, #2
 80207c8:	18d3      	adds	r3, r2, r3
 80207ca:	881b      	ldrh	r3, [r3, #0]
 80207cc:	b29a      	uxth	r2, r3
 80207ce:	2014      	movs	r0, #20
 80207d0:	183b      	adds	r3, r7, r0
 80207d2:	491c      	ldr	r1, [pc, #112]	@ (8020844 <USB_EPClearStall+0x14c>)
 80207d4:	400a      	ands	r2, r1
 80207d6:	801a      	strh	r2, [r3, #0]
 80207d8:	687a      	ldr	r2, [r7, #4]
 80207da:	683b      	ldr	r3, [r7, #0]
 80207dc:	781b      	ldrb	r3, [r3, #0]
 80207de:	009b      	lsls	r3, r3, #2
 80207e0:	18d3      	adds	r3, r2, r3
 80207e2:	183a      	adds	r2, r7, r0
 80207e4:	8812      	ldrh	r2, [r2, #0]
 80207e6:	491b      	ldr	r1, [pc, #108]	@ (8020854 <USB_EPClearStall+0x15c>)
 80207e8:	430a      	orrs	r2, r1
 80207ea:	b292      	uxth	r2, r2
 80207ec:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80207ee:	687a      	ldr	r2, [r7, #4]
 80207f0:	683b      	ldr	r3, [r7, #0]
 80207f2:	781b      	ldrb	r3, [r3, #0]
 80207f4:	009b      	lsls	r3, r3, #2
 80207f6:	18d3      	adds	r3, r2, r3
 80207f8:	881b      	ldrh	r3, [r3, #0]
 80207fa:	b29a      	uxth	r2, r3
 80207fc:	2012      	movs	r0, #18
 80207fe:	183b      	adds	r3, r7, r0
 8020800:	4915      	ldr	r1, [pc, #84]	@ (8020858 <USB_EPClearStall+0x160>)
 8020802:	400a      	ands	r2, r1
 8020804:	801a      	strh	r2, [r3, #0]
 8020806:	183b      	adds	r3, r7, r0
 8020808:	183a      	adds	r2, r7, r0
 802080a:	8812      	ldrh	r2, [r2, #0]
 802080c:	2180      	movs	r1, #128	@ 0x80
 802080e:	0149      	lsls	r1, r1, #5
 8020810:	404a      	eors	r2, r1
 8020812:	801a      	strh	r2, [r3, #0]
 8020814:	183b      	adds	r3, r7, r0
 8020816:	183a      	adds	r2, r7, r0
 8020818:	8812      	ldrh	r2, [r2, #0]
 802081a:	2180      	movs	r1, #128	@ 0x80
 802081c:	0189      	lsls	r1, r1, #6
 802081e:	404a      	eors	r2, r1
 8020820:	801a      	strh	r2, [r3, #0]
 8020822:	687a      	ldr	r2, [r7, #4]
 8020824:	683b      	ldr	r3, [r7, #0]
 8020826:	781b      	ldrb	r3, [r3, #0]
 8020828:	009b      	lsls	r3, r3, #2
 802082a:	18d3      	adds	r3, r2, r3
 802082c:	183a      	adds	r2, r7, r0
 802082e:	8812      	ldrh	r2, [r2, #0]
 8020830:	4907      	ldr	r1, [pc, #28]	@ (8020850 <USB_EPClearStall+0x158>)
 8020832:	430a      	orrs	r2, r1
 8020834:	b292      	uxth	r2, r2
 8020836:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8020838:	2300      	movs	r3, #0
}
 802083a:	0018      	movs	r0, r3
 802083c:	46bd      	mov	sp, r7
 802083e:	b006      	add	sp, #24
 8020840:	bd80      	pop	{r7, pc}
 8020842:	46c0      	nop			@ (mov r8, r8)
 8020844:	ffff8f8f 	.word	0xffff8f8f
 8020848:	ffff80c0 	.word	0xffff80c0
 802084c:	ffff8fbf 	.word	0xffff8fbf
 8020850:	ffff8080 	.word	0xffff8080
 8020854:	ffffc080 	.word	0xffffc080
 8020858:	ffffbf8f 	.word	0xffffbf8f

0802085c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 802085c:	b580      	push	{r7, lr}
 802085e:	b082      	sub	sp, #8
 8020860:	af00      	add	r7, sp, #0
 8020862:	6078      	str	r0, [r7, #4]
 8020864:	000a      	movs	r2, r1
 8020866:	1cfb      	adds	r3, r7, #3
 8020868:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 802086a:	1cfb      	adds	r3, r7, #3
 802086c:	781b      	ldrb	r3, [r3, #0]
 802086e:	2b00      	cmp	r3, #0
 8020870:	d103      	bne.n	802087a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8020872:	687b      	ldr	r3, [r7, #4]
 8020874:	224c      	movs	r2, #76	@ 0x4c
 8020876:	2180      	movs	r1, #128	@ 0x80
 8020878:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 802087a:	2300      	movs	r3, #0
}
 802087c:	0018      	movs	r0, r3
 802087e:	46bd      	mov	sp, r7
 8020880:	b002      	add	sp, #8
 8020882:	bd80      	pop	{r7, pc}

08020884 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8020884:	b580      	push	{r7, lr}
 8020886:	b082      	sub	sp, #8
 8020888:	af00      	add	r7, sp, #0
 802088a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	2258      	movs	r2, #88	@ 0x58
 8020890:	5a9b      	ldrh	r3, [r3, r2]
 8020892:	b29b      	uxth	r3, r3
 8020894:	4a05      	ldr	r2, [pc, #20]	@ (80208ac <USB_DevConnect+0x28>)
 8020896:	4313      	orrs	r3, r2
 8020898:	b299      	uxth	r1, r3
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	2258      	movs	r2, #88	@ 0x58
 802089e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80208a0:	2300      	movs	r3, #0
}
 80208a2:	0018      	movs	r0, r3
 80208a4:	46bd      	mov	sp, r7
 80208a6:	b002      	add	sp, #8
 80208a8:	bd80      	pop	{r7, pc}
 80208aa:	46c0      	nop			@ (mov r8, r8)
 80208ac:	ffff8000 	.word	0xffff8000

080208b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	b084      	sub	sp, #16
 80208b4:	af00      	add	r7, sp, #0
 80208b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	2244      	movs	r2, #68	@ 0x44
 80208bc:	5a9b      	ldrh	r3, [r3, r2]
 80208be:	b29b      	uxth	r3, r3
 80208c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80208c2:	68fb      	ldr	r3, [r7, #12]
}
 80208c4:	0018      	movs	r0, r3
 80208c6:	46bd      	mov	sp, r7
 80208c8:	b004      	add	sp, #16
 80208ca:	bd80      	pop	{r7, pc}

080208cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80208cc:	b580      	push	{r7, lr}
 80208ce:	b08a      	sub	sp, #40	@ 0x28
 80208d0:	af00      	add	r7, sp, #0
 80208d2:	60f8      	str	r0, [r7, #12]
 80208d4:	60b9      	str	r1, [r7, #8]
 80208d6:	0019      	movs	r1, r3
 80208d8:	1dbb      	adds	r3, r7, #6
 80208da:	801a      	strh	r2, [r3, #0]
 80208dc:	1d3b      	adds	r3, r7, #4
 80208de:	1c0a      	adds	r2, r1, #0
 80208e0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80208e2:	1d3b      	adds	r3, r7, #4
 80208e4:	881b      	ldrh	r3, [r3, #0]
 80208e6:	3301      	adds	r3, #1
 80208e8:	085b      	lsrs	r3, r3, #1
 80208ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80208f0:	68bb      	ldr	r3, [r7, #8]
 80208f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80208f4:	1dbb      	adds	r3, r7, #6
 80208f6:	881a      	ldrh	r2, [r3, #0]
 80208f8:	697b      	ldr	r3, [r7, #20]
 80208fa:	18d3      	adds	r3, r2, r3
 80208fc:	2280      	movs	r2, #128	@ 0x80
 80208fe:	00d2      	lsls	r2, r2, #3
 8020900:	4694      	mov	ip, r2
 8020902:	4463      	add	r3, ip
 8020904:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8020906:	69bb      	ldr	r3, [r7, #24]
 8020908:	627b      	str	r3, [r7, #36]	@ 0x24
 802090a:	e021      	b.n	8020950 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 802090c:	69fb      	ldr	r3, [r7, #28]
 802090e:	781a      	ldrb	r2, [r3, #0]
 8020910:	2112      	movs	r1, #18
 8020912:	187b      	adds	r3, r7, r1
 8020914:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8020916:	69fb      	ldr	r3, [r7, #28]
 8020918:	3301      	adds	r3, #1
 802091a:	781b      	ldrb	r3, [r3, #0]
 802091c:	b21b      	sxth	r3, r3
 802091e:	021b      	lsls	r3, r3, #8
 8020920:	b21a      	sxth	r2, r3
 8020922:	187b      	adds	r3, r7, r1
 8020924:	2000      	movs	r0, #0
 8020926:	5e1b      	ldrsh	r3, [r3, r0]
 8020928:	4313      	orrs	r3, r2
 802092a:	b21a      	sxth	r2, r3
 802092c:	187b      	adds	r3, r7, r1
 802092e:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8020930:	6a3b      	ldr	r3, [r7, #32]
 8020932:	187a      	adds	r2, r7, r1
 8020934:	8812      	ldrh	r2, [r2, #0]
 8020936:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8020938:	6a3b      	ldr	r3, [r7, #32]
 802093a:	3302      	adds	r3, #2
 802093c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 802093e:	69fb      	ldr	r3, [r7, #28]
 8020940:	3301      	adds	r3, #1
 8020942:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8020944:	69fb      	ldr	r3, [r7, #28]
 8020946:	3301      	adds	r3, #1
 8020948:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802094c:	3b01      	subs	r3, #1
 802094e:	627b      	str	r3, [r7, #36]	@ 0x24
 8020950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020952:	2b00      	cmp	r3, #0
 8020954:	d1da      	bne.n	802090c <USB_WritePMA+0x40>
  }
}
 8020956:	46c0      	nop			@ (mov r8, r8)
 8020958:	46c0      	nop			@ (mov r8, r8)
 802095a:	46bd      	mov	sp, r7
 802095c:	b00a      	add	sp, #40	@ 0x28
 802095e:	bd80      	pop	{r7, pc}

08020960 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8020960:	b580      	push	{r7, lr}
 8020962:	b08a      	sub	sp, #40	@ 0x28
 8020964:	af00      	add	r7, sp, #0
 8020966:	60f8      	str	r0, [r7, #12]
 8020968:	60b9      	str	r1, [r7, #8]
 802096a:	0019      	movs	r1, r3
 802096c:	1dbb      	adds	r3, r7, #6
 802096e:	801a      	strh	r2, [r3, #0]
 8020970:	1d3b      	adds	r3, r7, #4
 8020972:	1c0a      	adds	r2, r1, #0
 8020974:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8020976:	1d3b      	adds	r3, r7, #4
 8020978:	881b      	ldrh	r3, [r3, #0]
 802097a:	085b      	lsrs	r3, r3, #1
 802097c:	b29b      	uxth	r3, r3
 802097e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8020984:	68bb      	ldr	r3, [r7, #8]
 8020986:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8020988:	1dbb      	adds	r3, r7, #6
 802098a:	881a      	ldrh	r2, [r3, #0]
 802098c:	697b      	ldr	r3, [r7, #20]
 802098e:	18d3      	adds	r3, r2, r3
 8020990:	2280      	movs	r2, #128	@ 0x80
 8020992:	00d2      	lsls	r2, r2, #3
 8020994:	4694      	mov	ip, r2
 8020996:	4463      	add	r3, ip
 8020998:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802099a:	69bb      	ldr	r3, [r7, #24]
 802099c:	627b      	str	r3, [r7, #36]	@ 0x24
 802099e:	e018      	b.n	80209d2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80209a0:	6a3b      	ldr	r3, [r7, #32]
 80209a2:	881b      	ldrh	r3, [r3, #0]
 80209a4:	b29b      	uxth	r3, r3
 80209a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80209a8:	6a3b      	ldr	r3, [r7, #32]
 80209aa:	3302      	adds	r3, #2
 80209ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80209ae:	693b      	ldr	r3, [r7, #16]
 80209b0:	b2da      	uxtb	r2, r3
 80209b2:	69fb      	ldr	r3, [r7, #28]
 80209b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80209b6:	69fb      	ldr	r3, [r7, #28]
 80209b8:	3301      	adds	r3, #1
 80209ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80209bc:	693b      	ldr	r3, [r7, #16]
 80209be:	0a1b      	lsrs	r3, r3, #8
 80209c0:	b2da      	uxtb	r2, r3
 80209c2:	69fb      	ldr	r3, [r7, #28]
 80209c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80209c6:	69fb      	ldr	r3, [r7, #28]
 80209c8:	3301      	adds	r3, #1
 80209ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80209cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209ce:	3b01      	subs	r3, #1
 80209d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80209d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d1e3      	bne.n	80209a0 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80209d8:	1d3b      	adds	r3, r7, #4
 80209da:	881b      	ldrh	r3, [r3, #0]
 80209dc:	2201      	movs	r2, #1
 80209de:	4013      	ands	r3, r2
 80209e0:	b29b      	uxth	r3, r3
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d007      	beq.n	80209f6 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80209e6:	6a3b      	ldr	r3, [r7, #32]
 80209e8:	881b      	ldrh	r3, [r3, #0]
 80209ea:	b29b      	uxth	r3, r3
 80209ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80209ee:	693b      	ldr	r3, [r7, #16]
 80209f0:	b2da      	uxtb	r2, r3
 80209f2:	69fb      	ldr	r3, [r7, #28]
 80209f4:	701a      	strb	r2, [r3, #0]
  }
}
 80209f6:	46c0      	nop			@ (mov r8, r8)
 80209f8:	46bd      	mov	sp, r7
 80209fa:	b00a      	add	sp, #40	@ 0x28
 80209fc:	bd80      	pop	{r7, pc}

080209fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80209fe:	b580      	push	{r7, lr}
 8020a00:	b084      	sub	sp, #16
 8020a02:	af00      	add	r7, sp, #0
 8020a04:	6078      	str	r0, [r7, #4]
 8020a06:	000a      	movs	r2, r1
 8020a08:	1cfb      	adds	r3, r7, #3
 8020a0a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8020a0c:	230f      	movs	r3, #15
 8020a0e:	18fb      	adds	r3, r7, r3
 8020a10:	2200      	movs	r2, #0
 8020a12:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	7c1b      	ldrb	r3, [r3, #16]
 8020a18:	2b00      	cmp	r3, #0
 8020a1a:	d116      	bne.n	8020a4a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020a1c:	2380      	movs	r3, #128	@ 0x80
 8020a1e:	009b      	lsls	r3, r3, #2
 8020a20:	6878      	ldr	r0, [r7, #4]
 8020a22:	2202      	movs	r2, #2
 8020a24:	2181      	movs	r1, #129	@ 0x81
 8020a26:	f002 fa54 	bl	8022ed2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8020a2a:	687b      	ldr	r3, [r7, #4]
 8020a2c:	2201      	movs	r2, #1
 8020a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020a30:	2380      	movs	r3, #128	@ 0x80
 8020a32:	009b      	lsls	r3, r3, #2
 8020a34:	6878      	ldr	r0, [r7, #4]
 8020a36:	2202      	movs	r2, #2
 8020a38:	2101      	movs	r1, #1
 8020a3a:	f002 fa4a 	bl	8022ed2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020a3e:	687a      	ldr	r2, [r7, #4]
 8020a40:	23b6      	movs	r3, #182	@ 0xb6
 8020a42:	005b      	lsls	r3, r3, #1
 8020a44:	2101      	movs	r1, #1
 8020a46:	50d1      	str	r1, [r2, r3]
 8020a48:	e013      	b.n	8020a72 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020a4a:	6878      	ldr	r0, [r7, #4]
 8020a4c:	2340      	movs	r3, #64	@ 0x40
 8020a4e:	2202      	movs	r2, #2
 8020a50:	2181      	movs	r1, #129	@ 0x81
 8020a52:	f002 fa3e 	bl	8022ed2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	2201      	movs	r2, #1
 8020a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020a5c:	6878      	ldr	r0, [r7, #4]
 8020a5e:	2340      	movs	r3, #64	@ 0x40
 8020a60:	2202      	movs	r2, #2
 8020a62:	2101      	movs	r1, #1
 8020a64:	f002 fa35 	bl	8022ed2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020a68:	687a      	ldr	r2, [r7, #4]
 8020a6a:	23b6      	movs	r3, #182	@ 0xb6
 8020a6c:	005b      	lsls	r3, r3, #1
 8020a6e:	2101      	movs	r1, #1
 8020a70:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8020a72:	6878      	ldr	r0, [r7, #4]
 8020a74:	2308      	movs	r3, #8
 8020a76:	2203      	movs	r2, #3
 8020a78:	2182      	movs	r1, #130	@ 0x82
 8020a7a:	f002 fa2a 	bl	8022ed2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	2201      	movs	r2, #1
 8020a82:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8020a84:	2387      	movs	r3, #135	@ 0x87
 8020a86:	009b      	lsls	r3, r3, #2
 8020a88:	0018      	movs	r0, r3
 8020a8a:	f002 fbbb 	bl	8023204 <USBD_static_malloc>
 8020a8e:	0001      	movs	r1, r0
 8020a90:	687a      	ldr	r2, [r7, #4]
 8020a92:	23ae      	movs	r3, #174	@ 0xae
 8020a94:	009b      	lsls	r3, r3, #2
 8020a96:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8020a98:	687a      	ldr	r2, [r7, #4]
 8020a9a:	23ae      	movs	r3, #174	@ 0xae
 8020a9c:	009b      	lsls	r3, r3, #2
 8020a9e:	58d3      	ldr	r3, [r2, r3]
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	d104      	bne.n	8020aae <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8020aa4:	230f      	movs	r3, #15
 8020aa6:	18fb      	adds	r3, r7, r3
 8020aa8:	2201      	movs	r2, #1
 8020aaa:	701a      	strb	r2, [r3, #0]
 8020aac:	e02c      	b.n	8020b08 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020aae:	687a      	ldr	r2, [r7, #4]
 8020ab0:	23ae      	movs	r3, #174	@ 0xae
 8020ab2:	009b      	lsls	r3, r3, #2
 8020ab4:	58d3      	ldr	r3, [r2, r3]
 8020ab6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8020ab8:	687a      	ldr	r2, [r7, #4]
 8020aba:	23af      	movs	r3, #175	@ 0xaf
 8020abc:	009b      	lsls	r3, r3, #2
 8020abe:	58d3      	ldr	r3, [r2, r3]
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8020ac4:	68ba      	ldr	r2, [r7, #8]
 8020ac6:	2385      	movs	r3, #133	@ 0x85
 8020ac8:	009b      	lsls	r3, r3, #2
 8020aca:	2100      	movs	r1, #0
 8020acc:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8020ace:	68ba      	ldr	r2, [r7, #8]
 8020ad0:	2386      	movs	r3, #134	@ 0x86
 8020ad2:	009b      	lsls	r3, r3, #2
 8020ad4:	2100      	movs	r1, #0
 8020ad6:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	7c1b      	ldrb	r3, [r3, #16]
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d10a      	bne.n	8020af6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020ae0:	68ba      	ldr	r2, [r7, #8]
 8020ae2:	2381      	movs	r3, #129	@ 0x81
 8020ae4:	009b      	lsls	r3, r3, #2
 8020ae6:	58d2      	ldr	r2, [r2, r3]
 8020ae8:	2380      	movs	r3, #128	@ 0x80
 8020aea:	009b      	lsls	r3, r3, #2
 8020aec:	6878      	ldr	r0, [r7, #4]
 8020aee:	2101      	movs	r1, #1
 8020af0:	f002 fb3a 	bl	8023168 <USBD_LL_PrepareReceive>
 8020af4:	e008      	b.n	8020b08 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020af6:	68ba      	ldr	r2, [r7, #8]
 8020af8:	2381      	movs	r3, #129	@ 0x81
 8020afa:	009b      	lsls	r3, r3, #2
 8020afc:	58d2      	ldr	r2, [r2, r3]
 8020afe:	6878      	ldr	r0, [r7, #4]
 8020b00:	2340      	movs	r3, #64	@ 0x40
 8020b02:	2101      	movs	r1, #1
 8020b04:	f002 fb30 	bl	8023168 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8020b08:	230f      	movs	r3, #15
 8020b0a:	18fb      	adds	r3, r7, r3
 8020b0c:	781b      	ldrb	r3, [r3, #0]
}
 8020b0e:	0018      	movs	r0, r3
 8020b10:	46bd      	mov	sp, r7
 8020b12:	b004      	add	sp, #16
 8020b14:	bd80      	pop	{r7, pc}

08020b16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020b16:	b580      	push	{r7, lr}
 8020b18:	b084      	sub	sp, #16
 8020b1a:	af00      	add	r7, sp, #0
 8020b1c:	6078      	str	r0, [r7, #4]
 8020b1e:	000a      	movs	r2, r1
 8020b20:	1cfb      	adds	r3, r7, #3
 8020b22:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8020b24:	230f      	movs	r3, #15
 8020b26:	18fb      	adds	r3, r7, r3
 8020b28:	2200      	movs	r2, #0
 8020b2a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	2181      	movs	r1, #129	@ 0x81
 8020b30:	0018      	movs	r0, r3
 8020b32:	f002 fa05 	bl	8022f40 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	2200      	movs	r2, #0
 8020b3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	2101      	movs	r1, #1
 8020b40:	0018      	movs	r0, r3
 8020b42:	f002 f9fd 	bl	8022f40 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8020b46:	687a      	ldr	r2, [r7, #4]
 8020b48:	23b6      	movs	r3, #182	@ 0xb6
 8020b4a:	005b      	lsls	r3, r3, #1
 8020b4c:	2100      	movs	r1, #0
 8020b4e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	2182      	movs	r1, #130	@ 0x82
 8020b54:	0018      	movs	r0, r3
 8020b56:	f002 f9f3 	bl	8022f40 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	2200      	movs	r2, #0
 8020b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8020b60:	687a      	ldr	r2, [r7, #4]
 8020b62:	23ae      	movs	r3, #174	@ 0xae
 8020b64:	009b      	lsls	r3, r3, #2
 8020b66:	58d3      	ldr	r3, [r2, r3]
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d011      	beq.n	8020b90 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8020b6c:	687a      	ldr	r2, [r7, #4]
 8020b6e:	23af      	movs	r3, #175	@ 0xaf
 8020b70:	009b      	lsls	r3, r3, #2
 8020b72:	58d3      	ldr	r3, [r2, r3]
 8020b74:	685b      	ldr	r3, [r3, #4]
 8020b76:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8020b78:	687a      	ldr	r2, [r7, #4]
 8020b7a:	23ae      	movs	r3, #174	@ 0xae
 8020b7c:	009b      	lsls	r3, r3, #2
 8020b7e:	58d3      	ldr	r3, [r2, r3]
 8020b80:	0018      	movs	r0, r3
 8020b82:	f002 fb4b 	bl	802321c <USBD_static_free>
    pdev->pClassData = NULL;
 8020b86:	687a      	ldr	r2, [r7, #4]
 8020b88:	23ae      	movs	r3, #174	@ 0xae
 8020b8a:	009b      	lsls	r3, r3, #2
 8020b8c:	2100      	movs	r1, #0
 8020b8e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8020b90:	230f      	movs	r3, #15
 8020b92:	18fb      	adds	r3, r7, r3
 8020b94:	781b      	ldrb	r3, [r3, #0]
}
 8020b96:	0018      	movs	r0, r3
 8020b98:	46bd      	mov	sp, r7
 8020b9a:	b004      	add	sp, #16
 8020b9c:	bd80      	pop	{r7, pc}
	...

08020ba0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8020ba0:	b580      	push	{r7, lr}
 8020ba2:	b086      	sub	sp, #24
 8020ba4:	af00      	add	r7, sp, #0
 8020ba6:	6078      	str	r0, [r7, #4]
 8020ba8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020baa:	687a      	ldr	r2, [r7, #4]
 8020bac:	23ae      	movs	r3, #174	@ 0xae
 8020bae:	009b      	lsls	r3, r3, #2
 8020bb0:	58d3      	ldr	r3, [r2, r3]
 8020bb2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8020bb4:	230f      	movs	r3, #15
 8020bb6:	18fb      	adds	r3, r7, r3
 8020bb8:	2200      	movs	r2, #0
 8020bba:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8020bbc:	230c      	movs	r3, #12
 8020bbe:	18fb      	adds	r3, r7, r3
 8020bc0:	2200      	movs	r2, #0
 8020bc2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8020bc4:	2317      	movs	r3, #23
 8020bc6:	18fb      	adds	r3, r7, r3
 8020bc8:	2200      	movs	r2, #0
 8020bca:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020bcc:	683b      	ldr	r3, [r7, #0]
 8020bce:	781b      	ldrb	r3, [r3, #0]
 8020bd0:	001a      	movs	r2, r3
 8020bd2:	2360      	movs	r3, #96	@ 0x60
 8020bd4:	4013      	ands	r3, r2
 8020bd6:	d03d      	beq.n	8020c54 <USBD_CDC_Setup+0xb4>
 8020bd8:	2b20      	cmp	r3, #32
 8020bda:	d000      	beq.n	8020bde <USBD_CDC_Setup+0x3e>
 8020bdc:	e094      	b.n	8020d08 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8020bde:	683b      	ldr	r3, [r7, #0]
 8020be0:	88db      	ldrh	r3, [r3, #6]
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	d02b      	beq.n	8020c3e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8020be6:	683b      	ldr	r3, [r7, #0]
 8020be8:	781b      	ldrb	r3, [r3, #0]
 8020bea:	b25b      	sxtb	r3, r3
 8020bec:	2b00      	cmp	r3, #0
 8020bee:	da12      	bge.n	8020c16 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020bf0:	687a      	ldr	r2, [r7, #4]
 8020bf2:	23af      	movs	r3, #175	@ 0xaf
 8020bf4:	009b      	lsls	r3, r3, #2
 8020bf6:	58d3      	ldr	r3, [r2, r3]
 8020bf8:	689b      	ldr	r3, [r3, #8]
 8020bfa:	683a      	ldr	r2, [r7, #0]
 8020bfc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8020bfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020c00:	683a      	ldr	r2, [r7, #0]
 8020c02:	88d2      	ldrh	r2, [r2, #6]
 8020c04:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8020c06:	6939      	ldr	r1, [r7, #16]
 8020c08:	683b      	ldr	r3, [r7, #0]
 8020c0a:	88da      	ldrh	r2, [r3, #6]
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	0018      	movs	r0, r3
 8020c10:	f001 fbaf 	bl	8022372 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8020c14:	e083      	b.n	8020d1e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8020c16:	683b      	ldr	r3, [r7, #0]
 8020c18:	7859      	ldrb	r1, [r3, #1]
 8020c1a:	693a      	ldr	r2, [r7, #16]
 8020c1c:	2380      	movs	r3, #128	@ 0x80
 8020c1e:	009b      	lsls	r3, r3, #2
 8020c20:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8020c22:	683b      	ldr	r3, [r7, #0]
 8020c24:	88db      	ldrh	r3, [r3, #6]
 8020c26:	b2d9      	uxtb	r1, r3
 8020c28:	693b      	ldr	r3, [r7, #16]
 8020c2a:	4a40      	ldr	r2, [pc, #256]	@ (8020d2c <USBD_CDC_Setup+0x18c>)
 8020c2c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8020c2e:	6939      	ldr	r1, [r7, #16]
 8020c30:	683b      	ldr	r3, [r7, #0]
 8020c32:	88da      	ldrh	r2, [r3, #6]
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	0018      	movs	r0, r3
 8020c38:	f001 fbce 	bl	80223d8 <USBD_CtlPrepareRx>
      break;
 8020c3c:	e06f      	b.n	8020d1e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020c3e:	687a      	ldr	r2, [r7, #4]
 8020c40:	23af      	movs	r3, #175	@ 0xaf
 8020c42:	009b      	lsls	r3, r3, #2
 8020c44:	58d3      	ldr	r3, [r2, r3]
 8020c46:	689b      	ldr	r3, [r3, #8]
 8020c48:	683a      	ldr	r2, [r7, #0]
 8020c4a:	7850      	ldrb	r0, [r2, #1]
 8020c4c:	6839      	ldr	r1, [r7, #0]
 8020c4e:	2200      	movs	r2, #0
 8020c50:	4798      	blx	r3
      break;
 8020c52:	e064      	b.n	8020d1e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8020c54:	683b      	ldr	r3, [r7, #0]
 8020c56:	785b      	ldrb	r3, [r3, #1]
 8020c58:	2b0b      	cmp	r3, #11
 8020c5a:	d037      	beq.n	8020ccc <USBD_CDC_Setup+0x12c>
 8020c5c:	dc47      	bgt.n	8020cee <USBD_CDC_Setup+0x14e>
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	d002      	beq.n	8020c68 <USBD_CDC_Setup+0xc8>
 8020c62:	2b0a      	cmp	r3, #10
 8020c64:	d019      	beq.n	8020c9a <USBD_CDC_Setup+0xfa>
 8020c66:	e042      	b.n	8020cee <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020c68:	687a      	ldr	r2, [r7, #4]
 8020c6a:	23a7      	movs	r3, #167	@ 0xa7
 8020c6c:	009b      	lsls	r3, r3, #2
 8020c6e:	5cd3      	ldrb	r3, [r2, r3]
 8020c70:	2b03      	cmp	r3, #3
 8020c72:	d107      	bne.n	8020c84 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8020c74:	230c      	movs	r3, #12
 8020c76:	18f9      	adds	r1, r7, r3
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	2202      	movs	r2, #2
 8020c7c:	0018      	movs	r0, r3
 8020c7e:	f001 fb78 	bl	8022372 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020c82:	e040      	b.n	8020d06 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020c84:	683a      	ldr	r2, [r7, #0]
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	0011      	movs	r1, r2
 8020c8a:	0018      	movs	r0, r3
 8020c8c:	f001 faf3 	bl	8022276 <USBD_CtlError>
            ret = USBD_FAIL;
 8020c90:	2317      	movs	r3, #23
 8020c92:	18fb      	adds	r3, r7, r3
 8020c94:	2202      	movs	r2, #2
 8020c96:	701a      	strb	r2, [r3, #0]
          break;
 8020c98:	e035      	b.n	8020d06 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020c9a:	687a      	ldr	r2, [r7, #4]
 8020c9c:	23a7      	movs	r3, #167	@ 0xa7
 8020c9e:	009b      	lsls	r3, r3, #2
 8020ca0:	5cd3      	ldrb	r3, [r2, r3]
 8020ca2:	2b03      	cmp	r3, #3
 8020ca4:	d107      	bne.n	8020cb6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8020ca6:	230f      	movs	r3, #15
 8020ca8:	18f9      	adds	r1, r7, r3
 8020caa:	687b      	ldr	r3, [r7, #4]
 8020cac:	2201      	movs	r2, #1
 8020cae:	0018      	movs	r0, r3
 8020cb0:	f001 fb5f 	bl	8022372 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020cb4:	e027      	b.n	8020d06 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020cb6:	683a      	ldr	r2, [r7, #0]
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	0011      	movs	r1, r2
 8020cbc:	0018      	movs	r0, r3
 8020cbe:	f001 fada 	bl	8022276 <USBD_CtlError>
            ret = USBD_FAIL;
 8020cc2:	2317      	movs	r3, #23
 8020cc4:	18fb      	adds	r3, r7, r3
 8020cc6:	2202      	movs	r2, #2
 8020cc8:	701a      	strb	r2, [r3, #0]
          break;
 8020cca:	e01c      	b.n	8020d06 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8020ccc:	687a      	ldr	r2, [r7, #4]
 8020cce:	23a7      	movs	r3, #167	@ 0xa7
 8020cd0:	009b      	lsls	r3, r3, #2
 8020cd2:	5cd3      	ldrb	r3, [r2, r3]
 8020cd4:	2b03      	cmp	r3, #3
 8020cd6:	d015      	beq.n	8020d04 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8020cd8:	683a      	ldr	r2, [r7, #0]
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	0011      	movs	r1, r2
 8020cde:	0018      	movs	r0, r3
 8020ce0:	f001 fac9 	bl	8022276 <USBD_CtlError>
            ret = USBD_FAIL;
 8020ce4:	2317      	movs	r3, #23
 8020ce6:	18fb      	adds	r3, r7, r3
 8020ce8:	2202      	movs	r2, #2
 8020cea:	701a      	strb	r2, [r3, #0]
          }
          break;
 8020cec:	e00a      	b.n	8020d04 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8020cee:	683a      	ldr	r2, [r7, #0]
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	0011      	movs	r1, r2
 8020cf4:	0018      	movs	r0, r3
 8020cf6:	f001 fabe 	bl	8022276 <USBD_CtlError>
          ret = USBD_FAIL;
 8020cfa:	2317      	movs	r3, #23
 8020cfc:	18fb      	adds	r3, r7, r3
 8020cfe:	2202      	movs	r2, #2
 8020d00:	701a      	strb	r2, [r3, #0]
          break;
 8020d02:	e000      	b.n	8020d06 <USBD_CDC_Setup+0x166>
          break;
 8020d04:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020d06:	e00a      	b.n	8020d1e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8020d08:	683a      	ldr	r2, [r7, #0]
 8020d0a:	687b      	ldr	r3, [r7, #4]
 8020d0c:	0011      	movs	r1, r2
 8020d0e:	0018      	movs	r0, r3
 8020d10:	f001 fab1 	bl	8022276 <USBD_CtlError>
      ret = USBD_FAIL;
 8020d14:	2317      	movs	r3, #23
 8020d16:	18fb      	adds	r3, r7, r3
 8020d18:	2202      	movs	r2, #2
 8020d1a:	701a      	strb	r2, [r3, #0]
      break;
 8020d1c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020d1e:	2317      	movs	r3, #23
 8020d20:	18fb      	adds	r3, r7, r3
 8020d22:	781b      	ldrb	r3, [r3, #0]
}
 8020d24:	0018      	movs	r0, r3
 8020d26:	46bd      	mov	sp, r7
 8020d28:	b006      	add	sp, #24
 8020d2a:	bd80      	pop	{r7, pc}
 8020d2c:	00000201 	.word	0x00000201

08020d30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020d30:	b580      	push	{r7, lr}
 8020d32:	b084      	sub	sp, #16
 8020d34:	af00      	add	r7, sp, #0
 8020d36:	6078      	str	r0, [r7, #4]
 8020d38:	000a      	movs	r2, r1
 8020d3a:	1cfb      	adds	r3, r7, #3
 8020d3c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020d3e:	687a      	ldr	r2, [r7, #4]
 8020d40:	23ae      	movs	r3, #174	@ 0xae
 8020d42:	009b      	lsls	r3, r3, #2
 8020d44:	58d3      	ldr	r3, [r2, r3]
 8020d46:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8020d48:	687a      	ldr	r2, [r7, #4]
 8020d4a:	23b0      	movs	r3, #176	@ 0xb0
 8020d4c:	009b      	lsls	r3, r3, #2
 8020d4e:	58d3      	ldr	r3, [r2, r3]
 8020d50:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8020d52:	687a      	ldr	r2, [r7, #4]
 8020d54:	23ae      	movs	r3, #174	@ 0xae
 8020d56:	009b      	lsls	r3, r3, #2
 8020d58:	58d3      	ldr	r3, [r2, r3]
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	d03e      	beq.n	8020ddc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8020d5e:	1cfb      	adds	r3, r7, #3
 8020d60:	781a      	ldrb	r2, [r3, #0]
 8020d62:	6879      	ldr	r1, [r7, #4]
 8020d64:	0013      	movs	r3, r2
 8020d66:	009b      	lsls	r3, r3, #2
 8020d68:	189b      	adds	r3, r3, r2
 8020d6a:	009b      	lsls	r3, r3, #2
 8020d6c:	18cb      	adds	r3, r1, r3
 8020d6e:	331c      	adds	r3, #28
 8020d70:	681b      	ldr	r3, [r3, #0]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d02b      	beq.n	8020dce <USBD_CDC_DataIn+0x9e>
 8020d76:	1cfb      	adds	r3, r7, #3
 8020d78:	781a      	ldrb	r2, [r3, #0]
 8020d7a:	6879      	ldr	r1, [r7, #4]
 8020d7c:	0013      	movs	r3, r2
 8020d7e:	009b      	lsls	r3, r3, #2
 8020d80:	189b      	adds	r3, r3, r2
 8020d82:	009b      	lsls	r3, r3, #2
 8020d84:	18cb      	adds	r3, r1, r3
 8020d86:	331c      	adds	r3, #28
 8020d88:	6818      	ldr	r0, [r3, #0]
 8020d8a:	1cfb      	adds	r3, r7, #3
 8020d8c:	781a      	ldrb	r2, [r3, #0]
 8020d8e:	68b9      	ldr	r1, [r7, #8]
 8020d90:	0013      	movs	r3, r2
 8020d92:	009b      	lsls	r3, r3, #2
 8020d94:	189b      	adds	r3, r3, r2
 8020d96:	00db      	lsls	r3, r3, #3
 8020d98:	18cb      	adds	r3, r1, r3
 8020d9a:	3338      	adds	r3, #56	@ 0x38
 8020d9c:	681b      	ldr	r3, [r3, #0]
 8020d9e:	0019      	movs	r1, r3
 8020da0:	f7df fa86 	bl	80002b0 <__aeabi_uidivmod>
 8020da4:	1e0b      	subs	r3, r1, #0
 8020da6:	d112      	bne.n	8020dce <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8020da8:	1cfb      	adds	r3, r7, #3
 8020daa:	781a      	ldrb	r2, [r3, #0]
 8020dac:	6879      	ldr	r1, [r7, #4]
 8020dae:	0013      	movs	r3, r2
 8020db0:	009b      	lsls	r3, r3, #2
 8020db2:	189b      	adds	r3, r3, r2
 8020db4:	009b      	lsls	r3, r3, #2
 8020db6:	18cb      	adds	r3, r1, r3
 8020db8:	331c      	adds	r3, #28
 8020dba:	2200      	movs	r2, #0
 8020dbc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020dbe:	1cfb      	adds	r3, r7, #3
 8020dc0:	7819      	ldrb	r1, [r3, #0]
 8020dc2:	6878      	ldr	r0, [r7, #4]
 8020dc4:	2300      	movs	r3, #0
 8020dc6:	2200      	movs	r2, #0
 8020dc8:	f002 f997 	bl	80230fa <USBD_LL_Transmit>
 8020dcc:	e004      	b.n	8020dd8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8020dce:	68fa      	ldr	r2, [r7, #12]
 8020dd0:	2385      	movs	r3, #133	@ 0x85
 8020dd2:	009b      	lsls	r3, r3, #2
 8020dd4:	2100      	movs	r1, #0
 8020dd6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8020dd8:	2300      	movs	r3, #0
 8020dda:	e000      	b.n	8020dde <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8020ddc:	2302      	movs	r3, #2
  }
}
 8020dde:	0018      	movs	r0, r3
 8020de0:	46bd      	mov	sp, r7
 8020de2:	b004      	add	sp, #16
 8020de4:	bd80      	pop	{r7, pc}

08020de6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020de6:	b580      	push	{r7, lr}
 8020de8:	b084      	sub	sp, #16
 8020dea:	af00      	add	r7, sp, #0
 8020dec:	6078      	str	r0, [r7, #4]
 8020dee:	000a      	movs	r2, r1
 8020df0:	1cfb      	adds	r3, r7, #3
 8020df2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020df4:	687a      	ldr	r2, [r7, #4]
 8020df6:	23ae      	movs	r3, #174	@ 0xae
 8020df8:	009b      	lsls	r3, r3, #2
 8020dfa:	58d3      	ldr	r3, [r2, r3]
 8020dfc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8020dfe:	1cfb      	adds	r3, r7, #3
 8020e00:	781a      	ldrb	r2, [r3, #0]
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	0011      	movs	r1, r2
 8020e06:	0018      	movs	r0, r3
 8020e08:	f002 f9e5 	bl	80231d6 <USBD_LL_GetRxDataSize>
 8020e0c:	0001      	movs	r1, r0
 8020e0e:	68fa      	ldr	r2, [r7, #12]
 8020e10:	2383      	movs	r3, #131	@ 0x83
 8020e12:	009b      	lsls	r3, r3, #2
 8020e14:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8020e16:	687a      	ldr	r2, [r7, #4]
 8020e18:	23ae      	movs	r3, #174	@ 0xae
 8020e1a:	009b      	lsls	r3, r3, #2
 8020e1c:	58d3      	ldr	r3, [r2, r3]
 8020e1e:	2b00      	cmp	r3, #0
 8020e20:	d011      	beq.n	8020e46 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8020e22:	687a      	ldr	r2, [r7, #4]
 8020e24:	23af      	movs	r3, #175	@ 0xaf
 8020e26:	009b      	lsls	r3, r3, #2
 8020e28:	58d3      	ldr	r3, [r2, r3]
 8020e2a:	68da      	ldr	r2, [r3, #12]
 8020e2c:	68f9      	ldr	r1, [r7, #12]
 8020e2e:	2381      	movs	r3, #129	@ 0x81
 8020e30:	009b      	lsls	r3, r3, #2
 8020e32:	58c8      	ldr	r0, [r1, r3]
 8020e34:	68fb      	ldr	r3, [r7, #12]
 8020e36:	2183      	movs	r1, #131	@ 0x83
 8020e38:	0089      	lsls	r1, r1, #2
 8020e3a:	468c      	mov	ip, r1
 8020e3c:	4463      	add	r3, ip
 8020e3e:	0019      	movs	r1, r3
 8020e40:	4790      	blx	r2

    return USBD_OK;
 8020e42:	2300      	movs	r3, #0
 8020e44:	e000      	b.n	8020e48 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8020e46:	2302      	movs	r3, #2
  }
}
 8020e48:	0018      	movs	r0, r3
 8020e4a:	46bd      	mov	sp, r7
 8020e4c:	b004      	add	sp, #16
 8020e4e:	bd80      	pop	{r7, pc}

08020e50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8020e50:	b590      	push	{r4, r7, lr}
 8020e52:	b085      	sub	sp, #20
 8020e54:	af00      	add	r7, sp, #0
 8020e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020e58:	687a      	ldr	r2, [r7, #4]
 8020e5a:	23ae      	movs	r3, #174	@ 0xae
 8020e5c:	009b      	lsls	r3, r3, #2
 8020e5e:	58d3      	ldr	r3, [r2, r3]
 8020e60:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8020e62:	687a      	ldr	r2, [r7, #4]
 8020e64:	23af      	movs	r3, #175	@ 0xaf
 8020e66:	009b      	lsls	r3, r3, #2
 8020e68:	58d3      	ldr	r3, [r2, r3]
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d018      	beq.n	8020ea0 <USBD_CDC_EP0_RxReady+0x50>
 8020e6e:	68fa      	ldr	r2, [r7, #12]
 8020e70:	2380      	movs	r3, #128	@ 0x80
 8020e72:	009b      	lsls	r3, r3, #2
 8020e74:	5cd3      	ldrb	r3, [r2, r3]
 8020e76:	2bff      	cmp	r3, #255	@ 0xff
 8020e78:	d012      	beq.n	8020ea0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020e7a:	687a      	ldr	r2, [r7, #4]
 8020e7c:	23af      	movs	r3, #175	@ 0xaf
 8020e7e:	009b      	lsls	r3, r3, #2
 8020e80:	58d3      	ldr	r3, [r2, r3]
 8020e82:	689b      	ldr	r3, [r3, #8]
 8020e84:	68f9      	ldr	r1, [r7, #12]
 8020e86:	2280      	movs	r2, #128	@ 0x80
 8020e88:	0092      	lsls	r2, r2, #2
 8020e8a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8020e8c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8020e8e:	68fa      	ldr	r2, [r7, #12]
 8020e90:	4c06      	ldr	r4, [pc, #24]	@ (8020eac <USBD_CDC_EP0_RxReady+0x5c>)
 8020e92:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020e94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8020e96:	68fa      	ldr	r2, [r7, #12]
 8020e98:	2380      	movs	r3, #128	@ 0x80
 8020e9a:	009b      	lsls	r3, r3, #2
 8020e9c:	21ff      	movs	r1, #255	@ 0xff
 8020e9e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8020ea0:	2300      	movs	r3, #0
}
 8020ea2:	0018      	movs	r0, r3
 8020ea4:	46bd      	mov	sp, r7
 8020ea6:	b005      	add	sp, #20
 8020ea8:	bd90      	pop	{r4, r7, pc}
 8020eaa:	46c0      	nop			@ (mov r8, r8)
 8020eac:	00000201 	.word	0x00000201

08020eb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8020eb0:	b580      	push	{r7, lr}
 8020eb2:	b082      	sub	sp, #8
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	2243      	movs	r2, #67	@ 0x43
 8020ebc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8020ebe:	4b02      	ldr	r3, [pc, #8]	@ (8020ec8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8020ec0:	0018      	movs	r0, r3
 8020ec2:	46bd      	mov	sp, r7
 8020ec4:	b002      	add	sp, #8
 8020ec6:	bd80      	pop	{r7, pc}
 8020ec8:	20000184 	.word	0x20000184

08020ecc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8020ecc:	b580      	push	{r7, lr}
 8020ece:	b082      	sub	sp, #8
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	2243      	movs	r2, #67	@ 0x43
 8020ed8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8020eda:	4b02      	ldr	r3, [pc, #8]	@ (8020ee4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8020edc:	0018      	movs	r0, r3
 8020ede:	46bd      	mov	sp, r7
 8020ee0:	b002      	add	sp, #8
 8020ee2:	bd80      	pop	{r7, pc}
 8020ee4:	20000140 	.word	0x20000140

08020ee8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020ee8:	b580      	push	{r7, lr}
 8020eea:	b082      	sub	sp, #8
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	2243      	movs	r2, #67	@ 0x43
 8020ef4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8020ef6:	4b02      	ldr	r3, [pc, #8]	@ (8020f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8020ef8:	0018      	movs	r0, r3
 8020efa:	46bd      	mov	sp, r7
 8020efc:	b002      	add	sp, #8
 8020efe:	bd80      	pop	{r7, pc}
 8020f00:	200001c8 	.word	0x200001c8

08020f04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020f04:	b580      	push	{r7, lr}
 8020f06:	b082      	sub	sp, #8
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	220a      	movs	r2, #10
 8020f10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8020f12:	4b02      	ldr	r3, [pc, #8]	@ (8020f1c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8020f14:	0018      	movs	r0, r3
 8020f16:	46bd      	mov	sp, r7
 8020f18:	b002      	add	sp, #8
 8020f1a:	bd80      	pop	{r7, pc}
 8020f1c:	200000fc 	.word	0x200000fc

08020f20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8020f20:	b580      	push	{r7, lr}
 8020f22:	b084      	sub	sp, #16
 8020f24:	af00      	add	r7, sp, #0
 8020f26:	6078      	str	r0, [r7, #4]
 8020f28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8020f2a:	200f      	movs	r0, #15
 8020f2c:	183b      	adds	r3, r7, r0
 8020f2e:	2202      	movs	r2, #2
 8020f30:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8020f32:	683b      	ldr	r3, [r7, #0]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d007      	beq.n	8020f48 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8020f38:	687a      	ldr	r2, [r7, #4]
 8020f3a:	23af      	movs	r3, #175	@ 0xaf
 8020f3c:	009b      	lsls	r3, r3, #2
 8020f3e:	6839      	ldr	r1, [r7, #0]
 8020f40:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8020f42:	183b      	adds	r3, r7, r0
 8020f44:	2200      	movs	r2, #0
 8020f46:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8020f48:	230f      	movs	r3, #15
 8020f4a:	18fb      	adds	r3, r7, r3
 8020f4c:	781b      	ldrb	r3, [r3, #0]
}
 8020f4e:	0018      	movs	r0, r3
 8020f50:	46bd      	mov	sp, r7
 8020f52:	b004      	add	sp, #16
 8020f54:	bd80      	pop	{r7, pc}

08020f56 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8020f56:	b580      	push	{r7, lr}
 8020f58:	b086      	sub	sp, #24
 8020f5a:	af00      	add	r7, sp, #0
 8020f5c:	60f8      	str	r0, [r7, #12]
 8020f5e:	60b9      	str	r1, [r7, #8]
 8020f60:	1dbb      	adds	r3, r7, #6
 8020f62:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020f64:	68fa      	ldr	r2, [r7, #12]
 8020f66:	23ae      	movs	r3, #174	@ 0xae
 8020f68:	009b      	lsls	r3, r3, #2
 8020f6a:	58d3      	ldr	r3, [r2, r3]
 8020f6c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8020f6e:	697a      	ldr	r2, [r7, #20]
 8020f70:	2382      	movs	r3, #130	@ 0x82
 8020f72:	009b      	lsls	r3, r3, #2
 8020f74:	68b9      	ldr	r1, [r7, #8]
 8020f76:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8020f78:	1dbb      	adds	r3, r7, #6
 8020f7a:	8819      	ldrh	r1, [r3, #0]
 8020f7c:	697a      	ldr	r2, [r7, #20]
 8020f7e:	2384      	movs	r3, #132	@ 0x84
 8020f80:	009b      	lsls	r3, r3, #2
 8020f82:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020f84:	2300      	movs	r3, #0
}
 8020f86:	0018      	movs	r0, r3
 8020f88:	46bd      	mov	sp, r7
 8020f8a:	b006      	add	sp, #24
 8020f8c:	bd80      	pop	{r7, pc}

08020f8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8020f8e:	b580      	push	{r7, lr}
 8020f90:	b084      	sub	sp, #16
 8020f92:	af00      	add	r7, sp, #0
 8020f94:	6078      	str	r0, [r7, #4]
 8020f96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020f98:	687a      	ldr	r2, [r7, #4]
 8020f9a:	23ae      	movs	r3, #174	@ 0xae
 8020f9c:	009b      	lsls	r3, r3, #2
 8020f9e:	58d3      	ldr	r3, [r2, r3]
 8020fa0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8020fa2:	68fa      	ldr	r2, [r7, #12]
 8020fa4:	2381      	movs	r3, #129	@ 0x81
 8020fa6:	009b      	lsls	r3, r3, #2
 8020fa8:	6839      	ldr	r1, [r7, #0]
 8020faa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020fac:	2300      	movs	r3, #0
}
 8020fae:	0018      	movs	r0, r3
 8020fb0:	46bd      	mov	sp, r7
 8020fb2:	b004      	add	sp, #16
 8020fb4:	bd80      	pop	{r7, pc}

08020fb6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8020fb6:	b580      	push	{r7, lr}
 8020fb8:	b084      	sub	sp, #16
 8020fba:	af00      	add	r7, sp, #0
 8020fbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020fbe:	687a      	ldr	r2, [r7, #4]
 8020fc0:	23ae      	movs	r3, #174	@ 0xae
 8020fc2:	009b      	lsls	r3, r3, #2
 8020fc4:	58d3      	ldr	r3, [r2, r3]
 8020fc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8020fc8:	687a      	ldr	r2, [r7, #4]
 8020fca:	23ae      	movs	r3, #174	@ 0xae
 8020fcc:	009b      	lsls	r3, r3, #2
 8020fce:	58d3      	ldr	r3, [r2, r3]
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	d022      	beq.n	802101a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8020fd4:	68fa      	ldr	r2, [r7, #12]
 8020fd6:	2385      	movs	r3, #133	@ 0x85
 8020fd8:	009b      	lsls	r3, r3, #2
 8020fda:	58d3      	ldr	r3, [r2, r3]
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	d11a      	bne.n	8021016 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8020fe0:	68fa      	ldr	r2, [r7, #12]
 8020fe2:	2385      	movs	r3, #133	@ 0x85
 8020fe4:	009b      	lsls	r3, r3, #2
 8020fe6:	2101      	movs	r1, #1
 8020fe8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020fea:	68fa      	ldr	r2, [r7, #12]
 8020fec:	2384      	movs	r3, #132	@ 0x84
 8020fee:	009b      	lsls	r3, r3, #2
 8020ff0:	58d2      	ldr	r2, [r2, r3]
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020ff6:	68fa      	ldr	r2, [r7, #12]
 8020ff8:	2382      	movs	r3, #130	@ 0x82
 8020ffa:	009b      	lsls	r3, r3, #2
 8020ffc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8020ffe:	68fa      	ldr	r2, [r7, #12]
 8021000:	2384      	movs	r3, #132	@ 0x84
 8021002:	009b      	lsls	r3, r3, #2
 8021004:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021006:	b29b      	uxth	r3, r3
 8021008:	6878      	ldr	r0, [r7, #4]
 802100a:	000a      	movs	r2, r1
 802100c:	2181      	movs	r1, #129	@ 0x81
 802100e:	f002 f874 	bl	80230fa <USBD_LL_Transmit>

      return USBD_OK;
 8021012:	2300      	movs	r3, #0
 8021014:	e002      	b.n	802101c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021016:	2301      	movs	r3, #1
 8021018:	e000      	b.n	802101c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 802101a:	2302      	movs	r3, #2
  }
}
 802101c:	0018      	movs	r0, r3
 802101e:	46bd      	mov	sp, r7
 8021020:	b004      	add	sp, #16
 8021022:	bd80      	pop	{r7, pc}

08021024 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021024:	b580      	push	{r7, lr}
 8021026:	b084      	sub	sp, #16
 8021028:	af00      	add	r7, sp, #0
 802102a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802102c:	687a      	ldr	r2, [r7, #4]
 802102e:	23ae      	movs	r3, #174	@ 0xae
 8021030:	009b      	lsls	r3, r3, #2
 8021032:	58d3      	ldr	r3, [r2, r3]
 8021034:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021036:	687a      	ldr	r2, [r7, #4]
 8021038:	23ae      	movs	r3, #174	@ 0xae
 802103a:	009b      	lsls	r3, r3, #2
 802103c:	58d3      	ldr	r3, [r2, r3]
 802103e:	2b00      	cmp	r3, #0
 8021040:	d019      	beq.n	8021076 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	7c1b      	ldrb	r3, [r3, #16]
 8021046:	2b00      	cmp	r3, #0
 8021048:	d10a      	bne.n	8021060 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 802104a:	68fa      	ldr	r2, [r7, #12]
 802104c:	2381      	movs	r3, #129	@ 0x81
 802104e:	009b      	lsls	r3, r3, #2
 8021050:	58d2      	ldr	r2, [r2, r3]
 8021052:	2380      	movs	r3, #128	@ 0x80
 8021054:	009b      	lsls	r3, r3, #2
 8021056:	6878      	ldr	r0, [r7, #4]
 8021058:	2101      	movs	r1, #1
 802105a:	f002 f885 	bl	8023168 <USBD_LL_PrepareReceive>
 802105e:	e008      	b.n	8021072 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021060:	68fa      	ldr	r2, [r7, #12]
 8021062:	2381      	movs	r3, #129	@ 0x81
 8021064:	009b      	lsls	r3, r3, #2
 8021066:	58d2      	ldr	r2, [r2, r3]
 8021068:	6878      	ldr	r0, [r7, #4]
 802106a:	2340      	movs	r3, #64	@ 0x40
 802106c:	2101      	movs	r1, #1
 802106e:	f002 f87b 	bl	8023168 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021072:	2300      	movs	r3, #0
 8021074:	e000      	b.n	8021078 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021076:	2302      	movs	r3, #2
  }
}
 8021078:	0018      	movs	r0, r3
 802107a:	46bd      	mov	sp, r7
 802107c:	b004      	add	sp, #16
 802107e:	bd80      	pop	{r7, pc}

08021080 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021080:	b580      	push	{r7, lr}
 8021082:	b084      	sub	sp, #16
 8021084:	af00      	add	r7, sp, #0
 8021086:	60f8      	str	r0, [r7, #12]
 8021088:	60b9      	str	r1, [r7, #8]
 802108a:	1dfb      	adds	r3, r7, #7
 802108c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802108e:	68fb      	ldr	r3, [r7, #12]
 8021090:	2b00      	cmp	r3, #0
 8021092:	d101      	bne.n	8021098 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021094:	2302      	movs	r3, #2
 8021096:	e020      	b.n	80210da <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021098:	68fa      	ldr	r2, [r7, #12]
 802109a:	23ad      	movs	r3, #173	@ 0xad
 802109c:	009b      	lsls	r3, r3, #2
 802109e:	58d3      	ldr	r3, [r2, r3]
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d004      	beq.n	80210ae <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80210a4:	68fa      	ldr	r2, [r7, #12]
 80210a6:	23ad      	movs	r3, #173	@ 0xad
 80210a8:	009b      	lsls	r3, r3, #2
 80210aa:	2100      	movs	r1, #0
 80210ac:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80210ae:	68bb      	ldr	r3, [r7, #8]
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d004      	beq.n	80210be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80210b4:	68fa      	ldr	r2, [r7, #12]
 80210b6:	23ac      	movs	r3, #172	@ 0xac
 80210b8:	009b      	lsls	r3, r3, #2
 80210ba:	68b9      	ldr	r1, [r7, #8]
 80210bc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80210be:	68fa      	ldr	r2, [r7, #12]
 80210c0:	23a7      	movs	r3, #167	@ 0xa7
 80210c2:	009b      	lsls	r3, r3, #2
 80210c4:	2101      	movs	r1, #1
 80210c6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80210c8:	68fb      	ldr	r3, [r7, #12]
 80210ca:	1dfa      	adds	r2, r7, #7
 80210cc:	7812      	ldrb	r2, [r2, #0]
 80210ce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	0018      	movs	r0, r3
 80210d4:	f001 fe74 	bl	8022dc0 <USBD_LL_Init>

  return USBD_OK;
 80210d8:	2300      	movs	r3, #0
}
 80210da:	0018      	movs	r0, r3
 80210dc:	46bd      	mov	sp, r7
 80210de:	b004      	add	sp, #16
 80210e0:	bd80      	pop	{r7, pc}

080210e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80210e2:	b580      	push	{r7, lr}
 80210e4:	b084      	sub	sp, #16
 80210e6:	af00      	add	r7, sp, #0
 80210e8:	6078      	str	r0, [r7, #4]
 80210ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80210ec:	200f      	movs	r0, #15
 80210ee:	183b      	adds	r3, r7, r0
 80210f0:	2200      	movs	r2, #0
 80210f2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80210f4:	683b      	ldr	r3, [r7, #0]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	d008      	beq.n	802110c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80210fa:	687a      	ldr	r2, [r7, #4]
 80210fc:	23ad      	movs	r3, #173	@ 0xad
 80210fe:	009b      	lsls	r3, r3, #2
 8021100:	6839      	ldr	r1, [r7, #0]
 8021102:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021104:	183b      	adds	r3, r7, r0
 8021106:	2200      	movs	r2, #0
 8021108:	701a      	strb	r2, [r3, #0]
 802110a:	e003      	b.n	8021114 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 802110c:	230f      	movs	r3, #15
 802110e:	18fb      	adds	r3, r7, r3
 8021110:	2202      	movs	r2, #2
 8021112:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021114:	230f      	movs	r3, #15
 8021116:	18fb      	adds	r3, r7, r3
 8021118:	781b      	ldrb	r3, [r3, #0]
}
 802111a:	0018      	movs	r0, r3
 802111c:	46bd      	mov	sp, r7
 802111e:	b004      	add	sp, #16
 8021120:	bd80      	pop	{r7, pc}

08021122 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021122:	b580      	push	{r7, lr}
 8021124:	b082      	sub	sp, #8
 8021126:	af00      	add	r7, sp, #0
 8021128:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 802112a:	687b      	ldr	r3, [r7, #4]
 802112c:	0018      	movs	r0, r3
 802112e:	f001 feab 	bl	8022e88 <USBD_LL_Start>

  return USBD_OK;
 8021132:	2300      	movs	r3, #0
}
 8021134:	0018      	movs	r0, r3
 8021136:	46bd      	mov	sp, r7
 8021138:	b002      	add	sp, #8
 802113a:	bd80      	pop	{r7, pc}

0802113c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 802113c:	b580      	push	{r7, lr}
 802113e:	b082      	sub	sp, #8
 8021140:	af00      	add	r7, sp, #0
 8021142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021144:	2300      	movs	r3, #0
}
 8021146:	0018      	movs	r0, r3
 8021148:	46bd      	mov	sp, r7
 802114a:	b002      	add	sp, #8
 802114c:	bd80      	pop	{r7, pc}

0802114e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 802114e:	b590      	push	{r4, r7, lr}
 8021150:	b085      	sub	sp, #20
 8021152:	af00      	add	r7, sp, #0
 8021154:	6078      	str	r0, [r7, #4]
 8021156:	000a      	movs	r2, r1
 8021158:	1cfb      	adds	r3, r7, #3
 802115a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 802115c:	240f      	movs	r4, #15
 802115e:	193b      	adds	r3, r7, r4
 8021160:	2202      	movs	r2, #2
 8021162:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021164:	687a      	ldr	r2, [r7, #4]
 8021166:	23ad      	movs	r3, #173	@ 0xad
 8021168:	009b      	lsls	r3, r3, #2
 802116a:	58d3      	ldr	r3, [r2, r3]
 802116c:	2b00      	cmp	r3, #0
 802116e:	d00e      	beq.n	802118e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021170:	687a      	ldr	r2, [r7, #4]
 8021172:	23ad      	movs	r3, #173	@ 0xad
 8021174:	009b      	lsls	r3, r3, #2
 8021176:	58d3      	ldr	r3, [r2, r3]
 8021178:	681b      	ldr	r3, [r3, #0]
 802117a:	1cfa      	adds	r2, r7, #3
 802117c:	7811      	ldrb	r1, [r2, #0]
 802117e:	687a      	ldr	r2, [r7, #4]
 8021180:	0010      	movs	r0, r2
 8021182:	4798      	blx	r3
 8021184:	1e03      	subs	r3, r0, #0
 8021186:	d102      	bne.n	802118e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021188:	193b      	adds	r3, r7, r4
 802118a:	2200      	movs	r2, #0
 802118c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 802118e:	230f      	movs	r3, #15
 8021190:	18fb      	adds	r3, r7, r3
 8021192:	781b      	ldrb	r3, [r3, #0]
}
 8021194:	0018      	movs	r0, r3
 8021196:	46bd      	mov	sp, r7
 8021198:	b005      	add	sp, #20
 802119a:	bd90      	pop	{r4, r7, pc}

0802119c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 802119c:	b580      	push	{r7, lr}
 802119e:	b082      	sub	sp, #8
 80211a0:	af00      	add	r7, sp, #0
 80211a2:	6078      	str	r0, [r7, #4]
 80211a4:	000a      	movs	r2, r1
 80211a6:	1cfb      	adds	r3, r7, #3
 80211a8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80211aa:	687a      	ldr	r2, [r7, #4]
 80211ac:	23ad      	movs	r3, #173	@ 0xad
 80211ae:	009b      	lsls	r3, r3, #2
 80211b0:	58d3      	ldr	r3, [r2, r3]
 80211b2:	685b      	ldr	r3, [r3, #4]
 80211b4:	1cfa      	adds	r2, r7, #3
 80211b6:	7811      	ldrb	r1, [r2, #0]
 80211b8:	687a      	ldr	r2, [r7, #4]
 80211ba:	0010      	movs	r0, r2
 80211bc:	4798      	blx	r3

  return USBD_OK;
 80211be:	2300      	movs	r3, #0
}
 80211c0:	0018      	movs	r0, r3
 80211c2:	46bd      	mov	sp, r7
 80211c4:	b002      	add	sp, #8
 80211c6:	bd80      	pop	{r7, pc}

080211c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80211c8:	b580      	push	{r7, lr}
 80211ca:	b082      	sub	sp, #8
 80211cc:	af00      	add	r7, sp, #0
 80211ce:	6078      	str	r0, [r7, #4]
 80211d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80211d2:	687b      	ldr	r3, [r7, #4]
 80211d4:	22aa      	movs	r2, #170	@ 0xaa
 80211d6:	0092      	lsls	r2, r2, #2
 80211d8:	4694      	mov	ip, r2
 80211da:	4463      	add	r3, ip
 80211dc:	683a      	ldr	r2, [r7, #0]
 80211de:	0011      	movs	r1, r2
 80211e0:	0018      	movs	r0, r3
 80211e2:	f001 f810 	bl	8022206 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80211e6:	687a      	ldr	r2, [r7, #4]
 80211e8:	23a5      	movs	r3, #165	@ 0xa5
 80211ea:	009b      	lsls	r3, r3, #2
 80211ec:	2101      	movs	r1, #1
 80211ee:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	4a23      	ldr	r2, [pc, #140]	@ (8021280 <USBD_LL_SetupStage+0xb8>)
 80211f4:	5a9b      	ldrh	r3, [r3, r2]
 80211f6:	0019      	movs	r1, r3
 80211f8:	687a      	ldr	r2, [r7, #4]
 80211fa:	23a6      	movs	r3, #166	@ 0xa6
 80211fc:	009b      	lsls	r3, r3, #2
 80211fe:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021200:	687a      	ldr	r2, [r7, #4]
 8021202:	23aa      	movs	r3, #170	@ 0xaa
 8021204:	009b      	lsls	r3, r3, #2
 8021206:	5cd3      	ldrb	r3, [r2, r3]
 8021208:	001a      	movs	r2, r3
 802120a:	231f      	movs	r3, #31
 802120c:	4013      	ands	r3, r2
 802120e:	2b02      	cmp	r3, #2
 8021210:	d019      	beq.n	8021246 <USBD_LL_SetupStage+0x7e>
 8021212:	d822      	bhi.n	802125a <USBD_LL_SetupStage+0x92>
 8021214:	2b00      	cmp	r3, #0
 8021216:	d002      	beq.n	802121e <USBD_LL_SetupStage+0x56>
 8021218:	2b01      	cmp	r3, #1
 802121a:	d00a      	beq.n	8021232 <USBD_LL_SetupStage+0x6a>
 802121c:	e01d      	b.n	802125a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	22aa      	movs	r2, #170	@ 0xaa
 8021222:	0092      	lsls	r2, r2, #2
 8021224:	189a      	adds	r2, r3, r2
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	0011      	movs	r1, r2
 802122a:	0018      	movs	r0, r3
 802122c:	f000 fa10 	bl	8021650 <USBD_StdDevReq>
      break;
 8021230:	e020      	b.n	8021274 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	22aa      	movs	r2, #170	@ 0xaa
 8021236:	0092      	lsls	r2, r2, #2
 8021238:	189a      	adds	r2, r3, r2
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	0011      	movs	r1, r2
 802123e:	0018      	movs	r0, r3
 8021240:	f000 fa78 	bl	8021734 <USBD_StdItfReq>
      break;
 8021244:	e016      	b.n	8021274 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	22aa      	movs	r2, #170	@ 0xaa
 802124a:	0092      	lsls	r2, r2, #2
 802124c:	189a      	adds	r2, r3, r2
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	0011      	movs	r1, r2
 8021252:	0018      	movs	r0, r3
 8021254:	f000 fac5 	bl	80217e2 <USBD_StdEPReq>
      break;
 8021258:	e00c      	b.n	8021274 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802125a:	687a      	ldr	r2, [r7, #4]
 802125c:	23aa      	movs	r3, #170	@ 0xaa
 802125e:	009b      	lsls	r3, r3, #2
 8021260:	5cd3      	ldrb	r3, [r2, r3]
 8021262:	227f      	movs	r2, #127	@ 0x7f
 8021264:	4393      	bics	r3, r2
 8021266:	b2da      	uxtb	r2, r3
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	0011      	movs	r1, r2
 802126c:	0018      	movs	r0, r3
 802126e:	f001 fe92 	bl	8022f96 <USBD_LL_StallEP>
      break;
 8021272:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021274:	2300      	movs	r3, #0
}
 8021276:	0018      	movs	r0, r3
 8021278:	46bd      	mov	sp, r7
 802127a:	b002      	add	sp, #8
 802127c:	bd80      	pop	{r7, pc}
 802127e:	46c0      	nop			@ (mov r8, r8)
 8021280:	000002ae 	.word	0x000002ae

08021284 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021284:	b580      	push	{r7, lr}
 8021286:	b086      	sub	sp, #24
 8021288:	af00      	add	r7, sp, #0
 802128a:	60f8      	str	r0, [r7, #12]
 802128c:	607a      	str	r2, [r7, #4]
 802128e:	200b      	movs	r0, #11
 8021290:	183b      	adds	r3, r7, r0
 8021292:	1c0a      	adds	r2, r1, #0
 8021294:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021296:	183b      	adds	r3, r7, r0
 8021298:	781b      	ldrb	r3, [r3, #0]
 802129a:	2b00      	cmp	r3, #0
 802129c:	d154      	bne.n	8021348 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 802129e:	68fb      	ldr	r3, [r7, #12]
 80212a0:	3355      	adds	r3, #85	@ 0x55
 80212a2:	33ff      	adds	r3, #255	@ 0xff
 80212a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80212a6:	68fa      	ldr	r2, [r7, #12]
 80212a8:	23a5      	movs	r3, #165	@ 0xa5
 80212aa:	009b      	lsls	r3, r3, #2
 80212ac:	58d3      	ldr	r3, [r2, r3]
 80212ae:	2b03      	cmp	r3, #3
 80212b0:	d139      	bne.n	8021326 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80212b2:	697b      	ldr	r3, [r7, #20]
 80212b4:	68da      	ldr	r2, [r3, #12]
 80212b6:	697b      	ldr	r3, [r7, #20]
 80212b8:	691b      	ldr	r3, [r3, #16]
 80212ba:	429a      	cmp	r2, r3
 80212bc:	d919      	bls.n	80212f2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80212be:	697b      	ldr	r3, [r7, #20]
 80212c0:	68da      	ldr	r2, [r3, #12]
 80212c2:	697b      	ldr	r3, [r7, #20]
 80212c4:	691b      	ldr	r3, [r3, #16]
 80212c6:	1ad2      	subs	r2, r2, r3
 80212c8:	697b      	ldr	r3, [r7, #20]
 80212ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80212cc:	697b      	ldr	r3, [r7, #20]
 80212ce:	68da      	ldr	r2, [r3, #12]
 80212d0:	697b      	ldr	r3, [r7, #20]
 80212d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80212d4:	429a      	cmp	r2, r3
 80212d6:	d203      	bcs.n	80212e0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80212d8:	697b      	ldr	r3, [r7, #20]
 80212da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80212dc:	b29b      	uxth	r3, r3
 80212de:	e002      	b.n	80212e6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80212e0:	697b      	ldr	r3, [r7, #20]
 80212e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80212e4:	b29b      	uxth	r3, r3
 80212e6:	6879      	ldr	r1, [r7, #4]
 80212e8:	68f8      	ldr	r0, [r7, #12]
 80212ea:	001a      	movs	r2, r3
 80212ec:	f001 f898 	bl	8022420 <USBD_CtlContinueRx>
 80212f0:	e045      	b.n	802137e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80212f2:	68fa      	ldr	r2, [r7, #12]
 80212f4:	23ad      	movs	r3, #173	@ 0xad
 80212f6:	009b      	lsls	r3, r3, #2
 80212f8:	58d3      	ldr	r3, [r2, r3]
 80212fa:	691b      	ldr	r3, [r3, #16]
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d00d      	beq.n	802131c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021300:	68fa      	ldr	r2, [r7, #12]
 8021302:	23a7      	movs	r3, #167	@ 0xa7
 8021304:	009b      	lsls	r3, r3, #2
 8021306:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021308:	2b03      	cmp	r3, #3
 802130a:	d107      	bne.n	802131c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 802130c:	68fa      	ldr	r2, [r7, #12]
 802130e:	23ad      	movs	r3, #173	@ 0xad
 8021310:	009b      	lsls	r3, r3, #2
 8021312:	58d3      	ldr	r3, [r2, r3]
 8021314:	691b      	ldr	r3, [r3, #16]
 8021316:	68fa      	ldr	r2, [r7, #12]
 8021318:	0010      	movs	r0, r2
 802131a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 802131c:	68fb      	ldr	r3, [r7, #12]
 802131e:	0018      	movs	r0, r3
 8021320:	f001 f891 	bl	8022446 <USBD_CtlSendStatus>
 8021324:	e02b      	b.n	802137e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021326:	68fa      	ldr	r2, [r7, #12]
 8021328:	23a5      	movs	r3, #165	@ 0xa5
 802132a:	009b      	lsls	r3, r3, #2
 802132c:	58d3      	ldr	r3, [r2, r3]
 802132e:	2b05      	cmp	r3, #5
 8021330:	d125      	bne.n	802137e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8021332:	68fa      	ldr	r2, [r7, #12]
 8021334:	23a5      	movs	r3, #165	@ 0xa5
 8021336:	009b      	lsls	r3, r3, #2
 8021338:	2100      	movs	r1, #0
 802133a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 802133c:	68fb      	ldr	r3, [r7, #12]
 802133e:	2100      	movs	r1, #0
 8021340:	0018      	movs	r0, r3
 8021342:	f001 fe28 	bl	8022f96 <USBD_LL_StallEP>
 8021346:	e01a      	b.n	802137e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021348:	68fa      	ldr	r2, [r7, #12]
 802134a:	23ad      	movs	r3, #173	@ 0xad
 802134c:	009b      	lsls	r3, r3, #2
 802134e:	58d3      	ldr	r3, [r2, r3]
 8021350:	699b      	ldr	r3, [r3, #24]
 8021352:	2b00      	cmp	r3, #0
 8021354:	d011      	beq.n	802137a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021356:	68fa      	ldr	r2, [r7, #12]
 8021358:	23a7      	movs	r3, #167	@ 0xa7
 802135a:	009b      	lsls	r3, r3, #2
 802135c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 802135e:	2b03      	cmp	r3, #3
 8021360:	d10b      	bne.n	802137a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8021362:	68fa      	ldr	r2, [r7, #12]
 8021364:	23ad      	movs	r3, #173	@ 0xad
 8021366:	009b      	lsls	r3, r3, #2
 8021368:	58d3      	ldr	r3, [r2, r3]
 802136a:	699b      	ldr	r3, [r3, #24]
 802136c:	220b      	movs	r2, #11
 802136e:	18ba      	adds	r2, r7, r2
 8021370:	7811      	ldrb	r1, [r2, #0]
 8021372:	68fa      	ldr	r2, [r7, #12]
 8021374:	0010      	movs	r0, r2
 8021376:	4798      	blx	r3
 8021378:	e001      	b.n	802137e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802137a:	2302      	movs	r3, #2
 802137c:	e000      	b.n	8021380 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 802137e:	2300      	movs	r3, #0
}
 8021380:	0018      	movs	r0, r3
 8021382:	46bd      	mov	sp, r7
 8021384:	b006      	add	sp, #24
 8021386:	bd80      	pop	{r7, pc}

08021388 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021388:	b580      	push	{r7, lr}
 802138a:	b086      	sub	sp, #24
 802138c:	af00      	add	r7, sp, #0
 802138e:	60f8      	str	r0, [r7, #12]
 8021390:	607a      	str	r2, [r7, #4]
 8021392:	200b      	movs	r0, #11
 8021394:	183b      	adds	r3, r7, r0
 8021396:	1c0a      	adds	r2, r1, #0
 8021398:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 802139a:	183b      	adds	r3, r7, r0
 802139c:	781b      	ldrb	r3, [r3, #0]
 802139e:	2b00      	cmp	r3, #0
 80213a0:	d000      	beq.n	80213a4 <USBD_LL_DataInStage+0x1c>
 80213a2:	e08e      	b.n	80214c2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80213a4:	68fb      	ldr	r3, [r7, #12]
 80213a6:	3314      	adds	r3, #20
 80213a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80213aa:	68fa      	ldr	r2, [r7, #12]
 80213ac:	23a5      	movs	r3, #165	@ 0xa5
 80213ae:	009b      	lsls	r3, r3, #2
 80213b0:	58d3      	ldr	r3, [r2, r3]
 80213b2:	2b02      	cmp	r3, #2
 80213b4:	d164      	bne.n	8021480 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80213b6:	697b      	ldr	r3, [r7, #20]
 80213b8:	68da      	ldr	r2, [r3, #12]
 80213ba:	697b      	ldr	r3, [r7, #20]
 80213bc:	691b      	ldr	r3, [r3, #16]
 80213be:	429a      	cmp	r2, r3
 80213c0:	d915      	bls.n	80213ee <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80213c2:	697b      	ldr	r3, [r7, #20]
 80213c4:	68da      	ldr	r2, [r3, #12]
 80213c6:	697b      	ldr	r3, [r7, #20]
 80213c8:	691b      	ldr	r3, [r3, #16]
 80213ca:	1ad2      	subs	r2, r2, r3
 80213cc:	697b      	ldr	r3, [r7, #20]
 80213ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80213d0:	697b      	ldr	r3, [r7, #20]
 80213d2:	68db      	ldr	r3, [r3, #12]
 80213d4:	b29a      	uxth	r2, r3
 80213d6:	6879      	ldr	r1, [r7, #4]
 80213d8:	68fb      	ldr	r3, [r7, #12]
 80213da:	0018      	movs	r0, r3
 80213dc:	f000 ffe9 	bl	80223b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80213e0:	68f8      	ldr	r0, [r7, #12]
 80213e2:	2300      	movs	r3, #0
 80213e4:	2200      	movs	r2, #0
 80213e6:	2100      	movs	r1, #0
 80213e8:	f001 febe 	bl	8023168 <USBD_LL_PrepareReceive>
 80213ec:	e059      	b.n	80214a2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80213ee:	697b      	ldr	r3, [r7, #20]
 80213f0:	689a      	ldr	r2, [r3, #8]
 80213f2:	697b      	ldr	r3, [r7, #20]
 80213f4:	691b      	ldr	r3, [r3, #16]
 80213f6:	0019      	movs	r1, r3
 80213f8:	0010      	movs	r0, r2
 80213fa:	f7de ff59 	bl	80002b0 <__aeabi_uidivmod>
 80213fe:	1e0b      	subs	r3, r1, #0
 8021400:	d11f      	bne.n	8021442 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8021402:	697b      	ldr	r3, [r7, #20]
 8021404:	689a      	ldr	r2, [r3, #8]
 8021406:	697b      	ldr	r3, [r7, #20]
 8021408:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 802140a:	429a      	cmp	r2, r3
 802140c:	d319      	bcc.n	8021442 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 802140e:	697b      	ldr	r3, [r7, #20]
 8021410:	689a      	ldr	r2, [r3, #8]
 8021412:	68f9      	ldr	r1, [r7, #12]
 8021414:	23a6      	movs	r3, #166	@ 0xa6
 8021416:	009b      	lsls	r3, r3, #2
 8021418:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 802141a:	429a      	cmp	r2, r3
 802141c:	d211      	bcs.n	8021442 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 802141e:	68fb      	ldr	r3, [r7, #12]
 8021420:	2200      	movs	r2, #0
 8021422:	2100      	movs	r1, #0
 8021424:	0018      	movs	r0, r3
 8021426:	f000 ffc4 	bl	80223b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802142a:	68fa      	ldr	r2, [r7, #12]
 802142c:	23a6      	movs	r3, #166	@ 0xa6
 802142e:	009b      	lsls	r3, r3, #2
 8021430:	2100      	movs	r1, #0
 8021432:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021434:	68f8      	ldr	r0, [r7, #12]
 8021436:	2300      	movs	r3, #0
 8021438:	2200      	movs	r2, #0
 802143a:	2100      	movs	r1, #0
 802143c:	f001 fe94 	bl	8023168 <USBD_LL_PrepareReceive>
 8021440:	e02f      	b.n	80214a2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021442:	68fa      	ldr	r2, [r7, #12]
 8021444:	23ad      	movs	r3, #173	@ 0xad
 8021446:	009b      	lsls	r3, r3, #2
 8021448:	58d3      	ldr	r3, [r2, r3]
 802144a:	68db      	ldr	r3, [r3, #12]
 802144c:	2b00      	cmp	r3, #0
 802144e:	d00d      	beq.n	802146c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021450:	68fa      	ldr	r2, [r7, #12]
 8021452:	23a7      	movs	r3, #167	@ 0xa7
 8021454:	009b      	lsls	r3, r3, #2
 8021456:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021458:	2b03      	cmp	r3, #3
 802145a:	d107      	bne.n	802146c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 802145c:	68fa      	ldr	r2, [r7, #12]
 802145e:	23ad      	movs	r3, #173	@ 0xad
 8021460:	009b      	lsls	r3, r3, #2
 8021462:	58d3      	ldr	r3, [r2, r3]
 8021464:	68db      	ldr	r3, [r3, #12]
 8021466:	68fa      	ldr	r2, [r7, #12]
 8021468:	0010      	movs	r0, r2
 802146a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 802146c:	68fb      	ldr	r3, [r7, #12]
 802146e:	2180      	movs	r1, #128	@ 0x80
 8021470:	0018      	movs	r0, r3
 8021472:	f001 fd90 	bl	8022f96 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8021476:	68fb      	ldr	r3, [r7, #12]
 8021478:	0018      	movs	r0, r3
 802147a:	f000 fff8 	bl	802246e <USBD_CtlReceiveStatus>
 802147e:	e010      	b.n	80214a2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021480:	68fa      	ldr	r2, [r7, #12]
 8021482:	23a5      	movs	r3, #165	@ 0xa5
 8021484:	009b      	lsls	r3, r3, #2
 8021486:	58d3      	ldr	r3, [r2, r3]
 8021488:	2b04      	cmp	r3, #4
 802148a:	d005      	beq.n	8021498 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 802148c:	68fa      	ldr	r2, [r7, #12]
 802148e:	23a5      	movs	r3, #165	@ 0xa5
 8021490:	009b      	lsls	r3, r3, #2
 8021492:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021494:	2b00      	cmp	r3, #0
 8021496:	d104      	bne.n	80214a2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8021498:	68fb      	ldr	r3, [r7, #12]
 802149a:	2180      	movs	r1, #128	@ 0x80
 802149c:	0018      	movs	r0, r3
 802149e:	f001 fd7a 	bl	8022f96 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80214a2:	68fa      	ldr	r2, [r7, #12]
 80214a4:	23a8      	movs	r3, #168	@ 0xa8
 80214a6:	009b      	lsls	r3, r3, #2
 80214a8:	5cd3      	ldrb	r3, [r2, r3]
 80214aa:	2b01      	cmp	r3, #1
 80214ac:	d124      	bne.n	80214f8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80214ae:	68fb      	ldr	r3, [r7, #12]
 80214b0:	0018      	movs	r0, r3
 80214b2:	f7ff fe43 	bl	802113c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80214b6:	68fa      	ldr	r2, [r7, #12]
 80214b8:	23a8      	movs	r3, #168	@ 0xa8
 80214ba:	009b      	lsls	r3, r3, #2
 80214bc:	2100      	movs	r1, #0
 80214be:	54d1      	strb	r1, [r2, r3]
 80214c0:	e01a      	b.n	80214f8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80214c2:	68fa      	ldr	r2, [r7, #12]
 80214c4:	23ad      	movs	r3, #173	@ 0xad
 80214c6:	009b      	lsls	r3, r3, #2
 80214c8:	58d3      	ldr	r3, [r2, r3]
 80214ca:	695b      	ldr	r3, [r3, #20]
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d011      	beq.n	80214f4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80214d0:	68fa      	ldr	r2, [r7, #12]
 80214d2:	23a7      	movs	r3, #167	@ 0xa7
 80214d4:	009b      	lsls	r3, r3, #2
 80214d6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80214d8:	2b03      	cmp	r3, #3
 80214da:	d10b      	bne.n	80214f4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80214dc:	68fa      	ldr	r2, [r7, #12]
 80214de:	23ad      	movs	r3, #173	@ 0xad
 80214e0:	009b      	lsls	r3, r3, #2
 80214e2:	58d3      	ldr	r3, [r2, r3]
 80214e4:	695b      	ldr	r3, [r3, #20]
 80214e6:	220b      	movs	r2, #11
 80214e8:	18ba      	adds	r2, r7, r2
 80214ea:	7811      	ldrb	r1, [r2, #0]
 80214ec:	68fa      	ldr	r2, [r7, #12]
 80214ee:	0010      	movs	r0, r2
 80214f0:	4798      	blx	r3
 80214f2:	e001      	b.n	80214f8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80214f4:	2302      	movs	r3, #2
 80214f6:	e000      	b.n	80214fa <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80214f8:	2300      	movs	r3, #0
}
 80214fa:	0018      	movs	r0, r3
 80214fc:	46bd      	mov	sp, r7
 80214fe:	b006      	add	sp, #24
 8021500:	bd80      	pop	{r7, pc}

08021502 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021502:	b580      	push	{r7, lr}
 8021504:	b082      	sub	sp, #8
 8021506:	af00      	add	r7, sp, #0
 8021508:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802150a:	6878      	ldr	r0, [r7, #4]
 802150c:	2340      	movs	r3, #64	@ 0x40
 802150e:	2200      	movs	r2, #0
 8021510:	2100      	movs	r1, #0
 8021512:	f001 fcde 	bl	8022ed2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021516:	687a      	ldr	r2, [r7, #4]
 8021518:	23ac      	movs	r3, #172	@ 0xac
 802151a:	005b      	lsls	r3, r3, #1
 802151c:	2101      	movs	r1, #1
 802151e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021520:	687a      	ldr	r2, [r7, #4]
 8021522:	23b2      	movs	r3, #178	@ 0xb2
 8021524:	005b      	lsls	r3, r3, #1
 8021526:	2140      	movs	r1, #64	@ 0x40
 8021528:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802152a:	6878      	ldr	r0, [r7, #4]
 802152c:	2340      	movs	r3, #64	@ 0x40
 802152e:	2200      	movs	r2, #0
 8021530:	2180      	movs	r1, #128	@ 0x80
 8021532:	f001 fcce 	bl	8022ed2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021536:	687b      	ldr	r3, [r7, #4]
 8021538:	2201      	movs	r2, #1
 802153a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	2240      	movs	r2, #64	@ 0x40
 8021540:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021542:	687a      	ldr	r2, [r7, #4]
 8021544:	23a7      	movs	r3, #167	@ 0xa7
 8021546:	009b      	lsls	r3, r3, #2
 8021548:	2101      	movs	r1, #1
 802154a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 802154c:	687a      	ldr	r2, [r7, #4]
 802154e:	23a5      	movs	r3, #165	@ 0xa5
 8021550:	009b      	lsls	r3, r3, #2
 8021552:	2100      	movs	r1, #0
 8021554:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	2200      	movs	r2, #0
 802155a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802155c:	687a      	ldr	r2, [r7, #4]
 802155e:	23a9      	movs	r3, #169	@ 0xa9
 8021560:	009b      	lsls	r3, r3, #2
 8021562:	2100      	movs	r1, #0
 8021564:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8021566:	687a      	ldr	r2, [r7, #4]
 8021568:	23ae      	movs	r3, #174	@ 0xae
 802156a:	009b      	lsls	r3, r3, #2
 802156c:	58d3      	ldr	r3, [r2, r3]
 802156e:	2b00      	cmp	r3, #0
 8021570:	d00a      	beq.n	8021588 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021572:	687a      	ldr	r2, [r7, #4]
 8021574:	23ad      	movs	r3, #173	@ 0xad
 8021576:	009b      	lsls	r3, r3, #2
 8021578:	58d3      	ldr	r3, [r2, r3]
 802157a:	685a      	ldr	r2, [r3, #4]
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	685b      	ldr	r3, [r3, #4]
 8021580:	b2d9      	uxtb	r1, r3
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	0018      	movs	r0, r3
 8021586:	4790      	blx	r2
  }

  return USBD_OK;
 8021588:	2300      	movs	r3, #0
}
 802158a:	0018      	movs	r0, r3
 802158c:	46bd      	mov	sp, r7
 802158e:	b002      	add	sp, #8
 8021590:	bd80      	pop	{r7, pc}

08021592 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021592:	b580      	push	{r7, lr}
 8021594:	b082      	sub	sp, #8
 8021596:	af00      	add	r7, sp, #0
 8021598:	6078      	str	r0, [r7, #4]
 802159a:	000a      	movs	r2, r1
 802159c:	1cfb      	adds	r3, r7, #3
 802159e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	1cfa      	adds	r2, r7, #3
 80215a4:	7812      	ldrb	r2, [r2, #0]
 80215a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80215a8:	2300      	movs	r3, #0
}
 80215aa:	0018      	movs	r0, r3
 80215ac:	46bd      	mov	sp, r7
 80215ae:	b002      	add	sp, #8
 80215b0:	bd80      	pop	{r7, pc}
	...

080215b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80215b4:	b580      	push	{r7, lr}
 80215b6:	b082      	sub	sp, #8
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80215bc:	687a      	ldr	r2, [r7, #4]
 80215be:	23a7      	movs	r3, #167	@ 0xa7
 80215c0:	009b      	lsls	r3, r3, #2
 80215c2:	5cd1      	ldrb	r1, [r2, r3]
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	4a06      	ldr	r2, [pc, #24]	@ (80215e0 <USBD_LL_Suspend+0x2c>)
 80215c8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80215ca:	687a      	ldr	r2, [r7, #4]
 80215cc:	23a7      	movs	r3, #167	@ 0xa7
 80215ce:	009b      	lsls	r3, r3, #2
 80215d0:	2104      	movs	r1, #4
 80215d2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80215d4:	2300      	movs	r3, #0
}
 80215d6:	0018      	movs	r0, r3
 80215d8:	46bd      	mov	sp, r7
 80215da:	b002      	add	sp, #8
 80215dc:	bd80      	pop	{r7, pc}
 80215de:	46c0      	nop			@ (mov r8, r8)
 80215e0:	0000029d 	.word	0x0000029d

080215e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80215e4:	b580      	push	{r7, lr}
 80215e6:	b082      	sub	sp, #8
 80215e8:	af00      	add	r7, sp, #0
 80215ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80215ec:	687a      	ldr	r2, [r7, #4]
 80215ee:	23a7      	movs	r3, #167	@ 0xa7
 80215f0:	009b      	lsls	r3, r3, #2
 80215f2:	5cd3      	ldrb	r3, [r2, r3]
 80215f4:	2b04      	cmp	r3, #4
 80215f6:	d106      	bne.n	8021606 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	4a05      	ldr	r2, [pc, #20]	@ (8021610 <USBD_LL_Resume+0x2c>)
 80215fc:	5c99      	ldrb	r1, [r3, r2]
 80215fe:	687a      	ldr	r2, [r7, #4]
 8021600:	23a7      	movs	r3, #167	@ 0xa7
 8021602:	009b      	lsls	r3, r3, #2
 8021604:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8021606:	2300      	movs	r3, #0
}
 8021608:	0018      	movs	r0, r3
 802160a:	46bd      	mov	sp, r7
 802160c:	b002      	add	sp, #8
 802160e:	bd80      	pop	{r7, pc}
 8021610:	0000029d 	.word	0x0000029d

08021614 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8021614:	b580      	push	{r7, lr}
 8021616:	b082      	sub	sp, #8
 8021618:	af00      	add	r7, sp, #0
 802161a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802161c:	687a      	ldr	r2, [r7, #4]
 802161e:	23a7      	movs	r3, #167	@ 0xa7
 8021620:	009b      	lsls	r3, r3, #2
 8021622:	5cd3      	ldrb	r3, [r2, r3]
 8021624:	2b03      	cmp	r3, #3
 8021626:	d10e      	bne.n	8021646 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8021628:	687a      	ldr	r2, [r7, #4]
 802162a:	23ad      	movs	r3, #173	@ 0xad
 802162c:	009b      	lsls	r3, r3, #2
 802162e:	58d3      	ldr	r3, [r2, r3]
 8021630:	69db      	ldr	r3, [r3, #28]
 8021632:	2b00      	cmp	r3, #0
 8021634:	d007      	beq.n	8021646 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8021636:	687a      	ldr	r2, [r7, #4]
 8021638:	23ad      	movs	r3, #173	@ 0xad
 802163a:	009b      	lsls	r3, r3, #2
 802163c:	58d3      	ldr	r3, [r2, r3]
 802163e:	69db      	ldr	r3, [r3, #28]
 8021640:	687a      	ldr	r2, [r7, #4]
 8021642:	0010      	movs	r0, r2
 8021644:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021646:	2300      	movs	r3, #0
}
 8021648:	0018      	movs	r0, r3
 802164a:	46bd      	mov	sp, r7
 802164c:	b002      	add	sp, #8
 802164e:	bd80      	pop	{r7, pc}

08021650 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8021650:	b580      	push	{r7, lr}
 8021652:	b084      	sub	sp, #16
 8021654:	af00      	add	r7, sp, #0
 8021656:	6078      	str	r0, [r7, #4]
 8021658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802165a:	230f      	movs	r3, #15
 802165c:	18fb      	adds	r3, r7, r3
 802165e:	2200      	movs	r2, #0
 8021660:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021662:	683b      	ldr	r3, [r7, #0]
 8021664:	781b      	ldrb	r3, [r3, #0]
 8021666:	001a      	movs	r2, r3
 8021668:	2360      	movs	r3, #96	@ 0x60
 802166a:	4013      	ands	r3, r2
 802166c:	2b40      	cmp	r3, #64	@ 0x40
 802166e:	d004      	beq.n	802167a <USBD_StdDevReq+0x2a>
 8021670:	d84f      	bhi.n	8021712 <USBD_StdDevReq+0xc2>
 8021672:	2b00      	cmp	r3, #0
 8021674:	d00b      	beq.n	802168e <USBD_StdDevReq+0x3e>
 8021676:	2b20      	cmp	r3, #32
 8021678:	d14b      	bne.n	8021712 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802167a:	687a      	ldr	r2, [r7, #4]
 802167c:	23ad      	movs	r3, #173	@ 0xad
 802167e:	009b      	lsls	r3, r3, #2
 8021680:	58d3      	ldr	r3, [r2, r3]
 8021682:	689b      	ldr	r3, [r3, #8]
 8021684:	6839      	ldr	r1, [r7, #0]
 8021686:	687a      	ldr	r2, [r7, #4]
 8021688:	0010      	movs	r0, r2
 802168a:	4798      	blx	r3
      break;
 802168c:	e048      	b.n	8021720 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802168e:	683b      	ldr	r3, [r7, #0]
 8021690:	785b      	ldrb	r3, [r3, #1]
 8021692:	2b09      	cmp	r3, #9
 8021694:	d835      	bhi.n	8021702 <USBD_StdDevReq+0xb2>
 8021696:	009a      	lsls	r2, r3, #2
 8021698:	4b25      	ldr	r3, [pc, #148]	@ (8021730 <USBD_StdDevReq+0xe0>)
 802169a:	18d3      	adds	r3, r2, r3
 802169c:	681b      	ldr	r3, [r3, #0]
 802169e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80216a0:	683a      	ldr	r2, [r7, #0]
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	0011      	movs	r1, r2
 80216a6:	0018      	movs	r0, r3
 80216a8:	f000 fa52 	bl	8021b50 <USBD_GetDescriptor>
          break;
 80216ac:	e030      	b.n	8021710 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80216ae:	683a      	ldr	r2, [r7, #0]
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	0011      	movs	r1, r2
 80216b4:	0018      	movs	r0, r3
 80216b6:	f000 fbfd 	bl	8021eb4 <USBD_SetAddress>
          break;
 80216ba:	e029      	b.n	8021710 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80216bc:	683a      	ldr	r2, [r7, #0]
 80216be:	687b      	ldr	r3, [r7, #4]
 80216c0:	0011      	movs	r1, r2
 80216c2:	0018      	movs	r0, r3
 80216c4:	f000 fc4a 	bl	8021f5c <USBD_SetConfig>
          break;
 80216c8:	e022      	b.n	8021710 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80216ca:	683a      	ldr	r2, [r7, #0]
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	0011      	movs	r1, r2
 80216d0:	0018      	movs	r0, r3
 80216d2:	f000 fce7 	bl	80220a4 <USBD_GetConfig>
          break;
 80216d6:	e01b      	b.n	8021710 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80216d8:	683a      	ldr	r2, [r7, #0]
 80216da:	687b      	ldr	r3, [r7, #4]
 80216dc:	0011      	movs	r1, r2
 80216de:	0018      	movs	r0, r3
 80216e0:	f000 fd1b 	bl	802211a <USBD_GetStatus>
          break;
 80216e4:	e014      	b.n	8021710 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80216e6:	683a      	ldr	r2, [r7, #0]
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	0011      	movs	r1, r2
 80216ec:	0018      	movs	r0, r3
 80216ee:	f000 fd4e 	bl	802218e <USBD_SetFeature>
          break;
 80216f2:	e00d      	b.n	8021710 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80216f4:	683a      	ldr	r2, [r7, #0]
 80216f6:	687b      	ldr	r3, [r7, #4]
 80216f8:	0011      	movs	r1, r2
 80216fa:	0018      	movs	r0, r3
 80216fc:	f000 fd5d 	bl	80221ba <USBD_ClrFeature>
          break;
 8021700:	e006      	b.n	8021710 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8021702:	683a      	ldr	r2, [r7, #0]
 8021704:	687b      	ldr	r3, [r7, #4]
 8021706:	0011      	movs	r1, r2
 8021708:	0018      	movs	r0, r3
 802170a:	f000 fdb4 	bl	8022276 <USBD_CtlError>
          break;
 802170e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021710:	e006      	b.n	8021720 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8021712:	683a      	ldr	r2, [r7, #0]
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	0011      	movs	r1, r2
 8021718:	0018      	movs	r0, r3
 802171a:	f000 fdac 	bl	8022276 <USBD_CtlError>
      break;
 802171e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021720:	230f      	movs	r3, #15
 8021722:	18fb      	adds	r3, r7, r3
 8021724:	781b      	ldrb	r3, [r3, #0]
}
 8021726:	0018      	movs	r0, r3
 8021728:	46bd      	mov	sp, r7
 802172a:	b004      	add	sp, #16
 802172c:	bd80      	pop	{r7, pc}
 802172e:	46c0      	nop			@ (mov r8, r8)
 8021730:	0802e374 	.word	0x0802e374

08021734 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8021734:	b5b0      	push	{r4, r5, r7, lr}
 8021736:	b084      	sub	sp, #16
 8021738:	af00      	add	r7, sp, #0
 802173a:	6078      	str	r0, [r7, #4]
 802173c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802173e:	230f      	movs	r3, #15
 8021740:	18fb      	adds	r3, r7, r3
 8021742:	2200      	movs	r2, #0
 8021744:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021746:	683b      	ldr	r3, [r7, #0]
 8021748:	781b      	ldrb	r3, [r3, #0]
 802174a:	001a      	movs	r2, r3
 802174c:	2360      	movs	r3, #96	@ 0x60
 802174e:	4013      	ands	r3, r2
 8021750:	2b40      	cmp	r3, #64	@ 0x40
 8021752:	d004      	beq.n	802175e <USBD_StdItfReq+0x2a>
 8021754:	d839      	bhi.n	80217ca <USBD_StdItfReq+0x96>
 8021756:	2b00      	cmp	r3, #0
 8021758:	d001      	beq.n	802175e <USBD_StdItfReq+0x2a>
 802175a:	2b20      	cmp	r3, #32
 802175c:	d135      	bne.n	80217ca <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802175e:	687a      	ldr	r2, [r7, #4]
 8021760:	23a7      	movs	r3, #167	@ 0xa7
 8021762:	009b      	lsls	r3, r3, #2
 8021764:	5cd3      	ldrb	r3, [r2, r3]
 8021766:	3b01      	subs	r3, #1
 8021768:	2b02      	cmp	r3, #2
 802176a:	d825      	bhi.n	80217b8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802176c:	683b      	ldr	r3, [r7, #0]
 802176e:	889b      	ldrh	r3, [r3, #4]
 8021770:	b2db      	uxtb	r3, r3
 8021772:	2b01      	cmp	r3, #1
 8021774:	d819      	bhi.n	80217aa <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021776:	687a      	ldr	r2, [r7, #4]
 8021778:	23ad      	movs	r3, #173	@ 0xad
 802177a:	009b      	lsls	r3, r3, #2
 802177c:	58d3      	ldr	r3, [r2, r3]
 802177e:	689b      	ldr	r3, [r3, #8]
 8021780:	250f      	movs	r5, #15
 8021782:	197c      	adds	r4, r7, r5
 8021784:	6839      	ldr	r1, [r7, #0]
 8021786:	687a      	ldr	r2, [r7, #4]
 8021788:	0010      	movs	r0, r2
 802178a:	4798      	blx	r3
 802178c:	0003      	movs	r3, r0
 802178e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021790:	683b      	ldr	r3, [r7, #0]
 8021792:	88db      	ldrh	r3, [r3, #6]
 8021794:	2b00      	cmp	r3, #0
 8021796:	d116      	bne.n	80217c6 <USBD_StdItfReq+0x92>
 8021798:	197b      	adds	r3, r7, r5
 802179a:	781b      	ldrb	r3, [r3, #0]
 802179c:	2b00      	cmp	r3, #0
 802179e:	d112      	bne.n	80217c6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	0018      	movs	r0, r3
 80217a4:	f000 fe4f 	bl	8022446 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80217a8:	e00d      	b.n	80217c6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80217aa:	683a      	ldr	r2, [r7, #0]
 80217ac:	687b      	ldr	r3, [r7, #4]
 80217ae:	0011      	movs	r1, r2
 80217b0:	0018      	movs	r0, r3
 80217b2:	f000 fd60 	bl	8022276 <USBD_CtlError>
          break;
 80217b6:	e006      	b.n	80217c6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80217b8:	683a      	ldr	r2, [r7, #0]
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	0011      	movs	r1, r2
 80217be:	0018      	movs	r0, r3
 80217c0:	f000 fd59 	bl	8022276 <USBD_CtlError>
          break;
 80217c4:	e000      	b.n	80217c8 <USBD_StdItfReq+0x94>
          break;
 80217c6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80217c8:	e006      	b.n	80217d8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80217ca:	683a      	ldr	r2, [r7, #0]
 80217cc:	687b      	ldr	r3, [r7, #4]
 80217ce:	0011      	movs	r1, r2
 80217d0:	0018      	movs	r0, r3
 80217d2:	f000 fd50 	bl	8022276 <USBD_CtlError>
      break;
 80217d6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80217d8:	2300      	movs	r3, #0
}
 80217da:	0018      	movs	r0, r3
 80217dc:	46bd      	mov	sp, r7
 80217de:	b004      	add	sp, #16
 80217e0:	bdb0      	pop	{r4, r5, r7, pc}

080217e2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80217e2:	b5b0      	push	{r4, r5, r7, lr}
 80217e4:	b084      	sub	sp, #16
 80217e6:	af00      	add	r7, sp, #0
 80217e8:	6078      	str	r0, [r7, #4]
 80217ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80217ec:	230f      	movs	r3, #15
 80217ee:	18fb      	adds	r3, r7, r3
 80217f0:	2200      	movs	r2, #0
 80217f2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80217f4:	683b      	ldr	r3, [r7, #0]
 80217f6:	889a      	ldrh	r2, [r3, #4]
 80217f8:	230e      	movs	r3, #14
 80217fa:	18fb      	adds	r3, r7, r3
 80217fc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80217fe:	683b      	ldr	r3, [r7, #0]
 8021800:	781b      	ldrb	r3, [r3, #0]
 8021802:	001a      	movs	r2, r3
 8021804:	2360      	movs	r3, #96	@ 0x60
 8021806:	4013      	ands	r3, r2
 8021808:	2b40      	cmp	r3, #64	@ 0x40
 802180a:	d006      	beq.n	802181a <USBD_StdEPReq+0x38>
 802180c:	d900      	bls.n	8021810 <USBD_StdEPReq+0x2e>
 802180e:	e190      	b.n	8021b32 <USBD_StdEPReq+0x350>
 8021810:	2b00      	cmp	r3, #0
 8021812:	d00c      	beq.n	802182e <USBD_StdEPReq+0x4c>
 8021814:	2b20      	cmp	r3, #32
 8021816:	d000      	beq.n	802181a <USBD_StdEPReq+0x38>
 8021818:	e18b      	b.n	8021b32 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802181a:	687a      	ldr	r2, [r7, #4]
 802181c:	23ad      	movs	r3, #173	@ 0xad
 802181e:	009b      	lsls	r3, r3, #2
 8021820:	58d3      	ldr	r3, [r2, r3]
 8021822:	689b      	ldr	r3, [r3, #8]
 8021824:	6839      	ldr	r1, [r7, #0]
 8021826:	687a      	ldr	r2, [r7, #4]
 8021828:	0010      	movs	r0, r2
 802182a:	4798      	blx	r3
      break;
 802182c:	e188      	b.n	8021b40 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 802182e:	683b      	ldr	r3, [r7, #0]
 8021830:	781b      	ldrb	r3, [r3, #0]
 8021832:	001a      	movs	r2, r3
 8021834:	2360      	movs	r3, #96	@ 0x60
 8021836:	4013      	ands	r3, r2
 8021838:	2b20      	cmp	r3, #32
 802183a:	d10f      	bne.n	802185c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802183c:	687a      	ldr	r2, [r7, #4]
 802183e:	23ad      	movs	r3, #173	@ 0xad
 8021840:	009b      	lsls	r3, r3, #2
 8021842:	58d3      	ldr	r3, [r2, r3]
 8021844:	689b      	ldr	r3, [r3, #8]
 8021846:	250f      	movs	r5, #15
 8021848:	197c      	adds	r4, r7, r5
 802184a:	6839      	ldr	r1, [r7, #0]
 802184c:	687a      	ldr	r2, [r7, #4]
 802184e:	0010      	movs	r0, r2
 8021850:	4798      	blx	r3
 8021852:	0003      	movs	r3, r0
 8021854:	7023      	strb	r3, [r4, #0]

        return ret;
 8021856:	197b      	adds	r3, r7, r5
 8021858:	781b      	ldrb	r3, [r3, #0]
 802185a:	e174      	b.n	8021b46 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 802185c:	683b      	ldr	r3, [r7, #0]
 802185e:	785b      	ldrb	r3, [r3, #1]
 8021860:	2b03      	cmp	r3, #3
 8021862:	d007      	beq.n	8021874 <USBD_StdEPReq+0x92>
 8021864:	dd00      	ble.n	8021868 <USBD_StdEPReq+0x86>
 8021866:	e15c      	b.n	8021b22 <USBD_StdEPReq+0x340>
 8021868:	2b00      	cmp	r3, #0
 802186a:	d100      	bne.n	802186e <USBD_StdEPReq+0x8c>
 802186c:	e092      	b.n	8021994 <USBD_StdEPReq+0x1b2>
 802186e:	2b01      	cmp	r3, #1
 8021870:	d04b      	beq.n	802190a <USBD_StdEPReq+0x128>
 8021872:	e156      	b.n	8021b22 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8021874:	687a      	ldr	r2, [r7, #4]
 8021876:	23a7      	movs	r3, #167	@ 0xa7
 8021878:	009b      	lsls	r3, r3, #2
 802187a:	5cd3      	ldrb	r3, [r2, r3]
 802187c:	2b02      	cmp	r3, #2
 802187e:	d002      	beq.n	8021886 <USBD_StdEPReq+0xa4>
 8021880:	2b03      	cmp	r3, #3
 8021882:	d01d      	beq.n	80218c0 <USBD_StdEPReq+0xde>
 8021884:	e039      	b.n	80218fa <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021886:	220e      	movs	r2, #14
 8021888:	18bb      	adds	r3, r7, r2
 802188a:	781b      	ldrb	r3, [r3, #0]
 802188c:	2b00      	cmp	r3, #0
 802188e:	d010      	beq.n	80218b2 <USBD_StdEPReq+0xd0>
 8021890:	18bb      	adds	r3, r7, r2
 8021892:	781b      	ldrb	r3, [r3, #0]
 8021894:	2b80      	cmp	r3, #128	@ 0x80
 8021896:	d00c      	beq.n	80218b2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8021898:	18bb      	adds	r3, r7, r2
 802189a:	781a      	ldrb	r2, [r3, #0]
 802189c:	687b      	ldr	r3, [r7, #4]
 802189e:	0011      	movs	r1, r2
 80218a0:	0018      	movs	r0, r3
 80218a2:	f001 fb78 	bl	8022f96 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	2180      	movs	r1, #128	@ 0x80
 80218aa:	0018      	movs	r0, r3
 80218ac:	f001 fb73 	bl	8022f96 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80218b0:	e02a      	b.n	8021908 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80218b2:	683a      	ldr	r2, [r7, #0]
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	0011      	movs	r1, r2
 80218b8:	0018      	movs	r0, r3
 80218ba:	f000 fcdc 	bl	8022276 <USBD_CtlError>
              break;
 80218be:	e023      	b.n	8021908 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80218c0:	683b      	ldr	r3, [r7, #0]
 80218c2:	885b      	ldrh	r3, [r3, #2]
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	d113      	bne.n	80218f0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80218c8:	220e      	movs	r2, #14
 80218ca:	18bb      	adds	r3, r7, r2
 80218cc:	781b      	ldrb	r3, [r3, #0]
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d00e      	beq.n	80218f0 <USBD_StdEPReq+0x10e>
 80218d2:	18bb      	adds	r3, r7, r2
 80218d4:	781b      	ldrb	r3, [r3, #0]
 80218d6:	2b80      	cmp	r3, #128	@ 0x80
 80218d8:	d00a      	beq.n	80218f0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80218da:	683b      	ldr	r3, [r7, #0]
 80218dc:	88db      	ldrh	r3, [r3, #6]
 80218de:	2b00      	cmp	r3, #0
 80218e0:	d106      	bne.n	80218f0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80218e2:	18bb      	adds	r3, r7, r2
 80218e4:	781a      	ldrb	r2, [r3, #0]
 80218e6:	687b      	ldr	r3, [r7, #4]
 80218e8:	0011      	movs	r1, r2
 80218ea:	0018      	movs	r0, r3
 80218ec:	f001 fb53 	bl	8022f96 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80218f0:	687b      	ldr	r3, [r7, #4]
 80218f2:	0018      	movs	r0, r3
 80218f4:	f000 fda7 	bl	8022446 <USBD_CtlSendStatus>

              break;
 80218f8:	e006      	b.n	8021908 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80218fa:	683a      	ldr	r2, [r7, #0]
 80218fc:	687b      	ldr	r3, [r7, #4]
 80218fe:	0011      	movs	r1, r2
 8021900:	0018      	movs	r0, r3
 8021902:	f000 fcb8 	bl	8022276 <USBD_CtlError>
              break;
 8021906:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021908:	e112      	b.n	8021b30 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802190a:	687a      	ldr	r2, [r7, #4]
 802190c:	23a7      	movs	r3, #167	@ 0xa7
 802190e:	009b      	lsls	r3, r3, #2
 8021910:	5cd3      	ldrb	r3, [r2, r3]
 8021912:	2b02      	cmp	r3, #2
 8021914:	d002      	beq.n	802191c <USBD_StdEPReq+0x13a>
 8021916:	2b03      	cmp	r3, #3
 8021918:	d01d      	beq.n	8021956 <USBD_StdEPReq+0x174>
 802191a:	e032      	b.n	8021982 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802191c:	220e      	movs	r2, #14
 802191e:	18bb      	adds	r3, r7, r2
 8021920:	781b      	ldrb	r3, [r3, #0]
 8021922:	2b00      	cmp	r3, #0
 8021924:	d010      	beq.n	8021948 <USBD_StdEPReq+0x166>
 8021926:	18bb      	adds	r3, r7, r2
 8021928:	781b      	ldrb	r3, [r3, #0]
 802192a:	2b80      	cmp	r3, #128	@ 0x80
 802192c:	d00c      	beq.n	8021948 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 802192e:	18bb      	adds	r3, r7, r2
 8021930:	781a      	ldrb	r2, [r3, #0]
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	0011      	movs	r1, r2
 8021936:	0018      	movs	r0, r3
 8021938:	f001 fb2d 	bl	8022f96 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	2180      	movs	r1, #128	@ 0x80
 8021940:	0018      	movs	r0, r3
 8021942:	f001 fb28 	bl	8022f96 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021946:	e024      	b.n	8021992 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8021948:	683a      	ldr	r2, [r7, #0]
 802194a:	687b      	ldr	r3, [r7, #4]
 802194c:	0011      	movs	r1, r2
 802194e:	0018      	movs	r0, r3
 8021950:	f000 fc91 	bl	8022276 <USBD_CtlError>
              break;
 8021954:	e01d      	b.n	8021992 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021956:	683b      	ldr	r3, [r7, #0]
 8021958:	885b      	ldrh	r3, [r3, #2]
 802195a:	2b00      	cmp	r3, #0
 802195c:	d118      	bne.n	8021990 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802195e:	210e      	movs	r1, #14
 8021960:	187b      	adds	r3, r7, r1
 8021962:	781b      	ldrb	r3, [r3, #0]
 8021964:	227f      	movs	r2, #127	@ 0x7f
 8021966:	4013      	ands	r3, r2
 8021968:	d006      	beq.n	8021978 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 802196a:	187b      	adds	r3, r7, r1
 802196c:	781a      	ldrb	r2, [r3, #0]
 802196e:	687b      	ldr	r3, [r7, #4]
 8021970:	0011      	movs	r1, r2
 8021972:	0018      	movs	r0, r3
 8021974:	f001 fb3a 	bl	8022fec <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8021978:	687b      	ldr	r3, [r7, #4]
 802197a:	0018      	movs	r0, r3
 802197c:	f000 fd63 	bl	8022446 <USBD_CtlSendStatus>
              }
              break;
 8021980:	e006      	b.n	8021990 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8021982:	683a      	ldr	r2, [r7, #0]
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	0011      	movs	r1, r2
 8021988:	0018      	movs	r0, r3
 802198a:	f000 fc74 	bl	8022276 <USBD_CtlError>
              break;
 802198e:	e000      	b.n	8021992 <USBD_StdEPReq+0x1b0>
              break;
 8021990:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021992:	e0cd      	b.n	8021b30 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021994:	687a      	ldr	r2, [r7, #4]
 8021996:	23a7      	movs	r3, #167	@ 0xa7
 8021998:	009b      	lsls	r3, r3, #2
 802199a:	5cd3      	ldrb	r3, [r2, r3]
 802199c:	2b02      	cmp	r3, #2
 802199e:	d002      	beq.n	80219a6 <USBD_StdEPReq+0x1c4>
 80219a0:	2b03      	cmp	r3, #3
 80219a2:	d03c      	beq.n	8021a1e <USBD_StdEPReq+0x23c>
 80219a4:	e0b5      	b.n	8021b12 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80219a6:	220e      	movs	r2, #14
 80219a8:	18bb      	adds	r3, r7, r2
 80219aa:	781b      	ldrb	r3, [r3, #0]
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d00a      	beq.n	80219c6 <USBD_StdEPReq+0x1e4>
 80219b0:	18bb      	adds	r3, r7, r2
 80219b2:	781b      	ldrb	r3, [r3, #0]
 80219b4:	2b80      	cmp	r3, #128	@ 0x80
 80219b6:	d006      	beq.n	80219c6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80219b8:	683a      	ldr	r2, [r7, #0]
 80219ba:	687b      	ldr	r3, [r7, #4]
 80219bc:	0011      	movs	r1, r2
 80219be:	0018      	movs	r0, r3
 80219c0:	f000 fc59 	bl	8022276 <USBD_CtlError>
                break;
 80219c4:	e0ac      	b.n	8021b20 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80219c6:	220e      	movs	r2, #14
 80219c8:	18bb      	adds	r3, r7, r2
 80219ca:	781b      	ldrb	r3, [r3, #0]
 80219cc:	b25b      	sxtb	r3, r3
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	da0c      	bge.n	80219ec <USBD_StdEPReq+0x20a>
 80219d2:	18bb      	adds	r3, r7, r2
 80219d4:	781b      	ldrb	r3, [r3, #0]
 80219d6:	227f      	movs	r2, #127	@ 0x7f
 80219d8:	401a      	ands	r2, r3
 80219da:	0013      	movs	r3, r2
 80219dc:	009b      	lsls	r3, r3, #2
 80219de:	189b      	adds	r3, r3, r2
 80219e0:	009b      	lsls	r3, r3, #2
 80219e2:	3310      	adds	r3, #16
 80219e4:	687a      	ldr	r2, [r7, #4]
 80219e6:	18d3      	adds	r3, r2, r3
 80219e8:	3304      	adds	r3, #4
 80219ea:	e00d      	b.n	8021a08 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80219ec:	230e      	movs	r3, #14
 80219ee:	18fb      	adds	r3, r7, r3
 80219f0:	781b      	ldrb	r3, [r3, #0]
 80219f2:	227f      	movs	r2, #127	@ 0x7f
 80219f4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80219f6:	0013      	movs	r3, r2
 80219f8:	009b      	lsls	r3, r3, #2
 80219fa:	189b      	adds	r3, r3, r2
 80219fc:	009b      	lsls	r3, r3, #2
 80219fe:	3351      	adds	r3, #81	@ 0x51
 8021a00:	33ff      	adds	r3, #255	@ 0xff
 8021a02:	687a      	ldr	r2, [r7, #4]
 8021a04:	18d3      	adds	r3, r2, r3
 8021a06:	3304      	adds	r3, #4
 8021a08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021a0a:	68bb      	ldr	r3, [r7, #8]
 8021a0c:	2200      	movs	r2, #0
 8021a0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8021a10:	68b9      	ldr	r1, [r7, #8]
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	2202      	movs	r2, #2
 8021a16:	0018      	movs	r0, r3
 8021a18:	f000 fcab 	bl	8022372 <USBD_CtlSendData>
              break;
 8021a1c:	e080      	b.n	8021b20 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021a1e:	220e      	movs	r2, #14
 8021a20:	18bb      	adds	r3, r7, r2
 8021a22:	781b      	ldrb	r3, [r3, #0]
 8021a24:	b25b      	sxtb	r3, r3
 8021a26:	2b00      	cmp	r3, #0
 8021a28:	da14      	bge.n	8021a54 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021a2a:	18bb      	adds	r3, r7, r2
 8021a2c:	781b      	ldrb	r3, [r3, #0]
 8021a2e:	220f      	movs	r2, #15
 8021a30:	401a      	ands	r2, r3
 8021a32:	6879      	ldr	r1, [r7, #4]
 8021a34:	0013      	movs	r3, r2
 8021a36:	009b      	lsls	r3, r3, #2
 8021a38:	189b      	adds	r3, r3, r2
 8021a3a:	009b      	lsls	r3, r3, #2
 8021a3c:	18cb      	adds	r3, r1, r3
 8021a3e:	3318      	adds	r3, #24
 8021a40:	681b      	ldr	r3, [r3, #0]
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d11e      	bne.n	8021a84 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8021a46:	683a      	ldr	r2, [r7, #0]
 8021a48:	687b      	ldr	r3, [r7, #4]
 8021a4a:	0011      	movs	r1, r2
 8021a4c:	0018      	movs	r0, r3
 8021a4e:	f000 fc12 	bl	8022276 <USBD_CtlError>
                  break;
 8021a52:	e065      	b.n	8021b20 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021a54:	230e      	movs	r3, #14
 8021a56:	18fb      	adds	r3, r7, r3
 8021a58:	781b      	ldrb	r3, [r3, #0]
 8021a5a:	220f      	movs	r2, #15
 8021a5c:	401a      	ands	r2, r3
 8021a5e:	6878      	ldr	r0, [r7, #4]
 8021a60:	23ac      	movs	r3, #172	@ 0xac
 8021a62:	0059      	lsls	r1, r3, #1
 8021a64:	0013      	movs	r3, r2
 8021a66:	009b      	lsls	r3, r3, #2
 8021a68:	189b      	adds	r3, r3, r2
 8021a6a:	009b      	lsls	r3, r3, #2
 8021a6c:	18c3      	adds	r3, r0, r3
 8021a6e:	185b      	adds	r3, r3, r1
 8021a70:	681b      	ldr	r3, [r3, #0]
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d106      	bne.n	8021a84 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8021a76:	683a      	ldr	r2, [r7, #0]
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	0011      	movs	r1, r2
 8021a7c:	0018      	movs	r0, r3
 8021a7e:	f000 fbfa 	bl	8022276 <USBD_CtlError>
                  break;
 8021a82:	e04d      	b.n	8021b20 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021a84:	220e      	movs	r2, #14
 8021a86:	18bb      	adds	r3, r7, r2
 8021a88:	781b      	ldrb	r3, [r3, #0]
 8021a8a:	b25b      	sxtb	r3, r3
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	da0c      	bge.n	8021aaa <USBD_StdEPReq+0x2c8>
 8021a90:	18bb      	adds	r3, r7, r2
 8021a92:	781b      	ldrb	r3, [r3, #0]
 8021a94:	227f      	movs	r2, #127	@ 0x7f
 8021a96:	401a      	ands	r2, r3
 8021a98:	0013      	movs	r3, r2
 8021a9a:	009b      	lsls	r3, r3, #2
 8021a9c:	189b      	adds	r3, r3, r2
 8021a9e:	009b      	lsls	r3, r3, #2
 8021aa0:	3310      	adds	r3, #16
 8021aa2:	687a      	ldr	r2, [r7, #4]
 8021aa4:	18d3      	adds	r3, r2, r3
 8021aa6:	3304      	adds	r3, #4
 8021aa8:	e00d      	b.n	8021ac6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021aaa:	230e      	movs	r3, #14
 8021aac:	18fb      	adds	r3, r7, r3
 8021aae:	781b      	ldrb	r3, [r3, #0]
 8021ab0:	227f      	movs	r2, #127	@ 0x7f
 8021ab2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021ab4:	0013      	movs	r3, r2
 8021ab6:	009b      	lsls	r3, r3, #2
 8021ab8:	189b      	adds	r3, r3, r2
 8021aba:	009b      	lsls	r3, r3, #2
 8021abc:	3351      	adds	r3, #81	@ 0x51
 8021abe:	33ff      	adds	r3, #255	@ 0xff
 8021ac0:	687a      	ldr	r2, [r7, #4]
 8021ac2:	18d3      	adds	r3, r2, r3
 8021ac4:	3304      	adds	r3, #4
 8021ac6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021ac8:	220e      	movs	r2, #14
 8021aca:	18bb      	adds	r3, r7, r2
 8021acc:	781b      	ldrb	r3, [r3, #0]
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	d003      	beq.n	8021ada <USBD_StdEPReq+0x2f8>
 8021ad2:	18bb      	adds	r3, r7, r2
 8021ad4:	781b      	ldrb	r3, [r3, #0]
 8021ad6:	2b80      	cmp	r3, #128	@ 0x80
 8021ad8:	d103      	bne.n	8021ae2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8021ada:	68bb      	ldr	r3, [r7, #8]
 8021adc:	2200      	movs	r2, #0
 8021ade:	601a      	str	r2, [r3, #0]
 8021ae0:	e010      	b.n	8021b04 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8021ae2:	230e      	movs	r3, #14
 8021ae4:	18fb      	adds	r3, r7, r3
 8021ae6:	781a      	ldrb	r2, [r3, #0]
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	0011      	movs	r1, r2
 8021aec:	0018      	movs	r0, r3
 8021aee:	f001 faa8 	bl	8023042 <USBD_LL_IsStallEP>
 8021af2:	1e03      	subs	r3, r0, #0
 8021af4:	d003      	beq.n	8021afe <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8021af6:	68bb      	ldr	r3, [r7, #8]
 8021af8:	2201      	movs	r2, #1
 8021afa:	601a      	str	r2, [r3, #0]
 8021afc:	e002      	b.n	8021b04 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8021afe:	68bb      	ldr	r3, [r7, #8]
 8021b00:	2200      	movs	r2, #0
 8021b02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8021b04:	68b9      	ldr	r1, [r7, #8]
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	2202      	movs	r2, #2
 8021b0a:	0018      	movs	r0, r3
 8021b0c:	f000 fc31 	bl	8022372 <USBD_CtlSendData>
              break;
 8021b10:	e006      	b.n	8021b20 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8021b12:	683a      	ldr	r2, [r7, #0]
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	0011      	movs	r1, r2
 8021b18:	0018      	movs	r0, r3
 8021b1a:	f000 fbac 	bl	8022276 <USBD_CtlError>
              break;
 8021b1e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021b20:	e006      	b.n	8021b30 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8021b22:	683a      	ldr	r2, [r7, #0]
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	0011      	movs	r1, r2
 8021b28:	0018      	movs	r0, r3
 8021b2a:	f000 fba4 	bl	8022276 <USBD_CtlError>
          break;
 8021b2e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021b30:	e006      	b.n	8021b40 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8021b32:	683a      	ldr	r2, [r7, #0]
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	0011      	movs	r1, r2
 8021b38:	0018      	movs	r0, r3
 8021b3a:	f000 fb9c 	bl	8022276 <USBD_CtlError>
      break;
 8021b3e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021b40:	230f      	movs	r3, #15
 8021b42:	18fb      	adds	r3, r7, r3
 8021b44:	781b      	ldrb	r3, [r3, #0]
}
 8021b46:	0018      	movs	r0, r3
 8021b48:	46bd      	mov	sp, r7
 8021b4a:	b004      	add	sp, #16
 8021b4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021b50 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021b50:	b580      	push	{r7, lr}
 8021b52:	b084      	sub	sp, #16
 8021b54:	af00      	add	r7, sp, #0
 8021b56:	6078      	str	r0, [r7, #4]
 8021b58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8021b5a:	2308      	movs	r3, #8
 8021b5c:	18fb      	adds	r3, r7, r3
 8021b5e:	2200      	movs	r2, #0
 8021b60:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8021b62:	2300      	movs	r3, #0
 8021b64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8021b66:	230b      	movs	r3, #11
 8021b68:	18fb      	adds	r3, r7, r3
 8021b6a:	2200      	movs	r2, #0
 8021b6c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8021b6e:	683b      	ldr	r3, [r7, #0]
 8021b70:	885b      	ldrh	r3, [r3, #2]
 8021b72:	0a1b      	lsrs	r3, r3, #8
 8021b74:	b29b      	uxth	r3, r3
 8021b76:	2b07      	cmp	r3, #7
 8021b78:	d900      	bls.n	8021b7c <USBD_GetDescriptor+0x2c>
 8021b7a:	e159      	b.n	8021e30 <USBD_GetDescriptor+0x2e0>
 8021b7c:	009a      	lsls	r2, r3, #2
 8021b7e:	4bcb      	ldr	r3, [pc, #812]	@ (8021eac <USBD_GetDescriptor+0x35c>)
 8021b80:	18d3      	adds	r3, r2, r3
 8021b82:	681b      	ldr	r3, [r3, #0]
 8021b84:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021b86:	687a      	ldr	r2, [r7, #4]
 8021b88:	23ac      	movs	r3, #172	@ 0xac
 8021b8a:	009b      	lsls	r3, r3, #2
 8021b8c:	58d3      	ldr	r3, [r2, r3]
 8021b8e:	681b      	ldr	r3, [r3, #0]
 8021b90:	687a      	ldr	r2, [r7, #4]
 8021b92:	7c12      	ldrb	r2, [r2, #16]
 8021b94:	2108      	movs	r1, #8
 8021b96:	1879      	adds	r1, r7, r1
 8021b98:	0010      	movs	r0, r2
 8021b9a:	4798      	blx	r3
 8021b9c:	0003      	movs	r3, r0
 8021b9e:	60fb      	str	r3, [r7, #12]
      break;
 8021ba0:	e153      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	7c1b      	ldrb	r3, [r3, #16]
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	d10f      	bne.n	8021bca <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021baa:	687a      	ldr	r2, [r7, #4]
 8021bac:	23ad      	movs	r3, #173	@ 0xad
 8021bae:	009b      	lsls	r3, r3, #2
 8021bb0:	58d3      	ldr	r3, [r2, r3]
 8021bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021bb4:	2208      	movs	r2, #8
 8021bb6:	18ba      	adds	r2, r7, r2
 8021bb8:	0010      	movs	r0, r2
 8021bba:	4798      	blx	r3
 8021bbc:	0003      	movs	r3, r0
 8021bbe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021bc0:	68fb      	ldr	r3, [r7, #12]
 8021bc2:	3301      	adds	r3, #1
 8021bc4:	2202      	movs	r2, #2
 8021bc6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021bc8:	e13f      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021bca:	687a      	ldr	r2, [r7, #4]
 8021bcc:	23ad      	movs	r3, #173	@ 0xad
 8021bce:	009b      	lsls	r3, r3, #2
 8021bd0:	58d3      	ldr	r3, [r2, r3]
 8021bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021bd4:	2208      	movs	r2, #8
 8021bd6:	18ba      	adds	r2, r7, r2
 8021bd8:	0010      	movs	r0, r2
 8021bda:	4798      	blx	r3
 8021bdc:	0003      	movs	r3, r0
 8021bde:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021be0:	68fb      	ldr	r3, [r7, #12]
 8021be2:	3301      	adds	r3, #1
 8021be4:	2202      	movs	r2, #2
 8021be6:	701a      	strb	r2, [r3, #0]
      break;
 8021be8:	e12f      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021bea:	683b      	ldr	r3, [r7, #0]
 8021bec:	885b      	ldrh	r3, [r3, #2]
 8021bee:	b2db      	uxtb	r3, r3
 8021bf0:	2b05      	cmp	r3, #5
 8021bf2:	d900      	bls.n	8021bf6 <USBD_GetDescriptor+0xa6>
 8021bf4:	e0d0      	b.n	8021d98 <USBD_GetDescriptor+0x248>
 8021bf6:	009a      	lsls	r2, r3, #2
 8021bf8:	4bad      	ldr	r3, [pc, #692]	@ (8021eb0 <USBD_GetDescriptor+0x360>)
 8021bfa:	18d3      	adds	r3, r2, r3
 8021bfc:	681b      	ldr	r3, [r3, #0]
 8021bfe:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021c00:	687a      	ldr	r2, [r7, #4]
 8021c02:	23ac      	movs	r3, #172	@ 0xac
 8021c04:	009b      	lsls	r3, r3, #2
 8021c06:	58d3      	ldr	r3, [r2, r3]
 8021c08:	685b      	ldr	r3, [r3, #4]
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	d00d      	beq.n	8021c2a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021c0e:	687a      	ldr	r2, [r7, #4]
 8021c10:	23ac      	movs	r3, #172	@ 0xac
 8021c12:	009b      	lsls	r3, r3, #2
 8021c14:	58d3      	ldr	r3, [r2, r3]
 8021c16:	685b      	ldr	r3, [r3, #4]
 8021c18:	687a      	ldr	r2, [r7, #4]
 8021c1a:	7c12      	ldrb	r2, [r2, #16]
 8021c1c:	2108      	movs	r1, #8
 8021c1e:	1879      	adds	r1, r7, r1
 8021c20:	0010      	movs	r0, r2
 8021c22:	4798      	blx	r3
 8021c24:	0003      	movs	r3, r0
 8021c26:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021c28:	e0c3      	b.n	8021db2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021c2a:	683a      	ldr	r2, [r7, #0]
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	0011      	movs	r1, r2
 8021c30:	0018      	movs	r0, r3
 8021c32:	f000 fb20 	bl	8022276 <USBD_CtlError>
            err++;
 8021c36:	210b      	movs	r1, #11
 8021c38:	187b      	adds	r3, r7, r1
 8021c3a:	781a      	ldrb	r2, [r3, #0]
 8021c3c:	187b      	adds	r3, r7, r1
 8021c3e:	3201      	adds	r2, #1
 8021c40:	701a      	strb	r2, [r3, #0]
          break;
 8021c42:	e0b6      	b.n	8021db2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021c44:	687a      	ldr	r2, [r7, #4]
 8021c46:	23ac      	movs	r3, #172	@ 0xac
 8021c48:	009b      	lsls	r3, r3, #2
 8021c4a:	58d3      	ldr	r3, [r2, r3]
 8021c4c:	689b      	ldr	r3, [r3, #8]
 8021c4e:	2b00      	cmp	r3, #0
 8021c50:	d00d      	beq.n	8021c6e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021c52:	687a      	ldr	r2, [r7, #4]
 8021c54:	23ac      	movs	r3, #172	@ 0xac
 8021c56:	009b      	lsls	r3, r3, #2
 8021c58:	58d3      	ldr	r3, [r2, r3]
 8021c5a:	689b      	ldr	r3, [r3, #8]
 8021c5c:	687a      	ldr	r2, [r7, #4]
 8021c5e:	7c12      	ldrb	r2, [r2, #16]
 8021c60:	2108      	movs	r1, #8
 8021c62:	1879      	adds	r1, r7, r1
 8021c64:	0010      	movs	r0, r2
 8021c66:	4798      	blx	r3
 8021c68:	0003      	movs	r3, r0
 8021c6a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021c6c:	e0a1      	b.n	8021db2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021c6e:	683a      	ldr	r2, [r7, #0]
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	0011      	movs	r1, r2
 8021c74:	0018      	movs	r0, r3
 8021c76:	f000 fafe 	bl	8022276 <USBD_CtlError>
            err++;
 8021c7a:	210b      	movs	r1, #11
 8021c7c:	187b      	adds	r3, r7, r1
 8021c7e:	781a      	ldrb	r2, [r3, #0]
 8021c80:	187b      	adds	r3, r7, r1
 8021c82:	3201      	adds	r2, #1
 8021c84:	701a      	strb	r2, [r3, #0]
          break;
 8021c86:	e094      	b.n	8021db2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021c88:	687a      	ldr	r2, [r7, #4]
 8021c8a:	23ac      	movs	r3, #172	@ 0xac
 8021c8c:	009b      	lsls	r3, r3, #2
 8021c8e:	58d3      	ldr	r3, [r2, r3]
 8021c90:	68db      	ldr	r3, [r3, #12]
 8021c92:	2b00      	cmp	r3, #0
 8021c94:	d00d      	beq.n	8021cb2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021c96:	687a      	ldr	r2, [r7, #4]
 8021c98:	23ac      	movs	r3, #172	@ 0xac
 8021c9a:	009b      	lsls	r3, r3, #2
 8021c9c:	58d3      	ldr	r3, [r2, r3]
 8021c9e:	68db      	ldr	r3, [r3, #12]
 8021ca0:	687a      	ldr	r2, [r7, #4]
 8021ca2:	7c12      	ldrb	r2, [r2, #16]
 8021ca4:	2108      	movs	r1, #8
 8021ca6:	1879      	adds	r1, r7, r1
 8021ca8:	0010      	movs	r0, r2
 8021caa:	4798      	blx	r3
 8021cac:	0003      	movs	r3, r0
 8021cae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021cb0:	e07f      	b.n	8021db2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021cb2:	683a      	ldr	r2, [r7, #0]
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	0011      	movs	r1, r2
 8021cb8:	0018      	movs	r0, r3
 8021cba:	f000 fadc 	bl	8022276 <USBD_CtlError>
            err++;
 8021cbe:	210b      	movs	r1, #11
 8021cc0:	187b      	adds	r3, r7, r1
 8021cc2:	781a      	ldrb	r2, [r3, #0]
 8021cc4:	187b      	adds	r3, r7, r1
 8021cc6:	3201      	adds	r2, #1
 8021cc8:	701a      	strb	r2, [r3, #0]
          break;
 8021cca:	e072      	b.n	8021db2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021ccc:	687a      	ldr	r2, [r7, #4]
 8021cce:	23ac      	movs	r3, #172	@ 0xac
 8021cd0:	009b      	lsls	r3, r3, #2
 8021cd2:	58d3      	ldr	r3, [r2, r3]
 8021cd4:	691b      	ldr	r3, [r3, #16]
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	d00d      	beq.n	8021cf6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021cda:	687a      	ldr	r2, [r7, #4]
 8021cdc:	23ac      	movs	r3, #172	@ 0xac
 8021cde:	009b      	lsls	r3, r3, #2
 8021ce0:	58d3      	ldr	r3, [r2, r3]
 8021ce2:	691b      	ldr	r3, [r3, #16]
 8021ce4:	687a      	ldr	r2, [r7, #4]
 8021ce6:	7c12      	ldrb	r2, [r2, #16]
 8021ce8:	2108      	movs	r1, #8
 8021cea:	1879      	adds	r1, r7, r1
 8021cec:	0010      	movs	r0, r2
 8021cee:	4798      	blx	r3
 8021cf0:	0003      	movs	r3, r0
 8021cf2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021cf4:	e05d      	b.n	8021db2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021cf6:	683a      	ldr	r2, [r7, #0]
 8021cf8:	687b      	ldr	r3, [r7, #4]
 8021cfa:	0011      	movs	r1, r2
 8021cfc:	0018      	movs	r0, r3
 8021cfe:	f000 faba 	bl	8022276 <USBD_CtlError>
            err++;
 8021d02:	210b      	movs	r1, #11
 8021d04:	187b      	adds	r3, r7, r1
 8021d06:	781a      	ldrb	r2, [r3, #0]
 8021d08:	187b      	adds	r3, r7, r1
 8021d0a:	3201      	adds	r2, #1
 8021d0c:	701a      	strb	r2, [r3, #0]
          break;
 8021d0e:	e050      	b.n	8021db2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021d10:	687a      	ldr	r2, [r7, #4]
 8021d12:	23ac      	movs	r3, #172	@ 0xac
 8021d14:	009b      	lsls	r3, r3, #2
 8021d16:	58d3      	ldr	r3, [r2, r3]
 8021d18:	695b      	ldr	r3, [r3, #20]
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d00d      	beq.n	8021d3a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021d1e:	687a      	ldr	r2, [r7, #4]
 8021d20:	23ac      	movs	r3, #172	@ 0xac
 8021d22:	009b      	lsls	r3, r3, #2
 8021d24:	58d3      	ldr	r3, [r2, r3]
 8021d26:	695b      	ldr	r3, [r3, #20]
 8021d28:	687a      	ldr	r2, [r7, #4]
 8021d2a:	7c12      	ldrb	r2, [r2, #16]
 8021d2c:	2108      	movs	r1, #8
 8021d2e:	1879      	adds	r1, r7, r1
 8021d30:	0010      	movs	r0, r2
 8021d32:	4798      	blx	r3
 8021d34:	0003      	movs	r3, r0
 8021d36:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021d38:	e03b      	b.n	8021db2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021d3a:	683a      	ldr	r2, [r7, #0]
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	0011      	movs	r1, r2
 8021d40:	0018      	movs	r0, r3
 8021d42:	f000 fa98 	bl	8022276 <USBD_CtlError>
            err++;
 8021d46:	210b      	movs	r1, #11
 8021d48:	187b      	adds	r3, r7, r1
 8021d4a:	781a      	ldrb	r2, [r3, #0]
 8021d4c:	187b      	adds	r3, r7, r1
 8021d4e:	3201      	adds	r2, #1
 8021d50:	701a      	strb	r2, [r3, #0]
          break;
 8021d52:	e02e      	b.n	8021db2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021d54:	687a      	ldr	r2, [r7, #4]
 8021d56:	23ac      	movs	r3, #172	@ 0xac
 8021d58:	009b      	lsls	r3, r3, #2
 8021d5a:	58d3      	ldr	r3, [r2, r3]
 8021d5c:	699b      	ldr	r3, [r3, #24]
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d00d      	beq.n	8021d7e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021d62:	687a      	ldr	r2, [r7, #4]
 8021d64:	23ac      	movs	r3, #172	@ 0xac
 8021d66:	009b      	lsls	r3, r3, #2
 8021d68:	58d3      	ldr	r3, [r2, r3]
 8021d6a:	699b      	ldr	r3, [r3, #24]
 8021d6c:	687a      	ldr	r2, [r7, #4]
 8021d6e:	7c12      	ldrb	r2, [r2, #16]
 8021d70:	2108      	movs	r1, #8
 8021d72:	1879      	adds	r1, r7, r1
 8021d74:	0010      	movs	r0, r2
 8021d76:	4798      	blx	r3
 8021d78:	0003      	movs	r3, r0
 8021d7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021d7c:	e019      	b.n	8021db2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021d7e:	683a      	ldr	r2, [r7, #0]
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	0011      	movs	r1, r2
 8021d84:	0018      	movs	r0, r3
 8021d86:	f000 fa76 	bl	8022276 <USBD_CtlError>
            err++;
 8021d8a:	210b      	movs	r1, #11
 8021d8c:	187b      	adds	r3, r7, r1
 8021d8e:	781a      	ldrb	r2, [r3, #0]
 8021d90:	187b      	adds	r3, r7, r1
 8021d92:	3201      	adds	r2, #1
 8021d94:	701a      	strb	r2, [r3, #0]
          break;
 8021d96:	e00c      	b.n	8021db2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8021d98:	683a      	ldr	r2, [r7, #0]
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	0011      	movs	r1, r2
 8021d9e:	0018      	movs	r0, r3
 8021da0:	f000 fa69 	bl	8022276 <USBD_CtlError>
          err++;
 8021da4:	210b      	movs	r1, #11
 8021da6:	187b      	adds	r3, r7, r1
 8021da8:	781a      	ldrb	r2, [r3, #0]
 8021daa:	187b      	adds	r3, r7, r1
 8021dac:	3201      	adds	r2, #1
 8021dae:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8021db0:	e04b      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>
 8021db2:	e04a      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	7c1b      	ldrb	r3, [r3, #16]
 8021db8:	2b00      	cmp	r3, #0
 8021dba:	d10b      	bne.n	8021dd4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021dbc:	687a      	ldr	r2, [r7, #4]
 8021dbe:	23ad      	movs	r3, #173	@ 0xad
 8021dc0:	009b      	lsls	r3, r3, #2
 8021dc2:	58d3      	ldr	r3, [r2, r3]
 8021dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021dc6:	2208      	movs	r2, #8
 8021dc8:	18ba      	adds	r2, r7, r2
 8021dca:	0010      	movs	r0, r2
 8021dcc:	4798      	blx	r3
 8021dce:	0003      	movs	r3, r0
 8021dd0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021dd2:	e03a      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8021dd4:	683a      	ldr	r2, [r7, #0]
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	0011      	movs	r1, r2
 8021dda:	0018      	movs	r0, r3
 8021ddc:	f000 fa4b 	bl	8022276 <USBD_CtlError>
        err++;
 8021de0:	210b      	movs	r1, #11
 8021de2:	187b      	adds	r3, r7, r1
 8021de4:	781a      	ldrb	r2, [r3, #0]
 8021de6:	187b      	adds	r3, r7, r1
 8021de8:	3201      	adds	r2, #1
 8021dea:	701a      	strb	r2, [r3, #0]
      break;
 8021dec:	e02d      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	7c1b      	ldrb	r3, [r3, #16]
 8021df2:	2b00      	cmp	r3, #0
 8021df4:	d10f      	bne.n	8021e16 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021df6:	687a      	ldr	r2, [r7, #4]
 8021df8:	23ad      	movs	r3, #173	@ 0xad
 8021dfa:	009b      	lsls	r3, r3, #2
 8021dfc:	58d3      	ldr	r3, [r2, r3]
 8021dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e00:	2208      	movs	r2, #8
 8021e02:	18ba      	adds	r2, r7, r2
 8021e04:	0010      	movs	r0, r2
 8021e06:	4798      	blx	r3
 8021e08:	0003      	movs	r3, r0
 8021e0a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021e0c:	68fb      	ldr	r3, [r7, #12]
 8021e0e:	3301      	adds	r3, #1
 8021e10:	2207      	movs	r2, #7
 8021e12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021e14:	e019      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8021e16:	683a      	ldr	r2, [r7, #0]
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	0011      	movs	r1, r2
 8021e1c:	0018      	movs	r0, r3
 8021e1e:	f000 fa2a 	bl	8022276 <USBD_CtlError>
        err++;
 8021e22:	210b      	movs	r1, #11
 8021e24:	187b      	adds	r3, r7, r1
 8021e26:	781a      	ldrb	r2, [r3, #0]
 8021e28:	187b      	adds	r3, r7, r1
 8021e2a:	3201      	adds	r2, #1
 8021e2c:	701a      	strb	r2, [r3, #0]
      break;
 8021e2e:	e00c      	b.n	8021e4a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8021e30:	683a      	ldr	r2, [r7, #0]
 8021e32:	687b      	ldr	r3, [r7, #4]
 8021e34:	0011      	movs	r1, r2
 8021e36:	0018      	movs	r0, r3
 8021e38:	f000 fa1d 	bl	8022276 <USBD_CtlError>
      err++;
 8021e3c:	210b      	movs	r1, #11
 8021e3e:	187b      	adds	r3, r7, r1
 8021e40:	781a      	ldrb	r2, [r3, #0]
 8021e42:	187b      	adds	r3, r7, r1
 8021e44:	3201      	adds	r2, #1
 8021e46:	701a      	strb	r2, [r3, #0]
      break;
 8021e48:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8021e4a:	230b      	movs	r3, #11
 8021e4c:	18fb      	adds	r3, r7, r3
 8021e4e:	781b      	ldrb	r3, [r3, #0]
 8021e50:	2b00      	cmp	r3, #0
 8021e52:	d127      	bne.n	8021ea4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8021e54:	2108      	movs	r1, #8
 8021e56:	187b      	adds	r3, r7, r1
 8021e58:	881b      	ldrh	r3, [r3, #0]
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d019      	beq.n	8021e92 <USBD_GetDescriptor+0x342>
 8021e5e:	683b      	ldr	r3, [r7, #0]
 8021e60:	88db      	ldrh	r3, [r3, #6]
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d015      	beq.n	8021e92 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8021e66:	683b      	ldr	r3, [r7, #0]
 8021e68:	88da      	ldrh	r2, [r3, #6]
 8021e6a:	187b      	adds	r3, r7, r1
 8021e6c:	881b      	ldrh	r3, [r3, #0]
 8021e6e:	1c18      	adds	r0, r3, #0
 8021e70:	1c11      	adds	r1, r2, #0
 8021e72:	b28a      	uxth	r2, r1
 8021e74:	b283      	uxth	r3, r0
 8021e76:	429a      	cmp	r2, r3
 8021e78:	d900      	bls.n	8021e7c <USBD_GetDescriptor+0x32c>
 8021e7a:	1c01      	adds	r1, r0, #0
 8021e7c:	b28a      	uxth	r2, r1
 8021e7e:	2108      	movs	r1, #8
 8021e80:	187b      	adds	r3, r7, r1
 8021e82:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021e84:	187b      	adds	r3, r7, r1
 8021e86:	881a      	ldrh	r2, [r3, #0]
 8021e88:	68f9      	ldr	r1, [r7, #12]
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	0018      	movs	r0, r3
 8021e8e:	f000 fa70 	bl	8022372 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8021e92:	683b      	ldr	r3, [r7, #0]
 8021e94:	88db      	ldrh	r3, [r3, #6]
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d105      	bne.n	8021ea6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	0018      	movs	r0, r3
 8021e9e:	f000 fad2 	bl	8022446 <USBD_CtlSendStatus>
 8021ea2:	e000      	b.n	8021ea6 <USBD_GetDescriptor+0x356>
    return;
 8021ea4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021ea6:	46bd      	mov	sp, r7
 8021ea8:	b004      	add	sp, #16
 8021eaa:	bd80      	pop	{r7, pc}
 8021eac:	0802e39c 	.word	0x0802e39c
 8021eb0:	0802e3bc 	.word	0x0802e3bc

08021eb4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021eb4:	b590      	push	{r4, r7, lr}
 8021eb6:	b085      	sub	sp, #20
 8021eb8:	af00      	add	r7, sp, #0
 8021eba:	6078      	str	r0, [r7, #4]
 8021ebc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021ebe:	683b      	ldr	r3, [r7, #0]
 8021ec0:	889b      	ldrh	r3, [r3, #4]
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d13d      	bne.n	8021f42 <USBD_SetAddress+0x8e>
 8021ec6:	683b      	ldr	r3, [r7, #0]
 8021ec8:	88db      	ldrh	r3, [r3, #6]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d139      	bne.n	8021f42 <USBD_SetAddress+0x8e>
 8021ece:	683b      	ldr	r3, [r7, #0]
 8021ed0:	885b      	ldrh	r3, [r3, #2]
 8021ed2:	2b7f      	cmp	r3, #127	@ 0x7f
 8021ed4:	d835      	bhi.n	8021f42 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021ed6:	683b      	ldr	r3, [r7, #0]
 8021ed8:	885b      	ldrh	r3, [r3, #2]
 8021eda:	b2da      	uxtb	r2, r3
 8021edc:	230f      	movs	r3, #15
 8021ede:	18fb      	adds	r3, r7, r3
 8021ee0:	217f      	movs	r1, #127	@ 0x7f
 8021ee2:	400a      	ands	r2, r1
 8021ee4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021ee6:	687a      	ldr	r2, [r7, #4]
 8021ee8:	23a7      	movs	r3, #167	@ 0xa7
 8021eea:	009b      	lsls	r3, r3, #2
 8021eec:	5cd3      	ldrb	r3, [r2, r3]
 8021eee:	2b03      	cmp	r3, #3
 8021ef0:	d106      	bne.n	8021f00 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8021ef2:	683a      	ldr	r2, [r7, #0]
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	0011      	movs	r1, r2
 8021ef8:	0018      	movs	r0, r3
 8021efa:	f000 f9bc 	bl	8022276 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021efe:	e027      	b.n	8021f50 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	240f      	movs	r4, #15
 8021f04:	193a      	adds	r2, r7, r4
 8021f06:	4914      	ldr	r1, [pc, #80]	@ (8021f58 <USBD_SetAddress+0xa4>)
 8021f08:	7812      	ldrb	r2, [r2, #0]
 8021f0a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021f0c:	193b      	adds	r3, r7, r4
 8021f0e:	781a      	ldrb	r2, [r3, #0]
 8021f10:	687b      	ldr	r3, [r7, #4]
 8021f12:	0011      	movs	r1, r2
 8021f14:	0018      	movs	r0, r3
 8021f16:	f001 f8c5 	bl	80230a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	0018      	movs	r0, r3
 8021f1e:	f000 fa92 	bl	8022446 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021f22:	193b      	adds	r3, r7, r4
 8021f24:	781b      	ldrb	r3, [r3, #0]
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d005      	beq.n	8021f36 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021f2a:	687a      	ldr	r2, [r7, #4]
 8021f2c:	23a7      	movs	r3, #167	@ 0xa7
 8021f2e:	009b      	lsls	r3, r3, #2
 8021f30:	2102      	movs	r1, #2
 8021f32:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021f34:	e00c      	b.n	8021f50 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021f36:	687a      	ldr	r2, [r7, #4]
 8021f38:	23a7      	movs	r3, #167	@ 0xa7
 8021f3a:	009b      	lsls	r3, r3, #2
 8021f3c:	2101      	movs	r1, #1
 8021f3e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021f40:	e006      	b.n	8021f50 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021f42:	683a      	ldr	r2, [r7, #0]
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	0011      	movs	r1, r2
 8021f48:	0018      	movs	r0, r3
 8021f4a:	f000 f994 	bl	8022276 <USBD_CtlError>
  }
}
 8021f4e:	46c0      	nop			@ (mov r8, r8)
 8021f50:	46c0      	nop			@ (mov r8, r8)
 8021f52:	46bd      	mov	sp, r7
 8021f54:	b005      	add	sp, #20
 8021f56:	bd90      	pop	{r4, r7, pc}
 8021f58:	0000029e 	.word	0x0000029e

08021f5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f5c:	b580      	push	{r7, lr}
 8021f5e:	b082      	sub	sp, #8
 8021f60:	af00      	add	r7, sp, #0
 8021f62:	6078      	str	r0, [r7, #4]
 8021f64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021f66:	683b      	ldr	r3, [r7, #0]
 8021f68:	885b      	ldrh	r3, [r3, #2]
 8021f6a:	b2da      	uxtb	r2, r3
 8021f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80220a0 <USBD_SetConfig+0x144>)
 8021f6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021f70:	4b4b      	ldr	r3, [pc, #300]	@ (80220a0 <USBD_SetConfig+0x144>)
 8021f72:	781b      	ldrb	r3, [r3, #0]
 8021f74:	2b01      	cmp	r3, #1
 8021f76:	d906      	bls.n	8021f86 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8021f78:	683a      	ldr	r2, [r7, #0]
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	0011      	movs	r1, r2
 8021f7e:	0018      	movs	r0, r3
 8021f80:	f000 f979 	bl	8022276 <USBD_CtlError>
 8021f84:	e088      	b.n	8022098 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8021f86:	687a      	ldr	r2, [r7, #4]
 8021f88:	23a7      	movs	r3, #167	@ 0xa7
 8021f8a:	009b      	lsls	r3, r3, #2
 8021f8c:	5cd3      	ldrb	r3, [r2, r3]
 8021f8e:	2b02      	cmp	r3, #2
 8021f90:	d002      	beq.n	8021f98 <USBD_SetConfig+0x3c>
 8021f92:	2b03      	cmp	r3, #3
 8021f94:	d029      	beq.n	8021fea <USBD_SetConfig+0x8e>
 8021f96:	e071      	b.n	802207c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8021f98:	4b41      	ldr	r3, [pc, #260]	@ (80220a0 <USBD_SetConfig+0x144>)
 8021f9a:	781b      	ldrb	r3, [r3, #0]
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d01f      	beq.n	8021fe0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8021fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80220a0 <USBD_SetConfig+0x144>)
 8021fa2:	781b      	ldrb	r3, [r3, #0]
 8021fa4:	001a      	movs	r2, r3
 8021fa6:	687b      	ldr	r3, [r7, #4]
 8021fa8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021faa:	687a      	ldr	r2, [r7, #4]
 8021fac:	23a7      	movs	r3, #167	@ 0xa7
 8021fae:	009b      	lsls	r3, r3, #2
 8021fb0:	2103      	movs	r1, #3
 8021fb2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80220a0 <USBD_SetConfig+0x144>)
 8021fb6:	781a      	ldrb	r2, [r3, #0]
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	0011      	movs	r1, r2
 8021fbc:	0018      	movs	r0, r3
 8021fbe:	f7ff f8c6 	bl	802114e <USBD_SetClassConfig>
 8021fc2:	0003      	movs	r3, r0
 8021fc4:	2b02      	cmp	r3, #2
 8021fc6:	d106      	bne.n	8021fd6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8021fc8:	683a      	ldr	r2, [r7, #0]
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	0011      	movs	r1, r2
 8021fce:	0018      	movs	r0, r3
 8021fd0:	f000 f951 	bl	8022276 <USBD_CtlError>
            return;
 8021fd4:	e060      	b.n	8022098 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	0018      	movs	r0, r3
 8021fda:	f000 fa34 	bl	8022446 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021fde:	e05b      	b.n	8022098 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021fe0:	687b      	ldr	r3, [r7, #4]
 8021fe2:	0018      	movs	r0, r3
 8021fe4:	f000 fa2f 	bl	8022446 <USBD_CtlSendStatus>
        break;
 8021fe8:	e056      	b.n	8022098 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8021fea:	4b2d      	ldr	r3, [pc, #180]	@ (80220a0 <USBD_SetConfig+0x144>)
 8021fec:	781b      	ldrb	r3, [r3, #0]
 8021fee:	2b00      	cmp	r3, #0
 8021ff0:	d115      	bne.n	802201e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021ff2:	687a      	ldr	r2, [r7, #4]
 8021ff4:	23a7      	movs	r3, #167	@ 0xa7
 8021ff6:	009b      	lsls	r3, r3, #2
 8021ff8:	2102      	movs	r1, #2
 8021ffa:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8021ffc:	4b28      	ldr	r3, [pc, #160]	@ (80220a0 <USBD_SetConfig+0x144>)
 8021ffe:	781b      	ldrb	r3, [r3, #0]
 8022000:	001a      	movs	r2, r3
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022006:	4b26      	ldr	r3, [pc, #152]	@ (80220a0 <USBD_SetConfig+0x144>)
 8022008:	781a      	ldrb	r2, [r3, #0]
 802200a:	687b      	ldr	r3, [r7, #4]
 802200c:	0011      	movs	r1, r2
 802200e:	0018      	movs	r0, r3
 8022010:	f7ff f8c4 	bl	802119c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	0018      	movs	r0, r3
 8022018:	f000 fa15 	bl	8022446 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 802201c:	e03c      	b.n	8022098 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 802201e:	4b20      	ldr	r3, [pc, #128]	@ (80220a0 <USBD_SetConfig+0x144>)
 8022020:	781b      	ldrb	r3, [r3, #0]
 8022022:	001a      	movs	r2, r3
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	685b      	ldr	r3, [r3, #4]
 8022028:	429a      	cmp	r2, r3
 802202a:	d022      	beq.n	8022072 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	685b      	ldr	r3, [r3, #4]
 8022030:	b2da      	uxtb	r2, r3
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	0011      	movs	r1, r2
 8022036:	0018      	movs	r0, r3
 8022038:	f7ff f8b0 	bl	802119c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 802203c:	4b18      	ldr	r3, [pc, #96]	@ (80220a0 <USBD_SetConfig+0x144>)
 802203e:	781b      	ldrb	r3, [r3, #0]
 8022040:	001a      	movs	r2, r3
 8022042:	687b      	ldr	r3, [r7, #4]
 8022044:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022046:	4b16      	ldr	r3, [pc, #88]	@ (80220a0 <USBD_SetConfig+0x144>)
 8022048:	781a      	ldrb	r2, [r3, #0]
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	0011      	movs	r1, r2
 802204e:	0018      	movs	r0, r3
 8022050:	f7ff f87d 	bl	802114e <USBD_SetClassConfig>
 8022054:	0003      	movs	r3, r0
 8022056:	2b02      	cmp	r3, #2
 8022058:	d106      	bne.n	8022068 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 802205a:	683a      	ldr	r2, [r7, #0]
 802205c:	687b      	ldr	r3, [r7, #4]
 802205e:	0011      	movs	r1, r2
 8022060:	0018      	movs	r0, r3
 8022062:	f000 f908 	bl	8022276 <USBD_CtlError>
            return;
 8022066:	e017      	b.n	8022098 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	0018      	movs	r0, r3
 802206c:	f000 f9eb 	bl	8022446 <USBD_CtlSendStatus>
        break;
 8022070:	e012      	b.n	8022098 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	0018      	movs	r0, r3
 8022076:	f000 f9e6 	bl	8022446 <USBD_CtlSendStatus>
        break;
 802207a:	e00d      	b.n	8022098 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 802207c:	683a      	ldr	r2, [r7, #0]
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	0011      	movs	r1, r2
 8022082:	0018      	movs	r0, r3
 8022084:	f000 f8f7 	bl	8022276 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022088:	4b05      	ldr	r3, [pc, #20]	@ (80220a0 <USBD_SetConfig+0x144>)
 802208a:	781a      	ldrb	r2, [r3, #0]
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	0011      	movs	r1, r2
 8022090:	0018      	movs	r0, r3
 8022092:	f7ff f883 	bl	802119c <USBD_ClrClassConfig>
        break;
 8022096:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022098:	46bd      	mov	sp, r7
 802209a:	b002      	add	sp, #8
 802209c:	bd80      	pop	{r7, pc}
 802209e:	46c0      	nop			@ (mov r8, r8)
 80220a0:	20002254 	.word	0x20002254

080220a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80220a4:	b580      	push	{r7, lr}
 80220a6:	b082      	sub	sp, #8
 80220a8:	af00      	add	r7, sp, #0
 80220aa:	6078      	str	r0, [r7, #4]
 80220ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80220ae:	683b      	ldr	r3, [r7, #0]
 80220b0:	88db      	ldrh	r3, [r3, #6]
 80220b2:	2b01      	cmp	r3, #1
 80220b4:	d006      	beq.n	80220c4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80220b6:	683a      	ldr	r2, [r7, #0]
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	0011      	movs	r1, r2
 80220bc:	0018      	movs	r0, r3
 80220be:	f000 f8da 	bl	8022276 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80220c2:	e026      	b.n	8022112 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80220c4:	687a      	ldr	r2, [r7, #4]
 80220c6:	23a7      	movs	r3, #167	@ 0xa7
 80220c8:	009b      	lsls	r3, r3, #2
 80220ca:	5cd3      	ldrb	r3, [r2, r3]
 80220cc:	2b02      	cmp	r3, #2
 80220ce:	dc02      	bgt.n	80220d6 <USBD_GetConfig+0x32>
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	dc03      	bgt.n	80220dc <USBD_GetConfig+0x38>
 80220d4:	e016      	b.n	8022104 <USBD_GetConfig+0x60>
 80220d6:	2b03      	cmp	r3, #3
 80220d8:	d00c      	beq.n	80220f4 <USBD_GetConfig+0x50>
 80220da:	e013      	b.n	8022104 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80220dc:	687b      	ldr	r3, [r7, #4]
 80220de:	2200      	movs	r2, #0
 80220e0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80220e2:	687b      	ldr	r3, [r7, #4]
 80220e4:	3308      	adds	r3, #8
 80220e6:	0019      	movs	r1, r3
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	2201      	movs	r2, #1
 80220ec:	0018      	movs	r0, r3
 80220ee:	f000 f940 	bl	8022372 <USBD_CtlSendData>
        break;
 80220f2:	e00e      	b.n	8022112 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	1d19      	adds	r1, r3, #4
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	2201      	movs	r2, #1
 80220fc:	0018      	movs	r0, r3
 80220fe:	f000 f938 	bl	8022372 <USBD_CtlSendData>
        break;
 8022102:	e006      	b.n	8022112 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022104:	683a      	ldr	r2, [r7, #0]
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	0011      	movs	r1, r2
 802210a:	0018      	movs	r0, r3
 802210c:	f000 f8b3 	bl	8022276 <USBD_CtlError>
        break;
 8022110:	46c0      	nop			@ (mov r8, r8)
}
 8022112:	46c0      	nop			@ (mov r8, r8)
 8022114:	46bd      	mov	sp, r7
 8022116:	b002      	add	sp, #8
 8022118:	bd80      	pop	{r7, pc}

0802211a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802211a:	b580      	push	{r7, lr}
 802211c:	b082      	sub	sp, #8
 802211e:	af00      	add	r7, sp, #0
 8022120:	6078      	str	r0, [r7, #4]
 8022122:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022124:	687a      	ldr	r2, [r7, #4]
 8022126:	23a7      	movs	r3, #167	@ 0xa7
 8022128:	009b      	lsls	r3, r3, #2
 802212a:	5cd3      	ldrb	r3, [r2, r3]
 802212c:	3b01      	subs	r3, #1
 802212e:	2b02      	cmp	r3, #2
 8022130:	d822      	bhi.n	8022178 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022132:	683b      	ldr	r3, [r7, #0]
 8022134:	88db      	ldrh	r3, [r3, #6]
 8022136:	2b02      	cmp	r3, #2
 8022138:	d006      	beq.n	8022148 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 802213a:	683a      	ldr	r2, [r7, #0]
 802213c:	687b      	ldr	r3, [r7, #4]
 802213e:	0011      	movs	r1, r2
 8022140:	0018      	movs	r0, r3
 8022142:	f000 f898 	bl	8022276 <USBD_CtlError>
        break;
 8022146:	e01e      	b.n	8022186 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022148:	687b      	ldr	r3, [r7, #4]
 802214a:	2201      	movs	r2, #1
 802214c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 802214e:	687a      	ldr	r2, [r7, #4]
 8022150:	23a9      	movs	r3, #169	@ 0xa9
 8022152:	009b      	lsls	r3, r3, #2
 8022154:	58d3      	ldr	r3, [r2, r3]
 8022156:	2b00      	cmp	r3, #0
 8022158:	d005      	beq.n	8022166 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	68db      	ldr	r3, [r3, #12]
 802215e:	2202      	movs	r2, #2
 8022160:	431a      	orrs	r2, r3
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	330c      	adds	r3, #12
 802216a:	0019      	movs	r1, r3
 802216c:	687b      	ldr	r3, [r7, #4]
 802216e:	2202      	movs	r2, #2
 8022170:	0018      	movs	r0, r3
 8022172:	f000 f8fe 	bl	8022372 <USBD_CtlSendData>
      break;
 8022176:	e006      	b.n	8022186 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022178:	683a      	ldr	r2, [r7, #0]
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	0011      	movs	r1, r2
 802217e:	0018      	movs	r0, r3
 8022180:	f000 f879 	bl	8022276 <USBD_CtlError>
      break;
 8022184:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022186:	46c0      	nop			@ (mov r8, r8)
 8022188:	46bd      	mov	sp, r7
 802218a:	b002      	add	sp, #8
 802218c:	bd80      	pop	{r7, pc}

0802218e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802218e:	b580      	push	{r7, lr}
 8022190:	b082      	sub	sp, #8
 8022192:	af00      	add	r7, sp, #0
 8022194:	6078      	str	r0, [r7, #4]
 8022196:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022198:	683b      	ldr	r3, [r7, #0]
 802219a:	885b      	ldrh	r3, [r3, #2]
 802219c:	2b01      	cmp	r3, #1
 802219e:	d108      	bne.n	80221b2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80221a0:	687a      	ldr	r2, [r7, #4]
 80221a2:	23a9      	movs	r3, #169	@ 0xa9
 80221a4:	009b      	lsls	r3, r3, #2
 80221a6:	2101      	movs	r1, #1
 80221a8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	0018      	movs	r0, r3
 80221ae:	f000 f94a 	bl	8022446 <USBD_CtlSendStatus>
  }
}
 80221b2:	46c0      	nop			@ (mov r8, r8)
 80221b4:	46bd      	mov	sp, r7
 80221b6:	b002      	add	sp, #8
 80221b8:	bd80      	pop	{r7, pc}

080221ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80221ba:	b580      	push	{r7, lr}
 80221bc:	b082      	sub	sp, #8
 80221be:	af00      	add	r7, sp, #0
 80221c0:	6078      	str	r0, [r7, #4]
 80221c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80221c4:	687a      	ldr	r2, [r7, #4]
 80221c6:	23a7      	movs	r3, #167	@ 0xa7
 80221c8:	009b      	lsls	r3, r3, #2
 80221ca:	5cd3      	ldrb	r3, [r2, r3]
 80221cc:	3b01      	subs	r3, #1
 80221ce:	2b02      	cmp	r3, #2
 80221d0:	d80d      	bhi.n	80221ee <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80221d2:	683b      	ldr	r3, [r7, #0]
 80221d4:	885b      	ldrh	r3, [r3, #2]
 80221d6:	2b01      	cmp	r3, #1
 80221d8:	d110      	bne.n	80221fc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80221da:	687a      	ldr	r2, [r7, #4]
 80221dc:	23a9      	movs	r3, #169	@ 0xa9
 80221de:	009b      	lsls	r3, r3, #2
 80221e0:	2100      	movs	r1, #0
 80221e2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	0018      	movs	r0, r3
 80221e8:	f000 f92d 	bl	8022446 <USBD_CtlSendStatus>
      }
      break;
 80221ec:	e006      	b.n	80221fc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80221ee:	683a      	ldr	r2, [r7, #0]
 80221f0:	687b      	ldr	r3, [r7, #4]
 80221f2:	0011      	movs	r1, r2
 80221f4:	0018      	movs	r0, r3
 80221f6:	f000 f83e 	bl	8022276 <USBD_CtlError>
      break;
 80221fa:	e000      	b.n	80221fe <USBD_ClrFeature+0x44>
      break;
 80221fc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80221fe:	46c0      	nop			@ (mov r8, r8)
 8022200:	46bd      	mov	sp, r7
 8022202:	b002      	add	sp, #8
 8022204:	bd80      	pop	{r7, pc}

08022206 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022206:	b580      	push	{r7, lr}
 8022208:	b082      	sub	sp, #8
 802220a:	af00      	add	r7, sp, #0
 802220c:	6078      	str	r0, [r7, #4]
 802220e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022210:	683b      	ldr	r3, [r7, #0]
 8022212:	781a      	ldrb	r2, [r3, #0]
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022218:	683b      	ldr	r3, [r7, #0]
 802221a:	785a      	ldrb	r2, [r3, #1]
 802221c:	687b      	ldr	r3, [r7, #4]
 802221e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022220:	683b      	ldr	r3, [r7, #0]
 8022222:	3302      	adds	r3, #2
 8022224:	781b      	ldrb	r3, [r3, #0]
 8022226:	001a      	movs	r2, r3
 8022228:	683b      	ldr	r3, [r7, #0]
 802222a:	3303      	adds	r3, #3
 802222c:	781b      	ldrb	r3, [r3, #0]
 802222e:	021b      	lsls	r3, r3, #8
 8022230:	b29b      	uxth	r3, r3
 8022232:	18d3      	adds	r3, r2, r3
 8022234:	b29a      	uxth	r2, r3
 8022236:	687b      	ldr	r3, [r7, #4]
 8022238:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 802223a:	683b      	ldr	r3, [r7, #0]
 802223c:	3304      	adds	r3, #4
 802223e:	781b      	ldrb	r3, [r3, #0]
 8022240:	001a      	movs	r2, r3
 8022242:	683b      	ldr	r3, [r7, #0]
 8022244:	3305      	adds	r3, #5
 8022246:	781b      	ldrb	r3, [r3, #0]
 8022248:	021b      	lsls	r3, r3, #8
 802224a:	b29b      	uxth	r3, r3
 802224c:	18d3      	adds	r3, r2, r3
 802224e:	b29a      	uxth	r2, r3
 8022250:	687b      	ldr	r3, [r7, #4]
 8022252:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022254:	683b      	ldr	r3, [r7, #0]
 8022256:	3306      	adds	r3, #6
 8022258:	781b      	ldrb	r3, [r3, #0]
 802225a:	001a      	movs	r2, r3
 802225c:	683b      	ldr	r3, [r7, #0]
 802225e:	3307      	adds	r3, #7
 8022260:	781b      	ldrb	r3, [r3, #0]
 8022262:	021b      	lsls	r3, r3, #8
 8022264:	b29b      	uxth	r3, r3
 8022266:	18d3      	adds	r3, r2, r3
 8022268:	b29a      	uxth	r2, r3
 802226a:	687b      	ldr	r3, [r7, #4]
 802226c:	80da      	strh	r2, [r3, #6]

}
 802226e:	46c0      	nop			@ (mov r8, r8)
 8022270:	46bd      	mov	sp, r7
 8022272:	b002      	add	sp, #8
 8022274:	bd80      	pop	{r7, pc}

08022276 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022276:	b580      	push	{r7, lr}
 8022278:	b082      	sub	sp, #8
 802227a:	af00      	add	r7, sp, #0
 802227c:	6078      	str	r0, [r7, #4]
 802227e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	2180      	movs	r1, #128	@ 0x80
 8022284:	0018      	movs	r0, r3
 8022286:	f000 fe86 	bl	8022f96 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	2100      	movs	r1, #0
 802228e:	0018      	movs	r0, r3
 8022290:	f000 fe81 	bl	8022f96 <USBD_LL_StallEP>
}
 8022294:	46c0      	nop			@ (mov r8, r8)
 8022296:	46bd      	mov	sp, r7
 8022298:	b002      	add	sp, #8
 802229a:	bd80      	pop	{r7, pc}

0802229c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 802229c:	b590      	push	{r4, r7, lr}
 802229e:	b087      	sub	sp, #28
 80222a0:	af00      	add	r7, sp, #0
 80222a2:	60f8      	str	r0, [r7, #12]
 80222a4:	60b9      	str	r1, [r7, #8]
 80222a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80222a8:	2417      	movs	r4, #23
 80222aa:	193b      	adds	r3, r7, r4
 80222ac:	2200      	movs	r2, #0
 80222ae:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80222b0:	68fb      	ldr	r3, [r7, #12]
 80222b2:	2b00      	cmp	r3, #0
 80222b4:	d03c      	beq.n	8022330 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80222b6:	68fb      	ldr	r3, [r7, #12]
 80222b8:	0018      	movs	r0, r3
 80222ba:	f000 f83d 	bl	8022338 <USBD_GetLen>
 80222be:	0003      	movs	r3, r0
 80222c0:	3301      	adds	r3, #1
 80222c2:	b29b      	uxth	r3, r3
 80222c4:	18db      	adds	r3, r3, r3
 80222c6:	b29a      	uxth	r2, r3
 80222c8:	687b      	ldr	r3, [r7, #4]
 80222ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80222cc:	193b      	adds	r3, r7, r4
 80222ce:	781b      	ldrb	r3, [r3, #0]
 80222d0:	193a      	adds	r2, r7, r4
 80222d2:	1c59      	adds	r1, r3, #1
 80222d4:	7011      	strb	r1, [r2, #0]
 80222d6:	001a      	movs	r2, r3
 80222d8:	68bb      	ldr	r3, [r7, #8]
 80222da:	189b      	adds	r3, r3, r2
 80222dc:	687a      	ldr	r2, [r7, #4]
 80222de:	7812      	ldrb	r2, [r2, #0]
 80222e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80222e2:	193b      	adds	r3, r7, r4
 80222e4:	781b      	ldrb	r3, [r3, #0]
 80222e6:	193a      	adds	r2, r7, r4
 80222e8:	1c59      	adds	r1, r3, #1
 80222ea:	7011      	strb	r1, [r2, #0]
 80222ec:	001a      	movs	r2, r3
 80222ee:	68bb      	ldr	r3, [r7, #8]
 80222f0:	189b      	adds	r3, r3, r2
 80222f2:	2203      	movs	r2, #3
 80222f4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80222f6:	e017      	b.n	8022328 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80222f8:	68fb      	ldr	r3, [r7, #12]
 80222fa:	1c5a      	adds	r2, r3, #1
 80222fc:	60fa      	str	r2, [r7, #12]
 80222fe:	2417      	movs	r4, #23
 8022300:	193a      	adds	r2, r7, r4
 8022302:	7812      	ldrb	r2, [r2, #0]
 8022304:	1939      	adds	r1, r7, r4
 8022306:	1c50      	adds	r0, r2, #1
 8022308:	7008      	strb	r0, [r1, #0]
 802230a:	0011      	movs	r1, r2
 802230c:	68ba      	ldr	r2, [r7, #8]
 802230e:	1852      	adds	r2, r2, r1
 8022310:	781b      	ldrb	r3, [r3, #0]
 8022312:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022314:	193b      	adds	r3, r7, r4
 8022316:	781b      	ldrb	r3, [r3, #0]
 8022318:	193a      	adds	r2, r7, r4
 802231a:	1c59      	adds	r1, r3, #1
 802231c:	7011      	strb	r1, [r2, #0]
 802231e:	001a      	movs	r2, r3
 8022320:	68bb      	ldr	r3, [r7, #8]
 8022322:	189b      	adds	r3, r3, r2
 8022324:	2200      	movs	r2, #0
 8022326:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022328:	68fb      	ldr	r3, [r7, #12]
 802232a:	781b      	ldrb	r3, [r3, #0]
 802232c:	2b00      	cmp	r3, #0
 802232e:	d1e3      	bne.n	80222f8 <USBD_GetString+0x5c>
    }
  }
}
 8022330:	46c0      	nop			@ (mov r8, r8)
 8022332:	46bd      	mov	sp, r7
 8022334:	b007      	add	sp, #28
 8022336:	bd90      	pop	{r4, r7, pc}

08022338 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022338:	b580      	push	{r7, lr}
 802233a:	b084      	sub	sp, #16
 802233c:	af00      	add	r7, sp, #0
 802233e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022340:	230f      	movs	r3, #15
 8022342:	18fb      	adds	r3, r7, r3
 8022344:	2200      	movs	r2, #0
 8022346:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022348:	e008      	b.n	802235c <USBD_GetLen+0x24>
  {
    len++;
 802234a:	210f      	movs	r1, #15
 802234c:	187b      	adds	r3, r7, r1
 802234e:	781a      	ldrb	r2, [r3, #0]
 8022350:	187b      	adds	r3, r7, r1
 8022352:	3201      	adds	r2, #1
 8022354:	701a      	strb	r2, [r3, #0]
    buf++;
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	3301      	adds	r3, #1
 802235a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	781b      	ldrb	r3, [r3, #0]
 8022360:	2b00      	cmp	r3, #0
 8022362:	d1f2      	bne.n	802234a <USBD_GetLen+0x12>
  }

  return len;
 8022364:	230f      	movs	r3, #15
 8022366:	18fb      	adds	r3, r7, r3
 8022368:	781b      	ldrb	r3, [r3, #0]
}
 802236a:	0018      	movs	r0, r3
 802236c:	46bd      	mov	sp, r7
 802236e:	b004      	add	sp, #16
 8022370:	bd80      	pop	{r7, pc}

08022372 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8022372:	b580      	push	{r7, lr}
 8022374:	b084      	sub	sp, #16
 8022376:	af00      	add	r7, sp, #0
 8022378:	60f8      	str	r0, [r7, #12]
 802237a:	60b9      	str	r1, [r7, #8]
 802237c:	1dbb      	adds	r3, r7, #6
 802237e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022380:	68fa      	ldr	r2, [r7, #12]
 8022382:	23a5      	movs	r3, #165	@ 0xa5
 8022384:	009b      	lsls	r3, r3, #2
 8022386:	2102      	movs	r1, #2
 8022388:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 802238a:	1dbb      	adds	r3, r7, #6
 802238c:	881a      	ldrh	r2, [r3, #0]
 802238e:	68fb      	ldr	r3, [r7, #12]
 8022390:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8022392:	1dbb      	adds	r3, r7, #6
 8022394:	881a      	ldrh	r2, [r3, #0]
 8022396:	68fb      	ldr	r3, [r7, #12]
 8022398:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802239a:	1dbb      	adds	r3, r7, #6
 802239c:	881b      	ldrh	r3, [r3, #0]
 802239e:	68ba      	ldr	r2, [r7, #8]
 80223a0:	68f8      	ldr	r0, [r7, #12]
 80223a2:	2100      	movs	r1, #0
 80223a4:	f000 fea9 	bl	80230fa <USBD_LL_Transmit>

  return USBD_OK;
 80223a8:	2300      	movs	r3, #0
}
 80223aa:	0018      	movs	r0, r3
 80223ac:	46bd      	mov	sp, r7
 80223ae:	b004      	add	sp, #16
 80223b0:	bd80      	pop	{r7, pc}

080223b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80223b2:	b580      	push	{r7, lr}
 80223b4:	b084      	sub	sp, #16
 80223b6:	af00      	add	r7, sp, #0
 80223b8:	60f8      	str	r0, [r7, #12]
 80223ba:	60b9      	str	r1, [r7, #8]
 80223bc:	1dbb      	adds	r3, r7, #6
 80223be:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80223c0:	1dbb      	adds	r3, r7, #6
 80223c2:	881b      	ldrh	r3, [r3, #0]
 80223c4:	68ba      	ldr	r2, [r7, #8]
 80223c6:	68f8      	ldr	r0, [r7, #12]
 80223c8:	2100      	movs	r1, #0
 80223ca:	f000 fe96 	bl	80230fa <USBD_LL_Transmit>

  return USBD_OK;
 80223ce:	2300      	movs	r3, #0
}
 80223d0:	0018      	movs	r0, r3
 80223d2:	46bd      	mov	sp, r7
 80223d4:	b004      	add	sp, #16
 80223d6:	bd80      	pop	{r7, pc}

080223d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80223d8:	b580      	push	{r7, lr}
 80223da:	b084      	sub	sp, #16
 80223dc:	af00      	add	r7, sp, #0
 80223de:	60f8      	str	r0, [r7, #12]
 80223e0:	60b9      	str	r1, [r7, #8]
 80223e2:	1dbb      	adds	r3, r7, #6
 80223e4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80223e6:	68fa      	ldr	r2, [r7, #12]
 80223e8:	23a5      	movs	r3, #165	@ 0xa5
 80223ea:	009b      	lsls	r3, r3, #2
 80223ec:	2103      	movs	r1, #3
 80223ee:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80223f0:	1dbb      	adds	r3, r7, #6
 80223f2:	8819      	ldrh	r1, [r3, #0]
 80223f4:	68fa      	ldr	r2, [r7, #12]
 80223f6:	23ae      	movs	r3, #174	@ 0xae
 80223f8:	005b      	lsls	r3, r3, #1
 80223fa:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80223fc:	1dbb      	adds	r3, r7, #6
 80223fe:	8819      	ldrh	r1, [r3, #0]
 8022400:	68fa      	ldr	r2, [r7, #12]
 8022402:	23b0      	movs	r3, #176	@ 0xb0
 8022404:	005b      	lsls	r3, r3, #1
 8022406:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022408:	1dbb      	adds	r3, r7, #6
 802240a:	881b      	ldrh	r3, [r3, #0]
 802240c:	68ba      	ldr	r2, [r7, #8]
 802240e:	68f8      	ldr	r0, [r7, #12]
 8022410:	2100      	movs	r1, #0
 8022412:	f000 fea9 	bl	8023168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022416:	2300      	movs	r3, #0
}
 8022418:	0018      	movs	r0, r3
 802241a:	46bd      	mov	sp, r7
 802241c:	b004      	add	sp, #16
 802241e:	bd80      	pop	{r7, pc}

08022420 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022420:	b580      	push	{r7, lr}
 8022422:	b084      	sub	sp, #16
 8022424:	af00      	add	r7, sp, #0
 8022426:	60f8      	str	r0, [r7, #12]
 8022428:	60b9      	str	r1, [r7, #8]
 802242a:	1dbb      	adds	r3, r7, #6
 802242c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802242e:	1dbb      	adds	r3, r7, #6
 8022430:	881b      	ldrh	r3, [r3, #0]
 8022432:	68ba      	ldr	r2, [r7, #8]
 8022434:	68f8      	ldr	r0, [r7, #12]
 8022436:	2100      	movs	r1, #0
 8022438:	f000 fe96 	bl	8023168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802243c:	2300      	movs	r3, #0
}
 802243e:	0018      	movs	r0, r3
 8022440:	46bd      	mov	sp, r7
 8022442:	b004      	add	sp, #16
 8022444:	bd80      	pop	{r7, pc}

08022446 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022446:	b580      	push	{r7, lr}
 8022448:	b082      	sub	sp, #8
 802244a:	af00      	add	r7, sp, #0
 802244c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 802244e:	687a      	ldr	r2, [r7, #4]
 8022450:	23a5      	movs	r3, #165	@ 0xa5
 8022452:	009b      	lsls	r3, r3, #2
 8022454:	2104      	movs	r1, #4
 8022456:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022458:	6878      	ldr	r0, [r7, #4]
 802245a:	2300      	movs	r3, #0
 802245c:	2200      	movs	r2, #0
 802245e:	2100      	movs	r1, #0
 8022460:	f000 fe4b 	bl	80230fa <USBD_LL_Transmit>

  return USBD_OK;
 8022464:	2300      	movs	r3, #0
}
 8022466:	0018      	movs	r0, r3
 8022468:	46bd      	mov	sp, r7
 802246a:	b002      	add	sp, #8
 802246c:	bd80      	pop	{r7, pc}

0802246e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802246e:	b580      	push	{r7, lr}
 8022470:	b082      	sub	sp, #8
 8022472:	af00      	add	r7, sp, #0
 8022474:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022476:	687a      	ldr	r2, [r7, #4]
 8022478:	23a5      	movs	r3, #165	@ 0xa5
 802247a:	009b      	lsls	r3, r3, #2
 802247c:	2105      	movs	r1, #5
 802247e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022480:	6878      	ldr	r0, [r7, #4]
 8022482:	2300      	movs	r3, #0
 8022484:	2200      	movs	r2, #0
 8022486:	2100      	movs	r1, #0
 8022488:	f000 fe6e 	bl	8023168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802248c:	2300      	movs	r3, #0
}
 802248e:	0018      	movs	r0, r3
 8022490:	46bd      	mov	sp, r7
 8022492:	b002      	add	sp, #8
 8022494:	bd80      	pop	{r7, pc}
	...

08022498 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022498:	b580      	push	{r7, lr}
 802249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802249c:	4914      	ldr	r1, [pc, #80]	@ (80224f0 <MX_USB_DEVICE_Init+0x58>)
 802249e:	4b15      	ldr	r3, [pc, #84]	@ (80224f4 <MX_USB_DEVICE_Init+0x5c>)
 80224a0:	2200      	movs	r2, #0
 80224a2:	0018      	movs	r0, r3
 80224a4:	f7fe fdec 	bl	8021080 <USBD_Init>
 80224a8:	1e03      	subs	r3, r0, #0
 80224aa:	d001      	beq.n	80224b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80224ac:	f7ea fb4c 	bl	800cb48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80224b0:	4a11      	ldr	r2, [pc, #68]	@ (80224f8 <MX_USB_DEVICE_Init+0x60>)
 80224b2:	4b10      	ldr	r3, [pc, #64]	@ (80224f4 <MX_USB_DEVICE_Init+0x5c>)
 80224b4:	0011      	movs	r1, r2
 80224b6:	0018      	movs	r0, r3
 80224b8:	f7fe fe13 	bl	80210e2 <USBD_RegisterClass>
 80224bc:	1e03      	subs	r3, r0, #0
 80224be:	d001      	beq.n	80224c4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80224c0:	f7ea fb42 	bl	800cb48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80224c4:	4a0d      	ldr	r2, [pc, #52]	@ (80224fc <MX_USB_DEVICE_Init+0x64>)
 80224c6:	4b0b      	ldr	r3, [pc, #44]	@ (80224f4 <MX_USB_DEVICE_Init+0x5c>)
 80224c8:	0011      	movs	r1, r2
 80224ca:	0018      	movs	r0, r3
 80224cc:	f7fe fd28 	bl	8020f20 <USBD_CDC_RegisterInterface>
 80224d0:	1e03      	subs	r3, r0, #0
 80224d2:	d001      	beq.n	80224d8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80224d4:	f7ea fb38 	bl	800cb48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80224d8:	4b06      	ldr	r3, [pc, #24]	@ (80224f4 <MX_USB_DEVICE_Init+0x5c>)
 80224da:	0018      	movs	r0, r3
 80224dc:	f7fe fe21 	bl	8021122 <USBD_Start>
 80224e0:	1e03      	subs	r3, r0, #0
 80224e2:	d001      	beq.n	80224e8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80224e4:	f7ea fb30 	bl	800cb48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80224e8:	46c0      	nop			@ (mov r8, r8)
 80224ea:	46bd      	mov	sp, r7
 80224ec:	bd80      	pop	{r7, pc}
 80224ee:	46c0      	nop			@ (mov r8, r8)
 80224f0:	2000021c 	.word	0x2000021c
 80224f4:	20002258 	.word	0x20002258
 80224f8:	20000108 	.word	0x20000108
 80224fc:	2000020c 	.word	0x2000020c

08022500 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022500:	b580      	push	{r7, lr}
 8022502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
#ifdef USBLOGGING
  // Circular FIFO initializations :
  vcp_tx_fifo.data = UserTxBufferFS;  // Use the buffer generated by Cube
 8022504:	4b13      	ldr	r3, [pc, #76]	@ (8022554 <CDC_Init_FS+0x54>)
 8022506:	4a14      	ldr	r2, [pc, #80]	@ (8022558 <CDC_Init_FS+0x58>)
 8022508:	601a      	str	r2, [r3, #0]
  vcp_tx_fifo.wr = 0;
 802250a:	4b12      	ldr	r3, [pc, #72]	@ (8022554 <CDC_Init_FS+0x54>)
 802250c:	2200      	movs	r2, #0
 802250e:	605a      	str	r2, [r3, #4]
  vcp_tx_fifo.rd = 0;
 8022510:	4b10      	ldr	r3, [pc, #64]	@ (8022554 <CDC_Init_FS+0x54>)
 8022512:	2200      	movs	r2, #0
 8022514:	609a      	str	r2, [r3, #8]
  vcp_tx_fifo.lb = 0;
 8022516:	4b0f      	ldr	r3, [pc, #60]	@ (8022554 <CDC_Init_FS+0x54>)
 8022518:	2200      	movs	r2, #0
 802251a:	60da      	str	r2, [r3, #12]
  vcp_rx_fifo.data = UserRxBufferFS;  // Use the buffer generated by Cube
 802251c:	4b0f      	ldr	r3, [pc, #60]	@ (802255c <CDC_Init_FS+0x5c>)
 802251e:	4a10      	ldr	r2, [pc, #64]	@ (8022560 <CDC_Init_FS+0x60>)
 8022520:	601a      	str	r2, [r3, #0]
  vcp_rx_fifo.wr = 0;
 8022522:	4b0e      	ldr	r3, [pc, #56]	@ (802255c <CDC_Init_FS+0x5c>)
 8022524:	2200      	movs	r2, #0
 8022526:	605a      	str	r2, [r3, #4]
  vcp_rx_fifo.rd = 0;
 8022528:	4b0c      	ldr	r3, [pc, #48]	@ (802255c <CDC_Init_FS+0x5c>)
 802252a:	2200      	movs	r2, #0
 802252c:	609a      	str	r2, [r3, #8]
  vcp_rx_fifo.lb = 0;
 802252e:	4b0b      	ldr	r3, [pc, #44]	@ (802255c <CDC_Init_FS+0x5c>)
 8022530:	2200      	movs	r2, #0
 8022532:	60da      	str	r2, [r3, #12]
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022534:	4908      	ldr	r1, [pc, #32]	@ (8022558 <CDC_Init_FS+0x58>)
 8022536:	4b0b      	ldr	r3, [pc, #44]	@ (8022564 <CDC_Init_FS+0x64>)
 8022538:	2200      	movs	r2, #0
 802253a:	0018      	movs	r0, r3
 802253c:	f7fe fd0b 	bl	8020f56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022540:	4a07      	ldr	r2, [pc, #28]	@ (8022560 <CDC_Init_FS+0x60>)
 8022542:	4b08      	ldr	r3, [pc, #32]	@ (8022564 <CDC_Init_FS+0x64>)
 8022544:	0011      	movs	r1, r2
 8022546:	0018      	movs	r0, r3
 8022548:	f7fe fd21 	bl	8020f8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 802254c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 802254e:	0018      	movs	r0, r3
 8022550:	46bd      	mov	sp, r7
 8022552:	bd80      	pop	{r7, pc}
 8022554:	20002ddc 	.word	0x20002ddc
 8022558:	200029dc 	.word	0x200029dc
 802255c:	20002dec 	.word	0x20002dec
 8022560:	200025dc 	.word	0x200025dc
 8022564:	20002258 	.word	0x20002258

08022568 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022568:	b580      	push	{r7, lr}
 802256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802256c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802256e:	0018      	movs	r0, r3
 8022570:	46bd      	mov	sp, r7
 8022572:	bd80      	pop	{r7, pc}

08022574 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022574:	b580      	push	{r7, lr}
 8022576:	b082      	sub	sp, #8
 8022578:	af00      	add	r7, sp, #0
 802257a:	6039      	str	r1, [r7, #0]
 802257c:	0011      	movs	r1, r2
 802257e:	1dfb      	adds	r3, r7, #7
 8022580:	1c02      	adds	r2, r0, #0
 8022582:	701a      	strb	r2, [r3, #0]
 8022584:	1d3b      	adds	r3, r7, #4
 8022586:	1c0a      	adds	r2, r1, #0
 8022588:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 802258a:	1dfb      	adds	r3, r7, #7
 802258c:	781b      	ldrb	r3, [r3, #0]
 802258e:	2b23      	cmp	r3, #35	@ 0x23
 8022590:	d804      	bhi.n	802259c <CDC_Control_FS+0x28>
 8022592:	009a      	lsls	r2, r3, #2
 8022594:	4b04      	ldr	r3, [pc, #16]	@ (80225a8 <CDC_Control_FS+0x34>)
 8022596:	18d3      	adds	r3, r2, r3
 8022598:	681b      	ldr	r3, [r3, #0]
 802259a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 802259c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 802259e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80225a0:	0018      	movs	r0, r3
 80225a2:	46bd      	mov	sp, r7
 80225a4:	b002      	add	sp, #8
 80225a6:	bd80      	pop	{r7, pc}
 80225a8:	0802e3d4 	.word	0x0802e3d4

080225ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80225ac:	b580      	push	{r7, lr}
 80225ae:	b082      	sub	sp, #8
 80225b0:	af00      	add	r7, sp, #0
 80225b2:	6078      	str	r0, [r7, #4]
 80225b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 80225b6:	4b27      	ldr	r3, [pc, #156]	@ (8022654 <CDC_Receive_FS+0xa8>)
 80225b8:	781b      	ldrb	r3, [r3, #0]
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d013      	beq.n	80225e6 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 80225be:	683b      	ldr	r3, [r7, #0]
 80225c0:	681b      	ldr	r3, [r3, #0]
 80225c2:	b29a      	uxth	r2, r3
 80225c4:	2301      	movs	r3, #1
 80225c6:	425b      	negs	r3, r3
 80225c8:	6879      	ldr	r1, [r7, #4]
 80225ca:	4823      	ldr	r0, [pc, #140]	@ (8022658 <CDC_Receive_FS+0xac>)
 80225cc:	f7fa fa28 	bl	801ca20 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80225d0:	687a      	ldr	r2, [r7, #4]
 80225d2:	4b22      	ldr	r3, [pc, #136]	@ (802265c <CDC_Receive_FS+0xb0>)
 80225d4:	0011      	movs	r1, r2
 80225d6:	0018      	movs	r0, r3
 80225d8:	f7fe fcd9 	bl	8020f8e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80225dc:	4b1f      	ldr	r3, [pc, #124]	@ (802265c <CDC_Receive_FS+0xb0>)
 80225de:	0018      	movs	r0, r3
 80225e0:	f7fe fd20 	bl	8021024 <USBD_CDC_ReceivePacket>
 80225e4:	e030      	b.n	8022648 <CDC_Receive_FS+0x9c>
  }
#ifdef USBLOGGING
  else if (usblog) {
 80225e6:	4b1e      	ldr	r3, [pc, #120]	@ (8022660 <CDC_Receive_FS+0xb4>)
 80225e8:	781b      	ldrb	r3, [r3, #0]
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	d025      	beq.n	802263a <CDC_Receive_FS+0x8e>
    // Update the write index for the next incoming packet
    vcp_rx_fifo.wr += *Len;
 80225ee:	4b1d      	ldr	r3, [pc, #116]	@ (8022664 <CDC_Receive_FS+0xb8>)
 80225f0:	685b      	ldr	r3, [r3, #4]
 80225f2:	001a      	movs	r2, r3
 80225f4:	683b      	ldr	r3, [r7, #0]
 80225f6:	681b      	ldr	r3, [r3, #0]
 80225f8:	18d3      	adds	r3, r2, r3
 80225fa:	001a      	movs	r2, r3
 80225fc:	4b19      	ldr	r3, [pc, #100]	@ (8022664 <CDC_Receive_FS+0xb8>)
 80225fe:	605a      	str	r2, [r3, #4]
    // Is the new value too close to the end of the FIFO ?
    if (vcp_rx_fifo.wr >= RX_BUFFER_MAX_WRITE_INDEX)
 8022600:	4b18      	ldr	r3, [pc, #96]	@ (8022664 <CDC_Receive_FS+0xb8>)
 8022602:	685b      	ldr	r3, [r3, #4]
 8022604:	001a      	movs	r2, r3
 8022606:	23f0      	movs	r3, #240	@ 0xf0
 8022608:	009b      	lsls	r3, r3, #2
 802260a:	429a      	cmp	r2, r3
 802260c:	d306      	bcc.n	802261c <CDC_Receive_FS+0x70>
    {
      // Solution : wrap-around (and save wr as lb)
      vcp_rx_fifo.lb = vcp_rx_fifo.wr;
 802260e:	4b15      	ldr	r3, [pc, #84]	@ (8022664 <CDC_Receive_FS+0xb8>)
 8022610:	685a      	ldr	r2, [r3, #4]
 8022612:	4b14      	ldr	r3, [pc, #80]	@ (8022664 <CDC_Receive_FS+0xb8>)
 8022614:	60da      	str	r2, [r3, #12]
      vcp_rx_fifo.wr = 0;
 8022616:	4b13      	ldr	r3, [pc, #76]	@ (8022664 <CDC_Receive_FS+0xb8>)
 8022618:	2200      	movs	r2, #0
 802261a:	605a      	str	r2, [r3, #4]
    }
    // Tell the driver where to write the next incoming packet
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, vcp_rx_fifo.data + vcp_rx_fifo.wr);
 802261c:	4b11      	ldr	r3, [pc, #68]	@ (8022664 <CDC_Receive_FS+0xb8>)
 802261e:	681a      	ldr	r2, [r3, #0]
 8022620:	4b10      	ldr	r3, [pc, #64]	@ (8022664 <CDC_Receive_FS+0xb8>)
 8022622:	685b      	ldr	r3, [r3, #4]
 8022624:	18d2      	adds	r2, r2, r3
 8022626:	4b0d      	ldr	r3, [pc, #52]	@ (802265c <CDC_Receive_FS+0xb0>)
 8022628:	0011      	movs	r1, r2
 802262a:	0018      	movs	r0, r3
 802262c:	f7fe fcaf 	bl	8020f8e <USBD_CDC_SetRxBuffer>
    // Receive the next packet
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022630:	4b0a      	ldr	r3, [pc, #40]	@ (802265c <CDC_Receive_FS+0xb0>)
 8022632:	0018      	movs	r0, r3
 8022634:	f7fe fcf6 	bl	8021024 <USBD_CDC_ReceivePacket>
 8022638:	e006      	b.n	8022648 <CDC_Receive_FS+0x9c>
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 802263a:	683b      	ldr	r3, [r7, #0]
 802263c:	681a      	ldr	r2, [r3, #0]
 802263e:	4b0a      	ldr	r3, [pc, #40]	@ (8022668 <CDC_Receive_FS+0xbc>)
 8022640:	681b      	ldr	r3, [r3, #0]
 8022642:	18d2      	adds	r2, r2, r3
 8022644:	4b08      	ldr	r3, [pc, #32]	@ (8022668 <CDC_Receive_FS+0xbc>)
 8022646:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8022648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802264a:	0018      	movs	r0, r3
 802264c:	46bd      	mov	sp, r7
 802264e:	b002      	add	sp, #8
 8022650:	bd80      	pop	{r7, pc}
 8022652:	46c0      	nop			@ (mov r8, r8)
 8022654:	2000251c 	.word	0x2000251c
 8022658:	20002520 	.word	0x20002520
 802265c:	20002258 	.word	0x20002258
 8022660:	2000020b 	.word	0x2000020b
 8022664:	20002dec 	.word	0x20002dec
 8022668:	200025d8 	.word	0x200025d8

0802266c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802266c:	b5b0      	push	{r4, r5, r7, lr}
 802266e:	b084      	sub	sp, #16
 8022670:	af00      	add	r7, sp, #0
 8022672:	6078      	str	r0, [r7, #4]
 8022674:	000a      	movs	r2, r1
 8022676:	1cbb      	adds	r3, r7, #2
 8022678:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 802267a:	230f      	movs	r3, #15
 802267c:	18fb      	adds	r3, r7, r3
 802267e:	2200      	movs	r2, #0
 8022680:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8022682:	4a11      	ldr	r2, [pc, #68]	@ (80226c8 <CDC_Transmit_FS+0x5c>)
 8022684:	23ae      	movs	r3, #174	@ 0xae
 8022686:	009b      	lsls	r3, r3, #2
 8022688:	58d3      	ldr	r3, [r2, r3]
 802268a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 802268c:	68ba      	ldr	r2, [r7, #8]
 802268e:	2385      	movs	r3, #133	@ 0x85
 8022690:	009b      	lsls	r3, r3, #2
 8022692:	58d3      	ldr	r3, [r2, r3]
 8022694:	2b00      	cmp	r3, #0
 8022696:	d001      	beq.n	802269c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8022698:	2301      	movs	r3, #1
 802269a:	e010      	b.n	80226be <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 802269c:	1cbb      	adds	r3, r7, #2
 802269e:	881a      	ldrh	r2, [r3, #0]
 80226a0:	6879      	ldr	r1, [r7, #4]
 80226a2:	4b09      	ldr	r3, [pc, #36]	@ (80226c8 <CDC_Transmit_FS+0x5c>)
 80226a4:	0018      	movs	r0, r3
 80226a6:	f7fe fc56 	bl	8020f56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80226aa:	250f      	movs	r5, #15
 80226ac:	197c      	adds	r4, r7, r5
 80226ae:	4b06      	ldr	r3, [pc, #24]	@ (80226c8 <CDC_Transmit_FS+0x5c>)
 80226b0:	0018      	movs	r0, r3
 80226b2:	f7fe fc80 	bl	8020fb6 <USBD_CDC_TransmitPacket>
 80226b6:	0003      	movs	r3, r0
 80226b8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80226ba:	197b      	adds	r3, r7, r5
 80226bc:	781b      	ldrb	r3, [r3, #0]
}
 80226be:	0018      	movs	r0, r3
 80226c0:	46bd      	mov	sp, r7
 80226c2:	b004      	add	sp, #16
 80226c4:	bdb0      	pop	{r4, r5, r7, pc}
 80226c6:	46c0      	nop			@ (mov r8, r8)
 80226c8:	20002258 	.word	0x20002258

080226cc <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80226cc:	b580      	push	{r7, lr}
 80226ce:	af00      	add	r7, sp, #0
  ESPProg = true;
 80226d0:	4b02      	ldr	r3, [pc, #8]	@ (80226dc <EnableESPProg+0x10>)
 80226d2:	2201      	movs	r2, #1
 80226d4:	701a      	strb	r2, [r3, #0]
}
 80226d6:	46c0      	nop			@ (mov r8, r8)
 80226d8:	46bd      	mov	sp, r7
 80226da:	bd80      	pop	{r7, pc}
 80226dc:	2000251c 	.word	0x2000251c

080226e0 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80226e0:	b580      	push	{r7, lr}
 80226e2:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80226e4:	4b01      	ldr	r3, [pc, #4]	@ (80226ec <GetUsbRxPointer+0xc>)
}
 80226e6:	0018      	movs	r0, r3
 80226e8:	46bd      	mov	sp, r7
 80226ea:	bd80      	pop	{r7, pc}
 80226ec:	200025dc 	.word	0x200025dc

080226f0 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80226f0:	b580      	push	{r7, lr}
 80226f2:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80226f4:	4b07      	ldr	r3, [pc, #28]	@ (8022714 <ResetUsbRxDataSize+0x24>)
 80226f6:	2200      	movs	r2, #0
 80226f8:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80226fa:	4a07      	ldr	r2, [pc, #28]	@ (8022718 <ResetUsbRxDataSize+0x28>)
 80226fc:	4b07      	ldr	r3, [pc, #28]	@ (802271c <ResetUsbRxDataSize+0x2c>)
 80226fe:	0011      	movs	r1, r2
 8022700:	0018      	movs	r0, r3
 8022702:	f7fe fc44 	bl	8020f8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022706:	4b05      	ldr	r3, [pc, #20]	@ (802271c <ResetUsbRxDataSize+0x2c>)
 8022708:	0018      	movs	r0, r3
 802270a:	f7fe fc8b 	bl	8021024 <USBD_CDC_ReceivePacket>
}
 802270e:	46c0      	nop			@ (mov r8, r8)
 8022710:	46bd      	mov	sp, r7
 8022712:	bd80      	pop	{r7, pc}
 8022714:	200025d8 	.word	0x200025d8
 8022718:	200025dc 	.word	0x200025dc
 802271c:	20002258 	.word	0x20002258

08022720 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8022720:	b580      	push	{r7, lr}
 8022722:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8022724:	4b02      	ldr	r3, [pc, #8]	@ (8022730 <GetUsbRxDataSize+0x10>)
 8022726:	681b      	ldr	r3, [r3, #0]
}
 8022728:	0018      	movs	r0, r3
 802272a:	46bd      	mov	sp, r7
 802272c:	bd80      	pop	{r7, pc}
 802272e:	46c0      	nop			@ (mov r8, r8)
 8022730:	200025d8 	.word	0x200025d8

08022734 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8022734:	b580      	push	{r7, lr}
 8022736:	b082      	sub	sp, #8
 8022738:	af00      	add	r7, sp, #0
 802273a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 802273c:	687a      	ldr	r2, [r7, #4]
 802273e:	4b07      	ldr	r3, [pc, #28]	@ (802275c <GetUsbRxNextChunk+0x28>)
 8022740:	18d2      	adds	r2, r2, r3
 8022742:	4b07      	ldr	r3, [pc, #28]	@ (8022760 <GetUsbRxNextChunk+0x2c>)
 8022744:	0011      	movs	r1, r2
 8022746:	0018      	movs	r0, r3
 8022748:	f7fe fc21 	bl	8020f8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802274c:	4b04      	ldr	r3, [pc, #16]	@ (8022760 <GetUsbRxNextChunk+0x2c>)
 802274e:	0018      	movs	r0, r3
 8022750:	f7fe fc68 	bl	8021024 <USBD_CDC_ReceivePacket>
}
 8022754:	46c0      	nop			@ (mov r8, r8)
 8022756:	46bd      	mov	sp, r7
 8022758:	b002      	add	sp, #8
 802275a:	bd80      	pop	{r7, pc}
 802275c:	200025dc 	.word	0x200025dc
 8022760:	20002258 	.word	0x20002258

08022764 <vcp_init>:

#ifdef USBLOGGING
void vcp_init() {
 8022764:	b580      	push	{r7, lr}
 8022766:	af00      	add	r7, sp, #0
  while (vcp_tx_fifo.data == 0);    // Wait until the CDC library calls CDC_Init_FS, by checking for a non-null buffer pointer
 8022768:	46c0      	nop			@ (mov r8, r8)
 802276a:	4b04      	ldr	r3, [pc, #16]	@ (802277c <vcp_init+0x18>)
 802276c:	681b      	ldr	r3, [r3, #0]
 802276e:	2b00      	cmp	r3, #0
 8022770:	d0fb      	beq.n	802276a <vcp_init+0x6>
}
 8022772:	46c0      	nop			@ (mov r8, r8)
 8022774:	46c0      	nop			@ (mov r8, r8)
 8022776:	46bd      	mov	sp, r7
 8022778:	bd80      	pop	{r7, pc}
 802277a:	46c0      	nop			@ (mov r8, r8)
 802277c:	20002ddc 	.word	0x20002ddc

08022780 <vcp_send>:

int vcp_send(uint8_t* buf, uint16_t len) {
 8022780:	b580      	push	{r7, lr}
 8022782:	b084      	sub	sp, #16
 8022784:	af00      	add	r7, sp, #0
 8022786:	6078      	str	r0, [r7, #4]
 8022788:	000a      	movs	r2, r1
 802278a:	1cbb      	adds	r3, r7, #2
 802278c:	801a      	strh	r2, [r3, #0]
  // Step 1 : calculate the occupied space in the Tx FIFO
  int cap = vcp_tx_fifo.wr - vcp_tx_fifo.rd;   // occupied capacity
 802278e:	4b32      	ldr	r3, [pc, #200]	@ (8022858 <vcp_send+0xd8>)
 8022790:	685a      	ldr	r2, [r3, #4]
 8022792:	4b31      	ldr	r3, [pc, #196]	@ (8022858 <vcp_send+0xd8>)
 8022794:	689b      	ldr	r3, [r3, #8]
 8022796:	1ad3      	subs	r3, r2, r3
 8022798:	60fb      	str	r3, [r7, #12]
  if (cap < 0)    // FIFO contents wrap around
 802279a:	68fb      	ldr	r3, [r7, #12]
 802279c:	2b00      	cmp	r3, #0
 802279e:	da05      	bge.n	80227ac <vcp_send+0x2c>
    cap += APP_TX_DATA_SIZE;
 80227a0:	68fb      	ldr	r3, [r7, #12]
 80227a2:	2280      	movs	r2, #128	@ 0x80
 80227a4:	00d2      	lsls	r2, r2, #3
 80227a6:	4694      	mov	ip, r2
 80227a8:	4463      	add	r3, ip
 80227aa:	60fb      	str	r3, [r7, #12]
  cap = APP_TX_DATA_SIZE - cap;      // available capacity
 80227ac:	68fb      	ldr	r3, [r7, #12]
 80227ae:	2280      	movs	r2, #128	@ 0x80
 80227b0:	00d2      	lsls	r2, r2, #3
 80227b2:	1ad3      	subs	r3, r2, r3
 80227b4:	60fb      	str	r3, [r7, #12]

  // Step 2 : compare with argument
  if (cap < len)
 80227b6:	1cbb      	adds	r3, r7, #2
 80227b8:	881b      	ldrh	r3, [r3, #0]
 80227ba:	68fa      	ldr	r2, [r7, #12]
 80227bc:	429a      	cmp	r2, r3
 80227be:	da02      	bge.n	80227c6 <vcp_send+0x46>
    return -1;   // Not enough room to copy "buf" into the FIFO => error
 80227c0:	2301      	movs	r3, #1
 80227c2:	425b      	negs	r3, r3
 80227c4:	e043      	b.n	802284e <vcp_send+0xce>

  // Step 3 : does buf fit in the tail ?
  int tail = APP_TX_DATA_SIZE - vcp_tx_fifo.wr;
 80227c6:	4b24      	ldr	r3, [pc, #144]	@ (8022858 <vcp_send+0xd8>)
 80227c8:	685b      	ldr	r3, [r3, #4]
 80227ca:	2280      	movs	r2, #128	@ 0x80
 80227cc:	00d2      	lsls	r2, r2, #3
 80227ce:	1ad3      	subs	r3, r2, r3
 80227d0:	60bb      	str	r3, [r7, #8]
  if (tail >= len)
 80227d2:	1cbb      	adds	r3, r7, #2
 80227d4:	881b      	ldrh	r3, [r3, #0]
 80227d6:	68ba      	ldr	r2, [r7, #8]
 80227d8:	429a      	cmp	r2, r3
 80227da:	db1b      	blt.n	8022814 <vcp_send+0x94>
  {
    // Copy buf into the tail of the FIFO
    memcpy (&vcp_tx_fifo.data[vcp_tx_fifo.wr], buf, len);
 80227dc:	4b1e      	ldr	r3, [pc, #120]	@ (8022858 <vcp_send+0xd8>)
 80227de:	681a      	ldr	r2, [r3, #0]
 80227e0:	4b1d      	ldr	r3, [pc, #116]	@ (8022858 <vcp_send+0xd8>)
 80227e2:	685b      	ldr	r3, [r3, #4]
 80227e4:	18d0      	adds	r0, r2, r3
 80227e6:	1cbb      	adds	r3, r7, #2
 80227e8:	881a      	ldrh	r2, [r3, #0]
 80227ea:	687b      	ldr	r3, [r7, #4]
 80227ec:	0019      	movs	r1, r3
 80227ee:	f003 fbb9 	bl	8025f64 <memcpy>
    // Update "wr" index
    vcp_tx_fifo.wr += len;
 80227f2:	4b19      	ldr	r3, [pc, #100]	@ (8022858 <vcp_send+0xd8>)
 80227f4:	685a      	ldr	r2, [r3, #4]
 80227f6:	1cbb      	adds	r3, r7, #2
 80227f8:	881b      	ldrh	r3, [r3, #0]
 80227fa:	18d2      	adds	r2, r2, r3
 80227fc:	4b16      	ldr	r3, [pc, #88]	@ (8022858 <vcp_send+0xd8>)
 80227fe:	605a      	str	r2, [r3, #4]
    // In case "len" == "tail", next write goes to the head
    if (vcp_tx_fifo.wr == APP_TX_DATA_SIZE)
 8022800:	4b15      	ldr	r3, [pc, #84]	@ (8022858 <vcp_send+0xd8>)
 8022802:	685a      	ldr	r2, [r3, #4]
 8022804:	2380      	movs	r3, #128	@ 0x80
 8022806:	00db      	lsls	r3, r3, #3
 8022808:	429a      	cmp	r2, r3
 802280a:	d11f      	bne.n	802284c <vcp_send+0xcc>
      vcp_tx_fifo.wr = 0;
 802280c:	4b12      	ldr	r3, [pc, #72]	@ (8022858 <vcp_send+0xd8>)
 802280e:	2200      	movs	r2, #0
 8022810:	605a      	str	r2, [r3, #4]
 8022812:	e01b      	b.n	802284c <vcp_send+0xcc>
  }
  else
  {
    // Copy the head of "buf" to the tail of the FIFO
    memcpy (&vcp_tx_fifo.data[vcp_tx_fifo.wr], buf, tail);
 8022814:	4b10      	ldr	r3, [pc, #64]	@ (8022858 <vcp_send+0xd8>)
 8022816:	681a      	ldr	r2, [r3, #0]
 8022818:	4b0f      	ldr	r3, [pc, #60]	@ (8022858 <vcp_send+0xd8>)
 802281a:	685b      	ldr	r3, [r3, #4]
 802281c:	18d3      	adds	r3, r2, r3
 802281e:	68ba      	ldr	r2, [r7, #8]
 8022820:	6879      	ldr	r1, [r7, #4]
 8022822:	0018      	movs	r0, r3
 8022824:	f003 fb9e 	bl	8025f64 <memcpy>
    // Copy the tail of "buf" to the head of the FIFO :
    memcpy (vcp_tx_fifo.data, &buf[tail], len - tail);
 8022828:	4b0b      	ldr	r3, [pc, #44]	@ (8022858 <vcp_send+0xd8>)
 802282a:	6818      	ldr	r0, [r3, #0]
 802282c:	68bb      	ldr	r3, [r7, #8]
 802282e:	687a      	ldr	r2, [r7, #4]
 8022830:	18d1      	adds	r1, r2, r3
 8022832:	1cbb      	adds	r3, r7, #2
 8022834:	881a      	ldrh	r2, [r3, #0]
 8022836:	68bb      	ldr	r3, [r7, #8]
 8022838:	1ad3      	subs	r3, r2, r3
 802283a:	001a      	movs	r2, r3
 802283c:	f003 fb92 	bl	8025f64 <memcpy>
    // Update the "wr" index
    vcp_tx_fifo.wr = len - tail;
 8022840:	1cbb      	adds	r3, r7, #2
 8022842:	881a      	ldrh	r2, [r3, #0]
 8022844:	68bb      	ldr	r3, [r7, #8]
 8022846:	1ad2      	subs	r2, r2, r3
 8022848:	4b03      	ldr	r3, [pc, #12]	@ (8022858 <vcp_send+0xd8>)
 802284a:	605a      	str	r2, [r3, #4]
  }
  return 0;  // successful completion
 802284c:	2300      	movs	r3, #0
}
 802284e:	0018      	movs	r0, r3
 8022850:	46bd      	mov	sp, r7
 8022852:	b004      	add	sp, #16
 8022854:	bd80      	pop	{r7, pc}
 8022856:	46c0      	nop			@ (mov r8, r8)
 8022858:	20002ddc 	.word	0x20002ddc

0802285c <vcp_recv>:

int vcp_recv (uint8_t* buf, uint16_t len)
{
 802285c:	b580      	push	{r7, lr}
 802285e:	b084      	sub	sp, #16
 8022860:	af00      	add	r7, sp, #0
 8022862:	6078      	str	r0, [r7, #4]
 8022864:	000a      	movs	r2, r1
 8022866:	1cbb      	adds	r3, r7, #2
 8022868:	801a      	strh	r2, [r3, #0]
  // Compute how much data is in the FIFO
  int cap = vcp_rx_fifo.wr - vcp_rx_fifo.rd;
 802286a:	4b23      	ldr	r3, [pc, #140]	@ (80228f8 <vcp_recv+0x9c>)
 802286c:	685a      	ldr	r2, [r3, #4]
 802286e:	4b22      	ldr	r3, [pc, #136]	@ (80228f8 <vcp_recv+0x9c>)
 8022870:	689b      	ldr	r3, [r3, #8]
 8022872:	1ad3      	subs	r3, r2, r3
 8022874:	60fb      	str	r3, [r7, #12]
  if (cap == 0)
 8022876:	68fb      	ldr	r3, [r7, #12]
 8022878:	2b00      	cmp	r3, #0
 802287a:	d101      	bne.n	8022880 <vcp_recv+0x24>
    return 0;      // Empty FIFO, no data to read
 802287c:	2300      	movs	r3, #0
 802287e:	e036      	b.n	80228ee <vcp_recv+0x92>
  if (cap < 0)  // FIFO contents wrap around
 8022880:	68fb      	ldr	r3, [r7, #12]
 8022882:	2b00      	cmp	r3, #0
 8022884:	da04      	bge.n	8022890 <vcp_recv+0x34>
    cap += vcp_rx_fifo.lb;  // Notice the use of lb
 8022886:	4b1c      	ldr	r3, [pc, #112]	@ (80228f8 <vcp_recv+0x9c>)
 8022888:	68db      	ldr	r3, [r3, #12]
 802288a:	68fa      	ldr	r2, [r7, #12]
 802288c:	18d3      	adds	r3, r2, r3
 802288e:	60fb      	str	r3, [r7, #12]
  // Limit the FIFO read to the available data
  if (len > cap)
 8022890:	1cbb      	adds	r3, r7, #2
 8022892:	881b      	ldrh	r3, [r3, #0]
 8022894:	68fa      	ldr	r2, [r7, #12]
 8022896:	429a      	cmp	r2, r3
 8022898:	da02      	bge.n	80228a0 <vcp_recv+0x44>
    len = cap;
 802289a:	1cbb      	adds	r3, r7, #2
 802289c:	68fa      	ldr	r2, [r7, #12]
 802289e:	801a      	strh	r2, [r3, #0]
  // Save len : it'll be the return value
  int retval = len;
 80228a0:	1cbb      	adds	r3, r7, #2
 80228a2:	881b      	ldrh	r3, [r3, #0]
 80228a4:	60bb      	str	r3, [r7, #8]
  // Read the data
  while (len)
 80228a6:	e01d      	b.n	80228e4 <vcp_recv+0x88>
  {
    len--;
 80228a8:	1cbb      	adds	r3, r7, #2
 80228aa:	881a      	ldrh	r2, [r3, #0]
 80228ac:	1cbb      	adds	r3, r7, #2
 80228ae:	3a01      	subs	r2, #1
 80228b0:	801a      	strh	r2, [r3, #0]
    *buf = vcp_rx_fifo.data[vcp_rx_fifo.rd];
 80228b2:	4b11      	ldr	r3, [pc, #68]	@ (80228f8 <vcp_recv+0x9c>)
 80228b4:	681a      	ldr	r2, [r3, #0]
 80228b6:	4b10      	ldr	r3, [pc, #64]	@ (80228f8 <vcp_recv+0x9c>)
 80228b8:	689b      	ldr	r3, [r3, #8]
 80228ba:	18d3      	adds	r3, r2, r3
 80228bc:	781a      	ldrb	r2, [r3, #0]
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	701a      	strb	r2, [r3, #0]
    buf++;
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	3301      	adds	r3, #1
 80228c6:	607b      	str	r3, [r7, #4]
    vcp_rx_fifo.rd++;    // Update read index
 80228c8:	4b0b      	ldr	r3, [pc, #44]	@ (80228f8 <vcp_recv+0x9c>)
 80228ca:	689b      	ldr	r3, [r3, #8]
 80228cc:	1c5a      	adds	r2, r3, #1
 80228ce:	4b0a      	ldr	r3, [pc, #40]	@ (80228f8 <vcp_recv+0x9c>)
 80228d0:	609a      	str	r2, [r3, #8]
    if (vcp_rx_fifo.rd == vcp_rx_fifo.lb)  // Check for wrap-around
 80228d2:	4b09      	ldr	r3, [pc, #36]	@ (80228f8 <vcp_recv+0x9c>)
 80228d4:	689a      	ldr	r2, [r3, #8]
 80228d6:	4b08      	ldr	r3, [pc, #32]	@ (80228f8 <vcp_recv+0x9c>)
 80228d8:	68db      	ldr	r3, [r3, #12]
 80228da:	429a      	cmp	r2, r3
 80228dc:	d102      	bne.n	80228e4 <vcp_recv+0x88>
      vcp_rx_fifo.rd = 0;      // Follow wrap-around
 80228de:	4b06      	ldr	r3, [pc, #24]	@ (80228f8 <vcp_recv+0x9c>)
 80228e0:	2200      	movs	r2, #0
 80228e2:	609a      	str	r2, [r3, #8]
  while (len)
 80228e4:	1cbb      	adds	r3, r7, #2
 80228e6:	881b      	ldrh	r3, [r3, #0]
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d1dd      	bne.n	80228a8 <vcp_recv+0x4c>
  }
  return retval;
 80228ec:	68bb      	ldr	r3, [r7, #8]
}
 80228ee:	0018      	movs	r0, r3
 80228f0:	46bd      	mov	sp, r7
 80228f2:	b004      	add	sp, #16
 80228f4:	bd80      	pop	{r7, pc}
 80228f6:	46c0      	nop			@ (mov r8, r8)
 80228f8:	20002dec 	.word	0x20002dec

080228fc <vcp_service>:

void vcp_service ()
{
 80228fc:	b580      	push	{r7, lr}
 80228fe:	b082      	sub	sp, #8
 8022900:	af00      	add	r7, sp, #0
USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8022902:	4a25      	ldr	r2, [pc, #148]	@ (8022998 <vcp_service+0x9c>)
 8022904:	23ae      	movs	r3, #174	@ 0xae
 8022906:	009b      	lsls	r3, r3, #2
 8022908:	58d3      	ldr	r3, [r2, r3]
 802290a:	607b      	str	r3, [r7, #4]

  // Test if the USB CDC is ready to transmit
  if (hcdc->TxState == 0)
 802290c:	687a      	ldr	r2, [r7, #4]
 802290e:	2385      	movs	r3, #133	@ 0x85
 8022910:	009b      	lsls	r3, r3, #2
 8022912:	58d3      	ldr	r3, [r2, r3]
 8022914:	2b00      	cmp	r3, #0
 8022916:	d13a      	bne.n	802298e <vcp_service+0x92>
  {
    // Update the FIFO to reflect the completion of the last transmission
    vcp_tx_fifo.rd = vcp_tx_fifo.lb;
 8022918:	4b20      	ldr	r3, [pc, #128]	@ (802299c <vcp_service+0xa0>)
 802291a:	68da      	ldr	r2, [r3, #12]
 802291c:	4b1f      	ldr	r3, [pc, #124]	@ (802299c <vcp_service+0xa0>)
 802291e:	609a      	str	r2, [r3, #8]

    // Compute how much data is in the FIFO
    int cap = vcp_tx_fifo.wr - vcp_tx_fifo.rd;
 8022920:	4b1e      	ldr	r3, [pc, #120]	@ (802299c <vcp_service+0xa0>)
 8022922:	685a      	ldr	r2, [r3, #4]
 8022924:	4b1d      	ldr	r3, [pc, #116]	@ (802299c <vcp_service+0xa0>)
 8022926:	689b      	ldr	r3, [r3, #8]
 8022928:	1ad3      	subs	r3, r2, r3
 802292a:	603b      	str	r3, [r7, #0]
    if (cap != 0)  // The FIFO is empty : return immediately
 802292c:	683b      	ldr	r3, [r7, #0]
 802292e:	2b00      	cmp	r3, #0
 8022930:	d02d      	beq.n	802298e <vcp_service+0x92>
    {
      if (cap < 0)  // The FIFO contents wrap-around
 8022932:	683b      	ldr	r3, [r7, #0]
 8022934:	2b00      	cmp	r3, #0
 8022936:	da17      	bge.n	8022968 <vcp_service+0x6c>
      {
        // Send only the tail of the FIFO
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &vcp_tx_fifo.data[vcp_tx_fifo.rd], APP_TX_DATA_SIZE - vcp_tx_fifo.rd);
 8022938:	4b18      	ldr	r3, [pc, #96]	@ (802299c <vcp_service+0xa0>)
 802293a:	681a      	ldr	r2, [r3, #0]
 802293c:	4b17      	ldr	r3, [pc, #92]	@ (802299c <vcp_service+0xa0>)
 802293e:	689b      	ldr	r3, [r3, #8]
 8022940:	18d1      	adds	r1, r2, r3
 8022942:	4b16      	ldr	r3, [pc, #88]	@ (802299c <vcp_service+0xa0>)
 8022944:	689b      	ldr	r3, [r3, #8]
 8022946:	b29b      	uxth	r3, r3
 8022948:	2280      	movs	r2, #128	@ 0x80
 802294a:	00d2      	lsls	r2, r2, #3
 802294c:	1ad3      	subs	r3, r2, r3
 802294e:	b29a      	uxth	r2, r3
 8022950:	4b11      	ldr	r3, [pc, #68]	@ (8022998 <vcp_service+0x9c>)
 8022952:	0018      	movs	r0, r3
 8022954:	f7fe faff 	bl	8020f56 <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8022958:	4b0f      	ldr	r3, [pc, #60]	@ (8022998 <vcp_service+0x9c>)
 802295a:	0018      	movs	r0, r3
 802295c:	f7fe fb2b 	bl	8020fb6 <USBD_CDC_TransmitPacket>
        vcp_tx_fifo.lb = 0;    // Lock the tail’s data
 8022960:	4b0e      	ldr	r3, [pc, #56]	@ (802299c <vcp_service+0xa0>)
 8022962:	2200      	movs	r2, #0
 8022964:	60da      	str	r2, [r3, #12]
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
        vcp_tx_fifo.lb = vcp_tx_fifo.wr; // lock the data
      }
    }
  }
}
 8022966:	e012      	b.n	802298e <vcp_service+0x92>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &vcp_tx_fifo.data[vcp_tx_fifo.rd], cap);
 8022968:	4b0c      	ldr	r3, [pc, #48]	@ (802299c <vcp_service+0xa0>)
 802296a:	681a      	ldr	r2, [r3, #0]
 802296c:	4b0b      	ldr	r3, [pc, #44]	@ (802299c <vcp_service+0xa0>)
 802296e:	689b      	ldr	r3, [r3, #8]
 8022970:	18d1      	adds	r1, r2, r3
 8022972:	683b      	ldr	r3, [r7, #0]
 8022974:	b29a      	uxth	r2, r3
 8022976:	4b08      	ldr	r3, [pc, #32]	@ (8022998 <vcp_service+0x9c>)
 8022978:	0018      	movs	r0, r3
 802297a:	f7fe faec 	bl	8020f56 <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802297e:	4b06      	ldr	r3, [pc, #24]	@ (8022998 <vcp_service+0x9c>)
 8022980:	0018      	movs	r0, r3
 8022982:	f7fe fb18 	bl	8020fb6 <USBD_CDC_TransmitPacket>
        vcp_tx_fifo.lb = vcp_tx_fifo.wr; // lock the data
 8022986:	4b05      	ldr	r3, [pc, #20]	@ (802299c <vcp_service+0xa0>)
 8022988:	685a      	ldr	r2, [r3, #4]
 802298a:	4b04      	ldr	r3, [pc, #16]	@ (802299c <vcp_service+0xa0>)
 802298c:	60da      	str	r2, [r3, #12]
}
 802298e:	46c0      	nop			@ (mov r8, r8)
 8022990:	46bd      	mov	sp, r7
 8022992:	b002      	add	sp, #8
 8022994:	bd80      	pop	{r7, pc}
 8022996:	46c0      	nop			@ (mov r8, r8)
 8022998:	20002258 	.word	0x20002258
 802299c:	20002ddc 	.word	0x20002ddc

080229a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80229a0:	b580      	push	{r7, lr}
 80229a2:	b082      	sub	sp, #8
 80229a4:	af00      	add	r7, sp, #0
 80229a6:	0002      	movs	r2, r0
 80229a8:	6039      	str	r1, [r7, #0]
 80229aa:	1dfb      	adds	r3, r7, #7
 80229ac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80229ae:	683b      	ldr	r3, [r7, #0]
 80229b0:	2212      	movs	r2, #18
 80229b2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80229b4:	4b02      	ldr	r3, [pc, #8]	@ (80229c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80229b6:	0018      	movs	r0, r3
 80229b8:	46bd      	mov	sp, r7
 80229ba:	b002      	add	sp, #8
 80229bc:	bd80      	pop	{r7, pc}
 80229be:	46c0      	nop			@ (mov r8, r8)
 80229c0:	20000238 	.word	0x20000238

080229c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80229c4:	b580      	push	{r7, lr}
 80229c6:	b082      	sub	sp, #8
 80229c8:	af00      	add	r7, sp, #0
 80229ca:	0002      	movs	r2, r0
 80229cc:	6039      	str	r1, [r7, #0]
 80229ce:	1dfb      	adds	r3, r7, #7
 80229d0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80229d2:	683b      	ldr	r3, [r7, #0]
 80229d4:	2204      	movs	r2, #4
 80229d6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80229d8:	4b02      	ldr	r3, [pc, #8]	@ (80229e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80229da:	0018      	movs	r0, r3
 80229dc:	46bd      	mov	sp, r7
 80229de:	b002      	add	sp, #8
 80229e0:	bd80      	pop	{r7, pc}
 80229e2:	46c0      	nop			@ (mov r8, r8)
 80229e4:	2000024c 	.word	0x2000024c

080229e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80229e8:	b580      	push	{r7, lr}
 80229ea:	b082      	sub	sp, #8
 80229ec:	af00      	add	r7, sp, #0
 80229ee:	0002      	movs	r2, r0
 80229f0:	6039      	str	r1, [r7, #0]
 80229f2:	1dfb      	adds	r3, r7, #7
 80229f4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80229f6:	1dfb      	adds	r3, r7, #7
 80229f8:	781b      	ldrb	r3, [r3, #0]
 80229fa:	2b00      	cmp	r3, #0
 80229fc:	d106      	bne.n	8022a0c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80229fe:	683a      	ldr	r2, [r7, #0]
 8022a00:	4908      	ldr	r1, [pc, #32]	@ (8022a24 <USBD_FS_ProductStrDescriptor+0x3c>)
 8022a02:	4b09      	ldr	r3, [pc, #36]	@ (8022a28 <USBD_FS_ProductStrDescriptor+0x40>)
 8022a04:	0018      	movs	r0, r3
 8022a06:	f7ff fc49 	bl	802229c <USBD_GetString>
 8022a0a:	e005      	b.n	8022a18 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022a0c:	683a      	ldr	r2, [r7, #0]
 8022a0e:	4905      	ldr	r1, [pc, #20]	@ (8022a24 <USBD_FS_ProductStrDescriptor+0x3c>)
 8022a10:	4b05      	ldr	r3, [pc, #20]	@ (8022a28 <USBD_FS_ProductStrDescriptor+0x40>)
 8022a12:	0018      	movs	r0, r3
 8022a14:	f7ff fc42 	bl	802229c <USBD_GetString>
  }
  return USBD_StrDesc;
 8022a18:	4b02      	ldr	r3, [pc, #8]	@ (8022a24 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8022a1a:	0018      	movs	r0, r3
 8022a1c:	46bd      	mov	sp, r7
 8022a1e:	b002      	add	sp, #8
 8022a20:	bd80      	pop	{r7, pc}
 8022a22:	46c0      	nop			@ (mov r8, r8)
 8022a24:	20002dfc 	.word	0x20002dfc
 8022a28:	0802dd90 	.word	0x0802dd90

08022a2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022a2c:	b580      	push	{r7, lr}
 8022a2e:	b082      	sub	sp, #8
 8022a30:	af00      	add	r7, sp, #0
 8022a32:	0002      	movs	r2, r0
 8022a34:	6039      	str	r1, [r7, #0]
 8022a36:	1dfb      	adds	r3, r7, #7
 8022a38:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022a3a:	683a      	ldr	r2, [r7, #0]
 8022a3c:	4904      	ldr	r1, [pc, #16]	@ (8022a50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022a3e:	4b05      	ldr	r3, [pc, #20]	@ (8022a54 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8022a40:	0018      	movs	r0, r3
 8022a42:	f7ff fc2b 	bl	802229c <USBD_GetString>
  return USBD_StrDesc;
 8022a46:	4b02      	ldr	r3, [pc, #8]	@ (8022a50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8022a48:	0018      	movs	r0, r3
 8022a4a:	46bd      	mov	sp, r7
 8022a4c:	b002      	add	sp, #8
 8022a4e:	bd80      	pop	{r7, pc}
 8022a50:	20002dfc 	.word	0x20002dfc
 8022a54:	0802dda8 	.word	0x0802dda8

08022a58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022a58:	b580      	push	{r7, lr}
 8022a5a:	b082      	sub	sp, #8
 8022a5c:	af00      	add	r7, sp, #0
 8022a5e:	0002      	movs	r2, r0
 8022a60:	6039      	str	r1, [r7, #0]
 8022a62:	1dfb      	adds	r3, r7, #7
 8022a64:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022a66:	683b      	ldr	r3, [r7, #0]
 8022a68:	221a      	movs	r2, #26
 8022a6a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022a6c:	f000 f84c 	bl	8022b08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022a70:	4b02      	ldr	r3, [pc, #8]	@ (8022a7c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8022a72:	0018      	movs	r0, r3
 8022a74:	46bd      	mov	sp, r7
 8022a76:	b002      	add	sp, #8
 8022a78:	bd80      	pop	{r7, pc}
 8022a7a:	46c0      	nop			@ (mov r8, r8)
 8022a7c:	20000250 	.word	0x20000250

08022a80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022a80:	b580      	push	{r7, lr}
 8022a82:	b082      	sub	sp, #8
 8022a84:	af00      	add	r7, sp, #0
 8022a86:	0002      	movs	r2, r0
 8022a88:	6039      	str	r1, [r7, #0]
 8022a8a:	1dfb      	adds	r3, r7, #7
 8022a8c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8022a8e:	1dfb      	adds	r3, r7, #7
 8022a90:	781b      	ldrb	r3, [r3, #0]
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d106      	bne.n	8022aa4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022a96:	683a      	ldr	r2, [r7, #0]
 8022a98:	4908      	ldr	r1, [pc, #32]	@ (8022abc <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022a9a:	4b09      	ldr	r3, [pc, #36]	@ (8022ac0 <USBD_FS_ConfigStrDescriptor+0x40>)
 8022a9c:	0018      	movs	r0, r3
 8022a9e:	f7ff fbfd 	bl	802229c <USBD_GetString>
 8022aa2:	e005      	b.n	8022ab0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022aa4:	683a      	ldr	r2, [r7, #0]
 8022aa6:	4905      	ldr	r1, [pc, #20]	@ (8022abc <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022aa8:	4b05      	ldr	r3, [pc, #20]	@ (8022ac0 <USBD_FS_ConfigStrDescriptor+0x40>)
 8022aaa:	0018      	movs	r0, r3
 8022aac:	f7ff fbf6 	bl	802229c <USBD_GetString>
  }
  return USBD_StrDesc;
 8022ab0:	4b02      	ldr	r3, [pc, #8]	@ (8022abc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8022ab2:	0018      	movs	r0, r3
 8022ab4:	46bd      	mov	sp, r7
 8022ab6:	b002      	add	sp, #8
 8022ab8:	bd80      	pop	{r7, pc}
 8022aba:	46c0      	nop			@ (mov r8, r8)
 8022abc:	20002dfc 	.word	0x20002dfc
 8022ac0:	0802ddbc 	.word	0x0802ddbc

08022ac4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022ac4:	b580      	push	{r7, lr}
 8022ac6:	b082      	sub	sp, #8
 8022ac8:	af00      	add	r7, sp, #0
 8022aca:	0002      	movs	r2, r0
 8022acc:	6039      	str	r1, [r7, #0]
 8022ace:	1dfb      	adds	r3, r7, #7
 8022ad0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8022ad2:	1dfb      	adds	r3, r7, #7
 8022ad4:	781b      	ldrb	r3, [r3, #0]
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	d106      	bne.n	8022ae8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022ada:	683a      	ldr	r2, [r7, #0]
 8022adc:	4908      	ldr	r1, [pc, #32]	@ (8022b00 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022ade:	4b09      	ldr	r3, [pc, #36]	@ (8022b04 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022ae0:	0018      	movs	r0, r3
 8022ae2:	f7ff fbdb 	bl	802229c <USBD_GetString>
 8022ae6:	e005      	b.n	8022af4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022ae8:	683a      	ldr	r2, [r7, #0]
 8022aea:	4905      	ldr	r1, [pc, #20]	@ (8022b00 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022aec:	4b05      	ldr	r3, [pc, #20]	@ (8022b04 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022aee:	0018      	movs	r0, r3
 8022af0:	f7ff fbd4 	bl	802229c <USBD_GetString>
  }
  return USBD_StrDesc;
 8022af4:	4b02      	ldr	r3, [pc, #8]	@ (8022b00 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8022af6:	0018      	movs	r0, r3
 8022af8:	46bd      	mov	sp, r7
 8022afa:	b002      	add	sp, #8
 8022afc:	bd80      	pop	{r7, pc}
 8022afe:	46c0      	nop			@ (mov r8, r8)
 8022b00:	20002dfc 	.word	0x20002dfc
 8022b04:	0802ddc8 	.word	0x0802ddc8

08022b08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022b08:	b580      	push	{r7, lr}
 8022b0a:	b084      	sub	sp, #16
 8022b0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8022b0e:	4b10      	ldr	r3, [pc, #64]	@ (8022b50 <Get_SerialNum+0x48>)
 8022b10:	681b      	ldr	r3, [r3, #0]
 8022b12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022b14:	4b0f      	ldr	r3, [pc, #60]	@ (8022b54 <Get_SerialNum+0x4c>)
 8022b16:	681b      	ldr	r3, [r3, #0]
 8022b18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8022b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8022b58 <Get_SerialNum+0x50>)
 8022b1c:	681b      	ldr	r3, [r3, #0]
 8022b1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022b20:	68fa      	ldr	r2, [r7, #12]
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	18d3      	adds	r3, r2, r3
 8022b26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022b28:	68fb      	ldr	r3, [r7, #12]
 8022b2a:	2b00      	cmp	r3, #0
 8022b2c:	d00b      	beq.n	8022b46 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8022b2e:	490b      	ldr	r1, [pc, #44]	@ (8022b5c <Get_SerialNum+0x54>)
 8022b30:	68fb      	ldr	r3, [r7, #12]
 8022b32:	2208      	movs	r2, #8
 8022b34:	0018      	movs	r0, r3
 8022b36:	f000 f815 	bl	8022b64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022b3a:	4909      	ldr	r1, [pc, #36]	@ (8022b60 <Get_SerialNum+0x58>)
 8022b3c:	68bb      	ldr	r3, [r7, #8]
 8022b3e:	2204      	movs	r2, #4
 8022b40:	0018      	movs	r0, r3
 8022b42:	f000 f80f 	bl	8022b64 <IntToUnicode>
  }
}
 8022b46:	46c0      	nop			@ (mov r8, r8)
 8022b48:	46bd      	mov	sp, r7
 8022b4a:	b004      	add	sp, #16
 8022b4c:	bd80      	pop	{r7, pc}
 8022b4e:	46c0      	nop			@ (mov r8, r8)
 8022b50:	1ff80050 	.word	0x1ff80050
 8022b54:	1ff80054 	.word	0x1ff80054
 8022b58:	1ff80058 	.word	0x1ff80058
 8022b5c:	20000252 	.word	0x20000252
 8022b60:	20000262 	.word	0x20000262

08022b64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022b64:	b580      	push	{r7, lr}
 8022b66:	b086      	sub	sp, #24
 8022b68:	af00      	add	r7, sp, #0
 8022b6a:	60f8      	str	r0, [r7, #12]
 8022b6c:	60b9      	str	r1, [r7, #8]
 8022b6e:	1dfb      	adds	r3, r7, #7
 8022b70:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8022b72:	2117      	movs	r1, #23
 8022b74:	187b      	adds	r3, r7, r1
 8022b76:	2200      	movs	r2, #0
 8022b78:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8022b7a:	187b      	adds	r3, r7, r1
 8022b7c:	2200      	movs	r2, #0
 8022b7e:	701a      	strb	r2, [r3, #0]
 8022b80:	e02f      	b.n	8022be2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8022b82:	68fb      	ldr	r3, [r7, #12]
 8022b84:	0f1b      	lsrs	r3, r3, #28
 8022b86:	2b09      	cmp	r3, #9
 8022b88:	d80d      	bhi.n	8022ba6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022b8a:	68fb      	ldr	r3, [r7, #12]
 8022b8c:	0f1b      	lsrs	r3, r3, #28
 8022b8e:	b2da      	uxtb	r2, r3
 8022b90:	2317      	movs	r3, #23
 8022b92:	18fb      	adds	r3, r7, r3
 8022b94:	781b      	ldrb	r3, [r3, #0]
 8022b96:	005b      	lsls	r3, r3, #1
 8022b98:	0019      	movs	r1, r3
 8022b9a:	68bb      	ldr	r3, [r7, #8]
 8022b9c:	185b      	adds	r3, r3, r1
 8022b9e:	3230      	adds	r2, #48	@ 0x30
 8022ba0:	b2d2      	uxtb	r2, r2
 8022ba2:	701a      	strb	r2, [r3, #0]
 8022ba4:	e00c      	b.n	8022bc0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022ba6:	68fb      	ldr	r3, [r7, #12]
 8022ba8:	0f1b      	lsrs	r3, r3, #28
 8022baa:	b2da      	uxtb	r2, r3
 8022bac:	2317      	movs	r3, #23
 8022bae:	18fb      	adds	r3, r7, r3
 8022bb0:	781b      	ldrb	r3, [r3, #0]
 8022bb2:	005b      	lsls	r3, r3, #1
 8022bb4:	0019      	movs	r1, r3
 8022bb6:	68bb      	ldr	r3, [r7, #8]
 8022bb8:	185b      	adds	r3, r3, r1
 8022bba:	3237      	adds	r2, #55	@ 0x37
 8022bbc:	b2d2      	uxtb	r2, r2
 8022bbe:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022bc0:	68fb      	ldr	r3, [r7, #12]
 8022bc2:	011b      	lsls	r3, r3, #4
 8022bc4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8022bc6:	2117      	movs	r1, #23
 8022bc8:	187b      	adds	r3, r7, r1
 8022bca:	781b      	ldrb	r3, [r3, #0]
 8022bcc:	005b      	lsls	r3, r3, #1
 8022bce:	3301      	adds	r3, #1
 8022bd0:	68ba      	ldr	r2, [r7, #8]
 8022bd2:	18d3      	adds	r3, r2, r3
 8022bd4:	2200      	movs	r2, #0
 8022bd6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022bd8:	187b      	adds	r3, r7, r1
 8022bda:	781a      	ldrb	r2, [r3, #0]
 8022bdc:	187b      	adds	r3, r7, r1
 8022bde:	3201      	adds	r2, #1
 8022be0:	701a      	strb	r2, [r3, #0]
 8022be2:	2317      	movs	r3, #23
 8022be4:	18fa      	adds	r2, r7, r3
 8022be6:	1dfb      	adds	r3, r7, #7
 8022be8:	7812      	ldrb	r2, [r2, #0]
 8022bea:	781b      	ldrb	r3, [r3, #0]
 8022bec:	429a      	cmp	r2, r3
 8022bee:	d3c8      	bcc.n	8022b82 <IntToUnicode+0x1e>
  }
}
 8022bf0:	46c0      	nop			@ (mov r8, r8)
 8022bf2:	46c0      	nop			@ (mov r8, r8)
 8022bf4:	46bd      	mov	sp, r7
 8022bf6:	b006      	add	sp, #24
 8022bf8:	bd80      	pop	{r7, pc}
	...

08022bfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022bfc:	b580      	push	{r7, lr}
 8022bfe:	b082      	sub	sp, #8
 8022c00:	af00      	add	r7, sp, #0
 8022c02:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8022c04:	687b      	ldr	r3, [r7, #4]
 8022c06:	681b      	ldr	r3, [r3, #0]
 8022c08:	4a0a      	ldr	r2, [pc, #40]	@ (8022c34 <HAL_PCD_MspInit+0x38>)
 8022c0a:	4293      	cmp	r3, r2
 8022c0c:	d10e      	bne.n	8022c2c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8022c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8022c38 <HAL_PCD_MspInit+0x3c>)
 8022c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8022c12:	4b09      	ldr	r3, [pc, #36]	@ (8022c38 <HAL_PCD_MspInit+0x3c>)
 8022c14:	2180      	movs	r1, #128	@ 0x80
 8022c16:	0409      	lsls	r1, r1, #16
 8022c18:	430a      	orrs	r2, r1
 8022c1a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8022c1c:	2200      	movs	r2, #0
 8022c1e:	2100      	movs	r1, #0
 8022c20:	201f      	movs	r0, #31
 8022c22:	f7f1 fe4b 	bl	80148bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8022c26:	201f      	movs	r0, #31
 8022c28:	f7f1 fe5d 	bl	80148e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8022c2c:	46c0      	nop			@ (mov r8, r8)
 8022c2e:	46bd      	mov	sp, r7
 8022c30:	b002      	add	sp, #8
 8022c32:	bd80      	pop	{r7, pc}
 8022c34:	40005c00 	.word	0x40005c00
 8022c38:	40021000 	.word	0x40021000

08022c3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022c3c:	b580      	push	{r7, lr}
 8022c3e:	b082      	sub	sp, #8
 8022c40:	af00      	add	r7, sp, #0
 8022c42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022c44:	687a      	ldr	r2, [r7, #4]
 8022c46:	23bc      	movs	r3, #188	@ 0xbc
 8022c48:	009b      	lsls	r3, r3, #2
 8022c4a:	58d2      	ldr	r2, [r2, r3]
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	21ac      	movs	r1, #172	@ 0xac
 8022c50:	0089      	lsls	r1, r1, #2
 8022c52:	468c      	mov	ip, r1
 8022c54:	4463      	add	r3, ip
 8022c56:	0019      	movs	r1, r3
 8022c58:	0010      	movs	r0, r2
 8022c5a:	f7fe fab5 	bl	80211c8 <USBD_LL_SetupStage>
}
 8022c5e:	46c0      	nop			@ (mov r8, r8)
 8022c60:	46bd      	mov	sp, r7
 8022c62:	b002      	add	sp, #8
 8022c64:	bd80      	pop	{r7, pc}

08022c66 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022c66:	b590      	push	{r4, r7, lr}
 8022c68:	b083      	sub	sp, #12
 8022c6a:	af00      	add	r7, sp, #0
 8022c6c:	6078      	str	r0, [r7, #4]
 8022c6e:	000a      	movs	r2, r1
 8022c70:	1cfb      	adds	r3, r7, #3
 8022c72:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022c74:	687a      	ldr	r2, [r7, #4]
 8022c76:	23bc      	movs	r3, #188	@ 0xbc
 8022c78:	009b      	lsls	r3, r3, #2
 8022c7a:	58d4      	ldr	r4, [r2, r3]
 8022c7c:	1cfb      	adds	r3, r7, #3
 8022c7e:	781a      	ldrb	r2, [r3, #0]
 8022c80:	6878      	ldr	r0, [r7, #4]
 8022c82:	23be      	movs	r3, #190	@ 0xbe
 8022c84:	0059      	lsls	r1, r3, #1
 8022c86:	0013      	movs	r3, r2
 8022c88:	009b      	lsls	r3, r3, #2
 8022c8a:	189b      	adds	r3, r3, r2
 8022c8c:	00db      	lsls	r3, r3, #3
 8022c8e:	18c3      	adds	r3, r0, r3
 8022c90:	185b      	adds	r3, r3, r1
 8022c92:	681a      	ldr	r2, [r3, #0]
 8022c94:	1cfb      	adds	r3, r7, #3
 8022c96:	781b      	ldrb	r3, [r3, #0]
 8022c98:	0019      	movs	r1, r3
 8022c9a:	0020      	movs	r0, r4
 8022c9c:	f7fe faf2 	bl	8021284 <USBD_LL_DataOutStage>
}
 8022ca0:	46c0      	nop			@ (mov r8, r8)
 8022ca2:	46bd      	mov	sp, r7
 8022ca4:	b003      	add	sp, #12
 8022ca6:	bd90      	pop	{r4, r7, pc}

08022ca8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022ca8:	b580      	push	{r7, lr}
 8022caa:	b082      	sub	sp, #8
 8022cac:	af00      	add	r7, sp, #0
 8022cae:	6078      	str	r0, [r7, #4]
 8022cb0:	000a      	movs	r2, r1
 8022cb2:	1cfb      	adds	r3, r7, #3
 8022cb4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8022cb6:	687a      	ldr	r2, [r7, #4]
 8022cb8:	23bc      	movs	r3, #188	@ 0xbc
 8022cba:	009b      	lsls	r3, r3, #2
 8022cbc:	58d0      	ldr	r0, [r2, r3]
 8022cbe:	1cfb      	adds	r3, r7, #3
 8022cc0:	781a      	ldrb	r2, [r3, #0]
 8022cc2:	6879      	ldr	r1, [r7, #4]
 8022cc4:	0013      	movs	r3, r2
 8022cc6:	009b      	lsls	r3, r3, #2
 8022cc8:	189b      	adds	r3, r3, r2
 8022cca:	00db      	lsls	r3, r3, #3
 8022ccc:	18cb      	adds	r3, r1, r3
 8022cce:	333c      	adds	r3, #60	@ 0x3c
 8022cd0:	681a      	ldr	r2, [r3, #0]
 8022cd2:	1cfb      	adds	r3, r7, #3
 8022cd4:	781b      	ldrb	r3, [r3, #0]
 8022cd6:	0019      	movs	r1, r3
 8022cd8:	f7fe fb56 	bl	8021388 <USBD_LL_DataInStage>
}
 8022cdc:	46c0      	nop			@ (mov r8, r8)
 8022cde:	46bd      	mov	sp, r7
 8022ce0:	b002      	add	sp, #8
 8022ce2:	bd80      	pop	{r7, pc}

08022ce4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022ce4:	b580      	push	{r7, lr}
 8022ce6:	b082      	sub	sp, #8
 8022ce8:	af00      	add	r7, sp, #0
 8022cea:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022cec:	687a      	ldr	r2, [r7, #4]
 8022cee:	23bc      	movs	r3, #188	@ 0xbc
 8022cf0:	009b      	lsls	r3, r3, #2
 8022cf2:	58d3      	ldr	r3, [r2, r3]
 8022cf4:	0018      	movs	r0, r3
 8022cf6:	f7fe fc8d 	bl	8021614 <USBD_LL_SOF>
}
 8022cfa:	46c0      	nop			@ (mov r8, r8)
 8022cfc:	46bd      	mov	sp, r7
 8022cfe:	b002      	add	sp, #8
 8022d00:	bd80      	pop	{r7, pc}

08022d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022d02:	b580      	push	{r7, lr}
 8022d04:	b084      	sub	sp, #16
 8022d06:	af00      	add	r7, sp, #0
 8022d08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022d0a:	230f      	movs	r3, #15
 8022d0c:	18fb      	adds	r3, r7, r3
 8022d0e:	2201      	movs	r2, #1
 8022d10:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	689b      	ldr	r3, [r3, #8]
 8022d16:	2b02      	cmp	r3, #2
 8022d18:	d001      	beq.n	8022d1e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8022d1a:	f7e9 ff15 	bl	800cb48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022d1e:	687a      	ldr	r2, [r7, #4]
 8022d20:	23bc      	movs	r3, #188	@ 0xbc
 8022d22:	009b      	lsls	r3, r3, #2
 8022d24:	58d2      	ldr	r2, [r2, r3]
 8022d26:	230f      	movs	r3, #15
 8022d28:	18fb      	adds	r3, r7, r3
 8022d2a:	781b      	ldrb	r3, [r3, #0]
 8022d2c:	0019      	movs	r1, r3
 8022d2e:	0010      	movs	r0, r2
 8022d30:	f7fe fc2f 	bl	8021592 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022d34:	687a      	ldr	r2, [r7, #4]
 8022d36:	23bc      	movs	r3, #188	@ 0xbc
 8022d38:	009b      	lsls	r3, r3, #2
 8022d3a:	58d3      	ldr	r3, [r2, r3]
 8022d3c:	0018      	movs	r0, r3
 8022d3e:	f7fe fbe0 	bl	8021502 <USBD_LL_Reset>
}
 8022d42:	46c0      	nop			@ (mov r8, r8)
 8022d44:	46bd      	mov	sp, r7
 8022d46:	b004      	add	sp, #16
 8022d48:	bd80      	pop	{r7, pc}
	...

08022d4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022d4c:	b580      	push	{r7, lr}
 8022d4e:	b082      	sub	sp, #8
 8022d50:	af00      	add	r7, sp, #0
 8022d52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022d54:	687a      	ldr	r2, [r7, #4]
 8022d56:	23bc      	movs	r3, #188	@ 0xbc
 8022d58:	009b      	lsls	r3, r3, #2
 8022d5a:	58d3      	ldr	r3, [r2, r3]
 8022d5c:	0018      	movs	r0, r3
 8022d5e:	f7fe fc29 	bl	80215b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	699b      	ldr	r3, [r3, #24]
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	d005      	beq.n	8022d76 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022d6a:	4b05      	ldr	r3, [pc, #20]	@ (8022d80 <HAL_PCD_SuspendCallback+0x34>)
 8022d6c:	691a      	ldr	r2, [r3, #16]
 8022d6e:	4b04      	ldr	r3, [pc, #16]	@ (8022d80 <HAL_PCD_SuspendCallback+0x34>)
 8022d70:	2106      	movs	r1, #6
 8022d72:	430a      	orrs	r2, r1
 8022d74:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8022d76:	46c0      	nop			@ (mov r8, r8)
 8022d78:	46bd      	mov	sp, r7
 8022d7a:	b002      	add	sp, #8
 8022d7c:	bd80      	pop	{r7, pc}
 8022d7e:	46c0      	nop			@ (mov r8, r8)
 8022d80:	e000ed00 	.word	0xe000ed00

08022d84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022d84:	b580      	push	{r7, lr}
 8022d86:	b082      	sub	sp, #8
 8022d88:	af00      	add	r7, sp, #0
 8022d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	699b      	ldr	r3, [r3, #24]
 8022d90:	2b00      	cmp	r3, #0
 8022d92:	d007      	beq.n	8022da4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022d94:	4b09      	ldr	r3, [pc, #36]	@ (8022dbc <HAL_PCD_ResumeCallback+0x38>)
 8022d96:	691a      	ldr	r2, [r3, #16]
 8022d98:	4b08      	ldr	r3, [pc, #32]	@ (8022dbc <HAL_PCD_ResumeCallback+0x38>)
 8022d9a:	2106      	movs	r1, #6
 8022d9c:	438a      	bics	r2, r1
 8022d9e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8022da0:	f000 fa44 	bl	802322c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022da4:	687a      	ldr	r2, [r7, #4]
 8022da6:	23bc      	movs	r3, #188	@ 0xbc
 8022da8:	009b      	lsls	r3, r3, #2
 8022daa:	58d3      	ldr	r3, [r2, r3]
 8022dac:	0018      	movs	r0, r3
 8022dae:	f7fe fc19 	bl	80215e4 <USBD_LL_Resume>
}
 8022db2:	46c0      	nop			@ (mov r8, r8)
 8022db4:	46bd      	mov	sp, r7
 8022db6:	b002      	add	sp, #8
 8022db8:	bd80      	pop	{r7, pc}
 8022dba:	46c0      	nop			@ (mov r8, r8)
 8022dbc:	e000ed00 	.word	0xe000ed00

08022dc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022dc0:	b580      	push	{r7, lr}
 8022dc2:	b082      	sub	sp, #8
 8022dc4:	af00      	add	r7, sp, #0
 8022dc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8022dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022dca:	23bc      	movs	r3, #188	@ 0xbc
 8022dcc:	009b      	lsls	r3, r3, #2
 8022dce:	6879      	ldr	r1, [r7, #4]
 8022dd0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8022dd2:	687a      	ldr	r2, [r7, #4]
 8022dd4:	23b0      	movs	r3, #176	@ 0xb0
 8022dd6:	009b      	lsls	r3, r3, #2
 8022dd8:	4929      	ldr	r1, [pc, #164]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022dda:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8022ddc:	4b28      	ldr	r3, [pc, #160]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022dde:	4a29      	ldr	r2, [pc, #164]	@ (8022e84 <USBD_LL_Init+0xc4>)
 8022de0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8022de2:	4b27      	ldr	r3, [pc, #156]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022de4:	2208      	movs	r2, #8
 8022de6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8022de8:	4b25      	ldr	r3, [pc, #148]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022dea:	2202      	movs	r2, #2
 8022dec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022dee:	4b24      	ldr	r3, [pc, #144]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022df0:	2202      	movs	r2, #2
 8022df2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8022df4:	4b22      	ldr	r3, [pc, #136]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022df6:	2200      	movs	r2, #0
 8022df8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8022dfa:	4b21      	ldr	r3, [pc, #132]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022dfc:	2200      	movs	r2, #0
 8022dfe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8022e00:	4b1f      	ldr	r3, [pc, #124]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022e02:	2200      	movs	r2, #0
 8022e04:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8022e06:	4b1e      	ldr	r3, [pc, #120]	@ (8022e80 <USBD_LL_Init+0xc0>)
 8022e08:	0018      	movs	r0, r3
 8022e0a:	f7f5 fe0d 	bl	8018a28 <HAL_PCD_Init>
 8022e0e:	1e03      	subs	r3, r0, #0
 8022e10:	d001      	beq.n	8022e16 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8022e12:	f7e9 fe99 	bl	800cb48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8022e16:	687a      	ldr	r2, [r7, #4]
 8022e18:	23b0      	movs	r3, #176	@ 0xb0
 8022e1a:	009b      	lsls	r3, r3, #2
 8022e1c:	58d0      	ldr	r0, [r2, r3]
 8022e1e:	2318      	movs	r3, #24
 8022e20:	2200      	movs	r2, #0
 8022e22:	2100      	movs	r1, #0
 8022e24:	f7f7 fbce 	bl	801a5c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8022e28:	687a      	ldr	r2, [r7, #4]
 8022e2a:	23b0      	movs	r3, #176	@ 0xb0
 8022e2c:	009b      	lsls	r3, r3, #2
 8022e2e:	58d0      	ldr	r0, [r2, r3]
 8022e30:	2358      	movs	r3, #88	@ 0x58
 8022e32:	2200      	movs	r2, #0
 8022e34:	2180      	movs	r1, #128	@ 0x80
 8022e36:	f7f7 fbc5 	bl	801a5c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8022e3a:	687a      	ldr	r2, [r7, #4]
 8022e3c:	23b0      	movs	r3, #176	@ 0xb0
 8022e3e:	009b      	lsls	r3, r3, #2
 8022e40:	58d0      	ldr	r0, [r2, r3]
 8022e42:	23c0      	movs	r3, #192	@ 0xc0
 8022e44:	2200      	movs	r2, #0
 8022e46:	2181      	movs	r1, #129	@ 0x81
 8022e48:	f7f7 fbbc 	bl	801a5c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8022e4c:	687a      	ldr	r2, [r7, #4]
 8022e4e:	23b0      	movs	r3, #176	@ 0xb0
 8022e50:	009b      	lsls	r3, r3, #2
 8022e52:	58d0      	ldr	r0, [r2, r3]
 8022e54:	2388      	movs	r3, #136	@ 0x88
 8022e56:	005b      	lsls	r3, r3, #1
 8022e58:	2200      	movs	r2, #0
 8022e5a:	2101      	movs	r1, #1
 8022e5c:	f7f7 fbb2 	bl	801a5c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8022e60:	687a      	ldr	r2, [r7, #4]
 8022e62:	23b0      	movs	r3, #176	@ 0xb0
 8022e64:	009b      	lsls	r3, r3, #2
 8022e66:	58d0      	ldr	r0, [r2, r3]
 8022e68:	2380      	movs	r3, #128	@ 0x80
 8022e6a:	005b      	lsls	r3, r3, #1
 8022e6c:	2200      	movs	r2, #0
 8022e6e:	2182      	movs	r1, #130	@ 0x82
 8022e70:	f7f7 fba8 	bl	801a5c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8022e74:	2300      	movs	r3, #0
}
 8022e76:	0018      	movs	r0, r3
 8022e78:	46bd      	mov	sp, r7
 8022e7a:	b002      	add	sp, #8
 8022e7c:	bd80      	pop	{r7, pc}
 8022e7e:	46c0      	nop			@ (mov r8, r8)
 8022e80:	20002ffc 	.word	0x20002ffc
 8022e84:	40005c00 	.word	0x40005c00

08022e88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e8a:	b085      	sub	sp, #20
 8022e8c:	af00      	add	r7, sp, #0
 8022e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022e90:	210f      	movs	r1, #15
 8022e92:	187b      	adds	r3, r7, r1
 8022e94:	2200      	movs	r2, #0
 8022e96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022e98:	260e      	movs	r6, #14
 8022e9a:	19bb      	adds	r3, r7, r6
 8022e9c:	2200      	movs	r2, #0
 8022e9e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022ea0:	687a      	ldr	r2, [r7, #4]
 8022ea2:	23b0      	movs	r3, #176	@ 0xb0
 8022ea4:	009b      	lsls	r3, r3, #2
 8022ea6:	58d3      	ldr	r3, [r2, r3]
 8022ea8:	000d      	movs	r5, r1
 8022eaa:	187c      	adds	r4, r7, r1
 8022eac:	0018      	movs	r0, r3
 8022eae:	f7f5 febb 	bl	8018c28 <HAL_PCD_Start>
 8022eb2:	0003      	movs	r3, r0
 8022eb4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022eb6:	19bc      	adds	r4, r7, r6
 8022eb8:	197b      	adds	r3, r7, r5
 8022eba:	781b      	ldrb	r3, [r3, #0]
 8022ebc:	0018      	movs	r0, r3
 8022ebe:	f000 f9bc 	bl	802323a <USBD_Get_USB_Status>
 8022ec2:	0003      	movs	r3, r0
 8022ec4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022ec6:	19bb      	adds	r3, r7, r6
 8022ec8:	781b      	ldrb	r3, [r3, #0]
}
 8022eca:	0018      	movs	r0, r3
 8022ecc:	46bd      	mov	sp, r7
 8022ece:	b005      	add	sp, #20
 8022ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022ed2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ed4:	b085      	sub	sp, #20
 8022ed6:	af00      	add	r7, sp, #0
 8022ed8:	6078      	str	r0, [r7, #4]
 8022eda:	000c      	movs	r4, r1
 8022edc:	0010      	movs	r0, r2
 8022ede:	0019      	movs	r1, r3
 8022ee0:	1cfb      	adds	r3, r7, #3
 8022ee2:	1c22      	adds	r2, r4, #0
 8022ee4:	701a      	strb	r2, [r3, #0]
 8022ee6:	1cbb      	adds	r3, r7, #2
 8022ee8:	1c02      	adds	r2, r0, #0
 8022eea:	701a      	strb	r2, [r3, #0]
 8022eec:	003b      	movs	r3, r7
 8022eee:	1c0a      	adds	r2, r1, #0
 8022ef0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022ef2:	260f      	movs	r6, #15
 8022ef4:	19bb      	adds	r3, r7, r6
 8022ef6:	2200      	movs	r2, #0
 8022ef8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022efa:	250e      	movs	r5, #14
 8022efc:	197b      	adds	r3, r7, r5
 8022efe:	2200      	movs	r2, #0
 8022f00:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022f02:	687a      	ldr	r2, [r7, #4]
 8022f04:	23b0      	movs	r3, #176	@ 0xb0
 8022f06:	009b      	lsls	r3, r3, #2
 8022f08:	58d0      	ldr	r0, [r2, r3]
 8022f0a:	19bc      	adds	r4, r7, r6
 8022f0c:	1cbb      	adds	r3, r7, #2
 8022f0e:	781d      	ldrb	r5, [r3, #0]
 8022f10:	003b      	movs	r3, r7
 8022f12:	881a      	ldrh	r2, [r3, #0]
 8022f14:	1cfb      	adds	r3, r7, #3
 8022f16:	7819      	ldrb	r1, [r3, #0]
 8022f18:	002b      	movs	r3, r5
 8022f1a:	f7f6 f81a 	bl	8018f52 <HAL_PCD_EP_Open>
 8022f1e:	0003      	movs	r3, r0
 8022f20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022f22:	250e      	movs	r5, #14
 8022f24:	197c      	adds	r4, r7, r5
 8022f26:	19bb      	adds	r3, r7, r6
 8022f28:	781b      	ldrb	r3, [r3, #0]
 8022f2a:	0018      	movs	r0, r3
 8022f2c:	f000 f985 	bl	802323a <USBD_Get_USB_Status>
 8022f30:	0003      	movs	r3, r0
 8022f32:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022f34:	197b      	adds	r3, r7, r5
 8022f36:	781b      	ldrb	r3, [r3, #0]
}
 8022f38:	0018      	movs	r0, r3
 8022f3a:	46bd      	mov	sp, r7
 8022f3c:	b005      	add	sp, #20
 8022f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022f40 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f42:	b085      	sub	sp, #20
 8022f44:	af00      	add	r7, sp, #0
 8022f46:	6078      	str	r0, [r7, #4]
 8022f48:	000a      	movs	r2, r1
 8022f4a:	1cfb      	adds	r3, r7, #3
 8022f4c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022f4e:	210f      	movs	r1, #15
 8022f50:	187b      	adds	r3, r7, r1
 8022f52:	2200      	movs	r2, #0
 8022f54:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022f56:	260e      	movs	r6, #14
 8022f58:	19bb      	adds	r3, r7, r6
 8022f5a:	2200      	movs	r2, #0
 8022f5c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022f5e:	687a      	ldr	r2, [r7, #4]
 8022f60:	23b0      	movs	r3, #176	@ 0xb0
 8022f62:	009b      	lsls	r3, r3, #2
 8022f64:	58d2      	ldr	r2, [r2, r3]
 8022f66:	000d      	movs	r5, r1
 8022f68:	187c      	adds	r4, r7, r1
 8022f6a:	1cfb      	adds	r3, r7, #3
 8022f6c:	781b      	ldrb	r3, [r3, #0]
 8022f6e:	0019      	movs	r1, r3
 8022f70:	0010      	movs	r0, r2
 8022f72:	f7f6 f85d 	bl	8019030 <HAL_PCD_EP_Close>
 8022f76:	0003      	movs	r3, r0
 8022f78:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022f7a:	19bc      	adds	r4, r7, r6
 8022f7c:	197b      	adds	r3, r7, r5
 8022f7e:	781b      	ldrb	r3, [r3, #0]
 8022f80:	0018      	movs	r0, r3
 8022f82:	f000 f95a 	bl	802323a <USBD_Get_USB_Status>
 8022f86:	0003      	movs	r3, r0
 8022f88:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022f8a:	19bb      	adds	r3, r7, r6
 8022f8c:	781b      	ldrb	r3, [r3, #0]
}
 8022f8e:	0018      	movs	r0, r3
 8022f90:	46bd      	mov	sp, r7
 8022f92:	b005      	add	sp, #20
 8022f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022f96 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f98:	b085      	sub	sp, #20
 8022f9a:	af00      	add	r7, sp, #0
 8022f9c:	6078      	str	r0, [r7, #4]
 8022f9e:	000a      	movs	r2, r1
 8022fa0:	1cfb      	adds	r3, r7, #3
 8022fa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022fa4:	210f      	movs	r1, #15
 8022fa6:	187b      	adds	r3, r7, r1
 8022fa8:	2200      	movs	r2, #0
 8022faa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022fac:	260e      	movs	r6, #14
 8022fae:	19bb      	adds	r3, r7, r6
 8022fb0:	2200      	movs	r2, #0
 8022fb2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022fb4:	687a      	ldr	r2, [r7, #4]
 8022fb6:	23b0      	movs	r3, #176	@ 0xb0
 8022fb8:	009b      	lsls	r3, r3, #2
 8022fba:	58d2      	ldr	r2, [r2, r3]
 8022fbc:	000d      	movs	r5, r1
 8022fbe:	187c      	adds	r4, r7, r1
 8022fc0:	1cfb      	adds	r3, r7, #3
 8022fc2:	781b      	ldrb	r3, [r3, #0]
 8022fc4:	0019      	movs	r1, r3
 8022fc6:	0010      	movs	r0, r2
 8022fc8:	f7f6 f90f 	bl	80191ea <HAL_PCD_EP_SetStall>
 8022fcc:	0003      	movs	r3, r0
 8022fce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022fd0:	19bc      	adds	r4, r7, r6
 8022fd2:	197b      	adds	r3, r7, r5
 8022fd4:	781b      	ldrb	r3, [r3, #0]
 8022fd6:	0018      	movs	r0, r3
 8022fd8:	f000 f92f 	bl	802323a <USBD_Get_USB_Status>
 8022fdc:	0003      	movs	r3, r0
 8022fde:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022fe0:	19bb      	adds	r3, r7, r6
 8022fe2:	781b      	ldrb	r3, [r3, #0]
}
 8022fe4:	0018      	movs	r0, r3
 8022fe6:	46bd      	mov	sp, r7
 8022fe8:	b005      	add	sp, #20
 8022fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022fec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022fee:	b085      	sub	sp, #20
 8022ff0:	af00      	add	r7, sp, #0
 8022ff2:	6078      	str	r0, [r7, #4]
 8022ff4:	000a      	movs	r2, r1
 8022ff6:	1cfb      	adds	r3, r7, #3
 8022ff8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022ffa:	210f      	movs	r1, #15
 8022ffc:	187b      	adds	r3, r7, r1
 8022ffe:	2200      	movs	r2, #0
 8023000:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023002:	260e      	movs	r6, #14
 8023004:	19bb      	adds	r3, r7, r6
 8023006:	2200      	movs	r2, #0
 8023008:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802300a:	687a      	ldr	r2, [r7, #4]
 802300c:	23b0      	movs	r3, #176	@ 0xb0
 802300e:	009b      	lsls	r3, r3, #2
 8023010:	58d2      	ldr	r2, [r2, r3]
 8023012:	000d      	movs	r5, r1
 8023014:	187c      	adds	r4, r7, r1
 8023016:	1cfb      	adds	r3, r7, #3
 8023018:	781b      	ldrb	r3, [r3, #0]
 802301a:	0019      	movs	r1, r3
 802301c:	0010      	movs	r0, r2
 802301e:	f7f6 f940 	bl	80192a2 <HAL_PCD_EP_ClrStall>
 8023022:	0003      	movs	r3, r0
 8023024:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023026:	19bc      	adds	r4, r7, r6
 8023028:	197b      	adds	r3, r7, r5
 802302a:	781b      	ldrb	r3, [r3, #0]
 802302c:	0018      	movs	r0, r3
 802302e:	f000 f904 	bl	802323a <USBD_Get_USB_Status>
 8023032:	0003      	movs	r3, r0
 8023034:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023036:	19bb      	adds	r3, r7, r6
 8023038:	781b      	ldrb	r3, [r3, #0]
}
 802303a:	0018      	movs	r0, r3
 802303c:	46bd      	mov	sp, r7
 802303e:	b005      	add	sp, #20
 8023040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023042 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023042:	b580      	push	{r7, lr}
 8023044:	b084      	sub	sp, #16
 8023046:	af00      	add	r7, sp, #0
 8023048:	6078      	str	r0, [r7, #4]
 802304a:	000a      	movs	r2, r1
 802304c:	1cfb      	adds	r3, r7, #3
 802304e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023050:	687a      	ldr	r2, [r7, #4]
 8023052:	23b0      	movs	r3, #176	@ 0xb0
 8023054:	009b      	lsls	r3, r3, #2
 8023056:	58d3      	ldr	r3, [r2, r3]
 8023058:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802305a:	1cfb      	adds	r3, r7, #3
 802305c:	781b      	ldrb	r3, [r3, #0]
 802305e:	b25b      	sxtb	r3, r3
 8023060:	2b00      	cmp	r3, #0
 8023062:	da0d      	bge.n	8023080 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023064:	1cfb      	adds	r3, r7, #3
 8023066:	781b      	ldrb	r3, [r3, #0]
 8023068:	227f      	movs	r2, #127	@ 0x7f
 802306a:	4013      	ands	r3, r2
 802306c:	68f9      	ldr	r1, [r7, #12]
 802306e:	1c5a      	adds	r2, r3, #1
 8023070:	0013      	movs	r3, r2
 8023072:	009b      	lsls	r3, r3, #2
 8023074:	189b      	adds	r3, r3, r2
 8023076:	00db      	lsls	r3, r3, #3
 8023078:	18cb      	adds	r3, r1, r3
 802307a:	3302      	adds	r3, #2
 802307c:	781b      	ldrb	r3, [r3, #0]
 802307e:	e00d      	b.n	802309c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023080:	1cfb      	adds	r3, r7, #3
 8023082:	781b      	ldrb	r3, [r3, #0]
 8023084:	227f      	movs	r2, #127	@ 0x7f
 8023086:	401a      	ands	r2, r3
 8023088:	68f8      	ldr	r0, [r7, #12]
 802308a:	23b5      	movs	r3, #181	@ 0xb5
 802308c:	0059      	lsls	r1, r3, #1
 802308e:	0013      	movs	r3, r2
 8023090:	009b      	lsls	r3, r3, #2
 8023092:	189b      	adds	r3, r3, r2
 8023094:	00db      	lsls	r3, r3, #3
 8023096:	18c3      	adds	r3, r0, r3
 8023098:	185b      	adds	r3, r3, r1
 802309a:	781b      	ldrb	r3, [r3, #0]
  }
}
 802309c:	0018      	movs	r0, r3
 802309e:	46bd      	mov	sp, r7
 80230a0:	b004      	add	sp, #16
 80230a2:	bd80      	pop	{r7, pc}

080230a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80230a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230a6:	b085      	sub	sp, #20
 80230a8:	af00      	add	r7, sp, #0
 80230aa:	6078      	str	r0, [r7, #4]
 80230ac:	000a      	movs	r2, r1
 80230ae:	1cfb      	adds	r3, r7, #3
 80230b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80230b2:	210f      	movs	r1, #15
 80230b4:	187b      	adds	r3, r7, r1
 80230b6:	2200      	movs	r2, #0
 80230b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80230ba:	260e      	movs	r6, #14
 80230bc:	19bb      	adds	r3, r7, r6
 80230be:	2200      	movs	r2, #0
 80230c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80230c2:	687a      	ldr	r2, [r7, #4]
 80230c4:	23b0      	movs	r3, #176	@ 0xb0
 80230c6:	009b      	lsls	r3, r3, #2
 80230c8:	58d2      	ldr	r2, [r2, r3]
 80230ca:	000d      	movs	r5, r1
 80230cc:	187c      	adds	r4, r7, r1
 80230ce:	1cfb      	adds	r3, r7, #3
 80230d0:	781b      	ldrb	r3, [r3, #0]
 80230d2:	0019      	movs	r1, r3
 80230d4:	0010      	movs	r0, r2
 80230d6:	f7f5 ff11 	bl	8018efc <HAL_PCD_SetAddress>
 80230da:	0003      	movs	r3, r0
 80230dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80230de:	19bc      	adds	r4, r7, r6
 80230e0:	197b      	adds	r3, r7, r5
 80230e2:	781b      	ldrb	r3, [r3, #0]
 80230e4:	0018      	movs	r0, r3
 80230e6:	f000 f8a8 	bl	802323a <USBD_Get_USB_Status>
 80230ea:	0003      	movs	r3, r0
 80230ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80230ee:	19bb      	adds	r3, r7, r6
 80230f0:	781b      	ldrb	r3, [r3, #0]
}
 80230f2:	0018      	movs	r0, r3
 80230f4:	46bd      	mov	sp, r7
 80230f6:	b005      	add	sp, #20
 80230f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080230fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80230fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230fc:	b087      	sub	sp, #28
 80230fe:	af00      	add	r7, sp, #0
 8023100:	60f8      	str	r0, [r7, #12]
 8023102:	0008      	movs	r0, r1
 8023104:	607a      	str	r2, [r7, #4]
 8023106:	0019      	movs	r1, r3
 8023108:	230b      	movs	r3, #11
 802310a:	18fb      	adds	r3, r7, r3
 802310c:	1c02      	adds	r2, r0, #0
 802310e:	701a      	strb	r2, [r3, #0]
 8023110:	2408      	movs	r4, #8
 8023112:	193b      	adds	r3, r7, r4
 8023114:	1c0a      	adds	r2, r1, #0
 8023116:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023118:	2117      	movs	r1, #23
 802311a:	187b      	adds	r3, r7, r1
 802311c:	2200      	movs	r2, #0
 802311e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023120:	2516      	movs	r5, #22
 8023122:	197b      	adds	r3, r7, r5
 8023124:	2200      	movs	r2, #0
 8023126:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023128:	68fa      	ldr	r2, [r7, #12]
 802312a:	23b0      	movs	r3, #176	@ 0xb0
 802312c:	009b      	lsls	r3, r3, #2
 802312e:	58d0      	ldr	r0, [r2, r3]
 8023130:	193b      	adds	r3, r7, r4
 8023132:	881d      	ldrh	r5, [r3, #0]
 8023134:	000e      	movs	r6, r1
 8023136:	187c      	adds	r4, r7, r1
 8023138:	687a      	ldr	r2, [r7, #4]
 802313a:	230b      	movs	r3, #11
 802313c:	18fb      	adds	r3, r7, r3
 802313e:	7819      	ldrb	r1, [r3, #0]
 8023140:	002b      	movs	r3, r5
 8023142:	f7f6 f816 	bl	8019172 <HAL_PCD_EP_Transmit>
 8023146:	0003      	movs	r3, r0
 8023148:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802314a:	2516      	movs	r5, #22
 802314c:	197c      	adds	r4, r7, r5
 802314e:	19bb      	adds	r3, r7, r6
 8023150:	781b      	ldrb	r3, [r3, #0]
 8023152:	0018      	movs	r0, r3
 8023154:	f000 f871 	bl	802323a <USBD_Get_USB_Status>
 8023158:	0003      	movs	r3, r0
 802315a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802315c:	197b      	adds	r3, r7, r5
 802315e:	781b      	ldrb	r3, [r3, #0]
}
 8023160:	0018      	movs	r0, r3
 8023162:	46bd      	mov	sp, r7
 8023164:	b007      	add	sp, #28
 8023166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023168 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023168:	b5f0      	push	{r4, r5, r6, r7, lr}
 802316a:	b087      	sub	sp, #28
 802316c:	af00      	add	r7, sp, #0
 802316e:	60f8      	str	r0, [r7, #12]
 8023170:	0008      	movs	r0, r1
 8023172:	607a      	str	r2, [r7, #4]
 8023174:	0019      	movs	r1, r3
 8023176:	230b      	movs	r3, #11
 8023178:	18fb      	adds	r3, r7, r3
 802317a:	1c02      	adds	r2, r0, #0
 802317c:	701a      	strb	r2, [r3, #0]
 802317e:	2408      	movs	r4, #8
 8023180:	193b      	adds	r3, r7, r4
 8023182:	1c0a      	adds	r2, r1, #0
 8023184:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023186:	2117      	movs	r1, #23
 8023188:	187b      	adds	r3, r7, r1
 802318a:	2200      	movs	r2, #0
 802318c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802318e:	2516      	movs	r5, #22
 8023190:	197b      	adds	r3, r7, r5
 8023192:	2200      	movs	r2, #0
 8023194:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023196:	68fa      	ldr	r2, [r7, #12]
 8023198:	23b0      	movs	r3, #176	@ 0xb0
 802319a:	009b      	lsls	r3, r3, #2
 802319c:	58d0      	ldr	r0, [r2, r3]
 802319e:	193b      	adds	r3, r7, r4
 80231a0:	881d      	ldrh	r5, [r3, #0]
 80231a2:	000e      	movs	r6, r1
 80231a4:	187c      	adds	r4, r7, r1
 80231a6:	687a      	ldr	r2, [r7, #4]
 80231a8:	230b      	movs	r3, #11
 80231aa:	18fb      	adds	r3, r7, r3
 80231ac:	7819      	ldrb	r1, [r3, #0]
 80231ae:	002b      	movs	r3, r5
 80231b0:	f7f5 ff8f 	bl	80190d2 <HAL_PCD_EP_Receive>
 80231b4:	0003      	movs	r3, r0
 80231b6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80231b8:	2516      	movs	r5, #22
 80231ba:	197c      	adds	r4, r7, r5
 80231bc:	19bb      	adds	r3, r7, r6
 80231be:	781b      	ldrb	r3, [r3, #0]
 80231c0:	0018      	movs	r0, r3
 80231c2:	f000 f83a 	bl	802323a <USBD_Get_USB_Status>
 80231c6:	0003      	movs	r3, r0
 80231c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80231ca:	197b      	adds	r3, r7, r5
 80231cc:	781b      	ldrb	r3, [r3, #0]
}
 80231ce:	0018      	movs	r0, r3
 80231d0:	46bd      	mov	sp, r7
 80231d2:	b007      	add	sp, #28
 80231d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080231d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80231d6:	b580      	push	{r7, lr}
 80231d8:	b082      	sub	sp, #8
 80231da:	af00      	add	r7, sp, #0
 80231dc:	6078      	str	r0, [r7, #4]
 80231de:	000a      	movs	r2, r1
 80231e0:	1cfb      	adds	r3, r7, #3
 80231e2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80231e4:	687a      	ldr	r2, [r7, #4]
 80231e6:	23b0      	movs	r3, #176	@ 0xb0
 80231e8:	009b      	lsls	r3, r3, #2
 80231ea:	58d2      	ldr	r2, [r2, r3]
 80231ec:	1cfb      	adds	r3, r7, #3
 80231ee:	781b      	ldrb	r3, [r3, #0]
 80231f0:	0019      	movs	r1, r3
 80231f2:	0010      	movs	r0, r2
 80231f4:	f7f5 ffa4 	bl	8019140 <HAL_PCD_EP_GetRxCount>
 80231f8:	0003      	movs	r3, r0
}
 80231fa:	0018      	movs	r0, r3
 80231fc:	46bd      	mov	sp, r7
 80231fe:	b002      	add	sp, #8
 8023200:	bd80      	pop	{r7, pc}
	...

08023204 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023204:	b580      	push	{r7, lr}
 8023206:	b082      	sub	sp, #8
 8023208:	af00      	add	r7, sp, #0
 802320a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 802320c:	4b02      	ldr	r3, [pc, #8]	@ (8023218 <USBD_static_malloc+0x14>)
}
 802320e:	0018      	movs	r0, r3
 8023210:	46bd      	mov	sp, r7
 8023212:	b002      	add	sp, #8
 8023214:	bd80      	pop	{r7, pc}
 8023216:	46c0      	nop			@ (mov r8, r8)
 8023218:	200032f0 	.word	0x200032f0

0802321c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 802321c:	b580      	push	{r7, lr}
 802321e:	b082      	sub	sp, #8
 8023220:	af00      	add	r7, sp, #0
 8023222:	6078      	str	r0, [r7, #4]

}
 8023224:	46c0      	nop			@ (mov r8, r8)
 8023226:	46bd      	mov	sp, r7
 8023228:	b002      	add	sp, #8
 802322a:	bd80      	pop	{r7, pc}

0802322c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 802322c:	b580      	push	{r7, lr}
 802322e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8023230:	f7e9 fb1a 	bl	800c868 <SystemClock_Config>
}
 8023234:	46c0      	nop			@ (mov r8, r8)
 8023236:	46bd      	mov	sp, r7
 8023238:	bd80      	pop	{r7, pc}

0802323a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802323a:	b580      	push	{r7, lr}
 802323c:	b084      	sub	sp, #16
 802323e:	af00      	add	r7, sp, #0
 8023240:	0002      	movs	r2, r0
 8023242:	1dfb      	adds	r3, r7, #7
 8023244:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023246:	230f      	movs	r3, #15
 8023248:	18fb      	adds	r3, r7, r3
 802324a:	2200      	movs	r2, #0
 802324c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 802324e:	1dfb      	adds	r3, r7, #7
 8023250:	781b      	ldrb	r3, [r3, #0]
 8023252:	2b03      	cmp	r3, #3
 8023254:	d017      	beq.n	8023286 <USBD_Get_USB_Status+0x4c>
 8023256:	dc1b      	bgt.n	8023290 <USBD_Get_USB_Status+0x56>
 8023258:	2b02      	cmp	r3, #2
 802325a:	d00f      	beq.n	802327c <USBD_Get_USB_Status+0x42>
 802325c:	dc18      	bgt.n	8023290 <USBD_Get_USB_Status+0x56>
 802325e:	2b00      	cmp	r3, #0
 8023260:	d002      	beq.n	8023268 <USBD_Get_USB_Status+0x2e>
 8023262:	2b01      	cmp	r3, #1
 8023264:	d005      	beq.n	8023272 <USBD_Get_USB_Status+0x38>
 8023266:	e013      	b.n	8023290 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023268:	230f      	movs	r3, #15
 802326a:	18fb      	adds	r3, r7, r3
 802326c:	2200      	movs	r2, #0
 802326e:	701a      	strb	r2, [r3, #0]
    break;
 8023270:	e013      	b.n	802329a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023272:	230f      	movs	r3, #15
 8023274:	18fb      	adds	r3, r7, r3
 8023276:	2202      	movs	r2, #2
 8023278:	701a      	strb	r2, [r3, #0]
    break;
 802327a:	e00e      	b.n	802329a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802327c:	230f      	movs	r3, #15
 802327e:	18fb      	adds	r3, r7, r3
 8023280:	2201      	movs	r2, #1
 8023282:	701a      	strb	r2, [r3, #0]
    break;
 8023284:	e009      	b.n	802329a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023286:	230f      	movs	r3, #15
 8023288:	18fb      	adds	r3, r7, r3
 802328a:	2202      	movs	r2, #2
 802328c:	701a      	strb	r2, [r3, #0]
    break;
 802328e:	e004      	b.n	802329a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023290:	230f      	movs	r3, #15
 8023292:	18fb      	adds	r3, r7, r3
 8023294:	2202      	movs	r2, #2
 8023296:	701a      	strb	r2, [r3, #0]
    break;
 8023298:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 802329a:	230f      	movs	r3, #15
 802329c:	18fb      	adds	r3, r7, r3
 802329e:	781b      	ldrb	r3, [r3, #0]
}
 80232a0:	0018      	movs	r0, r3
 80232a2:	46bd      	mov	sp, r7
 80232a4:	b004      	add	sp, #16
 80232a6:	bd80      	pop	{r7, pc}

080232a8 <arm_cfft_radix4by2_q31>:
 80232a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80232aa:	465f      	mov	r7, fp
 80232ac:	4656      	mov	r6, sl
 80232ae:	464d      	mov	r5, r9
 80232b0:	4644      	mov	r4, r8
 80232b2:	000b      	movs	r3, r1
 80232b4:	b4f0      	push	{r4, r5, r6, r7}
 80232b6:	085b      	lsrs	r3, r3, #1
 80232b8:	b08f      	sub	sp, #60	@ 0x3c
 80232ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80232bc:	0007      	movs	r7, r0
 80232be:	9009      	str	r0, [sp, #36]	@ 0x24
 80232c0:	0011      	movs	r1, r2
 80232c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80232c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80232c6:	2b00      	cmp	r3, #0
 80232c8:	d100      	bne.n	80232cc <arm_cfft_radix4by2_q31+0x24>
 80232ca:	e0a0      	b.n	802340e <arm_cfft_radix4by2_q31+0x166>
 80232cc:	0002      	movs	r2, r0
 80232ce:	00db      	lsls	r3, r3, #3
 80232d0:	3204      	adds	r2, #4
 80232d2:	4691      	mov	r9, r2
 80232d4:	4698      	mov	r8, r3
 80232d6:	000a      	movs	r2, r1
 80232d8:	464e      	mov	r6, r9
 80232da:	4442      	add	r2, r8
 80232dc:	4699      	mov	r9, r3
 80232de:	4688      	mov	r8, r1
 80232e0:	9208      	str	r2, [sp, #32]
 80232e2:	900d      	str	r0, [sp, #52]	@ 0x34
 80232e4:	4643      	mov	r3, r8
 80232e6:	681b      	ldr	r3, [r3, #0]
 80232e8:	469b      	mov	fp, r3
 80232ea:	4643      	mov	r3, r8
 80232ec:	685b      	ldr	r3, [r3, #4]
 80232ee:	469a      	mov	sl, r3
 80232f0:	683b      	ldr	r3, [r7, #0]
 80232f2:	109c      	asrs	r4, r3, #2
 80232f4:	464b      	mov	r3, r9
 80232f6:	58fb      	ldr	r3, [r7, r3]
 80232f8:	109a      	asrs	r2, r3, #2
 80232fa:	18a3      	adds	r3, r4, r2
 80232fc:	603b      	str	r3, [r7, #0]
 80232fe:	6833      	ldr	r3, [r6, #0]
 8023300:	1aa4      	subs	r4, r4, r2
 8023302:	109d      	asrs	r5, r3, #2
 8023304:	464b      	mov	r3, r9
 8023306:	58f3      	ldr	r3, [r6, r3]
 8023308:	17e2      	asrs	r2, r4, #31
 802330a:	109b      	asrs	r3, r3, #2
 802330c:	18e9      	adds	r1, r5, r3
 802330e:	6031      	str	r1, [r6, #0]
 8023310:	0011      	movs	r1, r2
 8023312:	465a      	mov	r2, fp
 8023314:	17d2      	asrs	r2, r2, #31
 8023316:	0010      	movs	r0, r2
 8023318:	4652      	mov	r2, sl
 802331a:	1aed      	subs	r5, r5, r3
 802331c:	17eb      	asrs	r3, r5, #31
 802331e:	17d2      	asrs	r2, r2, #31
 8023320:	9307      	str	r3, [sp, #28]
 8023322:	9204      	str	r2, [sp, #16]
 8023324:	0003      	movs	r3, r0
 8023326:	465a      	mov	r2, fp
 8023328:	9006      	str	r0, [sp, #24]
 802332a:	0020      	movs	r0, r4
 802332c:	9105      	str	r1, [sp, #20]
 802332e:	f7dd f947 	bl	80005c0 <__aeabi_lmul>
 8023332:	2280      	movs	r2, #128	@ 0x80
 8023334:	2300      	movs	r3, #0
 8023336:	0612      	lsls	r2, r2, #24
 8023338:	1880      	adds	r0, r0, r2
 802333a:	4159      	adcs	r1, r3
 802333c:	2300      	movs	r3, #0
 802333e:	9101      	str	r1, [sp, #4]
 8023340:	9300      	str	r3, [sp, #0]
 8023342:	4652      	mov	r2, sl
 8023344:	9b04      	ldr	r3, [sp, #16]
 8023346:	0028      	movs	r0, r5
 8023348:	17e9      	asrs	r1, r5, #31
 802334a:	f7dd f939 	bl	80005c0 <__aeabi_lmul>
 802334e:	9a00      	ldr	r2, [sp, #0]
 8023350:	9b01      	ldr	r3, [sp, #4]
 8023352:	1880      	adds	r0, r0, r2
 8023354:	4159      	adcs	r1, r3
 8023356:	2280      	movs	r2, #128	@ 0x80
 8023358:	2300      	movs	r3, #0
 802335a:	0612      	lsls	r2, r2, #24
 802335c:	1880      	adds	r0, r0, r2
 802335e:	4159      	adcs	r1, r3
 8023360:	464a      	mov	r2, r9
 8023362:	004b      	lsls	r3, r1, #1
 8023364:	50bb      	str	r3, [r7, r2]
 8023366:	4658      	mov	r0, fp
 8023368:	002a      	movs	r2, r5
 802336a:	9b07      	ldr	r3, [sp, #28]
 802336c:	9906      	ldr	r1, [sp, #24]
 802336e:	f7dd f927 	bl	80005c0 <__aeabi_lmul>
 8023372:	2280      	movs	r2, #128	@ 0x80
 8023374:	2300      	movs	r3, #0
 8023376:	0612      	lsls	r2, r2, #24
 8023378:	1880      	adds	r0, r0, r2
 802337a:	4159      	adcs	r1, r3
 802337c:	2000      	movs	r0, #0
 802337e:	9103      	str	r1, [sp, #12]
 8023380:	9002      	str	r0, [sp, #8]
 8023382:	4652      	mov	r2, sl
 8023384:	9b04      	ldr	r3, [sp, #16]
 8023386:	0020      	movs	r0, r4
 8023388:	9905      	ldr	r1, [sp, #20]
 802338a:	f7dd f919 	bl	80005c0 <__aeabi_lmul>
 802338e:	9a02      	ldr	r2, [sp, #8]
 8023390:	9b03      	ldr	r3, [sp, #12]
 8023392:	1a12      	subs	r2, r2, r0
 8023394:	418b      	sbcs	r3, r1
 8023396:	2080      	movs	r0, #128	@ 0x80
 8023398:	2100      	movs	r1, #0
 802339a:	0600      	lsls	r0, r0, #24
 802339c:	1812      	adds	r2, r2, r0
 802339e:	414b      	adcs	r3, r1
 80233a0:	464a      	mov	r2, r9
 80233a2:	005b      	lsls	r3, r3, #1
 80233a4:	50b3      	str	r3, [r6, r2]
 80233a6:	2308      	movs	r3, #8
 80233a8:	469c      	mov	ip, r3
 80233aa:	9b08      	ldr	r3, [sp, #32]
 80233ac:	44e0      	add	r8, ip
 80233ae:	3708      	adds	r7, #8
 80233b0:	3608      	adds	r6, #8
 80233b2:	4598      	cmp	r8, r3
 80233b4:	d196      	bne.n	80232e4 <arm_cfft_radix4by2_q31+0x3c>
 80233b6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80233b8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80233ba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80233bc:	2302      	movs	r3, #2
 80233be:	003a      	movs	r2, r7
 80233c0:	0029      	movs	r1, r5
 80233c2:	0020      	movs	r0, r4
 80233c4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80233c6:	f000 f957 	bl	8023678 <arm_radix4_butterfly_q31>
 80233ca:	46a4      	mov	ip, r4
 80233cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80233ce:	2302      	movs	r3, #2
 80233d0:	0088      	lsls	r0, r1, #2
 80233d2:	4460      	add	r0, ip
 80233d4:	003a      	movs	r2, r7
 80233d6:	0029      	movs	r1, r5
 80233d8:	f000 f94e 	bl	8023678 <arm_radix4_butterfly_q31>
 80233dc:	46a4      	mov	ip, r4
 80233de:	0128      	lsls	r0, r5, #4
 80233e0:	4460      	add	r0, ip
 80233e2:	6833      	ldr	r3, [r6, #0]
 80233e4:	005b      	lsls	r3, r3, #1
 80233e6:	6033      	str	r3, [r6, #0]
 80233e8:	6873      	ldr	r3, [r6, #4]
 80233ea:	005b      	lsls	r3, r3, #1
 80233ec:	6073      	str	r3, [r6, #4]
 80233ee:	68b3      	ldr	r3, [r6, #8]
 80233f0:	005b      	lsls	r3, r3, #1
 80233f2:	60b3      	str	r3, [r6, #8]
 80233f4:	68f3      	ldr	r3, [r6, #12]
 80233f6:	005b      	lsls	r3, r3, #1
 80233f8:	60f3      	str	r3, [r6, #12]
 80233fa:	3610      	adds	r6, #16
 80233fc:	42b0      	cmp	r0, r6
 80233fe:	d1f0      	bne.n	80233e2 <arm_cfft_radix4by2_q31+0x13a>
 8023400:	b00f      	add	sp, #60	@ 0x3c
 8023402:	bc3c      	pop	{r2, r3, r4, r5}
 8023404:	4690      	mov	r8, r2
 8023406:	4699      	mov	r9, r3
 8023408:	46a2      	mov	sl, r4
 802340a:	46ab      	mov	fp, r5
 802340c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802340e:	2302      	movs	r3, #2
 8023410:	2100      	movs	r1, #0
 8023412:	0015      	movs	r5, r2
 8023414:	f000 f930 	bl	8023678 <arm_radix4_butterfly_q31>
 8023418:	46bc      	mov	ip, r7
 802341a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802341c:	002a      	movs	r2, r5
 802341e:	0098      	lsls	r0, r3, #2
 8023420:	4460      	add	r0, ip
 8023422:	2302      	movs	r3, #2
 8023424:	2100      	movs	r1, #0
 8023426:	f000 f927 	bl	8023678 <arm_radix4_butterfly_q31>
 802342a:	e7e9      	b.n	8023400 <arm_cfft_radix4by2_q31+0x158>

0802342c <arm_cfft_radix4by2_inverse_q31>:
 802342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802342e:	465f      	mov	r7, fp
 8023430:	4656      	mov	r6, sl
 8023432:	464d      	mov	r5, r9
 8023434:	4644      	mov	r4, r8
 8023436:	000b      	movs	r3, r1
 8023438:	b4f0      	push	{r4, r5, r6, r7}
 802343a:	085b      	lsrs	r3, r3, #1
 802343c:	b08f      	sub	sp, #60	@ 0x3c
 802343e:	910a      	str	r1, [sp, #40]	@ 0x28
 8023440:	0007      	movs	r7, r0
 8023442:	9009      	str	r0, [sp, #36]	@ 0x24
 8023444:	0011      	movs	r1, r2
 8023446:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023448:	930c      	str	r3, [sp, #48]	@ 0x30
 802344a:	2b00      	cmp	r3, #0
 802344c:	d100      	bne.n	8023450 <arm_cfft_radix4by2_inverse_q31+0x24>
 802344e:	e0a0      	b.n	8023592 <arm_cfft_radix4by2_inverse_q31+0x166>
 8023450:	0002      	movs	r2, r0
 8023452:	00db      	lsls	r3, r3, #3
 8023454:	3204      	adds	r2, #4
 8023456:	4691      	mov	r9, r2
 8023458:	4698      	mov	r8, r3
 802345a:	000a      	movs	r2, r1
 802345c:	464e      	mov	r6, r9
 802345e:	4442      	add	r2, r8
 8023460:	4699      	mov	r9, r3
 8023462:	4688      	mov	r8, r1
 8023464:	9208      	str	r2, [sp, #32]
 8023466:	900d      	str	r0, [sp, #52]	@ 0x34
 8023468:	4643      	mov	r3, r8
 802346a:	681b      	ldr	r3, [r3, #0]
 802346c:	469b      	mov	fp, r3
 802346e:	4643      	mov	r3, r8
 8023470:	685b      	ldr	r3, [r3, #4]
 8023472:	469a      	mov	sl, r3
 8023474:	683b      	ldr	r3, [r7, #0]
 8023476:	109c      	asrs	r4, r3, #2
 8023478:	464b      	mov	r3, r9
 802347a:	58fb      	ldr	r3, [r7, r3]
 802347c:	109a      	asrs	r2, r3, #2
 802347e:	18a3      	adds	r3, r4, r2
 8023480:	603b      	str	r3, [r7, #0]
 8023482:	6833      	ldr	r3, [r6, #0]
 8023484:	1aa4      	subs	r4, r4, r2
 8023486:	109d      	asrs	r5, r3, #2
 8023488:	464b      	mov	r3, r9
 802348a:	58f3      	ldr	r3, [r6, r3]
 802348c:	17e2      	asrs	r2, r4, #31
 802348e:	109b      	asrs	r3, r3, #2
 8023490:	18e9      	adds	r1, r5, r3
 8023492:	6031      	str	r1, [r6, #0]
 8023494:	0011      	movs	r1, r2
 8023496:	465a      	mov	r2, fp
 8023498:	17d2      	asrs	r2, r2, #31
 802349a:	0010      	movs	r0, r2
 802349c:	4652      	mov	r2, sl
 802349e:	1aed      	subs	r5, r5, r3
 80234a0:	17eb      	asrs	r3, r5, #31
 80234a2:	17d2      	asrs	r2, r2, #31
 80234a4:	9307      	str	r3, [sp, #28]
 80234a6:	9204      	str	r2, [sp, #16]
 80234a8:	0003      	movs	r3, r0
 80234aa:	465a      	mov	r2, fp
 80234ac:	9006      	str	r0, [sp, #24]
 80234ae:	0020      	movs	r0, r4
 80234b0:	9105      	str	r1, [sp, #20]
 80234b2:	f7dd f885 	bl	80005c0 <__aeabi_lmul>
 80234b6:	2280      	movs	r2, #128	@ 0x80
 80234b8:	2300      	movs	r3, #0
 80234ba:	0612      	lsls	r2, r2, #24
 80234bc:	1880      	adds	r0, r0, r2
 80234be:	4159      	adcs	r1, r3
 80234c0:	2300      	movs	r3, #0
 80234c2:	9101      	str	r1, [sp, #4]
 80234c4:	9300      	str	r3, [sp, #0]
 80234c6:	4652      	mov	r2, sl
 80234c8:	9b04      	ldr	r3, [sp, #16]
 80234ca:	0028      	movs	r0, r5
 80234cc:	17e9      	asrs	r1, r5, #31
 80234ce:	f7dd f877 	bl	80005c0 <__aeabi_lmul>
 80234d2:	9a00      	ldr	r2, [sp, #0]
 80234d4:	9b01      	ldr	r3, [sp, #4]
 80234d6:	1a12      	subs	r2, r2, r0
 80234d8:	418b      	sbcs	r3, r1
 80234da:	2080      	movs	r0, #128	@ 0x80
 80234dc:	2100      	movs	r1, #0
 80234de:	0600      	lsls	r0, r0, #24
 80234e0:	1812      	adds	r2, r2, r0
 80234e2:	414b      	adcs	r3, r1
 80234e4:	464a      	mov	r2, r9
 80234e6:	005b      	lsls	r3, r3, #1
 80234e8:	50bb      	str	r3, [r7, r2]
 80234ea:	4658      	mov	r0, fp
 80234ec:	002a      	movs	r2, r5
 80234ee:	9b07      	ldr	r3, [sp, #28]
 80234f0:	9906      	ldr	r1, [sp, #24]
 80234f2:	f7dd f865 	bl	80005c0 <__aeabi_lmul>
 80234f6:	2280      	movs	r2, #128	@ 0x80
 80234f8:	2300      	movs	r3, #0
 80234fa:	0612      	lsls	r2, r2, #24
 80234fc:	1880      	adds	r0, r0, r2
 80234fe:	4159      	adcs	r1, r3
 8023500:	2000      	movs	r0, #0
 8023502:	9103      	str	r1, [sp, #12]
 8023504:	9002      	str	r0, [sp, #8]
 8023506:	4652      	mov	r2, sl
 8023508:	9b04      	ldr	r3, [sp, #16]
 802350a:	0020      	movs	r0, r4
 802350c:	9905      	ldr	r1, [sp, #20]
 802350e:	f7dd f857 	bl	80005c0 <__aeabi_lmul>
 8023512:	9b02      	ldr	r3, [sp, #8]
 8023514:	9c03      	ldr	r4, [sp, #12]
 8023516:	18c0      	adds	r0, r0, r3
 8023518:	4161      	adcs	r1, r4
 802351a:	2380      	movs	r3, #128	@ 0x80
 802351c:	2400      	movs	r4, #0
 802351e:	061b      	lsls	r3, r3, #24
 8023520:	18c0      	adds	r0, r0, r3
 8023522:	4161      	adcs	r1, r4
 8023524:	464a      	mov	r2, r9
 8023526:	004b      	lsls	r3, r1, #1
 8023528:	50b3      	str	r3, [r6, r2]
 802352a:	2308      	movs	r3, #8
 802352c:	469c      	mov	ip, r3
 802352e:	9b08      	ldr	r3, [sp, #32]
 8023530:	44e0      	add	r8, ip
 8023532:	3708      	adds	r7, #8
 8023534:	3608      	adds	r6, #8
 8023536:	4598      	cmp	r8, r3
 8023538:	d196      	bne.n	8023468 <arm_cfft_radix4by2_inverse_q31+0x3c>
 802353a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802353c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802353e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023540:	2302      	movs	r3, #2
 8023542:	003a      	movs	r2, r7
 8023544:	0029      	movs	r1, r5
 8023546:	0020      	movs	r0, r4
 8023548:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802354a:	f000 fb3b 	bl	8023bc4 <arm_radix4_butterfly_inverse_q31>
 802354e:	46a4      	mov	ip, r4
 8023550:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023552:	2302      	movs	r3, #2
 8023554:	0088      	lsls	r0, r1, #2
 8023556:	4460      	add	r0, ip
 8023558:	003a      	movs	r2, r7
 802355a:	0029      	movs	r1, r5
 802355c:	f000 fb32 	bl	8023bc4 <arm_radix4_butterfly_inverse_q31>
 8023560:	46a4      	mov	ip, r4
 8023562:	0128      	lsls	r0, r5, #4
 8023564:	4460      	add	r0, ip
 8023566:	6833      	ldr	r3, [r6, #0]
 8023568:	005b      	lsls	r3, r3, #1
 802356a:	6033      	str	r3, [r6, #0]
 802356c:	6873      	ldr	r3, [r6, #4]
 802356e:	005b      	lsls	r3, r3, #1
 8023570:	6073      	str	r3, [r6, #4]
 8023572:	68b3      	ldr	r3, [r6, #8]
 8023574:	005b      	lsls	r3, r3, #1
 8023576:	60b3      	str	r3, [r6, #8]
 8023578:	68f3      	ldr	r3, [r6, #12]
 802357a:	005b      	lsls	r3, r3, #1
 802357c:	60f3      	str	r3, [r6, #12]
 802357e:	3610      	adds	r6, #16
 8023580:	42b0      	cmp	r0, r6
 8023582:	d1f0      	bne.n	8023566 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023584:	b00f      	add	sp, #60	@ 0x3c
 8023586:	bc3c      	pop	{r2, r3, r4, r5}
 8023588:	4690      	mov	r8, r2
 802358a:	4699      	mov	r9, r3
 802358c:	46a2      	mov	sl, r4
 802358e:	46ab      	mov	fp, r5
 8023590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023592:	2302      	movs	r3, #2
 8023594:	2100      	movs	r1, #0
 8023596:	0015      	movs	r5, r2
 8023598:	f000 fb14 	bl	8023bc4 <arm_radix4_butterfly_inverse_q31>
 802359c:	46bc      	mov	ip, r7
 802359e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80235a0:	002a      	movs	r2, r5
 80235a2:	0098      	lsls	r0, r3, #2
 80235a4:	4460      	add	r0, ip
 80235a6:	2302      	movs	r3, #2
 80235a8:	2100      	movs	r1, #0
 80235aa:	f000 fb0b 	bl	8023bc4 <arm_radix4_butterfly_inverse_q31>
 80235ae:	e7e9      	b.n	8023584 <arm_cfft_radix4by2_inverse_q31+0x158>

080235b0 <arm_cfft_q31>:
 80235b0:	b570      	push	{r4, r5, r6, lr}
 80235b2:	001e      	movs	r6, r3
 80235b4:	2380      	movs	r3, #128	@ 0x80
 80235b6:	000d      	movs	r5, r1
 80235b8:	0004      	movs	r4, r0
 80235ba:	8801      	ldrh	r1, [r0, #0]
 80235bc:	005b      	lsls	r3, r3, #1
 80235be:	2a01      	cmp	r2, #1
 80235c0:	d028      	beq.n	8023614 <arm_cfft_q31+0x64>
 80235c2:	4299      	cmp	r1, r3
 80235c4:	d020      	beq.n	8023608 <arm_cfft_q31+0x58>
 80235c6:	d812      	bhi.n	80235ee <arm_cfft_q31+0x3e>
 80235c8:	2920      	cmp	r1, #32
 80235ca:	d004      	beq.n	80235d6 <arm_cfft_q31+0x26>
 80235cc:	d949      	bls.n	8023662 <arm_cfft_q31+0xb2>
 80235ce:	2940      	cmp	r1, #64	@ 0x40
 80235d0:	d01a      	beq.n	8023608 <arm_cfft_q31+0x58>
 80235d2:	2980      	cmp	r1, #128	@ 0x80
 80235d4:	d103      	bne.n	80235de <arm_cfft_q31+0x2e>
 80235d6:	6862      	ldr	r2, [r4, #4]
 80235d8:	0028      	movs	r0, r5
 80235da:	f7ff fe65 	bl	80232a8 <arm_cfft_radix4by2_q31>
 80235de:	2e00      	cmp	r6, #0
 80235e0:	d004      	beq.n	80235ec <arm_cfft_q31+0x3c>
 80235e2:	68a2      	ldr	r2, [r4, #8]
 80235e4:	89a1      	ldrh	r1, [r4, #12]
 80235e6:	0028      	movs	r0, r5
 80235e8:	f7dc fd8e 	bl	8000108 <arm_bitreversal_32>
 80235ec:	bd70      	pop	{r4, r5, r6, pc}
 80235ee:	2380      	movs	r3, #128	@ 0x80
 80235f0:	00db      	lsls	r3, r3, #3
 80235f2:	4299      	cmp	r1, r3
 80235f4:	d008      	beq.n	8023608 <arm_cfft_q31+0x58>
 80235f6:	d92f      	bls.n	8023658 <arm_cfft_q31+0xa8>
 80235f8:	2380      	movs	r3, #128	@ 0x80
 80235fa:	011b      	lsls	r3, r3, #4
 80235fc:	4299      	cmp	r1, r3
 80235fe:	d0ea      	beq.n	80235d6 <arm_cfft_q31+0x26>
 8023600:	2380      	movs	r3, #128	@ 0x80
 8023602:	015b      	lsls	r3, r3, #5
 8023604:	4299      	cmp	r1, r3
 8023606:	d1ea      	bne.n	80235de <arm_cfft_q31+0x2e>
 8023608:	2301      	movs	r3, #1
 802360a:	6862      	ldr	r2, [r4, #4]
 802360c:	0028      	movs	r0, r5
 802360e:	f000 f833 	bl	8023678 <arm_radix4_butterfly_q31>
 8023612:	e7e4      	b.n	80235de <arm_cfft_q31+0x2e>
 8023614:	4299      	cmp	r1, r3
 8023616:	d019      	beq.n	802364c <arm_cfft_q31+0x9c>
 8023618:	d80b      	bhi.n	8023632 <arm_cfft_q31+0x82>
 802361a:	2920      	cmp	r1, #32
 802361c:	d004      	beq.n	8023628 <arm_cfft_q31+0x78>
 802361e:	d928      	bls.n	8023672 <arm_cfft_q31+0xc2>
 8023620:	2940      	cmp	r1, #64	@ 0x40
 8023622:	d013      	beq.n	802364c <arm_cfft_q31+0x9c>
 8023624:	2980      	cmp	r1, #128	@ 0x80
 8023626:	d1da      	bne.n	80235de <arm_cfft_q31+0x2e>
 8023628:	6862      	ldr	r2, [r4, #4]
 802362a:	0028      	movs	r0, r5
 802362c:	f7ff fefe 	bl	802342c <arm_cfft_radix4by2_inverse_q31>
 8023630:	e7d5      	b.n	80235de <arm_cfft_q31+0x2e>
 8023632:	2380      	movs	r3, #128	@ 0x80
 8023634:	00db      	lsls	r3, r3, #3
 8023636:	4299      	cmp	r1, r3
 8023638:	d008      	beq.n	802364c <arm_cfft_q31+0x9c>
 802363a:	d915      	bls.n	8023668 <arm_cfft_q31+0xb8>
 802363c:	2380      	movs	r3, #128	@ 0x80
 802363e:	011b      	lsls	r3, r3, #4
 8023640:	4299      	cmp	r1, r3
 8023642:	d0f1      	beq.n	8023628 <arm_cfft_q31+0x78>
 8023644:	2380      	movs	r3, #128	@ 0x80
 8023646:	015b      	lsls	r3, r3, #5
 8023648:	4299      	cmp	r1, r3
 802364a:	d1c8      	bne.n	80235de <arm_cfft_q31+0x2e>
 802364c:	2301      	movs	r3, #1
 802364e:	6862      	ldr	r2, [r4, #4]
 8023650:	0028      	movs	r0, r5
 8023652:	f000 fab7 	bl	8023bc4 <arm_radix4_butterfly_inverse_q31>
 8023656:	e7c2      	b.n	80235de <arm_cfft_q31+0x2e>
 8023658:	2380      	movs	r3, #128	@ 0x80
 802365a:	009b      	lsls	r3, r3, #2
 802365c:	4299      	cmp	r1, r3
 802365e:	d0ba      	beq.n	80235d6 <arm_cfft_q31+0x26>
 8023660:	e7bd      	b.n	80235de <arm_cfft_q31+0x2e>
 8023662:	2910      	cmp	r1, #16
 8023664:	d1bb      	bne.n	80235de <arm_cfft_q31+0x2e>
 8023666:	e7cf      	b.n	8023608 <arm_cfft_q31+0x58>
 8023668:	2380      	movs	r3, #128	@ 0x80
 802366a:	009b      	lsls	r3, r3, #2
 802366c:	4299      	cmp	r1, r3
 802366e:	d0db      	beq.n	8023628 <arm_cfft_q31+0x78>
 8023670:	e7b5      	b.n	80235de <arm_cfft_q31+0x2e>
 8023672:	2910      	cmp	r1, #16
 8023674:	d1b3      	bne.n	80235de <arm_cfft_q31+0x2e>
 8023676:	e7e9      	b.n	802364c <arm_cfft_q31+0x9c>

08023678 <arm_radix4_butterfly_q31>:
 8023678:	b5f0      	push	{r4, r5, r6, r7, lr}
 802367a:	464d      	mov	r5, r9
 802367c:	4644      	mov	r4, r8
 802367e:	465f      	mov	r7, fp
 8023680:	4656      	mov	r6, sl
 8023682:	469c      	mov	ip, r3
 8023684:	b4f0      	push	{r4, r5, r6, r7}
 8023686:	b0a7      	sub	sp, #156	@ 0x9c
 8023688:	9114      	str	r1, [sp, #80]	@ 0x50
 802368a:	0889      	lsrs	r1, r1, #2
 802368c:	9310      	str	r3, [sp, #64]	@ 0x40
 802368e:	00cb      	lsls	r3, r1, #3
 8023690:	0015      	movs	r5, r2
 8023692:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023694:	18c2      	adds	r2, r0, r3
 8023696:	000c      	movs	r4, r1
 8023698:	469a      	mov	sl, r3
 802369a:	9124      	str	r1, [sp, #144]	@ 0x90
 802369c:	18d1      	adds	r1, r2, r3
 802369e:	4663      	mov	r3, ip
 80236a0:	468b      	mov	fp, r1
 80236a2:	0119      	lsls	r1, r3, #4
 80236a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80236a6:	00d9      	lsls	r1, r3, #3
 80236a8:	005b      	lsls	r3, r3, #1
 80236aa:	4463      	add	r3, ip
 80236ac:	910e      	str	r1, [sp, #56]	@ 0x38
 80236ae:	00d9      	lsls	r1, r3, #3
 80236b0:	465b      	mov	r3, fp
 80236b2:	44da      	add	sl, fp
 80236b4:	4690      	mov	r8, r2
 80236b6:	4683      	mov	fp, r0
 80236b8:	4699      	mov	r9, r3
 80236ba:	9022      	str	r0, [sp, #136]	@ 0x88
 80236bc:	9025      	str	r0, [sp, #148]	@ 0x94
 80236be:	910f      	str	r1, [sp, #60]	@ 0x3c
 80236c0:	9502      	str	r5, [sp, #8]
 80236c2:	9500      	str	r5, [sp, #0]
 80236c4:	9501      	str	r5, [sp, #4]
 80236c6:	9407      	str	r4, [sp, #28]
 80236c8:	465b      	mov	r3, fp
 80236ca:	681b      	ldr	r3, [r3, #0]
 80236cc:	4642      	mov	r2, r8
 80236ce:	111c      	asrs	r4, r3, #4
 80236d0:	464b      	mov	r3, r9
 80236d2:	4658      	mov	r0, fp
 80236d4:	681b      	ldr	r3, [r3, #0]
 80236d6:	6812      	ldr	r2, [r2, #0]
 80236d8:	111b      	asrs	r3, r3, #4
 80236da:	18e7      	adds	r7, r4, r3
 80236dc:	1ae3      	subs	r3, r4, r3
 80236de:	1114      	asrs	r4, r2, #4
 80236e0:	4652      	mov	r2, sl
 80236e2:	6840      	ldr	r0, [r0, #4]
 80236e4:	6812      	ldr	r2, [r2, #0]
 80236e6:	1105      	asrs	r5, r0, #4
 80236e8:	4648      	mov	r0, r9
 80236ea:	9303      	str	r3, [sp, #12]
 80236ec:	1113      	asrs	r3, r2, #4
 80236ee:	18e2      	adds	r2, r4, r3
 80236f0:	465c      	mov	r4, fp
 80236f2:	6840      	ldr	r0, [r0, #4]
 80236f4:	1103      	asrs	r3, r0, #4
 80236f6:	18ee      	adds	r6, r5, r3
 80236f8:	1ae8      	subs	r0, r5, r3
 80236fa:	18bb      	adds	r3, r7, r2
 80236fc:	6023      	str	r3, [r4, #0]
 80236fe:	4644      	mov	r4, r8
 8023700:	6864      	ldr	r4, [r4, #4]
 8023702:	9004      	str	r0, [sp, #16]
 8023704:	1125      	asrs	r5, r4, #4
 8023706:	4654      	mov	r4, sl
 8023708:	6864      	ldr	r4, [r4, #4]
 802370a:	1123      	asrs	r3, r4, #4
 802370c:	465c      	mov	r4, fp
 802370e:	18eb      	adds	r3, r5, r3
 8023710:	18f1      	adds	r1, r6, r3
 8023712:	6061      	str	r1, [r4, #4]
 8023714:	4655      	mov	r5, sl
 8023716:	4644      	mov	r4, r8
 8023718:	686d      	ldr	r5, [r5, #4]
 802371a:	6864      	ldr	r4, [r4, #4]
 802371c:	1129      	asrs	r1, r5, #4
 802371e:	1124      	asrs	r4, r4, #4
 8023720:	1a64      	subs	r4, r4, r1
 8023722:	4641      	mov	r1, r8
 8023724:	6809      	ldr	r1, [r1, #0]
 8023726:	9405      	str	r4, [sp, #20]
 8023728:	1108      	asrs	r0, r1, #4
 802372a:	4651      	mov	r1, sl
 802372c:	6809      	ldr	r1, [r1, #0]
 802372e:	1abc      	subs	r4, r7, r2
 8023730:	1109      	asrs	r1, r1, #4
 8023732:	1a41      	subs	r1, r0, r1
 8023734:	17e2      	asrs	r2, r4, #31
 8023736:	9106      	str	r1, [sp, #24]
 8023738:	0011      	movs	r1, r2
 802373a:	9a01      	ldr	r2, [sp, #4]
 802373c:	9108      	str	r1, [sp, #32]
 802373e:	6817      	ldr	r7, [r2, #0]
 8023740:	17fd      	asrs	r5, r7, #31
 8023742:	0028      	movs	r0, r5
 8023744:	1af5      	subs	r5, r6, r3
 8023746:	17ee      	asrs	r6, r5, #31
 8023748:	960a      	str	r6, [sp, #40]	@ 0x28
 802374a:	6856      	ldr	r6, [r2, #4]
 802374c:	9009      	str	r0, [sp, #36]	@ 0x24
 802374e:	17f3      	asrs	r3, r6, #31
 8023750:	003a      	movs	r2, r7
 8023752:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023754:	0003      	movs	r3, r0
 8023756:	0020      	movs	r0, r4
 8023758:	f7dc ff32 	bl	80005c0 <__aeabi_lmul>
 802375c:	0032      	movs	r2, r6
 802375e:	17f3      	asrs	r3, r6, #31
 8023760:	910c      	str	r1, [sp, #48]	@ 0x30
 8023762:	0028      	movs	r0, r5
 8023764:	17e9      	asrs	r1, r5, #31
 8023766:	f7dc ff2b 	bl	80005c0 <__aeabi_lmul>
 802376a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802376c:	002a      	movs	r2, r5
 802376e:	4684      	mov	ip, r0
 8023770:	4640      	mov	r0, r8
 8023772:	4461      	add	r1, ip
 8023774:	0049      	lsls	r1, r1, #1
 8023776:	6001      	str	r1, [r0, #0]
 8023778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802377a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802377c:	0038      	movs	r0, r7
 802377e:	f7dc ff1f 	bl	80005c0 <__aeabi_lmul>
 8023782:	0032      	movs	r2, r6
 8023784:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023786:	000d      	movs	r5, r1
 8023788:	0020      	movs	r0, r4
 802378a:	9908      	ldr	r1, [sp, #32]
 802378c:	f7dc ff18 	bl	80005c0 <__aeabi_lmul>
 8023790:	4646      	mov	r6, r8
 8023792:	1a6d      	subs	r5, r5, r1
 8023794:	006d      	lsls	r5, r5, #1
 8023796:	6075      	str	r5, [r6, #4]
 8023798:	9903      	ldr	r1, [sp, #12]
 802379a:	9d05      	ldr	r5, [sp, #20]
 802379c:	000c      	movs	r4, r1
 802379e:	46ac      	mov	ip, r5
 80237a0:	4464      	add	r4, ip
 80237a2:	17e6      	asrs	r6, r4, #31
 80237a4:	0031      	movs	r1, r6
 80237a6:	9b00      	ldr	r3, [sp, #0]
 80237a8:	9804      	ldr	r0, [sp, #16]
 80237aa:	681e      	ldr	r6, [r3, #0]
 80237ac:	17f7      	asrs	r7, r6, #31
 80237ae:	9709      	str	r7, [sp, #36]	@ 0x24
 80237b0:	9f06      	ldr	r7, [sp, #24]
 80237b2:	0032      	movs	r2, r6
 80237b4:	1bc7      	subs	r7, r0, r7
 80237b6:	17fd      	asrs	r5, r7, #31
 80237b8:	950a      	str	r5, [sp, #40]	@ 0x28
 80237ba:	685d      	ldr	r5, [r3, #4]
 80237bc:	17f3      	asrs	r3, r6, #31
 80237be:	17e8      	asrs	r0, r5, #31
 80237c0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80237c2:	0020      	movs	r0, r4
 80237c4:	9108      	str	r1, [sp, #32]
 80237c6:	f7dc fefb 	bl	80005c0 <__aeabi_lmul>
 80237ca:	002a      	movs	r2, r5
 80237cc:	17eb      	asrs	r3, r5, #31
 80237ce:	910c      	str	r1, [sp, #48]	@ 0x30
 80237d0:	0038      	movs	r0, r7
 80237d2:	17f9      	asrs	r1, r7, #31
 80237d4:	f7dc fef4 	bl	80005c0 <__aeabi_lmul>
 80237d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80237da:	003a      	movs	r2, r7
 80237dc:	4684      	mov	ip, r0
 80237de:	4648      	mov	r0, r9
 80237e0:	4461      	add	r1, ip
 80237e2:	0049      	lsls	r1, r1, #1
 80237e4:	6001      	str	r1, [r0, #0]
 80237e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80237e8:	0030      	movs	r0, r6
 80237ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80237ec:	f7dc fee8 	bl	80005c0 <__aeabi_lmul>
 80237f0:	002a      	movs	r2, r5
 80237f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80237f4:	000e      	movs	r6, r1
 80237f6:	0020      	movs	r0, r4
 80237f8:	9908      	ldr	r1, [sp, #32]
 80237fa:	f7dc fee1 	bl	80005c0 <__aeabi_lmul>
 80237fe:	464c      	mov	r4, r9
 8023800:	9d05      	ldr	r5, [sp, #20]
 8023802:	1a76      	subs	r6, r6, r1
 8023804:	9903      	ldr	r1, [sp, #12]
 8023806:	0076      	lsls	r6, r6, #1
 8023808:	6066      	str	r6, [r4, #4]
 802380a:	1b4c      	subs	r4, r1, r5
 802380c:	9e06      	ldr	r6, [sp, #24]
 802380e:	17e1      	asrs	r1, r4, #31
 8023810:	9103      	str	r1, [sp, #12]
 8023812:	9902      	ldr	r1, [sp, #8]
 8023814:	46b4      	mov	ip, r6
 8023816:	680f      	ldr	r7, [r1, #0]
 8023818:	9804      	ldr	r0, [sp, #16]
 802381a:	17fd      	asrs	r5, r7, #31
 802381c:	002b      	movs	r3, r5
 802381e:	684e      	ldr	r6, [r1, #4]
 8023820:	4460      	add	r0, ip
 8023822:	0005      	movs	r5, r0
 8023824:	17c0      	asrs	r0, r0, #31
 8023826:	9005      	str	r0, [sp, #20]
 8023828:	17f0      	asrs	r0, r6, #31
 802382a:	9006      	str	r0, [sp, #24]
 802382c:	003a      	movs	r2, r7
 802382e:	0020      	movs	r0, r4
 8023830:	17e1      	asrs	r1, r4, #31
 8023832:	9304      	str	r3, [sp, #16]
 8023834:	f7dc fec4 	bl	80005c0 <__aeabi_lmul>
 8023838:	0032      	movs	r2, r6
 802383a:	9108      	str	r1, [sp, #32]
 802383c:	17f3      	asrs	r3, r6, #31
 802383e:	0028      	movs	r0, r5
 8023840:	17e9      	asrs	r1, r5, #31
 8023842:	f7dc febd 	bl	80005c0 <__aeabi_lmul>
 8023846:	9808      	ldr	r0, [sp, #32]
 8023848:	002a      	movs	r2, r5
 802384a:	4684      	mov	ip, r0
 802384c:	4650      	mov	r0, sl
 802384e:	4461      	add	r1, ip
 8023850:	0049      	lsls	r1, r1, #1
 8023852:	6001      	str	r1, [r0, #0]
 8023854:	9b05      	ldr	r3, [sp, #20]
 8023856:	9904      	ldr	r1, [sp, #16]
 8023858:	0038      	movs	r0, r7
 802385a:	f7dc feb1 	bl	80005c0 <__aeabi_lmul>
 802385e:	0020      	movs	r0, r4
 8023860:	2408      	movs	r4, #8
 8023862:	000d      	movs	r5, r1
 8023864:	0032      	movs	r2, r6
 8023866:	9b06      	ldr	r3, [sp, #24]
 8023868:	9903      	ldr	r1, [sp, #12]
 802386a:	f7dc fea9 	bl	80005c0 <__aeabi_lmul>
 802386e:	46a4      	mov	ip, r4
 8023870:	4650      	mov	r0, sl
 8023872:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023874:	44e3      	add	fp, ip
 8023876:	44e0      	add	r8, ip
 8023878:	44e1      	add	r9, ip
 802387a:	44e2      	add	sl, ip
 802387c:	46a4      	mov	ip, r4
 802387e:	1a6d      	subs	r5, r5, r1
 8023880:	006d      	lsls	r5, r5, #1
 8023882:	9a01      	ldr	r2, [sp, #4]
 8023884:	6045      	str	r5, [r0, #4]
 8023886:	9807      	ldr	r0, [sp, #28]
 8023888:	4462      	add	r2, ip
 802388a:	3801      	subs	r0, #1
 802388c:	9201      	str	r2, [sp, #4]
 802388e:	9007      	str	r0, [sp, #28]
 8023890:	9b00      	ldr	r3, [sp, #0]
 8023892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023894:	9902      	ldr	r1, [sp, #8]
 8023896:	4694      	mov	ip, r2
 8023898:	4463      	add	r3, ip
 802389a:	9300      	str	r3, [sp, #0]
 802389c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802389e:	469c      	mov	ip, r3
 80238a0:	4461      	add	r1, ip
 80238a2:	9102      	str	r1, [sp, #8]
 80238a4:	2800      	cmp	r0, #0
 80238a6:	d000      	beq.n	80238aa <arm_radix4_butterfly_q31+0x232>
 80238a8:	e70e      	b.n	80236c8 <arm_radix4_butterfly_q31+0x50>
 80238aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80238ac:	009b      	lsls	r3, r3, #2
 80238ae:	931f      	str	r3, [sp, #124]	@ 0x7c
 80238b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80238b2:	9320      	str	r3, [sp, #128]	@ 0x80
 80238b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80238b6:	2b04      	cmp	r3, #4
 80238b8:	d800      	bhi.n	80238bc <arm_radix4_butterfly_q31+0x244>
 80238ba:	e180      	b.n	8023bbe <arm_radix4_butterfly_q31+0x546>
 80238bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80238be:	0893      	lsrs	r3, r2, #2
 80238c0:	1e59      	subs	r1, r3, #1
 80238c2:	9321      	str	r3, [sp, #132]	@ 0x84
 80238c4:	00db      	lsls	r3, r3, #3
 80238c6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80238c8:	00d3      	lsls	r3, r2, #3
 80238ca:	9300      	str	r3, [sp, #0]
 80238cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80238ce:	911a      	str	r1, [sp, #104]	@ 0x68
 80238d0:	00da      	lsls	r2, r3, #3
 80238d2:	921e      	str	r2, [sp, #120]	@ 0x78
 80238d4:	011a      	lsls	r2, r3, #4
 80238d6:	921d      	str	r2, [sp, #116]	@ 0x74
 80238d8:	001a      	movs	r2, r3
 80238da:	4694      	mov	ip, r2
 80238dc:	005b      	lsls	r3, r3, #1
 80238de:	4463      	add	r3, ip
 80238e0:	00db      	lsls	r3, r3, #3
 80238e2:	931c      	str	r3, [sp, #112]	@ 0x70
 80238e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80238e6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80238e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80238ea:	9318      	str	r3, [sp, #96]	@ 0x60
 80238ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80238ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80238f0:	2300      	movs	r3, #0
 80238f2:	9315      	str	r3, [sp, #84]	@ 0x54
 80238f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80238f6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80238f8:	681a      	ldr	r2, [r3, #0]
 80238fa:	685b      	ldr	r3, [r3, #4]
 80238fc:	9205      	str	r2, [sp, #20]
 80238fe:	9306      	str	r3, [sp, #24]
 8023900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023902:	468c      	mov	ip, r1
 8023904:	681a      	ldr	r2, [r3, #0]
 8023906:	685b      	ldr	r3, [r3, #4]
 8023908:	9207      	str	r2, [sp, #28]
 802390a:	9308      	str	r3, [sp, #32]
 802390c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802390e:	681a      	ldr	r2, [r3, #0]
 8023910:	685b      	ldr	r3, [r3, #4]
 8023912:	9209      	str	r2, [sp, #36]	@ 0x24
 8023914:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023916:	930a      	str	r3, [sp, #40]	@ 0x28
 8023918:	0013      	movs	r3, r2
 802391a:	4463      	add	r3, ip
 802391c:	4698      	mov	r8, r3
 802391e:	0013      	movs	r3, r2
 8023920:	4442      	add	r2, r8
 8023922:	4691      	mov	r9, r2
 8023924:	001a      	movs	r2, r3
 8023926:	444a      	add	r2, r9
 8023928:	4692      	mov	sl, r2
 802392a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802392c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802392e:	4293      	cmp	r3, r2
 8023930:	d800      	bhi.n	8023934 <arm_radix4_butterfly_q31+0x2bc>
 8023932:	e0dd      	b.n	8023af0 <arm_radix4_butterfly_q31+0x478>
 8023934:	4694      	mov	ip, r2
 8023936:	468b      	mov	fp, r1
 8023938:	4644      	mov	r4, r8
 802393a:	4655      	mov	r5, sl
 802393c:	9b07      	ldr	r3, [sp, #28]
 802393e:	17db      	asrs	r3, r3, #31
 8023940:	930c      	str	r3, [sp, #48]	@ 0x30
 8023942:	9b08      	ldr	r3, [sp, #32]
 8023944:	17db      	asrs	r3, r3, #31
 8023946:	930d      	str	r3, [sp, #52]	@ 0x34
 8023948:	9b05      	ldr	r3, [sp, #20]
 802394a:	17db      	asrs	r3, r3, #31
 802394c:	930e      	str	r3, [sp, #56]	@ 0x38
 802394e:	9b06      	ldr	r3, [sp, #24]
 8023950:	17db      	asrs	r3, r3, #31
 8023952:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023956:	17db      	asrs	r3, r3, #31
 8023958:	9310      	str	r3, [sp, #64]	@ 0x40
 802395a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802395c:	17db      	asrs	r3, r3, #31
 802395e:	9311      	str	r3, [sp, #68]	@ 0x44
 8023960:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023962:	4463      	add	r3, ip
 8023964:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023966:	465b      	mov	r3, fp
 8023968:	4659      	mov	r1, fp
 802396a:	681a      	ldr	r2, [r3, #0]
 802396c:	464b      	mov	r3, r9
 802396e:	684f      	ldr	r7, [r1, #4]
 8023970:	4649      	mov	r1, r9
 8023972:	681b      	ldr	r3, [r3, #0]
 8023974:	18d6      	adds	r6, r2, r3
 8023976:	1ad3      	subs	r3, r2, r3
 8023978:	9301      	str	r3, [sp, #4]
 802397a:	684b      	ldr	r3, [r1, #4]
 802397c:	18f8      	adds	r0, r7, r3
 802397e:	1af9      	subs	r1, r7, r3
 8023980:	6827      	ldr	r7, [r4, #0]
 8023982:	9102      	str	r1, [sp, #8]
 8023984:	003a      	movs	r2, r7
 8023986:	682f      	ldr	r7, [r5, #0]
 8023988:	46bc      	mov	ip, r7
 802398a:	465f      	mov	r7, fp
 802398c:	4462      	add	r2, ip
 802398e:	18b3      	adds	r3, r6, r2
 8023990:	109b      	asrs	r3, r3, #2
 8023992:	603b      	str	r3, [r7, #0]
 8023994:	6867      	ldr	r7, [r4, #4]
 8023996:	1ab6      	subs	r6, r6, r2
 8023998:	46b8      	mov	r8, r7
 802399a:	686f      	ldr	r7, [r5, #4]
 802399c:	17f2      	asrs	r2, r6, #31
 802399e:	46bc      	mov	ip, r7
 80239a0:	44e0      	add	r8, ip
 80239a2:	4643      	mov	r3, r8
 80239a4:	465f      	mov	r7, fp
 80239a6:	18c1      	adds	r1, r0, r3
 80239a8:	1089      	asrs	r1, r1, #2
 80239aa:	6079      	str	r1, [r7, #4]
 80239ac:	9900      	ldr	r1, [sp, #0]
 80239ae:	4690      	mov	r8, r2
 80239b0:	468c      	mov	ip, r1
 80239b2:	6867      	ldr	r7, [r4, #4]
 80239b4:	6869      	ldr	r1, [r5, #4]
 80239b6:	44e3      	add	fp, ip
 80239b8:	1a7f      	subs	r7, r7, r1
 80239ba:	9703      	str	r7, [sp, #12]
 80239bc:	6829      	ldr	r1, [r5, #0]
 80239be:	6827      	ldr	r7, [r4, #0]
 80239c0:	1a7f      	subs	r7, r7, r1
 80239c2:	9704      	str	r7, [sp, #16]
 80239c4:	1ac7      	subs	r7, r0, r3
 80239c6:	17fa      	asrs	r2, r7, #31
 80239c8:	4692      	mov	sl, r2
 80239ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80239cc:	9a07      	ldr	r2, [sp, #28]
 80239ce:	0030      	movs	r0, r6
 80239d0:	4641      	mov	r1, r8
 80239d2:	f7dc fdf5 	bl	80005c0 <__aeabi_lmul>
 80239d6:	9a08      	ldr	r2, [sp, #32]
 80239d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80239da:	9112      	str	r1, [sp, #72]	@ 0x48
 80239dc:	0038      	movs	r0, r7
 80239de:	4651      	mov	r1, sl
 80239e0:	f7dc fdee 	bl	80005c0 <__aeabi_lmul>
 80239e4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80239e6:	9a07      	ldr	r2, [sp, #28]
 80239e8:	4684      	mov	ip, r0
 80239ea:	4461      	add	r1, ip
 80239ec:	1049      	asrs	r1, r1, #1
 80239ee:	6021      	str	r1, [r4, #0]
 80239f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80239f2:	0038      	movs	r0, r7
 80239f4:	4651      	mov	r1, sl
 80239f6:	f7dc fde3 	bl	80005c0 <__aeabi_lmul>
 80239fa:	9a08      	ldr	r2, [sp, #32]
 80239fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80239fe:	000f      	movs	r7, r1
 8023a00:	0030      	movs	r0, r6
 8023a02:	4641      	mov	r1, r8
 8023a04:	f7dc fddc 	bl	80005c0 <__aeabi_lmul>
 8023a08:	9b00      	ldr	r3, [sp, #0]
 8023a0a:	9a01      	ldr	r2, [sp, #4]
 8023a0c:	469c      	mov	ip, r3
 8023a0e:	9803      	ldr	r0, [sp, #12]
 8023a10:	1a7f      	subs	r7, r7, r1
 8023a12:	107f      	asrs	r7, r7, #1
 8023a14:	6067      	str	r7, [r4, #4]
 8023a16:	0016      	movs	r6, r2
 8023a18:	4464      	add	r4, ip
 8023a1a:	4684      	mov	ip, r0
 8023a1c:	4466      	add	r6, ip
 8023a1e:	17f2      	asrs	r2, r6, #31
 8023a20:	4690      	mov	r8, r2
 8023a22:	9902      	ldr	r1, [sp, #8]
 8023a24:	9f04      	ldr	r7, [sp, #16]
 8023a26:	0030      	movs	r0, r6
 8023a28:	1bcf      	subs	r7, r1, r7
 8023a2a:	17fa      	asrs	r2, r7, #31
 8023a2c:	4692      	mov	sl, r2
 8023a2e:	4641      	mov	r1, r8
 8023a30:	9a05      	ldr	r2, [sp, #20]
 8023a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023a34:	f7dc fdc4 	bl	80005c0 <__aeabi_lmul>
 8023a38:	9a06      	ldr	r2, [sp, #24]
 8023a3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023a3c:	9112      	str	r1, [sp, #72]	@ 0x48
 8023a3e:	0038      	movs	r0, r7
 8023a40:	4651      	mov	r1, sl
 8023a42:	f7dc fdbd 	bl	80005c0 <__aeabi_lmul>
 8023a46:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023a48:	9a05      	ldr	r2, [sp, #20]
 8023a4a:	4684      	mov	ip, r0
 8023a4c:	4648      	mov	r0, r9
 8023a4e:	4461      	add	r1, ip
 8023a50:	1049      	asrs	r1, r1, #1
 8023a52:	6001      	str	r1, [r0, #0]
 8023a54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023a56:	0038      	movs	r0, r7
 8023a58:	4651      	mov	r1, sl
 8023a5a:	f7dc fdb1 	bl	80005c0 <__aeabi_lmul>
 8023a5e:	9a06      	ldr	r2, [sp, #24]
 8023a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023a62:	000f      	movs	r7, r1
 8023a64:	0030      	movs	r0, r6
 8023a66:	4641      	mov	r1, r8
 8023a68:	f7dc fdaa 	bl	80005c0 <__aeabi_lmul>
 8023a6c:	464e      	mov	r6, r9
 8023a6e:	9a00      	ldr	r2, [sp, #0]
 8023a70:	9b01      	ldr	r3, [sp, #4]
 8023a72:	4694      	mov	ip, r2
 8023a74:	9803      	ldr	r0, [sp, #12]
 8023a76:	1a7f      	subs	r7, r7, r1
 8023a78:	107f      	asrs	r7, r7, #1
 8023a7a:	6077      	str	r7, [r6, #4]
 8023a7c:	1a1e      	subs	r6, r3, r0
 8023a7e:	9b04      	ldr	r3, [sp, #16]
 8023a80:	44e1      	add	r9, ip
 8023a82:	469c      	mov	ip, r3
 8023a84:	17f0      	asrs	r0, r6, #31
 8023a86:	4680      	mov	r8, r0
 8023a88:	9902      	ldr	r1, [sp, #8]
 8023a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023a8c:	4461      	add	r1, ip
 8023a8e:	17cb      	asrs	r3, r1, #31
 8023a90:	000f      	movs	r7, r1
 8023a92:	469a      	mov	sl, r3
 8023a94:	0030      	movs	r0, r6
 8023a96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023a98:	4641      	mov	r1, r8
 8023a9a:	f7dc fd91 	bl	80005c0 <__aeabi_lmul>
 8023a9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023aa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023aa2:	9101      	str	r1, [sp, #4]
 8023aa4:	0038      	movs	r0, r7
 8023aa6:	4651      	mov	r1, sl
 8023aa8:	f7dc fd8a 	bl	80005c0 <__aeabi_lmul>
 8023aac:	9801      	ldr	r0, [sp, #4]
 8023aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023ab0:	4684      	mov	ip, r0
 8023ab2:	4461      	add	r1, ip
 8023ab4:	1049      	asrs	r1, r1, #1
 8023ab6:	6029      	str	r1, [r5, #0]
 8023ab8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023aba:	0038      	movs	r0, r7
 8023abc:	4651      	mov	r1, sl
 8023abe:	f7dc fd7f 	bl	80005c0 <__aeabi_lmul>
 8023ac2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023ac4:	000f      	movs	r7, r1
 8023ac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023ac8:	0030      	movs	r0, r6
 8023aca:	4641      	mov	r1, r8
 8023acc:	f7dc fd78 	bl	80005c0 <__aeabi_lmul>
 8023ad0:	1a7f      	subs	r7, r7, r1
 8023ad2:	107f      	asrs	r7, r7, #1
 8023ad4:	606f      	str	r7, [r5, #4]
 8023ad6:	9a00      	ldr	r2, [sp, #0]
 8023ad8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023ada:	4694      	mov	ip, r2
 8023adc:	4465      	add	r5, ip
 8023ade:	468c      	mov	ip, r1
 8023ae0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023ae2:	0013      	movs	r3, r2
 8023ae4:	4462      	add	r2, ip
 8023ae6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023ae8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023aea:	429a      	cmp	r2, r3
 8023aec:	d900      	bls.n	8023af0 <arm_radix4_butterfly_q31+0x478>
 8023aee:	e73a      	b.n	8023966 <arm_radix4_butterfly_q31+0x2ee>
 8023af0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023af2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023af4:	468c      	mov	ip, r1
 8023af6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8023af8:	4462      	add	r2, ip
 8023afa:	468c      	mov	ip, r1
 8023afc:	9216      	str	r2, [sp, #88]	@ 0x58
 8023afe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023b00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023b02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023b04:	4462      	add	r2, ip
 8023b06:	468c      	mov	ip, r1
 8023b08:	9219      	str	r2, [sp, #100]	@ 0x64
 8023b0a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023b0c:	3301      	adds	r3, #1
 8023b0e:	4462      	add	r2, ip
 8023b10:	9218      	str	r2, [sp, #96]	@ 0x60
 8023b12:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8023b16:	3208      	adds	r2, #8
 8023b18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8023b1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023b1c:	4293      	cmp	r3, r2
 8023b1e:	d800      	bhi.n	8023b22 <arm_radix4_butterfly_q31+0x4aa>
 8023b20:	e6e8      	b.n	80238f4 <arm_radix4_butterfly_q31+0x27c>
 8023b22:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023b24:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023b26:	009b      	lsls	r3, r3, #2
 8023b28:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023b2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023b2c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023b2e:	089b      	lsrs	r3, r3, #2
 8023b30:	9320      	str	r3, [sp, #128]	@ 0x80
 8023b32:	2b04      	cmp	r3, #4
 8023b34:	d900      	bls.n	8023b38 <arm_radix4_butterfly_q31+0x4c0>
 8023b36:	e6c1      	b.n	80238bc <arm_radix4_butterfly_q31+0x244>
 8023b38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023b3a:	469a      	mov	sl, r3
 8023b3c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023b3e:	691c      	ldr	r4, [r3, #16]
 8023b40:	685a      	ldr	r2, [r3, #4]
 8023b42:	46a1      	mov	r9, r4
 8023b44:	4690      	mov	r8, r2
 8023b46:	6819      	ldr	r1, [r3, #0]
 8023b48:	689a      	ldr	r2, [r3, #8]
 8023b4a:	699f      	ldr	r7, [r3, #24]
 8023b4c:	188d      	adds	r5, r1, r2
 8023b4e:	444d      	add	r5, r9
 8023b50:	19ed      	adds	r5, r5, r7
 8023b52:	69de      	ldr	r6, [r3, #28]
 8023b54:	601d      	str	r5, [r3, #0]
 8023b56:	4645      	mov	r5, r8
 8023b58:	46b4      	mov	ip, r6
 8023b5a:	68d8      	ldr	r0, [r3, #12]
 8023b5c:	695c      	ldr	r4, [r3, #20]
 8023b5e:	182d      	adds	r5, r5, r0
 8023b60:	192d      	adds	r5, r5, r4
 8023b62:	4465      	add	r5, ip
 8023b64:	605d      	str	r5, [r3, #4]
 8023b66:	1a8d      	subs	r5, r1, r2
 8023b68:	444d      	add	r5, r9
 8023b6a:	1bed      	subs	r5, r5, r7
 8023b6c:	609d      	str	r5, [r3, #8]
 8023b6e:	4645      	mov	r5, r8
 8023b70:	1a2d      	subs	r5, r5, r0
 8023b72:	192d      	adds	r5, r5, r4
 8023b74:	1bad      	subs	r5, r5, r6
 8023b76:	464e      	mov	r6, r9
 8023b78:	60dd      	str	r5, [r3, #12]
 8023b7a:	180d      	adds	r5, r1, r0
 8023b7c:	1bad      	subs	r5, r5, r6
 8023b7e:	4666      	mov	r6, ip
 8023b80:	1bad      	subs	r5, r5, r6
 8023b82:	611d      	str	r5, [r3, #16]
 8023b84:	4645      	mov	r5, r8
 8023b86:	1aad      	subs	r5, r5, r2
 8023b88:	4442      	add	r2, r8
 8023b8a:	1b12      	subs	r2, r2, r4
 8023b8c:	1bd2      	subs	r2, r2, r7
 8023b8e:	1a08      	subs	r0, r1, r0
 8023b90:	61da      	str	r2, [r3, #28]
 8023b92:	4649      	mov	r1, r9
 8023b94:	2201      	movs	r2, #1
 8023b96:	1a41      	subs	r1, r0, r1
 8023b98:	4252      	negs	r2, r2
 8023b9a:	4461      	add	r1, ip
 8023b9c:	4694      	mov	ip, r2
 8023b9e:	44e2      	add	sl, ip
 8023ba0:	4652      	mov	r2, sl
 8023ba2:	1b2d      	subs	r5, r5, r4
 8023ba4:	19ed      	adds	r5, r5, r7
 8023ba6:	615d      	str	r5, [r3, #20]
 8023ba8:	6199      	str	r1, [r3, #24]
 8023baa:	3320      	adds	r3, #32
 8023bac:	2a00      	cmp	r2, #0
 8023bae:	d1c6      	bne.n	8023b3e <arm_radix4_butterfly_q31+0x4c6>
 8023bb0:	b027      	add	sp, #156	@ 0x9c
 8023bb2:	bc3c      	pop	{r2, r3, r4, r5}
 8023bb4:	4690      	mov	r8, r2
 8023bb6:	4699      	mov	r9, r3
 8023bb8:	46a2      	mov	sl, r4
 8023bba:	46ab      	mov	fp, r5
 8023bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bbe:	469a      	mov	sl, r3
 8023bc0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023bc2:	e7bc      	b.n	8023b3e <arm_radix4_butterfly_q31+0x4c6>

08023bc4 <arm_radix4_butterfly_inverse_q31>:
 8023bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bc6:	464d      	mov	r5, r9
 8023bc8:	4644      	mov	r4, r8
 8023bca:	465f      	mov	r7, fp
 8023bcc:	4656      	mov	r6, sl
 8023bce:	b4f0      	push	{r4, r5, r6, r7}
 8023bd0:	b0a7      	sub	sp, #156	@ 0x9c
 8023bd2:	469c      	mov	ip, r3
 8023bd4:	9114      	str	r1, [sp, #80]	@ 0x50
 8023bd6:	0889      	lsrs	r1, r1, #2
 8023bd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8023bda:	00cb      	lsls	r3, r1, #3
 8023bdc:	0015      	movs	r5, r2
 8023bde:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023be0:	18c2      	adds	r2, r0, r3
 8023be2:	000c      	movs	r4, r1
 8023be4:	9124      	str	r1, [sp, #144]	@ 0x90
 8023be6:	18d1      	adds	r1, r2, r3
 8023be8:	468b      	mov	fp, r1
 8023bea:	469a      	mov	sl, r3
 8023bec:	4663      	mov	r3, ip
 8023bee:	44da      	add	sl, fp
 8023bf0:	46d0      	mov	r8, sl
 8023bf2:	4681      	mov	r9, r0
 8023bf4:	4692      	mov	sl, r2
 8023bf6:	0119      	lsls	r1, r3, #4
 8023bf8:	910d      	str	r1, [sp, #52]	@ 0x34
 8023bfa:	00d9      	lsls	r1, r3, #3
 8023bfc:	005b      	lsls	r3, r3, #1
 8023bfe:	4463      	add	r3, ip
 8023c00:	910e      	str	r1, [sp, #56]	@ 0x38
 8023c02:	00d9      	lsls	r1, r3, #3
 8023c04:	9022      	str	r0, [sp, #136]	@ 0x88
 8023c06:	9025      	str	r0, [sp, #148]	@ 0x94
 8023c08:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023c0a:	9502      	str	r5, [sp, #8]
 8023c0c:	9500      	str	r5, [sp, #0]
 8023c0e:	9501      	str	r5, [sp, #4]
 8023c10:	9409      	str	r4, [sp, #36]	@ 0x24
 8023c12:	464b      	mov	r3, r9
 8023c14:	681b      	ldr	r3, [r3, #0]
 8023c16:	4652      	mov	r2, sl
 8023c18:	111c      	asrs	r4, r3, #4
 8023c1a:	465b      	mov	r3, fp
 8023c1c:	4648      	mov	r0, r9
 8023c1e:	681b      	ldr	r3, [r3, #0]
 8023c20:	6812      	ldr	r2, [r2, #0]
 8023c22:	6840      	ldr	r0, [r0, #4]
 8023c24:	111b      	asrs	r3, r3, #4
 8023c26:	18e7      	adds	r7, r4, r3
 8023c28:	1ae3      	subs	r3, r4, r3
 8023c2a:	1114      	asrs	r4, r2, #4
 8023c2c:	4642      	mov	r2, r8
 8023c2e:	1105      	asrs	r5, r0, #4
 8023c30:	4658      	mov	r0, fp
 8023c32:	6812      	ldr	r2, [r2, #0]
 8023c34:	6840      	ldr	r0, [r0, #4]
 8023c36:	9303      	str	r3, [sp, #12]
 8023c38:	1113      	asrs	r3, r2, #4
 8023c3a:	18e2      	adds	r2, r4, r3
 8023c3c:	1103      	asrs	r3, r0, #4
 8023c3e:	18ee      	adds	r6, r5, r3
 8023c40:	1ae8      	subs	r0, r5, r3
 8023c42:	464d      	mov	r5, r9
 8023c44:	18bb      	adds	r3, r7, r2
 8023c46:	602b      	str	r3, [r5, #0]
 8023c48:	4641      	mov	r1, r8
 8023c4a:	4655      	mov	r5, sl
 8023c4c:	6849      	ldr	r1, [r1, #4]
 8023c4e:	686d      	ldr	r5, [r5, #4]
 8023c50:	110b      	asrs	r3, r1, #4
 8023c52:	112d      	asrs	r5, r5, #4
 8023c54:	18eb      	adds	r3, r5, r3
 8023c56:	464d      	mov	r5, r9
 8023c58:	18f1      	adds	r1, r6, r3
 8023c5a:	6069      	str	r1, [r5, #4]
 8023c5c:	4655      	mov	r5, sl
 8023c5e:	686d      	ldr	r5, [r5, #4]
 8023c60:	9004      	str	r0, [sp, #16]
 8023c62:	112c      	asrs	r4, r5, #4
 8023c64:	4645      	mov	r5, r8
 8023c66:	686d      	ldr	r5, [r5, #4]
 8023c68:	1129      	asrs	r1, r5, #4
 8023c6a:	1a65      	subs	r5, r4, r1
 8023c6c:	4651      	mov	r1, sl
 8023c6e:	6809      	ldr	r1, [r1, #0]
 8023c70:	1abc      	subs	r4, r7, r2
 8023c72:	1108      	asrs	r0, r1, #4
 8023c74:	4641      	mov	r1, r8
 8023c76:	17e2      	asrs	r2, r4, #31
 8023c78:	6809      	ldr	r1, [r1, #0]
 8023c7a:	9207      	str	r2, [sp, #28]
 8023c7c:	9a01      	ldr	r2, [sp, #4]
 8023c7e:	1109      	asrs	r1, r1, #4
 8023c80:	6817      	ldr	r7, [r2, #0]
 8023c82:	1a41      	subs	r1, r0, r1
 8023c84:	9106      	str	r1, [sp, #24]
 8023c86:	0039      	movs	r1, r7
 8023c88:	17ff      	asrs	r7, r7, #31
 8023c8a:	0038      	movs	r0, r7
 8023c8c:	9505      	str	r5, [sp, #20]
 8023c8e:	1af5      	subs	r5, r6, r3
 8023c90:	17ef      	asrs	r7, r5, #31
 8023c92:	970b      	str	r7, [sp, #44]	@ 0x2c
 8023c94:	6857      	ldr	r7, [r2, #4]
 8023c96:	0003      	movs	r3, r0
 8023c98:	17fe      	asrs	r6, r7, #31
 8023c9a:	000a      	movs	r2, r1
 8023c9c:	9108      	str	r1, [sp, #32]
 8023c9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8023ca0:	17e1      	asrs	r1, r4, #31
 8023ca2:	0020      	movs	r0, r4
 8023ca4:	960c      	str	r6, [sp, #48]	@ 0x30
 8023ca6:	f7dc fc8b 	bl	80005c0 <__aeabi_lmul>
 8023caa:	003a      	movs	r2, r7
 8023cac:	17fb      	asrs	r3, r7, #31
 8023cae:	000e      	movs	r6, r1
 8023cb0:	0028      	movs	r0, r5
 8023cb2:	17e9      	asrs	r1, r5, #31
 8023cb4:	f7dc fc84 	bl	80005c0 <__aeabi_lmul>
 8023cb8:	4653      	mov	r3, sl
 8023cba:	1a76      	subs	r6, r6, r1
 8023cbc:	0076      	lsls	r6, r6, #1
 8023cbe:	601e      	str	r6, [r3, #0]
 8023cc0:	002a      	movs	r2, r5
 8023cc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023cc4:	9808      	ldr	r0, [sp, #32]
 8023cc6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023cc8:	f7dc fc7a 	bl	80005c0 <__aeabi_lmul>
 8023ccc:	003a      	movs	r2, r7
 8023cce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023cd0:	000d      	movs	r5, r1
 8023cd2:	0020      	movs	r0, r4
 8023cd4:	9907      	ldr	r1, [sp, #28]
 8023cd6:	f7dc fc73 	bl	80005c0 <__aeabi_lmul>
 8023cda:	4657      	mov	r7, sl
 8023cdc:	186d      	adds	r5, r5, r1
 8023cde:	006d      	lsls	r5, r5, #1
 8023ce0:	607d      	str	r5, [r7, #4]
 8023ce2:	9b03      	ldr	r3, [sp, #12]
 8023ce4:	9e06      	ldr	r6, [sp, #24]
 8023ce6:	9d05      	ldr	r5, [sp, #20]
 8023ce8:	46b4      	mov	ip, r6
 8023cea:	1b5d      	subs	r5, r3, r5
 8023cec:	9b00      	ldr	r3, [sp, #0]
 8023cee:	17ef      	asrs	r7, r5, #31
 8023cf0:	0039      	movs	r1, r7
 8023cf2:	681f      	ldr	r7, [r3, #0]
 8023cf4:	17fc      	asrs	r4, r7, #31
 8023cf6:	0020      	movs	r0, r4
 8023cf8:	9c04      	ldr	r4, [sp, #16]
 8023cfa:	4464      	add	r4, ip
 8023cfc:	17e6      	asrs	r6, r4, #31
 8023cfe:	9407      	str	r4, [sp, #28]
 8023d00:	9608      	str	r6, [sp, #32]
 8023d02:	685e      	ldr	r6, [r3, #4]
 8023d04:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023d06:	17f2      	asrs	r2, r6, #31
 8023d08:	0003      	movs	r3, r0
 8023d0a:	920c      	str	r2, [sp, #48]	@ 0x30
 8023d0c:	0028      	movs	r0, r5
 8023d0e:	003a      	movs	r2, r7
 8023d10:	910a      	str	r1, [sp, #40]	@ 0x28
 8023d12:	f7dc fc55 	bl	80005c0 <__aeabi_lmul>
 8023d16:	0032      	movs	r2, r6
 8023d18:	17f3      	asrs	r3, r6, #31
 8023d1a:	9807      	ldr	r0, [sp, #28]
 8023d1c:	000c      	movs	r4, r1
 8023d1e:	9908      	ldr	r1, [sp, #32]
 8023d20:	f7dc fc4e 	bl	80005c0 <__aeabi_lmul>
 8023d24:	4658      	mov	r0, fp
 8023d26:	1a64      	subs	r4, r4, r1
 8023d28:	0064      	lsls	r4, r4, #1
 8023d2a:	9a07      	ldr	r2, [sp, #28]
 8023d2c:	6004      	str	r4, [r0, #0]
 8023d2e:	9b08      	ldr	r3, [sp, #32]
 8023d30:	0038      	movs	r0, r7
 8023d32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023d34:	f7dc fc44 	bl	80005c0 <__aeabi_lmul>
 8023d38:	0032      	movs	r2, r6
 8023d3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023d3c:	000c      	movs	r4, r1
 8023d3e:	0028      	movs	r0, r5
 8023d40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023d42:	f7dc fc3d 	bl	80005c0 <__aeabi_lmul>
 8023d46:	9d05      	ldr	r5, [sp, #20]
 8023d48:	465f      	mov	r7, fp
 8023d4a:	46ac      	mov	ip, r5
 8023d4c:	1864      	adds	r4, r4, r1
 8023d4e:	9903      	ldr	r1, [sp, #12]
 8023d50:	0064      	lsls	r4, r4, #1
 8023d52:	4461      	add	r1, ip
 8023d54:	607c      	str	r4, [r7, #4]
 8023d56:	000c      	movs	r4, r1
 8023d58:	17c9      	asrs	r1, r1, #31
 8023d5a:	9105      	str	r1, [sp, #20]
 8023d5c:	9902      	ldr	r1, [sp, #8]
 8023d5e:	9804      	ldr	r0, [sp, #16]
 8023d60:	680d      	ldr	r5, [r1, #0]
 8023d62:	9e06      	ldr	r6, [sp, #24]
 8023d64:	002b      	movs	r3, r5
 8023d66:	17ed      	asrs	r5, r5, #31
 8023d68:	684f      	ldr	r7, [r1, #4]
 8023d6a:	9503      	str	r5, [sp, #12]
 8023d6c:	1b85      	subs	r5, r0, r6
 8023d6e:	17e8      	asrs	r0, r5, #31
 8023d70:	001a      	movs	r2, r3
 8023d72:	9006      	str	r0, [sp, #24]
 8023d74:	17fe      	asrs	r6, r7, #31
 8023d76:	9304      	str	r3, [sp, #16]
 8023d78:	0020      	movs	r0, r4
 8023d7a:	9b03      	ldr	r3, [sp, #12]
 8023d7c:	17e1      	asrs	r1, r4, #31
 8023d7e:	9607      	str	r6, [sp, #28]
 8023d80:	f7dc fc1e 	bl	80005c0 <__aeabi_lmul>
 8023d84:	003a      	movs	r2, r7
 8023d86:	000e      	movs	r6, r1
 8023d88:	17fb      	asrs	r3, r7, #31
 8023d8a:	0028      	movs	r0, r5
 8023d8c:	17e9      	asrs	r1, r5, #31
 8023d8e:	f7dc fc17 	bl	80005c0 <__aeabi_lmul>
 8023d92:	4640      	mov	r0, r8
 8023d94:	1a76      	subs	r6, r6, r1
 8023d96:	0076      	lsls	r6, r6, #1
 8023d98:	002a      	movs	r2, r5
 8023d9a:	9b06      	ldr	r3, [sp, #24]
 8023d9c:	6006      	str	r6, [r0, #0]
 8023d9e:	9903      	ldr	r1, [sp, #12]
 8023da0:	9804      	ldr	r0, [sp, #16]
 8023da2:	f7dc fc0d 	bl	80005c0 <__aeabi_lmul>
 8023da6:	0020      	movs	r0, r4
 8023da8:	2408      	movs	r4, #8
 8023daa:	9b07      	ldr	r3, [sp, #28]
 8023dac:	000d      	movs	r5, r1
 8023dae:	003a      	movs	r2, r7
 8023db0:	9905      	ldr	r1, [sp, #20]
 8023db2:	f7dc fc05 	bl	80005c0 <__aeabi_lmul>
 8023db6:	4640      	mov	r0, r8
 8023db8:	46a4      	mov	ip, r4
 8023dba:	186d      	adds	r5, r5, r1
 8023dbc:	006d      	lsls	r5, r5, #1
 8023dbe:	6045      	str	r5, [r0, #4]
 8023dc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023dc2:	44e1      	add	r9, ip
 8023dc4:	3801      	subs	r0, #1
 8023dc6:	9009      	str	r0, [sp, #36]	@ 0x24
 8023dc8:	9a01      	ldr	r2, [sp, #4]
 8023dca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023dcc:	44e2      	add	sl, ip
 8023dce:	44e3      	add	fp, ip
 8023dd0:	44e0      	add	r8, ip
 8023dd2:	46a4      	mov	ip, r4
 8023dd4:	4462      	add	r2, ip
 8023dd6:	9201      	str	r2, [sp, #4]
 8023dd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023dda:	9b00      	ldr	r3, [sp, #0]
 8023ddc:	4694      	mov	ip, r2
 8023dde:	4463      	add	r3, ip
 8023de0:	9300      	str	r3, [sp, #0]
 8023de2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023de4:	9902      	ldr	r1, [sp, #8]
 8023de6:	469c      	mov	ip, r3
 8023de8:	4461      	add	r1, ip
 8023dea:	9102      	str	r1, [sp, #8]
 8023dec:	2800      	cmp	r0, #0
 8023dee:	d000      	beq.n	8023df2 <arm_radix4_butterfly_inverse_q31+0x22e>
 8023df0:	e70f      	b.n	8023c12 <arm_radix4_butterfly_inverse_q31+0x4e>
 8023df2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023df4:	009b      	lsls	r3, r3, #2
 8023df6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023df8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023dfa:	9320      	str	r3, [sp, #128]	@ 0x80
 8023dfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023dfe:	2b04      	cmp	r3, #4
 8023e00:	d800      	bhi.n	8023e04 <arm_radix4_butterfly_inverse_q31+0x240>
 8023e02:	e17c      	b.n	80240fe <arm_radix4_butterfly_inverse_q31+0x53a>
 8023e04:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023e06:	0893      	lsrs	r3, r2, #2
 8023e08:	1e59      	subs	r1, r3, #1
 8023e0a:	9321      	str	r3, [sp, #132]	@ 0x84
 8023e0c:	00db      	lsls	r3, r3, #3
 8023e0e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023e10:	00d3      	lsls	r3, r2, #3
 8023e12:	9300      	str	r3, [sp, #0]
 8023e14:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023e16:	911a      	str	r1, [sp, #104]	@ 0x68
 8023e18:	00da      	lsls	r2, r3, #3
 8023e1a:	921e      	str	r2, [sp, #120]	@ 0x78
 8023e1c:	011a      	lsls	r2, r3, #4
 8023e1e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023e20:	001a      	movs	r2, r3
 8023e22:	4694      	mov	ip, r2
 8023e24:	005b      	lsls	r3, r3, #1
 8023e26:	4463      	add	r3, ip
 8023e28:	00db      	lsls	r3, r3, #3
 8023e2a:	931c      	str	r3, [sp, #112]	@ 0x70
 8023e2c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023e2e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023e30:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023e32:	9318      	str	r3, [sp, #96]	@ 0x60
 8023e34:	9319      	str	r3, [sp, #100]	@ 0x64
 8023e36:	9316      	str	r3, [sp, #88]	@ 0x58
 8023e38:	2300      	movs	r3, #0
 8023e3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8023e3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023e3e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023e40:	681a      	ldr	r2, [r3, #0]
 8023e42:	685b      	ldr	r3, [r3, #4]
 8023e44:	9205      	str	r2, [sp, #20]
 8023e46:	9306      	str	r3, [sp, #24]
 8023e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023e4a:	468c      	mov	ip, r1
 8023e4c:	681a      	ldr	r2, [r3, #0]
 8023e4e:	685b      	ldr	r3, [r3, #4]
 8023e50:	9207      	str	r2, [sp, #28]
 8023e52:	9308      	str	r3, [sp, #32]
 8023e54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023e56:	681a      	ldr	r2, [r3, #0]
 8023e58:	685b      	ldr	r3, [r3, #4]
 8023e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8023e5c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023e60:	0013      	movs	r3, r2
 8023e62:	4463      	add	r3, ip
 8023e64:	4698      	mov	r8, r3
 8023e66:	0013      	movs	r3, r2
 8023e68:	4442      	add	r2, r8
 8023e6a:	4691      	mov	r9, r2
 8023e6c:	001a      	movs	r2, r3
 8023e6e:	444a      	add	r2, r9
 8023e70:	4692      	mov	sl, r2
 8023e72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023e74:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023e76:	4293      	cmp	r3, r2
 8023e78:	d800      	bhi.n	8023e7c <arm_radix4_butterfly_inverse_q31+0x2b8>
 8023e7a:	e0d9      	b.n	8024030 <arm_radix4_butterfly_inverse_q31+0x46c>
 8023e7c:	4694      	mov	ip, r2
 8023e7e:	4644      	mov	r4, r8
 8023e80:	4655      	mov	r5, sl
 8023e82:	4688      	mov	r8, r1
 8023e84:	9b07      	ldr	r3, [sp, #28]
 8023e86:	17db      	asrs	r3, r3, #31
 8023e88:	930c      	str	r3, [sp, #48]	@ 0x30
 8023e8a:	9b08      	ldr	r3, [sp, #32]
 8023e8c:	17db      	asrs	r3, r3, #31
 8023e8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023e90:	9b05      	ldr	r3, [sp, #20]
 8023e92:	17db      	asrs	r3, r3, #31
 8023e94:	930e      	str	r3, [sp, #56]	@ 0x38
 8023e96:	9b06      	ldr	r3, [sp, #24]
 8023e98:	17db      	asrs	r3, r3, #31
 8023e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e9e:	17db      	asrs	r3, r3, #31
 8023ea0:	9310      	str	r3, [sp, #64]	@ 0x40
 8023ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ea4:	17db      	asrs	r3, r3, #31
 8023ea6:	9311      	str	r3, [sp, #68]	@ 0x44
 8023ea8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023eaa:	4463      	add	r3, ip
 8023eac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023eae:	4643      	mov	r3, r8
 8023eb0:	4641      	mov	r1, r8
 8023eb2:	681a      	ldr	r2, [r3, #0]
 8023eb4:	464b      	mov	r3, r9
 8023eb6:	684f      	ldr	r7, [r1, #4]
 8023eb8:	4649      	mov	r1, r9
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	18d6      	adds	r6, r2, r3
 8023ebe:	1ad3      	subs	r3, r2, r3
 8023ec0:	9301      	str	r3, [sp, #4]
 8023ec2:	684b      	ldr	r3, [r1, #4]
 8023ec4:	1af9      	subs	r1, r7, r3
 8023ec6:	9102      	str	r1, [sp, #8]
 8023ec8:	6829      	ldr	r1, [r5, #0]
 8023eca:	18f8      	adds	r0, r7, r3
 8023ecc:	468c      	mov	ip, r1
 8023ece:	6827      	ldr	r7, [r4, #0]
 8023ed0:	4467      	add	r7, ip
 8023ed2:	003a      	movs	r2, r7
 8023ed4:	19f3      	adds	r3, r6, r7
 8023ed6:	4647      	mov	r7, r8
 8023ed8:	109b      	asrs	r3, r3, #2
 8023eda:	603b      	str	r3, [r7, #0]
 8023edc:	6869      	ldr	r1, [r5, #4]
 8023ede:	6867      	ldr	r7, [r4, #4]
 8023ee0:	468c      	mov	ip, r1
 8023ee2:	4467      	add	r7, ip
 8023ee4:	003b      	movs	r3, r7
 8023ee6:	19c1      	adds	r1, r0, r7
 8023ee8:	4647      	mov	r7, r8
 8023eea:	1ab6      	subs	r6, r6, r2
 8023eec:	1089      	asrs	r1, r1, #2
 8023eee:	6079      	str	r1, [r7, #4]
 8023ef0:	17f2      	asrs	r2, r6, #31
 8023ef2:	9900      	ldr	r1, [sp, #0]
 8023ef4:	4692      	mov	sl, r2
 8023ef6:	468c      	mov	ip, r1
 8023ef8:	6867      	ldr	r7, [r4, #4]
 8023efa:	6869      	ldr	r1, [r5, #4]
 8023efc:	44e0      	add	r8, ip
 8023efe:	1a7f      	subs	r7, r7, r1
 8023f00:	9703      	str	r7, [sp, #12]
 8023f02:	6821      	ldr	r1, [r4, #0]
 8023f04:	682f      	ldr	r7, [r5, #0]
 8023f06:	1bc9      	subs	r1, r1, r7
 8023f08:	1ac7      	subs	r7, r0, r3
 8023f0a:	17fa      	asrs	r2, r7, #31
 8023f0c:	4693      	mov	fp, r2
 8023f0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f10:	9a07      	ldr	r2, [sp, #28]
 8023f12:	9104      	str	r1, [sp, #16]
 8023f14:	0030      	movs	r0, r6
 8023f16:	4651      	mov	r1, sl
 8023f18:	f7dc fb52 	bl	80005c0 <__aeabi_lmul>
 8023f1c:	9a08      	ldr	r2, [sp, #32]
 8023f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023f20:	9112      	str	r1, [sp, #72]	@ 0x48
 8023f22:	0038      	movs	r0, r7
 8023f24:	4659      	mov	r1, fp
 8023f26:	f7dc fb4b 	bl	80005c0 <__aeabi_lmul>
 8023f2a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023f2c:	9a07      	ldr	r2, [sp, #28]
 8023f2e:	1a41      	subs	r1, r0, r1
 8023f30:	1049      	asrs	r1, r1, #1
 8023f32:	6021      	str	r1, [r4, #0]
 8023f34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f36:	0038      	movs	r0, r7
 8023f38:	4659      	mov	r1, fp
 8023f3a:	f7dc fb41 	bl	80005c0 <__aeabi_lmul>
 8023f3e:	9a08      	ldr	r2, [sp, #32]
 8023f40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023f42:	000f      	movs	r7, r1
 8023f44:	0030      	movs	r0, r6
 8023f46:	4651      	mov	r1, sl
 8023f48:	f7dc fb3a 	bl	80005c0 <__aeabi_lmul>
 8023f4c:	9b00      	ldr	r3, [sp, #0]
 8023f4e:	187f      	adds	r7, r7, r1
 8023f50:	469c      	mov	ip, r3
 8023f52:	107f      	asrs	r7, r7, #1
 8023f54:	6067      	str	r7, [r4, #4]
 8023f56:	9a01      	ldr	r2, [sp, #4]
 8023f58:	9f03      	ldr	r7, [sp, #12]
 8023f5a:	9802      	ldr	r0, [sp, #8]
 8023f5c:	1bd7      	subs	r7, r2, r7
 8023f5e:	17fe      	asrs	r6, r7, #31
 8023f60:	0031      	movs	r1, r6
 8023f62:	9e04      	ldr	r6, [sp, #16]
 8023f64:	4682      	mov	sl, r0
 8023f66:	4464      	add	r4, ip
 8023f68:	46b4      	mov	ip, r6
 8023f6a:	44e2      	add	sl, ip
 8023f6c:	4652      	mov	r2, sl
 8023f6e:	17d2      	asrs	r2, r2, #31
 8023f70:	4693      	mov	fp, r2
 8023f72:	0038      	movs	r0, r7
 8023f74:	9a05      	ldr	r2, [sp, #20]
 8023f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023f78:	9112      	str	r1, [sp, #72]	@ 0x48
 8023f7a:	f7dc fb21 	bl	80005c0 <__aeabi_lmul>
 8023f7e:	9a06      	ldr	r2, [sp, #24]
 8023f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023f82:	000e      	movs	r6, r1
 8023f84:	4650      	mov	r0, sl
 8023f86:	4659      	mov	r1, fp
 8023f88:	f7dc fb1a 	bl	80005c0 <__aeabi_lmul>
 8023f8c:	4648      	mov	r0, r9
 8023f8e:	1a76      	subs	r6, r6, r1
 8023f90:	1076      	asrs	r6, r6, #1
 8023f92:	6006      	str	r6, [r0, #0]
 8023f94:	9a05      	ldr	r2, [sp, #20]
 8023f96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023f98:	4650      	mov	r0, sl
 8023f9a:	4659      	mov	r1, fp
 8023f9c:	f7dc fb10 	bl	80005c0 <__aeabi_lmul>
 8023fa0:	9a06      	ldr	r2, [sp, #24]
 8023fa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023fa4:	000e      	movs	r6, r1
 8023fa6:	0038      	movs	r0, r7
 8023fa8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023faa:	f7dc fb09 	bl	80005c0 <__aeabi_lmul>
 8023fae:	9a00      	ldr	r2, [sp, #0]
 8023fb0:	9f03      	ldr	r7, [sp, #12]
 8023fb2:	4694      	mov	ip, r2
 8023fb4:	1876      	adds	r6, r6, r1
 8023fb6:	4649      	mov	r1, r9
 8023fb8:	44e1      	add	r9, ip
 8023fba:	46bc      	mov	ip, r7
 8023fbc:	9b01      	ldr	r3, [sp, #4]
 8023fbe:	1076      	asrs	r6, r6, #1
 8023fc0:	4463      	add	r3, ip
 8023fc2:	17df      	asrs	r7, r3, #31
 8023fc4:	604e      	str	r6, [r1, #4]
 8023fc6:	46ba      	mov	sl, r7
 8023fc8:	001e      	movs	r6, r3
 8023fca:	9802      	ldr	r0, [sp, #8]
 8023fcc:	9b04      	ldr	r3, [sp, #16]
 8023fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023fd0:	1ac7      	subs	r7, r0, r3
 8023fd2:	17fb      	asrs	r3, r7, #31
 8023fd4:	469b      	mov	fp, r3
 8023fd6:	0030      	movs	r0, r6
 8023fd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023fda:	4651      	mov	r1, sl
 8023fdc:	f7dc faf0 	bl	80005c0 <__aeabi_lmul>
 8023fe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023fe2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023fe4:	9101      	str	r1, [sp, #4]
 8023fe6:	0038      	movs	r0, r7
 8023fe8:	4659      	mov	r1, fp
 8023fea:	f7dc fae9 	bl	80005c0 <__aeabi_lmul>
 8023fee:	9801      	ldr	r0, [sp, #4]
 8023ff0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023ff2:	1a41      	subs	r1, r0, r1
 8023ff4:	1049      	asrs	r1, r1, #1
 8023ff6:	6029      	str	r1, [r5, #0]
 8023ff8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023ffa:	0038      	movs	r0, r7
 8023ffc:	4659      	mov	r1, fp
 8023ffe:	f7dc fadf 	bl	80005c0 <__aeabi_lmul>
 8024002:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024004:	000f      	movs	r7, r1
 8024006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024008:	0030      	movs	r0, r6
 802400a:	4651      	mov	r1, sl
 802400c:	f7dc fad8 	bl	80005c0 <__aeabi_lmul>
 8024010:	187f      	adds	r7, r7, r1
 8024012:	107f      	asrs	r7, r7, #1
 8024014:	606f      	str	r7, [r5, #4]
 8024016:	9a00      	ldr	r2, [sp, #0]
 8024018:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802401a:	4694      	mov	ip, r2
 802401c:	4465      	add	r5, ip
 802401e:	468c      	mov	ip, r1
 8024020:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024022:	0013      	movs	r3, r2
 8024024:	4462      	add	r2, ip
 8024026:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024028:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802402a:	429a      	cmp	r2, r3
 802402c:	d900      	bls.n	8024030 <arm_radix4_butterfly_inverse_q31+0x46c>
 802402e:	e73e      	b.n	8023eae <arm_radix4_butterfly_inverse_q31+0x2ea>
 8024030:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024032:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024034:	468c      	mov	ip, r1
 8024036:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024038:	4462      	add	r2, ip
 802403a:	468c      	mov	ip, r1
 802403c:	9216      	str	r2, [sp, #88]	@ 0x58
 802403e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024040:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8024042:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024044:	4462      	add	r2, ip
 8024046:	468c      	mov	ip, r1
 8024048:	9219      	str	r2, [sp, #100]	@ 0x64
 802404a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802404c:	3301      	adds	r3, #1
 802404e:	4462      	add	r2, ip
 8024050:	9218      	str	r2, [sp, #96]	@ 0x60
 8024052:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8024054:	9315      	str	r3, [sp, #84]	@ 0x54
 8024056:	3208      	adds	r2, #8
 8024058:	9217      	str	r2, [sp, #92]	@ 0x5c
 802405a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802405c:	4293      	cmp	r3, r2
 802405e:	d800      	bhi.n	8024062 <arm_radix4_butterfly_inverse_q31+0x49e>
 8024060:	e6ec      	b.n	8023e3c <arm_radix4_butterfly_inverse_q31+0x278>
 8024062:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024064:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024066:	009b      	lsls	r3, r3, #2
 8024068:	931f      	str	r3, [sp, #124]	@ 0x7c
 802406a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802406c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802406e:	089b      	lsrs	r3, r3, #2
 8024070:	9320      	str	r3, [sp, #128]	@ 0x80
 8024072:	2b04      	cmp	r3, #4
 8024074:	d900      	bls.n	8024078 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8024076:	e6c5      	b.n	8023e04 <arm_radix4_butterfly_inverse_q31+0x240>
 8024078:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802407a:	469a      	mov	sl, r3
 802407c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802407e:	681a      	ldr	r2, [r3, #0]
 8024080:	6918      	ldr	r0, [r3, #16]
 8024082:	4691      	mov	r9, r2
 8024084:	464c      	mov	r4, r9
 8024086:	4680      	mov	r8, r0
 8024088:	69de      	ldr	r6, [r3, #28]
 802408a:	689d      	ldr	r5, [r3, #8]
 802408c:	46b4      	mov	ip, r6
 802408e:	6998      	ldr	r0, [r3, #24]
 8024090:	1964      	adds	r4, r4, r5
 8024092:	6859      	ldr	r1, [r3, #4]
 8024094:	68da      	ldr	r2, [r3, #12]
 8024096:	4444      	add	r4, r8
 8024098:	695f      	ldr	r7, [r3, #20]
 802409a:	1824      	adds	r4, r4, r0
 802409c:	601c      	str	r4, [r3, #0]
 802409e:	188c      	adds	r4, r1, r2
 80240a0:	19e4      	adds	r4, r4, r7
 80240a2:	4464      	add	r4, ip
 80240a4:	605c      	str	r4, [r3, #4]
 80240a6:	464c      	mov	r4, r9
 80240a8:	1b64      	subs	r4, r4, r5
 80240aa:	4444      	add	r4, r8
 80240ac:	1a24      	subs	r4, r4, r0
 80240ae:	609c      	str	r4, [r3, #8]
 80240b0:	1a8c      	subs	r4, r1, r2
 80240b2:	19e4      	adds	r4, r4, r7
 80240b4:	1ba4      	subs	r4, r4, r6
 80240b6:	60dc      	str	r4, [r3, #12]
 80240b8:	464c      	mov	r4, r9
 80240ba:	4646      	mov	r6, r8
 80240bc:	1aa4      	subs	r4, r4, r2
 80240be:	1ba4      	subs	r4, r4, r6
 80240c0:	4464      	add	r4, ip
 80240c2:	611c      	str	r4, [r3, #16]
 80240c4:	194c      	adds	r4, r1, r5
 80240c6:	1be4      	subs	r4, r4, r7
 80240c8:	1a24      	subs	r4, r4, r0
 80240ca:	615c      	str	r4, [r3, #20]
 80240cc:	4644      	mov	r4, r8
 80240ce:	4666      	mov	r6, ip
 80240d0:	444a      	add	r2, r9
 80240d2:	1b12      	subs	r2, r2, r4
 80240d4:	1b92      	subs	r2, r2, r6
 80240d6:	619a      	str	r2, [r3, #24]
 80240d8:	1b4a      	subs	r2, r1, r5
 80240da:	1bd1      	subs	r1, r2, r7
 80240dc:	2201      	movs	r2, #1
 80240de:	4252      	negs	r2, r2
 80240e0:	4694      	mov	ip, r2
 80240e2:	44e2      	add	sl, ip
 80240e4:	4652      	mov	r2, sl
 80240e6:	1809      	adds	r1, r1, r0
 80240e8:	61d9      	str	r1, [r3, #28]
 80240ea:	3320      	adds	r3, #32
 80240ec:	2a00      	cmp	r2, #0
 80240ee:	d1c6      	bne.n	802407e <arm_radix4_butterfly_inverse_q31+0x4ba>
 80240f0:	b027      	add	sp, #156	@ 0x9c
 80240f2:	bc3c      	pop	{r2, r3, r4, r5}
 80240f4:	4690      	mov	r8, r2
 80240f6:	4699      	mov	r9, r3
 80240f8:	46a2      	mov	sl, r4
 80240fa:	46ab      	mov	fp, r5
 80240fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80240fe:	469a      	mov	sl, r3
 8024100:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024102:	e7bc      	b.n	802407e <arm_radix4_butterfly_inverse_q31+0x4ba>

08024104 <arm_cmplx_mag_squared_q31>:
 8024104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024106:	464f      	mov	r7, r9
 8024108:	4646      	mov	r6, r8
 802410a:	0004      	movs	r4, r0
 802410c:	b4c0      	push	{r6, r7}
 802410e:	0016      	movs	r6, r2
 8024110:	000f      	movs	r7, r1
 8024112:	2a00      	cmp	r2, #0
 8024114:	d018      	beq.n	8024148 <arm_cmplx_mag_squared_q31+0x44>
 8024116:	6823      	ldr	r3, [r4, #0]
 8024118:	6822      	ldr	r2, [r4, #0]
 802411a:	17d9      	asrs	r1, r3, #31
 802411c:	6863      	ldr	r3, [r4, #4]
 802411e:	0010      	movs	r0, r2
 8024120:	4698      	mov	r8, r3
 8024122:	17db      	asrs	r3, r3, #31
 8024124:	4699      	mov	r9, r3
 8024126:	000b      	movs	r3, r1
 8024128:	f7dc fa4a 	bl	80005c0 <__aeabi_lmul>
 802412c:	4642      	mov	r2, r8
 802412e:	104d      	asrs	r5, r1, #1
 8024130:	464b      	mov	r3, r9
 8024132:	4640      	mov	r0, r8
 8024134:	4649      	mov	r1, r9
 8024136:	f7dc fa43 	bl	80005c0 <__aeabi_lmul>
 802413a:	1049      	asrs	r1, r1, #1
 802413c:	1869      	adds	r1, r5, r1
 802413e:	3e01      	subs	r6, #1
 8024140:	c702      	stmia	r7!, {r1}
 8024142:	3408      	adds	r4, #8
 8024144:	2e00      	cmp	r6, #0
 8024146:	d1e6      	bne.n	8024116 <arm_cmplx_mag_squared_q31+0x12>
 8024148:	bc0c      	pop	{r2, r3}
 802414a:	4690      	mov	r8, r2
 802414c:	4699      	mov	r9, r3
 802414e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024150 <arm_mult_q31>:
 8024150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024152:	4646      	mov	r6, r8
 8024154:	464f      	mov	r7, r9
 8024156:	4690      	mov	r8, r2
 8024158:	b4c0      	push	{r6, r7}
 802415a:	001d      	movs	r5, r3
 802415c:	0006      	movs	r6, r0
 802415e:	000f      	movs	r7, r1
 8024160:	2400      	movs	r4, #0
 8024162:	2b00      	cmp	r3, #0
 8024164:	d020      	beq.n	80241a8 <arm_mult_q31+0x58>
 8024166:	4b12      	ldr	r3, [pc, #72]	@ (80241b0 <arm_mult_q31+0x60>)
 8024168:	4699      	mov	r9, r3
 802416a:	e007      	b.n	802417c <arm_mult_q31+0x2c>
 802416c:	464b      	mov	r3, r9
 802416e:	4059      	eors	r1, r3
 8024170:	4643      	mov	r3, r8
 8024172:	3d01      	subs	r5, #1
 8024174:	5119      	str	r1, [r3, r4]
 8024176:	3404      	adds	r4, #4
 8024178:	2d00      	cmp	r5, #0
 802417a:	d015      	beq.n	80241a8 <arm_mult_q31+0x58>
 802417c:	5933      	ldr	r3, [r6, r4]
 802417e:	593a      	ldr	r2, [r7, r4]
 8024180:	17d9      	asrs	r1, r3, #31
 8024182:	593b      	ldr	r3, [r7, r4]
 8024184:	5930      	ldr	r0, [r6, r4]
 8024186:	17db      	asrs	r3, r3, #31
 8024188:	f7dc fa1a 	bl	80005c0 <__aeabi_lmul>
 802418c:	004b      	lsls	r3, r1, #1
 802418e:	0fc0      	lsrs	r0, r0, #31
 8024190:	4318      	orrs	r0, r3
 8024192:	17c9      	asrs	r1, r1, #31
 8024194:	17c3      	asrs	r3, r0, #31
 8024196:	428b      	cmp	r3, r1
 8024198:	d1e8      	bne.n	802416c <arm_mult_q31+0x1c>
 802419a:	0001      	movs	r1, r0
 802419c:	4643      	mov	r3, r8
 802419e:	3d01      	subs	r5, #1
 80241a0:	5119      	str	r1, [r3, r4]
 80241a2:	3404      	adds	r4, #4
 80241a4:	2d00      	cmp	r5, #0
 80241a6:	d1e9      	bne.n	802417c <arm_mult_q31+0x2c>
 80241a8:	bc0c      	pop	{r2, r3}
 80241aa:	4690      	mov	r8, r2
 80241ac:	4699      	mov	r9, r3
 80241ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80241b0:	7fffffff 	.word	0x7fffffff

080241b4 <arm_add_q31>:
 80241b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80241b6:	465f      	mov	r7, fp
 80241b8:	4656      	mov	r6, sl
 80241ba:	464d      	mov	r5, r9
 80241bc:	4644      	mov	r4, r8
 80241be:	b4f0      	push	{r4, r5, r6, r7}
 80241c0:	4693      	mov	fp, r2
 80241c2:	b083      	sub	sp, #12
 80241c4:	4681      	mov	r9, r0
 80241c6:	468a      	mov	sl, r1
 80241c8:	4698      	mov	r8, r3
 80241ca:	2200      	movs	r2, #0
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	d020      	beq.n	8024212 <arm_add_q31+0x5e>
 80241d0:	4649      	mov	r1, r9
 80241d2:	4653      	mov	r3, sl
 80241d4:	588e      	ldr	r6, [r1, r2]
 80241d6:	589b      	ldr	r3, [r3, r2]
 80241d8:	17f7      	asrs	r7, r6, #31
 80241da:	001c      	movs	r4, r3
 80241dc:	0030      	movs	r0, r6
 80241de:	0039      	movs	r1, r7
 80241e0:	17dd      	asrs	r5, r3, #31
 80241e2:	46b4      	mov	ip, r6
 80241e4:	1900      	adds	r0, r0, r4
 80241e6:	4169      	adcs	r1, r5
 80241e8:	4463      	add	r3, ip
 80241ea:	9000      	str	r0, [sp, #0]
 80241ec:	9101      	str	r1, [sp, #4]
 80241ee:	17d9      	asrs	r1, r3, #31
 80241f0:	468c      	mov	ip, r1
 80241f2:	9901      	ldr	r1, [sp, #4]
 80241f4:	458c      	cmp	ip, r1
 80241f6:	d002      	beq.n	80241fe <arm_add_q31+0x4a>
 80241f8:	17cb      	asrs	r3, r1, #31
 80241fa:	4909      	ldr	r1, [pc, #36]	@ (8024220 <arm_add_q31+0x6c>)
 80241fc:	404b      	eors	r3, r1
 80241fe:	4659      	mov	r1, fp
 8024200:	508b      	str	r3, [r1, r2]
 8024202:	2301      	movs	r3, #1
 8024204:	425b      	negs	r3, r3
 8024206:	469c      	mov	ip, r3
 8024208:	44e0      	add	r8, ip
 802420a:	4643      	mov	r3, r8
 802420c:	3204      	adds	r2, #4
 802420e:	2b00      	cmp	r3, #0
 8024210:	d1de      	bne.n	80241d0 <arm_add_q31+0x1c>
 8024212:	b003      	add	sp, #12
 8024214:	bc3c      	pop	{r2, r3, r4, r5}
 8024216:	4690      	mov	r8, r2
 8024218:	4699      	mov	r9, r3
 802421a:	46a2      	mov	sl, r4
 802421c:	46ab      	mov	fp, r5
 802421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024220:	7fffffff 	.word	0x7fffffff

08024224 <atof>:
 8024224:	b510      	push	{r4, lr}
 8024226:	2100      	movs	r1, #0
 8024228:	f000 fe1e 	bl	8024e68 <strtod>
 802422c:	bd10      	pop	{r4, pc}

0802422e <atoi>:
 802422e:	b510      	push	{r4, lr}
 8024230:	220a      	movs	r2, #10
 8024232:	2100      	movs	r1, #0
 8024234:	f000 feb0 	bl	8024f98 <strtol>
 8024238:	bd10      	pop	{r4, pc}
	...

0802423c <sulp>:
 802423c:	b570      	push	{r4, r5, r6, lr}
 802423e:	0016      	movs	r6, r2
 8024240:	000d      	movs	r5, r1
 8024242:	f003 fd0f 	bl	8027c64 <__ulp>
 8024246:	2e00      	cmp	r6, #0
 8024248:	d00d      	beq.n	8024266 <sulp+0x2a>
 802424a:	236b      	movs	r3, #107	@ 0x6b
 802424c:	006a      	lsls	r2, r5, #1
 802424e:	0d52      	lsrs	r2, r2, #21
 8024250:	1a9b      	subs	r3, r3, r2
 8024252:	2b00      	cmp	r3, #0
 8024254:	dd07      	ble.n	8024266 <sulp+0x2a>
 8024256:	2400      	movs	r4, #0
 8024258:	4a03      	ldr	r2, [pc, #12]	@ (8024268 <sulp+0x2c>)
 802425a:	051b      	lsls	r3, r3, #20
 802425c:	189d      	adds	r5, r3, r2
 802425e:	002b      	movs	r3, r5
 8024260:	0022      	movs	r2, r4
 8024262:	f7de fb77 	bl	8002954 <__aeabi_dmul>
 8024266:	bd70      	pop	{r4, r5, r6, pc}
 8024268:	3ff00000 	.word	0x3ff00000

0802426c <_strtod_l>:
 802426c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802426e:	b0a3      	sub	sp, #140	@ 0x8c
 8024270:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024272:	2200      	movs	r2, #0
 8024274:	2600      	movs	r6, #0
 8024276:	2700      	movs	r7, #0
 8024278:	9005      	str	r0, [sp, #20]
 802427a:	9109      	str	r1, [sp, #36]	@ 0x24
 802427c:	921e      	str	r2, [sp, #120]	@ 0x78
 802427e:	911d      	str	r1, [sp, #116]	@ 0x74
 8024280:	780a      	ldrb	r2, [r1, #0]
 8024282:	2a2b      	cmp	r2, #43	@ 0x2b
 8024284:	d053      	beq.n	802432e <_strtod_l+0xc2>
 8024286:	d83f      	bhi.n	8024308 <_strtod_l+0x9c>
 8024288:	2a0d      	cmp	r2, #13
 802428a:	d839      	bhi.n	8024300 <_strtod_l+0x94>
 802428c:	2a08      	cmp	r2, #8
 802428e:	d839      	bhi.n	8024304 <_strtod_l+0x98>
 8024290:	2a00      	cmp	r2, #0
 8024292:	d042      	beq.n	802431a <_strtod_l+0xae>
 8024294:	2200      	movs	r2, #0
 8024296:	9212      	str	r2, [sp, #72]	@ 0x48
 8024298:	2100      	movs	r1, #0
 802429a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802429c:	910c      	str	r1, [sp, #48]	@ 0x30
 802429e:	782a      	ldrb	r2, [r5, #0]
 80242a0:	2a30      	cmp	r2, #48	@ 0x30
 80242a2:	d000      	beq.n	80242a6 <_strtod_l+0x3a>
 80242a4:	e083      	b.n	80243ae <_strtod_l+0x142>
 80242a6:	786a      	ldrb	r2, [r5, #1]
 80242a8:	3120      	adds	r1, #32
 80242aa:	438a      	bics	r2, r1
 80242ac:	2a58      	cmp	r2, #88	@ 0x58
 80242ae:	d000      	beq.n	80242b2 <_strtod_l+0x46>
 80242b0:	e073      	b.n	802439a <_strtod_l+0x12e>
 80242b2:	9302      	str	r3, [sp, #8]
 80242b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80242b6:	4a9b      	ldr	r2, [pc, #620]	@ (8024524 <_strtod_l+0x2b8>)
 80242b8:	9301      	str	r3, [sp, #4]
 80242ba:	ab1e      	add	r3, sp, #120	@ 0x78
 80242bc:	9300      	str	r3, [sp, #0]
 80242be:	9805      	ldr	r0, [sp, #20]
 80242c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80242c2:	a91d      	add	r1, sp, #116	@ 0x74
 80242c4:	f002 fd86 	bl	8026dd4 <__gethex>
 80242c8:	230f      	movs	r3, #15
 80242ca:	0002      	movs	r2, r0
 80242cc:	401a      	ands	r2, r3
 80242ce:	0004      	movs	r4, r0
 80242d0:	9206      	str	r2, [sp, #24]
 80242d2:	4218      	tst	r0, r3
 80242d4:	d005      	beq.n	80242e2 <_strtod_l+0x76>
 80242d6:	2a06      	cmp	r2, #6
 80242d8:	d12b      	bne.n	8024332 <_strtod_l+0xc6>
 80242da:	2300      	movs	r3, #0
 80242dc:	3501      	adds	r5, #1
 80242de:	951d      	str	r5, [sp, #116]	@ 0x74
 80242e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80242e2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	d002      	beq.n	80242ee <_strtod_l+0x82>
 80242e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80242ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80242ec:	6013      	str	r3, [r2, #0]
 80242ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80242f0:	2b00      	cmp	r3, #0
 80242f2:	d019      	beq.n	8024328 <_strtod_l+0xbc>
 80242f4:	2380      	movs	r3, #128	@ 0x80
 80242f6:	0030      	movs	r0, r6
 80242f8:	061b      	lsls	r3, r3, #24
 80242fa:	18f9      	adds	r1, r7, r3
 80242fc:	b023      	add	sp, #140	@ 0x8c
 80242fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024300:	2a20      	cmp	r2, #32
 8024302:	d1c7      	bne.n	8024294 <_strtod_l+0x28>
 8024304:	3101      	adds	r1, #1
 8024306:	e7ba      	b.n	802427e <_strtod_l+0x12>
 8024308:	2a2d      	cmp	r2, #45	@ 0x2d
 802430a:	d1c3      	bne.n	8024294 <_strtod_l+0x28>
 802430c:	3a2c      	subs	r2, #44	@ 0x2c
 802430e:	9212      	str	r2, [sp, #72]	@ 0x48
 8024310:	1c4a      	adds	r2, r1, #1
 8024312:	921d      	str	r2, [sp, #116]	@ 0x74
 8024314:	784a      	ldrb	r2, [r1, #1]
 8024316:	2a00      	cmp	r2, #0
 8024318:	d1be      	bne.n	8024298 <_strtod_l+0x2c>
 802431a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802431c:	931d      	str	r3, [sp, #116]	@ 0x74
 802431e:	2300      	movs	r3, #0
 8024320:	9312      	str	r3, [sp, #72]	@ 0x48
 8024322:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024324:	2b00      	cmp	r3, #0
 8024326:	d1df      	bne.n	80242e8 <_strtod_l+0x7c>
 8024328:	0030      	movs	r0, r6
 802432a:	0039      	movs	r1, r7
 802432c:	e7e6      	b.n	80242fc <_strtod_l+0x90>
 802432e:	2200      	movs	r2, #0
 8024330:	e7ed      	b.n	802430e <_strtod_l+0xa2>
 8024332:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024334:	2a00      	cmp	r2, #0
 8024336:	d007      	beq.n	8024348 <_strtod_l+0xdc>
 8024338:	2135      	movs	r1, #53	@ 0x35
 802433a:	a820      	add	r0, sp, #128	@ 0x80
 802433c:	f003 fd88 	bl	8027e50 <__copybits>
 8024340:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024342:	9805      	ldr	r0, [sp, #20]
 8024344:	f003 f94a 	bl	80275dc <_Bfree>
 8024348:	9806      	ldr	r0, [sp, #24]
 802434a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802434c:	3801      	subs	r0, #1
 802434e:	2804      	cmp	r0, #4
 8024350:	d806      	bhi.n	8024360 <_strtod_l+0xf4>
 8024352:	f7db ff13 	bl	800017c <__gnu_thumb1_case_uqi>
 8024356:	0312      	.short	0x0312
 8024358:	1e1c      	.short	0x1e1c
 802435a:	12          	.byte	0x12
 802435b:	00          	.byte	0x00
 802435c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802435e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024360:	05e4      	lsls	r4, r4, #23
 8024362:	d502      	bpl.n	802436a <_strtod_l+0xfe>
 8024364:	2380      	movs	r3, #128	@ 0x80
 8024366:	061b      	lsls	r3, r3, #24
 8024368:	431f      	orrs	r7, r3
 802436a:	4b6f      	ldr	r3, [pc, #444]	@ (8024528 <_strtod_l+0x2bc>)
 802436c:	423b      	tst	r3, r7
 802436e:	d1b8      	bne.n	80242e2 <_strtod_l+0x76>
 8024370:	f001 fdc0 	bl	8025ef4 <__errno>
 8024374:	2322      	movs	r3, #34	@ 0x22
 8024376:	6003      	str	r3, [r0, #0]
 8024378:	e7b3      	b.n	80242e2 <_strtod_l+0x76>
 802437a:	496c      	ldr	r1, [pc, #432]	@ (802452c <_strtod_l+0x2c0>)
 802437c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802437e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024380:	400a      	ands	r2, r1
 8024382:	496b      	ldr	r1, [pc, #428]	@ (8024530 <_strtod_l+0x2c4>)
 8024384:	185b      	adds	r3, r3, r1
 8024386:	051b      	lsls	r3, r3, #20
 8024388:	431a      	orrs	r2, r3
 802438a:	0017      	movs	r7, r2
 802438c:	e7e8      	b.n	8024360 <_strtod_l+0xf4>
 802438e:	4f66      	ldr	r7, [pc, #408]	@ (8024528 <_strtod_l+0x2bc>)
 8024390:	e7e6      	b.n	8024360 <_strtod_l+0xf4>
 8024392:	2601      	movs	r6, #1
 8024394:	4f67      	ldr	r7, [pc, #412]	@ (8024534 <_strtod_l+0x2c8>)
 8024396:	4276      	negs	r6, r6
 8024398:	e7e2      	b.n	8024360 <_strtod_l+0xf4>
 802439a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802439c:	1c5a      	adds	r2, r3, #1
 802439e:	921d      	str	r2, [sp, #116]	@ 0x74
 80243a0:	785b      	ldrb	r3, [r3, #1]
 80243a2:	2b30      	cmp	r3, #48	@ 0x30
 80243a4:	d0f9      	beq.n	802439a <_strtod_l+0x12e>
 80243a6:	2b00      	cmp	r3, #0
 80243a8:	d09b      	beq.n	80242e2 <_strtod_l+0x76>
 80243aa:	2301      	movs	r3, #1
 80243ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80243ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80243b0:	220a      	movs	r2, #10
 80243b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80243b4:	2300      	movs	r3, #0
 80243b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80243b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80243ba:	9308      	str	r3, [sp, #32]
 80243bc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80243be:	7804      	ldrb	r4, [r0, #0]
 80243c0:	0023      	movs	r3, r4
 80243c2:	3b30      	subs	r3, #48	@ 0x30
 80243c4:	b2d9      	uxtb	r1, r3
 80243c6:	2909      	cmp	r1, #9
 80243c8:	d927      	bls.n	802441a <_strtod_l+0x1ae>
 80243ca:	2201      	movs	r2, #1
 80243cc:	495a      	ldr	r1, [pc, #360]	@ (8024538 <_strtod_l+0x2cc>)
 80243ce:	f001 fd03 	bl	8025dd8 <strncmp>
 80243d2:	2800      	cmp	r0, #0
 80243d4:	d033      	beq.n	802443e <_strtod_l+0x1d2>
 80243d6:	2000      	movs	r0, #0
 80243d8:	0023      	movs	r3, r4
 80243da:	4684      	mov	ip, r0
 80243dc:	9a08      	ldr	r2, [sp, #32]
 80243de:	900e      	str	r0, [sp, #56]	@ 0x38
 80243e0:	9206      	str	r2, [sp, #24]
 80243e2:	2220      	movs	r2, #32
 80243e4:	0019      	movs	r1, r3
 80243e6:	4391      	bics	r1, r2
 80243e8:	000a      	movs	r2, r1
 80243ea:	2100      	movs	r1, #0
 80243ec:	9107      	str	r1, [sp, #28]
 80243ee:	2a45      	cmp	r2, #69	@ 0x45
 80243f0:	d000      	beq.n	80243f4 <_strtod_l+0x188>
 80243f2:	e0cb      	b.n	802458c <_strtod_l+0x320>
 80243f4:	9b06      	ldr	r3, [sp, #24]
 80243f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80243f8:	4303      	orrs	r3, r0
 80243fa:	4313      	orrs	r3, r2
 80243fc:	428b      	cmp	r3, r1
 80243fe:	d08c      	beq.n	802431a <_strtod_l+0xae>
 8024400:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024402:	9309      	str	r3, [sp, #36]	@ 0x24
 8024404:	3301      	adds	r3, #1
 8024406:	931d      	str	r3, [sp, #116]	@ 0x74
 8024408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802440a:	785b      	ldrb	r3, [r3, #1]
 802440c:	2b2b      	cmp	r3, #43	@ 0x2b
 802440e:	d07b      	beq.n	8024508 <_strtod_l+0x29c>
 8024410:	000c      	movs	r4, r1
 8024412:	2b2d      	cmp	r3, #45	@ 0x2d
 8024414:	d17e      	bne.n	8024514 <_strtod_l+0x2a8>
 8024416:	2401      	movs	r4, #1
 8024418:	e077      	b.n	802450a <_strtod_l+0x29e>
 802441a:	9908      	ldr	r1, [sp, #32]
 802441c:	2908      	cmp	r1, #8
 802441e:	dc09      	bgt.n	8024434 <_strtod_l+0x1c8>
 8024420:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024422:	4351      	muls	r1, r2
 8024424:	185b      	adds	r3, r3, r1
 8024426:	930d      	str	r3, [sp, #52]	@ 0x34
 8024428:	9b08      	ldr	r3, [sp, #32]
 802442a:	3001      	adds	r0, #1
 802442c:	3301      	adds	r3, #1
 802442e:	9308      	str	r3, [sp, #32]
 8024430:	901d      	str	r0, [sp, #116]	@ 0x74
 8024432:	e7c3      	b.n	80243bc <_strtod_l+0x150>
 8024434:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024436:	4355      	muls	r5, r2
 8024438:	195b      	adds	r3, r3, r5
 802443a:	9310      	str	r3, [sp, #64]	@ 0x40
 802443c:	e7f4      	b.n	8024428 <_strtod_l+0x1bc>
 802443e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024440:	1c5a      	adds	r2, r3, #1
 8024442:	921d      	str	r2, [sp, #116]	@ 0x74
 8024444:	9a08      	ldr	r2, [sp, #32]
 8024446:	785b      	ldrb	r3, [r3, #1]
 8024448:	2a00      	cmp	r2, #0
 802444a:	d03e      	beq.n	80244ca <_strtod_l+0x25e>
 802444c:	900e      	str	r0, [sp, #56]	@ 0x38
 802444e:	9206      	str	r2, [sp, #24]
 8024450:	001a      	movs	r2, r3
 8024452:	3a30      	subs	r2, #48	@ 0x30
 8024454:	2a09      	cmp	r2, #9
 8024456:	d912      	bls.n	802447e <_strtod_l+0x212>
 8024458:	2201      	movs	r2, #1
 802445a:	4694      	mov	ip, r2
 802445c:	e7c1      	b.n	80243e2 <_strtod_l+0x176>
 802445e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024460:	3001      	adds	r0, #1
 8024462:	1c5a      	adds	r2, r3, #1
 8024464:	921d      	str	r2, [sp, #116]	@ 0x74
 8024466:	785b      	ldrb	r3, [r3, #1]
 8024468:	2b30      	cmp	r3, #48	@ 0x30
 802446a:	d0f8      	beq.n	802445e <_strtod_l+0x1f2>
 802446c:	001a      	movs	r2, r3
 802446e:	3a31      	subs	r2, #49	@ 0x31
 8024470:	2a08      	cmp	r2, #8
 8024472:	d844      	bhi.n	80244fe <_strtod_l+0x292>
 8024474:	900e      	str	r0, [sp, #56]	@ 0x38
 8024476:	2000      	movs	r0, #0
 8024478:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802447a:	9006      	str	r0, [sp, #24]
 802447c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802447e:	001c      	movs	r4, r3
 8024480:	1c42      	adds	r2, r0, #1
 8024482:	3c30      	subs	r4, #48	@ 0x30
 8024484:	2b30      	cmp	r3, #48	@ 0x30
 8024486:	d01a      	beq.n	80244be <_strtod_l+0x252>
 8024488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802448a:	9906      	ldr	r1, [sp, #24]
 802448c:	189b      	adds	r3, r3, r2
 802448e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024490:	230a      	movs	r3, #10
 8024492:	469c      	mov	ip, r3
 8024494:	9d06      	ldr	r5, [sp, #24]
 8024496:	1c4b      	adds	r3, r1, #1
 8024498:	1b5d      	subs	r5, r3, r5
 802449a:	42aa      	cmp	r2, r5
 802449c:	dc17      	bgt.n	80244ce <_strtod_l+0x262>
 802449e:	43c3      	mvns	r3, r0
 80244a0:	9a06      	ldr	r2, [sp, #24]
 80244a2:	17db      	asrs	r3, r3, #31
 80244a4:	4003      	ands	r3, r0
 80244a6:	18d1      	adds	r1, r2, r3
 80244a8:	3201      	adds	r2, #1
 80244aa:	18d3      	adds	r3, r2, r3
 80244ac:	9306      	str	r3, [sp, #24]
 80244ae:	2908      	cmp	r1, #8
 80244b0:	dc1c      	bgt.n	80244ec <_strtod_l+0x280>
 80244b2:	230a      	movs	r3, #10
 80244b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80244b6:	4353      	muls	r3, r2
 80244b8:	2200      	movs	r2, #0
 80244ba:	18e3      	adds	r3, r4, r3
 80244bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80244be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80244c0:	0010      	movs	r0, r2
 80244c2:	1c59      	adds	r1, r3, #1
 80244c4:	911d      	str	r1, [sp, #116]	@ 0x74
 80244c6:	785b      	ldrb	r3, [r3, #1]
 80244c8:	e7c2      	b.n	8024450 <_strtod_l+0x1e4>
 80244ca:	9808      	ldr	r0, [sp, #32]
 80244cc:	e7cc      	b.n	8024468 <_strtod_l+0x1fc>
 80244ce:	2908      	cmp	r1, #8
 80244d0:	dc05      	bgt.n	80244de <_strtod_l+0x272>
 80244d2:	4665      	mov	r5, ip
 80244d4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80244d6:	4369      	muls	r1, r5
 80244d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80244da:	0019      	movs	r1, r3
 80244dc:	e7da      	b.n	8024494 <_strtod_l+0x228>
 80244de:	2b10      	cmp	r3, #16
 80244e0:	dcfb      	bgt.n	80244da <_strtod_l+0x26e>
 80244e2:	4661      	mov	r1, ip
 80244e4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80244e6:	434d      	muls	r5, r1
 80244e8:	9510      	str	r5, [sp, #64]	@ 0x40
 80244ea:	e7f6      	b.n	80244da <_strtod_l+0x26e>
 80244ec:	2200      	movs	r2, #0
 80244ee:	290f      	cmp	r1, #15
 80244f0:	dce5      	bgt.n	80244be <_strtod_l+0x252>
 80244f2:	230a      	movs	r3, #10
 80244f4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80244f6:	435d      	muls	r5, r3
 80244f8:	1963      	adds	r3, r4, r5
 80244fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80244fc:	e7df      	b.n	80244be <_strtod_l+0x252>
 80244fe:	2200      	movs	r2, #0
 8024500:	920e      	str	r2, [sp, #56]	@ 0x38
 8024502:	9206      	str	r2, [sp, #24]
 8024504:	3201      	adds	r2, #1
 8024506:	e7a8      	b.n	802445a <_strtod_l+0x1ee>
 8024508:	2400      	movs	r4, #0
 802450a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802450c:	3302      	adds	r3, #2
 802450e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024512:	789b      	ldrb	r3, [r3, #2]
 8024514:	001a      	movs	r2, r3
 8024516:	3a30      	subs	r2, #48	@ 0x30
 8024518:	2a09      	cmp	r2, #9
 802451a:	d913      	bls.n	8024544 <_strtod_l+0x2d8>
 802451c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802451e:	921d      	str	r2, [sp, #116]	@ 0x74
 8024520:	2200      	movs	r2, #0
 8024522:	e032      	b.n	802458a <_strtod_l+0x31e>
 8024524:	0802ea3c 	.word	0x0802ea3c
 8024528:	7ff00000 	.word	0x7ff00000
 802452c:	ffefffff 	.word	0xffefffff
 8024530:	00000433 	.word	0x00000433
 8024534:	7fffffff 	.word	0x7fffffff
 8024538:	0802e854 	.word	0x0802e854
 802453c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802453e:	1c5a      	adds	r2, r3, #1
 8024540:	921d      	str	r2, [sp, #116]	@ 0x74
 8024542:	785b      	ldrb	r3, [r3, #1]
 8024544:	2b30      	cmp	r3, #48	@ 0x30
 8024546:	d0f9      	beq.n	802453c <_strtod_l+0x2d0>
 8024548:	2200      	movs	r2, #0
 802454a:	9207      	str	r2, [sp, #28]
 802454c:	001a      	movs	r2, r3
 802454e:	3a31      	subs	r2, #49	@ 0x31
 8024550:	2a08      	cmp	r2, #8
 8024552:	d81b      	bhi.n	802458c <_strtod_l+0x320>
 8024554:	3b30      	subs	r3, #48	@ 0x30
 8024556:	001a      	movs	r2, r3
 8024558:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802455a:	9307      	str	r3, [sp, #28]
 802455c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802455e:	1c59      	adds	r1, r3, #1
 8024560:	911d      	str	r1, [sp, #116]	@ 0x74
 8024562:	785b      	ldrb	r3, [r3, #1]
 8024564:	001d      	movs	r5, r3
 8024566:	3d30      	subs	r5, #48	@ 0x30
 8024568:	2d09      	cmp	r5, #9
 802456a:	d93a      	bls.n	80245e2 <_strtod_l+0x376>
 802456c:	9d07      	ldr	r5, [sp, #28]
 802456e:	1b49      	subs	r1, r1, r5
 8024570:	000d      	movs	r5, r1
 8024572:	49b3      	ldr	r1, [pc, #716]	@ (8024840 <_strtod_l+0x5d4>)
 8024574:	9107      	str	r1, [sp, #28]
 8024576:	2d08      	cmp	r5, #8
 8024578:	dc03      	bgt.n	8024582 <_strtod_l+0x316>
 802457a:	9207      	str	r2, [sp, #28]
 802457c:	428a      	cmp	r2, r1
 802457e:	dd00      	ble.n	8024582 <_strtod_l+0x316>
 8024580:	9107      	str	r1, [sp, #28]
 8024582:	2c00      	cmp	r4, #0
 8024584:	d002      	beq.n	802458c <_strtod_l+0x320>
 8024586:	9a07      	ldr	r2, [sp, #28]
 8024588:	4252      	negs	r2, r2
 802458a:	9207      	str	r2, [sp, #28]
 802458c:	9a06      	ldr	r2, [sp, #24]
 802458e:	2a00      	cmp	r2, #0
 8024590:	d14b      	bne.n	802462a <_strtod_l+0x3be>
 8024592:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024594:	4310      	orrs	r0, r2
 8024596:	d000      	beq.n	802459a <_strtod_l+0x32e>
 8024598:	e6a3      	b.n	80242e2 <_strtod_l+0x76>
 802459a:	4662      	mov	r2, ip
 802459c:	2a00      	cmp	r2, #0
 802459e:	d000      	beq.n	80245a2 <_strtod_l+0x336>
 80245a0:	e6bb      	b.n	802431a <_strtod_l+0xae>
 80245a2:	2b69      	cmp	r3, #105	@ 0x69
 80245a4:	d025      	beq.n	80245f2 <_strtod_l+0x386>
 80245a6:	dc21      	bgt.n	80245ec <_strtod_l+0x380>
 80245a8:	2b49      	cmp	r3, #73	@ 0x49
 80245aa:	d022      	beq.n	80245f2 <_strtod_l+0x386>
 80245ac:	2b4e      	cmp	r3, #78	@ 0x4e
 80245ae:	d000      	beq.n	80245b2 <_strtod_l+0x346>
 80245b0:	e6b3      	b.n	802431a <_strtod_l+0xae>
 80245b2:	49a4      	ldr	r1, [pc, #656]	@ (8024844 <_strtod_l+0x5d8>)
 80245b4:	a81d      	add	r0, sp, #116	@ 0x74
 80245b6:	f002 fe43 	bl	8027240 <__match>
 80245ba:	2800      	cmp	r0, #0
 80245bc:	d100      	bne.n	80245c0 <_strtod_l+0x354>
 80245be:	e6ac      	b.n	802431a <_strtod_l+0xae>
 80245c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80245c2:	781b      	ldrb	r3, [r3, #0]
 80245c4:	2b28      	cmp	r3, #40	@ 0x28
 80245c6:	d12a      	bne.n	802461e <_strtod_l+0x3b2>
 80245c8:	499f      	ldr	r1, [pc, #636]	@ (8024848 <_strtod_l+0x5dc>)
 80245ca:	aa20      	add	r2, sp, #128	@ 0x80
 80245cc:	a81d      	add	r0, sp, #116	@ 0x74
 80245ce:	f002 fe4b 	bl	8027268 <__hexnan>
 80245d2:	2805      	cmp	r0, #5
 80245d4:	d123      	bne.n	802461e <_strtod_l+0x3b2>
 80245d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80245d8:	4a9c      	ldr	r2, [pc, #624]	@ (802484c <_strtod_l+0x5e0>)
 80245da:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80245dc:	431a      	orrs	r2, r3
 80245de:	0017      	movs	r7, r2
 80245e0:	e67f      	b.n	80242e2 <_strtod_l+0x76>
 80245e2:	210a      	movs	r1, #10
 80245e4:	434a      	muls	r2, r1
 80245e6:	18d2      	adds	r2, r2, r3
 80245e8:	3a30      	subs	r2, #48	@ 0x30
 80245ea:	e7b7      	b.n	802455c <_strtod_l+0x2f0>
 80245ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80245ee:	d0e0      	beq.n	80245b2 <_strtod_l+0x346>
 80245f0:	e693      	b.n	802431a <_strtod_l+0xae>
 80245f2:	4997      	ldr	r1, [pc, #604]	@ (8024850 <_strtod_l+0x5e4>)
 80245f4:	a81d      	add	r0, sp, #116	@ 0x74
 80245f6:	f002 fe23 	bl	8027240 <__match>
 80245fa:	2800      	cmp	r0, #0
 80245fc:	d100      	bne.n	8024600 <_strtod_l+0x394>
 80245fe:	e68c      	b.n	802431a <_strtod_l+0xae>
 8024600:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024602:	4994      	ldr	r1, [pc, #592]	@ (8024854 <_strtod_l+0x5e8>)
 8024604:	3b01      	subs	r3, #1
 8024606:	a81d      	add	r0, sp, #116	@ 0x74
 8024608:	931d      	str	r3, [sp, #116]	@ 0x74
 802460a:	f002 fe19 	bl	8027240 <__match>
 802460e:	2800      	cmp	r0, #0
 8024610:	d102      	bne.n	8024618 <_strtod_l+0x3ac>
 8024612:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024614:	3301      	adds	r3, #1
 8024616:	931d      	str	r3, [sp, #116]	@ 0x74
 8024618:	2600      	movs	r6, #0
 802461a:	4f8c      	ldr	r7, [pc, #560]	@ (802484c <_strtod_l+0x5e0>)
 802461c:	e661      	b.n	80242e2 <_strtod_l+0x76>
 802461e:	488e      	ldr	r0, [pc, #568]	@ (8024858 <_strtod_l+0x5ec>)
 8024620:	f001 fcaa 	bl	8025f78 <nan>
 8024624:	0006      	movs	r6, r0
 8024626:	000f      	movs	r7, r1
 8024628:	e65b      	b.n	80242e2 <_strtod_l+0x76>
 802462a:	9b07      	ldr	r3, [sp, #28]
 802462c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802462e:	1a9b      	subs	r3, r3, r2
 8024630:	930c      	str	r3, [sp, #48]	@ 0x30
 8024632:	9b08      	ldr	r3, [sp, #32]
 8024634:	2b00      	cmp	r3, #0
 8024636:	d101      	bne.n	802463c <_strtod_l+0x3d0>
 8024638:	9b06      	ldr	r3, [sp, #24]
 802463a:	9308      	str	r3, [sp, #32]
 802463c:	9c06      	ldr	r4, [sp, #24]
 802463e:	2c10      	cmp	r4, #16
 8024640:	dd00      	ble.n	8024644 <_strtod_l+0x3d8>
 8024642:	2410      	movs	r4, #16
 8024644:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024646:	f7df f901 	bl	800384c <__aeabi_ui2d>
 802464a:	9b06      	ldr	r3, [sp, #24]
 802464c:	0006      	movs	r6, r0
 802464e:	000f      	movs	r7, r1
 8024650:	2b09      	cmp	r3, #9
 8024652:	dc13      	bgt.n	802467c <_strtod_l+0x410>
 8024654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024656:	2b00      	cmp	r3, #0
 8024658:	d100      	bne.n	802465c <_strtod_l+0x3f0>
 802465a:	e642      	b.n	80242e2 <_strtod_l+0x76>
 802465c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802465e:	2b00      	cmp	r3, #0
 8024660:	dc00      	bgt.n	8024664 <_strtod_l+0x3f8>
 8024662:	e07e      	b.n	8024762 <_strtod_l+0x4f6>
 8024664:	2b16      	cmp	r3, #22
 8024666:	dc63      	bgt.n	8024730 <_strtod_l+0x4c4>
 8024668:	497c      	ldr	r1, [pc, #496]	@ (802485c <_strtod_l+0x5f0>)
 802466a:	00db      	lsls	r3, r3, #3
 802466c:	18c9      	adds	r1, r1, r3
 802466e:	0032      	movs	r2, r6
 8024670:	6808      	ldr	r0, [r1, #0]
 8024672:	6849      	ldr	r1, [r1, #4]
 8024674:	003b      	movs	r3, r7
 8024676:	f7de f96d 	bl	8002954 <__aeabi_dmul>
 802467a:	e7d3      	b.n	8024624 <_strtod_l+0x3b8>
 802467c:	0022      	movs	r2, r4
 802467e:	4b77      	ldr	r3, [pc, #476]	@ (802485c <_strtod_l+0x5f0>)
 8024680:	3a09      	subs	r2, #9
 8024682:	00d2      	lsls	r2, r2, #3
 8024684:	189b      	adds	r3, r3, r2
 8024686:	681a      	ldr	r2, [r3, #0]
 8024688:	685b      	ldr	r3, [r3, #4]
 802468a:	f7de f963 	bl	8002954 <__aeabi_dmul>
 802468e:	0006      	movs	r6, r0
 8024690:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024692:	000f      	movs	r7, r1
 8024694:	f7df f8da 	bl	800384c <__aeabi_ui2d>
 8024698:	000b      	movs	r3, r1
 802469a:	0002      	movs	r2, r0
 802469c:	0039      	movs	r1, r7
 802469e:	0030      	movs	r0, r6
 80246a0:	f7dd f958 	bl	8001954 <__aeabi_dadd>
 80246a4:	9b06      	ldr	r3, [sp, #24]
 80246a6:	0006      	movs	r6, r0
 80246a8:	000f      	movs	r7, r1
 80246aa:	2b0f      	cmp	r3, #15
 80246ac:	ddd2      	ble.n	8024654 <_strtod_l+0x3e8>
 80246ae:	9b06      	ldr	r3, [sp, #24]
 80246b0:	1b1c      	subs	r4, r3, r4
 80246b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246b4:	18e4      	adds	r4, r4, r3
 80246b6:	2c00      	cmp	r4, #0
 80246b8:	dc00      	bgt.n	80246bc <_strtod_l+0x450>
 80246ba:	e09b      	b.n	80247f4 <_strtod_l+0x588>
 80246bc:	220f      	movs	r2, #15
 80246be:	0023      	movs	r3, r4
 80246c0:	4013      	ands	r3, r2
 80246c2:	4214      	tst	r4, r2
 80246c4:	d00a      	beq.n	80246dc <_strtod_l+0x470>
 80246c6:	4965      	ldr	r1, [pc, #404]	@ (802485c <_strtod_l+0x5f0>)
 80246c8:	00db      	lsls	r3, r3, #3
 80246ca:	18c9      	adds	r1, r1, r3
 80246cc:	0032      	movs	r2, r6
 80246ce:	6808      	ldr	r0, [r1, #0]
 80246d0:	6849      	ldr	r1, [r1, #4]
 80246d2:	003b      	movs	r3, r7
 80246d4:	f7de f93e 	bl	8002954 <__aeabi_dmul>
 80246d8:	0006      	movs	r6, r0
 80246da:	000f      	movs	r7, r1
 80246dc:	230f      	movs	r3, #15
 80246de:	439c      	bics	r4, r3
 80246e0:	d073      	beq.n	80247ca <_strtod_l+0x55e>
 80246e2:	3326      	adds	r3, #38	@ 0x26
 80246e4:	33ff      	adds	r3, #255	@ 0xff
 80246e6:	429c      	cmp	r4, r3
 80246e8:	dd4b      	ble.n	8024782 <_strtod_l+0x516>
 80246ea:	2300      	movs	r3, #0
 80246ec:	9306      	str	r3, [sp, #24]
 80246ee:	9307      	str	r3, [sp, #28]
 80246f0:	930d      	str	r3, [sp, #52]	@ 0x34
 80246f2:	9308      	str	r3, [sp, #32]
 80246f4:	2322      	movs	r3, #34	@ 0x22
 80246f6:	2600      	movs	r6, #0
 80246f8:	9a05      	ldr	r2, [sp, #20]
 80246fa:	4f54      	ldr	r7, [pc, #336]	@ (802484c <_strtod_l+0x5e0>)
 80246fc:	6013      	str	r3, [r2, #0]
 80246fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024700:	42b3      	cmp	r3, r6
 8024702:	d100      	bne.n	8024706 <_strtod_l+0x49a>
 8024704:	e5ed      	b.n	80242e2 <_strtod_l+0x76>
 8024706:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024708:	9805      	ldr	r0, [sp, #20]
 802470a:	f002 ff67 	bl	80275dc <_Bfree>
 802470e:	9908      	ldr	r1, [sp, #32]
 8024710:	9805      	ldr	r0, [sp, #20]
 8024712:	f002 ff63 	bl	80275dc <_Bfree>
 8024716:	9907      	ldr	r1, [sp, #28]
 8024718:	9805      	ldr	r0, [sp, #20]
 802471a:	f002 ff5f 	bl	80275dc <_Bfree>
 802471e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024720:	9805      	ldr	r0, [sp, #20]
 8024722:	f002 ff5b 	bl	80275dc <_Bfree>
 8024726:	9906      	ldr	r1, [sp, #24]
 8024728:	9805      	ldr	r0, [sp, #20]
 802472a:	f002 ff57 	bl	80275dc <_Bfree>
 802472e:	e5d8      	b.n	80242e2 <_strtod_l+0x76>
 8024730:	2325      	movs	r3, #37	@ 0x25
 8024732:	9a06      	ldr	r2, [sp, #24]
 8024734:	1a9b      	subs	r3, r3, r2
 8024736:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024738:	4293      	cmp	r3, r2
 802473a:	dbb8      	blt.n	80246ae <_strtod_l+0x442>
 802473c:	240f      	movs	r4, #15
 802473e:	9b06      	ldr	r3, [sp, #24]
 8024740:	4d46      	ldr	r5, [pc, #280]	@ (802485c <_strtod_l+0x5f0>)
 8024742:	1ae4      	subs	r4, r4, r3
 8024744:	00e1      	lsls	r1, r4, #3
 8024746:	1869      	adds	r1, r5, r1
 8024748:	0032      	movs	r2, r6
 802474a:	6808      	ldr	r0, [r1, #0]
 802474c:	6849      	ldr	r1, [r1, #4]
 802474e:	003b      	movs	r3, r7
 8024750:	f7de f900 	bl	8002954 <__aeabi_dmul>
 8024754:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024756:	1b1c      	subs	r4, r3, r4
 8024758:	00e4      	lsls	r4, r4, #3
 802475a:	192d      	adds	r5, r5, r4
 802475c:	682a      	ldr	r2, [r5, #0]
 802475e:	686b      	ldr	r3, [r5, #4]
 8024760:	e789      	b.n	8024676 <_strtod_l+0x40a>
 8024762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024764:	3316      	adds	r3, #22
 8024766:	dba2      	blt.n	80246ae <_strtod_l+0x442>
 8024768:	9907      	ldr	r1, [sp, #28]
 802476a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802476c:	4b3b      	ldr	r3, [pc, #236]	@ (802485c <_strtod_l+0x5f0>)
 802476e:	1a52      	subs	r2, r2, r1
 8024770:	00d2      	lsls	r2, r2, #3
 8024772:	189b      	adds	r3, r3, r2
 8024774:	0030      	movs	r0, r6
 8024776:	681a      	ldr	r2, [r3, #0]
 8024778:	685b      	ldr	r3, [r3, #4]
 802477a:	0039      	movs	r1, r7
 802477c:	f7dd fcb0 	bl	80020e0 <__aeabi_ddiv>
 8024780:	e750      	b.n	8024624 <_strtod_l+0x3b8>
 8024782:	2300      	movs	r3, #0
 8024784:	0030      	movs	r0, r6
 8024786:	0039      	movs	r1, r7
 8024788:	4d35      	ldr	r5, [pc, #212]	@ (8024860 <_strtod_l+0x5f4>)
 802478a:	1124      	asrs	r4, r4, #4
 802478c:	9309      	str	r3, [sp, #36]	@ 0x24
 802478e:	2c01      	cmp	r4, #1
 8024790:	dc1e      	bgt.n	80247d0 <_strtod_l+0x564>
 8024792:	2b00      	cmp	r3, #0
 8024794:	d001      	beq.n	802479a <_strtod_l+0x52e>
 8024796:	0006      	movs	r6, r0
 8024798:	000f      	movs	r7, r1
 802479a:	4b32      	ldr	r3, [pc, #200]	@ (8024864 <_strtod_l+0x5f8>)
 802479c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802479e:	18ff      	adds	r7, r7, r3
 80247a0:	4b2f      	ldr	r3, [pc, #188]	@ (8024860 <_strtod_l+0x5f4>)
 80247a2:	00d5      	lsls	r5, r2, #3
 80247a4:	195d      	adds	r5, r3, r5
 80247a6:	0032      	movs	r2, r6
 80247a8:	6828      	ldr	r0, [r5, #0]
 80247aa:	6869      	ldr	r1, [r5, #4]
 80247ac:	003b      	movs	r3, r7
 80247ae:	f7de f8d1 	bl	8002954 <__aeabi_dmul>
 80247b2:	4b26      	ldr	r3, [pc, #152]	@ (802484c <_strtod_l+0x5e0>)
 80247b4:	4a2c      	ldr	r2, [pc, #176]	@ (8024868 <_strtod_l+0x5fc>)
 80247b6:	0006      	movs	r6, r0
 80247b8:	400b      	ands	r3, r1
 80247ba:	4293      	cmp	r3, r2
 80247bc:	d895      	bhi.n	80246ea <_strtod_l+0x47e>
 80247be:	4a2b      	ldr	r2, [pc, #172]	@ (802486c <_strtod_l+0x600>)
 80247c0:	4293      	cmp	r3, r2
 80247c2:	d913      	bls.n	80247ec <_strtod_l+0x580>
 80247c4:	2601      	movs	r6, #1
 80247c6:	4f2a      	ldr	r7, [pc, #168]	@ (8024870 <_strtod_l+0x604>)
 80247c8:	4276      	negs	r6, r6
 80247ca:	2300      	movs	r3, #0
 80247cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80247ce:	e086      	b.n	80248de <_strtod_l+0x672>
 80247d0:	2201      	movs	r2, #1
 80247d2:	4214      	tst	r4, r2
 80247d4:	d004      	beq.n	80247e0 <_strtod_l+0x574>
 80247d6:	682a      	ldr	r2, [r5, #0]
 80247d8:	686b      	ldr	r3, [r5, #4]
 80247da:	f7de f8bb 	bl	8002954 <__aeabi_dmul>
 80247de:	2301      	movs	r3, #1
 80247e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80247e2:	1064      	asrs	r4, r4, #1
 80247e4:	3201      	adds	r2, #1
 80247e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80247e8:	3508      	adds	r5, #8
 80247ea:	e7d0      	b.n	802478e <_strtod_l+0x522>
 80247ec:	23d4      	movs	r3, #212	@ 0xd4
 80247ee:	049b      	lsls	r3, r3, #18
 80247f0:	18cf      	adds	r7, r1, r3
 80247f2:	e7ea      	b.n	80247ca <_strtod_l+0x55e>
 80247f4:	2c00      	cmp	r4, #0
 80247f6:	d0e8      	beq.n	80247ca <_strtod_l+0x55e>
 80247f8:	4264      	negs	r4, r4
 80247fa:	230f      	movs	r3, #15
 80247fc:	0022      	movs	r2, r4
 80247fe:	401a      	ands	r2, r3
 8024800:	421c      	tst	r4, r3
 8024802:	d00a      	beq.n	802481a <_strtod_l+0x5ae>
 8024804:	4b15      	ldr	r3, [pc, #84]	@ (802485c <_strtod_l+0x5f0>)
 8024806:	00d2      	lsls	r2, r2, #3
 8024808:	189b      	adds	r3, r3, r2
 802480a:	0030      	movs	r0, r6
 802480c:	681a      	ldr	r2, [r3, #0]
 802480e:	685b      	ldr	r3, [r3, #4]
 8024810:	0039      	movs	r1, r7
 8024812:	f7dd fc65 	bl	80020e0 <__aeabi_ddiv>
 8024816:	0006      	movs	r6, r0
 8024818:	000f      	movs	r7, r1
 802481a:	1124      	asrs	r4, r4, #4
 802481c:	d0d5      	beq.n	80247ca <_strtod_l+0x55e>
 802481e:	2c1f      	cmp	r4, #31
 8024820:	dd28      	ble.n	8024874 <_strtod_l+0x608>
 8024822:	2300      	movs	r3, #0
 8024824:	9306      	str	r3, [sp, #24]
 8024826:	9307      	str	r3, [sp, #28]
 8024828:	930d      	str	r3, [sp, #52]	@ 0x34
 802482a:	9308      	str	r3, [sp, #32]
 802482c:	2322      	movs	r3, #34	@ 0x22
 802482e:	9a05      	ldr	r2, [sp, #20]
 8024830:	2600      	movs	r6, #0
 8024832:	6013      	str	r3, [r2, #0]
 8024834:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024836:	2700      	movs	r7, #0
 8024838:	2b00      	cmp	r3, #0
 802483a:	d000      	beq.n	802483e <_strtod_l+0x5d2>
 802483c:	e763      	b.n	8024706 <_strtod_l+0x49a>
 802483e:	e550      	b.n	80242e2 <_strtod_l+0x76>
 8024840:	00004e1f 	.word	0x00004e1f
 8024844:	0802e863 	.word	0x0802e863
 8024848:	0802ea28 	.word	0x0802ea28
 802484c:	7ff00000 	.word	0x7ff00000
 8024850:	0802e85b 	.word	0x0802e85b
 8024854:	0802e895 	.word	0x0802e895
 8024858:	0802ea24 	.word	0x0802ea24
 802485c:	0802ebb0 	.word	0x0802ebb0
 8024860:	0802eb88 	.word	0x0802eb88
 8024864:	fcb00000 	.word	0xfcb00000
 8024868:	7ca00000 	.word	0x7ca00000
 802486c:	7c900000 	.word	0x7c900000
 8024870:	7fefffff 	.word	0x7fefffff
 8024874:	2310      	movs	r3, #16
 8024876:	0022      	movs	r2, r4
 8024878:	401a      	ands	r2, r3
 802487a:	9209      	str	r2, [sp, #36]	@ 0x24
 802487c:	421c      	tst	r4, r3
 802487e:	d001      	beq.n	8024884 <_strtod_l+0x618>
 8024880:	335a      	adds	r3, #90	@ 0x5a
 8024882:	9309      	str	r3, [sp, #36]	@ 0x24
 8024884:	0030      	movs	r0, r6
 8024886:	0039      	movs	r1, r7
 8024888:	2300      	movs	r3, #0
 802488a:	4dc0      	ldr	r5, [pc, #768]	@ (8024b8c <_strtod_l+0x920>)
 802488c:	2201      	movs	r2, #1
 802488e:	4214      	tst	r4, r2
 8024890:	d004      	beq.n	802489c <_strtod_l+0x630>
 8024892:	682a      	ldr	r2, [r5, #0]
 8024894:	686b      	ldr	r3, [r5, #4]
 8024896:	f7de f85d 	bl	8002954 <__aeabi_dmul>
 802489a:	2301      	movs	r3, #1
 802489c:	1064      	asrs	r4, r4, #1
 802489e:	3508      	adds	r5, #8
 80248a0:	2c00      	cmp	r4, #0
 80248a2:	d1f3      	bne.n	802488c <_strtod_l+0x620>
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	d001      	beq.n	80248ac <_strtod_l+0x640>
 80248a8:	0006      	movs	r6, r0
 80248aa:	000f      	movs	r7, r1
 80248ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248ae:	2b00      	cmp	r3, #0
 80248b0:	d00d      	beq.n	80248ce <_strtod_l+0x662>
 80248b2:	236b      	movs	r3, #107	@ 0x6b
 80248b4:	007a      	lsls	r2, r7, #1
 80248b6:	0d52      	lsrs	r2, r2, #21
 80248b8:	0039      	movs	r1, r7
 80248ba:	1a9b      	subs	r3, r3, r2
 80248bc:	2b00      	cmp	r3, #0
 80248be:	dd06      	ble.n	80248ce <_strtod_l+0x662>
 80248c0:	2b1f      	cmp	r3, #31
 80248c2:	dd5c      	ble.n	802497e <_strtod_l+0x712>
 80248c4:	2600      	movs	r6, #0
 80248c6:	2b34      	cmp	r3, #52	@ 0x34
 80248c8:	dd52      	ble.n	8024970 <_strtod_l+0x704>
 80248ca:	27dc      	movs	r7, #220	@ 0xdc
 80248cc:	04bf      	lsls	r7, r7, #18
 80248ce:	2200      	movs	r2, #0
 80248d0:	2300      	movs	r3, #0
 80248d2:	0030      	movs	r0, r6
 80248d4:	0039      	movs	r1, r7
 80248d6:	f7db fdeb 	bl	80004b0 <__aeabi_dcmpeq>
 80248da:	2800      	cmp	r0, #0
 80248dc:	d1a1      	bne.n	8024822 <_strtod_l+0x5b6>
 80248de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80248e0:	9a08      	ldr	r2, [sp, #32]
 80248e2:	9300      	str	r3, [sp, #0]
 80248e4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80248e6:	9b06      	ldr	r3, [sp, #24]
 80248e8:	9805      	ldr	r0, [sp, #20]
 80248ea:	f002 fedf 	bl	80276ac <__s2b>
 80248ee:	900d      	str	r0, [sp, #52]	@ 0x34
 80248f0:	2800      	cmp	r0, #0
 80248f2:	d100      	bne.n	80248f6 <_strtod_l+0x68a>
 80248f4:	e6f9      	b.n	80246ea <_strtod_l+0x47e>
 80248f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80248f8:	9907      	ldr	r1, [sp, #28]
 80248fa:	43db      	mvns	r3, r3
 80248fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80248fe:	17db      	asrs	r3, r3, #31
 8024900:	1a52      	subs	r2, r2, r1
 8024902:	9214      	str	r2, [sp, #80]	@ 0x50
 8024904:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024906:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8024908:	17d2      	asrs	r2, r2, #31
 802490a:	4011      	ands	r1, r2
 802490c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802490e:	9114      	str	r1, [sp, #80]	@ 0x50
 8024910:	401a      	ands	r2, r3
 8024912:	2300      	movs	r3, #0
 8024914:	921a      	str	r2, [sp, #104]	@ 0x68
 8024916:	9306      	str	r3, [sp, #24]
 8024918:	9307      	str	r3, [sp, #28]
 802491a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802491c:	9805      	ldr	r0, [sp, #20]
 802491e:	6859      	ldr	r1, [r3, #4]
 8024920:	f002 fe18 	bl	8027554 <_Balloc>
 8024924:	9008      	str	r0, [sp, #32]
 8024926:	2800      	cmp	r0, #0
 8024928:	d100      	bne.n	802492c <_strtod_l+0x6c0>
 802492a:	e6e3      	b.n	80246f4 <_strtod_l+0x488>
 802492c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802492e:	300c      	adds	r0, #12
 8024930:	0019      	movs	r1, r3
 8024932:	691a      	ldr	r2, [r3, #16]
 8024934:	310c      	adds	r1, #12
 8024936:	3202      	adds	r2, #2
 8024938:	0092      	lsls	r2, r2, #2
 802493a:	f001 fb13 	bl	8025f64 <memcpy>
 802493e:	ab20      	add	r3, sp, #128	@ 0x80
 8024940:	9301      	str	r3, [sp, #4]
 8024942:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024944:	9300      	str	r3, [sp, #0]
 8024946:	0032      	movs	r2, r6
 8024948:	003b      	movs	r3, r7
 802494a:	9805      	ldr	r0, [sp, #20]
 802494c:	9610      	str	r6, [sp, #64]	@ 0x40
 802494e:	9711      	str	r7, [sp, #68]	@ 0x44
 8024950:	f003 f9f4 	bl	8027d3c <__d2b>
 8024954:	901e      	str	r0, [sp, #120]	@ 0x78
 8024956:	2800      	cmp	r0, #0
 8024958:	d100      	bne.n	802495c <_strtod_l+0x6f0>
 802495a:	e6cb      	b.n	80246f4 <_strtod_l+0x488>
 802495c:	2101      	movs	r1, #1
 802495e:	9805      	ldr	r0, [sp, #20]
 8024960:	f002 ff40 	bl	80277e4 <__i2b>
 8024964:	9007      	str	r0, [sp, #28]
 8024966:	2800      	cmp	r0, #0
 8024968:	d10e      	bne.n	8024988 <_strtod_l+0x71c>
 802496a:	2300      	movs	r3, #0
 802496c:	9307      	str	r3, [sp, #28]
 802496e:	e6c1      	b.n	80246f4 <_strtod_l+0x488>
 8024970:	234b      	movs	r3, #75	@ 0x4b
 8024972:	1a9a      	subs	r2, r3, r2
 8024974:	3b4c      	subs	r3, #76	@ 0x4c
 8024976:	4093      	lsls	r3, r2
 8024978:	4019      	ands	r1, r3
 802497a:	000f      	movs	r7, r1
 802497c:	e7a7      	b.n	80248ce <_strtod_l+0x662>
 802497e:	2201      	movs	r2, #1
 8024980:	4252      	negs	r2, r2
 8024982:	409a      	lsls	r2, r3
 8024984:	4016      	ands	r6, r2
 8024986:	e7a2      	b.n	80248ce <_strtod_l+0x662>
 8024988:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802498a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802498c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802498e:	1ad4      	subs	r4, r2, r3
 8024990:	2b00      	cmp	r3, #0
 8024992:	db01      	blt.n	8024998 <_strtod_l+0x72c>
 8024994:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8024996:	195d      	adds	r5, r3, r5
 8024998:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802499a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802499c:	1a5b      	subs	r3, r3, r1
 802499e:	2136      	movs	r1, #54	@ 0x36
 80249a0:	189b      	adds	r3, r3, r2
 80249a2:	1a8a      	subs	r2, r1, r2
 80249a4:	497a      	ldr	r1, [pc, #488]	@ (8024b90 <_strtod_l+0x924>)
 80249a6:	2001      	movs	r0, #1
 80249a8:	468c      	mov	ip, r1
 80249aa:	2100      	movs	r1, #0
 80249ac:	3b01      	subs	r3, #1
 80249ae:	9115      	str	r1, [sp, #84]	@ 0x54
 80249b0:	9016      	str	r0, [sp, #88]	@ 0x58
 80249b2:	4563      	cmp	r3, ip
 80249b4:	da06      	bge.n	80249c4 <_strtod_l+0x758>
 80249b6:	4661      	mov	r1, ip
 80249b8:	1ac9      	subs	r1, r1, r3
 80249ba:	1a52      	subs	r2, r2, r1
 80249bc:	291f      	cmp	r1, #31
 80249be:	dc3f      	bgt.n	8024a40 <_strtod_l+0x7d4>
 80249c0:	4088      	lsls	r0, r1
 80249c2:	9016      	str	r0, [sp, #88]	@ 0x58
 80249c4:	18ab      	adds	r3, r5, r2
 80249c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80249c8:	18a4      	adds	r4, r4, r2
 80249ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80249cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80249ce:	191c      	adds	r4, r3, r4
 80249d0:	002b      	movs	r3, r5
 80249d2:	4295      	cmp	r5, r2
 80249d4:	dd00      	ble.n	80249d8 <_strtod_l+0x76c>
 80249d6:	0013      	movs	r3, r2
 80249d8:	42a3      	cmp	r3, r4
 80249da:	dd00      	ble.n	80249de <_strtod_l+0x772>
 80249dc:	0023      	movs	r3, r4
 80249de:	2b00      	cmp	r3, #0
 80249e0:	dd04      	ble.n	80249ec <_strtod_l+0x780>
 80249e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80249e4:	1ae4      	subs	r4, r4, r3
 80249e6:	1ad2      	subs	r2, r2, r3
 80249e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80249ea:	1aed      	subs	r5, r5, r3
 80249ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80249ee:	2b00      	cmp	r3, #0
 80249f0:	dd16      	ble.n	8024a20 <_strtod_l+0x7b4>
 80249f2:	001a      	movs	r2, r3
 80249f4:	9907      	ldr	r1, [sp, #28]
 80249f6:	9805      	ldr	r0, [sp, #20]
 80249f8:	f002 ffb6 	bl	8027968 <__pow5mult>
 80249fc:	9007      	str	r0, [sp, #28]
 80249fe:	2800      	cmp	r0, #0
 8024a00:	d0b3      	beq.n	802496a <_strtod_l+0x6fe>
 8024a02:	0001      	movs	r1, r0
 8024a04:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024a06:	9805      	ldr	r0, [sp, #20]
 8024a08:	f002 ff04 	bl	8027814 <__multiply>
 8024a0c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024a0e:	2800      	cmp	r0, #0
 8024a10:	d100      	bne.n	8024a14 <_strtod_l+0x7a8>
 8024a12:	e66f      	b.n	80246f4 <_strtod_l+0x488>
 8024a14:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024a16:	9805      	ldr	r0, [sp, #20]
 8024a18:	f002 fde0 	bl	80275dc <_Bfree>
 8024a1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024a1e:	931e      	str	r3, [sp, #120]	@ 0x78
 8024a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	dc12      	bgt.n	8024a4c <_strtod_l+0x7e0>
 8024a26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a28:	2b00      	cmp	r3, #0
 8024a2a:	dd18      	ble.n	8024a5e <_strtod_l+0x7f2>
 8024a2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024a2e:	9908      	ldr	r1, [sp, #32]
 8024a30:	9805      	ldr	r0, [sp, #20]
 8024a32:	f002 ff99 	bl	8027968 <__pow5mult>
 8024a36:	9008      	str	r0, [sp, #32]
 8024a38:	2800      	cmp	r0, #0
 8024a3a:	d110      	bne.n	8024a5e <_strtod_l+0x7f2>
 8024a3c:	2300      	movs	r3, #0
 8024a3e:	e658      	b.n	80246f2 <_strtod_l+0x486>
 8024a40:	4954      	ldr	r1, [pc, #336]	@ (8024b94 <_strtod_l+0x928>)
 8024a42:	1acb      	subs	r3, r1, r3
 8024a44:	0001      	movs	r1, r0
 8024a46:	4099      	lsls	r1, r3
 8024a48:	9115      	str	r1, [sp, #84]	@ 0x54
 8024a4a:	e7ba      	b.n	80249c2 <_strtod_l+0x756>
 8024a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024a4e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024a50:	9805      	ldr	r0, [sp, #20]
 8024a52:	f002 ffe5 	bl	8027a20 <__lshift>
 8024a56:	901e      	str	r0, [sp, #120]	@ 0x78
 8024a58:	2800      	cmp	r0, #0
 8024a5a:	d1e4      	bne.n	8024a26 <_strtod_l+0x7ba>
 8024a5c:	e64a      	b.n	80246f4 <_strtod_l+0x488>
 8024a5e:	2c00      	cmp	r4, #0
 8024a60:	dd07      	ble.n	8024a72 <_strtod_l+0x806>
 8024a62:	0022      	movs	r2, r4
 8024a64:	9908      	ldr	r1, [sp, #32]
 8024a66:	9805      	ldr	r0, [sp, #20]
 8024a68:	f002 ffda 	bl	8027a20 <__lshift>
 8024a6c:	9008      	str	r0, [sp, #32]
 8024a6e:	2800      	cmp	r0, #0
 8024a70:	d0e4      	beq.n	8024a3c <_strtod_l+0x7d0>
 8024a72:	2d00      	cmp	r5, #0
 8024a74:	dd08      	ble.n	8024a88 <_strtod_l+0x81c>
 8024a76:	002a      	movs	r2, r5
 8024a78:	9907      	ldr	r1, [sp, #28]
 8024a7a:	9805      	ldr	r0, [sp, #20]
 8024a7c:	f002 ffd0 	bl	8027a20 <__lshift>
 8024a80:	9007      	str	r0, [sp, #28]
 8024a82:	2800      	cmp	r0, #0
 8024a84:	d100      	bne.n	8024a88 <_strtod_l+0x81c>
 8024a86:	e635      	b.n	80246f4 <_strtod_l+0x488>
 8024a88:	9a08      	ldr	r2, [sp, #32]
 8024a8a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024a8c:	9805      	ldr	r0, [sp, #20]
 8024a8e:	f003 f84f 	bl	8027b30 <__mdiff>
 8024a92:	9006      	str	r0, [sp, #24]
 8024a94:	2800      	cmp	r0, #0
 8024a96:	d100      	bne.n	8024a9a <_strtod_l+0x82e>
 8024a98:	e62c      	b.n	80246f4 <_strtod_l+0x488>
 8024a9a:	68c3      	ldr	r3, [r0, #12]
 8024a9c:	9907      	ldr	r1, [sp, #28]
 8024a9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024aa0:	2300      	movs	r3, #0
 8024aa2:	60c3      	str	r3, [r0, #12]
 8024aa4:	f003 f828 	bl	8027af8 <__mcmp>
 8024aa8:	2800      	cmp	r0, #0
 8024aaa:	da3b      	bge.n	8024b24 <_strtod_l+0x8b8>
 8024aac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024aae:	4333      	orrs	r3, r6
 8024ab0:	d167      	bne.n	8024b82 <_strtod_l+0x916>
 8024ab2:	033b      	lsls	r3, r7, #12
 8024ab4:	d165      	bne.n	8024b82 <_strtod_l+0x916>
 8024ab6:	22d6      	movs	r2, #214	@ 0xd6
 8024ab8:	4b37      	ldr	r3, [pc, #220]	@ (8024b98 <_strtod_l+0x92c>)
 8024aba:	04d2      	lsls	r2, r2, #19
 8024abc:	403b      	ands	r3, r7
 8024abe:	4293      	cmp	r3, r2
 8024ac0:	d95f      	bls.n	8024b82 <_strtod_l+0x916>
 8024ac2:	9b06      	ldr	r3, [sp, #24]
 8024ac4:	695b      	ldr	r3, [r3, #20]
 8024ac6:	2b00      	cmp	r3, #0
 8024ac8:	d103      	bne.n	8024ad2 <_strtod_l+0x866>
 8024aca:	9b06      	ldr	r3, [sp, #24]
 8024acc:	691b      	ldr	r3, [r3, #16]
 8024ace:	2b01      	cmp	r3, #1
 8024ad0:	dd57      	ble.n	8024b82 <_strtod_l+0x916>
 8024ad2:	9906      	ldr	r1, [sp, #24]
 8024ad4:	2201      	movs	r2, #1
 8024ad6:	9805      	ldr	r0, [sp, #20]
 8024ad8:	f002 ffa2 	bl	8027a20 <__lshift>
 8024adc:	9907      	ldr	r1, [sp, #28]
 8024ade:	9006      	str	r0, [sp, #24]
 8024ae0:	f003 f80a 	bl	8027af8 <__mcmp>
 8024ae4:	2800      	cmp	r0, #0
 8024ae6:	dd4c      	ble.n	8024b82 <_strtod_l+0x916>
 8024ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8024b98 <_strtod_l+0x92c>)
 8024aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024aec:	403b      	ands	r3, r7
 8024aee:	2a00      	cmp	r2, #0
 8024af0:	d074      	beq.n	8024bdc <_strtod_l+0x970>
 8024af2:	22d6      	movs	r2, #214	@ 0xd6
 8024af4:	04d2      	lsls	r2, r2, #19
 8024af6:	4293      	cmp	r3, r2
 8024af8:	d870      	bhi.n	8024bdc <_strtod_l+0x970>
 8024afa:	22dc      	movs	r2, #220	@ 0xdc
 8024afc:	0492      	lsls	r2, r2, #18
 8024afe:	4293      	cmp	r3, r2
 8024b00:	d800      	bhi.n	8024b04 <_strtod_l+0x898>
 8024b02:	e693      	b.n	802482c <_strtod_l+0x5c0>
 8024b04:	0030      	movs	r0, r6
 8024b06:	0039      	movs	r1, r7
 8024b08:	4b24      	ldr	r3, [pc, #144]	@ (8024b9c <_strtod_l+0x930>)
 8024b0a:	2200      	movs	r2, #0
 8024b0c:	f7dd ff22 	bl	8002954 <__aeabi_dmul>
 8024b10:	4b21      	ldr	r3, [pc, #132]	@ (8024b98 <_strtod_l+0x92c>)
 8024b12:	0006      	movs	r6, r0
 8024b14:	000f      	movs	r7, r1
 8024b16:	420b      	tst	r3, r1
 8024b18:	d000      	beq.n	8024b1c <_strtod_l+0x8b0>
 8024b1a:	e5f4      	b.n	8024706 <_strtod_l+0x49a>
 8024b1c:	2322      	movs	r3, #34	@ 0x22
 8024b1e:	9a05      	ldr	r2, [sp, #20]
 8024b20:	6013      	str	r3, [r2, #0]
 8024b22:	e5f0      	b.n	8024706 <_strtod_l+0x49a>
 8024b24:	970e      	str	r7, [sp, #56]	@ 0x38
 8024b26:	2800      	cmp	r0, #0
 8024b28:	d175      	bne.n	8024c16 <_strtod_l+0x9aa>
 8024b2a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024b2c:	033b      	lsls	r3, r7, #12
 8024b2e:	0b1b      	lsrs	r3, r3, #12
 8024b30:	2a00      	cmp	r2, #0
 8024b32:	d039      	beq.n	8024ba8 <_strtod_l+0x93c>
 8024b34:	4a1a      	ldr	r2, [pc, #104]	@ (8024ba0 <_strtod_l+0x934>)
 8024b36:	4293      	cmp	r3, r2
 8024b38:	d138      	bne.n	8024bac <_strtod_l+0x940>
 8024b3a:	2101      	movs	r1, #1
 8024b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b3e:	4249      	negs	r1, r1
 8024b40:	0032      	movs	r2, r6
 8024b42:	0008      	movs	r0, r1
 8024b44:	2b00      	cmp	r3, #0
 8024b46:	d00b      	beq.n	8024b60 <_strtod_l+0x8f4>
 8024b48:	24d4      	movs	r4, #212	@ 0xd4
 8024b4a:	4b13      	ldr	r3, [pc, #76]	@ (8024b98 <_strtod_l+0x92c>)
 8024b4c:	0008      	movs	r0, r1
 8024b4e:	403b      	ands	r3, r7
 8024b50:	04e4      	lsls	r4, r4, #19
 8024b52:	42a3      	cmp	r3, r4
 8024b54:	d804      	bhi.n	8024b60 <_strtod_l+0x8f4>
 8024b56:	306c      	adds	r0, #108	@ 0x6c
 8024b58:	0d1b      	lsrs	r3, r3, #20
 8024b5a:	1ac3      	subs	r3, r0, r3
 8024b5c:	4099      	lsls	r1, r3
 8024b5e:	0008      	movs	r0, r1
 8024b60:	4282      	cmp	r2, r0
 8024b62:	d123      	bne.n	8024bac <_strtod_l+0x940>
 8024b64:	4b0f      	ldr	r3, [pc, #60]	@ (8024ba4 <_strtod_l+0x938>)
 8024b66:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024b68:	4299      	cmp	r1, r3
 8024b6a:	d102      	bne.n	8024b72 <_strtod_l+0x906>
 8024b6c:	3201      	adds	r2, #1
 8024b6e:	d100      	bne.n	8024b72 <_strtod_l+0x906>
 8024b70:	e5c0      	b.n	80246f4 <_strtod_l+0x488>
 8024b72:	4b09      	ldr	r3, [pc, #36]	@ (8024b98 <_strtod_l+0x92c>)
 8024b74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024b76:	2600      	movs	r6, #0
 8024b78:	401a      	ands	r2, r3
 8024b7a:	0013      	movs	r3, r2
 8024b7c:	2280      	movs	r2, #128	@ 0x80
 8024b7e:	0352      	lsls	r2, r2, #13
 8024b80:	189f      	adds	r7, r3, r2
 8024b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b84:	2b00      	cmp	r3, #0
 8024b86:	d1bd      	bne.n	8024b04 <_strtod_l+0x898>
 8024b88:	e5bd      	b.n	8024706 <_strtod_l+0x49a>
 8024b8a:	46c0      	nop			@ (mov r8, r8)
 8024b8c:	0802ea50 	.word	0x0802ea50
 8024b90:	fffffc02 	.word	0xfffffc02
 8024b94:	fffffbe2 	.word	0xfffffbe2
 8024b98:	7ff00000 	.word	0x7ff00000
 8024b9c:	39500000 	.word	0x39500000
 8024ba0:	000fffff 	.word	0x000fffff
 8024ba4:	7fefffff 	.word	0x7fefffff
 8024ba8:	4333      	orrs	r3, r6
 8024baa:	d09d      	beq.n	8024ae8 <_strtod_l+0x87c>
 8024bac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d01c      	beq.n	8024bec <_strtod_l+0x980>
 8024bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024bb4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024bb6:	4213      	tst	r3, r2
 8024bb8:	d0e3      	beq.n	8024b82 <_strtod_l+0x916>
 8024bba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024bbc:	0030      	movs	r0, r6
 8024bbe:	0039      	movs	r1, r7
 8024bc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024bc2:	2b00      	cmp	r3, #0
 8024bc4:	d016      	beq.n	8024bf4 <_strtod_l+0x988>
 8024bc6:	f7ff fb39 	bl	802423c <sulp>
 8024bca:	0002      	movs	r2, r0
 8024bcc:	000b      	movs	r3, r1
 8024bce:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024bd0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024bd2:	f7dc febf 	bl	8001954 <__aeabi_dadd>
 8024bd6:	0006      	movs	r6, r0
 8024bd8:	000f      	movs	r7, r1
 8024bda:	e7d2      	b.n	8024b82 <_strtod_l+0x916>
 8024bdc:	2601      	movs	r6, #1
 8024bde:	4a92      	ldr	r2, [pc, #584]	@ (8024e28 <_strtod_l+0xbbc>)
 8024be0:	4276      	negs	r6, r6
 8024be2:	189b      	adds	r3, r3, r2
 8024be4:	4a91      	ldr	r2, [pc, #580]	@ (8024e2c <_strtod_l+0xbc0>)
 8024be6:	431a      	orrs	r2, r3
 8024be8:	0017      	movs	r7, r2
 8024bea:	e7ca      	b.n	8024b82 <_strtod_l+0x916>
 8024bec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024bee:	4233      	tst	r3, r6
 8024bf0:	d0c7      	beq.n	8024b82 <_strtod_l+0x916>
 8024bf2:	e7e2      	b.n	8024bba <_strtod_l+0x94e>
 8024bf4:	f7ff fb22 	bl	802423c <sulp>
 8024bf8:	0002      	movs	r2, r0
 8024bfa:	000b      	movs	r3, r1
 8024bfc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024bfe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024c00:	f7de f98e 	bl	8002f20 <__aeabi_dsub>
 8024c04:	2200      	movs	r2, #0
 8024c06:	2300      	movs	r3, #0
 8024c08:	0006      	movs	r6, r0
 8024c0a:	000f      	movs	r7, r1
 8024c0c:	f7db fc50 	bl	80004b0 <__aeabi_dcmpeq>
 8024c10:	2800      	cmp	r0, #0
 8024c12:	d0b6      	beq.n	8024b82 <_strtod_l+0x916>
 8024c14:	e60a      	b.n	802482c <_strtod_l+0x5c0>
 8024c16:	9907      	ldr	r1, [sp, #28]
 8024c18:	9806      	ldr	r0, [sp, #24]
 8024c1a:	f003 f8ef 	bl	8027dfc <__ratio>
 8024c1e:	2380      	movs	r3, #128	@ 0x80
 8024c20:	2200      	movs	r2, #0
 8024c22:	05db      	lsls	r3, r3, #23
 8024c24:	0004      	movs	r4, r0
 8024c26:	000d      	movs	r5, r1
 8024c28:	f7db fc52 	bl	80004d0 <__aeabi_dcmple>
 8024c2c:	2800      	cmp	r0, #0
 8024c2e:	d06c      	beq.n	8024d0a <_strtod_l+0xa9e>
 8024c30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024c32:	2b00      	cmp	r3, #0
 8024c34:	d177      	bne.n	8024d26 <_strtod_l+0xaba>
 8024c36:	2e00      	cmp	r6, #0
 8024c38:	d157      	bne.n	8024cea <_strtod_l+0xa7e>
 8024c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c3c:	031b      	lsls	r3, r3, #12
 8024c3e:	d15a      	bne.n	8024cf6 <_strtod_l+0xa8a>
 8024c40:	2200      	movs	r2, #0
 8024c42:	0020      	movs	r0, r4
 8024c44:	0029      	movs	r1, r5
 8024c46:	4b7a      	ldr	r3, [pc, #488]	@ (8024e30 <_strtod_l+0xbc4>)
 8024c48:	f7db fc38 	bl	80004bc <__aeabi_dcmplt>
 8024c4c:	2800      	cmp	r0, #0
 8024c4e:	d159      	bne.n	8024d04 <_strtod_l+0xa98>
 8024c50:	0020      	movs	r0, r4
 8024c52:	0029      	movs	r1, r5
 8024c54:	2200      	movs	r2, #0
 8024c56:	4b77      	ldr	r3, [pc, #476]	@ (8024e34 <_strtod_l+0xbc8>)
 8024c58:	f7dd fe7c 	bl	8002954 <__aeabi_dmul>
 8024c5c:	0004      	movs	r4, r0
 8024c5e:	000d      	movs	r5, r1
 8024c60:	2380      	movs	r3, #128	@ 0x80
 8024c62:	061b      	lsls	r3, r3, #24
 8024c64:	18eb      	adds	r3, r5, r3
 8024c66:	940a      	str	r4, [sp, #40]	@ 0x28
 8024c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c6e:	9216      	str	r2, [sp, #88]	@ 0x58
 8024c70:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024c72:	4a71      	ldr	r2, [pc, #452]	@ (8024e38 <_strtod_l+0xbcc>)
 8024c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c76:	4013      	ands	r3, r2
 8024c78:	9315      	str	r3, [sp, #84]	@ 0x54
 8024c7a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8024e3c <_strtod_l+0xbd0>)
 8024c7e:	429a      	cmp	r2, r3
 8024c80:	d000      	beq.n	8024c84 <_strtod_l+0xa18>
 8024c82:	e087      	b.n	8024d94 <_strtod_l+0xb28>
 8024c84:	4a6e      	ldr	r2, [pc, #440]	@ (8024e40 <_strtod_l+0xbd4>)
 8024c86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c88:	4694      	mov	ip, r2
 8024c8a:	4463      	add	r3, ip
 8024c8c:	001f      	movs	r7, r3
 8024c8e:	0030      	movs	r0, r6
 8024c90:	0019      	movs	r1, r3
 8024c92:	f002 ffe7 	bl	8027c64 <__ulp>
 8024c96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024c98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c9a:	f7dd fe5b 	bl	8002954 <__aeabi_dmul>
 8024c9e:	0032      	movs	r2, r6
 8024ca0:	003b      	movs	r3, r7
 8024ca2:	f7dc fe57 	bl	8001954 <__aeabi_dadd>
 8024ca6:	4a64      	ldr	r2, [pc, #400]	@ (8024e38 <_strtod_l+0xbcc>)
 8024ca8:	4b66      	ldr	r3, [pc, #408]	@ (8024e44 <_strtod_l+0xbd8>)
 8024caa:	0006      	movs	r6, r0
 8024cac:	400a      	ands	r2, r1
 8024cae:	429a      	cmp	r2, r3
 8024cb0:	d940      	bls.n	8024d34 <_strtod_l+0xac8>
 8024cb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024cb4:	4a64      	ldr	r2, [pc, #400]	@ (8024e48 <_strtod_l+0xbdc>)
 8024cb6:	4293      	cmp	r3, r2
 8024cb8:	d103      	bne.n	8024cc2 <_strtod_l+0xa56>
 8024cba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024cbc:	3301      	adds	r3, #1
 8024cbe:	d100      	bne.n	8024cc2 <_strtod_l+0xa56>
 8024cc0:	e518      	b.n	80246f4 <_strtod_l+0x488>
 8024cc2:	2601      	movs	r6, #1
 8024cc4:	4f60      	ldr	r7, [pc, #384]	@ (8024e48 <_strtod_l+0xbdc>)
 8024cc6:	4276      	negs	r6, r6
 8024cc8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024cca:	9805      	ldr	r0, [sp, #20]
 8024ccc:	f002 fc86 	bl	80275dc <_Bfree>
 8024cd0:	9908      	ldr	r1, [sp, #32]
 8024cd2:	9805      	ldr	r0, [sp, #20]
 8024cd4:	f002 fc82 	bl	80275dc <_Bfree>
 8024cd8:	9907      	ldr	r1, [sp, #28]
 8024cda:	9805      	ldr	r0, [sp, #20]
 8024cdc:	f002 fc7e 	bl	80275dc <_Bfree>
 8024ce0:	9906      	ldr	r1, [sp, #24]
 8024ce2:	9805      	ldr	r0, [sp, #20]
 8024ce4:	f002 fc7a 	bl	80275dc <_Bfree>
 8024ce8:	e617      	b.n	802491a <_strtod_l+0x6ae>
 8024cea:	2e01      	cmp	r6, #1
 8024cec:	d103      	bne.n	8024cf6 <_strtod_l+0xa8a>
 8024cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024cf0:	2b00      	cmp	r3, #0
 8024cf2:	d100      	bne.n	8024cf6 <_strtod_l+0xa8a>
 8024cf4:	e59a      	b.n	802482c <_strtod_l+0x5c0>
 8024cf6:	2300      	movs	r3, #0
 8024cf8:	4c54      	ldr	r4, [pc, #336]	@ (8024e4c <_strtod_l+0xbe0>)
 8024cfa:	4d4d      	ldr	r5, [pc, #308]	@ (8024e30 <_strtod_l+0xbc4>)
 8024cfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8024cfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024d00:	2400      	movs	r4, #0
 8024d02:	e7b2      	b.n	8024c6a <_strtod_l+0x9fe>
 8024d04:	2400      	movs	r4, #0
 8024d06:	4d4b      	ldr	r5, [pc, #300]	@ (8024e34 <_strtod_l+0xbc8>)
 8024d08:	e7aa      	b.n	8024c60 <_strtod_l+0x9f4>
 8024d0a:	0020      	movs	r0, r4
 8024d0c:	0029      	movs	r1, r5
 8024d0e:	4b49      	ldr	r3, [pc, #292]	@ (8024e34 <_strtod_l+0xbc8>)
 8024d10:	2200      	movs	r2, #0
 8024d12:	f7dd fe1f 	bl	8002954 <__aeabi_dmul>
 8024d16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d18:	0004      	movs	r4, r0
 8024d1a:	000d      	movs	r5, r1
 8024d1c:	2b00      	cmp	r3, #0
 8024d1e:	d09f      	beq.n	8024c60 <_strtod_l+0x9f4>
 8024d20:	940a      	str	r4, [sp, #40]	@ 0x28
 8024d22:	950b      	str	r5, [sp, #44]	@ 0x2c
 8024d24:	e7a1      	b.n	8024c6a <_strtod_l+0x9fe>
 8024d26:	2300      	movs	r3, #0
 8024d28:	4c41      	ldr	r4, [pc, #260]	@ (8024e30 <_strtod_l+0xbc4>)
 8024d2a:	0025      	movs	r5, r4
 8024d2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8024d2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024d30:	001c      	movs	r4, r3
 8024d32:	e79a      	b.n	8024c6a <_strtod_l+0x9fe>
 8024d34:	23d4      	movs	r3, #212	@ 0xd4
 8024d36:	049b      	lsls	r3, r3, #18
 8024d38:	18cf      	adds	r7, r1, r3
 8024d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d3c:	9710      	str	r7, [sp, #64]	@ 0x40
 8024d3e:	2b00      	cmp	r3, #0
 8024d40:	d1c2      	bne.n	8024cc8 <_strtod_l+0xa5c>
 8024d42:	4b3d      	ldr	r3, [pc, #244]	@ (8024e38 <_strtod_l+0xbcc>)
 8024d44:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024d46:	403b      	ands	r3, r7
 8024d48:	429a      	cmp	r2, r3
 8024d4a:	d1bd      	bne.n	8024cc8 <_strtod_l+0xa5c>
 8024d4c:	0020      	movs	r0, r4
 8024d4e:	0029      	movs	r1, r5
 8024d50:	f7db fc9a 	bl	8000688 <__aeabi_d2lz>
 8024d54:	f7db fcd2 	bl	80006fc <__aeabi_l2d>
 8024d58:	0002      	movs	r2, r0
 8024d5a:	000b      	movs	r3, r1
 8024d5c:	0020      	movs	r0, r4
 8024d5e:	0029      	movs	r1, r5
 8024d60:	f7de f8de 	bl	8002f20 <__aeabi_dsub>
 8024d64:	033c      	lsls	r4, r7, #12
 8024d66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d68:	0b24      	lsrs	r4, r4, #12
 8024d6a:	4334      	orrs	r4, r6
 8024d6c:	900e      	str	r0, [sp, #56]	@ 0x38
 8024d6e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024d70:	4a37      	ldr	r2, [pc, #220]	@ (8024e50 <_strtod_l+0xbe4>)
 8024d72:	431c      	orrs	r4, r3
 8024d74:	d052      	beq.n	8024e1c <_strtod_l+0xbb0>
 8024d76:	4b37      	ldr	r3, [pc, #220]	@ (8024e54 <_strtod_l+0xbe8>)
 8024d78:	f7db fba0 	bl	80004bc <__aeabi_dcmplt>
 8024d7c:	2800      	cmp	r0, #0
 8024d7e:	d000      	beq.n	8024d82 <_strtod_l+0xb16>
 8024d80:	e4c1      	b.n	8024706 <_strtod_l+0x49a>
 8024d82:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024d84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024d86:	4a34      	ldr	r2, [pc, #208]	@ (8024e58 <_strtod_l+0xbec>)
 8024d88:	4b2a      	ldr	r3, [pc, #168]	@ (8024e34 <_strtod_l+0xbc8>)
 8024d8a:	f7db fbab 	bl	80004e4 <__aeabi_dcmpgt>
 8024d8e:	2800      	cmp	r0, #0
 8024d90:	d09a      	beq.n	8024cc8 <_strtod_l+0xa5c>
 8024d92:	e4b8      	b.n	8024706 <_strtod_l+0x49a>
 8024d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d96:	2b00      	cmp	r3, #0
 8024d98:	d02a      	beq.n	8024df0 <_strtod_l+0xb84>
 8024d9a:	23d4      	movs	r3, #212	@ 0xd4
 8024d9c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024d9e:	04db      	lsls	r3, r3, #19
 8024da0:	429a      	cmp	r2, r3
 8024da2:	d825      	bhi.n	8024df0 <_strtod_l+0xb84>
 8024da4:	0020      	movs	r0, r4
 8024da6:	0029      	movs	r1, r5
 8024da8:	4a2c      	ldr	r2, [pc, #176]	@ (8024e5c <_strtod_l+0xbf0>)
 8024daa:	4b2d      	ldr	r3, [pc, #180]	@ (8024e60 <_strtod_l+0xbf4>)
 8024dac:	f7db fb90 	bl	80004d0 <__aeabi_dcmple>
 8024db0:	2800      	cmp	r0, #0
 8024db2:	d016      	beq.n	8024de2 <_strtod_l+0xb76>
 8024db4:	0020      	movs	r0, r4
 8024db6:	0029      	movs	r1, r5
 8024db8:	f7db fc48 	bl	800064c <__aeabi_d2uiz>
 8024dbc:	2800      	cmp	r0, #0
 8024dbe:	d100      	bne.n	8024dc2 <_strtod_l+0xb56>
 8024dc0:	3001      	adds	r0, #1
 8024dc2:	f7de fd43 	bl	800384c <__aeabi_ui2d>
 8024dc6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024dc8:	0004      	movs	r4, r0
 8024dca:	000d      	movs	r5, r1
 8024dcc:	2b00      	cmp	r3, #0
 8024dce:	d122      	bne.n	8024e16 <_strtod_l+0xbaa>
 8024dd0:	2380      	movs	r3, #128	@ 0x80
 8024dd2:	061b      	lsls	r3, r3, #24
 8024dd4:	18cb      	adds	r3, r1, r3
 8024dd6:	9018      	str	r0, [sp, #96]	@ 0x60
 8024dd8:	9319      	str	r3, [sp, #100]	@ 0x64
 8024dda:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024dde:	9216      	str	r2, [sp, #88]	@ 0x58
 8024de0:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024de2:	22d6      	movs	r2, #214	@ 0xd6
 8024de4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024de6:	04d2      	lsls	r2, r2, #19
 8024de8:	189b      	adds	r3, r3, r2
 8024dea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024dec:	1a9b      	subs	r3, r3, r2
 8024dee:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024df0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024df2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024df4:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8024df6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8024df8:	f002 ff34 	bl	8027c64 <__ulp>
 8024dfc:	0002      	movs	r2, r0
 8024dfe:	000b      	movs	r3, r1
 8024e00:	0030      	movs	r0, r6
 8024e02:	0039      	movs	r1, r7
 8024e04:	f7dd fda6 	bl	8002954 <__aeabi_dmul>
 8024e08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024e0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024e0c:	f7dc fda2 	bl	8001954 <__aeabi_dadd>
 8024e10:	0006      	movs	r6, r0
 8024e12:	000f      	movs	r7, r1
 8024e14:	e791      	b.n	8024d3a <_strtod_l+0xace>
 8024e16:	9418      	str	r4, [sp, #96]	@ 0x60
 8024e18:	9519      	str	r5, [sp, #100]	@ 0x64
 8024e1a:	e7de      	b.n	8024dda <_strtod_l+0xb6e>
 8024e1c:	4b11      	ldr	r3, [pc, #68]	@ (8024e64 <_strtod_l+0xbf8>)
 8024e1e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024e20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024e22:	f7db fb4b 	bl	80004bc <__aeabi_dcmplt>
 8024e26:	e7b2      	b.n	8024d8e <_strtod_l+0xb22>
 8024e28:	fff00000 	.word	0xfff00000
 8024e2c:	000fffff 	.word	0x000fffff
 8024e30:	3ff00000 	.word	0x3ff00000
 8024e34:	3fe00000 	.word	0x3fe00000
 8024e38:	7ff00000 	.word	0x7ff00000
 8024e3c:	7fe00000 	.word	0x7fe00000
 8024e40:	fcb00000 	.word	0xfcb00000
 8024e44:	7c9fffff 	.word	0x7c9fffff
 8024e48:	7fefffff 	.word	0x7fefffff
 8024e4c:	bff00000 	.word	0xbff00000
 8024e50:	94a03595 	.word	0x94a03595
 8024e54:	3fdfffff 	.word	0x3fdfffff
 8024e58:	35afe535 	.word	0x35afe535
 8024e5c:	ffc00000 	.word	0xffc00000
 8024e60:	41dfffff 	.word	0x41dfffff
 8024e64:	3fcfffff 	.word	0x3fcfffff

08024e68 <strtod>:
 8024e68:	b510      	push	{r4, lr}
 8024e6a:	4c04      	ldr	r4, [pc, #16]	@ (8024e7c <strtod+0x14>)
 8024e6c:	000a      	movs	r2, r1
 8024e6e:	0001      	movs	r1, r0
 8024e70:	4b03      	ldr	r3, [pc, #12]	@ (8024e80 <strtod+0x18>)
 8024e72:	6820      	ldr	r0, [r4, #0]
 8024e74:	f7ff f9fa 	bl	802426c <_strtod_l>
 8024e78:	bd10      	pop	{r4, pc}
 8024e7a:	46c0      	nop			@ (mov r8, r8)
 8024e7c:	200003e4 	.word	0x200003e4
 8024e80:	20000278 	.word	0x20000278

08024e84 <_strtol_l.isra.0>:
 8024e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e86:	b085      	sub	sp, #20
 8024e88:	0017      	movs	r7, r2
 8024e8a:	001e      	movs	r6, r3
 8024e8c:	9003      	str	r0, [sp, #12]
 8024e8e:	9101      	str	r1, [sp, #4]
 8024e90:	2b24      	cmp	r3, #36	@ 0x24
 8024e92:	d823      	bhi.n	8024edc <_strtol_l.isra.0+0x58>
 8024e94:	000c      	movs	r4, r1
 8024e96:	2b01      	cmp	r3, #1
 8024e98:	d020      	beq.n	8024edc <_strtol_l.isra.0+0x58>
 8024e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8024f90 <_strtol_l.isra.0+0x10c>)
 8024e9c:	2208      	movs	r2, #8
 8024e9e:	469c      	mov	ip, r3
 8024ea0:	0023      	movs	r3, r4
 8024ea2:	4661      	mov	r1, ip
 8024ea4:	781d      	ldrb	r5, [r3, #0]
 8024ea6:	3401      	adds	r4, #1
 8024ea8:	5d48      	ldrb	r0, [r1, r5]
 8024eaa:	0001      	movs	r1, r0
 8024eac:	4011      	ands	r1, r2
 8024eae:	4210      	tst	r0, r2
 8024eb0:	d1f6      	bne.n	8024ea0 <_strtol_l.isra.0+0x1c>
 8024eb2:	2d2d      	cmp	r5, #45	@ 0x2d
 8024eb4:	d119      	bne.n	8024eea <_strtol_l.isra.0+0x66>
 8024eb6:	7825      	ldrb	r5, [r4, #0]
 8024eb8:	1c9c      	adds	r4, r3, #2
 8024eba:	2301      	movs	r3, #1
 8024ebc:	9300      	str	r3, [sp, #0]
 8024ebe:	2210      	movs	r2, #16
 8024ec0:	0033      	movs	r3, r6
 8024ec2:	4393      	bics	r3, r2
 8024ec4:	d11d      	bne.n	8024f02 <_strtol_l.isra.0+0x7e>
 8024ec6:	2d30      	cmp	r5, #48	@ 0x30
 8024ec8:	d115      	bne.n	8024ef6 <_strtol_l.isra.0+0x72>
 8024eca:	2120      	movs	r1, #32
 8024ecc:	7823      	ldrb	r3, [r4, #0]
 8024ece:	438b      	bics	r3, r1
 8024ed0:	2b58      	cmp	r3, #88	@ 0x58
 8024ed2:	d110      	bne.n	8024ef6 <_strtol_l.isra.0+0x72>
 8024ed4:	7865      	ldrb	r5, [r4, #1]
 8024ed6:	3402      	adds	r4, #2
 8024ed8:	2610      	movs	r6, #16
 8024eda:	e012      	b.n	8024f02 <_strtol_l.isra.0+0x7e>
 8024edc:	f001 f80a 	bl	8025ef4 <__errno>
 8024ee0:	2316      	movs	r3, #22
 8024ee2:	6003      	str	r3, [r0, #0]
 8024ee4:	2000      	movs	r0, #0
 8024ee6:	b005      	add	sp, #20
 8024ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024eea:	9100      	str	r1, [sp, #0]
 8024eec:	2d2b      	cmp	r5, #43	@ 0x2b
 8024eee:	d1e6      	bne.n	8024ebe <_strtol_l.isra.0+0x3a>
 8024ef0:	7825      	ldrb	r5, [r4, #0]
 8024ef2:	1c9c      	adds	r4, r3, #2
 8024ef4:	e7e3      	b.n	8024ebe <_strtol_l.isra.0+0x3a>
 8024ef6:	2e00      	cmp	r6, #0
 8024ef8:	d1ee      	bne.n	8024ed8 <_strtol_l.isra.0+0x54>
 8024efa:	360a      	adds	r6, #10
 8024efc:	2d30      	cmp	r5, #48	@ 0x30
 8024efe:	d100      	bne.n	8024f02 <_strtol_l.isra.0+0x7e>
 8024f00:	3e02      	subs	r6, #2
 8024f02:	4a24      	ldr	r2, [pc, #144]	@ (8024f94 <_strtol_l.isra.0+0x110>)
 8024f04:	9b00      	ldr	r3, [sp, #0]
 8024f06:	4694      	mov	ip, r2
 8024f08:	4463      	add	r3, ip
 8024f0a:	0031      	movs	r1, r6
 8024f0c:	0018      	movs	r0, r3
 8024f0e:	9302      	str	r3, [sp, #8]
 8024f10:	f7db f9ce 	bl	80002b0 <__aeabi_uidivmod>
 8024f14:	2200      	movs	r2, #0
 8024f16:	4684      	mov	ip, r0
 8024f18:	0010      	movs	r0, r2
 8024f1a:	002b      	movs	r3, r5
 8024f1c:	3b30      	subs	r3, #48	@ 0x30
 8024f1e:	2b09      	cmp	r3, #9
 8024f20:	d811      	bhi.n	8024f46 <_strtol_l.isra.0+0xc2>
 8024f22:	001d      	movs	r5, r3
 8024f24:	42ae      	cmp	r6, r5
 8024f26:	dd1d      	ble.n	8024f64 <_strtol_l.isra.0+0xe0>
 8024f28:	1c53      	adds	r3, r2, #1
 8024f2a:	d009      	beq.n	8024f40 <_strtol_l.isra.0+0xbc>
 8024f2c:	2201      	movs	r2, #1
 8024f2e:	4252      	negs	r2, r2
 8024f30:	4584      	cmp	ip, r0
 8024f32:	d305      	bcc.n	8024f40 <_strtol_l.isra.0+0xbc>
 8024f34:	d101      	bne.n	8024f3a <_strtol_l.isra.0+0xb6>
 8024f36:	42a9      	cmp	r1, r5
 8024f38:	db11      	blt.n	8024f5e <_strtol_l.isra.0+0xda>
 8024f3a:	2201      	movs	r2, #1
 8024f3c:	4370      	muls	r0, r6
 8024f3e:	1828      	adds	r0, r5, r0
 8024f40:	7825      	ldrb	r5, [r4, #0]
 8024f42:	3401      	adds	r4, #1
 8024f44:	e7e9      	b.n	8024f1a <_strtol_l.isra.0+0x96>
 8024f46:	002b      	movs	r3, r5
 8024f48:	3b41      	subs	r3, #65	@ 0x41
 8024f4a:	2b19      	cmp	r3, #25
 8024f4c:	d801      	bhi.n	8024f52 <_strtol_l.isra.0+0xce>
 8024f4e:	3d37      	subs	r5, #55	@ 0x37
 8024f50:	e7e8      	b.n	8024f24 <_strtol_l.isra.0+0xa0>
 8024f52:	002b      	movs	r3, r5
 8024f54:	3b61      	subs	r3, #97	@ 0x61
 8024f56:	2b19      	cmp	r3, #25
 8024f58:	d804      	bhi.n	8024f64 <_strtol_l.isra.0+0xe0>
 8024f5a:	3d57      	subs	r5, #87	@ 0x57
 8024f5c:	e7e2      	b.n	8024f24 <_strtol_l.isra.0+0xa0>
 8024f5e:	2201      	movs	r2, #1
 8024f60:	4252      	negs	r2, r2
 8024f62:	e7ed      	b.n	8024f40 <_strtol_l.isra.0+0xbc>
 8024f64:	1c53      	adds	r3, r2, #1
 8024f66:	d108      	bne.n	8024f7a <_strtol_l.isra.0+0xf6>
 8024f68:	2322      	movs	r3, #34	@ 0x22
 8024f6a:	9a03      	ldr	r2, [sp, #12]
 8024f6c:	9802      	ldr	r0, [sp, #8]
 8024f6e:	6013      	str	r3, [r2, #0]
 8024f70:	2f00      	cmp	r7, #0
 8024f72:	d0b8      	beq.n	8024ee6 <_strtol_l.isra.0+0x62>
 8024f74:	1e63      	subs	r3, r4, #1
 8024f76:	9301      	str	r3, [sp, #4]
 8024f78:	e007      	b.n	8024f8a <_strtol_l.isra.0+0x106>
 8024f7a:	9b00      	ldr	r3, [sp, #0]
 8024f7c:	2b00      	cmp	r3, #0
 8024f7e:	d000      	beq.n	8024f82 <_strtol_l.isra.0+0xfe>
 8024f80:	4240      	negs	r0, r0
 8024f82:	2f00      	cmp	r7, #0
 8024f84:	d0af      	beq.n	8024ee6 <_strtol_l.isra.0+0x62>
 8024f86:	2a00      	cmp	r2, #0
 8024f88:	d1f4      	bne.n	8024f74 <_strtol_l.isra.0+0xf0>
 8024f8a:	9b01      	ldr	r3, [sp, #4]
 8024f8c:	603b      	str	r3, [r7, #0]
 8024f8e:	e7aa      	b.n	8024ee6 <_strtol_l.isra.0+0x62>
 8024f90:	0802ea79 	.word	0x0802ea79
 8024f94:	7fffffff 	.word	0x7fffffff

08024f98 <strtol>:
 8024f98:	b510      	push	{r4, lr}
 8024f9a:	4c04      	ldr	r4, [pc, #16]	@ (8024fac <strtol+0x14>)
 8024f9c:	0013      	movs	r3, r2
 8024f9e:	000a      	movs	r2, r1
 8024fa0:	0001      	movs	r1, r0
 8024fa2:	6820      	ldr	r0, [r4, #0]
 8024fa4:	f7ff ff6e 	bl	8024e84 <_strtol_l.isra.0>
 8024fa8:	bd10      	pop	{r4, pc}
 8024faa:	46c0      	nop			@ (mov r8, r8)
 8024fac:	200003e4 	.word	0x200003e4

08024fb0 <__cvt>:
 8024fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024fb2:	001f      	movs	r7, r3
 8024fb4:	2300      	movs	r3, #0
 8024fb6:	0016      	movs	r6, r2
 8024fb8:	b08b      	sub	sp, #44	@ 0x2c
 8024fba:	429f      	cmp	r7, r3
 8024fbc:	da04      	bge.n	8024fc8 <__cvt+0x18>
 8024fbe:	2180      	movs	r1, #128	@ 0x80
 8024fc0:	0609      	lsls	r1, r1, #24
 8024fc2:	187b      	adds	r3, r7, r1
 8024fc4:	001f      	movs	r7, r3
 8024fc6:	232d      	movs	r3, #45	@ 0x2d
 8024fc8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024fca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024fcc:	7013      	strb	r3, [r2, #0]
 8024fce:	2320      	movs	r3, #32
 8024fd0:	2203      	movs	r2, #3
 8024fd2:	439d      	bics	r5, r3
 8024fd4:	2d46      	cmp	r5, #70	@ 0x46
 8024fd6:	d007      	beq.n	8024fe8 <__cvt+0x38>
 8024fd8:	002b      	movs	r3, r5
 8024fda:	3b45      	subs	r3, #69	@ 0x45
 8024fdc:	4259      	negs	r1, r3
 8024fde:	414b      	adcs	r3, r1
 8024fe0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8024fe2:	3a01      	subs	r2, #1
 8024fe4:	18cb      	adds	r3, r1, r3
 8024fe6:	9310      	str	r3, [sp, #64]	@ 0x40
 8024fe8:	ab09      	add	r3, sp, #36	@ 0x24
 8024fea:	9304      	str	r3, [sp, #16]
 8024fec:	ab08      	add	r3, sp, #32
 8024fee:	9303      	str	r3, [sp, #12]
 8024ff0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ff2:	9200      	str	r2, [sp, #0]
 8024ff4:	9302      	str	r3, [sp, #8]
 8024ff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024ff8:	0032      	movs	r2, r6
 8024ffa:	9301      	str	r3, [sp, #4]
 8024ffc:	003b      	movs	r3, r7
 8024ffe:	f001 f847 	bl	8026090 <_dtoa_r>
 8025002:	0004      	movs	r4, r0
 8025004:	2d47      	cmp	r5, #71	@ 0x47
 8025006:	d11b      	bne.n	8025040 <__cvt+0x90>
 8025008:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802500a:	07db      	lsls	r3, r3, #31
 802500c:	d511      	bpl.n	8025032 <__cvt+0x82>
 802500e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025010:	18c3      	adds	r3, r0, r3
 8025012:	9307      	str	r3, [sp, #28]
 8025014:	2200      	movs	r2, #0
 8025016:	2300      	movs	r3, #0
 8025018:	0030      	movs	r0, r6
 802501a:	0039      	movs	r1, r7
 802501c:	f7db fa48 	bl	80004b0 <__aeabi_dcmpeq>
 8025020:	2800      	cmp	r0, #0
 8025022:	d001      	beq.n	8025028 <__cvt+0x78>
 8025024:	9b07      	ldr	r3, [sp, #28]
 8025026:	9309      	str	r3, [sp, #36]	@ 0x24
 8025028:	2230      	movs	r2, #48	@ 0x30
 802502a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802502c:	9907      	ldr	r1, [sp, #28]
 802502e:	428b      	cmp	r3, r1
 8025030:	d320      	bcc.n	8025074 <__cvt+0xc4>
 8025032:	0020      	movs	r0, r4
 8025034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025036:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025038:	1b1b      	subs	r3, r3, r4
 802503a:	6013      	str	r3, [r2, #0]
 802503c:	b00b      	add	sp, #44	@ 0x2c
 802503e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025040:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025042:	18c3      	adds	r3, r0, r3
 8025044:	9307      	str	r3, [sp, #28]
 8025046:	2d46      	cmp	r5, #70	@ 0x46
 8025048:	d1e4      	bne.n	8025014 <__cvt+0x64>
 802504a:	7803      	ldrb	r3, [r0, #0]
 802504c:	2b30      	cmp	r3, #48	@ 0x30
 802504e:	d10c      	bne.n	802506a <__cvt+0xba>
 8025050:	2200      	movs	r2, #0
 8025052:	2300      	movs	r3, #0
 8025054:	0030      	movs	r0, r6
 8025056:	0039      	movs	r1, r7
 8025058:	f7db fa2a 	bl	80004b0 <__aeabi_dcmpeq>
 802505c:	2800      	cmp	r0, #0
 802505e:	d104      	bne.n	802506a <__cvt+0xba>
 8025060:	2301      	movs	r3, #1
 8025062:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025064:	1a9b      	subs	r3, r3, r2
 8025066:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025068:	6013      	str	r3, [r2, #0]
 802506a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802506c:	9a07      	ldr	r2, [sp, #28]
 802506e:	681b      	ldr	r3, [r3, #0]
 8025070:	18d3      	adds	r3, r2, r3
 8025072:	e7ce      	b.n	8025012 <__cvt+0x62>
 8025074:	1c59      	adds	r1, r3, #1
 8025076:	9109      	str	r1, [sp, #36]	@ 0x24
 8025078:	701a      	strb	r2, [r3, #0]
 802507a:	e7d6      	b.n	802502a <__cvt+0x7a>

0802507c <__exponent>:
 802507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802507e:	232b      	movs	r3, #43	@ 0x2b
 8025080:	b085      	sub	sp, #20
 8025082:	0005      	movs	r5, r0
 8025084:	1e0c      	subs	r4, r1, #0
 8025086:	7002      	strb	r2, [r0, #0]
 8025088:	da01      	bge.n	802508e <__exponent+0x12>
 802508a:	424c      	negs	r4, r1
 802508c:	3302      	adds	r3, #2
 802508e:	706b      	strb	r3, [r5, #1]
 8025090:	2c09      	cmp	r4, #9
 8025092:	dd2c      	ble.n	80250ee <__exponent+0x72>
 8025094:	ab02      	add	r3, sp, #8
 8025096:	1dde      	adds	r6, r3, #7
 8025098:	0020      	movs	r0, r4
 802509a:	210a      	movs	r1, #10
 802509c:	f7db f9f2 	bl	8000484 <__aeabi_idivmod>
 80250a0:	0037      	movs	r7, r6
 80250a2:	3130      	adds	r1, #48	@ 0x30
 80250a4:	3e01      	subs	r6, #1
 80250a6:	0020      	movs	r0, r4
 80250a8:	7031      	strb	r1, [r6, #0]
 80250aa:	210a      	movs	r1, #10
 80250ac:	9401      	str	r4, [sp, #4]
 80250ae:	f7db f903 	bl	80002b8 <__divsi3>
 80250b2:	9b01      	ldr	r3, [sp, #4]
 80250b4:	0004      	movs	r4, r0
 80250b6:	2b63      	cmp	r3, #99	@ 0x63
 80250b8:	dcee      	bgt.n	8025098 <__exponent+0x1c>
 80250ba:	1eba      	subs	r2, r7, #2
 80250bc:	1ca8      	adds	r0, r5, #2
 80250be:	0001      	movs	r1, r0
 80250c0:	0013      	movs	r3, r2
 80250c2:	3430      	adds	r4, #48	@ 0x30
 80250c4:	7014      	strb	r4, [r2, #0]
 80250c6:	ac02      	add	r4, sp, #8
 80250c8:	3407      	adds	r4, #7
 80250ca:	429c      	cmp	r4, r3
 80250cc:	d80a      	bhi.n	80250e4 <__exponent+0x68>
 80250ce:	2300      	movs	r3, #0
 80250d0:	4294      	cmp	r4, r2
 80250d2:	d303      	bcc.n	80250dc <__exponent+0x60>
 80250d4:	3309      	adds	r3, #9
 80250d6:	aa02      	add	r2, sp, #8
 80250d8:	189b      	adds	r3, r3, r2
 80250da:	1bdb      	subs	r3, r3, r7
 80250dc:	18c0      	adds	r0, r0, r3
 80250de:	1b40      	subs	r0, r0, r5
 80250e0:	b005      	add	sp, #20
 80250e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80250e4:	781c      	ldrb	r4, [r3, #0]
 80250e6:	3301      	adds	r3, #1
 80250e8:	700c      	strb	r4, [r1, #0]
 80250ea:	3101      	adds	r1, #1
 80250ec:	e7eb      	b.n	80250c6 <__exponent+0x4a>
 80250ee:	2330      	movs	r3, #48	@ 0x30
 80250f0:	18e4      	adds	r4, r4, r3
 80250f2:	70ab      	strb	r3, [r5, #2]
 80250f4:	1d28      	adds	r0, r5, #4
 80250f6:	70ec      	strb	r4, [r5, #3]
 80250f8:	e7f1      	b.n	80250de <__exponent+0x62>
	...

080250fc <_printf_float>:
 80250fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250fe:	b097      	sub	sp, #92	@ 0x5c
 8025100:	000d      	movs	r5, r1
 8025102:	920a      	str	r2, [sp, #40]	@ 0x28
 8025104:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025106:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025108:	9009      	str	r0, [sp, #36]	@ 0x24
 802510a:	f000 fea1 	bl	8025e50 <_localeconv_r>
 802510e:	6803      	ldr	r3, [r0, #0]
 8025110:	0018      	movs	r0, r3
 8025112:	930d      	str	r3, [sp, #52]	@ 0x34
 8025114:	f7db f82a 	bl	800016c <strlen>
 8025118:	2300      	movs	r3, #0
 802511a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802511c:	9314      	str	r3, [sp, #80]	@ 0x50
 802511e:	7e2b      	ldrb	r3, [r5, #24]
 8025120:	2207      	movs	r2, #7
 8025122:	930c      	str	r3, [sp, #48]	@ 0x30
 8025124:	682b      	ldr	r3, [r5, #0]
 8025126:	930e      	str	r3, [sp, #56]	@ 0x38
 8025128:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802512a:	6823      	ldr	r3, [r4, #0]
 802512c:	05c9      	lsls	r1, r1, #23
 802512e:	d545      	bpl.n	80251bc <_printf_float+0xc0>
 8025130:	189b      	adds	r3, r3, r2
 8025132:	4393      	bics	r3, r2
 8025134:	001a      	movs	r2, r3
 8025136:	3208      	adds	r2, #8
 8025138:	6022      	str	r2, [r4, #0]
 802513a:	2201      	movs	r2, #1
 802513c:	681e      	ldr	r6, [r3, #0]
 802513e:	685f      	ldr	r7, [r3, #4]
 8025140:	007b      	lsls	r3, r7, #1
 8025142:	085b      	lsrs	r3, r3, #1
 8025144:	9311      	str	r3, [sp, #68]	@ 0x44
 8025146:	9610      	str	r6, [sp, #64]	@ 0x40
 8025148:	64ae      	str	r6, [r5, #72]	@ 0x48
 802514a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 802514c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802514e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025150:	4ba7      	ldr	r3, [pc, #668]	@ (80253f0 <_printf_float+0x2f4>)
 8025152:	4252      	negs	r2, r2
 8025154:	f7de faee 	bl	8003734 <__aeabi_dcmpun>
 8025158:	2800      	cmp	r0, #0
 802515a:	d131      	bne.n	80251c0 <_printf_float+0xc4>
 802515c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802515e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025160:	2201      	movs	r2, #1
 8025162:	4ba3      	ldr	r3, [pc, #652]	@ (80253f0 <_printf_float+0x2f4>)
 8025164:	4252      	negs	r2, r2
 8025166:	f7db f9b3 	bl	80004d0 <__aeabi_dcmple>
 802516a:	2800      	cmp	r0, #0
 802516c:	d128      	bne.n	80251c0 <_printf_float+0xc4>
 802516e:	2200      	movs	r2, #0
 8025170:	2300      	movs	r3, #0
 8025172:	0030      	movs	r0, r6
 8025174:	0039      	movs	r1, r7
 8025176:	f7db f9a1 	bl	80004bc <__aeabi_dcmplt>
 802517a:	2800      	cmp	r0, #0
 802517c:	d003      	beq.n	8025186 <_printf_float+0x8a>
 802517e:	002b      	movs	r3, r5
 8025180:	222d      	movs	r2, #45	@ 0x2d
 8025182:	3343      	adds	r3, #67	@ 0x43
 8025184:	701a      	strb	r2, [r3, #0]
 8025186:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025188:	4f9a      	ldr	r7, [pc, #616]	@ (80253f4 <_printf_float+0x2f8>)
 802518a:	2b47      	cmp	r3, #71	@ 0x47
 802518c:	d800      	bhi.n	8025190 <_printf_float+0x94>
 802518e:	4f9a      	ldr	r7, [pc, #616]	@ (80253f8 <_printf_float+0x2fc>)
 8025190:	2303      	movs	r3, #3
 8025192:	2400      	movs	r4, #0
 8025194:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025196:	612b      	str	r3, [r5, #16]
 8025198:	3301      	adds	r3, #1
 802519a:	439a      	bics	r2, r3
 802519c:	602a      	str	r2, [r5, #0]
 802519e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80251a0:	0029      	movs	r1, r5
 80251a2:	9300      	str	r3, [sp, #0]
 80251a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80251a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80251a8:	aa15      	add	r2, sp, #84	@ 0x54
 80251aa:	f000 f9e5 	bl	8025578 <_printf_common>
 80251ae:	3001      	adds	r0, #1
 80251b0:	d000      	beq.n	80251b4 <_printf_float+0xb8>
 80251b2:	e09e      	b.n	80252f2 <_printf_float+0x1f6>
 80251b4:	2001      	movs	r0, #1
 80251b6:	4240      	negs	r0, r0
 80251b8:	b017      	add	sp, #92	@ 0x5c
 80251ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80251bc:	3307      	adds	r3, #7
 80251be:	e7b8      	b.n	8025132 <_printf_float+0x36>
 80251c0:	0032      	movs	r2, r6
 80251c2:	003b      	movs	r3, r7
 80251c4:	0030      	movs	r0, r6
 80251c6:	0039      	movs	r1, r7
 80251c8:	f7de fab4 	bl	8003734 <__aeabi_dcmpun>
 80251cc:	2800      	cmp	r0, #0
 80251ce:	d00b      	beq.n	80251e8 <_printf_float+0xec>
 80251d0:	2f00      	cmp	r7, #0
 80251d2:	da03      	bge.n	80251dc <_printf_float+0xe0>
 80251d4:	002b      	movs	r3, r5
 80251d6:	222d      	movs	r2, #45	@ 0x2d
 80251d8:	3343      	adds	r3, #67	@ 0x43
 80251da:	701a      	strb	r2, [r3, #0]
 80251dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80251de:	4f87      	ldr	r7, [pc, #540]	@ (80253fc <_printf_float+0x300>)
 80251e0:	2b47      	cmp	r3, #71	@ 0x47
 80251e2:	d8d5      	bhi.n	8025190 <_printf_float+0x94>
 80251e4:	4f86      	ldr	r7, [pc, #536]	@ (8025400 <_printf_float+0x304>)
 80251e6:	e7d3      	b.n	8025190 <_printf_float+0x94>
 80251e8:	2220      	movs	r2, #32
 80251ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80251ec:	686b      	ldr	r3, [r5, #4]
 80251ee:	4394      	bics	r4, r2
 80251f0:	1c5a      	adds	r2, r3, #1
 80251f2:	d146      	bne.n	8025282 <_printf_float+0x186>
 80251f4:	3307      	adds	r3, #7
 80251f6:	606b      	str	r3, [r5, #4]
 80251f8:	2380      	movs	r3, #128	@ 0x80
 80251fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80251fc:	00db      	lsls	r3, r3, #3
 80251fe:	4313      	orrs	r3, r2
 8025200:	2200      	movs	r2, #0
 8025202:	602b      	str	r3, [r5, #0]
 8025204:	9206      	str	r2, [sp, #24]
 8025206:	aa14      	add	r2, sp, #80	@ 0x50
 8025208:	9205      	str	r2, [sp, #20]
 802520a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802520c:	a90a      	add	r1, sp, #40	@ 0x28
 802520e:	9204      	str	r2, [sp, #16]
 8025210:	aa13      	add	r2, sp, #76	@ 0x4c
 8025212:	9203      	str	r2, [sp, #12]
 8025214:	2223      	movs	r2, #35	@ 0x23
 8025216:	1852      	adds	r2, r2, r1
 8025218:	9202      	str	r2, [sp, #8]
 802521a:	9301      	str	r3, [sp, #4]
 802521c:	686b      	ldr	r3, [r5, #4]
 802521e:	0032      	movs	r2, r6
 8025220:	9300      	str	r3, [sp, #0]
 8025222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025224:	003b      	movs	r3, r7
 8025226:	f7ff fec3 	bl	8024fb0 <__cvt>
 802522a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802522c:	0007      	movs	r7, r0
 802522e:	2c47      	cmp	r4, #71	@ 0x47
 8025230:	d12d      	bne.n	802528e <_printf_float+0x192>
 8025232:	1cd3      	adds	r3, r2, #3
 8025234:	db02      	blt.n	802523c <_printf_float+0x140>
 8025236:	686b      	ldr	r3, [r5, #4]
 8025238:	429a      	cmp	r2, r3
 802523a:	dd47      	ble.n	80252cc <_printf_float+0x1d0>
 802523c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802523e:	3b02      	subs	r3, #2
 8025240:	b2db      	uxtb	r3, r3
 8025242:	930c      	str	r3, [sp, #48]	@ 0x30
 8025244:	0028      	movs	r0, r5
 8025246:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025248:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802524a:	3901      	subs	r1, #1
 802524c:	3050      	adds	r0, #80	@ 0x50
 802524e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025250:	f7ff ff14 	bl	802507c <__exponent>
 8025254:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025256:	0004      	movs	r4, r0
 8025258:	1813      	adds	r3, r2, r0
 802525a:	612b      	str	r3, [r5, #16]
 802525c:	2a01      	cmp	r2, #1
 802525e:	dc02      	bgt.n	8025266 <_printf_float+0x16a>
 8025260:	682a      	ldr	r2, [r5, #0]
 8025262:	07d2      	lsls	r2, r2, #31
 8025264:	d501      	bpl.n	802526a <_printf_float+0x16e>
 8025266:	3301      	adds	r3, #1
 8025268:	612b      	str	r3, [r5, #16]
 802526a:	2323      	movs	r3, #35	@ 0x23
 802526c:	aa0a      	add	r2, sp, #40	@ 0x28
 802526e:	189b      	adds	r3, r3, r2
 8025270:	781b      	ldrb	r3, [r3, #0]
 8025272:	2b00      	cmp	r3, #0
 8025274:	d100      	bne.n	8025278 <_printf_float+0x17c>
 8025276:	e792      	b.n	802519e <_printf_float+0xa2>
 8025278:	002b      	movs	r3, r5
 802527a:	222d      	movs	r2, #45	@ 0x2d
 802527c:	3343      	adds	r3, #67	@ 0x43
 802527e:	701a      	strb	r2, [r3, #0]
 8025280:	e78d      	b.n	802519e <_printf_float+0xa2>
 8025282:	2c47      	cmp	r4, #71	@ 0x47
 8025284:	d1b8      	bne.n	80251f8 <_printf_float+0xfc>
 8025286:	2b00      	cmp	r3, #0
 8025288:	d1b6      	bne.n	80251f8 <_printf_float+0xfc>
 802528a:	3301      	adds	r3, #1
 802528c:	e7b3      	b.n	80251f6 <_printf_float+0xfa>
 802528e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025290:	2b65      	cmp	r3, #101	@ 0x65
 8025292:	d9d7      	bls.n	8025244 <_printf_float+0x148>
 8025294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025296:	2b66      	cmp	r3, #102	@ 0x66
 8025298:	d11a      	bne.n	80252d0 <_printf_float+0x1d4>
 802529a:	686b      	ldr	r3, [r5, #4]
 802529c:	2a00      	cmp	r2, #0
 802529e:	dd09      	ble.n	80252b4 <_printf_float+0x1b8>
 80252a0:	612a      	str	r2, [r5, #16]
 80252a2:	2b00      	cmp	r3, #0
 80252a4:	d102      	bne.n	80252ac <_printf_float+0x1b0>
 80252a6:	6829      	ldr	r1, [r5, #0]
 80252a8:	07c9      	lsls	r1, r1, #31
 80252aa:	d50b      	bpl.n	80252c4 <_printf_float+0x1c8>
 80252ac:	3301      	adds	r3, #1
 80252ae:	189b      	adds	r3, r3, r2
 80252b0:	612b      	str	r3, [r5, #16]
 80252b2:	e007      	b.n	80252c4 <_printf_float+0x1c8>
 80252b4:	2b00      	cmp	r3, #0
 80252b6:	d103      	bne.n	80252c0 <_printf_float+0x1c4>
 80252b8:	2201      	movs	r2, #1
 80252ba:	6829      	ldr	r1, [r5, #0]
 80252bc:	4211      	tst	r1, r2
 80252be:	d000      	beq.n	80252c2 <_printf_float+0x1c6>
 80252c0:	1c9a      	adds	r2, r3, #2
 80252c2:	612a      	str	r2, [r5, #16]
 80252c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80252c6:	2400      	movs	r4, #0
 80252c8:	65ab      	str	r3, [r5, #88]	@ 0x58
 80252ca:	e7ce      	b.n	802526a <_printf_float+0x16e>
 80252cc:	2367      	movs	r3, #103	@ 0x67
 80252ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80252d0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80252d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80252d4:	4299      	cmp	r1, r3
 80252d6:	db06      	blt.n	80252e6 <_printf_float+0x1ea>
 80252d8:	682b      	ldr	r3, [r5, #0]
 80252da:	6129      	str	r1, [r5, #16]
 80252dc:	07db      	lsls	r3, r3, #31
 80252de:	d5f1      	bpl.n	80252c4 <_printf_float+0x1c8>
 80252e0:	3101      	adds	r1, #1
 80252e2:	6129      	str	r1, [r5, #16]
 80252e4:	e7ee      	b.n	80252c4 <_printf_float+0x1c8>
 80252e6:	2201      	movs	r2, #1
 80252e8:	2900      	cmp	r1, #0
 80252ea:	dce0      	bgt.n	80252ae <_printf_float+0x1b2>
 80252ec:	1892      	adds	r2, r2, r2
 80252ee:	1a52      	subs	r2, r2, r1
 80252f0:	e7dd      	b.n	80252ae <_printf_float+0x1b2>
 80252f2:	682a      	ldr	r2, [r5, #0]
 80252f4:	0553      	lsls	r3, r2, #21
 80252f6:	d408      	bmi.n	802530a <_printf_float+0x20e>
 80252f8:	692b      	ldr	r3, [r5, #16]
 80252fa:	003a      	movs	r2, r7
 80252fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80252fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025300:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025302:	47a0      	blx	r4
 8025304:	3001      	adds	r0, #1
 8025306:	d129      	bne.n	802535c <_printf_float+0x260>
 8025308:	e754      	b.n	80251b4 <_printf_float+0xb8>
 802530a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802530c:	2b65      	cmp	r3, #101	@ 0x65
 802530e:	d800      	bhi.n	8025312 <_printf_float+0x216>
 8025310:	e0db      	b.n	80254ca <_printf_float+0x3ce>
 8025312:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025314:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025316:	2200      	movs	r2, #0
 8025318:	2300      	movs	r3, #0
 802531a:	f7db f8c9 	bl	80004b0 <__aeabi_dcmpeq>
 802531e:	2800      	cmp	r0, #0
 8025320:	d033      	beq.n	802538a <_printf_float+0x28e>
 8025322:	2301      	movs	r3, #1
 8025324:	4a37      	ldr	r2, [pc, #220]	@ (8025404 <_printf_float+0x308>)
 8025326:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025328:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802532a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802532c:	47a0      	blx	r4
 802532e:	3001      	adds	r0, #1
 8025330:	d100      	bne.n	8025334 <_printf_float+0x238>
 8025332:	e73f      	b.n	80251b4 <_printf_float+0xb8>
 8025334:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025336:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025338:	42b3      	cmp	r3, r6
 802533a:	db02      	blt.n	8025342 <_printf_float+0x246>
 802533c:	682b      	ldr	r3, [r5, #0]
 802533e:	07db      	lsls	r3, r3, #31
 8025340:	d50c      	bpl.n	802535c <_printf_float+0x260>
 8025342:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025346:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025348:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802534a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802534c:	47a0      	blx	r4
 802534e:	2400      	movs	r4, #0
 8025350:	3001      	adds	r0, #1
 8025352:	d100      	bne.n	8025356 <_printf_float+0x25a>
 8025354:	e72e      	b.n	80251b4 <_printf_float+0xb8>
 8025356:	1e73      	subs	r3, r6, #1
 8025358:	42a3      	cmp	r3, r4
 802535a:	dc0a      	bgt.n	8025372 <_printf_float+0x276>
 802535c:	682b      	ldr	r3, [r5, #0]
 802535e:	079b      	lsls	r3, r3, #30
 8025360:	d500      	bpl.n	8025364 <_printf_float+0x268>
 8025362:	e106      	b.n	8025572 <_printf_float+0x476>
 8025364:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025366:	68e8      	ldr	r0, [r5, #12]
 8025368:	4298      	cmp	r0, r3
 802536a:	db00      	blt.n	802536e <_printf_float+0x272>
 802536c:	e724      	b.n	80251b8 <_printf_float+0xbc>
 802536e:	0018      	movs	r0, r3
 8025370:	e722      	b.n	80251b8 <_printf_float+0xbc>
 8025372:	002a      	movs	r2, r5
 8025374:	2301      	movs	r3, #1
 8025376:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025378:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802537a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802537c:	321a      	adds	r2, #26
 802537e:	47b8      	blx	r7
 8025380:	3001      	adds	r0, #1
 8025382:	d100      	bne.n	8025386 <_printf_float+0x28a>
 8025384:	e716      	b.n	80251b4 <_printf_float+0xb8>
 8025386:	3401      	adds	r4, #1
 8025388:	e7e5      	b.n	8025356 <_printf_float+0x25a>
 802538a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802538c:	2b00      	cmp	r3, #0
 802538e:	dc3b      	bgt.n	8025408 <_printf_float+0x30c>
 8025390:	2301      	movs	r3, #1
 8025392:	4a1c      	ldr	r2, [pc, #112]	@ (8025404 <_printf_float+0x308>)
 8025394:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025398:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802539a:	47a0      	blx	r4
 802539c:	3001      	adds	r0, #1
 802539e:	d100      	bne.n	80253a2 <_printf_float+0x2a6>
 80253a0:	e708      	b.n	80251b4 <_printf_float+0xb8>
 80253a2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80253a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80253a6:	4333      	orrs	r3, r6
 80253a8:	d102      	bne.n	80253b0 <_printf_float+0x2b4>
 80253aa:	682b      	ldr	r3, [r5, #0]
 80253ac:	07db      	lsls	r3, r3, #31
 80253ae:	d5d5      	bpl.n	802535c <_printf_float+0x260>
 80253b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80253b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80253b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80253b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80253b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80253ba:	47a0      	blx	r4
 80253bc:	2300      	movs	r3, #0
 80253be:	3001      	adds	r0, #1
 80253c0:	d100      	bne.n	80253c4 <_printf_float+0x2c8>
 80253c2:	e6f7      	b.n	80251b4 <_printf_float+0xb8>
 80253c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80253c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80253c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80253ca:	425b      	negs	r3, r3
 80253cc:	4293      	cmp	r3, r2
 80253ce:	dc01      	bgt.n	80253d4 <_printf_float+0x2d8>
 80253d0:	0033      	movs	r3, r6
 80253d2:	e792      	b.n	80252fa <_printf_float+0x1fe>
 80253d4:	002a      	movs	r2, r5
 80253d6:	2301      	movs	r3, #1
 80253d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80253da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80253dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80253de:	321a      	adds	r2, #26
 80253e0:	47a0      	blx	r4
 80253e2:	3001      	adds	r0, #1
 80253e4:	d100      	bne.n	80253e8 <_printf_float+0x2ec>
 80253e6:	e6e5      	b.n	80251b4 <_printf_float+0xb8>
 80253e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80253ea:	3301      	adds	r3, #1
 80253ec:	e7ea      	b.n	80253c4 <_printf_float+0x2c8>
 80253ee:	46c0      	nop			@ (mov r8, r8)
 80253f0:	7fefffff 	.word	0x7fefffff
 80253f4:	0802e85a 	.word	0x0802e85a
 80253f8:	0802e856 	.word	0x0802e856
 80253fc:	0802e862 	.word	0x0802e862
 8025400:	0802e85e 	.word	0x0802e85e
 8025404:	0802e866 	.word	0x0802e866
 8025408:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802540a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 802540c:	930c      	str	r3, [sp, #48]	@ 0x30
 802540e:	429e      	cmp	r6, r3
 8025410:	dd00      	ble.n	8025414 <_printf_float+0x318>
 8025412:	001e      	movs	r6, r3
 8025414:	2e00      	cmp	r6, #0
 8025416:	dc31      	bgt.n	802547c <_printf_float+0x380>
 8025418:	43f3      	mvns	r3, r6
 802541a:	2400      	movs	r4, #0
 802541c:	17db      	asrs	r3, r3, #31
 802541e:	4033      	ands	r3, r6
 8025420:	930e      	str	r3, [sp, #56]	@ 0x38
 8025422:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025426:	1af3      	subs	r3, r6, r3
 8025428:	42a3      	cmp	r3, r4
 802542a:	dc30      	bgt.n	802548e <_printf_float+0x392>
 802542c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802542e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025430:	429a      	cmp	r2, r3
 8025432:	dc38      	bgt.n	80254a6 <_printf_float+0x3aa>
 8025434:	682b      	ldr	r3, [r5, #0]
 8025436:	07db      	lsls	r3, r3, #31
 8025438:	d435      	bmi.n	80254a6 <_printf_float+0x3aa>
 802543a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802543c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802543e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025440:	1b9b      	subs	r3, r3, r6
 8025442:	1b14      	subs	r4, r2, r4
 8025444:	429c      	cmp	r4, r3
 8025446:	dd00      	ble.n	802544a <_printf_float+0x34e>
 8025448:	001c      	movs	r4, r3
 802544a:	2c00      	cmp	r4, #0
 802544c:	dc34      	bgt.n	80254b8 <_printf_float+0x3bc>
 802544e:	43e3      	mvns	r3, r4
 8025450:	2600      	movs	r6, #0
 8025452:	17db      	asrs	r3, r3, #31
 8025454:	401c      	ands	r4, r3
 8025456:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025458:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802545a:	1ad3      	subs	r3, r2, r3
 802545c:	1b1b      	subs	r3, r3, r4
 802545e:	42b3      	cmp	r3, r6
 8025460:	dc00      	bgt.n	8025464 <_printf_float+0x368>
 8025462:	e77b      	b.n	802535c <_printf_float+0x260>
 8025464:	002a      	movs	r2, r5
 8025466:	2301      	movs	r3, #1
 8025468:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802546a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802546c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802546e:	321a      	adds	r2, #26
 8025470:	47b8      	blx	r7
 8025472:	3001      	adds	r0, #1
 8025474:	d100      	bne.n	8025478 <_printf_float+0x37c>
 8025476:	e69d      	b.n	80251b4 <_printf_float+0xb8>
 8025478:	3601      	adds	r6, #1
 802547a:	e7ec      	b.n	8025456 <_printf_float+0x35a>
 802547c:	0033      	movs	r3, r6
 802547e:	003a      	movs	r2, r7
 8025480:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025484:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025486:	47a0      	blx	r4
 8025488:	3001      	adds	r0, #1
 802548a:	d1c5      	bne.n	8025418 <_printf_float+0x31c>
 802548c:	e692      	b.n	80251b4 <_printf_float+0xb8>
 802548e:	002a      	movs	r2, r5
 8025490:	2301      	movs	r3, #1
 8025492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025494:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025496:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025498:	321a      	adds	r2, #26
 802549a:	47b0      	blx	r6
 802549c:	3001      	adds	r0, #1
 802549e:	d100      	bne.n	80254a2 <_printf_float+0x3a6>
 80254a0:	e688      	b.n	80251b4 <_printf_float+0xb8>
 80254a2:	3401      	adds	r4, #1
 80254a4:	e7bd      	b.n	8025422 <_printf_float+0x326>
 80254a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80254a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80254aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80254ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80254ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80254b0:	47a0      	blx	r4
 80254b2:	3001      	adds	r0, #1
 80254b4:	d1c1      	bne.n	802543a <_printf_float+0x33e>
 80254b6:	e67d      	b.n	80251b4 <_printf_float+0xb8>
 80254b8:	19ba      	adds	r2, r7, r6
 80254ba:	0023      	movs	r3, r4
 80254bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80254be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80254c0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80254c2:	47b0      	blx	r6
 80254c4:	3001      	adds	r0, #1
 80254c6:	d1c2      	bne.n	802544e <_printf_float+0x352>
 80254c8:	e674      	b.n	80251b4 <_printf_float+0xb8>
 80254ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80254cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80254ce:	2b01      	cmp	r3, #1
 80254d0:	dc02      	bgt.n	80254d8 <_printf_float+0x3dc>
 80254d2:	2301      	movs	r3, #1
 80254d4:	421a      	tst	r2, r3
 80254d6:	d039      	beq.n	802554c <_printf_float+0x450>
 80254d8:	2301      	movs	r3, #1
 80254da:	003a      	movs	r2, r7
 80254dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80254de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80254e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80254e2:	47b0      	blx	r6
 80254e4:	3001      	adds	r0, #1
 80254e6:	d100      	bne.n	80254ea <_printf_float+0x3ee>
 80254e8:	e664      	b.n	80251b4 <_printf_float+0xb8>
 80254ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80254ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80254ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80254f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80254f2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80254f4:	47b0      	blx	r6
 80254f6:	3001      	adds	r0, #1
 80254f8:	d100      	bne.n	80254fc <_printf_float+0x400>
 80254fa:	e65b      	b.n	80251b4 <_printf_float+0xb8>
 80254fc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80254fe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025502:	2200      	movs	r2, #0
 8025504:	3b01      	subs	r3, #1
 8025506:	930c      	str	r3, [sp, #48]	@ 0x30
 8025508:	2300      	movs	r3, #0
 802550a:	f7da ffd1 	bl	80004b0 <__aeabi_dcmpeq>
 802550e:	2800      	cmp	r0, #0
 8025510:	d11a      	bne.n	8025548 <_printf_float+0x44c>
 8025512:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025514:	1c7a      	adds	r2, r7, #1
 8025516:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025518:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802551a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802551c:	47b0      	blx	r6
 802551e:	3001      	adds	r0, #1
 8025520:	d10e      	bne.n	8025540 <_printf_float+0x444>
 8025522:	e647      	b.n	80251b4 <_printf_float+0xb8>
 8025524:	002a      	movs	r2, r5
 8025526:	2301      	movs	r3, #1
 8025528:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802552a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802552c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802552e:	321a      	adds	r2, #26
 8025530:	47b8      	blx	r7
 8025532:	3001      	adds	r0, #1
 8025534:	d100      	bne.n	8025538 <_printf_float+0x43c>
 8025536:	e63d      	b.n	80251b4 <_printf_float+0xb8>
 8025538:	3601      	adds	r6, #1
 802553a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802553c:	429e      	cmp	r6, r3
 802553e:	dbf1      	blt.n	8025524 <_printf_float+0x428>
 8025540:	002a      	movs	r2, r5
 8025542:	0023      	movs	r3, r4
 8025544:	3250      	adds	r2, #80	@ 0x50
 8025546:	e6d9      	b.n	80252fc <_printf_float+0x200>
 8025548:	2600      	movs	r6, #0
 802554a:	e7f6      	b.n	802553a <_printf_float+0x43e>
 802554c:	003a      	movs	r2, r7
 802554e:	e7e2      	b.n	8025516 <_printf_float+0x41a>
 8025550:	002a      	movs	r2, r5
 8025552:	2301      	movs	r3, #1
 8025554:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025558:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802555a:	3219      	adds	r2, #25
 802555c:	47b0      	blx	r6
 802555e:	3001      	adds	r0, #1
 8025560:	d100      	bne.n	8025564 <_printf_float+0x468>
 8025562:	e627      	b.n	80251b4 <_printf_float+0xb8>
 8025564:	3401      	adds	r4, #1
 8025566:	68eb      	ldr	r3, [r5, #12]
 8025568:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802556a:	1a9b      	subs	r3, r3, r2
 802556c:	42a3      	cmp	r3, r4
 802556e:	dcef      	bgt.n	8025550 <_printf_float+0x454>
 8025570:	e6f8      	b.n	8025364 <_printf_float+0x268>
 8025572:	2400      	movs	r4, #0
 8025574:	e7f7      	b.n	8025566 <_printf_float+0x46a>
 8025576:	46c0      	nop			@ (mov r8, r8)

08025578 <_printf_common>:
 8025578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802557a:	0016      	movs	r6, r2
 802557c:	9301      	str	r3, [sp, #4]
 802557e:	688a      	ldr	r2, [r1, #8]
 8025580:	690b      	ldr	r3, [r1, #16]
 8025582:	000c      	movs	r4, r1
 8025584:	9000      	str	r0, [sp, #0]
 8025586:	4293      	cmp	r3, r2
 8025588:	da00      	bge.n	802558c <_printf_common+0x14>
 802558a:	0013      	movs	r3, r2
 802558c:	0022      	movs	r2, r4
 802558e:	6033      	str	r3, [r6, #0]
 8025590:	3243      	adds	r2, #67	@ 0x43
 8025592:	7812      	ldrb	r2, [r2, #0]
 8025594:	2a00      	cmp	r2, #0
 8025596:	d001      	beq.n	802559c <_printf_common+0x24>
 8025598:	3301      	adds	r3, #1
 802559a:	6033      	str	r3, [r6, #0]
 802559c:	6823      	ldr	r3, [r4, #0]
 802559e:	069b      	lsls	r3, r3, #26
 80255a0:	d502      	bpl.n	80255a8 <_printf_common+0x30>
 80255a2:	6833      	ldr	r3, [r6, #0]
 80255a4:	3302      	adds	r3, #2
 80255a6:	6033      	str	r3, [r6, #0]
 80255a8:	6822      	ldr	r2, [r4, #0]
 80255aa:	2306      	movs	r3, #6
 80255ac:	0015      	movs	r5, r2
 80255ae:	401d      	ands	r5, r3
 80255b0:	421a      	tst	r2, r3
 80255b2:	d027      	beq.n	8025604 <_printf_common+0x8c>
 80255b4:	0023      	movs	r3, r4
 80255b6:	3343      	adds	r3, #67	@ 0x43
 80255b8:	781b      	ldrb	r3, [r3, #0]
 80255ba:	1e5a      	subs	r2, r3, #1
 80255bc:	4193      	sbcs	r3, r2
 80255be:	6822      	ldr	r2, [r4, #0]
 80255c0:	0692      	lsls	r2, r2, #26
 80255c2:	d430      	bmi.n	8025626 <_printf_common+0xae>
 80255c4:	0022      	movs	r2, r4
 80255c6:	9901      	ldr	r1, [sp, #4]
 80255c8:	9800      	ldr	r0, [sp, #0]
 80255ca:	9d08      	ldr	r5, [sp, #32]
 80255cc:	3243      	adds	r2, #67	@ 0x43
 80255ce:	47a8      	blx	r5
 80255d0:	3001      	adds	r0, #1
 80255d2:	d025      	beq.n	8025620 <_printf_common+0xa8>
 80255d4:	2206      	movs	r2, #6
 80255d6:	6823      	ldr	r3, [r4, #0]
 80255d8:	2500      	movs	r5, #0
 80255da:	4013      	ands	r3, r2
 80255dc:	2b04      	cmp	r3, #4
 80255de:	d105      	bne.n	80255ec <_printf_common+0x74>
 80255e0:	6833      	ldr	r3, [r6, #0]
 80255e2:	68e5      	ldr	r5, [r4, #12]
 80255e4:	1aed      	subs	r5, r5, r3
 80255e6:	43eb      	mvns	r3, r5
 80255e8:	17db      	asrs	r3, r3, #31
 80255ea:	401d      	ands	r5, r3
 80255ec:	68a3      	ldr	r3, [r4, #8]
 80255ee:	6922      	ldr	r2, [r4, #16]
 80255f0:	4293      	cmp	r3, r2
 80255f2:	dd01      	ble.n	80255f8 <_printf_common+0x80>
 80255f4:	1a9b      	subs	r3, r3, r2
 80255f6:	18ed      	adds	r5, r5, r3
 80255f8:	2600      	movs	r6, #0
 80255fa:	42b5      	cmp	r5, r6
 80255fc:	d120      	bne.n	8025640 <_printf_common+0xc8>
 80255fe:	2000      	movs	r0, #0
 8025600:	e010      	b.n	8025624 <_printf_common+0xac>
 8025602:	3501      	adds	r5, #1
 8025604:	68e3      	ldr	r3, [r4, #12]
 8025606:	6832      	ldr	r2, [r6, #0]
 8025608:	1a9b      	subs	r3, r3, r2
 802560a:	42ab      	cmp	r3, r5
 802560c:	ddd2      	ble.n	80255b4 <_printf_common+0x3c>
 802560e:	0022      	movs	r2, r4
 8025610:	2301      	movs	r3, #1
 8025612:	9901      	ldr	r1, [sp, #4]
 8025614:	9800      	ldr	r0, [sp, #0]
 8025616:	9f08      	ldr	r7, [sp, #32]
 8025618:	3219      	adds	r2, #25
 802561a:	47b8      	blx	r7
 802561c:	3001      	adds	r0, #1
 802561e:	d1f0      	bne.n	8025602 <_printf_common+0x8a>
 8025620:	2001      	movs	r0, #1
 8025622:	4240      	negs	r0, r0
 8025624:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025626:	2030      	movs	r0, #48	@ 0x30
 8025628:	18e1      	adds	r1, r4, r3
 802562a:	3143      	adds	r1, #67	@ 0x43
 802562c:	7008      	strb	r0, [r1, #0]
 802562e:	0021      	movs	r1, r4
 8025630:	1c5a      	adds	r2, r3, #1
 8025632:	3145      	adds	r1, #69	@ 0x45
 8025634:	7809      	ldrb	r1, [r1, #0]
 8025636:	18a2      	adds	r2, r4, r2
 8025638:	3243      	adds	r2, #67	@ 0x43
 802563a:	3302      	adds	r3, #2
 802563c:	7011      	strb	r1, [r2, #0]
 802563e:	e7c1      	b.n	80255c4 <_printf_common+0x4c>
 8025640:	0022      	movs	r2, r4
 8025642:	2301      	movs	r3, #1
 8025644:	9901      	ldr	r1, [sp, #4]
 8025646:	9800      	ldr	r0, [sp, #0]
 8025648:	9f08      	ldr	r7, [sp, #32]
 802564a:	321a      	adds	r2, #26
 802564c:	47b8      	blx	r7
 802564e:	3001      	adds	r0, #1
 8025650:	d0e6      	beq.n	8025620 <_printf_common+0xa8>
 8025652:	3601      	adds	r6, #1
 8025654:	e7d1      	b.n	80255fa <_printf_common+0x82>
	...

08025658 <_printf_i>:
 8025658:	b5f0      	push	{r4, r5, r6, r7, lr}
 802565a:	b08b      	sub	sp, #44	@ 0x2c
 802565c:	9206      	str	r2, [sp, #24]
 802565e:	000a      	movs	r2, r1
 8025660:	3243      	adds	r2, #67	@ 0x43
 8025662:	9307      	str	r3, [sp, #28]
 8025664:	9005      	str	r0, [sp, #20]
 8025666:	9203      	str	r2, [sp, #12]
 8025668:	7e0a      	ldrb	r2, [r1, #24]
 802566a:	000c      	movs	r4, r1
 802566c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802566e:	2a78      	cmp	r2, #120	@ 0x78
 8025670:	d809      	bhi.n	8025686 <_printf_i+0x2e>
 8025672:	2a62      	cmp	r2, #98	@ 0x62
 8025674:	d80b      	bhi.n	802568e <_printf_i+0x36>
 8025676:	2a00      	cmp	r2, #0
 8025678:	d100      	bne.n	802567c <_printf_i+0x24>
 802567a:	e0ba      	b.n	80257f2 <_printf_i+0x19a>
 802567c:	497a      	ldr	r1, [pc, #488]	@ (8025868 <_printf_i+0x210>)
 802567e:	9104      	str	r1, [sp, #16]
 8025680:	2a58      	cmp	r2, #88	@ 0x58
 8025682:	d100      	bne.n	8025686 <_printf_i+0x2e>
 8025684:	e08e      	b.n	80257a4 <_printf_i+0x14c>
 8025686:	0025      	movs	r5, r4
 8025688:	3542      	adds	r5, #66	@ 0x42
 802568a:	702a      	strb	r2, [r5, #0]
 802568c:	e022      	b.n	80256d4 <_printf_i+0x7c>
 802568e:	0010      	movs	r0, r2
 8025690:	3863      	subs	r0, #99	@ 0x63
 8025692:	2815      	cmp	r0, #21
 8025694:	d8f7      	bhi.n	8025686 <_printf_i+0x2e>
 8025696:	f7da fd7b 	bl	8000190 <__gnu_thumb1_case_shi>
 802569a:	0016      	.short	0x0016
 802569c:	fff6001f 	.word	0xfff6001f
 80256a0:	fff6fff6 	.word	0xfff6fff6
 80256a4:	001ffff6 	.word	0x001ffff6
 80256a8:	fff6fff6 	.word	0xfff6fff6
 80256ac:	fff6fff6 	.word	0xfff6fff6
 80256b0:	0036009f 	.word	0x0036009f
 80256b4:	fff6007e 	.word	0xfff6007e
 80256b8:	00b0fff6 	.word	0x00b0fff6
 80256bc:	0036fff6 	.word	0x0036fff6
 80256c0:	fff6fff6 	.word	0xfff6fff6
 80256c4:	0082      	.short	0x0082
 80256c6:	0025      	movs	r5, r4
 80256c8:	681a      	ldr	r2, [r3, #0]
 80256ca:	3542      	adds	r5, #66	@ 0x42
 80256cc:	1d11      	adds	r1, r2, #4
 80256ce:	6019      	str	r1, [r3, #0]
 80256d0:	6813      	ldr	r3, [r2, #0]
 80256d2:	702b      	strb	r3, [r5, #0]
 80256d4:	2301      	movs	r3, #1
 80256d6:	e09e      	b.n	8025816 <_printf_i+0x1be>
 80256d8:	6818      	ldr	r0, [r3, #0]
 80256da:	6809      	ldr	r1, [r1, #0]
 80256dc:	1d02      	adds	r2, r0, #4
 80256de:	060d      	lsls	r5, r1, #24
 80256e0:	d50b      	bpl.n	80256fa <_printf_i+0xa2>
 80256e2:	6806      	ldr	r6, [r0, #0]
 80256e4:	601a      	str	r2, [r3, #0]
 80256e6:	2e00      	cmp	r6, #0
 80256e8:	da03      	bge.n	80256f2 <_printf_i+0x9a>
 80256ea:	232d      	movs	r3, #45	@ 0x2d
 80256ec:	9a03      	ldr	r2, [sp, #12]
 80256ee:	4276      	negs	r6, r6
 80256f0:	7013      	strb	r3, [r2, #0]
 80256f2:	4b5d      	ldr	r3, [pc, #372]	@ (8025868 <_printf_i+0x210>)
 80256f4:	270a      	movs	r7, #10
 80256f6:	9304      	str	r3, [sp, #16]
 80256f8:	e018      	b.n	802572c <_printf_i+0xd4>
 80256fa:	6806      	ldr	r6, [r0, #0]
 80256fc:	601a      	str	r2, [r3, #0]
 80256fe:	0649      	lsls	r1, r1, #25
 8025700:	d5f1      	bpl.n	80256e6 <_printf_i+0x8e>
 8025702:	b236      	sxth	r6, r6
 8025704:	e7ef      	b.n	80256e6 <_printf_i+0x8e>
 8025706:	6808      	ldr	r0, [r1, #0]
 8025708:	6819      	ldr	r1, [r3, #0]
 802570a:	c940      	ldmia	r1!, {r6}
 802570c:	0605      	lsls	r5, r0, #24
 802570e:	d402      	bmi.n	8025716 <_printf_i+0xbe>
 8025710:	0640      	lsls	r0, r0, #25
 8025712:	d500      	bpl.n	8025716 <_printf_i+0xbe>
 8025714:	b2b6      	uxth	r6, r6
 8025716:	6019      	str	r1, [r3, #0]
 8025718:	4b53      	ldr	r3, [pc, #332]	@ (8025868 <_printf_i+0x210>)
 802571a:	270a      	movs	r7, #10
 802571c:	9304      	str	r3, [sp, #16]
 802571e:	2a6f      	cmp	r2, #111	@ 0x6f
 8025720:	d100      	bne.n	8025724 <_printf_i+0xcc>
 8025722:	3f02      	subs	r7, #2
 8025724:	0023      	movs	r3, r4
 8025726:	2200      	movs	r2, #0
 8025728:	3343      	adds	r3, #67	@ 0x43
 802572a:	701a      	strb	r2, [r3, #0]
 802572c:	6863      	ldr	r3, [r4, #4]
 802572e:	60a3      	str	r3, [r4, #8]
 8025730:	2b00      	cmp	r3, #0
 8025732:	db06      	blt.n	8025742 <_printf_i+0xea>
 8025734:	2104      	movs	r1, #4
 8025736:	6822      	ldr	r2, [r4, #0]
 8025738:	9d03      	ldr	r5, [sp, #12]
 802573a:	438a      	bics	r2, r1
 802573c:	6022      	str	r2, [r4, #0]
 802573e:	4333      	orrs	r3, r6
 8025740:	d00c      	beq.n	802575c <_printf_i+0x104>
 8025742:	9d03      	ldr	r5, [sp, #12]
 8025744:	0030      	movs	r0, r6
 8025746:	0039      	movs	r1, r7
 8025748:	f7da fdb2 	bl	80002b0 <__aeabi_uidivmod>
 802574c:	9b04      	ldr	r3, [sp, #16]
 802574e:	3d01      	subs	r5, #1
 8025750:	5c5b      	ldrb	r3, [r3, r1]
 8025752:	702b      	strb	r3, [r5, #0]
 8025754:	0033      	movs	r3, r6
 8025756:	0006      	movs	r6, r0
 8025758:	429f      	cmp	r7, r3
 802575a:	d9f3      	bls.n	8025744 <_printf_i+0xec>
 802575c:	2f08      	cmp	r7, #8
 802575e:	d109      	bne.n	8025774 <_printf_i+0x11c>
 8025760:	6823      	ldr	r3, [r4, #0]
 8025762:	07db      	lsls	r3, r3, #31
 8025764:	d506      	bpl.n	8025774 <_printf_i+0x11c>
 8025766:	6862      	ldr	r2, [r4, #4]
 8025768:	6923      	ldr	r3, [r4, #16]
 802576a:	429a      	cmp	r2, r3
 802576c:	dc02      	bgt.n	8025774 <_printf_i+0x11c>
 802576e:	2330      	movs	r3, #48	@ 0x30
 8025770:	3d01      	subs	r5, #1
 8025772:	702b      	strb	r3, [r5, #0]
 8025774:	9b03      	ldr	r3, [sp, #12]
 8025776:	1b5b      	subs	r3, r3, r5
 8025778:	6123      	str	r3, [r4, #16]
 802577a:	9b07      	ldr	r3, [sp, #28]
 802577c:	0021      	movs	r1, r4
 802577e:	9300      	str	r3, [sp, #0]
 8025780:	9805      	ldr	r0, [sp, #20]
 8025782:	9b06      	ldr	r3, [sp, #24]
 8025784:	aa09      	add	r2, sp, #36	@ 0x24
 8025786:	f7ff fef7 	bl	8025578 <_printf_common>
 802578a:	3001      	adds	r0, #1
 802578c:	d148      	bne.n	8025820 <_printf_i+0x1c8>
 802578e:	2001      	movs	r0, #1
 8025790:	4240      	negs	r0, r0
 8025792:	b00b      	add	sp, #44	@ 0x2c
 8025794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025796:	2220      	movs	r2, #32
 8025798:	6809      	ldr	r1, [r1, #0]
 802579a:	430a      	orrs	r2, r1
 802579c:	6022      	str	r2, [r4, #0]
 802579e:	2278      	movs	r2, #120	@ 0x78
 80257a0:	4932      	ldr	r1, [pc, #200]	@ (802586c <_printf_i+0x214>)
 80257a2:	9104      	str	r1, [sp, #16]
 80257a4:	0021      	movs	r1, r4
 80257a6:	3145      	adds	r1, #69	@ 0x45
 80257a8:	700a      	strb	r2, [r1, #0]
 80257aa:	6819      	ldr	r1, [r3, #0]
 80257ac:	6822      	ldr	r2, [r4, #0]
 80257ae:	c940      	ldmia	r1!, {r6}
 80257b0:	0610      	lsls	r0, r2, #24
 80257b2:	d402      	bmi.n	80257ba <_printf_i+0x162>
 80257b4:	0650      	lsls	r0, r2, #25
 80257b6:	d500      	bpl.n	80257ba <_printf_i+0x162>
 80257b8:	b2b6      	uxth	r6, r6
 80257ba:	6019      	str	r1, [r3, #0]
 80257bc:	07d3      	lsls	r3, r2, #31
 80257be:	d502      	bpl.n	80257c6 <_printf_i+0x16e>
 80257c0:	2320      	movs	r3, #32
 80257c2:	4313      	orrs	r3, r2
 80257c4:	6023      	str	r3, [r4, #0]
 80257c6:	2e00      	cmp	r6, #0
 80257c8:	d001      	beq.n	80257ce <_printf_i+0x176>
 80257ca:	2710      	movs	r7, #16
 80257cc:	e7aa      	b.n	8025724 <_printf_i+0xcc>
 80257ce:	2220      	movs	r2, #32
 80257d0:	6823      	ldr	r3, [r4, #0]
 80257d2:	4393      	bics	r3, r2
 80257d4:	6023      	str	r3, [r4, #0]
 80257d6:	e7f8      	b.n	80257ca <_printf_i+0x172>
 80257d8:	681a      	ldr	r2, [r3, #0]
 80257da:	680d      	ldr	r5, [r1, #0]
 80257dc:	1d10      	adds	r0, r2, #4
 80257de:	6949      	ldr	r1, [r1, #20]
 80257e0:	6018      	str	r0, [r3, #0]
 80257e2:	6813      	ldr	r3, [r2, #0]
 80257e4:	062e      	lsls	r6, r5, #24
 80257e6:	d501      	bpl.n	80257ec <_printf_i+0x194>
 80257e8:	6019      	str	r1, [r3, #0]
 80257ea:	e002      	b.n	80257f2 <_printf_i+0x19a>
 80257ec:	066d      	lsls	r5, r5, #25
 80257ee:	d5fb      	bpl.n	80257e8 <_printf_i+0x190>
 80257f0:	8019      	strh	r1, [r3, #0]
 80257f2:	2300      	movs	r3, #0
 80257f4:	9d03      	ldr	r5, [sp, #12]
 80257f6:	6123      	str	r3, [r4, #16]
 80257f8:	e7bf      	b.n	802577a <_printf_i+0x122>
 80257fa:	681a      	ldr	r2, [r3, #0]
 80257fc:	1d11      	adds	r1, r2, #4
 80257fe:	6019      	str	r1, [r3, #0]
 8025800:	6815      	ldr	r5, [r2, #0]
 8025802:	2100      	movs	r1, #0
 8025804:	0028      	movs	r0, r5
 8025806:	6862      	ldr	r2, [r4, #4]
 8025808:	f000 fba1 	bl	8025f4e <memchr>
 802580c:	2800      	cmp	r0, #0
 802580e:	d001      	beq.n	8025814 <_printf_i+0x1bc>
 8025810:	1b40      	subs	r0, r0, r5
 8025812:	6060      	str	r0, [r4, #4]
 8025814:	6863      	ldr	r3, [r4, #4]
 8025816:	6123      	str	r3, [r4, #16]
 8025818:	2300      	movs	r3, #0
 802581a:	9a03      	ldr	r2, [sp, #12]
 802581c:	7013      	strb	r3, [r2, #0]
 802581e:	e7ac      	b.n	802577a <_printf_i+0x122>
 8025820:	002a      	movs	r2, r5
 8025822:	6923      	ldr	r3, [r4, #16]
 8025824:	9906      	ldr	r1, [sp, #24]
 8025826:	9805      	ldr	r0, [sp, #20]
 8025828:	9d07      	ldr	r5, [sp, #28]
 802582a:	47a8      	blx	r5
 802582c:	3001      	adds	r0, #1
 802582e:	d0ae      	beq.n	802578e <_printf_i+0x136>
 8025830:	6823      	ldr	r3, [r4, #0]
 8025832:	079b      	lsls	r3, r3, #30
 8025834:	d415      	bmi.n	8025862 <_printf_i+0x20a>
 8025836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025838:	68e0      	ldr	r0, [r4, #12]
 802583a:	4298      	cmp	r0, r3
 802583c:	daa9      	bge.n	8025792 <_printf_i+0x13a>
 802583e:	0018      	movs	r0, r3
 8025840:	e7a7      	b.n	8025792 <_printf_i+0x13a>
 8025842:	0022      	movs	r2, r4
 8025844:	2301      	movs	r3, #1
 8025846:	9906      	ldr	r1, [sp, #24]
 8025848:	9805      	ldr	r0, [sp, #20]
 802584a:	9e07      	ldr	r6, [sp, #28]
 802584c:	3219      	adds	r2, #25
 802584e:	47b0      	blx	r6
 8025850:	3001      	adds	r0, #1
 8025852:	d09c      	beq.n	802578e <_printf_i+0x136>
 8025854:	3501      	adds	r5, #1
 8025856:	68e3      	ldr	r3, [r4, #12]
 8025858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802585a:	1a9b      	subs	r3, r3, r2
 802585c:	42ab      	cmp	r3, r5
 802585e:	dcf0      	bgt.n	8025842 <_printf_i+0x1ea>
 8025860:	e7e9      	b.n	8025836 <_printf_i+0x1de>
 8025862:	2500      	movs	r5, #0
 8025864:	e7f7      	b.n	8025856 <_printf_i+0x1fe>
 8025866:	46c0      	nop			@ (mov r8, r8)
 8025868:	0802e868 	.word	0x0802e868
 802586c:	0802e879 	.word	0x0802e879

08025870 <std>:
 8025870:	2300      	movs	r3, #0
 8025872:	b510      	push	{r4, lr}
 8025874:	0004      	movs	r4, r0
 8025876:	6003      	str	r3, [r0, #0]
 8025878:	6043      	str	r3, [r0, #4]
 802587a:	6083      	str	r3, [r0, #8]
 802587c:	8181      	strh	r1, [r0, #12]
 802587e:	6643      	str	r3, [r0, #100]	@ 0x64
 8025880:	81c2      	strh	r2, [r0, #14]
 8025882:	6103      	str	r3, [r0, #16]
 8025884:	6143      	str	r3, [r0, #20]
 8025886:	6183      	str	r3, [r0, #24]
 8025888:	0019      	movs	r1, r3
 802588a:	2208      	movs	r2, #8
 802588c:	305c      	adds	r0, #92	@ 0x5c
 802588e:	f000 fa8d 	bl	8025dac <memset>
 8025892:	4b0b      	ldr	r3, [pc, #44]	@ (80258c0 <std+0x50>)
 8025894:	6224      	str	r4, [r4, #32]
 8025896:	6263      	str	r3, [r4, #36]	@ 0x24
 8025898:	4b0a      	ldr	r3, [pc, #40]	@ (80258c4 <std+0x54>)
 802589a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802589c:	4b0a      	ldr	r3, [pc, #40]	@ (80258c8 <std+0x58>)
 802589e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80258a0:	4b0a      	ldr	r3, [pc, #40]	@ (80258cc <std+0x5c>)
 80258a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80258a4:	4b0a      	ldr	r3, [pc, #40]	@ (80258d0 <std+0x60>)
 80258a6:	429c      	cmp	r4, r3
 80258a8:	d005      	beq.n	80258b6 <std+0x46>
 80258aa:	4b0a      	ldr	r3, [pc, #40]	@ (80258d4 <std+0x64>)
 80258ac:	429c      	cmp	r4, r3
 80258ae:	d002      	beq.n	80258b6 <std+0x46>
 80258b0:	4b09      	ldr	r3, [pc, #36]	@ (80258d8 <std+0x68>)
 80258b2:	429c      	cmp	r4, r3
 80258b4:	d103      	bne.n	80258be <std+0x4e>
 80258b6:	0020      	movs	r0, r4
 80258b8:	3058      	adds	r0, #88	@ 0x58
 80258ba:	f000 fb45 	bl	8025f48 <__retarget_lock_init_recursive>
 80258be:	bd10      	pop	{r4, pc}
 80258c0:	08025b1d 	.word	0x08025b1d
 80258c4:	08025b45 	.word	0x08025b45
 80258c8:	08025b7d 	.word	0x08025b7d
 80258cc:	08025ba9 	.word	0x08025ba9
 80258d0:	20003510 	.word	0x20003510
 80258d4:	20003578 	.word	0x20003578
 80258d8:	200035e0 	.word	0x200035e0

080258dc <stdio_exit_handler>:
 80258dc:	b510      	push	{r4, lr}
 80258de:	4a03      	ldr	r2, [pc, #12]	@ (80258ec <stdio_exit_handler+0x10>)
 80258e0:	4903      	ldr	r1, [pc, #12]	@ (80258f0 <stdio_exit_handler+0x14>)
 80258e2:	4804      	ldr	r0, [pc, #16]	@ (80258f4 <stdio_exit_handler+0x18>)
 80258e4:	f000 f86c 	bl	80259c0 <_fwalk_sglue>
 80258e8:	bd10      	pop	{r4, pc}
 80258ea:	46c0      	nop			@ (mov r8, r8)
 80258ec:	2000026c 	.word	0x2000026c
 80258f0:	08028545 	.word	0x08028545
 80258f4:	200003e8 	.word	0x200003e8

080258f8 <cleanup_stdio>:
 80258f8:	6841      	ldr	r1, [r0, #4]
 80258fa:	4b0b      	ldr	r3, [pc, #44]	@ (8025928 <cleanup_stdio+0x30>)
 80258fc:	b510      	push	{r4, lr}
 80258fe:	0004      	movs	r4, r0
 8025900:	4299      	cmp	r1, r3
 8025902:	d001      	beq.n	8025908 <cleanup_stdio+0x10>
 8025904:	f002 fe1e 	bl	8028544 <_fflush_r>
 8025908:	68a1      	ldr	r1, [r4, #8]
 802590a:	4b08      	ldr	r3, [pc, #32]	@ (802592c <cleanup_stdio+0x34>)
 802590c:	4299      	cmp	r1, r3
 802590e:	d002      	beq.n	8025916 <cleanup_stdio+0x1e>
 8025910:	0020      	movs	r0, r4
 8025912:	f002 fe17 	bl	8028544 <_fflush_r>
 8025916:	68e1      	ldr	r1, [r4, #12]
 8025918:	4b05      	ldr	r3, [pc, #20]	@ (8025930 <cleanup_stdio+0x38>)
 802591a:	4299      	cmp	r1, r3
 802591c:	d002      	beq.n	8025924 <cleanup_stdio+0x2c>
 802591e:	0020      	movs	r0, r4
 8025920:	f002 fe10 	bl	8028544 <_fflush_r>
 8025924:	bd10      	pop	{r4, pc}
 8025926:	46c0      	nop			@ (mov r8, r8)
 8025928:	20003510 	.word	0x20003510
 802592c:	20003578 	.word	0x20003578
 8025930:	200035e0 	.word	0x200035e0

08025934 <global_stdio_init.part.0>:
 8025934:	b510      	push	{r4, lr}
 8025936:	4b09      	ldr	r3, [pc, #36]	@ (802595c <global_stdio_init.part.0+0x28>)
 8025938:	4a09      	ldr	r2, [pc, #36]	@ (8025960 <global_stdio_init.part.0+0x2c>)
 802593a:	2104      	movs	r1, #4
 802593c:	601a      	str	r2, [r3, #0]
 802593e:	4809      	ldr	r0, [pc, #36]	@ (8025964 <global_stdio_init.part.0+0x30>)
 8025940:	2200      	movs	r2, #0
 8025942:	f7ff ff95 	bl	8025870 <std>
 8025946:	2201      	movs	r2, #1
 8025948:	2109      	movs	r1, #9
 802594a:	4807      	ldr	r0, [pc, #28]	@ (8025968 <global_stdio_init.part.0+0x34>)
 802594c:	f7ff ff90 	bl	8025870 <std>
 8025950:	2202      	movs	r2, #2
 8025952:	2112      	movs	r1, #18
 8025954:	4805      	ldr	r0, [pc, #20]	@ (802596c <global_stdio_init.part.0+0x38>)
 8025956:	f7ff ff8b 	bl	8025870 <std>
 802595a:	bd10      	pop	{r4, pc}
 802595c:	20003648 	.word	0x20003648
 8025960:	080258dd 	.word	0x080258dd
 8025964:	20003510 	.word	0x20003510
 8025968:	20003578 	.word	0x20003578
 802596c:	200035e0 	.word	0x200035e0

08025970 <__sfp_lock_acquire>:
 8025970:	b510      	push	{r4, lr}
 8025972:	4802      	ldr	r0, [pc, #8]	@ (802597c <__sfp_lock_acquire+0xc>)
 8025974:	f000 fae9 	bl	8025f4a <__retarget_lock_acquire_recursive>
 8025978:	bd10      	pop	{r4, pc}
 802597a:	46c0      	nop			@ (mov r8, r8)
 802597c:	20003651 	.word	0x20003651

08025980 <__sfp_lock_release>:
 8025980:	b510      	push	{r4, lr}
 8025982:	4802      	ldr	r0, [pc, #8]	@ (802598c <__sfp_lock_release+0xc>)
 8025984:	f000 fae2 	bl	8025f4c <__retarget_lock_release_recursive>
 8025988:	bd10      	pop	{r4, pc}
 802598a:	46c0      	nop			@ (mov r8, r8)
 802598c:	20003651 	.word	0x20003651

08025990 <__sinit>:
 8025990:	b510      	push	{r4, lr}
 8025992:	0004      	movs	r4, r0
 8025994:	f7ff ffec 	bl	8025970 <__sfp_lock_acquire>
 8025998:	6a23      	ldr	r3, [r4, #32]
 802599a:	2b00      	cmp	r3, #0
 802599c:	d002      	beq.n	80259a4 <__sinit+0x14>
 802599e:	f7ff ffef 	bl	8025980 <__sfp_lock_release>
 80259a2:	bd10      	pop	{r4, pc}
 80259a4:	4b04      	ldr	r3, [pc, #16]	@ (80259b8 <__sinit+0x28>)
 80259a6:	6223      	str	r3, [r4, #32]
 80259a8:	4b04      	ldr	r3, [pc, #16]	@ (80259bc <__sinit+0x2c>)
 80259aa:	681b      	ldr	r3, [r3, #0]
 80259ac:	2b00      	cmp	r3, #0
 80259ae:	d1f6      	bne.n	802599e <__sinit+0xe>
 80259b0:	f7ff ffc0 	bl	8025934 <global_stdio_init.part.0>
 80259b4:	e7f3      	b.n	802599e <__sinit+0xe>
 80259b6:	46c0      	nop			@ (mov r8, r8)
 80259b8:	080258f9 	.word	0x080258f9
 80259bc:	20003648 	.word	0x20003648

080259c0 <_fwalk_sglue>:
 80259c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80259c2:	0014      	movs	r4, r2
 80259c4:	2600      	movs	r6, #0
 80259c6:	9000      	str	r0, [sp, #0]
 80259c8:	9101      	str	r1, [sp, #4]
 80259ca:	68a5      	ldr	r5, [r4, #8]
 80259cc:	6867      	ldr	r7, [r4, #4]
 80259ce:	3f01      	subs	r7, #1
 80259d0:	d504      	bpl.n	80259dc <_fwalk_sglue+0x1c>
 80259d2:	6824      	ldr	r4, [r4, #0]
 80259d4:	2c00      	cmp	r4, #0
 80259d6:	d1f8      	bne.n	80259ca <_fwalk_sglue+0xa>
 80259d8:	0030      	movs	r0, r6
 80259da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80259dc:	89ab      	ldrh	r3, [r5, #12]
 80259de:	2b01      	cmp	r3, #1
 80259e0:	d908      	bls.n	80259f4 <_fwalk_sglue+0x34>
 80259e2:	220e      	movs	r2, #14
 80259e4:	5eab      	ldrsh	r3, [r5, r2]
 80259e6:	3301      	adds	r3, #1
 80259e8:	d004      	beq.n	80259f4 <_fwalk_sglue+0x34>
 80259ea:	0029      	movs	r1, r5
 80259ec:	9800      	ldr	r0, [sp, #0]
 80259ee:	9b01      	ldr	r3, [sp, #4]
 80259f0:	4798      	blx	r3
 80259f2:	4306      	orrs	r6, r0
 80259f4:	3568      	adds	r5, #104	@ 0x68
 80259f6:	e7ea      	b.n	80259ce <_fwalk_sglue+0xe>

080259f8 <iprintf>:
 80259f8:	b40f      	push	{r0, r1, r2, r3}
 80259fa:	b507      	push	{r0, r1, r2, lr}
 80259fc:	4905      	ldr	r1, [pc, #20]	@ (8025a14 <iprintf+0x1c>)
 80259fe:	ab04      	add	r3, sp, #16
 8025a00:	6808      	ldr	r0, [r1, #0]
 8025a02:	cb04      	ldmia	r3!, {r2}
 8025a04:	6881      	ldr	r1, [r0, #8]
 8025a06:	9301      	str	r3, [sp, #4]
 8025a08:	f002 fbfa 	bl	8028200 <_vfiprintf_r>
 8025a0c:	b003      	add	sp, #12
 8025a0e:	bc08      	pop	{r3}
 8025a10:	b004      	add	sp, #16
 8025a12:	4718      	bx	r3
 8025a14:	200003e4 	.word	0x200003e4

08025a18 <_puts_r>:
 8025a18:	6a03      	ldr	r3, [r0, #32]
 8025a1a:	b570      	push	{r4, r5, r6, lr}
 8025a1c:	0005      	movs	r5, r0
 8025a1e:	000e      	movs	r6, r1
 8025a20:	6884      	ldr	r4, [r0, #8]
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	d101      	bne.n	8025a2a <_puts_r+0x12>
 8025a26:	f7ff ffb3 	bl	8025990 <__sinit>
 8025a2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025a2c:	07db      	lsls	r3, r3, #31
 8025a2e:	d405      	bmi.n	8025a3c <_puts_r+0x24>
 8025a30:	89a3      	ldrh	r3, [r4, #12]
 8025a32:	059b      	lsls	r3, r3, #22
 8025a34:	d402      	bmi.n	8025a3c <_puts_r+0x24>
 8025a36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025a38:	f000 fa87 	bl	8025f4a <__retarget_lock_acquire_recursive>
 8025a3c:	89a3      	ldrh	r3, [r4, #12]
 8025a3e:	071b      	lsls	r3, r3, #28
 8025a40:	d502      	bpl.n	8025a48 <_puts_r+0x30>
 8025a42:	6923      	ldr	r3, [r4, #16]
 8025a44:	2b00      	cmp	r3, #0
 8025a46:	d11f      	bne.n	8025a88 <_puts_r+0x70>
 8025a48:	0021      	movs	r1, r4
 8025a4a:	0028      	movs	r0, r5
 8025a4c:	f000 f950 	bl	8025cf0 <__swsetup_r>
 8025a50:	2800      	cmp	r0, #0
 8025a52:	d019      	beq.n	8025a88 <_puts_r+0x70>
 8025a54:	2501      	movs	r5, #1
 8025a56:	426d      	negs	r5, r5
 8025a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025a5a:	07db      	lsls	r3, r3, #31
 8025a5c:	d405      	bmi.n	8025a6a <_puts_r+0x52>
 8025a5e:	89a3      	ldrh	r3, [r4, #12]
 8025a60:	059b      	lsls	r3, r3, #22
 8025a62:	d402      	bmi.n	8025a6a <_puts_r+0x52>
 8025a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025a66:	f000 fa71 	bl	8025f4c <__retarget_lock_release_recursive>
 8025a6a:	0028      	movs	r0, r5
 8025a6c:	bd70      	pop	{r4, r5, r6, pc}
 8025a6e:	3601      	adds	r6, #1
 8025a70:	60a3      	str	r3, [r4, #8]
 8025a72:	2b00      	cmp	r3, #0
 8025a74:	da04      	bge.n	8025a80 <_puts_r+0x68>
 8025a76:	69a2      	ldr	r2, [r4, #24]
 8025a78:	429a      	cmp	r2, r3
 8025a7a:	dc16      	bgt.n	8025aaa <_puts_r+0x92>
 8025a7c:	290a      	cmp	r1, #10
 8025a7e:	d014      	beq.n	8025aaa <_puts_r+0x92>
 8025a80:	6823      	ldr	r3, [r4, #0]
 8025a82:	1c5a      	adds	r2, r3, #1
 8025a84:	6022      	str	r2, [r4, #0]
 8025a86:	7019      	strb	r1, [r3, #0]
 8025a88:	68a3      	ldr	r3, [r4, #8]
 8025a8a:	7831      	ldrb	r1, [r6, #0]
 8025a8c:	3b01      	subs	r3, #1
 8025a8e:	2900      	cmp	r1, #0
 8025a90:	d1ed      	bne.n	8025a6e <_puts_r+0x56>
 8025a92:	60a3      	str	r3, [r4, #8]
 8025a94:	2b00      	cmp	r3, #0
 8025a96:	da0f      	bge.n	8025ab8 <_puts_r+0xa0>
 8025a98:	0022      	movs	r2, r4
 8025a9a:	0028      	movs	r0, r5
 8025a9c:	310a      	adds	r1, #10
 8025a9e:	f000 f8e5 	bl	8025c6c <__swbuf_r>
 8025aa2:	3001      	adds	r0, #1
 8025aa4:	d0d6      	beq.n	8025a54 <_puts_r+0x3c>
 8025aa6:	250a      	movs	r5, #10
 8025aa8:	e7d6      	b.n	8025a58 <_puts_r+0x40>
 8025aaa:	0022      	movs	r2, r4
 8025aac:	0028      	movs	r0, r5
 8025aae:	f000 f8dd 	bl	8025c6c <__swbuf_r>
 8025ab2:	3001      	adds	r0, #1
 8025ab4:	d1e8      	bne.n	8025a88 <_puts_r+0x70>
 8025ab6:	e7cd      	b.n	8025a54 <_puts_r+0x3c>
 8025ab8:	6823      	ldr	r3, [r4, #0]
 8025aba:	1c5a      	adds	r2, r3, #1
 8025abc:	6022      	str	r2, [r4, #0]
 8025abe:	220a      	movs	r2, #10
 8025ac0:	701a      	strb	r2, [r3, #0]
 8025ac2:	e7f0      	b.n	8025aa6 <_puts_r+0x8e>

08025ac4 <puts>:
 8025ac4:	b510      	push	{r4, lr}
 8025ac6:	4b03      	ldr	r3, [pc, #12]	@ (8025ad4 <puts+0x10>)
 8025ac8:	0001      	movs	r1, r0
 8025aca:	6818      	ldr	r0, [r3, #0]
 8025acc:	f7ff ffa4 	bl	8025a18 <_puts_r>
 8025ad0:	bd10      	pop	{r4, pc}
 8025ad2:	46c0      	nop			@ (mov r8, r8)
 8025ad4:	200003e4 	.word	0x200003e4

08025ad8 <siprintf>:
 8025ad8:	b40e      	push	{r1, r2, r3}
 8025ada:	b510      	push	{r4, lr}
 8025adc:	2400      	movs	r4, #0
 8025ade:	490c      	ldr	r1, [pc, #48]	@ (8025b10 <siprintf+0x38>)
 8025ae0:	b09d      	sub	sp, #116	@ 0x74
 8025ae2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8025ae4:	9002      	str	r0, [sp, #8]
 8025ae6:	9006      	str	r0, [sp, #24]
 8025ae8:	9107      	str	r1, [sp, #28]
 8025aea:	9104      	str	r1, [sp, #16]
 8025aec:	4809      	ldr	r0, [pc, #36]	@ (8025b14 <siprintf+0x3c>)
 8025aee:	490a      	ldr	r1, [pc, #40]	@ (8025b18 <siprintf+0x40>)
 8025af0:	cb04      	ldmia	r3!, {r2}
 8025af2:	9105      	str	r1, [sp, #20]
 8025af4:	6800      	ldr	r0, [r0, #0]
 8025af6:	a902      	add	r1, sp, #8
 8025af8:	9301      	str	r3, [sp, #4]
 8025afa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8025afc:	f002 fa5a 	bl	8027fb4 <_svfiprintf_r>
 8025b00:	9b02      	ldr	r3, [sp, #8]
 8025b02:	701c      	strb	r4, [r3, #0]
 8025b04:	b01d      	add	sp, #116	@ 0x74
 8025b06:	bc10      	pop	{r4}
 8025b08:	bc08      	pop	{r3}
 8025b0a:	b003      	add	sp, #12
 8025b0c:	4718      	bx	r3
 8025b0e:	46c0      	nop			@ (mov r8, r8)
 8025b10:	7fffffff 	.word	0x7fffffff
 8025b14:	200003e4 	.word	0x200003e4
 8025b18:	ffff0208 	.word	0xffff0208

08025b1c <__sread>:
 8025b1c:	b570      	push	{r4, r5, r6, lr}
 8025b1e:	000c      	movs	r4, r1
 8025b20:	250e      	movs	r5, #14
 8025b22:	5f49      	ldrsh	r1, [r1, r5]
 8025b24:	f000 f9be 	bl	8025ea4 <_read_r>
 8025b28:	2800      	cmp	r0, #0
 8025b2a:	db03      	blt.n	8025b34 <__sread+0x18>
 8025b2c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8025b2e:	181b      	adds	r3, r3, r0
 8025b30:	6563      	str	r3, [r4, #84]	@ 0x54
 8025b32:	bd70      	pop	{r4, r5, r6, pc}
 8025b34:	89a3      	ldrh	r3, [r4, #12]
 8025b36:	4a02      	ldr	r2, [pc, #8]	@ (8025b40 <__sread+0x24>)
 8025b38:	4013      	ands	r3, r2
 8025b3a:	81a3      	strh	r3, [r4, #12]
 8025b3c:	e7f9      	b.n	8025b32 <__sread+0x16>
 8025b3e:	46c0      	nop			@ (mov r8, r8)
 8025b40:	ffffefff 	.word	0xffffefff

08025b44 <__swrite>:
 8025b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b46:	001f      	movs	r7, r3
 8025b48:	898b      	ldrh	r3, [r1, #12]
 8025b4a:	0005      	movs	r5, r0
 8025b4c:	000c      	movs	r4, r1
 8025b4e:	0016      	movs	r6, r2
 8025b50:	05db      	lsls	r3, r3, #23
 8025b52:	d505      	bpl.n	8025b60 <__swrite+0x1c>
 8025b54:	230e      	movs	r3, #14
 8025b56:	5ec9      	ldrsh	r1, [r1, r3]
 8025b58:	2200      	movs	r2, #0
 8025b5a:	2302      	movs	r3, #2
 8025b5c:	f000 f98e 	bl	8025e7c <_lseek_r>
 8025b60:	89a3      	ldrh	r3, [r4, #12]
 8025b62:	4a05      	ldr	r2, [pc, #20]	@ (8025b78 <__swrite+0x34>)
 8025b64:	0028      	movs	r0, r5
 8025b66:	4013      	ands	r3, r2
 8025b68:	81a3      	strh	r3, [r4, #12]
 8025b6a:	0032      	movs	r2, r6
 8025b6c:	230e      	movs	r3, #14
 8025b6e:	5ee1      	ldrsh	r1, [r4, r3]
 8025b70:	003b      	movs	r3, r7
 8025b72:	f000 f9ab 	bl	8025ecc <_write_r>
 8025b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b78:	ffffefff 	.word	0xffffefff

08025b7c <__sseek>:
 8025b7c:	b570      	push	{r4, r5, r6, lr}
 8025b7e:	000c      	movs	r4, r1
 8025b80:	250e      	movs	r5, #14
 8025b82:	5f49      	ldrsh	r1, [r1, r5]
 8025b84:	f000 f97a 	bl	8025e7c <_lseek_r>
 8025b88:	89a3      	ldrh	r3, [r4, #12]
 8025b8a:	1c42      	adds	r2, r0, #1
 8025b8c:	d103      	bne.n	8025b96 <__sseek+0x1a>
 8025b8e:	4a05      	ldr	r2, [pc, #20]	@ (8025ba4 <__sseek+0x28>)
 8025b90:	4013      	ands	r3, r2
 8025b92:	81a3      	strh	r3, [r4, #12]
 8025b94:	bd70      	pop	{r4, r5, r6, pc}
 8025b96:	2280      	movs	r2, #128	@ 0x80
 8025b98:	0152      	lsls	r2, r2, #5
 8025b9a:	4313      	orrs	r3, r2
 8025b9c:	81a3      	strh	r3, [r4, #12]
 8025b9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8025ba0:	e7f8      	b.n	8025b94 <__sseek+0x18>
 8025ba2:	46c0      	nop			@ (mov r8, r8)
 8025ba4:	ffffefff 	.word	0xffffefff

08025ba8 <__sclose>:
 8025ba8:	b510      	push	{r4, lr}
 8025baa:	230e      	movs	r3, #14
 8025bac:	5ec9      	ldrsh	r1, [r1, r3]
 8025bae:	f000 f953 	bl	8025e58 <_close_r>
 8025bb2:	bd10      	pop	{r4, pc}

08025bb4 <_vsniprintf_r>:
 8025bb4:	b530      	push	{r4, r5, lr}
 8025bb6:	0005      	movs	r5, r0
 8025bb8:	0014      	movs	r4, r2
 8025bba:	0008      	movs	r0, r1
 8025bbc:	001a      	movs	r2, r3
 8025bbe:	b09b      	sub	sp, #108	@ 0x6c
 8025bc0:	2c00      	cmp	r4, #0
 8025bc2:	da05      	bge.n	8025bd0 <_vsniprintf_r+0x1c>
 8025bc4:	238b      	movs	r3, #139	@ 0x8b
 8025bc6:	2001      	movs	r0, #1
 8025bc8:	602b      	str	r3, [r5, #0]
 8025bca:	4240      	negs	r0, r0
 8025bcc:	b01b      	add	sp, #108	@ 0x6c
 8025bce:	bd30      	pop	{r4, r5, pc}
 8025bd0:	2382      	movs	r3, #130	@ 0x82
 8025bd2:	4669      	mov	r1, sp
 8025bd4:	009b      	lsls	r3, r3, #2
 8025bd6:	818b      	strh	r3, [r1, #12]
 8025bd8:	2100      	movs	r1, #0
 8025bda:	9000      	str	r0, [sp, #0]
 8025bdc:	9119      	str	r1, [sp, #100]	@ 0x64
 8025bde:	9004      	str	r0, [sp, #16]
 8025be0:	428c      	cmp	r4, r1
 8025be2:	d000      	beq.n	8025be6 <_vsniprintf_r+0x32>
 8025be4:	1e61      	subs	r1, r4, #1
 8025be6:	2301      	movs	r3, #1
 8025be8:	9102      	str	r1, [sp, #8]
 8025bea:	9105      	str	r1, [sp, #20]
 8025bec:	4669      	mov	r1, sp
 8025bee:	425b      	negs	r3, r3
 8025bf0:	81cb      	strh	r3, [r1, #14]
 8025bf2:	0028      	movs	r0, r5
 8025bf4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025bf6:	f002 f9dd 	bl	8027fb4 <_svfiprintf_r>
 8025bfa:	1c43      	adds	r3, r0, #1
 8025bfc:	da01      	bge.n	8025c02 <_vsniprintf_r+0x4e>
 8025bfe:	238b      	movs	r3, #139	@ 0x8b
 8025c00:	602b      	str	r3, [r5, #0]
 8025c02:	2c00      	cmp	r4, #0
 8025c04:	d0e2      	beq.n	8025bcc <_vsniprintf_r+0x18>
 8025c06:	2200      	movs	r2, #0
 8025c08:	9b00      	ldr	r3, [sp, #0]
 8025c0a:	701a      	strb	r2, [r3, #0]
 8025c0c:	e7de      	b.n	8025bcc <_vsniprintf_r+0x18>
	...

08025c10 <vsniprintf>:
 8025c10:	b513      	push	{r0, r1, r4, lr}
 8025c12:	4c04      	ldr	r4, [pc, #16]	@ (8025c24 <vsniprintf+0x14>)
 8025c14:	9300      	str	r3, [sp, #0]
 8025c16:	0013      	movs	r3, r2
 8025c18:	000a      	movs	r2, r1
 8025c1a:	0001      	movs	r1, r0
 8025c1c:	6820      	ldr	r0, [r4, #0]
 8025c1e:	f7ff ffc9 	bl	8025bb4 <_vsniprintf_r>
 8025c22:	bd16      	pop	{r1, r2, r4, pc}
 8025c24:	200003e4 	.word	0x200003e4

08025c28 <_vsiprintf_r>:
 8025c28:	b510      	push	{r4, lr}
 8025c2a:	2400      	movs	r4, #0
 8025c2c:	b09a      	sub	sp, #104	@ 0x68
 8025c2e:	9100      	str	r1, [sp, #0]
 8025c30:	9104      	str	r1, [sp, #16]
 8025c32:	4906      	ldr	r1, [pc, #24]	@ (8025c4c <_vsiprintf_r+0x24>)
 8025c34:	9419      	str	r4, [sp, #100]	@ 0x64
 8025c36:	9105      	str	r1, [sp, #20]
 8025c38:	9102      	str	r1, [sp, #8]
 8025c3a:	4905      	ldr	r1, [pc, #20]	@ (8025c50 <_vsiprintf_r+0x28>)
 8025c3c:	9103      	str	r1, [sp, #12]
 8025c3e:	4669      	mov	r1, sp
 8025c40:	f002 f9b8 	bl	8027fb4 <_svfiprintf_r>
 8025c44:	9b00      	ldr	r3, [sp, #0]
 8025c46:	701c      	strb	r4, [r3, #0]
 8025c48:	b01a      	add	sp, #104	@ 0x68
 8025c4a:	bd10      	pop	{r4, pc}
 8025c4c:	7fffffff 	.word	0x7fffffff
 8025c50:	ffff0208 	.word	0xffff0208

08025c54 <vsiprintf>:
 8025c54:	b510      	push	{r4, lr}
 8025c56:	4c04      	ldr	r4, [pc, #16]	@ (8025c68 <vsiprintf+0x14>)
 8025c58:	0013      	movs	r3, r2
 8025c5a:	000a      	movs	r2, r1
 8025c5c:	0001      	movs	r1, r0
 8025c5e:	6820      	ldr	r0, [r4, #0]
 8025c60:	f7ff ffe2 	bl	8025c28 <_vsiprintf_r>
 8025c64:	bd10      	pop	{r4, pc}
 8025c66:	46c0      	nop			@ (mov r8, r8)
 8025c68:	200003e4 	.word	0x200003e4

08025c6c <__swbuf_r>:
 8025c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c6e:	0006      	movs	r6, r0
 8025c70:	000d      	movs	r5, r1
 8025c72:	0014      	movs	r4, r2
 8025c74:	2800      	cmp	r0, #0
 8025c76:	d004      	beq.n	8025c82 <__swbuf_r+0x16>
 8025c78:	6a03      	ldr	r3, [r0, #32]
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	d101      	bne.n	8025c82 <__swbuf_r+0x16>
 8025c7e:	f7ff fe87 	bl	8025990 <__sinit>
 8025c82:	69a3      	ldr	r3, [r4, #24]
 8025c84:	60a3      	str	r3, [r4, #8]
 8025c86:	89a3      	ldrh	r3, [r4, #12]
 8025c88:	071b      	lsls	r3, r3, #28
 8025c8a:	d502      	bpl.n	8025c92 <__swbuf_r+0x26>
 8025c8c:	6923      	ldr	r3, [r4, #16]
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	d109      	bne.n	8025ca6 <__swbuf_r+0x3a>
 8025c92:	0021      	movs	r1, r4
 8025c94:	0030      	movs	r0, r6
 8025c96:	f000 f82b 	bl	8025cf0 <__swsetup_r>
 8025c9a:	2800      	cmp	r0, #0
 8025c9c:	d003      	beq.n	8025ca6 <__swbuf_r+0x3a>
 8025c9e:	2501      	movs	r5, #1
 8025ca0:	426d      	negs	r5, r5
 8025ca2:	0028      	movs	r0, r5
 8025ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025ca6:	6923      	ldr	r3, [r4, #16]
 8025ca8:	6820      	ldr	r0, [r4, #0]
 8025caa:	b2ef      	uxtb	r7, r5
 8025cac:	1ac0      	subs	r0, r0, r3
 8025cae:	6963      	ldr	r3, [r4, #20]
 8025cb0:	b2ed      	uxtb	r5, r5
 8025cb2:	4283      	cmp	r3, r0
 8025cb4:	dc05      	bgt.n	8025cc2 <__swbuf_r+0x56>
 8025cb6:	0021      	movs	r1, r4
 8025cb8:	0030      	movs	r0, r6
 8025cba:	f002 fc43 	bl	8028544 <_fflush_r>
 8025cbe:	2800      	cmp	r0, #0
 8025cc0:	d1ed      	bne.n	8025c9e <__swbuf_r+0x32>
 8025cc2:	68a3      	ldr	r3, [r4, #8]
 8025cc4:	3001      	adds	r0, #1
 8025cc6:	3b01      	subs	r3, #1
 8025cc8:	60a3      	str	r3, [r4, #8]
 8025cca:	6823      	ldr	r3, [r4, #0]
 8025ccc:	1c5a      	adds	r2, r3, #1
 8025cce:	6022      	str	r2, [r4, #0]
 8025cd0:	701f      	strb	r7, [r3, #0]
 8025cd2:	6963      	ldr	r3, [r4, #20]
 8025cd4:	4283      	cmp	r3, r0
 8025cd6:	d004      	beq.n	8025ce2 <__swbuf_r+0x76>
 8025cd8:	89a3      	ldrh	r3, [r4, #12]
 8025cda:	07db      	lsls	r3, r3, #31
 8025cdc:	d5e1      	bpl.n	8025ca2 <__swbuf_r+0x36>
 8025cde:	2d0a      	cmp	r5, #10
 8025ce0:	d1df      	bne.n	8025ca2 <__swbuf_r+0x36>
 8025ce2:	0021      	movs	r1, r4
 8025ce4:	0030      	movs	r0, r6
 8025ce6:	f002 fc2d 	bl	8028544 <_fflush_r>
 8025cea:	2800      	cmp	r0, #0
 8025cec:	d0d9      	beq.n	8025ca2 <__swbuf_r+0x36>
 8025cee:	e7d6      	b.n	8025c9e <__swbuf_r+0x32>

08025cf0 <__swsetup_r>:
 8025cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8025da8 <__swsetup_r+0xb8>)
 8025cf2:	b570      	push	{r4, r5, r6, lr}
 8025cf4:	0005      	movs	r5, r0
 8025cf6:	6818      	ldr	r0, [r3, #0]
 8025cf8:	000c      	movs	r4, r1
 8025cfa:	2800      	cmp	r0, #0
 8025cfc:	d004      	beq.n	8025d08 <__swsetup_r+0x18>
 8025cfe:	6a03      	ldr	r3, [r0, #32]
 8025d00:	2b00      	cmp	r3, #0
 8025d02:	d101      	bne.n	8025d08 <__swsetup_r+0x18>
 8025d04:	f7ff fe44 	bl	8025990 <__sinit>
 8025d08:	220c      	movs	r2, #12
 8025d0a:	5ea3      	ldrsh	r3, [r4, r2]
 8025d0c:	071a      	lsls	r2, r3, #28
 8025d0e:	d423      	bmi.n	8025d58 <__swsetup_r+0x68>
 8025d10:	06da      	lsls	r2, r3, #27
 8025d12:	d407      	bmi.n	8025d24 <__swsetup_r+0x34>
 8025d14:	2209      	movs	r2, #9
 8025d16:	602a      	str	r2, [r5, #0]
 8025d18:	2240      	movs	r2, #64	@ 0x40
 8025d1a:	2001      	movs	r0, #1
 8025d1c:	4313      	orrs	r3, r2
 8025d1e:	81a3      	strh	r3, [r4, #12]
 8025d20:	4240      	negs	r0, r0
 8025d22:	e03a      	b.n	8025d9a <__swsetup_r+0xaa>
 8025d24:	075b      	lsls	r3, r3, #29
 8025d26:	d513      	bpl.n	8025d50 <__swsetup_r+0x60>
 8025d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025d2a:	2900      	cmp	r1, #0
 8025d2c:	d008      	beq.n	8025d40 <__swsetup_r+0x50>
 8025d2e:	0023      	movs	r3, r4
 8025d30:	3344      	adds	r3, #68	@ 0x44
 8025d32:	4299      	cmp	r1, r3
 8025d34:	d002      	beq.n	8025d3c <__swsetup_r+0x4c>
 8025d36:	0028      	movs	r0, r5
 8025d38:	f000 ff9a 	bl	8026c70 <_free_r>
 8025d3c:	2300      	movs	r3, #0
 8025d3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8025d40:	2224      	movs	r2, #36	@ 0x24
 8025d42:	89a3      	ldrh	r3, [r4, #12]
 8025d44:	4393      	bics	r3, r2
 8025d46:	81a3      	strh	r3, [r4, #12]
 8025d48:	2300      	movs	r3, #0
 8025d4a:	6063      	str	r3, [r4, #4]
 8025d4c:	6923      	ldr	r3, [r4, #16]
 8025d4e:	6023      	str	r3, [r4, #0]
 8025d50:	2308      	movs	r3, #8
 8025d52:	89a2      	ldrh	r2, [r4, #12]
 8025d54:	4313      	orrs	r3, r2
 8025d56:	81a3      	strh	r3, [r4, #12]
 8025d58:	6923      	ldr	r3, [r4, #16]
 8025d5a:	2b00      	cmp	r3, #0
 8025d5c:	d10b      	bne.n	8025d76 <__swsetup_r+0x86>
 8025d5e:	21a0      	movs	r1, #160	@ 0xa0
 8025d60:	2280      	movs	r2, #128	@ 0x80
 8025d62:	89a3      	ldrh	r3, [r4, #12]
 8025d64:	0089      	lsls	r1, r1, #2
 8025d66:	0092      	lsls	r2, r2, #2
 8025d68:	400b      	ands	r3, r1
 8025d6a:	4293      	cmp	r3, r2
 8025d6c:	d003      	beq.n	8025d76 <__swsetup_r+0x86>
 8025d6e:	0021      	movs	r1, r4
 8025d70:	0028      	movs	r0, r5
 8025d72:	f002 fc3d 	bl	80285f0 <__smakebuf_r>
 8025d76:	220c      	movs	r2, #12
 8025d78:	5ea3      	ldrsh	r3, [r4, r2]
 8025d7a:	2101      	movs	r1, #1
 8025d7c:	001a      	movs	r2, r3
 8025d7e:	400a      	ands	r2, r1
 8025d80:	420b      	tst	r3, r1
 8025d82:	d00b      	beq.n	8025d9c <__swsetup_r+0xac>
 8025d84:	2200      	movs	r2, #0
 8025d86:	60a2      	str	r2, [r4, #8]
 8025d88:	6962      	ldr	r2, [r4, #20]
 8025d8a:	4252      	negs	r2, r2
 8025d8c:	61a2      	str	r2, [r4, #24]
 8025d8e:	2000      	movs	r0, #0
 8025d90:	6922      	ldr	r2, [r4, #16]
 8025d92:	4282      	cmp	r2, r0
 8025d94:	d101      	bne.n	8025d9a <__swsetup_r+0xaa>
 8025d96:	061a      	lsls	r2, r3, #24
 8025d98:	d4be      	bmi.n	8025d18 <__swsetup_r+0x28>
 8025d9a:	bd70      	pop	{r4, r5, r6, pc}
 8025d9c:	0799      	lsls	r1, r3, #30
 8025d9e:	d400      	bmi.n	8025da2 <__swsetup_r+0xb2>
 8025da0:	6962      	ldr	r2, [r4, #20]
 8025da2:	60a2      	str	r2, [r4, #8]
 8025da4:	e7f3      	b.n	8025d8e <__swsetup_r+0x9e>
 8025da6:	46c0      	nop			@ (mov r8, r8)
 8025da8:	200003e4 	.word	0x200003e4

08025dac <memset>:
 8025dac:	0003      	movs	r3, r0
 8025dae:	1882      	adds	r2, r0, r2
 8025db0:	4293      	cmp	r3, r2
 8025db2:	d100      	bne.n	8025db6 <memset+0xa>
 8025db4:	4770      	bx	lr
 8025db6:	7019      	strb	r1, [r3, #0]
 8025db8:	3301      	adds	r3, #1
 8025dba:	e7f9      	b.n	8025db0 <memset+0x4>

08025dbc <strchr>:
 8025dbc:	b2c9      	uxtb	r1, r1
 8025dbe:	7803      	ldrb	r3, [r0, #0]
 8025dc0:	2b00      	cmp	r3, #0
 8025dc2:	d004      	beq.n	8025dce <strchr+0x12>
 8025dc4:	428b      	cmp	r3, r1
 8025dc6:	d100      	bne.n	8025dca <strchr+0xe>
 8025dc8:	4770      	bx	lr
 8025dca:	3001      	adds	r0, #1
 8025dcc:	e7f7      	b.n	8025dbe <strchr+0x2>
 8025dce:	424b      	negs	r3, r1
 8025dd0:	4159      	adcs	r1, r3
 8025dd2:	4249      	negs	r1, r1
 8025dd4:	4008      	ands	r0, r1
 8025dd6:	e7f7      	b.n	8025dc8 <strchr+0xc>

08025dd8 <strncmp>:
 8025dd8:	b530      	push	{r4, r5, lr}
 8025dda:	0005      	movs	r5, r0
 8025ddc:	1e10      	subs	r0, r2, #0
 8025dde:	d00b      	beq.n	8025df8 <strncmp+0x20>
 8025de0:	2400      	movs	r4, #0
 8025de2:	3a01      	subs	r2, #1
 8025de4:	5d2b      	ldrb	r3, [r5, r4]
 8025de6:	5d08      	ldrb	r0, [r1, r4]
 8025de8:	4283      	cmp	r3, r0
 8025dea:	d104      	bne.n	8025df6 <strncmp+0x1e>
 8025dec:	4294      	cmp	r4, r2
 8025dee:	d002      	beq.n	8025df6 <strncmp+0x1e>
 8025df0:	3401      	adds	r4, #1
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	d1f6      	bne.n	8025de4 <strncmp+0xc>
 8025df6:	1a18      	subs	r0, r3, r0
 8025df8:	bd30      	pop	{r4, r5, pc}

08025dfa <strncpy>:
 8025dfa:	0003      	movs	r3, r0
 8025dfc:	b530      	push	{r4, r5, lr}
 8025dfe:	001d      	movs	r5, r3
 8025e00:	2a00      	cmp	r2, #0
 8025e02:	d006      	beq.n	8025e12 <strncpy+0x18>
 8025e04:	780c      	ldrb	r4, [r1, #0]
 8025e06:	3a01      	subs	r2, #1
 8025e08:	3301      	adds	r3, #1
 8025e0a:	702c      	strb	r4, [r5, #0]
 8025e0c:	3101      	adds	r1, #1
 8025e0e:	2c00      	cmp	r4, #0
 8025e10:	d1f5      	bne.n	8025dfe <strncpy+0x4>
 8025e12:	2100      	movs	r1, #0
 8025e14:	189a      	adds	r2, r3, r2
 8025e16:	4293      	cmp	r3, r2
 8025e18:	d100      	bne.n	8025e1c <strncpy+0x22>
 8025e1a:	bd30      	pop	{r4, r5, pc}
 8025e1c:	7019      	strb	r1, [r3, #0]
 8025e1e:	3301      	adds	r3, #1
 8025e20:	e7f9      	b.n	8025e16 <strncpy+0x1c>

08025e22 <strstr>:
 8025e22:	780a      	ldrb	r2, [r1, #0]
 8025e24:	b530      	push	{r4, r5, lr}
 8025e26:	2a00      	cmp	r2, #0
 8025e28:	d10c      	bne.n	8025e44 <strstr+0x22>
 8025e2a:	bd30      	pop	{r4, r5, pc}
 8025e2c:	429a      	cmp	r2, r3
 8025e2e:	d108      	bne.n	8025e42 <strstr+0x20>
 8025e30:	2301      	movs	r3, #1
 8025e32:	5ccc      	ldrb	r4, [r1, r3]
 8025e34:	2c00      	cmp	r4, #0
 8025e36:	d0f8      	beq.n	8025e2a <strstr+0x8>
 8025e38:	5cc5      	ldrb	r5, [r0, r3]
 8025e3a:	42a5      	cmp	r5, r4
 8025e3c:	d101      	bne.n	8025e42 <strstr+0x20>
 8025e3e:	3301      	adds	r3, #1
 8025e40:	e7f7      	b.n	8025e32 <strstr+0x10>
 8025e42:	3001      	adds	r0, #1
 8025e44:	7803      	ldrb	r3, [r0, #0]
 8025e46:	2b00      	cmp	r3, #0
 8025e48:	d1f0      	bne.n	8025e2c <strstr+0xa>
 8025e4a:	0018      	movs	r0, r3
 8025e4c:	e7ed      	b.n	8025e2a <strstr+0x8>
	...

08025e50 <_localeconv_r>:
 8025e50:	4800      	ldr	r0, [pc, #0]	@ (8025e54 <_localeconv_r+0x4>)
 8025e52:	4770      	bx	lr
 8025e54:	20000368 	.word	0x20000368

08025e58 <_close_r>:
 8025e58:	2300      	movs	r3, #0
 8025e5a:	b570      	push	{r4, r5, r6, lr}
 8025e5c:	4d06      	ldr	r5, [pc, #24]	@ (8025e78 <_close_r+0x20>)
 8025e5e:	0004      	movs	r4, r0
 8025e60:	0008      	movs	r0, r1
 8025e62:	602b      	str	r3, [r5, #0]
 8025e64:	f7ec fea6 	bl	8012bb4 <_close>
 8025e68:	1c43      	adds	r3, r0, #1
 8025e6a:	d103      	bne.n	8025e74 <_close_r+0x1c>
 8025e6c:	682b      	ldr	r3, [r5, #0]
 8025e6e:	2b00      	cmp	r3, #0
 8025e70:	d000      	beq.n	8025e74 <_close_r+0x1c>
 8025e72:	6023      	str	r3, [r4, #0]
 8025e74:	bd70      	pop	{r4, r5, r6, pc}
 8025e76:	46c0      	nop			@ (mov r8, r8)
 8025e78:	2000364c 	.word	0x2000364c

08025e7c <_lseek_r>:
 8025e7c:	b570      	push	{r4, r5, r6, lr}
 8025e7e:	0004      	movs	r4, r0
 8025e80:	0008      	movs	r0, r1
 8025e82:	0011      	movs	r1, r2
 8025e84:	001a      	movs	r2, r3
 8025e86:	2300      	movs	r3, #0
 8025e88:	4d05      	ldr	r5, [pc, #20]	@ (8025ea0 <_lseek_r+0x24>)
 8025e8a:	602b      	str	r3, [r5, #0]
 8025e8c:	f7ec feb3 	bl	8012bf6 <_lseek>
 8025e90:	1c43      	adds	r3, r0, #1
 8025e92:	d103      	bne.n	8025e9c <_lseek_r+0x20>
 8025e94:	682b      	ldr	r3, [r5, #0]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	d000      	beq.n	8025e9c <_lseek_r+0x20>
 8025e9a:	6023      	str	r3, [r4, #0]
 8025e9c:	bd70      	pop	{r4, r5, r6, pc}
 8025e9e:	46c0      	nop			@ (mov r8, r8)
 8025ea0:	2000364c 	.word	0x2000364c

08025ea4 <_read_r>:
 8025ea4:	b570      	push	{r4, r5, r6, lr}
 8025ea6:	0004      	movs	r4, r0
 8025ea8:	0008      	movs	r0, r1
 8025eaa:	0011      	movs	r1, r2
 8025eac:	001a      	movs	r2, r3
 8025eae:	2300      	movs	r3, #0
 8025eb0:	4d05      	ldr	r5, [pc, #20]	@ (8025ec8 <_read_r+0x24>)
 8025eb2:	602b      	str	r3, [r5, #0]
 8025eb4:	f7ec fe61 	bl	8012b7a <_read>
 8025eb8:	1c43      	adds	r3, r0, #1
 8025eba:	d103      	bne.n	8025ec4 <_read_r+0x20>
 8025ebc:	682b      	ldr	r3, [r5, #0]
 8025ebe:	2b00      	cmp	r3, #0
 8025ec0:	d000      	beq.n	8025ec4 <_read_r+0x20>
 8025ec2:	6023      	str	r3, [r4, #0]
 8025ec4:	bd70      	pop	{r4, r5, r6, pc}
 8025ec6:	46c0      	nop			@ (mov r8, r8)
 8025ec8:	2000364c 	.word	0x2000364c

08025ecc <_write_r>:
 8025ecc:	b570      	push	{r4, r5, r6, lr}
 8025ece:	0004      	movs	r4, r0
 8025ed0:	0008      	movs	r0, r1
 8025ed2:	0011      	movs	r1, r2
 8025ed4:	001a      	movs	r2, r3
 8025ed6:	2300      	movs	r3, #0
 8025ed8:	4d05      	ldr	r5, [pc, #20]	@ (8025ef0 <_write_r+0x24>)
 8025eda:	602b      	str	r3, [r5, #0]
 8025edc:	f7ed fb1e 	bl	801351c <_write>
 8025ee0:	1c43      	adds	r3, r0, #1
 8025ee2:	d103      	bne.n	8025eec <_write_r+0x20>
 8025ee4:	682b      	ldr	r3, [r5, #0]
 8025ee6:	2b00      	cmp	r3, #0
 8025ee8:	d000      	beq.n	8025eec <_write_r+0x20>
 8025eea:	6023      	str	r3, [r4, #0]
 8025eec:	bd70      	pop	{r4, r5, r6, pc}
 8025eee:	46c0      	nop			@ (mov r8, r8)
 8025ef0:	2000364c 	.word	0x2000364c

08025ef4 <__errno>:
 8025ef4:	4b01      	ldr	r3, [pc, #4]	@ (8025efc <__errno+0x8>)
 8025ef6:	6818      	ldr	r0, [r3, #0]
 8025ef8:	4770      	bx	lr
 8025efa:	46c0      	nop			@ (mov r8, r8)
 8025efc:	200003e4 	.word	0x200003e4

08025f00 <__libc_init_array>:
 8025f00:	b570      	push	{r4, r5, r6, lr}
 8025f02:	2600      	movs	r6, #0
 8025f04:	4c0c      	ldr	r4, [pc, #48]	@ (8025f38 <__libc_init_array+0x38>)
 8025f06:	4d0d      	ldr	r5, [pc, #52]	@ (8025f3c <__libc_init_array+0x3c>)
 8025f08:	1b64      	subs	r4, r4, r5
 8025f0a:	10a4      	asrs	r4, r4, #2
 8025f0c:	42a6      	cmp	r6, r4
 8025f0e:	d109      	bne.n	8025f24 <__libc_init_array+0x24>
 8025f10:	2600      	movs	r6, #0
 8025f12:	f003 ffcb 	bl	8029eac <_init>
 8025f16:	4c0a      	ldr	r4, [pc, #40]	@ (8025f40 <__libc_init_array+0x40>)
 8025f18:	4d0a      	ldr	r5, [pc, #40]	@ (8025f44 <__libc_init_array+0x44>)
 8025f1a:	1b64      	subs	r4, r4, r5
 8025f1c:	10a4      	asrs	r4, r4, #2
 8025f1e:	42a6      	cmp	r6, r4
 8025f20:	d105      	bne.n	8025f2e <__libc_init_array+0x2e>
 8025f22:	bd70      	pop	{r4, r5, r6, pc}
 8025f24:	00b3      	lsls	r3, r6, #2
 8025f26:	58eb      	ldr	r3, [r5, r3]
 8025f28:	4798      	blx	r3
 8025f2a:	3601      	adds	r6, #1
 8025f2c:	e7ee      	b.n	8025f0c <__libc_init_array+0xc>
 8025f2e:	00b3      	lsls	r3, r6, #2
 8025f30:	58eb      	ldr	r3, [r5, r3]
 8025f32:	4798      	blx	r3
 8025f34:	3601      	adds	r6, #1
 8025f36:	e7f2      	b.n	8025f1e <__libc_init_array+0x1e>
 8025f38:	0802ece0 	.word	0x0802ece0
 8025f3c:	0802ece0 	.word	0x0802ece0
 8025f40:	0802ece4 	.word	0x0802ece4
 8025f44:	0802ece0 	.word	0x0802ece0

08025f48 <__retarget_lock_init_recursive>:
 8025f48:	4770      	bx	lr

08025f4a <__retarget_lock_acquire_recursive>:
 8025f4a:	4770      	bx	lr

08025f4c <__retarget_lock_release_recursive>:
 8025f4c:	4770      	bx	lr

08025f4e <memchr>:
 8025f4e:	b2c9      	uxtb	r1, r1
 8025f50:	1882      	adds	r2, r0, r2
 8025f52:	4290      	cmp	r0, r2
 8025f54:	d101      	bne.n	8025f5a <memchr+0xc>
 8025f56:	2000      	movs	r0, #0
 8025f58:	4770      	bx	lr
 8025f5a:	7803      	ldrb	r3, [r0, #0]
 8025f5c:	428b      	cmp	r3, r1
 8025f5e:	d0fb      	beq.n	8025f58 <memchr+0xa>
 8025f60:	3001      	adds	r0, #1
 8025f62:	e7f6      	b.n	8025f52 <memchr+0x4>

08025f64 <memcpy>:
 8025f64:	2300      	movs	r3, #0
 8025f66:	b510      	push	{r4, lr}
 8025f68:	429a      	cmp	r2, r3
 8025f6a:	d100      	bne.n	8025f6e <memcpy+0xa>
 8025f6c:	bd10      	pop	{r4, pc}
 8025f6e:	5ccc      	ldrb	r4, [r1, r3]
 8025f70:	54c4      	strb	r4, [r0, r3]
 8025f72:	3301      	adds	r3, #1
 8025f74:	e7f8      	b.n	8025f68 <memcpy+0x4>
	...

08025f78 <nan>:
 8025f78:	2000      	movs	r0, #0
 8025f7a:	4901      	ldr	r1, [pc, #4]	@ (8025f80 <nan+0x8>)
 8025f7c:	4770      	bx	lr
 8025f7e:	46c0      	nop			@ (mov r8, r8)
 8025f80:	7ff80000 	.word	0x7ff80000

08025f84 <quorem>:
 8025f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f86:	6903      	ldr	r3, [r0, #16]
 8025f88:	690c      	ldr	r4, [r1, #16]
 8025f8a:	b089      	sub	sp, #36	@ 0x24
 8025f8c:	9003      	str	r0, [sp, #12]
 8025f8e:	9106      	str	r1, [sp, #24]
 8025f90:	2000      	movs	r0, #0
 8025f92:	42a3      	cmp	r3, r4
 8025f94:	db63      	blt.n	802605e <quorem+0xda>
 8025f96:	000b      	movs	r3, r1
 8025f98:	3c01      	subs	r4, #1
 8025f9a:	3314      	adds	r3, #20
 8025f9c:	00a5      	lsls	r5, r4, #2
 8025f9e:	9304      	str	r3, [sp, #16]
 8025fa0:	195b      	adds	r3, r3, r5
 8025fa2:	9305      	str	r3, [sp, #20]
 8025fa4:	9b03      	ldr	r3, [sp, #12]
 8025fa6:	3314      	adds	r3, #20
 8025fa8:	9301      	str	r3, [sp, #4]
 8025faa:	195d      	adds	r5, r3, r5
 8025fac:	9b05      	ldr	r3, [sp, #20]
 8025fae:	682f      	ldr	r7, [r5, #0]
 8025fb0:	681e      	ldr	r6, [r3, #0]
 8025fb2:	0038      	movs	r0, r7
 8025fb4:	3601      	adds	r6, #1
 8025fb6:	0031      	movs	r1, r6
 8025fb8:	f7da f8f4 	bl	80001a4 <__udivsi3>
 8025fbc:	9002      	str	r0, [sp, #8]
 8025fbe:	42b7      	cmp	r7, r6
 8025fc0:	d327      	bcc.n	8026012 <quorem+0x8e>
 8025fc2:	9b04      	ldr	r3, [sp, #16]
 8025fc4:	2700      	movs	r7, #0
 8025fc6:	469c      	mov	ip, r3
 8025fc8:	9e01      	ldr	r6, [sp, #4]
 8025fca:	9707      	str	r7, [sp, #28]
 8025fcc:	4662      	mov	r2, ip
 8025fce:	ca08      	ldmia	r2!, {r3}
 8025fd0:	6830      	ldr	r0, [r6, #0]
 8025fd2:	4694      	mov	ip, r2
 8025fd4:	9a02      	ldr	r2, [sp, #8]
 8025fd6:	b299      	uxth	r1, r3
 8025fd8:	4351      	muls	r1, r2
 8025fda:	0c1b      	lsrs	r3, r3, #16
 8025fdc:	4353      	muls	r3, r2
 8025fde:	19c9      	adds	r1, r1, r7
 8025fe0:	0c0a      	lsrs	r2, r1, #16
 8025fe2:	189b      	adds	r3, r3, r2
 8025fe4:	b289      	uxth	r1, r1
 8025fe6:	b282      	uxth	r2, r0
 8025fe8:	1a52      	subs	r2, r2, r1
 8025fea:	9907      	ldr	r1, [sp, #28]
 8025fec:	0c1f      	lsrs	r7, r3, #16
 8025fee:	1852      	adds	r2, r2, r1
 8025ff0:	0c00      	lsrs	r0, r0, #16
 8025ff2:	b29b      	uxth	r3, r3
 8025ff4:	1411      	asrs	r1, r2, #16
 8025ff6:	1ac3      	subs	r3, r0, r3
 8025ff8:	185b      	adds	r3, r3, r1
 8025ffa:	1419      	asrs	r1, r3, #16
 8025ffc:	b292      	uxth	r2, r2
 8025ffe:	041b      	lsls	r3, r3, #16
 8026000:	431a      	orrs	r2, r3
 8026002:	9b05      	ldr	r3, [sp, #20]
 8026004:	9107      	str	r1, [sp, #28]
 8026006:	c604      	stmia	r6!, {r2}
 8026008:	4563      	cmp	r3, ip
 802600a:	d2df      	bcs.n	8025fcc <quorem+0x48>
 802600c:	682b      	ldr	r3, [r5, #0]
 802600e:	2b00      	cmp	r3, #0
 8026010:	d02b      	beq.n	802606a <quorem+0xe6>
 8026012:	9906      	ldr	r1, [sp, #24]
 8026014:	9803      	ldr	r0, [sp, #12]
 8026016:	f001 fd6f 	bl	8027af8 <__mcmp>
 802601a:	2800      	cmp	r0, #0
 802601c:	db1e      	blt.n	802605c <quorem+0xd8>
 802601e:	2600      	movs	r6, #0
 8026020:	9d01      	ldr	r5, [sp, #4]
 8026022:	9904      	ldr	r1, [sp, #16]
 8026024:	c901      	ldmia	r1!, {r0}
 8026026:	682b      	ldr	r3, [r5, #0]
 8026028:	b287      	uxth	r7, r0
 802602a:	b29a      	uxth	r2, r3
 802602c:	1bd2      	subs	r2, r2, r7
 802602e:	1992      	adds	r2, r2, r6
 8026030:	0c00      	lsrs	r0, r0, #16
 8026032:	0c1b      	lsrs	r3, r3, #16
 8026034:	1a1b      	subs	r3, r3, r0
 8026036:	1410      	asrs	r0, r2, #16
 8026038:	181b      	adds	r3, r3, r0
 802603a:	141e      	asrs	r6, r3, #16
 802603c:	b292      	uxth	r2, r2
 802603e:	041b      	lsls	r3, r3, #16
 8026040:	431a      	orrs	r2, r3
 8026042:	9b05      	ldr	r3, [sp, #20]
 8026044:	c504      	stmia	r5!, {r2}
 8026046:	428b      	cmp	r3, r1
 8026048:	d2ec      	bcs.n	8026024 <quorem+0xa0>
 802604a:	9a01      	ldr	r2, [sp, #4]
 802604c:	00a3      	lsls	r3, r4, #2
 802604e:	18d3      	adds	r3, r2, r3
 8026050:	681a      	ldr	r2, [r3, #0]
 8026052:	2a00      	cmp	r2, #0
 8026054:	d014      	beq.n	8026080 <quorem+0xfc>
 8026056:	9b02      	ldr	r3, [sp, #8]
 8026058:	3301      	adds	r3, #1
 802605a:	9302      	str	r3, [sp, #8]
 802605c:	9802      	ldr	r0, [sp, #8]
 802605e:	b009      	add	sp, #36	@ 0x24
 8026060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026062:	682b      	ldr	r3, [r5, #0]
 8026064:	2b00      	cmp	r3, #0
 8026066:	d104      	bne.n	8026072 <quorem+0xee>
 8026068:	3c01      	subs	r4, #1
 802606a:	9b01      	ldr	r3, [sp, #4]
 802606c:	3d04      	subs	r5, #4
 802606e:	42ab      	cmp	r3, r5
 8026070:	d3f7      	bcc.n	8026062 <quorem+0xde>
 8026072:	9b03      	ldr	r3, [sp, #12]
 8026074:	611c      	str	r4, [r3, #16]
 8026076:	e7cc      	b.n	8026012 <quorem+0x8e>
 8026078:	681a      	ldr	r2, [r3, #0]
 802607a:	2a00      	cmp	r2, #0
 802607c:	d104      	bne.n	8026088 <quorem+0x104>
 802607e:	3c01      	subs	r4, #1
 8026080:	9a01      	ldr	r2, [sp, #4]
 8026082:	3b04      	subs	r3, #4
 8026084:	429a      	cmp	r2, r3
 8026086:	d3f7      	bcc.n	8026078 <quorem+0xf4>
 8026088:	9b03      	ldr	r3, [sp, #12]
 802608a:	611c      	str	r4, [r3, #16]
 802608c:	e7e3      	b.n	8026056 <quorem+0xd2>
	...

08026090 <_dtoa_r>:
 8026090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026092:	0014      	movs	r4, r2
 8026094:	001d      	movs	r5, r3
 8026096:	69c6      	ldr	r6, [r0, #28]
 8026098:	b09d      	sub	sp, #116	@ 0x74
 802609a:	940a      	str	r4, [sp, #40]	@ 0x28
 802609c:	950b      	str	r5, [sp, #44]	@ 0x2c
 802609e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80260a0:	9003      	str	r0, [sp, #12]
 80260a2:	2e00      	cmp	r6, #0
 80260a4:	d10f      	bne.n	80260c6 <_dtoa_r+0x36>
 80260a6:	2010      	movs	r0, #16
 80260a8:	f001 f986 	bl	80273b8 <malloc>
 80260ac:	9b03      	ldr	r3, [sp, #12]
 80260ae:	1e02      	subs	r2, r0, #0
 80260b0:	61d8      	str	r0, [r3, #28]
 80260b2:	d104      	bne.n	80260be <_dtoa_r+0x2e>
 80260b4:	21ef      	movs	r1, #239	@ 0xef
 80260b6:	4bc7      	ldr	r3, [pc, #796]	@ (80263d4 <_dtoa_r+0x344>)
 80260b8:	48c7      	ldr	r0, [pc, #796]	@ (80263d8 <_dtoa_r+0x348>)
 80260ba:	f002 fb23 	bl	8028704 <__assert_func>
 80260be:	6046      	str	r6, [r0, #4]
 80260c0:	6086      	str	r6, [r0, #8]
 80260c2:	6006      	str	r6, [r0, #0]
 80260c4:	60c6      	str	r6, [r0, #12]
 80260c6:	9b03      	ldr	r3, [sp, #12]
 80260c8:	69db      	ldr	r3, [r3, #28]
 80260ca:	6819      	ldr	r1, [r3, #0]
 80260cc:	2900      	cmp	r1, #0
 80260ce:	d00b      	beq.n	80260e8 <_dtoa_r+0x58>
 80260d0:	685a      	ldr	r2, [r3, #4]
 80260d2:	2301      	movs	r3, #1
 80260d4:	4093      	lsls	r3, r2
 80260d6:	604a      	str	r2, [r1, #4]
 80260d8:	608b      	str	r3, [r1, #8]
 80260da:	9803      	ldr	r0, [sp, #12]
 80260dc:	f001 fa7e 	bl	80275dc <_Bfree>
 80260e0:	2200      	movs	r2, #0
 80260e2:	9b03      	ldr	r3, [sp, #12]
 80260e4:	69db      	ldr	r3, [r3, #28]
 80260e6:	601a      	str	r2, [r3, #0]
 80260e8:	2d00      	cmp	r5, #0
 80260ea:	da1e      	bge.n	802612a <_dtoa_r+0x9a>
 80260ec:	2301      	movs	r3, #1
 80260ee:	603b      	str	r3, [r7, #0]
 80260f0:	006b      	lsls	r3, r5, #1
 80260f2:	085b      	lsrs	r3, r3, #1
 80260f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80260f6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80260f8:	4bb8      	ldr	r3, [pc, #736]	@ (80263dc <_dtoa_r+0x34c>)
 80260fa:	4ab8      	ldr	r2, [pc, #736]	@ (80263dc <_dtoa_r+0x34c>)
 80260fc:	403b      	ands	r3, r7
 80260fe:	4293      	cmp	r3, r2
 8026100:	d116      	bne.n	8026130 <_dtoa_r+0xa0>
 8026102:	4bb7      	ldr	r3, [pc, #732]	@ (80263e0 <_dtoa_r+0x350>)
 8026104:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026106:	6013      	str	r3, [r2, #0]
 8026108:	033b      	lsls	r3, r7, #12
 802610a:	0b1b      	lsrs	r3, r3, #12
 802610c:	4323      	orrs	r3, r4
 802610e:	d101      	bne.n	8026114 <_dtoa_r+0x84>
 8026110:	f000 fd80 	bl	8026c14 <_dtoa_r+0xb84>
 8026114:	4bb3      	ldr	r3, [pc, #716]	@ (80263e4 <_dtoa_r+0x354>)
 8026116:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026118:	9308      	str	r3, [sp, #32]
 802611a:	2a00      	cmp	r2, #0
 802611c:	d002      	beq.n	8026124 <_dtoa_r+0x94>
 802611e:	4bb2      	ldr	r3, [pc, #712]	@ (80263e8 <_dtoa_r+0x358>)
 8026120:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026122:	6013      	str	r3, [r2, #0]
 8026124:	9808      	ldr	r0, [sp, #32]
 8026126:	b01d      	add	sp, #116	@ 0x74
 8026128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802612a:	2300      	movs	r3, #0
 802612c:	603b      	str	r3, [r7, #0]
 802612e:	e7e2      	b.n	80260f6 <_dtoa_r+0x66>
 8026130:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026134:	9212      	str	r2, [sp, #72]	@ 0x48
 8026136:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026138:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802613a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802613c:	2200      	movs	r2, #0
 802613e:	2300      	movs	r3, #0
 8026140:	f7da f9b6 	bl	80004b0 <__aeabi_dcmpeq>
 8026144:	1e06      	subs	r6, r0, #0
 8026146:	d00b      	beq.n	8026160 <_dtoa_r+0xd0>
 8026148:	2301      	movs	r3, #1
 802614a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802614c:	6013      	str	r3, [r2, #0]
 802614e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026150:	2b00      	cmp	r3, #0
 8026152:	d002      	beq.n	802615a <_dtoa_r+0xca>
 8026154:	4ba5      	ldr	r3, [pc, #660]	@ (80263ec <_dtoa_r+0x35c>)
 8026156:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026158:	6013      	str	r3, [r2, #0]
 802615a:	4ba5      	ldr	r3, [pc, #660]	@ (80263f0 <_dtoa_r+0x360>)
 802615c:	9308      	str	r3, [sp, #32]
 802615e:	e7e1      	b.n	8026124 <_dtoa_r+0x94>
 8026160:	ab1a      	add	r3, sp, #104	@ 0x68
 8026162:	9301      	str	r3, [sp, #4]
 8026164:	ab1b      	add	r3, sp, #108	@ 0x6c
 8026166:	9300      	str	r3, [sp, #0]
 8026168:	9803      	ldr	r0, [sp, #12]
 802616a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802616c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802616e:	f001 fde5 	bl	8027d3c <__d2b>
 8026172:	007a      	lsls	r2, r7, #1
 8026174:	9005      	str	r0, [sp, #20]
 8026176:	0d52      	lsrs	r2, r2, #21
 8026178:	d100      	bne.n	802617c <_dtoa_r+0xec>
 802617a:	e07b      	b.n	8026274 <_dtoa_r+0x1e4>
 802617c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802617e:	9618      	str	r6, [sp, #96]	@ 0x60
 8026180:	0319      	lsls	r1, r3, #12
 8026182:	4b9c      	ldr	r3, [pc, #624]	@ (80263f4 <_dtoa_r+0x364>)
 8026184:	0b09      	lsrs	r1, r1, #12
 8026186:	430b      	orrs	r3, r1
 8026188:	499b      	ldr	r1, [pc, #620]	@ (80263f8 <_dtoa_r+0x368>)
 802618a:	1857      	adds	r7, r2, r1
 802618c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802618e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026190:	0019      	movs	r1, r3
 8026192:	2200      	movs	r2, #0
 8026194:	4b99      	ldr	r3, [pc, #612]	@ (80263fc <_dtoa_r+0x36c>)
 8026196:	f7dc fec3 	bl	8002f20 <__aeabi_dsub>
 802619a:	4a99      	ldr	r2, [pc, #612]	@ (8026400 <_dtoa_r+0x370>)
 802619c:	4b99      	ldr	r3, [pc, #612]	@ (8026404 <_dtoa_r+0x374>)
 802619e:	f7dc fbd9 	bl	8002954 <__aeabi_dmul>
 80261a2:	4a99      	ldr	r2, [pc, #612]	@ (8026408 <_dtoa_r+0x378>)
 80261a4:	4b99      	ldr	r3, [pc, #612]	@ (802640c <_dtoa_r+0x37c>)
 80261a6:	f7db fbd5 	bl	8001954 <__aeabi_dadd>
 80261aa:	0004      	movs	r4, r0
 80261ac:	0038      	movs	r0, r7
 80261ae:	000d      	movs	r5, r1
 80261b0:	f7dd fb1e 	bl	80037f0 <__aeabi_i2d>
 80261b4:	4a96      	ldr	r2, [pc, #600]	@ (8026410 <_dtoa_r+0x380>)
 80261b6:	4b97      	ldr	r3, [pc, #604]	@ (8026414 <_dtoa_r+0x384>)
 80261b8:	f7dc fbcc 	bl	8002954 <__aeabi_dmul>
 80261bc:	0002      	movs	r2, r0
 80261be:	000b      	movs	r3, r1
 80261c0:	0020      	movs	r0, r4
 80261c2:	0029      	movs	r1, r5
 80261c4:	f7db fbc6 	bl	8001954 <__aeabi_dadd>
 80261c8:	0004      	movs	r4, r0
 80261ca:	000d      	movs	r5, r1
 80261cc:	f7dd fad4 	bl	8003778 <__aeabi_d2iz>
 80261d0:	2200      	movs	r2, #0
 80261d2:	9004      	str	r0, [sp, #16]
 80261d4:	2300      	movs	r3, #0
 80261d6:	0020      	movs	r0, r4
 80261d8:	0029      	movs	r1, r5
 80261da:	f7da f96f 	bl	80004bc <__aeabi_dcmplt>
 80261de:	2800      	cmp	r0, #0
 80261e0:	d00b      	beq.n	80261fa <_dtoa_r+0x16a>
 80261e2:	9804      	ldr	r0, [sp, #16]
 80261e4:	f7dd fb04 	bl	80037f0 <__aeabi_i2d>
 80261e8:	002b      	movs	r3, r5
 80261ea:	0022      	movs	r2, r4
 80261ec:	f7da f960 	bl	80004b0 <__aeabi_dcmpeq>
 80261f0:	4243      	negs	r3, r0
 80261f2:	4158      	adcs	r0, r3
 80261f4:	9b04      	ldr	r3, [sp, #16]
 80261f6:	1a1b      	subs	r3, r3, r0
 80261f8:	9304      	str	r3, [sp, #16]
 80261fa:	2301      	movs	r3, #1
 80261fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80261fe:	9b04      	ldr	r3, [sp, #16]
 8026200:	2b16      	cmp	r3, #22
 8026202:	d810      	bhi.n	8026226 <_dtoa_r+0x196>
 8026204:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026206:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026208:	9a04      	ldr	r2, [sp, #16]
 802620a:	4b83      	ldr	r3, [pc, #524]	@ (8026418 <_dtoa_r+0x388>)
 802620c:	00d2      	lsls	r2, r2, #3
 802620e:	189b      	adds	r3, r3, r2
 8026210:	681a      	ldr	r2, [r3, #0]
 8026212:	685b      	ldr	r3, [r3, #4]
 8026214:	f7da f952 	bl	80004bc <__aeabi_dcmplt>
 8026218:	2800      	cmp	r0, #0
 802621a:	d047      	beq.n	80262ac <_dtoa_r+0x21c>
 802621c:	9b04      	ldr	r3, [sp, #16]
 802621e:	3b01      	subs	r3, #1
 8026220:	9304      	str	r3, [sp, #16]
 8026222:	2300      	movs	r3, #0
 8026224:	9315      	str	r3, [sp, #84]	@ 0x54
 8026226:	2200      	movs	r2, #0
 8026228:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802622a:	9206      	str	r2, [sp, #24]
 802622c:	1bdb      	subs	r3, r3, r7
 802622e:	1e5a      	subs	r2, r3, #1
 8026230:	d53e      	bpl.n	80262b0 <_dtoa_r+0x220>
 8026232:	2201      	movs	r2, #1
 8026234:	1ad3      	subs	r3, r2, r3
 8026236:	9306      	str	r3, [sp, #24]
 8026238:	2300      	movs	r3, #0
 802623a:	930d      	str	r3, [sp, #52]	@ 0x34
 802623c:	9b04      	ldr	r3, [sp, #16]
 802623e:	2b00      	cmp	r3, #0
 8026240:	db38      	blt.n	80262b4 <_dtoa_r+0x224>
 8026242:	9a04      	ldr	r2, [sp, #16]
 8026244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026246:	4694      	mov	ip, r2
 8026248:	4463      	add	r3, ip
 802624a:	930d      	str	r3, [sp, #52]	@ 0x34
 802624c:	2300      	movs	r3, #0
 802624e:	9214      	str	r2, [sp, #80]	@ 0x50
 8026250:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026252:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026254:	2401      	movs	r4, #1
 8026256:	2b09      	cmp	r3, #9
 8026258:	d862      	bhi.n	8026320 <_dtoa_r+0x290>
 802625a:	2b05      	cmp	r3, #5
 802625c:	dd02      	ble.n	8026264 <_dtoa_r+0x1d4>
 802625e:	2400      	movs	r4, #0
 8026260:	3b04      	subs	r3, #4
 8026262:	9322      	str	r3, [sp, #136]	@ 0x88
 8026264:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026266:	1e98      	subs	r0, r3, #2
 8026268:	2803      	cmp	r0, #3
 802626a:	d863      	bhi.n	8026334 <_dtoa_r+0x2a4>
 802626c:	f7d9 ff86 	bl	800017c <__gnu_thumb1_case_uqi>
 8026270:	2b385654 	.word	0x2b385654
 8026274:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026276:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026278:	18f6      	adds	r6, r6, r3
 802627a:	4b68      	ldr	r3, [pc, #416]	@ (802641c <_dtoa_r+0x38c>)
 802627c:	18f2      	adds	r2, r6, r3
 802627e:	2a20      	cmp	r2, #32
 8026280:	dd0f      	ble.n	80262a2 <_dtoa_r+0x212>
 8026282:	2340      	movs	r3, #64	@ 0x40
 8026284:	1a9b      	subs	r3, r3, r2
 8026286:	409f      	lsls	r7, r3
 8026288:	4b65      	ldr	r3, [pc, #404]	@ (8026420 <_dtoa_r+0x390>)
 802628a:	0038      	movs	r0, r7
 802628c:	18f3      	adds	r3, r6, r3
 802628e:	40dc      	lsrs	r4, r3
 8026290:	4320      	orrs	r0, r4
 8026292:	f7dd fadb 	bl	800384c <__aeabi_ui2d>
 8026296:	2201      	movs	r2, #1
 8026298:	4b62      	ldr	r3, [pc, #392]	@ (8026424 <_dtoa_r+0x394>)
 802629a:	1e77      	subs	r7, r6, #1
 802629c:	18cb      	adds	r3, r1, r3
 802629e:	9218      	str	r2, [sp, #96]	@ 0x60
 80262a0:	e776      	b.n	8026190 <_dtoa_r+0x100>
 80262a2:	2320      	movs	r3, #32
 80262a4:	0020      	movs	r0, r4
 80262a6:	1a9b      	subs	r3, r3, r2
 80262a8:	4098      	lsls	r0, r3
 80262aa:	e7f2      	b.n	8026292 <_dtoa_r+0x202>
 80262ac:	9015      	str	r0, [sp, #84]	@ 0x54
 80262ae:	e7ba      	b.n	8026226 <_dtoa_r+0x196>
 80262b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80262b2:	e7c3      	b.n	802623c <_dtoa_r+0x1ac>
 80262b4:	9b06      	ldr	r3, [sp, #24]
 80262b6:	9a04      	ldr	r2, [sp, #16]
 80262b8:	1a9b      	subs	r3, r3, r2
 80262ba:	9306      	str	r3, [sp, #24]
 80262bc:	4253      	negs	r3, r2
 80262be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80262c0:	2300      	movs	r3, #0
 80262c2:	9314      	str	r3, [sp, #80]	@ 0x50
 80262c4:	e7c5      	b.n	8026252 <_dtoa_r+0x1c2>
 80262c6:	2301      	movs	r3, #1
 80262c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80262ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80262cc:	4694      	mov	ip, r2
 80262ce:	9b04      	ldr	r3, [sp, #16]
 80262d0:	4463      	add	r3, ip
 80262d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80262d4:	3301      	adds	r3, #1
 80262d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80262d8:	2b00      	cmp	r3, #0
 80262da:	dc08      	bgt.n	80262ee <_dtoa_r+0x25e>
 80262dc:	2301      	movs	r3, #1
 80262de:	e006      	b.n	80262ee <_dtoa_r+0x25e>
 80262e0:	2301      	movs	r3, #1
 80262e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80262e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80262e6:	2b00      	cmp	r3, #0
 80262e8:	dd28      	ble.n	802633c <_dtoa_r+0x2ac>
 80262ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80262ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80262ee:	9a03      	ldr	r2, [sp, #12]
 80262f0:	2100      	movs	r1, #0
 80262f2:	69d0      	ldr	r0, [r2, #28]
 80262f4:	2204      	movs	r2, #4
 80262f6:	0015      	movs	r5, r2
 80262f8:	3514      	adds	r5, #20
 80262fa:	429d      	cmp	r5, r3
 80262fc:	d923      	bls.n	8026346 <_dtoa_r+0x2b6>
 80262fe:	6041      	str	r1, [r0, #4]
 8026300:	9803      	ldr	r0, [sp, #12]
 8026302:	f001 f927 	bl	8027554 <_Balloc>
 8026306:	9008      	str	r0, [sp, #32]
 8026308:	2800      	cmp	r0, #0
 802630a:	d11f      	bne.n	802634c <_dtoa_r+0x2bc>
 802630c:	21b0      	movs	r1, #176	@ 0xb0
 802630e:	4b46      	ldr	r3, [pc, #280]	@ (8026428 <_dtoa_r+0x398>)
 8026310:	4831      	ldr	r0, [pc, #196]	@ (80263d8 <_dtoa_r+0x348>)
 8026312:	9a08      	ldr	r2, [sp, #32]
 8026314:	31ff      	adds	r1, #255	@ 0xff
 8026316:	e6d0      	b.n	80260ba <_dtoa_r+0x2a>
 8026318:	2300      	movs	r3, #0
 802631a:	e7e2      	b.n	80262e2 <_dtoa_r+0x252>
 802631c:	2300      	movs	r3, #0
 802631e:	e7d3      	b.n	80262c8 <_dtoa_r+0x238>
 8026320:	2300      	movs	r3, #0
 8026322:	9410      	str	r4, [sp, #64]	@ 0x40
 8026324:	9322      	str	r3, [sp, #136]	@ 0x88
 8026326:	3b01      	subs	r3, #1
 8026328:	2200      	movs	r2, #0
 802632a:	930e      	str	r3, [sp, #56]	@ 0x38
 802632c:	9309      	str	r3, [sp, #36]	@ 0x24
 802632e:	3313      	adds	r3, #19
 8026330:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026332:	e7dc      	b.n	80262ee <_dtoa_r+0x25e>
 8026334:	2301      	movs	r3, #1
 8026336:	9310      	str	r3, [sp, #64]	@ 0x40
 8026338:	3b02      	subs	r3, #2
 802633a:	e7f5      	b.n	8026328 <_dtoa_r+0x298>
 802633c:	2301      	movs	r3, #1
 802633e:	001a      	movs	r2, r3
 8026340:	930e      	str	r3, [sp, #56]	@ 0x38
 8026342:	9309      	str	r3, [sp, #36]	@ 0x24
 8026344:	e7f4      	b.n	8026330 <_dtoa_r+0x2a0>
 8026346:	3101      	adds	r1, #1
 8026348:	0052      	lsls	r2, r2, #1
 802634a:	e7d4      	b.n	80262f6 <_dtoa_r+0x266>
 802634c:	9b03      	ldr	r3, [sp, #12]
 802634e:	9a08      	ldr	r2, [sp, #32]
 8026350:	69db      	ldr	r3, [r3, #28]
 8026352:	601a      	str	r2, [r3, #0]
 8026354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026356:	2b0e      	cmp	r3, #14
 8026358:	d900      	bls.n	802635c <_dtoa_r+0x2cc>
 802635a:	e0d6      	b.n	802650a <_dtoa_r+0x47a>
 802635c:	2c00      	cmp	r4, #0
 802635e:	d100      	bne.n	8026362 <_dtoa_r+0x2d2>
 8026360:	e0d3      	b.n	802650a <_dtoa_r+0x47a>
 8026362:	9b04      	ldr	r3, [sp, #16]
 8026364:	2b00      	cmp	r3, #0
 8026366:	dd63      	ble.n	8026430 <_dtoa_r+0x3a0>
 8026368:	210f      	movs	r1, #15
 802636a:	9a04      	ldr	r2, [sp, #16]
 802636c:	4b2a      	ldr	r3, [pc, #168]	@ (8026418 <_dtoa_r+0x388>)
 802636e:	400a      	ands	r2, r1
 8026370:	00d2      	lsls	r2, r2, #3
 8026372:	189b      	adds	r3, r3, r2
 8026374:	681e      	ldr	r6, [r3, #0]
 8026376:	685f      	ldr	r7, [r3, #4]
 8026378:	9b04      	ldr	r3, [sp, #16]
 802637a:	2402      	movs	r4, #2
 802637c:	111d      	asrs	r5, r3, #4
 802637e:	05db      	lsls	r3, r3, #23
 8026380:	d50a      	bpl.n	8026398 <_dtoa_r+0x308>
 8026382:	4b2a      	ldr	r3, [pc, #168]	@ (802642c <_dtoa_r+0x39c>)
 8026384:	400d      	ands	r5, r1
 8026386:	6a1a      	ldr	r2, [r3, #32]
 8026388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802638a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802638c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802638e:	f7db fea7 	bl	80020e0 <__aeabi_ddiv>
 8026392:	900a      	str	r0, [sp, #40]	@ 0x28
 8026394:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026396:	3401      	adds	r4, #1
 8026398:	4b24      	ldr	r3, [pc, #144]	@ (802642c <_dtoa_r+0x39c>)
 802639a:	930c      	str	r3, [sp, #48]	@ 0x30
 802639c:	2d00      	cmp	r5, #0
 802639e:	d108      	bne.n	80263b2 <_dtoa_r+0x322>
 80263a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80263a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80263a4:	0032      	movs	r2, r6
 80263a6:	003b      	movs	r3, r7
 80263a8:	f7db fe9a 	bl	80020e0 <__aeabi_ddiv>
 80263ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80263ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 80263b0:	e059      	b.n	8026466 <_dtoa_r+0x3d6>
 80263b2:	2301      	movs	r3, #1
 80263b4:	421d      	tst	r5, r3
 80263b6:	d009      	beq.n	80263cc <_dtoa_r+0x33c>
 80263b8:	18e4      	adds	r4, r4, r3
 80263ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80263bc:	0030      	movs	r0, r6
 80263be:	681a      	ldr	r2, [r3, #0]
 80263c0:	685b      	ldr	r3, [r3, #4]
 80263c2:	0039      	movs	r1, r7
 80263c4:	f7dc fac6 	bl	8002954 <__aeabi_dmul>
 80263c8:	0006      	movs	r6, r0
 80263ca:	000f      	movs	r7, r1
 80263cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80263ce:	106d      	asrs	r5, r5, #1
 80263d0:	3308      	adds	r3, #8
 80263d2:	e7e2      	b.n	802639a <_dtoa_r+0x30a>
 80263d4:	0802e89f 	.word	0x0802e89f
 80263d8:	0802e8b6 	.word	0x0802e8b6
 80263dc:	7ff00000 	.word	0x7ff00000
 80263e0:	0000270f 	.word	0x0000270f
 80263e4:	0802e89b 	.word	0x0802e89b
 80263e8:	0802e89e 	.word	0x0802e89e
 80263ec:	0802e867 	.word	0x0802e867
 80263f0:	0802e866 	.word	0x0802e866
 80263f4:	3ff00000 	.word	0x3ff00000
 80263f8:	fffffc01 	.word	0xfffffc01
 80263fc:	3ff80000 	.word	0x3ff80000
 8026400:	636f4361 	.word	0x636f4361
 8026404:	3fd287a7 	.word	0x3fd287a7
 8026408:	8b60c8b3 	.word	0x8b60c8b3
 802640c:	3fc68a28 	.word	0x3fc68a28
 8026410:	509f79fb 	.word	0x509f79fb
 8026414:	3fd34413 	.word	0x3fd34413
 8026418:	0802ebb0 	.word	0x0802ebb0
 802641c:	00000432 	.word	0x00000432
 8026420:	00000412 	.word	0x00000412
 8026424:	fe100000 	.word	0xfe100000
 8026428:	0802e90e 	.word	0x0802e90e
 802642c:	0802eb88 	.word	0x0802eb88
 8026430:	9b04      	ldr	r3, [sp, #16]
 8026432:	2402      	movs	r4, #2
 8026434:	2b00      	cmp	r3, #0
 8026436:	d016      	beq.n	8026466 <_dtoa_r+0x3d6>
 8026438:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802643a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802643c:	220f      	movs	r2, #15
 802643e:	425d      	negs	r5, r3
 8026440:	402a      	ands	r2, r5
 8026442:	4bd5      	ldr	r3, [pc, #852]	@ (8026798 <_dtoa_r+0x708>)
 8026444:	00d2      	lsls	r2, r2, #3
 8026446:	189b      	adds	r3, r3, r2
 8026448:	681a      	ldr	r2, [r3, #0]
 802644a:	685b      	ldr	r3, [r3, #4]
 802644c:	f7dc fa82 	bl	8002954 <__aeabi_dmul>
 8026450:	2701      	movs	r7, #1
 8026452:	2300      	movs	r3, #0
 8026454:	900a      	str	r0, [sp, #40]	@ 0x28
 8026456:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026458:	4ed0      	ldr	r6, [pc, #832]	@ (802679c <_dtoa_r+0x70c>)
 802645a:	112d      	asrs	r5, r5, #4
 802645c:	2d00      	cmp	r5, #0
 802645e:	d000      	beq.n	8026462 <_dtoa_r+0x3d2>
 8026460:	e095      	b.n	802658e <_dtoa_r+0x4fe>
 8026462:	2b00      	cmp	r3, #0
 8026464:	d1a2      	bne.n	80263ac <_dtoa_r+0x31c>
 8026466:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026468:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802646a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802646c:	2b00      	cmp	r3, #0
 802646e:	d100      	bne.n	8026472 <_dtoa_r+0x3e2>
 8026470:	e098      	b.n	80265a4 <_dtoa_r+0x514>
 8026472:	2200      	movs	r2, #0
 8026474:	0030      	movs	r0, r6
 8026476:	0039      	movs	r1, r7
 8026478:	4bc9      	ldr	r3, [pc, #804]	@ (80267a0 <_dtoa_r+0x710>)
 802647a:	f7da f81f 	bl	80004bc <__aeabi_dcmplt>
 802647e:	2800      	cmp	r0, #0
 8026480:	d100      	bne.n	8026484 <_dtoa_r+0x3f4>
 8026482:	e08f      	b.n	80265a4 <_dtoa_r+0x514>
 8026484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026486:	2b00      	cmp	r3, #0
 8026488:	d100      	bne.n	802648c <_dtoa_r+0x3fc>
 802648a:	e08b      	b.n	80265a4 <_dtoa_r+0x514>
 802648c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802648e:	2b00      	cmp	r3, #0
 8026490:	dd37      	ble.n	8026502 <_dtoa_r+0x472>
 8026492:	9b04      	ldr	r3, [sp, #16]
 8026494:	2200      	movs	r2, #0
 8026496:	3b01      	subs	r3, #1
 8026498:	930c      	str	r3, [sp, #48]	@ 0x30
 802649a:	0030      	movs	r0, r6
 802649c:	4bc1      	ldr	r3, [pc, #772]	@ (80267a4 <_dtoa_r+0x714>)
 802649e:	0039      	movs	r1, r7
 80264a0:	f7dc fa58 	bl	8002954 <__aeabi_dmul>
 80264a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80264a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80264a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80264aa:	3401      	adds	r4, #1
 80264ac:	0020      	movs	r0, r4
 80264ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80264b0:	f7dd f99e 	bl	80037f0 <__aeabi_i2d>
 80264b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80264b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80264b8:	f7dc fa4c 	bl	8002954 <__aeabi_dmul>
 80264bc:	4bba      	ldr	r3, [pc, #744]	@ (80267a8 <_dtoa_r+0x718>)
 80264be:	2200      	movs	r2, #0
 80264c0:	f7db fa48 	bl	8001954 <__aeabi_dadd>
 80264c4:	4bb9      	ldr	r3, [pc, #740]	@ (80267ac <_dtoa_r+0x71c>)
 80264c6:	0006      	movs	r6, r0
 80264c8:	18cf      	adds	r7, r1, r3
 80264ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80264cc:	2b00      	cmp	r3, #0
 80264ce:	d16d      	bne.n	80265ac <_dtoa_r+0x51c>
 80264d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80264d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80264d4:	2200      	movs	r2, #0
 80264d6:	4bb6      	ldr	r3, [pc, #728]	@ (80267b0 <_dtoa_r+0x720>)
 80264d8:	f7dc fd22 	bl	8002f20 <__aeabi_dsub>
 80264dc:	0032      	movs	r2, r6
 80264de:	003b      	movs	r3, r7
 80264e0:	0004      	movs	r4, r0
 80264e2:	000d      	movs	r5, r1
 80264e4:	f7d9 fffe 	bl	80004e4 <__aeabi_dcmpgt>
 80264e8:	2800      	cmp	r0, #0
 80264ea:	d000      	beq.n	80264ee <_dtoa_r+0x45e>
 80264ec:	e2b6      	b.n	8026a5c <_dtoa_r+0x9cc>
 80264ee:	2180      	movs	r1, #128	@ 0x80
 80264f0:	0609      	lsls	r1, r1, #24
 80264f2:	187b      	adds	r3, r7, r1
 80264f4:	0032      	movs	r2, r6
 80264f6:	0020      	movs	r0, r4
 80264f8:	0029      	movs	r1, r5
 80264fa:	f7d9 ffdf 	bl	80004bc <__aeabi_dcmplt>
 80264fe:	2800      	cmp	r0, #0
 8026500:	d128      	bne.n	8026554 <_dtoa_r+0x4c4>
 8026502:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026504:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026506:	930a      	str	r3, [sp, #40]	@ 0x28
 8026508:	940b      	str	r4, [sp, #44]	@ 0x2c
 802650a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802650c:	2b00      	cmp	r3, #0
 802650e:	da00      	bge.n	8026512 <_dtoa_r+0x482>
 8026510:	e174      	b.n	80267fc <_dtoa_r+0x76c>
 8026512:	9a04      	ldr	r2, [sp, #16]
 8026514:	2a0e      	cmp	r2, #14
 8026516:	dd00      	ble.n	802651a <_dtoa_r+0x48a>
 8026518:	e170      	b.n	80267fc <_dtoa_r+0x76c>
 802651a:	4b9f      	ldr	r3, [pc, #636]	@ (8026798 <_dtoa_r+0x708>)
 802651c:	00d2      	lsls	r2, r2, #3
 802651e:	189b      	adds	r3, r3, r2
 8026520:	685c      	ldr	r4, [r3, #4]
 8026522:	681b      	ldr	r3, [r3, #0]
 8026524:	9306      	str	r3, [sp, #24]
 8026526:	9407      	str	r4, [sp, #28]
 8026528:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802652a:	2b00      	cmp	r3, #0
 802652c:	db00      	blt.n	8026530 <_dtoa_r+0x4a0>
 802652e:	e0e7      	b.n	8026700 <_dtoa_r+0x670>
 8026530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026532:	2b00      	cmp	r3, #0
 8026534:	dd00      	ble.n	8026538 <_dtoa_r+0x4a8>
 8026536:	e0e3      	b.n	8026700 <_dtoa_r+0x670>
 8026538:	d10c      	bne.n	8026554 <_dtoa_r+0x4c4>
 802653a:	9806      	ldr	r0, [sp, #24]
 802653c:	9907      	ldr	r1, [sp, #28]
 802653e:	2200      	movs	r2, #0
 8026540:	4b9b      	ldr	r3, [pc, #620]	@ (80267b0 <_dtoa_r+0x720>)
 8026542:	f7dc fa07 	bl	8002954 <__aeabi_dmul>
 8026546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026548:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802654a:	f7d9 ffd5 	bl	80004f8 <__aeabi_dcmpge>
 802654e:	2800      	cmp	r0, #0
 8026550:	d100      	bne.n	8026554 <_dtoa_r+0x4c4>
 8026552:	e286      	b.n	8026a62 <_dtoa_r+0x9d2>
 8026554:	2600      	movs	r6, #0
 8026556:	0037      	movs	r7, r6
 8026558:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802655a:	9c08      	ldr	r4, [sp, #32]
 802655c:	43db      	mvns	r3, r3
 802655e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026560:	9704      	str	r7, [sp, #16]
 8026562:	2700      	movs	r7, #0
 8026564:	0031      	movs	r1, r6
 8026566:	9803      	ldr	r0, [sp, #12]
 8026568:	f001 f838 	bl	80275dc <_Bfree>
 802656c:	9b04      	ldr	r3, [sp, #16]
 802656e:	2b00      	cmp	r3, #0
 8026570:	d100      	bne.n	8026574 <_dtoa_r+0x4e4>
 8026572:	e0bb      	b.n	80266ec <_dtoa_r+0x65c>
 8026574:	2f00      	cmp	r7, #0
 8026576:	d005      	beq.n	8026584 <_dtoa_r+0x4f4>
 8026578:	429f      	cmp	r7, r3
 802657a:	d003      	beq.n	8026584 <_dtoa_r+0x4f4>
 802657c:	0039      	movs	r1, r7
 802657e:	9803      	ldr	r0, [sp, #12]
 8026580:	f001 f82c 	bl	80275dc <_Bfree>
 8026584:	9904      	ldr	r1, [sp, #16]
 8026586:	9803      	ldr	r0, [sp, #12]
 8026588:	f001 f828 	bl	80275dc <_Bfree>
 802658c:	e0ae      	b.n	80266ec <_dtoa_r+0x65c>
 802658e:	423d      	tst	r5, r7
 8026590:	d005      	beq.n	802659e <_dtoa_r+0x50e>
 8026592:	6832      	ldr	r2, [r6, #0]
 8026594:	6873      	ldr	r3, [r6, #4]
 8026596:	f7dc f9dd 	bl	8002954 <__aeabi_dmul>
 802659a:	003b      	movs	r3, r7
 802659c:	3401      	adds	r4, #1
 802659e:	106d      	asrs	r5, r5, #1
 80265a0:	3608      	adds	r6, #8
 80265a2:	e75b      	b.n	802645c <_dtoa_r+0x3cc>
 80265a4:	9b04      	ldr	r3, [sp, #16]
 80265a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80265a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80265aa:	e77f      	b.n	80264ac <_dtoa_r+0x41c>
 80265ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80265ae:	4b7a      	ldr	r3, [pc, #488]	@ (8026798 <_dtoa_r+0x708>)
 80265b0:	3a01      	subs	r2, #1
 80265b2:	00d2      	lsls	r2, r2, #3
 80265b4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80265b6:	189b      	adds	r3, r3, r2
 80265b8:	681a      	ldr	r2, [r3, #0]
 80265ba:	685b      	ldr	r3, [r3, #4]
 80265bc:	2900      	cmp	r1, #0
 80265be:	d04c      	beq.n	802665a <_dtoa_r+0x5ca>
 80265c0:	2000      	movs	r0, #0
 80265c2:	497c      	ldr	r1, [pc, #496]	@ (80267b4 <_dtoa_r+0x724>)
 80265c4:	f7db fd8c 	bl	80020e0 <__aeabi_ddiv>
 80265c8:	0032      	movs	r2, r6
 80265ca:	003b      	movs	r3, r7
 80265cc:	f7dc fca8 	bl	8002f20 <__aeabi_dsub>
 80265d0:	9a08      	ldr	r2, [sp, #32]
 80265d2:	0006      	movs	r6, r0
 80265d4:	4694      	mov	ip, r2
 80265d6:	000f      	movs	r7, r1
 80265d8:	9b08      	ldr	r3, [sp, #32]
 80265da:	9316      	str	r3, [sp, #88]	@ 0x58
 80265dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80265de:	4463      	add	r3, ip
 80265e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80265e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80265e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80265e6:	f7dd f8c7 	bl	8003778 <__aeabi_d2iz>
 80265ea:	0005      	movs	r5, r0
 80265ec:	f7dd f900 	bl	80037f0 <__aeabi_i2d>
 80265f0:	0002      	movs	r2, r0
 80265f2:	000b      	movs	r3, r1
 80265f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80265f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80265f8:	f7dc fc92 	bl	8002f20 <__aeabi_dsub>
 80265fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80265fe:	3530      	adds	r5, #48	@ 0x30
 8026600:	1c5c      	adds	r4, r3, #1
 8026602:	701d      	strb	r5, [r3, #0]
 8026604:	0032      	movs	r2, r6
 8026606:	003b      	movs	r3, r7
 8026608:	900a      	str	r0, [sp, #40]	@ 0x28
 802660a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802660c:	f7d9 ff56 	bl	80004bc <__aeabi_dcmplt>
 8026610:	2800      	cmp	r0, #0
 8026612:	d16b      	bne.n	80266ec <_dtoa_r+0x65c>
 8026614:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026618:	2000      	movs	r0, #0
 802661a:	4961      	ldr	r1, [pc, #388]	@ (80267a0 <_dtoa_r+0x710>)
 802661c:	f7dc fc80 	bl	8002f20 <__aeabi_dsub>
 8026620:	0032      	movs	r2, r6
 8026622:	003b      	movs	r3, r7
 8026624:	f7d9 ff4a 	bl	80004bc <__aeabi_dcmplt>
 8026628:	2800      	cmp	r0, #0
 802662a:	d000      	beq.n	802662e <_dtoa_r+0x59e>
 802662c:	e0c6      	b.n	80267bc <_dtoa_r+0x72c>
 802662e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026630:	42a3      	cmp	r3, r4
 8026632:	d100      	bne.n	8026636 <_dtoa_r+0x5a6>
 8026634:	e765      	b.n	8026502 <_dtoa_r+0x472>
 8026636:	2200      	movs	r2, #0
 8026638:	0030      	movs	r0, r6
 802663a:	0039      	movs	r1, r7
 802663c:	4b59      	ldr	r3, [pc, #356]	@ (80267a4 <_dtoa_r+0x714>)
 802663e:	f7dc f989 	bl	8002954 <__aeabi_dmul>
 8026642:	2200      	movs	r2, #0
 8026644:	0006      	movs	r6, r0
 8026646:	000f      	movs	r7, r1
 8026648:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802664a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802664c:	4b55      	ldr	r3, [pc, #340]	@ (80267a4 <_dtoa_r+0x714>)
 802664e:	f7dc f981 	bl	8002954 <__aeabi_dmul>
 8026652:	9416      	str	r4, [sp, #88]	@ 0x58
 8026654:	900a      	str	r0, [sp, #40]	@ 0x28
 8026656:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026658:	e7c3      	b.n	80265e2 <_dtoa_r+0x552>
 802665a:	0030      	movs	r0, r6
 802665c:	0039      	movs	r1, r7
 802665e:	f7dc f979 	bl	8002954 <__aeabi_dmul>
 8026662:	9d08      	ldr	r5, [sp, #32]
 8026664:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026666:	002b      	movs	r3, r5
 8026668:	4694      	mov	ip, r2
 802666a:	9016      	str	r0, [sp, #88]	@ 0x58
 802666c:	9117      	str	r1, [sp, #92]	@ 0x5c
 802666e:	4463      	add	r3, ip
 8026670:	9319      	str	r3, [sp, #100]	@ 0x64
 8026672:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026676:	f7dd f87f 	bl	8003778 <__aeabi_d2iz>
 802667a:	0004      	movs	r4, r0
 802667c:	f7dd f8b8 	bl	80037f0 <__aeabi_i2d>
 8026680:	000b      	movs	r3, r1
 8026682:	0002      	movs	r2, r0
 8026684:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026686:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026688:	f7dc fc4a 	bl	8002f20 <__aeabi_dsub>
 802668c:	3430      	adds	r4, #48	@ 0x30
 802668e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026690:	702c      	strb	r4, [r5, #0]
 8026692:	3501      	adds	r5, #1
 8026694:	0006      	movs	r6, r0
 8026696:	000f      	movs	r7, r1
 8026698:	42ab      	cmp	r3, r5
 802669a:	d12a      	bne.n	80266f2 <_dtoa_r+0x662>
 802669c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802669e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80266a0:	9b08      	ldr	r3, [sp, #32]
 80266a2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80266a4:	469c      	mov	ip, r3
 80266a6:	2200      	movs	r2, #0
 80266a8:	4b42      	ldr	r3, [pc, #264]	@ (80267b4 <_dtoa_r+0x724>)
 80266aa:	4464      	add	r4, ip
 80266ac:	f7db f952 	bl	8001954 <__aeabi_dadd>
 80266b0:	0002      	movs	r2, r0
 80266b2:	000b      	movs	r3, r1
 80266b4:	0030      	movs	r0, r6
 80266b6:	0039      	movs	r1, r7
 80266b8:	f7d9 ff14 	bl	80004e4 <__aeabi_dcmpgt>
 80266bc:	2800      	cmp	r0, #0
 80266be:	d000      	beq.n	80266c2 <_dtoa_r+0x632>
 80266c0:	e07c      	b.n	80267bc <_dtoa_r+0x72c>
 80266c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80266c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80266c6:	2000      	movs	r0, #0
 80266c8:	493a      	ldr	r1, [pc, #232]	@ (80267b4 <_dtoa_r+0x724>)
 80266ca:	f7dc fc29 	bl	8002f20 <__aeabi_dsub>
 80266ce:	0002      	movs	r2, r0
 80266d0:	000b      	movs	r3, r1
 80266d2:	0030      	movs	r0, r6
 80266d4:	0039      	movs	r1, r7
 80266d6:	f7d9 fef1 	bl	80004bc <__aeabi_dcmplt>
 80266da:	2800      	cmp	r0, #0
 80266dc:	d100      	bne.n	80266e0 <_dtoa_r+0x650>
 80266de:	e710      	b.n	8026502 <_dtoa_r+0x472>
 80266e0:	0023      	movs	r3, r4
 80266e2:	3c01      	subs	r4, #1
 80266e4:	7822      	ldrb	r2, [r4, #0]
 80266e6:	2a30      	cmp	r2, #48	@ 0x30
 80266e8:	d0fa      	beq.n	80266e0 <_dtoa_r+0x650>
 80266ea:	001c      	movs	r4, r3
 80266ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80266ee:	9304      	str	r3, [sp, #16]
 80266f0:	e042      	b.n	8026778 <_dtoa_r+0x6e8>
 80266f2:	2200      	movs	r2, #0
 80266f4:	4b2b      	ldr	r3, [pc, #172]	@ (80267a4 <_dtoa_r+0x714>)
 80266f6:	f7dc f92d 	bl	8002954 <__aeabi_dmul>
 80266fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80266fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80266fe:	e7b8      	b.n	8026672 <_dtoa_r+0x5e2>
 8026700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026702:	9d08      	ldr	r5, [sp, #32]
 8026704:	3b01      	subs	r3, #1
 8026706:	195b      	adds	r3, r3, r5
 8026708:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802670a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802670c:	930a      	str	r3, [sp, #40]	@ 0x28
 802670e:	9a06      	ldr	r2, [sp, #24]
 8026710:	9b07      	ldr	r3, [sp, #28]
 8026712:	0030      	movs	r0, r6
 8026714:	0039      	movs	r1, r7
 8026716:	f7db fce3 	bl	80020e0 <__aeabi_ddiv>
 802671a:	f7dd f82d 	bl	8003778 <__aeabi_d2iz>
 802671e:	9009      	str	r0, [sp, #36]	@ 0x24
 8026720:	f7dd f866 	bl	80037f0 <__aeabi_i2d>
 8026724:	9a06      	ldr	r2, [sp, #24]
 8026726:	9b07      	ldr	r3, [sp, #28]
 8026728:	f7dc f914 	bl	8002954 <__aeabi_dmul>
 802672c:	0002      	movs	r2, r0
 802672e:	000b      	movs	r3, r1
 8026730:	0030      	movs	r0, r6
 8026732:	0039      	movs	r1, r7
 8026734:	f7dc fbf4 	bl	8002f20 <__aeabi_dsub>
 8026738:	002b      	movs	r3, r5
 802673a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802673c:	3501      	adds	r5, #1
 802673e:	3230      	adds	r2, #48	@ 0x30
 8026740:	701a      	strb	r2, [r3, #0]
 8026742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026744:	002c      	movs	r4, r5
 8026746:	429a      	cmp	r2, r3
 8026748:	d14b      	bne.n	80267e2 <_dtoa_r+0x752>
 802674a:	0002      	movs	r2, r0
 802674c:	000b      	movs	r3, r1
 802674e:	f7db f901 	bl	8001954 <__aeabi_dadd>
 8026752:	9a06      	ldr	r2, [sp, #24]
 8026754:	9b07      	ldr	r3, [sp, #28]
 8026756:	0006      	movs	r6, r0
 8026758:	000f      	movs	r7, r1
 802675a:	f7d9 fec3 	bl	80004e4 <__aeabi_dcmpgt>
 802675e:	2800      	cmp	r0, #0
 8026760:	d12a      	bne.n	80267b8 <_dtoa_r+0x728>
 8026762:	9a06      	ldr	r2, [sp, #24]
 8026764:	9b07      	ldr	r3, [sp, #28]
 8026766:	0030      	movs	r0, r6
 8026768:	0039      	movs	r1, r7
 802676a:	f7d9 fea1 	bl	80004b0 <__aeabi_dcmpeq>
 802676e:	2800      	cmp	r0, #0
 8026770:	d002      	beq.n	8026778 <_dtoa_r+0x6e8>
 8026772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026774:	07dd      	lsls	r5, r3, #31
 8026776:	d41f      	bmi.n	80267b8 <_dtoa_r+0x728>
 8026778:	9905      	ldr	r1, [sp, #20]
 802677a:	9803      	ldr	r0, [sp, #12]
 802677c:	f000 ff2e 	bl	80275dc <_Bfree>
 8026780:	2300      	movs	r3, #0
 8026782:	7023      	strb	r3, [r4, #0]
 8026784:	9b04      	ldr	r3, [sp, #16]
 8026786:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026788:	3301      	adds	r3, #1
 802678a:	6013      	str	r3, [r2, #0]
 802678c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802678e:	2b00      	cmp	r3, #0
 8026790:	d100      	bne.n	8026794 <_dtoa_r+0x704>
 8026792:	e4c7      	b.n	8026124 <_dtoa_r+0x94>
 8026794:	601c      	str	r4, [r3, #0]
 8026796:	e4c5      	b.n	8026124 <_dtoa_r+0x94>
 8026798:	0802ebb0 	.word	0x0802ebb0
 802679c:	0802eb88 	.word	0x0802eb88
 80267a0:	3ff00000 	.word	0x3ff00000
 80267a4:	40240000 	.word	0x40240000
 80267a8:	401c0000 	.word	0x401c0000
 80267ac:	fcc00000 	.word	0xfcc00000
 80267b0:	40140000 	.word	0x40140000
 80267b4:	3fe00000 	.word	0x3fe00000
 80267b8:	9b04      	ldr	r3, [sp, #16]
 80267ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80267bc:	0023      	movs	r3, r4
 80267be:	001c      	movs	r4, r3
 80267c0:	3b01      	subs	r3, #1
 80267c2:	781a      	ldrb	r2, [r3, #0]
 80267c4:	2a39      	cmp	r2, #57	@ 0x39
 80267c6:	d108      	bne.n	80267da <_dtoa_r+0x74a>
 80267c8:	9a08      	ldr	r2, [sp, #32]
 80267ca:	429a      	cmp	r2, r3
 80267cc:	d1f7      	bne.n	80267be <_dtoa_r+0x72e>
 80267ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80267d0:	9908      	ldr	r1, [sp, #32]
 80267d2:	3201      	adds	r2, #1
 80267d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80267d6:	2230      	movs	r2, #48	@ 0x30
 80267d8:	700a      	strb	r2, [r1, #0]
 80267da:	781a      	ldrb	r2, [r3, #0]
 80267dc:	3201      	adds	r2, #1
 80267de:	701a      	strb	r2, [r3, #0]
 80267e0:	e784      	b.n	80266ec <_dtoa_r+0x65c>
 80267e2:	2200      	movs	r2, #0
 80267e4:	4bc6      	ldr	r3, [pc, #792]	@ (8026b00 <_dtoa_r+0xa70>)
 80267e6:	f7dc f8b5 	bl	8002954 <__aeabi_dmul>
 80267ea:	2200      	movs	r2, #0
 80267ec:	2300      	movs	r3, #0
 80267ee:	0006      	movs	r6, r0
 80267f0:	000f      	movs	r7, r1
 80267f2:	f7d9 fe5d 	bl	80004b0 <__aeabi_dcmpeq>
 80267f6:	2800      	cmp	r0, #0
 80267f8:	d089      	beq.n	802670e <_dtoa_r+0x67e>
 80267fa:	e7bd      	b.n	8026778 <_dtoa_r+0x6e8>
 80267fc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80267fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026800:	9c06      	ldr	r4, [sp, #24]
 8026802:	2f00      	cmp	r7, #0
 8026804:	d014      	beq.n	8026830 <_dtoa_r+0x7a0>
 8026806:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026808:	2a01      	cmp	r2, #1
 802680a:	dd00      	ble.n	802680e <_dtoa_r+0x77e>
 802680c:	e0e4      	b.n	80269d8 <_dtoa_r+0x948>
 802680e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026810:	2a00      	cmp	r2, #0
 8026812:	d100      	bne.n	8026816 <_dtoa_r+0x786>
 8026814:	e0da      	b.n	80269cc <_dtoa_r+0x93c>
 8026816:	4abb      	ldr	r2, [pc, #748]	@ (8026b04 <_dtoa_r+0xa74>)
 8026818:	189b      	adds	r3, r3, r2
 802681a:	9a06      	ldr	r2, [sp, #24]
 802681c:	2101      	movs	r1, #1
 802681e:	18d2      	adds	r2, r2, r3
 8026820:	9206      	str	r2, [sp, #24]
 8026822:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026824:	9803      	ldr	r0, [sp, #12]
 8026826:	18d3      	adds	r3, r2, r3
 8026828:	930d      	str	r3, [sp, #52]	@ 0x34
 802682a:	f000 ffdb 	bl	80277e4 <__i2b>
 802682e:	0007      	movs	r7, r0
 8026830:	2c00      	cmp	r4, #0
 8026832:	d00e      	beq.n	8026852 <_dtoa_r+0x7c2>
 8026834:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026836:	2b00      	cmp	r3, #0
 8026838:	dd0b      	ble.n	8026852 <_dtoa_r+0x7c2>
 802683a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802683c:	0023      	movs	r3, r4
 802683e:	4294      	cmp	r4, r2
 8026840:	dd00      	ble.n	8026844 <_dtoa_r+0x7b4>
 8026842:	0013      	movs	r3, r2
 8026844:	9a06      	ldr	r2, [sp, #24]
 8026846:	1ae4      	subs	r4, r4, r3
 8026848:	1ad2      	subs	r2, r2, r3
 802684a:	9206      	str	r2, [sp, #24]
 802684c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802684e:	1ad3      	subs	r3, r2, r3
 8026850:	930d      	str	r3, [sp, #52]	@ 0x34
 8026852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026854:	2b00      	cmp	r3, #0
 8026856:	d021      	beq.n	802689c <_dtoa_r+0x80c>
 8026858:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802685a:	2b00      	cmp	r3, #0
 802685c:	d100      	bne.n	8026860 <_dtoa_r+0x7d0>
 802685e:	e0d3      	b.n	8026a08 <_dtoa_r+0x978>
 8026860:	9e05      	ldr	r6, [sp, #20]
 8026862:	2d00      	cmp	r5, #0
 8026864:	d014      	beq.n	8026890 <_dtoa_r+0x800>
 8026866:	0039      	movs	r1, r7
 8026868:	002a      	movs	r2, r5
 802686a:	9803      	ldr	r0, [sp, #12]
 802686c:	f001 f87c 	bl	8027968 <__pow5mult>
 8026870:	9a05      	ldr	r2, [sp, #20]
 8026872:	0001      	movs	r1, r0
 8026874:	0007      	movs	r7, r0
 8026876:	9803      	ldr	r0, [sp, #12]
 8026878:	f000 ffcc 	bl	8027814 <__multiply>
 802687c:	0006      	movs	r6, r0
 802687e:	9905      	ldr	r1, [sp, #20]
 8026880:	9803      	ldr	r0, [sp, #12]
 8026882:	f000 feab 	bl	80275dc <_Bfree>
 8026886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026888:	9605      	str	r6, [sp, #20]
 802688a:	1b5b      	subs	r3, r3, r5
 802688c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802688e:	d005      	beq.n	802689c <_dtoa_r+0x80c>
 8026890:	0031      	movs	r1, r6
 8026892:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026894:	9803      	ldr	r0, [sp, #12]
 8026896:	f001 f867 	bl	8027968 <__pow5mult>
 802689a:	9005      	str	r0, [sp, #20]
 802689c:	2101      	movs	r1, #1
 802689e:	9803      	ldr	r0, [sp, #12]
 80268a0:	f000 ffa0 	bl	80277e4 <__i2b>
 80268a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80268a6:	0006      	movs	r6, r0
 80268a8:	2b00      	cmp	r3, #0
 80268aa:	d100      	bne.n	80268ae <_dtoa_r+0x81e>
 80268ac:	e1bc      	b.n	8026c28 <_dtoa_r+0xb98>
 80268ae:	001a      	movs	r2, r3
 80268b0:	0001      	movs	r1, r0
 80268b2:	9803      	ldr	r0, [sp, #12]
 80268b4:	f001 f858 	bl	8027968 <__pow5mult>
 80268b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80268ba:	0006      	movs	r6, r0
 80268bc:	2500      	movs	r5, #0
 80268be:	2b01      	cmp	r3, #1
 80268c0:	dc16      	bgt.n	80268f0 <_dtoa_r+0x860>
 80268c2:	2500      	movs	r5, #0
 80268c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80268c6:	42ab      	cmp	r3, r5
 80268c8:	d10e      	bne.n	80268e8 <_dtoa_r+0x858>
 80268ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80268cc:	031b      	lsls	r3, r3, #12
 80268ce:	42ab      	cmp	r3, r5
 80268d0:	d10a      	bne.n	80268e8 <_dtoa_r+0x858>
 80268d2:	4b8d      	ldr	r3, [pc, #564]	@ (8026b08 <_dtoa_r+0xa78>)
 80268d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80268d6:	4213      	tst	r3, r2
 80268d8:	d006      	beq.n	80268e8 <_dtoa_r+0x858>
 80268da:	9b06      	ldr	r3, [sp, #24]
 80268dc:	3501      	adds	r5, #1
 80268de:	3301      	adds	r3, #1
 80268e0:	9306      	str	r3, [sp, #24]
 80268e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80268e4:	3301      	adds	r3, #1
 80268e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80268e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80268ea:	2001      	movs	r0, #1
 80268ec:	2b00      	cmp	r3, #0
 80268ee:	d008      	beq.n	8026902 <_dtoa_r+0x872>
 80268f0:	6933      	ldr	r3, [r6, #16]
 80268f2:	3303      	adds	r3, #3
 80268f4:	009b      	lsls	r3, r3, #2
 80268f6:	18f3      	adds	r3, r6, r3
 80268f8:	6858      	ldr	r0, [r3, #4]
 80268fa:	f000 ff23 	bl	8027744 <__hi0bits>
 80268fe:	2320      	movs	r3, #32
 8026900:	1a18      	subs	r0, r3, r0
 8026902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026904:	1818      	adds	r0, r3, r0
 8026906:	0002      	movs	r2, r0
 8026908:	231f      	movs	r3, #31
 802690a:	401a      	ands	r2, r3
 802690c:	4218      	tst	r0, r3
 802690e:	d100      	bne.n	8026912 <_dtoa_r+0x882>
 8026910:	e081      	b.n	8026a16 <_dtoa_r+0x986>
 8026912:	3301      	adds	r3, #1
 8026914:	1a9b      	subs	r3, r3, r2
 8026916:	2b04      	cmp	r3, #4
 8026918:	dd79      	ble.n	8026a0e <_dtoa_r+0x97e>
 802691a:	231c      	movs	r3, #28
 802691c:	1a9b      	subs	r3, r3, r2
 802691e:	9a06      	ldr	r2, [sp, #24]
 8026920:	18e4      	adds	r4, r4, r3
 8026922:	18d2      	adds	r2, r2, r3
 8026924:	9206      	str	r2, [sp, #24]
 8026926:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026928:	18d3      	adds	r3, r2, r3
 802692a:	930d      	str	r3, [sp, #52]	@ 0x34
 802692c:	9b06      	ldr	r3, [sp, #24]
 802692e:	2b00      	cmp	r3, #0
 8026930:	dd05      	ble.n	802693e <_dtoa_r+0x8ae>
 8026932:	001a      	movs	r2, r3
 8026934:	9905      	ldr	r1, [sp, #20]
 8026936:	9803      	ldr	r0, [sp, #12]
 8026938:	f001 f872 	bl	8027a20 <__lshift>
 802693c:	9005      	str	r0, [sp, #20]
 802693e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026940:	2b00      	cmp	r3, #0
 8026942:	dd05      	ble.n	8026950 <_dtoa_r+0x8c0>
 8026944:	0031      	movs	r1, r6
 8026946:	001a      	movs	r2, r3
 8026948:	9803      	ldr	r0, [sp, #12]
 802694a:	f001 f869 	bl	8027a20 <__lshift>
 802694e:	0006      	movs	r6, r0
 8026950:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026952:	2b00      	cmp	r3, #0
 8026954:	d061      	beq.n	8026a1a <_dtoa_r+0x98a>
 8026956:	0031      	movs	r1, r6
 8026958:	9805      	ldr	r0, [sp, #20]
 802695a:	f001 f8cd 	bl	8027af8 <__mcmp>
 802695e:	2800      	cmp	r0, #0
 8026960:	da5b      	bge.n	8026a1a <_dtoa_r+0x98a>
 8026962:	9b04      	ldr	r3, [sp, #16]
 8026964:	220a      	movs	r2, #10
 8026966:	3b01      	subs	r3, #1
 8026968:	930c      	str	r3, [sp, #48]	@ 0x30
 802696a:	9905      	ldr	r1, [sp, #20]
 802696c:	2300      	movs	r3, #0
 802696e:	9803      	ldr	r0, [sp, #12]
 8026970:	f000 fe58 	bl	8027624 <__multadd>
 8026974:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026976:	9005      	str	r0, [sp, #20]
 8026978:	2b00      	cmp	r3, #0
 802697a:	d100      	bne.n	802697e <_dtoa_r+0x8ee>
 802697c:	e15b      	b.n	8026c36 <_dtoa_r+0xba6>
 802697e:	2300      	movs	r3, #0
 8026980:	0039      	movs	r1, r7
 8026982:	220a      	movs	r2, #10
 8026984:	9803      	ldr	r0, [sp, #12]
 8026986:	f000 fe4d 	bl	8027624 <__multadd>
 802698a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802698c:	0007      	movs	r7, r0
 802698e:	2b00      	cmp	r3, #0
 8026990:	dc4d      	bgt.n	8026a2e <_dtoa_r+0x99e>
 8026992:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026994:	2b02      	cmp	r3, #2
 8026996:	dd46      	ble.n	8026a26 <_dtoa_r+0x996>
 8026998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802699a:	2b00      	cmp	r3, #0
 802699c:	d000      	beq.n	80269a0 <_dtoa_r+0x910>
 802699e:	e5db      	b.n	8026558 <_dtoa_r+0x4c8>
 80269a0:	0031      	movs	r1, r6
 80269a2:	2205      	movs	r2, #5
 80269a4:	9803      	ldr	r0, [sp, #12]
 80269a6:	f000 fe3d 	bl	8027624 <__multadd>
 80269aa:	0006      	movs	r6, r0
 80269ac:	0001      	movs	r1, r0
 80269ae:	9805      	ldr	r0, [sp, #20]
 80269b0:	f001 f8a2 	bl	8027af8 <__mcmp>
 80269b4:	2800      	cmp	r0, #0
 80269b6:	dc00      	bgt.n	80269ba <_dtoa_r+0x92a>
 80269b8:	e5ce      	b.n	8026558 <_dtoa_r+0x4c8>
 80269ba:	9b08      	ldr	r3, [sp, #32]
 80269bc:	9a08      	ldr	r2, [sp, #32]
 80269be:	1c5c      	adds	r4, r3, #1
 80269c0:	2331      	movs	r3, #49	@ 0x31
 80269c2:	7013      	strb	r3, [r2, #0]
 80269c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80269c6:	3301      	adds	r3, #1
 80269c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80269ca:	e5c9      	b.n	8026560 <_dtoa_r+0x4d0>
 80269cc:	2336      	movs	r3, #54	@ 0x36
 80269ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80269d0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80269d2:	1a9b      	subs	r3, r3, r2
 80269d4:	9c06      	ldr	r4, [sp, #24]
 80269d6:	e720      	b.n	802681a <_dtoa_r+0x78a>
 80269d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80269da:	1e5d      	subs	r5, r3, #1
 80269dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80269de:	42ab      	cmp	r3, r5
 80269e0:	db08      	blt.n	80269f4 <_dtoa_r+0x964>
 80269e2:	1b5d      	subs	r5, r3, r5
 80269e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80269e6:	2b00      	cmp	r3, #0
 80269e8:	daf4      	bge.n	80269d4 <_dtoa_r+0x944>
 80269ea:	9b06      	ldr	r3, [sp, #24]
 80269ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80269ee:	1a9c      	subs	r4, r3, r2
 80269f0:	2300      	movs	r3, #0
 80269f2:	e712      	b.n	802681a <_dtoa_r+0x78a>
 80269f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80269f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80269f8:	1aeb      	subs	r3, r5, r3
 80269fa:	18d3      	adds	r3, r2, r3
 80269fc:	9314      	str	r3, [sp, #80]	@ 0x50
 80269fe:	950f      	str	r5, [sp, #60]	@ 0x3c
 8026a00:	9c06      	ldr	r4, [sp, #24]
 8026a02:	2500      	movs	r5, #0
 8026a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a06:	e708      	b.n	802681a <_dtoa_r+0x78a>
 8026a08:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026a0a:	9905      	ldr	r1, [sp, #20]
 8026a0c:	e742      	b.n	8026894 <_dtoa_r+0x804>
 8026a0e:	2b04      	cmp	r3, #4
 8026a10:	d08c      	beq.n	802692c <_dtoa_r+0x89c>
 8026a12:	331c      	adds	r3, #28
 8026a14:	e783      	b.n	802691e <_dtoa_r+0x88e>
 8026a16:	0013      	movs	r3, r2
 8026a18:	e7fb      	b.n	8026a12 <_dtoa_r+0x982>
 8026a1a:	9b04      	ldr	r3, [sp, #16]
 8026a1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8026a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a20:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a22:	2b00      	cmp	r3, #0
 8026a24:	ddb5      	ble.n	8026992 <_dtoa_r+0x902>
 8026a26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026a28:	2b00      	cmp	r3, #0
 8026a2a:	d100      	bne.n	8026a2e <_dtoa_r+0x99e>
 8026a2c:	e107      	b.n	8026c3e <_dtoa_r+0xbae>
 8026a2e:	2c00      	cmp	r4, #0
 8026a30:	dd05      	ble.n	8026a3e <_dtoa_r+0x9ae>
 8026a32:	0039      	movs	r1, r7
 8026a34:	0022      	movs	r2, r4
 8026a36:	9803      	ldr	r0, [sp, #12]
 8026a38:	f000 fff2 	bl	8027a20 <__lshift>
 8026a3c:	0007      	movs	r7, r0
 8026a3e:	9704      	str	r7, [sp, #16]
 8026a40:	2d00      	cmp	r5, #0
 8026a42:	d020      	beq.n	8026a86 <_dtoa_r+0x9f6>
 8026a44:	6879      	ldr	r1, [r7, #4]
 8026a46:	9803      	ldr	r0, [sp, #12]
 8026a48:	f000 fd84 	bl	8027554 <_Balloc>
 8026a4c:	1e04      	subs	r4, r0, #0
 8026a4e:	d10c      	bne.n	8026a6a <_dtoa_r+0x9da>
 8026a50:	0022      	movs	r2, r4
 8026a52:	4b2e      	ldr	r3, [pc, #184]	@ (8026b0c <_dtoa_r+0xa7c>)
 8026a54:	482e      	ldr	r0, [pc, #184]	@ (8026b10 <_dtoa_r+0xa80>)
 8026a56:	492f      	ldr	r1, [pc, #188]	@ (8026b14 <_dtoa_r+0xa84>)
 8026a58:	f7ff fb2f 	bl	80260ba <_dtoa_r+0x2a>
 8026a5c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8026a5e:	0037      	movs	r7, r6
 8026a60:	e7ab      	b.n	80269ba <_dtoa_r+0x92a>
 8026a62:	9b04      	ldr	r3, [sp, #16]
 8026a64:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8026a66:	930c      	str	r3, [sp, #48]	@ 0x30
 8026a68:	e7f9      	b.n	8026a5e <_dtoa_r+0x9ce>
 8026a6a:	0039      	movs	r1, r7
 8026a6c:	693a      	ldr	r2, [r7, #16]
 8026a6e:	310c      	adds	r1, #12
 8026a70:	3202      	adds	r2, #2
 8026a72:	0092      	lsls	r2, r2, #2
 8026a74:	300c      	adds	r0, #12
 8026a76:	f7ff fa75 	bl	8025f64 <memcpy>
 8026a7a:	2201      	movs	r2, #1
 8026a7c:	0021      	movs	r1, r4
 8026a7e:	9803      	ldr	r0, [sp, #12]
 8026a80:	f000 ffce 	bl	8027a20 <__lshift>
 8026a84:	9004      	str	r0, [sp, #16]
 8026a86:	9b08      	ldr	r3, [sp, #32]
 8026a88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026a8a:	9306      	str	r3, [sp, #24]
 8026a8c:	3b01      	subs	r3, #1
 8026a8e:	189b      	adds	r3, r3, r2
 8026a90:	2201      	movs	r2, #1
 8026a92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026a96:	4013      	ands	r3, r2
 8026a98:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a9a:	0031      	movs	r1, r6
 8026a9c:	9805      	ldr	r0, [sp, #20]
 8026a9e:	f7ff fa71 	bl	8025f84 <quorem>
 8026aa2:	0039      	movs	r1, r7
 8026aa4:	0005      	movs	r5, r0
 8026aa6:	900a      	str	r0, [sp, #40]	@ 0x28
 8026aa8:	9805      	ldr	r0, [sp, #20]
 8026aaa:	f001 f825 	bl	8027af8 <__mcmp>
 8026aae:	9a04      	ldr	r2, [sp, #16]
 8026ab0:	900d      	str	r0, [sp, #52]	@ 0x34
 8026ab2:	0031      	movs	r1, r6
 8026ab4:	9803      	ldr	r0, [sp, #12]
 8026ab6:	f001 f83b 	bl	8027b30 <__mdiff>
 8026aba:	2201      	movs	r2, #1
 8026abc:	68c3      	ldr	r3, [r0, #12]
 8026abe:	0004      	movs	r4, r0
 8026ac0:	3530      	adds	r5, #48	@ 0x30
 8026ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8026ac4:	2b00      	cmp	r3, #0
 8026ac6:	d104      	bne.n	8026ad2 <_dtoa_r+0xa42>
 8026ac8:	0001      	movs	r1, r0
 8026aca:	9805      	ldr	r0, [sp, #20]
 8026acc:	f001 f814 	bl	8027af8 <__mcmp>
 8026ad0:	9009      	str	r0, [sp, #36]	@ 0x24
 8026ad2:	0021      	movs	r1, r4
 8026ad4:	9803      	ldr	r0, [sp, #12]
 8026ad6:	f000 fd81 	bl	80275dc <_Bfree>
 8026ada:	9b06      	ldr	r3, [sp, #24]
 8026adc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026ade:	1c5c      	adds	r4, r3, #1
 8026ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ae2:	4313      	orrs	r3, r2
 8026ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026ae6:	4313      	orrs	r3, r2
 8026ae8:	d116      	bne.n	8026b18 <_dtoa_r+0xa88>
 8026aea:	2d39      	cmp	r5, #57	@ 0x39
 8026aec:	d02f      	beq.n	8026b4e <_dtoa_r+0xabe>
 8026aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026af0:	2b00      	cmp	r3, #0
 8026af2:	dd01      	ble.n	8026af8 <_dtoa_r+0xa68>
 8026af4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8026af6:	3531      	adds	r5, #49	@ 0x31
 8026af8:	9b06      	ldr	r3, [sp, #24]
 8026afa:	701d      	strb	r5, [r3, #0]
 8026afc:	e532      	b.n	8026564 <_dtoa_r+0x4d4>
 8026afe:	46c0      	nop			@ (mov r8, r8)
 8026b00:	40240000 	.word	0x40240000
 8026b04:	00000433 	.word	0x00000433
 8026b08:	7ff00000 	.word	0x7ff00000
 8026b0c:	0802e90e 	.word	0x0802e90e
 8026b10:	0802e8b6 	.word	0x0802e8b6
 8026b14:	000002ef 	.word	0x000002ef
 8026b18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	db04      	blt.n	8026b28 <_dtoa_r+0xa98>
 8026b1e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026b20:	4313      	orrs	r3, r2
 8026b22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026b24:	4313      	orrs	r3, r2
 8026b26:	d11e      	bne.n	8026b66 <_dtoa_r+0xad6>
 8026b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b2a:	2b00      	cmp	r3, #0
 8026b2c:	dde4      	ble.n	8026af8 <_dtoa_r+0xa68>
 8026b2e:	9905      	ldr	r1, [sp, #20]
 8026b30:	2201      	movs	r2, #1
 8026b32:	9803      	ldr	r0, [sp, #12]
 8026b34:	f000 ff74 	bl	8027a20 <__lshift>
 8026b38:	0031      	movs	r1, r6
 8026b3a:	9005      	str	r0, [sp, #20]
 8026b3c:	f000 ffdc 	bl	8027af8 <__mcmp>
 8026b40:	2800      	cmp	r0, #0
 8026b42:	dc02      	bgt.n	8026b4a <_dtoa_r+0xaba>
 8026b44:	d1d8      	bne.n	8026af8 <_dtoa_r+0xa68>
 8026b46:	07eb      	lsls	r3, r5, #31
 8026b48:	d5d6      	bpl.n	8026af8 <_dtoa_r+0xa68>
 8026b4a:	2d39      	cmp	r5, #57	@ 0x39
 8026b4c:	d1d2      	bne.n	8026af4 <_dtoa_r+0xa64>
 8026b4e:	2339      	movs	r3, #57	@ 0x39
 8026b50:	9a06      	ldr	r2, [sp, #24]
 8026b52:	7013      	strb	r3, [r2, #0]
 8026b54:	0023      	movs	r3, r4
 8026b56:	001c      	movs	r4, r3
 8026b58:	3b01      	subs	r3, #1
 8026b5a:	781a      	ldrb	r2, [r3, #0]
 8026b5c:	2a39      	cmp	r2, #57	@ 0x39
 8026b5e:	d050      	beq.n	8026c02 <_dtoa_r+0xb72>
 8026b60:	3201      	adds	r2, #1
 8026b62:	701a      	strb	r2, [r3, #0]
 8026b64:	e4fe      	b.n	8026564 <_dtoa_r+0x4d4>
 8026b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b68:	2b00      	cmp	r3, #0
 8026b6a:	dd03      	ble.n	8026b74 <_dtoa_r+0xae4>
 8026b6c:	2d39      	cmp	r5, #57	@ 0x39
 8026b6e:	d0ee      	beq.n	8026b4e <_dtoa_r+0xabe>
 8026b70:	3501      	adds	r5, #1
 8026b72:	e7c1      	b.n	8026af8 <_dtoa_r+0xa68>
 8026b74:	9b06      	ldr	r3, [sp, #24]
 8026b76:	9a06      	ldr	r2, [sp, #24]
 8026b78:	701d      	strb	r5, [r3, #0]
 8026b7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026b7c:	4293      	cmp	r3, r2
 8026b7e:	d02b      	beq.n	8026bd8 <_dtoa_r+0xb48>
 8026b80:	2300      	movs	r3, #0
 8026b82:	220a      	movs	r2, #10
 8026b84:	9905      	ldr	r1, [sp, #20]
 8026b86:	9803      	ldr	r0, [sp, #12]
 8026b88:	f000 fd4c 	bl	8027624 <__multadd>
 8026b8c:	9b04      	ldr	r3, [sp, #16]
 8026b8e:	9005      	str	r0, [sp, #20]
 8026b90:	429f      	cmp	r7, r3
 8026b92:	d109      	bne.n	8026ba8 <_dtoa_r+0xb18>
 8026b94:	0039      	movs	r1, r7
 8026b96:	2300      	movs	r3, #0
 8026b98:	220a      	movs	r2, #10
 8026b9a:	9803      	ldr	r0, [sp, #12]
 8026b9c:	f000 fd42 	bl	8027624 <__multadd>
 8026ba0:	0007      	movs	r7, r0
 8026ba2:	9004      	str	r0, [sp, #16]
 8026ba4:	9406      	str	r4, [sp, #24]
 8026ba6:	e778      	b.n	8026a9a <_dtoa_r+0xa0a>
 8026ba8:	0039      	movs	r1, r7
 8026baa:	2300      	movs	r3, #0
 8026bac:	220a      	movs	r2, #10
 8026bae:	9803      	ldr	r0, [sp, #12]
 8026bb0:	f000 fd38 	bl	8027624 <__multadd>
 8026bb4:	2300      	movs	r3, #0
 8026bb6:	0007      	movs	r7, r0
 8026bb8:	220a      	movs	r2, #10
 8026bba:	9904      	ldr	r1, [sp, #16]
 8026bbc:	9803      	ldr	r0, [sp, #12]
 8026bbe:	f000 fd31 	bl	8027624 <__multadd>
 8026bc2:	9004      	str	r0, [sp, #16]
 8026bc4:	e7ee      	b.n	8026ba4 <_dtoa_r+0xb14>
 8026bc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026bc8:	2401      	movs	r4, #1
 8026bca:	2b00      	cmp	r3, #0
 8026bcc:	dd00      	ble.n	8026bd0 <_dtoa_r+0xb40>
 8026bce:	001c      	movs	r4, r3
 8026bd0:	9704      	str	r7, [sp, #16]
 8026bd2:	2700      	movs	r7, #0
 8026bd4:	9b08      	ldr	r3, [sp, #32]
 8026bd6:	191c      	adds	r4, r3, r4
 8026bd8:	9905      	ldr	r1, [sp, #20]
 8026bda:	2201      	movs	r2, #1
 8026bdc:	9803      	ldr	r0, [sp, #12]
 8026bde:	f000 ff1f 	bl	8027a20 <__lshift>
 8026be2:	0031      	movs	r1, r6
 8026be4:	9005      	str	r0, [sp, #20]
 8026be6:	f000 ff87 	bl	8027af8 <__mcmp>
 8026bea:	2800      	cmp	r0, #0
 8026bec:	dcb2      	bgt.n	8026b54 <_dtoa_r+0xac4>
 8026bee:	d101      	bne.n	8026bf4 <_dtoa_r+0xb64>
 8026bf0:	07ed      	lsls	r5, r5, #31
 8026bf2:	d4af      	bmi.n	8026b54 <_dtoa_r+0xac4>
 8026bf4:	0023      	movs	r3, r4
 8026bf6:	001c      	movs	r4, r3
 8026bf8:	3b01      	subs	r3, #1
 8026bfa:	781a      	ldrb	r2, [r3, #0]
 8026bfc:	2a30      	cmp	r2, #48	@ 0x30
 8026bfe:	d0fa      	beq.n	8026bf6 <_dtoa_r+0xb66>
 8026c00:	e4b0      	b.n	8026564 <_dtoa_r+0x4d4>
 8026c02:	9a08      	ldr	r2, [sp, #32]
 8026c04:	429a      	cmp	r2, r3
 8026c06:	d1a6      	bne.n	8026b56 <_dtoa_r+0xac6>
 8026c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026c0a:	3301      	adds	r3, #1
 8026c0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8026c0e:	2331      	movs	r3, #49	@ 0x31
 8026c10:	7013      	strb	r3, [r2, #0]
 8026c12:	e4a7      	b.n	8026564 <_dtoa_r+0x4d4>
 8026c14:	4b14      	ldr	r3, [pc, #80]	@ (8026c68 <_dtoa_r+0xbd8>)
 8026c16:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026c18:	9308      	str	r3, [sp, #32]
 8026c1a:	4b14      	ldr	r3, [pc, #80]	@ (8026c6c <_dtoa_r+0xbdc>)
 8026c1c:	2a00      	cmp	r2, #0
 8026c1e:	d001      	beq.n	8026c24 <_dtoa_r+0xb94>
 8026c20:	f7ff fa7e 	bl	8026120 <_dtoa_r+0x90>
 8026c24:	f7ff fa7e 	bl	8026124 <_dtoa_r+0x94>
 8026c28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026c2a:	2b01      	cmp	r3, #1
 8026c2c:	dc00      	bgt.n	8026c30 <_dtoa_r+0xba0>
 8026c2e:	e648      	b.n	80268c2 <_dtoa_r+0x832>
 8026c30:	2001      	movs	r0, #1
 8026c32:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026c34:	e665      	b.n	8026902 <_dtoa_r+0x872>
 8026c36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c38:	2b00      	cmp	r3, #0
 8026c3a:	dc00      	bgt.n	8026c3e <_dtoa_r+0xbae>
 8026c3c:	e6a9      	b.n	8026992 <_dtoa_r+0x902>
 8026c3e:	2400      	movs	r4, #0
 8026c40:	0031      	movs	r1, r6
 8026c42:	9805      	ldr	r0, [sp, #20]
 8026c44:	f7ff f99e 	bl	8025f84 <quorem>
 8026c48:	9b08      	ldr	r3, [sp, #32]
 8026c4a:	3030      	adds	r0, #48	@ 0x30
 8026c4c:	5518      	strb	r0, [r3, r4]
 8026c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026c50:	3401      	adds	r4, #1
 8026c52:	0005      	movs	r5, r0
 8026c54:	42a3      	cmp	r3, r4
 8026c56:	ddb6      	ble.n	8026bc6 <_dtoa_r+0xb36>
 8026c58:	2300      	movs	r3, #0
 8026c5a:	220a      	movs	r2, #10
 8026c5c:	9905      	ldr	r1, [sp, #20]
 8026c5e:	9803      	ldr	r0, [sp, #12]
 8026c60:	f000 fce0 	bl	8027624 <__multadd>
 8026c64:	9005      	str	r0, [sp, #20]
 8026c66:	e7eb      	b.n	8026c40 <_dtoa_r+0xbb0>
 8026c68:	0802e892 	.word	0x0802e892
 8026c6c:	0802e89a 	.word	0x0802e89a

08026c70 <_free_r>:
 8026c70:	b570      	push	{r4, r5, r6, lr}
 8026c72:	0005      	movs	r5, r0
 8026c74:	1e0c      	subs	r4, r1, #0
 8026c76:	d010      	beq.n	8026c9a <_free_r+0x2a>
 8026c78:	3c04      	subs	r4, #4
 8026c7a:	6823      	ldr	r3, [r4, #0]
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	da00      	bge.n	8026c82 <_free_r+0x12>
 8026c80:	18e4      	adds	r4, r4, r3
 8026c82:	0028      	movs	r0, r5
 8026c84:	f000 fc56 	bl	8027534 <__malloc_lock>
 8026c88:	4a1d      	ldr	r2, [pc, #116]	@ (8026d00 <_free_r+0x90>)
 8026c8a:	6813      	ldr	r3, [r2, #0]
 8026c8c:	2b00      	cmp	r3, #0
 8026c8e:	d105      	bne.n	8026c9c <_free_r+0x2c>
 8026c90:	6063      	str	r3, [r4, #4]
 8026c92:	6014      	str	r4, [r2, #0]
 8026c94:	0028      	movs	r0, r5
 8026c96:	f000 fc55 	bl	8027544 <__malloc_unlock>
 8026c9a:	bd70      	pop	{r4, r5, r6, pc}
 8026c9c:	42a3      	cmp	r3, r4
 8026c9e:	d908      	bls.n	8026cb2 <_free_r+0x42>
 8026ca0:	6820      	ldr	r0, [r4, #0]
 8026ca2:	1821      	adds	r1, r4, r0
 8026ca4:	428b      	cmp	r3, r1
 8026ca6:	d1f3      	bne.n	8026c90 <_free_r+0x20>
 8026ca8:	6819      	ldr	r1, [r3, #0]
 8026caa:	685b      	ldr	r3, [r3, #4]
 8026cac:	1809      	adds	r1, r1, r0
 8026cae:	6021      	str	r1, [r4, #0]
 8026cb0:	e7ee      	b.n	8026c90 <_free_r+0x20>
 8026cb2:	001a      	movs	r2, r3
 8026cb4:	685b      	ldr	r3, [r3, #4]
 8026cb6:	2b00      	cmp	r3, #0
 8026cb8:	d001      	beq.n	8026cbe <_free_r+0x4e>
 8026cba:	42a3      	cmp	r3, r4
 8026cbc:	d9f9      	bls.n	8026cb2 <_free_r+0x42>
 8026cbe:	6811      	ldr	r1, [r2, #0]
 8026cc0:	1850      	adds	r0, r2, r1
 8026cc2:	42a0      	cmp	r0, r4
 8026cc4:	d10b      	bne.n	8026cde <_free_r+0x6e>
 8026cc6:	6820      	ldr	r0, [r4, #0]
 8026cc8:	1809      	adds	r1, r1, r0
 8026cca:	1850      	adds	r0, r2, r1
 8026ccc:	6011      	str	r1, [r2, #0]
 8026cce:	4283      	cmp	r3, r0
 8026cd0:	d1e0      	bne.n	8026c94 <_free_r+0x24>
 8026cd2:	6818      	ldr	r0, [r3, #0]
 8026cd4:	685b      	ldr	r3, [r3, #4]
 8026cd6:	1841      	adds	r1, r0, r1
 8026cd8:	6011      	str	r1, [r2, #0]
 8026cda:	6053      	str	r3, [r2, #4]
 8026cdc:	e7da      	b.n	8026c94 <_free_r+0x24>
 8026cde:	42a0      	cmp	r0, r4
 8026ce0:	d902      	bls.n	8026ce8 <_free_r+0x78>
 8026ce2:	230c      	movs	r3, #12
 8026ce4:	602b      	str	r3, [r5, #0]
 8026ce6:	e7d5      	b.n	8026c94 <_free_r+0x24>
 8026ce8:	6820      	ldr	r0, [r4, #0]
 8026cea:	1821      	adds	r1, r4, r0
 8026cec:	428b      	cmp	r3, r1
 8026cee:	d103      	bne.n	8026cf8 <_free_r+0x88>
 8026cf0:	6819      	ldr	r1, [r3, #0]
 8026cf2:	685b      	ldr	r3, [r3, #4]
 8026cf4:	1809      	adds	r1, r1, r0
 8026cf6:	6021      	str	r1, [r4, #0]
 8026cf8:	6063      	str	r3, [r4, #4]
 8026cfa:	6054      	str	r4, [r2, #4]
 8026cfc:	e7ca      	b.n	8026c94 <_free_r+0x24>
 8026cfe:	46c0      	nop			@ (mov r8, r8)
 8026d00:	20003658 	.word	0x20003658

08026d04 <rshift>:
 8026d04:	0002      	movs	r2, r0
 8026d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026d08:	6904      	ldr	r4, [r0, #16]
 8026d0a:	b085      	sub	sp, #20
 8026d0c:	3214      	adds	r2, #20
 8026d0e:	114b      	asrs	r3, r1, #5
 8026d10:	0016      	movs	r6, r2
 8026d12:	9302      	str	r3, [sp, #8]
 8026d14:	429c      	cmp	r4, r3
 8026d16:	dd31      	ble.n	8026d7c <rshift+0x78>
 8026d18:	261f      	movs	r6, #31
 8026d1a:	000f      	movs	r7, r1
 8026d1c:	009b      	lsls	r3, r3, #2
 8026d1e:	00a5      	lsls	r5, r4, #2
 8026d20:	18d3      	adds	r3, r2, r3
 8026d22:	4037      	ands	r7, r6
 8026d24:	1955      	adds	r5, r2, r5
 8026d26:	9300      	str	r3, [sp, #0]
 8026d28:	9701      	str	r7, [sp, #4]
 8026d2a:	4231      	tst	r1, r6
 8026d2c:	d10d      	bne.n	8026d4a <rshift+0x46>
 8026d2e:	0016      	movs	r6, r2
 8026d30:	0019      	movs	r1, r3
 8026d32:	428d      	cmp	r5, r1
 8026d34:	d836      	bhi.n	8026da4 <rshift+0xa0>
 8026d36:	9b00      	ldr	r3, [sp, #0]
 8026d38:	2600      	movs	r6, #0
 8026d3a:	3b03      	subs	r3, #3
 8026d3c:	429d      	cmp	r5, r3
 8026d3e:	d302      	bcc.n	8026d46 <rshift+0x42>
 8026d40:	9b02      	ldr	r3, [sp, #8]
 8026d42:	1ae4      	subs	r4, r4, r3
 8026d44:	00a6      	lsls	r6, r4, #2
 8026d46:	1996      	adds	r6, r2, r6
 8026d48:	e018      	b.n	8026d7c <rshift+0x78>
 8026d4a:	2120      	movs	r1, #32
 8026d4c:	9e01      	ldr	r6, [sp, #4]
 8026d4e:	9f01      	ldr	r7, [sp, #4]
 8026d50:	1b89      	subs	r1, r1, r6
 8026d52:	9e00      	ldr	r6, [sp, #0]
 8026d54:	9103      	str	r1, [sp, #12]
 8026d56:	ce02      	ldmia	r6!, {r1}
 8026d58:	4694      	mov	ip, r2
 8026d5a:	40f9      	lsrs	r1, r7
 8026d5c:	42b5      	cmp	r5, r6
 8026d5e:	d816      	bhi.n	8026d8e <rshift+0x8a>
 8026d60:	9b00      	ldr	r3, [sp, #0]
 8026d62:	2600      	movs	r6, #0
 8026d64:	3301      	adds	r3, #1
 8026d66:	429d      	cmp	r5, r3
 8026d68:	d303      	bcc.n	8026d72 <rshift+0x6e>
 8026d6a:	9b02      	ldr	r3, [sp, #8]
 8026d6c:	1ae4      	subs	r4, r4, r3
 8026d6e:	00a6      	lsls	r6, r4, #2
 8026d70:	3e04      	subs	r6, #4
 8026d72:	1996      	adds	r6, r2, r6
 8026d74:	6031      	str	r1, [r6, #0]
 8026d76:	2900      	cmp	r1, #0
 8026d78:	d000      	beq.n	8026d7c <rshift+0x78>
 8026d7a:	3604      	adds	r6, #4
 8026d7c:	1ab1      	subs	r1, r6, r2
 8026d7e:	1089      	asrs	r1, r1, #2
 8026d80:	6101      	str	r1, [r0, #16]
 8026d82:	4296      	cmp	r6, r2
 8026d84:	d101      	bne.n	8026d8a <rshift+0x86>
 8026d86:	2300      	movs	r3, #0
 8026d88:	6143      	str	r3, [r0, #20]
 8026d8a:	b005      	add	sp, #20
 8026d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026d8e:	6837      	ldr	r7, [r6, #0]
 8026d90:	9b03      	ldr	r3, [sp, #12]
 8026d92:	409f      	lsls	r7, r3
 8026d94:	430f      	orrs	r7, r1
 8026d96:	4661      	mov	r1, ip
 8026d98:	c180      	stmia	r1!, {r7}
 8026d9a:	468c      	mov	ip, r1
 8026d9c:	9b01      	ldr	r3, [sp, #4]
 8026d9e:	ce02      	ldmia	r6!, {r1}
 8026da0:	40d9      	lsrs	r1, r3
 8026da2:	e7db      	b.n	8026d5c <rshift+0x58>
 8026da4:	c980      	ldmia	r1!, {r7}
 8026da6:	c680      	stmia	r6!, {r7}
 8026da8:	e7c3      	b.n	8026d32 <rshift+0x2e>

08026daa <__hexdig_fun>:
 8026daa:	0002      	movs	r2, r0
 8026dac:	3a30      	subs	r2, #48	@ 0x30
 8026dae:	0003      	movs	r3, r0
 8026db0:	2a09      	cmp	r2, #9
 8026db2:	d802      	bhi.n	8026dba <__hexdig_fun+0x10>
 8026db4:	3b20      	subs	r3, #32
 8026db6:	b2d8      	uxtb	r0, r3
 8026db8:	4770      	bx	lr
 8026dba:	0002      	movs	r2, r0
 8026dbc:	3a61      	subs	r2, #97	@ 0x61
 8026dbe:	2a05      	cmp	r2, #5
 8026dc0:	d801      	bhi.n	8026dc6 <__hexdig_fun+0x1c>
 8026dc2:	3b47      	subs	r3, #71	@ 0x47
 8026dc4:	e7f7      	b.n	8026db6 <__hexdig_fun+0xc>
 8026dc6:	001a      	movs	r2, r3
 8026dc8:	3a41      	subs	r2, #65	@ 0x41
 8026dca:	2000      	movs	r0, #0
 8026dcc:	2a05      	cmp	r2, #5
 8026dce:	d8f3      	bhi.n	8026db8 <__hexdig_fun+0xe>
 8026dd0:	3b27      	subs	r3, #39	@ 0x27
 8026dd2:	e7f0      	b.n	8026db6 <__hexdig_fun+0xc>

08026dd4 <__gethex>:
 8026dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026dd6:	b089      	sub	sp, #36	@ 0x24
 8026dd8:	9307      	str	r3, [sp, #28]
 8026dda:	680b      	ldr	r3, [r1, #0]
 8026ddc:	9201      	str	r2, [sp, #4]
 8026dde:	9003      	str	r0, [sp, #12]
 8026de0:	9106      	str	r1, [sp, #24]
 8026de2:	1c9a      	adds	r2, r3, #2
 8026de4:	0011      	movs	r1, r2
 8026de6:	3201      	adds	r2, #1
 8026de8:	1e50      	subs	r0, r2, #1
 8026dea:	7800      	ldrb	r0, [r0, #0]
 8026dec:	2830      	cmp	r0, #48	@ 0x30
 8026dee:	d0f9      	beq.n	8026de4 <__gethex+0x10>
 8026df0:	1acb      	subs	r3, r1, r3
 8026df2:	3b02      	subs	r3, #2
 8026df4:	9305      	str	r3, [sp, #20]
 8026df6:	9100      	str	r1, [sp, #0]
 8026df8:	f7ff ffd7 	bl	8026daa <__hexdig_fun>
 8026dfc:	2300      	movs	r3, #0
 8026dfe:	001d      	movs	r5, r3
 8026e00:	9302      	str	r3, [sp, #8]
 8026e02:	4298      	cmp	r0, r3
 8026e04:	d11e      	bne.n	8026e44 <__gethex+0x70>
 8026e06:	2201      	movs	r2, #1
 8026e08:	49a6      	ldr	r1, [pc, #664]	@ (80270a4 <__gethex+0x2d0>)
 8026e0a:	9800      	ldr	r0, [sp, #0]
 8026e0c:	f7fe ffe4 	bl	8025dd8 <strncmp>
 8026e10:	0007      	movs	r7, r0
 8026e12:	42a8      	cmp	r0, r5
 8026e14:	d000      	beq.n	8026e18 <__gethex+0x44>
 8026e16:	e06a      	b.n	8026eee <__gethex+0x11a>
 8026e18:	9b00      	ldr	r3, [sp, #0]
 8026e1a:	7858      	ldrb	r0, [r3, #1]
 8026e1c:	1c5c      	adds	r4, r3, #1
 8026e1e:	f7ff ffc4 	bl	8026daa <__hexdig_fun>
 8026e22:	2301      	movs	r3, #1
 8026e24:	9302      	str	r3, [sp, #8]
 8026e26:	42a8      	cmp	r0, r5
 8026e28:	d02f      	beq.n	8026e8a <__gethex+0xb6>
 8026e2a:	9400      	str	r4, [sp, #0]
 8026e2c:	9b00      	ldr	r3, [sp, #0]
 8026e2e:	7818      	ldrb	r0, [r3, #0]
 8026e30:	2830      	cmp	r0, #48	@ 0x30
 8026e32:	d009      	beq.n	8026e48 <__gethex+0x74>
 8026e34:	f7ff ffb9 	bl	8026daa <__hexdig_fun>
 8026e38:	4242      	negs	r2, r0
 8026e3a:	4142      	adcs	r2, r0
 8026e3c:	2301      	movs	r3, #1
 8026e3e:	0025      	movs	r5, r4
 8026e40:	9202      	str	r2, [sp, #8]
 8026e42:	9305      	str	r3, [sp, #20]
 8026e44:	9c00      	ldr	r4, [sp, #0]
 8026e46:	e004      	b.n	8026e52 <__gethex+0x7e>
 8026e48:	9b00      	ldr	r3, [sp, #0]
 8026e4a:	3301      	adds	r3, #1
 8026e4c:	9300      	str	r3, [sp, #0]
 8026e4e:	e7ed      	b.n	8026e2c <__gethex+0x58>
 8026e50:	3401      	adds	r4, #1
 8026e52:	7820      	ldrb	r0, [r4, #0]
 8026e54:	f7ff ffa9 	bl	8026daa <__hexdig_fun>
 8026e58:	1e07      	subs	r7, r0, #0
 8026e5a:	d1f9      	bne.n	8026e50 <__gethex+0x7c>
 8026e5c:	2201      	movs	r2, #1
 8026e5e:	0020      	movs	r0, r4
 8026e60:	4990      	ldr	r1, [pc, #576]	@ (80270a4 <__gethex+0x2d0>)
 8026e62:	f7fe ffb9 	bl	8025dd8 <strncmp>
 8026e66:	2800      	cmp	r0, #0
 8026e68:	d10d      	bne.n	8026e86 <__gethex+0xb2>
 8026e6a:	2d00      	cmp	r5, #0
 8026e6c:	d106      	bne.n	8026e7c <__gethex+0xa8>
 8026e6e:	3401      	adds	r4, #1
 8026e70:	0025      	movs	r5, r4
 8026e72:	7820      	ldrb	r0, [r4, #0]
 8026e74:	f7ff ff99 	bl	8026daa <__hexdig_fun>
 8026e78:	2800      	cmp	r0, #0
 8026e7a:	d102      	bne.n	8026e82 <__gethex+0xae>
 8026e7c:	1b2d      	subs	r5, r5, r4
 8026e7e:	00af      	lsls	r7, r5, #2
 8026e80:	e003      	b.n	8026e8a <__gethex+0xb6>
 8026e82:	3401      	adds	r4, #1
 8026e84:	e7f5      	b.n	8026e72 <__gethex+0x9e>
 8026e86:	2d00      	cmp	r5, #0
 8026e88:	d1f8      	bne.n	8026e7c <__gethex+0xa8>
 8026e8a:	2220      	movs	r2, #32
 8026e8c:	7823      	ldrb	r3, [r4, #0]
 8026e8e:	0026      	movs	r6, r4
 8026e90:	4393      	bics	r3, r2
 8026e92:	2b50      	cmp	r3, #80	@ 0x50
 8026e94:	d11d      	bne.n	8026ed2 <__gethex+0xfe>
 8026e96:	7863      	ldrb	r3, [r4, #1]
 8026e98:	2b2b      	cmp	r3, #43	@ 0x2b
 8026e9a:	d02d      	beq.n	8026ef8 <__gethex+0x124>
 8026e9c:	2b2d      	cmp	r3, #45	@ 0x2d
 8026e9e:	d02f      	beq.n	8026f00 <__gethex+0x12c>
 8026ea0:	2300      	movs	r3, #0
 8026ea2:	1c66      	adds	r6, r4, #1
 8026ea4:	9304      	str	r3, [sp, #16]
 8026ea6:	7830      	ldrb	r0, [r6, #0]
 8026ea8:	f7ff ff7f 	bl	8026daa <__hexdig_fun>
 8026eac:	1e43      	subs	r3, r0, #1
 8026eae:	b2db      	uxtb	r3, r3
 8026eb0:	0005      	movs	r5, r0
 8026eb2:	2b18      	cmp	r3, #24
 8026eb4:	d82a      	bhi.n	8026f0c <__gethex+0x138>
 8026eb6:	7870      	ldrb	r0, [r6, #1]
 8026eb8:	f7ff ff77 	bl	8026daa <__hexdig_fun>
 8026ebc:	1e43      	subs	r3, r0, #1
 8026ebe:	b2db      	uxtb	r3, r3
 8026ec0:	3601      	adds	r6, #1
 8026ec2:	3d10      	subs	r5, #16
 8026ec4:	2b18      	cmp	r3, #24
 8026ec6:	d91d      	bls.n	8026f04 <__gethex+0x130>
 8026ec8:	9b04      	ldr	r3, [sp, #16]
 8026eca:	2b00      	cmp	r3, #0
 8026ecc:	d000      	beq.n	8026ed0 <__gethex+0xfc>
 8026ece:	426d      	negs	r5, r5
 8026ed0:	197f      	adds	r7, r7, r5
 8026ed2:	9b06      	ldr	r3, [sp, #24]
 8026ed4:	601e      	str	r6, [r3, #0]
 8026ed6:	9b02      	ldr	r3, [sp, #8]
 8026ed8:	2b00      	cmp	r3, #0
 8026eda:	d019      	beq.n	8026f10 <__gethex+0x13c>
 8026edc:	9b05      	ldr	r3, [sp, #20]
 8026ede:	2606      	movs	r6, #6
 8026ee0:	425a      	negs	r2, r3
 8026ee2:	4153      	adcs	r3, r2
 8026ee4:	425b      	negs	r3, r3
 8026ee6:	401e      	ands	r6, r3
 8026ee8:	0030      	movs	r0, r6
 8026eea:	b009      	add	sp, #36	@ 0x24
 8026eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026eee:	2301      	movs	r3, #1
 8026ef0:	2700      	movs	r7, #0
 8026ef2:	9c00      	ldr	r4, [sp, #0]
 8026ef4:	9302      	str	r3, [sp, #8]
 8026ef6:	e7c8      	b.n	8026e8a <__gethex+0xb6>
 8026ef8:	2300      	movs	r3, #0
 8026efa:	9304      	str	r3, [sp, #16]
 8026efc:	1ca6      	adds	r6, r4, #2
 8026efe:	e7d2      	b.n	8026ea6 <__gethex+0xd2>
 8026f00:	2301      	movs	r3, #1
 8026f02:	e7fa      	b.n	8026efa <__gethex+0x126>
 8026f04:	230a      	movs	r3, #10
 8026f06:	435d      	muls	r5, r3
 8026f08:	182d      	adds	r5, r5, r0
 8026f0a:	e7d4      	b.n	8026eb6 <__gethex+0xe2>
 8026f0c:	0026      	movs	r6, r4
 8026f0e:	e7e0      	b.n	8026ed2 <__gethex+0xfe>
 8026f10:	9b00      	ldr	r3, [sp, #0]
 8026f12:	9902      	ldr	r1, [sp, #8]
 8026f14:	1ae3      	subs	r3, r4, r3
 8026f16:	3b01      	subs	r3, #1
 8026f18:	2b07      	cmp	r3, #7
 8026f1a:	dc0a      	bgt.n	8026f32 <__gethex+0x15e>
 8026f1c:	9803      	ldr	r0, [sp, #12]
 8026f1e:	f000 fb19 	bl	8027554 <_Balloc>
 8026f22:	1e05      	subs	r5, r0, #0
 8026f24:	d108      	bne.n	8026f38 <__gethex+0x164>
 8026f26:	002a      	movs	r2, r5
 8026f28:	21e4      	movs	r1, #228	@ 0xe4
 8026f2a:	4b5f      	ldr	r3, [pc, #380]	@ (80270a8 <__gethex+0x2d4>)
 8026f2c:	485f      	ldr	r0, [pc, #380]	@ (80270ac <__gethex+0x2d8>)
 8026f2e:	f001 fbe9 	bl	8028704 <__assert_func>
 8026f32:	3101      	adds	r1, #1
 8026f34:	105b      	asrs	r3, r3, #1
 8026f36:	e7ef      	b.n	8026f18 <__gethex+0x144>
 8026f38:	0003      	movs	r3, r0
 8026f3a:	3314      	adds	r3, #20
 8026f3c:	9302      	str	r3, [sp, #8]
 8026f3e:	9305      	str	r3, [sp, #20]
 8026f40:	2300      	movs	r3, #0
 8026f42:	001e      	movs	r6, r3
 8026f44:	9304      	str	r3, [sp, #16]
 8026f46:	9b00      	ldr	r3, [sp, #0]
 8026f48:	42a3      	cmp	r3, r4
 8026f4a:	d338      	bcc.n	8026fbe <__gethex+0x1ea>
 8026f4c:	9c05      	ldr	r4, [sp, #20]
 8026f4e:	9b02      	ldr	r3, [sp, #8]
 8026f50:	c440      	stmia	r4!, {r6}
 8026f52:	1ae4      	subs	r4, r4, r3
 8026f54:	10a4      	asrs	r4, r4, #2
 8026f56:	0030      	movs	r0, r6
 8026f58:	612c      	str	r4, [r5, #16]
 8026f5a:	f000 fbf3 	bl	8027744 <__hi0bits>
 8026f5e:	9b01      	ldr	r3, [sp, #4]
 8026f60:	0164      	lsls	r4, r4, #5
 8026f62:	681b      	ldr	r3, [r3, #0]
 8026f64:	1a26      	subs	r6, r4, r0
 8026f66:	9300      	str	r3, [sp, #0]
 8026f68:	429e      	cmp	r6, r3
 8026f6a:	dd52      	ble.n	8027012 <__gethex+0x23e>
 8026f6c:	1af6      	subs	r6, r6, r3
 8026f6e:	0031      	movs	r1, r6
 8026f70:	0028      	movs	r0, r5
 8026f72:	f000 ff8e 	bl	8027e92 <__any_on>
 8026f76:	1e04      	subs	r4, r0, #0
 8026f78:	d00f      	beq.n	8026f9a <__gethex+0x1c6>
 8026f7a:	2401      	movs	r4, #1
 8026f7c:	211f      	movs	r1, #31
 8026f7e:	0020      	movs	r0, r4
 8026f80:	1e73      	subs	r3, r6, #1
 8026f82:	4019      	ands	r1, r3
 8026f84:	4088      	lsls	r0, r1
 8026f86:	0001      	movs	r1, r0
 8026f88:	115a      	asrs	r2, r3, #5
 8026f8a:	9802      	ldr	r0, [sp, #8]
 8026f8c:	0092      	lsls	r2, r2, #2
 8026f8e:	5812      	ldr	r2, [r2, r0]
 8026f90:	420a      	tst	r2, r1
 8026f92:	d002      	beq.n	8026f9a <__gethex+0x1c6>
 8026f94:	42a3      	cmp	r3, r4
 8026f96:	dc34      	bgt.n	8027002 <__gethex+0x22e>
 8026f98:	2402      	movs	r4, #2
 8026f9a:	0031      	movs	r1, r6
 8026f9c:	0028      	movs	r0, r5
 8026f9e:	f7ff feb1 	bl	8026d04 <rshift>
 8026fa2:	19bf      	adds	r7, r7, r6
 8026fa4:	9b01      	ldr	r3, [sp, #4]
 8026fa6:	689b      	ldr	r3, [r3, #8]
 8026fa8:	42bb      	cmp	r3, r7
 8026faa:	da42      	bge.n	8027032 <__gethex+0x25e>
 8026fac:	0029      	movs	r1, r5
 8026fae:	9803      	ldr	r0, [sp, #12]
 8026fb0:	f000 fb14 	bl	80275dc <_Bfree>
 8026fb4:	2300      	movs	r3, #0
 8026fb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026fb8:	26a3      	movs	r6, #163	@ 0xa3
 8026fba:	6013      	str	r3, [r2, #0]
 8026fbc:	e794      	b.n	8026ee8 <__gethex+0x114>
 8026fbe:	3c01      	subs	r4, #1
 8026fc0:	7823      	ldrb	r3, [r4, #0]
 8026fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8026fc4:	d012      	beq.n	8026fec <__gethex+0x218>
 8026fc6:	9b04      	ldr	r3, [sp, #16]
 8026fc8:	2b20      	cmp	r3, #32
 8026fca:	d104      	bne.n	8026fd6 <__gethex+0x202>
 8026fcc:	9b05      	ldr	r3, [sp, #20]
 8026fce:	c340      	stmia	r3!, {r6}
 8026fd0:	2600      	movs	r6, #0
 8026fd2:	9305      	str	r3, [sp, #20]
 8026fd4:	9604      	str	r6, [sp, #16]
 8026fd6:	7820      	ldrb	r0, [r4, #0]
 8026fd8:	f7ff fee7 	bl	8026daa <__hexdig_fun>
 8026fdc:	230f      	movs	r3, #15
 8026fde:	4018      	ands	r0, r3
 8026fe0:	9b04      	ldr	r3, [sp, #16]
 8026fe2:	4098      	lsls	r0, r3
 8026fe4:	3304      	adds	r3, #4
 8026fe6:	4306      	orrs	r6, r0
 8026fe8:	9304      	str	r3, [sp, #16]
 8026fea:	e7ac      	b.n	8026f46 <__gethex+0x172>
 8026fec:	9b00      	ldr	r3, [sp, #0]
 8026fee:	42a3      	cmp	r3, r4
 8026ff0:	d8e9      	bhi.n	8026fc6 <__gethex+0x1f2>
 8026ff2:	2201      	movs	r2, #1
 8026ff4:	0020      	movs	r0, r4
 8026ff6:	492b      	ldr	r1, [pc, #172]	@ (80270a4 <__gethex+0x2d0>)
 8026ff8:	f7fe feee 	bl	8025dd8 <strncmp>
 8026ffc:	2800      	cmp	r0, #0
 8026ffe:	d1e2      	bne.n	8026fc6 <__gethex+0x1f2>
 8027000:	e7a1      	b.n	8026f46 <__gethex+0x172>
 8027002:	0028      	movs	r0, r5
 8027004:	1eb1      	subs	r1, r6, #2
 8027006:	f000 ff44 	bl	8027e92 <__any_on>
 802700a:	2800      	cmp	r0, #0
 802700c:	d0c4      	beq.n	8026f98 <__gethex+0x1c4>
 802700e:	2403      	movs	r4, #3
 8027010:	e7c3      	b.n	8026f9a <__gethex+0x1c6>
 8027012:	9b00      	ldr	r3, [sp, #0]
 8027014:	2400      	movs	r4, #0
 8027016:	429e      	cmp	r6, r3
 8027018:	dac4      	bge.n	8026fa4 <__gethex+0x1d0>
 802701a:	1b9e      	subs	r6, r3, r6
 802701c:	0029      	movs	r1, r5
 802701e:	0032      	movs	r2, r6
 8027020:	9803      	ldr	r0, [sp, #12]
 8027022:	f000 fcfd 	bl	8027a20 <__lshift>
 8027026:	0003      	movs	r3, r0
 8027028:	3314      	adds	r3, #20
 802702a:	0005      	movs	r5, r0
 802702c:	1bbf      	subs	r7, r7, r6
 802702e:	9302      	str	r3, [sp, #8]
 8027030:	e7b8      	b.n	8026fa4 <__gethex+0x1d0>
 8027032:	9b01      	ldr	r3, [sp, #4]
 8027034:	685e      	ldr	r6, [r3, #4]
 8027036:	42be      	cmp	r6, r7
 8027038:	dd6f      	ble.n	802711a <__gethex+0x346>
 802703a:	9b00      	ldr	r3, [sp, #0]
 802703c:	1bf6      	subs	r6, r6, r7
 802703e:	42b3      	cmp	r3, r6
 8027040:	dc36      	bgt.n	80270b0 <__gethex+0x2dc>
 8027042:	9b01      	ldr	r3, [sp, #4]
 8027044:	68db      	ldr	r3, [r3, #12]
 8027046:	2b02      	cmp	r3, #2
 8027048:	d024      	beq.n	8027094 <__gethex+0x2c0>
 802704a:	2b03      	cmp	r3, #3
 802704c:	d026      	beq.n	802709c <__gethex+0x2c8>
 802704e:	2b01      	cmp	r3, #1
 8027050:	d117      	bne.n	8027082 <__gethex+0x2ae>
 8027052:	9b00      	ldr	r3, [sp, #0]
 8027054:	42b3      	cmp	r3, r6
 8027056:	d114      	bne.n	8027082 <__gethex+0x2ae>
 8027058:	2b01      	cmp	r3, #1
 802705a:	d10b      	bne.n	8027074 <__gethex+0x2a0>
 802705c:	9b01      	ldr	r3, [sp, #4]
 802705e:	9a07      	ldr	r2, [sp, #28]
 8027060:	685b      	ldr	r3, [r3, #4]
 8027062:	2662      	movs	r6, #98	@ 0x62
 8027064:	6013      	str	r3, [r2, #0]
 8027066:	2301      	movs	r3, #1
 8027068:	9a02      	ldr	r2, [sp, #8]
 802706a:	612b      	str	r3, [r5, #16]
 802706c:	6013      	str	r3, [r2, #0]
 802706e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027070:	601d      	str	r5, [r3, #0]
 8027072:	e739      	b.n	8026ee8 <__gethex+0x114>
 8027074:	9900      	ldr	r1, [sp, #0]
 8027076:	0028      	movs	r0, r5
 8027078:	3901      	subs	r1, #1
 802707a:	f000 ff0a 	bl	8027e92 <__any_on>
 802707e:	2800      	cmp	r0, #0
 8027080:	d1ec      	bne.n	802705c <__gethex+0x288>
 8027082:	0029      	movs	r1, r5
 8027084:	9803      	ldr	r0, [sp, #12]
 8027086:	f000 faa9 	bl	80275dc <_Bfree>
 802708a:	2300      	movs	r3, #0
 802708c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802708e:	2650      	movs	r6, #80	@ 0x50
 8027090:	6013      	str	r3, [r2, #0]
 8027092:	e729      	b.n	8026ee8 <__gethex+0x114>
 8027094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027096:	2b00      	cmp	r3, #0
 8027098:	d1f3      	bne.n	8027082 <__gethex+0x2ae>
 802709a:	e7df      	b.n	802705c <__gethex+0x288>
 802709c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802709e:	2b00      	cmp	r3, #0
 80270a0:	d1dc      	bne.n	802705c <__gethex+0x288>
 80270a2:	e7ee      	b.n	8027082 <__gethex+0x2ae>
 80270a4:	0802e854 	.word	0x0802e854
 80270a8:	0802e90e 	.word	0x0802e90e
 80270ac:	0802e91f 	.word	0x0802e91f
 80270b0:	1e77      	subs	r7, r6, #1
 80270b2:	2c00      	cmp	r4, #0
 80270b4:	d12f      	bne.n	8027116 <__gethex+0x342>
 80270b6:	2f00      	cmp	r7, #0
 80270b8:	d004      	beq.n	80270c4 <__gethex+0x2f0>
 80270ba:	0039      	movs	r1, r7
 80270bc:	0028      	movs	r0, r5
 80270be:	f000 fee8 	bl	8027e92 <__any_on>
 80270c2:	0004      	movs	r4, r0
 80270c4:	231f      	movs	r3, #31
 80270c6:	117a      	asrs	r2, r7, #5
 80270c8:	401f      	ands	r7, r3
 80270ca:	3b1e      	subs	r3, #30
 80270cc:	40bb      	lsls	r3, r7
 80270ce:	9902      	ldr	r1, [sp, #8]
 80270d0:	0092      	lsls	r2, r2, #2
 80270d2:	5852      	ldr	r2, [r2, r1]
 80270d4:	421a      	tst	r2, r3
 80270d6:	d001      	beq.n	80270dc <__gethex+0x308>
 80270d8:	2302      	movs	r3, #2
 80270da:	431c      	orrs	r4, r3
 80270dc:	9b00      	ldr	r3, [sp, #0]
 80270de:	0031      	movs	r1, r6
 80270e0:	1b9b      	subs	r3, r3, r6
 80270e2:	2602      	movs	r6, #2
 80270e4:	0028      	movs	r0, r5
 80270e6:	9300      	str	r3, [sp, #0]
 80270e8:	f7ff fe0c 	bl	8026d04 <rshift>
 80270ec:	9b01      	ldr	r3, [sp, #4]
 80270ee:	685f      	ldr	r7, [r3, #4]
 80270f0:	2c00      	cmp	r4, #0
 80270f2:	d03f      	beq.n	8027174 <__gethex+0x3a0>
 80270f4:	9b01      	ldr	r3, [sp, #4]
 80270f6:	68db      	ldr	r3, [r3, #12]
 80270f8:	2b02      	cmp	r3, #2
 80270fa:	d010      	beq.n	802711e <__gethex+0x34a>
 80270fc:	2b03      	cmp	r3, #3
 80270fe:	d012      	beq.n	8027126 <__gethex+0x352>
 8027100:	2b01      	cmp	r3, #1
 8027102:	d106      	bne.n	8027112 <__gethex+0x33e>
 8027104:	07a2      	lsls	r2, r4, #30
 8027106:	d504      	bpl.n	8027112 <__gethex+0x33e>
 8027108:	9a02      	ldr	r2, [sp, #8]
 802710a:	6812      	ldr	r2, [r2, #0]
 802710c:	4314      	orrs	r4, r2
 802710e:	421c      	tst	r4, r3
 8027110:	d10c      	bne.n	802712c <__gethex+0x358>
 8027112:	2310      	movs	r3, #16
 8027114:	e02d      	b.n	8027172 <__gethex+0x39e>
 8027116:	2401      	movs	r4, #1
 8027118:	e7d4      	b.n	80270c4 <__gethex+0x2f0>
 802711a:	2601      	movs	r6, #1
 802711c:	e7e8      	b.n	80270f0 <__gethex+0x31c>
 802711e:	2301      	movs	r3, #1
 8027120:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027122:	1a9b      	subs	r3, r3, r2
 8027124:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027128:	2b00      	cmp	r3, #0
 802712a:	d0f2      	beq.n	8027112 <__gethex+0x33e>
 802712c:	692b      	ldr	r3, [r5, #16]
 802712e:	2000      	movs	r0, #0
 8027130:	9302      	str	r3, [sp, #8]
 8027132:	009b      	lsls	r3, r3, #2
 8027134:	9304      	str	r3, [sp, #16]
 8027136:	002b      	movs	r3, r5
 8027138:	9a04      	ldr	r2, [sp, #16]
 802713a:	3314      	adds	r3, #20
 802713c:	1899      	adds	r1, r3, r2
 802713e:	681a      	ldr	r2, [r3, #0]
 8027140:	1c54      	adds	r4, r2, #1
 8027142:	d01c      	beq.n	802717e <__gethex+0x3aa>
 8027144:	3201      	adds	r2, #1
 8027146:	601a      	str	r2, [r3, #0]
 8027148:	002b      	movs	r3, r5
 802714a:	3314      	adds	r3, #20
 802714c:	2e02      	cmp	r6, #2
 802714e:	d13f      	bne.n	80271d0 <__gethex+0x3fc>
 8027150:	9a01      	ldr	r2, [sp, #4]
 8027152:	9900      	ldr	r1, [sp, #0]
 8027154:	6812      	ldr	r2, [r2, #0]
 8027156:	3a01      	subs	r2, #1
 8027158:	428a      	cmp	r2, r1
 802715a:	d109      	bne.n	8027170 <__gethex+0x39c>
 802715c:	000a      	movs	r2, r1
 802715e:	201f      	movs	r0, #31
 8027160:	4010      	ands	r0, r2
 8027162:	2201      	movs	r2, #1
 8027164:	4082      	lsls	r2, r0
 8027166:	1149      	asrs	r1, r1, #5
 8027168:	0089      	lsls	r1, r1, #2
 802716a:	58cb      	ldr	r3, [r1, r3]
 802716c:	4213      	tst	r3, r2
 802716e:	d13d      	bne.n	80271ec <__gethex+0x418>
 8027170:	2320      	movs	r3, #32
 8027172:	431e      	orrs	r6, r3
 8027174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027176:	601d      	str	r5, [r3, #0]
 8027178:	9b07      	ldr	r3, [sp, #28]
 802717a:	601f      	str	r7, [r3, #0]
 802717c:	e6b4      	b.n	8026ee8 <__gethex+0x114>
 802717e:	c301      	stmia	r3!, {r0}
 8027180:	4299      	cmp	r1, r3
 8027182:	d8dc      	bhi.n	802713e <__gethex+0x36a>
 8027184:	68ab      	ldr	r3, [r5, #8]
 8027186:	9a02      	ldr	r2, [sp, #8]
 8027188:	429a      	cmp	r2, r3
 802718a:	db18      	blt.n	80271be <__gethex+0x3ea>
 802718c:	6869      	ldr	r1, [r5, #4]
 802718e:	9803      	ldr	r0, [sp, #12]
 8027190:	3101      	adds	r1, #1
 8027192:	f000 f9df 	bl	8027554 <_Balloc>
 8027196:	1e04      	subs	r4, r0, #0
 8027198:	d104      	bne.n	80271a4 <__gethex+0x3d0>
 802719a:	0022      	movs	r2, r4
 802719c:	2184      	movs	r1, #132	@ 0x84
 802719e:	4b1d      	ldr	r3, [pc, #116]	@ (8027214 <__gethex+0x440>)
 80271a0:	481d      	ldr	r0, [pc, #116]	@ (8027218 <__gethex+0x444>)
 80271a2:	e6c4      	b.n	8026f2e <__gethex+0x15a>
 80271a4:	0029      	movs	r1, r5
 80271a6:	692a      	ldr	r2, [r5, #16]
 80271a8:	310c      	adds	r1, #12
 80271aa:	3202      	adds	r2, #2
 80271ac:	0092      	lsls	r2, r2, #2
 80271ae:	300c      	adds	r0, #12
 80271b0:	f7fe fed8 	bl	8025f64 <memcpy>
 80271b4:	0029      	movs	r1, r5
 80271b6:	9803      	ldr	r0, [sp, #12]
 80271b8:	f000 fa10 	bl	80275dc <_Bfree>
 80271bc:	0025      	movs	r5, r4
 80271be:	692b      	ldr	r3, [r5, #16]
 80271c0:	1c5a      	adds	r2, r3, #1
 80271c2:	612a      	str	r2, [r5, #16]
 80271c4:	2201      	movs	r2, #1
 80271c6:	3304      	adds	r3, #4
 80271c8:	009b      	lsls	r3, r3, #2
 80271ca:	18eb      	adds	r3, r5, r3
 80271cc:	605a      	str	r2, [r3, #4]
 80271ce:	e7bb      	b.n	8027148 <__gethex+0x374>
 80271d0:	692a      	ldr	r2, [r5, #16]
 80271d2:	9902      	ldr	r1, [sp, #8]
 80271d4:	428a      	cmp	r2, r1
 80271d6:	dd0b      	ble.n	80271f0 <__gethex+0x41c>
 80271d8:	2101      	movs	r1, #1
 80271da:	0028      	movs	r0, r5
 80271dc:	f7ff fd92 	bl	8026d04 <rshift>
 80271e0:	9b01      	ldr	r3, [sp, #4]
 80271e2:	3701      	adds	r7, #1
 80271e4:	689b      	ldr	r3, [r3, #8]
 80271e6:	42bb      	cmp	r3, r7
 80271e8:	da00      	bge.n	80271ec <__gethex+0x418>
 80271ea:	e6df      	b.n	8026fac <__gethex+0x1d8>
 80271ec:	2601      	movs	r6, #1
 80271ee:	e7bf      	b.n	8027170 <__gethex+0x39c>
 80271f0:	221f      	movs	r2, #31
 80271f2:	9c00      	ldr	r4, [sp, #0]
 80271f4:	9900      	ldr	r1, [sp, #0]
 80271f6:	4014      	ands	r4, r2
 80271f8:	4211      	tst	r1, r2
 80271fa:	d0f7      	beq.n	80271ec <__gethex+0x418>
 80271fc:	9a04      	ldr	r2, [sp, #16]
 80271fe:	189b      	adds	r3, r3, r2
 8027200:	3b04      	subs	r3, #4
 8027202:	6818      	ldr	r0, [r3, #0]
 8027204:	f000 fa9e 	bl	8027744 <__hi0bits>
 8027208:	2320      	movs	r3, #32
 802720a:	1b1b      	subs	r3, r3, r4
 802720c:	4298      	cmp	r0, r3
 802720e:	dbe3      	blt.n	80271d8 <__gethex+0x404>
 8027210:	e7ec      	b.n	80271ec <__gethex+0x418>
 8027212:	46c0      	nop			@ (mov r8, r8)
 8027214:	0802e90e 	.word	0x0802e90e
 8027218:	0802e91f 	.word	0x0802e91f

0802721c <L_shift>:
 802721c:	2308      	movs	r3, #8
 802721e:	b570      	push	{r4, r5, r6, lr}
 8027220:	2520      	movs	r5, #32
 8027222:	1a9a      	subs	r2, r3, r2
 8027224:	0092      	lsls	r2, r2, #2
 8027226:	1aad      	subs	r5, r5, r2
 8027228:	6843      	ldr	r3, [r0, #4]
 802722a:	6804      	ldr	r4, [r0, #0]
 802722c:	001e      	movs	r6, r3
 802722e:	40ae      	lsls	r6, r5
 8027230:	40d3      	lsrs	r3, r2
 8027232:	4334      	orrs	r4, r6
 8027234:	6004      	str	r4, [r0, #0]
 8027236:	6043      	str	r3, [r0, #4]
 8027238:	3004      	adds	r0, #4
 802723a:	4288      	cmp	r0, r1
 802723c:	d3f4      	bcc.n	8027228 <L_shift+0xc>
 802723e:	bd70      	pop	{r4, r5, r6, pc}

08027240 <__match>:
 8027240:	b530      	push	{r4, r5, lr}
 8027242:	6803      	ldr	r3, [r0, #0]
 8027244:	780c      	ldrb	r4, [r1, #0]
 8027246:	3301      	adds	r3, #1
 8027248:	2c00      	cmp	r4, #0
 802724a:	d102      	bne.n	8027252 <__match+0x12>
 802724c:	6003      	str	r3, [r0, #0]
 802724e:	2001      	movs	r0, #1
 8027250:	bd30      	pop	{r4, r5, pc}
 8027252:	781a      	ldrb	r2, [r3, #0]
 8027254:	0015      	movs	r5, r2
 8027256:	3d41      	subs	r5, #65	@ 0x41
 8027258:	2d19      	cmp	r5, #25
 802725a:	d800      	bhi.n	802725e <__match+0x1e>
 802725c:	3220      	adds	r2, #32
 802725e:	3101      	adds	r1, #1
 8027260:	42a2      	cmp	r2, r4
 8027262:	d0ef      	beq.n	8027244 <__match+0x4>
 8027264:	2000      	movs	r0, #0
 8027266:	e7f3      	b.n	8027250 <__match+0x10>

08027268 <__hexnan>:
 8027268:	b5f0      	push	{r4, r5, r6, r7, lr}
 802726a:	680b      	ldr	r3, [r1, #0]
 802726c:	b08b      	sub	sp, #44	@ 0x2c
 802726e:	9201      	str	r2, [sp, #4]
 8027270:	9901      	ldr	r1, [sp, #4]
 8027272:	115a      	asrs	r2, r3, #5
 8027274:	0092      	lsls	r2, r2, #2
 8027276:	188a      	adds	r2, r1, r2
 8027278:	9202      	str	r2, [sp, #8]
 802727a:	0019      	movs	r1, r3
 802727c:	221f      	movs	r2, #31
 802727e:	4011      	ands	r1, r2
 8027280:	9008      	str	r0, [sp, #32]
 8027282:	9106      	str	r1, [sp, #24]
 8027284:	4213      	tst	r3, r2
 8027286:	d002      	beq.n	802728e <__hexnan+0x26>
 8027288:	9b02      	ldr	r3, [sp, #8]
 802728a:	3304      	adds	r3, #4
 802728c:	9302      	str	r3, [sp, #8]
 802728e:	9b02      	ldr	r3, [sp, #8]
 8027290:	2500      	movs	r5, #0
 8027292:	1f1f      	subs	r7, r3, #4
 8027294:	003e      	movs	r6, r7
 8027296:	003c      	movs	r4, r7
 8027298:	9b08      	ldr	r3, [sp, #32]
 802729a:	603d      	str	r5, [r7, #0]
 802729c:	681b      	ldr	r3, [r3, #0]
 802729e:	9507      	str	r5, [sp, #28]
 80272a0:	9305      	str	r3, [sp, #20]
 80272a2:	9503      	str	r5, [sp, #12]
 80272a4:	9b05      	ldr	r3, [sp, #20]
 80272a6:	3301      	adds	r3, #1
 80272a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80272aa:	9b05      	ldr	r3, [sp, #20]
 80272ac:	785b      	ldrb	r3, [r3, #1]
 80272ae:	9304      	str	r3, [sp, #16]
 80272b0:	2b00      	cmp	r3, #0
 80272b2:	d028      	beq.n	8027306 <__hexnan+0x9e>
 80272b4:	9804      	ldr	r0, [sp, #16]
 80272b6:	f7ff fd78 	bl	8026daa <__hexdig_fun>
 80272ba:	2800      	cmp	r0, #0
 80272bc:	d155      	bne.n	802736a <__hexnan+0x102>
 80272be:	9b04      	ldr	r3, [sp, #16]
 80272c0:	2b20      	cmp	r3, #32
 80272c2:	d819      	bhi.n	80272f8 <__hexnan+0x90>
 80272c4:	9b03      	ldr	r3, [sp, #12]
 80272c6:	9a07      	ldr	r2, [sp, #28]
 80272c8:	4293      	cmp	r3, r2
 80272ca:	dd12      	ble.n	80272f2 <__hexnan+0x8a>
 80272cc:	42b4      	cmp	r4, r6
 80272ce:	d206      	bcs.n	80272de <__hexnan+0x76>
 80272d0:	2d07      	cmp	r5, #7
 80272d2:	dc04      	bgt.n	80272de <__hexnan+0x76>
 80272d4:	002a      	movs	r2, r5
 80272d6:	0031      	movs	r1, r6
 80272d8:	0020      	movs	r0, r4
 80272da:	f7ff ff9f 	bl	802721c <L_shift>
 80272de:	9b01      	ldr	r3, [sp, #4]
 80272e0:	2508      	movs	r5, #8
 80272e2:	429c      	cmp	r4, r3
 80272e4:	d905      	bls.n	80272f2 <__hexnan+0x8a>
 80272e6:	1f26      	subs	r6, r4, #4
 80272e8:	2500      	movs	r5, #0
 80272ea:	0034      	movs	r4, r6
 80272ec:	9b03      	ldr	r3, [sp, #12]
 80272ee:	6035      	str	r5, [r6, #0]
 80272f0:	9307      	str	r3, [sp, #28]
 80272f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272f4:	9305      	str	r3, [sp, #20]
 80272f6:	e7d5      	b.n	80272a4 <__hexnan+0x3c>
 80272f8:	9b04      	ldr	r3, [sp, #16]
 80272fa:	2b29      	cmp	r3, #41	@ 0x29
 80272fc:	d15a      	bne.n	80273b4 <__hexnan+0x14c>
 80272fe:	9b05      	ldr	r3, [sp, #20]
 8027300:	9a08      	ldr	r2, [sp, #32]
 8027302:	3302      	adds	r3, #2
 8027304:	6013      	str	r3, [r2, #0]
 8027306:	9b03      	ldr	r3, [sp, #12]
 8027308:	2b00      	cmp	r3, #0
 802730a:	d053      	beq.n	80273b4 <__hexnan+0x14c>
 802730c:	42b4      	cmp	r4, r6
 802730e:	d206      	bcs.n	802731e <__hexnan+0xb6>
 8027310:	2d07      	cmp	r5, #7
 8027312:	dc04      	bgt.n	802731e <__hexnan+0xb6>
 8027314:	002a      	movs	r2, r5
 8027316:	0031      	movs	r1, r6
 8027318:	0020      	movs	r0, r4
 802731a:	f7ff ff7f 	bl	802721c <L_shift>
 802731e:	9b01      	ldr	r3, [sp, #4]
 8027320:	429c      	cmp	r4, r3
 8027322:	d936      	bls.n	8027392 <__hexnan+0x12a>
 8027324:	001a      	movs	r2, r3
 8027326:	0023      	movs	r3, r4
 8027328:	cb02      	ldmia	r3!, {r1}
 802732a:	c202      	stmia	r2!, {r1}
 802732c:	429f      	cmp	r7, r3
 802732e:	d2fb      	bcs.n	8027328 <__hexnan+0xc0>
 8027330:	9b02      	ldr	r3, [sp, #8]
 8027332:	1c62      	adds	r2, r4, #1
 8027334:	1ed9      	subs	r1, r3, #3
 8027336:	2304      	movs	r3, #4
 8027338:	4291      	cmp	r1, r2
 802733a:	d305      	bcc.n	8027348 <__hexnan+0xe0>
 802733c:	9b02      	ldr	r3, [sp, #8]
 802733e:	3b04      	subs	r3, #4
 8027340:	1b1b      	subs	r3, r3, r4
 8027342:	089b      	lsrs	r3, r3, #2
 8027344:	3301      	adds	r3, #1
 8027346:	009b      	lsls	r3, r3, #2
 8027348:	9a01      	ldr	r2, [sp, #4]
 802734a:	18d3      	adds	r3, r2, r3
 802734c:	2200      	movs	r2, #0
 802734e:	c304      	stmia	r3!, {r2}
 8027350:	429f      	cmp	r7, r3
 8027352:	d2fc      	bcs.n	802734e <__hexnan+0xe6>
 8027354:	683b      	ldr	r3, [r7, #0]
 8027356:	2b00      	cmp	r3, #0
 8027358:	d104      	bne.n	8027364 <__hexnan+0xfc>
 802735a:	9b01      	ldr	r3, [sp, #4]
 802735c:	429f      	cmp	r7, r3
 802735e:	d127      	bne.n	80273b0 <__hexnan+0x148>
 8027360:	2301      	movs	r3, #1
 8027362:	603b      	str	r3, [r7, #0]
 8027364:	2005      	movs	r0, #5
 8027366:	b00b      	add	sp, #44	@ 0x2c
 8027368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802736a:	9b03      	ldr	r3, [sp, #12]
 802736c:	3501      	adds	r5, #1
 802736e:	3301      	adds	r3, #1
 8027370:	9303      	str	r3, [sp, #12]
 8027372:	2d08      	cmp	r5, #8
 8027374:	dd06      	ble.n	8027384 <__hexnan+0x11c>
 8027376:	9b01      	ldr	r3, [sp, #4]
 8027378:	429c      	cmp	r4, r3
 802737a:	d9ba      	bls.n	80272f2 <__hexnan+0x8a>
 802737c:	2300      	movs	r3, #0
 802737e:	2501      	movs	r5, #1
 8027380:	3c04      	subs	r4, #4
 8027382:	6023      	str	r3, [r4, #0]
 8027384:	220f      	movs	r2, #15
 8027386:	6823      	ldr	r3, [r4, #0]
 8027388:	4010      	ands	r0, r2
 802738a:	011b      	lsls	r3, r3, #4
 802738c:	4303      	orrs	r3, r0
 802738e:	6023      	str	r3, [r4, #0]
 8027390:	e7af      	b.n	80272f2 <__hexnan+0x8a>
 8027392:	9b06      	ldr	r3, [sp, #24]
 8027394:	2b00      	cmp	r3, #0
 8027396:	d0dd      	beq.n	8027354 <__hexnan+0xec>
 8027398:	2320      	movs	r3, #32
 802739a:	9a06      	ldr	r2, [sp, #24]
 802739c:	9902      	ldr	r1, [sp, #8]
 802739e:	1a9b      	subs	r3, r3, r2
 80273a0:	2201      	movs	r2, #1
 80273a2:	4252      	negs	r2, r2
 80273a4:	40da      	lsrs	r2, r3
 80273a6:	3904      	subs	r1, #4
 80273a8:	680b      	ldr	r3, [r1, #0]
 80273aa:	4013      	ands	r3, r2
 80273ac:	600b      	str	r3, [r1, #0]
 80273ae:	e7d1      	b.n	8027354 <__hexnan+0xec>
 80273b0:	3f04      	subs	r7, #4
 80273b2:	e7cf      	b.n	8027354 <__hexnan+0xec>
 80273b4:	2004      	movs	r0, #4
 80273b6:	e7d6      	b.n	8027366 <__hexnan+0xfe>

080273b8 <malloc>:
 80273b8:	b510      	push	{r4, lr}
 80273ba:	4b03      	ldr	r3, [pc, #12]	@ (80273c8 <malloc+0x10>)
 80273bc:	0001      	movs	r1, r0
 80273be:	6818      	ldr	r0, [r3, #0]
 80273c0:	f000 f826 	bl	8027410 <_malloc_r>
 80273c4:	bd10      	pop	{r4, pc}
 80273c6:	46c0      	nop			@ (mov r8, r8)
 80273c8:	200003e4 	.word	0x200003e4

080273cc <sbrk_aligned>:
 80273cc:	b570      	push	{r4, r5, r6, lr}
 80273ce:	4e0f      	ldr	r6, [pc, #60]	@ (802740c <sbrk_aligned+0x40>)
 80273d0:	000d      	movs	r5, r1
 80273d2:	6831      	ldr	r1, [r6, #0]
 80273d4:	0004      	movs	r4, r0
 80273d6:	2900      	cmp	r1, #0
 80273d8:	d102      	bne.n	80273e0 <sbrk_aligned+0x14>
 80273da:	f001 f981 	bl	80286e0 <_sbrk_r>
 80273de:	6030      	str	r0, [r6, #0]
 80273e0:	0029      	movs	r1, r5
 80273e2:	0020      	movs	r0, r4
 80273e4:	f001 f97c 	bl	80286e0 <_sbrk_r>
 80273e8:	1c43      	adds	r3, r0, #1
 80273ea:	d103      	bne.n	80273f4 <sbrk_aligned+0x28>
 80273ec:	2501      	movs	r5, #1
 80273ee:	426d      	negs	r5, r5
 80273f0:	0028      	movs	r0, r5
 80273f2:	bd70      	pop	{r4, r5, r6, pc}
 80273f4:	2303      	movs	r3, #3
 80273f6:	1cc5      	adds	r5, r0, #3
 80273f8:	439d      	bics	r5, r3
 80273fa:	42a8      	cmp	r0, r5
 80273fc:	d0f8      	beq.n	80273f0 <sbrk_aligned+0x24>
 80273fe:	1a29      	subs	r1, r5, r0
 8027400:	0020      	movs	r0, r4
 8027402:	f001 f96d 	bl	80286e0 <_sbrk_r>
 8027406:	3001      	adds	r0, #1
 8027408:	d1f2      	bne.n	80273f0 <sbrk_aligned+0x24>
 802740a:	e7ef      	b.n	80273ec <sbrk_aligned+0x20>
 802740c:	20003654 	.word	0x20003654

08027410 <_malloc_r>:
 8027410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027412:	2203      	movs	r2, #3
 8027414:	1ccb      	adds	r3, r1, #3
 8027416:	4393      	bics	r3, r2
 8027418:	3308      	adds	r3, #8
 802741a:	0005      	movs	r5, r0
 802741c:	001f      	movs	r7, r3
 802741e:	2b0c      	cmp	r3, #12
 8027420:	d234      	bcs.n	802748c <_malloc_r+0x7c>
 8027422:	270c      	movs	r7, #12
 8027424:	42b9      	cmp	r1, r7
 8027426:	d833      	bhi.n	8027490 <_malloc_r+0x80>
 8027428:	0028      	movs	r0, r5
 802742a:	f000 f883 	bl	8027534 <__malloc_lock>
 802742e:	4e37      	ldr	r6, [pc, #220]	@ (802750c <_malloc_r+0xfc>)
 8027430:	6833      	ldr	r3, [r6, #0]
 8027432:	001c      	movs	r4, r3
 8027434:	2c00      	cmp	r4, #0
 8027436:	d12f      	bne.n	8027498 <_malloc_r+0x88>
 8027438:	0039      	movs	r1, r7
 802743a:	0028      	movs	r0, r5
 802743c:	f7ff ffc6 	bl	80273cc <sbrk_aligned>
 8027440:	0004      	movs	r4, r0
 8027442:	1c43      	adds	r3, r0, #1
 8027444:	d15f      	bne.n	8027506 <_malloc_r+0xf6>
 8027446:	6834      	ldr	r4, [r6, #0]
 8027448:	9400      	str	r4, [sp, #0]
 802744a:	9b00      	ldr	r3, [sp, #0]
 802744c:	2b00      	cmp	r3, #0
 802744e:	d14a      	bne.n	80274e6 <_malloc_r+0xd6>
 8027450:	2c00      	cmp	r4, #0
 8027452:	d052      	beq.n	80274fa <_malloc_r+0xea>
 8027454:	6823      	ldr	r3, [r4, #0]
 8027456:	0028      	movs	r0, r5
 8027458:	18e3      	adds	r3, r4, r3
 802745a:	9900      	ldr	r1, [sp, #0]
 802745c:	9301      	str	r3, [sp, #4]
 802745e:	f001 f93f 	bl	80286e0 <_sbrk_r>
 8027462:	9b01      	ldr	r3, [sp, #4]
 8027464:	4283      	cmp	r3, r0
 8027466:	d148      	bne.n	80274fa <_malloc_r+0xea>
 8027468:	6823      	ldr	r3, [r4, #0]
 802746a:	0028      	movs	r0, r5
 802746c:	1aff      	subs	r7, r7, r3
 802746e:	0039      	movs	r1, r7
 8027470:	f7ff ffac 	bl	80273cc <sbrk_aligned>
 8027474:	3001      	adds	r0, #1
 8027476:	d040      	beq.n	80274fa <_malloc_r+0xea>
 8027478:	6823      	ldr	r3, [r4, #0]
 802747a:	19db      	adds	r3, r3, r7
 802747c:	6023      	str	r3, [r4, #0]
 802747e:	6833      	ldr	r3, [r6, #0]
 8027480:	685a      	ldr	r2, [r3, #4]
 8027482:	2a00      	cmp	r2, #0
 8027484:	d133      	bne.n	80274ee <_malloc_r+0xde>
 8027486:	9b00      	ldr	r3, [sp, #0]
 8027488:	6033      	str	r3, [r6, #0]
 802748a:	e019      	b.n	80274c0 <_malloc_r+0xb0>
 802748c:	2b00      	cmp	r3, #0
 802748e:	dac9      	bge.n	8027424 <_malloc_r+0x14>
 8027490:	230c      	movs	r3, #12
 8027492:	602b      	str	r3, [r5, #0]
 8027494:	2000      	movs	r0, #0
 8027496:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027498:	6821      	ldr	r1, [r4, #0]
 802749a:	1bc9      	subs	r1, r1, r7
 802749c:	d420      	bmi.n	80274e0 <_malloc_r+0xd0>
 802749e:	290b      	cmp	r1, #11
 80274a0:	d90a      	bls.n	80274b8 <_malloc_r+0xa8>
 80274a2:	19e2      	adds	r2, r4, r7
 80274a4:	6027      	str	r7, [r4, #0]
 80274a6:	42a3      	cmp	r3, r4
 80274a8:	d104      	bne.n	80274b4 <_malloc_r+0xa4>
 80274aa:	6032      	str	r2, [r6, #0]
 80274ac:	6863      	ldr	r3, [r4, #4]
 80274ae:	6011      	str	r1, [r2, #0]
 80274b0:	6053      	str	r3, [r2, #4]
 80274b2:	e005      	b.n	80274c0 <_malloc_r+0xb0>
 80274b4:	605a      	str	r2, [r3, #4]
 80274b6:	e7f9      	b.n	80274ac <_malloc_r+0x9c>
 80274b8:	6862      	ldr	r2, [r4, #4]
 80274ba:	42a3      	cmp	r3, r4
 80274bc:	d10e      	bne.n	80274dc <_malloc_r+0xcc>
 80274be:	6032      	str	r2, [r6, #0]
 80274c0:	0028      	movs	r0, r5
 80274c2:	f000 f83f 	bl	8027544 <__malloc_unlock>
 80274c6:	0020      	movs	r0, r4
 80274c8:	2207      	movs	r2, #7
 80274ca:	300b      	adds	r0, #11
 80274cc:	1d23      	adds	r3, r4, #4
 80274ce:	4390      	bics	r0, r2
 80274d0:	1ac2      	subs	r2, r0, r3
 80274d2:	4298      	cmp	r0, r3
 80274d4:	d0df      	beq.n	8027496 <_malloc_r+0x86>
 80274d6:	1a1b      	subs	r3, r3, r0
 80274d8:	50a3      	str	r3, [r4, r2]
 80274da:	e7dc      	b.n	8027496 <_malloc_r+0x86>
 80274dc:	605a      	str	r2, [r3, #4]
 80274de:	e7ef      	b.n	80274c0 <_malloc_r+0xb0>
 80274e0:	0023      	movs	r3, r4
 80274e2:	6864      	ldr	r4, [r4, #4]
 80274e4:	e7a6      	b.n	8027434 <_malloc_r+0x24>
 80274e6:	9c00      	ldr	r4, [sp, #0]
 80274e8:	6863      	ldr	r3, [r4, #4]
 80274ea:	9300      	str	r3, [sp, #0]
 80274ec:	e7ad      	b.n	802744a <_malloc_r+0x3a>
 80274ee:	001a      	movs	r2, r3
 80274f0:	685b      	ldr	r3, [r3, #4]
 80274f2:	42a3      	cmp	r3, r4
 80274f4:	d1fb      	bne.n	80274ee <_malloc_r+0xde>
 80274f6:	2300      	movs	r3, #0
 80274f8:	e7da      	b.n	80274b0 <_malloc_r+0xa0>
 80274fa:	230c      	movs	r3, #12
 80274fc:	0028      	movs	r0, r5
 80274fe:	602b      	str	r3, [r5, #0]
 8027500:	f000 f820 	bl	8027544 <__malloc_unlock>
 8027504:	e7c6      	b.n	8027494 <_malloc_r+0x84>
 8027506:	6007      	str	r7, [r0, #0]
 8027508:	e7da      	b.n	80274c0 <_malloc_r+0xb0>
 802750a:	46c0      	nop			@ (mov r8, r8)
 802750c:	20003658 	.word	0x20003658

08027510 <__ascii_mbtowc>:
 8027510:	b082      	sub	sp, #8
 8027512:	2900      	cmp	r1, #0
 8027514:	d100      	bne.n	8027518 <__ascii_mbtowc+0x8>
 8027516:	a901      	add	r1, sp, #4
 8027518:	1e10      	subs	r0, r2, #0
 802751a:	d006      	beq.n	802752a <__ascii_mbtowc+0x1a>
 802751c:	2b00      	cmp	r3, #0
 802751e:	d006      	beq.n	802752e <__ascii_mbtowc+0x1e>
 8027520:	7813      	ldrb	r3, [r2, #0]
 8027522:	600b      	str	r3, [r1, #0]
 8027524:	7810      	ldrb	r0, [r2, #0]
 8027526:	1e43      	subs	r3, r0, #1
 8027528:	4198      	sbcs	r0, r3
 802752a:	b002      	add	sp, #8
 802752c:	4770      	bx	lr
 802752e:	2002      	movs	r0, #2
 8027530:	4240      	negs	r0, r0
 8027532:	e7fa      	b.n	802752a <__ascii_mbtowc+0x1a>

08027534 <__malloc_lock>:
 8027534:	b510      	push	{r4, lr}
 8027536:	4802      	ldr	r0, [pc, #8]	@ (8027540 <__malloc_lock+0xc>)
 8027538:	f7fe fd07 	bl	8025f4a <__retarget_lock_acquire_recursive>
 802753c:	bd10      	pop	{r4, pc}
 802753e:	46c0      	nop			@ (mov r8, r8)
 8027540:	20003650 	.word	0x20003650

08027544 <__malloc_unlock>:
 8027544:	b510      	push	{r4, lr}
 8027546:	4802      	ldr	r0, [pc, #8]	@ (8027550 <__malloc_unlock+0xc>)
 8027548:	f7fe fd00 	bl	8025f4c <__retarget_lock_release_recursive>
 802754c:	bd10      	pop	{r4, pc}
 802754e:	46c0      	nop			@ (mov r8, r8)
 8027550:	20003650 	.word	0x20003650

08027554 <_Balloc>:
 8027554:	b570      	push	{r4, r5, r6, lr}
 8027556:	69c5      	ldr	r5, [r0, #28]
 8027558:	0006      	movs	r6, r0
 802755a:	000c      	movs	r4, r1
 802755c:	2d00      	cmp	r5, #0
 802755e:	d10e      	bne.n	802757e <_Balloc+0x2a>
 8027560:	2010      	movs	r0, #16
 8027562:	f7ff ff29 	bl	80273b8 <malloc>
 8027566:	1e02      	subs	r2, r0, #0
 8027568:	61f0      	str	r0, [r6, #28]
 802756a:	d104      	bne.n	8027576 <_Balloc+0x22>
 802756c:	216b      	movs	r1, #107	@ 0x6b
 802756e:	4b19      	ldr	r3, [pc, #100]	@ (80275d4 <_Balloc+0x80>)
 8027570:	4819      	ldr	r0, [pc, #100]	@ (80275d8 <_Balloc+0x84>)
 8027572:	f001 f8c7 	bl	8028704 <__assert_func>
 8027576:	6045      	str	r5, [r0, #4]
 8027578:	6085      	str	r5, [r0, #8]
 802757a:	6005      	str	r5, [r0, #0]
 802757c:	60c5      	str	r5, [r0, #12]
 802757e:	69f5      	ldr	r5, [r6, #28]
 8027580:	68eb      	ldr	r3, [r5, #12]
 8027582:	2b00      	cmp	r3, #0
 8027584:	d013      	beq.n	80275ae <_Balloc+0x5a>
 8027586:	69f3      	ldr	r3, [r6, #28]
 8027588:	00a2      	lsls	r2, r4, #2
 802758a:	68db      	ldr	r3, [r3, #12]
 802758c:	189b      	adds	r3, r3, r2
 802758e:	6818      	ldr	r0, [r3, #0]
 8027590:	2800      	cmp	r0, #0
 8027592:	d118      	bne.n	80275c6 <_Balloc+0x72>
 8027594:	2101      	movs	r1, #1
 8027596:	000d      	movs	r5, r1
 8027598:	40a5      	lsls	r5, r4
 802759a:	1d6a      	adds	r2, r5, #5
 802759c:	0030      	movs	r0, r6
 802759e:	0092      	lsls	r2, r2, #2
 80275a0:	f001 f8ce 	bl	8028740 <_calloc_r>
 80275a4:	2800      	cmp	r0, #0
 80275a6:	d00c      	beq.n	80275c2 <_Balloc+0x6e>
 80275a8:	6044      	str	r4, [r0, #4]
 80275aa:	6085      	str	r5, [r0, #8]
 80275ac:	e00d      	b.n	80275ca <_Balloc+0x76>
 80275ae:	2221      	movs	r2, #33	@ 0x21
 80275b0:	2104      	movs	r1, #4
 80275b2:	0030      	movs	r0, r6
 80275b4:	f001 f8c4 	bl	8028740 <_calloc_r>
 80275b8:	69f3      	ldr	r3, [r6, #28]
 80275ba:	60e8      	str	r0, [r5, #12]
 80275bc:	68db      	ldr	r3, [r3, #12]
 80275be:	2b00      	cmp	r3, #0
 80275c0:	d1e1      	bne.n	8027586 <_Balloc+0x32>
 80275c2:	2000      	movs	r0, #0
 80275c4:	bd70      	pop	{r4, r5, r6, pc}
 80275c6:	6802      	ldr	r2, [r0, #0]
 80275c8:	601a      	str	r2, [r3, #0]
 80275ca:	2300      	movs	r3, #0
 80275cc:	6103      	str	r3, [r0, #16]
 80275ce:	60c3      	str	r3, [r0, #12]
 80275d0:	e7f8      	b.n	80275c4 <_Balloc+0x70>
 80275d2:	46c0      	nop			@ (mov r8, r8)
 80275d4:	0802e89f 	.word	0x0802e89f
 80275d8:	0802e97f 	.word	0x0802e97f

080275dc <_Bfree>:
 80275dc:	b570      	push	{r4, r5, r6, lr}
 80275de:	69c6      	ldr	r6, [r0, #28]
 80275e0:	0005      	movs	r5, r0
 80275e2:	000c      	movs	r4, r1
 80275e4:	2e00      	cmp	r6, #0
 80275e6:	d10e      	bne.n	8027606 <_Bfree+0x2a>
 80275e8:	2010      	movs	r0, #16
 80275ea:	f7ff fee5 	bl	80273b8 <malloc>
 80275ee:	1e02      	subs	r2, r0, #0
 80275f0:	61e8      	str	r0, [r5, #28]
 80275f2:	d104      	bne.n	80275fe <_Bfree+0x22>
 80275f4:	218f      	movs	r1, #143	@ 0x8f
 80275f6:	4b09      	ldr	r3, [pc, #36]	@ (802761c <_Bfree+0x40>)
 80275f8:	4809      	ldr	r0, [pc, #36]	@ (8027620 <_Bfree+0x44>)
 80275fa:	f001 f883 	bl	8028704 <__assert_func>
 80275fe:	6046      	str	r6, [r0, #4]
 8027600:	6086      	str	r6, [r0, #8]
 8027602:	6006      	str	r6, [r0, #0]
 8027604:	60c6      	str	r6, [r0, #12]
 8027606:	2c00      	cmp	r4, #0
 8027608:	d007      	beq.n	802761a <_Bfree+0x3e>
 802760a:	69eb      	ldr	r3, [r5, #28]
 802760c:	6862      	ldr	r2, [r4, #4]
 802760e:	68db      	ldr	r3, [r3, #12]
 8027610:	0092      	lsls	r2, r2, #2
 8027612:	189b      	adds	r3, r3, r2
 8027614:	681a      	ldr	r2, [r3, #0]
 8027616:	6022      	str	r2, [r4, #0]
 8027618:	601c      	str	r4, [r3, #0]
 802761a:	bd70      	pop	{r4, r5, r6, pc}
 802761c:	0802e89f 	.word	0x0802e89f
 8027620:	0802e97f 	.word	0x0802e97f

08027624 <__multadd>:
 8027624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027626:	000f      	movs	r7, r1
 8027628:	9001      	str	r0, [sp, #4]
 802762a:	000c      	movs	r4, r1
 802762c:	001e      	movs	r6, r3
 802762e:	2000      	movs	r0, #0
 8027630:	690d      	ldr	r5, [r1, #16]
 8027632:	3714      	adds	r7, #20
 8027634:	683b      	ldr	r3, [r7, #0]
 8027636:	3001      	adds	r0, #1
 8027638:	b299      	uxth	r1, r3
 802763a:	4351      	muls	r1, r2
 802763c:	0c1b      	lsrs	r3, r3, #16
 802763e:	4353      	muls	r3, r2
 8027640:	1989      	adds	r1, r1, r6
 8027642:	0c0e      	lsrs	r6, r1, #16
 8027644:	199b      	adds	r3, r3, r6
 8027646:	0c1e      	lsrs	r6, r3, #16
 8027648:	b289      	uxth	r1, r1
 802764a:	041b      	lsls	r3, r3, #16
 802764c:	185b      	adds	r3, r3, r1
 802764e:	c708      	stmia	r7!, {r3}
 8027650:	4285      	cmp	r5, r0
 8027652:	dcef      	bgt.n	8027634 <__multadd+0x10>
 8027654:	2e00      	cmp	r6, #0
 8027656:	d022      	beq.n	802769e <__multadd+0x7a>
 8027658:	68a3      	ldr	r3, [r4, #8]
 802765a:	42ab      	cmp	r3, r5
 802765c:	dc19      	bgt.n	8027692 <__multadd+0x6e>
 802765e:	6861      	ldr	r1, [r4, #4]
 8027660:	9801      	ldr	r0, [sp, #4]
 8027662:	3101      	adds	r1, #1
 8027664:	f7ff ff76 	bl	8027554 <_Balloc>
 8027668:	1e07      	subs	r7, r0, #0
 802766a:	d105      	bne.n	8027678 <__multadd+0x54>
 802766c:	003a      	movs	r2, r7
 802766e:	21ba      	movs	r1, #186	@ 0xba
 8027670:	4b0c      	ldr	r3, [pc, #48]	@ (80276a4 <__multadd+0x80>)
 8027672:	480d      	ldr	r0, [pc, #52]	@ (80276a8 <__multadd+0x84>)
 8027674:	f001 f846 	bl	8028704 <__assert_func>
 8027678:	0021      	movs	r1, r4
 802767a:	6922      	ldr	r2, [r4, #16]
 802767c:	310c      	adds	r1, #12
 802767e:	3202      	adds	r2, #2
 8027680:	0092      	lsls	r2, r2, #2
 8027682:	300c      	adds	r0, #12
 8027684:	f7fe fc6e 	bl	8025f64 <memcpy>
 8027688:	0021      	movs	r1, r4
 802768a:	9801      	ldr	r0, [sp, #4]
 802768c:	f7ff ffa6 	bl	80275dc <_Bfree>
 8027690:	003c      	movs	r4, r7
 8027692:	1d2b      	adds	r3, r5, #4
 8027694:	009b      	lsls	r3, r3, #2
 8027696:	18e3      	adds	r3, r4, r3
 8027698:	3501      	adds	r5, #1
 802769a:	605e      	str	r6, [r3, #4]
 802769c:	6125      	str	r5, [r4, #16]
 802769e:	0020      	movs	r0, r4
 80276a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80276a2:	46c0      	nop			@ (mov r8, r8)
 80276a4:	0802e90e 	.word	0x0802e90e
 80276a8:	0802e97f 	.word	0x0802e97f

080276ac <__s2b>:
 80276ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80276ae:	0007      	movs	r7, r0
 80276b0:	0018      	movs	r0, r3
 80276b2:	000c      	movs	r4, r1
 80276b4:	3008      	adds	r0, #8
 80276b6:	2109      	movs	r1, #9
 80276b8:	9301      	str	r3, [sp, #4]
 80276ba:	0015      	movs	r5, r2
 80276bc:	f7d8 fdfc 	bl	80002b8 <__divsi3>
 80276c0:	2301      	movs	r3, #1
 80276c2:	2100      	movs	r1, #0
 80276c4:	4283      	cmp	r3, r0
 80276c6:	db0a      	blt.n	80276de <__s2b+0x32>
 80276c8:	0038      	movs	r0, r7
 80276ca:	f7ff ff43 	bl	8027554 <_Balloc>
 80276ce:	1e01      	subs	r1, r0, #0
 80276d0:	d108      	bne.n	80276e4 <__s2b+0x38>
 80276d2:	000a      	movs	r2, r1
 80276d4:	4b19      	ldr	r3, [pc, #100]	@ (802773c <__s2b+0x90>)
 80276d6:	481a      	ldr	r0, [pc, #104]	@ (8027740 <__s2b+0x94>)
 80276d8:	31d3      	adds	r1, #211	@ 0xd3
 80276da:	f001 f813 	bl	8028704 <__assert_func>
 80276de:	005b      	lsls	r3, r3, #1
 80276e0:	3101      	adds	r1, #1
 80276e2:	e7ef      	b.n	80276c4 <__s2b+0x18>
 80276e4:	9b08      	ldr	r3, [sp, #32]
 80276e6:	6143      	str	r3, [r0, #20]
 80276e8:	2301      	movs	r3, #1
 80276ea:	6103      	str	r3, [r0, #16]
 80276ec:	2d09      	cmp	r5, #9
 80276ee:	dd18      	ble.n	8027722 <__s2b+0x76>
 80276f0:	0023      	movs	r3, r4
 80276f2:	3309      	adds	r3, #9
 80276f4:	001e      	movs	r6, r3
 80276f6:	9300      	str	r3, [sp, #0]
 80276f8:	1964      	adds	r4, r4, r5
 80276fa:	7833      	ldrb	r3, [r6, #0]
 80276fc:	220a      	movs	r2, #10
 80276fe:	0038      	movs	r0, r7
 8027700:	3b30      	subs	r3, #48	@ 0x30
 8027702:	f7ff ff8f 	bl	8027624 <__multadd>
 8027706:	3601      	adds	r6, #1
 8027708:	0001      	movs	r1, r0
 802770a:	42a6      	cmp	r6, r4
 802770c:	d1f5      	bne.n	80276fa <__s2b+0x4e>
 802770e:	002c      	movs	r4, r5
 8027710:	9b00      	ldr	r3, [sp, #0]
 8027712:	3c08      	subs	r4, #8
 8027714:	191c      	adds	r4, r3, r4
 8027716:	002e      	movs	r6, r5
 8027718:	9b01      	ldr	r3, [sp, #4]
 802771a:	429e      	cmp	r6, r3
 802771c:	db04      	blt.n	8027728 <__s2b+0x7c>
 802771e:	0008      	movs	r0, r1
 8027720:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027722:	2509      	movs	r5, #9
 8027724:	340a      	adds	r4, #10
 8027726:	e7f6      	b.n	8027716 <__s2b+0x6a>
 8027728:	1b63      	subs	r3, r4, r5
 802772a:	5d9b      	ldrb	r3, [r3, r6]
 802772c:	220a      	movs	r2, #10
 802772e:	0038      	movs	r0, r7
 8027730:	3b30      	subs	r3, #48	@ 0x30
 8027732:	f7ff ff77 	bl	8027624 <__multadd>
 8027736:	3601      	adds	r6, #1
 8027738:	0001      	movs	r1, r0
 802773a:	e7ed      	b.n	8027718 <__s2b+0x6c>
 802773c:	0802e90e 	.word	0x0802e90e
 8027740:	0802e97f 	.word	0x0802e97f

08027744 <__hi0bits>:
 8027744:	2280      	movs	r2, #128	@ 0x80
 8027746:	0003      	movs	r3, r0
 8027748:	0252      	lsls	r2, r2, #9
 802774a:	2000      	movs	r0, #0
 802774c:	4293      	cmp	r3, r2
 802774e:	d201      	bcs.n	8027754 <__hi0bits+0x10>
 8027750:	041b      	lsls	r3, r3, #16
 8027752:	3010      	adds	r0, #16
 8027754:	2280      	movs	r2, #128	@ 0x80
 8027756:	0452      	lsls	r2, r2, #17
 8027758:	4293      	cmp	r3, r2
 802775a:	d201      	bcs.n	8027760 <__hi0bits+0x1c>
 802775c:	3008      	adds	r0, #8
 802775e:	021b      	lsls	r3, r3, #8
 8027760:	2280      	movs	r2, #128	@ 0x80
 8027762:	0552      	lsls	r2, r2, #21
 8027764:	4293      	cmp	r3, r2
 8027766:	d201      	bcs.n	802776c <__hi0bits+0x28>
 8027768:	3004      	adds	r0, #4
 802776a:	011b      	lsls	r3, r3, #4
 802776c:	2280      	movs	r2, #128	@ 0x80
 802776e:	05d2      	lsls	r2, r2, #23
 8027770:	4293      	cmp	r3, r2
 8027772:	d201      	bcs.n	8027778 <__hi0bits+0x34>
 8027774:	3002      	adds	r0, #2
 8027776:	009b      	lsls	r3, r3, #2
 8027778:	2b00      	cmp	r3, #0
 802777a:	db03      	blt.n	8027784 <__hi0bits+0x40>
 802777c:	3001      	adds	r0, #1
 802777e:	4213      	tst	r3, r2
 8027780:	d100      	bne.n	8027784 <__hi0bits+0x40>
 8027782:	2020      	movs	r0, #32
 8027784:	4770      	bx	lr

08027786 <__lo0bits>:
 8027786:	6803      	ldr	r3, [r0, #0]
 8027788:	0001      	movs	r1, r0
 802778a:	2207      	movs	r2, #7
 802778c:	0018      	movs	r0, r3
 802778e:	4010      	ands	r0, r2
 8027790:	4213      	tst	r3, r2
 8027792:	d00d      	beq.n	80277b0 <__lo0bits+0x2a>
 8027794:	3a06      	subs	r2, #6
 8027796:	2000      	movs	r0, #0
 8027798:	4213      	tst	r3, r2
 802779a:	d105      	bne.n	80277a8 <__lo0bits+0x22>
 802779c:	3002      	adds	r0, #2
 802779e:	4203      	tst	r3, r0
 80277a0:	d003      	beq.n	80277aa <__lo0bits+0x24>
 80277a2:	40d3      	lsrs	r3, r2
 80277a4:	0010      	movs	r0, r2
 80277a6:	600b      	str	r3, [r1, #0]
 80277a8:	4770      	bx	lr
 80277aa:	089b      	lsrs	r3, r3, #2
 80277ac:	600b      	str	r3, [r1, #0]
 80277ae:	e7fb      	b.n	80277a8 <__lo0bits+0x22>
 80277b0:	b29a      	uxth	r2, r3
 80277b2:	2a00      	cmp	r2, #0
 80277b4:	d101      	bne.n	80277ba <__lo0bits+0x34>
 80277b6:	2010      	movs	r0, #16
 80277b8:	0c1b      	lsrs	r3, r3, #16
 80277ba:	b2da      	uxtb	r2, r3
 80277bc:	2a00      	cmp	r2, #0
 80277be:	d101      	bne.n	80277c4 <__lo0bits+0x3e>
 80277c0:	3008      	adds	r0, #8
 80277c2:	0a1b      	lsrs	r3, r3, #8
 80277c4:	071a      	lsls	r2, r3, #28
 80277c6:	d101      	bne.n	80277cc <__lo0bits+0x46>
 80277c8:	3004      	adds	r0, #4
 80277ca:	091b      	lsrs	r3, r3, #4
 80277cc:	079a      	lsls	r2, r3, #30
 80277ce:	d101      	bne.n	80277d4 <__lo0bits+0x4e>
 80277d0:	3002      	adds	r0, #2
 80277d2:	089b      	lsrs	r3, r3, #2
 80277d4:	07da      	lsls	r2, r3, #31
 80277d6:	d4e9      	bmi.n	80277ac <__lo0bits+0x26>
 80277d8:	3001      	adds	r0, #1
 80277da:	085b      	lsrs	r3, r3, #1
 80277dc:	d1e6      	bne.n	80277ac <__lo0bits+0x26>
 80277de:	2020      	movs	r0, #32
 80277e0:	e7e2      	b.n	80277a8 <__lo0bits+0x22>
	...

080277e4 <__i2b>:
 80277e4:	b510      	push	{r4, lr}
 80277e6:	000c      	movs	r4, r1
 80277e8:	2101      	movs	r1, #1
 80277ea:	f7ff feb3 	bl	8027554 <_Balloc>
 80277ee:	2800      	cmp	r0, #0
 80277f0:	d107      	bne.n	8027802 <__i2b+0x1e>
 80277f2:	2146      	movs	r1, #70	@ 0x46
 80277f4:	4c05      	ldr	r4, [pc, #20]	@ (802780c <__i2b+0x28>)
 80277f6:	0002      	movs	r2, r0
 80277f8:	4b05      	ldr	r3, [pc, #20]	@ (8027810 <__i2b+0x2c>)
 80277fa:	0020      	movs	r0, r4
 80277fc:	31ff      	adds	r1, #255	@ 0xff
 80277fe:	f000 ff81 	bl	8028704 <__assert_func>
 8027802:	2301      	movs	r3, #1
 8027804:	6144      	str	r4, [r0, #20]
 8027806:	6103      	str	r3, [r0, #16]
 8027808:	bd10      	pop	{r4, pc}
 802780a:	46c0      	nop			@ (mov r8, r8)
 802780c:	0802e97f 	.word	0x0802e97f
 8027810:	0802e90e 	.word	0x0802e90e

08027814 <__multiply>:
 8027814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027816:	0014      	movs	r4, r2
 8027818:	690a      	ldr	r2, [r1, #16]
 802781a:	6923      	ldr	r3, [r4, #16]
 802781c:	000d      	movs	r5, r1
 802781e:	b089      	sub	sp, #36	@ 0x24
 8027820:	429a      	cmp	r2, r3
 8027822:	db02      	blt.n	802782a <__multiply+0x16>
 8027824:	0023      	movs	r3, r4
 8027826:	000c      	movs	r4, r1
 8027828:	001d      	movs	r5, r3
 802782a:	6927      	ldr	r7, [r4, #16]
 802782c:	692e      	ldr	r6, [r5, #16]
 802782e:	6861      	ldr	r1, [r4, #4]
 8027830:	19bb      	adds	r3, r7, r6
 8027832:	9300      	str	r3, [sp, #0]
 8027834:	68a3      	ldr	r3, [r4, #8]
 8027836:	19ba      	adds	r2, r7, r6
 8027838:	4293      	cmp	r3, r2
 802783a:	da00      	bge.n	802783e <__multiply+0x2a>
 802783c:	3101      	adds	r1, #1
 802783e:	f7ff fe89 	bl	8027554 <_Balloc>
 8027842:	4684      	mov	ip, r0
 8027844:	2800      	cmp	r0, #0
 8027846:	d106      	bne.n	8027856 <__multiply+0x42>
 8027848:	21b1      	movs	r1, #177	@ 0xb1
 802784a:	4662      	mov	r2, ip
 802784c:	4b44      	ldr	r3, [pc, #272]	@ (8027960 <__multiply+0x14c>)
 802784e:	4845      	ldr	r0, [pc, #276]	@ (8027964 <__multiply+0x150>)
 8027850:	0049      	lsls	r1, r1, #1
 8027852:	f000 ff57 	bl	8028704 <__assert_func>
 8027856:	0002      	movs	r2, r0
 8027858:	19bb      	adds	r3, r7, r6
 802785a:	3214      	adds	r2, #20
 802785c:	009b      	lsls	r3, r3, #2
 802785e:	18d3      	adds	r3, r2, r3
 8027860:	9301      	str	r3, [sp, #4]
 8027862:	2100      	movs	r1, #0
 8027864:	0013      	movs	r3, r2
 8027866:	9801      	ldr	r0, [sp, #4]
 8027868:	4283      	cmp	r3, r0
 802786a:	d328      	bcc.n	80278be <__multiply+0xaa>
 802786c:	0023      	movs	r3, r4
 802786e:	00bf      	lsls	r7, r7, #2
 8027870:	3314      	adds	r3, #20
 8027872:	9304      	str	r3, [sp, #16]
 8027874:	3514      	adds	r5, #20
 8027876:	19db      	adds	r3, r3, r7
 8027878:	00b6      	lsls	r6, r6, #2
 802787a:	9302      	str	r3, [sp, #8]
 802787c:	19ab      	adds	r3, r5, r6
 802787e:	9307      	str	r3, [sp, #28]
 8027880:	2304      	movs	r3, #4
 8027882:	9305      	str	r3, [sp, #20]
 8027884:	0023      	movs	r3, r4
 8027886:	9902      	ldr	r1, [sp, #8]
 8027888:	3315      	adds	r3, #21
 802788a:	4299      	cmp	r1, r3
 802788c:	d305      	bcc.n	802789a <__multiply+0x86>
 802788e:	1b0c      	subs	r4, r1, r4
 8027890:	3c15      	subs	r4, #21
 8027892:	08a4      	lsrs	r4, r4, #2
 8027894:	3401      	adds	r4, #1
 8027896:	00a3      	lsls	r3, r4, #2
 8027898:	9305      	str	r3, [sp, #20]
 802789a:	9b07      	ldr	r3, [sp, #28]
 802789c:	429d      	cmp	r5, r3
 802789e:	d310      	bcc.n	80278c2 <__multiply+0xae>
 80278a0:	9b00      	ldr	r3, [sp, #0]
 80278a2:	2b00      	cmp	r3, #0
 80278a4:	dd05      	ble.n	80278b2 <__multiply+0x9e>
 80278a6:	9b01      	ldr	r3, [sp, #4]
 80278a8:	3b04      	subs	r3, #4
 80278aa:	9301      	str	r3, [sp, #4]
 80278ac:	681b      	ldr	r3, [r3, #0]
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d052      	beq.n	8027958 <__multiply+0x144>
 80278b2:	4663      	mov	r3, ip
 80278b4:	4660      	mov	r0, ip
 80278b6:	9a00      	ldr	r2, [sp, #0]
 80278b8:	611a      	str	r2, [r3, #16]
 80278ba:	b009      	add	sp, #36	@ 0x24
 80278bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80278be:	c302      	stmia	r3!, {r1}
 80278c0:	e7d1      	b.n	8027866 <__multiply+0x52>
 80278c2:	682c      	ldr	r4, [r5, #0]
 80278c4:	b2a4      	uxth	r4, r4
 80278c6:	2c00      	cmp	r4, #0
 80278c8:	d01f      	beq.n	802790a <__multiply+0xf6>
 80278ca:	2300      	movs	r3, #0
 80278cc:	0017      	movs	r7, r2
 80278ce:	9e04      	ldr	r6, [sp, #16]
 80278d0:	9303      	str	r3, [sp, #12]
 80278d2:	ce08      	ldmia	r6!, {r3}
 80278d4:	6839      	ldr	r1, [r7, #0]
 80278d6:	9306      	str	r3, [sp, #24]
 80278d8:	466b      	mov	r3, sp
 80278da:	8b1b      	ldrh	r3, [r3, #24]
 80278dc:	b288      	uxth	r0, r1
 80278de:	4363      	muls	r3, r4
 80278e0:	181b      	adds	r3, r3, r0
 80278e2:	9803      	ldr	r0, [sp, #12]
 80278e4:	0c09      	lsrs	r1, r1, #16
 80278e6:	181b      	adds	r3, r3, r0
 80278e8:	9806      	ldr	r0, [sp, #24]
 80278ea:	0c00      	lsrs	r0, r0, #16
 80278ec:	4360      	muls	r0, r4
 80278ee:	1840      	adds	r0, r0, r1
 80278f0:	0c19      	lsrs	r1, r3, #16
 80278f2:	1841      	adds	r1, r0, r1
 80278f4:	0c08      	lsrs	r0, r1, #16
 80278f6:	b29b      	uxth	r3, r3
 80278f8:	0409      	lsls	r1, r1, #16
 80278fa:	4319      	orrs	r1, r3
 80278fc:	9b02      	ldr	r3, [sp, #8]
 80278fe:	9003      	str	r0, [sp, #12]
 8027900:	c702      	stmia	r7!, {r1}
 8027902:	42b3      	cmp	r3, r6
 8027904:	d8e5      	bhi.n	80278d2 <__multiply+0xbe>
 8027906:	9b05      	ldr	r3, [sp, #20]
 8027908:	50d0      	str	r0, [r2, r3]
 802790a:	682c      	ldr	r4, [r5, #0]
 802790c:	0c24      	lsrs	r4, r4, #16
 802790e:	d020      	beq.n	8027952 <__multiply+0x13e>
 8027910:	2100      	movs	r1, #0
 8027912:	0010      	movs	r0, r2
 8027914:	6813      	ldr	r3, [r2, #0]
 8027916:	9e04      	ldr	r6, [sp, #16]
 8027918:	9103      	str	r1, [sp, #12]
 802791a:	6831      	ldr	r1, [r6, #0]
 802791c:	6807      	ldr	r7, [r0, #0]
 802791e:	b289      	uxth	r1, r1
 8027920:	4361      	muls	r1, r4
 8027922:	0c3f      	lsrs	r7, r7, #16
 8027924:	19c9      	adds	r1, r1, r7
 8027926:	9f03      	ldr	r7, [sp, #12]
 8027928:	b29b      	uxth	r3, r3
 802792a:	19c9      	adds	r1, r1, r7
 802792c:	040f      	lsls	r7, r1, #16
 802792e:	431f      	orrs	r7, r3
 8027930:	6007      	str	r7, [r0, #0]
 8027932:	ce80      	ldmia	r6!, {r7}
 8027934:	6843      	ldr	r3, [r0, #4]
 8027936:	0c3f      	lsrs	r7, r7, #16
 8027938:	4367      	muls	r7, r4
 802793a:	b29b      	uxth	r3, r3
 802793c:	0c09      	lsrs	r1, r1, #16
 802793e:	18fb      	adds	r3, r7, r3
 8027940:	185b      	adds	r3, r3, r1
 8027942:	0c19      	lsrs	r1, r3, #16
 8027944:	9103      	str	r1, [sp, #12]
 8027946:	9902      	ldr	r1, [sp, #8]
 8027948:	3004      	adds	r0, #4
 802794a:	42b1      	cmp	r1, r6
 802794c:	d8e5      	bhi.n	802791a <__multiply+0x106>
 802794e:	9905      	ldr	r1, [sp, #20]
 8027950:	5053      	str	r3, [r2, r1]
 8027952:	3504      	adds	r5, #4
 8027954:	3204      	adds	r2, #4
 8027956:	e7a0      	b.n	802789a <__multiply+0x86>
 8027958:	9b00      	ldr	r3, [sp, #0]
 802795a:	3b01      	subs	r3, #1
 802795c:	9300      	str	r3, [sp, #0]
 802795e:	e79f      	b.n	80278a0 <__multiply+0x8c>
 8027960:	0802e90e 	.word	0x0802e90e
 8027964:	0802e97f 	.word	0x0802e97f

08027968 <__pow5mult>:
 8027968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802796a:	2303      	movs	r3, #3
 802796c:	0015      	movs	r5, r2
 802796e:	0007      	movs	r7, r0
 8027970:	000e      	movs	r6, r1
 8027972:	401a      	ands	r2, r3
 8027974:	421d      	tst	r5, r3
 8027976:	d008      	beq.n	802798a <__pow5mult+0x22>
 8027978:	4925      	ldr	r1, [pc, #148]	@ (8027a10 <__pow5mult+0xa8>)
 802797a:	3a01      	subs	r2, #1
 802797c:	0092      	lsls	r2, r2, #2
 802797e:	5852      	ldr	r2, [r2, r1]
 8027980:	2300      	movs	r3, #0
 8027982:	0031      	movs	r1, r6
 8027984:	f7ff fe4e 	bl	8027624 <__multadd>
 8027988:	0006      	movs	r6, r0
 802798a:	10ad      	asrs	r5, r5, #2
 802798c:	d03d      	beq.n	8027a0a <__pow5mult+0xa2>
 802798e:	69fc      	ldr	r4, [r7, #28]
 8027990:	2c00      	cmp	r4, #0
 8027992:	d10f      	bne.n	80279b4 <__pow5mult+0x4c>
 8027994:	2010      	movs	r0, #16
 8027996:	f7ff fd0f 	bl	80273b8 <malloc>
 802799a:	1e02      	subs	r2, r0, #0
 802799c:	61f8      	str	r0, [r7, #28]
 802799e:	d105      	bne.n	80279ac <__pow5mult+0x44>
 80279a0:	21b4      	movs	r1, #180	@ 0xb4
 80279a2:	4b1c      	ldr	r3, [pc, #112]	@ (8027a14 <__pow5mult+0xac>)
 80279a4:	481c      	ldr	r0, [pc, #112]	@ (8027a18 <__pow5mult+0xb0>)
 80279a6:	31ff      	adds	r1, #255	@ 0xff
 80279a8:	f000 feac 	bl	8028704 <__assert_func>
 80279ac:	6044      	str	r4, [r0, #4]
 80279ae:	6084      	str	r4, [r0, #8]
 80279b0:	6004      	str	r4, [r0, #0]
 80279b2:	60c4      	str	r4, [r0, #12]
 80279b4:	69fb      	ldr	r3, [r7, #28]
 80279b6:	689c      	ldr	r4, [r3, #8]
 80279b8:	9301      	str	r3, [sp, #4]
 80279ba:	2c00      	cmp	r4, #0
 80279bc:	d108      	bne.n	80279d0 <__pow5mult+0x68>
 80279be:	0038      	movs	r0, r7
 80279c0:	4916      	ldr	r1, [pc, #88]	@ (8027a1c <__pow5mult+0xb4>)
 80279c2:	f7ff ff0f 	bl	80277e4 <__i2b>
 80279c6:	9b01      	ldr	r3, [sp, #4]
 80279c8:	0004      	movs	r4, r0
 80279ca:	6098      	str	r0, [r3, #8]
 80279cc:	2300      	movs	r3, #0
 80279ce:	6003      	str	r3, [r0, #0]
 80279d0:	2301      	movs	r3, #1
 80279d2:	421d      	tst	r5, r3
 80279d4:	d00a      	beq.n	80279ec <__pow5mult+0x84>
 80279d6:	0031      	movs	r1, r6
 80279d8:	0022      	movs	r2, r4
 80279da:	0038      	movs	r0, r7
 80279dc:	f7ff ff1a 	bl	8027814 <__multiply>
 80279e0:	0031      	movs	r1, r6
 80279e2:	9001      	str	r0, [sp, #4]
 80279e4:	0038      	movs	r0, r7
 80279e6:	f7ff fdf9 	bl	80275dc <_Bfree>
 80279ea:	9e01      	ldr	r6, [sp, #4]
 80279ec:	106d      	asrs	r5, r5, #1
 80279ee:	d00c      	beq.n	8027a0a <__pow5mult+0xa2>
 80279f0:	6820      	ldr	r0, [r4, #0]
 80279f2:	2800      	cmp	r0, #0
 80279f4:	d107      	bne.n	8027a06 <__pow5mult+0x9e>
 80279f6:	0022      	movs	r2, r4
 80279f8:	0021      	movs	r1, r4
 80279fa:	0038      	movs	r0, r7
 80279fc:	f7ff ff0a 	bl	8027814 <__multiply>
 8027a00:	2300      	movs	r3, #0
 8027a02:	6020      	str	r0, [r4, #0]
 8027a04:	6003      	str	r3, [r0, #0]
 8027a06:	0004      	movs	r4, r0
 8027a08:	e7e2      	b.n	80279d0 <__pow5mult+0x68>
 8027a0a:	0030      	movs	r0, r6
 8027a0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027a0e:	46c0      	nop			@ (mov r8, r8)
 8027a10:	0802eb7c 	.word	0x0802eb7c
 8027a14:	0802e89f 	.word	0x0802e89f
 8027a18:	0802e97f 	.word	0x0802e97f
 8027a1c:	00000271 	.word	0x00000271

08027a20 <__lshift>:
 8027a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027a22:	000c      	movs	r4, r1
 8027a24:	0016      	movs	r6, r2
 8027a26:	6923      	ldr	r3, [r4, #16]
 8027a28:	1157      	asrs	r7, r2, #5
 8027a2a:	b085      	sub	sp, #20
 8027a2c:	18fb      	adds	r3, r7, r3
 8027a2e:	9301      	str	r3, [sp, #4]
 8027a30:	3301      	adds	r3, #1
 8027a32:	9300      	str	r3, [sp, #0]
 8027a34:	6849      	ldr	r1, [r1, #4]
 8027a36:	68a3      	ldr	r3, [r4, #8]
 8027a38:	9002      	str	r0, [sp, #8]
 8027a3a:	9a00      	ldr	r2, [sp, #0]
 8027a3c:	4293      	cmp	r3, r2
 8027a3e:	db10      	blt.n	8027a62 <__lshift+0x42>
 8027a40:	9802      	ldr	r0, [sp, #8]
 8027a42:	f7ff fd87 	bl	8027554 <_Balloc>
 8027a46:	2300      	movs	r3, #0
 8027a48:	0001      	movs	r1, r0
 8027a4a:	0005      	movs	r5, r0
 8027a4c:	001a      	movs	r2, r3
 8027a4e:	3114      	adds	r1, #20
 8027a50:	4298      	cmp	r0, r3
 8027a52:	d10c      	bne.n	8027a6e <__lshift+0x4e>
 8027a54:	21ef      	movs	r1, #239	@ 0xef
 8027a56:	002a      	movs	r2, r5
 8027a58:	4b25      	ldr	r3, [pc, #148]	@ (8027af0 <__lshift+0xd0>)
 8027a5a:	4826      	ldr	r0, [pc, #152]	@ (8027af4 <__lshift+0xd4>)
 8027a5c:	0049      	lsls	r1, r1, #1
 8027a5e:	f000 fe51 	bl	8028704 <__assert_func>
 8027a62:	3101      	adds	r1, #1
 8027a64:	005b      	lsls	r3, r3, #1
 8027a66:	e7e8      	b.n	8027a3a <__lshift+0x1a>
 8027a68:	0098      	lsls	r0, r3, #2
 8027a6a:	500a      	str	r2, [r1, r0]
 8027a6c:	3301      	adds	r3, #1
 8027a6e:	42bb      	cmp	r3, r7
 8027a70:	dbfa      	blt.n	8027a68 <__lshift+0x48>
 8027a72:	43fb      	mvns	r3, r7
 8027a74:	17db      	asrs	r3, r3, #31
 8027a76:	401f      	ands	r7, r3
 8027a78:	00bf      	lsls	r7, r7, #2
 8027a7a:	0023      	movs	r3, r4
 8027a7c:	201f      	movs	r0, #31
 8027a7e:	19c9      	adds	r1, r1, r7
 8027a80:	0037      	movs	r7, r6
 8027a82:	6922      	ldr	r2, [r4, #16]
 8027a84:	3314      	adds	r3, #20
 8027a86:	0092      	lsls	r2, r2, #2
 8027a88:	189a      	adds	r2, r3, r2
 8027a8a:	4007      	ands	r7, r0
 8027a8c:	4206      	tst	r6, r0
 8027a8e:	d029      	beq.n	8027ae4 <__lshift+0xc4>
 8027a90:	3001      	adds	r0, #1
 8027a92:	1bc0      	subs	r0, r0, r7
 8027a94:	9003      	str	r0, [sp, #12]
 8027a96:	468c      	mov	ip, r1
 8027a98:	2000      	movs	r0, #0
 8027a9a:	681e      	ldr	r6, [r3, #0]
 8027a9c:	40be      	lsls	r6, r7
 8027a9e:	4306      	orrs	r6, r0
 8027aa0:	4660      	mov	r0, ip
 8027aa2:	c040      	stmia	r0!, {r6}
 8027aa4:	4684      	mov	ip, r0
 8027aa6:	9e03      	ldr	r6, [sp, #12]
 8027aa8:	cb01      	ldmia	r3!, {r0}
 8027aaa:	40f0      	lsrs	r0, r6
 8027aac:	429a      	cmp	r2, r3
 8027aae:	d8f4      	bhi.n	8027a9a <__lshift+0x7a>
 8027ab0:	0026      	movs	r6, r4
 8027ab2:	3615      	adds	r6, #21
 8027ab4:	2304      	movs	r3, #4
 8027ab6:	42b2      	cmp	r2, r6
 8027ab8:	d304      	bcc.n	8027ac4 <__lshift+0xa4>
 8027aba:	1b13      	subs	r3, r2, r4
 8027abc:	3b15      	subs	r3, #21
 8027abe:	089b      	lsrs	r3, r3, #2
 8027ac0:	3301      	adds	r3, #1
 8027ac2:	009b      	lsls	r3, r3, #2
 8027ac4:	50c8      	str	r0, [r1, r3]
 8027ac6:	2800      	cmp	r0, #0
 8027ac8:	d002      	beq.n	8027ad0 <__lshift+0xb0>
 8027aca:	9b01      	ldr	r3, [sp, #4]
 8027acc:	3302      	adds	r3, #2
 8027ace:	9300      	str	r3, [sp, #0]
 8027ad0:	9b00      	ldr	r3, [sp, #0]
 8027ad2:	9802      	ldr	r0, [sp, #8]
 8027ad4:	3b01      	subs	r3, #1
 8027ad6:	0021      	movs	r1, r4
 8027ad8:	612b      	str	r3, [r5, #16]
 8027ada:	f7ff fd7f 	bl	80275dc <_Bfree>
 8027ade:	0028      	movs	r0, r5
 8027ae0:	b005      	add	sp, #20
 8027ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027ae4:	cb01      	ldmia	r3!, {r0}
 8027ae6:	c101      	stmia	r1!, {r0}
 8027ae8:	429a      	cmp	r2, r3
 8027aea:	d8fb      	bhi.n	8027ae4 <__lshift+0xc4>
 8027aec:	e7f0      	b.n	8027ad0 <__lshift+0xb0>
 8027aee:	46c0      	nop			@ (mov r8, r8)
 8027af0:	0802e90e 	.word	0x0802e90e
 8027af4:	0802e97f 	.word	0x0802e97f

08027af8 <__mcmp>:
 8027af8:	b530      	push	{r4, r5, lr}
 8027afa:	690b      	ldr	r3, [r1, #16]
 8027afc:	6904      	ldr	r4, [r0, #16]
 8027afe:	0002      	movs	r2, r0
 8027b00:	1ae0      	subs	r0, r4, r3
 8027b02:	429c      	cmp	r4, r3
 8027b04:	d10f      	bne.n	8027b26 <__mcmp+0x2e>
 8027b06:	3214      	adds	r2, #20
 8027b08:	009b      	lsls	r3, r3, #2
 8027b0a:	3114      	adds	r1, #20
 8027b0c:	0014      	movs	r4, r2
 8027b0e:	18c9      	adds	r1, r1, r3
 8027b10:	18d2      	adds	r2, r2, r3
 8027b12:	3a04      	subs	r2, #4
 8027b14:	3904      	subs	r1, #4
 8027b16:	6815      	ldr	r5, [r2, #0]
 8027b18:	680b      	ldr	r3, [r1, #0]
 8027b1a:	429d      	cmp	r5, r3
 8027b1c:	d004      	beq.n	8027b28 <__mcmp+0x30>
 8027b1e:	2001      	movs	r0, #1
 8027b20:	429d      	cmp	r5, r3
 8027b22:	d200      	bcs.n	8027b26 <__mcmp+0x2e>
 8027b24:	3802      	subs	r0, #2
 8027b26:	bd30      	pop	{r4, r5, pc}
 8027b28:	4294      	cmp	r4, r2
 8027b2a:	d3f2      	bcc.n	8027b12 <__mcmp+0x1a>
 8027b2c:	e7fb      	b.n	8027b26 <__mcmp+0x2e>
	...

08027b30 <__mdiff>:
 8027b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027b32:	000c      	movs	r4, r1
 8027b34:	b087      	sub	sp, #28
 8027b36:	9000      	str	r0, [sp, #0]
 8027b38:	0011      	movs	r1, r2
 8027b3a:	0020      	movs	r0, r4
 8027b3c:	0017      	movs	r7, r2
 8027b3e:	f7ff ffdb 	bl	8027af8 <__mcmp>
 8027b42:	1e05      	subs	r5, r0, #0
 8027b44:	d110      	bne.n	8027b68 <__mdiff+0x38>
 8027b46:	0001      	movs	r1, r0
 8027b48:	9800      	ldr	r0, [sp, #0]
 8027b4a:	f7ff fd03 	bl	8027554 <_Balloc>
 8027b4e:	1e02      	subs	r2, r0, #0
 8027b50:	d104      	bne.n	8027b5c <__mdiff+0x2c>
 8027b52:	4b40      	ldr	r3, [pc, #256]	@ (8027c54 <__mdiff+0x124>)
 8027b54:	4840      	ldr	r0, [pc, #256]	@ (8027c58 <__mdiff+0x128>)
 8027b56:	4941      	ldr	r1, [pc, #260]	@ (8027c5c <__mdiff+0x12c>)
 8027b58:	f000 fdd4 	bl	8028704 <__assert_func>
 8027b5c:	2301      	movs	r3, #1
 8027b5e:	6145      	str	r5, [r0, #20]
 8027b60:	6103      	str	r3, [r0, #16]
 8027b62:	0010      	movs	r0, r2
 8027b64:	b007      	add	sp, #28
 8027b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027b68:	2600      	movs	r6, #0
 8027b6a:	42b0      	cmp	r0, r6
 8027b6c:	da03      	bge.n	8027b76 <__mdiff+0x46>
 8027b6e:	0023      	movs	r3, r4
 8027b70:	003c      	movs	r4, r7
 8027b72:	001f      	movs	r7, r3
 8027b74:	3601      	adds	r6, #1
 8027b76:	6861      	ldr	r1, [r4, #4]
 8027b78:	9800      	ldr	r0, [sp, #0]
 8027b7a:	f7ff fceb 	bl	8027554 <_Balloc>
 8027b7e:	1e02      	subs	r2, r0, #0
 8027b80:	d103      	bne.n	8027b8a <__mdiff+0x5a>
 8027b82:	4b34      	ldr	r3, [pc, #208]	@ (8027c54 <__mdiff+0x124>)
 8027b84:	4834      	ldr	r0, [pc, #208]	@ (8027c58 <__mdiff+0x128>)
 8027b86:	4936      	ldr	r1, [pc, #216]	@ (8027c60 <__mdiff+0x130>)
 8027b88:	e7e6      	b.n	8027b58 <__mdiff+0x28>
 8027b8a:	6923      	ldr	r3, [r4, #16]
 8027b8c:	3414      	adds	r4, #20
 8027b8e:	9300      	str	r3, [sp, #0]
 8027b90:	009b      	lsls	r3, r3, #2
 8027b92:	18e3      	adds	r3, r4, r3
 8027b94:	0021      	movs	r1, r4
 8027b96:	9401      	str	r4, [sp, #4]
 8027b98:	003c      	movs	r4, r7
 8027b9a:	9302      	str	r3, [sp, #8]
 8027b9c:	693b      	ldr	r3, [r7, #16]
 8027b9e:	3414      	adds	r4, #20
 8027ba0:	009b      	lsls	r3, r3, #2
 8027ba2:	18e3      	adds	r3, r4, r3
 8027ba4:	9303      	str	r3, [sp, #12]
 8027ba6:	0003      	movs	r3, r0
 8027ba8:	60c6      	str	r6, [r0, #12]
 8027baa:	468c      	mov	ip, r1
 8027bac:	2000      	movs	r0, #0
 8027bae:	3314      	adds	r3, #20
 8027bb0:	9304      	str	r3, [sp, #16]
 8027bb2:	9305      	str	r3, [sp, #20]
 8027bb4:	4663      	mov	r3, ip
 8027bb6:	cb20      	ldmia	r3!, {r5}
 8027bb8:	b2a9      	uxth	r1, r5
 8027bba:	000e      	movs	r6, r1
 8027bbc:	469c      	mov	ip, r3
 8027bbe:	cc08      	ldmia	r4!, {r3}
 8027bc0:	0c2d      	lsrs	r5, r5, #16
 8027bc2:	b299      	uxth	r1, r3
 8027bc4:	1a71      	subs	r1, r6, r1
 8027bc6:	1809      	adds	r1, r1, r0
 8027bc8:	0c1b      	lsrs	r3, r3, #16
 8027bca:	1408      	asrs	r0, r1, #16
 8027bcc:	1aeb      	subs	r3, r5, r3
 8027bce:	181b      	adds	r3, r3, r0
 8027bd0:	1418      	asrs	r0, r3, #16
 8027bd2:	b289      	uxth	r1, r1
 8027bd4:	041b      	lsls	r3, r3, #16
 8027bd6:	4319      	orrs	r1, r3
 8027bd8:	9b05      	ldr	r3, [sp, #20]
 8027bda:	c302      	stmia	r3!, {r1}
 8027bdc:	9305      	str	r3, [sp, #20]
 8027bde:	9b03      	ldr	r3, [sp, #12]
 8027be0:	42a3      	cmp	r3, r4
 8027be2:	d8e7      	bhi.n	8027bb4 <__mdiff+0x84>
 8027be4:	0039      	movs	r1, r7
 8027be6:	9c03      	ldr	r4, [sp, #12]
 8027be8:	3115      	adds	r1, #21
 8027bea:	2304      	movs	r3, #4
 8027bec:	428c      	cmp	r4, r1
 8027bee:	d304      	bcc.n	8027bfa <__mdiff+0xca>
 8027bf0:	1be3      	subs	r3, r4, r7
 8027bf2:	3b15      	subs	r3, #21
 8027bf4:	089b      	lsrs	r3, r3, #2
 8027bf6:	3301      	adds	r3, #1
 8027bf8:	009b      	lsls	r3, r3, #2
 8027bfa:	9901      	ldr	r1, [sp, #4]
 8027bfc:	18cd      	adds	r5, r1, r3
 8027bfe:	9904      	ldr	r1, [sp, #16]
 8027c00:	002e      	movs	r6, r5
 8027c02:	18cb      	adds	r3, r1, r3
 8027c04:	001f      	movs	r7, r3
 8027c06:	9902      	ldr	r1, [sp, #8]
 8027c08:	428e      	cmp	r6, r1
 8027c0a:	d311      	bcc.n	8027c30 <__mdiff+0x100>
 8027c0c:	9c02      	ldr	r4, [sp, #8]
 8027c0e:	1ee9      	subs	r1, r5, #3
 8027c10:	2000      	movs	r0, #0
 8027c12:	428c      	cmp	r4, r1
 8027c14:	d304      	bcc.n	8027c20 <__mdiff+0xf0>
 8027c16:	0021      	movs	r1, r4
 8027c18:	3103      	adds	r1, #3
 8027c1a:	1b49      	subs	r1, r1, r5
 8027c1c:	0889      	lsrs	r1, r1, #2
 8027c1e:	0088      	lsls	r0, r1, #2
 8027c20:	181b      	adds	r3, r3, r0
 8027c22:	3b04      	subs	r3, #4
 8027c24:	6819      	ldr	r1, [r3, #0]
 8027c26:	2900      	cmp	r1, #0
 8027c28:	d010      	beq.n	8027c4c <__mdiff+0x11c>
 8027c2a:	9b00      	ldr	r3, [sp, #0]
 8027c2c:	6113      	str	r3, [r2, #16]
 8027c2e:	e798      	b.n	8027b62 <__mdiff+0x32>
 8027c30:	4684      	mov	ip, r0
 8027c32:	ce02      	ldmia	r6!, {r1}
 8027c34:	b288      	uxth	r0, r1
 8027c36:	4460      	add	r0, ip
 8027c38:	1400      	asrs	r0, r0, #16
 8027c3a:	0c0c      	lsrs	r4, r1, #16
 8027c3c:	1904      	adds	r4, r0, r4
 8027c3e:	4461      	add	r1, ip
 8027c40:	1420      	asrs	r0, r4, #16
 8027c42:	b289      	uxth	r1, r1
 8027c44:	0424      	lsls	r4, r4, #16
 8027c46:	4321      	orrs	r1, r4
 8027c48:	c702      	stmia	r7!, {r1}
 8027c4a:	e7dc      	b.n	8027c06 <__mdiff+0xd6>
 8027c4c:	9900      	ldr	r1, [sp, #0]
 8027c4e:	3901      	subs	r1, #1
 8027c50:	9100      	str	r1, [sp, #0]
 8027c52:	e7e6      	b.n	8027c22 <__mdiff+0xf2>
 8027c54:	0802e90e 	.word	0x0802e90e
 8027c58:	0802e97f 	.word	0x0802e97f
 8027c5c:	00000237 	.word	0x00000237
 8027c60:	00000245 	.word	0x00000245

08027c64 <__ulp>:
 8027c64:	b510      	push	{r4, lr}
 8027c66:	2400      	movs	r4, #0
 8027c68:	4b0c      	ldr	r3, [pc, #48]	@ (8027c9c <__ulp+0x38>)
 8027c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8027ca0 <__ulp+0x3c>)
 8027c6c:	400b      	ands	r3, r1
 8027c6e:	189b      	adds	r3, r3, r2
 8027c70:	42a3      	cmp	r3, r4
 8027c72:	dc06      	bgt.n	8027c82 <__ulp+0x1e>
 8027c74:	425b      	negs	r3, r3
 8027c76:	151a      	asrs	r2, r3, #20
 8027c78:	2a13      	cmp	r2, #19
 8027c7a:	dc05      	bgt.n	8027c88 <__ulp+0x24>
 8027c7c:	2380      	movs	r3, #128	@ 0x80
 8027c7e:	031b      	lsls	r3, r3, #12
 8027c80:	4113      	asrs	r3, r2
 8027c82:	0019      	movs	r1, r3
 8027c84:	0020      	movs	r0, r4
 8027c86:	bd10      	pop	{r4, pc}
 8027c88:	3a14      	subs	r2, #20
 8027c8a:	2401      	movs	r4, #1
 8027c8c:	2a1e      	cmp	r2, #30
 8027c8e:	dc02      	bgt.n	8027c96 <__ulp+0x32>
 8027c90:	2480      	movs	r4, #128	@ 0x80
 8027c92:	0624      	lsls	r4, r4, #24
 8027c94:	40d4      	lsrs	r4, r2
 8027c96:	2300      	movs	r3, #0
 8027c98:	e7f3      	b.n	8027c82 <__ulp+0x1e>
 8027c9a:	46c0      	nop			@ (mov r8, r8)
 8027c9c:	7ff00000 	.word	0x7ff00000
 8027ca0:	fcc00000 	.word	0xfcc00000

08027ca4 <__b2d>:
 8027ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027ca6:	0006      	movs	r6, r0
 8027ca8:	6903      	ldr	r3, [r0, #16]
 8027caa:	3614      	adds	r6, #20
 8027cac:	009b      	lsls	r3, r3, #2
 8027cae:	18f3      	adds	r3, r6, r3
 8027cb0:	1f1d      	subs	r5, r3, #4
 8027cb2:	682c      	ldr	r4, [r5, #0]
 8027cb4:	000f      	movs	r7, r1
 8027cb6:	0020      	movs	r0, r4
 8027cb8:	9301      	str	r3, [sp, #4]
 8027cba:	f7ff fd43 	bl	8027744 <__hi0bits>
 8027cbe:	2220      	movs	r2, #32
 8027cc0:	1a12      	subs	r2, r2, r0
 8027cc2:	603a      	str	r2, [r7, #0]
 8027cc4:	0003      	movs	r3, r0
 8027cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8027d38 <__b2d+0x94>)
 8027cc8:	280a      	cmp	r0, #10
 8027cca:	dc15      	bgt.n	8027cf8 <__b2d+0x54>
 8027ccc:	210b      	movs	r1, #11
 8027cce:	0027      	movs	r7, r4
 8027cd0:	1a09      	subs	r1, r1, r0
 8027cd2:	40cf      	lsrs	r7, r1
 8027cd4:	433a      	orrs	r2, r7
 8027cd6:	468c      	mov	ip, r1
 8027cd8:	0011      	movs	r1, r2
 8027cda:	2200      	movs	r2, #0
 8027cdc:	42ae      	cmp	r6, r5
 8027cde:	d202      	bcs.n	8027ce6 <__b2d+0x42>
 8027ce0:	9a01      	ldr	r2, [sp, #4]
 8027ce2:	3a08      	subs	r2, #8
 8027ce4:	6812      	ldr	r2, [r2, #0]
 8027ce6:	3315      	adds	r3, #21
 8027ce8:	409c      	lsls	r4, r3
 8027cea:	4663      	mov	r3, ip
 8027cec:	0027      	movs	r7, r4
 8027cee:	40da      	lsrs	r2, r3
 8027cf0:	4317      	orrs	r7, r2
 8027cf2:	0038      	movs	r0, r7
 8027cf4:	b003      	add	sp, #12
 8027cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027cf8:	2700      	movs	r7, #0
 8027cfa:	42ae      	cmp	r6, r5
 8027cfc:	d202      	bcs.n	8027d04 <__b2d+0x60>
 8027cfe:	9d01      	ldr	r5, [sp, #4]
 8027d00:	3d08      	subs	r5, #8
 8027d02:	682f      	ldr	r7, [r5, #0]
 8027d04:	210b      	movs	r1, #11
 8027d06:	4249      	negs	r1, r1
 8027d08:	468c      	mov	ip, r1
 8027d0a:	449c      	add	ip, r3
 8027d0c:	2b0b      	cmp	r3, #11
 8027d0e:	d010      	beq.n	8027d32 <__b2d+0x8e>
 8027d10:	4661      	mov	r1, ip
 8027d12:	2320      	movs	r3, #32
 8027d14:	408c      	lsls	r4, r1
 8027d16:	1a5b      	subs	r3, r3, r1
 8027d18:	0039      	movs	r1, r7
 8027d1a:	40d9      	lsrs	r1, r3
 8027d1c:	430c      	orrs	r4, r1
 8027d1e:	4322      	orrs	r2, r4
 8027d20:	0011      	movs	r1, r2
 8027d22:	2200      	movs	r2, #0
 8027d24:	42b5      	cmp	r5, r6
 8027d26:	d901      	bls.n	8027d2c <__b2d+0x88>
 8027d28:	3d04      	subs	r5, #4
 8027d2a:	682a      	ldr	r2, [r5, #0]
 8027d2c:	4664      	mov	r4, ip
 8027d2e:	40a7      	lsls	r7, r4
 8027d30:	e7dd      	b.n	8027cee <__b2d+0x4a>
 8027d32:	4322      	orrs	r2, r4
 8027d34:	0011      	movs	r1, r2
 8027d36:	e7dc      	b.n	8027cf2 <__b2d+0x4e>
 8027d38:	3ff00000 	.word	0x3ff00000

08027d3c <__d2b>:
 8027d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027d3e:	2101      	movs	r1, #1
 8027d40:	0016      	movs	r6, r2
 8027d42:	001f      	movs	r7, r3
 8027d44:	f7ff fc06 	bl	8027554 <_Balloc>
 8027d48:	1e04      	subs	r4, r0, #0
 8027d4a:	d105      	bne.n	8027d58 <__d2b+0x1c>
 8027d4c:	0022      	movs	r2, r4
 8027d4e:	4b25      	ldr	r3, [pc, #148]	@ (8027de4 <__d2b+0xa8>)
 8027d50:	4825      	ldr	r0, [pc, #148]	@ (8027de8 <__d2b+0xac>)
 8027d52:	4926      	ldr	r1, [pc, #152]	@ (8027dec <__d2b+0xb0>)
 8027d54:	f000 fcd6 	bl	8028704 <__assert_func>
 8027d58:	033b      	lsls	r3, r7, #12
 8027d5a:	007d      	lsls	r5, r7, #1
 8027d5c:	0b1b      	lsrs	r3, r3, #12
 8027d5e:	0d6d      	lsrs	r5, r5, #21
 8027d60:	d002      	beq.n	8027d68 <__d2b+0x2c>
 8027d62:	2280      	movs	r2, #128	@ 0x80
 8027d64:	0352      	lsls	r2, r2, #13
 8027d66:	4313      	orrs	r3, r2
 8027d68:	9301      	str	r3, [sp, #4]
 8027d6a:	2e00      	cmp	r6, #0
 8027d6c:	d025      	beq.n	8027dba <__d2b+0x7e>
 8027d6e:	4668      	mov	r0, sp
 8027d70:	9600      	str	r6, [sp, #0]
 8027d72:	f7ff fd08 	bl	8027786 <__lo0bits>
 8027d76:	9b01      	ldr	r3, [sp, #4]
 8027d78:	9900      	ldr	r1, [sp, #0]
 8027d7a:	2800      	cmp	r0, #0
 8027d7c:	d01b      	beq.n	8027db6 <__d2b+0x7a>
 8027d7e:	2220      	movs	r2, #32
 8027d80:	001e      	movs	r6, r3
 8027d82:	1a12      	subs	r2, r2, r0
 8027d84:	4096      	lsls	r6, r2
 8027d86:	0032      	movs	r2, r6
 8027d88:	40c3      	lsrs	r3, r0
 8027d8a:	430a      	orrs	r2, r1
 8027d8c:	6162      	str	r2, [r4, #20]
 8027d8e:	9301      	str	r3, [sp, #4]
 8027d90:	9e01      	ldr	r6, [sp, #4]
 8027d92:	61a6      	str	r6, [r4, #24]
 8027d94:	1e73      	subs	r3, r6, #1
 8027d96:	419e      	sbcs	r6, r3
 8027d98:	3601      	adds	r6, #1
 8027d9a:	6126      	str	r6, [r4, #16]
 8027d9c:	2d00      	cmp	r5, #0
 8027d9e:	d014      	beq.n	8027dca <__d2b+0x8e>
 8027da0:	2635      	movs	r6, #53	@ 0x35
 8027da2:	4b13      	ldr	r3, [pc, #76]	@ (8027df0 <__d2b+0xb4>)
 8027da4:	18ed      	adds	r5, r5, r3
 8027da6:	9b08      	ldr	r3, [sp, #32]
 8027da8:	182d      	adds	r5, r5, r0
 8027daa:	601d      	str	r5, [r3, #0]
 8027dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027dae:	1a36      	subs	r6, r6, r0
 8027db0:	601e      	str	r6, [r3, #0]
 8027db2:	0020      	movs	r0, r4
 8027db4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027db6:	6161      	str	r1, [r4, #20]
 8027db8:	e7ea      	b.n	8027d90 <__d2b+0x54>
 8027dba:	a801      	add	r0, sp, #4
 8027dbc:	f7ff fce3 	bl	8027786 <__lo0bits>
 8027dc0:	9b01      	ldr	r3, [sp, #4]
 8027dc2:	2601      	movs	r6, #1
 8027dc4:	6163      	str	r3, [r4, #20]
 8027dc6:	3020      	adds	r0, #32
 8027dc8:	e7e7      	b.n	8027d9a <__d2b+0x5e>
 8027dca:	4b0a      	ldr	r3, [pc, #40]	@ (8027df4 <__d2b+0xb8>)
 8027dcc:	18c0      	adds	r0, r0, r3
 8027dce:	9b08      	ldr	r3, [sp, #32]
 8027dd0:	6018      	str	r0, [r3, #0]
 8027dd2:	4b09      	ldr	r3, [pc, #36]	@ (8027df8 <__d2b+0xbc>)
 8027dd4:	18f3      	adds	r3, r6, r3
 8027dd6:	009b      	lsls	r3, r3, #2
 8027dd8:	18e3      	adds	r3, r4, r3
 8027dda:	6958      	ldr	r0, [r3, #20]
 8027ddc:	f7ff fcb2 	bl	8027744 <__hi0bits>
 8027de0:	0176      	lsls	r6, r6, #5
 8027de2:	e7e3      	b.n	8027dac <__d2b+0x70>
 8027de4:	0802e90e 	.word	0x0802e90e
 8027de8:	0802e97f 	.word	0x0802e97f
 8027dec:	0000030f 	.word	0x0000030f
 8027df0:	fffffbcd 	.word	0xfffffbcd
 8027df4:	fffffbce 	.word	0xfffffbce
 8027df8:	3fffffff 	.word	0x3fffffff

08027dfc <__ratio>:
 8027dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027dfe:	b087      	sub	sp, #28
 8027e00:	000f      	movs	r7, r1
 8027e02:	a904      	add	r1, sp, #16
 8027e04:	0006      	movs	r6, r0
 8027e06:	f7ff ff4d 	bl	8027ca4 <__b2d>
 8027e0a:	9000      	str	r0, [sp, #0]
 8027e0c:	9101      	str	r1, [sp, #4]
 8027e0e:	9b00      	ldr	r3, [sp, #0]
 8027e10:	9c01      	ldr	r4, [sp, #4]
 8027e12:	0038      	movs	r0, r7
 8027e14:	a905      	add	r1, sp, #20
 8027e16:	9302      	str	r3, [sp, #8]
 8027e18:	9403      	str	r4, [sp, #12]
 8027e1a:	f7ff ff43 	bl	8027ca4 <__b2d>
 8027e1e:	000d      	movs	r5, r1
 8027e20:	0002      	movs	r2, r0
 8027e22:	000b      	movs	r3, r1
 8027e24:	6930      	ldr	r0, [r6, #16]
 8027e26:	6939      	ldr	r1, [r7, #16]
 8027e28:	9e04      	ldr	r6, [sp, #16]
 8027e2a:	1a40      	subs	r0, r0, r1
 8027e2c:	9905      	ldr	r1, [sp, #20]
 8027e2e:	0140      	lsls	r0, r0, #5
 8027e30:	1a71      	subs	r1, r6, r1
 8027e32:	1841      	adds	r1, r0, r1
 8027e34:	0508      	lsls	r0, r1, #20
 8027e36:	2900      	cmp	r1, #0
 8027e38:	dd08      	ble.n	8027e4c <__ratio+0x50>
 8027e3a:	9901      	ldr	r1, [sp, #4]
 8027e3c:	1841      	adds	r1, r0, r1
 8027e3e:	9103      	str	r1, [sp, #12]
 8027e40:	9802      	ldr	r0, [sp, #8]
 8027e42:	9903      	ldr	r1, [sp, #12]
 8027e44:	f7da f94c 	bl	80020e0 <__aeabi_ddiv>
 8027e48:	b007      	add	sp, #28
 8027e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027e4c:	1a2b      	subs	r3, r5, r0
 8027e4e:	e7f7      	b.n	8027e40 <__ratio+0x44>

08027e50 <__copybits>:
 8027e50:	b570      	push	{r4, r5, r6, lr}
 8027e52:	0014      	movs	r4, r2
 8027e54:	0005      	movs	r5, r0
 8027e56:	3901      	subs	r1, #1
 8027e58:	6913      	ldr	r3, [r2, #16]
 8027e5a:	1149      	asrs	r1, r1, #5
 8027e5c:	3101      	adds	r1, #1
 8027e5e:	0089      	lsls	r1, r1, #2
 8027e60:	3414      	adds	r4, #20
 8027e62:	009b      	lsls	r3, r3, #2
 8027e64:	1841      	adds	r1, r0, r1
 8027e66:	18e3      	adds	r3, r4, r3
 8027e68:	42a3      	cmp	r3, r4
 8027e6a:	d80d      	bhi.n	8027e88 <__copybits+0x38>
 8027e6c:	0014      	movs	r4, r2
 8027e6e:	3411      	adds	r4, #17
 8027e70:	2500      	movs	r5, #0
 8027e72:	42a3      	cmp	r3, r4
 8027e74:	d303      	bcc.n	8027e7e <__copybits+0x2e>
 8027e76:	1a9b      	subs	r3, r3, r2
 8027e78:	3b11      	subs	r3, #17
 8027e7a:	089b      	lsrs	r3, r3, #2
 8027e7c:	009d      	lsls	r5, r3, #2
 8027e7e:	2300      	movs	r3, #0
 8027e80:	1940      	adds	r0, r0, r5
 8027e82:	4281      	cmp	r1, r0
 8027e84:	d803      	bhi.n	8027e8e <__copybits+0x3e>
 8027e86:	bd70      	pop	{r4, r5, r6, pc}
 8027e88:	cc40      	ldmia	r4!, {r6}
 8027e8a:	c540      	stmia	r5!, {r6}
 8027e8c:	e7ec      	b.n	8027e68 <__copybits+0x18>
 8027e8e:	c008      	stmia	r0!, {r3}
 8027e90:	e7f7      	b.n	8027e82 <__copybits+0x32>

08027e92 <__any_on>:
 8027e92:	0002      	movs	r2, r0
 8027e94:	6900      	ldr	r0, [r0, #16]
 8027e96:	b510      	push	{r4, lr}
 8027e98:	3214      	adds	r2, #20
 8027e9a:	114b      	asrs	r3, r1, #5
 8027e9c:	4298      	cmp	r0, r3
 8027e9e:	db13      	blt.n	8027ec8 <__any_on+0x36>
 8027ea0:	dd0c      	ble.n	8027ebc <__any_on+0x2a>
 8027ea2:	241f      	movs	r4, #31
 8027ea4:	0008      	movs	r0, r1
 8027ea6:	4020      	ands	r0, r4
 8027ea8:	4221      	tst	r1, r4
 8027eaa:	d007      	beq.n	8027ebc <__any_on+0x2a>
 8027eac:	0099      	lsls	r1, r3, #2
 8027eae:	588c      	ldr	r4, [r1, r2]
 8027eb0:	0021      	movs	r1, r4
 8027eb2:	40c1      	lsrs	r1, r0
 8027eb4:	4081      	lsls	r1, r0
 8027eb6:	2001      	movs	r0, #1
 8027eb8:	428c      	cmp	r4, r1
 8027eba:	d104      	bne.n	8027ec6 <__any_on+0x34>
 8027ebc:	009b      	lsls	r3, r3, #2
 8027ebe:	18d3      	adds	r3, r2, r3
 8027ec0:	4293      	cmp	r3, r2
 8027ec2:	d803      	bhi.n	8027ecc <__any_on+0x3a>
 8027ec4:	2000      	movs	r0, #0
 8027ec6:	bd10      	pop	{r4, pc}
 8027ec8:	0003      	movs	r3, r0
 8027eca:	e7f7      	b.n	8027ebc <__any_on+0x2a>
 8027ecc:	3b04      	subs	r3, #4
 8027ece:	6819      	ldr	r1, [r3, #0]
 8027ed0:	2900      	cmp	r1, #0
 8027ed2:	d0f5      	beq.n	8027ec0 <__any_on+0x2e>
 8027ed4:	2001      	movs	r0, #1
 8027ed6:	e7f6      	b.n	8027ec6 <__any_on+0x34>

08027ed8 <__ascii_wctomb>:
 8027ed8:	0003      	movs	r3, r0
 8027eda:	1e08      	subs	r0, r1, #0
 8027edc:	d005      	beq.n	8027eea <__ascii_wctomb+0x12>
 8027ede:	2aff      	cmp	r2, #255	@ 0xff
 8027ee0:	d904      	bls.n	8027eec <__ascii_wctomb+0x14>
 8027ee2:	228a      	movs	r2, #138	@ 0x8a
 8027ee4:	2001      	movs	r0, #1
 8027ee6:	601a      	str	r2, [r3, #0]
 8027ee8:	4240      	negs	r0, r0
 8027eea:	4770      	bx	lr
 8027eec:	2001      	movs	r0, #1
 8027eee:	700a      	strb	r2, [r1, #0]
 8027ef0:	e7fb      	b.n	8027eea <__ascii_wctomb+0x12>
	...

08027ef4 <__ssputs_r>:
 8027ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027ef6:	688e      	ldr	r6, [r1, #8]
 8027ef8:	b085      	sub	sp, #20
 8027efa:	001f      	movs	r7, r3
 8027efc:	000c      	movs	r4, r1
 8027efe:	680b      	ldr	r3, [r1, #0]
 8027f00:	9002      	str	r0, [sp, #8]
 8027f02:	9203      	str	r2, [sp, #12]
 8027f04:	42be      	cmp	r6, r7
 8027f06:	d830      	bhi.n	8027f6a <__ssputs_r+0x76>
 8027f08:	210c      	movs	r1, #12
 8027f0a:	5e62      	ldrsh	r2, [r4, r1]
 8027f0c:	2190      	movs	r1, #144	@ 0x90
 8027f0e:	00c9      	lsls	r1, r1, #3
 8027f10:	420a      	tst	r2, r1
 8027f12:	d028      	beq.n	8027f66 <__ssputs_r+0x72>
 8027f14:	2003      	movs	r0, #3
 8027f16:	6921      	ldr	r1, [r4, #16]
 8027f18:	1a5b      	subs	r3, r3, r1
 8027f1a:	9301      	str	r3, [sp, #4]
 8027f1c:	6963      	ldr	r3, [r4, #20]
 8027f1e:	4343      	muls	r3, r0
 8027f20:	9801      	ldr	r0, [sp, #4]
 8027f22:	0fdd      	lsrs	r5, r3, #31
 8027f24:	18ed      	adds	r5, r5, r3
 8027f26:	1c7b      	adds	r3, r7, #1
 8027f28:	181b      	adds	r3, r3, r0
 8027f2a:	106d      	asrs	r5, r5, #1
 8027f2c:	42ab      	cmp	r3, r5
 8027f2e:	d900      	bls.n	8027f32 <__ssputs_r+0x3e>
 8027f30:	001d      	movs	r5, r3
 8027f32:	0552      	lsls	r2, r2, #21
 8027f34:	d528      	bpl.n	8027f88 <__ssputs_r+0x94>
 8027f36:	0029      	movs	r1, r5
 8027f38:	9802      	ldr	r0, [sp, #8]
 8027f3a:	f7ff fa69 	bl	8027410 <_malloc_r>
 8027f3e:	1e06      	subs	r6, r0, #0
 8027f40:	d02c      	beq.n	8027f9c <__ssputs_r+0xa8>
 8027f42:	9a01      	ldr	r2, [sp, #4]
 8027f44:	6921      	ldr	r1, [r4, #16]
 8027f46:	f7fe f80d 	bl	8025f64 <memcpy>
 8027f4a:	89a2      	ldrh	r2, [r4, #12]
 8027f4c:	4b18      	ldr	r3, [pc, #96]	@ (8027fb0 <__ssputs_r+0xbc>)
 8027f4e:	401a      	ands	r2, r3
 8027f50:	2380      	movs	r3, #128	@ 0x80
 8027f52:	4313      	orrs	r3, r2
 8027f54:	81a3      	strh	r3, [r4, #12]
 8027f56:	9b01      	ldr	r3, [sp, #4]
 8027f58:	6126      	str	r6, [r4, #16]
 8027f5a:	18f6      	adds	r6, r6, r3
 8027f5c:	6026      	str	r6, [r4, #0]
 8027f5e:	003e      	movs	r6, r7
 8027f60:	6165      	str	r5, [r4, #20]
 8027f62:	1aed      	subs	r5, r5, r3
 8027f64:	60a5      	str	r5, [r4, #8]
 8027f66:	42be      	cmp	r6, r7
 8027f68:	d900      	bls.n	8027f6c <__ssputs_r+0x78>
 8027f6a:	003e      	movs	r6, r7
 8027f6c:	0032      	movs	r2, r6
 8027f6e:	9903      	ldr	r1, [sp, #12]
 8027f70:	6820      	ldr	r0, [r4, #0]
 8027f72:	f000 fb7e 	bl	8028672 <memmove>
 8027f76:	2000      	movs	r0, #0
 8027f78:	68a3      	ldr	r3, [r4, #8]
 8027f7a:	1b9b      	subs	r3, r3, r6
 8027f7c:	60a3      	str	r3, [r4, #8]
 8027f7e:	6823      	ldr	r3, [r4, #0]
 8027f80:	199b      	adds	r3, r3, r6
 8027f82:	6023      	str	r3, [r4, #0]
 8027f84:	b005      	add	sp, #20
 8027f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027f88:	002a      	movs	r2, r5
 8027f8a:	9802      	ldr	r0, [sp, #8]
 8027f8c:	f000 fc05 	bl	802879a <_realloc_r>
 8027f90:	1e06      	subs	r6, r0, #0
 8027f92:	d1e0      	bne.n	8027f56 <__ssputs_r+0x62>
 8027f94:	6921      	ldr	r1, [r4, #16]
 8027f96:	9802      	ldr	r0, [sp, #8]
 8027f98:	f7fe fe6a 	bl	8026c70 <_free_r>
 8027f9c:	230c      	movs	r3, #12
 8027f9e:	2001      	movs	r0, #1
 8027fa0:	9a02      	ldr	r2, [sp, #8]
 8027fa2:	4240      	negs	r0, r0
 8027fa4:	6013      	str	r3, [r2, #0]
 8027fa6:	89a2      	ldrh	r2, [r4, #12]
 8027fa8:	3334      	adds	r3, #52	@ 0x34
 8027faa:	4313      	orrs	r3, r2
 8027fac:	81a3      	strh	r3, [r4, #12]
 8027fae:	e7e9      	b.n	8027f84 <__ssputs_r+0x90>
 8027fb0:	fffffb7f 	.word	0xfffffb7f

08027fb4 <_svfiprintf_r>:
 8027fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027fb6:	b0a1      	sub	sp, #132	@ 0x84
 8027fb8:	9003      	str	r0, [sp, #12]
 8027fba:	001d      	movs	r5, r3
 8027fbc:	898b      	ldrh	r3, [r1, #12]
 8027fbe:	000f      	movs	r7, r1
 8027fc0:	0016      	movs	r6, r2
 8027fc2:	061b      	lsls	r3, r3, #24
 8027fc4:	d511      	bpl.n	8027fea <_svfiprintf_r+0x36>
 8027fc6:	690b      	ldr	r3, [r1, #16]
 8027fc8:	2b00      	cmp	r3, #0
 8027fca:	d10e      	bne.n	8027fea <_svfiprintf_r+0x36>
 8027fcc:	2140      	movs	r1, #64	@ 0x40
 8027fce:	f7ff fa1f 	bl	8027410 <_malloc_r>
 8027fd2:	6038      	str	r0, [r7, #0]
 8027fd4:	6138      	str	r0, [r7, #16]
 8027fd6:	2800      	cmp	r0, #0
 8027fd8:	d105      	bne.n	8027fe6 <_svfiprintf_r+0x32>
 8027fda:	230c      	movs	r3, #12
 8027fdc:	9a03      	ldr	r2, [sp, #12]
 8027fde:	6013      	str	r3, [r2, #0]
 8027fe0:	2001      	movs	r0, #1
 8027fe2:	4240      	negs	r0, r0
 8027fe4:	e0cf      	b.n	8028186 <_svfiprintf_r+0x1d2>
 8027fe6:	2340      	movs	r3, #64	@ 0x40
 8027fe8:	617b      	str	r3, [r7, #20]
 8027fea:	2300      	movs	r3, #0
 8027fec:	ac08      	add	r4, sp, #32
 8027fee:	6163      	str	r3, [r4, #20]
 8027ff0:	3320      	adds	r3, #32
 8027ff2:	7663      	strb	r3, [r4, #25]
 8027ff4:	3310      	adds	r3, #16
 8027ff6:	76a3      	strb	r3, [r4, #26]
 8027ff8:	9507      	str	r5, [sp, #28]
 8027ffa:	0035      	movs	r5, r6
 8027ffc:	782b      	ldrb	r3, [r5, #0]
 8027ffe:	2b00      	cmp	r3, #0
 8028000:	d001      	beq.n	8028006 <_svfiprintf_r+0x52>
 8028002:	2b25      	cmp	r3, #37	@ 0x25
 8028004:	d148      	bne.n	8028098 <_svfiprintf_r+0xe4>
 8028006:	1bab      	subs	r3, r5, r6
 8028008:	9305      	str	r3, [sp, #20]
 802800a:	42b5      	cmp	r5, r6
 802800c:	d00b      	beq.n	8028026 <_svfiprintf_r+0x72>
 802800e:	0032      	movs	r2, r6
 8028010:	0039      	movs	r1, r7
 8028012:	9803      	ldr	r0, [sp, #12]
 8028014:	f7ff ff6e 	bl	8027ef4 <__ssputs_r>
 8028018:	3001      	adds	r0, #1
 802801a:	d100      	bne.n	802801e <_svfiprintf_r+0x6a>
 802801c:	e0ae      	b.n	802817c <_svfiprintf_r+0x1c8>
 802801e:	6963      	ldr	r3, [r4, #20]
 8028020:	9a05      	ldr	r2, [sp, #20]
 8028022:	189b      	adds	r3, r3, r2
 8028024:	6163      	str	r3, [r4, #20]
 8028026:	782b      	ldrb	r3, [r5, #0]
 8028028:	2b00      	cmp	r3, #0
 802802a:	d100      	bne.n	802802e <_svfiprintf_r+0x7a>
 802802c:	e0a6      	b.n	802817c <_svfiprintf_r+0x1c8>
 802802e:	2201      	movs	r2, #1
 8028030:	2300      	movs	r3, #0
 8028032:	4252      	negs	r2, r2
 8028034:	6062      	str	r2, [r4, #4]
 8028036:	a904      	add	r1, sp, #16
 8028038:	3254      	adds	r2, #84	@ 0x54
 802803a:	1852      	adds	r2, r2, r1
 802803c:	1c6e      	adds	r6, r5, #1
 802803e:	6023      	str	r3, [r4, #0]
 8028040:	60e3      	str	r3, [r4, #12]
 8028042:	60a3      	str	r3, [r4, #8]
 8028044:	7013      	strb	r3, [r2, #0]
 8028046:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028048:	4b54      	ldr	r3, [pc, #336]	@ (802819c <_svfiprintf_r+0x1e8>)
 802804a:	2205      	movs	r2, #5
 802804c:	0018      	movs	r0, r3
 802804e:	7831      	ldrb	r1, [r6, #0]
 8028050:	9305      	str	r3, [sp, #20]
 8028052:	f7fd ff7c 	bl	8025f4e <memchr>
 8028056:	1c75      	adds	r5, r6, #1
 8028058:	2800      	cmp	r0, #0
 802805a:	d11f      	bne.n	802809c <_svfiprintf_r+0xe8>
 802805c:	6822      	ldr	r2, [r4, #0]
 802805e:	06d3      	lsls	r3, r2, #27
 8028060:	d504      	bpl.n	802806c <_svfiprintf_r+0xb8>
 8028062:	2353      	movs	r3, #83	@ 0x53
 8028064:	a904      	add	r1, sp, #16
 8028066:	185b      	adds	r3, r3, r1
 8028068:	2120      	movs	r1, #32
 802806a:	7019      	strb	r1, [r3, #0]
 802806c:	0713      	lsls	r3, r2, #28
 802806e:	d504      	bpl.n	802807a <_svfiprintf_r+0xc6>
 8028070:	2353      	movs	r3, #83	@ 0x53
 8028072:	a904      	add	r1, sp, #16
 8028074:	185b      	adds	r3, r3, r1
 8028076:	212b      	movs	r1, #43	@ 0x2b
 8028078:	7019      	strb	r1, [r3, #0]
 802807a:	7833      	ldrb	r3, [r6, #0]
 802807c:	2b2a      	cmp	r3, #42	@ 0x2a
 802807e:	d016      	beq.n	80280ae <_svfiprintf_r+0xfa>
 8028080:	0035      	movs	r5, r6
 8028082:	2100      	movs	r1, #0
 8028084:	200a      	movs	r0, #10
 8028086:	68e3      	ldr	r3, [r4, #12]
 8028088:	782a      	ldrb	r2, [r5, #0]
 802808a:	1c6e      	adds	r6, r5, #1
 802808c:	3a30      	subs	r2, #48	@ 0x30
 802808e:	2a09      	cmp	r2, #9
 8028090:	d950      	bls.n	8028134 <_svfiprintf_r+0x180>
 8028092:	2900      	cmp	r1, #0
 8028094:	d111      	bne.n	80280ba <_svfiprintf_r+0x106>
 8028096:	e017      	b.n	80280c8 <_svfiprintf_r+0x114>
 8028098:	3501      	adds	r5, #1
 802809a:	e7af      	b.n	8027ffc <_svfiprintf_r+0x48>
 802809c:	9b05      	ldr	r3, [sp, #20]
 802809e:	6822      	ldr	r2, [r4, #0]
 80280a0:	1ac0      	subs	r0, r0, r3
 80280a2:	2301      	movs	r3, #1
 80280a4:	4083      	lsls	r3, r0
 80280a6:	4313      	orrs	r3, r2
 80280a8:	002e      	movs	r6, r5
 80280aa:	6023      	str	r3, [r4, #0]
 80280ac:	e7cc      	b.n	8028048 <_svfiprintf_r+0x94>
 80280ae:	9b07      	ldr	r3, [sp, #28]
 80280b0:	1d19      	adds	r1, r3, #4
 80280b2:	681b      	ldr	r3, [r3, #0]
 80280b4:	9107      	str	r1, [sp, #28]
 80280b6:	2b00      	cmp	r3, #0
 80280b8:	db01      	blt.n	80280be <_svfiprintf_r+0x10a>
 80280ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80280bc:	e004      	b.n	80280c8 <_svfiprintf_r+0x114>
 80280be:	425b      	negs	r3, r3
 80280c0:	60e3      	str	r3, [r4, #12]
 80280c2:	2302      	movs	r3, #2
 80280c4:	4313      	orrs	r3, r2
 80280c6:	6023      	str	r3, [r4, #0]
 80280c8:	782b      	ldrb	r3, [r5, #0]
 80280ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80280cc:	d10c      	bne.n	80280e8 <_svfiprintf_r+0x134>
 80280ce:	786b      	ldrb	r3, [r5, #1]
 80280d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80280d2:	d134      	bne.n	802813e <_svfiprintf_r+0x18a>
 80280d4:	9b07      	ldr	r3, [sp, #28]
 80280d6:	3502      	adds	r5, #2
 80280d8:	1d1a      	adds	r2, r3, #4
 80280da:	681b      	ldr	r3, [r3, #0]
 80280dc:	9207      	str	r2, [sp, #28]
 80280de:	2b00      	cmp	r3, #0
 80280e0:	da01      	bge.n	80280e6 <_svfiprintf_r+0x132>
 80280e2:	2301      	movs	r3, #1
 80280e4:	425b      	negs	r3, r3
 80280e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80280e8:	4e2d      	ldr	r6, [pc, #180]	@ (80281a0 <_svfiprintf_r+0x1ec>)
 80280ea:	2203      	movs	r2, #3
 80280ec:	0030      	movs	r0, r6
 80280ee:	7829      	ldrb	r1, [r5, #0]
 80280f0:	f7fd ff2d 	bl	8025f4e <memchr>
 80280f4:	2800      	cmp	r0, #0
 80280f6:	d006      	beq.n	8028106 <_svfiprintf_r+0x152>
 80280f8:	2340      	movs	r3, #64	@ 0x40
 80280fa:	1b80      	subs	r0, r0, r6
 80280fc:	4083      	lsls	r3, r0
 80280fe:	6822      	ldr	r2, [r4, #0]
 8028100:	3501      	adds	r5, #1
 8028102:	4313      	orrs	r3, r2
 8028104:	6023      	str	r3, [r4, #0]
 8028106:	7829      	ldrb	r1, [r5, #0]
 8028108:	2206      	movs	r2, #6
 802810a:	4826      	ldr	r0, [pc, #152]	@ (80281a4 <_svfiprintf_r+0x1f0>)
 802810c:	1c6e      	adds	r6, r5, #1
 802810e:	7621      	strb	r1, [r4, #24]
 8028110:	f7fd ff1d 	bl	8025f4e <memchr>
 8028114:	2800      	cmp	r0, #0
 8028116:	d038      	beq.n	802818a <_svfiprintf_r+0x1d6>
 8028118:	4b23      	ldr	r3, [pc, #140]	@ (80281a8 <_svfiprintf_r+0x1f4>)
 802811a:	2b00      	cmp	r3, #0
 802811c:	d122      	bne.n	8028164 <_svfiprintf_r+0x1b0>
 802811e:	2207      	movs	r2, #7
 8028120:	9b07      	ldr	r3, [sp, #28]
 8028122:	3307      	adds	r3, #7
 8028124:	4393      	bics	r3, r2
 8028126:	3308      	adds	r3, #8
 8028128:	9307      	str	r3, [sp, #28]
 802812a:	6963      	ldr	r3, [r4, #20]
 802812c:	9a04      	ldr	r2, [sp, #16]
 802812e:	189b      	adds	r3, r3, r2
 8028130:	6163      	str	r3, [r4, #20]
 8028132:	e762      	b.n	8027ffa <_svfiprintf_r+0x46>
 8028134:	4343      	muls	r3, r0
 8028136:	0035      	movs	r5, r6
 8028138:	2101      	movs	r1, #1
 802813a:	189b      	adds	r3, r3, r2
 802813c:	e7a4      	b.n	8028088 <_svfiprintf_r+0xd4>
 802813e:	2300      	movs	r3, #0
 8028140:	200a      	movs	r0, #10
 8028142:	0019      	movs	r1, r3
 8028144:	3501      	adds	r5, #1
 8028146:	6063      	str	r3, [r4, #4]
 8028148:	782a      	ldrb	r2, [r5, #0]
 802814a:	1c6e      	adds	r6, r5, #1
 802814c:	3a30      	subs	r2, #48	@ 0x30
 802814e:	2a09      	cmp	r2, #9
 8028150:	d903      	bls.n	802815a <_svfiprintf_r+0x1a6>
 8028152:	2b00      	cmp	r3, #0
 8028154:	d0c8      	beq.n	80280e8 <_svfiprintf_r+0x134>
 8028156:	9109      	str	r1, [sp, #36]	@ 0x24
 8028158:	e7c6      	b.n	80280e8 <_svfiprintf_r+0x134>
 802815a:	4341      	muls	r1, r0
 802815c:	0035      	movs	r5, r6
 802815e:	2301      	movs	r3, #1
 8028160:	1889      	adds	r1, r1, r2
 8028162:	e7f1      	b.n	8028148 <_svfiprintf_r+0x194>
 8028164:	aa07      	add	r2, sp, #28
 8028166:	9200      	str	r2, [sp, #0]
 8028168:	0021      	movs	r1, r4
 802816a:	003a      	movs	r2, r7
 802816c:	4b0f      	ldr	r3, [pc, #60]	@ (80281ac <_svfiprintf_r+0x1f8>)
 802816e:	9803      	ldr	r0, [sp, #12]
 8028170:	f7fc ffc4 	bl	80250fc <_printf_float>
 8028174:	9004      	str	r0, [sp, #16]
 8028176:	9b04      	ldr	r3, [sp, #16]
 8028178:	3301      	adds	r3, #1
 802817a:	d1d6      	bne.n	802812a <_svfiprintf_r+0x176>
 802817c:	89bb      	ldrh	r3, [r7, #12]
 802817e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028180:	065b      	lsls	r3, r3, #25
 8028182:	d500      	bpl.n	8028186 <_svfiprintf_r+0x1d2>
 8028184:	e72c      	b.n	8027fe0 <_svfiprintf_r+0x2c>
 8028186:	b021      	add	sp, #132	@ 0x84
 8028188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802818a:	aa07      	add	r2, sp, #28
 802818c:	9200      	str	r2, [sp, #0]
 802818e:	0021      	movs	r1, r4
 8028190:	003a      	movs	r2, r7
 8028192:	4b06      	ldr	r3, [pc, #24]	@ (80281ac <_svfiprintf_r+0x1f8>)
 8028194:	9803      	ldr	r0, [sp, #12]
 8028196:	f7fd fa5f 	bl	8025658 <_printf_i>
 802819a:	e7eb      	b.n	8028174 <_svfiprintf_r+0x1c0>
 802819c:	0802e9d8 	.word	0x0802e9d8
 80281a0:	0802e9de 	.word	0x0802e9de
 80281a4:	0802e9e2 	.word	0x0802e9e2
 80281a8:	080250fd 	.word	0x080250fd
 80281ac:	08027ef5 	.word	0x08027ef5

080281b0 <__sfputc_r>:
 80281b0:	6893      	ldr	r3, [r2, #8]
 80281b2:	b510      	push	{r4, lr}
 80281b4:	3b01      	subs	r3, #1
 80281b6:	6093      	str	r3, [r2, #8]
 80281b8:	2b00      	cmp	r3, #0
 80281ba:	da04      	bge.n	80281c6 <__sfputc_r+0x16>
 80281bc:	6994      	ldr	r4, [r2, #24]
 80281be:	42a3      	cmp	r3, r4
 80281c0:	db07      	blt.n	80281d2 <__sfputc_r+0x22>
 80281c2:	290a      	cmp	r1, #10
 80281c4:	d005      	beq.n	80281d2 <__sfputc_r+0x22>
 80281c6:	6813      	ldr	r3, [r2, #0]
 80281c8:	1c58      	adds	r0, r3, #1
 80281ca:	6010      	str	r0, [r2, #0]
 80281cc:	7019      	strb	r1, [r3, #0]
 80281ce:	0008      	movs	r0, r1
 80281d0:	bd10      	pop	{r4, pc}
 80281d2:	f7fd fd4b 	bl	8025c6c <__swbuf_r>
 80281d6:	0001      	movs	r1, r0
 80281d8:	e7f9      	b.n	80281ce <__sfputc_r+0x1e>

080281da <__sfputs_r>:
 80281da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281dc:	0006      	movs	r6, r0
 80281de:	000f      	movs	r7, r1
 80281e0:	0014      	movs	r4, r2
 80281e2:	18d5      	adds	r5, r2, r3
 80281e4:	42ac      	cmp	r4, r5
 80281e6:	d101      	bne.n	80281ec <__sfputs_r+0x12>
 80281e8:	2000      	movs	r0, #0
 80281ea:	e007      	b.n	80281fc <__sfputs_r+0x22>
 80281ec:	7821      	ldrb	r1, [r4, #0]
 80281ee:	003a      	movs	r2, r7
 80281f0:	0030      	movs	r0, r6
 80281f2:	f7ff ffdd 	bl	80281b0 <__sfputc_r>
 80281f6:	3401      	adds	r4, #1
 80281f8:	1c43      	adds	r3, r0, #1
 80281fa:	d1f3      	bne.n	80281e4 <__sfputs_r+0xa>
 80281fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028200 <_vfiprintf_r>:
 8028200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028202:	b0a1      	sub	sp, #132	@ 0x84
 8028204:	000f      	movs	r7, r1
 8028206:	0015      	movs	r5, r2
 8028208:	001e      	movs	r6, r3
 802820a:	9003      	str	r0, [sp, #12]
 802820c:	2800      	cmp	r0, #0
 802820e:	d004      	beq.n	802821a <_vfiprintf_r+0x1a>
 8028210:	6a03      	ldr	r3, [r0, #32]
 8028212:	2b00      	cmp	r3, #0
 8028214:	d101      	bne.n	802821a <_vfiprintf_r+0x1a>
 8028216:	f7fd fbbb 	bl	8025990 <__sinit>
 802821a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802821c:	07db      	lsls	r3, r3, #31
 802821e:	d405      	bmi.n	802822c <_vfiprintf_r+0x2c>
 8028220:	89bb      	ldrh	r3, [r7, #12]
 8028222:	059b      	lsls	r3, r3, #22
 8028224:	d402      	bmi.n	802822c <_vfiprintf_r+0x2c>
 8028226:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028228:	f7fd fe8f 	bl	8025f4a <__retarget_lock_acquire_recursive>
 802822c:	89bb      	ldrh	r3, [r7, #12]
 802822e:	071b      	lsls	r3, r3, #28
 8028230:	d502      	bpl.n	8028238 <_vfiprintf_r+0x38>
 8028232:	693b      	ldr	r3, [r7, #16]
 8028234:	2b00      	cmp	r3, #0
 8028236:	d113      	bne.n	8028260 <_vfiprintf_r+0x60>
 8028238:	0039      	movs	r1, r7
 802823a:	9803      	ldr	r0, [sp, #12]
 802823c:	f7fd fd58 	bl	8025cf0 <__swsetup_r>
 8028240:	2800      	cmp	r0, #0
 8028242:	d00d      	beq.n	8028260 <_vfiprintf_r+0x60>
 8028244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028246:	07db      	lsls	r3, r3, #31
 8028248:	d503      	bpl.n	8028252 <_vfiprintf_r+0x52>
 802824a:	2001      	movs	r0, #1
 802824c:	4240      	negs	r0, r0
 802824e:	b021      	add	sp, #132	@ 0x84
 8028250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028252:	89bb      	ldrh	r3, [r7, #12]
 8028254:	059b      	lsls	r3, r3, #22
 8028256:	d4f8      	bmi.n	802824a <_vfiprintf_r+0x4a>
 8028258:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802825a:	f7fd fe77 	bl	8025f4c <__retarget_lock_release_recursive>
 802825e:	e7f4      	b.n	802824a <_vfiprintf_r+0x4a>
 8028260:	2300      	movs	r3, #0
 8028262:	ac08      	add	r4, sp, #32
 8028264:	6163      	str	r3, [r4, #20]
 8028266:	3320      	adds	r3, #32
 8028268:	7663      	strb	r3, [r4, #25]
 802826a:	3310      	adds	r3, #16
 802826c:	76a3      	strb	r3, [r4, #26]
 802826e:	9607      	str	r6, [sp, #28]
 8028270:	002e      	movs	r6, r5
 8028272:	7833      	ldrb	r3, [r6, #0]
 8028274:	2b00      	cmp	r3, #0
 8028276:	d001      	beq.n	802827c <_vfiprintf_r+0x7c>
 8028278:	2b25      	cmp	r3, #37	@ 0x25
 802827a:	d148      	bne.n	802830e <_vfiprintf_r+0x10e>
 802827c:	1b73      	subs	r3, r6, r5
 802827e:	9305      	str	r3, [sp, #20]
 8028280:	42ae      	cmp	r6, r5
 8028282:	d00b      	beq.n	802829c <_vfiprintf_r+0x9c>
 8028284:	002a      	movs	r2, r5
 8028286:	0039      	movs	r1, r7
 8028288:	9803      	ldr	r0, [sp, #12]
 802828a:	f7ff ffa6 	bl	80281da <__sfputs_r>
 802828e:	3001      	adds	r0, #1
 8028290:	d100      	bne.n	8028294 <_vfiprintf_r+0x94>
 8028292:	e0ae      	b.n	80283f2 <_vfiprintf_r+0x1f2>
 8028294:	6963      	ldr	r3, [r4, #20]
 8028296:	9a05      	ldr	r2, [sp, #20]
 8028298:	189b      	adds	r3, r3, r2
 802829a:	6163      	str	r3, [r4, #20]
 802829c:	7833      	ldrb	r3, [r6, #0]
 802829e:	2b00      	cmp	r3, #0
 80282a0:	d100      	bne.n	80282a4 <_vfiprintf_r+0xa4>
 80282a2:	e0a6      	b.n	80283f2 <_vfiprintf_r+0x1f2>
 80282a4:	2201      	movs	r2, #1
 80282a6:	2300      	movs	r3, #0
 80282a8:	4252      	negs	r2, r2
 80282aa:	6062      	str	r2, [r4, #4]
 80282ac:	a904      	add	r1, sp, #16
 80282ae:	3254      	adds	r2, #84	@ 0x54
 80282b0:	1852      	adds	r2, r2, r1
 80282b2:	1c75      	adds	r5, r6, #1
 80282b4:	6023      	str	r3, [r4, #0]
 80282b6:	60e3      	str	r3, [r4, #12]
 80282b8:	60a3      	str	r3, [r4, #8]
 80282ba:	7013      	strb	r3, [r2, #0]
 80282bc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80282be:	4b59      	ldr	r3, [pc, #356]	@ (8028424 <_vfiprintf_r+0x224>)
 80282c0:	2205      	movs	r2, #5
 80282c2:	0018      	movs	r0, r3
 80282c4:	7829      	ldrb	r1, [r5, #0]
 80282c6:	9305      	str	r3, [sp, #20]
 80282c8:	f7fd fe41 	bl	8025f4e <memchr>
 80282cc:	1c6e      	adds	r6, r5, #1
 80282ce:	2800      	cmp	r0, #0
 80282d0:	d11f      	bne.n	8028312 <_vfiprintf_r+0x112>
 80282d2:	6822      	ldr	r2, [r4, #0]
 80282d4:	06d3      	lsls	r3, r2, #27
 80282d6:	d504      	bpl.n	80282e2 <_vfiprintf_r+0xe2>
 80282d8:	2353      	movs	r3, #83	@ 0x53
 80282da:	a904      	add	r1, sp, #16
 80282dc:	185b      	adds	r3, r3, r1
 80282de:	2120      	movs	r1, #32
 80282e0:	7019      	strb	r1, [r3, #0]
 80282e2:	0713      	lsls	r3, r2, #28
 80282e4:	d504      	bpl.n	80282f0 <_vfiprintf_r+0xf0>
 80282e6:	2353      	movs	r3, #83	@ 0x53
 80282e8:	a904      	add	r1, sp, #16
 80282ea:	185b      	adds	r3, r3, r1
 80282ec:	212b      	movs	r1, #43	@ 0x2b
 80282ee:	7019      	strb	r1, [r3, #0]
 80282f0:	782b      	ldrb	r3, [r5, #0]
 80282f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80282f4:	d016      	beq.n	8028324 <_vfiprintf_r+0x124>
 80282f6:	002e      	movs	r6, r5
 80282f8:	2100      	movs	r1, #0
 80282fa:	200a      	movs	r0, #10
 80282fc:	68e3      	ldr	r3, [r4, #12]
 80282fe:	7832      	ldrb	r2, [r6, #0]
 8028300:	1c75      	adds	r5, r6, #1
 8028302:	3a30      	subs	r2, #48	@ 0x30
 8028304:	2a09      	cmp	r2, #9
 8028306:	d950      	bls.n	80283aa <_vfiprintf_r+0x1aa>
 8028308:	2900      	cmp	r1, #0
 802830a:	d111      	bne.n	8028330 <_vfiprintf_r+0x130>
 802830c:	e017      	b.n	802833e <_vfiprintf_r+0x13e>
 802830e:	3601      	adds	r6, #1
 8028310:	e7af      	b.n	8028272 <_vfiprintf_r+0x72>
 8028312:	9b05      	ldr	r3, [sp, #20]
 8028314:	6822      	ldr	r2, [r4, #0]
 8028316:	1ac0      	subs	r0, r0, r3
 8028318:	2301      	movs	r3, #1
 802831a:	4083      	lsls	r3, r0
 802831c:	4313      	orrs	r3, r2
 802831e:	0035      	movs	r5, r6
 8028320:	6023      	str	r3, [r4, #0]
 8028322:	e7cc      	b.n	80282be <_vfiprintf_r+0xbe>
 8028324:	9b07      	ldr	r3, [sp, #28]
 8028326:	1d19      	adds	r1, r3, #4
 8028328:	681b      	ldr	r3, [r3, #0]
 802832a:	9107      	str	r1, [sp, #28]
 802832c:	2b00      	cmp	r3, #0
 802832e:	db01      	blt.n	8028334 <_vfiprintf_r+0x134>
 8028330:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028332:	e004      	b.n	802833e <_vfiprintf_r+0x13e>
 8028334:	425b      	negs	r3, r3
 8028336:	60e3      	str	r3, [r4, #12]
 8028338:	2302      	movs	r3, #2
 802833a:	4313      	orrs	r3, r2
 802833c:	6023      	str	r3, [r4, #0]
 802833e:	7833      	ldrb	r3, [r6, #0]
 8028340:	2b2e      	cmp	r3, #46	@ 0x2e
 8028342:	d10c      	bne.n	802835e <_vfiprintf_r+0x15e>
 8028344:	7873      	ldrb	r3, [r6, #1]
 8028346:	2b2a      	cmp	r3, #42	@ 0x2a
 8028348:	d134      	bne.n	80283b4 <_vfiprintf_r+0x1b4>
 802834a:	9b07      	ldr	r3, [sp, #28]
 802834c:	3602      	adds	r6, #2
 802834e:	1d1a      	adds	r2, r3, #4
 8028350:	681b      	ldr	r3, [r3, #0]
 8028352:	9207      	str	r2, [sp, #28]
 8028354:	2b00      	cmp	r3, #0
 8028356:	da01      	bge.n	802835c <_vfiprintf_r+0x15c>
 8028358:	2301      	movs	r3, #1
 802835a:	425b      	negs	r3, r3
 802835c:	9309      	str	r3, [sp, #36]	@ 0x24
 802835e:	4d32      	ldr	r5, [pc, #200]	@ (8028428 <_vfiprintf_r+0x228>)
 8028360:	2203      	movs	r2, #3
 8028362:	0028      	movs	r0, r5
 8028364:	7831      	ldrb	r1, [r6, #0]
 8028366:	f7fd fdf2 	bl	8025f4e <memchr>
 802836a:	2800      	cmp	r0, #0
 802836c:	d006      	beq.n	802837c <_vfiprintf_r+0x17c>
 802836e:	2340      	movs	r3, #64	@ 0x40
 8028370:	1b40      	subs	r0, r0, r5
 8028372:	4083      	lsls	r3, r0
 8028374:	6822      	ldr	r2, [r4, #0]
 8028376:	3601      	adds	r6, #1
 8028378:	4313      	orrs	r3, r2
 802837a:	6023      	str	r3, [r4, #0]
 802837c:	7831      	ldrb	r1, [r6, #0]
 802837e:	2206      	movs	r2, #6
 8028380:	482a      	ldr	r0, [pc, #168]	@ (802842c <_vfiprintf_r+0x22c>)
 8028382:	1c75      	adds	r5, r6, #1
 8028384:	7621      	strb	r1, [r4, #24]
 8028386:	f7fd fde2 	bl	8025f4e <memchr>
 802838a:	2800      	cmp	r0, #0
 802838c:	d040      	beq.n	8028410 <_vfiprintf_r+0x210>
 802838e:	4b28      	ldr	r3, [pc, #160]	@ (8028430 <_vfiprintf_r+0x230>)
 8028390:	2b00      	cmp	r3, #0
 8028392:	d122      	bne.n	80283da <_vfiprintf_r+0x1da>
 8028394:	2207      	movs	r2, #7
 8028396:	9b07      	ldr	r3, [sp, #28]
 8028398:	3307      	adds	r3, #7
 802839a:	4393      	bics	r3, r2
 802839c:	3308      	adds	r3, #8
 802839e:	9307      	str	r3, [sp, #28]
 80283a0:	6963      	ldr	r3, [r4, #20]
 80283a2:	9a04      	ldr	r2, [sp, #16]
 80283a4:	189b      	adds	r3, r3, r2
 80283a6:	6163      	str	r3, [r4, #20]
 80283a8:	e762      	b.n	8028270 <_vfiprintf_r+0x70>
 80283aa:	4343      	muls	r3, r0
 80283ac:	002e      	movs	r6, r5
 80283ae:	2101      	movs	r1, #1
 80283b0:	189b      	adds	r3, r3, r2
 80283b2:	e7a4      	b.n	80282fe <_vfiprintf_r+0xfe>
 80283b4:	2300      	movs	r3, #0
 80283b6:	200a      	movs	r0, #10
 80283b8:	0019      	movs	r1, r3
 80283ba:	3601      	adds	r6, #1
 80283bc:	6063      	str	r3, [r4, #4]
 80283be:	7832      	ldrb	r2, [r6, #0]
 80283c0:	1c75      	adds	r5, r6, #1
 80283c2:	3a30      	subs	r2, #48	@ 0x30
 80283c4:	2a09      	cmp	r2, #9
 80283c6:	d903      	bls.n	80283d0 <_vfiprintf_r+0x1d0>
 80283c8:	2b00      	cmp	r3, #0
 80283ca:	d0c8      	beq.n	802835e <_vfiprintf_r+0x15e>
 80283cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80283ce:	e7c6      	b.n	802835e <_vfiprintf_r+0x15e>
 80283d0:	4341      	muls	r1, r0
 80283d2:	002e      	movs	r6, r5
 80283d4:	2301      	movs	r3, #1
 80283d6:	1889      	adds	r1, r1, r2
 80283d8:	e7f1      	b.n	80283be <_vfiprintf_r+0x1be>
 80283da:	aa07      	add	r2, sp, #28
 80283dc:	9200      	str	r2, [sp, #0]
 80283de:	0021      	movs	r1, r4
 80283e0:	003a      	movs	r2, r7
 80283e2:	4b14      	ldr	r3, [pc, #80]	@ (8028434 <_vfiprintf_r+0x234>)
 80283e4:	9803      	ldr	r0, [sp, #12]
 80283e6:	f7fc fe89 	bl	80250fc <_printf_float>
 80283ea:	9004      	str	r0, [sp, #16]
 80283ec:	9b04      	ldr	r3, [sp, #16]
 80283ee:	3301      	adds	r3, #1
 80283f0:	d1d6      	bne.n	80283a0 <_vfiprintf_r+0x1a0>
 80283f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80283f4:	07db      	lsls	r3, r3, #31
 80283f6:	d405      	bmi.n	8028404 <_vfiprintf_r+0x204>
 80283f8:	89bb      	ldrh	r3, [r7, #12]
 80283fa:	059b      	lsls	r3, r3, #22
 80283fc:	d402      	bmi.n	8028404 <_vfiprintf_r+0x204>
 80283fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028400:	f7fd fda4 	bl	8025f4c <__retarget_lock_release_recursive>
 8028404:	89bb      	ldrh	r3, [r7, #12]
 8028406:	065b      	lsls	r3, r3, #25
 8028408:	d500      	bpl.n	802840c <_vfiprintf_r+0x20c>
 802840a:	e71e      	b.n	802824a <_vfiprintf_r+0x4a>
 802840c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802840e:	e71e      	b.n	802824e <_vfiprintf_r+0x4e>
 8028410:	aa07      	add	r2, sp, #28
 8028412:	9200      	str	r2, [sp, #0]
 8028414:	0021      	movs	r1, r4
 8028416:	003a      	movs	r2, r7
 8028418:	4b06      	ldr	r3, [pc, #24]	@ (8028434 <_vfiprintf_r+0x234>)
 802841a:	9803      	ldr	r0, [sp, #12]
 802841c:	f7fd f91c 	bl	8025658 <_printf_i>
 8028420:	e7e3      	b.n	80283ea <_vfiprintf_r+0x1ea>
 8028422:	46c0      	nop			@ (mov r8, r8)
 8028424:	0802e9d8 	.word	0x0802e9d8
 8028428:	0802e9de 	.word	0x0802e9de
 802842c:	0802e9e2 	.word	0x0802e9e2
 8028430:	080250fd 	.word	0x080250fd
 8028434:	080281db 	.word	0x080281db

08028438 <__sflush_r>:
 8028438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802843a:	220c      	movs	r2, #12
 802843c:	5e8b      	ldrsh	r3, [r1, r2]
 802843e:	0005      	movs	r5, r0
 8028440:	000c      	movs	r4, r1
 8028442:	071a      	lsls	r2, r3, #28
 8028444:	d456      	bmi.n	80284f4 <__sflush_r+0xbc>
 8028446:	684a      	ldr	r2, [r1, #4]
 8028448:	2a00      	cmp	r2, #0
 802844a:	dc02      	bgt.n	8028452 <__sflush_r+0x1a>
 802844c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802844e:	2a00      	cmp	r2, #0
 8028450:	dd4e      	ble.n	80284f0 <__sflush_r+0xb8>
 8028452:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028454:	2f00      	cmp	r7, #0
 8028456:	d04b      	beq.n	80284f0 <__sflush_r+0xb8>
 8028458:	2200      	movs	r2, #0
 802845a:	2080      	movs	r0, #128	@ 0x80
 802845c:	682e      	ldr	r6, [r5, #0]
 802845e:	602a      	str	r2, [r5, #0]
 8028460:	001a      	movs	r2, r3
 8028462:	0140      	lsls	r0, r0, #5
 8028464:	6a21      	ldr	r1, [r4, #32]
 8028466:	4002      	ands	r2, r0
 8028468:	4203      	tst	r3, r0
 802846a:	d033      	beq.n	80284d4 <__sflush_r+0x9c>
 802846c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802846e:	89a3      	ldrh	r3, [r4, #12]
 8028470:	075b      	lsls	r3, r3, #29
 8028472:	d506      	bpl.n	8028482 <__sflush_r+0x4a>
 8028474:	6863      	ldr	r3, [r4, #4]
 8028476:	1ad2      	subs	r2, r2, r3
 8028478:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802847a:	2b00      	cmp	r3, #0
 802847c:	d001      	beq.n	8028482 <__sflush_r+0x4a>
 802847e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028480:	1ad2      	subs	r2, r2, r3
 8028482:	2300      	movs	r3, #0
 8028484:	0028      	movs	r0, r5
 8028486:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028488:	6a21      	ldr	r1, [r4, #32]
 802848a:	47b8      	blx	r7
 802848c:	89a2      	ldrh	r2, [r4, #12]
 802848e:	1c43      	adds	r3, r0, #1
 8028490:	d106      	bne.n	80284a0 <__sflush_r+0x68>
 8028492:	6829      	ldr	r1, [r5, #0]
 8028494:	291d      	cmp	r1, #29
 8028496:	d846      	bhi.n	8028526 <__sflush_r+0xee>
 8028498:	4b29      	ldr	r3, [pc, #164]	@ (8028540 <__sflush_r+0x108>)
 802849a:	40cb      	lsrs	r3, r1
 802849c:	07db      	lsls	r3, r3, #31
 802849e:	d542      	bpl.n	8028526 <__sflush_r+0xee>
 80284a0:	2300      	movs	r3, #0
 80284a2:	6063      	str	r3, [r4, #4]
 80284a4:	6923      	ldr	r3, [r4, #16]
 80284a6:	6023      	str	r3, [r4, #0]
 80284a8:	04d2      	lsls	r2, r2, #19
 80284aa:	d505      	bpl.n	80284b8 <__sflush_r+0x80>
 80284ac:	1c43      	adds	r3, r0, #1
 80284ae:	d102      	bne.n	80284b6 <__sflush_r+0x7e>
 80284b0:	682b      	ldr	r3, [r5, #0]
 80284b2:	2b00      	cmp	r3, #0
 80284b4:	d100      	bne.n	80284b8 <__sflush_r+0x80>
 80284b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80284b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80284ba:	602e      	str	r6, [r5, #0]
 80284bc:	2900      	cmp	r1, #0
 80284be:	d017      	beq.n	80284f0 <__sflush_r+0xb8>
 80284c0:	0023      	movs	r3, r4
 80284c2:	3344      	adds	r3, #68	@ 0x44
 80284c4:	4299      	cmp	r1, r3
 80284c6:	d002      	beq.n	80284ce <__sflush_r+0x96>
 80284c8:	0028      	movs	r0, r5
 80284ca:	f7fe fbd1 	bl	8026c70 <_free_r>
 80284ce:	2300      	movs	r3, #0
 80284d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80284d2:	e00d      	b.n	80284f0 <__sflush_r+0xb8>
 80284d4:	2301      	movs	r3, #1
 80284d6:	0028      	movs	r0, r5
 80284d8:	47b8      	blx	r7
 80284da:	0002      	movs	r2, r0
 80284dc:	1c43      	adds	r3, r0, #1
 80284de:	d1c6      	bne.n	802846e <__sflush_r+0x36>
 80284e0:	682b      	ldr	r3, [r5, #0]
 80284e2:	2b00      	cmp	r3, #0
 80284e4:	d0c3      	beq.n	802846e <__sflush_r+0x36>
 80284e6:	2b1d      	cmp	r3, #29
 80284e8:	d001      	beq.n	80284ee <__sflush_r+0xb6>
 80284ea:	2b16      	cmp	r3, #22
 80284ec:	d11a      	bne.n	8028524 <__sflush_r+0xec>
 80284ee:	602e      	str	r6, [r5, #0]
 80284f0:	2000      	movs	r0, #0
 80284f2:	e01e      	b.n	8028532 <__sflush_r+0xfa>
 80284f4:	690e      	ldr	r6, [r1, #16]
 80284f6:	2e00      	cmp	r6, #0
 80284f8:	d0fa      	beq.n	80284f0 <__sflush_r+0xb8>
 80284fa:	680f      	ldr	r7, [r1, #0]
 80284fc:	600e      	str	r6, [r1, #0]
 80284fe:	1bba      	subs	r2, r7, r6
 8028500:	9201      	str	r2, [sp, #4]
 8028502:	2200      	movs	r2, #0
 8028504:	079b      	lsls	r3, r3, #30
 8028506:	d100      	bne.n	802850a <__sflush_r+0xd2>
 8028508:	694a      	ldr	r2, [r1, #20]
 802850a:	60a2      	str	r2, [r4, #8]
 802850c:	9b01      	ldr	r3, [sp, #4]
 802850e:	2b00      	cmp	r3, #0
 8028510:	ddee      	ble.n	80284f0 <__sflush_r+0xb8>
 8028512:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028514:	0032      	movs	r2, r6
 8028516:	001f      	movs	r7, r3
 8028518:	0028      	movs	r0, r5
 802851a:	9b01      	ldr	r3, [sp, #4]
 802851c:	6a21      	ldr	r1, [r4, #32]
 802851e:	47b8      	blx	r7
 8028520:	2800      	cmp	r0, #0
 8028522:	dc07      	bgt.n	8028534 <__sflush_r+0xfc>
 8028524:	89a2      	ldrh	r2, [r4, #12]
 8028526:	2340      	movs	r3, #64	@ 0x40
 8028528:	2001      	movs	r0, #1
 802852a:	4313      	orrs	r3, r2
 802852c:	b21b      	sxth	r3, r3
 802852e:	81a3      	strh	r3, [r4, #12]
 8028530:	4240      	negs	r0, r0
 8028532:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028534:	9b01      	ldr	r3, [sp, #4]
 8028536:	1836      	adds	r6, r6, r0
 8028538:	1a1b      	subs	r3, r3, r0
 802853a:	9301      	str	r3, [sp, #4]
 802853c:	e7e6      	b.n	802850c <__sflush_r+0xd4>
 802853e:	46c0      	nop			@ (mov r8, r8)
 8028540:	20400001 	.word	0x20400001

08028544 <_fflush_r>:
 8028544:	690b      	ldr	r3, [r1, #16]
 8028546:	b570      	push	{r4, r5, r6, lr}
 8028548:	0005      	movs	r5, r0
 802854a:	000c      	movs	r4, r1
 802854c:	2b00      	cmp	r3, #0
 802854e:	d102      	bne.n	8028556 <_fflush_r+0x12>
 8028550:	2500      	movs	r5, #0
 8028552:	0028      	movs	r0, r5
 8028554:	bd70      	pop	{r4, r5, r6, pc}
 8028556:	2800      	cmp	r0, #0
 8028558:	d004      	beq.n	8028564 <_fflush_r+0x20>
 802855a:	6a03      	ldr	r3, [r0, #32]
 802855c:	2b00      	cmp	r3, #0
 802855e:	d101      	bne.n	8028564 <_fflush_r+0x20>
 8028560:	f7fd fa16 	bl	8025990 <__sinit>
 8028564:	220c      	movs	r2, #12
 8028566:	5ea3      	ldrsh	r3, [r4, r2]
 8028568:	2b00      	cmp	r3, #0
 802856a:	d0f1      	beq.n	8028550 <_fflush_r+0xc>
 802856c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802856e:	07d2      	lsls	r2, r2, #31
 8028570:	d404      	bmi.n	802857c <_fflush_r+0x38>
 8028572:	059b      	lsls	r3, r3, #22
 8028574:	d402      	bmi.n	802857c <_fflush_r+0x38>
 8028576:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028578:	f7fd fce7 	bl	8025f4a <__retarget_lock_acquire_recursive>
 802857c:	0028      	movs	r0, r5
 802857e:	0021      	movs	r1, r4
 8028580:	f7ff ff5a 	bl	8028438 <__sflush_r>
 8028584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028586:	0005      	movs	r5, r0
 8028588:	07db      	lsls	r3, r3, #31
 802858a:	d4e2      	bmi.n	8028552 <_fflush_r+0xe>
 802858c:	89a3      	ldrh	r3, [r4, #12]
 802858e:	059b      	lsls	r3, r3, #22
 8028590:	d4df      	bmi.n	8028552 <_fflush_r+0xe>
 8028592:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028594:	f7fd fcda 	bl	8025f4c <__retarget_lock_release_recursive>
 8028598:	e7db      	b.n	8028552 <_fflush_r+0xe>
	...

0802859c <__swhatbuf_r>:
 802859c:	b570      	push	{r4, r5, r6, lr}
 802859e:	000e      	movs	r6, r1
 80285a0:	001d      	movs	r5, r3
 80285a2:	230e      	movs	r3, #14
 80285a4:	5ec9      	ldrsh	r1, [r1, r3]
 80285a6:	0014      	movs	r4, r2
 80285a8:	b096      	sub	sp, #88	@ 0x58
 80285aa:	2900      	cmp	r1, #0
 80285ac:	da0c      	bge.n	80285c8 <__swhatbuf_r+0x2c>
 80285ae:	89b2      	ldrh	r2, [r6, #12]
 80285b0:	2380      	movs	r3, #128	@ 0x80
 80285b2:	0011      	movs	r1, r2
 80285b4:	4019      	ands	r1, r3
 80285b6:	421a      	tst	r2, r3
 80285b8:	d114      	bne.n	80285e4 <__swhatbuf_r+0x48>
 80285ba:	2380      	movs	r3, #128	@ 0x80
 80285bc:	00db      	lsls	r3, r3, #3
 80285be:	2000      	movs	r0, #0
 80285c0:	6029      	str	r1, [r5, #0]
 80285c2:	6023      	str	r3, [r4, #0]
 80285c4:	b016      	add	sp, #88	@ 0x58
 80285c6:	bd70      	pop	{r4, r5, r6, pc}
 80285c8:	466a      	mov	r2, sp
 80285ca:	f000 f865 	bl	8028698 <_fstat_r>
 80285ce:	2800      	cmp	r0, #0
 80285d0:	dbed      	blt.n	80285ae <__swhatbuf_r+0x12>
 80285d2:	23f0      	movs	r3, #240	@ 0xf0
 80285d4:	9901      	ldr	r1, [sp, #4]
 80285d6:	021b      	lsls	r3, r3, #8
 80285d8:	4019      	ands	r1, r3
 80285da:	4b04      	ldr	r3, [pc, #16]	@ (80285ec <__swhatbuf_r+0x50>)
 80285dc:	18c9      	adds	r1, r1, r3
 80285de:	424b      	negs	r3, r1
 80285e0:	4159      	adcs	r1, r3
 80285e2:	e7ea      	b.n	80285ba <__swhatbuf_r+0x1e>
 80285e4:	2100      	movs	r1, #0
 80285e6:	2340      	movs	r3, #64	@ 0x40
 80285e8:	e7e9      	b.n	80285be <__swhatbuf_r+0x22>
 80285ea:	46c0      	nop			@ (mov r8, r8)
 80285ec:	ffffe000 	.word	0xffffe000

080285f0 <__smakebuf_r>:
 80285f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285f2:	2602      	movs	r6, #2
 80285f4:	898b      	ldrh	r3, [r1, #12]
 80285f6:	0005      	movs	r5, r0
 80285f8:	000c      	movs	r4, r1
 80285fa:	b085      	sub	sp, #20
 80285fc:	4233      	tst	r3, r6
 80285fe:	d007      	beq.n	8028610 <__smakebuf_r+0x20>
 8028600:	0023      	movs	r3, r4
 8028602:	3347      	adds	r3, #71	@ 0x47
 8028604:	6023      	str	r3, [r4, #0]
 8028606:	6123      	str	r3, [r4, #16]
 8028608:	2301      	movs	r3, #1
 802860a:	6163      	str	r3, [r4, #20]
 802860c:	b005      	add	sp, #20
 802860e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028610:	ab03      	add	r3, sp, #12
 8028612:	aa02      	add	r2, sp, #8
 8028614:	f7ff ffc2 	bl	802859c <__swhatbuf_r>
 8028618:	9f02      	ldr	r7, [sp, #8]
 802861a:	9001      	str	r0, [sp, #4]
 802861c:	0039      	movs	r1, r7
 802861e:	0028      	movs	r0, r5
 8028620:	f7fe fef6 	bl	8027410 <_malloc_r>
 8028624:	2800      	cmp	r0, #0
 8028626:	d108      	bne.n	802863a <__smakebuf_r+0x4a>
 8028628:	220c      	movs	r2, #12
 802862a:	5ea3      	ldrsh	r3, [r4, r2]
 802862c:	059a      	lsls	r2, r3, #22
 802862e:	d4ed      	bmi.n	802860c <__smakebuf_r+0x1c>
 8028630:	2203      	movs	r2, #3
 8028632:	4393      	bics	r3, r2
 8028634:	431e      	orrs	r6, r3
 8028636:	81a6      	strh	r6, [r4, #12]
 8028638:	e7e2      	b.n	8028600 <__smakebuf_r+0x10>
 802863a:	2380      	movs	r3, #128	@ 0x80
 802863c:	89a2      	ldrh	r2, [r4, #12]
 802863e:	6020      	str	r0, [r4, #0]
 8028640:	4313      	orrs	r3, r2
 8028642:	81a3      	strh	r3, [r4, #12]
 8028644:	9b03      	ldr	r3, [sp, #12]
 8028646:	6120      	str	r0, [r4, #16]
 8028648:	6167      	str	r7, [r4, #20]
 802864a:	2b00      	cmp	r3, #0
 802864c:	d00c      	beq.n	8028668 <__smakebuf_r+0x78>
 802864e:	0028      	movs	r0, r5
 8028650:	230e      	movs	r3, #14
 8028652:	5ee1      	ldrsh	r1, [r4, r3]
 8028654:	f000 f832 	bl	80286bc <_isatty_r>
 8028658:	2800      	cmp	r0, #0
 802865a:	d005      	beq.n	8028668 <__smakebuf_r+0x78>
 802865c:	2303      	movs	r3, #3
 802865e:	89a2      	ldrh	r2, [r4, #12]
 8028660:	439a      	bics	r2, r3
 8028662:	3b02      	subs	r3, #2
 8028664:	4313      	orrs	r3, r2
 8028666:	81a3      	strh	r3, [r4, #12]
 8028668:	89a3      	ldrh	r3, [r4, #12]
 802866a:	9a01      	ldr	r2, [sp, #4]
 802866c:	4313      	orrs	r3, r2
 802866e:	81a3      	strh	r3, [r4, #12]
 8028670:	e7cc      	b.n	802860c <__smakebuf_r+0x1c>

08028672 <memmove>:
 8028672:	b510      	push	{r4, lr}
 8028674:	4288      	cmp	r0, r1
 8028676:	d902      	bls.n	802867e <memmove+0xc>
 8028678:	188b      	adds	r3, r1, r2
 802867a:	4298      	cmp	r0, r3
 802867c:	d308      	bcc.n	8028690 <memmove+0x1e>
 802867e:	2300      	movs	r3, #0
 8028680:	429a      	cmp	r2, r3
 8028682:	d007      	beq.n	8028694 <memmove+0x22>
 8028684:	5ccc      	ldrb	r4, [r1, r3]
 8028686:	54c4      	strb	r4, [r0, r3]
 8028688:	3301      	adds	r3, #1
 802868a:	e7f9      	b.n	8028680 <memmove+0xe>
 802868c:	5c8b      	ldrb	r3, [r1, r2]
 802868e:	5483      	strb	r3, [r0, r2]
 8028690:	3a01      	subs	r2, #1
 8028692:	d2fb      	bcs.n	802868c <memmove+0x1a>
 8028694:	bd10      	pop	{r4, pc}
	...

08028698 <_fstat_r>:
 8028698:	2300      	movs	r3, #0
 802869a:	b570      	push	{r4, r5, r6, lr}
 802869c:	4d06      	ldr	r5, [pc, #24]	@ (80286b8 <_fstat_r+0x20>)
 802869e:	0004      	movs	r4, r0
 80286a0:	0008      	movs	r0, r1
 80286a2:	0011      	movs	r1, r2
 80286a4:	602b      	str	r3, [r5, #0]
 80286a6:	f7ea fa8f 	bl	8012bc8 <_fstat>
 80286aa:	1c43      	adds	r3, r0, #1
 80286ac:	d103      	bne.n	80286b6 <_fstat_r+0x1e>
 80286ae:	682b      	ldr	r3, [r5, #0]
 80286b0:	2b00      	cmp	r3, #0
 80286b2:	d000      	beq.n	80286b6 <_fstat_r+0x1e>
 80286b4:	6023      	str	r3, [r4, #0]
 80286b6:	bd70      	pop	{r4, r5, r6, pc}
 80286b8:	2000364c 	.word	0x2000364c

080286bc <_isatty_r>:
 80286bc:	2300      	movs	r3, #0
 80286be:	b570      	push	{r4, r5, r6, lr}
 80286c0:	4d06      	ldr	r5, [pc, #24]	@ (80286dc <_isatty_r+0x20>)
 80286c2:	0004      	movs	r4, r0
 80286c4:	0008      	movs	r0, r1
 80286c6:	602b      	str	r3, [r5, #0]
 80286c8:	f7ea fa8c 	bl	8012be4 <_isatty>
 80286cc:	1c43      	adds	r3, r0, #1
 80286ce:	d103      	bne.n	80286d8 <_isatty_r+0x1c>
 80286d0:	682b      	ldr	r3, [r5, #0]
 80286d2:	2b00      	cmp	r3, #0
 80286d4:	d000      	beq.n	80286d8 <_isatty_r+0x1c>
 80286d6:	6023      	str	r3, [r4, #0]
 80286d8:	bd70      	pop	{r4, r5, r6, pc}
 80286da:	46c0      	nop			@ (mov r8, r8)
 80286dc:	2000364c 	.word	0x2000364c

080286e0 <_sbrk_r>:
 80286e0:	2300      	movs	r3, #0
 80286e2:	b570      	push	{r4, r5, r6, lr}
 80286e4:	4d06      	ldr	r5, [pc, #24]	@ (8028700 <_sbrk_r+0x20>)
 80286e6:	0004      	movs	r4, r0
 80286e8:	0008      	movs	r0, r1
 80286ea:	602b      	str	r3, [r5, #0]
 80286ec:	f7ea fa8e 	bl	8012c0c <_sbrk>
 80286f0:	1c43      	adds	r3, r0, #1
 80286f2:	d103      	bne.n	80286fc <_sbrk_r+0x1c>
 80286f4:	682b      	ldr	r3, [r5, #0]
 80286f6:	2b00      	cmp	r3, #0
 80286f8:	d000      	beq.n	80286fc <_sbrk_r+0x1c>
 80286fa:	6023      	str	r3, [r4, #0]
 80286fc:	bd70      	pop	{r4, r5, r6, pc}
 80286fe:	46c0      	nop			@ (mov r8, r8)
 8028700:	2000364c 	.word	0x2000364c

08028704 <__assert_func>:
 8028704:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028706:	0014      	movs	r4, r2
 8028708:	001a      	movs	r2, r3
 802870a:	4b09      	ldr	r3, [pc, #36]	@ (8028730 <__assert_func+0x2c>)
 802870c:	0005      	movs	r5, r0
 802870e:	681b      	ldr	r3, [r3, #0]
 8028710:	000e      	movs	r6, r1
 8028712:	68d8      	ldr	r0, [r3, #12]
 8028714:	4b07      	ldr	r3, [pc, #28]	@ (8028734 <__assert_func+0x30>)
 8028716:	2c00      	cmp	r4, #0
 8028718:	d101      	bne.n	802871e <__assert_func+0x1a>
 802871a:	4b07      	ldr	r3, [pc, #28]	@ (8028738 <__assert_func+0x34>)
 802871c:	001c      	movs	r4, r3
 802871e:	4907      	ldr	r1, [pc, #28]	@ (802873c <__assert_func+0x38>)
 8028720:	9301      	str	r3, [sp, #4]
 8028722:	9402      	str	r4, [sp, #8]
 8028724:	002b      	movs	r3, r5
 8028726:	9600      	str	r6, [sp, #0]
 8028728:	f000 f868 	bl	80287fc <fiprintf>
 802872c:	f000 f876 	bl	802881c <abort>
 8028730:	200003e4 	.word	0x200003e4
 8028734:	0802e9e9 	.word	0x0802e9e9
 8028738:	0802ea24 	.word	0x0802ea24
 802873c:	0802e9f6 	.word	0x0802e9f6

08028740 <_calloc_r>:
 8028740:	b570      	push	{r4, r5, r6, lr}
 8028742:	0c0b      	lsrs	r3, r1, #16
 8028744:	0c15      	lsrs	r5, r2, #16
 8028746:	2b00      	cmp	r3, #0
 8028748:	d11e      	bne.n	8028788 <_calloc_r+0x48>
 802874a:	2d00      	cmp	r5, #0
 802874c:	d10c      	bne.n	8028768 <_calloc_r+0x28>
 802874e:	b289      	uxth	r1, r1
 8028750:	b294      	uxth	r4, r2
 8028752:	434c      	muls	r4, r1
 8028754:	0021      	movs	r1, r4
 8028756:	f7fe fe5b 	bl	8027410 <_malloc_r>
 802875a:	1e05      	subs	r5, r0, #0
 802875c:	d01b      	beq.n	8028796 <_calloc_r+0x56>
 802875e:	0022      	movs	r2, r4
 8028760:	2100      	movs	r1, #0
 8028762:	f7fd fb23 	bl	8025dac <memset>
 8028766:	e016      	b.n	8028796 <_calloc_r+0x56>
 8028768:	1c2b      	adds	r3, r5, #0
 802876a:	1c0c      	adds	r4, r1, #0
 802876c:	b289      	uxth	r1, r1
 802876e:	b292      	uxth	r2, r2
 8028770:	434a      	muls	r2, r1
 8028772:	b29b      	uxth	r3, r3
 8028774:	b2a1      	uxth	r1, r4
 8028776:	4359      	muls	r1, r3
 8028778:	0c14      	lsrs	r4, r2, #16
 802877a:	190c      	adds	r4, r1, r4
 802877c:	0c23      	lsrs	r3, r4, #16
 802877e:	d107      	bne.n	8028790 <_calloc_r+0x50>
 8028780:	0424      	lsls	r4, r4, #16
 8028782:	b292      	uxth	r2, r2
 8028784:	4314      	orrs	r4, r2
 8028786:	e7e5      	b.n	8028754 <_calloc_r+0x14>
 8028788:	2d00      	cmp	r5, #0
 802878a:	d101      	bne.n	8028790 <_calloc_r+0x50>
 802878c:	1c14      	adds	r4, r2, #0
 802878e:	e7ed      	b.n	802876c <_calloc_r+0x2c>
 8028790:	230c      	movs	r3, #12
 8028792:	2500      	movs	r5, #0
 8028794:	6003      	str	r3, [r0, #0]
 8028796:	0028      	movs	r0, r5
 8028798:	bd70      	pop	{r4, r5, r6, pc}

0802879a <_realloc_r>:
 802879a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802879c:	0006      	movs	r6, r0
 802879e:	000c      	movs	r4, r1
 80287a0:	0015      	movs	r5, r2
 80287a2:	2900      	cmp	r1, #0
 80287a4:	d105      	bne.n	80287b2 <_realloc_r+0x18>
 80287a6:	0011      	movs	r1, r2
 80287a8:	f7fe fe32 	bl	8027410 <_malloc_r>
 80287ac:	0004      	movs	r4, r0
 80287ae:	0020      	movs	r0, r4
 80287b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80287b2:	2a00      	cmp	r2, #0
 80287b4:	d103      	bne.n	80287be <_realloc_r+0x24>
 80287b6:	f7fe fa5b 	bl	8026c70 <_free_r>
 80287ba:	002c      	movs	r4, r5
 80287bc:	e7f7      	b.n	80287ae <_realloc_r+0x14>
 80287be:	f000 f834 	bl	802882a <_malloc_usable_size_r>
 80287c2:	0007      	movs	r7, r0
 80287c4:	4285      	cmp	r5, r0
 80287c6:	d802      	bhi.n	80287ce <_realloc_r+0x34>
 80287c8:	0843      	lsrs	r3, r0, #1
 80287ca:	42ab      	cmp	r3, r5
 80287cc:	d3ef      	bcc.n	80287ae <_realloc_r+0x14>
 80287ce:	0029      	movs	r1, r5
 80287d0:	0030      	movs	r0, r6
 80287d2:	f7fe fe1d 	bl	8027410 <_malloc_r>
 80287d6:	9001      	str	r0, [sp, #4]
 80287d8:	2800      	cmp	r0, #0
 80287da:	d101      	bne.n	80287e0 <_realloc_r+0x46>
 80287dc:	9c01      	ldr	r4, [sp, #4]
 80287de:	e7e6      	b.n	80287ae <_realloc_r+0x14>
 80287e0:	002a      	movs	r2, r5
 80287e2:	42bd      	cmp	r5, r7
 80287e4:	d900      	bls.n	80287e8 <_realloc_r+0x4e>
 80287e6:	003a      	movs	r2, r7
 80287e8:	0021      	movs	r1, r4
 80287ea:	9801      	ldr	r0, [sp, #4]
 80287ec:	f7fd fbba 	bl	8025f64 <memcpy>
 80287f0:	0021      	movs	r1, r4
 80287f2:	0030      	movs	r0, r6
 80287f4:	f7fe fa3c 	bl	8026c70 <_free_r>
 80287f8:	e7f0      	b.n	80287dc <_realloc_r+0x42>
	...

080287fc <fiprintf>:
 80287fc:	b40e      	push	{r1, r2, r3}
 80287fe:	b517      	push	{r0, r1, r2, r4, lr}
 8028800:	4c05      	ldr	r4, [pc, #20]	@ (8028818 <fiprintf+0x1c>)
 8028802:	ab05      	add	r3, sp, #20
 8028804:	cb04      	ldmia	r3!, {r2}
 8028806:	0001      	movs	r1, r0
 8028808:	6820      	ldr	r0, [r4, #0]
 802880a:	9301      	str	r3, [sp, #4]
 802880c:	f7ff fcf8 	bl	8028200 <_vfiprintf_r>
 8028810:	bc1e      	pop	{r1, r2, r3, r4}
 8028812:	bc08      	pop	{r3}
 8028814:	b003      	add	sp, #12
 8028816:	4718      	bx	r3
 8028818:	200003e4 	.word	0x200003e4

0802881c <abort>:
 802881c:	2006      	movs	r0, #6
 802881e:	b510      	push	{r4, lr}
 8028820:	f000 f834 	bl	802888c <raise>
 8028824:	2001      	movs	r0, #1
 8028826:	f7ea f99b 	bl	8012b60 <_exit>

0802882a <_malloc_usable_size_r>:
 802882a:	1f0b      	subs	r3, r1, #4
 802882c:	681b      	ldr	r3, [r3, #0]
 802882e:	1f18      	subs	r0, r3, #4
 8028830:	2b00      	cmp	r3, #0
 8028832:	da01      	bge.n	8028838 <_malloc_usable_size_r+0xe>
 8028834:	580b      	ldr	r3, [r1, r0]
 8028836:	18c0      	adds	r0, r0, r3
 8028838:	4770      	bx	lr

0802883a <_raise_r>:
 802883a:	b570      	push	{r4, r5, r6, lr}
 802883c:	0004      	movs	r4, r0
 802883e:	000d      	movs	r5, r1
 8028840:	291f      	cmp	r1, #31
 8028842:	d904      	bls.n	802884e <_raise_r+0x14>
 8028844:	2316      	movs	r3, #22
 8028846:	6003      	str	r3, [r0, #0]
 8028848:	2001      	movs	r0, #1
 802884a:	4240      	negs	r0, r0
 802884c:	bd70      	pop	{r4, r5, r6, pc}
 802884e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8028850:	2b00      	cmp	r3, #0
 8028852:	d004      	beq.n	802885e <_raise_r+0x24>
 8028854:	008a      	lsls	r2, r1, #2
 8028856:	189b      	adds	r3, r3, r2
 8028858:	681a      	ldr	r2, [r3, #0]
 802885a:	2a00      	cmp	r2, #0
 802885c:	d108      	bne.n	8028870 <_raise_r+0x36>
 802885e:	0020      	movs	r0, r4
 8028860:	f000 f830 	bl	80288c4 <_getpid_r>
 8028864:	002a      	movs	r2, r5
 8028866:	0001      	movs	r1, r0
 8028868:	0020      	movs	r0, r4
 802886a:	f000 f819 	bl	80288a0 <_kill_r>
 802886e:	e7ed      	b.n	802884c <_raise_r+0x12>
 8028870:	2a01      	cmp	r2, #1
 8028872:	d009      	beq.n	8028888 <_raise_r+0x4e>
 8028874:	1c51      	adds	r1, r2, #1
 8028876:	d103      	bne.n	8028880 <_raise_r+0x46>
 8028878:	2316      	movs	r3, #22
 802887a:	6003      	str	r3, [r0, #0]
 802887c:	2001      	movs	r0, #1
 802887e:	e7e5      	b.n	802884c <_raise_r+0x12>
 8028880:	2100      	movs	r1, #0
 8028882:	0028      	movs	r0, r5
 8028884:	6019      	str	r1, [r3, #0]
 8028886:	4790      	blx	r2
 8028888:	2000      	movs	r0, #0
 802888a:	e7df      	b.n	802884c <_raise_r+0x12>

0802888c <raise>:
 802888c:	b510      	push	{r4, lr}
 802888e:	4b03      	ldr	r3, [pc, #12]	@ (802889c <raise+0x10>)
 8028890:	0001      	movs	r1, r0
 8028892:	6818      	ldr	r0, [r3, #0]
 8028894:	f7ff ffd1 	bl	802883a <_raise_r>
 8028898:	bd10      	pop	{r4, pc}
 802889a:	46c0      	nop			@ (mov r8, r8)
 802889c:	200003e4 	.word	0x200003e4

080288a0 <_kill_r>:
 80288a0:	2300      	movs	r3, #0
 80288a2:	b570      	push	{r4, r5, r6, lr}
 80288a4:	4d06      	ldr	r5, [pc, #24]	@ (80288c0 <_kill_r+0x20>)
 80288a6:	0004      	movs	r4, r0
 80288a8:	0008      	movs	r0, r1
 80288aa:	0011      	movs	r1, r2
 80288ac:	602b      	str	r3, [r5, #0]
 80288ae:	f7ea f947 	bl	8012b40 <_kill>
 80288b2:	1c43      	adds	r3, r0, #1
 80288b4:	d103      	bne.n	80288be <_kill_r+0x1e>
 80288b6:	682b      	ldr	r3, [r5, #0]
 80288b8:	2b00      	cmp	r3, #0
 80288ba:	d000      	beq.n	80288be <_kill_r+0x1e>
 80288bc:	6023      	str	r3, [r4, #0]
 80288be:	bd70      	pop	{r4, r5, r6, pc}
 80288c0:	2000364c 	.word	0x2000364c

080288c4 <_getpid_r>:
 80288c4:	b510      	push	{r4, lr}
 80288c6:	f7ea f935 	bl	8012b34 <_getpid>
 80288ca:	bd10      	pop	{r4, pc}

080288cc <log>:
 80288cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288ce:	0004      	movs	r4, r0
 80288d0:	000d      	movs	r5, r1
 80288d2:	f000 f98d 	bl	8028bf0 <__ieee754_log>
 80288d6:	0022      	movs	r2, r4
 80288d8:	0006      	movs	r6, r0
 80288da:	000f      	movs	r7, r1
 80288dc:	002b      	movs	r3, r5
 80288de:	0020      	movs	r0, r4
 80288e0:	0029      	movs	r1, r5
 80288e2:	f7da ff27 	bl	8003734 <__aeabi_dcmpun>
 80288e6:	2800      	cmp	r0, #0
 80288e8:	d115      	bne.n	8028916 <log+0x4a>
 80288ea:	2200      	movs	r2, #0
 80288ec:	2300      	movs	r3, #0
 80288ee:	0020      	movs	r0, r4
 80288f0:	0029      	movs	r1, r5
 80288f2:	f7d7 fdf7 	bl	80004e4 <__aeabi_dcmpgt>
 80288f6:	2800      	cmp	r0, #0
 80288f8:	d10d      	bne.n	8028916 <log+0x4a>
 80288fa:	2200      	movs	r2, #0
 80288fc:	2300      	movs	r3, #0
 80288fe:	0020      	movs	r0, r4
 8028900:	0029      	movs	r1, r5
 8028902:	f7d7 fdd5 	bl	80004b0 <__aeabi_dcmpeq>
 8028906:	2800      	cmp	r0, #0
 8028908:	d008      	beq.n	802891c <log+0x50>
 802890a:	f7fd faf3 	bl	8025ef4 <__errno>
 802890e:	2322      	movs	r3, #34	@ 0x22
 8028910:	2600      	movs	r6, #0
 8028912:	4f07      	ldr	r7, [pc, #28]	@ (8028930 <log+0x64>)
 8028914:	6003      	str	r3, [r0, #0]
 8028916:	0030      	movs	r0, r6
 8028918:	0039      	movs	r1, r7
 802891a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802891c:	f7fd faea 	bl	8025ef4 <__errno>
 8028920:	2321      	movs	r3, #33	@ 0x21
 8028922:	6003      	str	r3, [r0, #0]
 8028924:	4803      	ldr	r0, [pc, #12]	@ (8028934 <log+0x68>)
 8028926:	f7fd fb27 	bl	8025f78 <nan>
 802892a:	0006      	movs	r6, r0
 802892c:	000f      	movs	r7, r1
 802892e:	e7f2      	b.n	8028916 <log+0x4a>
 8028930:	fff00000 	.word	0xfff00000
 8028934:	0802ea24 	.word	0x0802ea24

08028938 <pow>:
 8028938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802893a:	0014      	movs	r4, r2
 802893c:	001d      	movs	r5, r3
 802893e:	9000      	str	r0, [sp, #0]
 8028940:	9101      	str	r1, [sp, #4]
 8028942:	f000 fb07 	bl	8028f54 <__ieee754_pow>
 8028946:	0022      	movs	r2, r4
 8028948:	0006      	movs	r6, r0
 802894a:	000f      	movs	r7, r1
 802894c:	002b      	movs	r3, r5
 802894e:	0020      	movs	r0, r4
 8028950:	0029      	movs	r1, r5
 8028952:	f7da feef 	bl	8003734 <__aeabi_dcmpun>
 8028956:	2800      	cmp	r0, #0
 8028958:	d13f      	bne.n	80289da <pow+0xa2>
 802895a:	9800      	ldr	r0, [sp, #0]
 802895c:	9901      	ldr	r1, [sp, #4]
 802895e:	2200      	movs	r2, #0
 8028960:	2300      	movs	r3, #0
 8028962:	f7d7 fda5 	bl	80004b0 <__aeabi_dcmpeq>
 8028966:	2800      	cmp	r0, #0
 8028968:	d019      	beq.n	802899e <pow+0x66>
 802896a:	2200      	movs	r2, #0
 802896c:	2300      	movs	r3, #0
 802896e:	0020      	movs	r0, r4
 8028970:	0029      	movs	r1, r5
 8028972:	f7d7 fd9d 	bl	80004b0 <__aeabi_dcmpeq>
 8028976:	2800      	cmp	r0, #0
 8028978:	d146      	bne.n	8028a08 <pow+0xd0>
 802897a:	0020      	movs	r0, r4
 802897c:	0029      	movs	r1, r5
 802897e:	f000 f88d 	bl	8028a9c <finite>
 8028982:	2800      	cmp	r0, #0
 8028984:	d029      	beq.n	80289da <pow+0xa2>
 8028986:	2200      	movs	r2, #0
 8028988:	2300      	movs	r3, #0
 802898a:	0020      	movs	r0, r4
 802898c:	0029      	movs	r1, r5
 802898e:	f7d7 fd95 	bl	80004bc <__aeabi_dcmplt>
 8028992:	2800      	cmp	r0, #0
 8028994:	d021      	beq.n	80289da <pow+0xa2>
 8028996:	f7fd faad 	bl	8025ef4 <__errno>
 802899a:	2322      	movs	r3, #34	@ 0x22
 802899c:	e01c      	b.n	80289d8 <pow+0xa0>
 802899e:	0030      	movs	r0, r6
 80289a0:	0039      	movs	r1, r7
 80289a2:	f000 f87b 	bl	8028a9c <finite>
 80289a6:	2800      	cmp	r0, #0
 80289a8:	d11b      	bne.n	80289e2 <pow+0xaa>
 80289aa:	9800      	ldr	r0, [sp, #0]
 80289ac:	9901      	ldr	r1, [sp, #4]
 80289ae:	f000 f875 	bl	8028a9c <finite>
 80289b2:	2800      	cmp	r0, #0
 80289b4:	d015      	beq.n	80289e2 <pow+0xaa>
 80289b6:	0020      	movs	r0, r4
 80289b8:	0029      	movs	r1, r5
 80289ba:	f000 f86f 	bl	8028a9c <finite>
 80289be:	2800      	cmp	r0, #0
 80289c0:	d00f      	beq.n	80289e2 <pow+0xaa>
 80289c2:	0032      	movs	r2, r6
 80289c4:	003b      	movs	r3, r7
 80289c6:	0030      	movs	r0, r6
 80289c8:	0039      	movs	r1, r7
 80289ca:	f7da feb3 	bl	8003734 <__aeabi_dcmpun>
 80289ce:	2800      	cmp	r0, #0
 80289d0:	d0e1      	beq.n	8028996 <pow+0x5e>
 80289d2:	f7fd fa8f 	bl	8025ef4 <__errno>
 80289d6:	2321      	movs	r3, #33	@ 0x21
 80289d8:	6003      	str	r3, [r0, #0]
 80289da:	0030      	movs	r0, r6
 80289dc:	0039      	movs	r1, r7
 80289de:	b003      	add	sp, #12
 80289e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80289e2:	2200      	movs	r2, #0
 80289e4:	2300      	movs	r3, #0
 80289e6:	0030      	movs	r0, r6
 80289e8:	0039      	movs	r1, r7
 80289ea:	f7d7 fd61 	bl	80004b0 <__aeabi_dcmpeq>
 80289ee:	2800      	cmp	r0, #0
 80289f0:	d0f3      	beq.n	80289da <pow+0xa2>
 80289f2:	9800      	ldr	r0, [sp, #0]
 80289f4:	9901      	ldr	r1, [sp, #4]
 80289f6:	f000 f851 	bl	8028a9c <finite>
 80289fa:	2800      	cmp	r0, #0
 80289fc:	d0ed      	beq.n	80289da <pow+0xa2>
 80289fe:	0020      	movs	r0, r4
 8028a00:	0029      	movs	r1, r5
 8028a02:	f000 f84b 	bl	8028a9c <finite>
 8028a06:	e7c4      	b.n	8028992 <pow+0x5a>
 8028a08:	2600      	movs	r6, #0
 8028a0a:	4f01      	ldr	r7, [pc, #4]	@ (8028a10 <pow+0xd8>)
 8028a0c:	e7e5      	b.n	80289da <pow+0xa2>
 8028a0e:	46c0      	nop			@ (mov r8, r8)
 8028a10:	3ff00000 	.word	0x3ff00000

08028a14 <expf>:
 8028a14:	b570      	push	{r4, r5, r6, lr}
 8028a16:	1c04      	adds	r4, r0, #0
 8028a18:	f000 ffb8 	bl	802998c <__ieee754_expf>
 8028a1c:	1c05      	adds	r5, r0, #0
 8028a1e:	1c20      	adds	r0, r4, #0
 8028a20:	f000 f844 	bl	8028aac <finitef>
 8028a24:	2800      	cmp	r0, #0
 8028a26:	d00b      	beq.n	8028a40 <expf+0x2c>
 8028a28:	490c      	ldr	r1, [pc, #48]	@ (8028a5c <expf+0x48>)
 8028a2a:	1c20      	adds	r0, r4, #0
 8028a2c:	f7d7 fd94 	bl	8000558 <__aeabi_fcmpgt>
 8028a30:	2800      	cmp	r0, #0
 8028a32:	d007      	beq.n	8028a44 <expf+0x30>
 8028a34:	f7fd fa5e 	bl	8025ef4 <__errno>
 8028a38:	25ff      	movs	r5, #255	@ 0xff
 8028a3a:	2322      	movs	r3, #34	@ 0x22
 8028a3c:	05ed      	lsls	r5, r5, #23
 8028a3e:	6003      	str	r3, [r0, #0]
 8028a40:	1c28      	adds	r0, r5, #0
 8028a42:	bd70      	pop	{r4, r5, r6, pc}
 8028a44:	4906      	ldr	r1, [pc, #24]	@ (8028a60 <expf+0x4c>)
 8028a46:	1c20      	adds	r0, r4, #0
 8028a48:	f7d7 fd72 	bl	8000530 <__aeabi_fcmplt>
 8028a4c:	2800      	cmp	r0, #0
 8028a4e:	d0f7      	beq.n	8028a40 <expf+0x2c>
 8028a50:	f7fd fa50 	bl	8025ef4 <__errno>
 8028a54:	2322      	movs	r3, #34	@ 0x22
 8028a56:	2500      	movs	r5, #0
 8028a58:	6003      	str	r3, [r0, #0]
 8028a5a:	e7f1      	b.n	8028a40 <expf+0x2c>
 8028a5c:	42b17217 	.word	0x42b17217
 8028a60:	c2cff1b5 	.word	0xc2cff1b5

08028a64 <sqrtf>:
 8028a64:	b570      	push	{r4, r5, r6, lr}
 8028a66:	1c05      	adds	r5, r0, #0
 8028a68:	f000 f82a 	bl	8028ac0 <__ieee754_sqrtf>
 8028a6c:	1c29      	adds	r1, r5, #0
 8028a6e:	1c04      	adds	r4, r0, #0
 8028a70:	1c28      	adds	r0, r5, #0
 8028a72:	f7d8 fea3 	bl	80017bc <__aeabi_fcmpun>
 8028a76:	2800      	cmp	r0, #0
 8028a78:	d10e      	bne.n	8028a98 <sqrtf+0x34>
 8028a7a:	2100      	movs	r1, #0
 8028a7c:	1c28      	adds	r0, r5, #0
 8028a7e:	f7d7 fd57 	bl	8000530 <__aeabi_fcmplt>
 8028a82:	2800      	cmp	r0, #0
 8028a84:	d008      	beq.n	8028a98 <sqrtf+0x34>
 8028a86:	f7fd fa35 	bl	8025ef4 <__errno>
 8028a8a:	2321      	movs	r3, #33	@ 0x21
 8028a8c:	2100      	movs	r1, #0
 8028a8e:	6003      	str	r3, [r0, #0]
 8028a90:	1c08      	adds	r0, r1, #0
 8028a92:	f7d8 f907 	bl	8000ca4 <__aeabi_fdiv>
 8028a96:	1c04      	adds	r4, r0, #0
 8028a98:	1c20      	adds	r0, r4, #0
 8028a9a:	bd70      	pop	{r4, r5, r6, pc}

08028a9c <finite>:
 8028a9c:	4b02      	ldr	r3, [pc, #8]	@ (8028aa8 <finite+0xc>)
 8028a9e:	0048      	lsls	r0, r1, #1
 8028aa0:	0840      	lsrs	r0, r0, #1
 8028aa2:	18c0      	adds	r0, r0, r3
 8028aa4:	0fc0      	lsrs	r0, r0, #31
 8028aa6:	4770      	bx	lr
 8028aa8:	80100000 	.word	0x80100000

08028aac <finitef>:
 8028aac:	22ff      	movs	r2, #255	@ 0xff
 8028aae:	0043      	lsls	r3, r0, #1
 8028ab0:	085b      	lsrs	r3, r3, #1
 8028ab2:	2001      	movs	r0, #1
 8028ab4:	05d2      	lsls	r2, r2, #23
 8028ab6:	4293      	cmp	r3, r2
 8028ab8:	db00      	blt.n	8028abc <finitef+0x10>
 8028aba:	2000      	movs	r0, #0
 8028abc:	4770      	bx	lr
	...

08028ac0 <__ieee754_sqrtf>:
 8028ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028ac2:	21ff      	movs	r1, #255	@ 0xff
 8028ac4:	0042      	lsls	r2, r0, #1
 8028ac6:	0003      	movs	r3, r0
 8028ac8:	1c04      	adds	r4, r0, #0
 8028aca:	0852      	lsrs	r2, r2, #1
 8028acc:	05c9      	lsls	r1, r1, #23
 8028ace:	428a      	cmp	r2, r1
 8028ad0:	d309      	bcc.n	8028ae6 <__ieee754_sqrtf+0x26>
 8028ad2:	1c01      	adds	r1, r0, #0
 8028ad4:	f7d8 fab4 	bl	8001040 <__aeabi_fmul>
 8028ad8:	1c01      	adds	r1, r0, #0
 8028ada:	1c20      	adds	r0, r4, #0
 8028adc:	f7d7 fef0 	bl	80008c0 <__aeabi_fadd>
 8028ae0:	1c04      	adds	r4, r0, #0
 8028ae2:	1c20      	adds	r0, r4, #0
 8028ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028ae6:	2a00      	cmp	r2, #0
 8028ae8:	d0fb      	beq.n	8028ae2 <__ieee754_sqrtf+0x22>
 8028aea:	2800      	cmp	r0, #0
 8028aec:	da06      	bge.n	8028afc <__ieee754_sqrtf+0x3c>
 8028aee:	1c01      	adds	r1, r0, #0
 8028af0:	f7d8 fc00 	bl	80012f4 <__aeabi_fsub>
 8028af4:	1c01      	adds	r1, r0, #0
 8028af6:	f7d8 f8d5 	bl	8000ca4 <__aeabi_fdiv>
 8028afa:	e7f1      	b.n	8028ae0 <__ieee754_sqrtf+0x20>
 8028afc:	0002      	movs	r2, r0
 8028afe:	400a      	ands	r2, r1
 8028b00:	4208      	tst	r0, r1
 8028b02:	d040      	beq.n	8028b86 <__ieee754_sqrtf+0xc6>
 8028b04:	15c1      	asrs	r1, r0, #23
 8028b06:	2280      	movs	r2, #128	@ 0x80
 8028b08:	000f      	movs	r7, r1
 8028b0a:	025b      	lsls	r3, r3, #9
 8028b0c:	0a5b      	lsrs	r3, r3, #9
 8028b0e:	0412      	lsls	r2, r2, #16
 8028b10:	3f7f      	subs	r7, #127	@ 0x7f
 8028b12:	4313      	orrs	r3, r2
 8028b14:	07c9      	lsls	r1, r1, #31
 8028b16:	d400      	bmi.n	8028b1a <__ieee754_sqrtf+0x5a>
 8028b18:	005b      	lsls	r3, r3, #1
 8028b1a:	2400      	movs	r4, #0
 8028b1c:	2180      	movs	r1, #128	@ 0x80
 8028b1e:	2019      	movs	r0, #25
 8028b20:	0026      	movs	r6, r4
 8028b22:	107f      	asrs	r7, r7, #1
 8028b24:	005b      	lsls	r3, r3, #1
 8028b26:	0449      	lsls	r1, r1, #17
 8028b28:	1875      	adds	r5, r6, r1
 8028b2a:	001a      	movs	r2, r3
 8028b2c:	429d      	cmp	r5, r3
 8028b2e:	dc02      	bgt.n	8028b36 <__ieee754_sqrtf+0x76>
 8028b30:	186e      	adds	r6, r5, r1
 8028b32:	1b5a      	subs	r2, r3, r5
 8028b34:	1864      	adds	r4, r4, r1
 8028b36:	3801      	subs	r0, #1
 8028b38:	0053      	lsls	r3, r2, #1
 8028b3a:	0849      	lsrs	r1, r1, #1
 8028b3c:	2800      	cmp	r0, #0
 8028b3e:	d1f3      	bne.n	8028b28 <__ieee754_sqrtf+0x68>
 8028b40:	2a00      	cmp	r2, #0
 8028b42:	d019      	beq.n	8028b78 <__ieee754_sqrtf+0xb8>
 8028b44:	4d16      	ldr	r5, [pc, #88]	@ (8028ba0 <__ieee754_sqrtf+0xe0>)
 8028b46:	4e17      	ldr	r6, [pc, #92]	@ (8028ba4 <__ieee754_sqrtf+0xe4>)
 8028b48:	6828      	ldr	r0, [r5, #0]
 8028b4a:	6831      	ldr	r1, [r6, #0]
 8028b4c:	682b      	ldr	r3, [r5, #0]
 8028b4e:	9301      	str	r3, [sp, #4]
 8028b50:	f7d8 fbd0 	bl	80012f4 <__aeabi_fsub>
 8028b54:	1c01      	adds	r1, r0, #0
 8028b56:	9801      	ldr	r0, [sp, #4]
 8028b58:	f7d7 fcf4 	bl	8000544 <__aeabi_fcmple>
 8028b5c:	2800      	cmp	r0, #0
 8028b5e:	d00b      	beq.n	8028b78 <__ieee754_sqrtf+0xb8>
 8028b60:	6828      	ldr	r0, [r5, #0]
 8028b62:	6831      	ldr	r1, [r6, #0]
 8028b64:	f7d7 feac 	bl	80008c0 <__aeabi_fadd>
 8028b68:	682d      	ldr	r5, [r5, #0]
 8028b6a:	1c01      	adds	r1, r0, #0
 8028b6c:	1c28      	adds	r0, r5, #0
 8028b6e:	f7d7 fcdf 	bl	8000530 <__aeabi_fcmplt>
 8028b72:	2800      	cmp	r0, #0
 8028b74:	d010      	beq.n	8028b98 <__ieee754_sqrtf+0xd8>
 8028b76:	3402      	adds	r4, #2
 8028b78:	23fc      	movs	r3, #252	@ 0xfc
 8028b7a:	1064      	asrs	r4, r4, #1
 8028b7c:	059b      	lsls	r3, r3, #22
 8028b7e:	18e3      	adds	r3, r4, r3
 8028b80:	05fc      	lsls	r4, r7, #23
 8028b82:	18e4      	adds	r4, r4, r3
 8028b84:	e7ad      	b.n	8028ae2 <__ieee754_sqrtf+0x22>
 8028b86:	2080      	movs	r0, #128	@ 0x80
 8028b88:	0400      	lsls	r0, r0, #16
 8028b8a:	005b      	lsls	r3, r3, #1
 8028b8c:	0011      	movs	r1, r2
 8028b8e:	3201      	adds	r2, #1
 8028b90:	4203      	tst	r3, r0
 8028b92:	d0fa      	beq.n	8028b8a <__ieee754_sqrtf+0xca>
 8028b94:	4249      	negs	r1, r1
 8028b96:	e7b6      	b.n	8028b06 <__ieee754_sqrtf+0x46>
 8028b98:	2301      	movs	r3, #1
 8028b9a:	3401      	adds	r4, #1
 8028b9c:	439c      	bics	r4, r3
 8028b9e:	e7eb      	b.n	8028b78 <__ieee754_sqrtf+0xb8>
 8028ba0:	0802ec7c 	.word	0x0802ec7c
 8028ba4:	0802ec78 	.word	0x0802ec78

08028ba8 <roundf>:
 8028ba8:	0dc3      	lsrs	r3, r0, #23
 8028baa:	b2db      	uxtb	r3, r3
 8028bac:	3b7f      	subs	r3, #127	@ 0x7f
 8028bae:	0002      	movs	r2, r0
 8028bb0:	b510      	push	{r4, lr}
 8028bb2:	2b16      	cmp	r3, #22
 8028bb4:	dc13      	bgt.n	8028bde <roundf+0x36>
 8028bb6:	2b00      	cmp	r3, #0
 8028bb8:	da07      	bge.n	8028bca <roundf+0x22>
 8028bba:	0fc2      	lsrs	r2, r0, #31
 8028bbc:	07d0      	lsls	r0, r2, #31
 8028bbe:	3301      	adds	r3, #1
 8028bc0:	d102      	bne.n	8028bc8 <roundf+0x20>
 8028bc2:	23fe      	movs	r3, #254	@ 0xfe
 8028bc4:	059b      	lsls	r3, r3, #22
 8028bc6:	4318      	orrs	r0, r3
 8028bc8:	bd10      	pop	{r4, pc}
 8028bca:	4908      	ldr	r1, [pc, #32]	@ (8028bec <roundf+0x44>)
 8028bcc:	4119      	asrs	r1, r3
 8028bce:	4208      	tst	r0, r1
 8028bd0:	d0fa      	beq.n	8028bc8 <roundf+0x20>
 8028bd2:	2080      	movs	r0, #128	@ 0x80
 8028bd4:	03c0      	lsls	r0, r0, #15
 8028bd6:	4118      	asrs	r0, r3
 8028bd8:	1880      	adds	r0, r0, r2
 8028bda:	4388      	bics	r0, r1
 8028bdc:	e7f4      	b.n	8028bc8 <roundf+0x20>
 8028bde:	2b80      	cmp	r3, #128	@ 0x80
 8028be0:	d1f2      	bne.n	8028bc8 <roundf+0x20>
 8028be2:	1c01      	adds	r1, r0, #0
 8028be4:	f7d7 fe6c 	bl	80008c0 <__aeabi_fadd>
 8028be8:	e7ee      	b.n	8028bc8 <roundf+0x20>
 8028bea:	46c0      	nop			@ (mov r8, r8)
 8028bec:	007fffff 	.word	0x007fffff

08028bf0 <__ieee754_log>:
 8028bf0:	2380      	movs	r3, #128	@ 0x80
 8028bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028bf4:	035b      	lsls	r3, r3, #13
 8028bf6:	000e      	movs	r6, r1
 8028bf8:	b08d      	sub	sp, #52	@ 0x34
 8028bfa:	4299      	cmp	r1, r3
 8028bfc:	da23      	bge.n	8028c46 <__ieee754_log+0x56>
 8028bfe:	004b      	lsls	r3, r1, #1
 8028c00:	085b      	lsrs	r3, r3, #1
 8028c02:	4303      	orrs	r3, r0
 8028c04:	d107      	bne.n	8028c16 <__ieee754_log+0x26>
 8028c06:	2200      	movs	r2, #0
 8028c08:	2300      	movs	r3, #0
 8028c0a:	2000      	movs	r0, #0
 8028c0c:	49b4      	ldr	r1, [pc, #720]	@ (8028ee0 <__ieee754_log+0x2f0>)
 8028c0e:	f7d9 fa67 	bl	80020e0 <__aeabi_ddiv>
 8028c12:	b00d      	add	sp, #52	@ 0x34
 8028c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c16:	2900      	cmp	r1, #0
 8028c18:	da06      	bge.n	8028c28 <__ieee754_log+0x38>
 8028c1a:	0002      	movs	r2, r0
 8028c1c:	000b      	movs	r3, r1
 8028c1e:	f7da f97f 	bl	8002f20 <__aeabi_dsub>
 8028c22:	2200      	movs	r2, #0
 8028c24:	2300      	movs	r3, #0
 8028c26:	e7f2      	b.n	8028c0e <__ieee754_log+0x1e>
 8028c28:	4bae      	ldr	r3, [pc, #696]	@ (8028ee4 <__ieee754_log+0x2f4>)
 8028c2a:	2200      	movs	r2, #0
 8028c2c:	f7d9 fe92 	bl	8002954 <__aeabi_dmul>
 8028c30:	2336      	movs	r3, #54	@ 0x36
 8028c32:	000e      	movs	r6, r1
 8028c34:	425b      	negs	r3, r3
 8028c36:	4aac      	ldr	r2, [pc, #688]	@ (8028ee8 <__ieee754_log+0x2f8>)
 8028c38:	4296      	cmp	r6, r2
 8028c3a:	dd06      	ble.n	8028c4a <__ieee754_log+0x5a>
 8028c3c:	0002      	movs	r2, r0
 8028c3e:	000b      	movs	r3, r1
 8028c40:	f7d8 fe88 	bl	8001954 <__aeabi_dadd>
 8028c44:	e7e5      	b.n	8028c12 <__ieee754_log+0x22>
 8028c46:	2300      	movs	r3, #0
 8028c48:	e7f5      	b.n	8028c36 <__ieee754_log+0x46>
 8028c4a:	4ca8      	ldr	r4, [pc, #672]	@ (8028eec <__ieee754_log+0x2fc>)
 8028c4c:	1532      	asrs	r2, r6, #20
 8028c4e:	1912      	adds	r2, r2, r4
 8028c50:	0336      	lsls	r6, r6, #12
 8028c52:	4ca7      	ldr	r4, [pc, #668]	@ (8028ef0 <__ieee754_log+0x300>)
 8028c54:	18d2      	adds	r2, r2, r3
 8028c56:	0b33      	lsrs	r3, r6, #12
 8028c58:	9302      	str	r3, [sp, #8]
 8028c5a:	191b      	adds	r3, r3, r4
 8028c5c:	2480      	movs	r4, #128	@ 0x80
 8028c5e:	0364      	lsls	r4, r4, #13
 8028c60:	4023      	ands	r3, r4
 8028c62:	4ca4      	ldr	r4, [pc, #656]	@ (8028ef4 <__ieee754_log+0x304>)
 8028c64:	9d02      	ldr	r5, [sp, #8]
 8028c66:	405c      	eors	r4, r3
 8028c68:	151b      	asrs	r3, r3, #20
 8028c6a:	189b      	adds	r3, r3, r2
 8028c6c:	4325      	orrs	r5, r4
 8028c6e:	2200      	movs	r2, #0
 8028c70:	9300      	str	r3, [sp, #0]
 8028c72:	0029      	movs	r1, r5
 8028c74:	4b9f      	ldr	r3, [pc, #636]	@ (8028ef4 <__ieee754_log+0x304>)
 8028c76:	f7da f953 	bl	8002f20 <__aeabi_dsub>
 8028c7a:	9b02      	ldr	r3, [sp, #8]
 8028c7c:	0006      	movs	r6, r0
 8028c7e:	3302      	adds	r3, #2
 8028c80:	031b      	lsls	r3, r3, #12
 8028c82:	000f      	movs	r7, r1
 8028c84:	2200      	movs	r2, #0
 8028c86:	0b1b      	lsrs	r3, r3, #12
 8028c88:	2b02      	cmp	r3, #2
 8028c8a:	dc64      	bgt.n	8028d56 <__ieee754_log+0x166>
 8028c8c:	2300      	movs	r3, #0
 8028c8e:	f7d7 fc0f 	bl	80004b0 <__aeabi_dcmpeq>
 8028c92:	2800      	cmp	r0, #0
 8028c94:	d019      	beq.n	8028cca <__ieee754_log+0xda>
 8028c96:	9b00      	ldr	r3, [sp, #0]
 8028c98:	2b00      	cmp	r3, #0
 8028c9a:	d100      	bne.n	8028c9e <__ieee754_log+0xae>
 8028c9c:	e11c      	b.n	8028ed8 <__ieee754_log+0x2e8>
 8028c9e:	0018      	movs	r0, r3
 8028ca0:	f7da fda6 	bl	80037f0 <__aeabi_i2d>
 8028ca4:	4a94      	ldr	r2, [pc, #592]	@ (8028ef8 <__ieee754_log+0x308>)
 8028ca6:	4b95      	ldr	r3, [pc, #596]	@ (8028efc <__ieee754_log+0x30c>)
 8028ca8:	0004      	movs	r4, r0
 8028caa:	000d      	movs	r5, r1
 8028cac:	f7d9 fe52 	bl	8002954 <__aeabi_dmul>
 8028cb0:	4a93      	ldr	r2, [pc, #588]	@ (8028f00 <__ieee754_log+0x310>)
 8028cb2:	0006      	movs	r6, r0
 8028cb4:	000f      	movs	r7, r1
 8028cb6:	4b93      	ldr	r3, [pc, #588]	@ (8028f04 <__ieee754_log+0x314>)
 8028cb8:	0020      	movs	r0, r4
 8028cba:	0029      	movs	r1, r5
 8028cbc:	f7d9 fe4a 	bl	8002954 <__aeabi_dmul>
 8028cc0:	0002      	movs	r2, r0
 8028cc2:	000b      	movs	r3, r1
 8028cc4:	0030      	movs	r0, r6
 8028cc6:	0039      	movs	r1, r7
 8028cc8:	e7ba      	b.n	8028c40 <__ieee754_log+0x50>
 8028cca:	4a8f      	ldr	r2, [pc, #572]	@ (8028f08 <__ieee754_log+0x318>)
 8028ccc:	4b8f      	ldr	r3, [pc, #572]	@ (8028f0c <__ieee754_log+0x31c>)
 8028cce:	0030      	movs	r0, r6
 8028cd0:	0039      	movs	r1, r7
 8028cd2:	f7d9 fe3f 	bl	8002954 <__aeabi_dmul>
 8028cd6:	0002      	movs	r2, r0
 8028cd8:	000b      	movs	r3, r1
 8028cda:	2000      	movs	r0, #0
 8028cdc:	498c      	ldr	r1, [pc, #560]	@ (8028f10 <__ieee754_log+0x320>)
 8028cde:	f7da f91f 	bl	8002f20 <__aeabi_dsub>
 8028ce2:	0032      	movs	r2, r6
 8028ce4:	0004      	movs	r4, r0
 8028ce6:	000d      	movs	r5, r1
 8028ce8:	003b      	movs	r3, r7
 8028cea:	0030      	movs	r0, r6
 8028cec:	0039      	movs	r1, r7
 8028cee:	f7d9 fe31 	bl	8002954 <__aeabi_dmul>
 8028cf2:	000b      	movs	r3, r1
 8028cf4:	0002      	movs	r2, r0
 8028cf6:	0029      	movs	r1, r5
 8028cf8:	0020      	movs	r0, r4
 8028cfa:	f7d9 fe2b 	bl	8002954 <__aeabi_dmul>
 8028cfe:	9b00      	ldr	r3, [sp, #0]
 8028d00:	9002      	str	r0, [sp, #8]
 8028d02:	9103      	str	r1, [sp, #12]
 8028d04:	2b00      	cmp	r3, #0
 8028d06:	d106      	bne.n	8028d16 <__ieee754_log+0x126>
 8028d08:	0002      	movs	r2, r0
 8028d0a:	000b      	movs	r3, r1
 8028d0c:	0030      	movs	r0, r6
 8028d0e:	0039      	movs	r1, r7
 8028d10:	f7da f906 	bl	8002f20 <__aeabi_dsub>
 8028d14:	e77d      	b.n	8028c12 <__ieee754_log+0x22>
 8028d16:	9800      	ldr	r0, [sp, #0]
 8028d18:	f7da fd6a 	bl	80037f0 <__aeabi_i2d>
 8028d1c:	4a76      	ldr	r2, [pc, #472]	@ (8028ef8 <__ieee754_log+0x308>)
 8028d1e:	4b77      	ldr	r3, [pc, #476]	@ (8028efc <__ieee754_log+0x30c>)
 8028d20:	0004      	movs	r4, r0
 8028d22:	000d      	movs	r5, r1
 8028d24:	f7d9 fe16 	bl	8002954 <__aeabi_dmul>
 8028d28:	4a75      	ldr	r2, [pc, #468]	@ (8028f00 <__ieee754_log+0x310>)
 8028d2a:	9000      	str	r0, [sp, #0]
 8028d2c:	9101      	str	r1, [sp, #4]
 8028d2e:	4b75      	ldr	r3, [pc, #468]	@ (8028f04 <__ieee754_log+0x314>)
 8028d30:	0020      	movs	r0, r4
 8028d32:	0029      	movs	r1, r5
 8028d34:	f7d9 fe0e 	bl	8002954 <__aeabi_dmul>
 8028d38:	0002      	movs	r2, r0
 8028d3a:	000b      	movs	r3, r1
 8028d3c:	9802      	ldr	r0, [sp, #8]
 8028d3e:	9903      	ldr	r1, [sp, #12]
 8028d40:	f7da f8ee 	bl	8002f20 <__aeabi_dsub>
 8028d44:	0032      	movs	r2, r6
 8028d46:	003b      	movs	r3, r7
 8028d48:	f7da f8ea 	bl	8002f20 <__aeabi_dsub>
 8028d4c:	0002      	movs	r2, r0
 8028d4e:	000b      	movs	r3, r1
 8028d50:	9800      	ldr	r0, [sp, #0]
 8028d52:	9901      	ldr	r1, [sp, #4]
 8028d54:	e7dc      	b.n	8028d10 <__ieee754_log+0x120>
 8028d56:	2380      	movs	r3, #128	@ 0x80
 8028d58:	05db      	lsls	r3, r3, #23
 8028d5a:	f7d8 fdfb 	bl	8001954 <__aeabi_dadd>
 8028d5e:	0002      	movs	r2, r0
 8028d60:	000b      	movs	r3, r1
 8028d62:	0030      	movs	r0, r6
 8028d64:	0039      	movs	r1, r7
 8028d66:	f7d9 f9bb 	bl	80020e0 <__aeabi_ddiv>
 8028d6a:	9004      	str	r0, [sp, #16]
 8028d6c:	9105      	str	r1, [sp, #20]
 8028d6e:	9800      	ldr	r0, [sp, #0]
 8028d70:	f7da fd3e 	bl	80037f0 <__aeabi_i2d>
 8028d74:	9a04      	ldr	r2, [sp, #16]
 8028d76:	9b05      	ldr	r3, [sp, #20]
 8028d78:	9006      	str	r0, [sp, #24]
 8028d7a:	9107      	str	r1, [sp, #28]
 8028d7c:	0010      	movs	r0, r2
 8028d7e:	0019      	movs	r1, r3
 8028d80:	f7d9 fde8 	bl	8002954 <__aeabi_dmul>
 8028d84:	4a63      	ldr	r2, [pc, #396]	@ (8028f14 <__ieee754_log+0x324>)
 8028d86:	9b02      	ldr	r3, [sp, #8]
 8028d88:	4694      	mov	ip, r2
 8028d8a:	4463      	add	r3, ip
 8028d8c:	0002      	movs	r2, r0
 8028d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028d90:	000b      	movs	r3, r1
 8028d92:	9008      	str	r0, [sp, #32]
 8028d94:	9109      	str	r1, [sp, #36]	@ 0x24
 8028d96:	f7d9 fddd 	bl	8002954 <__aeabi_dmul>
 8028d9a:	0004      	movs	r4, r0
 8028d9c:	000d      	movs	r5, r1
 8028d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8028f18 <__ieee754_log+0x328>)
 8028da0:	4b5e      	ldr	r3, [pc, #376]	@ (8028f1c <__ieee754_log+0x32c>)
 8028da2:	f7d9 fdd7 	bl	8002954 <__aeabi_dmul>
 8028da6:	4a5e      	ldr	r2, [pc, #376]	@ (8028f20 <__ieee754_log+0x330>)
 8028da8:	4b5e      	ldr	r3, [pc, #376]	@ (8028f24 <__ieee754_log+0x334>)
 8028daa:	f7d8 fdd3 	bl	8001954 <__aeabi_dadd>
 8028dae:	0022      	movs	r2, r4
 8028db0:	002b      	movs	r3, r5
 8028db2:	f7d9 fdcf 	bl	8002954 <__aeabi_dmul>
 8028db6:	4a5c      	ldr	r2, [pc, #368]	@ (8028f28 <__ieee754_log+0x338>)
 8028db8:	4b5c      	ldr	r3, [pc, #368]	@ (8028f2c <__ieee754_log+0x33c>)
 8028dba:	f7d8 fdcb 	bl	8001954 <__aeabi_dadd>
 8028dbe:	0022      	movs	r2, r4
 8028dc0:	002b      	movs	r3, r5
 8028dc2:	f7d9 fdc7 	bl	8002954 <__aeabi_dmul>
 8028dc6:	4a5a      	ldr	r2, [pc, #360]	@ (8028f30 <__ieee754_log+0x340>)
 8028dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8028f34 <__ieee754_log+0x344>)
 8028dca:	f7d8 fdc3 	bl	8001954 <__aeabi_dadd>
 8028dce:	9a08      	ldr	r2, [sp, #32]
 8028dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028dd2:	f7d9 fdbf 	bl	8002954 <__aeabi_dmul>
 8028dd6:	4a58      	ldr	r2, [pc, #352]	@ (8028f38 <__ieee754_log+0x348>)
 8028dd8:	9008      	str	r0, [sp, #32]
 8028dda:	9109      	str	r1, [sp, #36]	@ 0x24
 8028ddc:	4b57      	ldr	r3, [pc, #348]	@ (8028f3c <__ieee754_log+0x34c>)
 8028dde:	0020      	movs	r0, r4
 8028de0:	0029      	movs	r1, r5
 8028de2:	f7d9 fdb7 	bl	8002954 <__aeabi_dmul>
 8028de6:	4a56      	ldr	r2, [pc, #344]	@ (8028f40 <__ieee754_log+0x350>)
 8028de8:	4b56      	ldr	r3, [pc, #344]	@ (8028f44 <__ieee754_log+0x354>)
 8028dea:	f7d8 fdb3 	bl	8001954 <__aeabi_dadd>
 8028dee:	0022      	movs	r2, r4
 8028df0:	002b      	movs	r3, r5
 8028df2:	f7d9 fdaf 	bl	8002954 <__aeabi_dmul>
 8028df6:	4a54      	ldr	r2, [pc, #336]	@ (8028f48 <__ieee754_log+0x358>)
 8028df8:	4b54      	ldr	r3, [pc, #336]	@ (8028f4c <__ieee754_log+0x35c>)
 8028dfa:	f7d8 fdab 	bl	8001954 <__aeabi_dadd>
 8028dfe:	0022      	movs	r2, r4
 8028e00:	002b      	movs	r3, r5
 8028e02:	f7d9 fda7 	bl	8002954 <__aeabi_dmul>
 8028e06:	0002      	movs	r2, r0
 8028e08:	000b      	movs	r3, r1
 8028e0a:	9808      	ldr	r0, [sp, #32]
 8028e0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028e0e:	f7d8 fda1 	bl	8001954 <__aeabi_dadd>
 8028e12:	9a02      	ldr	r2, [sp, #8]
 8028e14:	4b4e      	ldr	r3, [pc, #312]	@ (8028f50 <__ieee754_log+0x360>)
 8028e16:	0004      	movs	r4, r0
 8028e18:	1a9b      	subs	r3, r3, r2
 8028e1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028e1c:	000d      	movs	r5, r1
 8028e1e:	4313      	orrs	r3, r2
 8028e20:	2b00      	cmp	r3, #0
 8028e22:	dd34      	ble.n	8028e8e <__ieee754_log+0x29e>
 8028e24:	2200      	movs	r2, #0
 8028e26:	4b3a      	ldr	r3, [pc, #232]	@ (8028f10 <__ieee754_log+0x320>)
 8028e28:	0030      	movs	r0, r6
 8028e2a:	0039      	movs	r1, r7
 8028e2c:	f7d9 fd92 	bl	8002954 <__aeabi_dmul>
 8028e30:	0032      	movs	r2, r6
 8028e32:	003b      	movs	r3, r7
 8028e34:	f7d9 fd8e 	bl	8002954 <__aeabi_dmul>
 8028e38:	0002      	movs	r2, r0
 8028e3a:	000b      	movs	r3, r1
 8028e3c:	9002      	str	r0, [sp, #8]
 8028e3e:	9103      	str	r1, [sp, #12]
 8028e40:	0020      	movs	r0, r4
 8028e42:	0029      	movs	r1, r5
 8028e44:	f7d8 fd86 	bl	8001954 <__aeabi_dadd>
 8028e48:	9a04      	ldr	r2, [sp, #16]
 8028e4a:	9b05      	ldr	r3, [sp, #20]
 8028e4c:	f7d9 fd82 	bl	8002954 <__aeabi_dmul>
 8028e50:	9b00      	ldr	r3, [sp, #0]
 8028e52:	0004      	movs	r4, r0
 8028e54:	000d      	movs	r5, r1
 8028e56:	2b00      	cmp	r3, #0
 8028e58:	d106      	bne.n	8028e68 <__ieee754_log+0x278>
 8028e5a:	0002      	movs	r2, r0
 8028e5c:	000b      	movs	r3, r1
 8028e5e:	9802      	ldr	r0, [sp, #8]
 8028e60:	9903      	ldr	r1, [sp, #12]
 8028e62:	f7da f85d 	bl	8002f20 <__aeabi_dsub>
 8028e66:	e74f      	b.n	8028d08 <__ieee754_log+0x118>
 8028e68:	4a23      	ldr	r2, [pc, #140]	@ (8028ef8 <__ieee754_log+0x308>)
 8028e6a:	4b24      	ldr	r3, [pc, #144]	@ (8028efc <__ieee754_log+0x30c>)
 8028e6c:	9806      	ldr	r0, [sp, #24]
 8028e6e:	9907      	ldr	r1, [sp, #28]
 8028e70:	f7d9 fd70 	bl	8002954 <__aeabi_dmul>
 8028e74:	4a22      	ldr	r2, [pc, #136]	@ (8028f00 <__ieee754_log+0x310>)
 8028e76:	9000      	str	r0, [sp, #0]
 8028e78:	9101      	str	r1, [sp, #4]
 8028e7a:	9806      	ldr	r0, [sp, #24]
 8028e7c:	9907      	ldr	r1, [sp, #28]
 8028e7e:	4b21      	ldr	r3, [pc, #132]	@ (8028f04 <__ieee754_log+0x314>)
 8028e80:	f7d9 fd68 	bl	8002954 <__aeabi_dmul>
 8028e84:	0022      	movs	r2, r4
 8028e86:	002b      	movs	r3, r5
 8028e88:	f7d8 fd64 	bl	8001954 <__aeabi_dadd>
 8028e8c:	e754      	b.n	8028d38 <__ieee754_log+0x148>
 8028e8e:	0002      	movs	r2, r0
 8028e90:	000b      	movs	r3, r1
 8028e92:	0030      	movs	r0, r6
 8028e94:	0039      	movs	r1, r7
 8028e96:	f7da f843 	bl	8002f20 <__aeabi_dsub>
 8028e9a:	9a04      	ldr	r2, [sp, #16]
 8028e9c:	9b05      	ldr	r3, [sp, #20]
 8028e9e:	f7d9 fd59 	bl	8002954 <__aeabi_dmul>
 8028ea2:	9b00      	ldr	r3, [sp, #0]
 8028ea4:	0004      	movs	r4, r0
 8028ea6:	000d      	movs	r5, r1
 8028ea8:	2b00      	cmp	r3, #0
 8028eaa:	d102      	bne.n	8028eb2 <__ieee754_log+0x2c2>
 8028eac:	0002      	movs	r2, r0
 8028eae:	000b      	movs	r3, r1
 8028eb0:	e72c      	b.n	8028d0c <__ieee754_log+0x11c>
 8028eb2:	4a11      	ldr	r2, [pc, #68]	@ (8028ef8 <__ieee754_log+0x308>)
 8028eb4:	4b11      	ldr	r3, [pc, #68]	@ (8028efc <__ieee754_log+0x30c>)
 8028eb6:	9806      	ldr	r0, [sp, #24]
 8028eb8:	9907      	ldr	r1, [sp, #28]
 8028eba:	f7d9 fd4b 	bl	8002954 <__aeabi_dmul>
 8028ebe:	4a10      	ldr	r2, [pc, #64]	@ (8028f00 <__ieee754_log+0x310>)
 8028ec0:	9000      	str	r0, [sp, #0]
 8028ec2:	9101      	str	r1, [sp, #4]
 8028ec4:	9806      	ldr	r0, [sp, #24]
 8028ec6:	9907      	ldr	r1, [sp, #28]
 8028ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8028f04 <__ieee754_log+0x314>)
 8028eca:	f7d9 fd43 	bl	8002954 <__aeabi_dmul>
 8028ece:	0002      	movs	r2, r0
 8028ed0:	000b      	movs	r3, r1
 8028ed2:	0020      	movs	r0, r4
 8028ed4:	0029      	movs	r1, r5
 8028ed6:	e733      	b.n	8028d40 <__ieee754_log+0x150>
 8028ed8:	2000      	movs	r0, #0
 8028eda:	2100      	movs	r1, #0
 8028edc:	e699      	b.n	8028c12 <__ieee754_log+0x22>
 8028ede:	46c0      	nop			@ (mov r8, r8)
 8028ee0:	c3500000 	.word	0xc3500000
 8028ee4:	43500000 	.word	0x43500000
 8028ee8:	7fefffff 	.word	0x7fefffff
 8028eec:	fffffc01 	.word	0xfffffc01
 8028ef0:	00095f64 	.word	0x00095f64
 8028ef4:	3ff00000 	.word	0x3ff00000
 8028ef8:	fee00000 	.word	0xfee00000
 8028efc:	3fe62e42 	.word	0x3fe62e42
 8028f00:	35793c76 	.word	0x35793c76
 8028f04:	3dea39ef 	.word	0x3dea39ef
 8028f08:	55555555 	.word	0x55555555
 8028f0c:	3fd55555 	.word	0x3fd55555
 8028f10:	3fe00000 	.word	0x3fe00000
 8028f14:	fff9eb86 	.word	0xfff9eb86
 8028f18:	df3e5244 	.word	0xdf3e5244
 8028f1c:	3fc2f112 	.word	0x3fc2f112
 8028f20:	96cb03de 	.word	0x96cb03de
 8028f24:	3fc74664 	.word	0x3fc74664
 8028f28:	94229359 	.word	0x94229359
 8028f2c:	3fd24924 	.word	0x3fd24924
 8028f30:	55555593 	.word	0x55555593
 8028f34:	3fe55555 	.word	0x3fe55555
 8028f38:	d078c69f 	.word	0xd078c69f
 8028f3c:	3fc39a09 	.word	0x3fc39a09
 8028f40:	1d8e78af 	.word	0x1d8e78af
 8028f44:	3fcc71c5 	.word	0x3fcc71c5
 8028f48:	9997fa04 	.word	0x9997fa04
 8028f4c:	3fd99999 	.word	0x3fd99999
 8028f50:	0006b851 	.word	0x0006b851

08028f54 <__ieee754_pow>:
 8028f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028f56:	b095      	sub	sp, #84	@ 0x54
 8028f58:	9204      	str	r2, [sp, #16]
 8028f5a:	9305      	str	r3, [sp, #20]
 8028f5c:	9b04      	ldr	r3, [sp, #16]
 8028f5e:	9f05      	ldr	r7, [sp, #20]
 8028f60:	001a      	movs	r2, r3
 8028f62:	007d      	lsls	r5, r7, #1
 8028f64:	086d      	lsrs	r5, r5, #1
 8028f66:	9002      	str	r0, [sp, #8]
 8028f68:	9103      	str	r1, [sp, #12]
 8028f6a:	432a      	orrs	r2, r5
 8028f6c:	d11a      	bne.n	8028fa4 <__ieee754_pow+0x50>
 8028f6e:	2180      	movs	r1, #128	@ 0x80
 8028f70:	9a02      	ldr	r2, [sp, #8]
 8028f72:	9803      	ldr	r0, [sp, #12]
 8028f74:	0309      	lsls	r1, r1, #12
 8028f76:	4048      	eors	r0, r1
 8028f78:	0003      	movs	r3, r0
 8028f7a:	1892      	adds	r2, r2, r2
 8028f7c:	415b      	adcs	r3, r3
 8028f7e:	4996      	ldr	r1, [pc, #600]	@ (80291d8 <__ieee754_pow+0x284>)
 8028f80:	428b      	cmp	r3, r1
 8028f82:	d806      	bhi.n	8028f92 <__ieee754_pow+0x3e>
 8028f84:	d001      	beq.n	8028f8a <__ieee754_pow+0x36>
 8028f86:	f000 fcce 	bl	8029926 <__ieee754_pow+0x9d2>
 8028f8a:	2a00      	cmp	r2, #0
 8028f8c:	d101      	bne.n	8028f92 <__ieee754_pow+0x3e>
 8028f8e:	f000 fcca 	bl	8029926 <__ieee754_pow+0x9d2>
 8028f92:	9a04      	ldr	r2, [sp, #16]
 8028f94:	9b05      	ldr	r3, [sp, #20]
 8028f96:	9802      	ldr	r0, [sp, #8]
 8028f98:	9903      	ldr	r1, [sp, #12]
 8028f9a:	f7d8 fcdb 	bl	8001954 <__aeabi_dadd>
 8028f9e:	9000      	str	r0, [sp, #0]
 8028fa0:	9101      	str	r1, [sp, #4]
 8028fa2:	e08e      	b.n	80290c2 <__ieee754_pow+0x16e>
 8028fa4:	9a03      	ldr	r2, [sp, #12]
 8028fa6:	9206      	str	r2, [sp, #24]
 8028fa8:	9a02      	ldr	r2, [sp, #8]
 8028faa:	920a      	str	r2, [sp, #40]	@ 0x28
 8028fac:	9a03      	ldr	r2, [sp, #12]
 8028fae:	0054      	lsls	r4, r2, #1
 8028fb0:	4a8a      	ldr	r2, [pc, #552]	@ (80291dc <__ieee754_pow+0x288>)
 8028fb2:	0864      	lsrs	r4, r4, #1
 8028fb4:	4294      	cmp	r4, r2
 8028fb6:	d80e      	bhi.n	8028fd6 <__ieee754_pow+0x82>
 8028fb8:	d105      	bne.n	8028fc6 <__ieee754_pow+0x72>
 8028fba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028fbc:	2a00      	cmp	r2, #0
 8028fbe:	d1e8      	bne.n	8028f92 <__ieee754_pow+0x3e>
 8028fc0:	42a5      	cmp	r5, r4
 8028fc2:	d8e6      	bhi.n	8028f92 <__ieee754_pow+0x3e>
 8028fc4:	e002      	b.n	8028fcc <__ieee754_pow+0x78>
 8028fc6:	4a85      	ldr	r2, [pc, #532]	@ (80291dc <__ieee754_pow+0x288>)
 8028fc8:	4295      	cmp	r5, r2
 8028fca:	d804      	bhi.n	8028fd6 <__ieee754_pow+0x82>
 8028fcc:	4a83      	ldr	r2, [pc, #524]	@ (80291dc <__ieee754_pow+0x288>)
 8028fce:	4295      	cmp	r5, r2
 8028fd0:	d10c      	bne.n	8028fec <__ieee754_pow+0x98>
 8028fd2:	2b00      	cmp	r3, #0
 8028fd4:	d00a      	beq.n	8028fec <__ieee754_pow+0x98>
 8028fd6:	4a82      	ldr	r2, [pc, #520]	@ (80291e0 <__ieee754_pow+0x28c>)
 8028fd8:	9b03      	ldr	r3, [sp, #12]
 8028fda:	189b      	adds	r3, r3, r2
 8028fdc:	9a02      	ldr	r2, [sp, #8]
 8028fde:	4313      	orrs	r3, r2
 8028fe0:	d1d7      	bne.n	8028f92 <__ieee754_pow+0x3e>
 8028fe2:	2180      	movs	r1, #128	@ 0x80
 8028fe4:	9a04      	ldr	r2, [sp, #16]
 8028fe6:	9805      	ldr	r0, [sp, #20]
 8028fe8:	0309      	lsls	r1, r1, #12
 8028fea:	e7c4      	b.n	8028f76 <__ieee754_pow+0x22>
 8028fec:	2600      	movs	r6, #0
 8028fee:	9a06      	ldr	r2, [sp, #24]
 8028ff0:	9408      	str	r4, [sp, #32]
 8028ff2:	42b2      	cmp	r2, r6
 8028ff4:	da42      	bge.n	802907c <__ieee754_pow+0x128>
 8028ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80291e4 <__ieee754_pow+0x290>)
 8028ff8:	4295      	cmp	r5, r2
 8028ffa:	d83e      	bhi.n	802907a <__ieee754_pow+0x126>
 8028ffc:	4a7a      	ldr	r2, [pc, #488]	@ (80291e8 <__ieee754_pow+0x294>)
 8028ffe:	4295      	cmp	r5, r2
 8029000:	d910      	bls.n	8029024 <__ieee754_pow+0xd0>
 8029002:	497a      	ldr	r1, [pc, #488]	@ (80291ec <__ieee754_pow+0x298>)
 8029004:	152a      	asrs	r2, r5, #20
 8029006:	1852      	adds	r2, r2, r1
 8029008:	2a14      	cmp	r2, #20
 802900a:	dd18      	ble.n	802903e <__ieee754_pow+0xea>
 802900c:	2134      	movs	r1, #52	@ 0x34
 802900e:	1a89      	subs	r1, r1, r2
 8029010:	9a04      	ldr	r2, [sp, #16]
 8029012:	40ca      	lsrs	r2, r1
 8029014:	0010      	movs	r0, r2
 8029016:	4088      	lsls	r0, r1
 8029018:	4298      	cmp	r0, r3
 802901a:	d103      	bne.n	8029024 <__ieee754_pow+0xd0>
 802901c:	2101      	movs	r1, #1
 802901e:	3602      	adds	r6, #2
 8029020:	400a      	ands	r2, r1
 8029022:	1ab6      	subs	r6, r6, r2
 8029024:	2b00      	cmp	r3, #0
 8029026:	d15b      	bne.n	80290e0 <__ieee754_pow+0x18c>
 8029028:	2380      	movs	r3, #128	@ 0x80
 802902a:	05db      	lsls	r3, r3, #23
 802902c:	429f      	cmp	r7, r3
 802902e:	d14c      	bne.n	80290ca <__ieee754_pow+0x176>
 8029030:	9a02      	ldr	r2, [sp, #8]
 8029032:	9b03      	ldr	r3, [sp, #12]
 8029034:	0010      	movs	r0, r2
 8029036:	0019      	movs	r1, r3
 8029038:	f7d9 fc8c 	bl	8002954 <__aeabi_dmul>
 802903c:	e7af      	b.n	8028f9e <__ieee754_pow+0x4a>
 802903e:	2b00      	cmp	r3, #0
 8029040:	d14e      	bne.n	80290e0 <__ieee754_pow+0x18c>
 8029042:	3314      	adds	r3, #20
 8029044:	1a9a      	subs	r2, r3, r2
 8029046:	002b      	movs	r3, r5
 8029048:	4113      	asrs	r3, r2
 802904a:	0019      	movs	r1, r3
 802904c:	4091      	lsls	r1, r2
 802904e:	42a9      	cmp	r1, r5
 8029050:	d103      	bne.n	802905a <__ieee754_pow+0x106>
 8029052:	2201      	movs	r2, #1
 8029054:	2602      	movs	r6, #2
 8029056:	4013      	ands	r3, r2
 8029058:	1af6      	subs	r6, r6, r3
 802905a:	4b65      	ldr	r3, [pc, #404]	@ (80291f0 <__ieee754_pow+0x29c>)
 802905c:	429d      	cmp	r5, r3
 802905e:	d1e3      	bne.n	8029028 <__ieee754_pow+0xd4>
 8029060:	9b02      	ldr	r3, [sp, #8]
 8029062:	9c03      	ldr	r4, [sp, #12]
 8029064:	9300      	str	r3, [sp, #0]
 8029066:	9401      	str	r4, [sp, #4]
 8029068:	2f00      	cmp	r7, #0
 802906a:	da2a      	bge.n	80290c2 <__ieee754_pow+0x16e>
 802906c:	001a      	movs	r2, r3
 802906e:	2000      	movs	r0, #0
 8029070:	0023      	movs	r3, r4
 8029072:	495f      	ldr	r1, [pc, #380]	@ (80291f0 <__ieee754_pow+0x29c>)
 8029074:	f7d9 f834 	bl	80020e0 <__aeabi_ddiv>
 8029078:	e791      	b.n	8028f9e <__ieee754_pow+0x4a>
 802907a:	2602      	movs	r6, #2
 802907c:	2b00      	cmp	r3, #0
 802907e:	d12f      	bne.n	80290e0 <__ieee754_pow+0x18c>
 8029080:	4b56      	ldr	r3, [pc, #344]	@ (80291dc <__ieee754_pow+0x288>)
 8029082:	429d      	cmp	r5, r3
 8029084:	d1e9      	bne.n	802905a <__ieee754_pow+0x106>
 8029086:	4b56      	ldr	r3, [pc, #344]	@ (80291e0 <__ieee754_pow+0x28c>)
 8029088:	9a02      	ldr	r2, [sp, #8]
 802908a:	18e3      	adds	r3, r4, r3
 802908c:	4313      	orrs	r3, r2
 802908e:	d101      	bne.n	8029094 <__ieee754_pow+0x140>
 8029090:	f000 fc49 	bl	8029926 <__ieee754_pow+0x9d2>
 8029094:	4b54      	ldr	r3, [pc, #336]	@ (80291e8 <__ieee754_pow+0x294>)
 8029096:	429c      	cmp	r4, r3
 8029098:	d909      	bls.n	80290ae <__ieee754_pow+0x15a>
 802909a:	9b04      	ldr	r3, [sp, #16]
 802909c:	9c05      	ldr	r4, [sp, #20]
 802909e:	9300      	str	r3, [sp, #0]
 80290a0:	9401      	str	r4, [sp, #4]
 80290a2:	2f00      	cmp	r7, #0
 80290a4:	da0d      	bge.n	80290c2 <__ieee754_pow+0x16e>
 80290a6:	2300      	movs	r3, #0
 80290a8:	2400      	movs	r4, #0
 80290aa:	f000 fc3e 	bl	802992a <__ieee754_pow+0x9d6>
 80290ae:	2f00      	cmp	r7, #0
 80290b0:	daf9      	bge.n	80290a6 <__ieee754_pow+0x152>
 80290b2:	2280      	movs	r2, #128	@ 0x80
 80290b4:	0612      	lsls	r2, r2, #24
 80290b6:	4694      	mov	ip, r2
 80290b8:	9b04      	ldr	r3, [sp, #16]
 80290ba:	9300      	str	r3, [sp, #0]
 80290bc:	9b05      	ldr	r3, [sp, #20]
 80290be:	4463      	add	r3, ip
 80290c0:	9301      	str	r3, [sp, #4]
 80290c2:	9800      	ldr	r0, [sp, #0]
 80290c4:	9901      	ldr	r1, [sp, #4]
 80290c6:	b015      	add	sp, #84	@ 0x54
 80290c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80290ca:	4b4a      	ldr	r3, [pc, #296]	@ (80291f4 <__ieee754_pow+0x2a0>)
 80290cc:	429f      	cmp	r7, r3
 80290ce:	d107      	bne.n	80290e0 <__ieee754_pow+0x18c>
 80290d0:	9b06      	ldr	r3, [sp, #24]
 80290d2:	2b00      	cmp	r3, #0
 80290d4:	db04      	blt.n	80290e0 <__ieee754_pow+0x18c>
 80290d6:	9802      	ldr	r0, [sp, #8]
 80290d8:	9903      	ldr	r1, [sp, #12]
 80290da:	f000 fe03 	bl	8029ce4 <__ieee754_sqrt>
 80290de:	e75e      	b.n	8028f9e <__ieee754_pow+0x4a>
 80290e0:	9802      	ldr	r0, [sp, #8]
 80290e2:	9903      	ldr	r1, [sp, #12]
 80290e4:	f000 fc4e 	bl	8029984 <fabs>
 80290e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80290ea:	9000      	str	r0, [sp, #0]
 80290ec:	9101      	str	r1, [sp, #4]
 80290ee:	2b00      	cmp	r3, #0
 80290f0:	d12c      	bne.n	802914c <__ieee754_pow+0x1f8>
 80290f2:	9b03      	ldr	r3, [sp, #12]
 80290f4:	4a3e      	ldr	r2, [pc, #248]	@ (80291f0 <__ieee754_pow+0x29c>)
 80290f6:	009b      	lsls	r3, r3, #2
 80290f8:	089b      	lsrs	r3, r3, #2
 80290fa:	4293      	cmp	r3, r2
 80290fc:	d001      	beq.n	8029102 <__ieee754_pow+0x1ae>
 80290fe:	2c00      	cmp	r4, #0
 8029100:	d124      	bne.n	802914c <__ieee754_pow+0x1f8>
 8029102:	2f00      	cmp	r7, #0
 8029104:	da07      	bge.n	8029116 <__ieee754_pow+0x1c2>
 8029106:	9a00      	ldr	r2, [sp, #0]
 8029108:	9b01      	ldr	r3, [sp, #4]
 802910a:	2000      	movs	r0, #0
 802910c:	4938      	ldr	r1, [pc, #224]	@ (80291f0 <__ieee754_pow+0x29c>)
 802910e:	f7d8 ffe7 	bl	80020e0 <__aeabi_ddiv>
 8029112:	9000      	str	r0, [sp, #0]
 8029114:	9101      	str	r1, [sp, #4]
 8029116:	9b06      	ldr	r3, [sp, #24]
 8029118:	2b00      	cmp	r3, #0
 802911a:	dad2      	bge.n	80290c2 <__ieee754_pow+0x16e>
 802911c:	4b30      	ldr	r3, [pc, #192]	@ (80291e0 <__ieee754_pow+0x28c>)
 802911e:	18e4      	adds	r4, r4, r3
 8029120:	4334      	orrs	r4, r6
 8029122:	d108      	bne.n	8029136 <__ieee754_pow+0x1e2>
 8029124:	9a00      	ldr	r2, [sp, #0]
 8029126:	9b01      	ldr	r3, [sp, #4]
 8029128:	0010      	movs	r0, r2
 802912a:	0019      	movs	r1, r3
 802912c:	f7d9 fef8 	bl	8002f20 <__aeabi_dsub>
 8029130:	0002      	movs	r2, r0
 8029132:	000b      	movs	r3, r1
 8029134:	e79e      	b.n	8029074 <__ieee754_pow+0x120>
 8029136:	2e01      	cmp	r6, #1
 8029138:	d1c3      	bne.n	80290c2 <__ieee754_pow+0x16e>
 802913a:	9800      	ldr	r0, [sp, #0]
 802913c:	2180      	movs	r1, #128	@ 0x80
 802913e:	0002      	movs	r2, r0
 8029140:	9801      	ldr	r0, [sp, #4]
 8029142:	0609      	lsls	r1, r1, #24
 8029144:	1843      	adds	r3, r0, r1
 8029146:	9200      	str	r2, [sp, #0]
 8029148:	9301      	str	r3, [sp, #4]
 802914a:	e7ba      	b.n	80290c2 <__ieee754_pow+0x16e>
 802914c:	9b03      	ldr	r3, [sp, #12]
 802914e:	0fdb      	lsrs	r3, r3, #31
 8029150:	3b01      	subs	r3, #1
 8029152:	001a      	movs	r2, r3
 8029154:	4332      	orrs	r2, r6
 8029156:	d102      	bne.n	802915e <__ieee754_pow+0x20a>
 8029158:	9a02      	ldr	r2, [sp, #8]
 802915a:	9b03      	ldr	r3, [sp, #12]
 802915c:	e7e4      	b.n	8029128 <__ieee754_pow+0x1d4>
 802915e:	3e01      	subs	r6, #1
 8029160:	2200      	movs	r2, #0
 8029162:	431e      	orrs	r6, r3
 8029164:	d013      	beq.n	802918e <__ieee754_pow+0x23a>
 8029166:	4b22      	ldr	r3, [pc, #136]	@ (80291f0 <__ieee754_pow+0x29c>)
 8029168:	9206      	str	r2, [sp, #24]
 802916a:	9307      	str	r3, [sp, #28]
 802916c:	2384      	movs	r3, #132	@ 0x84
 802916e:	05db      	lsls	r3, r3, #23
 8029170:	429d      	cmp	r5, r3
 8029172:	d800      	bhi.n	8029176 <__ieee754_pow+0x222>
 8029174:	e0fa      	b.n	802936c <__ieee754_pow+0x418>
 8029176:	4b20      	ldr	r3, [pc, #128]	@ (80291f8 <__ieee754_pow+0x2a4>)
 8029178:	429d      	cmp	r5, r3
 802917a:	d910      	bls.n	802919e <__ieee754_pow+0x24a>
 802917c:	4b1a      	ldr	r3, [pc, #104]	@ (80291e8 <__ieee754_pow+0x294>)
 802917e:	429c      	cmp	r4, r3
 8029180:	d807      	bhi.n	8029192 <__ieee754_pow+0x23e>
 8029182:	2f00      	cmp	r7, #0
 8029184:	da07      	bge.n	8029196 <__ieee754_pow+0x242>
 8029186:	2000      	movs	r0, #0
 8029188:	f000 fd82 	bl	8029c90 <__math_oflow>
 802918c:	e707      	b.n	8028f9e <__ieee754_pow+0x4a>
 802918e:	4b1b      	ldr	r3, [pc, #108]	@ (80291fc <__ieee754_pow+0x2a8>)
 8029190:	e7ea      	b.n	8029168 <__ieee754_pow+0x214>
 8029192:	2f00      	cmp	r7, #0
 8029194:	dcf7      	bgt.n	8029186 <__ieee754_pow+0x232>
 8029196:	2000      	movs	r0, #0
 8029198:	f000 fd73 	bl	8029c82 <__math_uflow>
 802919c:	e6ff      	b.n	8028f9e <__ieee754_pow+0x4a>
 802919e:	4b18      	ldr	r3, [pc, #96]	@ (8029200 <__ieee754_pow+0x2ac>)
 80291a0:	429c      	cmp	r4, r3
 80291a2:	d80a      	bhi.n	80291ba <__ieee754_pow+0x266>
 80291a4:	9806      	ldr	r0, [sp, #24]
 80291a6:	9907      	ldr	r1, [sp, #28]
 80291a8:	2300      	movs	r3, #0
 80291aa:	2200      	movs	r2, #0
 80291ac:	f7d7 f986 	bl	80004bc <__aeabi_dcmplt>
 80291b0:	1e43      	subs	r3, r0, #1
 80291b2:	4198      	sbcs	r0, r3
 80291b4:	2f00      	cmp	r7, #0
 80291b6:	daef      	bge.n	8029198 <__ieee754_pow+0x244>
 80291b8:	e7e6      	b.n	8029188 <__ieee754_pow+0x234>
 80291ba:	4b0d      	ldr	r3, [pc, #52]	@ (80291f0 <__ieee754_pow+0x29c>)
 80291bc:	2200      	movs	r2, #0
 80291be:	429c      	cmp	r4, r3
 80291c0:	d920      	bls.n	8029204 <__ieee754_pow+0x2b0>
 80291c2:	9806      	ldr	r0, [sp, #24]
 80291c4:	9907      	ldr	r1, [sp, #28]
 80291c6:	2300      	movs	r3, #0
 80291c8:	f7d7 f978 	bl	80004bc <__aeabi_dcmplt>
 80291cc:	1e43      	subs	r3, r0, #1
 80291ce:	4198      	sbcs	r0, r3
 80291d0:	2f00      	cmp	r7, #0
 80291d2:	dcd9      	bgt.n	8029188 <__ieee754_pow+0x234>
 80291d4:	e7e0      	b.n	8029198 <__ieee754_pow+0x244>
 80291d6:	46c0      	nop			@ (mov r8, r8)
 80291d8:	fff00000 	.word	0xfff00000
 80291dc:	7ff00000 	.word	0x7ff00000
 80291e0:	c0100000 	.word	0xc0100000
 80291e4:	433fffff 	.word	0x433fffff
 80291e8:	3fefffff 	.word	0x3fefffff
 80291ec:	fffffc01 	.word	0xfffffc01
 80291f0:	3ff00000 	.word	0x3ff00000
 80291f4:	3fe00000 	.word	0x3fe00000
 80291f8:	43f00000 	.word	0x43f00000
 80291fc:	bff00000 	.word	0xbff00000
 8029200:	3feffffe 	.word	0x3feffffe
 8029204:	9800      	ldr	r0, [sp, #0]
 8029206:	9901      	ldr	r1, [sp, #4]
 8029208:	4b4d      	ldr	r3, [pc, #308]	@ (8029340 <__ieee754_pow+0x3ec>)
 802920a:	f7d9 fe89 	bl	8002f20 <__aeabi_dsub>
 802920e:	22c0      	movs	r2, #192	@ 0xc0
 8029210:	4b4c      	ldr	r3, [pc, #304]	@ (8029344 <__ieee754_pow+0x3f0>)
 8029212:	05d2      	lsls	r2, r2, #23
 8029214:	0006      	movs	r6, r0
 8029216:	000f      	movs	r7, r1
 8029218:	f7d9 fb9c 	bl	8002954 <__aeabi_dmul>
 802921c:	4a4a      	ldr	r2, [pc, #296]	@ (8029348 <__ieee754_pow+0x3f4>)
 802921e:	9002      	str	r0, [sp, #8]
 8029220:	9103      	str	r1, [sp, #12]
 8029222:	4b4a      	ldr	r3, [pc, #296]	@ (802934c <__ieee754_pow+0x3f8>)
 8029224:	0030      	movs	r0, r6
 8029226:	0039      	movs	r1, r7
 8029228:	f7d9 fb94 	bl	8002954 <__aeabi_dmul>
 802922c:	2200      	movs	r2, #0
 802922e:	9000      	str	r0, [sp, #0]
 8029230:	9101      	str	r1, [sp, #4]
 8029232:	4b47      	ldr	r3, [pc, #284]	@ (8029350 <__ieee754_pow+0x3fc>)
 8029234:	0030      	movs	r0, r6
 8029236:	0039      	movs	r1, r7
 8029238:	f7d9 fb8c 	bl	8002954 <__aeabi_dmul>
 802923c:	0002      	movs	r2, r0
 802923e:	000b      	movs	r3, r1
 8029240:	4844      	ldr	r0, [pc, #272]	@ (8029354 <__ieee754_pow+0x400>)
 8029242:	4945      	ldr	r1, [pc, #276]	@ (8029358 <__ieee754_pow+0x404>)
 8029244:	f7d9 fe6c 	bl	8002f20 <__aeabi_dsub>
 8029248:	0032      	movs	r2, r6
 802924a:	003b      	movs	r3, r7
 802924c:	f7d9 fb82 	bl	8002954 <__aeabi_dmul>
 8029250:	0002      	movs	r2, r0
 8029252:	000b      	movs	r3, r1
 8029254:	2000      	movs	r0, #0
 8029256:	4941      	ldr	r1, [pc, #260]	@ (802935c <__ieee754_pow+0x408>)
 8029258:	f7d9 fe62 	bl	8002f20 <__aeabi_dsub>
 802925c:	0032      	movs	r2, r6
 802925e:	0004      	movs	r4, r0
 8029260:	000d      	movs	r5, r1
 8029262:	003b      	movs	r3, r7
 8029264:	0030      	movs	r0, r6
 8029266:	0039      	movs	r1, r7
 8029268:	f7d9 fb74 	bl	8002954 <__aeabi_dmul>
 802926c:	0002      	movs	r2, r0
 802926e:	000b      	movs	r3, r1
 8029270:	0020      	movs	r0, r4
 8029272:	0029      	movs	r1, r5
 8029274:	f7d9 fb6e 	bl	8002954 <__aeabi_dmul>
 8029278:	4a39      	ldr	r2, [pc, #228]	@ (8029360 <__ieee754_pow+0x40c>)
 802927a:	4b32      	ldr	r3, [pc, #200]	@ (8029344 <__ieee754_pow+0x3f0>)
 802927c:	f7d9 fb6a 	bl	8002954 <__aeabi_dmul>
 8029280:	0002      	movs	r2, r0
 8029282:	000b      	movs	r3, r1
 8029284:	9800      	ldr	r0, [sp, #0]
 8029286:	9901      	ldr	r1, [sp, #4]
 8029288:	f7d9 fe4a 	bl	8002f20 <__aeabi_dsub>
 802928c:	0002      	movs	r2, r0
 802928e:	000b      	movs	r3, r1
 8029290:	0004      	movs	r4, r0
 8029292:	000d      	movs	r5, r1
 8029294:	9802      	ldr	r0, [sp, #8]
 8029296:	9903      	ldr	r1, [sp, #12]
 8029298:	f7d8 fb5c 	bl	8001954 <__aeabi_dadd>
 802929c:	9a02      	ldr	r2, [sp, #8]
 802929e:	9b03      	ldr	r3, [sp, #12]
 80292a0:	2000      	movs	r0, #0
 80292a2:	9000      	str	r0, [sp, #0]
 80292a4:	9101      	str	r1, [sp, #4]
 80292a6:	f7d9 fe3b 	bl	8002f20 <__aeabi_dsub>
 80292aa:	0002      	movs	r2, r0
 80292ac:	000b      	movs	r3, r1
 80292ae:	0020      	movs	r0, r4
 80292b0:	0029      	movs	r1, r5
 80292b2:	f7d9 fe35 	bl	8002f20 <__aeabi_dsub>
 80292b6:	9c04      	ldr	r4, [sp, #16]
 80292b8:	9d05      	ldr	r5, [sp, #20]
 80292ba:	2400      	movs	r4, #0
 80292bc:	0006      	movs	r6, r0
 80292be:	000f      	movs	r7, r1
 80292c0:	9804      	ldr	r0, [sp, #16]
 80292c2:	9905      	ldr	r1, [sp, #20]
 80292c4:	0022      	movs	r2, r4
 80292c6:	002b      	movs	r3, r5
 80292c8:	9402      	str	r4, [sp, #8]
 80292ca:	9503      	str	r5, [sp, #12]
 80292cc:	f7d9 fe28 	bl	8002f20 <__aeabi_dsub>
 80292d0:	9a00      	ldr	r2, [sp, #0]
 80292d2:	9b01      	ldr	r3, [sp, #4]
 80292d4:	f7d9 fb3e 	bl	8002954 <__aeabi_dmul>
 80292d8:	9a04      	ldr	r2, [sp, #16]
 80292da:	9b05      	ldr	r3, [sp, #20]
 80292dc:	9008      	str	r0, [sp, #32]
 80292de:	9109      	str	r1, [sp, #36]	@ 0x24
 80292e0:	0030      	movs	r0, r6
 80292e2:	0039      	movs	r1, r7
 80292e4:	f7d9 fb36 	bl	8002954 <__aeabi_dmul>
 80292e8:	0002      	movs	r2, r0
 80292ea:	000b      	movs	r3, r1
 80292ec:	9808      	ldr	r0, [sp, #32]
 80292ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80292f0:	f7d8 fb30 	bl	8001954 <__aeabi_dadd>
 80292f4:	0022      	movs	r2, r4
 80292f6:	002b      	movs	r3, r5
 80292f8:	9004      	str	r0, [sp, #16]
 80292fa:	9105      	str	r1, [sp, #20]
 80292fc:	9800      	ldr	r0, [sp, #0]
 80292fe:	9901      	ldr	r1, [sp, #4]
 8029300:	f7d9 fb28 	bl	8002954 <__aeabi_dmul>
 8029304:	000b      	movs	r3, r1
 8029306:	0002      	movs	r2, r0
 8029308:	9000      	str	r0, [sp, #0]
 802930a:	9101      	str	r1, [sp, #4]
 802930c:	9804      	ldr	r0, [sp, #16]
 802930e:	9905      	ldr	r1, [sp, #20]
 8029310:	f7d8 fb20 	bl	8001954 <__aeabi_dadd>
 8029314:	4b13      	ldr	r3, [pc, #76]	@ (8029364 <__ieee754_pow+0x410>)
 8029316:	0006      	movs	r6, r0
 8029318:	000f      	movs	r7, r1
 802931a:	9108      	str	r1, [sp, #32]
 802931c:	4299      	cmp	r1, r3
 802931e:	dc00      	bgt.n	8029322 <__ieee754_pow+0x3ce>
 8029320:	e1c0      	b.n	80296a4 <__ieee754_pow+0x750>
 8029322:	4b11      	ldr	r3, [pc, #68]	@ (8029368 <__ieee754_pow+0x414>)
 8029324:	18cb      	adds	r3, r1, r3
 8029326:	4303      	orrs	r3, r0
 8029328:	42a3      	cmp	r3, r4
 802932a:	d100      	bne.n	802932e <__ieee754_pow+0x3da>
 802932c:	e1a1      	b.n	8029672 <__ieee754_pow+0x71e>
 802932e:	9806      	ldr	r0, [sp, #24]
 8029330:	9907      	ldr	r1, [sp, #28]
 8029332:	2300      	movs	r3, #0
 8029334:	2200      	movs	r2, #0
 8029336:	f7d7 f8c1 	bl	80004bc <__aeabi_dcmplt>
 802933a:	1e43      	subs	r3, r0, #1
 802933c:	4198      	sbcs	r0, r3
 802933e:	e723      	b.n	8029188 <__ieee754_pow+0x234>
 8029340:	3ff00000 	.word	0x3ff00000
 8029344:	3ff71547 	.word	0x3ff71547
 8029348:	f85ddf44 	.word	0xf85ddf44
 802934c:	3e54ae0b 	.word	0x3e54ae0b
 8029350:	3fd00000 	.word	0x3fd00000
 8029354:	55555555 	.word	0x55555555
 8029358:	3fd55555 	.word	0x3fd55555
 802935c:	3fe00000 	.word	0x3fe00000
 8029360:	652b82fe 	.word	0x652b82fe
 8029364:	408fffff 	.word	0x408fffff
 8029368:	bf700000 	.word	0xbf700000
 802936c:	4bdc      	ldr	r3, [pc, #880]	@ (80296e0 <__ieee754_pow+0x78c>)
 802936e:	9903      	ldr	r1, [sp, #12]
 8029370:	2200      	movs	r2, #0
 8029372:	420b      	tst	r3, r1
 8029374:	d10b      	bne.n	802938e <__ieee754_pow+0x43a>
 8029376:	9800      	ldr	r0, [sp, #0]
 8029378:	9901      	ldr	r1, [sp, #4]
 802937a:	2200      	movs	r2, #0
 802937c:	4bd9      	ldr	r3, [pc, #868]	@ (80296e4 <__ieee754_pow+0x790>)
 802937e:	f7d9 fae9 	bl	8002954 <__aeabi_dmul>
 8029382:	2235      	movs	r2, #53	@ 0x35
 8029384:	9000      	str	r0, [sp, #0]
 8029386:	9101      	str	r1, [sp, #4]
 8029388:	9b01      	ldr	r3, [sp, #4]
 802938a:	4252      	negs	r2, r2
 802938c:	9308      	str	r3, [sp, #32]
 802938e:	9b08      	ldr	r3, [sp, #32]
 8029390:	49d5      	ldr	r1, [pc, #852]	@ (80296e8 <__ieee754_pow+0x794>)
 8029392:	151b      	asrs	r3, r3, #20
 8029394:	185b      	adds	r3, r3, r1
 8029396:	189b      	adds	r3, r3, r2
 8029398:	930e      	str	r3, [sp, #56]	@ 0x38
 802939a:	9b08      	ldr	r3, [sp, #32]
 802939c:	4dd3      	ldr	r5, [pc, #844]	@ (80296ec <__ieee754_pow+0x798>)
 802939e:	031b      	lsls	r3, r3, #12
 80293a0:	4ad3      	ldr	r2, [pc, #844]	@ (80296f0 <__ieee754_pow+0x79c>)
 80293a2:	0b1b      	lsrs	r3, r3, #12
 80293a4:	2600      	movs	r6, #0
 80293a6:	431d      	orrs	r5, r3
 80293a8:	4293      	cmp	r3, r2
 80293aa:	dd09      	ble.n	80293c0 <__ieee754_pow+0x46c>
 80293ac:	4ad1      	ldr	r2, [pc, #836]	@ (80296f4 <__ieee754_pow+0x7a0>)
 80293ae:	3601      	adds	r6, #1
 80293b0:	4293      	cmp	r3, r2
 80293b2:	dd05      	ble.n	80293c0 <__ieee754_pow+0x46c>
 80293b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80293b6:	199b      	adds	r3, r3, r6
 80293b8:	2600      	movs	r6, #0
 80293ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80293bc:	4bce      	ldr	r3, [pc, #824]	@ (80296f8 <__ieee754_pow+0x7a4>)
 80293be:	18ed      	adds	r5, r5, r3
 80293c0:	9800      	ldr	r0, [sp, #0]
 80293c2:	9901      	ldr	r1, [sp, #4]
 80293c4:	0029      	movs	r1, r5
 80293c6:	4bcd      	ldr	r3, [pc, #820]	@ (80296fc <__ieee754_pow+0x7a8>)
 80293c8:	00f2      	lsls	r2, r6, #3
 80293ca:	189b      	adds	r3, r3, r2
 80293cc:	685c      	ldr	r4, [r3, #4]
 80293ce:	681b      	ldr	r3, [r3, #0]
 80293d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80293d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80293d4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80293d6:	001a      	movs	r2, r3
 80293d8:	0023      	movs	r3, r4
 80293da:	900c      	str	r0, [sp, #48]	@ 0x30
 80293dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80293de:	f7d9 fd9f 	bl	8002f20 <__aeabi_dsub>
 80293e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80293e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80293e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80293e8:	9111      	str	r1, [sp, #68]	@ 0x44
 80293ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80293ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80293ee:	f7d8 fab1 	bl	8001954 <__aeabi_dadd>
 80293f2:	0002      	movs	r2, r0
 80293f4:	000b      	movs	r3, r1
 80293f6:	2000      	movs	r0, #0
 80293f8:	49bc      	ldr	r1, [pc, #752]	@ (80296ec <__ieee754_pow+0x798>)
 80293fa:	f7d8 fe71 	bl	80020e0 <__aeabi_ddiv>
 80293fe:	0002      	movs	r2, r0
 8029400:	000b      	movs	r3, r1
 8029402:	9012      	str	r0, [sp, #72]	@ 0x48
 8029404:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029406:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029408:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802940a:	f7d9 faa3 	bl	8002954 <__aeabi_dmul>
 802940e:	9008      	str	r0, [sp, #32]
 8029410:	9109      	str	r1, [sp, #36]	@ 0x24
 8029412:	9b08      	ldr	r3, [sp, #32]
 8029414:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029416:	2180      	movs	r1, #128	@ 0x80
 8029418:	9302      	str	r3, [sp, #8]
 802941a:	9403      	str	r4, [sp, #12]
 802941c:	2080      	movs	r0, #128	@ 0x80
 802941e:	2300      	movs	r3, #0
 8029420:	2200      	movs	r2, #0
 8029422:	106d      	asrs	r5, r5, #1
 8029424:	0589      	lsls	r1, r1, #22
 8029426:	9302      	str	r3, [sp, #8]
 8029428:	4329      	orrs	r1, r5
 802942a:	0300      	lsls	r0, r0, #12
 802942c:	9b02      	ldr	r3, [sp, #8]
 802942e:	9c03      	ldr	r4, [sp, #12]
 8029430:	1809      	adds	r1, r1, r0
 8029432:	9300      	str	r3, [sp, #0]
 8029434:	9401      	str	r4, [sp, #4]
 8029436:	04b6      	lsls	r6, r6, #18
 8029438:	198b      	adds	r3, r1, r6
 802943a:	9800      	ldr	r0, [sp, #0]
 802943c:	9901      	ldr	r1, [sp, #4]
 802943e:	0014      	movs	r4, r2
 8029440:	001d      	movs	r5, r3
 8029442:	f7d9 fa87 	bl	8002954 <__aeabi_dmul>
 8029446:	0002      	movs	r2, r0
 8029448:	000b      	movs	r3, r1
 802944a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802944c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802944e:	f7d9 fd67 	bl	8002f20 <__aeabi_dsub>
 8029452:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029456:	0006      	movs	r6, r0
 8029458:	000f      	movs	r7, r1
 802945a:	0020      	movs	r0, r4
 802945c:	0029      	movs	r1, r5
 802945e:	f7d9 fd5f 	bl	8002f20 <__aeabi_dsub>
 8029462:	0002      	movs	r2, r0
 8029464:	000b      	movs	r3, r1
 8029466:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029468:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802946a:	f7d9 fd59 	bl	8002f20 <__aeabi_dsub>
 802946e:	9a00      	ldr	r2, [sp, #0]
 8029470:	9b01      	ldr	r3, [sp, #4]
 8029472:	f7d9 fa6f 	bl	8002954 <__aeabi_dmul>
 8029476:	0002      	movs	r2, r0
 8029478:	000b      	movs	r3, r1
 802947a:	0030      	movs	r0, r6
 802947c:	0039      	movs	r1, r7
 802947e:	f7d9 fd4f 	bl	8002f20 <__aeabi_dsub>
 8029482:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029486:	f7d9 fa65 	bl	8002954 <__aeabi_dmul>
 802948a:	9a08      	ldr	r2, [sp, #32]
 802948c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802948e:	900a      	str	r0, [sp, #40]	@ 0x28
 8029490:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029492:	0010      	movs	r0, r2
 8029494:	0019      	movs	r1, r3
 8029496:	f7d9 fa5d 	bl	8002954 <__aeabi_dmul>
 802949a:	0006      	movs	r6, r0
 802949c:	000f      	movs	r7, r1
 802949e:	4a98      	ldr	r2, [pc, #608]	@ (8029700 <__ieee754_pow+0x7ac>)
 80294a0:	4b98      	ldr	r3, [pc, #608]	@ (8029704 <__ieee754_pow+0x7b0>)
 80294a2:	f7d9 fa57 	bl	8002954 <__aeabi_dmul>
 80294a6:	4a98      	ldr	r2, [pc, #608]	@ (8029708 <__ieee754_pow+0x7b4>)
 80294a8:	4b98      	ldr	r3, [pc, #608]	@ (802970c <__ieee754_pow+0x7b8>)
 80294aa:	f7d8 fa53 	bl	8001954 <__aeabi_dadd>
 80294ae:	0032      	movs	r2, r6
 80294b0:	003b      	movs	r3, r7
 80294b2:	f7d9 fa4f 	bl	8002954 <__aeabi_dmul>
 80294b6:	4a96      	ldr	r2, [pc, #600]	@ (8029710 <__ieee754_pow+0x7bc>)
 80294b8:	4b96      	ldr	r3, [pc, #600]	@ (8029714 <__ieee754_pow+0x7c0>)
 80294ba:	f7d8 fa4b 	bl	8001954 <__aeabi_dadd>
 80294be:	0032      	movs	r2, r6
 80294c0:	003b      	movs	r3, r7
 80294c2:	f7d9 fa47 	bl	8002954 <__aeabi_dmul>
 80294c6:	4a94      	ldr	r2, [pc, #592]	@ (8029718 <__ieee754_pow+0x7c4>)
 80294c8:	4b94      	ldr	r3, [pc, #592]	@ (802971c <__ieee754_pow+0x7c8>)
 80294ca:	f7d8 fa43 	bl	8001954 <__aeabi_dadd>
 80294ce:	0032      	movs	r2, r6
 80294d0:	003b      	movs	r3, r7
 80294d2:	f7d9 fa3f 	bl	8002954 <__aeabi_dmul>
 80294d6:	4a92      	ldr	r2, [pc, #584]	@ (8029720 <__ieee754_pow+0x7cc>)
 80294d8:	4b92      	ldr	r3, [pc, #584]	@ (8029724 <__ieee754_pow+0x7d0>)
 80294da:	f7d8 fa3b 	bl	8001954 <__aeabi_dadd>
 80294de:	0032      	movs	r2, r6
 80294e0:	003b      	movs	r3, r7
 80294e2:	f7d9 fa37 	bl	8002954 <__aeabi_dmul>
 80294e6:	4a90      	ldr	r2, [pc, #576]	@ (8029728 <__ieee754_pow+0x7d4>)
 80294e8:	4b90      	ldr	r3, [pc, #576]	@ (802972c <__ieee754_pow+0x7d8>)
 80294ea:	f7d8 fa33 	bl	8001954 <__aeabi_dadd>
 80294ee:	0032      	movs	r2, r6
 80294f0:	0004      	movs	r4, r0
 80294f2:	000d      	movs	r5, r1
 80294f4:	003b      	movs	r3, r7
 80294f6:	0030      	movs	r0, r6
 80294f8:	0039      	movs	r1, r7
 80294fa:	f7d9 fa2b 	bl	8002954 <__aeabi_dmul>
 80294fe:	0002      	movs	r2, r0
 8029500:	000b      	movs	r3, r1
 8029502:	0020      	movs	r0, r4
 8029504:	0029      	movs	r1, r5
 8029506:	f7d9 fa25 	bl	8002954 <__aeabi_dmul>
 802950a:	9a00      	ldr	r2, [sp, #0]
 802950c:	9b01      	ldr	r3, [sp, #4]
 802950e:	0004      	movs	r4, r0
 8029510:	000d      	movs	r5, r1
 8029512:	9808      	ldr	r0, [sp, #32]
 8029514:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029516:	f7d8 fa1d 	bl	8001954 <__aeabi_dadd>
 802951a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802951c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802951e:	f7d9 fa19 	bl	8002954 <__aeabi_dmul>
 8029522:	0022      	movs	r2, r4
 8029524:	002b      	movs	r3, r5
 8029526:	f7d8 fa15 	bl	8001954 <__aeabi_dadd>
 802952a:	9a00      	ldr	r2, [sp, #0]
 802952c:	9b01      	ldr	r3, [sp, #4]
 802952e:	900c      	str	r0, [sp, #48]	@ 0x30
 8029530:	910d      	str	r1, [sp, #52]	@ 0x34
 8029532:	0010      	movs	r0, r2
 8029534:	0019      	movs	r1, r3
 8029536:	f7d9 fa0d 	bl	8002954 <__aeabi_dmul>
 802953a:	2200      	movs	r2, #0
 802953c:	4b7c      	ldr	r3, [pc, #496]	@ (8029730 <__ieee754_pow+0x7dc>)
 802953e:	0004      	movs	r4, r0
 8029540:	000d      	movs	r5, r1
 8029542:	f7d8 fa07 	bl	8001954 <__aeabi_dadd>
 8029546:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029548:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802954a:	f7d8 fa03 	bl	8001954 <__aeabi_dadd>
 802954e:	2000      	movs	r0, #0
 8029550:	000f      	movs	r7, r1
 8029552:	0006      	movs	r6, r0
 8029554:	0002      	movs	r2, r0
 8029556:	000b      	movs	r3, r1
 8029558:	9800      	ldr	r0, [sp, #0]
 802955a:	9901      	ldr	r1, [sp, #4]
 802955c:	f7d9 f9fa 	bl	8002954 <__aeabi_dmul>
 8029560:	2200      	movs	r2, #0
 8029562:	9000      	str	r0, [sp, #0]
 8029564:	9101      	str	r1, [sp, #4]
 8029566:	4b72      	ldr	r3, [pc, #456]	@ (8029730 <__ieee754_pow+0x7dc>)
 8029568:	0030      	movs	r0, r6
 802956a:	0039      	movs	r1, r7
 802956c:	f7d9 fcd8 	bl	8002f20 <__aeabi_dsub>
 8029570:	0022      	movs	r2, r4
 8029572:	002b      	movs	r3, r5
 8029574:	f7d9 fcd4 	bl	8002f20 <__aeabi_dsub>
 8029578:	0002      	movs	r2, r0
 802957a:	000b      	movs	r3, r1
 802957c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802957e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029580:	f7d9 fcce 	bl	8002f20 <__aeabi_dsub>
 8029584:	9a08      	ldr	r2, [sp, #32]
 8029586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029588:	f7d9 f9e4 	bl	8002954 <__aeabi_dmul>
 802958c:	0032      	movs	r2, r6
 802958e:	0004      	movs	r4, r0
 8029590:	000d      	movs	r5, r1
 8029592:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029594:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029596:	003b      	movs	r3, r7
 8029598:	f7d9 f9dc 	bl	8002954 <__aeabi_dmul>
 802959c:	0002      	movs	r2, r0
 802959e:	000b      	movs	r3, r1
 80295a0:	0020      	movs	r0, r4
 80295a2:	0029      	movs	r1, r5
 80295a4:	f7d8 f9d6 	bl	8001954 <__aeabi_dadd>
 80295a8:	0004      	movs	r4, r0
 80295aa:	000d      	movs	r5, r1
 80295ac:	0002      	movs	r2, r0
 80295ae:	000b      	movs	r3, r1
 80295b0:	9800      	ldr	r0, [sp, #0]
 80295b2:	9901      	ldr	r1, [sp, #4]
 80295b4:	f7d8 f9ce 	bl	8001954 <__aeabi_dadd>
 80295b8:	22e0      	movs	r2, #224	@ 0xe0
 80295ba:	2000      	movs	r0, #0
 80295bc:	4b5d      	ldr	r3, [pc, #372]	@ (8029734 <__ieee754_pow+0x7e0>)
 80295be:	0612      	lsls	r2, r2, #24
 80295c0:	0006      	movs	r6, r0
 80295c2:	000f      	movs	r7, r1
 80295c4:	f7d9 f9c6 	bl	8002954 <__aeabi_dmul>
 80295c8:	9008      	str	r0, [sp, #32]
 80295ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80295cc:	9a00      	ldr	r2, [sp, #0]
 80295ce:	9b01      	ldr	r3, [sp, #4]
 80295d0:	0030      	movs	r0, r6
 80295d2:	0039      	movs	r1, r7
 80295d4:	f7d9 fca4 	bl	8002f20 <__aeabi_dsub>
 80295d8:	0002      	movs	r2, r0
 80295da:	000b      	movs	r3, r1
 80295dc:	0020      	movs	r0, r4
 80295de:	0029      	movs	r1, r5
 80295e0:	f7d9 fc9e 	bl	8002f20 <__aeabi_dsub>
 80295e4:	4a54      	ldr	r2, [pc, #336]	@ (8029738 <__ieee754_pow+0x7e4>)
 80295e6:	4b53      	ldr	r3, [pc, #332]	@ (8029734 <__ieee754_pow+0x7e0>)
 80295e8:	f7d9 f9b4 	bl	8002954 <__aeabi_dmul>
 80295ec:	4a53      	ldr	r2, [pc, #332]	@ (802973c <__ieee754_pow+0x7e8>)
 80295ee:	0004      	movs	r4, r0
 80295f0:	000d      	movs	r5, r1
 80295f2:	0030      	movs	r0, r6
 80295f4:	0039      	movs	r1, r7
 80295f6:	4b52      	ldr	r3, [pc, #328]	@ (8029740 <__ieee754_pow+0x7ec>)
 80295f8:	f7d9 f9ac 	bl	8002954 <__aeabi_dmul>
 80295fc:	0002      	movs	r2, r0
 80295fe:	000b      	movs	r3, r1
 8029600:	0020      	movs	r0, r4
 8029602:	0029      	movs	r1, r5
 8029604:	f7d8 f9a6 	bl	8001954 <__aeabi_dadd>
 8029608:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802960a:	4b4e      	ldr	r3, [pc, #312]	@ (8029744 <__ieee754_pow+0x7f0>)
 802960c:	189b      	adds	r3, r3, r2
 802960e:	681a      	ldr	r2, [r3, #0]
 8029610:	685b      	ldr	r3, [r3, #4]
 8029612:	f7d8 f99f 	bl	8001954 <__aeabi_dadd>
 8029616:	900a      	str	r0, [sp, #40]	@ 0x28
 8029618:	910b      	str	r1, [sp, #44]	@ 0x2c
 802961a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802961c:	f7da f8e8 	bl	80037f0 <__aeabi_i2d>
 8029620:	0004      	movs	r4, r0
 8029622:	000d      	movs	r5, r1
 8029624:	9808      	ldr	r0, [sp, #32]
 8029626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029628:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802962a:	4b47      	ldr	r3, [pc, #284]	@ (8029748 <__ieee754_pow+0x7f4>)
 802962c:	189b      	adds	r3, r3, r2
 802962e:	681e      	ldr	r6, [r3, #0]
 8029630:	685f      	ldr	r7, [r3, #4]
 8029632:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029636:	f7d8 f98d 	bl	8001954 <__aeabi_dadd>
 802963a:	0032      	movs	r2, r6
 802963c:	003b      	movs	r3, r7
 802963e:	f7d8 f989 	bl	8001954 <__aeabi_dadd>
 8029642:	0022      	movs	r2, r4
 8029644:	002b      	movs	r3, r5
 8029646:	f7d8 f985 	bl	8001954 <__aeabi_dadd>
 802964a:	2000      	movs	r0, #0
 802964c:	0022      	movs	r2, r4
 802964e:	002b      	movs	r3, r5
 8029650:	9000      	str	r0, [sp, #0]
 8029652:	9101      	str	r1, [sp, #4]
 8029654:	f7d9 fc64 	bl	8002f20 <__aeabi_dsub>
 8029658:	0032      	movs	r2, r6
 802965a:	003b      	movs	r3, r7
 802965c:	f7d9 fc60 	bl	8002f20 <__aeabi_dsub>
 8029660:	9a08      	ldr	r2, [sp, #32]
 8029662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029664:	f7d9 fc5c 	bl	8002f20 <__aeabi_dsub>
 8029668:	0002      	movs	r2, r0
 802966a:	000b      	movs	r3, r1
 802966c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802966e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029670:	e61f      	b.n	80292b2 <__ieee754_pow+0x35e>
 8029672:	4a36      	ldr	r2, [pc, #216]	@ (802974c <__ieee754_pow+0x7f8>)
 8029674:	4b36      	ldr	r3, [pc, #216]	@ (8029750 <__ieee754_pow+0x7fc>)
 8029676:	9804      	ldr	r0, [sp, #16]
 8029678:	9905      	ldr	r1, [sp, #20]
 802967a:	f7d8 f96b 	bl	8001954 <__aeabi_dadd>
 802967e:	9a00      	ldr	r2, [sp, #0]
 8029680:	9b01      	ldr	r3, [sp, #4]
 8029682:	0004      	movs	r4, r0
 8029684:	000d      	movs	r5, r1
 8029686:	0030      	movs	r0, r6
 8029688:	0039      	movs	r1, r7
 802968a:	f7d9 fc49 	bl	8002f20 <__aeabi_dsub>
 802968e:	0002      	movs	r2, r0
 8029690:	000b      	movs	r3, r1
 8029692:	0020      	movs	r0, r4
 8029694:	0029      	movs	r1, r5
 8029696:	f7d6 ff25 	bl	80004e4 <__aeabi_dcmpgt>
 802969a:	2800      	cmp	r0, #0
 802969c:	d000      	beq.n	80296a0 <__ieee754_pow+0x74c>
 802969e:	e646      	b.n	802932e <__ieee754_pow+0x3da>
 80296a0:	4b2c      	ldr	r3, [pc, #176]	@ (8029754 <__ieee754_pow+0x800>)
 80296a2:	e063      	b.n	802976c <__ieee754_pow+0x818>
 80296a4:	4a2c      	ldr	r2, [pc, #176]	@ (8029758 <__ieee754_pow+0x804>)
 80296a6:	004b      	lsls	r3, r1, #1
 80296a8:	085b      	lsrs	r3, r3, #1
 80296aa:	4293      	cmp	r3, r2
 80296ac:	d95a      	bls.n	8029764 <__ieee754_pow+0x810>
 80296ae:	4b2b      	ldr	r3, [pc, #172]	@ (802975c <__ieee754_pow+0x808>)
 80296b0:	18cb      	adds	r3, r1, r3
 80296b2:	4303      	orrs	r3, r0
 80296b4:	d008      	beq.n	80296c8 <__ieee754_pow+0x774>
 80296b6:	9806      	ldr	r0, [sp, #24]
 80296b8:	9907      	ldr	r1, [sp, #28]
 80296ba:	2300      	movs	r3, #0
 80296bc:	2200      	movs	r2, #0
 80296be:	f7d6 fefd 	bl	80004bc <__aeabi_dcmplt>
 80296c2:	1e43      	subs	r3, r0, #1
 80296c4:	4198      	sbcs	r0, r3
 80296c6:	e567      	b.n	8029198 <__ieee754_pow+0x244>
 80296c8:	9a00      	ldr	r2, [sp, #0]
 80296ca:	9b01      	ldr	r3, [sp, #4]
 80296cc:	f7d9 fc28 	bl	8002f20 <__aeabi_dsub>
 80296d0:	9a04      	ldr	r2, [sp, #16]
 80296d2:	9b05      	ldr	r3, [sp, #20]
 80296d4:	f7d6 ff10 	bl	80004f8 <__aeabi_dcmpge>
 80296d8:	2800      	cmp	r0, #0
 80296da:	d1ec      	bne.n	80296b6 <__ieee754_pow+0x762>
 80296dc:	4b20      	ldr	r3, [pc, #128]	@ (8029760 <__ieee754_pow+0x80c>)
 80296de:	e045      	b.n	802976c <__ieee754_pow+0x818>
 80296e0:	7ff00000 	.word	0x7ff00000
 80296e4:	43400000 	.word	0x43400000
 80296e8:	fffffc01 	.word	0xfffffc01
 80296ec:	3ff00000 	.word	0x3ff00000
 80296f0:	0003988e 	.word	0x0003988e
 80296f4:	000bb679 	.word	0x000bb679
 80296f8:	fff00000 	.word	0xfff00000
 80296fc:	0802eca0 	.word	0x0802eca0
 8029700:	4a454eef 	.word	0x4a454eef
 8029704:	3fca7e28 	.word	0x3fca7e28
 8029708:	93c9db65 	.word	0x93c9db65
 802970c:	3fcd864a 	.word	0x3fcd864a
 8029710:	a91d4101 	.word	0xa91d4101
 8029714:	3fd17460 	.word	0x3fd17460
 8029718:	518f264d 	.word	0x518f264d
 802971c:	3fd55555 	.word	0x3fd55555
 8029720:	db6fabff 	.word	0xdb6fabff
 8029724:	3fdb6db6 	.word	0x3fdb6db6
 8029728:	33333303 	.word	0x33333303
 802972c:	3fe33333 	.word	0x3fe33333
 8029730:	40080000 	.word	0x40080000
 8029734:	3feec709 	.word	0x3feec709
 8029738:	dc3a03fd 	.word	0xdc3a03fd
 802973c:	145b01f5 	.word	0x145b01f5
 8029740:	be3e2fe0 	.word	0xbe3e2fe0
 8029744:	0802ec80 	.word	0x0802ec80
 8029748:	0802ec90 	.word	0x0802ec90
 802974c:	652b82fe 	.word	0x652b82fe
 8029750:	3c971547 	.word	0x3c971547
 8029754:	40900000 	.word	0x40900000
 8029758:	4090cbff 	.word	0x4090cbff
 802975c:	3f6f3400 	.word	0x3f6f3400
 8029760:	4090cc00 	.word	0x4090cc00
 8029764:	4a73      	ldr	r2, [pc, #460]	@ (8029934 <__ieee754_pow+0x9e0>)
 8029766:	9402      	str	r4, [sp, #8]
 8029768:	4293      	cmp	r3, r2
 802976a:	d925      	bls.n	80297b8 <__ieee754_pow+0x864>
 802976c:	4a72      	ldr	r2, [pc, #456]	@ (8029938 <__ieee754_pow+0x9e4>)
 802976e:	151b      	asrs	r3, r3, #20
 8029770:	189b      	adds	r3, r3, r2
 8029772:	2280      	movs	r2, #128	@ 0x80
 8029774:	0352      	lsls	r2, r2, #13
 8029776:	0011      	movs	r1, r2
 8029778:	4119      	asrs	r1, r3
 802977a:	19cb      	adds	r3, r1, r7
 802977c:	005c      	lsls	r4, r3, #1
 802977e:	496f      	ldr	r1, [pc, #444]	@ (802993c <__ieee754_pow+0x9e8>)
 8029780:	4d6f      	ldr	r5, [pc, #444]	@ (8029940 <__ieee754_pow+0x9ec>)
 8029782:	0d64      	lsrs	r4, r4, #21
 8029784:	1864      	adds	r4, r4, r1
 8029786:	4125      	asrs	r5, r4
 8029788:	401d      	ands	r5, r3
 802978a:	031b      	lsls	r3, r3, #12
 802978c:	0b1b      	lsrs	r3, r3, #12
 802978e:	4313      	orrs	r3, r2
 8029790:	2214      	movs	r2, #20
 8029792:	1b12      	subs	r2, r2, r4
 8029794:	4113      	asrs	r3, r2
 8029796:	9302      	str	r3, [sp, #8]
 8029798:	9b08      	ldr	r3, [sp, #32]
 802979a:	2000      	movs	r0, #0
 802979c:	0029      	movs	r1, r5
 802979e:	2b00      	cmp	r3, #0
 80297a0:	da02      	bge.n	80297a8 <__ieee754_pow+0x854>
 80297a2:	9b02      	ldr	r3, [sp, #8]
 80297a4:	425b      	negs	r3, r3
 80297a6:	9302      	str	r3, [sp, #8]
 80297a8:	0002      	movs	r2, r0
 80297aa:	000b      	movs	r3, r1
 80297ac:	9800      	ldr	r0, [sp, #0]
 80297ae:	9901      	ldr	r1, [sp, #4]
 80297b0:	f7d9 fbb6 	bl	8002f20 <__aeabi_dsub>
 80297b4:	9000      	str	r0, [sp, #0]
 80297b6:	9101      	str	r1, [sp, #4]
 80297b8:	9a04      	ldr	r2, [sp, #16]
 80297ba:	9b05      	ldr	r3, [sp, #20]
 80297bc:	9800      	ldr	r0, [sp, #0]
 80297be:	9901      	ldr	r1, [sp, #4]
 80297c0:	f7d8 f8c8 	bl	8001954 <__aeabi_dadd>
 80297c4:	2000      	movs	r0, #0
 80297c6:	2200      	movs	r2, #0
 80297c8:	4b5e      	ldr	r3, [pc, #376]	@ (8029944 <__ieee754_pow+0x9f0>)
 80297ca:	0006      	movs	r6, r0
 80297cc:	000f      	movs	r7, r1
 80297ce:	f7d9 f8c1 	bl	8002954 <__aeabi_dmul>
 80297d2:	9a00      	ldr	r2, [sp, #0]
 80297d4:	9b01      	ldr	r3, [sp, #4]
 80297d6:	9008      	str	r0, [sp, #32]
 80297d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80297da:	0030      	movs	r0, r6
 80297dc:	0039      	movs	r1, r7
 80297de:	f7d9 fb9f 	bl	8002f20 <__aeabi_dsub>
 80297e2:	0002      	movs	r2, r0
 80297e4:	000b      	movs	r3, r1
 80297e6:	9804      	ldr	r0, [sp, #16]
 80297e8:	9905      	ldr	r1, [sp, #20]
 80297ea:	f7d9 fb99 	bl	8002f20 <__aeabi_dsub>
 80297ee:	4a56      	ldr	r2, [pc, #344]	@ (8029948 <__ieee754_pow+0x9f4>)
 80297f0:	4b56      	ldr	r3, [pc, #344]	@ (802994c <__ieee754_pow+0x9f8>)
 80297f2:	f7d9 f8af 	bl	8002954 <__aeabi_dmul>
 80297f6:	4a56      	ldr	r2, [pc, #344]	@ (8029950 <__ieee754_pow+0x9fc>)
 80297f8:	0004      	movs	r4, r0
 80297fa:	000d      	movs	r5, r1
 80297fc:	0030      	movs	r0, r6
 80297fe:	0039      	movs	r1, r7
 8029800:	4b54      	ldr	r3, [pc, #336]	@ (8029954 <__ieee754_pow+0xa00>)
 8029802:	f7d9 f8a7 	bl	8002954 <__aeabi_dmul>
 8029806:	0002      	movs	r2, r0
 8029808:	000b      	movs	r3, r1
 802980a:	0020      	movs	r0, r4
 802980c:	0029      	movs	r1, r5
 802980e:	f7d8 f8a1 	bl	8001954 <__aeabi_dadd>
 8029812:	0004      	movs	r4, r0
 8029814:	000d      	movs	r5, r1
 8029816:	0002      	movs	r2, r0
 8029818:	000b      	movs	r3, r1
 802981a:	9808      	ldr	r0, [sp, #32]
 802981c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802981e:	f7d8 f899 	bl	8001954 <__aeabi_dadd>
 8029822:	9a08      	ldr	r2, [sp, #32]
 8029824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029826:	0006      	movs	r6, r0
 8029828:	000f      	movs	r7, r1
 802982a:	f7d9 fb79 	bl	8002f20 <__aeabi_dsub>
 802982e:	0002      	movs	r2, r0
 8029830:	000b      	movs	r3, r1
 8029832:	0020      	movs	r0, r4
 8029834:	0029      	movs	r1, r5
 8029836:	f7d9 fb73 	bl	8002f20 <__aeabi_dsub>
 802983a:	0032      	movs	r2, r6
 802983c:	9000      	str	r0, [sp, #0]
 802983e:	9101      	str	r1, [sp, #4]
 8029840:	003b      	movs	r3, r7
 8029842:	0030      	movs	r0, r6
 8029844:	0039      	movs	r1, r7
 8029846:	f7d9 f885 	bl	8002954 <__aeabi_dmul>
 802984a:	0004      	movs	r4, r0
 802984c:	000d      	movs	r5, r1
 802984e:	4a42      	ldr	r2, [pc, #264]	@ (8029958 <__ieee754_pow+0xa04>)
 8029850:	4b42      	ldr	r3, [pc, #264]	@ (802995c <__ieee754_pow+0xa08>)
 8029852:	f7d9 f87f 	bl	8002954 <__aeabi_dmul>
 8029856:	4a42      	ldr	r2, [pc, #264]	@ (8029960 <__ieee754_pow+0xa0c>)
 8029858:	4b42      	ldr	r3, [pc, #264]	@ (8029964 <__ieee754_pow+0xa10>)
 802985a:	f7d9 fb61 	bl	8002f20 <__aeabi_dsub>
 802985e:	0022      	movs	r2, r4
 8029860:	002b      	movs	r3, r5
 8029862:	f7d9 f877 	bl	8002954 <__aeabi_dmul>
 8029866:	4a40      	ldr	r2, [pc, #256]	@ (8029968 <__ieee754_pow+0xa14>)
 8029868:	4b40      	ldr	r3, [pc, #256]	@ (802996c <__ieee754_pow+0xa18>)
 802986a:	f7d8 f873 	bl	8001954 <__aeabi_dadd>
 802986e:	0022      	movs	r2, r4
 8029870:	002b      	movs	r3, r5
 8029872:	f7d9 f86f 	bl	8002954 <__aeabi_dmul>
 8029876:	4a3e      	ldr	r2, [pc, #248]	@ (8029970 <__ieee754_pow+0xa1c>)
 8029878:	4b3e      	ldr	r3, [pc, #248]	@ (8029974 <__ieee754_pow+0xa20>)
 802987a:	f7d9 fb51 	bl	8002f20 <__aeabi_dsub>
 802987e:	0022      	movs	r2, r4
 8029880:	002b      	movs	r3, r5
 8029882:	f7d9 f867 	bl	8002954 <__aeabi_dmul>
 8029886:	4a3c      	ldr	r2, [pc, #240]	@ (8029978 <__ieee754_pow+0xa24>)
 8029888:	4b3c      	ldr	r3, [pc, #240]	@ (802997c <__ieee754_pow+0xa28>)
 802988a:	f7d8 f863 	bl	8001954 <__aeabi_dadd>
 802988e:	0022      	movs	r2, r4
 8029890:	002b      	movs	r3, r5
 8029892:	f7d9 f85f 	bl	8002954 <__aeabi_dmul>
 8029896:	0002      	movs	r2, r0
 8029898:	000b      	movs	r3, r1
 802989a:	0030      	movs	r0, r6
 802989c:	0039      	movs	r1, r7
 802989e:	f7d9 fb3f 	bl	8002f20 <__aeabi_dsub>
 80298a2:	0004      	movs	r4, r0
 80298a4:	000d      	movs	r5, r1
 80298a6:	0002      	movs	r2, r0
 80298a8:	000b      	movs	r3, r1
 80298aa:	0030      	movs	r0, r6
 80298ac:	0039      	movs	r1, r7
 80298ae:	f7d9 f851 	bl	8002954 <__aeabi_dmul>
 80298b2:	2380      	movs	r3, #128	@ 0x80
 80298b4:	9004      	str	r0, [sp, #16]
 80298b6:	9105      	str	r1, [sp, #20]
 80298b8:	2200      	movs	r2, #0
 80298ba:	0020      	movs	r0, r4
 80298bc:	0029      	movs	r1, r5
 80298be:	05db      	lsls	r3, r3, #23
 80298c0:	f7d9 fb2e 	bl	8002f20 <__aeabi_dsub>
 80298c4:	0002      	movs	r2, r0
 80298c6:	000b      	movs	r3, r1
 80298c8:	9804      	ldr	r0, [sp, #16]
 80298ca:	9905      	ldr	r1, [sp, #20]
 80298cc:	f7d8 fc08 	bl	80020e0 <__aeabi_ddiv>
 80298d0:	9a00      	ldr	r2, [sp, #0]
 80298d2:	9b01      	ldr	r3, [sp, #4]
 80298d4:	0004      	movs	r4, r0
 80298d6:	000d      	movs	r5, r1
 80298d8:	0030      	movs	r0, r6
 80298da:	0039      	movs	r1, r7
 80298dc:	f7d9 f83a 	bl	8002954 <__aeabi_dmul>
 80298e0:	9a00      	ldr	r2, [sp, #0]
 80298e2:	9b01      	ldr	r3, [sp, #4]
 80298e4:	f7d8 f836 	bl	8001954 <__aeabi_dadd>
 80298e8:	0002      	movs	r2, r0
 80298ea:	000b      	movs	r3, r1
 80298ec:	0020      	movs	r0, r4
 80298ee:	0029      	movs	r1, r5
 80298f0:	f7d9 fb16 	bl	8002f20 <__aeabi_dsub>
 80298f4:	0032      	movs	r2, r6
 80298f6:	003b      	movs	r3, r7
 80298f8:	f7d9 fb12 	bl	8002f20 <__aeabi_dsub>
 80298fc:	0002      	movs	r2, r0
 80298fe:	000b      	movs	r3, r1
 8029900:	2000      	movs	r0, #0
 8029902:	491f      	ldr	r1, [pc, #124]	@ (8029980 <__ieee754_pow+0xa2c>)
 8029904:	f7d9 fb0c 	bl	8002f20 <__aeabi_dsub>
 8029908:	9b02      	ldr	r3, [sp, #8]
 802990a:	051b      	lsls	r3, r3, #20
 802990c:	185b      	adds	r3, r3, r1
 802990e:	151a      	asrs	r2, r3, #20
 8029910:	2a00      	cmp	r2, #0
 8029912:	dc06      	bgt.n	8029922 <__ieee754_pow+0x9ce>
 8029914:	9a02      	ldr	r2, [sp, #8]
 8029916:	f000 f929 	bl	8029b6c <scalbn>
 802991a:	9a06      	ldr	r2, [sp, #24]
 802991c:	9b07      	ldr	r3, [sp, #28]
 802991e:	f7ff fb8b 	bl	8029038 <__ieee754_pow+0xe4>
 8029922:	0019      	movs	r1, r3
 8029924:	e7f9      	b.n	802991a <__ieee754_pow+0x9c6>
 8029926:	2300      	movs	r3, #0
 8029928:	4c15      	ldr	r4, [pc, #84]	@ (8029980 <__ieee754_pow+0xa2c>)
 802992a:	9300      	str	r3, [sp, #0]
 802992c:	9401      	str	r4, [sp, #4]
 802992e:	f7ff fbc8 	bl	80290c2 <__ieee754_pow+0x16e>
 8029932:	46c0      	nop			@ (mov r8, r8)
 8029934:	3fe00000 	.word	0x3fe00000
 8029938:	fffffc02 	.word	0xfffffc02
 802993c:	fffffc01 	.word	0xfffffc01
 8029940:	fff00000 	.word	0xfff00000
 8029944:	3fe62e43 	.word	0x3fe62e43
 8029948:	fefa39ef 	.word	0xfefa39ef
 802994c:	3fe62e42 	.word	0x3fe62e42
 8029950:	0ca86c39 	.word	0x0ca86c39
 8029954:	be205c61 	.word	0xbe205c61
 8029958:	72bea4d0 	.word	0x72bea4d0
 802995c:	3e663769 	.word	0x3e663769
 8029960:	c5d26bf1 	.word	0xc5d26bf1
 8029964:	3ebbbd41 	.word	0x3ebbbd41
 8029968:	af25de2c 	.word	0xaf25de2c
 802996c:	3f11566a 	.word	0x3f11566a
 8029970:	16bebd93 	.word	0x16bebd93
 8029974:	3f66c16c 	.word	0x3f66c16c
 8029978:	5555553e 	.word	0x5555553e
 802997c:	3fc55555 	.word	0x3fc55555
 8029980:	3ff00000 	.word	0x3ff00000

08029984 <fabs>:
 8029984:	0049      	lsls	r1, r1, #1
 8029986:	084b      	lsrs	r3, r1, #1
 8029988:	0019      	movs	r1, r3
 802998a:	4770      	bx	lr

0802998c <__ieee754_expf>:
 802998c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802998e:	21ff      	movs	r1, #255	@ 0xff
 8029990:	0043      	lsls	r3, r0, #1
 8029992:	1c04      	adds	r4, r0, #0
 8029994:	085b      	lsrs	r3, r3, #1
 8029996:	05c9      	lsls	r1, r1, #23
 8029998:	428b      	cmp	r3, r1
 802999a:	d904      	bls.n	80299a6 <__ieee754_expf+0x1a>
 802999c:	1c01      	adds	r1, r0, #0
 802999e:	1c20      	adds	r0, r4, #0
 80299a0:	f7d6 ff8e 	bl	80008c0 <__aeabi_fadd>
 80299a4:	e00d      	b.n	80299c2 <__ieee754_expf+0x36>
 80299a6:	0fc6      	lsrs	r6, r0, #31
 80299a8:	428b      	cmp	r3, r1
 80299aa:	d104      	bne.n	80299b6 <__ieee754_expf+0x2a>
 80299ac:	2e00      	cmp	r6, #0
 80299ae:	d000      	beq.n	80299b2 <__ieee754_expf+0x26>
 80299b0:	e0ba      	b.n	8029b28 <__ieee754_expf+0x19c>
 80299b2:	1c20      	adds	r0, r4, #0
 80299b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80299b6:	495d      	ldr	r1, [pc, #372]	@ (8029b2c <__ieee754_expf+0x1a0>)
 80299b8:	4288      	cmp	r0, r1
 80299ba:	dd04      	ble.n	80299c6 <__ieee754_expf+0x3a>
 80299bc:	2000      	movs	r0, #0
 80299be:	f000 f98a 	bl	8029cd6 <__math_oflowf>
 80299c2:	1c04      	adds	r4, r0, #0
 80299c4:	e7f5      	b.n	80299b2 <__ieee754_expf+0x26>
 80299c6:	2800      	cmp	r0, #0
 80299c8:	da06      	bge.n	80299d8 <__ieee754_expf+0x4c>
 80299ca:	4a59      	ldr	r2, [pc, #356]	@ (8029b30 <__ieee754_expf+0x1a4>)
 80299cc:	4293      	cmp	r3, r2
 80299ce:	d903      	bls.n	80299d8 <__ieee754_expf+0x4c>
 80299d0:	2000      	movs	r0, #0
 80299d2:	f000 f97a 	bl	8029cca <__math_uflowf>
 80299d6:	e7f4      	b.n	80299c2 <__ieee754_expf+0x36>
 80299d8:	4a56      	ldr	r2, [pc, #344]	@ (8029b34 <__ieee754_expf+0x1a8>)
 80299da:	4293      	cmp	r3, r2
 80299dc:	d96e      	bls.n	8029abc <__ieee754_expf+0x130>
 80299de:	4a56      	ldr	r2, [pc, #344]	@ (8029b38 <__ieee754_expf+0x1ac>)
 80299e0:	00b5      	lsls	r5, r6, #2
 80299e2:	4293      	cmp	r3, r2
 80299e4:	d84e      	bhi.n	8029a84 <__ieee754_expf+0xf8>
 80299e6:	4b55      	ldr	r3, [pc, #340]	@ (8029b3c <__ieee754_expf+0x1b0>)
 80299e8:	1c20      	adds	r0, r4, #0
 80299ea:	5959      	ldr	r1, [r3, r5]
 80299ec:	f7d7 fc82 	bl	80012f4 <__aeabi_fsub>
 80299f0:	4b53      	ldr	r3, [pc, #332]	@ (8029b40 <__ieee754_expf+0x1b4>)
 80299f2:	1c07      	adds	r7, r0, #0
 80299f4:	595b      	ldr	r3, [r3, r5]
 80299f6:	2501      	movs	r5, #1
 80299f8:	4075      	eors	r5, r6
 80299fa:	9300      	str	r3, [sp, #0]
 80299fc:	1bad      	subs	r5, r5, r6
 80299fe:	9900      	ldr	r1, [sp, #0]
 8029a00:	1c38      	adds	r0, r7, #0
 8029a02:	f7d7 fc77 	bl	80012f4 <__aeabi_fsub>
 8029a06:	1c04      	adds	r4, r0, #0
 8029a08:	1c21      	adds	r1, r4, #0
 8029a0a:	1c20      	adds	r0, r4, #0
 8029a0c:	f7d7 fb18 	bl	8001040 <__aeabi_fmul>
 8029a10:	494c      	ldr	r1, [pc, #304]	@ (8029b44 <__ieee754_expf+0x1b8>)
 8029a12:	1c06      	adds	r6, r0, #0
 8029a14:	f7d7 fb14 	bl	8001040 <__aeabi_fmul>
 8029a18:	494b      	ldr	r1, [pc, #300]	@ (8029b48 <__ieee754_expf+0x1bc>)
 8029a1a:	f7d7 fc6b 	bl	80012f4 <__aeabi_fsub>
 8029a1e:	1c31      	adds	r1, r6, #0
 8029a20:	f7d7 fb0e 	bl	8001040 <__aeabi_fmul>
 8029a24:	4949      	ldr	r1, [pc, #292]	@ (8029b4c <__ieee754_expf+0x1c0>)
 8029a26:	f7d6 ff4b 	bl	80008c0 <__aeabi_fadd>
 8029a2a:	1c31      	adds	r1, r6, #0
 8029a2c:	f7d7 fb08 	bl	8001040 <__aeabi_fmul>
 8029a30:	4947      	ldr	r1, [pc, #284]	@ (8029b50 <__ieee754_expf+0x1c4>)
 8029a32:	f7d7 fc5f 	bl	80012f4 <__aeabi_fsub>
 8029a36:	1c31      	adds	r1, r6, #0
 8029a38:	f7d7 fb02 	bl	8001040 <__aeabi_fmul>
 8029a3c:	4945      	ldr	r1, [pc, #276]	@ (8029b54 <__ieee754_expf+0x1c8>)
 8029a3e:	f7d6 ff3f 	bl	80008c0 <__aeabi_fadd>
 8029a42:	1c31      	adds	r1, r6, #0
 8029a44:	f7d7 fafc 	bl	8001040 <__aeabi_fmul>
 8029a48:	1c01      	adds	r1, r0, #0
 8029a4a:	1c20      	adds	r0, r4, #0
 8029a4c:	f7d7 fc52 	bl	80012f4 <__aeabi_fsub>
 8029a50:	1c01      	adds	r1, r0, #0
 8029a52:	1c06      	adds	r6, r0, #0
 8029a54:	1c20      	adds	r0, r4, #0
 8029a56:	f7d7 faf3 	bl	8001040 <__aeabi_fmul>
 8029a5a:	9001      	str	r0, [sp, #4]
 8029a5c:	2d00      	cmp	r5, #0
 8029a5e:	d140      	bne.n	8029ae2 <__ieee754_expf+0x156>
 8029a60:	2180      	movs	r1, #128	@ 0x80
 8029a62:	1c30      	adds	r0, r6, #0
 8029a64:	05c9      	lsls	r1, r1, #23
 8029a66:	f7d7 fc45 	bl	80012f4 <__aeabi_fsub>
 8029a6a:	1c01      	adds	r1, r0, #0
 8029a6c:	9801      	ldr	r0, [sp, #4]
 8029a6e:	f7d7 f919 	bl	8000ca4 <__aeabi_fdiv>
 8029a72:	1c21      	adds	r1, r4, #0
 8029a74:	f7d7 fc3e 	bl	80012f4 <__aeabi_fsub>
 8029a78:	1c01      	adds	r1, r0, #0
 8029a7a:	20fe      	movs	r0, #254	@ 0xfe
 8029a7c:	0580      	lsls	r0, r0, #22
 8029a7e:	f7d7 fc39 	bl	80012f4 <__aeabi_fsub>
 8029a82:	e79e      	b.n	80299c2 <__ieee754_expf+0x36>
 8029a84:	4934      	ldr	r1, [pc, #208]	@ (8029b58 <__ieee754_expf+0x1cc>)
 8029a86:	1c20      	adds	r0, r4, #0
 8029a88:	f7d7 fada 	bl	8001040 <__aeabi_fmul>
 8029a8c:	4b33      	ldr	r3, [pc, #204]	@ (8029b5c <__ieee754_expf+0x1d0>)
 8029a8e:	5959      	ldr	r1, [r3, r5]
 8029a90:	f7d6 ff16 	bl	80008c0 <__aeabi_fadd>
 8029a94:	f7d7 fea8 	bl	80017e8 <__aeabi_f2iz>
 8029a98:	0005      	movs	r5, r0
 8029a9a:	f7d7 fec5 	bl	8001828 <__aeabi_i2f>
 8029a9e:	4930      	ldr	r1, [pc, #192]	@ (8029b60 <__ieee754_expf+0x1d4>)
 8029aa0:	1c06      	adds	r6, r0, #0
 8029aa2:	f7d7 facd 	bl	8001040 <__aeabi_fmul>
 8029aa6:	1c01      	adds	r1, r0, #0
 8029aa8:	1c20      	adds	r0, r4, #0
 8029aaa:	f7d7 fc23 	bl	80012f4 <__aeabi_fsub>
 8029aae:	492d      	ldr	r1, [pc, #180]	@ (8029b64 <__ieee754_expf+0x1d8>)
 8029ab0:	1c07      	adds	r7, r0, #0
 8029ab2:	1c30      	adds	r0, r6, #0
 8029ab4:	f7d7 fac4 	bl	8001040 <__aeabi_fmul>
 8029ab8:	9000      	str	r0, [sp, #0]
 8029aba:	e7a0      	b.n	80299fe <__ieee754_expf+0x72>
 8029abc:	22d0      	movs	r2, #208	@ 0xd0
 8029abe:	0592      	lsls	r2, r2, #22
 8029ac0:	4293      	cmp	r3, r2
 8029ac2:	d20c      	bcs.n	8029ade <__ieee754_expf+0x152>
 8029ac4:	4928      	ldr	r1, [pc, #160]	@ (8029b68 <__ieee754_expf+0x1dc>)
 8029ac6:	1c20      	adds	r0, r4, #0
 8029ac8:	f7d6 fefa 	bl	80008c0 <__aeabi_fadd>
 8029acc:	21fe      	movs	r1, #254	@ 0xfe
 8029ace:	0589      	lsls	r1, r1, #22
 8029ad0:	f7d6 fd42 	bl	8000558 <__aeabi_fcmpgt>
 8029ad4:	1e05      	subs	r5, r0, #0
 8029ad6:	d097      	beq.n	8029a08 <__ieee754_expf+0x7c>
 8029ad8:	21fe      	movs	r1, #254	@ 0xfe
 8029ada:	0589      	lsls	r1, r1, #22
 8029adc:	e75f      	b.n	802999e <__ieee754_expf+0x12>
 8029ade:	2500      	movs	r5, #0
 8029ae0:	e792      	b.n	8029a08 <__ieee754_expf+0x7c>
 8029ae2:	2080      	movs	r0, #128	@ 0x80
 8029ae4:	1c31      	adds	r1, r6, #0
 8029ae6:	05c0      	lsls	r0, r0, #23
 8029ae8:	f7d7 fc04 	bl	80012f4 <__aeabi_fsub>
 8029aec:	1c01      	adds	r1, r0, #0
 8029aee:	9801      	ldr	r0, [sp, #4]
 8029af0:	f7d7 f8d8 	bl	8000ca4 <__aeabi_fdiv>
 8029af4:	1c01      	adds	r1, r0, #0
 8029af6:	9800      	ldr	r0, [sp, #0]
 8029af8:	f7d7 fbfc 	bl	80012f4 <__aeabi_fsub>
 8029afc:	1c39      	adds	r1, r7, #0
 8029afe:	f7d7 fbf9 	bl	80012f4 <__aeabi_fsub>
 8029b02:	1c01      	adds	r1, r0, #0
 8029b04:	20fe      	movs	r0, #254	@ 0xfe
 8029b06:	0580      	lsls	r0, r0, #22
 8029b08:	f7d7 fbf4 	bl	80012f4 <__aeabi_fsub>
 8029b0c:	002b      	movs	r3, r5
 8029b0e:	337d      	adds	r3, #125	@ 0x7d
 8029b10:	db02      	blt.n	8029b18 <__ieee754_expf+0x18c>
 8029b12:	05ec      	lsls	r4, r5, #23
 8029b14:	1824      	adds	r4, r4, r0
 8029b16:	e74c      	b.n	80299b2 <__ieee754_expf+0x26>
 8029b18:	21d8      	movs	r1, #216	@ 0xd8
 8029b1a:	3564      	adds	r5, #100	@ 0x64
 8029b1c:	05ed      	lsls	r5, r5, #23
 8029b1e:	1828      	adds	r0, r5, r0
 8029b20:	0509      	lsls	r1, r1, #20
 8029b22:	f7d7 fa8d 	bl	8001040 <__aeabi_fmul>
 8029b26:	e74c      	b.n	80299c2 <__ieee754_expf+0x36>
 8029b28:	2400      	movs	r4, #0
 8029b2a:	e742      	b.n	80299b2 <__ieee754_expf+0x26>
 8029b2c:	42b17217 	.word	0x42b17217
 8029b30:	42cff1b5 	.word	0x42cff1b5
 8029b34:	3eb17218 	.word	0x3eb17218
 8029b38:	3f851591 	.word	0x3f851591
 8029b3c:	0802ecb8 	.word	0x0802ecb8
 8029b40:	0802ecb0 	.word	0x0802ecb0
 8029b44:	3331bb4c 	.word	0x3331bb4c
 8029b48:	35ddea0e 	.word	0x35ddea0e
 8029b4c:	388ab355 	.word	0x388ab355
 8029b50:	3b360b61 	.word	0x3b360b61
 8029b54:	3e2aaaab 	.word	0x3e2aaaab
 8029b58:	3fb8aa3b 	.word	0x3fb8aa3b
 8029b5c:	0802ecc0 	.word	0x0802ecc0
 8029b60:	3f317180 	.word	0x3f317180
 8029b64:	3717f7d1 	.word	0x3717f7d1
 8029b68:	7149f2ca 	.word	0x7149f2ca

08029b6c <scalbn>:
 8029b6c:	004b      	lsls	r3, r1, #1
 8029b6e:	b570      	push	{r4, r5, r6, lr}
 8029b70:	0d5b      	lsrs	r3, r3, #21
 8029b72:	0014      	movs	r4, r2
 8029b74:	000d      	movs	r5, r1
 8029b76:	2b00      	cmp	r3, #0
 8029b78:	d10f      	bne.n	8029b9a <scalbn+0x2e>
 8029b7a:	004b      	lsls	r3, r1, #1
 8029b7c:	085b      	lsrs	r3, r3, #1
 8029b7e:	4303      	orrs	r3, r0
 8029b80:	d012      	beq.n	8029ba8 <scalbn+0x3c>
 8029b82:	4b23      	ldr	r3, [pc, #140]	@ (8029c10 <scalbn+0xa4>)
 8029b84:	2200      	movs	r2, #0
 8029b86:	f7d8 fee5 	bl	8002954 <__aeabi_dmul>
 8029b8a:	4b22      	ldr	r3, [pc, #136]	@ (8029c14 <scalbn+0xa8>)
 8029b8c:	429c      	cmp	r4, r3
 8029b8e:	da0c      	bge.n	8029baa <scalbn+0x3e>
 8029b90:	4a21      	ldr	r2, [pc, #132]	@ (8029c18 <scalbn+0xac>)
 8029b92:	4b22      	ldr	r3, [pc, #136]	@ (8029c1c <scalbn+0xb0>)
 8029b94:	f7d8 fede 	bl	8002954 <__aeabi_dmul>
 8029b98:	e006      	b.n	8029ba8 <scalbn+0x3c>
 8029b9a:	4a21      	ldr	r2, [pc, #132]	@ (8029c20 <scalbn+0xb4>)
 8029b9c:	4293      	cmp	r3, r2
 8029b9e:	d108      	bne.n	8029bb2 <scalbn+0x46>
 8029ba0:	0002      	movs	r2, r0
 8029ba2:	000b      	movs	r3, r1
 8029ba4:	f7d7 fed6 	bl	8001954 <__aeabi_dadd>
 8029ba8:	bd70      	pop	{r4, r5, r6, pc}
 8029baa:	000d      	movs	r5, r1
 8029bac:	004b      	lsls	r3, r1, #1
 8029bae:	0d5b      	lsrs	r3, r3, #21
 8029bb0:	3b36      	subs	r3, #54	@ 0x36
 8029bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8029c24 <scalbn+0xb8>)
 8029bb4:	4294      	cmp	r4, r2
 8029bb6:	dd0a      	ble.n	8029bce <scalbn+0x62>
 8029bb8:	4c1b      	ldr	r4, [pc, #108]	@ (8029c28 <scalbn+0xbc>)
 8029bba:	4d1c      	ldr	r5, [pc, #112]	@ (8029c2c <scalbn+0xc0>)
 8029bbc:	2900      	cmp	r1, #0
 8029bbe:	da01      	bge.n	8029bc4 <scalbn+0x58>
 8029bc0:	4c19      	ldr	r4, [pc, #100]	@ (8029c28 <scalbn+0xbc>)
 8029bc2:	4d1b      	ldr	r5, [pc, #108]	@ (8029c30 <scalbn+0xc4>)
 8029bc4:	4a18      	ldr	r2, [pc, #96]	@ (8029c28 <scalbn+0xbc>)
 8029bc6:	4b19      	ldr	r3, [pc, #100]	@ (8029c2c <scalbn+0xc0>)
 8029bc8:	0020      	movs	r0, r4
 8029bca:	0029      	movs	r1, r5
 8029bcc:	e7e2      	b.n	8029b94 <scalbn+0x28>
 8029bce:	18e2      	adds	r2, r4, r3
 8029bd0:	4b18      	ldr	r3, [pc, #96]	@ (8029c34 <scalbn+0xc8>)
 8029bd2:	429a      	cmp	r2, r3
 8029bd4:	dcf0      	bgt.n	8029bb8 <scalbn+0x4c>
 8029bd6:	2a00      	cmp	r2, #0
 8029bd8:	dd05      	ble.n	8029be6 <scalbn+0x7a>
 8029bda:	4b17      	ldr	r3, [pc, #92]	@ (8029c38 <scalbn+0xcc>)
 8029bdc:	0512      	lsls	r2, r2, #20
 8029bde:	402b      	ands	r3, r5
 8029be0:	4313      	orrs	r3, r2
 8029be2:	0019      	movs	r1, r3
 8029be4:	e7e0      	b.n	8029ba8 <scalbn+0x3c>
 8029be6:	0013      	movs	r3, r2
 8029be8:	3335      	adds	r3, #53	@ 0x35
 8029bea:	da08      	bge.n	8029bfe <scalbn+0x92>
 8029bec:	4c0a      	ldr	r4, [pc, #40]	@ (8029c18 <scalbn+0xac>)
 8029bee:	4d0b      	ldr	r5, [pc, #44]	@ (8029c1c <scalbn+0xb0>)
 8029bf0:	2900      	cmp	r1, #0
 8029bf2:	da01      	bge.n	8029bf8 <scalbn+0x8c>
 8029bf4:	4c08      	ldr	r4, [pc, #32]	@ (8029c18 <scalbn+0xac>)
 8029bf6:	4d11      	ldr	r5, [pc, #68]	@ (8029c3c <scalbn+0xd0>)
 8029bf8:	4a07      	ldr	r2, [pc, #28]	@ (8029c18 <scalbn+0xac>)
 8029bfa:	4b08      	ldr	r3, [pc, #32]	@ (8029c1c <scalbn+0xb0>)
 8029bfc:	e7e4      	b.n	8029bc8 <scalbn+0x5c>
 8029bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8029c38 <scalbn+0xcc>)
 8029c00:	3236      	adds	r2, #54	@ 0x36
 8029c02:	401d      	ands	r5, r3
 8029c04:	0512      	lsls	r2, r2, #20
 8029c06:	432a      	orrs	r2, r5
 8029c08:	0011      	movs	r1, r2
 8029c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8029c40 <scalbn+0xd4>)
 8029c0c:	2200      	movs	r2, #0
 8029c0e:	e7c1      	b.n	8029b94 <scalbn+0x28>
 8029c10:	43500000 	.word	0x43500000
 8029c14:	ffff3cb0 	.word	0xffff3cb0
 8029c18:	c2f8f359 	.word	0xc2f8f359
 8029c1c:	01a56e1f 	.word	0x01a56e1f
 8029c20:	000007ff 	.word	0x000007ff
 8029c24:	0000c350 	.word	0x0000c350
 8029c28:	8800759c 	.word	0x8800759c
 8029c2c:	7e37e43c 	.word	0x7e37e43c
 8029c30:	fe37e43c 	.word	0xfe37e43c
 8029c34:	000007fe 	.word	0x000007fe
 8029c38:	800fffff 	.word	0x800fffff
 8029c3c:	81a56e1f 	.word	0x81a56e1f
 8029c40:	3c900000 	.word	0x3c900000

08029c44 <with_errno>:
 8029c44:	b570      	push	{r4, r5, r6, lr}
 8029c46:	000d      	movs	r5, r1
 8029c48:	0016      	movs	r6, r2
 8029c4a:	0004      	movs	r4, r0
 8029c4c:	f7fc f952 	bl	8025ef4 <__errno>
 8029c50:	0029      	movs	r1, r5
 8029c52:	6006      	str	r6, [r0, #0]
 8029c54:	0020      	movs	r0, r4
 8029c56:	bd70      	pop	{r4, r5, r6, pc}

08029c58 <xflow>:
 8029c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029c5a:	0014      	movs	r4, r2
 8029c5c:	001d      	movs	r5, r3
 8029c5e:	2800      	cmp	r0, #0
 8029c60:	d002      	beq.n	8029c68 <xflow+0x10>
 8029c62:	2180      	movs	r1, #128	@ 0x80
 8029c64:	0609      	lsls	r1, r1, #24
 8029c66:	185b      	adds	r3, r3, r1
 8029c68:	9200      	str	r2, [sp, #0]
 8029c6a:	9301      	str	r3, [sp, #4]
 8029c6c:	9a00      	ldr	r2, [sp, #0]
 8029c6e:	9b01      	ldr	r3, [sp, #4]
 8029c70:	0020      	movs	r0, r4
 8029c72:	0029      	movs	r1, r5
 8029c74:	f7d8 fe6e 	bl	8002954 <__aeabi_dmul>
 8029c78:	2222      	movs	r2, #34	@ 0x22
 8029c7a:	f7ff ffe3 	bl	8029c44 <with_errno>
 8029c7e:	b003      	add	sp, #12
 8029c80:	bd30      	pop	{r4, r5, pc}

08029c82 <__math_uflow>:
 8029c82:	2380      	movs	r3, #128	@ 0x80
 8029c84:	b510      	push	{r4, lr}
 8029c86:	2200      	movs	r2, #0
 8029c88:	055b      	lsls	r3, r3, #21
 8029c8a:	f7ff ffe5 	bl	8029c58 <xflow>
 8029c8e:	bd10      	pop	{r4, pc}

08029c90 <__math_oflow>:
 8029c90:	23e0      	movs	r3, #224	@ 0xe0
 8029c92:	b510      	push	{r4, lr}
 8029c94:	2200      	movs	r2, #0
 8029c96:	05db      	lsls	r3, r3, #23
 8029c98:	f7ff ffde 	bl	8029c58 <xflow>
 8029c9c:	bd10      	pop	{r4, pc}

08029c9e <with_errnof>:
 8029c9e:	b570      	push	{r4, r5, r6, lr}
 8029ca0:	000d      	movs	r5, r1
 8029ca2:	1c04      	adds	r4, r0, #0
 8029ca4:	f7fc f926 	bl	8025ef4 <__errno>
 8029ca8:	6005      	str	r5, [r0, #0]
 8029caa:	1c20      	adds	r0, r4, #0
 8029cac:	bd70      	pop	{r4, r5, r6, pc}

08029cae <xflowf>:
 8029cae:	b510      	push	{r4, lr}
 8029cb0:	1c0b      	adds	r3, r1, #0
 8029cb2:	2800      	cmp	r0, #0
 8029cb4:	d002      	beq.n	8029cbc <xflowf+0xe>
 8029cb6:	2380      	movs	r3, #128	@ 0x80
 8029cb8:	061b      	lsls	r3, r3, #24
 8029cba:	18cb      	adds	r3, r1, r3
 8029cbc:	1c18      	adds	r0, r3, #0
 8029cbe:	f7d7 f9bf 	bl	8001040 <__aeabi_fmul>
 8029cc2:	2122      	movs	r1, #34	@ 0x22
 8029cc4:	f7ff ffeb 	bl	8029c9e <with_errnof>
 8029cc8:	bd10      	pop	{r4, pc}

08029cca <__math_uflowf>:
 8029cca:	2180      	movs	r1, #128	@ 0x80
 8029ccc:	b510      	push	{r4, lr}
 8029cce:	0549      	lsls	r1, r1, #21
 8029cd0:	f7ff ffed 	bl	8029cae <xflowf>
 8029cd4:	bd10      	pop	{r4, pc}

08029cd6 <__math_oflowf>:
 8029cd6:	21e0      	movs	r1, #224	@ 0xe0
 8029cd8:	b510      	push	{r4, lr}
 8029cda:	05c9      	lsls	r1, r1, #23
 8029cdc:	f7ff ffe7 	bl	8029cae <xflowf>
 8029ce0:	bd10      	pop	{r4, pc}
	...

08029ce4 <__ieee754_sqrt>:
 8029ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029ce6:	000a      	movs	r2, r1
 8029ce8:	000d      	movs	r5, r1
 8029cea:	496b      	ldr	r1, [pc, #428]	@ (8029e98 <__ieee754_sqrt+0x1b4>)
 8029cec:	0004      	movs	r4, r0
 8029cee:	0003      	movs	r3, r0
 8029cf0:	0008      	movs	r0, r1
 8029cf2:	b087      	sub	sp, #28
 8029cf4:	4028      	ands	r0, r5
 8029cf6:	4288      	cmp	r0, r1
 8029cf8:	d111      	bne.n	8029d1e <__ieee754_sqrt+0x3a>
 8029cfa:	0022      	movs	r2, r4
 8029cfc:	002b      	movs	r3, r5
 8029cfe:	0020      	movs	r0, r4
 8029d00:	0029      	movs	r1, r5
 8029d02:	f7d8 fe27 	bl	8002954 <__aeabi_dmul>
 8029d06:	0002      	movs	r2, r0
 8029d08:	000b      	movs	r3, r1
 8029d0a:	0020      	movs	r0, r4
 8029d0c:	0029      	movs	r1, r5
 8029d0e:	f7d7 fe21 	bl	8001954 <__aeabi_dadd>
 8029d12:	0004      	movs	r4, r0
 8029d14:	000d      	movs	r5, r1
 8029d16:	0020      	movs	r0, r4
 8029d18:	0029      	movs	r1, r5
 8029d1a:	b007      	add	sp, #28
 8029d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029d1e:	2d00      	cmp	r5, #0
 8029d20:	dc11      	bgt.n	8029d46 <__ieee754_sqrt+0x62>
 8029d22:	0069      	lsls	r1, r5, #1
 8029d24:	0849      	lsrs	r1, r1, #1
 8029d26:	4321      	orrs	r1, r4
 8029d28:	d0f5      	beq.n	8029d16 <__ieee754_sqrt+0x32>
 8029d2a:	2000      	movs	r0, #0
 8029d2c:	4285      	cmp	r5, r0
 8029d2e:	d010      	beq.n	8029d52 <__ieee754_sqrt+0x6e>
 8029d30:	0022      	movs	r2, r4
 8029d32:	002b      	movs	r3, r5
 8029d34:	0020      	movs	r0, r4
 8029d36:	0029      	movs	r1, r5
 8029d38:	f7d9 f8f2 	bl	8002f20 <__aeabi_dsub>
 8029d3c:	0002      	movs	r2, r0
 8029d3e:	000b      	movs	r3, r1
 8029d40:	f7d8 f9ce 	bl	80020e0 <__aeabi_ddiv>
 8029d44:	e7e5      	b.n	8029d12 <__ieee754_sqrt+0x2e>
 8029d46:	1528      	asrs	r0, r5, #20
 8029d48:	d115      	bne.n	8029d76 <__ieee754_sqrt+0x92>
 8029d4a:	2480      	movs	r4, #128	@ 0x80
 8029d4c:	2100      	movs	r1, #0
 8029d4e:	0364      	lsls	r4, r4, #13
 8029d50:	e007      	b.n	8029d62 <__ieee754_sqrt+0x7e>
 8029d52:	0ada      	lsrs	r2, r3, #11
 8029d54:	3815      	subs	r0, #21
 8029d56:	055b      	lsls	r3, r3, #21
 8029d58:	2a00      	cmp	r2, #0
 8029d5a:	d0fa      	beq.n	8029d52 <__ieee754_sqrt+0x6e>
 8029d5c:	e7f5      	b.n	8029d4a <__ieee754_sqrt+0x66>
 8029d5e:	0052      	lsls	r2, r2, #1
 8029d60:	3101      	adds	r1, #1
 8029d62:	4222      	tst	r2, r4
 8029d64:	d0fb      	beq.n	8029d5e <__ieee754_sqrt+0x7a>
 8029d66:	1e4c      	subs	r4, r1, #1
 8029d68:	1b00      	subs	r0, r0, r4
 8029d6a:	2420      	movs	r4, #32
 8029d6c:	001d      	movs	r5, r3
 8029d6e:	1a64      	subs	r4, r4, r1
 8029d70:	40e5      	lsrs	r5, r4
 8029d72:	408b      	lsls	r3, r1
 8029d74:	432a      	orrs	r2, r5
 8029d76:	4949      	ldr	r1, [pc, #292]	@ (8029e9c <__ieee754_sqrt+0x1b8>)
 8029d78:	0312      	lsls	r2, r2, #12
 8029d7a:	1844      	adds	r4, r0, r1
 8029d7c:	2180      	movs	r1, #128	@ 0x80
 8029d7e:	0b12      	lsrs	r2, r2, #12
 8029d80:	0349      	lsls	r1, r1, #13
 8029d82:	4311      	orrs	r1, r2
 8029d84:	07c0      	lsls	r0, r0, #31
 8029d86:	d403      	bmi.n	8029d90 <__ieee754_sqrt+0xac>
 8029d88:	0fda      	lsrs	r2, r3, #31
 8029d8a:	0049      	lsls	r1, r1, #1
 8029d8c:	1851      	adds	r1, r2, r1
 8029d8e:	005b      	lsls	r3, r3, #1
 8029d90:	2500      	movs	r5, #0
 8029d92:	1062      	asrs	r2, r4, #1
 8029d94:	0049      	lsls	r1, r1, #1
 8029d96:	2480      	movs	r4, #128	@ 0x80
 8029d98:	9205      	str	r2, [sp, #20]
 8029d9a:	0fda      	lsrs	r2, r3, #31
 8029d9c:	1852      	adds	r2, r2, r1
 8029d9e:	2016      	movs	r0, #22
 8029da0:	0029      	movs	r1, r5
 8029da2:	005b      	lsls	r3, r3, #1
 8029da4:	03a4      	lsls	r4, r4, #14
 8029da6:	190e      	adds	r6, r1, r4
 8029da8:	4296      	cmp	r6, r2
 8029daa:	dc02      	bgt.n	8029db2 <__ieee754_sqrt+0xce>
 8029dac:	1931      	adds	r1, r6, r4
 8029dae:	1b92      	subs	r2, r2, r6
 8029db0:	192d      	adds	r5, r5, r4
 8029db2:	0fde      	lsrs	r6, r3, #31
 8029db4:	0052      	lsls	r2, r2, #1
 8029db6:	3801      	subs	r0, #1
 8029db8:	1992      	adds	r2, r2, r6
 8029dba:	005b      	lsls	r3, r3, #1
 8029dbc:	0864      	lsrs	r4, r4, #1
 8029dbe:	2800      	cmp	r0, #0
 8029dc0:	d1f1      	bne.n	8029da6 <__ieee754_sqrt+0xc2>
 8029dc2:	2620      	movs	r6, #32
 8029dc4:	2780      	movs	r7, #128	@ 0x80
 8029dc6:	0004      	movs	r4, r0
 8029dc8:	9604      	str	r6, [sp, #16]
 8029dca:	063f      	lsls	r7, r7, #24
 8029dcc:	183e      	adds	r6, r7, r0
 8029dce:	46b4      	mov	ip, r6
 8029dd0:	428a      	cmp	r2, r1
 8029dd2:	dc02      	bgt.n	8029dda <__ieee754_sqrt+0xf6>
 8029dd4:	d114      	bne.n	8029e00 <__ieee754_sqrt+0x11c>
 8029dd6:	429e      	cmp	r6, r3
 8029dd8:	d812      	bhi.n	8029e00 <__ieee754_sqrt+0x11c>
 8029dda:	4660      	mov	r0, ip
 8029ddc:	4666      	mov	r6, ip
 8029dde:	19c0      	adds	r0, r0, r7
 8029de0:	9100      	str	r1, [sp, #0]
 8029de2:	2e00      	cmp	r6, #0
 8029de4:	da03      	bge.n	8029dee <__ieee754_sqrt+0x10a>
 8029de6:	43c6      	mvns	r6, r0
 8029de8:	0ff6      	lsrs	r6, r6, #31
 8029dea:	198e      	adds	r6, r1, r6
 8029dec:	9600      	str	r6, [sp, #0]
 8029dee:	1a52      	subs	r2, r2, r1
 8029df0:	4563      	cmp	r3, ip
 8029df2:	4189      	sbcs	r1, r1
 8029df4:	4249      	negs	r1, r1
 8029df6:	1a52      	subs	r2, r2, r1
 8029df8:	4661      	mov	r1, ip
 8029dfa:	1a5b      	subs	r3, r3, r1
 8029dfc:	9900      	ldr	r1, [sp, #0]
 8029dfe:	19e4      	adds	r4, r4, r7
 8029e00:	0fde      	lsrs	r6, r3, #31
 8029e02:	0052      	lsls	r2, r2, #1
 8029e04:	1992      	adds	r2, r2, r6
 8029e06:	9e04      	ldr	r6, [sp, #16]
 8029e08:	005b      	lsls	r3, r3, #1
 8029e0a:	3e01      	subs	r6, #1
 8029e0c:	087f      	lsrs	r7, r7, #1
 8029e0e:	9604      	str	r6, [sp, #16]
 8029e10:	2e00      	cmp	r6, #0
 8029e12:	d1db      	bne.n	8029dcc <__ieee754_sqrt+0xe8>
 8029e14:	431a      	orrs	r2, r3
 8029e16:	d01f      	beq.n	8029e58 <__ieee754_sqrt+0x174>
 8029e18:	4e21      	ldr	r6, [pc, #132]	@ (8029ea0 <__ieee754_sqrt+0x1bc>)
 8029e1a:	4f22      	ldr	r7, [pc, #136]	@ (8029ea4 <__ieee754_sqrt+0x1c0>)
 8029e1c:	6830      	ldr	r0, [r6, #0]
 8029e1e:	6871      	ldr	r1, [r6, #4]
 8029e20:	683a      	ldr	r2, [r7, #0]
 8029e22:	687b      	ldr	r3, [r7, #4]
 8029e24:	9200      	str	r2, [sp, #0]
 8029e26:	9301      	str	r3, [sp, #4]
 8029e28:	6832      	ldr	r2, [r6, #0]
 8029e2a:	6873      	ldr	r3, [r6, #4]
 8029e2c:	9202      	str	r2, [sp, #8]
 8029e2e:	9303      	str	r3, [sp, #12]
 8029e30:	9a00      	ldr	r2, [sp, #0]
 8029e32:	9b01      	ldr	r3, [sp, #4]
 8029e34:	f7d9 f874 	bl	8002f20 <__aeabi_dsub>
 8029e38:	0002      	movs	r2, r0
 8029e3a:	000b      	movs	r3, r1
 8029e3c:	9802      	ldr	r0, [sp, #8]
 8029e3e:	9903      	ldr	r1, [sp, #12]
 8029e40:	f7d6 fb46 	bl	80004d0 <__aeabi_dcmple>
 8029e44:	2800      	cmp	r0, #0
 8029e46:	d007      	beq.n	8029e58 <__ieee754_sqrt+0x174>
 8029e48:	6830      	ldr	r0, [r6, #0]
 8029e4a:	6871      	ldr	r1, [r6, #4]
 8029e4c:	683a      	ldr	r2, [r7, #0]
 8029e4e:	687b      	ldr	r3, [r7, #4]
 8029e50:	1c67      	adds	r7, r4, #1
 8029e52:	d10c      	bne.n	8029e6e <__ieee754_sqrt+0x18a>
 8029e54:	9c04      	ldr	r4, [sp, #16]
 8029e56:	3501      	adds	r5, #1
 8029e58:	4a13      	ldr	r2, [pc, #76]	@ (8029ea8 <__ieee754_sqrt+0x1c4>)
 8029e5a:	106b      	asrs	r3, r5, #1
 8029e5c:	189b      	adds	r3, r3, r2
 8029e5e:	9a05      	ldr	r2, [sp, #20]
 8029e60:	07ed      	lsls	r5, r5, #31
 8029e62:	0864      	lsrs	r4, r4, #1
 8029e64:	0512      	lsls	r2, r2, #20
 8029e66:	4325      	orrs	r5, r4
 8029e68:	0028      	movs	r0, r5
 8029e6a:	18d1      	adds	r1, r2, r3
 8029e6c:	e751      	b.n	8029d12 <__ieee754_sqrt+0x2e>
 8029e6e:	f7d7 fd71 	bl	8001954 <__aeabi_dadd>
 8029e72:	6877      	ldr	r7, [r6, #4]
 8029e74:	6836      	ldr	r6, [r6, #0]
 8029e76:	0002      	movs	r2, r0
 8029e78:	000b      	movs	r3, r1
 8029e7a:	0030      	movs	r0, r6
 8029e7c:	0039      	movs	r1, r7
 8029e7e:	f7d6 fb1d 	bl	80004bc <__aeabi_dcmplt>
 8029e82:	2800      	cmp	r0, #0
 8029e84:	d004      	beq.n	8029e90 <__ieee754_sqrt+0x1ac>
 8029e86:	3402      	adds	r4, #2
 8029e88:	4263      	negs	r3, r4
 8029e8a:	4163      	adcs	r3, r4
 8029e8c:	18ed      	adds	r5, r5, r3
 8029e8e:	e7e3      	b.n	8029e58 <__ieee754_sqrt+0x174>
 8029e90:	2301      	movs	r3, #1
 8029e92:	3401      	adds	r4, #1
 8029e94:	439c      	bics	r4, r3
 8029e96:	e7df      	b.n	8029e58 <__ieee754_sqrt+0x174>
 8029e98:	7ff00000 	.word	0x7ff00000
 8029e9c:	fffffc01 	.word	0xfffffc01
 8029ea0:	0802ecd0 	.word	0x0802ecd0
 8029ea4:	0802ecc8 	.word	0x0802ecc8
 8029ea8:	3fe00000 	.word	0x3fe00000

08029eac <_init>:
 8029eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029eae:	46c0      	nop			@ (mov r8, r8)
 8029eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029eb2:	bc08      	pop	{r3}
 8029eb4:	469e      	mov	lr, r3
 8029eb6:	4770      	bx	lr

08029eb8 <_fini>:
 8029eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029eba:	46c0      	nop			@ (mov r8, r8)
 8029ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029ebe:	bc08      	pop	{r3}
 8029ec0:	469e      	mov	lr, r3
 8029ec2:	4770      	bx	lr
